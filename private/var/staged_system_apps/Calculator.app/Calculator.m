unint64_t sub_100004D98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114850;
  if (!qword_100114850)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100114850);
  }
  return result;
}

uint64_t sub_100004DD4(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC10Calculator11AppDelegate);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  unint64_t v4;

  v3 = type metadata accessor for CalculatorApp(0);
  v4 = sub_10004A1B4();
  static App.main()(v3, v4);
  return 0;
}

uint64_t sub_100004E58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100114A20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100004EA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_1000CD598, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100004EEC(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000CD598, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100004F28(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100004F48(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100005360(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100004F84()
{
  unint64_t result;

  result = qword_100114BE8;
  if (!qword_100114BE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100114BE8);
  }
  return result;
}

unint64_t sub_100004FC8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005360(&qword_1001148C8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000531C(v7, (uint64_t)&v14, &qword_1001148D0);
    v8 = v14;
    result = sub_1000050F4(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_1000054E8(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1000050F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  type metadata accessor for CFString(0);
  v3 = v2;
  v4 = sub_10001E6A4();
  _CFObject.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_1000051B8(a1, v5);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_100008164(a1, &qword_100114088, (uint64_t)&unk_100108620);
}

uint64_t sub_100005178(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000051B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString(0);
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_10001E6A4();
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_1000052E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10000531C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005360(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100005360(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_1000053A4(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_100005408(a1, a2, v4);
}

unint64_t sub_100005408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

_OWORD *sub_1000054E8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

Swift::Int sub_1000054F8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_1000CD598, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100005550(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005560(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100005590(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

__n128 initializeWithTake for PresentModeMenuAction(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t sub_1000055B4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000055BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000055C4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000055CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000055D4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000055DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100005608(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000564C(uint64_t a1, uint64_t a2)
{
  return sub_100007118(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100005658()
{
  return sub_100005178(&qword_100114098, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1000CD56C);
}

uint64_t sub_100005684()
{
  return sub_100005178((unint64_t *)&qword_100114090, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_1000CD5C4);
}

uint64_t sub_1000056EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t (*v21)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  uint64_t (**v22)@<X0>(uint64_t *@<X0>, uint64_t@<X8>);
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  v3 = sub_100005360(&qword_100113FB8);
  __chkstk_darwin(v3, v4);
  v6 = (_QWORD *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005360(&qword_100113FC0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v6 = static Alignment.center.getter(v11);
  v6[1] = v12;
  v13 = sub_100005360(&qword_100113FC8);
  sub_1000058CC(v1, (_QWORD *)((char *)v6 + *(int *)(v13 + 44)));
  v14 = swift_allocObject(&unk_100108480, 120, 7);
  v15 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v14 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v14 + 96) = v15;
  *(_QWORD *)(v14 + 112) = *(_QWORD *)(v1 + 96);
  v16 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v14 + 32) = v16;
  v17 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v14 + 64) = v17;
  v18 = sub_100007AC4((uint64_t *)v1);
  v19 = static Alignment.center.getter(v18);
  v21 = v20;
  sub_10000531C((uint64_t)v6, (uint64_t)v10, &qword_100113FB8);
  v22 = (uint64_t (**)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))&v10[*(int *)(v7 + 36)];
  *v22 = sub_100007ABC;
  v22[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v14;
  v22[2] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v19;
  v22[3] = v21;
  sub_100004F48((uint64_t)v6, &qword_100113FB8);
  v23 = *(_OWORD *)(v1 + 64);
  v31 = *(_OWORD *)(v1 + 48);
  v32 = v23;
  v33 = *(_QWORD *)(v1 + 80);
  v24 = sub_100005360(&qword_100113FD0);
  v25 = State.wrappedValue.getter(&v34, v24);
  v30 = v34;
  v26 = v35;
  v27 = v36;
  v28 = static Edge.Set.all.getter(v25);
  v31 = v30;
  *(_QWORD *)&v32 = v26;
  *((_QWORD *)&v32 + 1) = v27;
  LOBYTE(v33) = 0;
  sub_100005360(&qword_100113FD8);
  SafeAreaPaddingModifier.init(edges:insets:)(v28, &v31);
  return sub_100007CD8((uint64_t)v10, a1, &qword_100113FC0);
}

uint64_t *sub_1000058CC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  void *v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _BYTE v87[12];
  int v88;
  double v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  _OWORD *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t KeyPath;
  int v114;
  uint64_t v115;
  _BYTE v116[7];
  _BYTE v117[7];
  char v118;
  char v119;
  char v120;
  char v121;
  char v122;
  _QWORD v123[2];
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  char v131;
  _OWORD v132[9];
  char v133;
  _QWORD v134[2];
  char v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  char v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  char v146;
  char v147;
  char v148;
  _BYTE v149[7];
  char v150;
  _BYTE v151[7];
  _BYTE v152[7];
  _BYTE v153[7];
  _BYTE v154[7];
  _QWORD v155[40];
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164[8];
  char v165;
  _BYTE v166[7];
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  _BYTE v172[7];
  uint64_t v173;
  uint64_t v174;

  v109 = a2;
  v94 = sub_100005360(&qword_100113FE0);
  __chkstk_darwin(v94, v3);
  v5 = (uint64_t *)&v87[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for LayoutDirection(0);
  v96 = *(_QWORD *)(v6 - 8);
  v97 = v6;
  __chkstk_darwin(v6, v7);
  v95 = &v87[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v93 = sub_100005360(&qword_100114008);
  __chkstk_darwin(v93, v9);
  v108 = &v87[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11, v12);
  v107 = &v87[-v13];
  v14 = *(_OWORD *)(a1 + 64);
  v132[0] = *(_OWORD *)(a1 + 48);
  v132[1] = v14;
  *(_QWORD *)&v132[2] = *(_QWORD *)(a1 + 80);
  v15 = sub_100005360(&qword_100113FD0);
  State.projectedValue.getter(v155, v15);
  v101 = v155[1];
  v102 = v155[0];
  v105 = v155[3];
  v106 = v155[2];
  v103 = v155[5];
  v104 = v155[4];
  v132[0] = *(_OWORD *)(a1 + 88);
  v16 = sub_100005360(&qword_100113FF8);
  v17 = State.projectedValue.getter(v155, v16);
  v98 = v155[0];
  v115 = v155[1];
  v114 = LOBYTE(v155[2]);
  v18 = static Alignment.center.getter(v17);
  v99 = v19;
  v100 = v18;
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(_BYTE *)(a1 + 40);
  sub_1000076D0(v20, v21);
  v22 = sub_1000436D8(v20, v21);
  sub_100007720(v20, v21);
  if ((v22 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1000CD350);
    v23 = type metadata accessor for CalculatorViewModel(0);
    v24 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v112 = Environment.init<A>(_:)(v23, v23, v24);
    v110 = 0;
    v111 = v25 & 1;
  }
  else
  {
    v112 = 0;
    KeyPath = 0;
    v111 = 0;
    v110 = 65280;
  }
  v92 = static HorizontalAlignment.center.getter();
  v26 = static VerticalAlignment.center.getter();
  sub_1000060A4(a1, (uint64_t)v155);
  v122 = 1;
  v121 = v155[2];
  v120 = v155[4];
  v119 = v155[6];
  v118 = v155[13];
  v123[0] = v26;
  v123[1] = 0;
  LOBYTE(v124) = 1;
  *((_QWORD *)&v124 + 1) = v155[0];
  *(_QWORD *)&v125 = v155[1];
  BYTE8(v125) = v155[2];
  *(_QWORD *)&v126 = v155[3];
  BYTE8(v126) = v155[4];
  *(_QWORD *)&v127 = v155[5];
  BYTE8(v127) = v155[6];
  v128 = *(_OWORD *)&v155[7];
  v129 = *(_OWORD *)&v155[9];
  v130 = *(_OWORD *)&v155[11];
  v131 = v155[13];
  v133 = 1;
  *(_OWORD *)((char *)v132 + 7) = (unint64_t)v26;
  *(_OWORD *)((char *)&v132[4] + 7) = v127;
  *(_OWORD *)((char *)&v132[3] + 7) = v126;
  *(_OWORD *)((char *)&v132[2] + 7) = v125;
  *(_OWORD *)((char *)&v132[1] + 7) = v124;
  BYTE7(v132[8]) = v155[13];
  *(_OWORD *)((char *)&v132[7] + 7) = *(_OWORD *)&v155[11];
  *(_OWORD *)((char *)&v132[6] + 7) = *(_OWORD *)&v155[9];
  *(_OWORD *)((char *)&v132[5] + 7) = *(_OWORD *)&v155[7];
  v91 = 1;
  v134[0] = v26;
  v134[1] = 0;
  v135 = 1;
  v136 = v155[0];
  v137 = v155[1];
  v138 = v155[2];
  v139 = v155[3];
  v140 = v155[4];
  v141 = v155[5];
  v142 = v155[6];
  v143 = *(_OWORD *)&v155[7];
  v144 = *(_OWORD *)&v155[9];
  v145 = *(_OWORD *)&v155[11];
  v146 = v155[13];
  sub_100007C3C((uint64_t)v123);
  v27 = sub_100007C70((uint64_t)v134);
  v147 = 1;
  v90 = static Edge.Set.vertical.getter(v27);
  v28 = *(_QWORD *)(a1 + 16);
  v29 = *(_BYTE *)(a1 + 24);
  v30 = swift_retain(v28);
  v31 = sub_1000436BC(v30, v29);
  swift_release(v28);
  sub_1000A5788();
  v33 = v32;
  v34 = swift_release(v31);
  v89 = EdgeInsets.init(_all:)(v34, v33);
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v148 = 0;
  v88 = static Edge.Set.horizontal.getter();
  v41 = swift_retain(v28);
  v42 = sub_1000436BC(v41, v29);
  swift_release(v28);
  sub_1000A5788();
  v44 = v43;
  v45 = swift_release(v42);
  v46 = EdgeInsets.init(_all:)(v45, v44);
  v48 = v47;
  v50 = v49;
  v52 = v51;
  v53 = v148;
  v150 = 0;
  LOBYTE(v42) = static Edge.Set.horizontal.getter();
  v54 = swift_retain(v28);
  v55 = sub_1000436BC(v54, v29);
  swift_release(v28);
  sub_1000A5868(v55);
  v57 = v56;
  v58 = swift_release(v55);
  v59 = EdgeInsets.init(_all:)(v58, v57);
  v155[0] = v92;
  v155[1] = 0;
  LOBYTE(v155[2]) = 1;
  *(_DWORD *)((char *)&v155[2] + 1) = *(_DWORD *)v149;
  HIDWORD(v155[2]) = *(_DWORD *)&v149[3];
  v155[3] = 0;
  LOBYTE(v155[4]) = v91;
  *(_OWORD *)((char *)&v155[14] + 1) = v132[5];
  *(_OWORD *)((char *)&v155[16] + 1) = v132[6];
  *(_OWORD *)((char *)&v155[18] + 1) = v132[7];
  *(_QWORD *)((char *)&v155[20] + 1) = *(_QWORD *)&v132[8];
  *(_OWORD *)((char *)&v155[6] + 1) = v132[1];
  *(_OWORD *)((char *)&v155[8] + 1) = v132[2];
  *(_OWORD *)((char *)&v155[10] + 1) = v132[3];
  *(_OWORD *)((char *)&v155[12] + 1) = v132[4];
  *(_OWORD *)((char *)&v155[4] + 1) = v132[0];
  *(_DWORD *)((char *)&v155[21] + 1) = *(_DWORD *)v154;
  HIDWORD(v155[21]) = *(_DWORD *)&v154[3];
  LOBYTE(v155[22]) = v90;
  *(_DWORD *)((char *)&v155[22] + 1) = *(_DWORD *)v153;
  HIDWORD(v155[22]) = *(_DWORD *)&v153[3];
  *(double *)&v155[23] = v89;
  v155[24] = v36;
  v155[25] = v38;
  v155[26] = v40;
  LOBYTE(v155[27]) = v53;
  *(_DWORD *)((char *)&v155[27] + 1) = *(_DWORD *)v152;
  HIDWORD(v155[27]) = *(_DWORD *)&v152[3];
  LOBYTE(v155[28]) = v88;
  HIDWORD(v155[28]) = *(_DWORD *)&v151[3];
  *(_DWORD *)((char *)&v155[28] + 1) = *(_DWORD *)v151;
  *(double *)&v155[29] = v46;
  v155[30] = v48;
  v155[31] = v50;
  v155[32] = v52;
  LOBYTE(v155[33]) = v150;
  LOBYTE(v155[34]) = v42;
  *(double *)&v155[35] = v59;
  v155[36] = v60;
  v155[37] = v61;
  v155[38] = v62;
  LOBYTE(v155[39]) = 0;
  v63 = swift_getKeyPath(&unk_1000CD2A8);
  v65 = v95;
  v64 = v96;
  v66 = v97;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v96 + 104))(v95, enum case for LayoutDirection.leftToRight(_:), v97);
  (*(void (**)(char *, _BYTE *, uint64_t))(v64 + 16))((char *)v5 + *(int *)(v94 + 28), v65, v66);
  *v5 = v63;
  v67 = v108;
  sub_10000531C((uint64_t)v5, (uint64_t)&v108[*(int *)(v93 + 36)], &qword_100113FE0);
  memcpy(v67, v155, 0x139uLL);
  sub_100007CA4((uint64_t)v155);
  sub_100004F48((uint64_t)v5, &qword_100113FE0);
  (*(void (**)(_BYTE *, uint64_t))(v64 + 8))(v65, v66);
  sub_100007C70((uint64_t)v123);
  v68 = v107;
  sub_100007CD8((uint64_t)v67, (uint64_t)v107, &qword_100114008);
  sub_10000531C((uint64_t)v68, (uint64_t)v67, &qword_100114008);
  v70 = v101;
  v69 = v102;
  *(_QWORD *)&v156 = v102;
  *((_QWORD *)&v156 + 1) = v101;
  v72 = v105;
  v71 = v106;
  *(_QWORD *)&v157 = v106;
  *((_QWORD *)&v157 + 1) = v105;
  v74 = v103;
  v73 = v104;
  *(_QWORD *)&v158 = v104;
  *((_QWORD *)&v158 + 1) = v103;
  v75 = v98;
  *(_QWORD *)&v159 = v98;
  *((_QWORD *)&v159 + 1) = v115;
  LOBYTE(v160) = v114;
  *(_DWORD *)((char *)&v160 + 1) = *(_DWORD *)v117;
  DWORD1(v160) = *(_DWORD *)&v117[3];
  *((_QWORD *)&v160 + 1) = KeyPath;
  *(_QWORD *)&v161 = 0;
  v76 = v109;
  *((_QWORD *)&v161 + 1) = v110;
  *(_QWORD *)&v162 = v112;
  BYTE8(v162) = v111;
  HIDWORD(v162) = *(_DWORD *)&v116[3];
  *(_DWORD *)((char *)&v162 + 9) = *(_DWORD *)v116;
  v78 = v99;
  v77 = v100;
  *(_QWORD *)&v163 = v100;
  *((_QWORD *)&v163 + 1) = v99;
  v79 = v156;
  v80 = v157;
  v81 = v159;
  v109[2] = v158;
  v76[3] = v81;
  *v76 = v79;
  v76[1] = v80;
  v82 = v160;
  v83 = v161;
  v84 = v163;
  v76[6] = v162;
  v76[7] = v84;
  v76[4] = v82;
  v76[5] = v83;
  v85 = sub_100005360(&qword_100114010);
  sub_10000531C((uint64_t)v67, (uint64_t)v76 + *(int *)(v85 + 48), &qword_100114008);
  sub_100007D1C((uint64_t *)&v156);
  sub_100004F48((uint64_t)v68, &qword_100114008);
  sub_100004F48((uint64_t)v67, &qword_100114008);
  v164[0] = v69;
  v164[1] = v70;
  v164[2] = v71;
  v164[3] = v72;
  v164[4] = v73;
  v164[5] = v74;
  v164[6] = v75;
  v164[7] = v115;
  v165 = v114;
  *(_DWORD *)v166 = *(_DWORD *)v117;
  *(_DWORD *)&v166[3] = *(_DWORD *)&v117[3];
  v167 = KeyPath;
  v168 = 0;
  v169 = v110;
  v170 = v112;
  v171 = v111;
  *(_DWORD *)&v172[3] = *(_DWORD *)&v116[3];
  *(_DWORD *)v172 = *(_DWORD *)v116;
  v173 = v77;
  v174 = v78;
  return sub_100007E10(v164);
}

uint64_t sub_1000060A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_BYTE *)(a1 + 24);
  v5 = swift_retain(v3);
  v6 = sub_1000436BC(v5, v4);
  swift_release(v3);
  v7 = (void *)objc_opt_self(UIDevice);
  v8 = objc_msgSend(v7, "currentDevice");
  v9 = objc_msgSend(v8, "userInterfaceIdiom");

  if (v9 == (id)1)
  {
    swift_release(v6);
LABEL_4:
    if (qword_1001139A0 != -1)
      swift_once(&qword_1001139A0, sub_10001B768);
    v12 = &qword_10011F828;
    goto LABEL_10;
  }
  v10 = objc_msgSend(v7, "currentDevice");
  v11 = objc_msgSend(v10, "userInterfaceIdiom");
  swift_release(v6);

  if (v11 == (id)6)
    goto LABEL_4;
  if (qword_1001139E0 != -1)
    swift_once(&qword_1001139E0, sub_10001B7EC);
  v12 = &qword_10011F868;
LABEL_10:
  v13 = *v12;
  v14 = static HorizontalAlignment.center.getter();
  v15 = static Alignment.center.getter();
  v17 = _FrameLayout.init(width:height:alignment:)(&v25, v13, 0, v13, 0, v15, v16);
  v18 = v25;
  v19 = v26;
  v20 = v27;
  v21 = v28;
  v22 = v29;
  v23 = v30;
  result = static Anchor.Source<A>.bounds.getter(v17);
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v18;
  *(_BYTE *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v20;
  *(_BYTE *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v22;
  *(_QWORD *)(a2 + 64) = v23;
  *(_QWORD *)(a2 + 72) = result;
  *(_QWORD *)(a2 + 80) = sub_10000626C;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 104) = 1;
  return result;
}

uint64_t sub_10000626C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = a1;
  return swift_retain(a1);
}

uint64_t sub_100006274@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  int8x8_t (**v19)@<D0>(uint64_t@<X8>);
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v32 = sub_100005360(&qword_100113FE0);
  __chkstk_darwin(v32, v6);
  v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for LayoutDirection(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360(&qword_100113FE8);
  v17 = __chkstk_darwin(v14, v15);
  v19 = (int8x8_t (**)@<D0>(uint64_t@<X8>))((char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *a1;
  if (!*a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v16 + 56))(a3, 1, 1, v14, v17);
  v31 = v16;
  v21 = swift_allocObject(&unk_1001084A8, 128, 7);
  v22 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v21 + 72) = *(_OWORD *)(a2 + 48);
  v23 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v21 + 88) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v21 + 104) = v23;
  v24 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v21 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(v21 + 40) = v24;
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 120) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(v21 + 56) = v22;
  KeyPath = swift_getKeyPath(&unk_1000CD2A8);
  v30 = a3;
  v26 = KeyPath;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for LayoutDirection.leftToRight(_:), v9);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))((char *)v8 + *(int *)(v32 + 28), v13, v9);
  *v8 = v26;
  sub_10000531C((uint64_t)v8, (uint64_t)v19 + *(int *)(v14 + 36), &qword_100113FE0);
  *v19 = sub_100007B84;
  v19[1] = (int8x8_t (*)@<D0>(uint64_t@<X8>))v21;
  swift_retain(v20);
  sub_100007AC4((uint64_t *)a2);
  swift_retain(v21);
  sub_100004F48((uint64_t)v8, &qword_100113FE0);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_release(v21);
  v27 = v30;
  sub_100007CD8((uint64_t)v19, v30, &qword_100113FE8);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v14);
}

int8x8_t sub_1000064E0@<D0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  CGFloat Width;
  CGFloat Height;
  uint64_t v32;
  uint64_t KeyPath;
  __n128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  char v40;
  CGFloat v41;
  CGFloat v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned __int8 v46;
  CGFloat MinX;
  CGFloat MinY;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64x2_t v54;
  int16x8_t v55;
  int8x8_t result;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, __n128);
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  int v74;
  double v75;
  double v76;
  uint64_t v77;
  char v78;
  char v79;
  char v80;
  char v81;
  char v82;
  unsigned __int8 v83;
  char v84;
  __int128 v85;
  _BYTE v86[7];
  _BYTE v87[7];
  _BYTE v88[7];
  _BYTE v89[7];
  _BYTE v90[7];
  _BYTE v91[7];
  _BYTE v92[7];
  double v93;
  double v94;
  double v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;

  v77 = sub_100005360(&qword_100113FF0);
  v6 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77, v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v60 - v12;
  type metadata accessor for CGRect(0);
  GeometryProxy.subscript.getter(&v93, a1, v14);
  v15 = v93;
  v16 = v94;
  v17 = v95;
  v18 = v96;
  v19 = *a2;
  v20 = *((_BYTE *)a2 + 8);
  v21 = swift_retain(*a2);
  v22 = sub_100043890(v21, v20);
  swift_release(v19);
  v23 = type metadata accessor for CalculatorViewModel(0);
  v24 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v72 = v13;
  Bindable<A>.init(wrappedValue:)(v22, v23, v24);
  v25 = a2[2];
  LOBYTE(v22) = *((_BYTE *)a2 + 24);
  v26 = swift_retain(v25);
  v27 = sub_1000436BC(v26, v22);
  swift_release(v25);
  sub_100067FC0(v27, 2);
  v29 = v28;
  swift_release(v27);
  v99.origin.x = v15;
  v99.origin.y = v16;
  v99.size.width = v17;
  v99.size.height = v18;
  Width = CGRectGetWidth(v99);
  v100.origin.x = v15;
  v100.origin.y = v16;
  v100.size.width = v17;
  v100.size.height = v18;
  Height = CGRectGetHeight(v100);
  v32 = v77;
  Bindable.projectedValue.getter(v77);
  KeyPath = swift_getKeyPath(&unk_1000CD2D8);
  Bindable<A>.subscript.getter(&v93, KeyPath, v32);
  v34 = swift_release(KeyPath);
  v69 = *(void (**)(char *, uint64_t, __n128))(v6 + 8);
  v69(v9, v32, v34);
  v76 = v93;
  v75 = v94;
  v74 = LOBYTE(v95);
  v73 = Environment.init<A>(_:)(v23, v23, v24);
  LOBYTE(v85) = v35 & 1;
  v36 = type metadata accessor for CalculatorLayout(0);
  v37 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v70 = Environment.init<A>(_:)(v36, v36, v37);
  v39 = v38;
  v68 = swift_getKeyPath(&unk_1000CD300);
  v67 = swift_getKeyPath(&unk_1000CD328);
  v71 = swift_getKeyPath(&unk_1000CD210);
  v40 = v85;
  v101.origin.x = v15;
  v101.origin.y = v16;
  v101.size.width = v17;
  v101.size.height = v18;
  v41 = CGRectGetWidth(v101);
  v102.origin.x = v15;
  v102.origin.y = v16;
  v102.size.width = v17;
  v102.size.height = v18;
  v42 = CGRectGetHeight(v102);
  v43 = static Alignment.bottomLeading.getter();
  _FrameLayout.init(width:height:alignment:)(&v93, *(_QWORD *)&v41, 0, *(_QWORD *)&v42, 0, v43, v44);
  v66 = v93;
  v45 = LOBYTE(v94);
  v65 = v95;
  v46 = LOBYTE(v96);
  v64 = v97;
  v63 = v98;
  v103.origin.x = v15;
  v103.origin.y = v16;
  v103.size.width = v17;
  v103.size.height = v18;
  MinX = CGRectGetMinX(v103);
  v104.origin.x = v15;
  v104.origin.y = v16;
  v104.size.width = v17;
  v104.size.height = v18;
  MinY = CGRectGetMinY(v104);
  v85 = *(_OWORD *)(a2 + 11);
  v49 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.getter(v92, v49);
  if (v92[0])
    v50 = 0.0;
  else
    v50 = 1.0;
  v82 = v40;
  v81 = v39 & 1;
  v80 = 0;
  v79 = 0;
  v61 = (v29 >> 40) & 1;
  v60 = HIWORD(v29) & 1;
  v78 = 0;
  v84 = v45;
  v83 = v46;
  v62 = v46;
  v51 = swift_getKeyPath(&unk_1000CD300);
  v52 = swift_allocObject(&unk_1001084D0, 17, 7);
  *(_BYTE *)(v52 + 16) = 1;
  ((void (*)(char *, uint64_t))v69)(v72, v77);
  *(_DWORD *)(a3 + 9) = v85;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)&v85 + 3);
  *(_DWORD *)(a3 + 25) = *(_DWORD *)v92;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)&v92[3];
  *(_DWORD *)(a3 + 57) = *(_DWORD *)v91;
  *(_DWORD *)(a3 + 60) = *(_DWORD *)&v91[3];
  *(_DWORD *)(a3 + 92) = *(_DWORD *)&v90[3];
  *(_DWORD *)(a3 + 89) = *(_DWORD *)v90;
  v53 = *(_DWORD *)v89;
  *(_DWORD *)(a3 + 124) = *(_DWORD *)&v89[3];
  *(_DWORD *)(a3 + 121) = v53;
  *(_DWORD *)(a3 + 145) = *(_DWORD *)v88;
  *(_DWORD *)(a3 + 148) = *(_DWORD *)&v88[3];
  *(_DWORD *)(a3 + 169) = *(_DWORD *)v87;
  *(_DWORD *)(a3 + 172) = *(_DWORD *)&v87[3];
  *(_DWORD *)(a3 + 185) = *(_DWORD *)v86;
  *(_DWORD *)(a3 + 188) = *(_DWORD *)&v86[3];
  *(_QWORD *)a3 = v73;
  *(_BYTE *)(a3 + 8) = v40;
  *(_QWORD *)(a3 + 16) = v70;
  *(_BYTE *)(a3 + 24) = v39 & 1;
  *(_QWORD *)(a3 + 32) = v68;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = v67;
  *(_QWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 81) = 0;
  *(_BYTE *)(a3 + 82) = v29;
  v54 = (uint64x2_t)vdupq_n_s64(v29);
  v55 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v54, (uint64x2_t)xmmword_1000CCFD0), (int32x4_t)vshlq_u64(v54, (uint64x2_t)xmmword_1000CCFC0));
  *(int8x8_t *)v55.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v55), (int8x8_t)0x1000100010001);
  result = vmovn_s16(v55);
  *(_DWORD *)(a3 + 83) = result.i32[0];
  *(_BYTE *)(a3 + 87) = v61;
  *(_BYTE *)(a3 + 88) = v60;
  *(CGFloat *)(a3 + 96) = Width;
  *(CGFloat *)(a3 + 104) = Height;
  *(_QWORD *)(a3 + 112) = v71;
  *(_BYTE *)(a3 + 120) = 0;
  v57 = v75;
  *(double *)(a3 + 128) = v76;
  *(double *)(a3 + 136) = v57;
  *(_BYTE *)(a3 + 144) = v74;
  v58 = v66;
  *(_QWORD *)(a3 + 152) = 0;
  *(double *)(a3 + 160) = v58;
  *(_BYTE *)(a3 + 168) = v45;
  *(double *)(a3 + 176) = v65;
  *(_BYTE *)(a3 + 184) = v62;
  v59 = v63;
  *(_QWORD *)(a3 + 192) = v64;
  *(_QWORD *)(a3 + 200) = v59;
  *(CGFloat *)(a3 + 208) = MinX;
  *(CGFloat *)(a3 + 216) = MinY;
  *(double *)(a3 + 224) = v50;
  *(_QWORD *)(a3 + 232) = v51;
  *(_QWORD *)(a3 + 240) = sub_100007BC4;
  *(_QWORD *)(a3 + 248) = v52;
  return result;
}

uint64_t sub_100006B40()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100006B58@<X0>(uint64_t a1@<X8>)
{
  return sub_1000056EC(a1);
}

void *variable initialization expression of CalculatorHistoryRecordManager.recordsPendingAdd()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of CalculatorHistoryRecordManager.hasFilteredRecordsLoaded()
{
  return 0;
}

id variable initialization expression of CalculatorHistoryRecordManager.inputCache()
{
  return objc_msgSend(objc_allocWithZone((Class)NSCache), "init");
}

double variable initialization expression of CalculatorCustomSplitView.fadeValue()
{
  return 0.5;
}

double variable initialization expression of CalculatorCustomSplitView.fixedSidebarWidth()
{
  return 250.0;
}

uint64_t variable initialization expression of CalculatorCustomSplitView._calculatorLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100006C2C(a1, a2, a3, a4, type metadata accessor for CalculatorLayout, (unint64_t *)&qword_100113F48, (uint64_t)&unk_1000CD690);
}

uint64_t variable initialization expression of CalculatorCustomSplitView._toolbarViewModel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100006C2C(a1, a2, a3, a4, type metadata accessor for CalculatorToolbarViewModel, (unint64_t *)&qword_100113F50, (uint64_t)&unk_1000D1388);
}

uint64_t sub_100006C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;

  v10 = a5(0);
  v11 = sub_100005178(a6, a5, a7);
  return Environment.init<A>(_:)(v10, v10, v11);
}

uint64_t variable initialization expression of CalculatorCustomSplitView._scenePhase@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_1000CCFE0);
  v2 = sub_100005360(&qword_100113F58);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t sub_100006CCC()
{
  return EnvironmentValues.scenePhase.getter();
}

uint64_t sub_100006CEC(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for ScenePhase(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.scenePhase.setter(v3);
}

double variable initialization expression of CalculatorCustomSplitView._screenDrag()
{
  return 0.0;
}

double sub_100006D70@<D0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  double result;
  __int128 v5;
  uint64_t v6;

  v2 = sub_100007BF8();
  EnvironmentValues.subscript.getter(&v5, &type metadata for KeypadButtonActionKey, &type metadata for KeypadButtonActionKey, v2);
  v3 = v6;
  result = *(double *)&v5;
  *(_OWORD *)a1 = v5;
  *(_QWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100006DC4(uint64_t *a1)
{
  uint64_t v1;
  void *v2;
  unint64_t v3;
  uint64_t v5[3];

  v1 = a1[1];
  v2 = (void *)a1[2];
  v5[0] = *a1;
  v5[1] = v1;
  v5[2] = (uint64_t)v2;
  sub_100007BCC(v5[0], v1, v2);
  v3 = sub_100007BF8();
  return EnvironmentValues.subscript.setter(v5, &type metadata for KeypadButtonActionKey, &type metadata for KeypadButtonActionKey, v3);
}

uint64_t variable initialization expression of CalculatorNetworkManager.networkMonitor()
{
  uint64_t v0;

  v0 = type metadata accessor for NWPathMonitor(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return NWPathMonitor.init()();
}

void type metadata accessor for CalculateEngine(uint64_t a1)
{
  sub_100008164(a1, &qword_100113F60, (uint64_t)&unk_100108328);
}

__n128 initializeWithTake for TimestampSelectionType(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for EdgeOutset(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for EdgeOutset(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100008164(a1, &qword_100113F68, (uint64_t)&unk_1001083A0);
}

_QWORD *sub_100006ED4@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;
  char v5;
  _QWORD v6[2];
  char v7;

  v2 = sub_10000765C();
  result = EnvironmentValues.subscript.getter(v6, &type metadata for ModeMenuPresentationKey, &type metadata for ModeMenuPresentationKey, v2);
  v4 = v6[1];
  v5 = v7;
  *(_QWORD *)a1 = v6[0];
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

void sub_100006F28(_BYTE *a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  _QWORD v7[2];

  v2 = sub_10000765C();
  EnvironmentValues.subscript.getter(v7, &type metadata for ModeMenuPresentationKey, &type metadata for ModeMenuPresentationKey, v2);
  v3 = v7[0];
  v4 = v7[1];
  v5 = sub_100005360(&qword_100113FB0);
  Binding.wrappedValue.getter(&v6, v5);
  swift_release(v4);
  swift_release(v3);
  *a1 = v6;
}

uint64_t sub_100006FC0(uint64_t a1, uint64_t a2)
{
  return sub_100007118(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

BOOL sub_100006FD4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100006FE8(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_10000705C(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000070D8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

uint64_t sub_100007118(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100007154(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100007194()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_100007204(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_1000CD598, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

_QWORD *sub_100007250@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100007260(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

void type metadata accessor for CalculateKey(uint64_t a1)
{
  sub_100008164(a1, &qword_100113F70, (uint64_t)&unk_1001083C8);
}

uint64_t sub_100007280(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10000730C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100007334(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005178(&qword_100113F90, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&unk_1000CD17C);
  v3 = sub_100005178(&qword_100113F98, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&unk_1000CD11C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000073B8()
{
  return sub_100005178(&qword_100113F78, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&unk_1000CD0E0);
}

uint64_t sub_1000073E4()
{
  return sub_100005178(&qword_100113F80, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&unk_1000CD0B4);
}

uint64_t sub_100007410()
{
  return sub_100005178(&qword_100113F88, (uint64_t (*)(uint64_t))type metadata accessor for CalculateKey, (uint64_t)&unk_1000CD150);
}

uint64_t sub_10000743C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100007480(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100005178(&qword_100114078, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000CD4F4);
  v3 = sub_100005178(&qword_100114080, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000CD448);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

__n128 sub_100007504@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t KeyPath;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  __n128 result;
  __n128 v19;
  _OWORD v20[2];
  __n128 v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v2 = type metadata accessor for CalculatorViewModel(0);
  v3 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v4 = Environment.init<A>(_:)(v2, v2, v3);
  v6 = v5;
  v7 = type metadata accessor for CalculatorLayout(0);
  v8 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v9 = Environment.init<A>(_:)(v7, v7, v8);
  v11 = v10;
  KeyPath = swift_getKeyPath(&unk_1000CD210);
  memset(v20, 0, sizeof(v20));
  State.init(wrappedValue:)(&v21, v20, &type metadata for EdgeInsets);
  v19 = v21;
  v13 = v22;
  v14 = v23;
  v15 = v24;
  LOBYTE(v20[0]) = 0;
  State.init(wrappedValue:)(&v21, v20, &type metadata for Bool);
  v16 = v21.n128_u8[0];
  v17 = v21.n128_u64[1];
  a1->n128_u64[0] = v4;
  a1->n128_u8[8] = v6 & 1;
  a1[1].n128_u64[0] = v9;
  a1[1].n128_u8[8] = v11 & 1;
  a1[2].n128_u64[0] = KeyPath;
  a1[2].n128_u8[8] = 0;
  result = v19;
  a1[3] = v19;
  a1[4].n128_u64[0] = v13;
  a1[4].n128_u64[1] = v14;
  a1[5].n128_u64[0] = v15;
  a1[5].n128_u8[8] = v16;
  a1[6].n128_u64[0] = v17;
  return result;
}

unint64_t sub_10000765C()
{
  unint64_t result;

  result = qword_100113FA8;
  if (!qword_100113FA8)
  {
    result = swift_getWitnessTable(&unk_1000D06E8, &type metadata for ModeMenuPresentationKey);
    atomic_store(result, (unint64_t *)&qword_100113FA8);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for MathPaperContainerView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000076D0(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

double destroy for MathPaperContainerView(uint64_t a1)
{
  double result;

  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 16));
  sub_100007720(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(*(_QWORD *)(a1 + 80));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 96)).n128_u64[0];
  return result;
}

uint64_t sub_100007720(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t initializeWithCopy for MathPaperContainerView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 40);
  swift_retain(v4);
  swift_retain(v6);
  sub_1000076D0(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = v10;
  v11 = a2[10];
  *(_QWORD *)(a1 + 80) = v11;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  v12 = a2[12];
  *(_QWORD *)(a1 + 96) = v12;
  swift_retain(v11);
  swift_retain(v12);
  return a1;
}

uint64_t *assignWithCopy for MathPaperContainerView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  v10 = a2[4];
  v11 = *((_BYTE *)a2 + 40);
  sub_1000076D0(v10, v11);
  v12 = a1[4];
  v13 = *((_BYTE *)a1 + 40);
  a1[4] = v10;
  *((_BYTE *)a1 + 40) = v11;
  sub_100007720(v12, v13);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  v14 = a1[10];
  v15 = a2[10];
  a1[10] = v15;
  swift_retain(v15);
  swift_release(v14);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  v16 = a1[12];
  v17 = a2[12];
  a1[12] = v17;
  swift_retain(v17);
  swift_release(v16);
  return a1;
}

__n128 initializeWithTake for MathPaperContainerView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t *assignWithTake for MathPaperContainerView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  v8 = *((_BYTE *)a2 + 40);
  v9 = a1[4];
  v10 = *((_BYTE *)a1 + 40);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = v8;
  sub_100007720(v9, v10);
  v11 = *((_OWORD *)a2 + 4);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 4) = v11;
  v12 = a1[10];
  a1[10] = a2[10];
  swift_release(v12);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  v13 = a1[12];
  a1[12] = a2[12];
  swift_release(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for MathPaperContainerView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 80);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MathPaperContainerView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 104) = 0;
    if (a2)
      *(_QWORD *)(result + 80) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for MathPaperContainerView()
{
  return &type metadata for MathPaperContainerView;
}

uint64_t sub_100007A64(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F570C, 1);
}

uint64_t sub_100007A74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100007720(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 112));
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100007ABC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100006274(a1, v2 + 16, a2);
}

uint64_t *sub_100007AC4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[4];
  v4 = *((_BYTE *)a1 + 40);
  v5 = a1[10];
  v6 = a1[12];
  swift_retain(a1[2]);
  swift_retain(v2);
  sub_1000076D0(v3, v4);
  swift_retain(v6);
  swift_retain(v5);
  return a1;
}

uint64_t sub_100007B34()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100007720(*(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 128, 7);
}

int8x8_t sub_100007B84@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000064E0(*(_QWORD *)(v1 + 16), (uint64_t *)(v1 + 24), a1);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100008164(a1, &qword_100114018, (uint64_t)&unk_100108550);
}

uint64_t sub_100007BB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100007BC4(uint64_t a1)
{
  uint64_t v1;

  sub_10007601C(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_100007BCC(uint64_t result, uint64_t a2, void *a3)
{
  id v4;

  if (result)
  {
    v4 = a3;
    return swift_retain(a2);
  }
  return result;
}

unint64_t sub_100007BF8()
{
  unint64_t result;

  result = qword_100114000;
  if (!qword_100114000)
  {
    result = swift_getWitnessTable(&unk_1000D3AC4, &type metadata for KeypadButtonActionKey);
    atomic_store(result, (unint64_t *)&qword_100114000);
  }
  return result;
}

uint64_t sub_100007C3C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 112);
  swift_retain(*(_QWORD *)(a1 + 96));
  swift_retain(v2);
  return a1;
}

uint64_t sub_100007C70(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 96);
  swift_release(*(_QWORD *)(a1 + 112));
  swift_release(v2);
  return a1;
}

uint64_t sub_100007CA4(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 152);
  swift_retain(*(_QWORD *)(a1 + 136));
  swift_retain(v2);
  return a1;
}

uint64_t sub_100007CD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005360(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_100007D1C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  swift_retain(a1[6]);
  swift_retain(v4);
  swift_retain(v2);
  swift_retain(v3);
  sub_100007DA8(v5, v6, v7, v8);
  return a1;
}

uint64_t sub_100007DA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((~(_WORD)a3 & 0xFF00) != 0)
  {
    sub_100007DE0(result, a2, a3, BYTE1(a3) & 1);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_100007DE0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_retain(a1);
  else
    a2 = a1;
  return swift_retain(a2);
}

uint64_t *sub_100007E10(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[6];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  swift_release(a1[7]);
  swift_release(v3);
  swift_release(v2);
  swift_release(v4);
  sub_100007E98(v5, v6, v7, v8);
  return a1;
}

uint64_t sub_100007E98(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((~(_WORD)a3 & 0xFF00) != 0)
  {
    sub_100007ED0(result, a2, a3, BYTE1(a3) & 1);
    return swift_release(a4);
  }
  return result;
}

uint64_t sub_100007ED0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    swift_release(a2);
  return swift_release(a1);
}

__n128 initializeWithTake for BounceEffect(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for TappableOutsets(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TappableOutsets(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

unint64_t sub_100007F58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114020;
  if (!qword_100114020)
  {
    v1 = sub_100005608(&qword_100113FD8);
    sub_100007FDC();
    sub_100005178(&qword_100114048, (uint64_t (*)(uint64_t))&type metadata accessor for SafeAreaPaddingModifier, (uint64_t)&protocol conformance descriptor for SafeAreaPaddingModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114020);
  }
  return result;
}

unint64_t sub_100007FDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114028;
  if (!qword_100114028)
  {
    v1 = sub_100005608(&qword_100113FC0);
    sub_100008078(&qword_100114030, &qword_100113FB8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100008078(&qword_100114038, &qword_100114040, (uint64_t)&protocol conformance descriptor for _OverlayPreferenceModifier<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114028);
  }
  return result;
}

uint64_t sub_100008078(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100008164(a1, &qword_100114050, (uint64_t)&unk_1001085D0);
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_100008164(a1, &qword_100114058, (uint64_t)&unk_1001085F8);
}

uint64_t sub_1000080E0()
{
  return sub_100005178(&qword_100114060, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000CD40C);
}

uint64_t sub_10000810C()
{
  return sub_100005178(&qword_100114068, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000CD3E0);
}

uint64_t sub_100008138()
{
  return sub_100005178(&qword_100114070, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000CD47C);
}

void sub_100008164(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void sub_1000081C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  _QWORD *v23;
  _OWORD *v24;
  _QWORD *v25;
  _OWORD *v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  double v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  uint64_t KeyPath;
  uint64_t v52;
  unint64_t v53;
  void *v54;
  id v55;
  double v56;
  double v57;
  double v58;
  id v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(uint64_t, uint64_t, uint64_t);
  uint64_t v77;
  unsigned int v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  __n128 v82;
  void (*v83)(char *, uint64_t, __n128);
  id v84;
  id v85;
  id v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  char *v97;
  unsigned int v98;
  uint64_t (*v99)(uint64_t, uint64_t, uint64_t);
  char *v100;
  id v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  _QWORD v107[2];

  v1 = v0;
  v2 = sub_100005360(&qword_1001141C8);
  __chkstk_darwin(v2, v3);
  v105 = (char *)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v6);
  v103 = (char *)&v94 - v7;
  v8 = type metadata accessor for UserInterfaceSizeClass(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v94 - v15;
  v17 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  v18 = enum case for LayoutDirection.leftToRight(_:);
  v19 = type metadata accessor for LayoutDirection(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v17, v18, v19);
  v20 = enum case for UserInterfaceSizeClass.regular(_:);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v21(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, enum case for UserInterfaceSizeClass.regular(_:), v8);
  v98 = v20;
  v22 = v21(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v20, v8);
  v23 = (_QWORD *)(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
  *v23 = 0;
  v23[1] = 0;
  v24 = (_OWORD *)(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
  *v24 = 0u;
  v24[1] = 0u;
  v25 = (_QWORD *)(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize);
  *v25 = 0;
  v25[1] = 0;
  v26 = (_OWORD *)(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
  *v26 = 0u;
  v26[1] = 0u;
  ObservationRegistrar.init()(v22);
  v27 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v28 = objc_msgSend(v27, "connectedScenes");

  v29 = sub_10000A5A8(0, &qword_1001141D0, UIScene_ptr);
  v30 = sub_10000A4BC();
  v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v28, v29, v30);

  v32 = (void *)sub_1000089E4(v31);
  swift_bridgeObjectRelease(v31);
  v33 = 0.0;
  v99 = v21;
  v100 = v12;
  v104 = v9;
  v97 = v16;
  v102 = v8;
  if (!v32)
    goto LABEL_10;
  v34 = objc_opt_self(UIWindowScene);
  v35 = (void *)swift_dynamicCastObjCClass(v32, v34);
  if (!v35)
  {

LABEL_10:
    v95 = 0;
    v101 = 0;
LABEL_11:
    v49 = 0.0;
    v47 = 0.0;
    v45 = 0.0;
    goto LABEL_12;
  }
  v36 = v35;
  v37 = objc_msgSend(v35, "windows");
  v38 = sub_10000A5A8(0, &qword_1001141E0, UIWindow_ptr);
  v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v37, v38);

  if ((unint64_t)v39 >> 62)
  {
    if (v39 < 0)
      v92 = v39;
    else
      v92 = v39 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v39);
    v93 = _CocoaArrayWrapper.endIndex.getter(v92);
    swift_bridgeObjectRelease(v39);
    v101 = v36;
    if (v93)
      goto LABEL_5;
    goto LABEL_23;
  }
  v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  v101 = v36;
  if (!v40)
  {
LABEL_23:
    swift_bridgeObjectRelease(v39);
    v95 = 0;
    goto LABEL_11;
  }
LABEL_5:
  if ((v39 & 0xC000000000000001) != 0)
  {
    v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v39);
  }
  else
  {
    if (!*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v41 = *(id *)(v39 + 32);
  }
  v42 = v41;
  *(_QWORD *)&v43 = swift_bridgeObjectRelease(v39).n128_u64[0];
  v95 = v42;
  objc_msgSend(v42, "safeAreaInsets", v43);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v33 = v50;
LABEL_12:
  KeyPath = swift_getKeyPath(&unk_1000CD750);
  __chkstk_darwin(KeyPath, v52);
  *(&v94 - 6) = v1;
  *((double *)&v94 - 5) = v45;
  *((double *)&v94 - 4) = v47;
  *((double *)&v94 - 3) = v49;
  *((double *)&v94 - 2) = v33;
  v107[0] = v1;
  v53 = sub_10000A3E4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v107, KeyPath, sub_10000A514, &v94 - 8, (char *)&type metadata for () + 8, v53);
  swift_release(KeyPath);
  v54 = (void *)objc_opt_self(UIScreen);
  v55 = objc_msgSend(v54, "mainScreen");
  objc_msgSend(v55, "bounds");
  v57 = v56;

  v58 = v57 - v47 - v33;
  v59 = objc_msgSend(v54, "mainScreen");
  objc_msgSend(v59, "bounds");
  v61 = v60;

  v62 = swift_getKeyPath(&unk_1000CD700);
  __chkstk_darwin(v62, v63);
  *(&v94 - 4) = v1;
  *((double *)&v94 - 3) = v58;
  *((double *)&v94 - 2) = v61 - v45 - v49;
  v107[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v107, v62, sub_10000A530, &v94 - 6, (char *)&type metadata for () + 8, v53);
  v64 = objc_msgSend(v54, "mainScreen", swift_release(v62).n128_f64[0]);
  objc_msgSend(v64, "bounds");
  v66 = v65;
  v68 = v67;

  v69 = swift_getKeyPath(&unk_1000CD778);
  __chkstk_darwin(v69, v70);
  *(&v94 - 4) = v1;
  *(&v94 - 3) = v66;
  *(&v94 - 2) = v68;
  v107[0] = v1;
  v106 = v53;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v107, v69, sub_10000A550, &v94 - 6, (char *)&type metadata for () + 8, v53);
  v71 = objc_msgSend(v54, "mainScreen", swift_release(v69).n128_f64[0]);
  v72 = objc_msgSend(v71, "traitCollection");

  v73 = objc_msgSend(v72, "verticalSizeClass");
  v74 = (uint64_t)v103;
  UserInterfaceSizeClass.init(_:)(v73);
  v75 = v104;
  v76 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48);
  v77 = v102;
  v78 = v76(v74, 1, v102);
  v96 = v76;
  v79 = v97;
  if (v78 == 1)
  {
    v99((uint64_t)v97, v98, v77);
    sub_10000A568(v74);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v97, v74, v77);
  }
  v80 = swift_getKeyPath(&unk_1000CD6B0);
  __chkstk_darwin(v80, v81);
  *(&v94 - 2) = v1;
  *(&v94 - 1) = (uint64_t)v79;
  v107[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v107, v80, sub_10000AAC4, &v94 - 4, (char *)&type metadata for () + 8, v106);
  v82 = swift_release(v80);
  v83 = *(void (**)(char *, uint64_t, __n128))(v75 + 8);
  v83(v79, v77, v82);
  v84 = objc_msgSend(v54, "mainScreen");
  v85 = objc_msgSend(v84, "traitCollection");

  v86 = objc_msgSend(v85, "horizontalSizeClass");
  v87 = (uint64_t)v105;
  UserInterfaceSizeClass.init(_:)(v86);
  if (v96(v87, 1, v77) == 1)
  {
    v88 = v100;
    v99((uint64_t)v100, v98, v77);
    sub_10000A568(v87);
  }
  else
  {
    v88 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 32))(v100, v87, v77);
  }
  v89 = swift_getKeyPath(&unk_1000CD6D8);
  __chkstk_darwin(v89, v90);
  *(&v94 - 2) = v1;
  *(&v94 - 1) = (uint64_t)v88;
  v107[0] = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v107, v89, sub_10000AAD8, &v94 - 4, (char *)&type metadata for () + 8, v106);
  v91 = swift_release(v89);
  v83(v88, v77, v91);

}

uint64_t sub_1000089E4(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v2 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v3 = a1;
    else
      v3 = a1 & 0xFFFFFFFFFFFFFF8;
    v4 = __CocoaSet.startIndex.getter(v3);
    v6 = v5;
    v7 = __CocoaSet.endIndex.getter(v3);
    v9 = static __CocoaSet.Index.== infix(_:_:)(v4, v6, v7, v8);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) != 0)
      goto LABEL_6;
    goto LABEL_10;
  }
  result = sub_10000A854(a1);
  if ((v13 & 1) == 0)
  {
    v6 = v12;
    if (*(_DWORD *)(a1 + 36) == (_DWORD)v12)
    {
      v4 = result;
      if (result == 1 << *(_BYTE *)(a1 + 32))
      {
LABEL_6:
        sub_10000A848(v4, v6, v2 != 0);
        return 0;
      }
LABEL_10:
      sub_10000A5E0(v4, v6, v2 != 0, a1);
      v10 = v14;
      sub_10000A848(v4, v6, v2 != 0);
      return v10;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100008AF0@<X0>(uint64_t a1@<X8>)
{
  return sub_100009018((uint64_t)&unk_1000CD728, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, a1);
}

uint64_t sub_100008B0C(uint64_t a1, uint64_t a2)
{
  return sub_100009554(a1, a2, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection);
}

BOOL sub_100008B30()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  uint64_t KeyPath;
  unint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if (!v3)
  {
    KeyPath = swift_getKeyPath(&unk_1000CD700);
    v11 = v1;
    v6 = sub_10000A3E4();
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v6);
    swift_release(KeyPath);
    v7 = (double *)(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
    if (*(double *)(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize + 8) <= 667.0)
    {
      v8 = swift_getKeyPath(&unk_1000CD700);
      v11 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v8, v6);
      swift_release(v8);
      if (*v7 <= 375.0)
        return 1;
    }
    v9 = swift_getKeyPath(&unk_1000CD700);
    v11 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v9, v6);
    swift_release(v9);
    if (v7[1] <= 375.0)
    {
      v10 = swift_getKeyPath(&unk_1000CD700);
      v11 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v10, v6);
      swift_release(v10);
      return *v7 <= 667.0;
    }
  }
  return 0;
}

double sub_100008CE0()
{
  return sub_10000984C((uint64_t)&unk_1000CD700, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
}

uint64_t sub_100008CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  char v13;
  uint64_t KeyPath;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, _QWORD, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[3];
  _QWORD v24[3];

  v1 = v0;
  v2 = type metadata accessor for UserInterfaceSizeClass(0);
  v3 = *(_QWORD **)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v23 - v9;
  v11 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v12 = objc_msgSend(v11, "orientation");

  if (sub_10000A8DC((uint64_t)v12))
  {
    v13 = 1;
  }
  else
  {
    KeyPath = swift_getKeyPath(&unk_1000CD6D8);
    v24[0] = v1;
    v15 = sub_10000A3E4();
    ObservationRegistrar.access<A, B>(_:keyPath:)(v24, KeyPath, v15);
    swift_release(KeyPath);
    v16 = v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
    swift_beginAccess(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v24, 0, 0);
    v17 = (void (*)(char *, uint64_t, uint64_t))v3[2];
    v17(v10, v16, v2);
    v18 = (void (*)(char *, _QWORD, uint64_t))v3[13];
    v18(v6, enum case for UserInterfaceSizeClass.compact(_:), v2);
    LOBYTE(v16) = static UserInterfaceSizeClass.== infix(_:_:)(v10, v6);
    v19 = (void (*)(char *, uint64_t))v3[1];
    v19(v6, v2);
    v19(v10, v2);
    if ((v16 & 1) != 0)
    {
      v20 = swift_getKeyPath(&unk_1000CD6B0);
      v23[0] = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v23, v20, v15);
      swift_release(v20);
      v21 = v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
      swift_beginAccess(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, v23, 0, 0);
      v17(v10, v21, v2);
      v18(v6, enum case for UserInterfaceSizeClass.regular(_:), v2);
      v13 = static UserInterfaceSizeClass.== infix(_:_:)(v10, v6);
      v19(v6, v2);
      v19(v10, v2);
    }
    else
    {
      v13 = 0;
    }
  }
  return v13 & 1;
}

uint64_t sub_100008F40()
{
  void *v0;
  id v1;
  id v2;
  char v3;
  id v4;
  id v5;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = objc_msgSend(v0, "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2)
  {
    v3 = 0;
  }
  else
  {
    v4 = objc_msgSend(v0, "currentDevice");
    v5 = objc_msgSend(v4, "orientation");

    if (sub_10000A92C((uint64_t)v5))
      v3 = 1;
    else
      v3 = sub_100008CF4() ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_100008FFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100009018((uint64_t)&unk_1000CD6D8, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, (uint64_t (*)(_QWORD))&type metadata accessor for UserInterfaceSizeClass, a1);
}

uint64_t sub_100009018@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t (*a3)(_QWORD)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];

  KeyPath = swift_getKeyPath(a1);
  v13[0] = v4;
  v9 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v13, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v4 + *a2;
  swift_beginAccess(v10, v13, 0, 0);
  v11 = a3(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a4, v10, v11);
}

uint64_t sub_1000090C8@<X0>(uint64_t a1@<X8>)
{
  return sub_100009018((uint64_t)&unk_1000CD6B0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, (uint64_t (*)(_QWORD))&type metadata accessor for UserInterfaceSizeClass, a1);
}

BOOL sub_1000090E4()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = objc_msgSend(v0, "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2 != (id)1)
  {
    v3 = objc_msgSend(v0, "currentDevice");
    v4 = objc_msgSend(v3, "userInterfaceIdiom");

    if (v4 != (id)6)
      return 1;
  }
  v5 = (void *)objc_opt_self(UIScreen);
  v6 = objc_msgSend(v5, "mainScreen");
  objc_msgSend(v6, "bounds");
  v8 = v7;

  if (v8 != sub_100009CE8((uint64_t)&unk_1000CD700, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize, (uint64_t)&unk_1000CD750, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets))return 1;
  v9 = objc_msgSend(v5, "mainScreen");
  objc_msgSend(v9, "bounds");
  v11 = v10;

  return v11 != sub_100009CE8((uint64_t)&unk_1000CD778, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, (uint64_t)&unk_1000CD7A0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
}

uint64_t sub_10000924C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000938C(a1, (uint64_t)&unk_1000CD6B0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, a2);
}

uint64_t sub_100009260(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t KeyPath;
  unint64_t v12;
  __n128 v13;
  _BYTE v15[16];
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v9, a1, v4, v7);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CD6B0);
  v16 = v10;
  v17 = v9;
  v18 = v10;
  v12 = sub_10000A3E4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, KeyPath, sub_10000A47C, v15, (char *)&type metadata for () + 8, v12);
  v13 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v9, v4, v13);
}

uint64_t sub_100009354(uint64_t a1, uint64_t a2)
{
  return sub_100009554(a1, a2, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, (uint64_t (*)(_QWORD))&type metadata accessor for UserInterfaceSizeClass);
}

uint64_t sub_100009378@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000938C(a1, (uint64_t)&unk_1000CD6D8, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, a2);
}

uint64_t sub_10000938C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v12[0] = v6;
  v8 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v8);
  swift_release(KeyPath);
  v9 = v6 + *a3;
  swift_beginAccess(v9, v12, 0, 0);
  v10 = type metadata accessor for UserInterfaceSizeClass(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a4, v9, v10);
}

uint64_t sub_10000943C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t KeyPath;
  unint64_t v12;
  __n128 v13;
  _BYTE v15[16];
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v9, a1, v4, v7);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CD6D8);
  v16 = v10;
  v17 = v9;
  v18 = v10;
  v12 = sub_10000A3E4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, KeyPath, sub_10000A454, v15, (char *)&type metadata for () + 8, v12);
  v13 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v9, v4, v13);
}

uint64_t sub_100009530(uint64_t a1, uint64_t a2)
{
  return sub_100009554(a1, a2, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, (uint64_t (*)(_QWORD))&type metadata accessor for UserInterfaceSizeClass);
}

uint64_t sub_100009554(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v6 = a1 + *a3;
  swift_beginAccess(v6, v9, 33, 0);
  v7 = a4(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v6, a2, v7);
  return swift_endAccess(v9);
}

uint64_t sub_1000095D0(uint64_t result, double a2, double a3)
{
  double *v3;

  v3 = (double *)(result + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
  *v3 = a2;
  v3[1] = a3;
  return result;
}

double sub_1000095E4()
{
  return sub_1000099F8((uint64_t)&unk_1000CD750, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
}

uint64_t sub_1000095F8(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return sub_100009BB0(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets, a2, a3, a4, a5);
}

double sub_100009614()
{
  return sub_100009CE8((uint64_t)&unk_1000CD700, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize, (uint64_t)&unk_1000CD750, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
}

uint64_t sub_100009638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t KeyPath;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, _QWORD, uint64_t);
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD v21[3];
  _QWORD v22[3];

  v1 = v0;
  v2 = type metadata accessor for UserInterfaceSizeClass(0);
  v3 = *(_QWORD **)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v21 - v9;
  KeyPath = swift_getKeyPath(&unk_1000CD6D8);
  v22[0] = v0;
  v12 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v22, KeyPath, v12);
  swift_release(KeyPath);
  v13 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess(v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v22, 0, 0);
  v14 = (void (*)(char *, uint64_t, uint64_t))v3[2];
  v14(v10, v13, v2);
  v15 = (void (*)(char *, _QWORD, uint64_t))v3[13];
  v15(v6, enum case for UserInterfaceSizeClass.compact(_:), v2);
  LOBYTE(v13) = static UserInterfaceSizeClass.== infix(_:_:)(v10, v6);
  v16 = (void (*)(char *, uint64_t))v3[1];
  v16(v6, v2);
  v16(v10, v2);
  if ((v13 & 1) != 0)
  {
    v17 = swift_getKeyPath(&unk_1000CD6B0);
    v21[0] = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v21, v17, v12);
    swift_release(v17);
    v18 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
    swift_beginAccess(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, v21, 0, 0);
    v14(v10, v18, v2);
    v15(v6, enum case for UserInterfaceSizeClass.regular(_:), v2);
    v19 = static UserInterfaceSizeClass.== infix(_:_:)(v10, v6);
    v16(v6, v2);
    v16(v10, v2);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

double sub_100009838()
{
  return sub_10000984C((uint64_t)&unk_1000CD778, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize);
}

double sub_10000984C(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(double *)(v2 + *a2);
}

__n128 sub_1000098BC@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  __n128 result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CD778);
  v7 = v3;
  v5 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(__n128 *)(v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize);
  *a2 = result;
  return result;
}

void sub_100009938(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  _QWORD v7[7];
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CD778);
  v7[2] = v4;
  v7[3] = v2;
  v7[4] = v3;
  v8 = v4;
  v6 = sub_10000A3E4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10000AAB0, v7, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
}

uint64_t sub_1000099D0(uint64_t result, double a2, double a3)
{
  double *v3;

  v3 = (double *)(result + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize);
  *v3 = a2;
  v3[1] = a3;
  return result;
}

double sub_1000099E4()
{
  return sub_1000099F8((uint64_t)&unk_1000CD7A0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
}

double sub_1000099F8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(double *)(v2 + *a2);
}

__n128 sub_100009A6C@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CD7A0);
  v8 = v3;
  v5 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  result = *(__n128 *)(v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
  v7 = *(_OWORD *)(v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets + 16);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v7;
  return result;
}

void sub_100009AEC(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v6;
  __int128 v7;
  _BYTE v8[16];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CD7A0);
  v9 = v4;
  v10 = v7;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v6 = sub_10000A3E4();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_10000A8F4, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
}

uint64_t sub_100009B94(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return sub_100009BB0(a1, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets, a2, a3, a4, a5);
}

uint64_t sub_100009BB0(uint64_t result, _QWORD *a2, double a3, double a4, double a5, double a6)
{
  double *v6;

  v6 = (double *)(result + *a2);
  *v6 = a3;
  v6[1] = a4;
  v6[2] = a5;
  v6[3] = a6;
  return result;
}

double sub_100009BC4()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v9;

  KeyPath = swift_getKeyPath(&unk_1000CD778);
  v9 = v0;
  v2 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(double *)(v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize + 8);
  v4 = swift_getKeyPath(&unk_1000CD7A0);
  v9 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, v4, v2);
  swift_release(v4);
  v5 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets;
  v6 = v3 + *(double *)(v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
  v7 = swift_getKeyPath(&unk_1000CD7A0);
  v9 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, v7, v2);
  swift_release(v7);
  return v6 + *(double *)(v5 + 16);
}

double sub_100009CC4()
{
  return sub_100009CE8((uint64_t)&unk_1000CD778, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, (uint64_t)&unk_1000CD7A0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
}

double sub_100009CE8(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t KeyPath;
  unint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v16;

  KeyPath = swift_getKeyPath(a1);
  v16 = v4;
  v9 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(double *)(v4 + *a2);
  v11 = swift_getKeyPath(a3);
  v16 = v4;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, v11, v9);
  swift_release(v11);
  v12 = v4 + *a4;
  v13 = v10 + *(double *)(v12 + 8);
  v14 = swift_getKeyPath(a3);
  v16 = v4;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, v14, v9);
  swift_release(v14);
  return v13 + *(double *)(v12 + 24);
}

void sub_100009DE0()
{
  void *v0;
  id v1;
  id v2;

  sub_100009BC4();
  v0 = (void *)objc_opt_self(UIScreen);
  v1 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v1, "bounds");

  sub_100009CE8((uint64_t)&unk_1000CD778, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, (uint64_t)&unk_1000CD7A0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
  v2 = objc_msgSend(v0, "mainScreen");
  objc_msgSend(v2, "bounds");

}

uint64_t sub_100009ED0()
{
  void *v0;
  id v1;
  id v2;
  double v3;
  id v5;
  id v6;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = objc_msgSend(v0, "currentDevice");
  v2 = objc_msgSend(v1, "userInterfaceIdiom");

  if (v2)
  {
    v3 = sub_100009CE8((uint64_t)&unk_1000CD778, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize, (uint64_t)&unk_1000CD7A0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
    return v3 / sub_100009BC4() < 0.9;
  }
  else
  {
    v5 = objc_msgSend(v0, "currentDevice");
    v6 = objc_msgSend(v5, "userInterfaceIdiom");

    if (v6)
      return 0;
    else
      return sub_100008CF4();
  }
}

uint64_t sub_100009FCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v1 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  v2 = type metadata accessor for LayoutDirection(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
  v4 = type metadata accessor for UserInterfaceSizeClass(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(v3, v4);
  v5(v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v4);
  v6 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout___observationRegistrar;
  v7 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000A08C()
{
  return type metadata accessor for CalculatorLayout(0);
}

uint64_t type metadata accessor for CalculatorLayout(uint64_t a1)
{
  uint64_t result;

  result = qword_100114108;
  if (!qword_100114108)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorLayout);
  return result;
}

uint64_t sub_10000A0D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;

  result = type metadata accessor for LayoutDirection(319);
  if (v3 <= 0x3F)
  {
    v6 = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for UserInterfaceSizeClass(319);
    if (v4 <= 0x3F)
    {
      v7 = *(_QWORD *)(result - 8) + 64;
      v8 = v7;
      v9 = &unk_1000CD638;
      v10 = &unk_1000CD650;
      v11 = &unk_1000CD638;
      v12 = &unk_1000CD650;
      result = type metadata accessor for ObservationRegistrar(319);
      if (v5 <= 0x3F)
      {
        v13 = *(_QWORD *)(result - 8) + 64;
        return swift_updateClassMetadata2(a1, 256, 8, &v6, a1 + 80);
      }
    }
  }
  return result;
}

uint64_t sub_10000A188()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::String v7;
  uint64_t KeyPath;
  unint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void (*v12)(char *, uint64_t);
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  unint64_t v19;
  _QWORD v20[2];

  v1 = v0;
  v2 = type metadata accessor for UserInterfaceSizeClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = 0;
  v19 = 0xE000000000000000;
  _StringGuts.grow(_:)(44);
  v20[0] = v18;
  v20[1] = v19;
  v7._object = (void *)0x80000001000D5510;
  v7._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1000CD6B0);
  v18 = v0;
  v9 = sub_10000A3E4();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v18, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v0 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass;
  swift_beginAccess(v10, &v18, 0, 0);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v11(v6, v10, v2);
  _print_unlocked<A, B>(_:_:)(v6, v20, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v6, v2);
  v13._countAndFlagsBits = 0xD000000000000016;
  v13._object = (void *)0x80000001000D5530;
  String.append(_:)(v13);
  v14 = swift_getKeyPath(&unk_1000CD6D8);
  v17[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, v14, v9);
  swift_release(v14);
  v15 = v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass;
  swift_beginAccess(v1 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, v17, 0, 0);
  v11(v6, v15, v2);
  _print_unlocked<A, B>(_:_:)(v6, v20, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v12(v6, v2);
  return v20[0];
}

uint64_t sub_10000A39C()
{
  return sub_10000A188();
}

uint64_t sub_10000A3BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000938C(a1, (uint64_t)&unk_1000CD6B0, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, a2);
}

unint64_t sub_10000A3E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113F48;
  if (!qword_100113F48)
  {
    v1 = type metadata accessor for CalculatorLayout(255);
    result = swift_getWitnessTable(&unk_1000CD690, v1);
    atomic_store(result, (unint64_t *)&qword_100113F48);
  }
  return result;
}

uint64_t sub_10000A42C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10000938C(a1, (uint64_t)&unk_1000CD6D8, &OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, a2);
}

uint64_t sub_10000A454()
{
  uint64_t v0;

  return sub_100009554(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC10Calculator16CalculatorLayout__horizontalSizeClass, (uint64_t (*)(_QWORD))&type metadata accessor for UserInterfaceSizeClass);
}

uint64_t sub_10000A47C()
{
  uint64_t v0;

  return sub_100009554(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC10Calculator16CalculatorLayout__verticalSizeClass, (uint64_t (*)(_QWORD))&type metadata accessor for UserInterfaceSizeClass);
}

unint64_t sub_10000A4BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001141D8;
  if (!qword_1001141D8)
  {
    v1 = sub_10000A5A8(255, &qword_1001141D0, UIScene_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1001141D8);
  }
  return result;
}

double sub_10000A514()
{
  double result;

  *(_QWORD *)&result = sub_10000A910(&OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets).n128_u64[0];
  return result;
}

__n128 sub_10000A530()
{
  uint64_t v0;
  __n128 result;

  result = *(__n128 *)(v0 + 24);
  *(__n128 *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize) = result;
  return result;
}

__n128 sub_10000A550()
{
  uint64_t v0;
  __n128 result;

  result = *(__n128 *)(v0 + 24);
  *(__n128 *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize) = result;
  return result;
}

uint64_t sub_10000A568(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_1001141C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000A5A8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_10000A5E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;

  v7 = a1;
  if ((a4 & 0xC000000000000001) == 0)
  {
    if ((a3 & 1) != 0)
      goto LABEL_13;
    if (a1 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }
    else if (((*(_QWORD *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
        goto LABEL_20;
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        v11 = __CocoaSet.Index.element.getter(v7, a2);
        v21 = v11;
        v12 = sub_10000A5A8(0, &qword_1001141D0, UIScene_ptr);
        swift_unknownObjectRetain(v11);
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v4 = v22;
        swift_unknownObjectRelease(v11);
        v13 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
        v14 = -1 << *(_BYTE *)(a4 + 32);
        v7 = v13 & ~v14;
        if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
        {
          v15 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          v16 = static NSObject.== infix(_:_:)(v15);

          if ((v16 & 1) == 0)
          {
            v17 = ~v14;
            do
            {
              v7 = (v7 + 1) & v17;
              if (((*(_QWORD *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
                goto LABEL_24;
              v18 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
              v19 = static NSObject.== infix(_:_:)(v18);

            }
            while ((v19 & 1) == 0);
          }

LABEL_20:
          v20 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v7);
          return;
        }
LABEL_24:

        __break(1u);
        goto LABEL_25;
      }
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
    __break(1u);
    goto LABEL_23;
  }
  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }
  if (a4 < 0)
    v8 = a4;
  else
    v8 = a4 & 0xFFFFFFFFFFFFFF8;
  v9 = __CocoaSet.element(at:)(a1, a2, v8);
  v21 = v9;
  v10 = sub_10000A5A8(0, &qword_1001141D0, UIScene_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
  swift_unknownObjectRelease(v9);
}

uint64_t sub_10000A848(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t sub_10000A854(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

BOOL sub_10000A8DC(uint64_t a1)
{
  return (unint64_t)(a1 - 1) < 2;
}

double sub_10000A8F4()
{
  double result;

  *(_QWORD *)&result = sub_10000A910(&OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets).n128_u64[0];
  return result;
}

__n128 sub_10000A910(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 result;
  __int128 v4;

  v2 = *(_QWORD *)(v1 + 16) + *a1;
  result = *(__n128 *)(v1 + 24);
  v4 = *(_OWORD *)(v1 + 40);
  *(__n128 *)v2 = result;
  *(_OWORD *)(v2 + 16) = v4;
  return result;
}

BOOL sub_10000A92C(uint64_t a1)
{
  return (unint64_t)(a1 - 3) < 2;
}

void sub_10000A93C()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  id v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  id v21;
  CGRect v22;
  CGRect v23;

  v0 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v1 = objc_msgSend(v0, "userInterfaceIdiom");

  if (v1)
  {
    v2 = (void *)objc_opt_self(UIScreen);
    v3 = objc_msgSend(v2, "mainScreen");
    objc_msgSend(v3, "bounds");
    v5 = v4;
    v7 = v6;
    v9 = v8;
    v11 = v10;

    v22.origin.x = v5;
    v22.origin.y = v7;
    v22.size.width = v9;
    v22.size.height = v11;
    CGRectGetWidth(v22);
    v12 = objc_msgSend(v2, "mainScreen");
    objc_msgSend(v12, "bounds");
    v14 = v13;
    v16 = v15;
    v18 = v17;
    v20 = v19;

    v23.origin.x = v14;
    v23.origin.y = v16;
    v23.size.width = v18;
    v23.size.height = v20;
    CGRectGetHeight(v23);
    v21 = objc_msgSend(v2, "mainScreen");
    objc_msgSend(v21, "bounds");

  }
}

double sub_10000AAB0()
{
  double result;

  *(_QWORD *)&result = sub_10000A550().n128_u64[0];
  return result;
}

uint64_t sub_10000AAC4()
{
  return sub_10000A47C();
}

uint64_t sub_10000AAD8()
{
  return sub_10000A454();
}

uint64_t sub_10000AAEC()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for CalculatorHistoryRecordManager(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_10000B7C0();
  qword_10011F810 = result;
  return result;
}

uint64_t sub_10000AB28()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1000CDA88);
  v4[0] = v0;
  v2 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 32, v4, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10000ABC4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDA88);
  v8[0] = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 32, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_10000AC68(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDA88);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000142D4, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10000AD20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1 + 32, v6, 1, 0);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10000AD84()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CDAB0);
  v4 = v0;
  v2 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 40);
}

void sub_10000AE08(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDAB0);
  v6 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 40);
}

double sub_10000AE94(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDAB0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100014F44, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10000AF3C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CDA60);
  v4 = v0;
  v2 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t sub_10000AFC0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v4[0] = v0;
  v2 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 48, v4, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10000B05C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v8[0] = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 48, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 48);
  *a2 = v6;
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_10000B100(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10001418C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

void sub_10000B1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];
  char v10;
  _BYTE v11[24];
  uint64_t v12;

  swift_beginAccess(a1 + 48, v11, 1, 0);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v4);
  KeyPath = swift_getKeyPath(&unk_1000CDA60);
  v12 = a1;
  v6 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v6);
  swift_release(KeyPath);
  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    v7 = swift_getKeyPath(&unk_1000CDA60);
    __chkstk_darwin(v7, v8);
    v9[2] = a1;
    v10 = 1;
    v12 = a1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v12, v7, sub_100014F30, v9, (char *)&type metadata for () + 8, v6);
    swift_release(v7);
  }
}

void sub_10000B304(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDA60);
  v6 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 56);
}

double sub_10000B390(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDA60);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100014F30, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

id sub_10000B438()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CDB98);
  v4 = v0;
  v2 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(id *)(v0 + 64);
}

id sub_10000B4BC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDB98);
  v8 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 64);
  *a2 = v6;
  return v6;
}

void sub_10000B548(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDB98);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100014DB0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

id sub_10000B5FC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CDB70);
  v4 = v0;
  v2 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(id *)(v0 + 72);
}

id sub_10000B680@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDB70);
  v8 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 72);
  *a2 = v6;
  return v6;
}

void sub_10000B70C(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDB70);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100014D74, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_10000B7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v26;

  v1 = v0;
  v2 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + 40) = 0;
  *(_QWORD *)(v0 + 48) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 64) = objc_msgSend(objc_allocWithZone((Class)NSCache), "init");
  v6 = objc_msgSend(objc_allocWithZone((Class)NSCache), "init");
  *(_QWORD *)(v0 + 72) = v6;
  ObservationRegistrar.init()(v6);
  v7 = sub_10000BC8C(0);
  *(_QWORD *)(v0 + 16) = v7;
  v8 = type metadata accessor for StoreContext();
  v9 = (_QWORD *)swift_allocObject(v8, 40, 7);
  v10 = type metadata accessor for ModelContext(0);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v11 = swift_retain_n(v7, 2);
  v12 = ModelContext.init(_:)(v11);
  v13 = type metadata accessor for DefaultSerialModelExecutor(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = DefaultSerialModelExecutor.init(modelContext:)(v12);
  v15 = sub_100005178(&qword_100114360, (uint64_t (*)(uint64_t))&type metadata accessor for DefaultSerialModelExecutor, (uint64_t)&protocol conformance descriptor for DefaultSerialModelExecutor);
  v9[2] = v14;
  v9[3] = v15;
  v9[4] = v7;
  *(_QWORD *)(v1 + 24) = v9;
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v5, 1, 1, v16);
  v17 = swift_allocObject(&unk_1001087C0, 24, 7);
  swift_weakInit(v17 + 16, v1);
  v18 = (_QWORD *)swift_allocObject(&unk_1001087E8, 40, 7);
  v18[2] = 0;
  v18[3] = 0;
  v18[4] = v17;
  v19 = sub_10000D7B0((uint64_t)v5, (uint64_t)&unk_100114370, (uint64_t)v18);
  swift_release(v19);
  sub_100013F4C((uint64_t)v5);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100014124(v20, (uint64_t)qword_10011FEA8);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully initialized record manager.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  return v1;
}

uint64_t sub_10000BC8C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  id v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  uint8_t *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(char *, uint64_t);
  os_log_type_t v80;
  void (*v81)(char *, uint64_t);
  char *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint8_t *v111;
  char *v112;
  char *v113;
  char *v114;
  char *v115;
  int v116;
  __int128 v117;
  uint64_t v118;
  char *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;

  v116 = a1;
  v1 = type metadata accessor for ModelConfiguration.GroupContainer(0);
  v3 = __chkstk_darwin(v1, v2);
  v114 = (char *)&v111 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModelConfiguration.CloudKitDatabase(0, v3);
  v7 = __chkstk_darwin(v5, v6);
  v113 = (char *)&v111 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ModelConfiguration(0, v7);
  v10 = *(_QWORD **)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v112 = (char *)&v111 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v115 = (char *)&v111 - v15;
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v111 - v18;
  v20 = type metadata accessor for Schema.Version(0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v111 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100005360(&qword_100114388);
  v25 = swift_allocObject(v24, 48, 7);
  v117 = xmmword_1000CD7E0;
  *(_OWORD *)(v25 + 16) = xmmword_1000CD7E0;
  v26 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v27 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  *(_QWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 40) = v27;
  Schema.Version.init(_:_:_:)(1, 0, 0);
  v28 = type metadata accessor for Schema(0);
  swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  v29 = Schema.init(_:version:)(v25, v23);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v119 = v19;
  v122 = v9;
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100014124(v30, (uint64_t)qword_10011FEA8);
  v32 = swift_retain_n(v29, 2);
  v121 = v31;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter();
  v35 = os_log_type_enabled(v33, v34);
  v120 = (void (*)(char *, uint64_t))v10;
  if (v35)
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v125 = (char *)v37;
    *(_DWORD *)v36 = 136315138;
    v123 = v29;
    swift_retain(v29);
    v38 = String.init<A>(describing:)(&v123, v28);
    v40 = v39;
    v123 = sub_100029918(v38, v39, (uint64_t *)&v125);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124);
    swift_release_n(v29, 2);
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "setup - schema: %s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_release_n(v29, 2);
  }
  v41 = (void *)objc_opt_self(NSProcessInfo);
  v42 = objc_msgSend(v41, "processInfo");
  v43 = objc_msgSend(v42, "environment");

  v44 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v43, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v44 + 16))
  {
    sub_1000053A4(0xD00000000000001BLL, 0x80000001000D5750);
    v46 = v45;
    v47 = swift_bridgeObjectRelease(v44);
    v48 = v122;
    v49 = (uint64_t)v119;
    v50 = v120;
    if ((v46 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    swift_bridgeObjectRelease(v44);
    v48 = v122;
    v49 = (uint64_t)v119;
    v50 = v120;
  }
  v51 = objc_msgSend(v41, "processInfo");
  v52 = objc_msgSend(v51, "environment");

  v53 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v52, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v53 + 16)
    && (v54 = sub_1000053A4(0xD00000000000001ALL, 0x80000001000D5770), (v55 & 1) != 0)
    && ((v56 = (uint64_t *)(*(_QWORD *)(v53 + 56) + 16 * v54),
         v58 = *v56,
         v57 = v56[1],
         swift_bridgeObjectRetain(v57),
         swift_bridgeObjectRelease(v53),
         v58 != 49)
     || (v53 = 0xE100000000000000, v57 != 0xE100000000000000)))
  {
    _stringCompareWithSmolCheck(_:_:expecting:)(v58, v57, 49, 0xE100000000000000, 0);
    v59 = v57;
  }
  else
  {
    v59 = v53;
  }
  v47 = swift_bridgeObjectRelease(v59);
LABEL_16:
  v60 = v113;
  v61 = static ModelConfiguration.CloudKitDatabase.none.getter(v47);
  v62 = v114;
  static ModelConfiguration.GroupContainer.automatic.getter(v61);
  ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)(0, 0, 0, 0, 1, v62, v60);
  v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v50[2];
  v64 = v115;
  v65 = v63(v115, v49, v48);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.debug.getter();
  v68 = os_log_type_enabled(v66, v67);
  v114 = (char *)v63;
  if (v68)
  {
    v69 = (uint8_t *)swift_slowAlloc(12, -1);
    v113 = (char *)swift_slowAlloc(32, -1);
    v125 = v113;
    v70 = (void (*)(char *, char *, uint64_t))v63;
    v71 = v64;
    *(_DWORD *)v69 = 136315138;
    v111 = v69 + 4;
    v72 = v112;
    v70(v112, v64, v122);
    v73 = String.init<A>(describing:)(v72, v122);
    v74 = v29;
    v75 = v49;
    v77 = v76;
    v123 = sub_100029918(v73, v76, (uint64_t *)&v125);
    v48 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124);
    v78 = v77;
    v49 = v75;
    v29 = v74;
    v50 = v120;
    swift_bridgeObjectRelease(v78);
    v79 = (void (*)(char *, uint64_t))v50[1];
    v79(v71, v48);
    v80 = v67;
    v81 = v79;
    _os_log_impl((void *)&_mh_execute_header, v66, v80, "setup - configuration: %s", v69, 0xCu);
    v82 = v113;
    swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v69, -1, -1);
  }
  else
  {
    v81 = (void (*)(char *, uint64_t))v50[1];
    v81(v64, v48);
  }

  if ((v116 & 1) != 0)
  {
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v86 = 0;
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "setup - performing migration", v86, 2u);
      swift_slowDealloc(v86, -1, -1);
    }

  }
  type metadata accessor for ModelContainer(0);
  v87 = sub_100005360(&qword_100114390);
  v88 = *((unsigned __int8 *)v50 + 80);
  v89 = (v88 + 32) & ~v88;
  v90 = swift_allocObject(v87, v89 + v50[9], v88 | 7);
  *(_OWORD *)(v90 + 16) = v117;
  ((void (*)(uint64_t, uint64_t, uint64_t))v114)(v90 + v89, v49, v48);
  v91 = swift_retain(v29);
  v92 = v118;
  v93 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)(v91, 0, 0, v90);
  if (v92)
  {
    v81((char *)v49, v48);
    swift_release(v29);
    v94 = sub_1000142EC();
    swift_allocError(&type metadata for ModelError, v94, 0, 0);
    *v95 = v92;
    swift_willThrow();
  }
  else
  {
    v49 = v93;
    v118 = v29;
    v120 = v81;
    v96 = swift_retain_n(v93, 2);
    v97 = Logger.logObject.getter(v96);
    v98 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc(12, -1);
      v100 = swift_slowAlloc(32, -1);
      v125 = (char *)v100;
      *(_DWORD *)v99 = 136315138;
      v123 = v49;
      v101 = type metadata accessor for ModelContainer(0);
      swift_retain(v49);
      v102 = String.init<A>(describing:)(&v123, v101);
      v104 = v103;
      v123 = sub_100029918(v102, v103, (uint64_t *)&v125);
      v48 = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124);
      swift_release_n(v49, 2);
      swift_bridgeObjectRelease(v104);
      _os_log_impl((void *)&_mh_execute_header, v97, v98, "setup - container: %s", v99, 0xCu);
      swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v99, -1, -1);

    }
    else
    {

      v105 = swift_release_n(v49, 2);
    }
    v106 = v118;
    v107 = Logger.logObject.getter(v105);
    v108 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v109 = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Successfully initialized data store", v109, 2u);
      swift_slowDealloc(v109, -1, -1);
    }
    swift_release(v106);

    v120(v119, v48);
  }
  return v49;
}

void sub_10000C674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[2];
  uint64_t v104;
  unint64_t v105[2];
  _QWORD v106[4];

  v2 = v1;
  v4 = sub_100005360(&qword_100114330);
  __chkstk_darwin(v4, v5);
  v97 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FilteredHistoryRecord(0);
  v95 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v96 = (uint64_t)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v100 = (uint64_t)&v92 - v12;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  v106[0] = a1;
  KeyPath = swift_getKeyPath(&unk_1000CDA10);
  v92 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  v94 = v18;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v106, KeyPath, v92);
  swift_release(KeyPath);
  v20 = swift_getKeyPath(&unk_1000CDA10);
  v21 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v22 = sub_100005178(&qword_100114310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v93 = v21;
  v101 = a1;
  PersistentModel.getValue<A>(forKey:)(v20, v21, v22);
  swift_release(v20);
  v102 = sub_100031964();
  v24 = v23;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v25 = swift_getKeyPath(&unk_1000CDA38);
  v26 = v2 + OBJC_IVAR____TtC10Calculator30CalculatorHistoryRecordManager___observationRegistrar;
  v106[0] = v2;
  v27 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  v99 = v26;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v106, v25, v27);
  swift_release(v25);
  v98 = (unint64_t *)(v2 + 48);
  swift_beginAccess(v2 + 48, v106, 0, 0);
  v28 = *(_QWORD *)(v2 + 48);
  v29 = *(_QWORD *)(v28 + 16);
  if (!v29)
  {
LABEL_28:
    v61 = sub_100005360(&qword_100114320);
    v62 = swift_allocObject(v61, 40, 7);
    *(_OWORD *)(v62 + 16) = xmmword_1000CD7F0;
    v63 = v101;
    *(_QWORD *)(v62 + 32) = v101;
    v104 = v62;
    specialized Array._endMutation()(v62);
    v64 = v104;
    swift_retain(v63);
    v65 = v102;
    v66 = sub_100014070(v102, v24);
    v67 = v100;
    UUID.init()(v66);
    v68 = (uint64_t *)(v67 + *(int *)(v7 + 20));
    *v68 = v65;
    v68[1] = v24;
    *(_QWORD *)(v67 + *(int *)(v7 + 24)) = v64;
    v69 = v96;
    sub_100014084(v67, v96, type metadata accessor for FilteredHistoryRecord);
    v70 = swift_getKeyPath(&unk_1000CDA38);
    v104 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, v70, v27);
    swift_release(v70);
    v104 = v2;
    v71 = swift_getKeyPath(&unk_1000CDA38);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v104, v71, v27);
    swift_release(v71);
    swift_beginAccess(v98, &v104, 33, 0);
    v72 = v97;
    sub_1000140C8(v69, v97, type metadata accessor for FilteredHistoryRecord);
    sub_1000541F0(0, 0, v72);
    swift_endAccess(&v104);
    v73 = swift_getKeyPath(&unk_1000CDA60);
    v104 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, v73, v27);
    swift_release(v73);
    if ((*(_BYTE *)(v2 + 56) & 1) == 0)
    {
      v74 = swift_getKeyPath(&unk_1000CDA60);
      __chkstk_darwin(v74, v75);
      *(&v92 - 2) = v2;
      *((_BYTE *)&v92 - 8) = 1;
      v104 = v2;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v104, v74, sub_100014114, &v92 - 4, (char *)&type metadata for () + 8, v27);
      v76 = v74;
      v63 = v101;
      swift_release(v76);
    }
    v104 = v2;
    v77 = swift_getKeyPath(&unk_1000CDA38);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v104, v77, v27);
    swift_release(v77);
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v78 = type metadata accessor for Logger(0);
    sub_100014124(v78, (uint64_t)qword_10011FEA8);
    swift_retain_n(v63, 2);
    v79 = sub_100014070(v65, v24);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = v63;
      v83 = swift_slowAlloc(22, -1);
      v84 = swift_slowAlloc(64, -1);
      v103[0] = v84;
      *(_DWORD *)v83 = 136315394;
      v104 = v82;
      v85 = swift_getKeyPath(&unk_1000CD8A8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, v85, v92);
      swift_release(v85);
      v86 = swift_getKeyPath(&unk_1000CD8A8);
      PersistentModel.getValue<A>(forKey:)(v86, v93, &protocol witness table for String);
      swift_release(v86);
      v87 = v105[0];
      v104 = sub_100029918(v104, v105[0], v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      swift_release_n(v82, 2);
      swift_bridgeObjectRelease(v87);
      *(_WORD *)(v83 + 12) = 2080;
      v88 = 0x7961646F54;
      v89 = 0xE500000000000000;
      v90 = v102;
      switch(v24)
      {
        case 0uLL:
          break;
        case 1uLL:
          v88 = 0x6164726574736559;
          v89 = 0xE900000000000079;
          break;
        case 2uLL:
          v88 = 0x73756F6976657250;
          v89 = 0xEF73796144203720;
          break;
        case 3uLL:
          v89 = 0x80000001000D56E0;
          v88 = 0xD000000000000010;
          break;
        default:
          v90 = v102;
          v88 = v102;
          v89 = v24;
          break;
      }
      sub_100014070(v90, v24);
      v104 = sub_100029918(v88, v89, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      swift_bridgeObjectRelease(v89);
      sub_10001413C(v90, v24);
      sub_10001413C(v90, v24);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Added record: %s to history in new section for: %s", (uint8_t *)v83, 0x16u);
      swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);

    }
    else
    {

      sub_10001413C(v65, v24);
      sub_10001413C(v65, v24);
      swift_release_n(v63, 2);
    }
    sub_100014150(v100, type metadata accessor for FilteredHistoryRecord);
    return;
  }
  v30 = 0;
  v31 = (*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80);
  v32 = *(_QWORD *)(v95 + 72);
  while (2)
  {
    v33 = (_QWORD *)(v28 + v31 + *(int *)(v7 + 20));
    v34 = v33[1];
    switch(v34)
    {
      case 0:
        if (v24)
          goto LABEL_4;
        goto LABEL_18;
      case 1:
        if (v24 == 1)
          goto LABEL_18;
        goto LABEL_4;
      case 2:
        if (v24 == 2)
          goto LABEL_18;
        goto LABEL_4;
      case 3:
        if (v24 != 3)
          goto LABEL_4;
        goto LABEL_18;
      default:
        if (v24 < 4
          || (*v33 == v102 ? (v35 = v34 == v24) : (v35 = 0),
              !v35 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v33, v34, v102, v24, 0) & 1) == 0))
        {
LABEL_4:
          ++v30;
          v31 += v32;
          if (v29 == v30)
            goto LABEL_28;
          continue;
        }
LABEL_18:
        v36 = swift_getKeyPath(&unk_1000CDA38);
        v104 = v2;
        swift_retain(v101);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, v36, v27);
        swift_release(v36);
        v104 = v2;
        v37 = swift_getKeyPath(&unk_1000CDA38);
        ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v104, v37, v27);
        swift_release(v37);
        v38 = v98;
        swift_beginAccess(v98, &v104, 33, 0);
        v39 = *(_QWORD *)(v2 + 48);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
        *(_QWORD *)(v2 + 48) = v39;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v39 = sub_10005497C(v39);
          *v38 = v39;
        }
        v41 = v102;
        if (v30 >= *(_QWORD *)(v39 + 16))
        {
          __break(1u);
        }
        else
        {
          v7 = *(_QWORD *)(v39 + v31 + *(int *)(v7 + 24));
          if (!((unint64_t)v7 >> 62))
            goto LABEL_22;
        }
        if (v7 < 0)
          v91 = v7;
        else
          v91 = v7 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v7);
        v42 = _CocoaArrayWrapper.endIndex.getter(v91);
        swift_bridgeObjectRelease(v7);
        if (v42 < 0)
        {
          __break(1u);
          goto LABEL_52;
        }
LABEL_22:
        v42 = v101;
        sub_1000543BC(0, 0, v101);
        swift_endAccess(&v104);
        v43 = swift_getKeyPath(&unk_1000CDA60);
        v104 = v2;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, v43, v27);
        swift_release(v43);
        if ((*(_BYTE *)(v2 + 56) & 1) == 0)
        {
          v44 = swift_getKeyPath(&unk_1000CDA60);
          __chkstk_darwin(v44, v45);
          *(&v92 - 2) = v2;
          *((_BYTE *)&v92 - 8) = 1;
          v104 = v2;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v104, v44, sub_100014F30, &v92 - 4, (char *)&type metadata for () + 8, v27);
          v46 = v44;
          v42 = v101;
          swift_release(v46);
        }
        v104 = v2;
        v47 = swift_getKeyPath(&unk_1000CDA38);
        ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v104, v47, v27);
        swift_release(v47);
        if (qword_100113F00 != -1)
LABEL_52:
          swift_once(&qword_100113F00, sub_1000A85AC);
        v48 = type metadata accessor for Logger(0);
        sub_100014124(v48, (uint64_t)qword_10011FEA8);
        swift_retain_n(v42, 2);
        v49 = sub_100014070(v41, v24);
        v50 = Logger.logObject.getter(v49);
        v51 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v50, v51))
        {
          v52 = v42;
          v53 = swift_slowAlloc(22, -1);
          v54 = swift_slowAlloc(64, -1);
          v103[0] = v54;
          *(_DWORD *)v53 = 136315394;
          v104 = v52;
          v55 = swift_getKeyPath(&unk_1000CD8A8);
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, v55, v92);
          swift_release(v55);
          v56 = swift_getKeyPath(&unk_1000CD8A8);
          PersistentModel.getValue<A>(forKey:)(v56, v93, &protocol witness table for String);
          swift_release(v56);
          v57 = v105[0];
          v104 = sub_100029918(v104, v105[0], v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
          swift_release_n(v52, 2);
          swift_bridgeObjectRelease(v57);
          *(_WORD *)(v53 + 12) = 2080;
          v58 = 0x7961646F54;
          v59 = 0xE500000000000000;
          v60 = v102;
          switch(v24)
          {
            case 0uLL:
              break;
            case 1uLL:
              v58 = 0x6164726574736559;
              v59 = 0xE900000000000079;
              break;
            case 2uLL:
              v58 = 0x73756F6976657250;
              v59 = 0xEF73796144203720;
              break;
            case 3uLL:
              v59 = 0x80000001000D56E0;
              v58 = 0xD000000000000010;
              break;
            default:
              v60 = v102;
              v58 = v102;
              v59 = v24;
              break;
          }
          sub_100014070(v60, v24);
          v104 = sub_100029918(v58, v59, v103);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
          swift_bridgeObjectRelease(v59);
          sub_10001413C(v60, v24);
          sub_10001413C(v60, v24);
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Added record: %s to history in existing section: %s", (uint8_t *)v53, 0x16u);
          swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1, -1);
          swift_slowDealloc(v53, -1, -1);

        }
        else
        {
          swift_release_n(v42, 2);
          sub_10001413C(v41, v24);
          sub_10001413C(v41, v24);

        }
        return;
    }
  }
}

uint64_t sub_10000D3C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_QWORD);
  uint64_t v12;
  _QWORD *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[3];

  v2 = v1;
  v4 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GenericRecord(0);
  v32 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v32 + 64);
  __chkstk_darwin(v8, v10);
  sub_100014084(a1, (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v12 = type metadata accessor for SchemaV1.HistoryRecord(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = sub_10004CDAC((uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  KeyPath = swift_getKeyPath(&unk_1000CDAB0);
  v33[0] = v1;
  v15 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v33, KeyPath, v15);
  swift_release(KeyPath);
  if ((*(_BYTE *)(v1 + 40) & 1) != 0)
  {
    sub_10000C674((uint64_t)v13);
    v16 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    if (qword_100113CA8 != -1)
      swift_once(&qword_100113CA8, sub_10004E6C0);
    objc_msgSend(v16, "postNotificationName:object:", qword_10011FC50, 0);

  }
  else
  {
    v31 = a1;
    v17 = swift_getKeyPath(&unk_1000CDA88);
    v33[0] = v1;
    swift_retain(v13);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v33, v17, v15);
    swift_release(v17);
    v33[0] = v1;
    v18 = swift_getKeyPath(&unk_1000CDA88);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v33, v18, v15);
    swift_release(v18);
    v19 = swift_beginAccess(v1 + 32, v33, 33, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
    v21 = *(_QWORD *)((*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v20 = *(_QWORD *)((*(_QWORD *)(v1 + 32) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v21 >= v20 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
    v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v13);
    specialized Array._endMutation()(v22);
    swift_endAccess(v33);
    v33[0] = v1;
    v23 = swift_getKeyPath(&unk_1000CDA88);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v33, v23, v15);
    swift_release(v23);
    a1 = v31;
  }
  v24 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v7, 1, 1, v24);
  sub_100014084(a1, (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for GenericRecord);
  v25 = *(unsigned __int8 *)(v32 + 80);
  v26 = (v25 + 40) & ~v25;
  v27 = (_QWORD *)swift_allocObject(&unk_100108990, v26 + v9, v25 | 7);
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = v2;
  sub_1000140C8((uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v27 + v26, type metadata accessor for GenericRecord);
  swift_retain(v2);
  v28 = sub_10000D7B0((uint64_t)v7, (uint64_t)&unk_100114408, (uint64_t)v27);
  swift_release(v13);
  swift_release(v28);
  return sub_100013F4C((uint64_t)v7);
}

uint64_t sub_10000D744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10000D75C, 0, 0);
}

uint64_t sub_10000D75C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100116B34);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_100014F28;
  return sub_10006F6E8(*(_QWORD *)(v0 + 24));
}

uint64_t sub_10000D7B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v6 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013F8C(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100013F4C((uint64_t)v9);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
    {
LABEL_3:
      v14 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v13);
      swift_unknownObjectRetain(v13);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
      v18 = v17;
      swift_unknownObjectRelease(v13);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v12 = v19 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v20 = swift_allocObject(&unk_100108798, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  if (v18 | v16)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v16;
    v23[3] = v18;
  }
  else
  {
    v21 = 0;
  }
  return swift_task_create(v12, v21, (char *)&type metadata for () + 8, &unk_100114328, v20);
}

void sub_10000D938(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  void **p_vtable;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  BOOL v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int64_t *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138[3];
  uint64_t v139;
  _QWORD v140[4];

  v2 = v1;
  v4 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FilteredHistoryRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v131 = *(_QWORD *)(v13 - 8);
  v132 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v18 = v1 + OBJC_IVAR____TtC10Calculator30CalculatorHistoryRecordManager___observationRegistrar;
  v140[0] = v2;
  v19 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v140, KeyPath, v19);
  swift_release(KeyPath);
  swift_beginAccess(v2 + 48, v140, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16))
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v35 = type metadata accessor for Logger(0);
    sub_100014124(v35, (uint64_t)qword_10011FEA8);
    v36 = swift_retain_n(a1, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      *(_DWORD *)v39 = 136315138;
      v139 = v40;
      v136 = (uint64_t)(v39 + 4);
      v137 = a1;
      v41 = swift_getKeyPath(&unk_1000CD8A8);
      v42 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v41, v42);
      swift_release(v41);
      v43 = swift_getKeyPath(&unk_1000CD8A8);
      v44 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
      PersistentModel.getValue<A>(forKey:)(v43, v44, &protocol witness table for String);
      swift_release(v43);
      v45 = v138[0];
      v137 = sub_100029918(v137, v138[0], &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed to delete record: %s from empty list.", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      swift_release_n(a1, 2);
    }
    return;
  }
  v125 = v9;
  v133 = v18;
  v134 = v19;
  v127 = v7;
  v135 = v2;
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_100014124(v20, (uint64_t)qword_10011FEA8);
  v22 = swift_retain_n(a1, 2);
  v126 = v21;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  v25 = os_log_type_enabled(v23, v24);
  p_vtable = &OBJC_METACLASS____TtC10Calculator14AppRotationPPT.vtable;
  v136 = a1;
  v123 = v12;
  v124 = (int64_t *)(v2 + 48);
  if (v25)
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    *(_DWORD *)v27 = 136315138;
    v139 = v28;
    v130 = (uint64_t)(v27 + 4);
    v137 = v136;
    v29 = swift_getKeyPath(&unk_1000CD8A8);
    v30 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v29, v30);
    swift_release(v29);
    v31 = swift_getKeyPath(&unk_1000CD8A8);
    v32 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
    PersistentModel.getValue<A>(forKey:)(v31, v32, &protocol witness table for String);
    p_vtable = (void **)(&OBJC_METACLASS____TtC10Calculator14AppRotationPPT + 24);
    swift_release(v31);
    v33 = v138[0];
    v137 = sub_100029918(v137, v138[0], &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138);
    swift_release_n(v136, 2);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Deleting record: %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    v34 = v28;
    a1 = v136;
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v46 = (char *)p_vtable[318] + a1;
  v137 = a1;
  v47 = swift_getKeyPath(&unk_1000CDA10);
  v130 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  v128 = v46;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v47, v130);
  swift_release(v47);
  v48 = swift_getKeyPath(&unk_1000CDA10);
  v49 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v50 = sub_100005178(&qword_100114310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v129 = v49;
  PersistentModel.getValue<A>(forKey:)(v48, v49, v50);
  swift_release(v48);
  v51 = sub_100031964();
  v53 = v52;
  (*(void (**)(char *, uint64_t))(v131 + 8))(v16, v132);
  v54 = swift_getKeyPath(&unk_1000CDA38);
  v55 = v135;
  v137 = v135;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v54, v134);
  swift_release(v54);
  v56 = *(_QWORD *)(v55 + 48);
  v57 = *(_QWORD *)(v56 + 16);
  if (!v57)
  {
LABEL_40:
    v83 = v136;
    swift_retain_n(v136, 2);
    v92 = sub_100014070(v51, v53);
    v93 = Logger.logObject.getter(v92);
    v94 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = swift_slowAlloc(22, -1);
      v96 = swift_slowAlloc(64, -1);
      v139 = v96;
      *(_DWORD *)v95 = 136315394;
      v97 = 0x7961646F54;
      v98 = 0xE500000000000000;
      switch(v53)
      {
        case 0uLL:
          break;
        case 1uLL:
          v97 = 0x6164726574736559;
          v98 = 0xE900000000000079;
          break;
        case 2uLL:
          v97 = 0x73756F6976657250;
          v98 = 0xEF73796144203720;
          break;
        case 3uLL:
          v98 = 0x80000001000D56E0;
          v97 = 0xD000000000000010;
          break;
        default:
          v97 = v51;
          v98 = v53;
          break;
      }
      sub_100014070(v51, v53);
      v137 = sub_100029918(v97, v98, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138);
      swift_bridgeObjectRelease(v98);
      sub_10001413C(v51, v53);
      sub_10001413C(v51, v53);
      *(_WORD *)(v95 + 12) = 2080;
      v137 = v83;
      v109 = swift_getKeyPath(&unk_1000CD8A8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v109, v130);
      swift_release(v109);
      v110 = swift_getKeyPath(&unk_1000CD8A8);
      PersistentModel.getValue<A>(forKey:)(v110, v129, &protocol witness table for String);
      swift_release(v110);
      v111 = v138[0];
      v137 = sub_100029918(v137, v138[0], &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138);
      swift_release_n(v83, 2);
      swift_bridgeObjectRelease(v111);
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "Failed to find section: %s and delete record: %s", (uint8_t *)v95, 0x16u);
      swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v95, -1, -1);

      v55 = v135;
    }
    else
    {
      sub_10001413C(v51, v53);
      sub_10001413C(v51, v53);

      swift_release_n(v83, 2);
    }
    goto LABEL_58;
  }
  v58 = 0;
  v59 = (*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80);
  v60 = *(_QWORD *)(v125 + 72);
  while (2)
  {
    v61 = (_QWORD *)(v56 + v59 + *(int *)(v8 + 20));
    v62 = v61[1];
    switch(v62)
    {
      case 0:
        if (v53)
          goto LABEL_14;
        goto LABEL_28;
      case 1:
        if (v53 == 1)
          goto LABEL_28;
        goto LABEL_14;
      case 2:
        if (v53 == 2)
          goto LABEL_28;
        goto LABEL_14;
      case 3:
        if (v53 != 3)
          goto LABEL_14;
        goto LABEL_28;
      default:
        if (v53 < 4
          || (*v61 == v51 ? (v63 = v62 == v53) : (v63 = 0),
              !v63 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v61, v62, v51, v53, 0) & 1) == 0))
        {
LABEL_14:
          ++v58;
          v59 += v60;
          if (v57 == v58)
            goto LABEL_40;
          continue;
        }
LABEL_28:
        v64 = swift_getKeyPath(&unk_1000CDA38);
        v137 = v55;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v64, v134);
        swift_release(v64);
        v65 = *(_QWORD *)(v55 + 48);
        if (v58 >= *(_QWORD *)(v65 + 16))
        {
          __break(1u);
LABEL_60:
          v64 = sub_10005497C(v64);
          *v124 = v64;
LABEL_31:
          if (v58 >= *(_QWORD *)(v64 + 16))
          {
            __break(1u);
          }
          else
          {
            v76 = sub_10000ED88(v55, sub_100054990);
            swift_endAccess(&v137);
            swift_release(v76);
            v77 = swift_getKeyPath(&unk_1000CDA60);
            v78 = v134;
            v55 = v135;
            v137 = v135;
            ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v77, v134);
            swift_release(v77);
            if ((*(_BYTE *)(v55 + 56) & 1) == 0)
            {
              v79 = swift_getKeyPath(&unk_1000CDA60);
              __chkstk_darwin(v79, v80);
              *(&v122 - 2) = v55;
              *((_BYTE *)&v122 - 8) = 1;
              v137 = v55;
              ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v137, v79, sub_100014F30, &v122 - 4, (char *)&type metadata for () + 8, v78);
              swift_release(v79);
            }
            v137 = v55;
            v81 = swift_getKeyPath(&unk_1000CDA38);
            ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v137, v81, v78);
            swift_release(v81);
            v64 = swift_getKeyPath(&unk_1000CDA38);
            v137 = v55;
            ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v64, v78);
            swift_release(v64);
            v82 = *(_QWORD *)(v55 + 48);
            if (v58 < *(_QWORD *)(v82 + 16))
            {
              v64 = *(_QWORD *)(v82 + *(int *)(v8 + 24) + v59);
              if (!((unint64_t)v64 >> 62))
              {
                v83 = v136;
                if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_58;
                goto LABEL_37;
              }
LABEL_63:
              if (v64 < 0)
                v120 = v64;
              else
                v120 = v64 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v64);
              v121 = _CocoaArrayWrapper.endIndex.getter(v120);
              swift_bridgeObjectRelease(v64);
              v83 = v136;
              if (v121)
                goto LABEL_58;
LABEL_37:
              v84 = swift_getKeyPath(&unk_1000CDA38);
              v137 = v55;
              v85 = v134;
              ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v84, v134);
              swift_release(v84);
              v137 = v55;
              v86 = swift_getKeyPath(&unk_1000CDA38);
              ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v137, v86, v85);
              swift_release(v86);
              swift_beginAccess(v124, &v137, 33, 0);
              v87 = (uint64_t)v123;
              sub_10000EB74(v58, (uint64_t)v123);
              sub_100014150(v87, type metadata accessor for FilteredHistoryRecord);
              swift_endAccess(&v137);
              v88 = swift_getKeyPath(&unk_1000CDA60);
              v137 = v55;
              ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v88, v85);
              swift_release(v88);
              if ((*(_BYTE *)(v55 + 56) & 1) == 0)
              {
                v89 = swift_getKeyPath(&unk_1000CDA60);
                __chkstk_darwin(v89, v90);
                *(&v122 - 2) = v55;
                *((_BYTE *)&v122 - 8) = 1;
                v137 = v55;
                ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v137, v89, sub_100014F30, &v122 - 4, (char *)&type metadata for () + 8, v85);
                swift_release(v89);
              }
              v137 = v55;
              v91 = swift_getKeyPath(&unk_1000CDA38);
              ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v137, v91, v85);
              swift_release(v91);
              goto LABEL_58;
            }
          }
          __break(1u);
          goto LABEL_63;
        }
        v66 = *(_QWORD *)(v65 + *(int *)(v8 + 24) + v59);
        v67 = v136;
        swift_retain(v136);
        swift_bridgeObjectRetain(v66);
        v55 = sub_1000143C8(v68, v67);
        v70 = v69;
        swift_bridgeObjectRelease(v66);
        swift_release(v67);
        if ((v70 & 1) == 0)
        {
          sub_10001413C(v51, v53);
          v71 = swift_getKeyPath(&unk_1000CDA38);
          v73 = v134;
          v72 = v135;
          v137 = v135;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v71, v134);
          swift_release(v71);
          v137 = v72;
          v74 = swift_getKeyPath(&unk_1000CDA38);
          ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v137, v74, v73);
          swift_release(v74);
          swift_beginAccess(v124, &v137, 33, 0);
          v64 = *(_QWORD *)(v72 + 48);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v64);
          *(_QWORD *)(v72 + 48) = v64;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            goto LABEL_31;
          goto LABEL_60;
        }
        swift_retain_n(v67, 2);
        v99 = sub_100014070(v51, v53);
        v100 = Logger.logObject.getter(v99);
        v101 = static os_log_type_t.error.getter();
        v83 = v67;
        if (os_log_type_enabled(v100, v101))
        {
          v102 = swift_slowAlloc(22, -1);
          v103 = swift_slowAlloc(64, -1);
          v139 = v103;
          *(_DWORD *)v102 = 136315394;
          v137 = v67;
          v104 = swift_getKeyPath(&unk_1000CD8A8);
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v104, v130);
          swift_release(v104);
          v105 = swift_getKeyPath(&unk_1000CD8A8);
          PersistentModel.getValue<A>(forKey:)(v105, v129, &protocol witness table for String);
          swift_release(v105);
          v106 = v138[0];
          v137 = sub_100029918(v137, v138[0], &v139);
          v83 = v136;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138);
          swift_release_n(v83, 2);
          swift_bridgeObjectRelease(v106);
          *(_WORD *)(v102 + 12) = 2080;
          v107 = 0x7961646F54;
          v108 = 0xE500000000000000;
          switch(v53)
          {
            case 0uLL:
              break;
            case 1uLL:
              v107 = 0x6164726574736559;
              v108 = 0xE900000000000079;
              break;
            case 2uLL:
              v107 = 0x73756F6976657250;
              v108 = 0xEF73796144203720;
              break;
            case 3uLL:
              v108 = 0x80000001000D56E0;
              v107 = 0xD000000000000010;
              break;
            default:
              v107 = v51;
              v108 = v53;
              break;
          }
          sub_100014070(v51, v53);
          v137 = sub_100029918(v107, v108, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, v138);
          swift_bridgeObjectRelease(v108);
          sub_10001413C(v51, v53);
          sub_10001413C(v51, v53);
          _os_log_impl((void *)&_mh_execute_header, v100, v101, "Failed to find and delete record: %s from section: %s list.", (uint8_t *)v102, 0x16u);
          swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v103, -1, -1);
          swift_slowDealloc(v102, -1, -1);
        }
        else
        {
          swift_release_n(v67, 2);
          sub_10001413C(v51, v53);
          sub_10001413C(v51, v53);
        }

        v55 = v135;
LABEL_58:
        v137 = v83;
        v112 = swift_getKeyPath(&unk_1000CD8A8);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v137, v112, v130);
        swift_release(v112);
        v113 = swift_getKeyPath(&unk_1000CD8A8);
        PersistentModel.getValue<A>(forKey:)(v113, v129, &protocol witness table for String);
        swift_release(v113);
        v114 = v137;
        v115 = v138[0];
        v116 = type metadata accessor for TaskPriority(0);
        v117 = (uint64_t)v127;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v127, 1, 1, v116);
        v118 = (_QWORD *)swift_allocObject(&unk_100108968, 56, 7);
        v118[2] = 0;
        v118[3] = 0;
        v118[4] = v55;
        v118[5] = v114;
        v118[6] = v115;
        swift_retain(v55);
        v119 = sub_10000EF28(v117, (uint64_t)&unk_1001143F8, (uint64_t)v118);
        swift_release(v119);
        sub_100013F4C(v117);
        return;
    }
  }
}

uint64_t sub_10000EB74@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  unint64_t v13;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_10005497C(v5);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  v7 = v6 - 1;
  v8 = type metadata accessor for FilteredHistoryRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  result = sub_1000140C8(v11, a2, type metadata accessor for FilteredHistoryRecord);
  v13 = v7 - a1;
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * v13)
  {
    result = swift_arrayInitWithTakeFrontToBack(v11, v11 + v10, v13, v8);
  }
  else if (v10)
  {
    result = swift_arrayInitWithTakeBackToFront(v11);
  }
  *(_QWORD *)(v5 + 16) = v7;
  *v2 = v5;
  return result;
}

uint64_t sub_10000ECB0(unint64_t a1)
{
  _QWORD *v1;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t result;

  v3 = (_QWORD *)*v1;
  if ((swift_isUniquelyReferenced_nonNull_native(*v1) & 1) == 0)
    v3 = sub_100054994(v3);
  v4 = v3[2];
  if (v4 <= a1)
  {
    __break(1u);
  }
  else
  {
    v5 = v4 - 1;
    v6 = v4 - 1 - a1;
    if (v6 >= 0)
    {
      v7 = (unsigned __int8 *)v3 + a1 + 32;
      v8 = *v7;
      memmove(v7, v7 + 1, v6);
      v3[2] = v5;
      *v1 = v3;
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000ED7C(unint64_t a1)
{
  return sub_10000ED88(a1, sub_100054990);
}

uint64_t sub_10000ED88(unint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t *v2;
  uint64_t v5;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t result;
  char v15;

  v5 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *v2 = v5;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v5 < 0 || (v5 & 0x4000000000000000) != 0)
  {
    v5 = a2(v5);
    *v2 = v5;
  }
  v7 = v5 & 0xFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8 <= a1)
  {
    __break(1u);
  }
  else
  {
    v9 = v8 - 1;
    v10 = v8 - 1 - a1;
    if (v10 >= 0)
    {
      v11 = v7 + 8 * a1;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = memmove((void *)(v11 + 32), (const void *)(v11 + 40), 8 * v10);
      *(_QWORD *)(v7 + 16) = v9;
      specialized Array._endMutation()(v13);
      return v12;
    }
  }
  v15 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v15, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000EE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_10000EE88, 0, 0);
}

uint64_t sub_10000EE88()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_100116B3C);
  v0[5] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10000EEE0;
  return sub_10006FD60(v0[3], v0[4], 0);
}

uint64_t sub_10000EEE0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 40);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000EF28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int8 v20;
  _QWORD v22[4];

  v6 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100013F8C(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100013F4C((uint64_t)v9);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (!v13)
    {
LABEL_6:
      v19 = 0;
      return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v20 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v12 = v20 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (!v13)
      goto LABEL_6;
  }
  v14 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v13);
  swift_unknownObjectRetain(v13);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
  v18 = v17;
  swift_unknownObjectRelease(v13);
  if (!(v18 | v16))
    goto LABEL_6;
  v22[0] = 0;
  v22[1] = 0;
  v19 = v22;
  v22[2] = v16;
  v22[3] = v18;
  return swift_task_create(v12, v19, (char *)&type metadata for () + 8, a2, a3);
}

uint64_t sub_10000F098(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = sub_100005360(&qword_1001142E0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    result = __CocoaSet.count.getter(v9, v6);
    if (!result)
      return result;
  }
  else
  {
    result = *(_QWORD *)(a1 + 16);
    if (!result)
      return result;
  }
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100014124(v11, (uint64_t)qword_10011FEA8);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Deleting multiple records.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  KeyPath = swift_getKeyPath(&unk_1000CD8A8);
  swift_retain(KeyPath);
  sub_100014658(a1, sub_1000143C0);
  v18 = v17;
  swift_release_n(KeyPath, 2);
  v19 = type metadata accessor for TaskPriority(0);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v20(v8, 1, 1, v19);
  v21 = (_QWORD *)swift_allocObject(&unk_100108860, 48, 7);
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v2;
  v21[5] = v18;
  swift_retain(v2);
  swift_bridgeObjectRetain(v18);
  v22 = sub_10000D7B0((uint64_t)v8, (uint64_t)&unk_1001143B8, (uint64_t)v21);
  swift_release(v22);
  sub_100013F4C((uint64_t)v8);
  v20(v8, 1, 1, v19);
  v23 = (_QWORD *)swift_allocObject(&unk_100108888, 48, 7);
  v23[2] = 0;
  v23[3] = 0;
  v23[4] = v2;
  v23[5] = v18;
  swift_retain(v2);
  v24 = sub_10000EF28((uint64_t)v8, (uint64_t)&unk_1001143C8, (uint64_t)v23);
  swift_release(v24);
  return sub_100013F4C((uint64_t)v8);
}

uint64_t sub_10000F2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  swift_retain(a1);
  swift_getAtKeyPath(&v5, &v6, a2);
  swift_release(a1);
  return v5;
}

uint64_t sub_10000F338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v5[12] = a4;
  v5[13] = a5;
  v6 = sub_100005360(&qword_1001142E0);
  v5[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FilteredHistoryRecord(0);
  v5[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[17] = swift_task_alloc(v9);
  v5[18] = swift_task_alloc(v9);
  v5[19] = swift_task_alloc(v9);
  v5[20] = swift_task_alloc(v9);
  v5[21] = swift_task_alloc(v9);
  v5[22] = swift_task_alloc(v9);
  return swift_task_switch(sub_10000F3FC, 0, 0);
}

uint64_t sub_10000F3FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  BOOL v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t *v136;
  _QWORD *v137;
  uint64_t *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;

  v1 = v0;
  v2 = v0[12];
  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v0[9] = v2;
  v4 = v0 + 9;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v2 + 48, v4 - 7, 0, 0);
  v6 = *(_QWORD *)(v2 + 48);
  v152 = v6;
  v128 = *(_QWORD *)(v6 + 16);
  if (!v128)
  {
    swift_bridgeObjectRetain(v6);
    goto LABEL_206;
  }
  v136 = v4 + 1;
  v138 = v4 + 2;
  v7 = v1[15];
  v127 = v1[16];
  v8 = (_QWORD *)v1[13];
  swift_bridgeObjectRetain(v6);
  v9 = 0;
  v137 = v8;
  v125 = v8 + 9;
  v148 = v1;
  v126 = v7;
  do
  {
    if (v9 >= *(_QWORD *)(v6 + 16))
      goto LABEL_214;
    v133 = v6;
    v135 = v9;
    v130 = (*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
    v129 = *(_QWORD *)(v127 + 72) * v9;
    v11 = *(_QWORD *)(v6 + v130 + v129 + *(int *)(v7 + 24));
    v153 = v11;
    v131 = v6 + v130 + v129;
    v132 = (unint64_t)v11 >> 62;
    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0)
        v61 = v11;
      else
        v61 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v11, 2);
      v12 = _CocoaArrayWrapper.endIndex.getter(v61);
      if (!v12)
        goto LABEL_32;
LABEL_8:
      v13 = 0;
      v149 = v137[2];
      while (1)
      {
        if ((v11 & 0xC000000000000001) != 0)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
        }
        else
        {
          v14 = *(_QWORD *)(v11 + 32 + 8 * v13);
          swift_retain(v14);
        }
        v1[10] = v14;
        v15 = swift_getKeyPath(&unk_1000CD8A8);
        v144 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v136, v15, v144);
        swift_release(v15);
        v16 = swift_getKeyPath(&unk_1000CD8A8);
        v142 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
        PersistentModel.getValue<A>(forKey:)(v16, v142, &protocol witness table for String);
        swift_release(v16);
        v17 = v1[6];
        if (v149)
        {
          v18 = v1[5];
          v20 = v137[4];
          v19 = v137[5];
          if (v20 == v18 && v19 == v17)
          {
            v146 = v1[6];
            goto LABEL_46;
          }
          v146 = v137[5];
          if ((_stringCompareWithSmolCheck(_:_:expecting:)(v137[4], v19, v18, v17, 0) & 1) != 0)
            goto LABEL_44;
          if (v149 != 1)
          {
            v21 = v137[6];
            v22 = v137[7];
            if (v21 == v18 && v22 == v17
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v18, v17, 0) & 1) != 0)
            {
LABEL_44:
              v18 = v20;
              goto LABEL_46;
            }
            if (v149 != 2)
              break;
          }
        }
LABEL_30:
        swift_bridgeObjectRelease(v17);
        swift_release(v14);
        v29 = __OFADD__(v13++, 1);
        if (v29)
          goto LABEL_211;
        if (v13 == v12)
          goto LABEL_32;
      }
      v23 = v125;
      v24 = 2;
      while (1)
      {
        v25 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_210;
        v26 = *(v23 - 1);
        v27 = *v23;
        v28 = v26 == v18 && v27 == v17;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, v18, v17, 0) & 1) != 0)
          break;
        ++v24;
        v23 += 2;
        v28 = v25 == v149;
        v1 = v148;
        if (v28)
          goto LABEL_30;
      }
      v18 = v20;
      v1 = v148;
LABEL_46:
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v17);
      swift_release(v14);
      v36 = v13 + 1;
      if (__OFADD__(v13, 1))
        goto LABEL_227;
      if (v132)
      {
        if (v11 < 0)
          v63 = v11;
        else
          v63 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v37 = _CocoaArrayWrapper.endIndex.getter(v63);
        swift_bridgeObjectRelease(v11);
      }
      else
      {
        v37 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      while (1)
      {
        if (v36 == v37)
          goto LABEL_34;
        if ((v11 & 0xC000000000000001) != 0)
        {
          v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v11);
        }
        else
        {
          if ((v36 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_208:
            __break(1u);
LABEL_209:
            __break(1u);
LABEL_210:
            __break(1u);
LABEL_211:
            __break(1u);
LABEL_212:
            __break(1u);
LABEL_213:
            __break(1u);
LABEL_214:
            __break(1u);
LABEL_215:
            __break(1u);
LABEL_216:
            __break(1u);
LABEL_217:
            __break(1u);
LABEL_218:
            __break(1u);
LABEL_219:
            __break(1u);
LABEL_220:
            __break(1u);
LABEL_221:
            __break(1u);
LABEL_222:
            __break(1u);
LABEL_223:
            __break(1u);
LABEL_224:
            __break(1u);
LABEL_225:
            __break(1u);
LABEL_226:
            __break(1u);
LABEL_227:
            __break(1u);
LABEL_228:
            __break(1u);
LABEL_229:
            __break(1u);
LABEL_230:
            __break(1u);
LABEL_231:
            __break(1u);
LABEL_232:
            __break(1u);
LABEL_233:
            __break(1u);
            goto LABEL_234;
          }
          if (v36 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_208;
          v38 = *(_QWORD *)(v11 + 8 * v36 + 32);
          swift_retain(v38);
        }
        v1[11] = v38;
        v39 = swift_getKeyPath(&unk_1000CD8A8);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v138, v39, v144);
        swift_release(v39);
        v40 = swift_getKeyPath(&unk_1000CD8A8);
        PersistentModel.getValue<A>(forKey:)(v40, v142, &protocol witness table for String);
        swift_release(v40);
        v42 = v1[7];
        v41 = v1[8];
        if (v18 == v42)
        {
          v43 = v146;
          if (v146 == v41)
            goto LABEL_84;
        }
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v18, v146, v1[7], v1[8], 0) & 1) != 0)
          break;
        if (v149 != 1)
        {
          v52 = v137[6];
          v53 = v137[7];
          if (v52 == v42 && v53 == v41
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v52, v53, v42, v41, 0) & 1) != 0)
          {
LABEL_83:
            v43 = v41;
            v1 = v148;
            goto LABEL_84;
          }
          if (v149 != 2)
          {
            v54 = v125;
            v55 = 2;
            do
            {
              v56 = v55 + 1;
              if (__OFADD__(v55, 1))
                goto LABEL_212;
              v57 = *(v54 - 1);
              v58 = *v54;
              v59 = v57 == v42 && v58 == v41;
              if (v59 || (_stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, v42, v41, 0) & 1) != 0)
                goto LABEL_83;
              ++v55;
              v54 += 2;
            }
            while (v56 != v149);
          }
        }
        swift_bridgeObjectRelease(v41);
        swift_release(v38);
        v1 = v148;
        if (v13 != v36)
        {
          if ((v11 & 0xC000000000000001) != 0)
          {
            v45 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
            v46 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v11);
          }
          else
          {
            if (v13 < 0)
              goto LABEL_219;
            v44 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v13 >= v44)
              goto LABEL_220;
            v45 = *(_QWORD *)(v11 + 32 + 8 * v13);
            swift_retain(v45);
            if ((v36 & 0x8000000000000000) != 0)
              goto LABEL_221;
            if (v36 >= v44)
              goto LABEL_222;
            v46 = *(_QWORD *)(v11 + 32 + 8 * v36);
            swift_retain(v46);
          }
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v11)
            || v11 < 0
            || (v11 & 0x4000000000000000) != 0)
          {
            v11 = sub_100054990(v11);
            v153 = v11;
          }
          v47 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v13 + 0x20);
          *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v13 + 0x20) = v46;
          swift_release(v47);
          specialized Array._endMutation()(v48);
          v49 = v153;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v153)
            || (v153 & 0x8000000000000000) != 0
            || (v153 & 0x4000000000000000) != 0)
          {
            v49 = sub_100054990(v153);
            v153 = v49;
          }
          if ((v36 & 0x8000000000000000) != 0)
            goto LABEL_223;
          if (v36 >= *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_224;
          v50 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 8 * v36 + 0x20);
          *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 8 * v36 + 0x20) = v45;
          swift_release(v50);
          specialized Array._endMutation()(v51);
        }
        v29 = __OFADD__(v13++, 1);
        if (v29)
          goto LABEL_213;
LABEL_85:
        v29 = __OFADD__(v36++, 1);
        if (v29)
          goto LABEL_209;
        v11 = v153;
        if (v153 >> 62)
        {
          if ((v153 & 0x8000000000000000) != 0)
            v60 = v153;
          else
            v60 = v153 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v153);
          v37 = _CocoaArrayWrapper.endIndex.getter(v60);
          swift_bridgeObjectRelease(v153);
        }
        else
        {
          v37 = *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
      }
      v43 = v41;
LABEL_84:
      swift_bridgeObjectRelease(v43);
      swift_release(v38);
      goto LABEL_85;
    }
    v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n(v11, 2);
    if (v12)
      goto LABEL_8;
LABEL_32:
    swift_bridgeObjectRelease(v11);
    if (v132)
    {
      if (v11 < 0)
        v64 = v11;
      else
        v64 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v13 = _CocoaArrayWrapper.endIndex.getter(v64);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
LABEL_34:
    v6 = v133;
    if ((unint64_t)v11 >> 62)
    {
      if (v11 < 0)
        v62 = v11;
      else
        v62 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v30 = _CocoaArrayWrapper.endIndex.getter(v62);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      v30 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v7 = v126;
    if (v30 < v13)
      goto LABEL_215;
    sub_1000551A4(v13, v30);
    if (v135 >= *(_QWORD *)(v133 + 16))
      goto LABEL_216;
    v31 = *(_QWORD *)(v131 + *(int *)(v126 + 24));
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v153);
    v32 = sub_10001354C(v31, v153);
    swift_bridgeObjectRelease(v153);
    swift_bridgeObjectRelease(v31);
    if ((v32 & 1) != 0)
    {
      swift_bridgeObjectRelease(v153);
      v10 = v135;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v133) & 1) == 0)
        v6 = sub_10005497C(v133);
      v10 = v135;
      if (v135 >= *(_QWORD *)(v6 + 16))
        goto LABEL_228;
      v33 = v6 + v130 + v129;
      v34 = *(int *)(v126 + 24);
      v35 = *(_QWORD *)(v33 + v34);
      *(_QWORD *)(v33 + v34) = v153;
      swift_bridgeObjectRelease(v35);
      v152 = v6;
    }
    v9 = v10 + 1;
  }
  while (v9 != v128);
  v65 = *(_QWORD *)(v6 + 16);
  if (v65)
  {
    v66 = v1[16];
    v145 = (*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80);
    v147 = v1[15];
    v67 = v6 + v145;
    swift_bridgeObjectRetain(v6);
    v68 = 0;
    v139 = v65;
    v140 = v6 + v145;
    v141 = v66;
    while (1)
    {
      if (v68 >= *(_QWORD *)(v6 + 16))
        goto LABEL_225;
      v70 = v1[22];
      v71 = *(_QWORD *)(v66 + 72);
      sub_100014084(v67 + v71 * v68, v70, type metadata accessor for FilteredHistoryRecord);
      v72 = *(_QWORD *)(v70 + *(int *)(v147 + 24));
      if ((unint64_t)v72 >> 62)
      {
        if (v72 < 0)
          v110 = v72;
        else
          v110 = v72 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v72);
        v111 = _CocoaArrayWrapper.endIndex.getter(v110);
        swift_bridgeObjectRelease(v72);
        if (v111)
          goto LABEL_126;
      }
      else if (*(_QWORD *)((v72 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_126;
      }
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v74 = v1[21];
      v73 = v1[22];
      v75 = type metadata accessor for Logger(0);
      sub_100014124(v75, (uint64_t)qword_10011FEA8);
      v76 = sub_100014084(v73, v74, type metadata accessor for FilteredHistoryRecord);
      v77 = Logger.logObject.getter(v76);
      v78 = v1;
      v79 = static os_log_type_t.info.getter();
      v80 = os_log_type_enabled(v77, v79);
      v81 = v78[21];
      v82 = v147;
      v134 = v6;
      v143 = v68;
      if (v80)
      {
        v83 = swift_slowAlloc(12, -1);
        v84 = swift_slowAlloc(32, -1);
        v153 = v84;
        *(_DWORD *)v83 = 136315138;
        v85 = (uint64_t *)(v81 + *(int *)(v147 + 20));
        v86 = v85[1];
        v87 = 0xE500000000000000;
        v88 = 0x7961646F54;
        switch(v86)
        {
          case 0uLL:
            break;
          case 1uLL:
            v87 = 0xE900000000000079;
            v88 = 0x6164726574736559;
            break;
          case 2uLL:
            v87 = 0xEF73796144203720;
            v88 = 0x73756F6976657250;
            break;
          case 3uLL:
            v87 = 0x80000001000D56E0;
            v88 = 0xD000000000000010;
            break;
          default:
            v88 = *v85;
            v87 = v85[1];
            break;
        }
        v89 = v148[21];
        sub_100014070(*v85, v86);
        *(_QWORD *)(v83 + 4) = sub_100029918(v88, v87, (uint64_t *)&v153);
        swift_bridgeObjectRelease(v87);
        sub_100014150(v89, type metadata accessor for FilteredHistoryRecord);
        _os_log_impl((void *)&_mh_execute_header, v77, v79, "Empty section found for %s deleting multiple records, removing section from list", (uint8_t *)v83, 0xCu);
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1, -1);
        swift_slowDealloc(v83, -1, -1);

        v68 = v143;
      }
      else
      {
        sub_100014150(v81, type metadata accessor for FilteredHistoryRecord);

      }
      v90 = v152;
      v91 = *(_QWORD *)(v152 + 16);
      if (!v91)
      {
        v69 = 0;
        v1 = v148;
        v67 = v140;
        v66 = v141;
        goto LABEL_125;
      }
      v150 = (_QWORD *)(v148[22] + *(int *)(v147 + 20));
      v92 = v152 + v145;
      swift_bridgeObjectRetain(v152);
      v93 = 0;
      v94 = v145 + v71;
      v95 = 1;
      while (2)
      {
        v96 = v148[20];
        sub_100014084(v92, v96, type metadata accessor for FilteredHistoryRecord);
        v97 = (_QWORD *)(v96 + *(int *)(v147 + 20));
        v98 = v97[1];
        v99 = v150[1];
        switch(v98)
        {
          case 0:
            sub_100014150(v148[20], type metadata accessor for FilteredHistoryRecord);
            if (!v99)
              goto LABEL_162;
            goto LABEL_143;
          case 1:
            sub_100014150(v148[20], type metadata accessor for FilteredHistoryRecord);
            if (v99 == 1)
              goto LABEL_162;
            goto LABEL_143;
          case 2:
            sub_100014150(v148[20], type metadata accessor for FilteredHistoryRecord);
            if (v99 == 2)
              goto LABEL_162;
            goto LABEL_143;
          case 3:
            sub_100014150(v148[20], type metadata accessor for FilteredHistoryRecord);
            if (v99 == 3)
              goto LABEL_162;
            goto LABEL_143;
          default:
            if (v99 < 4
              || (*v97 == *v150 ? (v100 = v98 == v99) : (v100 = 0),
                  !v100 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v97, v98, *v150, v150[1], 0) & 1) == 0))
            {
              sub_100014150(v148[20], type metadata accessor for FilteredHistoryRecord);
LABEL_143:
              ++v93;
              v92 += v71;
              ++v95;
              v94 += v71;
              if (v91 == v93)
              {
                swift_bridgeObjectRelease(v152);
                v69 = *(_QWORD *)(v152 + 16);
                v1 = v148;
                goto LABEL_198;
              }
              continue;
            }
            sub_100014150(v148[20], type metadata accessor for FilteredHistoryRecord);
LABEL_162:
            swift_bridgeObjectRelease(v152);
            v69 = v93 + 1;
            if (__OFADD__(v93, 1))
            {
LABEL_235:
              __break(1u);
              JUMPOUT(0x1000104FCLL);
            }
            v101 = *(_QWORD *)(v152 + 16);
            v91 = v93;
            if (v69 == v101)
            {
              v1 = v148;
              goto LABEL_198;
            }
            v1 = v148;
            while (2)
            {
              if (v95 >= v101)
                goto LABEL_217;
              v102 = v1[19];
              sub_100014084(v90 + v94, v102, type metadata accessor for FilteredHistoryRecord);
              v103 = (_QWORD *)(v102 + *(int *)(v82 + 20));
              v104 = v103[1];
              v105 = v150[1];
              switch(v104)
              {
                case 0:
                  sub_100014150(v1[19], type metadata accessor for FilteredHistoryRecord);
                  if (!v105)
                    goto LABEL_188;
                  goto LABEL_178;
                case 1:
                  sub_100014150(v1[19], type metadata accessor for FilteredHistoryRecord);
                  if (v105 == 1)
                    goto LABEL_188;
                  goto LABEL_178;
                case 2:
                  sub_100014150(v1[19], type metadata accessor for FilteredHistoryRecord);
                  if (v105 == 2)
                    goto LABEL_188;
                  goto LABEL_178;
                case 3:
                  sub_100014150(v1[19], type metadata accessor for FilteredHistoryRecord);
                  if (v105 != 3)
                    goto LABEL_178;
                  goto LABEL_188;
                default:
                  if (v105 < 4)
                  {
                    sub_100014150(v1[19], type metadata accessor for FilteredHistoryRecord);
                    if (v95 == v91)
                      goto LABEL_187;
LABEL_179:
                    if ((v91 & 0x8000000000000000) != 0)
                      goto LABEL_229;
                    v106 = *(_QWORD *)(v90 + 16);
                    if (v91 >= v106)
                      goto LABEL_230;
                    sub_100014084(v90 + v145 + v91 * v71, v148[18], type metadata accessor for FilteredHistoryRecord);
                    if (v95 >= v106)
                      goto LABEL_231;
                    sub_100014084(v90 + v94, v148[17], type metadata accessor for FilteredHistoryRecord);
                    v1 = v148;
                    if ((swift_isUniquelyReferenced_nonNull_native(v90) & 1) == 0)
                      v90 = sub_10005497C(v90);
                    v82 = v147;
                    if (v91 >= *(_QWORD *)(v90 + 16))
                      goto LABEL_232;
                    sub_100014B34(v148[17], v90 + v145 + v91 * v71);
                    if (v95 >= *(_QWORD *)(v90 + 16))
                      goto LABEL_233;
                    sub_100014B34(v148[18], v90 + v94);
                    goto LABEL_187;
                  }
                  v107 = v1[19];
                  if (*v103 == *v150 && v104 == v105)
                  {
                    sub_100014150(v1[19], type metadata accessor for FilteredHistoryRecord);
                    goto LABEL_188;
                  }
                  v109 = _stringCompareWithSmolCheck(_:_:expecting:)(*v103, v104, *v150, v150[1], 0);
                  sub_100014150(v107, type metadata accessor for FilteredHistoryRecord);
                  if ((v109 & 1) != 0)
                    goto LABEL_188;
LABEL_178:
                  if (v95 != v91)
                    goto LABEL_179;
LABEL_187:
                  v29 = __OFADD__(v91++, 1);
                  if (v29)
                    goto LABEL_226;
LABEL_188:
                  v69 = v95 + 1;
                  if (__OFADD__(v95, 1))
                    goto LABEL_218;
                  v101 = *(_QWORD *)(v90 + 16);
                  ++v95;
                  v94 += v71;
                  if (v69 != v101)
                    continue;
                  v152 = v90;
                  break;
              }
              break;
            }
LABEL_198:
            v6 = v134;
            v67 = v140;
            v66 = v141;
            v68 = v143;
            if (v69 < (uint64_t)v91)
            {
LABEL_234:
              __break(1u);
              goto LABEL_235;
            }
LABEL_125:
            sub_100055470(v91, v69);
            v65 = v139;
LABEL_126:
            ++v68;
            sub_100014150(v1[22], type metadata accessor for FilteredHistoryRecord);
            if (v68 == v65)
            {
              swift_bridgeObjectRelease(v6);
              v6 = v152;
              goto LABEL_206;
            }
            break;
        }
        break;
      }
    }
  }
LABEL_206:
  v112 = v1[21];
  v113 = v1[22];
  v114 = v1[19];
  v115 = v1[20];
  v116 = v1[18];
  v151 = v1[17];
  v117 = v1[14];
  v118 = v1[12];
  v119 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v119 - 8) + 56))(v117, 1, 1, v119);
  type metadata accessor for MainActor(0);
  swift_bridgeObjectRetain(v6);
  v120 = swift_retain(v118);
  v121 = static MainActor.shared.getter(v120);
  v122 = (_QWORD *)swift_allocObject(&unk_1001088B0, 48, 7);
  v122[2] = v121;
  v122[3] = &protocol witness table for MainActor;
  v122[4] = v118;
  v122[5] = v6;
  v123 = sub_100096424(v117, (uint64_t)&unk_1001143D8, (uint64_t)v122);
  swift_bridgeObjectRelease(v6);
  swift_release(v123);
  swift_task_dealloc(v113);
  swift_task_dealloc(v112);
  swift_task_dealloc(v115);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v151);
  swift_task_dealloc(v117);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_10001052C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[3] = a4;
  v5[4] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[5] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100010598, v7, v8);
}

uint64_t sub_100010598()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 40));
  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  swift_bridgeObjectRetain(v1);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100014F5C, v4, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v1);
  swift_release(KeyPath);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100010684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_10001069C, 0, 0);
}

uint64_t sub_10001069C()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100116B44);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1000106F0;
  return sub_100070714(*(_QWORD *)(v0 + 24));
}

uint64_t sub_1000106F0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100010738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  _QWORD v26[3];

  v1 = v0;
  v2 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v2, v3);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v26[0] = v0;
  v7 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v26, KeyPath, v7);
  swift_release(KeyPath);
  result = swift_beginAccess(v0 + 48, v26, 1, 0);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 48) + 16))
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100014124(v9, (uint64_t)qword_10011FEA8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Deleting all records from memory.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    v14 = swift_getKeyPath(&unk_1000CDA38);
    v25 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v14, v7);
    swift_release(v14);
    v25 = v1;
    v15 = swift_getKeyPath(&unk_1000CDA38);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v25, v15, v7);
    swift_release(v15);
    v16 = *(_QWORD *)(v1 + 48);
    *(_QWORD *)(v1 + 48) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v16);
    v17 = swift_getKeyPath(&unk_1000CDA60);
    v25 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v17, v7);
    swift_release(v17);
    if ((*(_BYTE *)(v1 + 56) & 1) == 0)
    {
      v18 = swift_getKeyPath(&unk_1000CDA60);
      __chkstk_darwin(v18, v19);
      *(_QWORD *)&v24[-16] = v1;
      v24[-8] = 1;
      v25 = v1;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v25, v18, sub_100014F30, &v24[-32], (char *)&type metadata for () + 8, v7);
      swift_release(v18);
    }
    v25 = v1;
    v20 = swift_getKeyPath(&unk_1000CDA38);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v25, v20, v7);
    swift_release(v20);
    v21 = type metadata accessor for TaskPriority(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 1, 1, v21);
    v22 = (_QWORD *)swift_allocObject(&unk_100108838, 40, 7);
    v22[2] = 0;
    v22[3] = 0;
    v22[4] = v1;
    swift_retain(v1);
    v23 = sub_10000D7B0((uint64_t)v5, (uint64_t)&unk_1001143A8, (uint64_t)v22);
    swift_release(v23);
    return sub_100013F4C((uint64_t)v5);
  }
  return result;
}

uint64_t sub_100010A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100010AA4, 0, 0);
}

uint64_t sub_100010AA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v2 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v3 = (_QWORD *)swift_task_alloc(dword_100116B4C);
  *(_QWORD *)(v0 + 24) = v3;
  *v3 = v0;
  v3[1] = sub_100010B2C;
  return sub_100071518(v1, v2);
}

uint64_t sub_100010B2C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_100010B74()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[3];

  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v9[0] = v0;
  v2 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 48, v9, 0, 0);
  v3 = *(_QWORD *)(v0 + 48);
  if (*(_QWORD *)(v3 + 16))
  {
    v4 = type metadata accessor for FilteredHistoryRecord(0);
    v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 8) + 80);
    v6 = *(_QWORD *)(v3 + ((v5 + 32) & ~v5) + *(int *)(v4 + 24));
    if ((unint64_t)v6 >> 62)
    {
      if (v6 < 0)
        v8 = v6;
      else
        v8 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      if (!_CocoaArrayWrapper.endIndex.getter(v8))
        goto LABEL_7;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v6);
      if (!v7)
      {
LABEL_7:
        swift_bridgeObjectRelease(v6);
        return;
      }
    }
    if ((v6 & 0xC000000000000001) != 0)
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)(0, v6);
      goto LABEL_7;
    }
    if (*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      swift_retain(*(_QWORD *)(v6 + 32));
      goto LABEL_7;
    }
    __break(1u);
  }
}

uint64_t CalculatorHistoryRecordManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  v1 = v0 + OBJC_IVAR____TtC10Calculator30CalculatorHistoryRecordManager___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t CalculatorHistoryRecordManager.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  v1 = v0 + OBJC_IVAR____TtC10Calculator30CalculatorHistoryRecordManager___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100010DBC()
{
  return type metadata accessor for CalculatorHistoryRecordManager(0);
}

uint64_t type metadata accessor for CalculatorHistoryRecordManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100114218;
  if (!qword_100114218)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorHistoryRecordManager);
  return result;
}

uint64_t sub_100010E00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_1000CD890;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = &unk_1000CD890;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100010EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[6] = a4;
  v5 = type metadata accessor for FilteredHistoryRecord(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v7);
  v4[10] = swift_task_alloc(v7);
  v8 = type metadata accessor for Date(0);
  v4[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[12] = v9;
  v4[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005360(&qword_1001142E0);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100010F64, 0, 0);
}

uint64_t sub_100010F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 120) = Strong;
  if (Strong)
  {
    v3 = *(_QWORD *)(Strong + 24);
    *(_QWORD *)(v0 + 128) = v3;
    v4 = dword_100116B2C;
    swift_retain(v3);
    v5 = (_QWORD *)swift_task_alloc(v4);
    *(_QWORD *)(v0 + 136) = v5;
    *v5 = v0;
    v5[1] = sub_10001102C;
    return sub_10006EA60();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001102C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_100011090, 0, 0);
}

uint64_t sub_100011090()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = *(_QWORD *)(v0 + 144);
  v53 = *(_QWORD *)(v1 + 16);
  if (v53)
  {
    v2 = 0;
    v52 = *(_QWORD *)(v0 + 96);
    v51 = v1 + 32;
    v4 = *(_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 64);
    v5 = _swiftEmptyArrayStorage;
    v50 = *(_QWORD *)(v0 + 144);
    do
    {
      if (v2 >= *(_QWORD *)(v1 + 16))
        goto LABEL_39;
      v7 = *(_QWORD *)(v0 + 104);
      v54 = v2;
      v55 = *(_QWORD *)(v0 + 88);
      v8 = *(_QWORD *)(v51 + 8 * v2);
      v9 = type metadata accessor for SchemaV1.HistoryRecord(0);
      swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
      v10 = swift_bridgeObjectRetain(v8);
      v11 = sub_10004C250(v10);
      *(_QWORD *)(v0 + 40) = v11;
      KeyPath = swift_getKeyPath(&unk_1000CDA10);
      v13 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 40, KeyPath, v13);
      swift_release(KeyPath);
      v14 = swift_getKeyPath(&unk_1000CDA10);
      v15 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
      v16 = sub_100005178(&qword_100114310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v57 = v11;
      PersistentModel.getValue<A>(forKey:)(v14, v15, v16);
      swift_release(v14);
      v58 = sub_100031964();
      v18 = v17;
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v7, v55);
      v19 = v5[2];
      if (v19)
      {
        v56 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
        swift_bridgeObjectRetain(v5);
        while (2)
        {
          if (v19 > v5[2])
          {
            __break(1u);
LABEL_39:
            __break(1u);
            goto LABEL_40;
          }
          v20 = v19 - 1;
          v21 = *(_QWORD *)(v0 + 80);
          v22 = *(_QWORD *)(v3 + 72) * (v19 - 1);
          sub_100014084((uint64_t)v5 + v56 + v22, v21, type metadata accessor for FilteredHistoryRecord);
          v23 = (_QWORD *)(v21 + *(int *)(v4 + 20));
          v24 = v23[1];
          switch(v24)
          {
            case 0:
              if (!v18)
                goto LABEL_24;
              goto LABEL_9;
            case 1:
              if (v18 == 1)
                goto LABEL_24;
              goto LABEL_9;
            case 2:
              if (v18 == 2)
                goto LABEL_24;
              goto LABEL_9;
            case 3:
              if (v18 != 3)
                goto LABEL_9;
              goto LABEL_24;
            default:
              if (v18 >= 4)
              {
                v25 = *v23 == v58 && v24 == v18;
                if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v58, v18, 0) & 1) != 0)
                {
LABEL_24:
                  sub_100014150(*(_QWORD *)(v0 + 80), type metadata accessor for FilteredHistoryRecord);
                  swift_bridgeObjectRelease(v5);
                  sub_10001413C(v58, v18);
                  swift_retain(v57);
                  if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
                    v5 = (_QWORD *)sub_10005497C((unint64_t)v5);
                  if (v19 <= v5[2])
                  {
                    v26 = (_QWORD *)((char *)v5 + v56 + *(int *)(v4 + 24) + v22);
                    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                    v28 = *(_QWORD *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    v27 = *(_QWORD *)((*v26 & 0xFFFFFFFFFFFFFF8) + 0x18);
                    if (v28 >= v27 >> 1)
                      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
                    v29 = v28;
                    v30 = v57;
                    v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v57);
                    specialized Array._endMutation()(v31);
                    goto LABEL_4;
                  }
LABEL_40:
                  __break(1u);
                  JUMPOUT(0x1000115DCLL);
                }
              }
LABEL_9:
              sub_100014150(*(_QWORD *)(v0 + 80), type metadata accessor for FilteredHistoryRecord);
              --v19;
              if (v20)
                continue;
              swift_bridgeObjectRelease(v5);
              break;
          }
          break;
        }
      }
      v32 = *(_QWORD *)(v0 + 72);
      v33 = sub_100005360(&qword_100114320);
      v34 = swift_allocObject(v33, 40, 7);
      *(_OWORD *)(v34 + 16) = xmmword_1000CD7F0;
      v30 = v57;
      *(_QWORD *)(v34 + 32) = v57;
      v59 = v34;
      specialized Array._endMutation()(v34);
      v35 = swift_retain(v57);
      UUID.init()(v35);
      v36 = (uint64_t *)(v32 + *(int *)(v4 + 20));
      *v36 = v58;
      v36[1] = v18;
      *(_QWORD *)(v32 + *(int *)(v4 + 24)) = v59;
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
        v5 = (_QWORD *)sub_100071BF8(0, v5[2] + 1, 1, (unint64_t)v5);
      v38 = v5[2];
      v37 = v5[3];
      if (v38 >= v37 >> 1)
        v5 = (_QWORD *)sub_100071BF8(v37 > 1, v38 + 1, 1, (unint64_t)v5);
      v6 = *(_QWORD *)(v0 + 72);
      v5[2] = v38 + 1;
      sub_1000140C8(v6, (uint64_t)v5+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v38, type metadata accessor for FilteredHistoryRecord);
LABEL_4:
      v2 = v54 + 1;
      swift_release(v30);
      v1 = v50;
    }
    while (v54 + 1 != v53);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v5 = _swiftEmptyArrayStorage;
  }
  v40 = *(_QWORD *)(v0 + 112);
  v39 = *(_QWORD *)(v0 + 120);
  v41 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  type metadata accessor for MainActor(0);
  v42 = swift_retain(v39);
  v43 = static MainActor.shared.getter(v42);
  v44 = (_QWORD *)swift_allocObject(&unk_100108810, 48, 7);
  v44[2] = v43;
  v44[3] = &protocol witness table for MainActor;
  v44[4] = v39;
  v44[5] = v5;
  v45 = sub_100096424(v40, (uint64_t)&unk_100114380, (uint64_t)v44);
  swift_release(v45);
  swift_release(v39);
  v46 = *(_QWORD *)(v0 + 104);
  v48 = *(_QWORD *)(v0 + 72);
  v47 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000115EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[6] = a4;
  v5[7] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[8] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100011658, v7, v8);
}

uint64_t sub_100011658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 64));
  KeyPath = swift_getKeyPath(&unk_1000CDA38);
  v4 = swift_task_alloc(32);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  swift_bridgeObjectRetain(v1);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100014F5C, v4, (char *)&type metadata for () + 8, v5);
  swift_bridgeObjectRelease(v1);
  swift_release(KeyPath);
  swift_task_dealloc(v4);
  v6 = swift_getKeyPath(&unk_1000CDA88);
  *(_QWORD *)(v0 + 16) = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, v6, v5);
  swift_release(v6);
  swift_beginAccess(v2 + 32, v0 + 16, 0, 0);
  v7 = *(_QWORD *)(v2 + 32);
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v13 = *(_QWORD *)(v2 + 32);
    else
      v13 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 32));
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(v7);
    if (!v14)
      goto LABEL_6;
  }
  else if (!*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_6;
  }
  sub_1000118B8();
  v8 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100113CA8 != -1)
    swift_once(&qword_100113CA8, sub_10004E6C0);
  objc_msgSend(v8, "postNotificationName:object:", qword_10011FC50, 0);

LABEL_6:
  v9 = *(_QWORD *)(v0 + 48);
  v10 = swift_getKeyPath(&unk_1000CDAB0);
  v11 = swift_task_alloc(32);
  *(_QWORD *)(v11 + 16) = v9;
  *(_BYTE *)(v11 + 24) = 1;
  *(_QWORD *)(v0 + 40) = v9;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 40, v10, sub_1000142C4, v11, (char *)&type metadata for () + 8, v5);
  swift_release(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000118B8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *log;
  unint64_t v38;
  _BYTE v39[24];
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = v0;
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v3 = type metadata accessor for Logger(0);
  sub_100014124(v3, (uint64_t)qword_10011FEA8);
  v4 = swift_retain_n(v0, 2);
  v5 = Logger.logObject.getter(v4);
  LOBYTE(v6) = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v5, (os_log_type_t)v6))
  {

    swift_release_n(v0, 2);
    goto LABEL_21;
  }
  v7 = swift_slowAlloc(12, -1);
  v1 = swift_slowAlloc(32, -1);
  v40 = v1;
  *(_DWORD *)v7 = 136315138;
  KeyPath = swift_getKeyPath(&unk_1000CDA88);
  v41 = v0;
  v9 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v41, KeyPath, v9);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 32, v39, 0, 0);
  v10 = *(_QWORD *)(v0 + 32);
  if ((unint64_t)v10 >> 62)
    goto LABEL_35;
  v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(*(_QWORD *)(v2 + 32), 2);
  while (1)
  {
    v36 = v1;
    log = v5;
    if (v11)
      break;
    v13 = _swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease_n(v10, 2);
    v24 = Array.description.getter(v13, &type metadata for String);
    v26 = v25;
    swift_bridgeObjectRelease(v13);
    v41 = sub_100029918(v24, v26, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, log, (os_log_type_t)v6, "Adding pending records performed before record manager initialization: %s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v7, -1, -1);

LABEL_21:
    v27 = swift_getKeyPath(&unk_1000CDA88);
    v10 = v2 + OBJC_IVAR____TtC10Calculator30CalculatorHistoryRecordManager___observationRegistrar;
    v41 = v2;
    v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v41, v27, v5);
    swift_release(v27);
    swift_beginAccess(v2 + 32, &v41, 1, 0);
    v7 = *(_QWORD *)(v2 + 32);
    if ((unint64_t)v7 >> 62)
    {
      if (v7 < 0)
        v30 = *(_QWORD *)(v2 + 32);
      else
        v30 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v2 + 32));
      v6 = _CocoaArrayWrapper.endIndex.getter(v30);
      if (!v6)
        goto LABEL_33;
    }
    else
    {
      v6 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v2 + 32));
      if (!v6)
        goto LABEL_33;
    }
    if (v6 >= 1)
    {
      for (i = 0; i != v6; ++i)
      {
        if ((v7 & 0xC000000000000001) != 0)
        {
          v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v7);
        }
        else
        {
          v29 = *(_QWORD *)(v7 + 8 * i + 32);
          swift_retain(v29);
        }
        sub_10000C674(v29);
        swift_release(v29);
      }
LABEL_33:
      swift_bridgeObjectRelease(v7);
      v31 = swift_getKeyPath(&unk_1000CDA88);
      v40 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v40, v31, v5);
      swift_release(v31);
      v40 = v2;
      v32 = swift_getKeyPath(&unk_1000CDA88);
      ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v40, v32, v5);
      swift_release(v32);
      v33 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)(v2 + 32) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v33);
      v40 = v2;
      v34 = swift_getKeyPath(&unk_1000CDA88);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v40, v34, v5);
      swift_release(v34);
      return;
    }
    __break(1u);
LABEL_35:
    if (v10 < 0)
      v35 = v10;
    else
      v35 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v10, 2);
    v11 = _CocoaArrayWrapper.endIndex.getter(v35);
  }
  if (v11 >= 1)
  {
    v12 = 0;
    v38 = v10 & 0xC000000000000001;
    v13 = _swiftEmptyArrayStorage;
    v14 = v10;
    do
    {
      if (v38)
      {
        v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
      }
      else
      {
        v15 = *(_QWORD *)(v10 + 8 * v12 + 32);
        swift_retain(v15);
      }
      v41 = v15;
      v16 = swift_getKeyPath(&unk_1000CD8A8);
      v17 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
      swift_retain(v15);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v41, v16, v17);
      swift_release(v16);
      v18 = swift_getKeyPath(&unk_1000CD8A8);
      v19 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
      PersistentModel.getValue<A>(forKey:)(v18, v19, &protocol witness table for String);
      swift_release_n(v15, 2);
      swift_release(v18);
      v20 = v41;
      v21 = v42;
      if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
        v13 = sub_100071E00(0, v13[2] + 1, 1, v13);
      v1 = v13[2];
      v22 = v13[3];
      if (v1 >= v22 >> 1)
        v13 = sub_100071E00((_QWORD *)(v22 > 1), v1 + 1, 1, v13);
      ++v12;
      v13[2] = v1 + 1;
      v23 = &v13[2 * v1];
      v23[4] = v20;
      v23[5] = v21;
      v10 = v14;
    }
    while (v11 != v12);
    goto LABEL_20;
  }
  __break(1u);
}

id sub_100011EC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_1000CDB98);
  v28 = v1;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v1 + 64);
  v28 = a1;
  v7 = swift_getKeyPath(&unk_1000CD8A8);
  v8 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  v9 = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v7, v8);
  swift_release(v7);
  v10 = swift_getKeyPath(&unk_1000CD8A8);
  v11 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v10, v11, &protocol witness table for String);
  swift_release(v10);
  v12 = v29;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = objc_msgSend(v9, "objectForKey:", v13);

  if (!v14)
  {
    v28 = a1;
    v15 = swift_getKeyPath(&unk_1000CD970);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v15, v8);
    swift_release(v15);
    v16 = swift_getKeyPath(&unk_1000CD970);
    PersistentModel.getValue<A>(forKey:)(v16, v11, &protocol witness table for String);
    swift_release(v16);
    v17 = v28;
    v18 = v29;
    v19 = sub_10001C104((uint64_t)_swiftEmptyArrayStorage);
    v14 = (id)sub_100055618(v17, v18, v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v19);
    v20 = swift_getKeyPath(&unk_1000CDB98);
    v28 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v20, v5);
    swift_release(v20);
    v21 = *(void **)(v2 + 64);
    v28 = a1;
    v22 = swift_getKeyPath(&unk_1000CD8A8);
    v23 = v21;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v22, v8);
    swift_release(v22);
    v24 = swift_getKeyPath(&unk_1000CD8A8);
    PersistentModel.getValue<A>(forKey:)(v24, v11, &protocol witness table for String);
    swift_release(v24);
    v25 = v29;
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    objc_msgSend(v23, "setObject:forKey:", v14, v26);

  }
  return v14;
}

id sub_1000121D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  uint64_t v28;
  uint64_t v29;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_1000CDB70);
  v28 = v1;
  v5 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v1 + 72);
  v28 = a1;
  v7 = swift_getKeyPath(&unk_1000CD8A8);
  v8 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  v9 = v6;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v7, v8);
  swift_release(v7);
  v10 = swift_getKeyPath(&unk_1000CD8A8);
  v11 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v10, v11, &protocol witness table for String);
  swift_release(v10);
  v12 = v29;
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v14 = objc_msgSend(v9, "objectForKey:", v13);

  if (!v14)
  {
    v28 = a1;
    v15 = swift_getKeyPath(&unk_1000CD998);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v15, v8);
    swift_release(v15);
    v16 = swift_getKeyPath(&unk_1000CD998);
    PersistentModel.getValue<A>(forKey:)(v16, v11, &protocol witness table for String);
    swift_release(v16);
    v17 = v28;
    v18 = v29;
    v19 = sub_10001C104((uint64_t)_swiftEmptyArrayStorage);
    v14 = (id)sub_100055618(v17, v18, v19);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v19);
    v20 = swift_getKeyPath(&unk_1000CDB70);
    v28 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v20, v5);
    swift_release(v20);
    v21 = *(void **)(v2 + 72);
    v28 = a1;
    v22 = swift_getKeyPath(&unk_1000CD8A8);
    v23 = v21;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v22, v8);
    swift_release(v22);
    v24 = swift_getKeyPath(&unk_1000CD8A8);
    PersistentModel.getValue<A>(forKey:)(v24, v11, &protocol witness table for String);
    swift_release(v24);
    v25 = v29;
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    objc_msgSend(v23, "setObject:forKey:", v14, v26);

  }
  return v14;
}

void sub_1000124E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  __n128 v39;
  _QWORD *v40;
  Swift::Int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::Int v60;
  Swift::Int v61;
  unint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  __n128 v73;
  uint64_t v74;
  Swift::Int v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t KeyPath;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  unint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  _QWORD *v154;
  unint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  unint64_t v160;

  v2 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v2, v3);
  v141 = (char *)&v132 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = type metadata accessor for GenericRecord(0);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin(v140, v5);
  v137 = (uint64_t)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = v6;
  __chkstk_darwin(v7, v8);
  v136 = (char *)&v132 - v9;
  v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
    goto LABEL_10;
  v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v11 >= 1)
  {
    v12 = 0;
    v13 = 0;
    while (1)
    {
      v14 = v12 + 1;
      if (__OFADD__(v12, 1))
        break;
      v15 = __OFADD__(v13, 1000);
      v13 += 1000;
      if (v15)
        v13 = 0x7FFFFFFFFFFFFFFFLL;
      ++v12;
      if (v13 >= v11)
        goto LABEL_15;
    }
    __break(1u);
LABEL_10:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v11 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  v14 = 0;
LABEL_15:
  v159 = _swiftEmptyArrayStorage;
  sub_100013778(0, v14 & ~(v14 >> 63), 0);
  if (v14 < 0)
  {
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
LABEL_172:
    __break(1u);
  }
  else
  {
    v17 = v159;
    v153 = (unint64_t)a1 >> 62;
    v156 = (_QWORD *)v11;
    if (v14)
    {
      v18 = 0;
      v19 = 0;
      v155 = a1 & 0xC000000000000001;
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v21 = a1;
      else
        v21 = a1 & 0xFFFFFFFFFFFFFF8;
      v150 = v20 + 32;
      v151 = v21;
      v157 = a1 & 0xFFFFFFFFFFFFFF8;
      while (1)
      {
        if (v18 == v14)
          goto LABEL_148;
        if (v19 >= v11)
        {
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
LABEL_162:
          __break(1u);
LABEL_163:
          __break(1u);
LABEL_164:
          __break(1u);
LABEL_165:
          __break(1u);
LABEL_166:
          __break(1u);
          goto LABEL_167;
        }
        if (__OFADD__(v19, 1000))
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v19 + 1000;
        if (__OFADD__(v19, 1000))
          goto LABEL_150;
        if (v11 >= v19 + 1000)
          v23 = v19 + 1000;
        else
          v23 = v11;
        if (v23 < v19)
          goto LABEL_151;
        v135 = v17;
        if (v10)
        {
          swift_bridgeObjectRetain(a1);
          v24 = _CocoaArrayWrapper.endIndex.getter(v151);
          swift_bridgeObjectRelease(a1);
        }
        else
        {
          v24 = *(_QWORD *)(v20 + 16);
        }
        if (v24 < v19)
          goto LABEL_152;
        if (v19 < 0)
          goto LABEL_153;
        if (v10)
        {
          swift_bridgeObjectRetain(a1);
          v25 = _CocoaArrayWrapper.endIndex.getter(v151);
          swift_bridgeObjectRelease(a1);
        }
        else
        {
          v25 = *(_QWORD *)(v20 + 16);
        }
        if (v25 < v23)
          goto LABEL_154;
        v154 = (_QWORD *)(v19 + 1000);
        if (v155 && v19 != v23)
        {
          if (v19 >= (unint64_t)v23)
            goto LABEL_162;
          type metadata accessor for SchemaV1.HistoryRecord(0);
          v26 = v19;
          do
          {
            v27 = v26 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v26);
            v26 = v27;
          }
          while (v23 != v27);
        }
        if (v10)
        {
          v39 = swift_bridgeObjectRetain(a1);
          v30 = _CocoaArrayWrapper.subscript.getter(v19, v23, v151, v39);
          v31 = v40;
          v19 = v41;
          v28 = v42;
          swift_bridgeObjectRelease(a1);
          if ((v28 & 1) == 0)
          {
LABEL_54:
            v36 = v28 >> 1;
            v37 = (v28 >> 1) - v19;
            if (__OFSUB__(v28 >> 1, v19))
              goto LABEL_161;
            if (v37)
            {
LABEL_56:
              v152 = v22;
              v43 = 8 * v37;
              if (v37 < 1)
              {
                v38 = _swiftEmptyArrayStorage;
                if (v19 == v36)
                  goto LABEL_168;
              }
              else
              {
                v44 = sub_100005360(&qword_100114320);
                v38 = (_QWORD *)swift_allocObject(v44, v43 + 32, 7);
                v45 = j__malloc_size(v38);
                v46 = v45 - 32;
                if (v45 < 32)
                  v46 = v45 - 25;
                v38[2] = v37;
                v38[3] = (2 * (v46 >> 3)) | 1;
                if (v19 == v36)
                  goto LABEL_168;
              }
              v10 = v153;
              if (v37 < 0)
                goto LABEL_170;
              v47 = (unint64_t)&v31[v19];
              if (v47 < (unint64_t)&v38[(unint64_t)v43 / 8 + 4]
                && (unint64_t)(v38 + 4) < v47 + v43)
              {
LABEL_171:
                _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
                goto LABEL_172;
              }
              type metadata accessor for SchemaV1.HistoryRecord(0);
              swift_arrayInitWithCopy(v38 + 4);
              v22 = v152;
              goto LABEL_68;
            }
            goto LABEL_67;
          }
        }
        else
        {
          v28 = (2 * v23) | 1;
          v29 = swift_bridgeObjectRetain(a1);
          v30 = v20;
          v31 = (_QWORD *)v150;
          if ((v28 & 1) == 0)
            goto LABEL_54;
        }
        v149 = v31;
        v152 = v22;
        v32 = type metadata accessor for __ContiguousArrayStorageBase(0, v29);
        v33 = swift_unknownObjectRetain_n(v30, 2);
        v34 = (_QWORD *)swift_dynamicCastClass(v33, v32);
        if (!v34)
        {
          swift_unknownObjectRelease(v30);
          v34 = _swiftEmptyArrayStorage;
        }
        v35 = v34[2];
        swift_release(v34);
        v36 = v28 >> 1;
        v37 = (v28 >> 1) - v19;
        if (__OFSUB__(v28 >> 1, v19))
          goto LABEL_163;
        if (v35 == v37)
        {
          v38 = (_QWORD *)swift_dynamicCastClass(v30, v32);
          v22 = v152;
          v10 = v153;
          if (!v38)
          {
            swift_unknownObjectRelease(v30);
            v38 = _swiftEmptyArrayStorage;
          }
          goto LABEL_68;
        }
        swift_unknownObjectRelease(v30);
        v22 = v152;
        v31 = v149;
        if (v37)
          goto LABEL_56;
LABEL_67:
        v38 = _swiftEmptyArrayStorage;
        v10 = v153;
LABEL_68:
        swift_unknownObjectRelease(v30);
        v17 = v135;
        v159 = v135;
        v49 = v135[2];
        v48 = v135[3];
        v50 = v49 + 1;
        v11 = (uint64_t)v156;
        v20 = v157;
        if (v49 >= v48 >> 1)
        {
          v152 = v22;
          sub_100013778(v48 > 1, v49 + 1, 1);
          v50 = v49 + 1;
          v22 = v152;
          v17 = v159;
        }
        ++v18;
        v17[2] = v50;
        v17[v49 + 4] = v38;
        v19 = v22;
        if (v18 == v14)
        {
          if (v22 < v11)
          {
            v51 = (Swift::Int)v154;
            goto LABEL_75;
          }
LABEL_129:
          v85 = 0;
          v133 = v17 + 4;
          v135 = v17;
          v132 = v50;
          while (2)
          {
            if (v85 >= v17[2])
            {
              __break(1u);
LABEL_148:
              __break(1u);
              goto LABEL_149;
            }
            v134 = v85;
            v86 = v133[v85];
            if ((unint64_t)v86 >> 62)
            {
              if (v86 < 0)
                v131 = v133[v85];
              else
                v131 = v86 & 0xFFFFFFFFFFFFFF8;
              swift_bridgeObjectRetain(v86);
              v87 = _CocoaArrayWrapper.endIndex.getter(v131);
              if (v87)
              {
LABEL_134:
                if (v87 < 1)
                  goto LABEL_155;
                v88 = 0;
                v142 = v86 & 0xC000000000000001;
                v143 = v87;
                v144 = v86;
                do
                {
                  if (v142)
                  {
                    v89 = specialized _ArrayBuffer._getElementSlowPath(_:)(v88, v86);
                  }
                  else
                  {
                    v89 = *(_QWORD *)(v86 + 8 * v88 + 32);
                    swift_retain(v89);
                  }
                  v157 = v88 + 1;
                  sub_10000C674(v89);
                  v159 = (_QWORD *)v89;
                  KeyPath = swift_getKeyPath(&unk_1000CD8A8);
                  v91 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, KeyPath, v91);
                  swift_release(KeyPath);
                  v92 = swift_getKeyPath(&unk_1000CD8A8);
                  v93 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
                  PersistentModel.getValue<A>(forKey:)(v92, v93, &protocol witness table for String);
                  swift_release(v92);
                  v155 = v160;
                  v156 = v159;
                  v159 = (_QWORD *)v89;
                  v94 = swift_getKeyPath(&unk_1000CD8D0);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v94, v91);
                  swift_release(v94);
                  v95 = swift_getKeyPath(&unk_1000CD8D0);
                  PersistentModel.getValue<A>(forKey:)(v95, v93, &protocol witness table for String);
                  swift_release(v95);
                  v153 = v160;
                  v154 = v159;
                  v159 = (_QWORD *)v89;
                  v96 = swift_getKeyPath(&unk_1000CD8F8);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v96, v91);
                  swift_release(v96);
                  v97 = swift_getKeyPath(&unk_1000CD8F8);
                  PersistentModel.getValue<A>(forKey:)(v97, v93, &protocol witness table for Bool);
                  swift_release(v97);
                  LODWORD(v152) = v159;
                  v159 = (_QWORD *)v89;
                  v98 = swift_getKeyPath(&unk_1000CD920);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v98, v91);
                  swift_release(v98);
                  v99 = swift_getKeyPath(&unk_1000CD920);
                  PersistentModel.getValue<A>(forKey:)(v99, v93, &protocol witness table for Bool);
                  swift_release(v99);
                  LODWORD(v151) = v159;
                  v159 = (_QWORD *)v89;
                  v100 = swift_getKeyPath(&unk_1000CD948);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v100, v91);
                  swift_release(v100);
                  v101 = swift_getKeyPath(&unk_1000CD948);
                  PersistentModel.getValue<A>(forKey:)(v101, v93, &protocol witness table for Bool);
                  swift_release(v101);
                  LODWORD(v150) = v159;
                  v159 = (_QWORD *)v89;
                  v102 = swift_getKeyPath(&unk_1000CD970);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v102, v91);
                  swift_release(v102);
                  v103 = swift_getKeyPath(&unk_1000CD970);
                  PersistentModel.getValue<A>(forKey:)(v103, v93, &protocol witness table for String);
                  swift_release(v103);
                  v148 = v160;
                  v149 = v159;
                  v159 = (_QWORD *)v89;
                  v104 = swift_getKeyPath(&unk_1000CD998);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v104, v91);
                  swift_release(v104);
                  v105 = swift_getKeyPath(&unk_1000CD998);
                  PersistentModel.getValue<A>(forKey:)(v105, v93, &protocol witness table for String);
                  swift_release(v105);
                  v146 = v160;
                  v147 = v159;
                  v159 = (_QWORD *)v89;
                  v106 = swift_getKeyPath(&unk_1000CD9C0);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v106, v91);
                  swift_release(v106);
                  v107 = swift_getKeyPath(&unk_1000CD9C0);
                  v108 = sub_100013E20();
                  PersistentModel.getValue<A>(forKey:)(v107, v93, v108);
                  swift_release(v107);
                  v109 = v160;
                  v145 = v159;
                  v159 = (_QWORD *)v89;
                  v110 = swift_getKeyPath(&unk_1000CD9E8);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v110, v91);
                  swift_release(v110);
                  v111 = swift_getKeyPath(&unk_1000CD9E8);
                  PersistentModel.getValue<A>(forKey:)(v111, v93, v108);
                  swift_release(v111);
                  v113 = v159;
                  v112 = v160;
                  v159 = (_QWORD *)v89;
                  v114 = swift_getKeyPath(&unk_1000CDA10);
                  ObservationRegistrar.access<A, B>(_:keyPath:)(&v159, v114, v91);
                  swift_release(v114);
                  v115 = swift_getKeyPath(&unk_1000CDA10);
                  v116 = (uint64_t)v136;
                  v117 = sub_100005178(&qword_100114310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                  PersistentModel.getValue<A>(forKey:)(v115, v93, v117);
                  swift_release(v115);
                  v118 = v155;
                  *(_QWORD *)v116 = v156;
                  *(_QWORD *)(v116 + 8) = v118;
                  v119 = v153;
                  *(_QWORD *)(v116 + 16) = v154;
                  *(_QWORD *)(v116 + 24) = v119;
                  *(_BYTE *)(v116 + 32) = v152;
                  *(_BYTE *)(v116 + 33) = v151;
                  *(_BYTE *)(v116 + 34) = v150;
                  v120 = v148;
                  *(_QWORD *)(v116 + 40) = v149;
                  *(_QWORD *)(v116 + 48) = v120;
                  v121 = v146;
                  *(_QWORD *)(v116 + 56) = v147;
                  *(_QWORD *)(v116 + 64) = v121;
                  *(_QWORD *)(v116 + 72) = v145;
                  *(_QWORD *)(v116 + 80) = v109;
                  *(_QWORD *)(v116 + 88) = v113;
                  *(_QWORD *)(v116 + 96) = v112;
                  v122 = type metadata accessor for TaskPriority(0);
                  v123 = (uint64_t)v141;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v141, 1, 1, v122);
                  v124 = v137;
                  sub_100014084(v116, v137, type metadata accessor for GenericRecord);
                  v125 = *(unsigned __int8 *)(v139 + 80);
                  v126 = (v125 + 40) & ~v125;
                  v127 = (_QWORD *)swift_allocObject(&unk_100108770, v126 + v138, v125 | 7);
                  v127[2] = 0;
                  v127[3] = 0;
                  v128 = v158;
                  v127[4] = v158;
                  v129 = (uint64_t)v127 + v126;
                  v88 = v157;
                  sub_1000140C8(v124, v129, type metadata accessor for GenericRecord);
                  swift_retain(v128);
                  v130 = sub_10000D7B0(v123, (uint64_t)&unk_100114318, (uint64_t)v127);
                  swift_release(v89);
                  swift_release(v130);
                  sub_100013F4C(v123);
                  sub_100014150(v116, type metadata accessor for GenericRecord);
                  v86 = v144;
                }
                while (v143 != v88);
              }
            }
            else
            {
              v87 = *(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(v86);
              if (v87)
                goto LABEL_134;
            }
            v85 = v134 + 1;
            swift_bridgeObjectRelease(v86);
            v17 = v135;
            if (v85 == v132)
              goto LABEL_145;
            continue;
          }
        }
      }
    }
    if (v11 >= 1)
    {
      v51 = 0;
      v155 = a1 & 0xC000000000000001;
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
LABEL_75:
      if (a1 < 0)
        v52 = a1;
      else
        v52 = v20;
      v151 = v20 + 32;
      v152 = v52;
      v53 = v51 + 1000;
      v54 = v51;
      v157 = v20;
      v154 = (_QWORD *)v51;
      while (1)
      {
        if (v11 >= v53)
          v55 = v53;
        else
          v55 = v11;
        v56 = v54 + 1000;
        if (__OFADD__(v54, 1000))
          goto LABEL_156;
        if (v11 >= v56)
          v57 = v54 + 1000;
        else
          v57 = v11;
        if (v57 < v54)
          goto LABEL_157;
        v135 = v17;
        if (v10)
        {
          swift_bridgeObjectRetain(a1);
          v58 = _CocoaArrayWrapper.endIndex.getter(v152);
          swift_bridgeObjectRelease(a1);
        }
        else
        {
          v58 = *(_QWORD *)(v20 + 16);
        }
        if (v58 < v54)
          goto LABEL_158;
        if (v51 < 0)
          goto LABEL_159;
        if (v10)
        {
          swift_bridgeObjectRetain(a1);
          v59 = _CocoaArrayWrapper.endIndex.getter(v152);
          swift_bridgeObjectRelease(a1);
        }
        else
        {
          v59 = *(_QWORD *)(v20 + 16);
        }
        if (v59 < v57)
          goto LABEL_160;
        if (v155 && v54 != v57)
        {
          if (v54 >= (unint64_t)v57)
            goto LABEL_165;
          type metadata accessor for SchemaV1.HistoryRecord(0);
          v60 = v54;
          do
          {
            v61 = v60 + 1;
            _ArrayBuffer._typeCheckSlowPath(_:)(v60);
            v60 = v61;
          }
          while (v55 != v61);
        }
        if (v10)
        {
          v73 = swift_bridgeObjectRetain(a1);
          v64 = _CocoaArrayWrapper.subscript.getter(v54, v57, v152, v73);
          v65 = v74;
          v54 = v75;
          v77 = v76;
          swift_bridgeObjectRelease(a1);
          v66 = v77 >> 1;
          if ((v77 & 1) == 0)
          {
LABEL_110:
            v71 = v66 - v54;
            if (__OFSUB__(v66, v54))
              goto LABEL_164;
            if (!v71)
              goto LABEL_123;
            goto LABEL_112;
          }
        }
        else
        {
          v62 = (2 * v57) | 1;
          v63 = swift_bridgeObjectRetain(a1);
          v64 = v20;
          v65 = v151;
          v66 = v62 >> 1;
          if ((v62 & 1) == 0)
            goto LABEL_110;
        }
        v67 = type metadata accessor for __ContiguousArrayStorageBase(0, v63);
        v68 = swift_unknownObjectRetain_n(v64, 2);
        v69 = (_QWORD *)swift_dynamicCastClass(v68, v67);
        if (!v69)
        {
          swift_unknownObjectRelease(v64);
          v69 = _swiftEmptyArrayStorage;
        }
        v70 = v69[2];
        swift_release(v69);
        v71 = v66 - v54;
        if (__OFSUB__(v66, v54))
          goto LABEL_166;
        if (v70 != v71)
        {
          swift_unknownObjectRelease(v64);
          v10 = v153;
          if (!v71)
            goto LABEL_123;
LABEL_112:
          v78 = 8 * v71;
          if (v71 < 1)
          {
            v72 = _swiftEmptyArrayStorage;
            if (v54 == v66)
              goto LABEL_169;
          }
          else
          {
            v79 = sub_100005360(&qword_100114320);
            v72 = (_QWORD *)swift_allocObject(v79, v78 + 32, 7);
            v80 = j__malloc_size(v72);
            v81 = v80 - 32;
            if (v80 < 32)
              v81 = v80 - 25;
            v72[2] = v71;
            v72[3] = (2 * (v81 >> 3)) | 1;
            if (v54 == v66)
              goto LABEL_169;
          }
          if (v71 < 0)
            goto LABEL_170;
          v82 = v65 + 8 * v54;
          if (v82 < (unint64_t)&v72[(unint64_t)v78 / 8 + 4] && (unint64_t)(v72 + 4) < v82 + v78)
            goto LABEL_171;
          type metadata accessor for SchemaV1.HistoryRecord(0);
          swift_arrayInitWithCopy(v72 + 4);
          v10 = v153;
          goto LABEL_124;
        }
        v72 = (_QWORD *)swift_dynamicCastClass(v64, v67);
        v10 = v153;
        if (!v72)
        {
          swift_unknownObjectRelease(v64);
LABEL_123:
          v72 = _swiftEmptyArrayStorage;
        }
LABEL_124:
        swift_unknownObjectRelease(v64);
        v17 = v135;
        v159 = v135;
        v84 = v135[2];
        v83 = v135[3];
        v50 = v84 + 1;
        v51 = (Swift::Int)v154;
        if (v84 >= v83 >> 1)
        {
          sub_100013778(v83 > 1, v84 + 1, 1);
          v50 = v84 + 1;
          v17 = v159;
        }
        v17[2] = v50;
        v17[v84 + 4] = v72;
        v53 += 1000;
        v54 = v56;
        v11 = (uint64_t)v156;
        v20 = v157;
        if (v56 >= (uint64_t)v156)
          goto LABEL_129;
      }
    }
    v50 = v159[2];
    if (v50)
      goto LABEL_129;
LABEL_145:
    swift_release(v17);
  }
}

uint64_t sub_1000134E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch(sub_1000134F8, 0, 0);
}

uint64_t sub_1000134F8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_100116B34);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1000106F0;
  return sub_10006F6E8(*(_QWORD *)(v0 + 24));
}

unint64_t sub_10001354C(unint64_t result, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = a2;
  v3 = result;
  v4 = result >> 62;
  if (result >> 62)
    goto LABEL_30;
  v5 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
  v6 = a2 >> 62;
  if (!(a2 >> 62))
    goto LABEL_3;
  while (2)
  {
    if (v2 < 0)
      v18 = v2;
    else
      v18 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    result = swift_bridgeObjectRelease(v2);
    if (v5 != v19)
      goto LABEL_38;
LABEL_4:
    if (!v5)
      goto LABEL_27;
    v7 = v3 & 0xFFFFFFFFFFFFFF8;
    if (v3 < 0)
      v7 = v3;
    if (!v4)
      v7 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
    v8 = v2 & 0xFFFFFFFFFFFFFF8;
    v9 = (v2 & 0xFFFFFFFFFFFFFF8) + 32;
    v21 = v2 & 0xFFFFFFFFFFFFFF8;
    if (v2 < 0)
      v8 = v2;
    if (v6)
      v9 = v8;
    if (v7 == v9)
    {
LABEL_27:
      LOBYTE(v2) = 1;
      return v2 & 1;
    }
    if (v5 < 0)
    {
      __break(1u);
      return result;
    }
    v10 = type metadata accessor for SchemaV1.HistoryRecord(0);
    v11 = 0;
    v12 = v2 & 0xC000000000000001;
    v22 = v2;
    v20 = v2 + 32;
    v4 = v5 - 1;
    while (v5 != v11)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v3);
        v24 = v13;
        if (v12)
          goto LABEL_19;
      }
      else
      {
        v13 = *(_QWORD *)(v3 + 32 + 8 * v11);
        swift_retain(v13);
        v24 = v13;
        if (v12)
        {
LABEL_19:
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v22);
          goto LABEL_23;
        }
      }
      if (v11 >= *(_QWORD *)(v21 + 16))
        goto LABEL_29;
      v14 = *(_QWORD *)(v20 + 8 * v11);
      swift_retain(v14);
LABEL_23:
      v23 = v14;
      v15 = sub_100005178(&qword_1001143E0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC64);
      v2 = dispatch thunk of static Equatable.== infix(_:_:)(&v24, &v23, v10, v15);
      swift_release(v13);
      swift_release(v14);
      if ((v2 & 1) != 0 && v4 != v11++)
        continue;
      return v2 & 1;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    if (v3 < 0)
      v17 = v3;
    else
      v17 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v5 = _CocoaArrayWrapper.endIndex.getter(v17);
    result = swift_bridgeObjectRelease(v3);
    v6 = (unint64_t)v2 >> 62;
    if ((unint64_t)v2 >> 62)
      continue;
    break;
  }
LABEL_3:
  if (v5 == *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_4;
LABEL_38:
  LOBYTE(v2) = 0;
  return v2 & 1;
}

uint64_t sub_100013778(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100013824(a1, a2, a3, (_QWORD *)*v3, &qword_100114340, &qword_100114348);
  *v3 = result;
  return result;
}

uint64_t sub_1000137A4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100013824(a1, a2, a3, (_QWORD *)*v3, &qword_100114418, &qword_100114420);
  *v3 = result;
  return result;
}

uint64_t sub_1000137D0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000139B0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000137EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100013B2C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100013808(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100013C94(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100013824(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    v13 = sub_100005360(a5);
    v14 = (_QWORD *)swift_allocObject(v13, 8 * v12 + 32, 7);
    v15 = j__malloc_size(v14);
    v16 = v15 - 32;
    if (v15 < 32)
      v16 = v15 - 25;
    v14[2] = v11;
    v14[3] = 2 * (v16 >> 3);
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  v17 = (unint64_t)(v14 + 4);
  v18 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v14 != a4 || v17 >= v18 + 8 * v11)
      memmove(v14 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v18 >= v17 + 8 * v11 || v17 >= v18 + 8 * v11)
  {
    sub_100005360(a6);
    swift_arrayInitWithCopy(v14 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v14;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000139B0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005360(&qword_100114410);
    v11 = (char *)swift_allocObject(v10, 7 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 7);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[8 * v8 - v8])
      memmove(v13, v14, 7 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[7 * v8] || v13 >= &v14[7 * v8])
  {
    memcpy(v13, v14, 7 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100013B2C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005360(&qword_100114430);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100013C94(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005360(&qword_100114428);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_100013E20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114300;
  if (!qword_100114300)
  {
    v1 = sub_100005608(&qword_100114308);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100114300);
  }
  return result;
}

uint64_t sub_100013E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GenericRecord(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1001142EC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100013F04;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_1000134F8, 0, 0);
}

uint64_t sub_100013F04()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100013F4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_1001142E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100013F8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_1001142E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100013FD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100013FF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100117EE4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100014F2C;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100117EE0 + dword_100117EE0))(a1, v4);
}

uint64_t sub_100014070(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_100014084(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000140C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100014114()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 56) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100014124(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_10001413C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100014150(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_10001418C()
{
  uint64_t v0;

  sub_10000B1B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000141A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000141CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10011436C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100014F2C;
  return sub_100010EA8(a1, v4, v5, v6);
}

uint64_t sub_10001423C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_10011437C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014F2C;
  return sub_1000115EC(a1, v4, v5, v7, v6);
}

void sub_1000142C4()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 40) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1000142D4()
{
  uint64_t v0;

  return sub_10000AD20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1000142EC()
{
  unint64_t result;

  result = qword_100114398;
  if (!qword_100114398)
  {
    result = swift_getWitnessTable(&unk_1000CDB2C, &type metadata for ModelError);
    atomic_store(result, &qword_100114398);
  }
  return result;
}

uint64_t sub_100014334()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100014360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_1001143A4);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100014F2C;
  v3[2] = v2;
  return swift_task_switch(sub_100010AA4, 0, 0);
}

uint64_t sub_1000143C0(uint64_t a1)
{
  uint64_t v1;

  return sub_10000F2EC(a1, v1);
}

uint64_t sub_1000143C8(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a2;
  v2 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    v19 = v3;
    v4 = 0;
    v21 = v2 & 0xC000000000000001;
    v20 = v2;
    v5 = v24;
    while (1)
    {
      if (v21)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
      }
      else
      {
        v6 = *(_QWORD *)(v2 + 8 * v4 + 32);
        swift_retain(v6);
      }
      v22 = v6;
      KeyPath = swift_getKeyPath(&unk_1000CD8A8);
      v8 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v22, KeyPath, v8);
      swift_release(KeyPath);
      v9 = swift_getKeyPath(&unk_1000CD8A8);
      v2 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
      PersistentModel.getValue<A>(forKey:)(v9, v2, &protocol witness table for String);
      swift_release(v9);
      v11 = v22;
      v10 = v23;
      v22 = v5;
      v12 = swift_getKeyPath(&unk_1000CD8A8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v22, v12, v8);
      swift_release(v12);
      v13 = swift_getKeyPath(&unk_1000CD8A8);
      PersistentModel.getValue<A>(forKey:)(v13, v2, &protocol witness table for String);
      swift_release(v13);
      v14 = v23;
      if (v11 == v22 && v10 == v23)
      {
        swift_release(v6);
        swift_bridgeObjectRelease_n(v10, 2);
        return v4;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v10, v22, v23, 0);
      swift_release(v6);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v14);
      if ((v15 & 1) != 0)
        return v4;
      v16 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      ++v4;
      v2 = v20;
      if (v16 == v19)
        return 0;
    }
    __break(1u);
LABEL_16:
    if (v2 < 0)
      v17 = v2;
    else
      v17 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v17);
    swift_bridgeObjectRelease(v2);
  }
  return 0;
}

void sub_100014658(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  uint64_t v37;

  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    v5 = swift_bridgeObjectRetain(a1);
    v6 = __CocoaSet.makeIterator()(v4, v5);
    v7 = type metadata accessor for SchemaV1.HistoryRecord(0);
    v8 = sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
    isUniquelyReferenced_nonNull_native = (uint64_t)Set.Iterator.init(_cocoa:)(v36, v6, v7, v8);
    v3 = v36[0];
    v34 = v36[1];
    v10 = v36[2];
    v11 = v36[3];
    v12 = v36[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v34 = a1 + 56;
    v10 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v11 = 0;
  }
  v33 = (unint64_t)(v10 + 64) >> 6;
  v16 = _swiftEmptyArrayStorage;
  if (v3 < 0)
    goto LABEL_13;
  while (1)
  {
    if (v12)
    {
      v17 = (v12 - 1) & v12;
      v18 = __clz(__rbit64(v12)) | (v11 << 6);
      v19 = v11;
      goto LABEL_32;
    }
    v24 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v24 >= v33)
      goto LABEL_39;
    v25 = *(_QWORD *)(v34 + 8 * v24);
    v19 = v11 + 1;
    if (!v25)
    {
      v19 = v11 + 2;
      if (v11 + 2 >= v33)
        goto LABEL_39;
      v25 = *(_QWORD *)(v34 + 8 * v19);
      if (!v25)
      {
        v19 = v11 + 3;
        if (v11 + 3 >= v33)
          goto LABEL_39;
        v25 = *(_QWORD *)(v34 + 8 * v19);
        if (!v25)
        {
          v19 = v11 + 4;
          if (v11 + 4 >= v33)
            goto LABEL_39;
          v25 = *(_QWORD *)(v34 + 8 * v19);
          if (!v25)
          {
            v19 = v11 + 5;
            if (v11 + 5 >= v33)
              goto LABEL_39;
            v25 = *(_QWORD *)(v34 + 8 * v19);
            if (!v25)
            {
              v26 = v11 + 6;
              while (v33 != v26)
              {
                v25 = *(_QWORD *)(v34 + 8 * v26++);
                if (v25)
                {
                  v19 = v26 - 1;
                  goto LABEL_31;
                }
              }
LABEL_39:
              sub_100014B78(v3);
              return;
            }
          }
        }
      }
    }
LABEL_31:
    v17 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v19 << 6);
LABEL_32:
    v23 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v18);
    swift_retain(v23);
    if (!v23)
      goto LABEL_39;
    while (1)
    {
      v27 = a2(v23);
      v29 = v28;
      swift_release(v23);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_100071E00(0, v16[2] + 1, 1, v16);
        v16 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v31 = v16[2];
      v30 = v16[3];
      if (v31 >= v30 >> 1)
      {
        isUniquelyReferenced_nonNull_native = (uint64_t)sub_100071E00((_QWORD *)(v30 > 1), v31 + 1, 1, v16);
        v16 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      }
      v16[2] = v31 + 1;
      v32 = &v16[2 * v31];
      v32[4] = v27;
      v32[5] = v29;
      v11 = v19;
      v12 = v17;
      if ((v3 & 0x8000000000000000) == 0)
        break;
LABEL_13:
      v20 = __CocoaSet.Iterator.next()(isUniquelyReferenced_nonNull_native);
      if (v20)
      {
        v21 = v20;
        v35 = v20;
        v22 = type metadata accessor for SchemaV1.HistoryRecord(0);
        swift_unknownObjectRetain(v21);
        swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
        v23 = v37;
        swift_unknownObjectRelease(v21);
        v19 = v11;
        v17 = v12;
        if (v23)
          continue;
      }
      goto LABEL_39;
    }
  }
  __break(1u);
}

uint64_t sub_1000149A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1001143B4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014F2C;
  return sub_10000F338(a1, v4, v5, v7, v6);
}

uint64_t sub_100014A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_1001143C4);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100013F04;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_10001069C, 0, 0);
}

uint64_t sub_100014A88()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100014ABC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1001143D4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014F2C;
  return sub_10001052C(a1, v4, v5, v7, v6);
}

uint64_t sub_100014B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilteredHistoryRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100014B78(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

_QWORD *initializeBufferWithCopyOfBuffer for ModelError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

uint64_t destroy for ModelError(_QWORD *a1)
{
  return swift_errorRelease(*a1);
}

uint64_t *assignWithCopy for ModelError(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  swift_errorRetain(*a2);
  v4 = *a1;
  *a1 = v3;
  swift_errorRelease(v4);
  return a1;
}

_QWORD *initializeWithTake for ModelError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t *assignWithTake for ModelError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ModelError(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelError()
{
  return &type metadata for ModelError;
}

uint64_t sub_100014CC8()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100014CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v5;

  v5 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc(dword_1001143F4);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100014F2C;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v5;
  return swift_task_switch(sub_10000EE88, 0, 0);
}

void sub_100014D74()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v2;
  v4 = v2;

}

void sub_100014DB0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = v2;
  v4 = v2;

}

uint64_t sub_100014DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for GenericRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[6]);
  swift_bridgeObjectRelease(v7[8]);
  swift_bridgeObjectRelease(v7[10]);
  swift_bridgeObjectRelease(v7[12]);
  v8 = (char *)v7 + *(int *)(v1 + 52);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100014EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for GenericRecord(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_100114404);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100014F2C;
  v5[2] = v3;
  v5[3] = v4;
  return swift_task_switch(sub_10000D75C, 0, 0);
}

void sub_100014F30()
{
  sub_100014114();
}

void sub_100014F44()
{
  sub_1000142C4();
}

void sub_100014F5C()
{
  sub_10001418C();
}

uint64_t sub_100014F70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = v0;
    v4 = type metadata accessor for CalculatorHistoryViewModel(0);
    v2 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    sub_100015BF8();
    v5 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v2;
    swift_retain(v2);
    swift_release(v5);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_100014FE0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC10Calculator33CalculatorHistoryViewModelWrapper___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100015038()
{
  return type metadata accessor for CalculatorHistoryViewModelWrapper(0);
}

uint64_t type metadata accessor for CalculatorHistoryViewModelWrapper(uint64_t a1)
{
  return sub_1000164F0(a1, qword_100114468, (uint64_t)&nominal type descriptor for CalculatorHistoryViewModelWrapper);
}

uint64_t sub_100015054(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

double sub_1000150CC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double result;
  _BYTE v37[16];
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD v46[3];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000CDCC0);
  v3 = (uint64_t)v0 + OBJC_IVAR____TtC10Calculator26CalculatorHistoryViewModel___observationRegistrar;
  v46[0] = v0;
  v4 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v46, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 3, v46, 0, 0);
  if (*(_QWORD *)(v0[3] + 16))
  {
    v5 = v0[2];
    v6 = swift_getKeyPath(&unk_1000CDCE8);
    v45[0] = v5;
    v7 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v45, v6, v7);
    swift_release(v6);
    swift_beginAccess(v5 + 48, v45, 0, 0);
    v8 = *(_QWORD *)(v5 + 48);
    v9 = (uint64_t)_swiftEmptyArrayStorage;
    v43 = _swiftEmptyArrayStorage;
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v11 = type metadata accessor for FilteredHistoryRecord(0);
      v12 = *(_QWORD *)(v11 - 8);
      v13 = v8 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      v14 = *(_QWORD *)(v12 + 72);
      swift_bridgeObjectRetain(v8);
      do
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v13 + *(int *)(v11 + 24)));
        sub_100016AA4(v15);
        v13 += v14;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease(v8);
      v9 = (uint64_t)v43;
      v1 = v0;
    }
    if ((unint64_t)v9 >> 62)
    {
LABEL_20:
      if (v9 < 0)
        v32 = v9;
      else
        v32 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_retain(v1);
      swift_bridgeObjectRetain(v9);
      v16 = _CocoaArrayWrapper.endIndex.getter(v32);
      if (v16)
        goto LABEL_8;
    }
    else
    {
      v16 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_retain(v1);
      swift_bridgeObjectRetain(v9);
      if (v16)
      {
LABEL_8:
        v41 = v4;
        v42 = v3;
        v40 = v9 & 0xC000000000000001;
        v17 = 4;
        while (1)
        {
          v18 = v17 - 4;
          if (v40)
          {
            v19 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v17 - 4, v9);
            v4 = v17 - 3;
            if (__OFADD__(v18, 1))
              goto LABEL_19;
          }
          else
          {
            v19 = *(_QWORD **)(v9 + 8 * v17);
            swift_retain(v19);
            v4 = v17 - 3;
            if (__OFADD__(v18, 1))
            {
LABEL_19:
              __break(1u);
              goto LABEL_20;
            }
          }
          v20 = v9;
          v21 = swift_getKeyPath(&unk_1000CDCC0);
          v43 = v1;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v43, v21, v41);
          swift_release(v21);
          v3 = v1[3];
          v43 = v19;
          v22 = swift_getKeyPath(&unk_1000CDD10);
          v23 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
          swift_bridgeObjectRetain(v3);
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v43, v22, v23);
          swift_release(v22);
          v24 = swift_getKeyPath(&unk_1000CDD10);
          v25 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
          PersistentModel.getValue<A>(forKey:)(v24, v25, &protocol witness table for String);
          swift_release(v24);
          v26 = v44;
          v27 = sub_10003B6FC((uint64_t)v43, v44, v3);
          swift_bridgeObjectRelease(v26);
          swift_bridgeObjectRelease(v3);
          if ((v27 & 1) != 0)
          {
            swift_release(v1);
            swift_bridgeObjectRelease_n(v20, 2);
            v30 = swift_getKeyPath(&unk_1000CDD60);
            __chkstk_darwin(v30, v31);
            v38 = v1;
            v39 = v19;
            v43 = v1;
            swift_retain(v19);
            v4 = v41;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v43, v30, sub_100017080, v37, (char *)&type metadata for () + 8, v41);
            swift_release(v30);
            swift_release_n(v19, 2);
            goto LABEL_26;
          }
          swift_release(v19);
          ++v17;
          v9 = v20;
          if (v4 == v16)
          {
            swift_release(v1);
            v4 = v41;
            goto LABEL_25;
          }
        }
      }
    }
    swift_release(v1);
LABEL_25:
    swift_bridgeObjectRelease_n(v9, 2);
  }
  else
  {
    v28 = swift_getKeyPath(&unk_1000CDD60);
    __chkstk_darwin(v28, v29);
    v38 = v0;
    v39 = 0;
    v45[0] = v0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v45, v28, sub_100017080, v37, (char *)&type metadata for () + 8, v4);
    swift_release(v28);
  }
LABEL_26:
  v33 = swift_getKeyPath(&unk_1000CDD38);
  v43 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v43, v33, v4);
  swift_release(v33);
  v43 = v1;
  v34 = swift_getKeyPath(&unk_1000CDD38);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v43, v34, v4);
  swift_release(v34);
  *((_BYTE *)v1 + 32) = (v1[4] & 1) == 0;
  v43 = v1;
  v35 = swift_getKeyPath(&unk_1000CDD38);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v43, v35, v4);
  *(_QWORD *)&result = swift_release(v35).n128_u64[0];
  return result;
}

double sub_10001560C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1000CDCC0);
  v4[0] = v0;
  v2 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 24, v4, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24)).n128_u64[0];
  return result;
}

double sub_1000156A8@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDCC0);
  v8[0] = v3;
  v5 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 24, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

uint64_t sub_10001574C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDCC0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000170DC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

void sub_100015804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v5[24];

  swift_beginAccess(a1 + 24, v5, 1, 0);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v4);
  sub_1000150CC();
}

uint64_t sub_100015870()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CDD38);
  v4 = v0;
  v2 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 32);
}

void sub_1000158F4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDD38);
  v6 = v3;
  v5 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 32);
}

double sub_100015980(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDD38);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000170CC, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100015A28()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CDD60);
  v4 = v0;
  v2 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return swift_retain(*(_QWORD *)(v0 + 40));
}

uint64_t sub_100015AB0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CDD60);
  v8 = v3;
  v5 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 40);
  *a2 = v6;
  return swift_retain(v6);
}

double sub_100015B40(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDD60);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100017080, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100015BF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void **v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  void *v21;
  void *v22;
  uint64_t v23;

  if (qword_100113980 != -1)
    swift_once(&qword_100113980, sub_10000AAEC);
  v1 = qword_10011F810;
  *(_QWORD *)(v0 + 16) = qword_10011F810;
  *(_QWORD *)(v0 + 24) = &_swiftEmptySetSingleton;
  *(_BYTE *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  swift_retain(v1);
  ObservationRegistrar.init()(v2);
  v3 = (void *)objc_opt_self(NSNotificationCenter);
  v4 = objc_msgSend(v3, "defaultCenter");
  if (qword_100113CA8 != -1)
    swift_once(&qword_100113CA8, sub_10004E6C0);
  v5 = qword_10011FC50;
  v6 = (void *)objc_opt_self(NSOperationQueue);
  v7 = objc_msgSend(v6, "mainQueue");
  v8 = swift_allocObject(&unk_100108A18, 24, 7);
  swift_weakInit(v8 + 16, v0);
  v22 = sub_100016A8C;
  v23 = v8;
  v18 = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_10001F3E8;
  v21 = &unk_100108A30;
  v9 = _Block_copy(&v18);
  v10 = objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", v5, 0, v7, v9, swift_release(v23).n128_f64[0]);
  _Block_release(v9);
  swift_unknownObjectRelease(v10);

  v11 = objc_msgSend(v3, "defaultCenter");
  if (qword_100113CA0 != -1)
    swift_once(&qword_100113CA0, sub_10004E68C);
  v12 = qword_10011FC48;
  v13 = objc_msgSend(v6, "mainQueue");
  v14 = swift_allocObject(&unk_100108A18, 24, 7);
  swift_weakInit(v14 + 16, v0);
  v22 = sub_100016A94;
  v23 = v14;
  v18 = _NSConcreteStackBlock;
  v19 = 1107296256;
  v20 = sub_10001F3E8;
  v21 = &unk_100108A58;
  v15 = _Block_copy(&v18);
  v16 = objc_msgSend(v11, "addObserverForName:object:queue:usingBlock:", v12, 0, v13, v15, swift_release(v23).n128_f64[0]);
  _Block_release(v15);
  swift_unknownObjectRelease(v16);

  return v0;
}

void sub_100015ED4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t inited;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  uint64_t v33;
  _QWORD v34[4];
  char v35[48];
  _QWORD v36[3];
  char v37[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v37, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (!Strong)
    return;
  v4 = Strong;
  v5 = *(_QWORD *)(Strong + 16);
  KeyPath = swift_getKeyPath(&unk_1000CDCE8);
  v36[0] = v5;
  v7 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v36, KeyPath, v7);
  swift_release(KeyPath);
  swift_beginAccess(v5 + 48, v36, 0, 0);
  v8 = *(_QWORD *)(v5 + 48);
  if (!*(_QWORD *)(v8 + 16))
  {
LABEL_14:
    v27 = swift_getKeyPath(&unk_1000CDCC0);
    v34[0] = v4;
    v28 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v34, v27, v28);
    swift_release(v27);
    v34[0] = v4;
    v29 = swift_getKeyPath(&unk_1000CDCC0);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v34, v29, v28);
    swift_release(v29);
    swift_beginAccess(v4 + 24, v34, 1, 0);
    v30 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v30);
    sub_1000150CC();
    v33 = v4;
    v31 = swift_getKeyPath(&unk_1000CDCC0);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v33, v31, v28);
    swift_release(v4);
    swift_release(v31);
    return;
  }
  v9 = type metadata accessor for FilteredHistoryRecord(0);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 8) + 80);
  v11 = *(_QWORD *)(v8 + ((v10 + 32) & ~v10) + *(int *)(v9 + 24));
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v26 = v11;
    else
      v26 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    if (_CocoaArrayWrapper.endIndex.getter(v26))
      goto LABEL_5;
    goto LABEL_13;
  }
  v12 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v11);
  if (!v12)
  {
LABEL_13:
    swift_bridgeObjectRelease(v11);
    goto LABEL_14;
  }
LABEL_5:
  if ((v11 & 0xC000000000000001) != 0)
  {
    v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v11);
    goto LABEL_8;
  }
  if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(_QWORD *)(v11 + 32);
    swift_retain(v13);
LABEL_8:
    swift_bridgeObjectRelease(v11);
    v34[0] = v13;
    v14 = swift_getKeyPath(&unk_1000CDD10);
    v15 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v34, v14, v15);
    swift_release(v14);
    v16 = swift_getKeyPath(&unk_1000CDD10);
    v17 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
    PersistentModel.getValue<A>(forKey:)(v16, v17, &protocol witness table for String);
    swift_release(v13);
    swift_release(v16);
    v18 = v34[0];
    v19 = v34[1];
    v20 = sub_100005360(&qword_100114430);
    inited = swift_initStackObject(v20, v35);
    *(_OWORD *)(inited + 16) = xmmword_1000CD7E0;
    *(_QWORD *)(inited + 32) = v18;
    *(_QWORD *)(inited + 40) = v19;
    v22 = sub_1000513B4(inited);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, 1, &type metadata for String);
    v23 = swift_getKeyPath(&unk_1000CDCC0);
    __chkstk_darwin(v23, v24);
    v32[2] = v4;
    v32[3] = v22;
    v34[0] = v4;
    v25 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v34, v23, sub_1000175F0, v32, (char *)&type metadata for () + 8, v25);
    swift_release(v4);
    swift_release(v23);
    swift_bridgeObjectRelease(v22);
    return;
  }
  __break(1u);
}

double sub_1000162F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  double result;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  char v13[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v13, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v5 = Strong;
    KeyPath = swift_getKeyPath(&unk_1000CDCC0);
    v12[0] = v5;
    v7 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v7);
    swift_release(KeyPath);
    v12[0] = v5;
    v8 = swift_getKeyPath(&unk_1000CDCC0);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v12, v8, v7);
    swift_release(v8);
    swift_beginAccess(v5 + 24, v12, 1, 0);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v9);
    sub_1000150CC();
    v11 = v5;
    v10 = swift_getKeyPath(&unk_1000CDCC0);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v11, v10, v7);
    swift_release(v5);
    *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  }
  return result;
}

uint64_t sub_100016434()
{
  _QWORD *v0;
  id v1;
  char *v2;
  uint64_t v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v1, "removeObserver:", v0);

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  v2 = (char *)v0 + OBJC_IVAR____TtC10Calculator26CalculatorHistoryViewModel___observationRegistrar;
  v3 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000164D4()
{
  return type metadata accessor for CalculatorHistoryViewModel(0);
}

uint64_t type metadata accessor for CalculatorHistoryViewModel(uint64_t a1)
{
  return sub_1000164F0(a1, qword_100114528, (uint64_t)&nominal type descriptor for CalculatorHistoryViewModel);
}

uint64_t sub_1000164F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_100016524(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = &unk_1000CDC70;
  v4[3] = "\b";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

BOOL sub_1000165C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  _QWORD v25[3];

  v1 = type metadata accessor for FilteredHistoryRecord(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000CDCC0);
  v25[0] = v0;
  v7 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v25, KeyPath, v7);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 24, v25, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v0 + 24) + 16) == 1)
    return 0;
  v9 = swift_getKeyPath(&unk_1000CDCC0);
  v24[0] = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v24, v9, v7);
  swift_release(v9);
  v10 = *(_QWORD *)(v0 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  v12 = swift_getKeyPath(&unk_1000CDCE8);
  v24[0] = v10;
  v13 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v24, v12, v13);
  swift_release(v12);
  swift_beginAccess(v10 + 48, v24, 0, 0);
  v14 = *(_QWORD *)(v10 + 48);
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    v18 = 0;
    return v11 == v18;
  }
  v16 = v14 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v17 = *(_QWORD *)(v2 + 72);
  swift_bridgeObjectRetain(*(_QWORD *)(v10 + 48));
  v18 = 0;
  while (1)
  {
    sub_1000174EC(v16, (uint64_t)v5);
    v19 = *(_QWORD *)&v5[*(int *)(v1 + 24)];
    if ((unint64_t)v19 >> 62)
      break;
    v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = __OFADD__(v18, v20);
    v18 += v20;
    if (v21)
      goto LABEL_14;
LABEL_7:
    sub_100017530((uint64_t)v5);
    v16 += v17;
    if (!--v15)
      goto LABEL_15;
  }
  if (v19 < 0)
    v22 = *(_QWORD *)&v5[*(int *)(v1 + 24)];
  else
    v22 = v19 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)&v5[*(int *)(v1 + 24)]);
  v23 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v19);
  v21 = __OFADD__(v18, v23);
  v18 += v23;
  if (!v21)
    goto LABEL_7;
LABEL_14:
  __break(1u);
LABEL_15:
  swift_bridgeObjectRelease(v14);
  return v11 == v18;
}

double sub_100016818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  _QWORD v22[4];
  _QWORD v23[3];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  KeyPath = swift_getKeyPath(&unk_1000CDCE8);
  v23[0] = v2;
  v4 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v23, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v2 + 48, v23, 0, 0);
  v5 = *(_QWORD *)(v2 + 48);
  v6 = _swiftEmptyArrayStorage;
  v22[0] = _swiftEmptyArrayStorage;
  v7 = *(_QWORD *)(v5 + 16);
  if (v7)
  {
    v8 = type metadata accessor for FilteredHistoryRecord(0);
    v9 = *(_QWORD *)(v8 - 8);
    v10 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain(v5);
    do
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v10 + *(int *)(v8 + 24)));
      sub_100016AA4(v12);
      v10 += v11;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v5);
    v6 = (_QWORD *)v22[0];
  }
  swift_retain(v1);
  v13 = sub_1000170F4((unint64_t)v6, v1);
  swift_bridgeObjectRelease(v6);
  swift_release(v1);
  v14 = sub_100017390((uint64_t)v13);
  swift_bridgeObjectRelease(v13);
  sub_10000F098(v14);
  swift_bridgeObjectRelease(v14);
  v15 = swift_getKeyPath(&unk_1000CDCC0);
  v22[0] = v1;
  v16 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v22, v15, v16);
  swift_release(v15);
  v22[0] = v1;
  v17 = swift_getKeyPath(&unk_1000CDCC0);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v22, v17, v16);
  swift_release(v17);
  swift_beginAccess(v1 + 24, v22, 1, 0);
  v18 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v18);
  sub_1000150CC();
  v21 = v1;
  v19 = swift_getKeyPath(&unk_1000CDCC0);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v21, v19, v16);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

uint64_t sub_100016A68()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100016A8C(uint64_t a1)
{
  uint64_t v1;

  sub_100015ED4(a1, v1);
}

double sub_100016A94(uint64_t a1)
{
  uint64_t v1;

  return sub_1000162F0(a1, v1);
}

uint64_t sub_100016AA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_100016C5C(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    v15 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

uint64_t sub_100016C5C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18[4];

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000175A8(&qword_1001145D8, &qword_100114348);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100005360(&qword_100114348);
          v13 = sub_10007272C(v18, i, a3);
          v15 = *v14;
          swift_retain(*v14);
          ((void (*)(uint64_t **, _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for SchemaV1.HistoryRecord(0);
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100016E60(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t i;
  void (*v13)(_QWORD *);
  id *v14;
  id v15;
  uint64_t v16;
  uint64_t result;
  void (*v18[4])(id *);

  v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_25;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    if (a3 < 0)
      v10 = a3;
    else
      v10 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1000175A8(&qword_1001145F0, &qword_1001145E8);
        swift_bridgeObjectRetain(a3);
        for (i = 0; i != v7; ++i)
        {
          sub_100005360(&qword_1001145E8);
          v13 = sub_100072784(v18, i, a3);
          v15 = *v14;
          ((void (*)(void (**)(id *), _QWORD))v13)(v18, 0);
          *(_QWORD *)(a1 + 8 * i) = v15;
        }
        swift_bridgeObjectRelease(a3);
        return a3;
      }
      goto LABEL_24;
    }
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001756C();
    swift_arrayInitWithCopy(a1);
    return a3;
  }
LABEL_26:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100017080()
{
  return sub_100017094();
}

uint64_t sub_100017094()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v1;
  swift_retain(v1);
  return swift_release(v3);
}

void sub_1000170CC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 32) = *(_BYTE *)(v0 + 24);
}

void sub_1000170DC()
{
  uint64_t v0;

  sub_100015804(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_1000170F4(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  _QWORD *v28;

  v3 = a1;
  v28 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_3:
  swift_beginAccess(a2 + 24, v27, 0, 0);
  if (v4)
  {
    v21 = v3;
    v5 = 0;
    v22 = v4;
    v23 = v3 & 0xFFFFFFFFFFFFFF8;
    v24 = v3 & 0xC000000000000001;
    while (1)
    {
      if (v24)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        v7 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_14:
          __break(1u);
          return v28;
        }
      }
      else
      {
        if (v5 >= *(_QWORD *)(v23 + 16))
        {
          __break(1u);
LABEL_18:
          if (v3 < 0)
            v20 = v3;
          else
            v20 = v3 & 0xFFFFFFFFFFFFFF8;
          v4 = _CocoaArrayWrapper.endIndex.getter(v20);
          goto LABEL_3;
        }
        v6 = *(_QWORD *)(v3 + 8 * v5 + 32);
        swift_retain(v6);
        v7 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_14;
      }
      KeyPath = swift_getKeyPath(&unk_1000CDCC0);
      v25 = a2;
      v9 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v9);
      swift_release(KeyPath);
      v10 = *(_QWORD *)(a2 + 24);
      v25 = v6;
      v11 = swift_getKeyPath(&unk_1000CDD10);
      v12 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
      swift_bridgeObjectRetain(v10);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v11, v12);
      swift_release(v11);
      v13 = swift_getKeyPath(&unk_1000CDD10);
      v14 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
      PersistentModel.getValue<A>(forKey:)(v13, v14, &protocol witness table for String);
      swift_release(v13);
      v15 = v26;
      LOBYTE(v13) = sub_10003B6FC(v25, v26, v10);
      swift_bridgeObjectRelease(v15);
      v16 = swift_bridgeObjectRelease(v10);
      if ((v13 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v16);
        v17 = v28[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
        v18 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v6);
        specialized ContiguousArray._endMutation()(v18);
      }
      else
      {
        swift_release(v6);
      }
      v3 = v21;
      ++v5;
      if (v7 == v22)
        return v28;
    }
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100017390(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v12 = a1;
    else
      v12 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v5 = sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
  result = Set.init(minimumCapacity:)(v3, v4, v5);
  v7 = result;
  v14 = result;
  if (v2)
  {
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v9);
    result = swift_bridgeObjectRelease(a1);
    if (!v8)
      return v7;
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v8)
      return v7;
  }
  if (v8 >= 1)
  {
    for (i = 0; i != v8; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      }
      else
      {
        v11 = *(_QWORD *)(a1 + 8 * i + 32);
        swift_retain(v11);
      }
      sub_10008A638(&v13, v11);
      swift_release(v13);
    }
    return v14;
  }
  __break(1u);
  return result;
}

uint64_t sub_1000174EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FilteredHistoryRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100017530(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FilteredHistoryRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001756C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001145E0;
  if (!qword_1001145E0)
  {
    v1 = objc_opt_self(CalculateUnit);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1001145E0);
  }
  return result;
}

uint64_t sub_1000175A8(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005608(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_1000175F0()
{
  sub_1000170DC();
}

uint64_t sub_100017604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for CalculatorCurrencyCacheProvider(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_100017B70();
  qword_10011F818 = v1;
  return result;
}

uint64_t sub_100017640@<X0>(uint64_t a1@<X8>)
{
  return sub_10001779C((uint64_t)&unk_1000CDE08, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__provider, &qword_100114710, a1);
}

uint64_t sub_10001765C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100017870(a1, (uint64_t)&unk_1000CDE08, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__provider, &qword_100114710, a2);
}

uint64_t sub_100017678(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v4 = sub_100005360(&qword_100114710);
  __chkstk_darwin(v4, v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000531C(a1, (uint64_t)v7, &qword_100114710);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDE08);
  v13 = v8;
  v14 = v7;
  v15 = v8;
  v10 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_100019C20, v12, (char *)&type metadata for () + 8, v10);
  swift_release(KeyPath);
  return sub_100004F48((uint64_t)v7, &qword_100114710);
}

uint64_t sub_100017780@<X0>(uint64_t a1@<X8>)
{
  return sub_10001779C((uint64_t)&unk_1000CDE30, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100114718, a1);
}

uint64_t sub_10001779C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  KeyPath = swift_getKeyPath(a1);
  v12[0] = v4;
  v9 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v12, KeyPath, v9);
  swift_release(KeyPath);
  v10 = v4 + *a2;
  swift_beginAccess(v10, v12, 0, 0);
  return sub_10000531C(v10, a4, a3);
}

uint64_t sub_100017854@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100017870(a1, (uint64_t)&unk_1000CDE30, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100114718, a2);
}

uint64_t sub_100017870@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];

  v8 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v13[0] = v8;
  v10 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v13, KeyPath, v10);
  swift_release(KeyPath);
  v11 = v8 + *a3;
  swift_beginAccess(v11, v13, 0, 0);
  return sub_10000531C(v11, a5, a4);
}

uint64_t sub_10001792C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _BYTE v12[16];
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;

  v4 = sub_100005360(&qword_100114718);
  __chkstk_darwin(v4, v5);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000531C(a1, (uint64_t)v7, &qword_100114718);
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDE30);
  v13 = v8;
  v14 = v7;
  v15 = v8;
  v10 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v15, KeyPath, sub_100019C34, v12, (char *)&type metadata for () + 8, v10);
  swift_release(KeyPath);
  return sub_100004F48((uint64_t)v7, &qword_100114718);
}

uint64_t sub_100017A34(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v6;
  _BYTE v8[24];

  v6 = a1 + *a3;
  swift_beginAccess(v6, v8, 33, 0);
  sub_100019B94(a2, v6, a4);
  return swift_endAccess(v8);
}

uint64_t sub_100017AA0()
{
  return sub_100018A48((uint64_t)&unk_1000CDE80, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded);
}

void sub_100017AB4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100018ACC(a1, (uint64_t)&unk_1000CDE80, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded, a2);
}

double sub_100017AC8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDE80);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100019C5C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100017B70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v17;

  v1 = v0;
  v2 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 16) = objc_msgSend((id)objc_opt_self(CalculateCurrencyCache), "shared");
  type metadata accessor for StocksKitCurrencyCache(0, v6);
  *(_QWORD *)(v0 + 24) = static StocksKitCurrencyCache.shared.getter();
  v7 = v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__provider;
  v8 = type metadata accessor for StocksKitCurrencyCache.Provider(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate;
  v10 = type metadata accessor for Date(0);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded) = 0;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate) = 0;
  ObservationRegistrar.init()(v11);
  sub_100017D3C();
  sub_100017EF4();
  if ((static StocksKitCurrencyCache.isEnabled.getter() & 1) != 0)
  {
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
    v13 = swift_allocObject(&unk_100108A98, 24, 7);
    swift_weakInit(v13 + 16, v1);
    v14 = (_QWORD *)swift_allocObject(&unk_100108AC0, 40, 7);
    v14[2] = 0;
    v14[3] = 0;
    v14[4] = v13;
    v15 = sub_10000D7B0((uint64_t)v5, (uint64_t)&unk_100114728, (uint64_t)v14);
    swift_release(v15);
    sub_100004F48((uint64_t)v5, &qword_1001142E0);
  }
  return v1;
}

double sub_100017D3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  __n128 v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  uint64_t v14;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000CDE80);
  v14 = v0;
  v3 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v14, KeyPath, v3);
  v4 = swift_release(KeyPath);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded) & 1) == 0)
  {
    type metadata accessor for StocksKitCurrencyCache(0, v4);
    if ((static StocksKitCurrencyCache.isEnabled.getter() & 1) != 0)
    {
      v5 = 1;
    }
    else
    {
      if (qword_100113EC8 != -1)
        swift_once(&qword_100113EC8, sub_100096568);
      v6 = qword_10011FE70;
      v7 = swift_getKeyPath(&unk_1000CDEA8);
      v14 = v6;
      v8 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v14, v7, v8);
      swift_release(v7);
      v5 = *(_BYTE *)(v6 + 16);
    }
    v9 = swift_getKeyPath(&unk_1000CDE80);
    __chkstk_darwin(v9, v10);
    v12[2] = v1;
    v13 = v5;
    v14 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v14, v9, sub_100019C08, v12, (char *)&type metadata for () + 8, v3);
    v4.n128_u64[0] = swift_release(v9).n128_u64[0];
  }
  return v4.n128_f64[0];
}

void sub_100017EF4()
{
  char *v0;
  void (*v1)(char *, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  void *v43;
  void (*v44)(char *, char *, uint64_t);
  void (*v45)(char *, _QWORD, uint64_t, uint64_t);
  void (*v46)(char *, uint64_t, uint64_t);
  char *v47;
  uint64_t KeyPath;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int (*v52)(uint64_t, uint64_t, uint64_t);
  uint64_t v53;
  void (*v54)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  void (*v63)(char *, char *, uint64_t);
  uint64_t v64;
  char *v65;
  void (*v66)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  uint64_t v68;
  char *v69;
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t);
  _QWORD v72[3];

  v1 = (void (*)(char *, uint64_t, uint64_t))v0;
  v2 = sub_100005360(&qword_100114748);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005360(&qword_100114718);
  __chkstk_darwin(v6, v7);
  v69 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v68 = (uint64_t)&v62 - v11;
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v62 - v14;
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v62 - v18;
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  v70 = (char *)&v62 - v27;
  v28 = sub_100005360(&qword_1001142E0);
  v30 = __chkstk_darwin(v28, v29);
  v32 = (char *)&v62 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StocksKitCurrencyCache(0, v30);
  if ((static StocksKitCurrencyCache.isEnabled.getter() & 1) == 0)
  {
    v42 = objc_msgSend(*((id *)v0 + 2), "lastRefreshDate");
    if (v42)
    {
      v43 = v42;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v44 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
      v44(v19, v24, v20);
      v45 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
      v45(v19, 0, 1, v20);
      v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48);
      if (v67((uint64_t)v19, 1, v20) != 1)
      {
        v46 = (void (*)(char *, uint64_t, uint64_t))v44;
        v47 = v70;
        v62 = v46;
        v46(v70, (uint64_t)v19, v20);
        v63 = *(void (**)(char *, char *, uint64_t))(v21 + 16);
        v63(v15, v47, v20);
        v66 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v45;
        v45(v15, 0, 1, v20);
        KeyPath = swift_getKeyPath(&unk_1000CDE30);
        v49 = (char *)v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___observationRegistrar;
        v72[0] = v1;
        v64 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
        v65 = v49;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v72, KeyPath, v64);
        swift_release(KeyPath);
        v50 = (uint64_t)v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate;
        swift_beginAccess((char *)v1 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, v72, 0, 0);
        v51 = (uint64_t)&v5[*(int *)(v2 + 48)];
        sub_10000531C((uint64_t)v15, (uint64_t)v5, &qword_100114718);
        sub_10000531C(v50, v51, &qword_100114718);
        v52 = v67;
        if (v67((uint64_t)v5, 1, v20) == 1)
        {
          sub_100004F48((uint64_t)v15, &qword_100114718);
          if (v52(v51, 1, v20) == 1)
          {
            sub_100004F48((uint64_t)v5, &qword_100114718);
            (*(void (**)(char *, uint64_t))(v21 + 8))(v70, v20);
            return;
          }
        }
        else
        {
          v53 = v68;
          sub_10000531C((uint64_t)v5, v68, &qword_100114718);
          if (v52(v51, 1, v20) != 1)
          {
            v62(v24, v51, v20);
            v55 = sub_100005178(&qword_100114750, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v56 = dispatch thunk of static Equatable.== infix(_:_:)(v53, v24, v20, v55);
            v57 = *(void (**)(char *, uint64_t))(v21 + 8);
            v57(v24, v20);
            sub_100004F48((uint64_t)v15, &qword_100114718);
            v57((char *)v53, v20);
            sub_100004F48((uint64_t)v5, &qword_100114718);
            v54 = v66;
            if ((v56 & 1) != 0)
            {
              v57(v70, v20);
              return;
            }
LABEL_17:
            v58 = (uint64_t)v69;
            v59 = v70;
            v63(v69, v70, v20);
            v54(v58, 0, 1, v20);
            v60 = swift_getKeyPath(&unk_1000CDE30);
            __chkstk_darwin(v60, v61);
            *(&v62 - 2) = v1;
            *(&v62 - 1) = (void (*)(char *, uint64_t, uint64_t))v58;
            v71 = v1;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v71, v60, sub_10001996C, &v62 - 4, (char *)&type metadata for () + 8, v64);
            swift_release(v60);
            sub_100004F48(v58, &qword_100114718);
            (*(void (**)(char *, uint64_t))(v21 + 8))(v59, v20);
            return;
          }
          sub_100004F48((uint64_t)v15, &qword_100114718);
          (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v53, v20);
        }
        sub_100004F48((uint64_t)v5, &qword_100114748);
        v54 = v66;
        goto LABEL_17;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, 1, 1, v20);
    }
    sub_100004F48((uint64_t)v19, &qword_100114718);
    return;
  }
  v33 = swift_getKeyPath(&unk_1000CDE58);
  v72[0] = v0;
  v34 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v72, v33, v34);
  swift_release(v33);
  if ((v0[OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate] & 1) == 0)
  {
    v35 = swift_getKeyPath(&unk_1000CDE58);
    __chkstk_darwin(v35, v36);
    *(&v62 - 2) = (void (*)(char *, uint64_t, uint64_t))v0;
    *((_BYTE *)&v62 - 8) = 1;
    v72[0] = v0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v72, v35, sub_1000199BC, &v62 - 4, (char *)&type metadata for () + 8, v34);
    v37 = swift_release(v35);
    static TaskPriority.userInitiated.getter(v37);
    v38 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(v32, 0, 1, v38);
    v39 = swift_allocObject(&unk_100108A98, 24, 7);
    swift_weakInit(v39 + 16, v1);
    v40 = (_QWORD *)swift_allocObject(&unk_100108B10, 40, 7);
    v40[2] = 0;
    v40[3] = 0;
    v40[4] = v39;
    v41 = sub_10000D7B0((uint64_t)v32, (uint64_t)&unk_100114760, (uint64_t)v40);
    swift_release(v41);
    sub_100004F48((uint64_t)v32, &qword_1001142E0);
  }
}

uint64_t sub_1000185D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4[5] = a4;
  v5 = sub_100005360(&qword_1001142E0);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(sub_100005360(&qword_100114710) - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v8);
  v4[10] = swift_task_alloc(v8);
  return swift_task_switch(sub_10001866C, 0, 0);
}

uint64_t sub_10001866C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 88) = Strong;
  if (Strong)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to StocksKitCurrencyCache.provider.getter[1]);
    *(_QWORD *)(v0 + 96) = v3;
    *v3 = v0;
    v3[1] = sub_10001871C;
    return StocksKitCurrencyCache.provider.getter(*(_QWORD *)(v0 + 80));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10001871C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_100018770, 0, 0);
}

uint64_t sub_100018770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  sub_10000531C(v1, v3, &qword_100114710);
  type metadata accessor for MainActor(0);
  v8 = swift_retain(v2);
  v9 = static MainActor.shared.getter(v8);
  v10 = *(unsigned __int8 *)(v6 + 80);
  v11 = (v10 + 40) & ~v10;
  v12 = (_QWORD *)swift_allocObject(&unk_100108AE8, v11 + v4, v10 | 7);
  v12[2] = v9;
  v12[3] = &protocol witness table for MainActor;
  v12[4] = v2;
  sub_100007CD8(v3, (uint64_t)v12 + v11, &qword_100114710);
  v13 = sub_100096424(v5, (uint64_t)&unk_100114738, (uint64_t)v12);
  swift_release(v13);
  swift_release(v2);
  sub_100004F48(v1, &qword_100114710);
  v14 = *(_QWORD *)(v0 + 72);
  v15 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000188A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5[3] = a4;
  v5[4] = a5;
  v6 = sub_100005360(&qword_100114710);
  v5[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MainActor(0);
  v5[6] = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_100018930, v8, v9);
}

uint64_t sub_100018930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 48));
  sub_10000531C(v2, v1, &qword_100114710);
  KeyPath = swift_getKeyPath(&unk_1000CDE08);
  v5 = swift_task_alloc(32);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v1;
  *(_QWORD *)(v0 + 16) = v3;
  v6 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, KeyPath, sub_100019914, v5, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
  swift_task_dealloc(v5);
  sub_100004F48(v1, &qword_100114710);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018A34()
{
  return sub_100018A48((uint64_t)&unk_1000CDE58, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate);
}

uint64_t sub_100018A48(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + *a2);
}

void sub_100018ACC(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v9 = v6;
  v8 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v8);
  swift_release(KeyPath);
  *a4 = *(_BYTE *)(v6 + *a3);
}

double sub_100018B64(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CDE58);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100019C48, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100018C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4[5] = a4;
  v5 = sub_100005360(&qword_1001142E0);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(sub_100005360(&qword_100114718) - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v8);
  v4[10] = swift_task_alloc(v8);
  return swift_task_switch(sub_100018CA4, 0, 0);
}

uint64_t sub_100018CA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);

  v1 = *(_QWORD *)(v0 + 40) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 88) = Strong;
  if (Strong)
  {
    v7 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of StocksKitCurrencyCache.lastRefreshDate.getter
                                        + async function pointer to dispatch thunk of StocksKitCurrencyCache.lastRefreshDate.getter);
    v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of StocksKitCurrencyCache.lastRefreshDate.getter
                                    + 1));
    *(_QWORD *)(v0 + 96) = v3;
    *v3 = v0;
    v3[1] = sub_100018D6C;
    return v7(*(_QWORD *)(v0 + 80));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100018D6C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  return swift_task_switch(sub_100018DC0, 0, 0);
}

uint64_t sub_100018DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v7 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
  v8 = swift_allocObject(&unk_100108A98, 24, 7);
  swift_weakInit(v8 + 16, v2);
  sub_10000531C(v1, v3, &qword_100114718);
  type metadata accessor for MainActor(0);
  v9 = swift_retain(v8);
  v10 = static MainActor.shared.getter(v9);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 40) & ~v11;
  v13 = (_QWORD *)swift_allocObject(&unk_100108B38, v12 + v4, v11 | 7);
  v13[2] = v10;
  v13[3] = &protocol witness table for MainActor;
  v13[4] = v8;
  sub_100007CD8(v3, (uint64_t)v13 + v12, &qword_100114718);
  swift_release(v8);
  v14 = sub_100096424(v5, (uint64_t)&unk_100114770, (uint64_t)v13);
  swift_release(v14);
  swift_release(v2);
  sub_100004F48(v1, &qword_100114718);
  v15 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5[11] = a4;
  v5[12] = a5;
  v6 = sub_100005360(&qword_100114748);
  v5[13] = v6;
  v5[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100005360(&qword_100114718) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[15] = swift_task_alloc(v7);
  v5[16] = swift_task_alloc(v7);
  v5[17] = swift_task_alloc(v7);
  v5[18] = swift_task_alloc(v7);
  v5[19] = swift_task_alloc(v7);
  v8 = type metadata accessor for Date(0);
  v5[20] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[21] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[22] = swift_task_alloc(v10);
  v5[23] = swift_task_alloc(v10);
  v11 = type metadata accessor for MainActor(0);
  v5[24] = static MainActor.shared.getter(v11);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor);
  return swift_task_switch(sub_100019048, v12, v13);
}

uint64_t sub_100019048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v52)(uint64_t, uint64_t, uint64_t);
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  void (*v55)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 192));
  v1 += 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = (uint64_t *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 168);
    v7 = *(_QWORD *)(v0 + 152);
    sub_10000531C(*(_QWORD *)(v0 + 96), v7, &qword_100114718);
    v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    if (v8(v7, 1, v5) == 1)
    {
      sub_100004F48(*(_QWORD *)(v0 + 152), &qword_100114718);
LABEL_14:
      KeyPath = swift_getKeyPath(&unk_1000CDE58);
      v42 = swift_task_alloc(32);
      *(_QWORD *)(v42 + 16) = v3;
      *(_BYTE *)(v42 + 24) = 0;
      *v4 = v3;
      v43 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v4, KeyPath, sub_100019C48, v42, (char *)&type metadata for () + 8, v43);
      swift_release(KeyPath);
      swift_release(v3);
      swift_task_dealloc(v42);
      goto LABEL_15;
    }
    v9 = *(_QWORD *)(v0 + 184);
    v11 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD **)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 136);
    v14 = *(_QWORD *)(v0 + 112);
    v56 = *(_QWORD *)(v0 + 104);
    v52 = (void (*)(uint64_t, uint64_t, uint64_t))v10[4];
    v52(v9, *(_QWORD *)(v0 + 152), v11);
    v53 = (void (*)(uint64_t, uint64_t, uint64_t))v10[2];
    v53(v12, v9, v11);
    v55 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v10[7];
    v55(v12, 0, 1, v11);
    v15 = swift_getKeyPath(&unk_1000CDE30);
    *(_QWORD *)(v0 + 72) = v3;
    v54 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 72, v15, v54);
    swift_release(v15);
    v16 = v3 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate;
    swift_beginAccess(v3 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, v0 + 40, 0, 0);
    sub_10000531C(v16, v13, &qword_100114718);
    v17 = v14 + *(int *)(v56 + 48);
    sub_10000531C(v12, v14, &qword_100114718);
    sub_10000531C(v13, v17, &qword_100114718);
    v18 = v8(v14, 1, v11);
    v19 = *(_QWORD *)(v0 + 160);
    if (v18 == 1)
    {
      v20 = *(_QWORD *)(v0 + 144);
      sub_100004F48(*(_QWORD *)(v0 + 136), &qword_100114718);
      sub_100004F48(v20, &qword_100114718);
      if (v8(v17, 1, v19) == 1)
      {
        v21 = *(_QWORD *)(v0 + 168);
        sub_100004F48(*(_QWORD *)(v0 + 112), &qword_100114718);
        (*(void (**)(_QWORD, _QWORD))(v21 + 8))(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
LABEL_12:
        v4 = (uint64_t *)(v0 + 64);
        goto LABEL_14;
      }
    }
    else
    {
      sub_10000531C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 128), &qword_100114718);
      if (v8(v17, 1, v19) != 1)
      {
        v27 = *(_QWORD *)(v0 + 168);
        v26 = *(_QWORD *)(v0 + 176);
        v28 = *(_QWORD *)(v0 + 160);
        v30 = *(_QWORD *)(v0 + 136);
        v29 = *(_QWORD *)(v0 + 144);
        v31 = *(_QWORD *)(v0 + 128);
        v32 = *(_QWORD *)(v0 + 112);
        v52(v26, v17, v28);
        v33 = sub_100005178(&qword_100114750, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v26, v28, v33);
        v35 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
        v35(v26, v28);
        sub_100004F48(v30, &qword_100114718);
        sub_100004F48(v29, &qword_100114718);
        v35(v31, v28);
        sub_100004F48(v32, &qword_100114718);
        if ((v34 & 1) != 0)
        {
          v35(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 160));
          goto LABEL_12;
        }
LABEL_13:
        v36 = *(_QWORD *)(v0 + 184);
        v37 = *(_QWORD *)(v0 + 160);
        v57 = *(_QWORD *)(v0 + 168);
        v38 = *(_QWORD *)(v0 + 120);
        v53(v38, v36, v37);
        v55(v38, 0, 1, v37);
        v39 = swift_getKeyPath(&unk_1000CDE30);
        v40 = swift_task_alloc(32);
        *(_QWORD *)(v40 + 16) = v3;
        *(_QWORD *)(v40 + 24) = v38;
        *(_QWORD *)(v0 + 80) = v3;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 80, v39, sub_100019C34, v40, (char *)&type metadata for () + 8, v54);
        swift_release(v39);
        swift_task_dealloc(v40);
        sub_100004F48(v38, &qword_100114718);
        (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v36, v37);
        v4 = (uint64_t *)(v0 + 64);
        goto LABEL_14;
      }
      v22 = *(_QWORD *)(v0 + 160);
      v23 = *(_QWORD *)(v0 + 168);
      v24 = *(_QWORD *)(v0 + 144);
      v25 = *(_QWORD *)(v0 + 128);
      sub_100004F48(*(_QWORD *)(v0 + 136), &qword_100114718);
      sub_100004F48(v24, &qword_100114718);
      (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v25, v22);
    }
    sub_100004F48(*(_QWORD *)(v0 + 112), &qword_100114748);
    goto LABEL_13;
  }
LABEL_15:
  v44 = *(_QWORD *)(v0 + 176);
  v46 = *(_QWORD *)(v0 + 144);
  v45 = *(_QWORD *)(v0 + 152);
  v48 = *(_QWORD *)(v0 + 128);
  v47 = *(_QWORD *)(v0 + 136);
  v50 = *(_QWORD *)(v0 + 112);
  v49 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000195A8()
{
  id *v0;
  char *v1;
  uint64_t v2;

  sub_100004F48((uint64_t)v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__provider, &qword_100114710);
  sub_100004F48((uint64_t)v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100114718);
  v1 = (char *)v0 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_100019638()
{
  return type metadata accessor for CalculatorCurrencyCacheProvider(0);
}

uint64_t type metadata accessor for CalculatorCurrencyCacheProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100114648;
  if (!qword_100114648)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorCurrencyCacheProvider);
  return result;
}

void sub_10001967C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v8[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100019758(319, &qword_100114658, (uint64_t (*)(uint64_t))&type metadata accessor for StocksKitCurrencyCache.Provider);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100019758(319, (unint64_t *)&unk_100114660, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      v8[4] = &unk_1000CDDD0;
      v8[5] = &unk_1000CDDD0;
      v6 = type metadata accessor for ObservationRegistrar(319);
      if (v7 <= 0x3F)
      {
        v8[6] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 7, v8, a1 + 80);
      }
    }
  }
}

void sub_100019758(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1000197A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000197CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_100114724);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100014F2C;
  return sub_1000185D4(a1, v4, v5, v6);
}

uint64_t sub_100019838()
{
  return sub_100019A58(&qword_100114710, (uint64_t (*)(_QWORD, __n128))&type metadata accessor for StocksKitCurrencyCache.Provider);
}

uint64_t sub_10001984C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100005360(&qword_100114710) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_100114734);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100014F2C;
  return sub_1000188A0(a1, v5, v6, v7, v8);
}

uint64_t sub_1000198E4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100017870(a1, (uint64_t)&unk_1000CDE08, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__provider, &qword_100114710, a2);
}

uint64_t sub_100019914()
{
  uint64_t v0;

  return sub_100017A34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__provider, &qword_100114710);
}

uint64_t sub_10001993C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100017870(a1, (uint64_t)&unk_1000CDE30, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100114718, a2);
}

uint64_t sub_10001996C()
{
  uint64_t v0;

  return sub_100017A34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__currencyCacheLastRefreshDate, &qword_100114718);
}

void sub_100019994(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100018ACC(a1, (uint64_t)&unk_1000CDE58, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate, a2);
}

void sub_1000199BC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__updatingLastRefreshDate) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_1000199D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10011475C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100013F04;
  return sub_100018C0C(a1, v4, v5, v6);
}

uint64_t sub_100019A44()
{
  return sub_100019A58(&qword_100114718, (uint64_t (*)(_QWORD, __n128))&type metadata accessor for Date);
}

uint64_t sub_100019A58(uint64_t *a1, uint64_t (*a2)(_QWORD, __n128))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(sub_100005360(a1) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 40) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16));
  v8 = swift_release(*(_QWORD *)(v2 + 32));
  v9 = a2(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v2 + v6, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2 + v6, v9);
  return swift_deallocObject(v2, v6 + v7, v5 | 7);
}

uint64_t sub_100019AFC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_100005360(&qword_100114718) - 8) + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = v1[4];
  v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  v9 = (_QWORD *)swift_task_alloc(dword_10011476C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100014F2C;
  return sub_100018F24(a1, v5, v6, v7, v8);
}

uint64_t sub_100019B94(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100005360(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

void sub_100019BD8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_100018ACC(a1, (uint64_t)&unk_1000CDE80, &OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded, a2);
}

void sub_100019C08()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100019C20()
{
  return sub_100019914();
}

uint64_t sub_100019C34()
{
  return sub_10001996C();
}

void sub_100019C48()
{
  sub_1000199BC();
}

void sub_100019C5C()
{
  sub_100019C08();
}

uint64_t destroy for CalculatorMainView(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 16));
  return sub_100007720(*(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for CalculatorMainView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  swift_retain(v3);
  swift_retain(v5);
  sub_1000076D0(v7, v8);
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t *assignWithCopy for CalculatorMainView(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v2 = a2;
  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = v2[2];
  v8 = *((_BYTE *)v2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  v10 = v2[4];
  LOBYTE(v2) = *((_BYTE *)v2 + 40);
  sub_1000076D0(v10, (char)v2);
  v11 = a1[4];
  v12 = *((_BYTE *)a1 + 40);
  a1[4] = v10;
  *((_BYTE *)a1 + 40) = (_BYTE)v2;
  sub_100007720(v11, v12);
  return a1;
}

__n128 initializeWithTake for CalculatorMainView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for CalculatorMainView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  v8 = *((_BYTE *)a2 + 40);
  v9 = a1[4];
  v10 = *((_BYTE *)a1 + 40);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = v8;
  sub_100007720(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorMainView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorMainView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorMainView()
{
  return &type metadata for CalculatorMainView;
}

uint64_t sub_100019ED4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F595C, 1);
}

uint64_t sub_100019EE4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v52 = a1;
  v2 = type metadata accessor for CalculatorHistoryView(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100005360(&qword_100114780);
  __chkstk_darwin(v51, v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100114788);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = &v12[*(int *)(v13 + 56)];
  v15 = type metadata accessor for CalculatorLayout(0);
  v50 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  *(_QWORD *)v14 = Environment.init<A>(_:)(v15, v15, v50);
  v14[8] = v16 & 1;
  v17 = &v12[*(int *)(v9 + 60)];
  v18 = type metadata accessor for CalculatorToolbarViewModel(0);
  v19 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  *(_QWORD *)v17 = Environment.init<A>(_:)(v18, v18, v19);
  v17[8] = v20 & 1;
  v21 = sub_10008C948((uint64_t)v5);
  v22 = static Alignment.center.getter(v21);
  v49 = v23;
  v24 = *(_QWORD *)(v1 + 32);
  v25 = *(_BYTE *)(v1 + 40);
  sub_1000076D0(v24, v25);
  v26 = sub_1000436D8(v24, v25);
  sub_100007720(v24, v25);
  if ((v26 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1000CDF70);
    v28 = type metadata accessor for CalculatorViewModel(0);
    v29 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v30 = Environment.init<A>(_:)(v28, v28, v29);
    v31 = 0;
    v33 = v32 & 1;
  }
  else
  {
    KeyPath = 0;
    v30 = 0;
    v33 = 0;
    v31 = 65280;
  }
  sub_10001A24C((uint64_t)v5, (uint64_t)v8);
  v34 = &v8[*(int *)(v51 + 36)];
  *(_QWORD *)v34 = KeyPath;
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = v31;
  *((_QWORD *)v34 + 3) = v30;
  v34[32] = v33;
  v35 = v49;
  *((_QWORD *)v34 + 5) = v22;
  *((_QWORD *)v34 + 6) = v35;
  sub_10001A290((uint64_t)v5);
  sub_10001A2CC((uint64_t)v8, (uint64_t)v12);
  v36 = &v12[*(int *)(v9 + 52)];
  v37 = type metadata accessor for CalculatorViewModel(0);
  v38 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v39 = Environment.init<A>(_:)(v37, v37, v38);
  v41 = v40;
  v42 = Environment.init<A>(_:)(v15, v15, v50);
  v44 = v43;
  v45 = swift_getKeyPath(&unk_1000CDF48);
  *(_QWORD *)v36 = v39;
  v36[8] = v41 & 1;
  *((_QWORD *)v36 + 2) = v42;
  v36[24] = v44 & 1;
  *((_QWORD *)v36 + 4) = v45;
  v36[40] = 0;
  v46 = static Alignment.center.getter(v45);
  sub_100035338(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v52, 0.0, 1, INFINITY, 0, v46, v47);
  return sub_10001A318((uint64_t)v12);
}

uint64_t sub_10001A24C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalculatorHistoryView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A290(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CalculatorHistoryView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001A2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100114780);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A318(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_100114788);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001A360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114790;
  if (!qword_100114790)
  {
    v1 = sub_100005608(&qword_100114798);
    sub_10001A3CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114790);
  }
  return result;
}

unint64_t sub_10001A3CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001147A0;
  if (!qword_1001147A0)
  {
    v1 = sub_100005608(&qword_100114788);
    result = swift_getWitnessTable(&unk_1000D4F40, v1);
    atomic_store(result, (unint64_t *)&qword_1001147A0);
  }
  return result;
}

uint64_t sub_10001A418()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  __n128 v6;
  uint64_t v8;
  char v9;
  __n128 v10;
  uint64_t v11;
  char v12;
  __n128 v13;
  uint64_t v14;
  char v15;
  __n128 v16;
  uint64_t v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  char v21;
  __n128 v22;
  uint64_t v23;
  char v24;
  __n128 v25;
  uint64_t v26;
  char v27;
  __n128 v28;
  uint64_t v29;
  char v30;
  __n128 v31;
  uint64_t v32;
  char v33;
  __n128 v34;
  uint64_t v35;
  char v36;
  __n128 v37;
  uint64_t v38;
  char v39;
  __n128 v40;
  uint64_t v41;
  char v42;
  __n128 v43;
  uint64_t v44;
  char v45;
  __n128 v46;
  uint64_t v47;
  char v48;
  __n128 v49;
  uint64_t v50;
  char v51;
  __n128 v52;
  uint64_t v53;
  char v54;
  __n128 v55;
  uint64_t v56;
  char v57;
  __n128 v58;
  uint64_t v59;
  char v60;
  __n128 v61;
  uint64_t v62;
  char v63;
  __n128 v64;
  uint64_t v65;
  char v66;
  __n128 v67;
  uint64_t v68;
  char v69;
  __n128 v70;
  uint64_t v71;
  char v72;
  __n128 v73;
  uint64_t v74;
  char v75;
  __n128 v76;
  uint64_t v77;
  char v78;
  __n128 v79;
  uint64_t v80;
  char v81;
  __n128 v82;
  uint64_t v83;
  char v84;
  __n128 v85;
  uint64_t v86;
  char v87;
  __n128 v88;
  uint64_t v89;
  char v90;
  __n128 v91;
  uint64_t v92;
  char v93;
  __n128 v94;
  uint64_t v95;
  char v96;
  __n128 v97;
  uint64_t v98;
  char v99;
  __n128 v100;
  uint64_t v101;
  char v102;
  __n128 v103;
  uint64_t v104;
  char v105;
  __n128 v106;
  uint64_t v107;
  char v108;
  __n128 v109;
  uint64_t v110;
  char v111;
  __n128 v112;
  uint64_t v113;
  char v114;
  __n128 v115;
  uint64_t v116;
  char v117;
  __n128 v118;
  uint64_t v119;
  char v120;
  __n128 v121;
  uint64_t v122;
  char v123;
  __n128 v124;
  uint64_t v125;
  char v126;
  __n128 v127;
  uint64_t v128;
  char v129;
  __n128 v130;
  uint64_t v131;
  char v132;
  __n128 v133;
  uint64_t v134;
  char v135;
  __n128 v136;
  uint64_t v137;
  char v138;
  __n128 v139;
  uint64_t v140;
  char v141;
  __n128 v142;
  uint64_t v143;
  char v144;
  __n128 v145;
  uint64_t v146;
  char v147;
  __n128 v148;
  uint64_t v149;
  char v150;
  __n128 v151;
  uint64_t v152;
  char v153;
  __n128 v154;
  uint64_t v155;
  char v156;
  __n128 v157;
  uint64_t v158;
  char v159;
  __n128 v160;
  uint64_t v161;
  char v162;
  __n128 v163;
  uint64_t v164;
  char v165;
  __n128 v166;
  uint64_t v167;
  char v168;
  __n128 v169;
  uint64_t v170;
  char v171;
  __n128 v172;
  uint64_t v173;
  char v174;
  __n128 v175;
  uint64_t v176;
  char v177;
  __n128 v178;
  uint64_t v179;
  char v180;
  __n128 v181;
  uint64_t v182;
  char v183;
  __n128 v184;
  uint64_t v185;
  char v186;
  __n128 v187;
  uint64_t v188;
  char v189;
  __n128 v190;
  uint64_t v191;
  char v192;
  __n128 v193;
  uint64_t v194;
  char v195;
  __n128 v196;
  uint64_t v197;
  char v198;
  __n128 v199;
  uint64_t v200;
  char v201;
  __n128 v202;
  uint64_t v203;
  char v204;
  __n128 v205;
  uint64_t v206;
  char v207;
  __n128 v208;
  uint64_t v209;
  char v210;
  __n128 v211;
  uint64_t v212;
  char v213;
  __n128 v214;
  uint64_t v215;
  char v216;
  __n128 v217;
  uint64_t v218;
  char v219;
  __n128 v220;
  uint64_t v221;
  char v222;
  __n128 v223;
  uint64_t v224;
  char v225;
  __n128 v226;
  uint64_t v227;
  char v228;
  __n128 v229;
  uint64_t v230;
  char v231;
  __n128 v232;
  uint64_t v233;
  char v234;
  __n128 v235;
  uint64_t v236;
  char v237;
  __n128 v238;
  uint64_t v239;
  char v240;
  __n128 v241;
  uint64_t v242;
  char v243;
  __n128 v244;
  uint64_t v245;
  char v246;
  __n128 v247;
  uint64_t v248;
  char v249;
  __n128 v250;
  uint64_t v251;
  char v252;
  uint64_t v253;
  uint64_t v254;

  v1 = v0;
  v2 = type metadata accessor for CalculateExpression.Operation(0);
  v3 = static CalculateExpression.Operation.digit00.getter();
  v253 = v1;
  v254 = v3;
  v4 = sub_10001B688();
  v5 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v6 = swift_release(v3);
  if ((v5 & 1) != 0)
    return 72;
  v8 = static CalculateExpression.Operation.digit0.getter(v6);
  v253 = v1;
  v254 = v8;
  v9 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v10 = swift_release(v8);
  if ((v9 & 1) != 0)
    return 11;
  v11 = static CalculateExpression.Operation.digit1.getter(v10);
  v253 = v1;
  v254 = v11;
  v12 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v13 = swift_release(v11);
  if ((v12 & 1) != 0)
    return 12;
  v14 = static CalculateExpression.Operation.digit2.getter(v13);
  v253 = v1;
  v254 = v14;
  v15 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v16 = swift_release(v14);
  if ((v15 & 1) != 0)
    return 13;
  v17 = static CalculateExpression.Operation.digit3.getter(v16);
  v253 = v1;
  v254 = v17;
  v18 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v19 = swift_release(v17);
  if ((v18 & 1) != 0)
    return 14;
  v20 = static CalculateExpression.Operation.digit4.getter(v19);
  v253 = v1;
  v254 = v20;
  v21 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v22 = swift_release(v20);
  if ((v21 & 1) != 0)
    return 15;
  v23 = static CalculateExpression.Operation.digit5.getter(v22);
  v253 = v1;
  v254 = v23;
  v24 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v25 = swift_release(v23);
  if ((v24 & 1) != 0)
    return 16;
  v26 = static CalculateExpression.Operation.digit6.getter(v25);
  v253 = v1;
  v254 = v26;
  v27 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v28 = swift_release(v26);
  if ((v27 & 1) != 0)
    return 17;
  v29 = static CalculateExpression.Operation.digit7.getter(v28);
  v253 = v1;
  v254 = v29;
  v30 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v31 = swift_release(v29);
  if ((v30 & 1) != 0)
    return 18;
  v32 = static CalculateExpression.Operation.digit8.getter(v31);
  v253 = v1;
  v254 = v32;
  v33 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v34 = swift_release(v32);
  if ((v33 & 1) != 0)
    return 19;
  v35 = static CalculateExpression.Operation.digit9.getter(v34);
  v253 = v1;
  v254 = v35;
  v36 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v37 = swift_release(v35);
  if ((v36 & 1) != 0)
    return 20;
  v38 = static CalculateExpression.Operation.digitA.getter(v37);
  v253 = v1;
  v254 = v38;
  v39 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v40 = swift_release(v38);
  if ((v39 & 1) != 0)
    return 65;
  v41 = static CalculateExpression.Operation.digitB.getter(v40);
  v253 = v1;
  v254 = v41;
  v42 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v43 = swift_release(v41);
  if ((v42 & 1) != 0)
    return 66;
  v44 = static CalculateExpression.Operation.digitC.getter(v43);
  v253 = v1;
  v254 = v44;
  v45 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v46 = swift_release(v44);
  if ((v45 & 1) != 0)
    return 67;
  v47 = static CalculateExpression.Operation.digitD.getter(v46);
  v253 = v1;
  v254 = v47;
  v48 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v49 = swift_release(v47);
  if ((v48 & 1) != 0)
    return 68;
  v50 = static CalculateExpression.Operation.digitE.getter(v49);
  v253 = v1;
  v254 = v50;
  v51 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v52 = swift_release(v50);
  if ((v51 & 1) != 0)
    return 69;
  v53 = static CalculateExpression.Operation.digitF.getter(v52);
  v253 = v1;
  v254 = v53;
  v54 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v55 = swift_release(v53);
  if ((v54 & 1) != 0)
    return 70;
  v56 = static CalculateExpression.Operation.digitFF.getter(v55);
  v253 = v1;
  v254 = v56;
  v57 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v58 = swift_release(v56);
  if ((v57 & 1) != 0)
    return 71;
  v59 = static CalculateExpression.Operation.pi.getter(v58);
  v253 = v1;
  v254 = v59;
  v60 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v61 = swift_release(v59);
  if ((v60 & 1) != 0)
    return 50;
  v62 = static CalculateExpression.Operation.eulerNumber.getter(v61);
  v253 = v1;
  v254 = v62;
  v63 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v64 = swift_release(v62);
  if ((v63 & 1) != 0)
    return 44;
  v65 = static CalculateExpression.Operation.ee.getter(v64);
  v253 = v1;
  v254 = v65;
  v66 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v67 = swift_release(v65);
  if ((v66 & 1) != 0)
    return 45;
  v68 = static CalculateExpression.Operation.random.getter(v67);
  v253 = v1;
  v254 = v68;
  v69 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v70 = swift_release(v68);
  if ((v69 & 1) != 0)
    return 51;
  v71 = static CalculateExpression.Operation.equals.getter(v70);
  v253 = v1;
  v254 = v71;
  v72 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v73 = swift_release(v71);
  if ((v72 & 1) != 0)
    return 8;
  v74 = static CalculateExpression.Operation.delete.getter(v73);
  v253 = v1;
  v254 = v74;
  v75 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v76 = swift_release(v74);
  if ((v75 & 1) != 0)
    return 52;
  v77 = static CalculateExpression.Operation.clear.getter(v76);
  v253 = v1;
  v254 = v77;
  v78 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v79 = swift_release(v77);
  if ((v78 & 1) != 0)
    return 1;
  v80 = static CalculateExpression.Operation.negate.getter(v79);
  v253 = v1;
  v254 = v80;
  v81 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v82 = swift_release(v80);
  if ((v81 & 1) != 0)
    return 2;
  v83 = static CalculateExpression.Operation.add.getter(v82);
  v253 = v1;
  v254 = v83;
  v84 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v85 = swift_release(v83);
  if ((v84 & 1) != 0)
    return 7;
  v86 = static CalculateExpression.Operation.subtract.getter(v85);
  v253 = v1;
  v254 = v86;
  v87 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v88 = swift_release(v86);
  if ((v87 & 1) != 0)
    return 6;
  v89 = static CalculateExpression.Operation.multiply.getter(v88);
  v253 = v1;
  v254 = v89;
  v90 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v91 = swift_release(v89);
  if ((v90 & 1) != 0)
    return 5;
  v92 = static CalculateExpression.Operation.divide.getter(v91);
  v253 = v1;
  v254 = v92;
  v93 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v94 = swift_release(v92);
  if ((v93 & 1) != 0)
    return 4;
  v95 = static CalculateExpression.Operation.decimal.getter(v94);
  v253 = v1;
  v254 = v95;
  v96 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v97 = swift_release(v95);
  if ((v96 & 1) != 0)
    return 9;
  v98 = static CalculateExpression.Operation.openParenthesis.getter(v97);
  v253 = v1;
  v254 = v98;
  v99 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v100 = swift_release(v98);
  if ((v99 & 1) != 0)
    return 21;
  v101 = static CalculateExpression.Operation.closeParenthesis.getter(v100);
  v253 = v1;
  v254 = v101;
  v102 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v103 = swift_release(v101);
  if ((v102 & 1) != 0)
    return 22;
  v104 = static CalculateExpression.Operation.factorial.getter(v103);
  v253 = v1;
  v254 = v104;
  v105 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v106 = swift_release(v104);
  if ((v105 & 1) != 0)
    return 40;
  v107 = static CalculateExpression.Operation.percent.getter(v106);
  v253 = v1;
  v254 = v107;
  v108 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v109 = swift_release(v107);
  if ((v108 & 1) != 0)
    return 3;
  v110 = static CalculateExpression.Operation.reciprocal.getter(v109);
  v253 = v1;
  v254 = v110;
  v111 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v112 = swift_release(v110);
  if ((v111 & 1) != 0)
    return 33;
  v113 = static CalculateExpression.Operation.square.getter(v112);
  v253 = v1;
  v254 = v113;
  v114 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v115 = swift_release(v113);
  if ((v114 & 1) != 0)
    return 28;
  v116 = static CalculateExpression.Operation.cube.getter(v115);
  v253 = v1;
  v254 = v116;
  v117 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v118 = swift_release(v116);
  if ((v117 & 1) != 0)
    return 29;
  v119 = static CalculateExpression.Operation.power.getter(v118);
  v253 = v1;
  v254 = v119;
  v120 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v121 = swift_release(v119);
  if ((v120 & 1) != 0)
    return 30;
  v122 = static CalculateExpression.Operation.root.getter(v121);
  v253 = v1;
  v254 = v122;
  v123 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v124 = swift_release(v122);
  if ((v123 & 1) != 0)
    return 36;
  v125 = static CalculateExpression.Operation.reverseRoot.getter(v124);
  v253 = v1;
  v254 = v125;
  v126 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v127 = swift_release(v125);
  if ((v126 & 1) != 0)
    return 37;
  v128 = static CalculateExpression.Operation.squareRoot.getter(v127);
  v253 = v1;
  v254 = v128;
  v129 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v130 = swift_release(v128);
  if ((v129 & 1) != 0)
    return 34;
  v131 = static CalculateExpression.Operation.cubeRoot.getter(v130);
  v253 = v1;
  v254 = v131;
  v132 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v133 = swift_release(v131);
  if ((v132 & 1) != 0)
    return 35;
  v134 = static CalculateExpression.Operation.logarithmBase10.getter(v133);
  v253 = v1;
  v254 = v134;
  v135 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v136 = swift_release(v134);
  if ((v135 & 1) != 0)
    return 39;
  v137 = static CalculateExpression.Operation.logarithmBase2.getter(v136);
  v253 = v1;
  v254 = v137;
  v138 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v139 = swift_release(v137);
  if ((v138 & 1) != 0)
    return 58;
  v140 = static CalculateExpression.Operation.logarithmBaseCustom.getter(v139);
  v253 = v1;
  v254 = v140;
  v141 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v142 = swift_release(v140);
  if ((v141 & 1) != 0)
    return 57;
  v143 = static CalculateExpression.Operation.logarithmNatural.getter(v142);
  v253 = v1;
  v254 = v143;
  v144 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v145 = swift_release(v143);
  if ((v144 & 1) != 0)
    return 38;
  v146 = static CalculateExpression.Operation.exponentialBase10.getter(v145);
  v253 = v1;
  v254 = v146;
  v147 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v148 = swift_release(v146);
  if ((v147 & 1) != 0)
    return 32;
  v149 = static CalculateExpression.Operation.exponentialBase2.getter(v148);
  v253 = v1;
  v254 = v149;
  v150 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v151 = swift_release(v149);
  if ((v150 & 1) != 0)
    return 56;
  v152 = static CalculateExpression.Operation.exponentialBaseEuler.getter(v151);
  v253 = v1;
  v254 = v152;
  v153 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v154 = swift_release(v152);
  if ((v153 & 1) != 0)
    return 31;
  v155 = static CalculateExpression.Operation.exponentialBaseCustom.getter(v154);
  v253 = v1;
  v254 = v155;
  v156 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v157 = swift_release(v155);
  if ((v156 & 1) != 0)
    return 55;
  v158 = static CalculateExpression.Operation.sine.getter(v157);
  v253 = v1;
  v254 = v158;
  v159 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v160 = swift_release(v158);
  if ((v159 & 1) != 0)
    return 41;
  v161 = static CalculateExpression.Operation.cosine.getter(v160);
  v253 = v1;
  v254 = v161;
  v162 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v163 = swift_release(v161);
  if ((v162 & 1) != 0)
    return 42;
  v164 = static CalculateExpression.Operation.tangent.getter(v163);
  v253 = v1;
  v254 = v164;
  v165 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v166 = swift_release(v164);
  if ((v165 & 1) != 0)
    return 43;
  v167 = static CalculateExpression.Operation.hyperbolicSine.getter(v166);
  v253 = v1;
  v254 = v167;
  v168 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v169 = swift_release(v167);
  if ((v168 & 1) != 0)
    return 47;
  v170 = static CalculateExpression.Operation.hyperbolicCosine.getter(v169);
  v253 = v1;
  v254 = v170;
  v171 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v172 = swift_release(v170);
  if ((v171 & 1) != 0)
    return 48;
  v173 = static CalculateExpression.Operation.hyperbolicTangent.getter(v172);
  v253 = v1;
  v254 = v173;
  v174 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v175 = swift_release(v173);
  if ((v174 & 1) != 0)
    return 49;
  v176 = static CalculateExpression.Operation.inverseSine.getter(v175);
  v253 = v1;
  v254 = v176;
  v177 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v178 = swift_release(v176);
  if ((v177 & 1) != 0)
    return 59;
  v179 = static CalculateExpression.Operation.inverseCosine.getter(v178);
  v253 = v1;
  v254 = v179;
  v180 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v181 = swift_release(v179);
  if ((v180 & 1) != 0)
    return 60;
  v182 = static CalculateExpression.Operation.inverseTangent.getter(v181);
  v253 = v1;
  v254 = v182;
  v183 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v184 = swift_release(v182);
  if ((v183 & 1) != 0)
    return 61;
  v185 = static CalculateExpression.Operation.inverseHyperbolicSine.getter(v184);
  v253 = v1;
  v254 = v185;
  v186 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v187 = swift_release(v185);
  if ((v186 & 1) != 0)
    return 62;
  v188 = static CalculateExpression.Operation.inverseHyperbolicCosine.getter(v187);
  v253 = v1;
  v254 = v188;
  v189 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v190 = swift_release(v188);
  if ((v189 & 1) != 0)
    return 63;
  v191 = static CalculateExpression.Operation.inverseHyperbolicTangent.getter(v190);
  v253 = v1;
  v254 = v191;
  v192 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v193 = swift_release(v191);
  if ((v192 & 1) != 0)
    return 64;
  v194 = static CalculateExpression.Operation.and.getter(v193);
  v253 = v1;
  v254 = v194;
  v195 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v196 = swift_release(v194);
  if ((v195 & 1) != 0)
    return 73;
  v197 = static CalculateExpression.Operation.or.getter(v196);
  v253 = v1;
  v254 = v197;
  v198 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v199 = swift_release(v197);
  if ((v198 & 1) != 0)
    return 74;
  v200 = static CalculateExpression.Operation.nor.getter(v199);
  v253 = v1;
  v254 = v200;
  v201 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v202 = swift_release(v200);
  if ((v201 & 1) != 0)
    return 75;
  v203 = static CalculateExpression.Operation.xor.getter(v202);
  v253 = v1;
  v254 = v203;
  v204 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v205 = swift_release(v203);
  if ((v204 & 1) != 0)
    return 76;
  v206 = static CalculateExpression.Operation.leftShift.getter(v205);
  v253 = v1;
  v254 = v206;
  v207 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v208 = swift_release(v206);
  if ((v207 & 1) != 0)
    return 78;
  v209 = static CalculateExpression.Operation.rightShift.getter(v208);
  v253 = v1;
  v254 = v209;
  v210 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v211 = swift_release(v209);
  if ((v210 & 1) != 0)
    return 77;
  v212 = static CalculateExpression.Operation.leftShiftCustom.getter(v211);
  v253 = v1;
  v254 = v212;
  v213 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v214 = swift_release(v212);
  if ((v213 & 1) != 0)
    return 80;
  v215 = static CalculateExpression.Operation.rightShiftCustom.getter(v214);
  v253 = v1;
  v254 = v215;
  v216 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v217 = swift_release(v215);
  if ((v216 & 1) != 0)
    return 79;
  v218 = static CalculateExpression.Operation.leftRotate.getter(v217);
  v253 = v1;
  v254 = v218;
  v219 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v220 = swift_release(v218);
  if ((v219 & 1) != 0)
    return 82;
  v221 = static CalculateExpression.Operation.rightRotate.getter(v220);
  v253 = v1;
  v254 = v221;
  v222 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v223 = swift_release(v221);
  if ((v222 & 1) != 0)
    return 81;
  v224 = static CalculateExpression.Operation.byteFlip.getter(v223);
  v253 = v1;
  v254 = v224;
  v225 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v226 = swift_release(v224);
  if ((v225 & 1) != 0)
    return 83;
  v227 = static CalculateExpression.Operation.wordFlip.getter(v226);
  v253 = v1;
  v254 = v227;
  v228 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v229 = swift_release(v227);
  if ((v228 & 1) != 0)
    return 84;
  v230 = static CalculateExpression.Operation.not.getter(v229);
  v253 = v1;
  v254 = v230;
  v231 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v232 = swift_release(v230);
  if ((v231 & 1) != 0)
    return 86;
  v233 = static CalculateExpression.Operation.neg.getter(v232);
  v253 = v1;
  v254 = v233;
  v234 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v235 = swift_release(v233);
  if ((v234 & 1) != 0)
    return 85;
  v236 = static CalculateExpression.Operation.mod.getter(v235);
  v253 = v1;
  v254 = v236;
  v237 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v238 = swift_release(v236);
  if ((v237 & 1) != 0)
    return 87;
  v239 = static CalculateExpression.Operation.drop.getter(v238);
  v253 = v1;
  v254 = v239;
  v240 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v241 = swift_release(v239);
  if ((v240 & 1) != 0)
    return 88;
  v242 = static CalculateExpression.Operation.swap.getter(v241);
  v253 = v1;
  v254 = v242;
  v243 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v244 = swift_release(v242);
  if ((v243 & 1) != 0)
    return 89;
  v245 = static CalculateExpression.Operation.rollOut.getter(v244);
  v253 = v1;
  v254 = v245;
  v246 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v247 = swift_release(v245);
  if ((v246 & 1) != 0)
    return 90;
  v248 = static CalculateExpression.Operation.rollIn.getter(v247);
  v253 = v1;
  v254 = v248;
  v249 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  v250 = swift_release(v248);
  if ((v249 & 1) != 0)
    return 91;
  v251 = static CalculateExpression.Operation.enter.getter(v250);
  v253 = v1;
  v254 = v251;
  v252 = dispatch thunk of static Equatable.== infix(_:_:)(&v254, &v253, v2, v4);
  swift_release(v251);
  if ((v252 & 1) != 0)
    return 92;
  else
    return 93;
}

unint64_t sub_10001B688()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001147A8;
  if (!qword_1001147A8)
  {
    v1 = type metadata accessor for CalculateExpression.Operation(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculateExpression.Operation, v1);
    atomic_store(result, (unint64_t *)&qword_1001147A8);
  }
  return result;
}

void sub_10001B6D0()
{
  void *v0;
  id v1;

  sub_100004D98();
  v0 = (void *)static OS_dispatch_queue.main.getter();
  v1 = objc_msgSend(objc_allocWithZone((Class)PDCPreflightManager), "initWithTargetQueue:", v0);

  qword_1001147B0 = (uint64_t)v1;
}

uint64_t sub_10001B728()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for CalculatorPrivacyDisclosureManager()
{
  return objc_opt_self(_TtC10Calculator34CalculatorPrivacyDisclosureManager);
}

void sub_10001B758()
{
  qword_10011F820 = 0x4024000000000000;
}

void sub_10001B768()
{
  qword_10011F828 = 0x4056000000000000;
}

void sub_10001B778()
{
  qword_10011F830 = 0x406CC00000000000;
}

void sub_10001B78C()
{
  qword_10011F838 = 0x4047000000000000;
}

void sub_10001B79C()
{
  qword_10011F840 = 0x4028000000000000;
}

void sub_10001B7AC()
{
  qword_10011F848 = 0x4035000000000000;
}

void sub_10001B7BC()
{
  qword_10011F850 = 0x4045000000000000;
}

void sub_10001B7CC()
{
  qword_10011F858 = 0x403D000000000000;
}

void sub_10001B7DC()
{
  qword_10011F860 = 0x403D000000000000;
}

void sub_10001B7EC()
{
  qword_10011F868 = 0x4053000000000000;
}

void sub_10001B7FC()
{
  qword_10011F870 = 0x4030000000000000;
}

void sub_10001B80C()
{
  qword_10011F878 = 0x4014000000000000;
}

void sub_10001B81C()
{
  qword_10011F880 = 0x4020000000000000;
}

void sub_10001B82C()
{
  qword_10011F888 = 0x4010000000000000;
}

void sub_10001B83C()
{
  qword_10011F890 = 0x4014000000000000;
}

void sub_10001B84C()
{
  qword_10011F898 = 0x4024000000000000;
}

void sub_10001B85C()
{
  qword_10011F8A0 = 0x4036000000000000;
}

void sub_10001B86C()
{
  qword_10011F8A8 = 0x4034000000000000;
}

double sub_10001B87C(uint64_t a1)
{
  return sub_10001BA00(a1, &qword_100113A20, (double *)&qword_10011F8A8, &qword_10011F8B0, (uint64_t)sub_10001B86C);
}

void sub_10001B8A0()
{
  qword_10011F8B8 = 0x4028000000000000;
}

void sub_10001B8B0()
{
  qword_10011F8C0 = 0x4034000000000000;
}

void sub_10001B8C0()
{
  qword_10011F8C8 = 0x4034000000000000;
}

void sub_10001B8D0()
{
  qword_10011F8D0 = 0x4034000000000000;
}

void sub_10001B8E0()
{
  qword_10011F8D8 = 0x4010000000000000;
}

void sub_10001B8F0()
{
  qword_10011F8E0 = 0x4010000000000000;
}

void sub_10001B900()
{
  qword_10011F8E8 = 0x4074A00000000000;
}

void sub_10001B914()
{
  qword_10011F8F0 = 0x406F400000000000;
}

void sub_10001B928()
{
  qword_10011F8F8 = 0x4043000000000000;
}

double sub_10001B938(uint64_t a1)
{
  return sub_10001BA00(a1, &qword_100113A70, (double *)&qword_10011F8F8, &qword_10011F900, (uint64_t)sub_10001B928);
}

void sub_10001B95C()
{
  qword_10011F908 = 0xC044000000000000;
}

void sub_10001B96C()
{
  qword_10011F910 = 0x4000000000000000;
}

void sub_10001B97C()
{
  qword_10011F918 = 0x4030000000000000;
}

void sub_10001B98C()
{
  qword_10011F920 = 0x4030000000000000;
}

void sub_10001B99C()
{
  qword_10011F928 = 0x4022000000000000;
}

void sub_10001B9AC()
{
  qword_10011F930 = 0x4030000000000000;
}

void sub_10001B9BC()
{
  qword_10011F938 = 0x4008000000000000;
}

void sub_10001B9CC()
{
  qword_10011F940 = 0x401C000000000000;
}

double sub_10001B9DC(uint64_t a1)
{
  return sub_10001BA00(a1, &qword_100113B00, (double *)&qword_10011F988, &qword_10011F948, (uint64_t)sub_10001BAB0);
}

double sub_10001BA00(uint64_t a1, _QWORD *a2, double *a3, _QWORD *a4, uint64_t a5)
{
  double result;

  if (*a2 != -1)
    swift_once(a2, a5);
  result = *a3;
  *a4 = *(_QWORD *)a3;
  return result;
}

void sub_10001BA44()
{
  qword_10011F950 = 0;
}

void sub_10001BA50()
{
  qword_10011F958 = 0x4020000000000000;
}

void sub_10001BA60()
{
  qword_10011F960 = 0x4028000000000000;
}

void sub_10001BA70()
{
  qword_10011F968 = 0x403E000000000000;
}

void sub_10001BA80()
{
  qword_10011F970 = 0x4014000000000000;
}

void sub_10001BA90()
{
  qword_10011F978 = 0x4014000000000000;
}

void sub_10001BAA0()
{
  qword_10011F980 = 0x4024000000000000;
}

void sub_10001BAB0()
{
  qword_10011F988 = 0x4032000000000000;
}

void sub_10001BAC0()
{
  qword_10011F990 = 0x4031000000000000;
}

void sub_10001BAD0()
{
  qword_10011F998 = 0x4040000000000000;
}

void sub_10001BAE0()
{
  qword_10011F9A0 = 0xC000000000000000;
}

void sub_10001BAF0()
{
  qword_10011F9A8 = 0x4020000000000000;
}

void sub_10001BB00()
{
  qword_10011F9B0 = 0x4046000000000000;
}

void sub_10001BB10()
{
  qword_10011F9B8 = 0x402C000000000000;
}

void sub_10001BB20()
{
  qword_10011F9C0 = 0x4030000000000000;
}

void sub_10001BB30()
{
  qword_10011F9C8 = 0x4030000000000000;
}

void sub_10001BB40()
{
  qword_10011F9D0 = 0x4010000000000000;
}

void sub_10001BB50()
{
  qword_10011F9D8 = 0x4061400000000000;
}

uint64_t sub_10001BB64()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Text.TruncationMode(0);
  sub_10001C038(v0, qword_10011F9E0);
  v1 = sub_100014124(v0, (uint64_t)qword_10011F9E0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for Text.TruncationMode.middle(_:), v0);
}

uint64_t sub_10001BBBC(char *a1, char *a2)
{
  return sub_10001EFFC(*a1, *a2);
}

Swift::Int sub_10001BBC8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7474754265646F6DLL;
  else
    v2 = 0x6E6F634965646F6DLL;
  if (v1)
    v3 = 0xEA00000000006E6FLL;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10001BC4C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x7474754265646F6DLL;
  else
    v2 = 0x6E6F634965646F6DLL;
  if (*v1)
    v3 = 0xEA00000000006E6FLL;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10001BCAC()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x7474754265646F6DLL;
  else
    v2 = 0x6E6F634965646F6DLL;
  if (v1)
    v3 = 0xEA00000000006E6FLL;
  else
    v3 = 0xE800000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10001BD2C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100107988, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10001BD88(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6E6F634965646F6DLL;
  if (*v1)
    v2 = 0x7474754265646F6DLL;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xEA00000000006E6FLL;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10001BDCC()
{
  qword_10011F9F8 = 0x4010000000000000;
}

ValueMetadata *type metadata accessor for Constants()
{
  return &type metadata for Constants;
}

_BYTE *initializeBufferWithCopyOfBuffer for CalculatorAppMode(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Constants.NameSpaceID(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Constants.NameSpaceID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10001BED4 + 4 * byte_1000CDFD9[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10001BF08 + 4 * asc_1000CDFD4[v4]))();
}

uint64_t sub_10001BF08(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001BF10(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001BF18);
  return result;
}

uint64_t sub_10001BF24(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001BF2CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10001BF30(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001BF38(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001BF44(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10001BF4C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for Constants.NameSpaceID()
{
  return &type metadata for Constants.NameSpaceID;
}

unint64_t sub_10001BF6C()
{
  unint64_t result;

  result = qword_100114858;
  if (!qword_100114858)
  {
    result = swift_getWitnessTable(&unk_1000CE078, &type metadata for Constants.NameSpaceID);
    atomic_store(result, (unint64_t *)&qword_100114858);
  }
  return result;
}

void sub_10001BFB0()
{
  qword_10011FA00 = 0x4042000000000000;
}

void sub_10001BFC0()
{
  qword_10011FA08 = 0x4062C00000000000;
}

void sub_10001BFD4()
{
  qword_10011FA10 = 0x4020000000000000;
}

void sub_10001BFE4()
{
  qword_10011FA18 = 0x402E000000000000;
}

void sub_10001BFF4()
{
  qword_10011FA20 = 0x4034000000000000;
}

void sub_10001C004()
{
  qword_10011FA28 = 0x4034000000000000;
}

uint64_t sub_10001C014(uint64_t a1)
{
  return sub_10001C0A4(a1, qword_10011FA30, 0xD00000000000002DLL, 0x80000001000D5A20);
}

uint64_t *sub_10001C038(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10001C078(uint64_t a1)
{
  return sub_10001C0A4(a1, qword_10011FA48, 0x746F6E656C707061, 0xED00002F2F3A7365);
}

uint64_t sub_10001C0A4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = sub_100005360(&qword_100114860);
  sub_10001C038(v7, a2);
  sub_100014124(v7, (uint64_t)a2);
  return URL.init(string:)(a3, a4);
}

unint64_t sub_10001C104(uint64_t a1)
{
  return sub_10001C3A8(a1, &qword_100114870, &qword_100114878, (uint64_t (*)(uint64_t))sub_10001CA24);
}

unint64_t sub_10001C120(uint64_t a1)
{
  return sub_10001C278(a1, &qword_1001148B0);
}

unint64_t sub_10001C12C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005360(&qword_100114898);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000531C(v7, (uint64_t)v16, &qword_1001148A0);
    result = sub_10001CAFC((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_1000054E8(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001C26C(uint64_t a1)
{
  return sub_10001C278(a1, &qword_1001148A8);
}

unint64_t sub_10001C278(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005360(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_1000053A4(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001C38C(uint64_t a1)
{
  return sub_10001C3A8(a1, &qword_1001148B8, &qword_1001148C0, (uint64_t (*)(uint64_t))sub_10001CA24);
}

unint64_t sub_10001C3A8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005360(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_10000531C(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_1000054E8(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001C4D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100005360(&qword_100114888);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
    v9 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v9;
  }
  sub_100005360(&qword_100114890);
  v8 = static _DictionaryStorage.allocate(capacity:)(v7);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_9;
  v11 = v8 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v8);
  while (1)
  {
    sub_10000531C(v13, (uint64_t)v6, &qword_100114888);
    result = sub_10001E5E8();
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v9[7];
    v19 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v6, v19);
    v20 = v9[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v9[2] = v22;
    v13 += v14;
    if (!--v10)
    {
      swift_release(v9);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001C650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005360(&qword_1001148E0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_OWORD *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v16 = *v6;
    swift_bridgeObjectRetain(v8);
    v9 = (id)v16;
    swift_bridgeObjectRetain(*((_QWORD *)&v16 + 1));
    result = sub_1000053A4(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_OWORD *)(v4[7] + 16 * result) = v16;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001C784(uint64_t a1, int a2, unint64_t a3)
{
  char v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  double v19;
  void (*v20)(char *, uint64_t);
  id v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  unint64_t v34;
  unint64_t v36;
  char v37[24];

  v4 = a2;
  v6 = a2 & 0xFFFFFF;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = &v37[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v12, v13);
  v15 = &v37[-v14 - 8];
  if (a3)
    v16 = a3;
  else
    v16 = sub_10001C278((uint64_t)_swiftEmptyArrayStorage, &qword_100114868);
  v17 = swift_bridgeObjectRetain(a3);
  Date.init()(v17);
  v18 = a1 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime;
  swift_beginAccess(v18, v37, 0, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v18, v7);
  v19 = Date.timeIntervalSince(_:)(v11);
  v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  v20(v11, v7);
  v20(v15, v7);
  v21 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v19);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  v36 = v16;
  sub_10001E244((uint64_t)v21, 0x6E6F697461727564, 0xE800000000000000, isUniquelyReferenced_nonNull_native, &qword_100114868);
  v23 = v36;
  swift_bridgeObjectRelease(0x8000000000000000);
  v24 = v6 & 0xFF00;
  v25 = 2;
  v26 = 3;
  if ((v6 & 0x100) == 0)
    v26 = 1;
  if ((v6 & 0x10000) == 0)
    v25 = v26;
  if (v24 == 512)
    v27 = 1;
  else
    v27 = v25;
  v28 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v27);
  v29 = swift_isUniquelyReferenced_nonNull_native(v23);
  v36 = v23;
  sub_10001E244((uint64_t)v28, 0x7475706E69, 0xE500000000000000, v29, &qword_100114868);
  v30 = v36;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v24 == 512)
    v31 = 1;
  else
    v31 = qword_1000CE0C0[v4];
  v32 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v31);
  v33 = swift_isUniquelyReferenced_nonNull_native(v30);
  v36 = v30;
  sub_10001E244((uint64_t)v32, 1701080941, 0xE400000000000000, v33, &qword_100114868);
  v34 = v36;
  swift_bridgeObjectRelease(0x8000000000000000);
  return v34;
}

unint64_t sub_10001CA24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_10001CB2C(a1, v5);
}

unint64_t sub_10001CAA4(unsigned __int8 a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_10001CCA0(a1, v2);
}

unint64_t sub_10001CAFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10001CD40(a1, v4);
}

unint64_t sub_10001CB2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10001CCA0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10001CD40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10001E634(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10001E670((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

void sub_10001CE04(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  _OWORD *v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34[9];
  _OWORD v35[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005360(&qword_100114880);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v32 = v3;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = v7 + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return;
        }
        if (v18 >= v13)
          goto LABEL_37;
        v19 = v33[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_37;
          v19 = v33[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                swift_release(v5);
                v3 = v32;
                goto LABEL_44;
              }
              v31 = 1 << *(_BYTE *)(v5 + 32);
              if (v31 >= 64)
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v31;
              v3 = v32;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_46;
                if (v9 >= v13)
                  goto LABEL_37;
                v19 = v33[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
        sub_1000054E8(v22, v35);
      else
        sub_1000052E0((uint64_t)v22, (uint64_t)v35);
      Hasher.init(_seed:)(v34);
      Hasher._combine(_:)(v21);
      v23 = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v8 + 32);
      v25 = v23 & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v14 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v14 + 8 * v26);
        }
        while (v30 == -1);
        v15 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      sub_1000054E8(v35, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
LABEL_44:
  *v3 = v8;
}

void sub_10001D0D8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];
  _OWORD v40[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005360(&qword_100114870);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_25;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v17 >= v36)
      break;
    v18 = (_QWORD *)(v5 + 64);
    v19 = *(_QWORD *)(v37 + 8 * v17);
    ++v13;
    if (!v19)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v36)
        goto LABEL_37;
      v19 = *(_QWORD *)(v37 + 8 * v13);
      if (!v19)
      {
        v20 = v17 + 2;
        if (v20 >= v36)
        {
LABEL_37:
          swift_release(v5);
          if ((v38 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v19 = *(_QWORD *)(v37 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v13 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_46;
            if (v13 >= v36)
              goto LABEL_37;
            v19 = *(_QWORD *)(v37 + 8 * v13);
            ++v20;
            if (v19)
              goto LABEL_24;
          }
        }
        v13 = v20;
      }
    }
LABEL_24:
    v11 = (v19 - 1) & v19;
    v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_25:
    v21 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v16);
    v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v16);
    if ((v38 & 1) != 0)
    {
      sub_1000054E8(v22, v40);
    }
    else
    {
      sub_1000052E0((uint64_t)v22, (uint64_t)v40);
      v23 = v21;
    }
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v26 = v25;
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v24, v26);
    v27 = Hasher._finalize()();
    swift_bridgeObjectRelease(v26);
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14) = v21;
    sub_1000054E8(v40, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v18 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v18, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v18 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

void sub_10001D410(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_100005360(a3);
  v40 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_43;
  v10 = 1 << *(_BYTE *)(v6 + 32);
  v39 = v6 + 64;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v6 + 64);
  v37 = v4;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v13 = v8 + 64;
  swift_retain(v6);
  v14 = 0;
  while (1)
  {
    if (v12)
    {
      v21 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v22 = v21 | (v14 << 6);
      goto LABEL_34;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v38)
      break;
    v24 = (_QWORD *)(v6 + 64);
    v25 = *(_QWORD *)(v39 + 8 * v23);
    ++v14;
    if (!v25)
    {
      v14 = v23 + 1;
      if (v23 + 1 >= v38)
        goto LABEL_36;
      v25 = *(_QWORD *)(v39 + 8 * v14);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v38)
        {
LABEL_36:
          swift_release(v6);
          v4 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v39 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v14 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v14 >= v38)
              goto LABEL_36;
            v25 = *(_QWORD *)(v39 + 8 * v14);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v14 = v26;
      }
    }
LABEL_33:
    v12 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v14 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(void **)(*(_QWORD *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      v35 = v34;
    }
    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    v15 = Hasher._finalize()();
    v16 = -1 << *(_BYTE *)(v9 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = (_QWORD *)(*(_QWORD *)(v9 + 48) + 16 * v19);
    *v20 = v33;
    v20[1] = v32;
    *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v19) = v34;
    ++*(_QWORD *)(v9 + 16);
  }
  swift_release(v6);
  v4 = v37;
  v24 = (_QWORD *)(v6 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v6 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_43:
  swift_release(v6);
  *v4 = v9;
}

void sub_10001D718(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  __int128 v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100005360(&qword_1001148E0);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v37 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v39 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v38 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    swift_retain(v5);
    v14 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v14 << 6);
      }
      else
      {
        v24 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v24 >= v38)
          goto LABEL_36;
        v25 = v39[v24];
        ++v14;
        if (!v25)
        {
          v14 = v24 + 1;
          if (v24 + 1 >= v38)
            goto LABEL_36;
          v25 = v39[v14];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v38)
            {
LABEL_36:
              swift_release(v5);
              v3 = v37;
              if ((v7 & 1) != 0)
              {
                v36 = 1 << *(_BYTE *)(v5 + 32);
                if (v36 >= 64)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v39[v26];
            if (!v25)
            {
              while (1)
              {
                v14 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v14 >= v38)
                  goto LABEL_36;
                v25 = v39[v14];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v14 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v14 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v40 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        v35 = (id)v40;
        swift_bridgeObjectRetain(*((_QWORD *)&v40 + 1));
      }
      Hasher.init(_seed:)(v41);
      String.hash(into:)(v41, v34, v33);
      v15 = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = v15 & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v40;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v5);
  *v3 = v9;
}

void sub_10001DA2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  sub_100005360(&qword_100114880);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_1000052E0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    sub_1000054E8(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10001DBE8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];

  v1 = v0;
  sub_100005360(&qword_100114870);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 32 * v15;
    sub_1000052E0(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v23);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    sub_1000054E8(v23, (_OWORD *)(*(_QWORD *)(v4 + 56) + v18));
    v19 = v17;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10001DDAC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD *v22;
  id v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  v2 = v1;
  sub_100005360(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    swift_release(v3);
    *v2 = v5;
    return;
  }
  v6 = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)v6 >= v3 + 64 + 8 * v8)
    memmove(v6, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v14)
        goto LABEL_26;
      v25 = *(_QWORD *)(v7 + 8 * v10);
      if (!v25)
        break;
    }
LABEL_25:
    v13 = (v25 - 1) & v25;
    v16 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_12:
    v17 = 16 * v16;
    v18 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v16);
    v19 = v18[1];
    v20 = 8 * v16;
    v21 = *(void **)(*(_QWORD *)(v3 + 56) + v20);
    v22 = (_QWORD *)(*(_QWORD *)(v5 + 48) + v17);
    *v22 = *v18;
    v22[1] = v19;
    *(_QWORD *)(*(_QWORD *)(v5 + 56) + v20) = v21;
    swift_bridgeObjectRetain(v19);
    v23 = v21;
  }
  v26 = v24 + 2;
  if (v26 >= v14)
    goto LABEL_26;
  v25 = *(_QWORD *)(v7 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v25 = *(_QWORD *)(v7 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10001DF54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  __int128 v25;

  v1 = v0;
  sub_100005360(&qword_1001148E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v25 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v25;
    swift_bridgeObjectRetain(v18);
    v21 = (id)v25;
    swift_bridgeObjectRetain(*((_QWORD *)&v25 + 1));
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

_OWORD *sub_10001E120(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10001CAA4(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100004F28(v17);
        return sub_1000054E8(a1, v17);
      }
      return sub_10001E3B8(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10001DA2C();
      goto LABEL_7;
    }
    sub_10001CE04(v13, a3 & 1);
    v19 = sub_10001CAA4(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_10001E3B8(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for HistoryRecordKey);
  __break(1u);
  return result;
}

void sub_10001E238(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_10001E244(a1, a2, a3, a4, &qword_1001148A8);
}

void sub_10001E244(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v7 = v5;
  v12 = *v5;
  v14 = sub_1000053A4(a2, a3);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a4 & 1) == 0)
  {
    sub_10001DDAC(a5);
LABEL_7:
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];

      *(_QWORD *)(v21 + 8 * v14) = a1;
      return;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v24 = (uint64_t *)(v20[6] + 16 * v14);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v20[7] + 8 * v14) = a1;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10001D410(v17, a4 & 1, a5);
  v22 = sub_1000053A4(a2, a3);
  if ((v18 & 1) == (v23 & 1))
  {
    v14 = v22;
    v20 = (_QWORD *)*v7;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_10001E3B8(unint64_t a1, char a2, _OWORD *a3, _QWORD *a4)
{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(_BYTE *)(a4[6] + a1) = a2;
  result = sub_1000054E8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v6 = a4[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a4[2] = v8;
  return result;
}

unint64_t sub_10001E41C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  __n128 v10;
  double v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  id v15;
  char v16;
  unint64_t v17;
  uint64_t v19;
  unint64_t v20;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
    v9 = a2;
  else
    v9 = sub_10001C278((uint64_t)_swiftEmptyArrayStorage, &qword_100114868);
  v10 = swift_bridgeObjectRetain(a2);
  Date.init()(v10);
  v11 = Date.timeIntervalSince(_:)(a1 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_appStartTime);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v12 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", v11);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  v20 = v9;
  sub_10001E244((uint64_t)v12, 0x6E6F697461727564, 0xE800000000000000, isUniquelyReferenced_nonNull_native, &qword_100114868);
  v14 = v20;
  swift_bridgeObjectRelease(0x8000000000000000);
  v15 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", 1);
  v16 = swift_isUniquelyReferenced_nonNull_native(v14);
  v20 = v14;
  sub_10001E244((uint64_t)v15, 0xD000000000000011, 0x80000001000D5A50, v16, &qword_100114868);
  v17 = v20;
  swift_bridgeObjectRelease(0x8000000000000000);
  return v17;
}

uint64_t sub_10001E5BC(uint64_t a1)
{
  uint64_t v1;

  return a1 & ~(-1 << *(_BYTE *)(v1 + 32));
}

uint64_t sub_10001E5E8()
{
  Swift::Int v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  String.hash(into:)(v2, 7368801, 0xE300000000000000);
  v0 = Hasher._finalize()();
  return sub_10001E5BC(v0);
}

uint64_t sub_10001E634(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10001E670(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

unint64_t sub_10001E6A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001148D8;
  if (!qword_1001148D8)
  {
    type metadata accessor for CFString(255);
    result = swift_getWitnessTable(&unk_1000CD598, v1);
    atomic_store(result, (unint64_t *)&qword_1001148D8);
  }
  return result;
}

uint64_t sub_10001E6EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE338);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 49);
}

void sub_10001E770(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  Class isa;
  NSString v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v2 = v1;
  v4 = a1 & 1;
  KeyPath = swift_getKeyPath(&unk_1000CE338);
  v68 = v1;
  v6 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, KeyPath, v6);
  swift_release(KeyPath);
  if (*(unsigned __int8 *)(v1 + 49) != v4)
  {
    v7 = swift_getKeyPath(&unk_1000CE338);
    v68 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v7, v6);
    swift_release(v7);
    v8 = *(unsigned __int8 *)(v1 + 49);
    v9 = swift_getKeyPath(&unk_1000CE2E8);
    v68 = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v9, v6);
    swift_release(v9);
    v10 = *(void **)(v1 + 40);
    v11 = swift_getKeyPath(&unk_1000CE450);
    v68 = (uint64_t)v10;
    v12 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
    v13 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v11, v12);
    swift_release(v11);
    v14 = v13[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed];

    if (v14 == 1)
    {
      v15 = swift_getKeyPath(&unk_1000CE338);
      __chkstk_darwin(v15, v16);
      v64 = v2;
      v65 = a1 & 1;
      v68 = v2;
      v17 = (char *)&type metadata for () + 8;
    }
    else
    {
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v26 = type metadata accessor for Logger(0);
      v27 = sub_100014124(v26, (uint64_t)qword_10011FEA8);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "unit conversion not allowed", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      v15 = swift_getKeyPath(&unk_1000CE338);
      __chkstk_darwin(v15, v31);
      v64 = v2;
      v65 = 0;
      v68 = v2;
      v17 = (char *)&type metadata for () + 8;
    }
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v68, v15, sub_10002C1E0, &v63, v17, v6);
    swift_release(v15);
    v32 = swift_getKeyPath(&unk_1000CE338);
    v68 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v32, v6);
    swift_release(v32);
    v33 = *(_QWORD *)(v2 + 16);
    if (*(_BYTE *)(v2 + 49) == 1)
    {
      v34 = swift_getKeyPath(&unk_1000CE2C0);
      v68 = v33;
      v35 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v34, v35);
      swift_release(v34);
      v36 = *(_QWORD *)(v33 + 24);
      v37 = swift_retain(v36);
      v38 = CalculateExpression.format.getter(v37);
      swift_release(v36);
      if (v38 == 2)
      {
        *(_BYTE *)(v2 + 32) = 0;
        sub_100020954(0);
      }
      sub_100021048(93);
      v39 = sub_1000AC150();
      v40 = swift_retain(v39);
      v41 = CalculateExpression.activeError.getter(v40);
      if (!v41)
      {
        swift_release(v39);
        goto LABEL_27;
      }
      swift_errorRelease(v41);
      swift_release(v39);
      v42 = sub_1000AC248();
    }
    else
    {
      v42 = sub_1000AC150();
    }
    v43 = v42;
    v44 = swift_retain(v42);
    v45 = CalculateExpression.expression.getter(v44);
    v47 = v46;
    swift_release(v43);
    sub_100021298(v45, v47, 0, 0, 0, 0);
    swift_bridgeObjectRelease(v47);
LABEL_27:
    v48 = swift_getKeyPath(&unk_1000CE338);
    v68 = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v48, v6);
    swift_release(v48);
    if (v8 != *(unsigned __int8 *)(v2 + 49))
    {
      if (qword_100113F10 != -1)
        swift_once(&qword_100113F10, sub_1000A8D50);
      v49 = (void *)qword_10011FED8;
      v50 = swift_getKeyPath(&unk_1000CE338);
      v68 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v68, v50, v6);
      swift_release(v50);
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v52 = String._bridgeToObjectiveC()();
      objc_msgSend(v49, "setValue:forKey:", isa, v52);

      if (*(_BYTE *)(v2 + 33) == 1)
      {
        v53 = *(_QWORD *)(v2 + 24);
        swift_retain(v2);
        sub_10002A33C(0, v2, v53);
        swift_release(v2);
        *(_BYTE *)(v2 + 32) = 1;
      }
    }
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v54 = type metadata accessor for Logger(0);
    sub_100014124(v54, (uint64_t)qword_10011FEA8);
    v55 = swift_retain_n(v2, 2);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = swift_slowAlloc(32, -1);
      v68 = v59;
      *(_DWORD *)v58 = 136446210;
      v60 = swift_getKeyPath(&unk_1000CE338);
      v66 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v66, v60, v6);
      swift_release(v60);
      if (*(_BYTE *)(v2 + 49))
        v61 = 1702195828;
      else
        v61 = 0x65736C6166;
      if (*(_BYTE *)(v2 + 49))
        v62 = 0xE400000000000000;
      else
        v62 = 0xE500000000000000;
      v66 = sub_100029918(v61, v62, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v62);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "unitConversionMode is on: %{public}s", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

    }
    else
    {

      swift_release_n(v2, 2);
    }
    return;
  }
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100014124(v18, (uint64_t)qword_10011FEA8);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    *(_DWORD *)v22 = 136446210;
    v68 = v23;
    if ((a1 & 1) != 0)
      v24 = 1702195828;
    else
      v24 = 0x65736C6166;
    if ((a1 & 1) != 0)
      v25 = 0xE400000000000000;
    else
      v25 = 0xE500000000000000;
    v66 = sub_100029918(v24, v25, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "No change to unit conversion mode: %{public}s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }

}

uint64_t sub_10001EFFC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7474754265646F6DLL;
  else
    v3 = 0x6E6F634965646F6DLL;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA00000000006E6FLL;
  if ((a2 & 1) != 0)
    v5 = 0x7474754265646F6DLL;
  else
    v5 = 0x6E6F634965646F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006E6FLL;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10001F0A4(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 1701736302;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x4949435341;
    else
      v4 = 0x65646F63696E55;
    if (v3 == 1)
      v5 = 0xE500000000000000;
    else
      v5 = 0xE700000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x4949435341;
      else
        v2 = 0x65646F63696E55;
      if (v6 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE700000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE400000000000000;
    v4 = 1701736302;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v4 != 1701736302)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_10001F1A4(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 12337;
    else
      v2 = 13873;
    v3 = 0xE200000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 12337;
      else
        v5 = 13873;
      v6 = 0xE200000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE100000000000000;
    v2 = 56;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE100000000000000;
  v5 = 56;
  if (v2 != 56)
  {
LABEL_15:
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v5, v6, 0);
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
  v6 = v3;
LABEL_16:
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10001F274(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10001F2BC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10001F330 + 4 * byte_1000CE104[a2]))(0x6669746E65696373);
}

uint64_t sub_10001F330(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6669746E65696373 && v1 == 0xEA00000000006369)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6669746E65696373, 0xEA00000000006369, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006369);
  return v2 & 1;
}

uint64_t sub_10001F3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_10001F48C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE2E8);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(id *)(v0 + 40);
}

id sub_10001F510@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE2E8);
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 40);
  *a2 = v6;
  return v6;
}

void sub_10001F59C(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE2E8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10002AF44, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_10001F650()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE360);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 48);
}

void sub_10001F6D4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE360);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 48);
}

double sub_10001F760(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE360);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002AF18, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_10001F808(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  KeyPath = swift_getKeyPath(&unk_1000CE360);
  v16 = v1;
  v4 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, KeyPath, v4);
  swift_release(KeyPath);
  sub_10001F274(*(_BYTE *)(v1 + 48));
  if ((v5 & 1) != 0)
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100014124(v6, (uint64_t)qword_10011FEA8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v16 = v11;
      *(_DWORD *)v10 = 136446210;
      LOBYTE(v15) = a1;
      v12 = String.init<A>(describing:)(&v15, &type metadata for CalculatorAppMode);
      v14 = v13;
      v15 = sub_100029918(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No change to current calculator mode: %{public}s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  else
  {
    sub_10001FA00(a1, 0);
  }
}

void sub_10001FA00(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[16];
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1000CE360);
  v60 = v2;
  v7 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v60, KeyPath, v7);
  swift_release(KeyPath);
  v54 = *(unsigned __int8 *)(v2 + 48);
  v8 = swift_getKeyPath(&unk_1000CE2E8);
  v60 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v60, v8, v7);
  swift_release(v8);
  v9 = *(id *)(v2 + 40);
  sub_1000558B0(a1);
  LOBYTE(v8) = v10;

  v11 = swift_getKeyPath(&unk_1000CE360);
  v56 = v3;
  v57 = v8;
  v60 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v60, v11, sub_10002C244, v55, (char *)&type metadata for () + 8, v7);
  swift_release(v11);
  if ((a2 & 1) != 0
    && (v12 = swift_getKeyPath(&unk_1000CE360),
        v60 = v3,
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v60, v12, v7),
        swift_release(v12),
        sub_10001F274(*(_BYTE *)(v3 + 48)),
        (v13 & 1) != 0))
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v14 = type metadata accessor for Logger(0);
    sub_100014124(v14, (uint64_t)qword_10011FEA8);
    v15 = swift_retain_n(v3, 2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v60 = v19;
      *(_DWORD *)v18 = 136446210;
      v20 = swift_getKeyPath(&unk_1000CE360);
      v58 = v3;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v58, v20, v7);
      swift_release(v20);
      LOBYTE(v58) = *(_BYTE *)(v3 + 48);
      v21 = String.init<A>(describing:)(&v58, &type metadata for CalculatorAppMode);
      v23 = v22;
      v58 = sub_100029918(v21, v22, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_release_n(v3, 2);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Mode set to: %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_release_n(v3, 2);
    }
    v25 = v54;
  }
  else
  {
    v24 = swift_getKeyPath(&unk_1000CE360);
    v60 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v60, v24, v7);
    swift_release(v24);
    v25 = v54;
    sub_10001F274(v54);
    if ((v26 & 1) != 0)
    {
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v27 = type metadata accessor for Logger(0);
      v28 = sub_100014124(v27, (uint64_t)qword_10011FEA8);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        v60 = v32;
        *(_DWORD *)v31 = 136446210;
        LOBYTE(v58) = v54;
        v33 = String.init<A>(describing:)(&v58, &type metadata for CalculatorAppMode);
        v35 = v34;
        v58 = sub_100029918(v33, v34, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
        swift_bridgeObjectRelease(v35);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "No change in current mode: %{public}s", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        v36 = v32;
        v25 = v54;
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v31, -1, -1);
      }

    }
    else
    {
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v37 = type metadata accessor for Logger(0);
      sub_100014124(v37, (uint64_t)qword_10011FEA8);
      v38 = swift_retain_n(v3, 2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(22, -1);
        v42 = swift_slowAlloc(64, -1);
        v60 = v42;
        *(_DWORD *)v41 = 136446466;
        LOBYTE(v58) = v54;
        v43 = String.init<A>(describing:)(&v58, &type metadata for CalculatorAppMode);
        v45 = v44;
        v58 = sub_100029918(v43, v44, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
        swift_bridgeObjectRelease(v45);
        *(_WORD *)(v41 + 12) = 2082;
        v46 = swift_getKeyPath(&unk_1000CE360);
        v58 = v3;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v58, v46, v7);
        swift_release(v46);
        LOBYTE(v58) = *(_BYTE *)(v3 + 48);
        v47 = String.init<A>(describing:)(&v58, &type metadata for CalculatorAppMode);
        v49 = v48;
        v58 = sub_100029918(v47, v48, &v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
        swift_release_n(v3, 2);
        swift_bridgeObjectRelease(v49);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Changed mode from: %{public}s to: %{public}s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        v50 = v41;
        v25 = v54;
        swift_slowDealloc(v50, -1, -1);

      }
      else
      {

        swift_release_n(v3, 2);
      }
    }
  }
  v51 = swift_getKeyPath(&unk_1000CE360);
  v60 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v60, v51, v7);
  swift_release(v51);
  sub_10001F274(v25);
  if ((v52 & 1) == 0)
  {
    if (qword_100113F10 != -1)
      swift_once(&qword_100113F10, sub_1000A8D50);
    v53 = swift_getKeyPath(&unk_1000CE360);
    v60 = v3;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v60, v53, v7);
    swift_release(v53);
    __asm { BR              X10 }
  }
  __asm { BR              X9 }
}

void sub_100020820(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE338);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 49);
}

double sub_1000208AC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE338);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002AED4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100020954(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  void *v42;
  Class isa;
  NSString v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v2 = v1;
  v4 = a1 & 1;
  v5 = *(_QWORD *)(v1 + 16);
  KeyPath = swift_getKeyPath(&unk_1000CE2C0);
  v54 = v5;
  v7 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(_QWORD *)(v5 + 24);
  v9 = swift_retain(v8);
  v10 = CalculateExpression.format.getter(v9);
  swift_release(v8);
  if ((v10 == 2) == v4)
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100014124(v21, (uint64_t)qword_10011FEA8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      *(_DWORD *)v25 = 136446210;
      v54 = v26;
      if ((a1 & 1) != 0)
        v27 = 1702195828;
      else
        v27 = 0x65736C6166;
      if ((a1 & 1) != 0)
        v28 = 0xE400000000000000;
      else
        v28 = 0xE500000000000000;
      v53 = sub_100029918(v27, v28, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No change to rpn mode mode: %{public}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      v29 = v26;
      goto LABEL_40;
    }
  }
  else
  {
    v11 = swift_getKeyPath(&unk_1000CE2E8);
    v54 = v2;
    v52 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v11, v52);
    swift_release(v11);
    v12 = *(void **)(v2 + 40);
    v13 = swift_getKeyPath(&unk_1000CE310);
    v54 = (uint64_t)v12;
    v14 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
    v15 = v12;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v13, v14);
    swift_release(v13);
    v16 = v15[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed];

    if (v16 == 1)
    {
      v17 = swift_getKeyPath(&unk_1000CE2C0);
      v54 = v5;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v17, v7);
      swift_release(v17);
      v18 = *(_QWORD *)(v5 + 24);
      if ((a1 & 1) != 0)
        v19 = 2;
      else
        v19 = 0;
      swift_retain(*(_QWORD *)(v5 + 24));
      v20 = v19;
    }
    else
    {
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_100014124(v30, (uint64_t)qword_10011FEA8);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "rpn not allowed", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = swift_getKeyPath(&unk_1000CE2C0);
      v54 = v5;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v35, v7);
      swift_release(v35);
      v18 = *(_QWORD *)(v5 + 24);
      swift_retain(v18);
      v20 = 0;
    }
    CalculateExpression.format.setter(v20);
    swift_release(v18);
    v36 = swift_getKeyPath(&unk_1000CE2C0);
    v54 = v5;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v36, v7);
    swift_release(v36);
    v37 = *(_QWORD *)(v5 + 24);
    v38 = swift_retain(v37);
    v39 = CalculateExpression.format.getter(v38);
    swift_release(v37);
    if (v39 == 2)
    {
      v40 = swift_getKeyPath(&unk_1000CE338);
      v54 = v2;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v54, v40, v52);
      v41 = swift_release(v40);
      if (*(_BYTE *)(v2 + 49) == 1)
      {
        *(_BYTE *)(v2 + 33) = 0;
        sub_10001E770(0, v41);
      }
    }
    if ((v10 == 2) != (v39 == 2))
    {
      if (qword_100113F10 != -1)
        swift_once(&qword_100113F10, sub_1000A8D50);
      v42 = (void *)qword_10011FED8;
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v44 = String._bridgeToObjectiveC()();
      objc_msgSend(v42, "setValue:forKey:", isa, v44);

      if (*(_BYTE *)(v2 + 32) == 1)
      {
        v45 = *(_QWORD *)(v2 + 24);
        swift_retain(v2);
        sub_10002A33C(0, v2, v45);
        swift_release(v2);
        *(_BYTE *)(v2 + 33) = 1;
      }
    }
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_100014124(v46, (uint64_t)qword_10011FEA8);
    v23 = Logger.logObject.getter(v47);
    v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v48))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      *(_DWORD *)v25 = 136446210;
      v54 = v49;
      if (v39 == 2)
        v50 = 1702195828;
      else
        v50 = 0x65736C6166;
      if (v39 == 2)
        v51 = 0xE400000000000000;
      else
        v51 = 0xE500000000000000;
      v53 = sub_100029918(v50, v51, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v23, v48, "RPN is on: %{public}s", v25, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      v29 = v49;
LABEL_40:
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
  }

}

double sub_100021048(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23;
  uint64_t v24;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 16);
  v5 = sub_1000AC150();
  swift_retain(v5);
  v6 = ((uint64_t (*)(void))CalculateExpression.rich.getter)();
  v7 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
  v8 = swift_release(v6);
  if ((v7 & 1) != 0)
  {
    swift_release(v5);
    v9 = 0;
  }
  else
  {
    v10 = CalculateExpression.rich.getter(v8);
    v11 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
    swift_release(v5);
    swift_release(v10);
    if ((v11 & 1) != 0)
    {
      v9 = 0;
    }
    else
    {
      KeyPath = swift_getKeyPath(&unk_1000CE3B0);
      v24 = v4;
      v13 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v13);
      swift_release(KeyPath);
      v9 = *(_BYTE *)(v4 + 41) ^ 1;
    }
  }
  if (a1 == 92 || a1 == 8)
  {
    v14 = swift_getKeyPath(&unk_1000CE428);
    v24 = v2;
    v15 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v14, v15);
    swift_release(v14);
    v9 &= *(_BYTE *)(v2 + 50) ^ 1;
  }
  v16 = swift_getKeyPath(&unk_1000CE428);
  v24 = v2;
  v17 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v16, v17);
  *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  v19 = v9 & 1;
  if (v19 != *(unsigned __int8 *)(v2 + 50))
  {
    v20 = swift_getKeyPath(&unk_1000CE428);
    __chkstk_darwin(v20, v21);
    v22[2] = v2;
    v23 = v19;
    v24 = v2;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v20, sub_10002B00C, v22, (char *)&type metadata for () + 8, v17);
    *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  }
  return result;
}

double sub_100021298(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  char v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v72;
  __n128 v73;
  _BYTE v74[16];
  uint64_t v75;
  char v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;

  v78 = a6;
  v79 = a5;
  v80 = a3;
  v10 = *(_QWORD *)(v6 + 16);
  KeyPath = swift_getKeyPath(&unk_1000CE3D8);
  v81 = v10;
  v12 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v81, KeyPath, v12);
  swift_release(KeyPath);
  if ((*(_BYTE *)(v10 + 40) & 1) == 0)
  {
    v13 = swift_getKeyPath(&unk_1000CE3D8);
    __chkstk_darwin(v13, v14);
    v75 = v10;
    v76 = 1;
    v81 = v10;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v81, v13, sub_10002AFC4, v74, (char *)&type metadata for () + 8, v12);
    swift_release(v13);
  }
  v15 = swift_getKeyPath(&unk_1000CE338);
  v81 = v6;
  v16 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v81, v15, v16);
  swift_release(v15);
  if (*(_BYTE *)(v6 + 49) == 1)
  {
    sub_1000A9F98(a1, a2);
    v17 = v80;
    if (!a4)
      goto LABEL_26;
    v18 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x2000000000000000) == 0)
      v18 = v80 & 0xFFFFFFFFFFFFLL;
    if (!v18)
      goto LABEL_26;
    swift_bridgeObjectRetain(a4);
    v19 = sub_1000AC248();
    v20 = swift_retain(v19);
    v21 = CalculateExpression.expression.getter(v20);
    v23 = v22;
    swift_release(v19);
    if (v21 == v17 && v23 == a4)
    {
      swift_bridgeObjectRelease(a4);
      v24 = v23;
    }
    else
    {
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v17, a4, 0);
      swift_bridgeObjectRelease(v23);
      if ((v38 & 1) == 0)
      {
        v42 = sub_1000AC248();
        swift_retain(v42);
        CalculateExpression.expression.setter(v17, a4, v43);
        swift_release(v42);
LABEL_26:
        v44 = swift_getKeyPath(&unk_1000CE400);
        v81 = v10;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v81, v44, v12);
        swift_release(v44);
        v45 = v79 & 1;
        if (*(_BYTE *)(v10 + 42) != (v79 & 1))
        {
          v46 = swift_getKeyPath(&unk_1000CE400);
          __chkstk_darwin(v46, v47);
          v75 = v10;
          v76 = v45;
          v81 = v10;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v81, v46, sub_10002AFE8, v74, (char *)&type metadata for () + 8, v12);
          swift_release(v46);
        }
        return sub_100021048(93);
      }
      v24 = a4;
    }
    swift_bridgeObjectRelease(v24);
    goto LABEL_26;
  }
  v77 = a1;
  if (a4)
  {
    v25 = HIBYTE(a2) & 0xF;
    if ((a2 & 0x2000000000000000) == 0)
      v25 = a1 & 0xFFFFFFFFFFFFLL;
    if (v25)
    {
      swift_bridgeObjectRetain(a2);
      v26 = sub_1000AC248();
      v27 = swift_retain(v26);
      v28 = CalculateExpression.expression.getter(v27);
      v29 = a2;
      v31 = v30;
      swift_release(v26);
      if (v28 == v77 && v31 == v29)
      {
        swift_bridgeObjectRelease_n(v29, 2);
      }
      else
      {
        v39 = v28;
        v40 = v77;
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v39, v31, v77, v29, 0);
        swift_bridgeObjectRelease(v31);
        if ((v41 & 1) != 0)
        {
          swift_bridgeObjectRelease(v29);
        }
        else
        {
          v48 = sub_1000AC248();
          swift_retain(v48);
          CalculateExpression.expression.setter(v40, v29, v49);
          swift_release(v48);
        }
      }
      a2 = v29;
    }
    v33 = a2;
    sub_1000A9F98(v80, a4);
    v50 = swift_getKeyPath(&unk_1000CE3B0);
    v81 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v81, v50, v12);
    swift_release(v50);
    if ((*(_BYTE *)(v10 + 41) & 1) == 0)
    {
      v51 = swift_getKeyPath(&unk_1000CE3B0);
      __chkstk_darwin(v51, v52);
      v75 = v10;
      v76 = 1;
      v81 = v10;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v81, v51, sub_10002C208, v74, (char *)&type metadata for () + 8, v12);
      swift_release(v51);
    }
    v53 = swift_getKeyPath(&unk_1000CE2C0);
    v81 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v81, v53, v12);
    swift_release(v53);
    v54 = *(_QWORD *)(v10 + 24);
    swift_retain(v54);
    CalculateExpression.inlineEvaluate()();
    swift_release(v54);
    v35 = v78;
  }
  else
  {
    v32 = a1;
    v33 = a2;
    sub_1000A9F98(v32, a2);
    v34 = swift_getKeyPath(&unk_1000CE3B0);
    v81 = v10;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v81, v34, v12);
    swift_release(v34);
    v35 = v78;
    if (*(_BYTE *)(v10 + 41) == 1)
    {
      v36 = swift_getKeyPath(&unk_1000CE3B0);
      __chkstk_darwin(v36, v37);
      v75 = v10;
      v76 = 0;
      v81 = v10;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v81, v36, sub_10002C208, v74, (char *)&type metadata for () + 8, v12);
      swift_release(v36);
    }
  }
  if ((v35 & 1) != 0)
  {
    v55 = sub_1000AC150();
    swift_retain(v55);
    v57 = CalculateExpression.rich.getter(v56);
    v58 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
    v59 = swift_release(v57);
    if ((v58 & 1) != 0)
    {
      v60 = v55;
LABEL_36:
      swift_release(v60);
      return sub_100021048(93);
    }
    v61 = CalculateExpression.rich.getter(v59);
    v62 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
    swift_release(v55);
    swift_release(v61);
    if ((v62 & 1) == 0)
    {
      sub_1000A8F1C(0);
      v63 = HIBYTE(v33) & 0xF;
      if ((v33 & 0x2000000000000000) == 0)
        v63 = v77 & 0xFFFFFFFFFFFFLL;
      if (v63)
      {
        swift_bridgeObjectRetain(v33);
        v64 = sub_1000AC248();
        v65 = swift_retain(v64);
        v66 = CalculateExpression.expression.getter(v65);
        v68 = v67;
        swift_release(v64);
        v69 = v77;
        if (v66 == v77 && v68 == v33)
        {
          swift_bridgeObjectRelease_n(v33, 2);
          return sub_100021048(93);
        }
        v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v77, v33, 0);
        swift_bridgeObjectRelease(v68);
        if ((v70 & 1) != 0)
        {
          swift_bridgeObjectRelease(v33);
          return sub_100021048(93);
        }
        v72 = sub_1000AC248();
        swift_retain(v72);
        CalculateExpression.expression.setter(v69, v33, v73);
        v60 = v72;
        goto LABEL_36;
      }
    }
  }
  return sub_100021048(93);
}

double sub_1000219C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  double result;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v22, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v7 = Strong;
    KeyPath = swift_getKeyPath(&unk_1000CE360);
    v21 = v7;
    v9 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, KeyPath, v9);
    swift_release(KeyPath);
    sub_10001FA00(*(_BYTE *)(v7 + 48), 0);
    v10 = swift_getKeyPath(&unk_1000CE338);
    v21 = v7;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v10, v9);
    swift_release(v10);
    if (*(_BYTE *)(v7 + 49) == 1)
    {
      v11 = swift_getKeyPath(&unk_1000CE450);
      v21 = a3;
      v12 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v11, v12);
      swift_release(v11);
      if ((*(_BYTE *)(a3
                     + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed) & 1) == 0)
        sub_10001E770(0);
    }
    v13 = *(_QWORD *)(v7 + 16);
    v14 = swift_getKeyPath(&unk_1000CE2C0);
    v21 = v13;
    v15 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v14, v15);
    swift_release(v14);
    v16 = *(_QWORD *)(v13 + 24);
    swift_retain(v16);
    v18 = CalculateExpression.format.getter(v17);
    swift_release(v16);
    if (v18 == 2)
    {
      v19 = swift_getKeyPath(&unk_1000CE310);
      v21 = a3;
      v20 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, v19, v20);
      swift_release(v19);
      if ((*(_BYTE *)(a3 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed) & 1) == 0)
        sub_100020954(0);
    }
    *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  }
  return result;
}

void sub_100021C28(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  uint64_t v15;

  v3 = a1 & 1;
  v4 = *(_QWORD *)(v1 + 16);
  KeyPath = swift_getKeyPath(&unk_1000CE2C0);
  v15 = v4;
  v6 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(_QWORD *)(v4 + 24);
  v8 = swift_retain(v7);
  LODWORD(KeyPath) = CalculateExpression.assumeDegrees.getter(v8) & 1;
  swift_release(v7);
  if ((_DWORD)KeyPath != (_DWORD)v3)
  {
    v9 = swift_getKeyPath(&unk_1000CE2C0);
    v15 = v4;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, v9, v6);
    swift_release(v9);
    v10 = *(_QWORD *)(v4 + 24);
    swift_retain(v10);
    CalculateExpression.assumeDegrees.setter(v3);
    swift_release(v10);
    v11 = swift_getKeyPath(&unk_1000CE478);
    v15 = v4;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v15, v11, v6);
    swift_release(v11);
    v12 = *(_QWORD *)(v4 + 32);
    swift_retain(v12);
    CalculateExpression.assumeDegrees.setter(v3);
    swift_release(v12);
    if (qword_100113F10 != -1)
      swift_once(&qword_100113F10, sub_1000A8D50);
    v13 = (void *)qword_10011FED8;
    v14 = String._bridgeToObjectiveC()();
    objc_msgSend(v13, "setBool:forKey:", a1 & 1, v14);

  }
}

double sub_100021DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSString v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[3];
  char v46;
  uint64_t v47;

  v1 = v0;
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v2 = qword_10011FF08;
  KeyPath = swift_getKeyPath(&unk_1000CE388);
  v47 = v2;
  v4 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v47, KeyPath, v4);
  swift_release(KeyPath);
  if ((*(_BYTE *)(v2 + 64) & 1) != 0)
  {
    v5 = *(_QWORD *)(v0 + 16);
    v6 = sub_1000AC150();
    swift_retain(v6);
    CalculateExpression.clear()();
    swift_release(v6);
    v7 = sub_1000AC248();
    swift_retain(v7);
    CalculateExpression.clear()();
    swift_release(v7);
    v8 = swift_getKeyPath(&unk_1000CE3B0);
    v47 = v5;
    v9 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v47, v8, v9);
    *(_QWORD *)&result = swift_release(v8).n128_u64[0];
    if (*(_BYTE *)(v5 + 41) == 1)
    {
      v11 = swift_getKeyPath(&unk_1000CE3B0);
      __chkstk_darwin(v11, v12);
      v45[2] = v5;
      v46 = 0;
      v47 = v5;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v47, v11, sub_10002AFA0, v45, (char *)&type metadata for () + 8, v9);
      *(_QWORD *)&result = swift_release(v11).n128_u64[0];
    }
  }
  else
  {
    if (qword_100113F10 != -1)
      swift_once(&qword_100113F10, sub_1000A8D50);
    v13 = (void *)qword_10011FED8;
    v14 = String._bridgeToObjectiveC()();
    v15 = objc_msgSend(v13, "stringForKey:", v14);

    if (v15)
    {
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      v19 = (void *)qword_10011FED8;
      v20 = String._bridgeToObjectiveC()();
      v21 = objc_msgSend(v19, "stringForKey:", v20);

      if (v21)
      {
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v24 = v23;

      }
      else
      {
        v22 = 0;
        v24 = 0;
      }
      v32 = swift_getKeyPath(&unk_1000CE338);
      v47 = v1;
      v33 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v47, v32, v33);
      swift_release(v32);
      if ((*(_BYTE *)(v1 + 49) & 1) == 0 && v24)
      {
        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRetain(v24);
        v16 = v22;
        v18 = v24;
      }
      v34 = sub_10001C104((uint64_t)_swiftEmptyArrayStorage);
      v35 = sub_100055618(v16, v18, v34);
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v34);
      v37 = CalculateExpression.expression.getter(v36);
      v39 = v38;
      swift_release(v35);
      if (v24)
      {
        swift_bridgeObjectRetain(v24);
        v40 = sub_10001C104((uint64_t)_swiftEmptyArrayStorage);
        v41 = sub_100055618(v22, v24, v40);
        swift_bridgeObjectRelease(v40);
        swift_bridgeObjectRelease(v24);
        v22 = CalculateExpression.expression.getter(v42);
        v44 = v43;
        swift_bridgeObjectRelease(v24);
        swift_release(v41);
      }
      else
      {
        v44 = 0;
      }
      sub_100021298(v37, v39, v22, v44, 0, v24 != 0);
      swift_bridgeObjectRelease(v39);
      v31 = v44;
    }
    else
    {
      v25 = (void *)qword_10011FED8;
      v26 = String._bridgeToObjectiveC()();
      v27 = objc_msgSend(v25, "stringForKey:", v26);

      if (!v27)
        return result;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v30 = v29;

      sub_100021298(v28, v30, 0, 0, 0, 1);
      v31 = v30;
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(v31).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000222A8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE428);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 50);
}

void sub_10002232C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE428);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 50);
}

double sub_1000223B8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE428);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002C1CC, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100022460()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE6F0);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 51);
}

void sub_1000224E4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE6F0);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 51);
}

double sub_100022570(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE6F0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002C1F4, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100022618(uint64_t result, char a2)
{
  *(_BYTE *)(result + 51) = a2;
  return result;
}

uint64_t sub_100022620()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE518);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t sub_1000226A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 52) = a2;
  return result;
}

void sub_1000226AC()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1000CE360);
  v3 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v3, KeyPath, v2);
  swift_release(KeyPath);
  __asm { BR              X10 }
}

BOOL sub_10002274C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _BOOL8 result;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, v1 - 3836, 0x6D6D6172676F7270, 0xEA00000000007265, 0);
  swift_bridgeObjectRelease(v1 - 3836);
  result = 0;
  if ((v2 & 1) == 0)
  {
    v4 = *(_QWORD *)(v0 + 16);
    KeyPath = swift_getKeyPath(&unk_1000CE2C0);
    v10 = v4;
    v6 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v6);
    swift_release(KeyPath);
    v7 = *(_QWORD *)(v4 + 24);
    v8 = swift_retain(v7);
    v9 = CalculateExpression.format.getter(v8);
    swift_release(v7);
    return v9 != 2;
  }
  return result;
}

void sub_100022858()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;

  KeyPath = swift_getKeyPath(&unk_1000CE360);
  v3 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v3, KeyPath, v2);
  swift_release(KeyPath);
  __asm { BR              X10 }
}

uint64_t sub_100022904()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t KeyPath;
  uint64_t v6;

  v3 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, v1 - 3836, 0x6D6D6172676F7270, 0xEA00000000007265, 0);
  swift_bridgeObjectRelease(v1 - 3836);
  if ((v3 & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_1000CE360);
    v6 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
    swift_release(KeyPath);
    __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_100022B08()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  NSString v15;
  id v16;
  uint64_t v17;
  int v18;
  uint64_t v20;

  v0 = sub_100005360(&qword_100114A58);
  v2 = __chkstk_darwin(v0, v1);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CalculateExpression.Base(0, v2);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v20 - v12;
  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v14 = (void *)qword_10011FED8;
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "integerForKey:", v15);

  CalculateExpression.Base.init(rawValue:)(v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v13, v4, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v13, v5);
    v18 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v9, v5);
    if (v18 == enum case for CalculateExpression.Base.base8(_:))
    {
      v17 = 0;
LABEL_12:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
      return v17;
    }
    if (v18 != enum case for CalculateExpression.Base.base10(_:))
    {
      if (v18 == enum case for CalculateExpression.Base.base16(_:))
      {
        v17 = 2;
        goto LABEL_12;
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
    v17 = 1;
    goto LABEL_12;
  }
  sub_100004F48((uint64_t)v4, &qword_100114A58);
  return 2;
}

uint64_t sub_100022D20()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE4C8);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 64);
}

void sub_100022DA4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE4C8);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 64);
}

double sub_100022E30(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE4C8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002B0A8, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100022ED8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE298);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 65);
}

void sub_100022F5C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE298);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 65);
}

double sub_100022FE8(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE298);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002C230, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100023090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  KeyPath = swift_getKeyPath(&unk_1000CE2C0);
  v25 = v2;
  v4 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = swift_getKeyPath(&unk_1000CE4A0);
  v25 = v0;
  v7 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  swift_retain(v5);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v6, v7);
  v8 = swift_release(v6);
  CalculateExpression.engine.setter(*(_QWORD *)(v0 + 72), v8);
  swift_release(v5);
  v9 = swift_getKeyPath(&unk_1000CE478);
  v25 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v9, v4);
  swift_release(v9);
  v10 = *(_QWORD *)(v2 + 32);
  v11 = swift_getKeyPath(&unk_1000CE4A0);
  v25 = v0;
  swift_retain(v10);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v11, v7);
  v12 = swift_release(v11);
  CalculateExpression.engine.setter(*(_QWORD *)(v0 + 72), v12);
  swift_release(v10);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v13 = type metadata accessor for Logger(0);
  sub_100014124(v13, (uint64_t)qword_10011FEA8);
  v14 = swift_retain_n(v0, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v25 = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = swift_getKeyPath(&unk_1000CE4A0);
    v24 = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v19, v7);
    swift_release(v19);
    v24 = *(_QWORD *)(v0 + 72);
    type metadata accessor for CalculateEngine(0);
    v21 = String.init<A>(describing:)(&v24, v20);
    v23 = v22;
    v24 = sub_100029918(v21, v22, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "current engine: %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
}

uint64_t sub_1000233D8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CE4A0);
  v4 = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(_QWORD *)(v0 + 72);
}

void sub_10002345C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE4A0);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_QWORD *)(v3 + 72);
}

double sub_1000234E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE4A0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10002B08C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10002358C(uint64_t a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, __n128);
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for CalculateExpression.Base(0, a2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(v2 + 16);
  KeyPath = swift_getKeyPath(&unk_1000CE2C0);
  v24 = v9;
  v11 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(_QWORD *)(v9 + 24);
  v13 = swift_retain(v12);
  CalculateExpression.base.getter(v13);
  swift_release(v12);
  v14 = sub_100005178(&qword_100114A50, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression.Base, (uint64_t)&protocol conformance descriptor for CalculateExpression.Base);
  LOBYTE(v12) = dispatch thunk of static Equatable.== infix(_:_:)(v8, a1, v4, v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if ((v12 & 1) == 0)
  {
    v16 = swift_getKeyPath(&unk_1000CE2C0);
    v24 = v9;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v16, v11);
    v17 = swift_release(v16);
    v18 = *(_QWORD *)(v9 + 24);
    v19 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
    v19(v8, a1, v4, v17);
    swift_retain(v18);
    CalculateExpression.base.setter(v8);
    swift_release(v18);
    v20 = swift_getKeyPath(&unk_1000CE478);
    v24 = v9;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v20, v11);
    v21 = swift_release(v20);
    v22 = *(_QWORD *)(v9 + 32);
    v19(v8, a1, v4, v21);
    swift_retain(v22);
    CalculateExpression.base.setter(v8);
    *(_QWORD *)&result = swift_release(v22).n128_u64[0];
  }
  return result;
}

void sub_100023790(char a1, char a2, NSObject *a3, NSObject *a4)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t KeyPath;
  NSObject *v49;
  NSObject *isa;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  double v64;
  unsigned __int8 v65;
  uint64_t v66;
  char v67;
  NSObject *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  IMP *p_imp;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  char *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  NSString v117;
  void *v118;
  NSString v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  NSObject *v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  char v133;
  __n128 v134;
  char *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  uint64_t v142;
  Class v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  NSString v149;
  id v150;
  uint64_t v151;
  char v152;
  void *v153;
  NSString v154;
  NSString v155;
  void *v156;
  NSString v157;
  uint64_t v158;
  void *v159;
  void *v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  Class v164;
  uint64_t v165;
  char *v166;
  __n128 v167;
  id v168;
  NSString v169;
  id v170;
  id v171;
  NSString v172;
  id v173;
  NSString v174;
  id v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  NSObject *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  unint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  void *v195;
  void *v196;
  __n128 v197;
  Swift::String v198;
  Swift::String v199;
  Swift::String v200;
  Swift::String v201;
  Swift::String v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  NSObject *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  unint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  NSObject *v226;
  os_log_type_t v227;
  int v228;
  _BOOL4 v229;
  uint64_t v230;
  NSObject *v231;
  uint64_t v232;
  uint64_t v233;
  unint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  os_log_t v242;
  NSObject *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  NSObject *v256;
  NSObject *v257;
  void *v258;
  NSString v259;
  NSString v260;
  void *v261;
  uint64_t v262;
  NSString v263;
  NSString v264;
  NSObject *v265;
  char v266;
  _QWORD v267[2];
  os_log_t v268;
  NSObject *v269;
  NSObject *v270;
  NSObject *v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *p_isa;
  NSObject *v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  char *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  _BYTE v292[24];
  char v293;
  _BYTE v294[24];
  char v295;
  uint64_t v296;
  char v297[8];
  _QWORD v298[3];
  char v299[8];
  NSObject *v300;

  v5 = v4;
  v282 = type metadata accessor for Locale(0);
  v281 = *(_QWORD *)(v282 - 8);
  v11 = __chkstk_darwin(v282, v10);
  v277 = (char *)v267 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessibilityNotification.Announcement(0, v11);
  v289 = *(_QWORD *)(v13 - 8);
  v290 = v13;
  __chkstk_darwin(v13, v14);
  v288 = (char *)v267 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_100114A90);
  __chkstk_darwin(v16, v17);
  v286 = (char *)v267 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v279 = type metadata accessor for AttributedString.FormattingOptions(0);
  __chkstk_darwin(v279, v19);
  v280 = (char *)v267 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005360(&qword_100114A98);
  v23 = __chkstk_darwin(v21, v22);
  v278 = (char *)v267 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for String.LocalizationValue(0, v23);
  v27 = __chkstk_darwin(v25, v26);
  v283 = (char *)v267 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for String.LocalizationValue.StringInterpolation(0, v27);
  v31 = __chkstk_darwin(v29, v30);
  v33 = (char *)v267 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v287 = type metadata accessor for AttributedString(0, v31);
  v285 = *(_QWORD *)(v287 - 8);
  __chkstk_darwin(v287, v34);
  v284 = (char *)v267 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36, v37);
  v291 = (char *)v267 - v38;
  v39 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100113CA0 != -1)
    swift_once(&qword_100113CA0, sub_10004E68C);
  objc_msgSend(v39, "postNotificationName:object:", qword_10011FC48, 0);

  switch(a1)
  {
    case 8:
      KeyPath = swift_getKeyPath(&unk_1000CE338);
      v300 = v4;
      v49 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, KeyPath, v49);
      swift_release(KeyPath);
      isa = v4[2].isa;
      if (BYTE1(v4[6].isa) == 1)
      {
        v275 = v49;
        sub_1000A8F1C(1);
        if (a4)
        {
          swift_retain(a4);
          sub_1000A90EC();
          swift_release(a4);
        }
        v276 = sub_1000AC150();
        swift_retain(v276);
        v51 = sub_1000AC248();
        v52 = swift_getKeyPath(&unk_1000CE3D8);
        v300 = isa;
        v53 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
        swift_retain(v51);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v52, v53);
        swift_release(v52);
        if (LOBYTE(isa[5].isa) == 1)
        {
          if (a4)
          {
            v54 = sub_100047730();
            v270 = CalculateUnit.id.getter();
            v273 = v55;

            v56 = sub_1000478E8();
LABEL_21:
            v75 = v56;
            v271 = CalculateUnit.id.getter();
            p_isa = (_QWORD *)v76;

            goto LABEL_23;
          }
        }
        else if (a4)
        {
          v73 = sub_1000478E8();
          v270 = CalculateUnit.id.getter();
          v273 = v74;

          v56 = sub_100047730();
          goto LABEL_21;
        }
        v271 = 0;
        p_isa = 0;
        v270 = 0;
        v273 = 0;
      }
      else
      {
        v61 = sub_1000AC150();
        v62 = swift_retain(v61);
        v63 = (void *)CalculateExpression.result.getter(v62);
        *(_QWORD *)&v64 = swift_release(v61).n128_u64[0];
        if (v63)
        {
          v65 = objc_msgSend(v63, "isTrivial", v64);

          if ((v65 & 1) != 0)
            return;
        }
        v275 = v49;
        sub_1000A8F1C(0);
        v66 = swift_getKeyPath(&unk_1000CE478);
        v300 = isa;
        v67 = a1;
        v68 = a4;
        v69 = v33;
        v70 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v66, v70);
        swift_release(v66);
        v276 = (uint64_t)isa[4].isa;
        v71 = v276;
        v72 = swift_getKeyPath(&unk_1000CE2C0);
        v300 = isa;
        swift_retain(v71);
        v33 = v69;
        a4 = v68;
        a1 = v67;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v72, v70);
        swift_release(v72);
        v51 = (uint64_t)isa[3].isa;
        swift_retain(v51);
        v271 = 0;
        p_isa = 0;
        v270 = 0;
        v273 = 0;
      }
LABEL_23:
      v77 = swift_getKeyPath(&unk_1000CE338);
      v300 = v5;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v77, v275);
      swift_release(v77);
      if (BYTE1(v5[6].isa) == 1 && a4)
      {
        swift_retain(a4);
        if ((sub_100047AA0() & 1) != 0)
        {
          swift_bridgeObjectRelease(p_isa);
          swift_bridgeObjectRelease(v273);
          if (qword_100113F00 != -1)
            swift_once(&qword_100113F00, sub_1000A85AC);
          v79 = type metadata accessor for Logger(0);
          v80 = sub_100014124(v79, (uint64_t)qword_10011FEA8);
          v81 = Logger.logObject.getter(v80);
          v82 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v81, v82))
          {
            v83 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v83 = 0;
            _os_log_impl((void *)&_mh_execute_header, v81, v82, "User attempting to tap on equal while in unit conversion mode for currency and currency conversion being unavailable. Skipping saving current conversion to history.", v83, 2u);
            swift_slowDealloc(v83, -1, -1);
          }
          v272 = v51;

          v84 = swift_getKeyPath(&unk_1000CE6F0);
          v300 = v5;
          v85 = v275;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v84, v275);
          swift_release(v84);
          if ((BYTE3(v5[6].isa) & 1) == 0)
          {
            v104 = swift_getKeyPath(&unk_1000CE6F0);
            __chkstk_darwin(v104, v105);
            v265 = v5;
            v266 = 1;
            v300 = v5;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v300, v104, sub_10002C0A0, &v267[-4], (char *)&type metadata for () + 8, v85);
            swift_release(v104);
          }
          v106 = sub_1000AC248();
          swift_retain(v106);
          CalculateExpression.clear()();
          swift_release(v106);
          v107 = swift_getKeyPath(&unk_1000CE3B0);
          v300 = isa;
          v108 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v107, v108);
          swift_release(v107);
          if (BYTE1(isa[5].isa) == 1)
          {
            v109 = swift_getKeyPath(&unk_1000CE3B0);
            __chkstk_darwin(v109, v110);
            v265 = isa;
            v266 = 0;
            v300 = isa;
            ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v300, v109, sub_10002C208, &v267[-4], (char *)&type metadata for () + 8, v108);
            swift_release(a4);
            swift_release(v276);
            swift_release(v272);
            swift_release(v109);
          }
          else
          {
            swift_release(a4);
            swift_release(v276);
            swift_release(v272);
          }
          goto LABEL_52;
        }
        swift_release(a4);
      }
      v86 = CalculateExpression.activeError.getter(v78);
      p_imp = &stru_100111FF0.imp;
      if (v86 || (v86 = CalculateExpression.activeError.getter(0)) != 0)
      {
        swift_errorRelease(v86);
        swift_bridgeObjectRelease(v273);
        swift_bridgeObjectRelease(p_isa);
        if (qword_100113F00 != -1)
          swift_once(&qword_100113F00, sub_1000A85AC);
        v88 = type metadata accessor for Logger(0);
        sub_100014124(v88, (uint64_t)qword_10011FEA8);
        swift_retain_n(v276, 4);
        v89 = swift_retain_n(v51, 2);
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v90, (os_log_type_t)v91))
        {

          swift_release_n(v51, 2);
          swift_release_n(v276, 4);
LABEL_49:
          if (qword_100113F10 != -1)
            swift_once(&qword_100113F10, sub_1000A8D50);
          v116 = (void *)qword_10011FED8;
          v117 = String._bridgeToObjectiveC()();
          objc_msgSend(v116, "setObject:forKey:", 0, v117);

          v118 = (void *)qword_10011FED8;
          v119 = String._bridgeToObjectiveC()();
          objc_msgSend(v118, "setObject:forKey:", 0, v119);
          swift_release(v276);
          swift_release(v51);

          goto LABEL_52;
        }
        LODWORD(v275) = v91;
        v92 = swift_slowAlloc(22, -1);
        v93 = swift_slowAlloc(64, -1);
        p_isa = &v93->isa;
        v300 = v93;
        *(_DWORD *)v92 = 136315394;
        v94 = v276;
        v95 = CalculateExpression.debugDescription.getter(v93);
        v97 = v96;
        v296 = sub_100029918(v95, v96, (uint64_t *)&v300);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v297);
        swift_release_n(v94, 2);
        v98 = swift_bridgeObjectRelease(v97);
        *(_WORD *)(v92 + 12) = 2080;
        v272 = v51;
        v99 = CalculateExpression.activeError.getter(v98);
        if (v99)
        {
          v100 = v99;
          v101 = v292;
          v102 = &v293;
          v103 = v292;
        }
        else
        {
          v111 = CalculateExpression.activeError.getter(0);
          if (!v111)
          {
            v112 = 0;
            v114 = 0xE000000000000000;
            goto LABEL_48;
          }
          v100 = v111;
          v101 = v294;
          v102 = &v295;
          v103 = v294;
        }
        swift_getErrorValue(v100, v102, v103);
        v112 = Error.localizedDescription.getter(*((_QWORD *)v101 + 1), *((_QWORD *)v101 + 2));
        v114 = v113;
        swift_errorRelease(v100);
LABEL_48:
        v296 = sub_100029918(v112, v114, (uint64_t *)&v300);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v297);
        swift_release_n(v276, 2);
        v51 = v272;
        swift_release_n(v272, 2);
        swift_bridgeObjectRelease(v114);
        _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v275, "Could not solve expression: %s = %s", (uint8_t *)v92, 0x16u);
        v115 = (uint64_t)p_isa;
        swift_arrayDestroy(p_isa, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v115, -1, -1);
        swift_slowDealloc(v92, -1, -1);

        goto LABEL_49;
      }
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v224 = type metadata accessor for Logger(0);
      sub_100014124(v224, (uint64_t)qword_10011FEA8);
      swift_retain_n(v276, 2);
      v225 = swift_retain_n(v51, 2);
      v226 = Logger.logObject.getter(v225);
      v227 = static os_log_type_t.default.getter();
      v228 = v227;
      v229 = os_log_type_enabled(v226, v227);
      v272 = v51;
      if (v229)
      {
        v230 = swift_slowAlloc(22, -1);
        v231 = swift_slowAlloc(64, -1);
        v275 = v231;
        v300 = v231;
        *(_DWORD *)v230 = 136315394;
        v232 = v276;
        LODWORD(v269) = v228;
        v233 = CalculateExpression.debugDescription.getter(v231);
        v235 = v234;
        v296 = sub_100029918(v233, v234, (uint64_t *)&v300);
        v268 = v226;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v297);
        v236 = v232;
        p_imp = (IMP *)(&stru_100111FF0 + 16);
        swift_release_n(v236, 2);
        v237 = swift_bridgeObjectRelease(v235);
        *(_WORD *)(v230 + 12) = 2080;
        v267[1] = v230 + 14;
        v238 = v272;
        v239 = CalculateExpression.debugDescription.getter(v237);
        v241 = v240;
        v296 = sub_100029918(v239, v240, (uint64_t *)&v300);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v296, v297);
        swift_release_n(v238, 2);
        swift_bridgeObjectRelease(v241);
        v242 = v268;
        _os_log_impl((void *)&_mh_execute_header, v268, (os_log_type_t)v269, "Solved expression: %s = %s", (uint8_t *)v230, 0x16u);
        v243 = v275;
        swift_arrayDestroy(v275, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v243, -1, -1);
        swift_slowDealloc(v230, -1, -1);

      }
      else
      {

        swift_release_n(v51, 2);
        v244 = swift_release_n(v276, 2);
      }
      v275 = CalculateExpression.expression.getter(v244);
      v246 = v245;
      v269 = CalculateExpression.expression.getter(v275);
      v248 = v247;
      v249 = sub_1000AC150();
      v250 = swift_retain(v249);
      CalculateExpression.assumeDegrees.getter(v250);
      swift_release(v249);
      v265 = a4;
      v251 = v273;
      sub_10002B0E8(v275, v246, v269, v248, v270, v273, v271, (uint64_t)p_isa);
      swift_bridgeObjectRelease(v246);
      swift_bridgeObjectRelease(v248);
      v252 = swift_bridgeObjectRelease(v251);
      v253 = CalculateExpression.expression.getter(v252);
      v255 = v254;
      sub_100054F4C(v253, v254);
      v257 = v256;
      if (qword_100113F10 != -1)
        swift_once(&qword_100113F10, sub_1000A8D50);
      v258 = (void *)qword_10011FED8;
      v275 = v257;
      v259 = String._bridgeToObjectiveC()();
      v260 = String._bridgeToObjectiveC()();
      objc_msgSend(v258, (SEL)p_imp[451], v259, v260);

      v261 = (void *)qword_10011FED8;
      v262 = (uint64_t)p_isa;
      if (p_isa)
        v263 = String._bridgeToObjectiveC()();
      else
        v263 = 0;
      v264 = String._bridgeToObjectiveC()();
      objc_msgSend(v261, (SEL)p_imp[451], v263, v264);
      swift_bridgeObjectRelease(v255);
      swift_release(v276);
      swift_release(v272);
      swift_bridgeObjectRelease(v262);
      swift_bridgeObjectRelease(v275);
      swift_unknownObjectRelease(v263);

LABEL_52:
      sub_100021048(a1);
      v120 = swift_getKeyPath(&unk_1000CE338);
      v300 = v5;
      v121 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v120, v121);
      swift_release(v120);
      if (BYTE1(v5[6].isa) != 1)
        goto LABEL_62;
      if (!a4)
        goto LABEL_56;
      swift_retain(a4);
      if ((sub_100047AA0() & 1) != 0)
      {
        swift_release(a4);
LABEL_56:
        if (qword_100113F00 != -1)
          swift_once(&qword_100113F00, sub_1000A85AC);
        v122 = type metadata accessor for Logger(0);
        v123 = sub_100014124(v122, (uint64_t)qword_10011FEA8);
        v124 = Logger.logObject.getter(v123);
        v125 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v124, v125))
        {
          v126 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v126 = 0;
          _os_log_impl((void *)&_mh_execute_header, v124, v125, "Unable to recompute unit conversion due to currency conversion being unavailable.", v126, 2u);
          swift_slowDealloc(v126, -1, -1);
        }

      }
      else
      {
        sub_1000A90EC();
        swift_release(a4);
      }
LABEL_62:
      switch(a1)
      {
        case 1:
          goto LABEL_73;
        case 52:
          v130 = sub_1000AC150();
          swift_retain(v130);
          v132 = CalculateExpression.rich.getter(v131);
          v133 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
          v134 = swift_release(v132);
          if ((v133 & 1) != 0)
          {
            swift_release(v130);
          }
          else
          {
            v151 = CalculateExpression.rich.getter(v134);
            v152 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
            swift_release(v130);
            swift_release(v151);
            if ((v152 & 1) == 0)
              return;
          }
LABEL_73:
          if (qword_100113F10 != -1)
            swift_once(&qword_100113F10, sub_1000A8D50);
          v153 = (void *)qword_10011FED8;
          v154 = String._bridgeToObjectiveC()();
          v155 = String._bridgeToObjectiveC()();
          objc_msgSend(v153, "setObject:forKey:", v154, v155);

          v156 = (void *)qword_10011FED8;
          v157 = String._bridgeToObjectiveC()();
          objc_msgSend(v156, "setObject:forKey:", 0, v157);

          break;
        case 8:
          v127 = swift_getKeyPath(&unk_1000CE338);
          v300 = v5;
          ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v127, v121);
          swift_release(v127);
          if (BYTE1(v5[6].isa) == 1)
          {
            v128 = sub_1000AC150();
            swift_retain(v128);
            if (a4)
              v129 = sub_100047730();
            else
              v129 = 0;
            v158 = sub_1000254F8(v128, v129);
            v160 = v159;
            swift_release(v128);

            v161 = sub_1000AC150();
            swift_retain(v161);
            if (a4)
              v162 = sub_1000478E8();
            else
              v162 = 0;
            v194 = sub_1000254F8(v161, v162);
            v196 = v195;
            swift_release(v161);

            String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(28, 2, v197);
            v198._countAndFlagsBits = 0x202C7475706E49;
            v198._object = (void *)0xE700000000000000;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v198);
            v199._countAndFlagsBits = v158;
            v199._object = v160;
            String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v199);
            swift_bridgeObjectRelease(v160);
            v200._object = (void *)0x80000001000D5F90;
            v200._countAndFlagsBits = 0xD000000000000015;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v200);
            v201._countAndFlagsBits = v194;
            v201._object = v196;
            String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v201);
            swift_bridgeObjectRelease(v196);
            v202._countAndFlagsBits = 0;
            v202._object = (void *)0xE000000000000000;
            String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v202);
            v203 = v283;
            String.LocalizationValue.init(stringInterpolation:)(v33);
            v204 = v278;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v281 + 56))(v278, 1, 1, v282);
            v300 = _swiftEmptyArrayStorage;
            v205 = sub_100005178(&qword_100114AB0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions, (uint64_t)&protocol conformance descriptor for AttributedString.FormattingOptions);
            v206 = sub_100005360(&qword_100114AB8);
            v207 = sub_10002C04C();
            v208 = v280;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v300, v206, v207, v279, v205);
            LOWORD(v265) = 256;
            v209 = v291;
            AttributedString.init(localized:options:table:bundle:locale:comment:)(v203, v208, 0, 0, 0, v204, 0, 0, (_DWORD)v265);
            v210 = swift_getKeyPath(&unk_1000CE680);
            __chkstk_darwin(v210, v211);
            v265 = v212;
            v213 = swift_getKeyPath(&unk_1000CE6B0);
            v214 = enum case for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority.high(_:);
            v215 = type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority(0);
            v216 = *(_QWORD *)(v215 - 8);
            v217 = v286;
            (*(void (**)(char *, uint64_t, uint64_t))(v216 + 104))(v286, v214, v215);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v216 + 56))(v217, 0, 1, v215);
            v218 = sub_10002BF70();
            AttributedString.subscript.setter(v217, v213, v218);
            v219 = v285;
            v220 = v284;
            v221 = v287;
            (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v284, v209, v287);
            v222 = v288;
            AccessibilityNotification.Announcement.init(_:)(v220);
            v223 = v290;
            _AccessibilityNotifications.post()();
            (*(void (**)(char *, uint64_t))(v289 + 8))(v222, v223);
            (*(void (**)(char *, uint64_t))(v219 + 8))(v209, v221);
          }
          else
          {
            v135 = v283;
            v136 = String.LocalizationValue.init(stringLiteral:)(0x202C746C75736552, 0xEA00000000004025);
            v137 = v277;
            static Locale.current.getter(v136);
            String.init(localized:table:bundle:locale:comment:)(v135, 0, 0, 0, v137, 0, 0, 256);
            v139 = v138;
            v140 = v5[2].isa;
            v141 = swift_getKeyPath(&unk_1000CE2C0);
            v300 = v140;
            v142 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
            ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v141, v142);
            swift_release(v141);
            v143 = v140[3].isa;
            v144 = swift_retain(v143);
            v145 = CalculateExpression.activeError.getter(v144);
            swift_release(v143);
            if (v145)
            {
              swift_getErrorValue(v145, v299, v298);
              Error.localizedDescription.getter(v298[1], v298[2]);
              v147 = v146;
              v148 = objc_allocWithZone((Class)NSAttributedString);
              v149 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v147);
              v150 = objc_msgSend(v148, "initWithString:", v149);

              swift_errorRelease(v145);
            }
            else
            {
              sub_10000A5A8(0, &qword_100114AA0, NSAttributedString_ptr);
              v163 = swift_getKeyPath(&unk_1000CE2C0);
              v300 = v140;
              ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v163, v142);
              swift_release(v163);
              v164 = v140[3].isa;
              v165 = swift_retain(v164);
              v166 = v291;
              CalculateExpression.accessibilityMathEquationDescription.getter(v165);
              v167 = swift_release(v164);
              v150 = (id)NSAttributedString.init(_:)(v166, v167);
            }
            v168 = objc_allocWithZone((Class)NSMutableAttributedString);
            swift_bridgeObjectRetain(v139);
            v169 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v139);
            v170 = objc_msgSend(v168, "initWithString:", v169);

            v171 = objc_allocWithZone((Class)NSString);
            v172 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v139);
            v173 = objc_msgSend(v171, "initWithString:", v172);

            v174 = String._bridgeToObjectiveC()();
            v175 = objc_msgSend(v173, "rangeOfString:", v174);
            v177 = v176;

            objc_msgSend(v170, "replaceCharactersInRange:withAttributedString:", v175, v177, v150);
            v178 = v170;
            v179 = v291;
            AttributedString.init(_:)();
            v180 = swift_getKeyPath(&unk_1000CE680);
            __chkstk_darwin(v180, v181);
            v265 = v182;
            v183 = swift_getKeyPath(&unk_1000CE6B0);
            v184 = enum case for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority.high(_:);
            v185 = type metadata accessor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute.AnnouncementPriority(0);
            v186 = *(_QWORD *)(v185 - 8);
            v187 = v286;
            (*(void (**)(char *, uint64_t, uint64_t))(v186 + 104))(v286, v184, v185);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v186 + 56))(v187, 0, 1, v185);
            v188 = sub_10002BF70();
            AttributedString.subscript.setter(v187, v183, v188);
            v189 = v285;
            v190 = v284;
            v191 = v287;
            (*(void (**)(char *, char *, uint64_t))(v285 + 16))(v284, v179, v287);
            v192 = v288;
            AccessibilityNotification.Announcement.init(_:)(v190);
            v193 = v290;
            _AccessibilityNotifications.post()();

            (*(void (**)(char *, uint64_t))(v289 + 8))(v192, v193);
            (*(void (**)(char *, uint64_t))(v189 + 8))(v179, v191);
          }
          break;
      }
      return;
    case 10:
      goto LABEL_52;
    case 27:
      if (a3)
      {
        v57 = swift_getKeyPath(&unk_1000CE718);
        v300 = a3;
        v58 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v57, v58);
        swift_release(v57);
        v300 = a3;
        v59 = swift_getKeyPath(&unk_1000CE718);
        ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v300, v59, v58);
        swift_release(v59);
        BYTE1(a3[2].isa) = (BYTE1(a3[2].isa) & 1) == 0;
        v300 = a3;
        v60 = swift_getKeyPath(&unk_1000CE718);
        ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v300, v60, v58);
        swift_release(v60);
      }
      goto LABEL_52;
    case 46:
    case 54:
      v40 = v4[2].isa;
      v41 = swift_getKeyPath(&unk_1000CE3B0);
      v300 = v40;
      v42 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v300, v41, v42);
      swift_release(v41);
      if (BYTE1(v40[5].isa) == 1)
      {
        v43 = swift_getKeyPath(&unk_1000CE3B0);
        __chkstk_darwin(v43, v44);
        v265 = v40;
        v266 = 0;
        v300 = v40;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v300, v43, sub_10002C208, &v267[-4], (char *)&type metadata for () + 8, v42);
        swift_release(v43);
      }
      v45 = sub_1000AC150();
      v46 = swift_retain(v45);
      v47 = CalculateExpression.assumeDegrees.getter(v46);
      swift_release(v45);
      sub_100021C28((v47 & 1) == 0);
      goto LABEL_52;
    default:
      sub_1000A9810(a1, a2 & 1);
      goto LABEL_52;
  }
}

uint64_t sub_1000254F8(int a1, id a2)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  char **v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;

  v2 = a2;
  if (a2)
  {
    v3 = objc_msgSend(a2, "category");
    if (v3 && (v4 = v3, v5 = objc_msgSend(v3, "unitType"), v4, v5 == (id)16))
      v6 = &selRef_name;
    else
      v6 = &selRef_displayName;
    v7 = objc_msgSend(v2, *v6);
    v2 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v9 = v8;

  }
  else
  {
    v9 = 0;
  }
  v25 = 8241;
  v26 = 0xE200000000000000;
  if (v9)
    v10 = v2;
  else
    v10 = 0;
  if (!v9)
    v9 = 0xE000000000000000;
  v11 = v9;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v9);
  v12._countAndFlagsBits = 10282;
  v12._object = (void *)0xE200000000000000;
  String.append(_:)(v12);
  v14._countAndFlagsBits = CalculateExpression.expression.getter(v13);
  object = v14._object;
  String.append(_:)(v14);
  v16 = swift_bridgeObjectRelease(object);
  v17 = CalculateExpression.options.getter(v16);
  v18 = (void *)evaluateError(_:options:)(v25, v26, v17);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v17);
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v19 = qword_10011FF08;
  KeyPath = swift_getKeyPath(&unk_1000CE740);
  v25 = v19;
  v21 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v21);
  objc_msgSend(v18, "setNumberFormatter:", *(_QWORD *)(v19 + 56), swift_release(KeyPath).n128_f64[0]);
  objc_msgSend(v18, "setAutoScientificNotation:", 0);
  v22 = objc_msgSend(v18, "formattedResult");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);

  return v23;
}

uint64_t sub_100025758(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *a2;
  v5 = *a1;
  v6 = v2;
  v3 = sub_100005360(&qword_100114AD0);
  return dispatch thunk of static Equatable.== infix(_:_:)(&v6, &v5, v3, &protocol witness table for AnyKeyPath) & 1;
}

double sub_1000257B0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1000CE4F0);
  v4[0] = v0;
  v2 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 80, v4, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80)).n128_u64[0];
  return result;
}

uint64_t sub_10002584C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1 + 80, v6, 1, 0);
  v4 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000258B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  v1 = v0 + OBJC_IVAR____TtC10Calculator19CalculatorViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100025928()
{
  return type metadata accessor for CalculatorViewModel(0);
}

uint64_t type metadata accessor for CalculatorViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100114918;
  if (!qword_100114918)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorViewModel);
  return result;
}

uint64_t sub_10002596C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[17];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_1000CE208;
  v4[3] = &unk_1000CE208;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = &unk_1000CE220;
  v4[6] = &unk_1000CE208;
  v4[7] = &unk_1000CE208;
  v4[8] = &unk_1000CE208;
  v4[9] = &unk_1000CE238;
  v4[10] = &unk_1000CE208;
  v4[11] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[12] = &unk_1000CE250;
  v4[13] = &unk_1000CE250;
  v4[14] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[15] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[16] = *(_QWORD *)(result - 8) + 64;
    return swift_updateClassMetadata2(a1, 256, 17, v4, a1 + 80);
  }
  return result;
}

void sub_100025A44(char a1, __n128 a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for CalculateExpression.Base(0, a2);
  __chkstk_darwin(v3, v4);
  __chkstk_darwin(v5, v6);
  __asm { BR              X10 }
}

uint64_t sub_100025B08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[4];

  v4 = v1 - 3836;
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, v1 - 3836, 0x6D6D6172676F7270, 0xEA00000000007265, 0);
  swift_bridgeObjectRelease(v4);
  v6 = v5 & 1;
  KeyPath = swift_getKeyPath(&unk_1000CE4A0);
  *(_QWORD *)(v3 - 88) = v0;
  v8 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v3 - 88, KeyPath, v8);
  v9 = swift_release(KeyPath);
  if (*(_QWORD *)(v0 + 72) != v6)
  {
    v10 = swift_getKeyPath(&unk_1000CE4A0);
    *(_QWORD *)(v3 - 112) = v2;
    __chkstk_darwin(v10, v11);
    v13[2] = v0;
    v13[3] = v6;
    *(_QWORD *)(v3 - 88) = v0;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v3 - 88, v10, sub_10002B08C, v13, (char *)&type metadata for () + 8, v8);
    v9 = swift_release(v10);
  }
  return ((uint64_t (*)(__n128))((char *)sub_100025C98
                                         + 4 * byte_1000CE130[*(_QWORD *)(v3 - 104)]))(v9);
}

uint64_t sub_100025C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  __n128 v8;
  uint64_t KeyPath;
  __n128 v10;
  double v11;

  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, 0xEA00000000006369, 0x6D6D6172676F7270, 0xEA00000000007265, 0);
  swift_bridgeObjectRelease(0xEA00000000006369);
  if ((v7 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1000CE4C8);
    *(_QWORD *)(v6 - 88) = v0;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v6 - 88, KeyPath, v5);
    v10 = swift_release(KeyPath);
    (*(void (**)(uint64_t, _QWORD, uint64_t, __n128))(v3 + 104))(v4, *(unsigned int *)*(&off_100108EA8 + *(char *)(v0 + 64)), v1, v10);
    v8.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v2, v4, v1);
  }
  else
  {
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for CalculateExpression.Base.base10(_:), v1);
  }
  v11 = sub_10002358C(v2, v8);
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(v3 + 8))(v2, v1, v11);
}

double sub_100025DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  double result;
  _QWORD v80[3];
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;

  if (!a1)
    return result;
  v3 = v2;
  v6 = a1 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  v92 = a1;
  KeyPath = swift_getKeyPath(&unk_1000CE540);
  v8 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  swift_retain(a1);
  v87 = v8;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, KeyPath, v8);
  swift_release(KeyPath);
  v9 = swift_getKeyPath(&unk_1000CE540);
  v89 = a1;
  v10 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v11 = sub_100013E20();
  v86 = v10;
  PersistentModel.getValue<A>(forKey:)(v9, v10, v11);
  swift_release(v9);
  v12 = v93;
  v84 = v6;
  v85 = a2;
  if (!v93)
    goto LABEL_10;
  v92 = v89;
  v13 = swift_getKeyPath(&unk_1000CE630);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v13, v87);
  swift_release(v13);
  v14 = swift_getKeyPath(&unk_1000CE630);
  PersistentModel.getValue<A>(forKey:)(v14, v86, v11);
  swift_release(v14);
  v15 = v93;
  if (!v93)
  {
LABEL_9:
    swift_bridgeObjectRelease(v12);
LABEL_10:
    v27 = swift_getKeyPath(&unk_1000CE338);
    v92 = v3;
    v28 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v27, v28);
    swift_release(v27);
    if (*(_BYTE *)(v3 + 49) == 1)
      sub_10001E770(0);
    goto LABEL_18;
  }
  if (!a2)
  {
    swift_bridgeObjectRelease(v12);
    v12 = v15;
    goto LABEL_9;
  }
  v16 = *(_QWORD *)(a2 + 16);
  v17 = swift_getKeyPath(&unk_1000CE658);
  v92 = v16;
  v18 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
  v19 = a2;
  v20 = v18;
  swift_retain(v19);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v17, v20);
  swift_release(v17);
  v21 = *(id *)(v16 + 16);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  v23 = objc_msgSend(v21, "findUnitWithName:", v22);

  if (!v23)
  {
    swift_bridgeObjectRelease(v15);
LABEL_14:
    v26 = v85;
    goto LABEL_15;
  }
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v25 = objc_msgSend(v21, "findUnitWithName:", v24);

  if (!v25)
  {

    goto LABEL_14;
  }
  v26 = v85;
  sub_100047C34(v23);
  sub_100047FC8(v25);

LABEL_15:
  v29 = swift_getKeyPath(&unk_1000CE338);
  v92 = v3;
  v30 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v29, v30);
  swift_release(v29);
  if ((*(_BYTE *)(v3 + 49) & 1) == 0)
    sub_10001E770(1);
  swift_release(v26);

LABEL_18:
  v92 = v89;
  v31 = swift_getKeyPath(&unk_1000CE568);
  v83 = v3;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v31, v87);
  swift_release(v31);
  v32 = swift_getKeyPath(&unk_1000CE568);
  PersistentModel.getValue<A>(forKey:)(v32, v86, &protocol witness table for String);
  swift_release(v32);
  v33 = v92;
  v34 = v93;
  v35 = sub_10001C104((uint64_t)_swiftEmptyArrayStorage);
  v36 = sub_100055618(v33, v34, v35);
  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v35);
  v92 = v89;
  v37 = swift_getKeyPath(&unk_1000CE590);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v37, v87);
  swift_release(v37);
  v38 = swift_getKeyPath(&unk_1000CE590);
  PersistentModel.getValue<A>(forKey:)(v38, v86, &protocol witness table for String);
  swift_release(v38);
  v39 = v92;
  v40 = v93;
  v41 = sub_10001C104((uint64_t)_swiftEmptyArrayStorage);
  v42 = sub_100055618(v39, v40, v41);
  swift_bridgeObjectRelease(v40);
  v43 = swift_bridgeObjectRelease(v41);
  v44 = v36;
  v45 = CalculateExpression.expression.getter(v43);
  v47 = v46;
  v88 = v42;
  v48 = CalculateExpression.expression.getter(v45);
  v50 = v49;
  v92 = v89;
  v51 = swift_getKeyPath(&unk_1000CE5B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v51, v87);
  swift_release(v51);
  v52 = swift_getKeyPath(&unk_1000CE5B8);
  v53 = v89;
  PersistentModel.getValue<A>(forKey:)(v52, v86, &protocol witness table for Bool);
  swift_release(v52);
  LODWORD(v52) = v92;
  v54 = sub_10004E75C();
  sub_100021298(v45, v47, v48, v50, v52, (v54 & 1) == 0);
  swift_bridgeObjectRelease(v47);
  swift_bridgeObjectRelease(v50);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v55 = type metadata accessor for Logger(0);
  sub_100014124(v55, (uint64_t)qword_10011FEA8);
  swift_retain_n(v44, 2);
  v56 = swift_retain_n(v88, 2);
  v57 = Logger.logObject.getter(v56);
  v58 = static os_log_type_t.default.getter();
  v82 = v44;
  if (os_log_type_enabled(v57, v58))
  {
    v59 = swift_slowAlloc(22, -1);
    v60 = swift_slowAlloc(64, -1);
    v92 = v60;
    *(_DWORD *)v59 = 136315394;
    v61 = CalculateExpression.debugDescription.getter(v60);
    v63 = v62;
    v90 = sub_100029918(v61, v62, &v92);
    v64 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
    swift_release_n(v44, 2);
    v65 = swift_bridgeObjectRelease(v63);
    *(_WORD *)(v59 + 12) = 2080;
    v66 = CalculateExpression.debugDescription.getter(v65);
    v68 = v67;
    v90 = sub_100029918(v66, v67, &v92);
    v69 = v64;
    v53 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
    swift_release_n(v69, 2);
    swift_bridgeObjectRelease(v68);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Restored expression from history: %s = %s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v59, -1, -1);

  }
  else
  {

    swift_release_n(v88, 2);
    swift_release_n(v44, 2);
  }
  v92 = v53;
  v70 = swift_getKeyPath(&unk_1000CE5E0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v70, v87);
  swift_release(v70);
  v71 = swift_getKeyPath(&unk_1000CE5E0);
  PersistentModel.getValue<A>(forKey:)(v71, v86, &protocol witness table for Bool);
  swift_release(v71);
  sub_100021C28(v92);
  v72 = swift_getKeyPath(&unk_1000CE338);
  v92 = v3;
  v73 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v72, v73);
  swift_release(v72);
  if (*(_BYTE *)(v3 + 49) == 1 && v85)
  {
    v74 = swift_getKeyPath(&unk_1000CE608);
    v92 = v85;
    v75 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
    swift_retain(v85);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v92, v74, v75);
    if (objc_msgSend(*(id *)(v85 + 32), "unitType", swift_release(v74).n128_f64[0], v82) == (id)16)
      sub_1000A90EC();
    swift_release(v85);
  }
  v76 = sub_100026774();
  v77 = swift_getKeyPath(&unk_1000CE518);
  __chkstk_darwin(v77, v78);
  v80[2] = v3;
  v81 = v76;
  v92 = v3;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v92, v77, sub_10002BF18, v80, (char *)&type metadata for () + 8, v73);
  swift_release(v53);
  swift_release(v82);
  swift_release(v88);
  *(_QWORD *)&result = swift_release(v77).n128_u64[0];
  return result;
}

uint64_t sub_100026774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  KeyPath = swift_getKeyPath(&unk_1000CE2C0);
  v12 = v2;
  v4 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, KeyPath, v4);
  swift_release(KeyPath);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = swift_retain(v5);
  v7 = CalculateExpression.format.getter(v6);
  swift_release(v5);
  if (v7 == 2)
    return 4;
  v9 = swift_getKeyPath(&unk_1000CE338);
  v12 = v1;
  v10 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, v9, v10);
  swift_release(v9);
  if (*(_BYTE *)(v1 + 49) != 1)
    return 0;
  v11 = swift_getKeyPath(&unk_1000CE3D8);
  v12 = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v12, v11, v4);
  swift_release(v11);
  if (*(_BYTE *)(v2 + 40))
    return 1;
  else
    return 2;
}

void sub_1000268DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  NSString v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSString v41;
  NSString v42;
  uint64_t v43;
  void *v44;
  NSString v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  NSString v50;
  NSString v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  Class isa;
  NSString v56;
  uint64_t v57;
  uint64_t v58;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 16);
  v3 = sub_1000AC150();
  swift_retain(v3);
  v5 = CalculateExpression.activeError.getter(v4);
  if (v5)
  {
    swift_errorRelease(v5);
    swift_release(v3);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    swift_release(v3);
    KeyPath = swift_getKeyPath(&unk_1000CE2C0);
    v58 = v2;
    v9 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v58, KeyPath, v9);
    swift_release(KeyPath);
    v10 = *(_QWORD *)(v2 + 24);
    swift_retain(v10);
    v6 = CalculateExpression.expression.getter(v11);
    v7 = v12;
    swift_release(v10);
  }
  v13 = swift_getKeyPath(&unk_1000CE338);
  v58 = v1;
  v14 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v58, v13, v14);
  swift_release(v13);
  if ((*(_BYTE *)(v1 + 49) & 1) != 0
    || (v15 = swift_getKeyPath(&unk_1000CE3B0),
        v58 = v2,
        v16 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90), ObservationRegistrar.access<A, B>(_:keyPath:)(&v58, v15, v16), swift_release(v15), *(_BYTE *)(v2 + 41) == 1))
  {
    v17 = swift_getKeyPath(&unk_1000CE478);
    v58 = v2;
    v18 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v58, v17, v18);
    swift_release(v17);
    v19 = *(_QWORD *)(v2 + 32);
    swift_retain(v19);
    v57 = CalculateExpression.expression.getter(v20);
    v22 = v21;
    swift_release(v19);
  }
  else
  {
    v57 = 0;
    v22 = 0;
  }
  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v23 = (void *)qword_10011FED8;
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v23, "stringForKey:", v24);

  if (v25)
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v28 = v27;

  }
  else
  {
    v26 = 0;
    v28 = 0;
  }
  v29 = (void *)qword_10011FED8;
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v29, "stringForKey:", v30);

  if (v31)
  {
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    if (v28)
      goto LABEL_15;
  }
  else
  {
    v32 = 0;
    v34 = 0;
    if (v28)
    {
LABEL_15:
      if (!v7)
      {
        swift_bridgeObjectRelease(v28);
        v35 = (void *)qword_10011FED8;
        v36 = String._bridgeToObjectiveC()();
        objc_msgSend(v35, "setValue:forKey:", 0, v36);

        goto LABEL_26;
      }
      if (v26 == v6 && v28 == v7)
      {
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v28);
        goto LABEL_26;
      }
      v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, v6, v7, 0);
      swift_bridgeObjectRelease(v28);
      if ((v37 & 1) != 0)
      {
        swift_bridgeObjectRelease(v7);
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
  if (v7)
  {
LABEL_25:
    sub_100054F4C(v6, v7);
    v39 = v38;
    swift_bridgeObjectRelease(v7);
    v40 = (void *)qword_10011FED8;
    v41 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    v42 = String._bridgeToObjectiveC()();
    objc_msgSend(v40, "setValue:forKey:", v41, v42);

  }
LABEL_26:
  if (!v34)
  {
    if (!v22)
      goto LABEL_37;
    v43 = v57;
LABEL_36:
    sub_100054F4C(v43, v22);
    v48 = v47;
    swift_bridgeObjectRelease(v22);
    v49 = (void *)qword_10011FED8;
    v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    v51 = String._bridgeToObjectiveC()();
    objc_msgSend(v49, "setValue:forKey:", v50, v51);

    goto LABEL_37;
  }
  if (!v22)
  {
    swift_bridgeObjectRelease(v34);
    v44 = (void *)qword_10011FED8;
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v44, "setValue:forKey:", 0, v45);

    goto LABEL_37;
  }
  v43 = v57;
  if (v32 != v57 || v34 != v22)
  {
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v34, v57, v22, 0);
    swift_bridgeObjectRelease(v34);
    if ((v46 & 1) != 0)
    {
      swift_bridgeObjectRelease(v22);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v34);
LABEL_37:
  v52 = (void *)qword_10011FED8;
  v53 = sub_1000AC150();
  swift_retain(v53);
  CalculateExpression.assumeDegrees.getter(v54);
  swift_release(v53);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v56 = String._bridgeToObjectiveC()();
  objc_msgSend(v52, "setValue:forKey:", isa, v56);

}

void sub_100026ED0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint8_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  _BOOL4 v69;
  uint8_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t KeyPath;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;

  v2 = type metadata accessor for UUID(0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for CalculateExpression.Base(0, v4);
  v106 = *(_QWORD *)(v7 - 8);
  v107 = v7;
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for URL(0, v9);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v109 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v105 = (char *)&v97 - v18;
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v97 - v21;
  v23 = sub_100005360(&qword_100114A70);
  v25 = __chkstk_darwin(v23, v24);
  v27 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for URLComponents(0, v25);
  v29 = *(_QWORD *)(v28 - 8);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v97 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = a1;
  URLComponents.init(url:resolvingAgainstBaseURL:)(a1, 0, v31);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
  {
    sub_100004F48((uint64_t)v27, &qword_100114A70);
    v34 = v12;
LABEL_18:
    v71 = v109;
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v72 = type metadata accessor for Logger(0);
    sub_100014124(v72, (uint64_t)qword_10011FEA8);
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v71, v110, v34);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(12, -1);
      v77 = swift_slowAlloc(32, -1);
      v112 = v77;
      *(_DWORD *)v76 = 136315138;
      v78 = sub_100005178(&qword_100114A78, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v34, v78);
      v81 = v80;
      v111 = sub_100029918(v79, v80, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
      swift_bridgeObjectRelease(v81);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v71, v34);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Couldn't handle the url: %s", v76, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v71, v34);
    }

    return;
  }
  v101 = v6;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v33, v27, v28);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v100 = v11;
  v35 = type metadata accessor for Logger(0);
  v36 = sub_100014124(v35, (uint64_t)qword_10011FEA8);
  v37 = v13;
  v38 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v39 = v12;
  v99 = v38;
  v40 = v38(v22, v110, v12);
  v104 = v36;
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc(12, -1);
    v98 = v28;
    v44 = (uint8_t *)v43;
    v45 = swift_slowAlloc(32, -1);
    v103 = v33;
    v46 = v45;
    v112 = v45;
    v102 = v29;
    *(_DWORD *)v44 = 136315138;
    v47 = sub_100005178(&qword_100114A78, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v12, v47);
    v50 = v49;
    v111 = sub_100029918(v48, v49, &v112);
    v29 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
    swift_bridgeObjectRelease(v50);
    v51 = *(void (**)(char *, uint64_t))(v37 + 8);
    v52 = v22;
    v53 = v39;
    v51(v52, v39);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s", v44, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    v54 = v46;
    v33 = v103;
    swift_slowDealloc(v54, -1, -1);
    v55 = v44;
    v28 = v98;
    swift_slowDealloc(v55, -1, -1);
  }
  else
  {
    v51 = *(void (**)(char *, uint64_t))(v37 + 8);
    v56 = v22;
    v53 = v12;
    v51(v56, v12);
  }

  v13 = v37;
  v57 = URLComponents.scheme.getter();
  v34 = v53;
  if (!v58)
    goto LABEL_17;
  v59 = v58;
  if (v57 == 1668047203 && v58 == 0xE400000000000000)
  {
    v60 = swift_bridgeObjectRelease(0xE400000000000000);
    goto LABEL_13;
  }
  v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v57, v58, 1668047203, 0xE400000000000000, 0);
  v60 = swift_bridgeObjectRelease(v59);
  if ((v61 & 1) == 0)
  {
LABEL_17:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v33, v28);
    goto LABEL_18;
  }
LABEL_13:
  v62 = URLComponents.queryItems.getter(v60);
  if (v62)
  {
    v63 = v29;
    v64 = *(_QWORD *)(v62 + 16);
    v65 = swift_bridgeObjectRelease(v62);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v66, v67))
    {
      v68 = v28;
      v69 = v64 == 0;
      v70 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v70 = 67109120;
      LODWORD(v112) = v69;
      v28 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, (char *)&v112 + 4);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "query: %{BOOL}d", v70, 8u);
      swift_slowDealloc(v70, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v63 + 8))(v33, v28);
    goto LABEL_18;
  }
  v103 = v33;
  URLComponents.host.getter();
  if (v82)
  {
    v102 = v29;
    KeyPath = swift_getKeyPath(&unk_1000CE360);
    v84 = v108;
    v112 = v108;
    v85 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v112, KeyPath, v85);
    swift_release(KeyPath);
    __asm { BR              X10 }
  }
  v86 = v105;
  v87 = v99(v105, v110, v53);
  v88 = Logger.logObject.getter(v87);
  v89 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v88, v89))
  {
    v90 = swift_slowAlloc(12, -1);
    v102 = v29;
    v91 = (uint8_t *)v90;
    v92 = swift_slowAlloc(32, -1);
    v112 = v92;
    v98 = v28;
    *(_DWORD *)v91 = 136315138;
    v93 = sub_100005178(&qword_100114A78, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v94 = dispatch thunk of CustomStringConvertible.description.getter(v34, v93);
    v96 = v95;
    v111 = sub_100029918(v94, v95, &v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112);
    swift_bridgeObjectRelease(v96);
    v51(v86, v34);
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "Invalid url: %s", v91, 0xCu);
    swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1, -1);
    swift_slowDealloc(v91, -1, -1);

    (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v98);
  }
  else
  {

    v51(v86, v53);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v103, v28);
  }
}

double sub_100027ABC(char a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  double result;
  _QWORD v13[3];

  KeyPath = swift_getKeyPath(&unk_1000CE4F0);
  v13[0] = v1;
  v4 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v13, KeyPath, v4);
  swift_release(KeyPath);
  v13[0] = v1;
  v5 = swift_getKeyPath(&unk_1000CE4F0);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v13, v5, v4);
  swift_release(v5);
  v6 = (_QWORD *)(v1 + 80);
  swift_beginAccess(v1 + 80, v13, 33, 0);
  v7 = *(_QWORD **)(v1 + 80);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
  *(_QWORD *)(v1 + 80) = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v7 = sub_100072018(0, v7[2] + 1, 1, v7);
    *v6 = v7;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    v7 = sub_100072018((_QWORD *)(v9 > 1), v10 + 1, 1, v7);
    *v6 = v7;
  }
  v7[2] = v10 + 1;
  *((_BYTE *)v7 + v10 + 32) = a1;
  swift_endAccess(v13);
  v13[0] = v1;
  v11 = swift_getKeyPath(&unk_1000CE4F0);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v13, v11, v4);
  *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  return result;
}

double sub_100027C44(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD v17[3];

  KeyPath = swift_getKeyPath(&unk_1000CE4F0);
  v17[0] = v1;
  v4 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, KeyPath, v4);
  swift_release(KeyPath);
  swift_beginAccess(v1 + 80, v17, 0, 0);
  v6 = *(_QWORD *)(v1 + 80);
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = a1;
    if (*(unsigned __int8 *)(v6 + 32) == a1)
    {
      v9 = 0;
LABEL_7:
      v13 = swift_getKeyPath(&unk_1000CE4F0);
      v16[0] = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v16, v13, v4);
      swift_release(v13);
      v16[0] = v1;
      v14 = swift_getKeyPath(&unk_1000CE4F0);
      ObservationRegistrar.willSet<A, B>(_:keyPath:)(v16, v14, v4);
      swift_release(v14);
      swift_beginAccess(v1 + 80, v16, 33, 0);
      sub_10000ECB0(v9);
      swift_endAccess(v16);
      v16[0] = v1;
      v15 = swift_getKeyPath(&unk_1000CE4F0);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(v16, v15, v4);
      *(_QWORD *)&result = swift_release(v15).n128_u64[0];
    }
    else
    {
      v9 = 0;
      v10 = v6 + 33;
      v11 = v7 - 1;
      while (v11 != v9)
      {
        v12 = *(unsigned __int8 *)(v10 + v9++);
        if (v12 == v8)
          goto LABEL_7;
      }
    }
  }
  return result;
}

uint64_t sub_100027DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v5 + 88) = a5;
  *(_QWORD *)(v5 + 16) = a4;
  v6 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v5 + 24) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 48) = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  *(_QWORD *)(v5 + 56) = v9;
  *(_QWORD *)(v5 + 64) = v10;
  return swift_task_switch(sub_100027E88, v9, v10);
}

uint64_t sub_100027E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);

  v1 = static Duration.zero.getter();
  v3 = v2;
  ContinuousClock.init()();
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_100114AE8 + dword_100114AE8);
  v4 = (_QWORD *)swift_task_alloc(unk_100114AEC);
  *(_QWORD *)(v0 + 72) = v4;
  *v4 = v0;
  v4[1] = sub_100027F20;
  return v6(70000000000000000, 0, v1, v3, 0);
}

uint64_t sub_100027F20()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  v5 = *(_QWORD *)(*v1 + 32);
  v4 = *(_QWORD *)(*v1 + 40);
  v6 = *(_QWORD *)(*v1 + 24);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v7 = sub_100027FFC;
  else
    v7 = sub_100027FA8;
  return swift_task_switch(v7, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_100027FA8()
{
  uint64_t v0;
  uint64_t v1;
  unsigned __int8 v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(_BYTE *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 48));
  sub_100027C44(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100027FFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100028038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned __int8 v16;
  _QWORD v18[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100004F48(a1, &qword_1001142E0);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v15 = 0;
      return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9);
  v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v14 = v13;
  swift_unknownObjectRelease(v9);
  if (!(v14 | v12))
    goto LABEL_6;
  v18[0] = 0;
  v18[1] = 0;
  v15 = v18;
  v18[2] = v12;
  v18[3] = v14;
  return swift_task_create(v8, v15, (char *)&type metadata for () + 8, a2, a3);
}

void sub_10002816C(_QWORD *a1, NSObject *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  char v45;
  __n128 v46;
  uint64_t v47;
  char v48;
  void *v49;
  NSString v50;
  NSString v51;
  void *v52;
  NSString v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;

  v3 = v2;
  v6 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A418();
  if (v10 != 93)
  {
    v11 = v10;
    sub_100027ABC(v10);
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v9, 1, 1, v12);
    type metadata accessor for MainActor(0);
    v13 = swift_retain(v2);
    v14 = static MainActor.shared.getter(v13);
    v15 = swift_allocObject(&unk_100108E90, 41, 7);
    *(_QWORD *)(v15 + 16) = v14;
    *(_QWORD *)(v15 + 24) = &protocol witness table for MainActor;
    *(_QWORD *)(v15 + 32) = v3;
    *(_BYTE *)(v15 + 40) = v11;
    v16 = sub_100028038((uint64_t)v9, (uint64_t)&unk_100114AE0, v15);
    swift_release(v16);
  }
  v17 = type metadata accessor for CalculateExpression.Operation(0);
  v19 = static CalculateExpression.Operation.equals.getter(v18);
  v20 = static CalculateExpression.Operation.== infix(_:_:)(a1, v19);
  swift_release(v19);
  if ((v20 & 1) != 0)
  {
    sub_100023790(8, 0, 0, a2);
    return;
  }
  v21 = sub_10001A418();
  sub_100021048(v21);
  v22 = *(_QWORD *)(v3 + 16);
  KeyPath = swift_getKeyPath(&unk_1000CE2C0);
  v62 = (_QWORD *)v22;
  v24 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, KeyPath, v24);
  swift_release(KeyPath);
  v25 = *(_QWORD *)(v22 + 24);
  v26 = swift_retain(v25);
  v27 = CalculateExpression.format.getter(v26);
  swift_release(v25);
  if (v27 == 2)
    return;
  v28 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100113CA0 != -1)
    swift_once(&qword_100113CA0, sub_10004E68C);
  objc_msgSend(v28, "postNotificationName:object:", qword_10011FC48, 0);

  v29 = swift_getKeyPath(&unk_1000CE3B0);
  v62 = (_QWORD *)v22;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, v29, v24);
  v30 = swift_release(v29);
  if (*(_BYTE *)(v22 + 41) == 1)
  {
    v31 = *(_QWORD *)(v3 + 56);
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v33 = (_QWORD *)(v31 + 32);
      while (*v33 != *a1)
      {
        ++v33;
        if (!--v32)
          goto LABEL_15;
      }
      v62 = a1;
      v34 = static CalculateExpression.Operation.ee.getter(v30);
      v61 = v34;
      v35 = sub_100005178((unint64_t *)&qword_1001147A8, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression.Operation, (uint64_t)&protocol conformance descriptor for CalculateExpression.Operation);
      v36 = dispatch thunk of static Equatable.== infix(_:_:)(&v62, &v61, v17, v35);
      swift_release(v34);
      if ((v36 & 1) == 0)
      {
        v54 = sub_1000AC150();
        swift_retain(v54);
        CalculateExpression.clear()();
        swift_release(v54);
        v55 = sub_1000AC248();
        swift_retain(v55);
        CalculateExpression.clear()();
        swift_release(v55);
        v56 = swift_getKeyPath(&unk_1000CE3B0);
        v62 = (_QWORD *)v22;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, v56, v24);
        swift_release(v56);
        if (*(_BYTE *)(v22 + 41) == 1)
        {
          v57 = swift_getKeyPath(&unk_1000CE3B0);
          __chkstk_darwin(v57, v58);
          *(&v60 - 2) = v22;
          *((_BYTE *)&v60 - 8) = 0;
          v62 = (_QWORD *)v22;
          ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v62, v57, sub_10002C208, &v60 - 4, (char *)&type metadata for () + 8, v24);
          swift_release(v57);
        }
        v59 = sub_1000AC150();
        swift_retain(v59);
        CalculateExpression.update(_:)(a1);
        v30 = swift_release(v59);
        if (!a2)
          goto LABEL_19;
        goto LABEL_18;
      }
    }
LABEL_15:
    v37 = swift_getKeyPath(&unk_1000CE3B0);
    v62 = (_QWORD *)v22;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, v37, v24);
    v30 = swift_release(v37);
    if (*(_BYTE *)(v22 + 41) == 1)
    {
      v38 = swift_getKeyPath(&unk_1000CE3B0);
      __chkstk_darwin(v38, v39);
      *(&v60 - 2) = v22;
      *((_BYTE *)&v60 - 8) = 0;
      v62 = (_QWORD *)v22;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v62, v38, sub_10002C208, &v60 - 4, (char *)&type metadata for () + 8, v24);
      v30 = swift_release(v38);
    }
  }
  if (a2)
  {
LABEL_18:
    swift_retain(a2);
    sub_1000A90EC();
    v30 = swift_release(a2);
  }
LABEL_19:
  v40 = static CalculateExpression.Operation.delete.getter(v30);
  v41 = static CalculateExpression.Operation.== infix(_:_:)(a1, v40);
  swift_release(v40);
  if ((v41 & 1) == 0)
    return;
  v42 = sub_1000AC150();
  swift_retain(v42);
  v44 = CalculateExpression.rich.getter(v43);
  v45 = dispatch thunk of CalculateExpression.RichExpression.isEmpty.getter();
  v46 = swift_release(v44);
  if ((v45 & 1) != 0)
  {
    swift_release(v42);
  }
  else
  {
    v47 = CalculateExpression.rich.getter(v46);
    v48 = dispatch thunk of CalculateExpression.RichExpression.isZero.getter();
    swift_release(v42);
    swift_release(v47);
    if ((v48 & 1) == 0)
      return;
  }
  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v49 = (void *)qword_10011FED8;
  v50 = String._bridgeToObjectiveC()();
  v51 = String._bridgeToObjectiveC()();
  objc_msgSend(v49, "setObject:forKey:", v50, v51);

  v52 = (void *)qword_10011FED8;
  v53 = String._bridgeToObjectiveC()();
  objc_msgSend(v52, "setObject:forKey:", 0, v53);

}

Class sub_1000287D8(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSDictionary v5;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    sub_10000A5A8(0, &qword_100114A38, NSObject_ptr);
    v5.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5.super.isa = 0;
  }
  return v5.super.isa;
}

void sub_10002885C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000CE450, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed, a2);
}

double sub_100028870(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE450);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002B060, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100028918(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000CE310, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed, a2);
}

void sub_10002892C(uint64_t *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;

  v6 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v9 = v6;
  v8 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v8);
  swift_release(KeyPath);
  *a4 = *(_BYTE *)(v6 + *a3);
}

double sub_1000289C4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE310);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002AF28, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

id sub_100028A6C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE608);
  v8 = v3;
  v5 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 32);
  *a2 = v6;
  return v6;
}

void sub_100028AF8(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE608);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10002BF3C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_100028BAC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE2C0);
  v8 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(_QWORD *)(v3 + 24);
  *a2 = v6;
  return swift_retain(v6);
}

double sub_100028C3C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE2C0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  swift_retain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10002AF78, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

void sub_100028CF4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE3B0);
  v6 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 41);
}

double sub_100028D80(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE3B0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002C208, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100028E28(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE400);
  v6 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 42);
}

double sub_100028EB4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE400);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002C21C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

id sub_100028F5C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE740);
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 56);
  *a2 = v6;
  return v6;
}

void sub_100028FE8(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE740);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10002C0FC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

void sub_10002909C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CE388);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 64);
}

double sub_100029128(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CE388);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10002B01C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000291D0(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000291E0(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

unint64_t sub_100029214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100005360(&qword_100114870);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002BEA0(v7, (uint64_t)&v14);
    v8 = v14;
    result = sub_10002932C(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_1000054E8(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10002932C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_1000293AC(a1, v5);
}

unint64_t sub_1000293AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
      goto LABEL_22;
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) != 0)
      return v5;
    v15 = ~v4;
    v5 = (v5 + 1) & v15;
    if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) == 0)
      return v5;
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v17;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v16 == v18 && v9 == v19)
    {
LABEL_22:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v21);
    if ((v22 & 1) == 0)
    {
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v24;
          v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v23 == v25 && v9 == v26)
            break;
          v28 = v26;
          v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v9, v25, v26, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v28);
          if ((v29 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_22;
      }
    }
  }
  return v5;
}

uint64_t sub_100029598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_10002963C, 0, 0);
}

uint64_t sub_10002963C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100005178(&qword_100114AF0, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100005178(&qword_100114AF8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100029754;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100029754()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_100029800, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100029800()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002983C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_100005360(&qword_100114A60);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_100114320;
  else
    v2 = (uint64_t *)&unk_100114A68;
  return sub_100005360(v2);
}

uint64_t sub_100029888(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_1000298A8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;

  v6 = a4();
  v8 = v7;
  v9 = sub_100029918(v6, v7, a3);
  v10 = *a1 + 8;
  v12 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
  result = swift_bridgeObjectRelease(v8);
  *a1 = v10;
  return result;
}

uint64_t sub_100029918(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_1000299E8(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1000052E0((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1000052E0((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100004F28(v12);
  return v7;
}

uint64_t sub_1000299E8(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100029BA0(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100029BA0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100029C34(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100029E84(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100029E84(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100029C34(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100029DA8(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100029DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100005360(&qword_100114A40);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100029E0C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100029E84(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005360(&qword_100114A40);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_BYTE **sub_100029FD0(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

void sub_100029FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1000CE360);
  v33 = a1;
  v10 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  swift_retain(a1);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, KeyPath, v10);
  swift_release(KeyPath);
  v11 = *(unsigned __int8 *)(a1 + 48);
  v12 = swift_getKeyPath(&unk_1000CE338);
  v33 = a1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, v12, v10);
  swift_release(v12);
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 49);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = swift_getKeyPath(&unk_1000CE2C0);
  v33 = v13;
  v15 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, v14, v15);
  swift_release(v14);
  v16 = *(_QWORD *)(v13 + 24);
  v17 = swift_retain(v16);
  v18 = CalculateExpression.format.getter(v17);
  swift_release(v16);
  if ((_DWORD)v10)
    v19 = 256;
  else
    v19 = 0;
  *(_BYTE *)(a2 + 26) = v18 == 2;
  *(_WORD *)(a2 + 24) = v19 | v11;
  if (qword_100113F08 != -1)
    swift_once(&qword_100113F08, sub_1000A85CC);
  v20 = sub_100014124(v4, (uint64_t)qword_10011FEC0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v20, v4);
  v21 = swift_retain_n(a2, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v22, v23))
  {

    swift_release_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    goto LABEL_10;
  }
  v31 = v5;
  v24 = (uint8_t *)swift_slowAlloc(12, -1);
  v25 = swift_slowAlloc(32, -1);
  v33 = v25;
  *(_DWORD *)v24 = 136315138;
  if ((*(_WORD *)(a2 + 24) & 0xFF00) != 0x200)
  {
    v26 = v25;
    v27 = sub_1000BE398((*(unsigned __int16 *)(a2 + 24) | (*(unsigned __int8 *)(a2 + 26) << 16)) & 0x101FF);
    v29 = v28;
    v32 = sub_100029918(v27, v28, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "updated snapshot to: %s", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v4);
LABEL_10:
    swift_release(a1);
    return;
  }
  swift_release(a2);
  __break(1u);
}

double sub_10002A33C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  double result;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  NSString v28;
  void *v29;
  uint64_t v30;
  __n128 v31;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock[5];
  uint64_t v38;

  swift_bridgeObjectRetain(a1);
  swift_retain(a2);
  if (sub_10003DFE8())
  {
    if (qword_100113F08 != -1)
      swift_once(&qword_100113F08, sub_1000A85CC);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100014124(v6, (uint64_t)qword_10011FEC0);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Currently running in debug.  No events will be posted.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    swift_release(a2);
    swift_bridgeObjectRelease(a1);

  }
  else if ((*(_BYTE *)(a3 + 27) & 1) != 0
         && (v11 = *(unsigned __int16 *)(a3 + 24),
             v12 = v11 | (*(unsigned __int8 *)(a3 + 26) << 16),
             (v11 & 0xFF00) != 0x200))
  {
    v13 = swift_allocObject(&unk_100108DF8, 24, 7);
    *(_QWORD *)(v13 + 16) = a1;
    v14 = (unint64_t *)(v13 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain(a1);
    v16 = swift_retain(v15);
    v17 = sub_10001C784(v16, v12, a1);
    swift_release(v15);
    if (v17)
    {
      *v14 = v17;
      swift_bridgeObjectRelease(a1);
    }
    if (qword_100113F08 != -1)
      swift_once(&qword_100113F08, sub_1000A85CC);
    v18 = type metadata accessor for Logger(0);
    sub_100014124(v18, (uint64_t)qword_10011FEC0);
    v19 = swift_retain_n(v13, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(22, -1);
      osloga = (os_log_t)swift_slowAlloc(64, -1);
      aBlock[0] = (uint64_t)osloga;
      *(_DWORD *)v22 = 136315394;
      v35 = sub_100029918(0xD000000000000020, 0x80000001000D5CE0, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      *(_WORD *)(v22 + 12) = 2080;
      swift_beginAccess(v14, &v35, 0, 0);
      v23 = *v14;
      if (*v14)
      {
        sub_10000A5A8(0, &qword_100114A38, NSObject_ptr);
        v24 = swift_bridgeObjectRetain(v23);
        v25 = Dictionary.description.getter(v24);
        v27 = v26;
        swift_bridgeObjectRelease(v23);
      }
      else
      {
        v27 = 0xE300000000000000;
        v25 = 7104878;
      }
      v34 = sub_100029918(v25, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      swift_release_n(v13, 2);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Posting event (%s) to CoreAnalytics with payload: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(osloga, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(osloga, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_release_n(v13, 2);
    }
    v28 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_10002AF08;
    v38 = v13;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000287D8;
    aBlock[3] = (uint64_t)&unk_100108E10;
    v29 = _Block_copy(aBlock);
    v30 = v38;
    swift_retain(v13);
    v31 = swift_release(v30);
    AnalyticsSendEventLazy(v28, v29, v31);
    _Block_release(v29);

    sub_10003DC84();
    sub_100029FE0(a2, a3);
    swift_release(a2);
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&result = swift_release(v13).n128_u64[0];
  }
  else
  {
    sub_100029FE0(a2, a3);
    swift_release(a2);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

uint64_t sub_10002A800(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  NSString v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  char v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  NSString v33;
  id v34;
  char v35;
  void *v36;
  NSString v37;
  void *v38;
  NSString v39;
  void *v40;
  NSString v41;
  id v42;
  uint64_t v43;
  void *v44;
  void *v45;
  Swift::String v46;
  unint64_t v47;
  uint64_t KeyPath;
  uint64_t v49;
  uint64_t v50;
  _QWORD v52[3];
  char v53;
  char v54[9];
  _OWORD v55[2];
  _QWORD aBlock[3];
  void *v57;
  double (*v58)(uint64_t);
  uint64_t v59;
  Swift::String v60;

  v2 = v1;
  v4 = type metadata accessor for CalculatorExpressionManager(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v1 + 16) = sub_1000AB084();
  v5 = type metadata accessor for AnalyticsManager();
  v6 = swift_allocObject(v5, 28, 7);
  v7 = type metadata accessor for AnalyticsTimeStampInfo(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  Date.init()(v9);
  Date.init()(v10);
  *(_QWORD *)(v6 + 16) = v8;
  *(_DWORD *)(v6 + 24) = 512;
  *(_QWORD *)(v2 + 24) = v6;
  *(_WORD *)(v2 + 32) = 257;
  *(_DWORD *)(v2 + 48) = 0;
  *(_WORD *)(v2 + 52) = 6;
  v11 = sub_10002983C();
  v12 = swift_allocObject(v11, ((*(unsigned int *)(v11 + 48) + 7) & 0x1FFFFFFF8) + 32, *(unsigned __int16 *)(v11 + 52) | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1000CE770;
  *(_QWORD *)(v12 + 32) = type metadata accessor for CalculateExpression.LiteralOperation(0);
  *(_QWORD *)(v12 + 40) = type metadata accessor for CalculateExpression.ConstantOperation(0);
  *(_QWORD *)(v12 + 48) = type metadata accessor for CalculateExpression.RandOperation(0);
  *(_QWORD *)(v12 + 56) = type metadata accessor for CalculateExpression.DeleteOperation(0);
  *(_QWORD *)(v2 + 56) = v12;
  v13 = sub_100022B08();
  *(_WORD *)(v2 + 64) = v13;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = _swiftEmptyArrayStorage;
  ObservationRegistrar.init()(v13);
  *(_QWORD *)(v2 + 40) = a1;
  v14 = qword_100113F10;
  v15 = a1;
  if (v14 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v16 = (void *)qword_10011FED8;
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "stringForKey:", v17);

  if (v18)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v60._countAndFlagsBits = v19;
    v60._object = v21;
    v22 = sub_10004A0CC(v60);
    if (v22 == 4)
      v22 = 0;
  }
  else
  {
    v22 = 0;
  }
  sub_10001FA00(v22, 1);
  v23 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100113C98 != -1)
    swift_once(&qword_100113C98, sub_10004E658);
  v24 = qword_10011FC40;
  v25 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v26 = swift_allocObject(&unk_100108D80, 24, 7);
  swift_weakInit(v26 + 16, v2);
  v27 = swift_allocObject(&unk_100108DA8, 32, 7);
  *(_QWORD *)(v27 + 16) = v26;
  *(_QWORD *)(v27 + 24) = v15;
  v58 = sub_10002AE74;
  v59 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001F3E8;
  v57 = &unk_100108DC0;
  v28 = _Block_copy(aBlock);
  v29 = v59;
  v30 = v15;
  v31 = objc_msgSend(v23, "addObserverForName:object:queue:usingBlock:", v24, 0, v25, v28, swift_release(v29).n128_f64[0]);
  _Block_release(v28);
  swift_unknownObjectRelease(v31);

  v32 = (void *)qword_10011FED8;
  v33 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v32, "objectForKey:", v33);

  if (v34)
  {
    _bridgeAnyObjectToAny(_:)(v55, v34);
    swift_unknownObjectRelease(v34);
  }
  else
  {
    memset(v55, 0, sizeof(v55));
  }
  sub_100004E58((uint64_t)v55, (uint64_t)aBlock);
  if (!v57)
  {
    sub_100004F48((uint64_t)aBlock, &qword_100114A20);
    goto LABEL_17;
  }
  if (!swift_dynamicCast(v54, aBlock, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
  {
LABEL_17:
    v35 = 1;
    goto LABEL_18;
  }
  v35 = v54[0];
LABEL_18:
  sub_100021C28(v35);
  v36 = (void *)qword_10011FED8;
  v37 = String._bridgeToObjectiveC()();
  LOBYTE(v36) = objc_msgSend(v36, "BOOLForKey:", v37);

  sub_10001E770((char)v36);
  sub_100021DF0();
  v38 = (void *)qword_10011FED8;
  v39 = String._bridgeToObjectiveC()();
  LOBYTE(v38) = objc_msgSend(v38, "BOOLForKey:", v39);

  sub_100020954((char)v38);
  v40 = (void *)qword_10011FED8;
  v41 = String._bridgeToObjectiveC()();
  v42 = objc_msgSend(v40, "stringForKey:", v41);

  if (v42)
  {
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    v46._countAndFlagsBits = v43;
    v46._object = v45;
    v47 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100107A58, v46);
    swift_bridgeObjectRelease(v45);
    if (v47 <= 2)
    {
      KeyPath = swift_getKeyPath(&unk_1000CE298);
      __chkstk_darwin(KeyPath, v49);
      v52[2] = v2;
      v53 = v47;
      aBlock[0] = v2;
      v50 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(aBlock, KeyPath, sub_10002AE84, v52, (char *)&type metadata for () + 8, v50);
      swift_release(KeyPath);
    }
  }
  *(_BYTE *)(*(_QWORD *)(v2 + 24) + 27) = 1;
  return v2;
}

uint64_t sub_10002AE24()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002AE48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

double sub_10002AE74(uint64_t a1)
{
  uint64_t v1;

  return sub_1000219C4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_10002AE84()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 65) = *(_BYTE *)(v0 + 24);
}

void sub_10002AEA4(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000CE310, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed, a2);
}

void sub_10002AED4()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 49) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10002AEE4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002AF08()
{
  uint64_t v0;

  return sub_10003DF1C(v0);
}

void sub_10002AF18()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 48) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10002AF28()
{
  uint64_t v0;

  return sub_1000467D8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10002AF44()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = v2;
  v4 = v2;

}

uint64_t sub_10002AF78()
{
  uint64_t v0;

  return sub_1000AA198(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10002AFA0()
{
  uint64_t v0;

  return sub_1000AA454(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10002AFC4()
{
  uint64_t v0;

  return sub_1000AA44C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10002AFE8()
{
  uint64_t v0;

  return sub_1000AA4E0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10002B00C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 50) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10002B01C()
{
  uint64_t v0;

  return sub_1000BF964(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10002B038(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000CE450, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed, a2);
}

uint64_t sub_10002B060()
{
  uint64_t v0;

  return sub_100046780(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10002B08C()
{
  sub_10002B0B8();
}

void sub_10002B0A8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 64) = *(_BYTE *)(v0 + 24);
}

void sub_10002B0B8()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 16) + 72) = *(_QWORD *)(v0 + 24);
  sub_100023090();
}

double sub_10002B0E8(NSObject *a1, uint64_t a2, NSObject *a3, uint64_t a4, NSObject *a5, uint64_t a6, NSObject *a7, uint64_t a8)
{
  NSObject *v8;
  NSObject *v9;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  double result;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t KeyPath;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_log_t v66;
  NSObject *v67;
  uint64_t v68;

  v9 = v8;
  v65 = a8;
  v66 = a1;
  v16 = type metadata accessor for UUID(0);
  v63 = *(_QWORD *)(v16 - 8);
  v64 = v16;
  __chkstk_darwin(v16, v17);
  v62 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for GenericRecord(0);
  __chkstk_darwin(v61, v19);
  sub_1000226AC();
  if ((v20 & 1) != 0)
  {
    v59 = a2;
    v60 = a3;
    v56 = a5;
    v57 = a4;
    v58 = a6;
    v55 = a7;
    if (qword_100113980 != -1)
      swift_once(&qword_100113980, sub_10000AAEC);
    v21 = qword_10011F810;
    swift_retain(qword_10011F810);
    sub_100010B74();
    v23 = v22;
    swift_release(v21);
    if (!v23)
    {
LABEL_40:
      KeyPath = swift_getKeyPath(&unk_1000CE360);
      v67 = v9;
      v53 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, KeyPath, v53);
      swift_release(KeyPath);
      __asm { BR              X10 }
    }
    v67 = v23;
    v24 = swift_getKeyPath(&unk_1000CE568);
    v25 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, v24, v25);
    swift_release(v24);
    v26 = swift_getKeyPath(&unk_1000CE568);
    v27 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
    PersistentModel.getValue<A>(forKey:)(v26, v27, &protocol witness table for String);
    swift_release(v26);
    v28 = v68;
    if (v67 == v66 && v68 == v59)
    {
      swift_bridgeObjectRelease(v59);
    }
    else
    {
      v34 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v59, v67, v68, 0);
      swift_bridgeObjectRelease(v28);
      if ((v34 & 1) == 0)
        goto LABEL_39;
    }
    v67 = v23;
    v35 = swift_getKeyPath(&unk_1000CE590);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, v35, v25);
    swift_release(v35);
    v36 = swift_getKeyPath(&unk_1000CE590);
    PersistentModel.getValue<A>(forKey:)(v36, v27, &protocol witness table for String);
    swift_release(v36);
    v37 = v68;
    if (v67 == v60 && v68 == v57)
    {
      swift_bridgeObjectRelease(v57);
    }
    else
    {
      v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v57, v67, v68, 0);
      swift_bridgeObjectRelease(v37);
      if ((v38 & 1) == 0)
        goto LABEL_39;
    }
    v67 = v23;
    v39 = swift_getKeyPath(&unk_1000CE540);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, v39, v25);
    swift_release(v39);
    v40 = swift_getKeyPath(&unk_1000CE540);
    v41 = sub_100013E20();
    PersistentModel.getValue<A>(forKey:)(v40, v27, v41);
    swift_release(v40);
    v42 = v68;
    if (!v58)
    {
      if (v68)
        goto LABEL_32;
      goto LABEL_26;
    }
    if (v68)
    {
      if (v67 == v56 && v68 == v58)
      {
        swift_bridgeObjectRelease(v68);
LABEL_26:
        v67 = v23;
        v44 = swift_getKeyPath(&unk_1000CE630);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v67, v44, v25);
        swift_release(v44);
        v45 = swift_getKeyPath(&unk_1000CE630);
        PersistentModel.getValue<A>(forKey:)(v45, v27, v41);
        swift_release(v45);
        v42 = v68;
        if (v65)
        {
          if (v68)
          {
            if (v67 == v55 && v68 == v65)
            {
              swift_bridgeObjectRelease(v68);
LABEL_34:
              if (qword_100113F00 != -1)
                swift_once(&qword_100113F00, sub_1000A85AC);
              v47 = type metadata accessor for Logger(0);
              v48 = sub_100014124(v47, (uint64_t)qword_10011FEA8);
              v49 = Logger.logObject.getter(v48);
              v50 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v49, v50))
              {
                v51 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v51 = 0;
                _os_log_impl((void *)&_mh_execute_header, v49, v50, "Duplicate calculation performed, skipping adding existing entry to history list", v51, 2u);
                swift_slowDealloc(v51, -1, -1);
              }

              *(_QWORD *)&result = swift_release(v23).n128_u64[0];
              return result;
            }
            v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v65, v67, v68, 0);
            swift_bridgeObjectRelease(v42);
            if ((v46 & 1) != 0)
              goto LABEL_34;
          }
          goto LABEL_39;
        }
        if (!v68)
          goto LABEL_34;
LABEL_32:
        swift_release(v23);
        swift_bridgeObjectRelease(v42);
        goto LABEL_40;
      }
      v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v67, v68, 0);
      swift_bridgeObjectRelease(v42);
      if ((v43 & 1) != 0)
        goto LABEL_26;
    }
LABEL_39:
    swift_release(v23);
    goto LABEL_40;
  }
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100014124(v29, (uint64_t)qword_10011FEA8);
  v66 = (os_log_t)Logger.logObject.getter(v30);
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v31, "History not supported for current app settings", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  return result;
}

double sub_10002B9E8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  double result;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  NSString v26;
  void *v27;
  uint64_t v28;
  __n128 v29;
  NSObject *oslog;
  os_log_t osloga;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t aBlock[5];
  uint64_t v36;

  swift_bridgeObjectRetain(a1);
  swift_retain(a2);
  if (sub_10003DFE8())
  {
    if (qword_100113F08 != -1)
      swift_once(&qword_100113F08, sub_1000A85CC);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100014124(v6, (uint64_t)qword_10011FEC0);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Currently running in debug.  No events will be posted.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    swift_release(a2);
    swift_bridgeObjectRelease(a1);

  }
  else if ((*(_BYTE *)(a3 + 27) & 1) != 0 && *(unsigned __int8 *)(a3 + 25) << 8 != 512)
  {
    v11 = swift_allocObject(&unk_100108DF8, 24, 7);
    *(_QWORD *)(v11 + 16) = a1;
    v12 = (unint64_t *)(v11 + 16);
    v13 = *(_QWORD *)(a3 + 16);
    swift_bridgeObjectRetain(a1);
    swift_retain(v13);
    v15 = sub_10001E41C(v14, a1);
    swift_release(v13);
    if (v15)
    {
      *v12 = v15;
      swift_bridgeObjectRelease(a1);
    }
    if (qword_100113F08 != -1)
      swift_once(&qword_100113F08, sub_1000A85CC);
    v16 = type metadata accessor for Logger(0);
    sub_100014124(v16, (uint64_t)qword_10011FEC0);
    v17 = swift_retain_n(v11, 2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = swift_slowAlloc(22, -1);
      osloga = (os_log_t)swift_slowAlloc(64, -1);
      aBlock[0] = (uint64_t)osloga;
      *(_DWORD *)v20 = 136315394;
      v33 = sub_100029918(0xD00000000000001DLL, 0x80000001000D5F70, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      *(_WORD *)(v20 + 12) = 2080;
      swift_beginAccess(v12, &v33, 0, 0);
      v21 = *v12;
      if (*v12)
      {
        sub_10000A5A8(0, &qword_100114A38, NSObject_ptr);
        v22 = swift_bridgeObjectRetain(v21);
        v23 = Dictionary.description.getter(v22);
        v25 = v24;
        swift_bridgeObjectRelease(v21);
      }
      else
      {
        v25 = 0xE300000000000000;
        v23 = 7104878;
      }
      v32 = sub_100029918(v23, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_release_n(v11, 2);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Posting event (%s) to CoreAnalytics with payload: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(osloga, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(osloga, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      swift_release_n(v11, 2);
    }
    v26 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_10002AF08;
    v36 = v11;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000287D8;
    aBlock[3] = (uint64_t)&unk_100108E38;
    v27 = _Block_copy(aBlock);
    v28 = v36;
    swift_retain(v11);
    v29 = swift_release(v28);
    AnalyticsSendEventLazy(v26, v27, v29);
    _Block_release(v27);

    sub_10003DC84();
    sub_100029FE0(a2, a3);
    swift_release(a2);
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&result = swift_release(v11).n128_u64[0];
  }
  else
  {
    sub_100029FE0(a2, a3);
    swift_release(a2);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_10002BEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100114878);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_10002BF18()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 52) = *(_BYTE *)(v0 + 24);
}

void sub_10002BF3C()
{
  uint64_t v0;

  sub_1000484B8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_10002BF54()
{
  AttributeScopes.AccessibilityAttributes.accessibilitySpeechAnnouncementPriority.getter();
  __break(1u);
}

unint64_t sub_10002BF70()
{
  unint64_t result;

  result = qword_100114AA8;
  if (!qword_100114AA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute, &type metadata for AttributeScopes.AccessibilityAttributes.AnnouncementPriorityAttribute);
    atomic_store(result, (unint64_t *)&qword_100114AA8);
  }
  return result;
}

void sub_10002BFB4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;

  v2 = *a2;
  v3 = sub_10002BF70();
  AttributeDynamicLookup.subscript.getter(v2, v3);
  __break(1u);
}

uint64_t sub_10002BFD8()
{
  return 8;
}

uint64_t sub_10002BFE4(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t sub_10002BFEC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_10002BFFC()
{
  uint64_t v0;

  v0 = sub_100005360(&qword_100114AD0);
  return dispatch thunk of Hashable.hashValue.getter(v0, &protocol witness table for AnyKeyPath);
}

_QWORD *sub_10002C040(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

unint64_t sub_10002C04C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114AC0;
  if (!qword_100114AC0)
  {
    v1 = sub_100005608(&qword_100114AB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100114AC0);
  }
  return result;
}

void sub_10002C0A0()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 51) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10002C0B8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GenericRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10002C0FC()
{
  uint64_t v0;

  sub_10007E80C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10002C114()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10002C140(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_100114ADC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100013F04;
  return sub_100027DF0(a1, v4, v5, v6, v7);
}

void sub_10002C1CC()
{
  sub_10002B00C();
}

void sub_10002C1E0()
{
  sub_10002AED4();
}

void sub_10002C1F4()
{
  sub_10002C0A0();
}

uint64_t sub_10002C208()
{
  return sub_10002AFA0();
}

uint64_t sub_10002C21C()
{
  return sub_10002AFE8();
}

void sub_10002C230()
{
  sub_10002AE84();
}

void sub_10002C244()
{
  sub_10002AF18();
}

uint64_t destroy for InputAccessoryView(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(a1[13]);
  swift_bridgeObjectRelease(a1[15]);
  swift_bridgeObjectRelease(a1[17]);
  return swift_bridgeObjectRelease(a1[19]);
}

uint64_t initializeWithCopy for InputAccessoryView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v5;
  v7 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v17;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v8;
  v9 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v11 = *(_QWORD *)(a2 + 104);
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = v11;
  *(_QWORD *)(a1 + 112) = v10;
  v13 = *(_QWORD *)(a2 + 120);
  v12 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v13;
  *(_QWORD *)(a1 + 128) = v12;
  v14 = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v14;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 152) = v15;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v17);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t assignWithCopy for InputAccessoryView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v8);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_retain(v12);
  swift_release(v13);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v16 = *(_QWORD *)(a2 + 88);
  v17 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  v19 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 120);
  v21 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v22 = *(_QWORD *)(a2 + 136);
  v23 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v24 = *(_QWORD *)(a2 + 152);
  v25 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

__n128 initializeWithTake for InputAccessoryView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t assignWithTake for InputAccessoryView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v6);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 88);
  v10 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v9;
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v11 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 120);
  v13 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 136);
  v15 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v14;
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  v16 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for InputAccessoryView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InputAccessoryView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InputAccessoryView()
{
  return &type metadata for InputAccessoryView;
}

uint64_t sub_10002C724(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F5AFC, 1);
}

uint64_t sub_10002C734@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t OpaqueTypeConformance2;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  __n128 v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62[16];
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;

  v2 = v1;
  v61 = a1;
  v3 = type metadata accessor for PopoverAttachmentAnchor(0);
  v58 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  v5 = __chkstk_darwin(v3, v4);
  v56 = (uint64_t *)((char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for PlainButtonStyle(0, v5);
  v55 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100114B00);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100005360(&qword_100114B08);
  v60 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57, v16);
  v54 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_OWORD *)swift_allocObject(&unk_100108F88, 176, 7);
  v19 = v2[7];
  v18[7] = v2[6];
  v18[8] = v19;
  v20 = v2[9];
  v18[9] = v2[8];
  v18[10] = v20;
  v21 = v2[3];
  v18[3] = v2[2];
  v18[4] = v21;
  v22 = v2[5];
  v18[5] = v2[4];
  v18[6] = v22;
  v23 = v2[1];
  v18[1] = *v2;
  v18[2] = v23;
  v63 = v2;
  sub_10002D8D0(v2);
  v24 = sub_100005360(&qword_100114B10);
  v25 = sub_10002D994();
  v26 = Button.init(action:label:)(sub_10002D87C, v18, sub_10002D8C8, v62, v24, v25);
  PlainButtonStyle.init()(v26);
  v27 = sub_100008078(&qword_100114B88, &qword_100114B00, (uint64_t)&protocol conformance descriptor for Button<A>);
  v28 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  v53 = v7;
  View.buttonStyle<A>(_:)(v10, v11, v7, v27, v28);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v68 = *v2;
  v29 = sub_100005360(&qword_100113FF8);
  State.projectedValue.getter(&v64, v29);
  v31 = v64;
  v30 = v65;
  v32 = v66;
  v33 = (_OWORD *)swift_allocObject(&unk_100108FB0, 176, 7);
  v34 = v2[7];
  v33[7] = v2[6];
  v33[8] = v34;
  v35 = v2[9];
  v33[9] = v2[8];
  v33[10] = v35;
  v36 = v2[3];
  v33[3] = v2[2];
  v33[4] = v36;
  v37 = v2[5];
  v33[5] = v2[4];
  v33[6] = v37;
  v38 = v2[1];
  v33[1] = *v2;
  v33[2] = v38;
  v39 = sub_10002D8D0(v2);
  v40 = static Anchor.Source<A>.bounds.getter(v39);
  v41 = v56;
  *v56 = v40;
  v42 = v58;
  v43 = v59;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v58 + 104))(v41, enum case for PopoverAttachmentAnchor.rect(_:), v59);
  v64 = v11;
  v65 = v53;
  v66 = v27;
  v67 = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v45 = sub_10002DC64();
  v51 = OpaqueTypeConformance2;
  v46 = v32;
  v47 = v57;
  v48 = v54;
  View.popover<A>(isPresented:attachmentAnchor:content:)(v31, v30, v46, v41, sub_10002DC5C, v33, v57, &type metadata for UnitConversionPopoverView, v51, v45);
  swift_release(v30);
  swift_release(v33);
  v49 = swift_release(v31);
  (*(void (**)(uint64_t *, uint64_t, __n128))(v42 + 8))(v41, v43, v49);
  return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v48, v47);
}

uint64_t sub_10002CAC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t OpaqueTypeConformance2;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _OWORD v124[2];

  v122 = a2;
  v3 = sub_100005360(&qword_100114BA0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005360(&qword_100114BA8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100005360(&qword_100114BB0);
  __chkstk_darwin(v105, v11);
  v13 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100005360(&qword_100114BB8);
  __chkstk_darwin(v106, v14);
  v16 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100005360(&qword_100114BC0);
  __chkstk_darwin(v107, v17);
  v19 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100005360(&qword_100114BC8);
  __chkstk_darwin(v111, v20);
  v22 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100005360(&qword_100114B58);
  __chkstk_darwin(v110, v23);
  v25 = (char *)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100005360(&qword_100114B40);
  __chkstk_darwin(v113, v26);
  v109 = (char *)&v105 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v29);
  v112 = (char *)&v105 - v30;
  __chkstk_darwin(v31, v32);
  v114 = (char *)&v105 - v33;
  v34 = sub_100005360(&qword_100114BD0);
  v35 = *(_QWORD *)(v34 - 8);
  v120 = v34;
  v121 = v35;
  __chkstk_darwin(v34, v36);
  v115 = (char *)&v105 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100005360(&qword_100114B38);
  __chkstk_darwin(v38, v39);
  v116 = (char *)&v105 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_100005360(&qword_100114B28);
  __chkstk_darwin(v119, v41);
  v108 = (uint64_t)&v105 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100005360(&qword_100114B10);
  v44 = __chkstk_darwin(v118, v43);
  v117 = (uint64_t)&v105 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v44);
  *((_QWORD *)v6 + 1) = 0x4000000000000000;
  v6[16] = 0;
  v46 = sub_100005360(&qword_100114BD8);
  sub_10002D33C(a1, (uint64_t *)&v6[*(int *)(v46 + 44)]);
  v124[0] = *(_OWORD *)a1;
  v47 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.getter(&v123, v47);
  if ((_BYTE)v123)
    v48 = 0.5;
  else
    v48 = 1.0;
  sub_10000531C((uint64_t)v6, (uint64_t)v10, &qword_100114BA0);
  *(double *)&v10[*(int *)(v7 + 36)] = v48;
  sub_100004F48((uint64_t)v6, &qword_100114BA0);
  v49 = *(_QWORD *)(a1 + 48);
  KeyPath = swift_getKeyPath(&unk_1000CE7F8);
  sub_10000531C((uint64_t)v10, (uint64_t)v13, &qword_100114BA8);
  v51 = (uint64_t *)&v13[*(int *)(v105 + 36)];
  *v51 = KeyPath;
  v51[1] = v49;
  swift_retain(v49);
  sub_100004F48((uint64_t)v10, &qword_100114BA8);
  v52 = swift_getKeyPath(&unk_1000CE828);
  sub_10000531C((uint64_t)v13, (uint64_t)v16, &qword_100114BB0);
  v53 = (uint64_t *)&v16[*(int *)(v106 + 36)];
  *v53 = v52;
  v53[1] = 0x3FE0000000000000;
  sub_100004F48((uint64_t)v13, &qword_100114BB0);
  v54 = swift_getKeyPath(&unk_1000CE858);
  sub_10000531C((uint64_t)v16, (uint64_t)v19, &qword_100114BB8);
  v55 = &v19[*(int *)(v107 + 36)];
  *(_QWORD *)v55 = v54;
  v55[8] = 2;
  sub_100004F48((uint64_t)v16, &qword_100114BB8);
  v124[0] = *(_OWORD *)(a1 + 16);
  v56 = sub_100005360(&qword_100114BE0);
  State.wrappedValue.getter(&v123, v56);
  v57 = v123;
  v58 = swift_getKeyPath(&unk_1000CE888);
  *(_QWORD *)&v124[0] = v57;
  swift_retain(v57);
  v59 = AnyShapeStyle.init<A>(_:)(v124, &type metadata for Color, &protocol witness table for Color);
  sub_10000531C((uint64_t)v19, (uint64_t)v22, &qword_100114BC0);
  swift_release(v57);
  v60 = (uint64_t *)&v22[*(int *)(v111 + 36)];
  *v60 = v58;
  v60[1] = v59;
  sub_100004F48((uint64_t)v19, &qword_100114BC0);
  v62 = *(_QWORD *)(a1 + 32);
  v61 = *(_QWORD *)(a1 + 40);
  sub_10000531C((uint64_t)v22, (uint64_t)v25, &qword_100114BC8);
  v63 = v110;
  v64 = &v25[*(int *)(v110 + 52)];
  *(_QWORD *)v64 = v62;
  *((_QWORD *)v64 + 1) = v61;
  swift_bridgeObjectRetain(v61);
  sub_100004F48((uint64_t)v22, &qword_100114BC8);
  v65 = *(_QWORD *)(a1 + 64);
  v66 = *(_QWORD *)(a1 + 72);
  v67 = sub_100008078(&qword_100114B50, &qword_100114B58, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v68 = (uint64_t)v109;
  View.accessibilityIdentifier(_:)(v65, v66, v63, v67);
  sub_100004F48((uint64_t)v25, &qword_100114B58);
  v69 = *(_QWORD *)(a1 + 80);
  v70 = *(_QWORD *)(a1 + 104);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 88));
  swift_bridgeObjectRetain(v70);
  v71 = Text.init(_:tableName:bundle:comment:)(v69);
  v73 = v72;
  v75 = v74;
  LOBYTE(v63) = v76 & 1;
  v78 = (uint64_t)v112;
  v77 = v113;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_10002DD44(v71, v73, v63);
  swift_bridgeObjectRelease(v75);
  sub_100004F48(v68, &qword_100114B40);
  v124[0] = *(_OWORD *)(a1 + 112);
  v79 = sub_100004F84();
  v80 = (uint64_t)v114;
  ModifiedContent<>.accessibilityValue<A>(_:)(v124, v77, &type metadata for String, v79);
  sub_100004F48(v78, &qword_100114B40);
  v81 = *(_QWORD *)(a1 + 128);
  v82 = *(_QWORD *)(a1 + 136);
  v83 = *(unsigned __int8 *)(a1 + 144);
  v84 = *(_QWORD *)(a1 + 152);
  v85 = sub_10002DB48();
  v86 = v115;
  View.help(_:)(v81, v82, v83, v84, v77, v85);
  sub_100004F48(v80, &qword_100114B40);
  v87 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
  v89 = v88;
  LOBYTE(v82) = v90;
  v92 = v91;
  *(_QWORD *)&v124[0] = v77;
  *((_QWORD *)&v124[0] + 1) = v85;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v124, &opaque type descriptor for <<opaque return type of View.help(_:)>>, 1);
  v94 = v116;
  v95 = v87;
  v96 = v120;
  View.accessibilityHint(_:)(v95, v89, v82 & 1, v92, v120, OpaqueTypeConformance2);
  swift_bridgeObjectRelease(v92);
  swift_bridgeObjectRelease(v89);
  v97 = (*(uint64_t (**)(char *, uint64_t))(v121 + 8))(v86, v96);
  v98 = static Color.clear.getter(v97);
  LOBYTE(v82) = static Edge.Set.all.getter(v98);
  v99 = (uint64_t)v94;
  v100 = (uint64_t)v94;
  v101 = v108;
  sub_10000531C(v100, v108, &qword_100114B38);
  v102 = v101 + *(int *)(v119 + 36);
  *(_QWORD *)v102 = v98;
  *(_BYTE *)(v102 + 8) = v82;
  sub_100004F48(v99, &qword_100114B38);
  v103 = v117;
  sub_10000531C(v101, v117, &qword_100114B28);
  *(_BYTE *)(v103 + *(int *)(v118 + 36)) = 0;
  sub_100004F48(v101, &qword_100114B28);
  return sub_100007CD8(v103, v122, &qword_100114B10);
}

uint64_t sub_10002D33C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _QWORD v68[2];

  v67 = a2;
  v62 = sub_100005360(&qword_100114BF0);
  __chkstk_darwin(v62, v3);
  v5 = (uint64_t *)((char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Image.Scale(0);
  v63 = *(_QWORD *)(v6 - 8);
  v64 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100005360(&qword_100114BF8);
  __chkstk_darwin(v58, v10);
  v12 = (uint64_t *)((char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = sub_100005360(&qword_100114C00);
  __chkstk_darwin(v65, v13);
  v15 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_100114C08);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v66 = (uint64_t)&v57 - v22;
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 40);
  v68[0] = v23;
  v68[1] = v24;
  v25 = sub_100004F84();
  v26 = swift_bridgeObjectRetain(v24);
  v27 = Text.init<A>(_:)(v68, &type metadata for String, v25, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  if (qword_100113DE8 != -1)
    swift_once(&qword_100113DE8, sub_1000534EC);
  v34 = v31 & 1;
  v35 = Text.foregroundColor(_:)(qword_10011FD90, v27, v29, v31 & 1, v33);
  v59 = v36;
  v60 = v35;
  v38 = v37;
  v61 = v39;
  sub_10002DD44(v27, v29, v34);
  swift_bridgeObjectRelease(v33);
  if (qword_100113BE0 != -1)
    swift_once(&qword_100113BE0, sub_10002E0E4);
  v40 = v38 & 1;
  v41 = qword_10011FA98;
  v43 = v63;
  v42 = v64;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v9, enum case for Image.Scale.small(_:), v64);
  KeyPath = swift_getKeyPath(&unk_1000CE8B8);
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))((char *)v5 + *(int *)(v62 + 28), v9, v42);
  *v5 = KeyPath;
  sub_10000531C((uint64_t)v5, (uint64_t)v12 + *(int *)(v58 + 36), &qword_100114BF0);
  *v12 = v41;
  swift_retain_n(v41, 2);
  sub_100004F48((uint64_t)v5, &qword_100114BF0);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v42);
  swift_release(v41);
  v45 = qword_10011FD90;
  v46 = swift_getKeyPath(&unk_1000CE8E8);
  sub_10000531C((uint64_t)v12, (uint64_t)v15, &qword_100114BF8);
  v47 = v65;
  v48 = (uint64_t *)&v15[*(int *)(v65 + 36)];
  *v48 = v46;
  v48[1] = v45;
  swift_retain(v45);
  sub_100004F48((uint64_t)v12, &qword_100114BF8);
  v49 = sub_10002DD80();
  View.accessibilityHidden(_:)(1, v47, v49);
  sub_100004F48((uint64_t)v15, &qword_100114C00);
  v50 = v66;
  sub_100007CD8((uint64_t)v19, v66, &qword_100114C08);
  sub_10000531C(v50, (uint64_t)v19, &qword_100114C08);
  v51 = v67;
  v53 = v59;
  v52 = v60;
  *v67 = v60;
  v51[1] = v53;
  *((_BYTE *)v51 + 16) = v40;
  v54 = v61;
  v51[3] = v61;
  v55 = sub_100005360(&qword_100114C38);
  sub_10000531C((uint64_t)v19, (uint64_t)v51 + *(int *)(v55 + 48), &qword_100114C08);
  sub_10002DE88(v52, v53, v40);
  swift_bridgeObjectRetain(v54);
  sub_100004F48(v50, &qword_100114C08);
  sub_100004F48((uint64_t)v19, &qword_100114C08);
  sub_10002DD44(v52, v53, v40);
  return swift_bridgeObjectRelease(v54);
}

double sub_10002D774@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v4 = sub_100005360(&qword_100113FF8);
  State.projectedValue.getter(&v12, v4);
  sub_1000A2C04(v12, *((uint64_t *)&v12 + 1), v13, *(_BYTE *)(a1 + 56), (uint64_t)&v12);
  v5 = v21;
  v6 = v22;
  v7 = v19;
  *(_OWORD *)(a2 + 128) = v20;
  *(_OWORD *)(a2 + 144) = v5;
  *(_OWORD *)(a2 + 160) = v6;
  *(_QWORD *)(a2 + 176) = v23;
  v8 = v17;
  *(_OWORD *)(a2 + 64) = v16;
  *(_OWORD *)(a2 + 80) = v8;
  *(_OWORD *)(a2 + 96) = v18;
  *(_OWORD *)(a2 + 112) = v7;
  v9 = v13;
  *(_OWORD *)a2 = v12;
  *(_OWORD *)(a2 + 16) = v9;
  result = *(double *)&v14;
  v11 = v15;
  *(_OWORD *)(a2 + 32) = v14;
  *(_OWORD *)(a2 + 48) = v11;
  return result;
}

uint64_t sub_10002D828@<X0>(uint64_t a1@<X8>)
{
  return sub_10002C734(a1);
}

uint64_t sub_10002D87C()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 16);
  v3 = 1;
  v1 = sub_100005360(&qword_100113FF8);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_10002D8C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002CAC8(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_10002D8D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = a1[1];
  v12 = a1[2];
  v3 = a1[5];
  v4 = a1[6];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  v9 = a1[17];
  v10 = a1[19];
  swift_retain(a1[3]);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v2);
  swift_retain(v12);
  return a1;
}

unint64_t sub_10002D994()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114B18;
  if (!qword_100114B18)
  {
    v1 = sub_100005608(&qword_100114B10);
    sub_10002DA18();
    sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114B18);
  }
  return result;
}

unint64_t sub_10002DA18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114B20;
  if (!qword_100114B20)
  {
    v1 = sub_100005608(&qword_100114B28);
    sub_10002DA9C();
    sub_100008078(&qword_100114B68, &qword_100114B70, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114B20);
  }
  return result;
}

unint64_t sub_10002DA9C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100114B30;
  if (!qword_100114B30)
  {
    v1 = sub_100005608(&qword_100114B38);
    v2[0] = sub_100005608(&qword_100114B40);
    v2[1] = sub_10002DB48();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.help(_:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114B30);
  }
  return result;
}

unint64_t sub_10002DB48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114B48;
  if (!qword_100114B48)
  {
    v1 = sub_100005608(&qword_100114B40);
    sub_100008078(&qword_100114B50, &qword_100114B58, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114B48);
  }
  return result;
}

uint64_t sub_10002DBE8()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[19]);
  swift_bridgeObjectRelease(v0[21]);
  return swift_deallocObject(v0, 176, 7);
}

double sub_10002DC5C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002D774(v1 + 16, a1);
}

unint64_t sub_10002DC64()
{
  unint64_t result;

  result = qword_100114B98;
  if (!qword_100114B98)
  {
    result = swift_getWitnessTable(&unk_1000D34BC, &type metadata for UnitConversionPopoverView);
    atomic_store(result, (unint64_t *)&qword_100114B98);
  }
  return result;
}

uint64_t sub_10002DCA8(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Image.Scale(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.imageScale.setter(v3);
}

uint64_t sub_10002DD44(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10002DD54()
{
  return EnvironmentValues.imageScale.getter();
}

unint64_t sub_10002DD80()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114C10;
  if (!qword_100114C10)
  {
    v1 = sub_100005608(&qword_100114C00);
    sub_10002DE04();
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114C10);
  }
  return result;
}

unint64_t sub_10002DE04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114C18;
  if (!qword_100114C18)
  {
    v1 = sub_100005608(&qword_100114BF8);
    sub_100008078(&qword_100114C20, &qword_100114BF0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114C18);
  }
  return result;
}

uint64_t sub_10002DE88(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10002DE98()
{
  uint64_t v0;
  __n128 v1;
  uint64_t OpaqueTypeConformance2;
  unint64_t v3;
  uint64_t v5;
  ValueMetadata *v6;
  uint64_t v7;
  uint64_t v8;

  v0 = sub_100005608(&qword_100114B08);
  v5 = sub_100005608(&qword_100114B00);
  v6 = (ValueMetadata *)type metadata accessor for PlainButtonStyle(255, v1);
  v7 = sub_100008078(&qword_100114B88, &qword_100114B00, (uint64_t)&protocol conformance descriptor for Button<A>);
  v8 = sub_100005178(&qword_100114B90, (uint64_t (*)(uint64_t))&type metadata accessor for PlainButtonStyle, (uint64_t)&protocol conformance descriptor for PlainButtonStyle);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v3 = sub_10002DC64();
  v5 = v0;
  v6 = &type metadata for UnitConversionPopoverView;
  v7 = OpaqueTypeConformance2;
  v8 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.popover<A>(isPresented:attachmentAnchor:content:)>>, 1);
}

uint64_t sub_10002DF7C()
{
  uint64_t result;

  result = Image.init(_:bundle:)(0x65706F2E6874616DLL, 0xEE0073726F746172, 0);
  qword_10011FA60 = result;
  return result;
}

uint64_t sub_10002DFBC()
{
  uint64_t result;

  result = Image.init(systemName:)(0x6E6F6974636E7566, 0xE800000000000000);
  qword_10011FA68 = result;
  return result;
}

uint64_t sub_10002DFEC()
{
  uint64_t result;

  result = Image.init(_:bundle:)(0xD000000000000010, 0x80000001000D5FB0, 0);
  qword_10011FA70 = result;
  return result;
}

uint64_t sub_10002E024()
{
  uint64_t result;

  result = Image.init(systemName:)(0x6B636F6C63, 0xE500000000000000);
  qword_10011FA78 = result;
  return result;
}

uint64_t sub_10002E050()
{
  uint64_t result;

  result = Image.init(systemName:)(1801678700, 0xE400000000000000);
  qword_10011FA80 = result;
  return result;
}

uint64_t sub_10002E078()
{
  uint64_t result;

  result = Image.init(systemName:)(0x72616D6B63656863, 0xE90000000000006BLL);
  qword_10011FA88 = result;
  return result;
}

uint64_t sub_10002E0AC()
{
  uint64_t result;

  result = Image.init(systemName:)(0x7269632E6F666E69, 0xEB00000000656C63);
  qword_10011FA90 = result;
  return result;
}

uint64_t sub_10002E0E4()
{
  uint64_t result;

  result = Image.init(systemName:)(0xD000000000000017, 0x80000001000D5FF0);
  qword_10011FA98 = result;
  return result;
}

uint64_t sub_10002E118()
{
  uint64_t result;

  result = Image.init(systemName:)(0x2E6E6F7276656863, 0xED00007468676972);
  qword_10011FAA0 = result;
  return result;
}

uint64_t sub_10002E154()
{
  uint64_t result;

  result = Image.init(systemName:)(0x2E6E6F7276656863, 0xEC0000007466656CLL);
  qword_10011FAA8 = result;
  return result;
}

uint64_t sub_10002E18C()
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0x697966696E67616DLL, 0xEF7373616C67676ELL);
  qword_10011FAB0 = result;
  return result;
}

uint64_t sub_10002E1C8()
{
  uint64_t result;

  result = Image.init(_:bundle:)(0x69662D6F6F686179, 0xED000065636E616ELL, 0);
  qword_10011FAB8 = result;
  return result;
}

uint64_t sub_10002E208()
{
  uint64_t result;

  result = Image.init(systemName:)(0x6873617274, 0xE500000000000000);
  qword_10011FAC0 = result;
  return result;
}

uint64_t sub_10002E234()
{
  uint64_t result;

  result = Image.init(systemName:)(0x642E6E6F2E636F64, 0xEA0000000000636FLL);
  qword_10011FAC8 = result;
  return result;
}

uint64_t sub_10002E268()
{
  uint64_t result;

  result = Image.init(_internalSystemName:)(0xD000000000000013, 0x80000001000D5FD0);
  qword_10011FAD0 = result;
  return result;
}

uint64_t sub_10002E29C()
{
  uint64_t result;

  result = Image.init(systemName:)(0x2E72616265646973, 0xEF676E696461656CLL);
  qword_10011FAD8 = result;
  return result;
}

uint64_t sub_10002E2D8()
{
  uint64_t result;

  result = Image.init(systemName:)(0x6C75622E7473696CLL, 0xEB0000000074656CLL);
  qword_10011FAE0 = result;
  return result;
}

uint64_t sub_10002E310@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::String v47;
  _BYTE *v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  void (**v51)(_BYTE *, uint64_t);
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::String v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_BYTE *, uint64_t, __n128);
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  _BYTE *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  Swift::String v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(_BYTE *, uint64_t, __n128);
  __n128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  Swift::String v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(_BYTE *, uint64_t, __n128);
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  uint64_t v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  _BYTE *v115;
  uint64_t v116;
  _BYTE *v117;
  uint64_t v118;
  void (*v119)(_BYTE *, uint64_t, __n128);
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _BYTE *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _BYTE *v129;
  uint64_t v130;
  uint64_t v131;
  Swift::String v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(_BYTE *, uint64_t, __n128);
  __n128 v137;
  _BYTE v139[12];
  int v140;
  uint64_t v141;
  _BYTE *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BYTE *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE *v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  _BYTE *v170;
  uint64_t v171;
  _BYTE *v172;
  _BYTE *v173;
  uint64_t v174;
  void (*v175)(_BYTE *, uint64_t, uint64_t);
  void (**v176)(_BYTE *, uint64_t);
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;

  v165 = a3;
  v5 = sub_100005360(&qword_100114C40);
  v167 = *(_QWORD *)(v5 - 8);
  v168 = v5;
  __chkstk_darwin(v5, v6);
  v166 = &v139[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100005360(&qword_100114C48);
  v163 = *(_QWORD *)(v8 - 8);
  v164 = v8;
  __chkstk_darwin(v8, v9);
  v162 = &v139[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v158 = sub_100005360(&qword_100114C50);
  v155 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158, v11);
  v154 = &v139[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v153 = sub_100005360(&qword_100114C58);
  v150 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153, v13);
  v149 = &v139[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v146 = sub_100005360(&qword_100114C60);
  v145 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146, v15);
  v142 = &v139[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v141 = sub_100005360(&qword_100114C68);
  v176 = *(void (***)(_BYTE *, uint64_t))(v141 - 8);
  __chkstk_darwin(v141, v17);
  v19 = &v139[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for PPTTestCase.Name(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v177 = &v139[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v24, v25);
  v27 = &v139[-v26];
  v144 = sub_100005360(&qword_100114C70);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144, v28);
  v173 = &v139[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v147 = sub_100005360(&qword_100114C78);
  v148 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147, v30);
  v169 = &v139[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v151 = sub_100005360(&qword_100114C80);
  v152 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151, v32);
  v170 = &v139[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v157 = sub_100005360(&qword_100114C88);
  v156 = *(_QWORD *)(v157 - 8);
  __chkstk_darwin(v157, v34);
  v172 = &v139[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v36 = sub_100005360(&qword_100114C90);
  v160 = *(_QWORD *)(v36 - 8);
  v161 = v36;
  __chkstk_darwin(v36, v37);
  v159 = &v139[-((v38 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100113C50 != -1)
    swift_once(&qword_100113C50, sub_1000309BC);
  v39 = sub_100014124(v20, (uint64_t)qword_10011FB48);
  v175 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v21 + 16);
  v175(v27, v39, v20);
  v40 = swift_allocObject(&unk_1001090C0, 25, 7);
  *(_QWORD *)(v40 + 16) = a1;
  LODWORD(v171) = a2;
  v140 = a2 & 1;
  *(_BYTE *)(v40 + 24) = a2 & 1;
  swift_retain(a1);
  v41 = sub_100005360(&qword_100114C98);
  v42 = sub_100008078(&qword_100114CA0, &qword_100114C98, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v43 = View.onTest(_:handler:)(v27, sub_100030A04, v40, v41, v42);
  v44 = PPTTestCase.Name.rawValue.getter(v43);
  v174 = a1;
  v46 = v45;
  v178 = v44;
  v179 = v45;
  swift_bridgeObjectRetain(v45);
  v47._countAndFlagsBits = 0x70616373646E614CLL;
  v47._object = (void *)0xE900000000000065;
  String.append(_:)(v47);
  swift_bridgeObjectRelease(v46);
  v48 = v177;
  PPTTestCase.Name.init(_:)(v178, v179);
  v178 = v41;
  v179 = v42;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v50 = v141;
  View.onTest(_:handler:)(v48, sub_100030A04, v40, v141, OpaqueTypeConformance2);
  v51 = *(void (***)(_BYTE *, uint64_t))(v21 + 8);
  ((void (*)(_BYTE *, uint64_t))v51)(v48, v20);
  v176[1](v19, v50);
  v52 = swift_release(v40);
  v176 = v51;
  ((void (*)(_BYTE *, uint64_t, __n128))v51)(v27, v20, v52);
  if (qword_100113C58 != -1)
    swift_once(&qword_100113C58, sub_100030A10);
  v53 = sub_100014124(v20, (uint64_t)qword_10011FB60);
  v175(v27, v53, v20);
  v54 = swift_allocObject(&unk_1001090E8, 25, 7);
  v55 = v174;
  *(_QWORD *)(v54 + 16) = v174;
  *(_BYTE *)(v54 + 24) = v140;
  swift_retain(v55);
  v178 = v50;
  v179 = OpaqueTypeConformance2;
  v56 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v57 = v142;
  v58 = v144;
  v59 = View.onTest(_:handler:)(v27, sub_100030A34, v54, v144, v56);
  v60 = PPTTestCase.Name.rawValue.getter(v59);
  v62 = v61;
  v178 = v60;
  v179 = v61;
  swift_bridgeObjectRetain(v61);
  v63._countAndFlagsBits = 0x70616373646E614CLL;
  v63._object = (void *)0xE900000000000065;
  String.append(_:)(v63);
  swift_bridgeObjectRelease(v62);
  v64 = v177;
  PPTTestCase.Name.init(_:)(v178, v179);
  v178 = v58;
  v179 = v56;
  v65 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v66 = v146;
  View.onTest(_:handler:)(v64, sub_100030A34, v54, v146, v65);
  v67 = (void (*)(_BYTE *, uint64_t, __n128))v176;
  ((void (*)(_BYTE *, uint64_t))v176)(v64, v20);
  (*(void (**)(_BYTE *, uint64_t))(v145 + 8))(v57, v66);
  v68 = swift_release(v54);
  v67(v27, v20, v68);
  (*(void (**)(_BYTE *, uint64_t))(v143 + 8))(v173, v58);
  if (qword_100113C60 != -1)
    swift_once(&qword_100113C60, sub_100030A40);
  v69 = sub_100014124(v20, (uint64_t)qword_10011FB78);
  v175(v27, v69, v20);
  v70 = swift_allocObject(&unk_100109110, 25, 7);
  v71 = v174;
  *(_QWORD *)(v70 + 16) = v174;
  LODWORD(v173) = v171 & 1;
  *(_BYTE *)(v70 + 24) = v171 & 1;
  swift_retain(v71);
  v178 = v66;
  v179 = v65;
  v72 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v73 = v149;
  v74 = v147;
  v75 = v169;
  v76 = View.onTest(_:handler:)(v27, sub_100030A64, v70, v147, v72);
  v77 = PPTTestCase.Name.rawValue.getter(v76);
  v79 = v78;
  v178 = v77;
  v179 = v78;
  swift_bridgeObjectRetain(v78);
  v80._countAndFlagsBits = 0x70616373646E614CLL;
  v80._object = (void *)0xE900000000000065;
  String.append(_:)(v80);
  swift_bridgeObjectRelease(v79);
  v81 = v177;
  PPTTestCase.Name.init(_:)(v178, v179);
  v178 = v74;
  v179 = v72;
  v82 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v83 = v153;
  View.onTest(_:handler:)(v81, sub_100030A64, v70, v153, v82);
  v84 = (void (*)(_BYTE *, uint64_t, __n128))v176;
  ((void (*)(_BYTE *, uint64_t))v176)(v81, v20);
  (*(void (**)(_BYTE *, uint64_t))(v150 + 8))(v73, v83);
  v85 = swift_release(v70);
  v84(v27, v20, v85);
  (*(void (**)(_BYTE *, uint64_t))(v148 + 8))(v75, v74);
  if (qword_100113C68 != -1)
    swift_once(&qword_100113C68, sub_100030A70);
  v86 = sub_100014124(v20, (uint64_t)qword_10011FB90);
  v175(v27, v86, v20);
  v87 = swift_allocObject(&unk_100109138, 25, 7);
  v88 = v174;
  *(_QWORD *)(v87 + 16) = v174;
  *(_BYTE *)(v87 + 24) = (_BYTE)v173;
  swift_retain(v88);
  v178 = v83;
  v179 = v82;
  v89 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v90 = v154;
  v91 = v151;
  v92 = v170;
  v93 = View.onTest(_:handler:)(v27, sub_100030A94, v87, v151, v89);
  v94 = PPTTestCase.Name.rawValue.getter(v93);
  v96 = v95;
  v178 = v94;
  v179 = v95;
  swift_bridgeObjectRetain(v95);
  v97._countAndFlagsBits = 0x70616373646E614CLL;
  v97._object = (void *)0xE900000000000065;
  String.append(_:)(v97);
  swift_bridgeObjectRelease(v96);
  v98 = v177;
  PPTTestCase.Name.init(_:)(v178, v179);
  v178 = v91;
  v179 = v89;
  v99 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v100 = v158;
  View.onTest(_:handler:)(v98, sub_100030A94, v87, v158, v99);
  v101 = (void (*)(_BYTE *, uint64_t, __n128))v176;
  ((void (*)(_BYTE *, uint64_t))v176)(v98, v20);
  (*(void (**)(_BYTE *, uint64_t))(v155 + 8))(v90, v100);
  v102 = swift_release(v87);
  v101(v27, v20, v102);
  (*(void (**)(_BYTE *, uint64_t))(v152 + 8))(v92, v91);
  if (qword_100113C70 != -1)
    swift_once(&qword_100113C70, sub_100030AA0);
  v103 = sub_100014124(v20, (uint64_t)qword_10011FBA8);
  v175(v27, v103, v20);
  v104 = swift_allocObject(&unk_100109160, 25, 7);
  v105 = v174;
  *(_QWORD *)(v104 + 16) = v174;
  LODWORD(v173) = v171 & 1;
  *(_BYTE *)(v104 + 24) = v171 & 1;
  swift_retain(v105);
  v178 = v100;
  v179 = v99;
  v106 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v107 = v162;
  v108 = v157;
  v109 = v172;
  v110 = View.onTest(_:handler:)(v27, sub_100030AC4, v104, v157, v106);
  v111 = PPTTestCase.Name.rawValue.getter(v110);
  v113 = v112;
  v178 = v111;
  v179 = v112;
  swift_bridgeObjectRetain(v112);
  v114._countAndFlagsBits = 0x70616373646E614CLL;
  v114._object = (void *)0xE900000000000065;
  String.append(_:)(v114);
  swift_bridgeObjectRelease(v113);
  v115 = v177;
  PPTTestCase.Name.init(_:)(v178, v179);
  v178 = v108;
  v179 = v106;
  v116 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v117 = v159;
  v118 = v164;
  v171 = v116;
  View.onTest(_:handler:)(v115, sub_100030AC4, v104, v164, v116);
  v119 = (void (*)(_BYTE *, uint64_t, __n128))v176;
  ((void (*)(_BYTE *, uint64_t))v176)(v115, v20);
  (*(void (**)(_BYTE *, uint64_t))(v163 + 8))(v107, v118);
  v120 = swift_release(v104);
  v119(v27, v20, v120);
  (*(void (**)(_BYTE *, uint64_t))(v156 + 8))(v109, v108);
  if (qword_100113C78 != -1)
    swift_once(&qword_100113C78, sub_100030AD0);
  v121 = sub_100014124(v20, (uint64_t)qword_10011FBC0);
  v175(v27, v121, v20);
  v122 = swift_allocObject(&unk_100109188, 25, 7);
  v123 = v174;
  *(_QWORD *)(v122 + 16) = v174;
  *(_BYTE *)(v122 + 24) = (_BYTE)v173;
  swift_retain(v123);
  v178 = v118;
  v179 = v171;
  v124 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v125 = v166;
  v126 = v161;
  v127 = View.onTest(_:handler:)(v27, sub_100030AF4, v122, v161, v124);
  v128 = PPTTestCase.Name.rawValue.getter(v127);
  v129 = v117;
  v131 = v130;
  v178 = v128;
  v179 = v130;
  swift_bridgeObjectRetain(v130);
  v132._countAndFlagsBits = 0x70616373646E614CLL;
  v132._object = (void *)0xE900000000000065;
  String.append(_:)(v132);
  swift_bridgeObjectRelease(v131);
  v133 = v177;
  PPTTestCase.Name.init(_:)(v178, v179);
  v178 = v126;
  v179 = v124;
  v134 = swift_getOpaqueTypeConformance2(&v178, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v135 = v168;
  View.onTest(_:handler:)(v133, sub_100030AF4, v122, v168, v134);
  v136 = (void (*)(_BYTE *, uint64_t, __n128))v176;
  ((void (*)(_BYTE *, uint64_t))v176)(v133, v20);
  (*(void (**)(_BYTE *, uint64_t))(v167 + 8))(v125, v135);
  v137 = swift_release(v122);
  v136(v27, v20, v137);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v160 + 8))(v129, v126);
}

uint64_t sub_10002F118(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  char v32;

  v6 = type metadata accessor for PPTTestCase(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v11 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AnimationCompletionCriteria(0, v10);
  v12 = *(_QWORD *)(v28 - 8);
  v14 = __chkstk_darwin(v28, v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter(v14);
  v30 = a2;
  v17 = a3 & 1;
  v31 = a3 & 1;
  v32 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a1, v6);
  v18 = *(unsigned __int8 *)(v7 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1001092A0, v20 + 10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v11, v6);
  v22 = v21 + v20;
  *(_QWORD *)v22 = a2;
  *(_BYTE *)(v22 + 8) = v17;
  *(_BYTE *)(v22 + 9) = 1;
  v23 = swift_retain(a2);
  v24 = static Animation.default.getter(v23);
  withAnimation<A>(_:completionCriteria:_:completion:)(v24, v16, sub_100031934, v29, sub_100030B24, v21, (char *)&type metadata for () + 8);
  swift_release(v21);
  v25 = swift_release(v24);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v16, v28, v25);
}

uint64_t sub_10002F2B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  char v32;

  v6 = type metadata accessor for PPTTestCase(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v11 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AnimationCompletionCriteria(0, v10);
  v12 = *(_QWORD *)(v28 - 8);
  v14 = __chkstk_darwin(v28, v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter(v14);
  v30 = a2;
  v17 = a3 & 1;
  v31 = a3 & 1;
  v32 = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a1, v6);
  v18 = *(unsigned __int8 *)(v7 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100109278, v20 + 10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v11, v6);
  v22 = v21 + v20;
  *(_QWORD *)v22 = a2;
  *(_BYTE *)(v22 + 8) = v17;
  *(_BYTE *)(v22 + 9) = 0;
  v23 = swift_retain(a2);
  v24 = static Animation.default.getter(v23);
  withAnimation<A>(_:completionCriteria:_:completion:)(v24, v16, sub_100031934, v29, sub_100030B24, v21, (char *)&type metadata for () + 8);
  swift_release(v21);
  v25 = swift_release(v24);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v16, v28, v25);
}

uint64_t sub_10002F458(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  char v32;

  v6 = type metadata accessor for PPTTestCase(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v11 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AnimationCompletionCriteria(0, v10);
  v12 = *(_QWORD *)(v28 - 8);
  v14 = __chkstk_darwin(v28, v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter(v14);
  v30 = a2;
  v17 = a3 & 1;
  v31 = a3 & 1;
  v32 = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a1, v6);
  v18 = *(unsigned __int8 *)(v7 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100109250, v20 + 10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v11, v6);
  v22 = v21 + v20;
  *(_QWORD *)v22 = a2;
  *(_BYTE *)(v22 + 8) = v17;
  *(_BYTE *)(v22 + 9) = 2;
  v23 = swift_retain(a2);
  v24 = static Animation.default.getter(v23);
  withAnimation<A>(_:completionCriteria:_:completion:)(v24, v16, sub_100031934, v29, sub_100030B24, v21, (char *)&type metadata for () + 8);
  swift_release(v21);
  v25 = swift_release(v24);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v16, v28, v25);
}

uint64_t sub_10002F5F8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  char v32;

  v6 = type metadata accessor for PPTTestCase(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v11 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AnimationCompletionCriteria(0, v10);
  v12 = *(_QWORD *)(v28 - 8);
  v14 = __chkstk_darwin(v28, v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter(v14);
  v30 = a2;
  v17 = a3 & 1;
  v31 = a3 & 1;
  v32 = 2;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a1, v6);
  v18 = *(unsigned __int8 *)(v7 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100109228, v20 + 10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v11, v6);
  v22 = v21 + v20;
  *(_QWORD *)v22 = a2;
  *(_BYTE *)(v22 + 8) = v17;
  *(_BYTE *)(v22 + 9) = 0;
  v23 = swift_retain(a2);
  v24 = static Animation.default.getter(v23);
  withAnimation<A>(_:completionCriteria:_:completion:)(v24, v16, sub_100031934, v29, sub_100030B24, v21, (char *)&type metadata for () + 8);
  swift_release(v21);
  v25 = swift_release(v24);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v16, v28, v25);
}

uint64_t sub_10002F798(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  char v32;

  v6 = type metadata accessor for PPTTestCase(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v11 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AnimationCompletionCriteria(0, v10);
  v12 = *(_QWORD *)(v28 - 8);
  v14 = __chkstk_darwin(v28, v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter(v14);
  v30 = a2;
  v17 = a3 & 1;
  v31 = a3 & 1;
  v32 = 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a1, v6);
  v18 = *(unsigned __int8 *)(v7 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100109200, v20 + 10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v11, v6);
  v22 = v21 + v20;
  *(_QWORD *)v22 = a2;
  *(_BYTE *)(v22 + 8) = v17;
  *(_BYTE *)(v22 + 9) = 2;
  v23 = swift_retain(a2);
  v24 = static Animation.default.getter(v23);
  withAnimation<A>(_:completionCriteria:_:completion:)(v24, v16, sub_100031934, v29, sub_100030B24, v21, (char *)&type metadata for () + 8);
  swift_release(v21);
  v25 = swift_release(v24);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v16, v28, v25);
}

uint64_t sub_10002F93C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;
  char v31;
  char v32;

  v6 = type metadata accessor for PPTTestCase(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v11 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for AnimationCompletionCriteria(0, v10);
  v12 = *(_QWORD *)(v28 - 8);
  v14 = __chkstk_darwin(v28, v13);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static AnimationCompletionCriteria.logicallyComplete.getter(v14);
  v30 = a2;
  v17 = a3 & 1;
  v31 = a3 & 1;
  v32 = 2;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v11, a1, v6);
  v18 = *(unsigned __int8 *)(v7 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = (v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1001091B0, v20 + 10, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v21 + v19, v11, v6);
  v22 = v21 + v20;
  *(_QWORD *)v22 = a2;
  *(_BYTE *)(v22 + 8) = v17;
  *(_BYTE *)(v22 + 9) = 1;
  v23 = swift_retain(a2);
  v24 = static Animation.default.getter(v23);
  withAnimation<A>(_:completionCriteria:_:completion:)(v24, v16, sub_100030B00, v29, sub_100030B24, v21, (char *)&type metadata for () + 8);
  swift_release(v21);
  v25 = swift_release(v24);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v16, v28, v25);
}

uint64_t sub_10002FAE0(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  Class isa;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  uint64_t v37;
  char v38;
  char v39;

  v32 = a3;
  v33 = a4;
  v30 = a1;
  v31 = a2;
  v4 = type metadata accessor for PPTTestCase(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v8 = __chkstk_darwin(v4, v7);
  v9 = type metadata accessor for AnimationCompletionCriteria(0, v8);
  v34 = *(_QWORD *)(v9 - 8);
  v35 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  Date.init(timeIntervalSinceNow:)(2.0);
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  objc_msgSend(v18, "runUntilDate:", isa);

  v20 = v30;
  PPTTestCase.startTest()();
  static AnimationCompletionCriteria.logicallyComplete.getter(v21);
  v37 = v31;
  v38 = v32 & 1;
  v39 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v20, v4);
  v22 = *(unsigned __int8 *)(v5 + 80);
  v23 = (v22 + 16) & ~v22;
  v24 = swift_allocObject(&unk_1001091D8, v23 + v6, v22 | 7);
  v25 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(v24 + v23, (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v26 = static Animation.default.getter(v25);
  withAnimation<A>(_:completionCriteria:_:completion:)(v26, v12, sub_100031934, v36, sub_100030B88, v24, (char *)&type metadata for () + 8);
  swift_release(v24);
  v27 = swift_release(v26);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v34 + 8))(v12, v35, v27);
}

void sub_10002FD04(uint64_t a1, char a2, char a3)
{
  char v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a2 & 1;
  v6 = swift_retain(a1);
  v7 = sub_100043890(v6, v5);
  swift_release(a1);
  sub_10001F808(a3);
  swift_release(v7);
}

uint64_t sub_10002FD6C()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_10002FD84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10002E310(*(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8), a1);
}

uint64_t sub_10002FD90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  void (*v25)(char *, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  uint64_t OpaqueTypeConformance2;
  uint64_t v29;
  char *v30;
  __n128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD v41[2];

  v39 = a1;
  v2 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  v6 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PPTTestCase.Name(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100114D40);
  v37 = *(_QWORD *)(v12 - 8);
  v38 = v12;
  __chkstk_darwin(v12, v13);
  v40 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113C80 != -1)
    swift_once(&qword_100113C80, sub_100030BC0);
  v15 = sub_100014124(v7, (uint64_t)qword_10011FBD8);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v36(v11, v15, v7);
  sub_10003145C(v1, (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(unsigned __int8 *)(v3 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = v17 + v4;
  v19 = v16 | 7;
  v35 = v18;
  v20 = swift_allocObject(&unk_1001092C8, v18, v16 | 7);
  v34 = v1;
  v21 = v20;
  sub_1000314A4((uint64_t)v6, v20 + v17);
  v22 = sub_100005360(&qword_100114D48);
  v23 = sub_100008078(&qword_100114D50, &qword_100114D48, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.onTest(_:handler:)(v11, sub_1000314E8, v21, v22, v23);
  v24 = swift_release(v21);
  v25 = *(void (**)(char *, uint64_t, __n128))(v8 + 8);
  v25(v11, v7, v24);
  if (qword_100113C88 != -1)
    swift_once(&qword_100113C88, sub_100030BE4);
  v26 = sub_100014124(v7, (uint64_t)qword_10011FBF0);
  v36(v11, v26, v7);
  sub_10003145C(v34, (uint64_t)v6);
  v27 = swift_allocObject(&unk_1001092F0, v35, v19);
  sub_1000314A4((uint64_t)v6, v27 + v17);
  v41[0] = v22;
  v41[1] = v23;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v41, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v29 = v38;
  v30 = v40;
  View.onTest(_:handler:)(v11, sub_1000314E8, v27, v38, OpaqueTypeConformance2);
  v31 = swift_release(v27);
  v25(v11, v7, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v30, v29);
}

uint64_t sub_100030068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  __n128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void *v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD aBlock[5];
  uint64_t v72;

  v62 = a2;
  v60 = a1;
  v67 = type metadata accessor for DispatchWorkItemFlags(0);
  v70 = *(_QWORD *)(v67 - 8);
  v3 = __chkstk_darwin(v67, v2);
  v66 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0, v3);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  __chkstk_darwin(v5, v6);
  v65 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  v9 = *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64);
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v9;
  __chkstk_darwin(v8, v10);
  v55 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for ScrollViewProxy(0);
  v12 = *(_QWORD *)(v54 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v54, v14);
  v53 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for PPTTestCase(0);
  v15 = *(_QWORD *)(v52 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v18 = __chkstk_darwin(v52, v17);
  v51 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchTime(0, v18);
  v20 = *(_QWORD *)(v19 - 8);
  v58 = v19;
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v61 = (char *)&v50 - v26;
  sub_100004D98();
  v64 = static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v23, 0.2);
  v59 = *(void (**)(char *, uint64_t))(v20 + 8);
  v59(v23, v19);
  v27 = v52;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v60, v52);
  v28 = v53;
  v29 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v53, v62, v54);
  v30 = v55;
  sub_10003145C(v63, v55);
  v31 = *(unsigned __int8 *)(v15 + 80);
  v32 = (v31 + 16) & ~v31;
  v33 = *(unsigned __int8 *)(v12 + 80);
  v34 = (v16 + v33 + v32) & ~v33;
  v35 = *(unsigned __int8 *)(v56 + 80);
  v36 = (v13 + v35 + v34) & ~v35;
  v37 = swift_allocObject(&unk_100109318, v36 + v57, v31 | v33 | v35 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v37 + v32, v51, v27);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v37 + v34, v28, v29);
  sub_1000314A4(v30, v37 + v36);
  aBlock[4] = sub_1000316D8;
  v72 = v37;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100004DD4;
  aBlock[3] = &unk_100109330;
  v38 = _Block_copy(aBlock);
  v39 = swift_release(v72);
  v40 = v65;
  static DispatchQoS.unspecified.getter(v39);
  aBlock[0] = _swiftEmptyArrayStorage;
  v41 = sub_100005178(&qword_100114D58, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_100005360(&qword_100114D60);
  v43 = sub_100008078(&qword_100114D68, &qword_100114D60, (uint64_t)&protocol conformance descriptor for [A]);
  v44 = v66;
  v45 = v42;
  v46 = v67;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v45, v43, v67, v41);
  v47 = v61;
  v48 = (void *)v64;
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v61, v40, v44, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v70 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v40, v69);
  return ((uint64_t (*)(char *, uint64_t))v59)(v47, v58);
}

double sub_1000304A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double result;
  uint64_t v21;
  uint64_t v22;

  v22 = a2;
  v5 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  v9 = type metadata accessor for PPTTestCase(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v10 + 16))(v14, a1, v9, v13);
  sub_10003145C(a3, (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(unsigned __int8 *)(v10 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = *(unsigned __int8 *)(v6 + 80);
  v18 = (v11 + v17 + v16) & ~v17;
  v19 = swift_allocObject(&unk_100109368, v18 + v7, v15 | v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + v16, v14, v9);
  sub_1000314A4((uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18);
  PPTTestCase.performScrollTest(_:onComplete:)(v22, sub_100031830, v19);
  *(_QWORD *)&result = swift_release(v19).n128_u64[0];
  return result;
}

double sub_1000305F0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  _QWORD v19[3];

  PPTTestCase.finishTest()();
  v4 = a3[2];
  v5 = *((_BYTE *)a3 + 24);
  v6 = swift_retain(v4);
  v7 = sub_1000438AC(v6, v5);
  swift_release(v4);
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  sub_1000BF854();
  sub_100068F30(0);
  swift_release(v7);
  v8 = *a3;
  v9 = *((_BYTE *)a3 + 8);
  v10 = swift_retain(v8);
  v11 = sub_100043984(v10, v9);
  swift_release(v8);
  sub_100010738();
  KeyPath = swift_getKeyPath(&unk_1000CEA28);
  v19[0] = v11;
  v13 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v13);
  swift_release(KeyPath);
  v19[0] = v11;
  v14 = swift_getKeyPath(&unk_1000CEA28);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v19, v14, v13);
  swift_release(v14);
  swift_beginAccess(v11 + 24, v19, 1, 0);
  v15 = *(_QWORD *)(v11 + 24);
  *(_QWORD *)(v11 + 24) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v15);
  sub_1000150CC();
  v18 = v11;
  v16 = swift_getKeyPath(&unk_1000CEA28);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v18, v16, v13);
  swift_release(v11);
  *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  return result;
}

uint64_t sub_1000307B4(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FAE8, 0x6142657A69736552, 0xEB00000000636973);
}

uint64_t sub_1000307DC(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FB00, 0xD000000000000010, 0x80000001000D6010);
}

uint64_t sub_100030800(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FB18, 0x614D657A69736552, 0xEF72657061506874);
}

uint64_t sub_10003082C(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FB30, 0x657461746F72, 0xE600000000000000);
}

uint64_t initializeBufferWithCopyOfBuffer for CalculatorModeSwitchPPTTests(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for CalculatorModeSwitchPPTTests(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithCopy for CalculatorModeSwitchPPTTests(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_retain(v3);
  swift_release(v5);
  return a1;
}

uint64_t initializeWithTake for CalculatorModeSwitchPPTTests(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for CalculatorModeSwitchPPTTests(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorModeSwitchPPTTests(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorModeSwitchPPTTests(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorModeSwitchPPTTests()
{
  return &type metadata for CalculatorModeSwitchPPTTests;
}

uint64_t sub_1000309AC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F5B40, 1);
}

uint64_t sub_1000309BC(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FB48, 0xD00000000000001BLL, 0x80000001000D60D0);
}

uint64_t sub_1000309E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100030A04(uint64_t a1)
{
  uint64_t v1;

  return sub_10002F118(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100030A10(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FB60, 0xD00000000000001BLL, 0x80000001000D60B0);
}

uint64_t sub_100030A34(uint64_t a1)
{
  uint64_t v1;

  return sub_10002F2B8(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100030A40(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FB78, 0xD00000000000001ALL, 0x80000001000D6090);
}

uint64_t sub_100030A64(uint64_t a1)
{
  uint64_t v1;

  return sub_10002F458(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100030A70(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FB90, 0xD00000000000001ALL, 0x80000001000D6070);
}

uint64_t sub_100030A94(uint64_t a1)
{
  uint64_t v1;

  return sub_10002F5F8(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100030AA0(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FBA8, 0xD00000000000001FLL, 0x80000001000D6050);
}

uint64_t sub_100030AC4(uint64_t a1)
{
  uint64_t v1;

  return sub_10002F798(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

uint64_t sub_100030AD0(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FBC0, 0xD00000000000001FLL, 0x80000001000D6030);
}

uint64_t sub_100030AF4(uint64_t a1)
{
  uint64_t v1;

  return sub_10002F93C(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

void sub_100030B00()
{
  uint64_t v0;

  sub_10002FD04(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_BYTE *)(v0 + 25));
}

uint64_t sub_100030B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100030B88()
{
  type metadata accessor for PPTTestCase(0);
  PPTTestCase.finishTest()();
}

uint64_t sub_100030BC0(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FBD8, 0xD000000000000019, 0x80000001000D6120);
}

uint64_t sub_100030BE4(uint64_t a1)
{
  return sub_100030C08(a1, qword_10011FBF0, 0xD000000000000022, 0x80000001000D60F0);
}

uint64_t sub_100030C08(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for PPTTestCase.Name(0);
  sub_10001C038(v7, a2);
  sub_100014124(v7, (uint64_t)a2);
  return PPTTestCase.Name.init(_:)(a3, a4);
}

uint64_t sub_100030C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 10, v5);
}

uint64_t sub_100030CEC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for PPTTestCase(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10002FAE0(v0 + v2, *(_QWORD *)v3, *(unsigned __int8 *)(v3 + 8), *(unsigned __int8 *)(v3 + 9));
}

uint64_t sub_100030D38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t OpaqueTypeConformance2;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = sub_100005608(&qword_100114C40);
  v21 = sub_100005608(&qword_100114C90);
  v20 = sub_100005608(&qword_100114C48);
  v0 = sub_100005608(&qword_100114C88);
  v1 = sub_100005608(&qword_100114C50);
  v2 = sub_100005608(&qword_100114C80);
  v3 = sub_100005608(&qword_100114C58);
  v4 = sub_100005608(&qword_100114C78);
  v5 = sub_100005608(&qword_100114C60);
  v6 = sub_100005608(&qword_100114C70);
  v7 = sub_100005608(&qword_100114C68);
  v23 = sub_100005608(&qword_100114C98);
  v24 = sub_100008078(&qword_100114CA0, &qword_100114C98, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v7;
  v24 = OpaqueTypeConformance2;
  v9 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v6;
  v24 = v9;
  v10 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v5;
  v24 = v10;
  v11 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v4;
  v24 = v11;
  v12 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v3;
  v24 = v12;
  v13 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v2;
  v24 = v13;
  v14 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v1;
  v24 = v14;
  v15 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v0;
  v24 = v15;
  v16 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v20;
  v24 = v16;
  v17 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v21;
  v24 = v17;
  v18 = swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v23 = v22;
  v24 = v18;
  return swift_getOpaqueTypeConformance2(&v23, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
}

_QWORD *sub_100030F58(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v14 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v14);
  }
  else
  {
    v5 = *a2;
    v6 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v6;
    v7 = a2[2];
    v8 = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v8;
    v9 = *(int *)(a3 + 24);
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for ScrollViewProxy(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_retain(v5);
    swift_retain(v7);
    v13(v10, v11, v12);
  }
  return v3;
}

uint64_t sub_10003101C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  swift_release(a1[2]);
  v4 = (char *)a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for ScrollViewProxy(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10003106C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for ScrollViewProxy(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_retain(v4);
  swift_retain(v6);
  v12(v9, v10, v11);
  return a1;
}

uint64_t *sub_100031104(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  v9 = a2[2];
  v10 = *((_BYTE *)a2 + 24);
  v11 = a1[2];
  a1[2] = v9;
  *((_BYTE *)a1 + 24) = v10;
  swift_retain(v9);
  swift_release(v11);
  v12 = *(int *)(a3 + 24);
  v13 = (uint64_t)a1 + v12;
  v14 = (uint64_t)a2 + v12;
  v15 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t sub_1000311A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100031214(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v8;
  swift_release(v9);
  v10 = *(int *)(a3 + 24);
  v11 = (uint64_t)a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_1000312A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000312AC);
}

uint64_t sub_1000312AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for ScrollViewProxy(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100031320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003132C);
}

uint64_t sub_10003132C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = type metadata accessor for ScrollViewProxy(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CalculatorHistoryScrollPPTTests(uint64_t a1)
{
  uint64_t result;

  result = qword_100114D00;
  if (!qword_100114D00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorHistoryScrollPPTTests);
  return result;
}

uint64_t sub_1000313D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\t";
  v4[1] = "\t";
  result = type metadata accessor for ScrollViewProxy(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10003144C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F5B90, 1);
}

uint64_t sub_10003145C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000314A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000314F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v7 + 16));
  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100031584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_100030068(a1, v1 + ((v4 + 16) & ~v4) + *(int *)(v3 + 24));
}

uint64_t sub_1000315CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  _QWORD *v17;
  __n128 v18;
  uint64_t v20;
  uint64_t v21;

  v21 = type metadata accessor for PPTTestCase(0);
  v1 = *(_QWORD *)(v21 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for ScrollViewProxy(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v3 + v4 + v7) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v8 + v9 + v12) & ~v12;
  v20 = v13 + *(_QWORD *)(v11 + 64);
  v14 = v2 | v7 | v12 | 7;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v0 + v3, v21);
  v15 = v0 + v8;
  v16 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v16(v15, v5);
  v17 = (_QWORD *)(v0 + v13);
  swift_release(*v17);
  v18 = swift_release(v17[2]);
  ((void (*)(char *, uint64_t, __n128))v16)((char *)v17 + *(int *)(v10 + 24), v5, v18);
  return swift_deallocObject(v0, v20, v14);
}

double sub_1000316D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for PPTTestCase(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = *(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8);
  v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorHistoryScrollPPTTests(0) - 8) + 80);
  return sub_1000304A4(v0 + v2, v0 + v5, v0 + ((v5 + v6 + v7) & ~v7));
}

uint64_t sub_10003175C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for CalculatorHistoryScrollPPTTests(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v9));
  swift_release(*(_QWORD *)(v0 + v9 + 16));
  v12 = v0 + v9 + *(int *)(v6 + 24);
  v13 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  return swift_deallocObject(v0, v10, v11);
}

double sub_100031830(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for PPTTestCase(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorHistoryScrollPPTTests(0) - 8) + 80);
  return sub_1000305F0(a1, v1 + v4, (uint64_t *)(v1 + ((v4 + v5 + v6) & ~v6)));
}

uint64_t sub_1000318A0()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_100005608(&qword_100114D40);
  v3 = sub_100005608(&qword_100114D48);
  v4 = sub_100008078(&qword_100114D50, &qword_100114D48, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
}

void sub_100031934()
{
  sub_100030B00();
}

uint64_t sub_100031964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  char v21;
  void (*v22)(char *, uint64_t);
  __n128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  __n128 v27;
  char *v28;
  uint64_t (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  char v39;
  __n128 v40;
  void *v41;
  NSDate v42;
  void (*v43)(char *, uint64_t);
  id v44;
  void *v45;
  id v46;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;

  v1 = v0;
  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  v50 = v2;
  v51 = v3;
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52, v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11, v12);
  v53 = (char *)&v48 - v14;
  v15 = type metadata accessor for Calendar(0, v13);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v18);
  v21 = Calendar.isDateInToday(_:)(v0);
  v22 = *(void (**)(char *, uint64_t))(v16 + 8);
  v22(v20, v15);
  v24 = 0;
  if ((v21 & 1) == 0)
  {
    static Calendar.current.getter(v23);
    v25 = Calendar.isDateInYesterday(_:)(v1);
    v26 = ((uint64_t (*)(char *, uint64_t))v22)(v20, v15);
    if ((v25 & 1) != 0)
    {
      return 0;
    }
    else
    {
      static Date.now.getter(v26);
      static Calendar.current.getter(v27);
      v28 = v53;
      Calendar.startOfDay(for:)(v10);
      v22(v20, v15);
      v29 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
      v30 = v52;
      v31 = v29(v10, v52);
      Date.addingTimeInterval(_:)(v31, -604800.0);
      v32 = v29;
      v33 = Date.compare(_:)(v10);
      v34 = v32(v10, v30);
      if (v33 == 1
        || (v49 = (void (*)(char *, uint64_t))v32,
            Date.addingTimeInterval(_:)(v34, -2592000.0),
            v35 = Date.compare(_:)(v10),
            v32 = (uint64_t (*)(char *, uint64_t))v49,
            v36 = v35,
            v49(v10, v30),
            v36 == 1))
      {
        v32(v28, v30);
        return 0;
      }
      else
      {
        v37 = v50;
        (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v6, enum case for Calendar.Component.year(_:), v50);
        static Calendar.current.getter(v38);
        v39 = Calendar.isDate(_:equalTo:toGranularity:)(v1, v28, v6);
        v22(v20, v15);
        (*(void (**)(char *, uint64_t))(v51 + 8))(v6, v37);
        if ((v39 & 1) != 0)
        {
          if (qword_100113F18 != -1)
            swift_once(&qword_100113F18, sub_1000B13BC);
          v41 = (void *)qword_10011FEE0;
          static Calendar.current.getter(v40);
          Calendar.startOfDay(for:)(v1);
          v22(v20, v15);
          v42.super.isa = Date._bridgeToObjectiveC()().super.isa;
          v43 = v49;
          v49(v10, v30);
          v44 = objc_msgSend(v41, "stringFromDate:", v42.super.isa);
        }
        else
        {
          if (qword_100113F20 != -1)
            swift_once(&qword_100113F20, sub_1000B13D0);
          v45 = (void *)qword_10011FEE8;
          static Calendar.current.getter(v40);
          Calendar.startOfDay(for:)(v1);
          v22(v20, v15);
          v42.super.isa = Date._bridgeToObjectiveC()().super.isa;
          v43 = v49;
          v49(v10, v30);
          v44 = objc_msgSend(v45, "stringFromDate:", v42.super.isa);
        }
        v46 = v44;

        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v43(v53, v30);
      }
    }
  }
  return v24;
}

BOOL sub_100031D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = type metadata accessor for Date(0);
  v34 = *(_QWORD *)(v1 - 8);
  v35 = v1;
  v3 = __chkstk_darwin(v1, v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Calendar(0, v3);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DateComponents(0, v8);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter(v14);
  v17 = sub_100005360(&qword_100114D70);
  v18 = type metadata accessor for Calendar.Component(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v17, v21 + *(_QWORD *)(v19 + 72), v20 | 7);
  *(_OWORD *)(v22 + 16) = xmmword_1000CD7E0;
  v23 = v22 + v21;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v19 + 104))(v23, enum case for Calendar.Component.hour(_:), v18);
  v24 = sub_1000516B4(v22);
  swift_setDeallocating(v22);
  swift_arrayDestroy(v23, 1, v18);
  v25 = swift_deallocClassInstance(v22, 32, 7);
  static Date.now.getter(v25);
  Calendar.dateComponents(_:from:to:)(v24, v0, v5);
  swift_bridgeObjectRelease(v24);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v5, v35);
  v26 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  v27 = DateComponents.hour.getter(v26);
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  return (v29 & 1) == 0 && v27 < 24;
}

uint64_t sub_100031F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  Class isa;
  NSDate v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100031D7C())
  {
    if (qword_100113F30 != -1)
      swift_once(&qword_100113F30, sub_1000B1474);
    v5 = (void *)qword_10011FEF8;
    isa = Date._bridgeToObjectiveC()().super.isa;
    static Date.now.getter(isa);
    v7.super.isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    v8 = objc_msgSend(v5, "localizedStringForDate:relativeToDate:", isa, v7.super.isa);

  }
  else
  {
    if (qword_100113F28 != -1)
      swift_once(&qword_100113F28, sub_1000B1454);
    v9 = (void *)qword_10011FEF0;
    v7.super.isa = Date._bridgeToObjectiveC()().super.isa;
    v8 = objc_msgSend(v9, "stringFromDate:", v7.super.isa);
  }

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v10;
}

_QWORD *sub_1000320F0(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    v4 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for LocalizedStringResource(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v4, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(_QWORD *)((char *)a2 + v8);
    *(_QWORD *)((char *)v4 + v8) = v10;
    *((_BYTE *)v4 + v9) = *((_BYTE *)a2 + v9);
    v11 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v11) = *((_BYTE *)a2 + v11);
    v12 = a3[10];
    *((_BYTE *)v4 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (_QWORD *)((char *)a2 + v12);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[11];
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    v19 = *(_QWORD *)v18;
    LOBYTE(v18) = v18[8];
    *(_QWORD *)v17 = v19;
    v17[8] = (char)v18;
    swift_retain(v10);
    swift_retain(v15);
  }
  swift_retain(v19);
  return v4;
}

uint64_t sub_1000321DC(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release(*(_QWORD *)(a1 + a2[5]));
  swift_release(*(_QWORD *)(a1 + a2[10] + 8));
  return swift_release(*(_QWORD *)(a1 + a2[11]));
}

uint64_t sub_10003223C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[11];
  v16 = a1 + v15;
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  *(_QWORD *)v16 = v18;
  *(_BYTE *)(v16 + 8) = (_BYTE)v17;
  swift_retain(v9);
  swift_retain(v14);
  swift_retain(v18);
  return a1;
}

uint64_t sub_100032300(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a2 + v7);
  v9 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v10 = a3[10];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  v13 = v12[1];
  v14 = v11[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = a3[11];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *v17;
  LOBYTE(v17) = *((_BYTE *)v17 + 8);
  v19 = *v16;
  *v16 = v18;
  *((_BYTE *)v16 + 8) = (_BYTE)v17;
  swift_retain(v18);
  swift_release(v19);
  return a1;
}

uint64_t sub_1000323EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v8) = *(_BYTE *)(a2 + v8);
  v9 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[11];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_BYTE *)(v11 + 8) = *(_BYTE *)(v12 + 8);
  *(_QWORD *)v11 = *(_QWORD *)v12;
  return a1;
}

uint64_t sub_100032494(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = *(_QWORD *)(a1 + v7);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  swift_release(v8);
  v9 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  v10 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  v11 = a3[10];
  v12 = *(_QWORD *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  swift_release(v12);
  v13 = a3[11];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  LOBYTE(v15) = *((_BYTE *)v15 + 8);
  v17 = *v14;
  *v14 = v16;
  *((_BYTE *)v14 + 8) = (_BYTE)v15;
  swift_release(v17);
  return a1;
}

uint64_t sub_10003255C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100032568);
}

uint64_t sub_100032568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for LocalizedStringResource(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000325E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000325F0);
}

uint64_t sub_1000325F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for LocalizedStringResource(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ModeMenuOption(uint64_t a1)
{
  uint64_t result;

  result = qword_100114DD0;
  if (!qword_100114DD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModeMenuOption);
  return result;
}

uint64_t sub_1000326A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for LocalizedStringResource(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = &unk_1000CEA70;
    v4[3] = &unk_1000CEA70;
    v4[4] = &unk_1000CEA70;
    v4[5] = &unk_1000CEA70;
    v4[6] = (char *)&value witness table for () + 64;
    v4[7] = &unk_1000CEA88;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100032740(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F5BE0, 1);
}

uint64_t sub_100032750@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  double v47;
  uint64_t v48;
  void *v49;
  void *v50;
  int v51;
  uint64_t v52;
  uint64_t KeyPath;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t OpaqueTypeConformance2;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  char *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD v107[3];

  v2 = v1;
  v106 = a1;
  v3 = type metadata accessor for AccessibilityChildBehavior(0);
  v104 = *(_QWORD *)(v3 - 8);
  v105 = v3;
  v5 = __chkstk_darwin(v3, v4);
  v103 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for AccessibilityTraits(0, v5);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102, v7);
  v101 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v99 = (char *)&v86 - v11;
  v12 = (int *)type metadata accessor for ModeMenuOption(0);
  v88 = *((_QWORD *)v12 - 1);
  __chkstk_darwin(v12, v13);
  v89 = v14;
  v90 = (uint64_t)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005360(&qword_100114E20);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100005360(&qword_100114E28);
  __chkstk_darwin(v86, v19);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100005360(&qword_100114E30);
  __chkstk_darwin(v87, v22);
  v24 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100005360(&qword_100114E38);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100005360(&qword_100114E40);
  v92 = *(_QWORD *)(v29 - 8);
  v93 = v29;
  __chkstk_darwin(v29, v30);
  v32 = (char *)&v86 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100005360(&qword_100114E48);
  __chkstk_darwin(v98, v33);
  v91 = (char *)&v86 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v36);
  v97 = (char *)&v86 - v37;
  v38 = sub_100005360(&qword_100114E50);
  v95 = *(_QWORD *)(v38 - 8);
  v96 = v38;
  __chkstk_darwin(v38, v39);
  v94 = (char *)&v86 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = v1 + v12[11];
  v42 = *(_QWORD *)v41;
  v43 = *(_BYTE *)(v41 + 8);
  v44 = swift_retain(*(_QWORD *)v41);
  v45 = sub_1000436BC(v44, v43);
  swift_release(v42);
  if (sub_1000090E4())
  {
    if (qword_100113B68 != -1)
      swift_once(&qword_100113B68, sub_10001BFB0);
    v46 = &qword_10011FA00;
  }
  else
  {
    if (qword_1001139B0 != -1)
      swift_once(&qword_1001139B0, sub_10001B78C);
    v46 = &qword_10011F838;
  }
  v47 = *(double *)v46;
  swift_release(v45);
  v48 = sub_100032F34(v2, (uint64_t)v18, v47);
  if (*(_BYTE *)(v2 + v12[7]) != 1)
  {
    v51 = static HierarchicalShapeStyle.tertiary.getter(v48);
LABEL_15:
    LODWORD(v107[0]) = v51;
    v49 = &type metadata for HierarchicalShapeStyle;
    v50 = &protocol witness table for HierarchicalShapeStyle;
    goto LABEL_16;
  }
  if ((*(_BYTE *)(v2 + v12[6]) & 1) == 0)
  {
    v51 = static HierarchicalShapeStyle.primary.getter(v48);
    goto LABEL_15;
  }
  if (qword_100113CE0 != -1)
    swift_once(&qword_100113CE0, sub_100052F74);
  v107[0] = qword_10011FC88;
  swift_retain(qword_10011FC88);
  v49 = &type metadata for Color;
  v50 = &protocol witness table for Color;
LABEL_16:
  v52 = AnyShapeStyle.init<A>(_:)(v107, v49, v50);
  sub_10000531C((uint64_t)v18, (uint64_t)v21, &qword_100114E20);
  *(_QWORD *)&v21[*(int *)(v86 + 36)] = v52;
  sub_100004F48((uint64_t)v18, &qword_100114E20);
  KeyPath = swift_getKeyPath(&unk_1000CEAF0);
  sub_10000531C((uint64_t)v21, (uint64_t)v24, &qword_100114E28);
  v54 = (uint64_t *)&v24[*(int *)(v87 + 36)];
  *v54 = KeyPath;
  v54[1] = 0x3FEB333333333333;
  sub_100004F48((uint64_t)v21, &qword_100114E28);
  sub_10000531C((uint64_t)v24, (uint64_t)v28, &qword_100114E30);
  v28[*(int *)(v25 + 36)] = 0;
  sub_100004F48((uint64_t)v24, &qword_100114E30);
  v55 = v90;
  sub_100033E1C(v2, v90);
  v56 = *(unsigned __int8 *)(v88 + 80);
  v57 = (v56 + 16) & ~v56;
  v58 = swift_allocObject(&unk_1001093D0, v57 + v89, v56 | 7);
  sub_100033F04(v55, v58 + v57);
  v59 = sub_100033F74();
  View.onTapGesture(count:perform:)(1, sub_100033F48, v58, v25, v59);
  swift_release(v58);
  sub_100004F48((uint64_t)v28, &qword_100114E38);
  if (*(_BYTE *)(v2 + v12[6]) == 1)
  {
    v60 = sub_100005360(&qword_100114EC8);
    v61 = v100;
    v62 = swift_allocObject(v60, ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80))+ *(_QWORD *)(v100 + 72), *(unsigned __int8 *)(v100 + 80) | 7);
    *(_OWORD *)(v62 + 16) = xmmword_1000CD7E0;
    static AccessibilityTraits.isSelected.getter();
    v107[0] = v62;
    v63 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v64 = sub_100005360(&qword_100114EB0);
    v65 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
    v66 = v99;
    v67 = v64;
    v68 = v102;
    dispatch thunk of SetAlgebra.init<A>(_:)(v107, v67, v65, v102, v63);
  }
  else
  {
    v107[0] = _swiftEmptyArrayStorage;
    v69 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
    v70 = sub_100005360(&qword_100114EB0);
    v71 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
    v66 = v99;
    v72 = v70;
    v68 = v102;
    dispatch thunk of SetAlgebra.init<A>(_:)(v107, v72, v71, v102, v69);
    v61 = v100;
  }
  v107[0] = v25;
  v107[1] = v59;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v107, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  v74 = (uint64_t)v91;
  v75 = v93;
  View.accessibilityAddTraits(_:)(v66, v93, OpaqueTypeConformance2);
  v76 = *(void (**)(char *, uint64_t))(v61 + 8);
  v76(v66, v68);
  v77 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v32, v75);
  v78 = v101;
  static AccessibilityTraits.isButton.getter(v77);
  v80 = (uint64_t)v97;
  v79 = v98;
  ModifiedContent<>.accessibilityAddTraits(_:)(v78, v98);
  v76(v78, v68);
  v81 = sub_100004F48(v74, &qword_100114E48);
  v82 = v103;
  static AccessibilityChildBehavior.combine.getter(v81);
  v83 = sub_10003417C();
  v84 = v94;
  View.accessibilityElement(children:)(v82, v79, v83);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v82, v105);
  sub_100004F48(v80, &qword_100114E48);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v95 + 32))(v106, v84, v96);
}

uint64_t sub_100032F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  char v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;

  v6 = sub_100005360(&qword_100114ED0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100005360(&qword_100114ED8);
  __chkstk_darwin(v71, v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100005360(&qword_100114EE0);
  __chkstk_darwin(v74, v13);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v72 = (uint64_t)&v70 - v18;
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v70 - v21;
  v23 = sub_100005360(&qword_100114EE8);
  __chkstk_darwin(v23, v24);
  v75 = (uint64_t)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v70 - v28;
  __chkstk_darwin(v30, v31);
  v73 = (uint64_t)&v70 - v32;
  v33 = type metadata accessor for ModeMenuOption(0);
  v34 = *(_QWORD *)(a1 + *(int *)(v33 + 20));
  v35 = *(int *)(v33 + 44);
  v70 = a1;
  v36 = (uint64_t *)(a1 + v35);
  v37 = *(_QWORD *)(a1 + v35);
  LOBYTE(a1) = *(_BYTE *)(a1 + v35 + 8);
  swift_retain(v34);
  v38 = swift_retain(v37);
  v39 = sub_1000436BC(v38, a1);
  swift_release(v37);
  v40 = sub_1000090E4();
  v78 = a2;
  v77 = v15;
  v76 = v22;
  if (v40)
  {
    if (qword_100113EC0 != -1)
      swift_once(&qword_100113EC0, sub_1000899A4);
    v41 = &qword_10011FE68;
  }
  else
  {
    if (qword_100113EA0 != -1)
      swift_once(&qword_100113EA0, sub_100089944);
    v41 = &qword_10011FE48;
  }
  v42 = *v41;
  swift_retain(*v41);
  swift_release(v39);
  KeyPath = swift_getKeyPath(&unk_1000CEB20);
  v44 = static HorizontalAlignment.center.getter();
  v45 = static Alignment.center.getter(v44);
  _FrameLayout.init(width:height:alignment:)(&v79, *(_QWORD *)&a3, 0, *(_QWORD *)&a3, 0, v45, v46);
  *(_QWORD *)&v84 = v34;
  *((_QWORD *)&v84 + 1) = KeyPath;
  *(_QWORD *)&v85 = v42;
  *((_QWORD *)&v85 + 1) = v44;
  *(_QWORD *)&v86 = v79;
  BYTE8(v86) = v80;
  *(_QWORD *)&v87 = v81;
  BYTE8(v87) = v82;
  v88 = v83;
  v47 = sub_100005360(&qword_100114EF0);
  v48 = sub_10003426C();
  View.accessibilityHidden(_:)(1, v47, v48);
  swift_release(v42);
  swift_release(KeyPath);
  swift_release(v34);
  v49 = v73;
  sub_100007CD8((uint64_t)v29, v73, &qword_100114EE8);
  *(_QWORD *)v9 = static VerticalAlignment.center.getter(v50);
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v51 = sub_100005360(&qword_100114F38);
  sub_100033518(v70, (uint64_t)&v9[*(int *)(v51 + 44)]);
  v52 = *v36;
  LOBYTE(v44) = *((_BYTE *)v36 + 8);
  v53 = swift_retain(*v36);
  v54 = sub_1000436BC(v53, v44);
  swift_release(v52);
  v55 = sub_1000A59B0();
  v56 = swift_release(v54);
  v57 = static Alignment.leading.getter(v56);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v84, *(_QWORD *)&v55, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v57, v58);
  sub_10000531C((uint64_t)v9, (uint64_t)v12, &qword_100114ED0);
  v59 = &v12[*(int *)(v71 + 36)];
  v60 = v89;
  *((_OWORD *)v59 + 4) = v88;
  *((_OWORD *)v59 + 5) = v60;
  *((_OWORD *)v59 + 6) = v90;
  v61 = v85;
  *(_OWORD *)v59 = v84;
  *((_OWORD *)v59 + 1) = v61;
  v62 = v87;
  *((_OWORD *)v59 + 2) = v86;
  *((_OWORD *)v59 + 3) = v62;
  sub_100004F48((uint64_t)v9, &qword_100114ED0);
  v63 = v72;
  sub_10000531C((uint64_t)v12, v72, &qword_100114ED8);
  *(_WORD *)(v63 + *(int *)(v74 + 36)) = 1;
  sub_100004F48((uint64_t)v12, &qword_100114ED8);
  v64 = (uint64_t)v76;
  sub_100007CD8(v63, (uint64_t)v76, &qword_100114EE0);
  v65 = v75;
  sub_10000531C(v49, v75, &qword_100114EE8);
  v66 = (uint64_t)v77;
  sub_10000531C(v64, (uint64_t)v77, &qword_100114EE0);
  v67 = v78;
  sub_10000531C(v65, v78, &qword_100114EE8);
  v68 = sub_100005360(&qword_100114F40);
  sub_10000531C(v66, v67 + *(int *)(v68 + 48), &qword_100114EE0);
  sub_100004F48(v64, &qword_100114EE0);
  sub_100004F48(v49, &qword_100114EE8);
  sub_100004F48(v66, &qword_100114EE0);
  return sub_100004F48(v65, &qword_100114EE8);
}

uint64_t sub_100033518@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t *v51;
  uint64_t v52;
  __n128 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  char *v69;
  void (*v70)(char *, uint64_t);
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  char *v75;
  uint64_t OpaqueTypeConformance2;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  _QWORD *v125;
  uint64_t v126;
  void *v127;
  void *v128;
  _QWORD v129[5];

  v119 = sub_100005360(&qword_100114F48);
  __chkstk_darwin(v119, v4);
  v120 = (uint64_t)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005360(&qword_100114F50);
  v113 = *(_QWORD *)(v6 - 8);
  v114 = v6;
  __chkstk_darwin(v6, v7);
  v112 = (char *)&v106 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = sub_100005360(&qword_100114F58);
  __chkstk_darwin(v118, v9);
  v111 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v117 = (uint64_t)&v106 - v13;
  v110 = type metadata accessor for LayoutDirection(0);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110, v14);
  v108 = (char *)&v106 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v107 = (char *)&v106 - v18;
  v19 = sub_100005360(&qword_100114F60);
  __chkstk_darwin(v19, v20);
  v116 = (uint64_t)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v115 = (char *)&v106 - v24;
  v25 = sub_100005360(&qword_100114F68);
  __chkstk_darwin(v25, v26);
  v125 = (uint64_t *)((char *)&v106 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v28, v29);
  v124 = (char *)&v106 - v30;
  v31 = type metadata accessor for LocalizedStringResource(0);
  v33 = __chkstk_darwin(v31, v32);
  v35 = (char *)&v106 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v36 + 16))(v35, a1, v33);
  v37 = Text.init(_:)(v35);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v44 = type metadata accessor for ModeMenuOption(0);
  v45 = (uint64_t *)(a1 + *(int *)(v44 + 44));
  v46 = *v45;
  v47 = *((_BYTE *)v45 + 8);
  v48 = swift_retain(*v45);
  v49 = sub_1000436BC(v48, v47);
  swift_release(v46);
  v50 = sub_1000090E4();
  v126 = a2;
  if (v50)
  {
    if (qword_100113EB8 != -1)
      swift_once(&qword_100113EB8, sub_10008998C);
    v51 = &qword_10011FE60;
  }
  else
  {
    if (qword_100113E98 != -1)
      swift_once(&qword_100113E98, sub_10008992C);
    v51 = &qword_10011FE40;
  }
  v52 = *v51;
  swift_retain(*v51);
  v53 = swift_release(v49);
  v54 = v41 & 1;
  v55 = Text.font(_:)(v52, v37, v39, v41 & 1, v43, v53);
  v122 = v56;
  v123 = v55;
  v121 = v57;
  v59 = v58;
  swift_release(v52);
  sub_10002DD44(v37, v39, v54);
  swift_bridgeObjectRelease(v43);
  if (*(_BYTE *)(a1 + *(int *)(v44 + 36)) == 1)
  {
    v60 = swift_retain(v46);
    v61 = sub_1000436BC(v60, v47);
    swift_release(v46);
    KeyPath = swift_getKeyPath(&unk_1000CEB50);
    v129[0] = v61;
    v63 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v129, KeyPath, v63);
    swift_release(KeyPath);
    v64 = v61 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
    swift_beginAccess(v61 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, v129, 0, 0);
    v65 = v109;
    v66 = v107;
    v67 = v110;
    (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v107, v64, v110);
    v68 = swift_release(v61);
    v69 = v108;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v65 + 104))(v108, enum case for LayoutDirection.leftToRight(_:), v67, v68);
    LOBYTE(v61) = static LayoutDirection.== infix(_:_:)(v66, v69);
    v70 = *(void (**)(char *, uint64_t))(v65 + 8);
    v70(v69, v67);
    v70(v66, v67);
    if ((v61 & 1) != 0)
    {
      v71 = v115;
      if (qword_100113BE8 != -1)
        swift_once(&qword_100113BE8, sub_10002E118);
      v72 = qword_10011FAA0;
      v127 = (void *)qword_10011FAA0;
      v73 = swift_retain(qword_10011FAA0);
      v74 = static Font.Weight.medium.getter(v73);
      v75 = v112;
      View.fontWeight(_:)(*(_QWORD *)&v74, 0, &type metadata for Image, &protocol witness table for Image);
      swift_release(v72);
      v127 = &type metadata for Image;
      v128 = &protocol witness table for Image;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
      v77 = v111;
      v78 = v114;
      View.accessibilityHidden(_:)(1, v114, OpaqueTypeConformance2);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v75, v78);
      v79 = (uint64_t)v77;
      v80 = v117;
      sub_100007CD8(v79, v117, &qword_100114F58);
      v81 = v120;
      sub_10000531C(v80, v120, &qword_100114F58);
      v82 = v81;
      v83 = v119;
      v84 = 0;
    }
    else
    {
      v71 = v115;
      if (qword_100113BF0 != -1)
        swift_once(&qword_100113BF0, sub_10002E154);
      v89 = qword_10011FAA8;
      v127 = (void *)qword_10011FAA8;
      v90 = swift_retain(qword_10011FAA8);
      v91 = static Font.Weight.medium.getter(v90);
      v92 = v112;
      View.fontWeight(_:)(*(_QWORD *)&v91, 0, &type metadata for Image, &protocol witness table for Image);
      swift_release(v89);
      v127 = &type metadata for Image;
      v128 = &protocol witness table for Image;
      v93 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
      v94 = v111;
      v95 = v114;
      View.accessibilityHidden(_:)(1, v114, v93);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v92, v95);
      v96 = (uint64_t)v94;
      v80 = v117;
      sub_100007CD8(v96, v117, &qword_100114F58);
      v81 = v120;
      sub_10000531C(v80, v120, &qword_100114F58);
      v82 = v81;
      v83 = v119;
      v84 = 1;
    }
    swift_storeEnumTagMultiPayload(v82, v83, v84);
    v97 = sub_100034414();
    _ConditionalContent<>.init(storage:)(v71, v81, v118, v118, v97, v97);
    v86 = (uint64_t)v124;
    sub_100004F48(v80, &qword_100114F58);
    v98 = v116;
    sub_10000531C((uint64_t)v71, v116, &qword_100114F60);
    v88 = (uint64_t)v125;
    *v125 = 0;
    *(_BYTE *)(v88 + 8) = 1;
    v99 = sub_100005360(&qword_100114F88);
    sub_10000531C(v98, v88 + *(int *)(v99 + 48), &qword_100114F60);
    sub_100004F48((uint64_t)v71, &qword_100114F60);
    sub_100004F48(v98, &qword_100114F60);
    v100 = sub_100005360(&qword_100114F70);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v88, 0, 1, v100);
    sub_100007CD8(v88, v86, &qword_100114F68);
    v87 = v126;
  }
  else
  {
    v85 = sub_100005360(&qword_100114F70);
    v86 = (uint64_t)v124;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v85 - 8) + 56))(v124, 1, 1, v85);
    v88 = (uint64_t)v125;
    v87 = v126;
  }
  v101 = v121 & 1;
  sub_10000531C(v86, v88, &qword_100114F68);
  v103 = v122;
  v102 = v123;
  *(_QWORD *)v87 = v123;
  *(_QWORD *)(v87 + 8) = v103;
  *(_BYTE *)(v87 + 16) = v101;
  *(_QWORD *)(v87 + 24) = v59;
  v104 = sub_100005360(&qword_100114F78);
  sub_10000531C(v88, v87 + *(int *)(v104 + 48), &qword_100114F68);
  sub_10002DE88(v102, v103, v101);
  swift_bridgeObjectRetain(v59);
  sub_100004F48(v86, &qword_100114F68);
  sub_100004F48(v88, &qword_100114F68);
  sub_10002DD44(v102, v103, v101);
  return swift_bridgeObjectRelease(v59);
}

double sub_100033DB4(uint64_t a1)
{
  uint64_t v1;
  double result;
  _QWORD v3[4];

  v3[2] = a1;
  v1 = static Animation.default.getter(a1);
  withAnimation<A>(_:_:)(v1, sub_100034228, v3, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_100033E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModeMenuOption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033E60()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (int *)type metadata accessor for ModeMenuOption(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for LocalizedStringResource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v7 + v1[5]));
  swift_release(*(_QWORD *)(v7 + v1[10] + 8));
  swift_release(*(_QWORD *)(v7 + v1[11]));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100033F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModeMenuOption(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double sub_100033F48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ModeMenuOption(0) - 8) + 80);
  return sub_100033DB4(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_100033F74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114E58;
  if (!qword_100114E58)
  {
    v1 = sub_100005608(&qword_100114E38);
    sub_100033FF8();
    sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114E58);
  }
  return result;
}

unint64_t sub_100033FF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114E60;
  if (!qword_100114E60)
  {
    v1 = sub_100005608(&qword_100114E30);
    sub_10003407C();
    sub_100008078(&qword_100114E98, &qword_100114EA0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114E60);
  }
  return result;
}

unint64_t sub_10003407C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114E68;
  if (!qword_100114E68)
  {
    v1 = sub_100005608(&qword_100114E28);
    sub_100034100();
    sub_100008078(&qword_100114E88, &qword_100114E90, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114E68);
  }
  return result;
}

unint64_t sub_100034100()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114E70;
  if (!qword_100114E70)
  {
    v1 = sub_100005608(&qword_100114E20);
    sub_100008078(&qword_100114E78, &qword_100114E80, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100114E70);
  }
  return result;
}

unint64_t sub_10003417C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100114EC0;
  if (!qword_100114EC0)
  {
    v1 = sub_100005608(&qword_100114E48);
    v2[0] = sub_100005608(&qword_100114E38);
    v2[1] = sub_100033F74();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114EC0);
  }
  return result;
}

uint64_t sub_100034228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for ModeMenuOption(0);
  return (*(uint64_t (**)(void))(v1 + *(int *)(v2 + 40)))();
}

unint64_t sub_10003426C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114EF8;
  if (!qword_100114EF8)
  {
    v1 = sub_100005608(&qword_100114EF0);
    sub_1000342D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114EF8);
  }
  return result;
}

unint64_t sub_1000342D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114F00;
  if (!qword_100114F00)
  {
    v1 = sub_100005608(&qword_100114F08);
    sub_100034344();
    sub_1000343C8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114F00);
  }
  return result;
}

unint64_t sub_100034344()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114F10;
  if (!qword_100114F10)
  {
    v1 = sub_100005608(&qword_100114F18);
    sub_100008078((unint64_t *)&qword_100114F20, &qword_100114F28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114F10);
  }
  return result;
}

unint64_t sub_1000343C8()
{
  unint64_t result;

  result = qword_100114F30;
  if (!qword_100114F30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _GridAlignmentModifier, &type metadata for _GridAlignmentModifier);
    atomic_store(result, (unint64_t *)&qword_100114F30);
  }
  return result;
}

unint64_t sub_100034414()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100114F80;
  if (!qword_100114F80)
  {
    v1 = sub_100005608(&qword_100114F58);
    v2[0] = &type metadata for Image;
    v2[1] = &protocol witness table for Image;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114F80);
  }
  return result;
}

uint64_t sub_1000344BC()
{
  _QWORD v1[2];

  v1[0] = sub_100005608(&qword_100114E48);
  v1[1] = sub_10003417C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
}

uint64_t destroy for SidebarButton(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[2]);
}

uint64_t initializeWithCopy for SidebarButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for SidebarButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  return a1;
}

__n128 initializeWithTake for SidebarButton(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for SidebarButton(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarButton(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarButton()
{
  return &type metadata for SidebarButton;
}

uint64_t sub_1000346F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F5C24, 1);
}

double sub_100034700(uint64_t a1, char a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t *v13;
  uint64_t v14;
  double result;
  _QWORD v16[2];

  v3 = a2 & 1;
  v4 = type metadata accessor for DynamicTypeSize(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_retain(a1);
  v10 = sub_1000436BC(v9, v3);
  swift_release(a1);
  v11 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
  v12 = objc_msgSend(v11, "userInterfaceIdiom");
  swift_release(v10);

  if (v12)
  {
    if (qword_100113C20 != -1)
      swift_once(&qword_100113C20, sub_10002E29C);
    v13 = &qword_10011FAD8;
  }
  else
  {
    if (qword_100113C28 != -1)
      swift_once(&qword_100113C28, sub_10002E2D8);
    v13 = &qword_10011FAE0;
  }
  v14 = *v13;
  swift_retain(*v13);
  v16[1] = v14;
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DynamicTypeSize.xxxLarge(_:), v4);
  View.dynamicTypeSize(_:)(v8, &type metadata for Image, &protocol witness table for Image);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  *(_QWORD *)&result = swift_release(v14).n128_u64[0];
  return result;
}

uint64_t sub_1000348A4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t (*v40)(char *, uint64_t);
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  int v59;
  int v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73[16];
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  void *v78;
  void *v79;
  unint64_t v80;
  uint64_t v81;

  v60 = a4;
  v59 = a2;
  v72 = a5;
  v7 = type metadata accessor for KeyEquivalent(0);
  v70 = *(_QWORD *)(v7 - 8);
  v71 = v7;
  v9 = __chkstk_darwin(v7, v8);
  v61 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for BorderlessButtonStyle(0, v9);
  v63 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62, v11);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360(&qword_100114F90);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005360(&qword_100114F98);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v58 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100005360(&qword_100114FA0);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67, v23);
  v25 = (char *)&v58 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100005360(&qword_100114FA8);
  v68 = *(_QWORD *)(v26 - 8);
  v69 = v26;
  __chkstk_darwin(v26, v27);
  v66 = (char *)&v58 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100005360(&qword_100114FB0);
  __chkstk_darwin(v29, v30);
  v64 = (char *)&v58 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = swift_allocObject(&unk_1001094C0, 41, 7);
  *(_QWORD *)(v32 + 16) = a1;
  v33 = v59 & 1;
  *(_BYTE *)(v32 + 24) = v59 & 1;
  *(_QWORD *)(v32 + 32) = a3;
  v34 = v60 & 1;
  *(_BYTE *)(v32 + 40) = v60 & 1;
  v74 = a1;
  v75 = v33;
  v76 = a3;
  v77 = v34;
  swift_retain(a3);
  swift_retain(a1);
  v35 = sub_100005360(&qword_100114FB8);
  v78 = &type metadata for Image;
  v79 = &protocol witness table for Image;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize(_:)>>, 1);
  v37 = v32;
  v38 = v61;
  Button.init(action:label:)(sub_100035014, v37, sub_100035034, v73, v35, OpaqueTypeConformance2);
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v22, v18, v14);
  v39 = &v22[*(int *)(v19 + 36)];
  *(_OWORD *)v39 = xmmword_1000CEB80;
  *((_OWORD *)v39 + 1) = xmmword_1000CEB90;
  v40 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v41 = (void *)v62;
  v42 = v40(v18, v14);
  BorderlessButtonStyle.init()(v42);
  v43 = sub_100035058();
  v44 = sub_100005178(&qword_100114FD8, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  View.buttonStyle<A>(_:)(v13, v19, v41, v43, v44);
  (*(void (**)(char *, void *))(v63 + 8))(v13, v41);
  sub_100035154((uint64_t)v22);
  v45 = KeyEquivalent.init(extendedGraphemeClusterLiteral:)(83, 0xE100000000000000);
  v46 = static EventModifiers.command.getter(v45);
  v47 = static EventModifiers.control.getter();
  v48 = EventModifiers.init(rawValue:)(0);
  v49 = EventModifiers.init(rawValue:)(v48);
  if (EventModifiers.init(rawValue:)(v49 & v46) != v46)
    v48 = EventModifiers.init(rawValue:)(v48 | v46);
  v50 = EventModifiers.init(rawValue:)(v48);
  if (EventModifiers.init(rawValue:)(v50 & v47) != v47)
    v48 = EventModifiers.init(rawValue:)(v48 | v47);
  v78 = (void *)v19;
  v79 = v41;
  v80 = v43;
  v81 = v44;
  v51 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v53 = v66;
  v52 = (void *)v67;
  View.keyboardShortcut(_:modifiers:)(v38, v48, v67, v51);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v38, v71);
  (*(void (**)(char *, void *))(v65 + 8))(v25, v52);
  v78 = v52;
  v79 = (void *)v51;
  v54 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:modifiers:)>>, 1);
  v55 = (uint64_t)v64;
  v56 = v69;
  View.accessibilityIdentifier(_:)(0x4272616265646953, 0xED00006E6F747475, v69, v54);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v53, v56);
  return sub_100035194(v55, v72);
}

double sub_100034D74(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;
  uint64_t v23;

  v5 = a4 & 1;
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100014124(v6, (uint64_t)qword_10011FEA8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sidebar toggled from the button", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = swift_retain(a3);
  v12 = sub_1000438AC(v11, v5);
  swift_release(a3);
  KeyPath = swift_getKeyPath(&unk_1000CEC10);
  v23 = v12;
  v14 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v14);
  swift_release(KeyPath);
  v15 = *(_BYTE *)(v12 + 16);
  v16 = v15 ^ 1;
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v17 = qword_10011FF08;
  sub_1000BF854();
  if ((v15 & 1) != 0
    || (v18 = swift_getKeyPath(&unk_1000CEC38),
        v23 = v17,
        v19 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00), ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, v18, v19), swift_release(v18), *(_BYTE *)(v17 + 64) != 1))
  {
    sub_100068F30(v16);
    v21 = v12;
  }
  else
  {
    v20 = swift_allocObject(&unk_1001094E8, 25, 7);
    *(_QWORD *)(v20 + 16) = v12;
    *(_BYTE *)(v20 + 24) = v16;
    swift_retain(v12);
    sub_1000C00F4((uint64_t)sub_100035210, v20);
    swift_release(v12);
    v21 = v20;
  }
  *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  return result;
}

uint64_t sub_100034FC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000348A4(*(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), a1);
}

uint64_t sub_100034FE8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

double sub_100035014()
{
  uint64_t v0;

  return sub_100034D74(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

double sub_100035034()
{
  uint64_t v0;

  return sub_100034700(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

unint64_t sub_100035058()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114FC0;
  if (!qword_100114FC0)
  {
    v1 = sub_100005608(&qword_100114F98);
    sub_1000350C4();
    sub_100035110();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114FC0);
  }
  return result;
}

unint64_t sub_1000350C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114FC8;
  if (!qword_100114FC8)
  {
    v1 = sub_100005608(&qword_100114F90);
    result = swift_getWitnessTable(&protocol conformance descriptor for Button<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100114FC8);
  }
  return result;
}

unint64_t sub_100035110()
{
  unint64_t result;

  result = qword_100114FD0;
  if (!qword_100114FD0)
  {
    result = swift_getWitnessTable(&unk_1000D40DC, &type metadata for TappableOutsets);
    atomic_store(result, (unint64_t *)&qword_100114FD0);
  }
  return result;
}

uint64_t sub_100035154(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_100114F98);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100035194(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100114FB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000351EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

double sub_100035210(uint64_t a1)
{
  uint64_t v1;

  return sub_100068D94(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
}

unint64_t sub_100035220()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = qword_100114FE0;
  if (!qword_100114FE0)
  {
    v1 = sub_100005608(&qword_100114FB0);
    v2 = sub_100005608(&qword_100114FA0);
    v5 = sub_100005608(&qword_100114F98);
    v6 = type metadata accessor for BorderlessButtonStyle(255, v3);
    v7 = sub_100035058();
    v8 = sub_100005178(&qword_100114FD8, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v5 = v2;
    v6 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:modifiers:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100114FE0);
  }
  return result;
}

double sub_100035338@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100035930(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100114788, &qword_100114798).n128_u64[0];
  return result;
}

uint64_t sub_100035390@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v47 = a5;
    v48 = a7;
    v46 = a3;
    v45 = a1;
    v44 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v44;
    v19 = a10;
    a1 = v45;
    a3 = v46;
    v18 = a12;
    a5 = v47;
    a7 = v48;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[11];
  a9[10] = v15[10];
  a9[11] = v34;
  a9[12] = v15[12];
  *(_OWORD *)((char *)a9 + 201) = *(_OWORD *)((char *)v15 + 201);
  v35 = v15[7];
  a9[6] = v15[6];
  a9[7] = v35;
  v36 = v15[9];
  a9[8] = v15[8];
  a9[9] = v36;
  v37 = v15[3];
  a9[2] = v15[2];
  a9[3] = v37;
  v38 = v15[5];
  a9[4] = v15[4];
  a9[5] = v38;
  v39 = v15[1];
  *a9 = *v15;
  a9[1] = v39;
  v40 = v49[5];
  a9[18] = v49[4];
  a9[19] = v40;
  a9[20] = v49[6];
  v41 = v49[1];
  a9[14] = v49[0];
  a9[15] = v41;
  v42 = v49[3];
  a9[16] = v49[2];
  a9[17] = v42;
  return sub_10003A794((uint64_t)v15);
}

__n128 sub_100035564@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  __int128 v40;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v43 = a3;
    v42 = a1;
    v41 = v20;
    v32 = static os_log_type_t.fault.getter();
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v41;
    v19 = a10;
    a1 = v42;
    a3 = v43;
    v18 = a12;
    a5 = v44;
    a7 = v45;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 80);
  *(_OWORD *)(a9 + 64) = *(_OWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 80) = v34;
  *(_BYTE *)(a9 + 96) = *(_BYTE *)(v15 + 96);
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v36;
  v37 = v46[1];
  *(_OWORD *)(a9 + 104) = v46[0];
  *(_OWORD *)(a9 + 120) = v37;
  v38 = v46[3];
  *(_OWORD *)(a9 + 136) = v46[2];
  result = (__n128)v46[4];
  v40 = v46[5];
  *(_OWORD *)(a9 + 200) = v46[6];
  *(_OWORD *)(a9 + 184) = v40;
  *(__n128 *)(a9 + 168) = result;
  *(_OWORD *)(a9 + 152) = v38;
  return result;
}

uint64_t *sub_100035720@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v44 = a7;
    v42 = a1;
    v43 = a5;
    v41 = a3;
    v40 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v19 = a10;
    v20 = v40;
    a3 = v41;
    a1 = v42;
    a5 = v43;
    v18 = a12;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 48);
  *(_OWORD *)(a9 + 32) = *(_OWORD *)(v15 + 32);
  *(_OWORD *)(a9 + 48) = v34;
  v35 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)a9 = *(_OWORD *)v15;
  *(_OWORD *)(a9 + 16) = v35;
  v36 = v45[2];
  *(_OWORD *)(a9 + 120) = v45[3];
  v37 = v45[5];
  *(_OWORD *)(a9 + 136) = v45[4];
  *(_OWORD *)(a9 + 152) = v37;
  *(_OWORD *)(a9 + 168) = v45[6];
  v38 = v45[1];
  *(_OWORD *)(a9 + 72) = v45[0];
  *(_OWORD *)(a9 + 88) = v38;
  *(_QWORD *)(a9 + 64) = *(_QWORD *)(v15 + 64);
  *(_OWORD *)(a9 + 104) = v36;
  return sub_10003AEFC((uint64_t *)v15);
}

double sub_1000358D8@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100035930(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100115238, &qword_100115240).n128_u64[0];
  return result;
}

__n128 sub_100035930@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t *a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v33;
  double v34;
  double v35;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v18 = v17;
  v19 = a9;
  v20 = a17;
  v22 = a14;
  v21 = a15;
  v23 = a12;
  v24 = a10;
  v25 = a2 & 1;
  v26 = a1;
  if ((_DWORD)v25)
    v26 = -INFINITY;
  v27 = a4 & 1;
  v28 = a3;
  if ((_DWORD)v27)
    v28 = v26;
  v29 = a6 & 1;
  v30 = a8 & 1;
  v31 = a5;
  if ((a6 & 1) != 0)
    v31 = v28;
  if (v26 > v28 || v28 > v31)
    goto LABEL_22;
  v33 = a7;
  if ((a8 & 1) != 0)
    v33 = -INFINITY;
  v34 = a10;
  if ((a11 & 1) != 0)
    v34 = v33;
  v35 = a12;
  if ((a13 & 1) != 0)
    v35 = v34;
  if (v33 > v34 || v34 > v35)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a3;
    v48 = a1;
    v46 = v25;
    v45 = v27;
    v38 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v39 = (void *)static Log.runtimeIssuesLog.getter();
    v40 = v38;
    v19 = a9;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v39, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = v45;
    v22 = a14;
    v21 = a15;
    v25 = v46;
    v24 = a10;
    v23 = a12;
    a3 = v47;
    a1 = v48;
    a5 = v49;
    a7 = v50;
    v20 = a17;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v25, *(_QWORD *)&a3, v27, *(_QWORD *)&a5, v29, *(_QWORD *)&a7, v30, *(_QWORD *)&v24, a11 & 1, *(_QWORD *)&v23, a13 & 1, v22, v21);
  sub_10000531C(v18, v19, a16);
  v41 = v19 + *(int *)(sub_100005360(v20) + 36);
  v42 = v51[5];
  *(_OWORD *)(v41 + 64) = v51[4];
  *(_OWORD *)(v41 + 80) = v42;
  *(_OWORD *)(v41 + 96) = v51[6];
  v43 = v51[1];
  *(_OWORD *)v41 = v51[0];
  *(_OWORD *)(v41 + 16) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(v41 + 32) = v51[2];
  *(__n128 *)(v41 + 48) = result;
  return result;
}

__n128 sub_100035AFC@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v18;
  uint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v30;
  double v31;
  double v32;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __n128 result;
  unsigned int v39;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v18 = a17;
  v19 = a15;
  v20 = a12;
  v21 = a10;
  v22 = a2 & 1;
  v23 = a1;
  if ((_DWORD)v22)
    v23 = -INFINITY;
  v24 = a4 & 1;
  v25 = a3;
  if ((_DWORD)v24)
    v25 = v23;
  v26 = a6 & 1;
  v27 = a8 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v25;
  if (v23 > v25 || v25 > v28)
    goto LABEL_22;
  v30 = a7;
  if ((a8 & 1) != 0)
    v30 = -INFINITY;
  v31 = a10;
  if ((a11 & 1) != 0)
    v31 = v30;
  v32 = a12;
  if ((a13 & 1) != 0)
    v32 = v31;
  if (v30 > v31 || v31 > v32)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v41 = a1;
    v42 = a3;
    v39 = v24;
    v40 = v22;
    v34 = static os_log_type_t.fault.getter();
    v35 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v24 = v39;
    v22 = v40;
    v19 = a15;
    v21 = a10;
    v20 = a12;
    a1 = v41;
    a3 = v42;
    a5 = v43;
    v18 = a17;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v22, *(_QWORD *)&a3, v24, *(_QWORD *)&a5, v26, *(_QWORD *)&a7, v27, *(_QWORD *)&v21, a11 & 1, *(_QWORD *)&v20, a13 & 1, a14, v19);
  *(_QWORD *)a9 = a16;
  *(_QWORD *)(a9 + 8) = v18;
  v36 = v45[5];
  *(_OWORD *)(a9 + 80) = v45[4];
  *(_OWORD *)(a9 + 96) = v36;
  *(_OWORD *)(a9 + 112) = v45[6];
  v37 = v45[1];
  *(_OWORD *)(a9 + 16) = v45[0];
  *(_OWORD *)(a9 + 32) = v37;
  result = (__n128)v45[3];
  *(_OWORD *)(a9 + 48) = v45[2];
  *(__n128 *)(a9 + 64) = result;
  return result;
}

double sub_100035C98@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v31;
  double v32;
  double v33;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  double result;
  __int128 v40;
  unsigned int v41;
  double v42;
  double v43;
  double v44;
  double v45;
  _OWORD v46[7];

  v19 = a16;
  v20 = a15;
  v21 = a12;
  v22 = a10;
  v23 = a2 & 1;
  v24 = a1;
  if ((_DWORD)v23)
    v24 = -INFINITY;
  v25 = a4 & 1;
  v26 = a3;
  if ((a4 & 1) != 0)
    v26 = v24;
  v27 = a6 & 1;
  v28 = a8 & 1;
  v29 = a5;
  if ((a6 & 1) != 0)
    v29 = v26;
  if (v24 > v26 || v26 > v29)
    goto LABEL_22;
  v31 = a7;
  if ((a8 & 1) != 0)
    v31 = -INFINITY;
  v32 = a10;
  if ((a11 & 1) != 0)
    v32 = v31;
  v33 = a12;
  if ((a13 & 1) != 0)
    v33 = v32;
  if (v31 > v32 || v32 > v33)
  {
LABEL_22:
    v44 = a5;
    v45 = a7;
    v42 = a1;
    v43 = a3;
    v41 = v23;
    v35 = static os_log_type_t.fault.getter();
    v36 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v20 = a15;
    v23 = v41;
    v22 = a10;
    v21 = a12;
    a1 = v42;
    a3 = v43;
    a5 = v44;
    a7 = v45;
    v19 = a16;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v46, *(_QWORD *)&a1, v23, *(_QWORD *)&a3, v25, *(_QWORD *)&a5, v27, *(_QWORD *)&a7, v28, *(_QWORD *)&v22, a11 & 1, *(_QWORD *)&v21, a13 & 1, a14, v20);
  v37 = v46[2];
  *(_OWORD *)(a9 + 72) = v46[3];
  v38 = v46[5];
  *(_OWORD *)(a9 + 88) = v46[4];
  *(_OWORD *)(a9 + 104) = v38;
  *(_OWORD *)(a9 + 120) = v46[6];
  result = *(double *)v46;
  v40 = v46[1];
  *(_OWORD *)(a9 + 24) = v46[0];
  *(_OWORD *)(a9 + 40) = v40;
  *(_QWORD *)a9 = v19;
  *(_QWORD *)(a9 + 8) = a17;
  *(_BYTE *)(a9 + 16) = a18 & 1;
  *(_OWORD *)(a9 + 56) = v37;
  return result;
}

__n128 sub_100035E5C@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int16 a19)
{
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  double v33;
  double v35;
  double v36;
  double v37;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  __int128 v42;
  __int128 v43;
  __n128 result;
  unsigned int v45;
  unsigned int v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[7];

  v20 = a19;
  v21 = a17;
  v22 = a15;
  v23 = a16;
  v24 = a12;
  v25 = a10;
  v26 = a2 & 1;
  v27 = a1;
  if ((_DWORD)v26)
    v27 = -INFINITY;
  v28 = a4 & 1;
  v29 = a3;
  if ((_DWORD)v28)
    v29 = v27;
  v30 = a6 & 1;
  v31 = a8 & 1;
  v32 = a13 & 1;
  v33 = a5;
  if ((a6 & 1) != 0)
    v33 = v29;
  if (v27 > v29 || v29 > v33)
    goto LABEL_22;
  v35 = a7;
  if ((_DWORD)v31)
    v35 = -INFINITY;
  v36 = a10;
  if ((a11 & 1) != 0)
    v36 = v35;
  v37 = a12;
  if ((a13 & 1) != 0)
    v37 = v36;
  if (v35 > v36 || v36 > v37)
  {
LABEL_22:
    v49 = a5;
    v50 = a7;
    v47 = a1;
    v48 = a3;
    v45 = v28;
    v46 = v26;
    v39 = v31;
    v40 = static os_log_type_t.fault.getter();
    v41 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Contradictory frame constraints specified.", 42, 2, &_swiftEmptyArrayStorage);

    v32 = a13 & 1;
    v31 = v39;
    v28 = v45;
    v26 = v46;
    v22 = a15;
    v25 = a10;
    v24 = a12;
    a1 = v47;
    a3 = v48;
    v23 = a16;
    v21 = a17;
    a5 = v49;
    v20 = a19;
    a7 = v50;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v51, *(_QWORD *)&a1, v26, *(_QWORD *)&a3, v28, *(_QWORD *)&a5, v30, *(_QWORD *)&a7, v31, *(_QWORD *)&v25, a11 & 1, *(_QWORD *)&v24, v32, a14, v22);
  *(_QWORD *)a9 = v23;
  *(_QWORD *)(a9 + 8) = v21;
  *(_QWORD *)(a9 + 16) = a18;
  *(_BYTE *)(a9 + 24) = v20;
  *(_BYTE *)(a9 + 25) = HIBYTE(v20) & 1;
  v42 = v51[5];
  *(_OWORD *)(a9 + 96) = v51[4];
  *(_OWORD *)(a9 + 112) = v42;
  *(_OWORD *)(a9 + 128) = v51[6];
  v43 = v51[1];
  *(_OWORD *)(a9 + 32) = v51[0];
  *(_OWORD *)(a9 + 48) = v43;
  result = (__n128)v51[3];
  *(_OWORD *)(a9 + 64) = v51[2];
  *(__n128 *)(a9 + 80) = result;
  return result;
}

double sub_100036024@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100035930(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100115218, &qword_100115220).n128_u64[0];
  return result;
}

double sub_10003607C@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100035930(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100115228, &qword_100115230).n128_u64[0];
  return result;
}

__n128 sub_1000360D4@<Q0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v29;
  double v30;
  double v31;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 result;
  unsigned int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  _OWORD v45[7];

  v16 = v15;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((_DWORD)v21)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a5;
  if ((a6 & 1) != 0)
    v27 = v24;
  if (v22 > v24 || v24 > v27)
    goto LABEL_22;
  v29 = a7;
  if ((a8 & 1) != 0)
    v29 = -INFINITY;
  v30 = a10;
  if ((a11 & 1) != 0)
    v30 = v29;
  v31 = a12;
  if ((a13 & 1) != 0)
    v31 = v30;
  if (v29 > v30 || v30 > v31)
  {
LABEL_22:
    v43 = a5;
    v44 = a7;
    v42 = a3;
    v41 = a1;
    v40 = v21;
    v33 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v18 = a15;
    v21 = v40;
    a1 = v41;
    v20 = a10;
    a3 = v42;
    v19 = a12;
    a5 = v43;
    a7 = v44;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, a13 & 1, a14, v18);
  v35 = sub_100005360(&qword_100115258);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(a9, v16, v35);
  v36 = a9 + *(int *)(sub_100005360(&qword_100115260) + 36);
  v37 = v45[5];
  *(_OWORD *)(v36 + 64) = v45[4];
  *(_OWORD *)(v36 + 80) = v37;
  *(_OWORD *)(v36 + 96) = v45[6];
  v38 = v45[1];
  *(_OWORD *)v36 = v45[0];
  *(_OWORD *)(v36 + 16) = v38;
  result = (__n128)v45[3];
  *(_OWORD *)(v36 + 32) = v45[2];
  *(__n128 *)(v36 + 48) = result;
  return result;
}

uint64_t sub_1000362A0@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  _OWORD *v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  unsigned int v44;
  double v45;
  double v46;
  double v47;
  double v48;
  _OWORD v49[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v47 = a5;
    v48 = a7;
    v46 = a3;
    v45 = a1;
    v44 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v44;
    v19 = a10;
    a1 = v45;
    a3 = v46;
    v18 = a12;
    a5 = v47;
    a7 = v48;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v49, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = v15[11];
  a9[10] = v15[10];
  a9[11] = v34;
  a9[12] = v15[12];
  *(_OWORD *)((char *)a9 + 201) = *(_OWORD *)((char *)v15 + 201);
  v35 = v15[7];
  a9[6] = v15[6];
  a9[7] = v35;
  v36 = v15[9];
  a9[8] = v15[8];
  a9[9] = v36;
  v37 = v15[3];
  a9[2] = v15[2];
  a9[3] = v37;
  v38 = v15[5];
  a9[4] = v15[4];
  a9[5] = v38;
  v39 = v15[1];
  *a9 = *v15;
  a9[1] = v39;
  v40 = v49[5];
  a9[18] = v49[4];
  a9[19] = v40;
  a9[20] = v49[6];
  v41 = v49[1];
  a9[14] = v49[0];
  a9[15] = v41;
  v42 = v49[3];
  a9[16] = v49[2];
  a9[17] = v42;
  return sub_10003AF90((uint64_t)v15);
}

uint64_t sub_100036474@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  const void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  double v30;
  double v31;
  double v32;
  uint64_t v34;
  void *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double v40;
  double v41;
  double v42;
  double v43;
  _OWORD v45[7];

  v16 = v15;
  v17 = a9;
  v18 = a15;
  v19 = a12;
  v20 = a10;
  v21 = a2 & 1;
  v22 = a1;
  if ((a2 & 1) != 0)
    v22 = -INFINITY;
  v23 = a4 & 1;
  v24 = a3;
  if ((a4 & 1) != 0)
    v24 = v22;
  v25 = a6 & 1;
  v26 = a8 & 1;
  v27 = a13 & 1;
  v28 = a5;
  if ((a6 & 1) != 0)
    v28 = v24;
  if (v22 > v24 || v24 > v28)
    goto LABEL_22;
  v30 = a7;
  if ((a8 & 1) != 0)
    v30 = -INFINITY;
  v31 = a10;
  if ((a11 & 1) != 0)
    v31 = v30;
  v32 = a12;
  if ((a13 & 1) != 0)
    v32 = v31;
  if (v30 > v31 || v31 > v32)
  {
LABEL_22:
    v43 = a7;
    v42 = a5;
    v40 = a1;
    v41 = a3;
    v34 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v35 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v27 = a13 & 1;
    v18 = a15;
    v20 = a10;
    a1 = v40;
    a3 = v41;
    v19 = a12;
    a5 = v42;
    a7 = v43;
    v17 = a9;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, *(_QWORD *)&a1, v21, *(_QWORD *)&a3, v23, *(_QWORD *)&a5, v25, *(_QWORD *)&a7, v26, *(_QWORD *)&v20, a11 & 1, *(_QWORD *)&v19, v27, a14, v18);
  memcpy((void *)v17, v16, 0x108uLL);
  v36 = v45[5];
  *(_OWORD *)(v17 + 328) = v45[4];
  *(_OWORD *)(v17 + 344) = v36;
  *(_OWORD *)(v17 + 360) = v45[6];
  v37 = v45[1];
  *(_OWORD *)(v17 + 264) = v45[0];
  *(_OWORD *)(v17 + 280) = v37;
  v38 = v45[3];
  *(_OWORD *)(v17 + 296) = v45[2];
  *(_OWORD *)(v17 + 312) = v38;
  return sub_10003B04C((uint64_t)v16);
}

double sub_100036624@<D0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  double result;

  *(_QWORD *)&result = sub_100035930(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, &qword_100115248, &qword_100115250).n128_u64[0];
  return result;
}

_QWORD *sub_10003667C@<X0>(double a1@<X0>, char a2@<W1>, double a3@<X2>, char a4@<W3>, double a5@<X4>, char a6@<W5>, double a7@<X6>, char a8@<W7>, _OWORD *a9@<X8>, double a10, char a11, double a12, char a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v28;
  double v29;
  double v30;
  uint64_t v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned int v43;
  double v44;
  double v45;
  double v46;
  double v47;
  _OWORD v48[7];

  v17 = a15;
  v18 = a12;
  v19 = a10;
  v20 = a2 & 1;
  v21 = a1;
  if ((_DWORD)v20)
    v21 = -INFINITY;
  v22 = a4 & 1;
  v23 = a3;
  if ((a4 & 1) != 0)
    v23 = v21;
  v24 = a6 & 1;
  v25 = a8 & 1;
  v26 = a5;
  if ((a6 & 1) != 0)
    v26 = v23;
  if (v21 > v23 || v23 > v26)
    goto LABEL_22;
  v28 = a7;
  if ((a8 & 1) != 0)
    v28 = -INFINITY;
  v29 = a10;
  if ((a11 & 1) != 0)
    v29 = v28;
  v30 = a12;
  if ((a13 & 1) != 0)
    v30 = v29;
  if (v28 > v29 || v29 > v30)
  {
LABEL_22:
    v46 = a5;
    v47 = a7;
    v45 = a3;
    v44 = a1;
    v43 = v20;
    v32 = static os_log_type_t.fault.getter(*(_QWORD *)&a1);
    v33 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    v17 = a15;
    v20 = v43;
    v19 = a10;
    a1 = v44;
    a3 = v45;
    v18 = a12;
    a5 = v46;
    a7 = v47;
  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v48, *(_QWORD *)&a1, v20, *(_QWORD *)&a3, v22, *(_QWORD *)&a5, v24, *(_QWORD *)&a7, v25, *(_QWORD *)&v19, a11 & 1, *(_QWORD *)&v18, a13 & 1, a14, v17);
  v34 = *(_OWORD *)(v15 + 112);
  a9[6] = *(_OWORD *)(v15 + 96);
  a9[7] = v34;
  v35 = *(_OWORD *)(v15 + 144);
  a9[8] = *(_OWORD *)(v15 + 128);
  a9[9] = v35;
  v36 = *(_OWORD *)(v15 + 48);
  a9[2] = *(_OWORD *)(v15 + 32);
  a9[3] = v36;
  v37 = *(_OWORD *)(v15 + 80);
  a9[4] = *(_OWORD *)(v15 + 64);
  a9[5] = v37;
  v38 = *(_OWORD *)(v15 + 16);
  *a9 = *(_OWORD *)v15;
  a9[1] = v38;
  v39 = v48[5];
  a9[14] = v48[4];
  a9[15] = v39;
  a9[16] = v48[6];
  v40 = v48[1];
  a9[10] = v48[0];
  a9[11] = v40;
  v41 = v48[3];
  a9[12] = v48[2];
  a9[13] = v41;
  return sub_10002D8D0((_QWORD *)v15);
}

uint64_t sub_100036838@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  _OWORD *v52;
  __int128 v53;
  __int128 v54;
  uint64_t OpaqueTypeConformance2;
  char *v56;
  uint64_t v57;
  char *v58;
  __n128 v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  char *v64;
  _OWORD *v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  __n128 v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  __n128 v81;
  uint64_t v82;
  _OWORD *v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  void (*v100)(char *, uint64_t, uint64_t);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint64_t v118;
  _OWORD v119[40];
  _OWORD v120[2];
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _OWORD v130[2];
  _OWORD v131[10];
  _OWORD v132[2];
  _OWORD v133[2];
  _OWORD v134[21];
  _QWORD v135[57];

  v2 = v1;
  v115 = a1;
  v104 = type metadata accessor for PPTTestCase.Name(0);
  v118 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104, v3);
  v5 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005360(&qword_1001150D8);
  v102 = *(_QWORD *)(v6 - 8);
  v103 = v6;
  __chkstk_darwin(v6, v7);
  v116 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_1001150E0);
  v105 = *(_QWORD *)(v9 - 8);
  v106 = v9;
  __chkstk_darwin(v9, v10);
  v101 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_1001150E8);
  v107 = *(_QWORD *)(v12 - 8);
  v108 = v12;
  __chkstk_darwin(v12, v13);
  v117 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005360(&qword_1001150F0);
  v110 = *(_QWORD *)(v15 - 8);
  v111 = v15;
  __chkstk_darwin(v15, v16);
  v109 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005360(&qword_1001150F8);
  v113 = *(_QWORD *)(v18 - 8);
  v114 = v18;
  __chkstk_darwin(v18, v19);
  v112 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = static Alignment.center.getter(v21);
  v24 = v23;
  sub_100037144((uint64_t)&v121);
  KeyPath = swift_getKeyPath(&unk_1000CECE8);
  v119[0] = *(_OWORD *)(v1 + 48);
  v26 = sub_100005360(&qword_100115100);
  v27 = State.projectedValue.getter(v135, v26);
  *(_QWORD *)&v131[0] = v22;
  *((_QWORD *)&v131[0] + 1) = v24;
  v131[8] = v128;
  v131[9] = v129;
  v132[0] = v130[0];
  *(_OWORD *)((char *)v132 + 10) = *(_OWORD *)((char *)v130 + 10);
  v131[5] = v125;
  v131[6] = v126;
  v131[7] = v127;
  v131[1] = v121;
  v131[2] = v122;
  v131[3] = v123;
  v131[4] = v124;
  *(_QWORD *)&v133[0] = KeyPath;
  *((_QWORD *)&v133[0] + 1) = v135[0];
  *(_QWORD *)&v133[1] = v135[1];
  BYTE8(v133[1]) = v135[2];
  v119[38] = v132[0];
  v119[39] = v132[1];
  v119[34] = v126;
  v119[35] = v127;
  v119[36] = v128;
  v119[37] = v129;
  v119[30] = v122;
  v119[31] = v123;
  v119[32] = v124;
  v119[33] = v125;
  v119[28] = v131[0];
  v119[29] = v121;
  v120[0] = v133[0];
  *(_OWORD *)((char *)v120 + 9) = *(_OWORD *)((char *)v133 + 9);
  v28 = static Alignment.center.getter(v27);
  sub_100035390(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v134, 0.0, 1, INFINITY, 0, v28, v29);
  v30 = sub_100039688((uint64_t)v131);
  v31 = static Color.clear.getter(v30);
  v32 = static SafeAreaRegions.keyboard.getter();
  LOBYTE(KeyPath) = static Edge.Set.all.getter(v32);
  v33 = (_OWORD *)swift_allocObject(&unk_100109600, 96, 7);
  v34 = *(_OWORD *)(v2 + 48);
  v33[3] = *(_OWORD *)(v2 + 32);
  v33[4] = v34;
  v33[5] = *(_OWORD *)(v2 + 64);
  v35 = *(_OWORD *)(v2 + 16);
  v33[1] = *(_OWORD *)v2;
  v33[2] = v35;
  v36 = (_OWORD *)swift_allocObject(&unk_100109628, 96, 7);
  v37 = *(_OWORD *)(v2 + 48);
  v36[3] = *(_OWORD *)(v2 + 32);
  v36[4] = v37;
  v36[5] = *(_OWORD *)(v2 + 64);
  v38 = *(_OWORD *)(v2 + 16);
  v36[1] = *(_OWORD *)v2;
  v36[2] = v38;
  sub_100039910((uint64_t *)v2);
  v39 = sub_100039910((uint64_t *)v2);
  v40 = static Alignment.center.getter(v39);
  v42 = v41;
  memcpy(v119, v134, 0x150uLL);
  *(_QWORD *)&v119[21] = v31;
  *((_QWORD *)&v119[21] + 1) = v32;
  LOBYTE(v119[22]) = KeyPath;
  *((_QWORD *)&v119[22] + 1) = sub_100037734;
  *(_QWORD *)&v119[23] = 0;
  *((_QWORD *)&v119[23] + 1) = sub_1000398FC;
  *(_QWORD *)&v119[24] = v33;
  *((_QWORD *)&v119[24] + 1) = sub_100037A70;
  *(_QWORD *)&v119[25] = 0;
  *((_QWORD *)&v119[25] + 1) = sub_100039908;
  *(_QWORD *)&v119[26] = v36;
  *((_QWORD *)&v119[26] + 1) = v40;
  *(_QWORD *)&v119[27] = v42;
  v43 = (_OWORD *)swift_allocObject(&unk_100109650, 96, 7);
  v44 = *(_OWORD *)(v2 + 48);
  v43[3] = *(_OWORD *)(v2 + 32);
  v43[4] = v44;
  v43[5] = *(_OWORD *)(v2 + 64);
  v45 = *(_OWORD *)(v2 + 16);
  v43[1] = *(_OWORD *)v2;
  v43[2] = v45;
  sub_100039910((uint64_t *)v2);
  v46 = sub_100005360(&qword_100115108);
  v47 = sub_10003998C();
  View.onOpenURL(perform:)(sub_100039984, v43, v46, v47);
  swift_release(v43);
  memcpy(v135, v119, 0x1B8uLL);
  sub_100039B18((uint64_t)v135);
  if (qword_100113C30 != -1)
    swift_once(&qword_100113C30, sub_1000307B4);
  v48 = v104;
  v49 = sub_100014124(v104, (uint64_t)qword_10011FAE8);
  v50 = v118;
  v51 = v5;
  v100 = *(void (**)(char *, uint64_t, uint64_t))(v118 + 16);
  v100(v5, v49, v48);
  v52 = (_OWORD *)swift_allocObject(&unk_100109678, 96, 7);
  v53 = *(_OWORD *)(v2 + 48);
  v52[3] = *(_OWORD *)(v2 + 32);
  v52[4] = v53;
  v52[5] = *(_OWORD *)(v2 + 64);
  v54 = *(_OWORD *)(v2 + 16);
  v52[1] = *(_OWORD *)v2;
  v52[2] = v54;
  sub_100039910((uint64_t *)v2);
  *(_QWORD *)&v119[0] = v46;
  *((_QWORD *)&v119[0] + 1) = v47;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v119, &opaque type descriptor for <<opaque return type of View.onOpenURL(perform:)>>, 1);
  v56 = v101;
  v57 = v103;
  v58 = v116;
  View.onTest(_:handler:)(v51, sub_100039C08, v52, v103, OpaqueTypeConformance2);
  v59 = swift_release(v52);
  v118 = *(_QWORD *)(v50 + 8);
  ((void (*)(char *, uint64_t, __n128))v118)(v51, v48, v59);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v58, v57);
  v60 = v56;
  v61 = v57;
  if (qword_100113C38 != -1)
    swift_once(&qword_100113C38, sub_1000307DC);
  v62 = sub_100014124(v48, (uint64_t)qword_10011FB00);
  v63 = v100;
  v100(v51, v62, v48);
  v64 = v51;
  v65 = (_OWORD *)swift_allocObject(&unk_1001096A0, 96, 7);
  v66 = *(_OWORD *)(v2 + 48);
  v65[3] = *(_OWORD *)(v2 + 32);
  v65[4] = v66;
  v65[5] = *(_OWORD *)(v2 + 64);
  v67 = *(_OWORD *)(v2 + 16);
  v65[1] = *(_OWORD *)v2;
  v65[2] = v67;
  sub_100039910((uint64_t *)v2);
  *(_QWORD *)&v119[0] = v61;
  *((_QWORD *)&v119[0] + 1) = OpaqueTypeConformance2;
  v68 = swift_getOpaqueTypeConformance2(v119, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v69 = v51;
  v70 = v106;
  View.onTest(_:handler:)(v69, sub_100039C14, v65, v106, v68);
  v71 = swift_release(v65);
  ((void (*)(char *, uint64_t, __n128))v118)(v64, v48, v71);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v60, v70);
  v72 = v63;
  if (qword_100113C40 != -1)
    swift_once(&qword_100113C40, sub_100030800);
  v73 = sub_100014124(v48, (uint64_t)qword_10011FB18);
  v63(v64, v73, v48);
  v74 = (_OWORD *)swift_allocObject(&unk_1001096C8, 96, 7);
  v75 = *(_OWORD *)(v2 + 48);
  v74[3] = *(_OWORD *)(v2 + 32);
  v74[4] = v75;
  v74[5] = *(_OWORD *)(v2 + 64);
  v76 = *(_OWORD *)(v2 + 16);
  v74[1] = *(_OWORD *)v2;
  v74[2] = v76;
  sub_100039910((uint64_t *)v2);
  *(_QWORD *)&v119[0] = v70;
  *((_QWORD *)&v119[0] + 1) = v68;
  v77 = swift_getOpaqueTypeConformance2(v119, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v78 = v108;
  v79 = v109;
  v80 = v117;
  View.onTest(_:handler:)(v64, sub_100039C20, v74, v108, v77);
  v81 = swift_release(v74);
  ((void (*)(char *, uint64_t, __n128))v118)(v64, v48, v81);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v80, v78);
  if (qword_100113C48 != -1)
    swift_once(&qword_100113C48, sub_10003082C);
  v82 = sub_100014124(v48, (uint64_t)qword_10011FB30);
  v72(v64, v82, v48);
  v83 = (_OWORD *)swift_allocObject(&unk_1001096F0, 96, 7);
  v84 = *(_OWORD *)(v2 + 48);
  v83[3] = *(_OWORD *)(v2 + 32);
  v83[4] = v84;
  v83[5] = *(_OWORD *)(v2 + 64);
  v85 = *(_OWORD *)(v2 + 16);
  v83[1] = *(_OWORD *)v2;
  v83[2] = v85;
  sub_100039910((uint64_t *)v2);
  *(_QWORD *)&v119[0] = v78;
  *((_QWORD *)&v119[0] + 1) = v77;
  v86 = swift_getOpaqueTypeConformance2(v119, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
  v87 = v111;
  v88 = v112;
  View.onTest(_:handler:)(v64, sub_100039C74, v83, v111, v86);
  v89 = swift_release(v83);
  ((void (*)(char *, uint64_t, __n128))v118)(v64, v48, v89);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v79, v87);
  v90 = type metadata accessor for CalculatorViewModel(0);
  v91 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v92 = Environment.init<A>(_:)(v90, v90, v91);
  LOBYTE(v87) = v93;
  v95 = v113;
  v94 = v114;
  v96 = v115;
  (*(void (**)(uint64_t, char *, uint64_t))(v113 + 16))(v115, v88, v114);
  v97 = v96 + *(int *)(sub_100005360(&qword_100115168) + 36);
  *(_QWORD *)v97 = v92;
  *(_BYTE *)(v97 + 8) = v87 & 1;
  return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v88, v94);
}

__n128 sub_100037144@<Q0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  _BYTE v21[176];
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  _QWORD v28[4];
  char v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[32];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[26];

  v2 = v1;
  *((_QWORD *)&v34 + 1) = &type metadata for NotesFeatureFlags;
  *(_QWORD *)&v35 = sub_10003AA0C();
  v4 = isFeatureEnabled(_:)(&v33);
  sub_100004F28(&v33);
  if ((v4 & 1) != 0)
  {
    v5 = *v2;
    v6 = *((_BYTE *)v2 + 8);
    v7 = swift_retain(*v2);
    v8 = sub_100043890(v7, v6);
    swift_release(v5);
    KeyPath = swift_getKeyPath(&unk_1000CED60);
    *(_QWORD *)&v33 = v8;
    v10 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, KeyPath, v10);
    swift_release(KeyPath);
    v11 = *(unsigned __int8 *)(v8 + 48);
    swift_release(v8);
    __asm { BR              X9 }
  }
  sub_100038320((uint64_t)&v33);
  v22 = v33;
  v23 = BYTE8(v33);
  v24 = v34;
  v25 = BYTE8(v34);
  v26 = v35;
  v27 = BYTE8(v35);
  LOBYTE(v28[0]) = v36[0];
  *(_OWORD *)&v28[1] = *(_OWORD *)&v36[8];
  v28[3] = *(_QWORD *)&v36[24];
  v29 = v37;
  v30 = *((_QWORD *)&v37 + 1);
  v31 = v38;
  LOBYTE(v32) = v39;
  sub_10003AA50((uint64_t)&v22);
  sub_100007CD8((uint64_t)&v22, (uint64_t)v21, &qword_100115198);
  v12 = sub_100005360(&qword_1001151A0);
  v13 = sub_100005360(&qword_1001151A8);
  v14 = sub_10003AA5C();
  v15 = sub_10003ABD4();
  _ConditionalContent<>.init(storage:)(&v33, v21, v12, v13, v14, v15);
  v16 = *(_OWORD *)v41;
  *(_OWORD *)(a1 + 128) = v40;
  *(_OWORD *)(a1 + 144) = v16;
  *(_OWORD *)(a1 + 154) = *(_OWORD *)&v41[10];
  v17 = v37;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)&v36[16];
  *(_OWORD *)(a1 + 80) = v17;
  v18 = v39;
  *(_OWORD *)(a1 + 96) = v38;
  *(_OWORD *)(a1 + 112) = v18;
  v19 = v34;
  *(_OWORD *)a1 = v33;
  *(_OWORD *)(a1 + 16) = v19;
  result = *(__n128 *)v36;
  *(_OWORD *)(a1 + 32) = v35;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_1000376C8(uint64_t a1)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  _QWORD v5[2];
  char v6;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_BYTE *)(a1 + 16);
  v5[0] = *(_QWORD *)a1;
  v5[1] = v1;
  v6 = v2;
  v3 = sub_10000765C();
  swift_retain(v5[0]);
  swift_retain(v1);
  return EnvironmentValues.subscript.setter(v5, &type metadata for ModeMenuPresentationKey, &type metadata for ModeMenuPresentationKey, v3);
}

void sub_100037734(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = GeometryProxy.size.getter();
  *(_QWORD *)(a1 + 8) = v2;
}

void sub_10003775C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v11 = sub_100039910((uint64_t *)a2);
  v12 = static MainActor.shared.getter(v11);
  v13 = swift_allocObject(&unk_1001097B8, 128, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v13 + 80) = v14;
  *(_OWORD *)(v13 + 96) = *(_OWORD *)(a2 + 64);
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 112) = v8;
  *(_QWORD *)(v13 + 120) = v9;
  v16 = sub_100096424((uint64_t)v7, (uint64_t)&unk_100115188, v13);
  swift_release(v16);
}

uint64_t sub_100037860(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(double *)(v6 + 32) = a1;
  *(double *)(v6 + 40) = a2;
  *(_QWORD *)(v6 + 24) = a6;
  v7 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 48) = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000378D0, v8, v9);
}

uint64_t sub_1000378D0()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v2 = *(double *)(v0 + 32);
  v1 = *(double *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 48));
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_BYTE *)(v3 + 24);
  v6 = swift_retain(v4);
  v7 = sub_1000436BC(v6, v5);
  swift_release(v4);
  KeyPath = swift_getKeyPath(&unk_1000CED38);
  *(_QWORD *)(v0 + 16) = v7;
  v9 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(double *)(v7 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
  v11 = *(double *)(v7 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize + 8);
  swift_release(v7);
  if (v10 != v2 || v11 != v1)
  {
    v14 = *(_QWORD *)(v0 + 32);
    v13 = *(_QWORD *)(v0 + 40);
    v15 = swift_retain(v4);
    v16 = sub_1000436BC(v15, v5);
    swift_release(v4);
    v17 = swift_getKeyPath(&unk_1000CED38);
    v18 = (_QWORD *)swift_task_alloc(48);
    v18[2] = v16;
    v18[3] = v14;
    v18[4] = v13;
    *(_QWORD *)(v0 + 16) = v16;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v17, sub_10003A778, v18, (char *)&type metadata for () + 8, v9);
    swift_release(v17);
    swift_release(v16);
    swift_task_dealloc(v18);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100037A70(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(double *)a1 = GeometryProxy.safeAreaInsets.getter();
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
}

void sub_100037A9C(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;

  v4 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v11 = sub_100039910((uint64_t *)a2);
  v12 = static MainActor.shared.getter(v11);
  v13 = swift_allocObject(&unk_100109790, 144, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v13 + 64) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v13 + 80) = v14;
  v15 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v13 + 48) = v15;
  v16 = v18;
  *(_OWORD *)(v13 + 96) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v13 + 112) = v16;
  *(_QWORD *)(v13 + 128) = v8;
  *(_QWORD *)(v13 + 136) = v9;
  v17 = sub_100096424((uint64_t)v7, (uint64_t)&unk_100115178, v13);
  swift_release(v17);
}

uint64_t sub_100037BB0(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(double *)(v8 + 48) = a3;
  *(double *)(v8 + 56) = a4;
  *(double *)(v8 + 32) = a1;
  *(double *)(v8 + 40) = a2;
  *(_QWORD *)(v8 + 24) = a8;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 64) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100037C24, v10, v11);
}

uint64_t sub_100037C24()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;

  v2 = *(double *)(v0 + 48);
  v1 = *(double *)(v0 + 56);
  v4 = *(double *)(v0 + 32);
  v3 = *(double *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 64));
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_BYTE *)(v5 + 24);
  v8 = swift_retain(v6);
  v9 = sub_1000436BC(v8, v7);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000CED10);
  *(_QWORD *)(v0 + 16) = v9;
  v11 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(double *)(v9 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
  v13 = *(double *)(v9 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets + 8);
  v14 = *(double *)(v9 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets + 16);
  v15 = *(double *)(v9 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets + 24);
  swift_release(v9);
  if ((static EdgeInsets.== infix(_:_:)(v12, v13, v14, v15, v4, v3, v2, v1) & 1) == 0)
  {
    v17 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v0 + 56);
    v23 = *(_OWORD *)(v0 + 32);
    v18 = swift_retain(v6);
    v19 = sub_1000436BC(v18, v7);
    swift_release(v6);
    v20 = swift_getKeyPath(&unk_1000CED10);
    v21 = swift_task_alloc(64);
    *(_QWORD *)(v21 + 16) = v19;
    *(_OWORD *)(v21 + 24) = v23;
    *(_QWORD *)(v21 + 40) = v17;
    *(_QWORD *)(v21 + 48) = v16;
    *(_QWORD *)(v0 + 16) = v19;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v20, sub_10003A664, v21, (char *)&type metadata for () + 8, v11);
    swift_release(v20);
    swift_release(v19);
    swift_task_dealloc(v21);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

double sub_100037E08(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = swift_retain(*a2);
  v6 = sub_100043890(v5, v4);
  swift_release(v3);
  sub_100026ED0(a1);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_100037E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _BYTE v20[16];
  uint64_t v21;
  char v22;

  v4 = type metadata accessor for PPTTestCase(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v8 = __chkstk_darwin(v4, v7);
  v9 = type metadata accessor for AnimationCompletionCriteria(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static AnimationCompletionCriteria.logicallyComplete.getter(v12);
  v21 = a2;
  v22 = 0;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  v15 = *(unsigned __int8 *)(v5 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_100109768, v16 + v6, v15 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v17 + v16, &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  withAnimation<A>(_:completionCriteria:_:completion:)(0, v14, sub_10003B190, v20, sub_10003A50C, v17, (char *)&type metadata for () + 8);
  v18 = swift_release(v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v10 + 8))(v14, v9, v18);
}

uint64_t sub_100037FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _BYTE v20[16];
  uint64_t v21;
  char v22;

  v4 = type metadata accessor for PPTTestCase(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v8 = __chkstk_darwin(v4, v7);
  v9 = type metadata accessor for AnimationCompletionCriteria(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static AnimationCompletionCriteria.logicallyComplete.getter(v12);
  v21 = a2;
  v22 = 1;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  v15 = *(unsigned __int8 *)(v5 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_100109740, v16 + v6, v15 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v17 + v16, &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  withAnimation<A>(_:completionCriteria:_:completion:)(0, v14, sub_10003B190, v20, sub_10003A50C, v17, (char *)&type metadata for () + 8);
  v18 = swift_release(v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v10 + 8))(v14, v9, v18);
}

uint64_t sub_100038124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  _BYTE v20[16];
  uint64_t v21;
  char v22;

  v4 = type metadata accessor for PPTTestCase(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v8 = __chkstk_darwin(v4, v7);
  v9 = type metadata accessor for AnimationCompletionCriteria(0, v8);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = &v20[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static AnimationCompletionCriteria.logicallyComplete.getter(v12);
  v21 = a2;
  v22 = 2;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v4);
  v15 = *(unsigned __int8 *)(v5 + 80);
  v16 = (v15 + 16) & ~v15;
  v17 = swift_allocObject(&unk_100109718, v16 + v6, v15 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v17 + v16, &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v4);
  withAnimation<A>(_:completionCriteria:_:completion:)(0, v14, sub_10003A4EC, v20, sub_10003A50C, v17, (char *)&type metadata for () + 8);
  v18 = swift_release(v17);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v10 + 8))(v14, v9, v18);
}

double sub_100038288(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v2 = type metadata accessor for PPTTestCase(0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 16))(v6, a1, v4);
  v8 = type metadata accessor for AppRotationPPT(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  sub_10003859C((uint64_t)v6);
  sub_100038990();
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

void sub_100038320(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t KeyPath;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v3 = type metadata accessor for CalculatorViewModel(0);
  v4 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v22 = Environment.init<A>(_:)(v3, v3, v4);
  v21 = v5;
  v6 = type metadata accessor for CalculatorLayout(0);
  v7 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v8 = Environment.init<A>(_:)(v6, v6, v7);
  v20 = v9;
  KeyPath = swift_getKeyPath(&unk_1000CED88);
  v23 = *(_OWORD *)(v1 + 64);
  v11 = sub_100005360(&qword_100113FF8);
  v12 = State.projectedValue.getter(&v24, v11);
  v13 = v24;
  v14 = v25;
  LOBYTE(v3) = v26;
  v15 = static AnyTransition.opacity.getter(v12);
  v16 = static Animation.easeIn(duration:)(0.3);
  LOBYTE(v23) = 0;
  swift_retain(v13);
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v16);
  State.init(wrappedValue:)(&v24, &v23, &type metadata for Bool);
  v17 = v24;
  v18 = v25;
  v19 = swift_retain(v8);
  swift_release(v19);
  swift_release(v14);
  swift_release(v13);
  swift_release(v15);
  swift_release(v16);
  *(_QWORD *)a1 = v22;
  *(_BYTE *)(a1 + 8) = v21 & 1;
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v20 & 1;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = v14;
  *(_BYTE *)(a1 + 80) = v3;
  *(_QWORD *)(a1 + 88) = 0x3FD3333333333333;
  *(_QWORD *)(a1 + 96) = v15;
  *(_QWORD *)(a1 + 104) = v16;
  *(_BYTE *)(a1 + 112) = 1;
}

void sub_1000384F8(uint64_t *a1, char a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v4 = *((_BYTE *)a1 + 8);
  v5 = swift_retain(*a1);
  v6 = sub_100043890(v5, v4);
  swift_release(v3);
  sub_10001F808(a2);
  swift_release(v6);
}

uint64_t sub_10003855C@<X0>(uint64_t a1@<X8>)
{
  return sub_100036838(a1);
}

uint64_t sub_10003859C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned int v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD v36[5];
  __int128 v37;
  __int128 v38;

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_testCase;
  v5 = type metadata accessor for PPTTestCase(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, a1, v5);
  v8 = PPTTestCase.parameters.getter(v7);
  v34 = 0x6F69746172657469;
  v35 = 0xEA0000000000736ELL;
  AnyHashable.init<A>(_:)(&v34, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_10001CAFC((uint64_t)v36), (v10 & 1) != 0))
  {
    sub_1000052E0(*(_QWORD *)(v8 + 56) + 32 * v9, (uint64_t)&v37);
  }
  else
  {
    v37 = 0u;
    v38 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  sub_10001E670((uint64_t)v36);
  if (*((_QWORD *)&v38 + 1))
  {
    if ((swift_dynamicCast(&v34, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      result = v34;
      v12 = v35;
      goto LABEL_10;
    }
  }
  else
  {
    sub_100039C90((uint64_t)&v37);
  }
  v12 = 0xE100000000000000;
  result = 48;
LABEL_10:
  v13 = HIBYTE(v12) & 0xF;
  v14 = result & 0xFFFFFFFFFFFFLL;
  if ((v12 & 0x2000000000000000) != 0)
    v15 = HIBYTE(v12) & 0xF;
  else
    v15 = result & 0xFFFFFFFFFFFFLL;
  if (!v15)
  {
    swift_bridgeObjectRelease(v12);
    v29 = 0;
LABEL_56:
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_iterations) = v29;
    return v2;
  }
  if ((v12 & 0x1000000000000000) != 0)
  {
    v17 = (uint64_t)sub_100039CD0(result, v12, 10);
    v19 = v33;
LABEL_53:
    swift_bridgeObjectRelease(v12);
    if ((v19 & 1) != 0)
      v29 = 0;
    else
      v29 = v17;
    goto LABEL_56;
  }
  if ((v12 & 0x2000000000000000) == 0)
  {
    if ((result & 0x1000000000000000) != 0)
      v16 = (unsigned __int8 *)((v12 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v16 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, v12);
    v17 = (uint64_t)sub_100039DB4(v16, v14, 10);
    v19 = v18 & 1;
    goto LABEL_53;
  }
  v36[0] = result;
  v36[1] = v12 & 0xFFFFFFFFFFFFFFLL;
  if (result == 43)
  {
    if (!v13)
      goto LABEL_67;
    if (v13 == 1 || (BYTE1(result) - 48) > 9u)
      goto LABEL_40;
    v17 = (BYTE1(result) - 48);
    if (v13 != 2)
    {
      if ((BYTE2(result) - 48) > 9u)
        goto LABEL_40;
      v17 = 10 * (BYTE1(result) - 48) + (BYTE2(result) - 48);
      v20 = v13 - 3;
      if (v20)
      {
        v21 = (unsigned __int8 *)v36 + 3;
        while (1)
        {
          v22 = *v21 - 48;
          if (v22 > 9)
            goto LABEL_40;
          v23 = 10 * v17;
          if ((unsigned __int128)(v17 * (__int128)10) >> 64 != (10 * v17) >> 63)
            goto LABEL_40;
          v17 = v23 + v22;
          if (__OFADD__(v23, v22))
            goto LABEL_40;
          v19 = 0;
          ++v21;
          if (!--v20)
            goto LABEL_53;
        }
      }
    }
LABEL_52:
    v19 = 0;
    goto LABEL_53;
  }
  if (result != 45)
  {
    if (!v13 || (result - 48) > 9u)
      goto LABEL_40;
    v17 = (result - 48);
    if (v13 != 1)
    {
      if ((BYTE1(result) - 48) > 9u)
        goto LABEL_40;
      v17 = 10 * (result - 48) + (BYTE1(result) - 48);
      v24 = v13 - 2;
      if (v24)
      {
        v25 = (unsigned __int8 *)v36 + 2;
        while (1)
        {
          v26 = *v25 - 48;
          if (v26 > 9)
            goto LABEL_40;
          v27 = 10 * v17;
          if ((unsigned __int128)(v17 * (__int128)10) >> 64 != (10 * v17) >> 63)
            goto LABEL_40;
          v17 = v27 + v26;
          if (__OFADD__(v27, v26))
            goto LABEL_40;
          v19 = 0;
          ++v25;
          if (!--v24)
            goto LABEL_53;
        }
      }
    }
    goto LABEL_52;
  }
  if (v13)
  {
    if (v13 != 1 && (BYTE1(result) - 48) <= 9u)
    {
      if (v13 == 2)
      {
        v19 = 0;
        v17 = -(uint64_t)(BYTE1(result) - 48);
        goto LABEL_53;
      }
      if ((BYTE2(result) - 48) <= 9u)
      {
        v17 = -10 * (BYTE1(result) - 48) - (BYTE2(result) - 48);
        v28 = v13 - 3;
        if (!v28)
          goto LABEL_52;
        v30 = (unsigned __int8 *)v36 + 3;
        while (1)
        {
          v31 = *v30 - 48;
          if (v31 > 9)
            break;
          v32 = 10 * v17;
          if ((unsigned __int128)(v17 * (__int128)10) >> 64 != (10 * v17) >> 63)
            break;
          v17 = v32 - v31;
          if (__OFSUB__(v32, v31))
            break;
          v19 = 0;
          ++v30;
          if (!--v28)
            goto LABEL_53;
        }
      }
    }
LABEL_40:
    v17 = 0;
    v19 = 1;
    goto LABEL_53;
  }
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

id sub_100038990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  id v16;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v6 = type metadata accessor for Logger(0);
  sub_100014124(v6, (uint64_t)qword_10011FEA8);
  v7 = swift_retain(v0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    v20 = *(_QWORD *)(v0 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_iterations);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    swift_release(v0);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Running Rotation Test with %ld iterations", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release(v0);
  }
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Setting Orientation to Portrait", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v15, "rotateIfNeeded:", 1);

  v16 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  Date.init(timeIntervalSinceNow:)(2.0);
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  objc_msgSend(v16, "runUntilDate:", isa);

  PPTTestCase.startTest()();
  return sub_100038EAC();
}

uint64_t sub_100038C30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0, v4);
  v30 = *(_QWORD *)(v7 - 8);
  v31 = v7;
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchTime(0, v9);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v29 - v19;
  sub_100004D98();
  v21 = (void *)static OS_dispatch_queue.main.getter();
  static DispatchTime.now()();
  + infix(_:_:)(v16, 1.0);
  v29 = *(void (**)(char *, uint64_t))(v13 + 8);
  v29(v16, v12);
  aBlock[4] = sub_100039220;
  v34 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100004DD4;
  aBlock[3] = &unk_100109538;
  v22 = _Block_copy(aBlock);
  v23 = v34;
  swift_retain(v1);
  v24 = swift_release(v23);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  v25 = sub_100005178(&qword_100114D58, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_100005360(&qword_100114D60);
  v27 = sub_100008078(&qword_100114D68, &qword_100114D60, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v2, v25);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v20, v11, v6, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v31);
  return ((uint64_t (*)(char *, uint64_t))v29)(v20, v12);
}

id sub_100038EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  void *v4;
  id v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;

  v1 = v0;
  v2 = OBJC_IVAR____TtC10Calculator14AppRotationPPT_iterations;
  if (!*(_QWORD *)(v0 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_iterations))
  {
    PPTTestCase.finishTest()();
    return (id)sub_100038C30();
  }
  result = objc_msgSend((id)objc_opt_self(UIWindow), "_applicationKeyWindow");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "interfaceOrientation");

    if (v5 == (id)3)
    {
      v6 = *(_QWORD *)(v1 + v2);
      v7 = __OFSUB__(v6, 1);
      v8 = v6 - 1;
      if (!v7)
      {
        *(_QWORD *)(v1 + v2) = v8;
        if (qword_100113F00 != -1)
          swift_once(&qword_100113F00, sub_1000A85AC);
        v9 = type metadata accessor for Logger(0);
        v10 = sub_100014124(v9, (uint64_t)qword_10011FEA8);
        v11 = Logger.logObject.getter(v10);
        v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          v13 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v13 = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, v12, "Setting Orientation to portrait", v13, 2u);
          swift_slowDealloc(v13, -1, -1);
        }

        v14 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
        objc_msgSend(v14, "rotateIfNeeded:", 1);
LABEL_15:

        return (id)sub_100038C30();
      }
      __break(1u);
    }
    else if (qword_100113F00 == -1)
    {
LABEL_12:
      v15 = type metadata accessor for Logger(0);
      v16 = sub_100014124(v15, (uint64_t)qword_10011FEA8);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Setting Orientation to landscapeRight", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      v14 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
      objc_msgSend(v14, "rotateIfNeeded:", 3);
      goto LABEL_15;
    }
    swift_once(&qword_100113F00, sub_1000A85AC);
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t sub_100039114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10Calculator14AppRotationPPT_testCase;
  v2 = type metadata accessor for PPTTestCase(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100039164()
{
  return type metadata accessor for AppRotationPPT(0);
}

uint64_t type metadata accessor for AppRotationPPT(uint64_t a1)
{
  uint64_t result;

  result = qword_100115010;
  if (!qword_100115010)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppRotationPPT);
  return result;
}

uint64_t sub_1000391A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for PPTTestCase(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void *sub_100039224(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawBufferPointer.copyMemory source has too many elements", 69, 2, "Swift/UnsafeRawBufferPointer.swift", 34, 2, 487, 0);
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

id sub_1000392B8(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_retain(a1);
}

double destroy for CalculatorContainerView(uint64_t a1)
{
  double result;

  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 16));
  sub_100039308(*(id *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(*(_QWORD *)(a1 + 56));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 72)).n128_u64[0];
  return result;
}

void sub_100039308(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_release(a1);
}

uint64_t initializeWithCopy for CalculatorContainerView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = (void *)a2[4];
  v9 = *((_BYTE *)a2 + 40);
  swift_retain(v4);
  swift_retain(v6);
  sub_1000392B8(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v10 = a2[7];
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v11 = a2[9];
  *(_QWORD *)(a1 + 72) = v11;
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t *assignWithCopy for CalculatorContainerView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  v10 = (void *)a2[4];
  v11 = *((_BYTE *)a2 + 40);
  sub_1000392B8(v10, v11);
  v12 = (void *)a1[4];
  v13 = *((_BYTE *)a1 + 40);
  a1[4] = (uint64_t)v10;
  *((_BYTE *)a1 + 40) = v11;
  sub_100039308(v12, v13);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v14 = a1[7];
  v15 = a2[7];
  a1[7] = v15;
  swift_retain(v15);
  swift_release(v14);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v16 = a1[9];
  v17 = a2[9];
  a1[9] = v17;
  swift_retain(v17);
  swift_release(v16);
  return a1;
}

__n128 initializeWithTake for CalculatorContainerView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t *assignWithTake for CalculatorContainerView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  v8 = *((_BYTE *)a2 + 40);
  v9 = (void *)a1[4];
  v10 = *((_BYTE *)a1 + 40);
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = v8;
  sub_100039308(v9, v10);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v11 = a1[7];
  a1[7] = a2[7];
  swift_release(v11);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v12 = a1[9];
  a1[9] = a2[9];
  swift_release(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorContainerView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 56);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorContainerView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 56) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorContainerView()
{
  return &type metadata for CalculatorContainerView;
}

uint64_t sub_100039620(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F5CE8, 1);
}

_QWORD *sub_100039630@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;
  char v5;
  _QWORD v6[2];
  char v7;

  v2 = sub_10000765C();
  result = EnvironmentValues.subscript.getter(v6, &type metadata for ModeMenuPresentationKey, &type metadata for ModeMenuPresentationKey, v2);
  v4 = v6[1];
  v5 = v7;
  *(_QWORD *)a1 = v6[0];
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_100039688(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 192);
  v3 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 208);
  sub_100039720(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_BYTE *)(a1 + 184),
    *(_BYTE *)(a1 + 185));
  swift_release(v4);
  swift_release(v2);
  swift_release(v3);
  return a1;
}

double sub_100039720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,char a23)
{
  char v26;
  double result;

  if ((a23 & 1) == 0)
    return sub_10003980C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22 & 1);
  v26 = a6 & 1;
  swift_release(a1);
  swift_release(a3);
  sub_100007720(a5, v26);
  swift_release(a14);
  swift_release(a13);
  swift_release(a10);
  swift_release(a8);
  *(_QWORD *)&result = swift_release(a9).n128_u64[0];
  return result;
}

double sub_10003980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25;
  char v28;
  uint64_t v29;
  double result;

  v25 = a13;
  v28 = a6 & 1;
  swift_release(a1);
  swift_release(a3);
  sub_100007720(a5, v28);
  if ((a22 & 1) != 0)
  {
    a17 = a14;
    a11 = a13;
    v25 = a10;
    v29 = a8;
  }
  else
  {
    swift_release(a21);
    swift_release(a20);
    v29 = a15;
    a9 = a16;
  }
  swift_release(a17);
  swift_release(a11);
  swift_release(v25);
  swift_release(v29);
  *(_QWORD *)&result = swift_release(a9).n128_u64[0];
  return result;
}

void sub_1000398FC(uint64_t *a1)
{
  uint64_t v1;

  sub_10003775C(a1, v1 + 16);
}

void sub_100039908(__int128 *a1)
{
  uint64_t v1;

  sub_100037A9C(a1, v1 + 16);
}

uint64_t *sub_100039910(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (void *)a1[4];
  v4 = *((_BYTE *)a1 + 40);
  v5 = a1[7];
  v6 = a1[9];
  swift_retain(a1[2]);
  swift_retain(v2);
  sub_1000392B8(v3, v4);
  swift_retain(v6);
  swift_retain(v5);
  return a1;
}

double sub_100039984(uint64_t a1)
{
  uint64_t v1;

  return sub_100037E08(a1, (uint64_t *)(v1 + 16));
}

unint64_t sub_10003998C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115110;
  if (!qword_100115110)
  {
    v1 = sub_100005608(&qword_100115108);
    sub_100039A10();
    sub_100008078(&qword_100115158, &qword_100115160, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115110);
  }
  return result;
}

unint64_t sub_100039A10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115118;
  if (!qword_100115118)
  {
    v1 = sub_100005608(&qword_100115120);
    sub_100039A7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115118);
  }
  return result;
}

unint64_t sub_100039A7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115128;
  if (!qword_100115128)
  {
    v1 = sub_100005608(&qword_100115130);
    sub_100008078(&qword_100115138, &qword_100115140, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100008078(&qword_100115148, &qword_100115150, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115128);
  }
  return result;
}

uint64_t sub_100039B18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 192);
  v3 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 208);
  v5 = *(_QWORD *)(a1 + 336);
  v6 = *(_QWORD *)(a1 + 368);
  v7 = *(_QWORD *)(a1 + 384);
  v8 = *(_QWORD *)(a1 + 400);
  v9 = *(_QWORD *)(a1 + 416);
  sub_100039720(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_BYTE *)(a1 + 184),
    *(_BYTE *)(a1 + 185));
  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v2);
  swift_release(v3);
  return a1;
}

uint64_t sub_100039C08(uint64_t a1)
{
  uint64_t v1;

  return sub_100037E60(a1, v1 + 16);
}

uint64_t sub_100039C14(uint64_t a1)
{
  uint64_t v1;

  return sub_100037FC0(a1, v1 + 16);
}

uint64_t sub_100039C20(uint64_t a1)
{
  uint64_t v1;

  return sub_100038124(a1, v1 + 16);
}

uint64_t sub_100039C2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100039308(*(id *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

double sub_100039C74(uint64_t a1)
{
  return sub_100038288(a1);
}

unsigned __int8 *sub_100039C7C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_100039DB4(a1, a2, a3);
}

uint64_t sub_100039C90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_100114A20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned __int8 *sub_100039CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v4 = swift_bridgeObjectRetain(a2);
  v5 = String.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v4);
  v7 = v5;
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_10003A030(v5, v6);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }
LABEL_7:
  v13 = sub_100039DB4(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

unsigned __int8 *sub_100039DB4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10003A030(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10003A0AC(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10003A0AC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10003A1F0(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100029DA8(v12, 0);
      v5 = sub_10003A2DC((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10003A1F0(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_100029E0C(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_100029E0C(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10003A2DC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_100029E0C(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_100029E0C(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_10003A4EC()
{
  uint64_t v0;

  sub_1000384F8(*(uint64_t **)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10003A518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for PPTTestCase(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003A578()
{
  type metadata accessor for PPTTestCase(0);
  return PPTTestCase.performResizeTest(onComplete:)(0, 0);
}

uint64_t sub_10003A5B8()
{
  return sub_10003A68C(144);
}

uint64_t sub_10003A5C0(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _QWORD *v10;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[14];
  v7 = v1[15];
  v8 = v1[16];
  v9 = v1[17];
  v10 = (_QWORD *)swift_task_alloc(dword_100115174);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100013F04;
  return sub_100037BB0(v6, v7, v8, v9, a1, v4, v5, (uint64_t)(v1 + 4));
}

uint64_t sub_10003A664()
{
  uint64_t v0;

  return sub_1000095F8(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_10003A684()
{
  return sub_10003A68C(128);
}

uint64_t sub_10003A68C(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  swift_release(*(_QWORD *)(v1 + 48));
  sub_100039308(*(id *)(v1 + 64), *(_BYTE *)(v1 + 72));
  swift_release(*(_QWORD *)(v1 + 88));
  swift_release(*(_QWORD *)(v1 + 104));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10003A6E8(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  _QWORD *v8;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[14];
  v7 = v1[15];
  v8 = (_QWORD *)swift_task_alloc(dword_100115184);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014F2C;
  return sub_100037860(v6, v7, a1, v4, v5, (uint64_t)(v1 + 4));
}

uint64_t sub_10003A778()
{
  uint64_t v0;

  return sub_1000095D0(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_10003A794(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 192);
  v3 = *(_QWORD *)(a1 + 200);
  v4 = *(_QWORD *)(a1 + 208);
  sub_10003A82C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_BYTE *)(a1 + 184),
    *(_BYTE *)(a1 + 185));
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v2);
  return a1;
}

uint64_t sub_10003A82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,char a23)
{
  char v26;

  if ((a23 & 1) == 0)
    return sub_10003A91C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22 & 1);
  v26 = a6 & 1;
  swift_retain(a3);
  swift_retain(a1);
  sub_1000076D0(a5, v26);
  swift_retain(a9);
  swift_retain(a10);
  swift_retain(a13);
  swift_retain(a14);
  return swift_retain(a8);
}

uint64_t sub_10003A91C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v25;
  char v29;

  v25 = a13;
  v29 = a6 & 1;
  swift_retain(a3);
  swift_retain(a1);
  sub_1000076D0(a5, v29);
  if ((a22 & 1) != 0)
  {
    a11 = a13;
    v25 = a14;
  }
  else
  {
    swift_retain(a16);
    swift_retain(a17);
    a9 = a20;
    a8 = a15;
    a10 = a21;
  }
  swift_retain(a9);
  swift_retain(a10);
  swift_retain(a11);
  swift_retain(v25);
  return swift_retain(a8);
}

unint64_t sub_10003AA0C()
{
  unint64_t result;

  result = qword_100115190;
  if (!qword_100115190)
  {
    result = swift_getWitnessTable(&unk_1000D017C, &type metadata for NotesFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100115190);
  }
  return result;
}

uint64_t sub_10003AA50(uint64_t result)
{
  *(_BYTE *)(result + 169) = 1;
  return result;
}

unint64_t sub_10003AA5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001151B0;
  if (!qword_1001151B0)
  {
    v1 = sub_100005608(&qword_1001151A0);
    sub_10003AAE0(&qword_1001151B8, &qword_1001151C0, (void (*)(void))sub_10003AB4C);
    sub_10003ABD4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001151B0);
  }
  return result;
}

uint64_t sub_10003AAE0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(a2);
    a3();
    sub_10003AB90();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10003AB4C()
{
  unint64_t result;

  result = qword_1001151C8;
  if (!qword_1001151C8)
  {
    result = swift_getWitnessTable(&unk_1000CD258, &type metadata for MathPaperContainerView);
    atomic_store(result, (unint64_t *)&qword_1001151C8);
  }
  return result;
}

unint64_t sub_10003AB90()
{
  unint64_t result;

  result = qword_1001151D0;
  if (!qword_1001151D0)
  {
    result = swift_getWitnessTable(&unk_1000D3F54, &type metadata for DelayEffectModifier);
    atomic_store(result, (unint64_t *)&qword_1001151D0);
  }
  return result;
}

unint64_t sub_10003ABD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001151D8;
  if (!qword_1001151D8)
  {
    v1 = sub_100005608(&qword_1001151A8);
    sub_10003AAE0(&qword_1001151E0, &qword_1001151E8, (void (*)(void))sub_10003AC58);
    sub_10003AC9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001151D8);
  }
  return result;
}

unint64_t sub_10003AC58()
{
  unint64_t result;

  result = qword_1001151F0;
  if (!qword_1001151F0)
  {
    result = swift_getWitnessTable(&unk_1000CDEF4, &type metadata for CalculatorMainView);
    atomic_store(result, (unint64_t *)&qword_1001151F0);
  }
  return result;
}

unint64_t sub_10003AC9C()
{
  unint64_t result;

  result = qword_1001151F8;
  if (!qword_1001151F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AccessibilityIgnoresInvertColorsViewModifier, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier);
    atomic_store(result, (unint64_t *)&qword_1001151F8);
  }
  return result;
}

uint64_t sub_10003ACE8(uint64_t result)
{
  *(_BYTE *)(result + 168) = 1;
  return result;
}

uint64_t sub_10003ACF4(uint64_t result)
{
  *(_BYTE *)(result + 169) = 0;
  return result;
}

uint64_t sub_10003ACFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 96);
  swift_release(*(_QWORD *)a1);
  swift_release(v2);
  sub_100007720(v3, v4);
  swift_release(v5);
  swift_release(v6);
  return a1;
}

uint64_t sub_10003AD6C(uint64_t result)
{
  *(_BYTE *)(result + 168) = 0;
  return result;
}

unint64_t sub_10003AD7C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  result = qword_100115208;
  if (!qword_100115208)
  {
    v1 = sub_100005608(&qword_100115168);
    v2 = sub_100005608(&qword_1001150F0);
    v3 = sub_100005608(&qword_1001150E8);
    v4 = sub_100005608(&qword_1001150E0);
    v5 = sub_100005608(&qword_1001150D8);
    v10 = sub_100005608(&qword_100115108);
    v11 = sub_10003998C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.onOpenURL(perform:)>>, 1);
    v10 = v5;
    v11 = OpaqueTypeConformance2;
    v7 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
    v10 = v4;
    v11 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
    v10 = v3;
    v11 = v8;
    v9 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
    v10 = v2;
    v11 = v9;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.onTest(_:handler:)>>, 1);
    sub_10003AEB8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115208);
  }
  return result;
}

unint64_t sub_10003AEB8()
{
  unint64_t result;

  result = qword_100115210;
  if (!qword_100115210)
  {
    result = swift_getWitnessTable(&unk_1000CE950, &type metadata for CalculatorModeSwitchPPTTests);
    atomic_store(result, (unint64_t *)&qword_100115210);
  }
  return result;
}

uint64_t *sub_10003AEFC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[8];
  sub_10003AF68(*a1, a1[1], a1[2], a1[3]);
  swift_retain(v5);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

double sub_10003AF68(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  sub_10002DE88(a1, a2, a3 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  return result;
}

uint64_t sub_10003AF90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 128);
  v3 = *(_QWORD *)(a1 + 136);
  v4 = *(_BYTE *)(a1 + 144);
  v5 = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 168);
  v8 = *(_BYTE *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + 200);
  v12 = *(_QWORD *)(a1 + 184);
  v13 = *(_QWORD *)(a1 + 192);
  v10 = *(_QWORD *)(a1 + 208);
  swift_retain(*(_QWORD *)(a1 + 24));
  sub_10002DE88(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  sub_10002DE88(v6, v7, v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  return a1;
}

uint64_t sub_10003B04C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_BYTE *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 120);
  v14 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 136);
  v11 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 160);
  v10 = *(_QWORD *)(a1 + 152);
  sub_10002DE88(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_bridgeObjectRetain(v2);
  sub_10002DE88(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  sub_10003B134(v14, v13, v12, v7, v11, v10, v9);
  return a1;
}

uint64_t sub_10003B134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a3)
  {
    swift_retain(a7);
    swift_retain(a3);
    swift_retain(a4);
    swift_retain(a5);
    return swift_retain(a6);
  }
  return result;
}

void sub_10003B190()
{
  sub_10003A4EC();
}

uint64_t sub_10003B1A4(uint64_t result, uint64_t a2, void *a3, char a4)
{
  if ((a4 & 1) != 0)
    return sub_100007BCC(result, a2, a3);
  else
    return swift_retain(result);
}

double destroy for CalculatorModeButtonView(uint64_t a1)
{
  double result;

  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 16));
  sub_10003B214(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(void **)(a1 + 48), *(_BYTE *)(a1 + 56));
  sub_100007ED0(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 80), *(_BYTE *)(a1 + 81));
  sub_100007720(*(_QWORD *)(a1 + 112), *(_BYTE *)(a1 + 120));
  swift_release(*(_QWORD *)(a1 + 128));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 136)).n128_u64[0];
  return result;
}

double sub_10003B214(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  double result;

  if ((a4 & 1) != 0)
    sub_10003B220(a1, a2, a3);
  else
    *(_QWORD *)&result = swift_release(a1).n128_u64[0];
  return result;
}

void sub_10003B220(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    swift_release(a2);

  }
}

uint64_t initializeWithCopy for CalculatorModeButtonView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = a2[5];
  v10 = (void *)a2[6];
  v11 = *((_BYTE *)a2 + 56);
  swift_retain(v4);
  swift_retain(v6);
  sub_10003B1A4(v8, v9, v10, v11);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = v10;
  *(_BYTE *)(a1 + 56) = v11;
  v12 = a2[8];
  v13 = a2[9];
  LOBYTE(v9) = *((_BYTE *)a2 + 81);
  LOBYTE(v10) = *((_BYTE *)a2 + 80);
  sub_100007DE0(v12, v13, v10, v9);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  *(_BYTE *)(a1 + 80) = (_BYTE)v10;
  *(_BYTE *)(a1 + 81) = v9;
  *(_DWORD *)(a1 + 82) = *(_DWORD *)((char *)a2 + 82);
  *(_DWORD *)(a1 + 85) = *(_DWORD *)((char *)a2 + 85);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  v14 = a2[14];
  LOBYTE(v13) = *((_BYTE *)a2 + 120);
  sub_1000076D0(v14, v13);
  *(_QWORD *)(a1 + 112) = v14;
  *(_BYTE *)(a1 + 120) = v13;
  v15 = a2[16];
  v16 = a2[17];
  *(_QWORD *)(a1 + 128) = v15;
  *(_QWORD *)(a1 + 136) = v16;
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  *(_QWORD *)(a1 + 152) = a2[19];
  swift_retain(v15);
  swift_retain(v16);
  return a1;
}

uint64_t *assignWithCopy for CalculatorModeButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  v10 = a2[4];
  v11 = a2[5];
  v12 = (void *)a2[6];
  v13 = *((_BYTE *)a2 + 56);
  sub_10003B1A4(v10, v11, v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  v16 = (void *)a1[6];
  v17 = *((_BYTE *)a1 + 56);
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = (uint64_t)v12;
  *((_BYTE *)a1 + 56) = v13;
  sub_10003B214(v14, v15, v16, v17);
  v18 = a2[8];
  v19 = a2[9];
  LOBYTE(v12) = *((_BYTE *)a2 + 81);
  v20 = *((_BYTE *)a2 + 80);
  sub_100007DE0(v18, v19, v20, (char)v12);
  v21 = a1[8];
  v22 = a1[9];
  v23 = *((_BYTE *)a1 + 81);
  a1[8] = v18;
  a1[9] = v19;
  v24 = *((unsigned __int8 *)a1 + 80);
  *((_BYTE *)a1 + 80) = v20;
  *((_BYTE *)a1 + 81) = (_BYTE)v12;
  sub_100007ED0(v21, v22, v24, v23);
  *((_BYTE *)a1 + 82) = *((_BYTE *)a2 + 82);
  *((_BYTE *)a1 + 83) = *((_BYTE *)a2 + 83);
  *((_BYTE *)a1 + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a1 + 85) = *((_BYTE *)a2 + 85);
  *((_BYTE *)a1 + 86) = *((_BYTE *)a2 + 86);
  *((_BYTE *)a1 + 87) = *((_BYTE *)a2 + 87);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  a1[12] = a2[12];
  a1[13] = a2[13];
  v25 = a2[14];
  LOBYTE(v19) = *((_BYTE *)a2 + 120);
  sub_1000076D0(v25, v19);
  v26 = a1[14];
  v27 = *((_BYTE *)a1 + 120);
  a1[14] = v25;
  *((_BYTE *)a1 + 120) = v19;
  sub_100007720(v26, v27);
  v28 = a1[16];
  v29 = a2[16];
  a1[16] = v29;
  swift_retain(v29);
  swift_release(v28);
  v30 = a2[17];
  v31 = a1[17];
  a1[17] = v30;
  swift_retain(v30);
  swift_release(v31);
  *((_BYTE *)a1 + 144) = *((_BYTE *)a2 + 144);
  a1[19] = a2[19];
  return a1;
}

uint64_t *assignWithTake for CalculatorModeButtonView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  v8 = a2[6];
  v9 = *((_BYTE *)a2 + 56);
  v10 = a1[4];
  v11 = a1[5];
  v12 = (void *)a1[6];
  v13 = *((_BYTE *)a1 + 56);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  a1[6] = v8;
  *((_BYTE *)a1 + 56) = v9;
  sub_10003B214(v10, v11, v12, v13);
  v14 = *((_BYTE *)a2 + 80);
  v15 = *((_BYTE *)a2 + 81);
  v16 = a1[8];
  v17 = a1[9];
  v18 = *((_BYTE *)a1 + 81);
  *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
  v19 = *((unsigned __int8 *)a1 + 80);
  *((_BYTE *)a1 + 80) = v14;
  *((_BYTE *)a1 + 81) = v15;
  sub_100007ED0(v16, v17, v19, v18);
  *((_BYTE *)a1 + 82) = *((_BYTE *)a2 + 82);
  *((_BYTE *)a1 + 83) = *((_BYTE *)a2 + 83);
  *((_BYTE *)a1 + 84) = *((_BYTE *)a2 + 84);
  *((_BYTE *)a1 + 85) = *((_BYTE *)a2 + 85);
  *((_BYTE *)a1 + 86) = *((_BYTE *)a2 + 86);
  *((_BYTE *)a1 + 87) = *((_BYTE *)a2 + 87);
  *((_BYTE *)a1 + 88) = *((_BYTE *)a2 + 88);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  v20 = *((_BYTE *)a2 + 120);
  v21 = a1[14];
  v22 = *((_BYTE *)a1 + 120);
  a1[14] = a2[14];
  *((_BYTE *)a1 + 120) = v20;
  sub_100007720(v21, v22);
  swift_release(a1[16]);
  v23 = a1[17];
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  swift_release(v23);
  *((_BYTE *)a1 + 144) = *((_BYTE *)a2 + 144);
  a1[19] = a2[19];
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorModeButtonView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 136);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorModeButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 136) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorModeButtonView()
{
  return &type metadata for CalculatorModeButtonView;
}

uint64_t sub_10003B6EC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F5D50, 1);
}

uint64_t sub_10003B6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10003B830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a2;
  v17 = a1;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 >= 0)
      v2 = a2 & 0xFFFFFFFFFFFFFF8;
    v4 = swift_retain(a1);
    v5 = __CocoaSet.contains(_:)(v4, v2);
    swift_release(a1);
    return v5 & 1;
  }
  else
  {
    if (*(_QWORD *)(a2 + 16)
      && (v7 = *(_QWORD *)(a2 + 40),
          v8 = type metadata accessor for CalculateExpression.Operation(0),
          v9 = sub_100005178(&qword_100115388, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression.Operation, (uint64_t)&protocol conformance descriptor for CalculateExpression.Operation), v10 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v8, v9), v11 = -1 << *(_BYTE *)(v2 + 32), v12 = v10 & ~v11, ((*(_QWORD *)(v2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0))
    {
      v13 = ~v11;
      v14 = sub_100005178((unint64_t *)&qword_1001147A8, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression.Operation, (uint64_t)&protocol conformance descriptor for CalculateExpression.Operation);
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v12);
        v15 = dispatch thunk of static Equatable.== infix(_:_:)(&v16, &v17, v8, v14);
        if ((v15 & 1) != 0)
          break;
        v12 = (v12 + 1) & v13;
      }
      while (((*(_QWORD *)(v2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
    }
    else
    {
      v15 = 0;
    }
    return v15 & 1;
  }
}

BOOL sub_10003B98C(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == (_DWORD)v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_10003BA78@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t KeyPath;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 v83;
  unsigned __int8 v84;
  unsigned __int8 v85;
  unsigned __int8 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  __n128 v107;
  uint64_t v108;
  double v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v125;
  int v126;
  int v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  __int128 v150;
  char v151;
  __int128 v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  char v158;

  v149 = a2;
  v143 = type metadata accessor for LayoutDirection(0);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143, v3);
  v141 = (char *)&v125 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ModeMenuView(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100115270);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100005360(&qword_100115278);
  __chkstk_darwin(v130, v13);
  v15 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100005360(&qword_100115280);
  __chkstk_darwin(v133, v16);
  v18 = (char *)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100005360(&qword_100115288);
  __chkstk_darwin(v148, v19);
  v137 = (uint64_t)&v125 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v138 = (uint64_t)&v125 - v23;
  v146 = sub_100005360(&qword_100115290);
  __chkstk_darwin(v146, v24);
  v147 = (uint64_t)&v125 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100005360(&qword_100115298);
  v132 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134, v26);
  v28 = (char *)&v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_100005360(&qword_1001152A0);
  v135 = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136, v29);
  v31 = (char *)&v125 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = sub_100005360(&qword_1001152A8);
  __chkstk_darwin(v131, v32);
  v140 = (char *)&v125 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100005360(&qword_1001152B0);
  __chkstk_darwin(v145, v34);
  v139 = (uint64_t)&v125 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36, v37);
  v144 = (uint64_t)&v125 - v38;
  v39 = *(_QWORD *)(a1 + 112);
  v40 = *(_BYTE *)(a1 + 120);
  sub_1000076D0(v39, v40);
  v41 = sub_1000436D8(v39, v40);
  sub_100007720(v39, v40);
  if ((v41 & 1) != 0)
  {
    v150 = *(_OWORD *)(a1 + 128);
    v151 = *(_BYTE *)(a1 + 144);
    v42 = sub_100005360(&qword_100115300);
    Binding.projectedValue.getter(&v152, v42);
    sub_100081218(v152, *((uint64_t *)&v152 + 1), v153, (uint64_t)v8);
    sub_10003D850((uint64_t)v8, (uint64_t)v12);
    sub_10003D894((uint64_t)v8);
    v43 = Namespace.wrappedValue.getter(*(_QWORD *)(a1 + 152));
    v44 = static MatchedGeometryProperties.size.getter();
    v45 = static UnitPoint.center.getter();
    v47 = v46;
    sub_10000531C((uint64_t)v12, (uint64_t)v15, &qword_100115270);
    v48 = &v15[*(int *)(v130 + 36)];
    *v48 = 1;
    *((_QWORD *)v48 + 1) = v43;
    *((_DWORD *)v48 + 4) = v44;
    *((double *)v48 + 3) = v45;
    *((_QWORD *)v48 + 4) = v47;
    v48[40] = 1;
    sub_100004F48((uint64_t)v12, &qword_100115270);
    KeyPath = swift_getKeyPath(&unk_1000CEEB8);
    v50 = *(_QWORD *)(a1 + 16);
    v51 = *(_BYTE *)(a1 + 24);
    v52 = swift_retain(v50);
    v53 = sub_1000436BC(v52, v51);
    swift_release(v50);
    v54 = swift_getKeyPath(&unk_1000CEEE8);
    *(_QWORD *)&v152 = v53;
    v55 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v152, v54, v55);
    swift_release(v54);
    v56 = v53 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
    swift_beginAccess(v53 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, &v152, 0, 0);
    v57 = v142;
    v58 = *(void (**)(char *, uint64_t, uint64_t))(v142 + 16);
    v59 = v141;
    v60 = v143;
    v58(v141, v56, v143);
    swift_release(v53);
    v61 = (uint64_t *)&v18[*(int *)(v133 + 36)];
    v62 = sub_100005360(&qword_100113FE0);
    v58((char *)v61 + *(int *)(v62 + 28), (uint64_t)v59, v60);
    *v61 = KeyPath;
    sub_10000531C((uint64_t)v15, (uint64_t)v18, &qword_100115278);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v60);
    sub_100004F48((uint64_t)v15, &qword_100115278);
    v63 = v137;
    sub_10000531C((uint64_t)v18, v137, &qword_100115280);
    v64 = v148;
    *(_OWORD *)(v63 + *(int *)(v148 + 36)) = xmmword_1000CEDC0;
    sub_100004F48((uint64_t)v18, &qword_100115280);
    v65 = &qword_100115288;
    v66 = v138;
    sub_100007CD8(v63, v138, &qword_100115288);
    v67 = v147;
    sub_10000531C(v66, v147, &qword_100115288);
    swift_storeEnumTagMultiPayload(v67, v146, 1);
    v68 = sub_10003D534();
    v69 = sub_10003D3C8(&qword_100115330, &qword_100115288, (void (*)(void))sub_10003D6C4);
    v70 = v149;
    v71 = v67;
    v72 = v145;
    v73 = v64;
  }
  else
  {
    v74 = (_OWORD *)swift_allocObject(&unk_1001098B8, 176, 7);
    v75 = *(_OWORD *)(a1 + 112);
    v74[7] = *(_OWORD *)(a1 + 96);
    v74[8] = v75;
    v76 = *(_OWORD *)(a1 + 144);
    v74[9] = *(_OWORD *)(a1 + 128);
    v74[10] = v76;
    v77 = *(_OWORD *)(a1 + 48);
    v74[3] = *(_OWORD *)(a1 + 32);
    v74[4] = v77;
    v78 = *(_OWORD *)(a1 + 80);
    v74[5] = *(_OWORD *)(a1 + 64);
    v74[6] = v78;
    v79 = *(_OWORD *)(a1 + 16);
    v74[1] = *(_OWORD *)a1;
    v74[2] = v79;
    __chkstk_darwin(v74, v80);
    *(&v125 - 2) = a1;
    sub_10003D2D0((uint64_t *)a1);
    v81 = sub_100005360(&qword_1001152B8);
    v82 = sub_10003D3C8(&qword_1001152C0, &qword_1001152B8, (void (*)(void))sub_10003D3A4);
    Button.init(action:label:)(sub_10003D2C0, v74, sub_10003D2C8, &v125 - 4, v81, v82);
    v83 = *(_BYTE *)(a1 + 82);
    LODWORD(v141) = v83;
    LODWORD(v143) = *(unsigned __int8 *)(a1 + 83);
    v128 = v31;
    v84 = *(_BYTE *)(a1 + 84);
    LODWORD(v138) = v84;
    v127 = *(unsigned __int8 *)(a1 + 85);
    v129 = v28;
    v85 = *(_BYTE *)(a1 + 86);
    LODWORD(v137) = v85;
    v86 = *(_BYTE *)(a1 + 87);
    LODWORD(v133) = v86;
    v126 = *(unsigned __int8 *)(a1 + 88);
    v87 = *(_QWORD *)(a1 + 96);
    v88 = *(_QWORD *)(a1 + 104);
    v89 = *(_QWORD *)a1;
    LOBYTE(v74) = *(_BYTE *)(a1 + 8);
    LODWORD(v142) = v74;
    v90 = swift_retain(v89);
    v91 = sub_100043890(v90, (char)v74);
    swift_release(v89);
    v92 = swift_getKeyPath(&unk_1000CEE60);
    *(_QWORD *)&v152 = v91;
    v93 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v130 = v93;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v152, v92, v93);
    swift_release(v92);
    v94 = *(_BYTE *)(v91 + 48);
    swift_release(v91);
    v95 = swift_getKeyPath(&unk_1000CEE88);
    v96 = type metadata accessor for CalculatorViewModel(0);
    v97 = Environment.init<A>(_:)(v96, v96, v93);
    LOBYTE(v152) = v83;
    BYTE1(v152) = v143;
    BYTE2(v152) = v84;
    v98 = v127;
    BYTE3(v152) = v127;
    BYTE4(v152) = v85;
    BYTE5(v152) = v86;
    v99 = v126;
    BYTE6(v152) = v126;
    *((_QWORD *)&v152 + 1) = v87;
    v153 = v88;
    v154 = v94;
    v155 = v95;
    v156 = 0;
    v157 = v97;
    v158 = v100 & 1;
    v101 = sub_100008078(&qword_1001152F0, &qword_100115298, (uint64_t)&protocol conformance descriptor for Button<A>);
    v102 = sub_10003D4F0();
    v103 = v128;
    v104 = v134;
    v105 = v101;
    v106 = v129;
    View.buttonStyle<A>(_:)(&v152, v134, &type metadata for CalculatorButtonStyle, v105, v102);
    sub_100007720(v95, 0);
    v107 = swift_release(v97);
    (*(void (**)(char *, uint64_t, __n128))(v132 + 8))(v106, v104, v107);
    v108 = Namespace.wrappedValue.getter(*(_QWORD *)(a1 + 152));
    LODWORD(v106) = static MatchedGeometryProperties.frame.getter();
    v109 = static UnitPoint.center.getter();
    v111 = v110;
    v112 = v135;
    v113 = (uint64_t)v140;
    v114 = v136;
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v140, v103, v136);
    v115 = v113 + *(int *)(v131 + 36);
    *(_BYTE *)v115 = 1;
    *(_QWORD *)(v115 + 8) = v108;
    *(_DWORD *)(v115 + 16) = (_DWORD)v106;
    *(double *)(v115 + 24) = v109;
    *(_QWORD *)(v115 + 32) = v111;
    *(_BYTE *)(v115 + 40) = 1;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v103, v114);
    v116 = swift_retain(v89);
    v117 = sub_100043890(v116, v142);
    swift_release(v89);
    v118 = swift_getKeyPath(&unk_1000CEE60);
    *(_QWORD *)&v152 = v117;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v152, v118, v130);
    swift_release(v118);
    LOBYTE(v118) = *(_BYTE *)(v117 + 48);
    swift_release(v117);
    v152 = *(_OWORD *)(a1 + 128);
    LOBYTE(v153) = *(_BYTE *)(a1 + 144);
    v119 = sub_100005360(&qword_100115300);
    Binding.wrappedValue.getter(&v150, v119);
    LOBYTE(v106) = v150;
    v120 = v139;
    sub_10000531C(v113, v139, &qword_1001152A8);
    v121 = v145;
    v122 = (_BYTE *)(v120 + *(int *)(v145 + 36));
    *v122 = (_BYTE)v141;
    v122[1] = v143;
    v122[2] = v138;
    v122[3] = v98;
    v122[4] = v137;
    v122[5] = v133;
    v122[6] = v99;
    v122[7] = v118;
    v122[8] = (_BYTE)v106;
    sub_100004F48(v113, &qword_1001152A8);
    v65 = &qword_1001152B0;
    v66 = v144;
    sub_100007CD8(v120, v144, &qword_1001152B0);
    v123 = v147;
    sub_10000531C(v66, v147, &qword_1001152B0);
    swift_storeEnumTagMultiPayload(v123, v146, 0);
    v68 = sub_10003D534();
    v69 = sub_10003D3C8(&qword_100115330, &qword_100115288, (void (*)(void))sub_10003D6C4);
    v73 = v148;
    v70 = v149;
    v71 = v123;
    v72 = v121;
  }
  _ConditionalContent<>.init(storage:)(v70, v71, v72, v73, v68, v69);
  return sub_100004F48(v66, v65);
}

double sub_10003C5D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const mach_header_64 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double result;
  _QWORD v24[5];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v2 = type metadata accessor for Logger(0);
  sub_100014124(v2, (uint64_t)qword_10011FEA8);
  sub_10003D2D0((uint64_t *)a1);
  v3 = sub_10003D2D0((uint64_t *)a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v27 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = 0x1000000000000;
    if (!*(_BYTE *)(a1 + 88))
      v8 = 0;
    v9 = 0x10000000000;
    if (!*(_BYTE *)(a1 + 87))
      v9 = 0;
    v10 = &_mh_execute_header;
    if (!*(_BYTE *)(a1 + 86))
      v10 = 0;
    v11 = 0x1000000;
    if (!*(_BYTE *)(a1 + 85))
      v11 = 0;
    v12 = 0x10000;
    if (!*(_BYTE *)(a1 + 84))
      v12 = 0;
    v13 = 256;
    if (!*(_BYTE *)(a1 + 83))
      v13 = 0;
    v14 = sub_10003C884(v13 | *(unsigned __int8 *)(a1 + 82) | v12 | v11 | (unint64_t)v10 | v9 | v8);
    sub_10004FE08(0, v14);
    v16 = v15;
    v25 = sub_100029918(v17, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_bridgeObjectRelease(v16);
    sub_10003D8E0(a1);
    sub_10003D8E0(a1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s tapped", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_10003D8E0(a1);
    sub_10003D8E0(a1);
  }

  v18 = static Animation.spring(response:dampingFraction:blendDuration:)(0.25, 0.8, 0.0);
  v27 = Transaction.init(animation:)(v18);
  v19 = Transaction.disablesAnimations.setter(1);
  v20 = v27;
  __chkstk_darwin(v19, v21);
  v24[2] = a1;
  v22 = swift_retain(v20);
  withTransaction<A>(_:_:)(v22, sub_10003D9B4, v24, (char *)&type metadata for () + 8);
  swift_release(v20);
  *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  return result;
}

uint64_t sub_10003C884(uint64_t a1)
{
  uint64_t v1;
  unsigned int v3;

  v1 = a1;
  if ((a1 & 0x10000) == 0)
    goto LABEL_12;
  if (qword_100113CC8 != -1)
    swift_once(&qword_100113CC8, sub_1000506F0);
  if (sub_10003B98C(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
  {
    if (v1 > 0x23u)
    {
      if (v1 == 36)
      {
        return 37;
      }
      else if (v1 == 55)
      {
        return 30;
      }
    }
    else if (v1 == 8)
    {
      return 92;
    }
    else if (v1 == 30)
    {
      return 55;
    }
  }
  else
  {
LABEL_12:
    if ((v1 & 0x100) != 0)
    {
      if (qword_100113CC0 != -1)
        swift_once(&qword_100113CC0, sub_100050670);
      if (sub_10003B98C(v1, static CalculatorButtonRepresentable.shiftableButtons))
        return CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
    }
    if ((v1 & 0x1000000FFLL) == 0x100000002)
      v3 = 34;
    else
      v3 = v1;
    if ((v1 & 0x10000FF) == 0x1000001)
      return 52;
    else
      return v3;
  }
  return v1;
}

uint64_t sub_10003C9C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 64);
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = *(unsigned __int8 *)(a1 + 81);
  sub_100007DE0(v1, v2, v3, v4);
  v5 = sub_1000439A0(v1, v2, v3 | (v4 << 8));
  v7 = v6;
  v9 = v8;
  sub_100007ED0(v1, v2, v3, v4);
  swift_retain(v5);
  swift_retain(v7);
  v10 = sub_100005360(&qword_100113FB0);
  Binding.wrappedValue.getter(&v16, v10);
  v13 = v5;
  v14 = v7;
  v15 = v9 & 1;
  v12 = 1;
  Binding.wrappedValue.setter(&v12, v10);
  swift_release_n(v7, 2);
  return swift_release_n(v5, 2);
}

double sub_10003CAC8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  double result;
  __int128 v14;
  _OWORD v15[13];
  uint64_t v16;

  v2 = static Edge.Set.horizontal.getter();
  EdgeInsets.init(_all:)(v2, 5.0);
  v4 = static Edge.Set.vertical.getter(v3);
  EdgeInsets.init(_all:)(v4, 2.0);
  v6 = static Alignment.center.getter(v5);
  sub_100035564(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, INFINITY, 0, v6, v7);
  v8 = v15[11];
  *(_OWORD *)(a1 + 160) = v15[10];
  *(_OWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 192) = v15[12];
  *(_QWORD *)(a1 + 208) = v16;
  v9 = v15[7];
  *(_OWORD *)(a1 + 96) = v15[6];
  *(_OWORD *)(a1 + 112) = v9;
  v10 = v15[9];
  *(_OWORD *)(a1 + 128) = v15[8];
  *(_OWORD *)(a1 + 144) = v10;
  v11 = v15[3];
  *(_OWORD *)(a1 + 32) = v15[2];
  *(_OWORD *)(a1 + 48) = v11;
  v12 = v15[5];
  *(_OWORD *)(a1 + 64) = v15[4];
  *(_OWORD *)(a1 + 80) = v12;
  result = *(double *)v15;
  v14 = v15[1];
  *(_OWORD *)a1 = v15[0];
  *(_OWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_10003CC3C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[10];

  v4 = v2[7];
  v12[6] = v2[6];
  v12[7] = v4;
  v5 = v2[9];
  v12[8] = v2[8];
  v12[9] = v5;
  v6 = v2[3];
  v12[2] = v2[2];
  v12[3] = v6;
  v7 = v2[5];
  v12[4] = v2[4];
  v12[5] = v7;
  v8 = v2[1];
  v12[0] = *v2;
  v12[1] = v8;
  *a2 = static Alignment.center.getter(a1);
  a2[1] = v9;
  v10 = sub_100005360(&qword_100115268);
  return sub_10003BA78((uint64_t)v12, (_QWORD *)((char *)a2 + *(int *)(v10 + 44)));
}

void sub_10003CCAC(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  _QWORD v27[8];
  uint64_t v28;
  unint64_t v29;

  v27[0] = a1;
  v27[6] = a3;
  v5 = HIBYTE(a2);
  v6 = type metadata accessor for AccessibilityTraits(0, a4);
  v27[4] = *(_QWORD *)(v6 - 8);
  v27[5] = v6;
  __chkstk_darwin(v6, v7);
  v27[2] = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v27[3] = (char *)v27 - v11;
  v12 = sub_100005360(&qword_100115370);
  __chkstk_darwin(v12, v13);
  __chkstk_darwin(v14, v15);
  __chkstk_darwin(v16, v17);
  __chkstk_darwin(v18, v19);
  v27[1] = (char *)v27 - v20;
  v28 = 0;
  v29 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v21 = v29;
  v22 = sub_10003C884(a2 & 0x10101010101FFLL);
  v23 = sub_1000977FC(v22);
  v25 = v24;
  swift_bridgeObjectRelease(v21);
  v28 = v23;
  v29 = v25;
  v26._countAndFlagsBits = 8250;
  v26._object = (void *)0xE200000000000000;
  String.append(_:)(v26);
  __asm { BR              X9 }
}

uint64_t sub_10003CE50()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  int v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v7._countAndFlagsBits = 0x6669746E65696373;
  v7._object = (void *)0xEA00000000006369;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(0xEA00000000006369);
  v8._object = (void *)0x80000001000D6230;
  v8._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v8);
  if ((v1 & 1) != 0)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if ((v1 & 1) != 0)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12 = *(_QWORD *)(v6 - 96);
  v13 = *(_QWORD *)(v6 - 88);
  v14 = sub_100005360(&qword_100115378);
  v15 = sub_100008078(&qword_100115380, &qword_100115378, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  View.accessibilityIdentifier(_:)(v12, v13, v14, v15);
  swift_bridgeObjectRelease(v13);
  v16 = sub_10003C884(v5);
  sub_100097FF4(v16);
  v18 = Text.init(_:tableName:bundle:comment:)(v17);
  v20 = v19;
  v22 = v21;
  v24 = v23 & 1;
  ModifiedContent<>.accessibilityLabel(_:)();
  sub_10002DD44(v18, v20, v24);
  swift_bridgeObjectRelease(v22);
  sub_100004F48(v0, &qword_100115370);
  v25 = sub_10003C884(v5);
  switch(v25)
  {
    case 'T':
      v26 = 0xD000000000000039;
      v27 = "Bytes are reordered so that 0xabcd1234 becomes 0x1234abcd";
      break;
    case 'S':
      v26 = 0xD00000000000002CLL;
      v27 = "Bytes are reordered so 0xabcd becomes 0xcdab";
      break;
    case '3':
      v26 = 0xD000000000000029;
      v27 = "Generates a random number between 0 and 1";
      break;
    default:
      v26 = 0;
      v28 = 0xE000000000000000;
      goto LABEL_15;
  }
  v28 = (unint64_t)(v27 - 32) | 0x8000000000000000;
LABEL_15:
  v29 = LocalizedStringKey.init(stringLiteral:)(v26, v28);
  v31 = v30;
  v33 = v32;
  ((void (*)(uint64_t))ModifiedContent<>.accessibilityHint(_:))(v29);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v31);
  sub_100004F48(v4, &qword_100115370);
  v34 = sub_10003C884(v5);
  if (v34 <= 0x36u && ((1 << v34) & 0x40400008000000) != 0)
  {
    v35 = *(_QWORD *)(v6 - 144);
    ((void (*)(void))static AccessibilityTraits.isToggle.getter)();
  }
  else
  {
    v35 = *(_QWORD *)(v6 - 144);
    ((void (*)(void))static AccessibilityTraits.isKeyboardKey.getter)();
  }
  v37 = *(_QWORD *)(v6 - 136);
  v36 = *(_QWORD *)(v6 - 128);
  v38 = v35;
  v39 = *(_QWORD *)(v6 - 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v37, v38, v39);
  v40 = *(_QWORD *)(v6 - 152);
  ModifiedContent<>.accessibilityAddTraits(_:)(v37, v2);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v39);
  sub_100004F48(v3, &qword_100115370);
  return sub_100007CD8(v40, *(_QWORD *)(v6 - 112), &qword_100115370);
}

void sub_10003D17C(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const mach_header_64 *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = 256;
  if (!v3[1])
    v4 = 0;
  v5 = v4 | *v3;
  v6 = 0x10000;
  if (!v3[2])
    v6 = 0;
  v7 = 0x1000000;
  if (!v3[3])
    v7 = 0;
  v8 = v5 | v6 | v7;
  v9 = &_mh_execute_header;
  if (!v3[4])
    v9 = 0;
  v10 = 0x10000000000;
  if (!v3[5])
    v10 = 0;
  v11 = 0x1000000000000;
  if (!v3[6])
    v11 = 0;
  sub_10003CCAC(a1, v8 | (unint64_t)v9 | v10 | v11 | ((unint64_t)v3[7] << 56), a2, a3);
}

uint64_t sub_10003D208@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003D234(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_10003D258()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_10003B214(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(void **)(v0 + 64), *(_BYTE *)(v0 + 72));
  sub_100007ED0(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(unsigned __int8 *)(v0 + 96), *(_BYTE *)(v0 + 97));
  sub_100007720(*(_QWORD *)(v0 + 128), *(_BYTE *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(*(_QWORD *)(v0 + 152));
  return swift_deallocObject(v0, 176, 7);
}

double sub_10003D2C0()
{
  uint64_t v0;

  return sub_10003C5D0(v0 + 16);
}

double sub_10003D2C8@<D0>(uint64_t a1@<X8>)
{
  return sub_10003CAC8(a1);
}

uint64_t *sub_10003D2D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a1;
  v3 = a1[4];
  v4 = a1[5];
  v5 = (void *)a1[6];
  v6 = *((_BYTE *)a1 + 56);
  v7 = a1[8];
  v8 = a1[9];
  v9 = *((_BYTE *)a1 + 81);
  v12 = *((_BYTE *)a1 + 120);
  v13 = a1[14];
  v14 = a1[16];
  v15 = a1[17];
  v10 = *((unsigned __int8 *)a1 + 80);
  swift_retain(a1[2]);
  swift_retain(v2);
  sub_10003B1A4(v3, v4, v5, v6);
  sub_100007DE0(v7, v8, v10, v9);
  sub_1000076D0(v13, v12);
  swift_retain(v14);
  swift_retain(v15);
  return a1;
}

uint64_t sub_10003D3A4()
{
  return sub_10003D3C8(&qword_1001152C8, &qword_1001152D0, (void (*)(void))sub_10003D430);
}

uint64_t sub_10003D3C8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10003D430()
{
  return sub_10003D3C8(&qword_1001152D8, &qword_1001152E0, (void (*)(void))sub_10003D454);
}

unint64_t sub_10003D454()
{
  unint64_t result;

  result = qword_1001152E8;
  if (!qword_1001152E8)
  {
    result = swift_getWitnessTable(&unk_1000D1E28, &type metadata for CalculatorButtonImage);
    atomic_store(result, (unint64_t *)&qword_1001152E8);
  }
  return result;
}

uint64_t sub_10003D4A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_10003D4CC(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

unint64_t sub_10003D4F0()
{
  unint64_t result;

  result = qword_1001152F8;
  if (!qword_1001152F8)
  {
    result = swift_getWitnessTable(&unk_1000D2FE8, &type metadata for CalculatorButtonStyle);
    atomic_store(result, (unint64_t *)&qword_1001152F8);
  }
  return result;
}

unint64_t sub_10003D534()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115308;
  if (!qword_100115308)
  {
    v1 = sub_100005608(&qword_1001152B0);
    sub_10003D5A0();
    sub_10003D680();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115308);
  }
  return result;
}

unint64_t sub_10003D5A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100115310;
  if (!qword_100115310)
  {
    v1 = sub_100005608(&qword_1001152A8);
    v2[0] = sub_100005608(&qword_100115298);
    v2[1] = &type metadata for CalculatorButtonStyle;
    v2[2] = sub_100008078(&qword_1001152F0, &qword_100115298, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_10003D4F0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100008078(&qword_100115318, &qword_100115320, (uint64_t)&protocol conformance descriptor for _MatchedGeometryEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115310);
  }
  return result;
}

unint64_t sub_10003D680()
{
  unint64_t result;

  result = qword_100115328;
  if (!qword_100115328)
  {
    result = swift_getWitnessTable(&unk_1000CEF34, &type metadata for ModeButtonAccessibilityModifiers);
    atomic_store(result, (unint64_t *)&qword_100115328);
  }
  return result;
}

unint64_t sub_10003D6C4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115338;
  if (!qword_100115338)
  {
    v1 = sub_100005608(&qword_100115280);
    sub_10003D748();
    sub_100008078(&qword_100115358, &qword_100113FE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115338);
  }
  return result;
}

unint64_t sub_10003D748()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115340;
  if (!qword_100115340)
  {
    v1 = sub_100005608(&qword_100115278);
    sub_10003D7CC();
    sub_100008078(&qword_100115318, &qword_100115320, (uint64_t)&protocol conformance descriptor for _MatchedGeometryEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115340);
  }
  return result;
}

unint64_t sub_10003D7CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115348;
  if (!qword_100115348)
  {
    v1 = sub_100005608(&qword_100115270);
    sub_100005178(&qword_100115350, type metadata accessor for ModeMenuView, (uint64_t)&unk_1000D2730);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115348);
  }
  return result;
}

uint64_t sub_10003D850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ModeMenuView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003D894(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ModeMenuView(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003D8E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(void **)(a1 + 48);
  v6 = *(_BYTE *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_BYTE *)(a1 + 81);
  v12 = *(_BYTE *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 128);
  v13 = *(_QWORD *)(a1 + 112);
  v14 = *(_QWORD *)(a1 + 136);
  v10 = *(unsigned __int8 *)(a1 + 80);
  swift_release(*(_QWORD *)a1);
  swift_release(v2);
  sub_10003B214(v3, v4, v5, v6);
  sub_100007ED0(v7, v8, v10, v9);
  sub_100007720(v13, v12);
  swift_release(v14);
  swift_release(v15);
  return a1;
}

uint64_t sub_10003D9B4()
{
  uint64_t v0;

  return sub_10003C9C8(*(_QWORD *)(v0 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for ModeButtonAccessibilityModifiers(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ModeButtonAccessibilityModifiers(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ModeButtonAccessibilityModifiers(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModeButtonAccessibilityModifiers()
{
  return &type metadata for ModeButtonAccessibilityModifiers;
}

uint64_t sub_10003DA88()
{
  return sub_100008078(&qword_100115360, &qword_100115368, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_10003DAB4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F5D78, 1);
}

unint64_t sub_10003DAC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115390;
  if (!qword_100115390)
  {
    v1 = sub_100005608(&qword_100115370);
    sub_100008078(&qword_100115380, &qword_100115378, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115390);
  }
  return result;
}

uint64_t sub_10003DB64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  v1 = v0 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_appStartTime;
  v2 = type metadata accessor for Date(0);
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(v0 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10003DBD4()
{
  return type metadata accessor for AnalyticsTimeStampInfo(0);
}

uint64_t type metadata accessor for AnalyticsTimeStampInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_1001153C0;
  if (!qword_1001153C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AnalyticsTimeStampInfo);
  return result;
}

uint64_t sub_10003DC18(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_10003DC84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[24];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v0 + 16);
  swift_retain(v7);
  Date.init()(v8);
  v9 = v7 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime;
  swift_beginAccess(v7 + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime, v26, 33, 0);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 40))(v9, v6, v2);
  swift_endAccess(v26);
  swift_release(v7);
  if (qword_100113F08 != -1)
    swift_once(&qword_100113F08, sub_1000A85CC);
  v10 = type metadata accessor for Logger(0);
  sub_100014124(v10, (uint64_t)qword_10011FEC0);
  v11 = swift_retain_n(v1, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v23 = v15;
    *(_DWORD *)v14 = 136315138;
    v25 = v15;
    v22[1] = v14 + 4;
    v16 = *(_QWORD *)(v1 + 16) + OBJC_IVAR____TtC10Calculator22AnalyticsTimeStampInfo_lastEventUpdatedTime;
    swift_beginAccess(v16, v26, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v16, v2);
    v17 = sub_10003DFA0();
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v2, v17);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v24 = sub_100029918(v18, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "updated last event updated time to: %s", v14, 0xCu);
    v21 = v23;
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
}

uint64_t sub_10003DF1C(uint64_t a1)
{
  _BYTE v3[24];

  swift_beginAccess(a1 + 16, v3, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
}

uint64_t sub_10003DF5C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 28, 7);
}

uint64_t type metadata accessor for AnalyticsManager()
{
  return objc_opt_self(_TtC10Calculator16AnalyticsManager);
}

unint64_t sub_10003DFA0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115500;
  if (!qword_100115500)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100115500);
  }
  return result;
}

BOOL sub_10003DFE8()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];
  __int128 v10;
  __int128 v11;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "infoDictionary");

  if (!v1)
  {
    v10 = 0u;
    v11 = 0u;
    goto LABEL_9;
  }
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_1000053A4(0x656C646E75424643, 0xEF6E6F6973726556), (v4 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v2);
    goto LABEL_9;
  }
  sub_1000052E0(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v10);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_9:
    sub_100039C90((uint64_t)&v10);
    goto LABEL_10;
  }
  if (swift_dynamicCast(v9, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6))
  {
    v5 = v9[1];
    v6 = v9[0] & 0xFFFFFFFFFFFFLL;
    goto LABEL_11;
  }
LABEL_10:
  v6 = 0;
  v5 = 0xE000000000000000;
LABEL_11:
  swift_bridgeObjectRelease(v5);
  v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0)
    v7 = v6;
  return v7 == 0;
}

uint64_t sub_10003E144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_10003E15C(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin();
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *a1++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin();
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_10003E310@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CF1A8);
  v9[0] = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v5);
  swift_release(KeyPath);
  v6 = v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  swift_beginAccess(v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, v9, 0, 0);
  v7 = type metadata accessor for LayoutDirection(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, v6, v7);
}

uint64_t sub_10003E3D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  __n128 v13;
  _BYTE v15[16];
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;

  v4 = type metadata accessor for LayoutDirection(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v5 + 16))(v9, a1, v4, v7);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CF1A8);
  v16 = v10;
  v17 = v9;
  v18 = v10;
  v12 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v18, KeyPath, sub_10004638C, v15, (char *)&type metadata for () + 8, v12);
  v13 = swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v5 + 8))(v9, v4, v13);
}

__n128 sub_10003E4E0@<Q0>(uint64_t *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __n128 result;
  uint64_t v7;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CF1F8);
  v7 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  result = *(__n128 *)(v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
  *a2 = result;
  return result;
}

void sub_10003E574(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  _QWORD v7[7];
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CF1F8);
  v7[2] = v4;
  v7[3] = v2;
  v7[4] = v3;
  v8 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10003A778, v7, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
}

__n128 sub_10003E624@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CF220);
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  result = *(__n128 *)(v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
  v7 = *(_OWORD *)(v3 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets + 16);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v7;
  return result;
}

void sub_10003E6BC(__int128 *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  __int128 v7;
  _BYTE v8[16];
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *a1;
  v2 = *((_QWORD *)a1 + 2);
  v3 = *((_QWORD *)a1 + 3);
  v4 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CF220);
  v9 = v4;
  v10 = v7;
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, sub_10003A664, v8, (char *)&type metadata for () + 8, v6);
  swift_release(KeyPath);
}

uint64_t CalculatorCustomSplitView.sidebarView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t CalculatorCustomSplitView.mainView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 24) - 8) + 16))(a2, v2 + *(int *)(a1 + 52));
}

double CalculatorCustomSplitView.sidebarWidthRatio.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 56));
}

uint64_t CalculatorCustomSplitView.sidebarPresentationStyle.getter(uint64_t a1)
{
  uint64_t v1;

  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 60));
}

double CalculatorCustomSplitView.fadeValue.getter(uint64_t a1)
{
  uint64_t v1;

  return *(double *)(v1 + *(int *)(a1 + 64));
}

uint64_t property wrapper backing initializer of CalculatorCustomSplitView.isDetectingLongPress(char a1)
{
  char v2;
  uint64_t v3;

  v2 = a1;
  GestureState.init(wrappedValue:)(&v3, &v2, &type metadata for Bool);
  return v3;
}

uint64_t sub_10003E810()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100005360(&qword_100115628);
  GestureState.projectedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_10003E874@<X0>(_QWORD *a1@<X8>)
{
  return sub_100044438(&qword_100113F58, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, 0x616850656E656353, 0xEA00000000006573, a1);
}

uint64_t property wrapper backing initializer of CalculatorCustomSplitView.screenDrag(double a1)
{
  double v2;
  _QWORD v3[2];

  v2 = a1;
  State.init(wrappedValue:)(v3, &v2, &type metadata for CGFloat);
  return v3[1];
}

double sub_10003E8F8()
{
  uint64_t v0;
  double v2;

  v0 = sub_100005360(&qword_1001155F0);
  State.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_10003E94C(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];

  v3 = (uint64_t *)(v2 + *(int *)(a1 + 88));
  v4 = *v3;
  v5 = v3[1];
  *(double *)v8 = a2;
  v8[1] = v4;
  v8[2] = v5;
  v6 = sub_100005360(&qword_1001155F0);
  return State.wrappedValue.setter(v8, v6);
}

uint64_t CalculatorCustomSplitView.init(sidebarWidthRatio:sidebarPresentationStyle:sidebarView:mainView:)@<X0>(char a1@<W0>, uint64_t (*a2)(_QWORD *)@<X1>, uint64_t (*a3)(uint64_t)@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, double a8@<D0>, uint64_t a9)
{
  int *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v34 = a4;
  v35 = a5;
  *(_QWORD *)&v36 = a6;
  *((_QWORD *)&v36 + 1) = a9;
  v14 = (int *)type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)&v34);
  *(_QWORD *)(a7 + v14[16]) = 0x3FE0000000000000;
  *(_QWORD *)(a7 + v14[17]) = 0x406F400000000000;
  v15 = a7 + v14[18];
  LOBYTE(v37) = 0;
  GestureState.init(wrappedValue:)(&v34, &v37, &type metadata for Bool);
  v16 = v35;
  v17 = v36;
  *(_BYTE *)v15 = v34;
  *(_QWORD *)(v15 + 8) = v16;
  *(_OWORD *)(v15 + 16) = v17;
  v18 = a7 + v14[19];
  v19 = type metadata accessor for CalculatorLayout(0);
  v20 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  *(_QWORD *)v18 = Environment.init<A>(_:)(v19, v19, v20);
  *(_BYTE *)(v18 + 8) = v21 & 1;
  v22 = a7 + v14[20];
  v23 = type metadata accessor for CalculatorToolbarViewModel(0);
  v24 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  *(_QWORD *)v22 = Environment.init<A>(_:)(v23, v23, v24);
  *(_BYTE *)(v22 + 8) = v25 & 1;
  v26 = (_QWORD *)(a7 + v14[21]);
  *v26 = swift_getKeyPath(&unk_1000CF038);
  v27 = sub_100005360(&qword_100113F58);
  swift_storeEnumTagMultiPayload(v26, v27, 0);
  v28 = (_QWORD *)(a7 + v14[22]);
  v37 = 0;
  v29 = State.init(wrappedValue:)(&v34, &v37, &type metadata for CGFloat);
  v30 = v35;
  *v28 = v34;
  v28[1] = v30;
  v31 = 1.0;
  if (a8 <= 1.0)
    v31 = a8;
  *(double *)(a7 + v14[14]) = v31;
  *(_BYTE *)(a7 + v14[15]) = a1;
  v32 = a2(v29);
  return a3(v32);
}

uint64_t type metadata accessor for CalculatorCustomSplitView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for CalculatorCustomSplitView);
}

double sub_10003EBB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  double v9;
  uint64_t v11;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 76));
  v3 = *v2;
  v4 = *((_BYTE *)v2 + 8);
  v5 = swift_retain(*v2);
  v6 = sub_100043C20(v5, v4, 0xD000000000000010, 0x80000001000D63C0);
  swift_release(v3);
  KeyPath = swift_getKeyPath(&unk_1000CF1F8);
  v11 = v6;
  v8 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(double *)(v6 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__windowSize);
  swift_release(v6);
  return v9;
}

double sub_10003EC98(int *a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;

  v3 = sub_10003EBB8((uint64_t)a1);
  if (*(_BYTE *)(v1 + a1[15]) == 1)
  {
    v4 = *(double *)(v1 + a1[14]);
  }
  else
  {
    v5 = *(double *)(v1 + a1[17]);
    v4 = v5 / sub_10003EBB8((uint64_t)a1);
  }
  return v3 * v4;
}

double sub_10003ECF8(int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  _QWORD *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  __n128 v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  double v46;
  double v47;
  double v48;
  char *v50;
  char *v51;
  uint64_t v52;
  _QWORD v53[3];

  v2 = v1;
  v4 = type metadata accessor for LayoutDirection(0);
  v52 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v51 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v50 = (char *)&v50 - v9;
  v10 = sub_10003EBB8((uint64_t)a1);
  if (*(_BYTE *)(v1 + a1[15]) == 1)
  {
    v11 = *(double *)(v1 + a1[14]);
  }
  else
  {
    v12 = *(double *)(v1 + a1[17]);
    v11 = v12 / sub_10003EBB8((uint64_t)a1);
  }
  v13 = v10 * (v11 * 0.5);
  v14 = sub_10003EBB8((uint64_t)a1);
  v15 = (_QWORD *)(v1 + a1[20]);
  v16 = *v15;
  v17 = *((_BYTE *)v15 + 8);
  v18 = swift_retain(*v15);
  v19 = sub_100043C20(v18, v17, 0xD00000000000001ALL, 0x80000001000D63E0);
  swift_release(v16);
  KeyPath = swift_getKeyPath(&unk_1000CF180);
  v53[0] = v19;
  v21 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v53, KeyPath, v21);
  swift_release(KeyPath);
  LOBYTE(v16) = *(_BYTE *)(v19 + 16);
  swift_release(v19);
  v22 = 0.0;
  v23 = 0.0;
  if ((v16 & 1) == 0)
  {
    if (*(_BYTE *)(v2 + a1[15]) == 1)
    {
      v23 = *(double *)(v2 + a1[14]);
    }
    else
    {
      v24 = *(double *)(v2 + a1[17]);
      v23 = v24 / sub_10003EBB8((uint64_t)a1);
    }
  }
  v25 = v13 - v14 * v23;
  v26 = sub_10003EBB8((uint64_t)a1);
  v27 = *v15;
  v28 = *((_BYTE *)v15 + 8);
  v29 = swift_retain(*v15);
  v30 = sub_100043C20(v29, v28, 0xD00000000000001ALL, 0x80000001000D63E0);
  swift_release(v27);
  v31 = swift_getKeyPath(&unk_1000CF180);
  v53[0] = v30;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v53, v31, v21);
  swift_release(v31);
  LODWORD(v27) = *(unsigned __int8 *)(v30 + 16);
  swift_release(v30);
  if ((_DWORD)v27 == 1)
  {
    if (*(_BYTE *)(v2 + a1[15]) == 1)
    {
      v22 = *(double *)(v2 + a1[14]);
    }
    else
    {
      v32 = *(double *)(v2 + a1[17]);
      v22 = v32 / sub_10003EBB8((uint64_t)a1);
    }
  }
  if (v25 != v13 - v26 * v22)
  {
    v33 = (uint64_t *)(v2 + a1[19]);
    v34 = *v33;
    v35 = *((_BYTE *)v33 + 8);
    v36 = swift_retain(*v33);
    v37 = sub_100043C20(v36, v35, 0xD000000000000010, 0x80000001000D63C0);
    swift_release(v34);
    v38 = swift_getKeyPath(&unk_1000CF1A8);
    v53[0] = v37;
    v39 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v53, v38, v39);
    swift_release(v38);
    v40 = v37 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
    swift_beginAccess(v37 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, v53, 0, 0);
    v41 = v52;
    v42 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v50, v40, v4);
    v43 = swift_release(v37);
    v44 = v51;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v41 + 104))(v51, enum case for LayoutDirection.leftToRight(_:), v4, v43);
    LOBYTE(v37) = static LayoutDirection.== infix(_:_:)(v42, v44);
    v45 = *(void (**)(char *, uint64_t))(v41 + 8);
    v45(v44, v4);
    v45(v42, v4);
    v46 = sub_10003E8F8();
    v47 = v25 - v46;
    v48 = v25 + v46;
    if ((v37 & 1) != 0)
      return v48;
    else
      return v47;
  }
  return v25;
}

uint64_t CalculatorCustomSplitView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t TupleTypeMetadata2;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OpaqueTypeConformance2;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t KeyPath;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  __n128 v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t WitnessTable;
  void *v134;

  v113 = a3;
  v109 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1, a2);
  v107 = v4;
  v108 = (char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for ScenePhase(0);
  v111 = *(_QWORD *)(v112 - 8);
  v6 = __chkstk_darwin(v112, v5);
  v110 = (uint64_t *)((char *)&v99 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v106 = *(_QWORD *)(a1 + 16);
  v8 = type metadata accessor for ModifiedContent(255, v106, &type metadata for _FrameLayout, v6);
  v10 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _OffsetEffect, v9);
  v11 = sub_100005608(&qword_100115508);
  v114 = (char *)type metadata accessor for ModifiedContent(255, v10, v11, v12);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = sub_100005608(&qword_100115510);
  v105 = v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v13, v14, 0, 0);
  v16 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v16);
  v17 = type metadata accessor for ZStack(255, v16);
  v19 = type metadata accessor for ModifiedContent(255, v17, &type metadata for _GeometryGroupEffect, v18);
  v20 = sub_100005608(&qword_100115518);
  v22 = type metadata accessor for ModifiedContent(255, v19, v20, v21);
  v23 = sub_100005608(&qword_100114B80);
  v25 = type metadata accessor for ModifiedContent(255, v22, v23, v24);
  v27 = type metadata accessor for ModifiedContent(255, v25, &type metadata for _OffsetEffect, v26);
  v29 = type metadata accessor for ModifiedContent(255, v27, v11, v28);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v17);
  v134 = &protocol witness table for _GeometryGroupEffect;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v31 = sub_100008078(&qword_100115520, &qword_100115518, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v131 = v30;
  v132 = v31;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v33 = sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
  v129 = v32;
  v130 = v33;
  v127 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v25);
  v128 = &protocol witness table for _OffsetEffect;
  v34 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v35 = sub_100008078(&qword_100115528, &qword_100115508, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v125 = v34;
  v126 = v35;
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v29);
  v119 = v29;
  v120 = v36;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v119, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 0);
  v38 = swift_getTupleTypeMetadata2(255, v114, OpaqueTypeMetadata2, 0, 0);
  v39 = type metadata accessor for TupleView(255, v38);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v39);
  v40 = type metadata accessor for ZStack(255, v39);
  v41 = sub_100005608(&qword_100115530);
  v43 = type metadata accessor for ModifiedContent(255, v40, v41, v42);
  v44 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v40);
  v45 = sub_100008078(&qword_100115538, &qword_100115530, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v123 = v44;
  v124 = v45;
  v46 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v43);
  v119 = v43;
  v120 = v46;
  v47 = swift_getOpaqueTypeMetadata2(255, &v119, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 0);
  v48 = sub_100005608(&qword_100115540);
  v119 = v43;
  v120 = v46;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v119, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
  v50 = sub_100008078(&qword_100115548, &qword_100115540, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v119 = v47;
  v120 = v48;
  v121 = OpaqueTypeConformance2;
  v122 = v50;
  v51 = swift_getOpaqueTypeMetadata2(255, &v119, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 0);
  v52 = sub_100005608(&qword_100115550);
  v54 = type metadata accessor for ModifiedContent(255, v51, v52, v53);
  v56 = type metadata accessor for ModifiedContent(255, v54, &type metadata for _AppearanceActionModifier, v55);
  v119 = v47;
  v120 = v48;
  v121 = OpaqueTypeConformance2;
  v122 = v50;
  v57 = swift_getOpaqueTypeConformance2(&v119, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
  v58 = sub_100008078(&qword_100115558, &qword_100115550, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v117 = v57;
  v118 = v58;
  v115 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v54);
  v116 = &protocol witness table for _AppearanceActionModifier;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v56);
  v101 = v56;
  v100 = v59;
  v103 = type metadata accessor for HStack(0, v56);
  v102 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103, v60);
  v114 = (char *)&v99 - v61;
  v62 = v104;
  v63 = (_QWORD *)(v104 + *(int *)(a1 + 80));
  v64 = *v63;
  v65 = *((_BYTE *)v63 + 8);
  swift_retain(*v63);
  v66 = sub_100043C20(v64, v65, 0xD00000000000001ALL, 0x80000001000D63E0);
  swift_release(v64);
  KeyPath = swift_getKeyPath(&unk_1000CF068);
  v119 = v66;
  v68 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v119, KeyPath, v68);
  swift_release(KeyPath);
  LODWORD(KeyPath) = *(unsigned __int8 *)(v66 + 17);
  swift_release(v66);
  v71 = a1;
  v72 = *(int *)(a1 + 60);
  v73 = v62;
  v74 = *(unsigned __int8 *)(v62 + v72);
  if ((_DWORD)KeyPath != v74)
  {
    v75 = swift_retain(v64);
    v76 = sub_100043C20(v75, v65, 0xD00000000000001ALL, 0x80000001000D63E0);
    swift_release(v64);
    v77 = swift_getKeyPath(&unk_1000CF068);
    __chkstk_darwin(v77, v78);
    *(&v99 - 2) = v76;
    *((_BYTE *)&v99 - 8) = v74;
    v119 = v76;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v119, v77, sub_1000438D0, &v99 - 4, (char *)&type metadata for () + 8, v68);
    swift_release(v76);
    swift_release(v77);
  }
  v79 = __chkstk_darwin(v69, v70);
  v80 = v106;
  v81 = v105;
  *(&v99 - 6) = v106;
  *(&v99 - 5) = v81;
  v82 = *(_QWORD *)(v71 + 40);
  v99 = *(_QWORD *)(v71 + 32);
  *(&v99 - 4) = v99;
  *(&v99 - 3) = v82;
  v83 = v73;
  *(&v99 - 2) = v73;
  v84 = static VerticalAlignment.center.getter(v79);
  HStack.init(alignment:spacing:content:)(v84, 0, 0, sub_1000438EC, &v99 - 8, v101, v100);
  v85 = v110;
  sub_100044438(&qword_100113F58, (uint64_t (*)(_QWORD))&type metadata accessor for ScenePhase, 0x616850656E656353, 0xEA00000000006573, v110);
  v86 = v109;
  v87 = v108;
  (*(void (**)(char *, uint64_t, uint64_t))(v109 + 16))(v108, v83, v71);
  v88 = *(unsigned __int8 *)(v86 + 80);
  v89 = (v88 + 48) & ~v88;
  v90 = (char *)swift_allocObject(&unk_1001099E8, v89 + v107, v88 | 7);
  *((_QWORD *)v90 + 2) = v80;
  *((_QWORD *)v90 + 3) = v81;
  *((_QWORD *)v90 + 4) = v99;
  *((_QWORD *)v90 + 5) = v82;
  (*(void (**)(char *, char *, uint64_t))(v86 + 32))(&v90[v89], v87, v71);
  v91 = v103;
  v92 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v103);
  v93 = sub_100005178(qword_100115560, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v94 = v112;
  v95 = v92;
  v96 = v114;
  View.onChange<A>(of:initial:_:)(v85, 0, sub_1000438FC, v90, v91, v112, v95, v93);
  v97 = swift_release(v90);
  (*(void (**)(_QWORD *, uint64_t, __n128))(v111 + 8))(v85, v94, v97);
  return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v96, v91);
}

uint64_t sub_10003F9FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _BYTE *a6@<X8>)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t TupleTypeMetadata2;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE *v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t OpaqueTypeConformance2;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (**v131)(uint64_t, uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _BYTE *v136;
  uint64_t v137;
  uint64_t v138;
  _BYTE *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t KeyPath;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t v155;
  __n128 v156;
  _BYTE *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  void (*v170)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v171;
  void (*v172)(_BYTE *, uint64_t);
  _BYTE v174[4];
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  uint64_t v188;
  _BYTE *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  _BYTE *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  _BYTE *v204;
  void (*v205)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v206;
  uint64_t v207;
  _BYTE *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t WitnessTable;
  void *v241;

  v214 = a5;
  v211 = a4;
  v212 = a1;
  v200 = a6;
  v225 = a2;
  v226 = a3;
  v213 = a2;
  v210 = a3;
  v227 = a4;
  v228 = a5;
  v209 = type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)&v225);
  v201 = *(_QWORD *)(v209 - 8);
  v203 = *(_QWORD *)(v201 + 64);
  v9 = __chkstk_darwin(v209, v8);
  v208 = &v174[-v10];
  v205 = (void (*)(_BYTE *, uint64_t, uint64_t))type metadata accessor for LocalCoordinateSpace(0, v9);
  v12 = __chkstk_darwin(v205, v11);
  v204 = &v174[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v195 = type metadata accessor for DragGesture(0, v12);
  v194 = *(_QWORD *)(v195 - 8);
  __chkstk_darwin(v195, v14);
  v193 = &v174[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v196 = sub_100005360(&qword_1001155F8);
  __chkstk_darwin(v196, v16);
  v197 = &v174[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v207 = sub_100005360(&qword_100115540);
  v199 = *(_QWORD *)(v207 - 8);
  v19 = __chkstk_darwin(v207, v18);
  v198 = &v174[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = type metadata accessor for ModifiedContent(255, a2, &type metadata for _FrameLayout, v19);
  v23 = type metadata accessor for ModifiedContent(255, v21, &type metadata for _OffsetEffect, v22);
  v24 = sub_100005608(&qword_100115508);
  v26 = type metadata accessor for ModifiedContent(255, v23, v24, v25);
  v27 = sub_100005608(&qword_100115510);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a3, v27, 0, 0);
  v29 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v29);
  v30 = type metadata accessor for ZStack(255, v29);
  v32 = type metadata accessor for ModifiedContent(255, v30, &type metadata for _GeometryGroupEffect, v31);
  v33 = sub_100005608(&qword_100115518);
  v35 = type metadata accessor for ModifiedContent(255, v32, v33, v34);
  v36 = sub_100005608(&qword_100114B80);
  v38 = type metadata accessor for ModifiedContent(255, v35, v36, v37);
  v40 = type metadata accessor for ModifiedContent(255, v38, &type metadata for _OffsetEffect, v39);
  v42 = type metadata accessor for ModifiedContent(255, v40, v24, v41);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v30);
  v241 = &protocol witness table for _GeometryGroupEffect;
  v43 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v32);
  v44 = sub_100008078(&qword_100115520, &qword_100115518, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v238 = v43;
  v239 = v44;
  v45 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  v46 = sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
  v236 = v45;
  v237 = v46;
  v234 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v38);
  v235 = &protocol witness table for _OffsetEffect;
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v40);
  v48 = sub_100008078(&qword_100115528, &qword_100115508, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v232 = v47;
  v233 = v48;
  v49 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v42);
  v225 = v42;
  v226 = v49;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v225, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 0);
  v51 = swift_getTupleTypeMetadata2(255, v26, OpaqueTypeMetadata2, 0, 0);
  v52 = type metadata accessor for TupleView(255, v51);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v52);
  v53 = type metadata accessor for ZStack(0, v52);
  v177 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53, v54);
  v56 = &v174[-v55];
  v57 = sub_100005608(&qword_100115530);
  v59 = type metadata accessor for ModifiedContent(0, v53, v57, v58);
  v202 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59, v60);
  v62 = &v174[-v61];
  v63 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v53);
  v64 = sub_100008078(&qword_100115538, &qword_100115530, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v176 = v63;
  v230 = v63;
  v231 = v64;
  v65 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v59);
  v225 = v59;
  v226 = v65;
  v66 = swift_getOpaqueTypeMetadata2(0, &v225, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 0);
  v179 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66, v67);
  v206 = &v174[-v68];
  v225 = v59;
  v226 = v65;
  v178 = v65;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v225, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
  v70 = sub_100008078(&qword_100115548, &qword_100115540, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v185 = v66;
  v225 = v66;
  v226 = v207;
  v181 = OpaqueTypeConformance2;
  v227 = OpaqueTypeConformance2;
  v228 = v70;
  v180 = v70;
  v71 = swift_getOpaqueTypeMetadata2(0, &v225, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 0);
  v183 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71, v72);
  v182 = &v174[-v73];
  v74 = sub_100005608(&qword_100115550);
  v184 = v71;
  v76 = type metadata accessor for ModifiedContent(0, v71, v74, v75);
  v188 = *(_QWORD *)(v76 - 8);
  v77 = __chkstk_darwin(v76, v76);
  v186 = &v174[-v78];
  v191 = v79;
  v192 = type metadata accessor for ModifiedContent(0, v79, &type metadata for _AppearanceActionModifier, v77);
  v190 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192, v80);
  v187 = &v174[-((v81 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v84 = __chkstk_darwin(v82, v83);
  v189 = &v174[-v85];
  static Alignment.leading.getter(v84);
  v215 = v213;
  v216 = v210;
  v217 = v211;
  v218 = v214;
  v219 = v212;
  ZStack.init(alignment:content:)(v86);
  if (qword_100113DE0 != -1)
    swift_once(&qword_100113DE0, sub_1000534C8);
  v87 = qword_10011FD88;
  v88 = swift_retain(qword_10011FD88);
  v89 = static Color.black.getter(v88);
  v90 = static Edge.Set.all.getter(v89);
  v92 = static SafeAreaRegions.all.getter(v91);
  v93 = static Edge.Set.all.getter(v92);
  v225 = v87;
  v226 = v89;
  LOBYTE(v227) = v90;
  v228 = v92;
  v229 = v93;
  v94 = static Alignment.center.getter(v93);
  v96 = v95;
  v97 = sub_100005360(&qword_100115600);
  v98 = sub_10003D3C8(&qword_100115608, &qword_100115600, (void (*)(void))sub_100046150);
  View.background<A>(_:alignment:)(&v225, v94, v96, v53, v97, v176, v98);
  swift_release(v89);
  v99 = swift_release(v87);
  v100 = (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v177 + 8))(v56, v53, v99);
  v101 = static Axis.Set.horizontal.getter(v100);
  v102 = static Axis.Set.vertical.getter();
  v103 = Axis.Set.init(rawValue:)(0);
  v104 = Axis.Set.init(rawValue:)(v103);
  if (Axis.Set.init(rawValue:)(v104 & v101) != v101)
    v103 = Axis.Set.init(rawValue:)(v103 | v101);
  v105 = Axis.Set.init(rawValue:)(v103);
  v106 = Axis.Set.init(rawValue:)(v105 & v102);
  if (v106 != v102)
  {
    v106 = Axis.Set.init(rawValue:)(v103 | v102);
    v103 = v106;
  }
  v107 = static Alignment.center.getter(v106);
  View.containerRelativeFrame(_:alignment:)(v103, v107, v108, v59, v178);
  v109 = (*(uint64_t (**)(_BYTE *, uint64_t))(v202 + 8))(v62, v59);
  v110 = v204;
  static CoordinateSpaceProtocol<>.local.getter(v109);
  v111 = v193;
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v110, v205, &protocol witness table for LocalCoordinateSpace, 10.0);
  v112 = v209;
  v113 = v212;
  v175 = sub_10003E810();
  v178 = v114;
  v177 = v115;
  v176 = v116;
  v117 = v201;
  v205 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v201 + 16);
  v118 = v208;
  v205(v208, v113, v112);
  v119 = *(unsigned __int8 *)(v117 + 80);
  v203 += (v119 + 48) & ~v119;
  v120 = (v119 + 48) & ~v119;
  v204 = (_BYTE *)v120;
  v202 = v119 | 7;
  v121 = (void (*)(uint64_t, uint64_t, uint64_t))swift_allocObject(&unk_100109A68, v203, v119 | 7);
  v122 = v210;
  *((_QWORD *)v121 + 2) = v213;
  *((_QWORD *)v121 + 3) = v122;
  v123 = v211;
  v124 = v214;
  *((_QWORD *)v121 + 4) = v211;
  *((_QWORD *)v121 + 5) = v124;
  v201 = *(_QWORD *)(v117 + 32);
  ((void (*)(char *, _BYTE *, uint64_t))v201)((char *)v121 + v120, v118, v112);
  v125 = v194;
  v126 = (uint64_t)v197;
  v127 = v195;
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v194 + 16))(v197, v111, v195);
  v128 = v196;
  v129 = v126 + *(int *)(v196 + 44);
  *(_BYTE *)v129 = v175 & 1;
  v130 = v177;
  *(_QWORD *)(v129 + 8) = v178;
  *(_QWORD *)(v129 + 16) = v130;
  *(_QWORD *)(v129 + 24) = v176;
  v131 = (void (**)(uint64_t, uint64_t, uint64_t))(v126 + *(int *)(v128 + 48));
  *v131 = sub_1000461D8;
  v131[1] = v121;
  (*(void (**)(_BYTE *, uint64_t))(v125 + 8))(v111, v127);
  v132 = v112;
  v205(v118, v212, v112);
  v133 = swift_allocObject(&unk_100109A90, v203, v202);
  *(_QWORD *)(v133 + 16) = v213;
  *(_QWORD *)(v133 + 24) = v122;
  v134 = v214;
  *(_QWORD *)(v133 + 32) = v123;
  *(_QWORD *)(v133 + 40) = v134;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v201)(&v204[v133], v118, v132);
  v135 = sub_100008078(&qword_100115620, &qword_1001155F8, (uint64_t)&protocol conformance descriptor for GestureStateGesture<A, B>);
  v136 = v198;
  Gesture.onEnded(_:)(sub_10004626C, v133, v128, v135);
  swift_release(v133);
  v137 = sub_100004F48(v126, &qword_1001155F8);
  v138 = static GestureMask.all.getter(v137);
  v139 = v182;
  v140 = v185;
  v141 = v207;
  v142 = v181;
  v143 = v180;
  v144 = v206;
  View.gesture<A>(_:including:)(v136, v138, v185, v207, v181, v180);
  (*(void (**)(_BYTE *, uint64_t))(v199 + 8))(v136, v141);
  (*(void (**)(_BYTE *, uint64_t))(v179 + 8))(v144, v140);
  v145 = static Animation.spring(response:dampingFraction:blendDuration:)(0.44, 0.92, 0.0);
  v146 = v212;
  v147 = (uint64_t *)(v212 + *(int *)(v132 + 80));
  v148 = *v147;
  LOBYTE(v132) = *((_BYTE *)v147 + 8);
  v149 = swift_retain(*v147);
  v150 = sub_100043C20(v149, v132, 0xD00000000000001ALL, 0x80000001000D63E0);
  swift_release(v148);
  KeyPath = swift_getKeyPath(&unk_1000CF180);
  v225 = v150;
  v152 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v225, KeyPath, v152);
  swift_release(KeyPath);
  LOBYTE(v148) = *(_BYTE *)(v150 + 16);
  swift_release(v150);
  v224 = v148;
  v225 = v140;
  v226 = v141;
  v227 = v142;
  v228 = v143;
  v153 = swift_getOpaqueTypeConformance2(&v225, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
  v154 = v186;
  v155 = v184;
  View.animation<A>(_:value:)(v145, &v224, v184, &type metadata for Bool, v153, &protocol witness table for Bool);
  v156 = swift_release(v145);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v183 + 8))(v139, v155, v156);
  v157 = v208;
  v158 = v146;
  v159 = v209;
  v205(v208, v158, v209);
  v160 = swift_allocObject(&unk_100109AB8, v203, v202);
  v161 = v210;
  *(_QWORD *)(v160 + 16) = v213;
  *(_QWORD *)(v160 + 24) = v161;
  v162 = v214;
  *(_QWORD *)(v160 + 32) = v211;
  *(_QWORD *)(v160 + 40) = v162;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v201)(&v204[v160], v157, v159);
  v163 = sub_100008078(&qword_100115558, &qword_100115550, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v222 = v153;
  v223 = v163;
  v164 = v191;
  v165 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v191);
  v166 = v187;
  View.onAppear(perform:)(sub_1000462F0, v160, v164, v165);
  v167 = swift_release(v160);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v188 + 8))(v154, v164, v167);
  v220 = v165;
  v221 = &protocol witness table for _AppearanceActionModifier;
  v168 = v192;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v192);
  v169 = v190;
  v170 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v190 + 16);
  v171 = v189;
  v170(v189, v166, v168);
  v172 = *(void (**)(_BYTE *, uint64_t))(v169 + 8);
  v172(v166, v168);
  v170(v200, v171, v168);
  return ((uint64_t (*)(_BYTE *, uint64_t))v172)(v171, v168);
}

uint64_t sub_100040950@<X0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD, _QWORD)@<X3>, void (*a5)(_QWORD, _QWORD)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t TupleTypeMetadata2;
  uint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int *v82;
  double v83;
  double v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  double v90;
  double v91;
  void (*v92)(uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  void (*v104)(uint64_t, uint64_t);
  void (*v105)(uint64_t, uint64_t);
  _BYTE *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t KeyPath;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  double v123;
  __n128 v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  __n128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  int *v150;
  _BYTE *v151;
  double v152;
  double v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  void (*v166)(uint64_t, uint64_t);
  void (*v167)(uint64_t, uint64_t);
  char *v168;
  uint64_t v169;
  uint64_t v170;
  __n128 v171;
  uint64_t OpaqueTypeConformance2;
  uint64_t v173;
  void (*v174)(char *, char *, uint64_t);
  char *v175;
  uint64_t v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t (*v181)(uint64_t, uint64_t);
  void (*v183)(uint64_t, uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  double (*v188)(char *, uint64_t);
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  uint64_t OpaqueTypeMetadata2;
  char *v203;
  char *v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  uint64_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  void (*v238)(uint64_t, uint64_t);
  void (*v239)(uint64_t, uint64_t);
  void (*v240)(uint64_t, uint64_t);
  int *v241;
  _BYTE *v242;
  void (*v243)(uint64_t, uint64_t);
  uint64_t v244;
  uint64_t v245;
  _QWORD v246[18];
  uint64_t v247;
  uint64_t v248;
  void (*v249)(_QWORD, _QWORD);
  void (*v250)(_QWORD, _QWORD);

  v243 = (void (*)(uint64_t, uint64_t))a2;
  v242 = a1;
  v232 = a6;
  v247 = a2;
  v248 = a3;
  v238 = a4;
  v249 = a4;
  v250 = a5;
  v240 = a5;
  v241 = (int *)type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)&v247);
  v231 = *((_QWORD *)v241 - 1);
  v229 = *(_QWORD *)(v231 + 64);
  __chkstk_darwin(v241, v7);
  v230 = (char *)&v183 - v8;
  v227 = sub_100005360(&qword_100115630);
  __chkstk_darwin(v227, v9);
  v228 = (uint64_t)&v183 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v222 = type metadata accessor for RoundedCornerStyle(0);
  v221 = *(_QWORD *)(v222 - 8);
  __chkstk_darwin(v222, v11);
  v219 = (char *)&v183 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v209 = type metadata accessor for UnevenRoundedRectangle(0);
  __chkstk_darwin(v209, v13);
  v223 = (char *)&v183 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = sub_100005360(&qword_100115638);
  __chkstk_darwin(v216, v15);
  v224 = (uint64_t *)((char *)&v183 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v226 = sub_100005360(&qword_100115640);
  __chkstk_darwin(v226, v17);
  v225 = (uint64_t)&v183 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005608(&qword_100115510);
  v239 = (void (*)(uint64_t, uint64_t))a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a3, v19, 0, 0);
  v21 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v21);
  v193 = v21;
  v190 = WitnessTable;
  v23 = type metadata accessor for ZStack(0, v21);
  v191 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23, v24);
  v189 = (char *)&v183 - v26;
  v27 = type metadata accessor for ModifiedContent(0, v23, &type metadata for _GeometryGroupEffect, v25);
  v212 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v28);
  v206 = (char *)&v183 - v29;
  v30 = sub_100005608(&qword_100115518);
  v32 = type metadata accessor for ModifiedContent(0, v27, v30, v31);
  v207 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32, v33);
  v203 = (char *)&v183 - v34;
  v35 = sub_100005608(&qword_100114B80);
  v37 = type metadata accessor for ModifiedContent(0, v32, v35, v36);
  v208 = *(_QWORD *)(v37 - 8);
  v39 = __chkstk_darwin(v37, v38);
  v204 = (char *)&v183 - v40;
  v41 = type metadata accessor for ModifiedContent(0, v37, &type metadata for _OffsetEffect, v39);
  v210 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41, v42);
  v205 = (char *)&v183 - v43;
  v44 = sub_100005608(&qword_100115508);
  v46 = type metadata accessor for ModifiedContent(0, v41, v44, v45);
  v218 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46, v47);
  v217 = (char *)&v183 - v48;
  v192 = v23;
  v185 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v23);
  v246[16] = v185;
  v246[17] = &protocol witness table for _GeometryGroupEffect;
  v215 = v27;
  v49 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v50 = sub_100008078(&qword_100115520, &qword_100115518, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v194 = v49;
  v246[14] = v49;
  v246[15] = v50;
  v211 = v32;
  v51 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v32);
  v52 = sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
  v195 = v51;
  v246[12] = v51;
  v246[13] = v52;
  v213 = v37;
  v196 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
  v246[10] = v196;
  v246[11] = &protocol witness table for _OffsetEffect;
  v214 = v41;
  v53 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v41);
  v54 = sub_100008078(&qword_100115528, &qword_100115508, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v197 = v53;
  v246[8] = v53;
  v246[9] = v54;
  v188 = (double (*)(char *, uint64_t))v54;
  v55 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v46);
  v220 = v46;
  v247 = v46;
  v248 = v55;
  v198 = v55;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v247, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 0);
  v199 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v56);
  v201 = (char *)&v183 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __chkstk_darwin(v58, v59);
  v200 = (char *)&v183 - v61;
  v234 = type metadata accessor for SlideTransition(0, v60);
  v187 = *(_QWORD *)(v234 - 8);
  v63 = __chkstk_darwin(v234, v62);
  v233 = (char *)&v183 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = type metadata accessor for ModifiedContent(0, v243, &type metadata for _FrameLayout, v63);
  v66 = *(_QWORD *)(v65 - 8);
  v68 = __chkstk_darwin(v65, v67);
  v70 = (char *)&v183 - v69;
  v71 = type metadata accessor for ModifiedContent(0, v65, &type metadata for _OffsetEffect, v68);
  v186 = *(_QWORD *)(v71 - 8);
  v73 = __chkstk_darwin(v71, v72);
  v75 = (char *)&v183 - v74;
  v237 = type metadata accessor for ModifiedContent(0, v71, v44, v73);
  v76 = *(_QWORD *)(v237 - 8);
  __chkstk_darwin(v237, v77);
  v236 = (char *)&v183 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v79, v80);
  v235 = (char *)&v183 - v81;
  v82 = v241;
  if (v242[v241[15]] == 1)
  {
    v83 = *(double *)&v242[v241[14]];
  }
  else
  {
    v84 = *(double *)&v242[v241[17]];
    v83 = v84 / sub_10003EBB8((uint64_t)v241);
  }
  v85 = v83 * sub_10003EBB8((uint64_t)v82);
  v87 = static Alignment.center.getter(v86);
  v88 = v238;
  View.frame(width:height:alignment:)(*(_QWORD *)&v85, 0, 0, 1, v87, v89, v243, v238);
  v90 = sub_10003ECF8(v82);
  v91 = v90 - sub_10003EC98(v82) * 0.5;
  v246[6] = v88;
  v246[7] = &protocol witness table for _FrameLayout;
  v92 = v88;
  v93 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
  View.offset(x:y:)(v65, v93, v91, 0.0);
  v94 = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(v70, v65);
  v95 = (uint64_t)v233;
  SlideTransition.init()(v94);
  v246[4] = v93;
  v246[5] = &protocol witness table for _OffsetEffect;
  v96 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v71);
  v184 = sub_100005178(&qword_100115648, (uint64_t (*)(uint64_t))&type metadata accessor for SlideTransition, (uint64_t)&protocol conformance descriptor for SlideTransition);
  v97 = v236;
  v98 = v234;
  sub_100041A64(v95, v71, v234, v96, v184);
  v183 = *(void (**)(uint64_t, uint64_t))(v187 + 8);
  v183(v95, v98);
  (*(void (**)(char *, uint64_t))(v186 + 8))(v75, v71);
  v246[2] = v96;
  v246[3] = v188;
  v99 = v237;
  v187 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v237);
  v186 = *(_QWORD *)(v76 + 16);
  ((void (*)(char *, char *, uint64_t))v186)(v235, v97, v99);
  v188 = *(double (**)(char *, uint64_t))(v76 + 8);
  v100.n128_f64[0] = v188(v97, v99);
  v101 = static Alignment.leading.getter(v100);
  v103 = __chkstk_darwin(v101, v102);
  v104 = v239;
  *(&v183 - 6) = v243;
  *(&v183 - 5) = v104;
  v105 = v240;
  *(&v183 - 4) = v92;
  *(&v183 - 3) = v105;
  v106 = v242;
  *(&v183 - 2) = (void (*)(uint64_t, uint64_t))v242;
  v107 = v189;
  v108 = ZStack.init(alignment:content:)(v103);
  v109 = v206;
  v110 = v192;
  View.modifier<A>(_:)(v108, v192, &type metadata for _GeometryGroupEffect, v185);
  v111 = (*(uint64_t (**)(char *, uint64_t))(v191 + 8))(v107, v110);
  v112 = static Color.black.getter(v111);
  v113 = (uint64_t *)&v106[v241[19]];
  v114 = *v113;
  LOBYTE(v107) = *((_BYTE *)v113 + 8);
  swift_retain(*v113);
  v115 = sub_100043C20(v114, (char)v107, 0xD000000000000010, 0x80000001000D63C0);
  swift_release(v114);
  KeyPath = swift_getKeyPath(&unk_1000CF220);
  v247 = v115;
  v117 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v247, KeyPath, v117);
  swift_release(KeyPath);
  v118 = *(double *)(v115 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
  swift_release(v115);
  v119 = *v113;
  LOBYTE(v115) = *((_BYTE *)v113 + 8);
  v120 = swift_retain(*v113);
  v121 = sub_100043C20(v120, v115, 0xD000000000000010, 0x80000001000D63C0);
  swift_release(v119);
  v122 = swift_getKeyPath(&unk_1000CF220);
  v247 = v121;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v247, v122, v117);
  swift_release(v122);
  v123 = *(double *)(v121 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets + 16);
  v124 = swift_release(v121);
  v125 = v221;
  v126 = v219;
  v127 = v222;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v221 + 104))(v219, enum case for RoundedCornerStyle.continuous(_:), v222, v124);
  v128 = (uint64_t)v223;
  (*(void (**)(char *, char *, uint64_t))(v125 + 16))(&v223[*(int *)(v209 + 20)], v126, v127);
  *(double *)v128 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v118 * 0.5, 0.0, 0.0, v123 * 0.5);
  *(_QWORD *)(v128 + 8) = v129;
  *(_QWORD *)(v128 + 16) = v130;
  *(_QWORD *)(v128 + 24) = v131;
  (*(void (**)(char *, uint64_t))(v125 + 8))(v126, v127);
  v132 = v228;
  sub_1000463CC(v128, v228);
  *(_WORD *)(v132 + *(int *)(v227 + 36)) = 256;
  v133 = v224;
  sub_10000531C(v132, (uint64_t)v224 + *(int *)(v216 + 36), &qword_100115630);
  *v133 = v112;
  swift_retain(v112);
  sub_100004F48(v132, &qword_100115630);
  sub_100046410(v128);
  v134 = swift_release(v112);
  v135 = static SafeAreaRegions.all.getter(v134);
  LOBYTE(v132) = static Edge.Set.all.getter(v135);
  v136 = v225;
  sub_10000531C((uint64_t)v133, v225, &qword_100115638);
  v137 = v226;
  v138 = v136 + *(int *)(v226 + 36);
  *(_QWORD *)v138 = v135;
  *(_BYTE *)(v138 + 8) = v132;
  v139 = sub_100004F48((uint64_t)v133, &qword_100115638);
  v140 = static Alignment.center.getter(v139);
  v142 = v141;
  v143 = sub_10004644C();
  v144 = v203;
  v145 = v140;
  v146 = v215;
  View.background<A>(_:alignment:)(v136, v145, v142, v215, v137, v194, v143);
  sub_100004F48(v136, &qword_100115640);
  (*(void (**)(char *, uint64_t))(v212 + 8))(v109, v146);
  v147 = sub_1000464F4();
  v148 = v204;
  v149 = v211;
  View.contentShape<A>(_:eoFill:)(v147, 0, v211, &type metadata for Rectangle, v195, v147);
  (*(void (**)(char *, uint64_t))(v207 + 8))(v144, v149);
  v150 = v241;
  v151 = v242;
  v152 = sub_10003ECF8(v241);
  v153 = sub_10003EC98(v150);
  v154 = v205;
  v155 = v213;
  View.offset(x:y:)(v213, v196, v152 + v153 * 0.5, 0.0);
  v156 = (*(uint64_t (**)(char *, uint64_t))(v208 + 8))(v148, v155);
  v157 = (uint64_t)v233;
  SlideTransition.init()(v156);
  v158 = v217;
  v159 = v214;
  v160 = v234;
  sub_100041A64(v157, v214, v234, v197, v184);
  v183(v157, v160);
  (*(void (**)(char *, uint64_t))(v210 + 8))(v154, v159);
  v161 = v231;
  v162 = v230;
  (*(void (**)(char *, _BYTE *, int *))(v231 + 16))(v230, v151, v150);
  v163 = *(unsigned __int8 *)(v161 + 80);
  v164 = (v163 + 48) & ~v163;
  v165 = (char *)swift_allocObject(&unk_100109B30, v164 + v229, v163 | 7);
  v166 = v239;
  *((_QWORD *)v165 + 2) = v243;
  *((_QWORD *)v165 + 3) = v166;
  v167 = v240;
  *((_QWORD *)v165 + 4) = v238;
  *((_QWORD *)v165 + 5) = v167;
  (*(void (**)(char *, char *, int *))(v161 + 32))(&v165[v164], v162, v150);
  v168 = v201;
  v169 = v220;
  v170 = v198;
  View.onTapGesture(count:perform:)(1, sub_100046690, v165, v220, v198);
  v171 = swift_release(v165);
  (*(void (**)(char *, uint64_t, __n128))(v218 + 8))(v158, v169, v171);
  v247 = v169;
  v248 = v170;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v247, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
  v173 = v199;
  v174 = *(void (**)(char *, char *, uint64_t))(v199 + 16);
  v175 = v200;
  v176 = OpaqueTypeMetadata2;
  v174(v200, v168, OpaqueTypeMetadata2);
  v177 = *(void (**)(char *, uint64_t))(v173 + 8);
  v177(v168, v176);
  v178 = (uint64_t)v236;
  v179 = v235;
  v180 = v237;
  ((void (*)(char *, char *, uint64_t))v186)(v236, v235, v237);
  v247 = v178;
  v174(v168, v175, v176);
  v248 = (uint64_t)v168;
  v246[0] = v180;
  v246[1] = v176;
  v244 = v187;
  v245 = OpaqueTypeConformance2;
  sub_10003E15C(&v247, 2uLL, (uint64_t)v246);
  v177(v175, v176);
  v181 = (uint64_t (*)(uint64_t, uint64_t))v188;
  v188(v179, v180);
  v177(v168, v176);
  return v181(v178, v180);
}

uint64_t sub_100041A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  __chkstk_darwin(a1, a1);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v11 + 16))(v10);
  v12 = AnyTransition.init<A>(_:)(v10, a3, a5);
  View.transition(_:)(v12, a2, a4);
  return swift_release(v12);
}

uint64_t sub_100041B14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t (*v37)(__n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  double v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  int *v73;
  __n128 v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  char *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  uint64_t v106;
  unint64_t v107;
  int *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(__n128);
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD v135[2];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v130 = a5;
  v131 = a6;
  v136 = a2;
  v137 = a3;
  v138 = a4;
  v139 = a5;
  v8 = (int *)type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)&v136);
  v118 = *((_QWORD *)v8 - 1);
  __chkstk_darwin(v8, v9);
  v111 = (char *)&v106 - v10;
  v121 = sub_100005360(&qword_100115630);
  __chkstk_darwin(v121, v11);
  v120 = (uint64_t)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for RoundedCornerStyle(0);
  v114 = *(_QWORD *)(v115 - 8);
  __chkstk_darwin(v115, v13);
  v113 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for UnevenRoundedRectangle(0);
  __chkstk_darwin(v112, v15);
  v17 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100005360(&qword_100115638);
  __chkstk_darwin(v117, v18);
  v116 = (uint64_t *)((char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v119 = sub_100005360(&qword_100115640);
  __chkstk_darwin(v119, v20);
  v110 = (char *)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100005360(&qword_100115510);
  __chkstk_darwin(v125, v22);
  v129 = (uint64_t)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v123 = (uint64_t)&v106 - v26;
  __chkstk_darwin(v27, v28);
  v127 = (uint64_t)&v106 - v29;
  __chkstk_darwin(v30, v31);
  v128 = (char *)&v106 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v33, v34);
  v126 = v36;
  v37 = *(uint64_t (**)(__n128))(v36 + 16);
  v124 = (char *)&v106 - v38;
  v132 = a3;
  v122 = v37;
  v39 = v37(v35);
  v40 = static Color.black.getter(v39);
  v41 = (uint64_t *)(a1 + v8[20]);
  v42 = *v41;
  v43 = *((_BYTE *)v41 + 8);
  v44 = swift_retain(*v41);
  v107 = 0x80000001000D63E0;
  v45 = sub_100043C20(v44, v43, 0xD00000000000001ALL, 0x80000001000D63E0);
  swift_release(v42);
  KeyPath = swift_getKeyPath(&unk_1000CF180);
  v136 = v45;
  v106 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v136, KeyPath, v106);
  swift_release(KeyPath);
  LOBYTE(KeyPath) = *(_BYTE *)(v45 + 16);
  swift_release(v45);
  v47 = *(double *)(a1 + v8[16]);
  v48 = v8[19];
  v108 = v8;
  v49 = (uint64_t *)(a1 + v48);
  v109 = a1;
  v50 = *(_QWORD *)(a1 + v48);
  v51 = *(_BYTE *)(a1 + v48 + 8);
  swift_retain(v50);
  v52 = sub_100043C20(v50, v51, 0xD000000000000010, 0x80000001000D63C0);
  swift_release(v50);
  v53 = sub_100009614();
  swift_release(v52);
  v54 = sub_10003E8F8();
  v55 = _s10Calculator0A15CustomSplitViewV7getFade_8maxValue11windowWidth10screenDrag12CoreGraphics7CGFloatVSb_A3JtF_0(KeyPath, v47, v53, v54);
  v56 = Color.opacity(_:)(v55);
  swift_release(v40);
  v57 = swift_retain(v50);
  v58 = sub_100043C20(v57, v51, 0xD000000000000010, 0x80000001000D63C0);
  swift_release(v50);
  v59 = swift_getKeyPath(&unk_1000CF220);
  v136 = v58;
  v60 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v136, v59, v60);
  swift_release(v59);
  v61 = *(double *)(v58 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets);
  v62 = v58;
  v63 = (uint64_t)v110;
  swift_release(v62);
  v64 = *v49;
  LOBYTE(v59) = *((_BYTE *)v49 + 8);
  v65 = swift_retain(*v49);
  v66 = v59;
  v67 = v111;
  v68 = sub_100043C20(v65, v66, 0xD000000000000010, 0x80000001000D63C0);
  swift_release(v64);
  v69 = swift_getKeyPath(&unk_1000CF220);
  v136 = v68;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v136, v69, v60);
  swift_release(v69);
  v70 = v118;
  v71 = *(double *)(v68 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__safeAreaInsets + 16);
  v72 = v68;
  v73 = v108;
  v74 = swift_release(v72);
  v75 = v114;
  v76 = v113;
  v77 = v115;
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v114 + 104))(v113, enum case for RoundedCornerStyle.continuous(_:), v115, v74);
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))(&v17[*(int *)(v112 + 20)], v76, v77);
  v78 = 0.0;
  *(double *)v17 = RectangleCornerRadii.init(topLeft:topRight:bottomRight:bottomLeft:)(v61 + -5.0, 0.0, 0.0, v71);
  *((_QWORD *)v17 + 1) = v79;
  *((_QWORD *)v17 + 2) = v80;
  *((_QWORD *)v17 + 3) = v81;
  (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
  v82 = v120;
  sub_1000463CC((uint64_t)v17, v120);
  *(_WORD *)(v82 + *(int *)(v121 + 36)) = 256;
  v83 = v116;
  sub_10000531C(v82, (uint64_t)v116 + *(int *)(v117 + 36), &qword_100115630);
  *v83 = v56;
  swift_retain(v56);
  sub_100004F48(v82, &qword_100115630);
  sub_100046410((uint64_t)v17);
  v84 = swift_release(v56);
  v85 = static SafeAreaRegions.all.getter(v84);
  LOBYTE(v77) = static Edge.Set.all.getter(v85);
  sub_10000531C((uint64_t)v83, v63, &qword_100115638);
  v86 = v63 + *(int *)(v119 + 36);
  *(_QWORD *)v86 = v85;
  *(_BYTE *)(v86 + 8) = v77;
  sub_100004F48((uint64_t)v83, &qword_100115638);
  v87 = v109;
  v88 = sub_10003E8F8();
  (*(void (**)(char *, uint64_t, int *))(v70 + 16))(v67, v87, v73);
  if (v88 == 0.0)
  {
    v89 = &v67[v73[20]];
    v90 = *(_QWORD *)v89;
    v91 = v89[8];
    v92 = swift_retain(*(_QWORD *)v89);
    v93 = sub_100043C20(v92, v91, 0xD00000000000001ALL, v107);
    swift_release(v90);
    v94 = swift_getKeyPath(&unk_1000CF180);
    v136 = v93;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v136, v94, v106);
    swift_release(v94);
    LOBYTE(v94) = *(_BYTE *)(v93 + 16);
    v95 = swift_release(v93);
    (*(void (**)(char *, int *, __n128))(v70 + 8))(v67, v73, v95);
    if ((v94 & 1) == 0)
      goto LABEL_6;
  }
  else
  {
    (*(void (**)(char *, int *))(v70 + 8))(v67, v73);
  }
  v78 = 1.0;
LABEL_6:
  v96 = v123;
  sub_10000531C(v63, v123, &qword_100115640);
  v97 = v125;
  *(double *)(v96 + *(int *)(v125 + 36)) = v78;
  sub_100004F48(v63, &qword_100115640);
  v98 = v96;
  v99 = v127;
  sub_100007CD8(v98, v127, &qword_100115510);
  v100 = (uint64_t)v128;
  v101 = v124;
  v102 = v132;
  ((void (*)(char *, char *, uint64_t))v122)(v128, v124, v132);
  v136 = v100;
  v103 = v129;
  sub_10000531C(v99, v129, &qword_100115510);
  v137 = v103;
  v135[0] = v102;
  v135[1] = v97;
  v133 = v130;
  v134 = sub_10003D3C8(&qword_100115670, &qword_100115510, (void (*)(void))sub_10004644C);
  sub_10003E15C(&v136, 2uLL, (uint64_t)v135);
  sub_100004F48(v99, &qword_100115510);
  v104 = *(void (**)(char *, uint64_t))(v126 + 8);
  v104(v101, v102);
  sub_100004F48(v103, &qword_100115510);
  return ((uint64_t (*)(uint64_t, uint64_t))v104)(v100, v102);
}

double sub_100042404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  int v12;
  double result;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];

  v16[0] = a2;
  v16[1] = a3;
  v16[2] = a4;
  v16[3] = a5;
  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v16) + 80));
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 8);
  v8 = swift_retain(*v5);
  v9 = sub_100043C20(v8, v7, 0xD00000000000001ALL, 0x80000001000D63E0);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000CF180);
  v16[0] = v9;
  v11 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(unsigned __int8 *)(v9 + 16);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  if (v12 == 1)
  {
    v14 = swift_retain(v6);
    v15 = sub_100043C20(v14, v7, 0xD00000000000001ALL, 0x80000001000D63E0);
    swift_release(v6);
    if (qword_100113F40 != -1)
      swift_once(&qword_100113F40, sub_1000BF928);
    sub_1000BF854();
    sub_100068F30(0);
    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  return result;
}

void sub_10004256C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  double v24;
  int *v25;
  double v26;
  double v27;
  double v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  void (*v38)(char *, uint64_t);
  _QWORD *v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __n128 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  double v53;
  uint64_t v54;
  char v55;
  __n128 v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[4];

  v14 = type metadata accessor for LayoutDirection(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19, v20);
  v23 = (char *)&v63 - v22;
  v63 = a1;
  v24 = fabs(DragGesture.Value.translation.getter(v21));
  v65[0] = a5;
  v65[1] = a6;
  v65[2] = a7;
  v65[3] = a8;
  v25 = (int *)type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v65);
  v26 = sub_10003EBB8((uint64_t)v25);
  if (*(_BYTE *)(a4 + v25[15]) == 1)
  {
    v27 = *(double *)(a4 + v25[14]);
  }
  else
  {
    v28 = *(double *)(a4 + v25[17]);
    v27 = v28 / sub_10003EBB8((uint64_t)v25);
  }
  if (v26 * v27 >= v24)
  {
    v29 = (uint64_t *)(a4 + v25[19]);
    v30 = *v29;
    v31 = *((_BYTE *)v29 + 8);
    v32 = swift_retain(*v29);
    v33 = sub_100043C20(v32, v31, 0xD000000000000010, 0x80000001000D63C0);
    swift_release(v30);
    KeyPath = swift_getKeyPath(&unk_1000CF1A8);
    v65[0] = v33;
    v35 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v65, KeyPath, v35);
    swift_release(KeyPath);
    v36 = v33 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
    swift_beginAccess(v33 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, v65, 0, 0);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v23, v36, v14);
    v37 = swift_release(v33);
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v15 + 104))(v18, enum case for LayoutDirection.leftToRight(_:), v14, v37);
    LOBYTE(v33) = static LayoutDirection.== infix(_:_:)(v23, v18);
    v38 = *(void (**)(char *, uint64_t))(v15 + 8);
    v38(v18, v14);
    v38(v23, v14);
    v39 = (_QWORD *)(a4 + v25[20]);
    v40 = *v39;
    v41 = *((_BYTE *)v39 + 8);
    swift_retain(*v39);
    v42 = sub_100043C20(v40, v41, 0xD00000000000001ALL, 0x80000001000D63E0);
    swift_release(v40);
    v43 = swift_getKeyPath(&unk_1000CF180);
    if ((v33 & 1) != 0)
    {
      v64 = v42;
      v44 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v43, v44);
      swift_release(v43);
      v45 = *(_BYTE *)(v42 + 16);
      v46 = swift_release(v42);
      if ((v45 & 1) != 0 || DragGesture.Value.translation.getter(v46) >= 0.0)
      {
        v47 = *v39;
        v48 = *((_BYTE *)v39 + 8);
        v49 = swift_retain(*v39);
        v50 = sub_100043C20(v49, v48, 0xD00000000000001ALL, 0x80000001000D63E0);
        swift_release(v47);
        v51 = swift_getKeyPath(&unk_1000CF180);
        v64 = v50;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v51, v44);
        swift_release(v51);
        LODWORD(v47) = *(unsigned __int8 *)(v50 + 16);
        v52 = swift_release(v50);
        if ((_DWORD)v47 == 1)
        {
          v53 = DragGesture.Value.translation.getter(v52);
          v52.n128_u64[0] = 2.0;
          if (v53 > 0.0)
            goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    else
    {
      v64 = v42;
      v54 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v43, v54);
      swift_release(v43);
      v55 = *(_BYTE *)(v42 + 16);
      v56 = swift_release(v42);
      if ((v55 & 1) != 0 || DragGesture.Value.translation.getter(v56) <= 0.0)
      {
        v57 = *v39;
        v58 = *((_BYTE *)v39 + 8);
        v59 = swift_retain(*v39);
        v60 = sub_100043C20(v59, v58, 0xD00000000000001ALL, 0x80000001000D63E0);
        swift_release(v57);
        v61 = swift_getKeyPath(&unk_1000CF180);
        v64 = v60;
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, v61, v54);
        swift_release(v61);
        LODWORD(v57) = *(unsigned __int8 *)(v60 + 16);
        v52 = swift_release(v60);
        if ((_DWORD)v57 == 1)
        {
          v62 = DragGesture.Value.translation.getter(v52);
          v52.n128_u64[0] = 2.0;
          if (v62 < 0.0)
            goto LABEL_16;
        }
LABEL_15:
        v52.n128_f64[0] = DragGesture.Value.translation.getter(v52);
LABEL_16:
        sub_10003E94C((uint64_t)v25, v52.n128_f64[0]);
      }
    }
  }
}

void sub_100042A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  void (*v31)(char *, uint64_t);
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __n128 v38;
  double v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __n128 v50;
  double v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double (*v60)(uint64_t);
  uint64_t v61;
  int v62;
  __n128 v63;
  double v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  __n128 v75;
  double v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[2];
  _BYTE v84[16];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[5];

  v83[1] = a1;
  v11 = type metadata accessor for LayoutDirection(0);
  v83[0] = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)v83 - v17;
  v85 = a3;
  v86 = a4;
  v87 = a5;
  v88 = a6;
  v89 = a2;
  v20 = static Animation.default.getter(v19);
  withAnimation<A>(_:_:)(v20, sub_100046130, v84, (char *)&type metadata for () + 8);
  swift_release(v20);
  v91[0] = a3;
  v91[1] = a4;
  v91[2] = a5;
  v91[3] = a6;
  v21 = (int *)type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v91);
  v22 = (uint64_t *)(a2 + v21[19]);
  v23 = *v22;
  LOBYTE(v20) = *((_BYTE *)v22 + 8);
  v24 = swift_retain(*v22);
  v25 = sub_100043C20(v24, v20, 0xD000000000000010, 0x80000001000D63C0);
  swift_release(v23);
  KeyPath = swift_getKeyPath(&unk_1000CF1A8);
  v91[0] = v25;
  v27 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v91, KeyPath, v27);
  swift_release(KeyPath);
  v28 = v25 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection;
  swift_beginAccess(v25 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__layoutDirection, v91, 0, 0);
  v29 = v83[0];
  (*(void (**)(char *, uint64_t, uint64_t))(v83[0] + 16))(v18, v28, v11);
  v30 = swift_release(v25);
  (*(void (**)(char *, _QWORD, uint64_t, __n128))(v29 + 104))(v14, enum case for LayoutDirection.leftToRight(_:), v11, v30);
  LOBYTE(v25) = static LayoutDirection.== infix(_:_:)(v18, v14);
  v31 = *(void (**)(char *, uint64_t))(v29 + 8);
  v31(v14, v11);
  v31(v18, v11);
  v32 = (_QWORD *)(a2 + v21[20]);
  v33 = *v32;
  LOBYTE(v11) = *((_BYTE *)v32 + 8);
  swift_retain(*v32);
  v34 = sub_100043C20(v33, v11, 0xD00000000000001ALL, 0x80000001000D63E0);
  swift_release(v33);
  v35 = swift_getKeyPath(&unk_1000CF180);
  if ((v25 & 1) != 0)
  {
    v90 = v34;
    v36 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v90, v35, v36);
    swift_release(v35);
    v37 = *(unsigned __int8 *)(v34 + 16);
    v38 = swift_release(v34);
    if (v37 == 1)
    {
      v39 = DragGesture.Value.translation.getter(v38);
      if (v39 < sub_10003EC98(v21) / -3.0)
      {
        v40 = *v32;
        v41 = *((_BYTE *)v32 + 8);
        v42 = swift_retain(*v32);
        v43 = sub_100043C20(v42, v41, 0xD00000000000001ALL, 0x80000001000D63E0);
        swift_release(v40);
        if (qword_100113F40 != -1)
          swift_once(&qword_100113F40, sub_1000BF928);
        sub_1000BF854();
        sub_100068F30(0);
        swift_release(v43);
      }
    }
    v44 = *v32;
    v45 = *((_BYTE *)v32 + 8);
    v46 = swift_retain(*v32);
    v47 = sub_100043C20(v46, v45, 0xD00000000000001ALL, 0x80000001000D63E0);
    swift_release(v44);
    v48 = swift_getKeyPath(&unk_1000CF180);
    v90 = v47;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v90, v48, v36);
    swift_release(v48);
    v49 = *(_BYTE *)(v47 + 16);
    v50 = swift_release(v47);
    if ((v49 & 1) == 0)
    {
      v51 = DragGesture.Value.translation.getter(v50);
      if (sub_10003EC98(v21) / 3.0 < v51)
      {
        v52 = *v32;
        v53 = *((_BYTE *)v32 + 8);
        v54 = swift_retain(*v32);
        v55 = sub_100043C20(v54, v53, 0xD00000000000001ALL, 0x80000001000D63E0);
        swift_release(v52);
        if (qword_100113F40 != -1)
          swift_once(&qword_100113F40, sub_1000BF928);
        v56 = qword_10011FF08;
        sub_1000BF854();
        v57 = swift_getKeyPath(&unk_1000CF1D0);
        v90 = v56;
        v58 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v90, v57, v58);
        swift_release(v57);
        if (*(_BYTE *)(v56 + 64) == 1)
        {
          v59 = swift_allocObject(&unk_100109B08, 25, 7);
          *(_QWORD *)(v59 + 16) = v55;
          *(_BYTE *)(v59 + 24) = 1;
          swift_retain(v55);
          v60 = sub_100046730;
LABEL_24:
          sub_1000C00F4((uint64_t)v60, v59);
          swift_release(v55);
          v55 = v59;
LABEL_26:
          swift_release(v55);
          return;
        }
        goto LABEL_25;
      }
    }
  }
  else
  {
    v90 = v34;
    v61 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v90, v35, v61);
    swift_release(v35);
    v62 = *(unsigned __int8 *)(v34 + 16);
    v63 = swift_release(v34);
    if (v62 == 1)
    {
      v64 = DragGesture.Value.translation.getter(v63);
      if (sub_10003EC98(v21) / 3.0 < v64)
      {
        v65 = *v32;
        v66 = *((_BYTE *)v32 + 8);
        v67 = swift_retain(*v32);
        v68 = sub_100043C20(v67, v66, 0xD00000000000001ALL, 0x80000001000D63E0);
        swift_release(v65);
        if (qword_100113F40 != -1)
          swift_once(&qword_100113F40, sub_1000BF928);
        sub_1000BF854();
        sub_100068F30(0);
        swift_release(v68);
      }
    }
    v69 = *v32;
    v70 = *((_BYTE *)v32 + 8);
    v71 = swift_retain(*v32);
    v72 = sub_100043C20(v71, v70, 0xD00000000000001ALL, 0x80000001000D63E0);
    swift_release(v69);
    v73 = swift_getKeyPath(&unk_1000CF180);
    v90 = v72;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v90, v73, v61);
    swift_release(v73);
    v74 = *(_BYTE *)(v72 + 16);
    v75 = swift_release(v72);
    if ((v74 & 1) == 0)
    {
      v76 = DragGesture.Value.translation.getter(v75);
      if (v76 < sub_10003EC98(v21) / -3.0)
      {
        v77 = *v32;
        v78 = *((_BYTE *)v32 + 8);
        v79 = swift_retain(*v32);
        v55 = sub_100043C20(v79, v78, 0xD00000000000001ALL, 0x80000001000D63E0);
        swift_release(v77);
        if (qword_100113F40 != -1)
          swift_once(&qword_100113F40, sub_1000BF928);
        v80 = qword_10011FF08;
        sub_1000BF854();
        v81 = swift_getKeyPath(&unk_1000CF1D0);
        v90 = v80;
        v82 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v90, v81, v82);
        swift_release(v81);
        if (*(_BYTE *)(v80 + 64) == 1)
        {
          v59 = swift_allocObject(&unk_100109AE0, 25, 7);
          *(_QWORD *)(v59 + 16) = v55;
          *(_BYTE *)(v59 + 24) = 1;
          swift_retain(v55);
          v60 = sub_100035210;
          goto LABEL_24;
        }
LABEL_25:
        sub_100068F30(1);
        goto LABEL_26;
      }
    }
  }
}

double sub_1000431F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  int v12;
  double result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  char v19;
  _QWORD v20[4];

  v20[0] = a2;
  v20[1] = a3;
  v20[2] = a4;
  v20[3] = a5;
  v5 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v20) + 80));
  v6 = *v5;
  v7 = *((_BYTE *)v5 + 8);
  v8 = swift_retain(*v5);
  v9 = sub_100043C20(v8, v7, 0xD00000000000001ALL, 0x80000001000D63E0);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000CF068);
  v20[0] = v9;
  v11 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v20, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(unsigned __int8 *)(v9 + 17);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  if (v12 != 1)
  {
    v14 = swift_retain(v6);
    v15 = sub_100043C20(v14, v7, 0xD00000000000001ALL, 0x80000001000D63E0);
    swift_release(v6);
    v16 = swift_getKeyPath(&unk_1000CF068);
    __chkstk_darwin(v16, v17);
    v18[2] = v15;
    v19 = 1;
    v20[0] = v15;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v20, v16, sub_10004671C, v18, (char *)&type metadata for () + 8, v11);
    swift_release(v15);
    *(_QWORD *)&result = swift_release(v16).n128_u64[0];
  }
  return result;
}

double sub_1000433A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, _QWORD, uint64_t, __n128);
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  double result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];

  v32 = a4;
  v33 = a5;
  v34 = a3;
  v10 = type metadata accessor for ScenePhase(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v32 - v18;
  v20 = *(void (**)(char *, _QWORD, uint64_t, __n128))(v11 + 104);
  v20((char *)&v32 - v18, enum case for ScenePhase.active(_:), v10, v17);
  v21 = static ScenePhase.== infix(_:_:)(a2, v19);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v19, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, v10);
  if ((v21 & 1) != 0)
  {
    v22(v14, v10);
    v23 = v33;
    v24 = v34;
    v25 = v32;
  }
  else
  {
    ((void (*)(char *, _QWORD, uint64_t))v20)(v19, enum case for ScenePhase.inactive(_:), v10);
    v26 = static ScenePhase.== infix(_:_:)(v14, v19);
    v22(v19, v10);
    v22(v14, v10);
    v23 = v33;
    v24 = v34;
    v25 = v32;
    if ((v26 & 1) == 0)
      return result;
  }
  v35[0] = v25;
  v35[1] = v23;
  v35[2] = a6;
  v35[3] = a7;
  type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v35);
  result = sub_10003E8F8();
  if (result != 0.0)
  {
    __chkstk_darwin(v28, v29);
    *(&v32 - 6) = v25;
    *(&v32 - 5) = v23;
    *(&v32 - 4) = a6;
    *(&v32 - 3) = a7;
    *(&v32 - 2) = v24;
    v31 = static Animation.default.getter(v30);
    withAnimation<A>(_:_:)(v31, sub_100046130, &v32 - 8, (char *)&type metadata for () + 8);
    *(_QWORD *)&result = swift_release(v31).n128_u64[0];
  }
  return result;
}

void sub_100043588(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CF068);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 17);
}

double sub_100043614(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CF068);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_10004671C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_1000436BC(uint64_t a1, char a2)
{
  return sub_100043C20(a1, a2, 0xD000000000000010, 0x80000001000D63C0);
}

uint64_t sub_1000436D8(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v9 = swift_retain(a1);
  v10 = static os_log_type_t.fault.getter(v9);
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v17 = v14;
    *(_DWORD *)v13 = 136315138;
    v16 = sub_100029918(1819242306, 0xE400000000000000, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v17, v8, a1);
  sub_100007720(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v17;
}

uint64_t sub_100043890(uint64_t a1, char a2)
{
  return sub_100043C20(a1, a2, 0xD000000000000013, 0x80000001000D6430);
}

uint64_t sub_1000438AC(uint64_t a1, char a2)
{
  return sub_100043C20(a1, a2, 0xD00000000000001ALL, 0x80000001000D63E0);
}

uint64_t sub_1000438D0()
{
  uint64_t v0;

  return sub_1000691F0(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000438EC()
{
  return sub_1000463B0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10003F9FC);
}

double sub_1000438FC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[4];

  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  v11[0] = v2[2];
  v5 = v11[0];
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v9 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v11) - 8)
                          + 80);
  return sub_1000433A4(a1, a2, (uint64_t)v2 + ((v9 + 48) & ~v9), v5, v6, v7, v8);
}

uint64_t sub_100043984(uint64_t a1, char a2)
{
  return sub_100043C20(a1, a2, 0xD00000000000001ALL, 0x80000001000D6510);
}

uint64_t sub_1000439A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043A10(a1, a2, a3, 0x80000001000D6450);
}

uint64_t sub_1000439B4(uint64_t a1, char a2)
{
  return sub_100043C20(a1, a2, 0xD000000000000028, 0x80000001000D64C0);
}

uint64_t sub_1000439D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000441DC(&qword_100115688, (uint64_t *)&unk_100115690, 0xD00000000000001BLL, 0x80000001000D64F0, a1);
}

uint64_t sub_1000439FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100043A10(a1, a2, a3, 0x80000001000D6470);
}

uint64_t sub_100043A10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v20[2];
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = type metadata accessor for EnvironmentValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 0x100) != 0)
  {
    swift_retain(a1);
    swift_retain(a2);
  }
  else
  {
    v13 = swift_retain(a1);
    v14 = static os_log_type_t.fault.getter(v13);
    v15 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v15, v14))
    {
      v16 = swift_slowAlloc(12, -1);
      v21 = a4;
      v17 = (uint8_t *)v16;
      v22 = swift_slowAlloc(32, -1);
      v24 = v22;
      *(_DWORD *)v17 = 136315138;
      v20[1] = v17 + 4;
      v23 = sub_100029918(0xD000000000000015, v21, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      _os_log_impl((void *)&_mh_execute_header, v15, v14, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      v18 = v22;
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v24, v12, a1);
    sub_100007ED0(a1, a2, a3, 0);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return v24;
  }
  return a1;
}

uint64_t sub_100043C04(uint64_t a1, char a2)
{
  return sub_100043C20(a1, a2, 0xD000000000000019, 0x80000001000D6550);
}

uint64_t sub_100043C20(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = type metadata accessor for EnvironmentValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_retain(a1);
  if ((a2 & 1) == 0)
  {
    v14 = static os_log_type_t.fault.getter(v13);
    v15 = static Log.runtimeIssuesLog.getter();
    v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      v23 = a4;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v19 = a3;
      v20 = v18;
      v25 = v18;
      *(_DWORD *)v17 = 136315138;
      v24 = sub_100029918(v19, v23, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v25, v12, a1);
    swift_release(a1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return v25;
  }
  return a1;
}

uint64_t sub_100043DDC(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  double v19;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = type metadata accessor for EnvironmentValues(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a4 & 1) != 0)
  {
    sub_100007BCC(a1, a2, a3);
  }
  else
  {
    v13 = swift_retain(a1);
    v14 = static os_log_type_t.fault.getter(v13);
    v15 = static Log.runtimeIssuesLog.getter();
    v16 = v14;
    if (os_log_type_enabled(v15, v14))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v24 = v22;
      *(_DWORD *)v17 = 136315138;
      v21 = v17 + 4;
      v23 = sub_100029918(0xD00000000000001CLL, 0x80000001000D6530, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v17, 0xCu);
      v18 = v22;
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(&v24, v12, a1);
    v19 = sub_10003B214(a1, a2, a3, 0);
    (*(void (**)(char *, uint64_t, double))(v9 + 8))(v12, v8, v19);
    return v24;
  }
  return a1;
}

id sub_100043FD0(void *a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;

  v16 = a1;
  v3 = type metadata accessor for EnvironmentValues(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return v16;
  swift_retain(v16);
  v9 = static os_log_type_t.fault.getter(v8);
  v10 = static Log.runtimeIssuesLog.getter();
  v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v18 = v13;
    *(_DWORD *)v12 = 136315138;
    v17 = sub_100029918(0xD000000000000020, 0x80000001000D6490, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v18, v7, v16);
  sub_100039308(v16, 0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  return (id)v18;
}

uint64_t sub_1000441B0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1000441DC(&qword_100115680, &qword_1001141C8, 0xD000000000000020, 0x80000001000D6400, a1);
}

uint64_t sub_1000441DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t EnumCaseMultiPayload;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v33 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(a1);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000531C(v9, (uint64_t)v19, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v16);
  if ((_DWORD)EnumCaseMultiPayload == 1)
    return sub_100007CD8((uint64_t)v19, (uint64_t)a5, a2);
  v22 = *v19;
  v23 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
  v24 = static Log.runtimeIssuesLog.getter();
  if (os_log_type_enabled(v24, v23))
  {
    v31 = a4;
    v25 = swift_slowAlloc(12, -1);
    v32 = a5;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v35 = v27;
    *(_DWORD *)v26 = 136315138;
    v34 = sub_100029918(v33, v31, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
    _os_log_impl((void *)&_mh_execute_header, v24, v23, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v28 = v26;
    a5 = v32;
    swift_slowDealloc(v28, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(a5, v15, v22);
  v29 = swift_release(v22);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v15, v11, v29);
}

uint64_t sub_100044404@<X0>(_QWORD *a1@<X8>)
{
  return sub_100044438(&qword_100115678, (uint64_t (*)(_QWORD))&type metadata accessor for LayoutDirection, 0x694474756F79614CLL, 0xEF6E6F6974636572, a1);
}

uint64_t sub_100044438@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t EnumCaseMultiPayload;
  uint64_t v21;
  uint64_t v23;
  os_log_type_t v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint8_t *v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a3;
  v9 = v5;
  v11 = type metadata accessor for EnvironmentValues(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(a1);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000531C(v9, (uint64_t)v19, a1);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v19, v16);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    v21 = a2(0);
    return (*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(*(_QWORD *)(v21 - 8) + 32))(a5, v19, v21);
  }
  else
  {
    v23 = *v19;
    v24 = static os_log_type_t.fault.getter(EnumCaseMultiPayload);
    v25 = static Log.runtimeIssuesLog.getter();
    if (os_log_type_enabled(v25, v24))
    {
      v32 = a4;
      v26 = swift_slowAlloc(12, -1);
      v33 = a5;
      v27 = (uint8_t *)v26;
      v28 = swift_slowAlloc(32, -1);
      v36 = v28;
      *(_DWORD *)v27 = 136315138;
      v35 = sub_100029918(v34, v32, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      _os_log_impl((void *)&_mh_execute_header, v25, v24, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      v29 = v27;
      a5 = v33;
      swift_slowDealloc(v29, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath(a5, v15, v23);
    v30 = swift_release(v23);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v12 + 8))(v15, v11, v30);
  }
}

double _s10Calculator0A15CustomSplitViewV7getFade_8maxValue11windowWidth10screenDrag12CoreGraphics7CGFloatVSb_A3JtF_0(char a1, double result, double a3, double a4)
{
  double v4;
  double v5;
  double v6;

  v4 = fabs(a4) * result / a3;
  v5 = 1.0 - v4;
  if (a4 >= 0.0)
    v5 = v4;
  if (v5 != 0.0)
  {
    if ((a1 & 1) != 0)
    {
      if (a4 > 0.0)
        return result;
      v6 = fabs(v5) - result;
    }
    else
    {
      v6 = 0.0;
      if (a4 <= 0.0)
        return v6;
      v6 = fabs(v5);
    }
    if (v6 > result)
      return result;
    return v6;
  }
  if ((a1 & 1) == 0)
    return 0.0;
  return result;
}

uint64_t sub_1000446E0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &opaque type descriptor for <<opaque return type of CalculatorCustomSplitView.body>>, 1);
}

uint64_t sub_100044714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 80);
}

void sub_10004471C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[11];

  v2 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[3] = &unk_1000CF110;
      v8[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[6] = &unk_1000CF128;
      v8[7] = &unk_1000CF140;
      v8[8] = &unk_1000CF140;
      sub_100045C10(319);
      if (v7 <= 0x3F)
      {
        v8[9] = *(_QWORD *)(v6 - 8) + 64;
        v8[10] = &unk_1000CF158;
        swift_initStructMetadata(a1, 0, 11, v8, a1 + 48);
      }
    }
  }
}

uint64_t *sub_1000447FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v5 = *(_QWORD *)(a3 + 16);
  v4 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(v4 - 8);
  v9 = *(_DWORD *)(v8 + 80);
  v10 = v9;
  v11 = *(_QWORD *)(v8 + 64);
  v12 = type metadata accessor for ScenePhase(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_DWORD *)(v13 + 80);
  v15 = v14 & 0xF8;
  if (*(_QWORD *)(v13 + 64) <= 8uLL)
    v16 = 8;
  else
    v16 = *(_QWORD *)(v13 + 64);
  v17 = v9 | *(_DWORD *)(v6 + 80) & 0xF8 | v15;
  v18 = (v14 | v9 | *(_DWORD *)(v6 + 80)) & 0x100000;
  v19 = v17 <= 7 && v18 == 0;
  if (v19
    && (v20 = v7 + v9,
        v21 = (((((((v11 + ((v7 + v10) & ~v10) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
             + 55) & 0xFFFFFFFFFFFFFFF8,
        v22 = ~v15 & 0xFFFFFFFFFFFFFFF8,
        v23 = v15 + 16,
        ((v16 + 8 + ((v15 + 16 + v21) & v22)) & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18))
  {
    v56 = v16 + 8;
    v57 = *(_QWORD *)(v12 - 8);
    v54 = v12;
    v55 = v16;
    v24 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v25 = ((unint64_t)a1 + v20) & v24;
    v26 = ((unint64_t)a2 + v20) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v25, v26, v4);
    v27 = (v25 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28 = (v26 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    *(_BYTE *)(v27 + 8) = *(_BYTE *)(v28 + 8);
    v29 = (_QWORD *)((v25 + v11 + 23) & 0xFFFFFFFFFFFFF8);
    v30 = (_QWORD *)((v26 + v11 + 23) & 0xFFFFFFFFFFFFF8);
    *v29 = *v30;
    v31 = (_QWORD *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFF8);
    v32 = (_QWORD *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFF8);
    *v31 = *v32;
    v33 = ((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8;
    v34 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(_BYTE *)v33 = *(_BYTE *)v34;
    v35 = *(_QWORD *)(v34 + 8);
    *(_QWORD *)(v33 + 8) = v35;
    v36 = *(_QWORD *)(v34 + 24);
    *(_QWORD *)(v33 + 16) = *(_QWORD *)(v34 + 16);
    *(_QWORD *)(v33 + 24) = v36;
    v37 = (v33 + 39) & 0xFFFFFFFFFFFFFFF8;
    v38 = (v34 + 39) & 0xFFFFFFFFFFFFFFF8;
    v39 = *(_QWORD *)v38;
    LOBYTE(v38) = *(_BYTE *)(v38 + 8);
    *(_QWORD *)v37 = v39;
    *(_BYTE *)(v37 + 8) = v38;
    v40 = (v33 + 55) & 0xFFFFFFFFFFFFFFF8;
    v41 = (v34 + 55) & 0xFFFFFFFFFFFFFFF8;
    v42 = *(_QWORD *)v41;
    LOBYTE(v37) = *(_BYTE *)(v41 + 8);
    *(_QWORD *)v40 = *(_QWORD *)v41;
    *(_BYTE *)(v40 + 8) = v37;
    v43 = (_QWORD *)((v23 + v40) & v22);
    v44 = (uint64_t *)((v23 + v41) & v22);
    v45 = *((unsigned __int8 *)v44 + v55);
    swift_retain(v35);
    swift_retain(v36);
    swift_retain(v39);
    swift_retain(v42);
    if (v45 >= 2)
    {
      if (v55 <= 3)
        v46 = v55;
      else
        v46 = 4;
      __asm { BR              X11 }
    }
    if (v45 == 1)
    {
      (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v57 + 16))(v43, v44, v54);
      v49 = 1;
    }
    else
    {
      v50 = *v44;
      *v43 = *v44;
      swift_retain(v50);
      v49 = 0;
    }
    v48 = a1;
    *((_BYTE *)v43 + v55) = v49;
    v51 = (_QWORD *)(((unint64_t)v43 + v56) & 0xFFFFFFFFFFFFFFF8);
    v52 = (_QWORD *)(((unint64_t)v44 + v56) & 0xFFFFFFFFFFFFFFF8);
    *v51 = *v52;
    v47 = v52[1];
    v51[1] = v47;
  }
  else
  {
    v47 = *a2;
    *a1 = *a2;
    v48 = (uint64_t *)(v47 + (((v17 | 7) + 16) & ~(unint64_t)(v17 | 7)));
  }
  swift_retain(v47);
  return v48;
}

uint64_t sub_100044B34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  v5 = *(_QWORD *)(v4 + 64) + a1;
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 24) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v7);
  v8 = (((((*(_QWORD *)(v6 + 64) + v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v8 + 8));
  swift_release(*(_QWORD *)(v8 + 24));
  swift_release(*(_QWORD *)((v8 + 39) & 0xFFFFFFFFFFFFF8));
  v9 = (_QWORD *)((v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  swift_release(*v9);
  v10 = type metadata accessor for ScenePhase(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  v13 = (_QWORD *)(((unint64_t)v9 + v12 + 9) & ~v12);
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(v11 + 64);
  v15 = *((unsigned __int8 *)v13 + v14);
  if (v15 >= 2)
  {
    if (v14 <= 3)
      v16 = v14;
    else
      v16 = 4;
    __asm { BR              X13 }
  }
  if (v15 == 1)
    (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  else
    swift_release(*v13);
  return swift_release(*(_QWORD *)((((unint64_t)v13 + v14 + 8) & 0xFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100044CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v49;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v49 = a1;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v24 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v22 + 8) = v24;
  v25 = *(_QWORD *)(v23 + 24);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 24) = v25;
  v26 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  LOBYTE(v27) = *(_BYTE *)(v27 + 8);
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v27;
  v29 = (v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  v31 = *(_QWORD *)v30;
  LOBYTE(v23) = *(_BYTE *)(v30 + 8);
  *(_QWORD *)v29 = *(_QWORD *)v30;
  *(_BYTE *)(v29 + 8) = v23;
  v32 = type metadata accessor for ScenePhase(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(_DWORD *)(v33 + 80) & 0xF8;
  v35 = v34 + 16;
  v36 = v34 + 16 + v29;
  v37 = ~v34 & 0xFFFFFFFFFFFFFFF8;
  v38 = (_QWORD *)(v36 & v37);
  v39 = (uint64_t *)((v35 + v30) & v37);
  if (*(_QWORD *)(v33 + 64) <= 8uLL)
    v40 = 8;
  else
    v40 = *(_QWORD *)(v33 + 64);
  v41 = *((unsigned __int8 *)v39 + v40);
  swift_retain(v24);
  swift_retain(v25);
  swift_retain(v28);
  swift_retain(v31);
  if (v41 >= 2)
  {
    if (v40 <= 3)
      v42 = v40;
    else
      v42 = 4;
    __asm { BR              X11 }
  }
  if (v41 == 1)
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v33 + 16))(v38, v39, v32);
    v43 = 1;
  }
  else
  {
    v44 = *v39;
    *v38 = *v39;
    swift_retain(v44);
    v43 = 0;
  }
  *((_BYTE *)v38 + v40) = v43;
  v45 = (_QWORD *)(((unint64_t)v38 + v40 + 8) & 0xFFFFFFFFFFFFFFF8);
  v46 = (_QWORD *)(((unint64_t)v39 + v40 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v45 = *v46;
  v47 = v46[1];
  v45[1] = v47;
  swift_retain(v47);
  return v49;
}

uint64_t sub_100044F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v24 = *(_QWORD *)(v22 + 8);
  v25 = *(_QWORD *)(v23 + 8);
  *(_QWORD *)(v22 + 8) = v25;
  swift_retain(v25);
  swift_release(v24);
  v26 = *(_QWORD *)(v23 + 24);
  v27 = *(_QWORD *)(v22 + 24);
  *(_QWORD *)(v22 + 16) = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(v22 + 24) = v26;
  swift_retain(v26);
  swift_release(v27);
  v28 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v30 = *(_QWORD *)v29;
  LOBYTE(v29) = *(_BYTE *)(v29 + 8);
  v31 = *(_QWORD *)v28;
  *(_QWORD *)v28 = v30;
  *(_BYTE *)(v28 + 8) = v29;
  swift_retain(v30);
  swift_release(v31);
  v32 = (v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v33 = (v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  v34 = *(_QWORD *)v33;
  v35 = *(_BYTE *)(v33 + 8);
  v36 = *(_QWORD *)v32;
  *(_QWORD *)v32 = *(_QWORD *)v33;
  *(_BYTE *)(v32 + 8) = v35;
  swift_retain(v34);
  swift_release(v36);
  v37 = type metadata accessor for ScenePhase(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(_DWORD *)(v38 + 80) & 0xF8;
  v40 = v39 + 16;
  v41 = v39 + 16 + v32;
  v42 = ~v39 & 0xFFFFFFFFFFFFFFF8;
  v43 = v41 & v42;
  v44 = (v40 + v33) & v42;
  if (*(_QWORD *)(v38 + 64) <= 8uLL)
    v45 = 8;
  else
    v45 = *(_QWORD *)(v38 + 64);
  if (v43 != v44)
  {
    v46 = v37;
    v47 = *(unsigned __int8 *)(v43 + v45);
    if (v47 >= 2)
    {
      if (v45 <= 3)
        v48 = v45;
      else
        v48 = 4;
      __asm { BR              X12 }
    }
    if (v47 == 1)
      (*(void (**)(unint64_t, uint64_t))(v38 + 8))(v43, v37);
    else
      swift_release(*(_QWORD *)v43);
    v49 = *(unsigned __int8 *)(v44 + v45);
    if (v49 >= 2)
    {
      if (v45 <= 3)
        v50 = v45;
      else
        v50 = 4;
      __asm { BR              X12 }
    }
    if (v49 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v38 + 16))(v43, v44, v46);
      *(_BYTE *)(v43 + v45) = 1;
    }
    else
    {
      v51 = *(_QWORD *)v44;
      *(_QWORD *)v43 = *(_QWORD *)v44;
      *(_BYTE *)(v43 + v45) = 0;
      swift_retain(v51);
    }
  }
  v52 = (_QWORD *)(((v43 | 7) + v45 + 1) & 0xFFFFFFFFFFFFFFF8);
  v53 = (_QWORD *)(((v44 | 7) + v45 + 1) & 0xFFFFFFFFFFFFFFF8);
  *v52 = *v53;
  v54 = v52[1];
  v55 = v53[1];
  v52[1] = v55;
  swift_retain(v55);
  swift_release(v54);
  return a1;
}

uint64_t sub_100045270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  char v41;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = (_OWORD *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = ((unint64_t)v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  v26 = ((unint64_t)v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(_BYTE *)(v26 + 8);
  *(_QWORD *)v25 = *(_QWORD *)v26;
  *(_BYTE *)(v25 + 8) = v27;
  v28 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v29 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v23) = *(_BYTE *)(v29 + 8);
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_BYTE *)(v28 + 8) = (_BYTE)v23;
  v30 = type metadata accessor for ScenePhase(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(_DWORD *)(v31 + 80) & 0xF8;
  v33 = v32 + 16;
  v34 = v32 + 16 + v28;
  v35 = ~v32 & 0xFFFFFFFFFFFFFFF8;
  v36 = (_QWORD *)(v34 & v35);
  v37 = (_QWORD *)((v33 + v29) & v35);
  if (*(_QWORD *)(v31 + 64) <= 8uLL)
    v38 = 8;
  else
    v38 = *(_QWORD *)(v31 + 64);
  v39 = *((unsigned __int8 *)v37 + v38);
  if (v39 >= 2)
  {
    if (v38 <= 3)
      v40 = v38;
    else
      v40 = 4;
    __asm { BR              X13 }
  }
  if (v39 == 1)
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v31 + 32))(v36, v37, v30);
    v41 = 1;
  }
  else
  {
    v41 = 0;
    *v36 = *v37;
  }
  *((_BYTE *)v36 + v38) = v41;
  *(_OWORD *)(((unint64_t)v36 + v38 + 8) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v37 + v38 + 8) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100045488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v7 + v9;
  v11 = (v10 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v11, v12);
  v13 = *(_QWORD *)(v8 + 64);
  v14 = v11 + v13;
  v15 = v12 + v13;
  v16 = (v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = (_QWORD *)((v14 + 23) & 0xFFFFFFFFFFFFF8);
  v19 = (_QWORD *)((v15 + 23) & 0xFFFFFFFFFFFFF8);
  *v18 = *v19;
  v20 = (_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  v21 = (_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
  *v20 = *v21;
  v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(_BYTE *)v22 = *(_BYTE *)v23;
  v24 = *(_QWORD *)(v22 + 8);
  *(_QWORD *)(v22 + 8) = *(_QWORD *)(v23 + 8);
  swift_release(v24);
  v25 = *(_QWORD *)(v22 + 24);
  *(_OWORD *)(v22 + 16) = *(_OWORD *)(v23 + 16);
  swift_release(v25);
  v26 = (v22 + 39) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v23 + 39) & 0xFFFFFFFFFFFFFFF8;
  v28 = *(_QWORD *)v27;
  LOBYTE(v27) = *(_BYTE *)(v27 + 8);
  v29 = *(_QWORD *)v26;
  *(_QWORD *)v26 = v28;
  *(_BYTE *)(v26 + 8) = v27;
  swift_release(v29);
  v30 = (v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  v32 = *(_BYTE *)(v31 + 8);
  v33 = *(_QWORD *)v30;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_BYTE *)(v30 + 8) = v32;
  swift_release(v33);
  v34 = type metadata accessor for ScenePhase(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(_DWORD *)(v35 + 80) & 0xF8;
  v37 = v36 + 16;
  v38 = v36 + 16 + v30;
  v39 = ~v36 & 0xFFFFFFFFFFFFFFF8;
  v40 = v38 & v39;
  v41 = (v37 + v31) & v39;
  if (*(_QWORD *)(v35 + 64) <= 8uLL)
    v42 = 8;
  else
    v42 = *(_QWORD *)(v35 + 64);
  if (v40 != v41)
  {
    v43 = v34;
    v44 = *(unsigned __int8 *)(v40 + v42);
    if (v44 >= 2)
    {
      if (v42 <= 3)
        v45 = v42;
      else
        v45 = 4;
      __asm { BR              X12 }
    }
    if (v44 == 1)
      (*(void (**)(unint64_t, uint64_t))(v35 + 8))(v40, v34);
    else
      swift_release(*(_QWORD *)v40);
    v46 = *(unsigned __int8 *)(v41 + v42);
    if (v46 >= 2)
    {
      if (v42 <= 3)
        v47 = v42;
      else
        v47 = 4;
      __asm { BR              X12 }
    }
    if (v46 == 1)
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v35 + 32))(v40, v41, v43);
      v48 = 1;
    }
    else
    {
      v48 = 0;
      *(_QWORD *)v40 = *(_QWORD *)v41;
    }
    *(_BYTE *)(v40 + v42) = v48;
  }
  v49 = (_QWORD *)(((v40 | 7) + v42 + 1) & 0xFFFFFFFFFFFFFFF8);
  v50 = (_QWORD *)(((v41 | 7) + v42 + 1) & 0xFFFFFFFFFFFFFFF8);
  *v49 = *v50;
  v51 = v49[1];
  v49[1] = v50[1];
  swift_release(v51);
  return a1;
}

uint64_t sub_100045790(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v6 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(v5 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v8)
    v11 = *(_DWORD *)(v7 + 84);
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF)
    v12 = 0x7FFFFFFF;
  else
    v12 = v11;
  v13 = *(_QWORD *)(type metadata accessor for ScenePhase(0) - 8);
  if (*(_QWORD *)(v13 + 64) <= 8uLL)
    v14 = 8;
  else
    v14 = *(_QWORD *)(v13 + 64);
  if (!a2)
    return 0;
  v15 = *(unsigned __int8 *)(v9 + 80);
  v16 = *(_QWORD *)(v7 + 64) + v15;
  v17 = *(_QWORD *)(v9 + 64);
  if (v12 < a2)
  {
    v18 = *(_DWORD *)(v13 + 80) & 0xF8 | 7;
    if (((((v14
           + ((v18
             + ((((((((v17 + (v16 & ~v15) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
               + 55) & 0xFFFFFFFFFFFFFFF8)
             + 9) & ~v18)
           + 8) & 0xFFFFFFFFFFFFFFF8)
         + 16) & 0xFFFFFFF8) != 0)
      v19 = 2;
    else
      v19 = a2 - v12 + 1;
    if (v19 >= 0x10000)
      v20 = 4;
    else
      v20 = 2;
    if (v19 < 0x100)
      v20 = 1;
    if (v19 >= 2)
      v21 = v20;
    else
      v21 = 0;
    __asm { BR              X15 }
  }
  if ((_DWORD)v8 == v12)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v24 = a1;
    v25 = v8;
    v26 = v6;
    return v23(v24, v25, v26);
  }
  v24 = (v16 + a1) & ~v15;
  if ((_DWORD)v10 == v12)
  {
    v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    v25 = v10;
    v26 = v5;
    return v23(v24, v25, v26);
  }
  v27 = *(_QWORD *)(((((((v17 + v24 + 7) & 0xFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)
                  + 0x10);
  if (v27 >= 0xFFFFFFFF)
    LODWORD(v27) = -1;
  return (v27 + 1);
}

void sub_1000459A0(_DWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned int v15;
  int v16;
  int v17;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v8 + 84) <= *(_DWORD *)(v7 + 84))
    v9 = *(_DWORD *)(v7 + 84);
  else
    v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  else
    v10 = v9;
  v11 = *(_QWORD *)(type metadata accessor for ScenePhase(0) - 8);
  if (*(_QWORD *)(v11 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v11 + 64);
  v13 = *(_DWORD *)(v11 + 80) & 0xF8 | 7;
  v14 = ((v12
        + ((v13
          + ((((((((*(_QWORD *)(v8 + 64)
                  + ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
                  + 23) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 55) & 0xFFFFFFFFFFFFFFF8)
          + 9) & ~v13)
        + 8) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v10 >= a3)
  {
    v17 = 0;
    if (a2 <= v10)
      goto LABEL_23;
  }
  else
  {
    if ((((_DWORD)v12
         + (((_DWORD)v13
           + ((((((((*(_DWORD *)(v8 + 64)
                   + ((*(_DWORD *)(v7 + 64) + *(unsigned __int8 *)(v8 + 80)) & ~*(unsigned __int8 *)(v8 + 80))
                   + 23) & 0xFFFFFFF8)
                 + 15) & 0xFFFFFFF8)
               + 15) & 0xFFFFFFF8)
             + 55) & 0xFFFFFFF8)
           + 9) & ~(_DWORD)v13)
         + 8) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v15 = a3 - v10 + 1;
    else
      v15 = 2;
    if (v15 >= 0x10000)
      v16 = 4;
    else
      v16 = 2;
    if (v15 < 0x100)
      v16 = 1;
    if (v15 >= 2)
      v17 = v16;
    else
      v17 = 0;
    if (a2 <= v10)
LABEL_23:
      __asm { BR              X13 }
  }
  if ((_DWORD)v14)
  {
    bzero(a1, v14);
    *a1 = ~v10 + a2;
  }
  __asm { BR              X10 }
}

void sub_100045B28()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x100045BECLL);
}

void sub_100045B30()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  *(_DWORD *)(v1 + v2) = 0;
  if (v0)
    JUMPOUT(0x100045B38);
  JUMPOUT(0x100045BECLL);
}

void sub_100045B98()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x100045BECLL);
}

void sub_100045BA0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x100045BECLL);
}

uint64_t sub_100045BA8()
{
  uint64_t (*v0)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  *(_WORD *)(v9 + v14) = 0;
  if (!(_DWORD)v8)
    JUMPOUT(0x100045BECLL);
  if ((_DWORD)v13 == v16)
  {
    v0 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v1 = v9;
    v2 = v8;
    v3 = v13;
    v4 = v12;
  }
  else
  {
    v1 = (v6 + v9) & v7;
    if ((_DWORD)v11 != v16)
      JUMPOUT(0x100045BB4);
    v0 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v2 = v8;
    v3 = v11;
    v4 = v17;
  }
  return v0(v1, v2, v3, v4);
}

void sub_100045C10(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1001155E8)
  {
    v2 = type metadata accessor for ScenePhase(255);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1001155E8);
  }
}

uint64_t sub_100045C64(_QWORD *a1, __n128 a2)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t OpaqueTypeConformance2;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t WitnessTable;
  void *v65;

  v2 = a1[1];
  v3 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _FrameLayout, a2);
  v5 = type metadata accessor for ModifiedContent(255, v3, &type metadata for _OffsetEffect, v4);
  v6 = sub_100005608(&qword_100115508);
  v49 = type metadata accessor for ModifiedContent(255, v5, v6, v7);
  v8 = sub_100005608(&qword_100115510);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v2, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v11 = type metadata accessor for ZStack(255, v10);
  v13 = type metadata accessor for ModifiedContent(255, v11, &type metadata for _GeometryGroupEffect, v12);
  v14 = sub_100005608(&qword_100115518);
  v16 = type metadata accessor for ModifiedContent(255, v13, v14, v15);
  v17 = sub_100005608(&qword_100114B80);
  v19 = type metadata accessor for ModifiedContent(255, v16, v17, v18);
  v21 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _OffsetEffect, v20);
  v23 = type metadata accessor for ModifiedContent(255, v21, v6, v22);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v11);
  v65 = &protocol witness table for _GeometryGroupEffect;
  v62 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v63 = sub_100008078(&qword_100115520, &qword_100115518, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v61 = sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v59 = &protocol witness table for _OffsetEffect;
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v21);
  v57 = sub_100008078(&qword_100115528, &qword_100115508, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
  v50 = v23;
  v51 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v23);
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v50, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 0);
  v25 = swift_getTupleTypeMetadata2(255, v49, OpaqueTypeMetadata2, 0, 0);
  v26 = type metadata accessor for TupleView(255, v25);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v26);
  v27 = type metadata accessor for ZStack(255, v26);
  v28 = sub_100005608(&qword_100115530);
  v30 = type metadata accessor for ModifiedContent(255, v27, v28, v29);
  v31 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v27);
  v32 = sub_100008078(&qword_100115538, &qword_100115530, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v54 = v31;
  v55 = v32;
  v33 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  v50 = v30;
  v51 = v33;
  v34 = swift_getOpaqueTypeMetadata2(255, &v50, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 0);
  v35 = sub_100005608(&qword_100115540);
  v50 = v30;
  v51 = v33;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of View.containerRelativeFrame(_:alignment:)>>, 1);
  v37 = sub_100008078(&qword_100115548, &qword_100115540, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v50 = v34;
  v51 = v35;
  v52 = OpaqueTypeConformance2;
  v53 = v37;
  v38 = swift_getOpaqueTypeMetadata2(255, &v50, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 0);
  v39 = sub_100005608(&qword_100115550);
  v41 = type metadata accessor for ModifiedContent(255, v38, v39, v40);
  v43 = type metadata accessor for ModifiedContent(255, v41, &type metadata for _AppearanceActionModifier, v42);
  v50 = v34;
  v51 = v35;
  v52 = OpaqueTypeConformance2;
  v53 = v37;
  swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of View.gesture<A>(_:including:)>>, 1);
  sub_100008078(&qword_100115558, &qword_100115550, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v41);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v43);
  v44 = type metadata accessor for HStack(255, v43);
  v45 = type metadata accessor for ScenePhase(255);
  v46 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v44);
  v47 = sub_100005178(qword_100115560, (uint64_t (*)(uint64_t))&type metadata accessor for ScenePhase, (uint64_t)&protocol conformance descriptor for ScenePhase);
  v50 = v44;
  v51 = v45;
  v52 = v46;
  v53 = v47;
  return swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_100046130()
{
  return sub_1000462FC();
}

uint64_t sub_100046144()
{
  return sub_1000463B0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100040950);
}

unint64_t sub_100046150()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115610;
  if (!qword_100115610)
  {
    v1 = sub_100005608(&qword_100115618);
    sub_100008078(&qword_100114B68, &qword_100114B70, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115610);
  }
  return result;
}

void sub_1000461D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v8 = v3[3];
  v9 = v3[4];
  v10 = v3[5];
  v12[0] = v3[2];
  v7 = v12[0];
  v12[1] = v8;
  v12[2] = v9;
  v12[3] = v10;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v12) - 8)
                           + 80);
  sub_10004256C(a1, a2, a3, (uint64_t)v3 + ((v11 + 48) & ~v11), v7, v8, v9, v10);
}

void sub_10004626C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v4 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v8[0] = v1[2];
  v3 = v8[0];
  v8[1] = v4;
  v8[2] = v5;
  v8[3] = v6;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v8) - 8)
                          + 80);
  sub_100042A10(a1, (uint64_t)v1 + ((v7 + 48) & ~v7), v3, v4, v5, v6);
}

uint64_t sub_1000462F0()
{
  return sub_10004669C((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000431F4);
}

uint64_t sub_1000462FC()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  _OWORD v4[2];

  v1 = *(_OWORD *)(v0 + 32);
  v4[0] = *(_OWORD *)(v0 + 16);
  v4[1] = v1;
  v2 = type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v4);
  return sub_10003E94C(v2, 0.0);
}

uint64_t sub_100046360()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10004638C()
{
  uint64_t v0;

  return sub_100008B0C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000463A4()
{
  return sub_1000463B0((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100041B14);
}

uint64_t sub_1000463B0(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1000463CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UnevenRoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100046410(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UnevenRoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004644C()
{
  return sub_10003D3C8(&qword_100115650, &qword_100115640, (void (*)(void))sub_100046470);
}

unint64_t sub_100046470()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115658;
  if (!qword_100115658)
  {
    v1 = sub_100005608(&qword_100115638);
    sub_100008078(&qword_100115660, &qword_100115630, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115658);
  }
  return result;
}

unint64_t sub_1000464F4()
{
  unint64_t result;

  result = qword_100115668;
  if (!qword_100115668)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Rectangle, &type metadata for Rectangle);
    atomic_store(result, (unint64_t *)&qword_100115668);
  }
  return result;
}

uint64_t sub_10004653C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 40);
  v14 = *(_QWORD *)(v0 + 16);
  v1 = v14;
  v15 = *(_OWORD *)(v0 + 24);
  v13 = v15;
  v16 = v2;
  v3 = (int *)type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)&v14);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 48) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0 + v6, v1);
  (*(void (**)(uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v0 + v6 + v3[13]);
  v8 = v0 + v6 + v3[18];
  swift_release(*(_QWORD *)(v8 + 8));
  swift_release(*(_QWORD *)(v8 + 24));
  swift_release(*(_QWORD *)(v0 + v6 + v3[19]));
  swift_release(*(_QWORD *)(v0 + v6 + v3[20]));
  v9 = (_QWORD *)(v0 + v6 + v3[21]);
  v10 = sub_100005360(&qword_100113F58);
  if (swift_getEnumCaseMultiPayload(v9, v10) == 1)
  {
    v11 = type metadata accessor for ScenePhase(0);
    (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v9, v11);
  }
  else
  {
    swift_release(*v9);
  }
  swift_release(*(_QWORD *)(v0 + v6 + v3[22] + 8));
  return swift_deallocObject(v0, v6 + v7, v5 | 7);
}

uint64_t sub_100046690()
{
  return sub_10004669C((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t, uint64_t))sub_100042404);
}

uint64_t sub_10004669C(uint64_t (*a1)(char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[4];

  v3 = *((_QWORD *)v1 + 3);
  v4 = *((_QWORD *)v1 + 4);
  v5 = *((_QWORD *)v1 + 5);
  v9[0] = *((_QWORD *)v1 + 2);
  v2 = v9[0];
  v9[1] = v3;
  v9[2] = v4;
  v9[3] = v5;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorCustomSplitView(0, (uint64_t)v9) - 8)
                          + 80);
  return a1(&v1[(v6 + 48) & ~v6], v2, v3, v4, v5);
}

uint64_t sub_10004671C()
{
  return sub_1000438D0();
}

uint64_t sub_100046734()
{
  return sub_1000467FC((uint64_t)&unk_1000CF300, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed);
}

uint64_t sub_100046748()
{
  return sub_1000467FC((uint64_t)&unk_1000CF2D8, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed);
}

uint64_t sub_10004675C()
{
  return sub_1000467FC((uint64_t)&unk_1000CF378, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed);
}

uint64_t sub_100046770(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed) = a2;
  return result;
}

uint64_t sub_100046780(uint64_t result, char a2)
{
  *(_BYTE *)(result
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed) = a2;
  return result;
}

uint64_t sub_100046790()
{
  return sub_1000467FC((uint64_t)&unk_1000CF350, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed);
}

uint64_t sub_1000467A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed) = a2;
  return result;
}

uint64_t sub_1000467B4()
{
  return sub_1000467FC((uint64_t)&unk_1000CF328, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed);
}

uint64_t sub_1000467C8(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed) = a2;
  return result;
}

uint64_t sub_1000467D8(uint64_t result, char a2)
{
  *(_BYTE *)(result + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed) = a2;
  return result;
}

uint64_t sub_1000467E8()
{
  return sub_1000467FC((uint64_t)&unk_1000CF3A0, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced);
}

uint64_t sub_1000467FC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1);
  v7 = v2;
  v5 = sub_100047124();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v5);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v2 + *a2);
}

void sub_100046868(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CF3A0);
  v6 = v3;
  v5 = sub_100047124();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3
                 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced);
}

double sub_1000468E4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CF3A0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100047124();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000476CC, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

id sub_100046974()
{
  _BYTE *v0;
  objc_class *ObjectType;
  _QWORD *v2;
  id v3;
  id result;
  void *v5;
  objc_super v6;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed] = 1;
  v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced] = 0;
  v2 = &v0[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager_appDomainID];
  *v2 = 0xD000000000000014;
  v2[1] = 0x80000001000D66F0;
  ObservationRegistrar.init()(ObjectType);
  v6.receiver = v0;
  v6.super_class = ObjectType;
  v3 = objc_msgSendSuper2(&v6, "init");
  sub_100046A8C();
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v5 = result;
    objc_msgSend(result, "registerObserver:", v3);

    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100046A8C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t KeyPath;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[16];
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;

  v1 = v0;
  v2 = (void *)objc_opt_self(MCProfileConnection);
  v3 = objc_msgSend(v2, "sharedConnection");
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "isCalculatorModeScientificAllowed");

  KeyPath = swift_getKeyPath(&unk_1000CF378);
  __chkstk_darwin(KeyPath, v7);
  v29 = v1;
  v30 = v5;
  v31 = v1;
  v8 = sub_100047124();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, KeyPath, sub_1000476E0, v28, (char *)&type metadata for () + 8, v8);
  swift_release(KeyPath);
  v9 = swift_getKeyPath(&unk_1000CF328);
  __chkstk_darwin(v9, v10);
  v29 = v1;
  v30 = 0;
  v31 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v9, sub_1000476F4, v28, (char *)&type metadata for () + 8, v8);
  v11 = objc_msgSend(v2, "sharedConnection", swift_release(v9).n128_f64[0]);
  if (!v11)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v12 = v11;
  v13 = objc_msgSend(v11, "isCalculatorModeMathPaperAllowed");

  v14 = swift_getKeyPath(&unk_1000CF350);
  __chkstk_darwin(v14, v15);
  v29 = v1;
  v30 = v13;
  v31 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v14, sub_100047708, v28, (char *)&type metadata for () + 8, v8);
  v16 = objc_msgSend(v2, "sharedConnection", swift_release(v14).n128_f64[0]);
  if (!v16)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v17 = v16;
  v18 = objc_msgSend(v16, "isCalculatorInputModeUnitConversionAllowed");

  v19 = swift_getKeyPath(&unk_1000CF300);
  __chkstk_darwin(v19, v20);
  v29 = v1;
  v30 = v18;
  v31 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v19, sub_10004771C, v28, (char *)&type metadata for () + 8, v8);
  swift_release(v19);
  v21 = swift_getKeyPath(&unk_1000CF2D8);
  __chkstk_darwin(v21, v22);
  v29 = v1;
  v30 = 0;
  v31 = v1;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v21, sub_1000476B4, v28, (char *)&type metadata for () + 8, v8);
  v23 = objc_msgSend(v2, "sharedConnection", swift_release(v21).n128_f64[0]);
  if (v23)
  {
    v24 = v23;
    v25 = objc_msgSend(v23, "isSquareRootOnBasicCalculatorForced");

    v26 = swift_getKeyPath(&unk_1000CF3A0);
    __chkstk_darwin(v26, v27);
    v29 = v1;
    v30 = v25;
    v31 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v26, sub_1000476CC, v28, (char *)&type metadata for () + 8, v8);
    swift_release(v26);
    return;
  }
LABEL_9:
  __break(1u);
}

id sub_100046E54()
{
  void *v0;
  objc_class *ObjectType;
  id result;
  void *v3;
  objc_super v4;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  result = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (result)
  {
    v3 = result;
    objc_msgSend(result, "unregisterObserver:", v0);

    v4.receiver = v0;
    v4.super_class = ObjectType;
    return objc_msgSendSuper2(&v4, "dealloc");
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100046FC8()
{
  return type metadata accessor for CalculatorMDMRestrictionsManager(0);
}

uint64_t type metadata accessor for CalculatorMDMRestrictionsManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100115708;
  if (!qword_100115708)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorMDMRestrictionsManager);
  return result;
}

uint64_t sub_10004700C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_1000CF288;
  v4[1] = &unk_1000CF288;
  v4[2] = &unk_1000CF288;
  v4[3] = &unk_1000CF288;
  v4[4] = &unk_1000CF288;
  v4[5] = &unk_1000CF288;
  v4[6] = &unk_1000CF2A0;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_100047124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114A30;
  if (!qword_100114A30)
  {
    v1 = type metadata accessor for CalculatorMDMRestrictionsManager(255);
    result = swift_getWitnessTable(&unk_1000CF2B8, v1);
    atomic_store(result, (unint64_t *)&qword_100114A30);
  }
  return result;
}

void sub_10004718C(void *a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  uint64_t KeyPath;
  unint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  _BYTE v30[16];
  uint64_t v31;
  char v32;
  uint64_t v33;

  if (!a1)
  {
    __break(1u);
    return;
  }
  v3 = objc_msgSend(a1, "isCalculatorModeScientificAllowed");
  KeyPath = swift_getKeyPath(&unk_1000CF378);
  v33 = v1;
  v5 = sub_100047124();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, KeyPath, v5);
  v6 = swift_release(KeyPath).n128_u64[0];
  v7 = v3 ^ *(_BYTE *)(v1
                     + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed);
  if ((v7 & 1) != 0)
  {
    v8 = swift_getKeyPath(&unk_1000CF378);
    __chkstk_darwin(v8, v9);
    v31 = v1;
    v32 = v3;
    v33 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v33, v8, sub_100047634, v30, (char *)&type metadata for () + 8, v5);
    v6 = swift_release(v8).n128_u64[0];
  }
  v10 = objc_msgSend(a1, "isCalculatorModeProgrammerAllowed", *(double *)&v6);
  v11 = swift_getKeyPath(&unk_1000CF328);
  v33 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, v11, v5);
  v12 = swift_release(v11).n128_u64[0];
  if (v10 != *(unsigned __int8 *)(v1
                                 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed))
  {
    v13 = swift_getKeyPath(&unk_1000CF328);
    __chkstk_darwin(v13, v14);
    v31 = v1;
    v32 = v10;
    v33 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v33, v13, sub_10004764C, v30, (char *)&type metadata for () + 8, v5);
    v12 = swift_release(v13).n128_u64[0];
    v7 = 1;
  }
  v15 = objc_msgSend(a1, "isCalculatorInputModeUnitConversionAllowed", *(double *)&v12);
  v16 = swift_getKeyPath(&unk_1000CF300);
  v33 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, v16, v5);
  v17 = swift_release(v16).n128_u64[0];
  if (v15 != *(unsigned __int8 *)(v1
                                 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed))
  {
    v18 = swift_getKeyPath(&unk_1000CF300);
    __chkstk_darwin(v18, v19);
    v31 = v1;
    v32 = v15;
    v33 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v33, v18, sub_100047664, v30, (char *)&type metadata for () + 8, v5);
    v17 = swift_release(v18).n128_u64[0];
    v7 = 1;
  }
  v20 = objc_msgSend(a1, "isCalculatorModeMathPaperAllowed", *(double *)&v17);
  v21 = swift_getKeyPath(&unk_1000CF350);
  v33 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, v21, v5);
  v22 = swift_release(v21).n128_u64[0];
  if (v20 != *(unsigned __int8 *)(v1
                                 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed))
  {
    v23 = swift_getKeyPath(&unk_1000CF350);
    __chkstk_darwin(v23, v24);
    v31 = v1;
    v32 = v20;
    v33 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v33, v23, sub_10004767C, v30, (char *)&type metadata for () + 8, v5);
    v22 = swift_release(v23).n128_u64[0];
    v7 = 1;
  }
  v25 = objc_msgSend(a1, "isSquareRootOnBasicCalculatorForced", *(double *)&v22);
  v26 = swift_getKeyPath(&unk_1000CF3A0);
  v33 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v33, v26, v5);
  swift_release(v26);
  if (v25 == *(unsigned __int8 *)(v1
                                 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced))
  {
    if ((v7 & 1) == 0)
      return;
  }
  else
  {
    v27 = swift_getKeyPath(&unk_1000CF3A0);
    __chkstk_darwin(v27, v28);
    v31 = v1;
    v32 = v25;
    v33 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v33, v27, sub_10004769C, v30, (char *)&type metadata for () + 8, v5);
    swift_release(v27);
  }
  v29 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100113C98 != -1)
    swift_once(&qword_100113C98, sub_10004E658);
  objc_msgSend(v29, "postNotificationName:object:", qword_10011FC40, 0);

}

void sub_100047634()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed) = *(_BYTE *)(v0 + 24);
}

void sub_10004764C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed) = *(_BYTE *)(v0 + 24);
}

void sub_100047664()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed) = *(_BYTE *)(v0 + 24);
}

void sub_10004767C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed) = *(_BYTE *)(v0 + 24);
}

void sub_10004769C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced) = *(_BYTE *)(v0 + 24);
}

void sub_1000476B4()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16)
           + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeRPNAllowed) = *(_BYTE *)(v0 + 24);
}

void sub_1000476CC()
{
  sub_10004769C();
}

void sub_1000476E0()
{
  sub_100047634();
}

void sub_1000476F4()
{
  sub_10004764C();
}

void sub_100047708()
{
  sub_10004767C();
}

void sub_10004771C()
{
  sub_100047664();
}

id sub_100047730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000CF4C0);
  v17[0] = v0;
  v3 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(id *)(v0 + 32);
  v5 = CalculateUnitCategory.id.getter();
  v7 = v6;

  v8 = swift_getKeyPath(&unk_1000CF560);
  v17[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, v8, v3);
  swift_release(v8);
  swift_beginAccess(v1 + 40, v17, 0, 0);
  v9 = *(_QWORD *)(v1 + 40);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 40));
    v10 = sub_1000053A4(v5, v7);
    if ((v11 & 1) != 0)
    {
      v12 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return v12;
    }
    swift_bridgeObjectRelease(v7);
    v14 = v9;
  }
  else
  {
    v14 = v7;
  }
  swift_bridgeObjectRelease(v14);
  v15 = swift_getKeyPath(&unk_1000CF4C0);
  v16 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, v15, v3);
  return objc_msgSend(*(id *)(v1 + 32), "preferredFromUnit", swift_release(v15).n128_f64[0]);
}

id sub_1000478E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  id v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000CF4C0);
  v17[0] = v0;
  v3 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(id *)(v0 + 32);
  v5 = CalculateUnitCategory.id.getter();
  v7 = v6;

  v8 = swift_getKeyPath(&unk_1000CF4E8);
  v17[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v17, v8, v3);
  swift_release(v8);
  swift_beginAccess(v1 + 48, v17, 0, 0);
  v9 = *(_QWORD *)(v1 + 48);
  if (*(_QWORD *)(v9 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1 + 48));
    v10 = sub_1000053A4(v5, v7);
    if ((v11 & 1) != 0)
    {
      v12 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v9);
      return v12;
    }
    swift_bridgeObjectRelease(v7);
    v14 = v9;
  }
  else
  {
    v14 = v7;
  }
  swift_bridgeObjectRelease(v14);
  v15 = swift_getKeyPath(&unk_1000CF4C0);
  v16 = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, v15, v3);
  return objc_msgSend(*(id *)(v1 + 32), "preferredToUnit", swift_release(v15).n128_f64[0]);
}

uint64_t sub_100047AA0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v8;

  KeyPath = swift_getKeyPath(&unk_1000CF4C0);
  v8 = v0;
  v2 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v2);
  if (objc_msgSend(*(id *)(v0 + 32), "unitType", swift_release(KeyPath).n128_f64[0]) == (id)16)
  {
    v3 = *(_QWORD *)(v0 + 24);
    v4 = swift_getKeyPath(&unk_1000CF5B0);
    v8 = v3;
    v5 = sub_100005178(&qword_100114740, type metadata accessor for CalculatorCurrencyCacheProvider, (uint64_t)&unk_1000CDDE8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, v4, v5);
    swift_release(v4);
    v6 = *(_BYTE *)(v3 + OBJC_IVAR____TtC10Calculator31CalculatorCurrencyCacheProvider__isCurrencyCacheLoaded) ^ 1;
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

id sub_100047BB0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000CF4C0);
  v4 = v0;
  v2 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(id *)(v0 + 32);
}

void sub_100047C34(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  void *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  NSString v35;
  _QWORD v36[6];
  uint64_t v37;
  _QWORD v38[3];

  v2 = v1;
  v4 = sub_100047730();
  v5 = CalculateUnit.id.getter();
  v7 = v6;

  v9 = CalculateUnit.id.getter();
  v10 = v8;
  if (v5 == v9 && v7 == v8)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v9, v8, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
    {
      v12 = objc_msgSend(a1, "category");
      if (v12)
      {
        v13 = v12;
        sub_100048D4C(v12);

        KeyPath = swift_getKeyPath(&unk_1000CF4C0);
        v38[0] = v2;
        v15 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v38, KeyPath, v15);
        swift_release(KeyPath);
        v16 = *(id *)(v2 + 32);
        v17 = CalculateUnitCategory.id.getter();
        v19 = v18;

        v20 = swift_getKeyPath(&unk_1000CF560);
        v38[0] = v2;
        v21 = a1;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v38, v20, v15);
        swift_release(v20);
        v38[0] = v2;
        v22 = swift_getKeyPath(&unk_1000CF560);
        ObservationRegistrar.willSet<A, B>(_:keyPath:)(v38, v22, v15);
        swift_release(v22);
        swift_beginAccess(v2 + 40, v38, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 40));
        v37 = *(_QWORD *)(v2 + 40);
        *(_QWORD *)(v2 + 40) = 0x8000000000000000;
        sub_10001E238((uint64_t)v21, v17, v19, isUniquelyReferenced_nonNull_native);
        v24 = *(_QWORD *)(v2 + 40);
        *(_QWORD *)(v2 + 40) = v37;
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v24);
        swift_endAccess(v38);
        v38[0] = v2;
        v25 = swift_getKeyPath(&unk_1000CF560);
        ObservationRegistrar.didSet<A, B>(_:keyPath:)(v38, v25, v15);
        swift_release(v25);
        v26 = *(_QWORD *)(v2 + 16);
        v27 = swift_getKeyPath(&unk_1000CF588);
        __chkstk_darwin(v27, v28);
        v36[2] = v26;
        v36[3] = v21;
        v38[0] = v26;
        v29 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
        v30 = v21;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v38, v27, sub_1000491D8, v36, (char *)&type metadata for () + 8, v29);
        swift_release(v27);

        if (qword_100113F10 != -1)
          swift_once(&qword_100113F10, sub_1000A8D50);
        v31 = (void *)qword_10011FED8;
        CalculateUnit.id.getter();
        v33 = v32;
        v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v33);
        v35 = String._bridgeToObjectiveC()();
        objc_msgSend(v31, "setObject:forKey:", v34, v35);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_100047FC8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  void *v13;
  uint64_t KeyPath;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  NSString v35;
  _QWORD v36[6];
  uint64_t v37;
  _QWORD v38[3];

  v2 = v1;
  v4 = sub_1000478E8();
  v5 = CalculateUnit.id.getter();
  v7 = v6;

  v9 = CalculateUnit.id.getter();
  v10 = v8;
  if (v5 == v9 && v7 == v8)
  {
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v9, v8, 0);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
    {
      v12 = objc_msgSend(a1, "category");
      if (v12)
      {
        v13 = v12;
        sub_100048D4C(v12);

        KeyPath = swift_getKeyPath(&unk_1000CF4C0);
        v38[0] = v2;
        v15 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
        ObservationRegistrar.access<A, B>(_:keyPath:)(v38, KeyPath, v15);
        swift_release(KeyPath);
        v16 = *(id *)(v2 + 32);
        v17 = CalculateUnitCategory.id.getter();
        v19 = v18;

        v20 = swift_getKeyPath(&unk_1000CF4E8);
        v38[0] = v2;
        v21 = a1;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v38, v20, v15);
        swift_release(v20);
        v38[0] = v2;
        v22 = swift_getKeyPath(&unk_1000CF4E8);
        ObservationRegistrar.willSet<A, B>(_:keyPath:)(v38, v22, v15);
        swift_release(v22);
        swift_beginAccess(v2 + 48, v38, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v2 + 48));
        v37 = *(_QWORD *)(v2 + 48);
        *(_QWORD *)(v2 + 48) = 0x8000000000000000;
        sub_10001E238((uint64_t)v21, v17, v19, isUniquelyReferenced_nonNull_native);
        v24 = *(_QWORD *)(v2 + 48);
        *(_QWORD *)(v2 + 48) = v37;
        swift_bridgeObjectRelease(v19);
        swift_bridgeObjectRelease(v24);
        swift_endAccess(v38);
        v38[0] = v2;
        v25 = swift_getKeyPath(&unk_1000CF4E8);
        ObservationRegistrar.didSet<A, B>(_:keyPath:)(v38, v25, v15);
        swift_release(v25);
        v26 = *(_QWORD *)(v2 + 16);
        v27 = swift_getKeyPath(&unk_1000CF510);
        __chkstk_darwin(v27, v28);
        v36[2] = v26;
        v36[3] = v21;
        v38[0] = v26;
        v29 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
        v30 = v21;
        ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v38, v27, sub_10002C0FC, v36, (char *)&type metadata for () + 8, v29);
        swift_release(v27);

        if (qword_100113F10 != -1)
          swift_once(&qword_100113F10, sub_1000A8D50);
        v31 = (void *)qword_10011FED8;
        CalculateUnit.id.getter();
        v33 = v32;
        v34 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v33);
        v35 = String._bridgeToObjectiveC()();
        objc_msgSend(v31, "setObject:forKey:", v34, v35);

      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t sub_10004835C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 16);
  }
  else
  {
    v3 = v0;
    v4 = type metadata accessor for CalculatorUnitConversionViewModel(0);
    v2 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    sub_1000489A0();
    v5 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = v2;
    swift_retain(v2);
    swift_release(v5);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_1000483CC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_release(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC10Calculator40CalculatorUnitConversionViewModelWrapper___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100048424()
{
  return type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
}

uint64_t type metadata accessor for CalculatorUnitConversionViewModelWrapper(uint64_t a1)
{
  return sub_1000164F0(a1, qword_100115810, (uint64_t)&nominal type descriptor for CalculatorUnitConversionViewModelWrapper);
}

uint64_t sub_100048440(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_1000484B8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = a2;
  v3 = a2;

}

double sub_1000484E8()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1000CF560);
  v4[0] = v0;
  v2 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 40, v4, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40)).n128_u64[0];
  return result;
}

double sub_100048584@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CF560);
  v8[0] = v3;
  v5 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 40, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 40);
  *a2 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

uint64_t sub_100048628(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CF560);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000491F0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1000486E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1 + 40, v6, 1, 0);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

double sub_100048744()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  double result;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1000CF4E8);
  v4[0] = v0;
  v2 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 48, v4, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48)).n128_u64[0];
  return result;
}

double sub_1000487E0@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CF4E8);
  v8[0] = v3;
  v5 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 48, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 48);
  *a2 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

uint64_t sub_100048884(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CF4E8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10004915C, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10004893C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[24];

  swift_beginAccess(a1 + 48, v6, 1, 0);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2;
  swift_bridgeObjectRetain(a2);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1000489A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];

  v1 = v0;
  if (qword_100113E60 != -1)
    swift_once(&qword_100113E60, sub_10007DD3C);
  v2 = qword_10011FE08;
  *(_QWORD *)(v0 + 16) = qword_10011FE08;
  v3 = qword_100113988;
  swift_retain(v2);
  if (v3 != -1)
    swift_once(&qword_100113988, sub_100017604);
  v4 = qword_10011F818;
  *(_QWORD *)(v1 + 24) = qword_10011F818;
  swift_retain(v4);
  *(_QWORD *)(v1 + 40) = sub_10001C26C((uint64_t)_swiftEmptyArrayStorage);
  v5 = sub_10001C26C((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + 48) = v5;
  ObservationRegistrar.init()(v5);
  *(_QWORD *)(v1 + 32) = sub_10007D408();
  KeyPath = swift_getKeyPath(&unk_1000CF4C0);
  v32[0] = v1;
  v7 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v32, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(id *)(v1 + 32);
  v29 = CalculateUnitCategory.id.getter();
  v10 = v9;

  v11 = sub_10007D774();
  v12 = swift_getKeyPath(&unk_1000CF560);
  v32[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v32, v12, v7);
  swift_release(v12);
  v32[0] = v1;
  v13 = swift_getKeyPath(&unk_1000CF560);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v32, v13, v7);
  swift_release(v13);
  swift_beginAccess(v1 + 40, v32, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + 40));
  v30 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0x8000000000000000;
  sub_10001E238((uint64_t)v11, v29, v10, isUniquelyReferenced_nonNull_native);
  v15 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = v30;
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v15);
  swift_endAccess(v32);
  v32[0] = v1;
  v16 = swift_getKeyPath(&unk_1000CF560);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v32, v16, v7);
  swift_release(v16);
  v17 = swift_getKeyPath(&unk_1000CF4C0);
  v32[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v32, v17, v7);
  swift_release(v17);
  v18 = *(id *)(v1 + 32);
  v19 = CalculateUnitCategory.id.getter();
  v21 = v20;

  v22 = sub_10007D9A4();
  v23 = swift_getKeyPath(&unk_1000CF4E8);
  v32[0] = v1;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v32, v23, v7);
  swift_release(v23);
  v32[0] = v1;
  v24 = swift_getKeyPath(&unk_1000CF4E8);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v32, v24, v7);
  swift_release(v24);
  swift_beginAccess(v1 + 48, v32, 33, 0);
  v25 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + 48));
  v31 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0x8000000000000000;
  sub_10001E238((uint64_t)v22, v19, v21, v25);
  v26 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v31;
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v26);
  swift_endAccess(v32);
  v32[0] = v1;
  v27 = swift_getKeyPath(&unk_1000CF4E8);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(v32, v27, v7);
  swift_release(v27);
  return v1;
}

void sub_100048D4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  NSString v27;
  _BYTE v28[16];
  uint64_t v29;
  id v30;
  uint64_t v31;

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_1000CF4C0);
  v31 = v1;
  v5 = sub_100005178(&qword_100114A80, type metadata accessor for CalculatorUnitConversionViewModel, (uint64_t)&unk_1000CF4A0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v31, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(id *)(v1 + 32);
  v7 = CalculateUnitCategory.id.getter();
  v9 = v8;

  v10 = CalculateUnitCategory.id.getter();
  if (v7 == v10 && v9 == v11)
  {
    swift_bridgeObjectRelease_n(v9, 2);
  }
  else
  {
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = swift_getKeyPath(&unk_1000CF4C0);
      __chkstk_darwin(v15, v16);
      v29 = v2;
      v30 = a1;
      v31 = v2;
      v17 = a1;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v15, sub_100049174, v28, (char *)&type metadata for () + 8, v5);
      swift_release(v15);

      v18 = *(_QWORD *)(v2 + 16);
      v19 = swift_getKeyPath(&unk_1000CF538);
      __chkstk_darwin(v19, v20);
      v29 = v18;
      v30 = v17;
      v31 = v18;
      v21 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
      v22 = v17;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v31, v19, sub_1000491B0, v28, (char *)&type metadata for () + 8, v21);
      swift_release(v19);

      if (qword_100113F10 != -1)
        swift_once(&qword_100113F10, sub_1000A8D50);
      v23 = (void *)qword_10011FED8;
      CalculateUnitCategory.id.getter();
      v25 = v24;
      v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v25);
      v27 = String._bridgeToObjectiveC()();
      objc_msgSend(v23, "setObject:forKey:", v26, v27);

    }
  }
}

uint64_t sub_100049014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  v1 = v0 + OBJC_IVAR____TtC10Calculator33CalculatorUnitConversionViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10004908C()
{
  return type metadata accessor for CalculatorUnitConversionViewModel(0);
}

uint64_t type metadata accessor for CalculatorUnitConversionViewModel(uint64_t a1)
{
  return sub_1000164F0(a1, qword_1001158D0, (uint64_t)&nominal type descriptor for CalculatorUnitConversionViewModel);
}

uint64_t sub_1000490A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10004915C()
{
  uint64_t v0;

  return sub_10004893C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100049174()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v2;
  v4 = v2;

}

void sub_1000491B0()
{
  uint64_t v0;

  sub_10007E4A4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_1000491D8()
{
  uint64_t v0;

  sub_10007E658(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000491F0()
{
  uint64_t v0;

  return sub_1000486E0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *initializeBufferWithCopyOfBuffer for CalculatorUnitCategory(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = v3;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t destroy for CalculatorUnitCategory(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for CalculatorUnitCategory(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t assignWithTake for CalculatorUnitCategory(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorUnitCategory(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorUnitCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorUnitCategory()
{
  return &type metadata for CalculatorUnitCategory;
}

uint64_t sub_100049394@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = CalculateUnitCategory.id.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1000493BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  char v7;

  v0 = CalculateUnitCategory.id.getter();
  v2 = v1;
  v3 = CalculateUnitCategory.id.getter();
  if (v0 == v3 && v2 == v4)
  {
    v7 = 1;
    v6 = v2;
  }
  else
  {
    v6 = v4;
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v0, v2, v3, v4, 0);
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void *sub_100049444()
{
  return &protocol witness table for String;
}

ValueMetadata *type metadata accessor for ProgrammerEncodingType()
{
  return &type metadata for ProgrammerEncodingType;
}

uint64_t _s10Calculator19CalculatorInputBaseOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s10Calculator19CalculatorInputBaseOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100049548 + 4 * byte_1000CF675[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10004957C + 4 * byte_1000CF670[v4]))();
}

uint64_t sub_10004957C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004958CLL);
  return result;
}

uint64_t sub_100049598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000495A0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000495A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000495AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CalculatorInputBase()
{
  return &type metadata for CalculatorInputBase;
}

uint64_t getEnumTagSinglePayload for CalculatorAppMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorAppMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000496A4 + 4 * byte_1000CF67F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000496D8 + 4 * byte_1000CF67A[v4]))();
}

uint64_t sub_1000496D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000496E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000496E8);
  return result;
}

uint64_t sub_1000496F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000496FCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100049700(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100049708(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100049714(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for CalculatorAppMode()
{
  return &type metadata for CalculatorAppMode;
}

uint64_t sub_10004972C()
{
  return sub_1000175A8(&qword_100115980, &qword_100115988);
}

void sub_100049750(char *a1)
{
  sub_10001F274(*a1);
}

void sub_10004975C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_1000497A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6669746E65696373, 0xEA00000000006369);
  swift_bridgeObjectRelease(0xEA00000000006369);
  return Hasher._finalize()();
}

void sub_100049824()
{
  __asm { BR              X10 }
}

uint64_t sub_10004985C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6669746E65696373, 0xEA00000000006369);
  return swift_bridgeObjectRelease(0xEA00000000006369);
}

void sub_1000498C8()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10004990C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6669746E65696373, 0xEA00000000006369);
  swift_bridgeObjectRelease(0xEA00000000006369);
  return Hasher._finalize()();
}

unint64_t sub_10004998C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10004A0CC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000499B8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1000499E4 + 4 * byte_1000CF690[*v0]))();
}

void sub_1000499E4(_QWORD *a1@<X8>)
{
  *a1 = 0x6669746E65696373;
  a1[1] = 0xEA00000000006369;
}

void sub_100049A04(_QWORD *a1@<X8>)
{
  *a1 = 0x657061506874616DLL;
  a1[1] = 0xE900000000000072;
}

void sub_100049A24(_QWORD *a1@<X8>)
{
  *a1 = 0x6D6D6172676F7270;
  a1[1] = 0xEA00000000007265;
}

uint64_t sub_100049A48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004A164();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100049AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10004A164();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100049AF0(_QWORD *a1@<X8>)
{
  *a1 = &off_100107B18;
}

unint64_t sub_100049B04()
{
  unint64_t result;

  result = qword_100115990;
  if (!qword_100115990)
  {
    result = swift_getWitnessTable(&unk_1000CF7F4, &type metadata for CalculatorAppMode);
    atomic_store(result, (unint64_t *)&qword_100115990);
  }
  return result;
}

unint64_t sub_100049B4C()
{
  unint64_t result;

  result = qword_100115998;
  if (!qword_100115998)
  {
    result = swift_getWitnessTable(&unk_1000CF8C4, &type metadata for CalculatorInputBase);
    atomic_store(result, (unint64_t *)&qword_100115998);
  }
  return result;
}

uint64_t sub_100049B90(char *a1, unsigned __int8 *a2)
{
  return sub_10001F1A4(*a1, *a2);
}

Swift::Int sub_100049B9C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = 12337;
  if (v1 != 1)
    v2 = 13873;
  if (v1)
    v3 = v2;
  else
    v3 = 56;
  if (v1)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE100000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100049C18(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 12337;
  if (*v1 != 1)
    v2 = 13873;
  if (*v1)
    v3 = v2;
  else
    v3 = 56;
  if (*v1)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE100000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100049C70()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = 12337;
  if (v1 != 1)
    v2 = 13873;
  if (v1)
    v3 = v2;
  else
    v3 = 56;
  if (v1)
    v4 = 0xE200000000000000;
  else
    v4 = 0xE100000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_100049CE8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100107B40;
  result = sub_10004A120(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100049D1C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE100000000000000;
  v4 = 12337;
  if (v2 != 1)
    v4 = 13873;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 56;
  if (!v5)
    v3 = 0xE200000000000000;
  *a1 = v6;
  a1[1] = v3;
}

void sub_100049D58(_QWORD *a1@<X8>)
{
  *a1 = &off_100107BA8;
}

void sub_100049D68(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_100049D74()
{
  return sub_1000175A8(&qword_1001159A0, &qword_1001159A8);
}

unint64_t sub_100049D9C()
{
  unint64_t result;

  result = qword_1001159B0;
  if (!qword_1001159B0)
  {
    result = swift_getWitnessTable(&unk_1000CF904, &type metadata for CalculatorInputBase);
    atomic_store(result, (unint64_t *)&qword_1001159B0);
  }
  return result;
}

unint64_t sub_100049DE4()
{
  unint64_t result;

  result = qword_1001159B8;
  if (!qword_1001159B8)
  {
    result = swift_getWitnessTable(&unk_1000CF9D4, &type metadata for ProgrammerEncodingType);
    atomic_store(result, (unint64_t *)&qword_1001159B8);
  }
  return result;
}

uint64_t sub_100049E28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10001F0A4(*a1, *a2);
}

Swift::Int sub_100049E34()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE500000000000000;
  v3 = 0x4949435341;
  if (v1 != 1)
  {
    v3 = 0x65646F63696E55;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 1701736302;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100049EC8(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE500000000000000;
  v3 = 0x4949435341;
  if (*v1 != 1)
  {
    v3 = 0x65646F63696E55;
    v2 = 0xE700000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 1701736302;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100049F38()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE500000000000000;
  v3 = 0x4949435341;
  if (v1 != 1)
  {
    v3 = 0x65646F63696E55;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 1701736302;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_100049FC8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100107A58;
  result = sub_10004A120(*a1, v3);
  *a2 = result;
  return result;
}

void sub_100049FFC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE500000000000000;
  v5 = 0x4949435341;
  if (v2 != 1)
  {
    v5 = 0x65646F63696E55;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701736302;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_10004A050(_QWORD *a1@<X8>)
{
  *a1 = &off_100107BD0;
}

uint64_t sub_10004A060()
{
  return sub_1000175A8(&qword_1001159C0, &qword_1001159C8);
}

unint64_t sub_10004A088()
{
  unint64_t result;

  result = qword_1001159D0;
  if (!qword_1001159D0)
  {
    result = swift_getWitnessTable(&unk_1000CFA14, &type metadata for ProgrammerEncodingType);
    atomic_store(result, (unint64_t *)&qword_1001159D0);
  }
  return result;
}

unint64_t sub_10004A0CC(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1001079D8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_10004A114(Swift::String a1)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &off_100107A58;
  return sub_10004A120(a1, v1);
}

unint64_t sub_10004A120(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

unint64_t sub_10004A164()
{
  unint64_t result;

  result = qword_1001159D8;
  if (!qword_1001159D8)
  {
    result = swift_getWitnessTable(&unk_1000CF77C, &type metadata for CalculatorAppMode);
    atomic_store(result, (unint64_t *)&qword_1001159D8);
  }
  return result;
}

unint64_t sub_10004A1B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001159E0;
  if (!qword_1001159E0)
  {
    v1 = type metadata accessor for CalculatorApp(255);
    result = swift_getWitnessTable(&unk_1000D4BC0, v1);
    atomic_store(result, (unint64_t *)&qword_1001159E0);
  }
  return result;
}

uint64_t sub_10004A1FC(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    v10 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000003FLL, 0x80000001000D6880);
  }
  else
  {
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(68, 1);
    v8._countAndFlagsBits = 0x28206573656854;
    v8._object = (void *)0xE700000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v8);
    v13 = a1;
    LocalizedStringKey.StringInterpolation.appendInterpolation<A>(_:specifier:)(&v13, 1684827173, 0xE400000000000000, &type metadata for Int, &protocol witness table for Int);
    v9._object = (void *)0x80000001000D6900;
    v9._countAndFlagsBits = 0xD00000000000003DLL;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v9);
    v10 = LocalizedStringKey.init(stringInterpolation:)(v7);
  }
  return Text.init(_:tableName:bundle:comment:)(v10);
}

uint64_t getEnumTagSinglePayload for CalculatorHistoryRecordDeletionMode(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CalculatorHistoryRecordDeletionMode(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_10004A3A4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10004A3C0(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorHistoryRecordDeletionMode()
{
  return &type metadata for CalculatorHistoryRecordDeletionMode;
}

uint64_t getEnumTagSinglePayload for CalculatorAlertMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorAlertMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10004A4CC + 4 * byte_1000CFA85[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10004A500 + 4 * asc_1000CFA80[v4]))();
}

uint64_t sub_10004A500(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A508(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004A510);
  return result;
}

uint64_t sub_10004A51C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004A524);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10004A528(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004A530(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CalculatorAlertMode()
{
  return &type metadata for CalculatorAlertMode;
}

unint64_t sub_10004A550()
{
  unint64_t result;

  result = qword_1001159E8;
  if (!qword_1001159E8)
  {
    result = swift_getWitnessTable(&unk_1000CFAF4, &type metadata for CalculatorAlertMode);
    atomic_store(result, (unint64_t *)&qword_1001159E8);
  }
  return result;
}

BOOL sub_10004A594(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_10004A5A8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10004A5EC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10004A614()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double sub_10004A654()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v7 = v0;
  KeyPath = swift_getKeyPath(&unk_1000CFED0);
  v2 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1000CFED0);
  v4 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v5 = sub_100005178(&qword_100114310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(v3, v4, v5);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

uint64_t sub_10004A74C()
{
  return sub_10004A770((uint64_t)&unk_1000CFD68);
}

void sub_10004A758(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10004AB9C(a1, (uint64_t)&unk_1000CFD68, a2);
}

uint64_t sub_10004A764()
{
  return sub_10004A770((uint64_t)&unk_1000CFE30);
}

uint64_t sub_10004A770(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v8 = v1;
  KeyPath = swift_getKeyPath(a1);
  v4 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(a1);
  v6 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v5, v6, &protocol witness table for String);
  swift_release(v5);
  return v8;
}

uint64_t sub_10004A844()
{
  return sub_10004A770((uint64_t)&unk_1000CFE58);
}

uint64_t sub_10004A850()
{
  return sub_10004A770((uint64_t)&unk_1000CFD90);
}

uint64_t sub_10004A85C()
{
  return sub_10004A874((uint64_t)&unk_1000CFDB8);
}

uint64_t sub_10004A868()
{
  return sub_10004A874((uint64_t)&unk_1000CFDE0);
}

uint64_t sub_10004A874(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v8;
  uint64_t v9;

  v9 = v1;
  KeyPath = swift_getKeyPath(a1);
  v4 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(a1);
  v6 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v5, v6, &protocol witness table for Bool);
  swift_release(v5);
  return v8;
}

uint64_t sub_10004A948()
{
  return sub_10004A874((uint64_t)&unk_1000CFE08);
}

uint64_t sub_10004A954()
{
  return sub_10004A96C((uint64_t)&unk_1000CFE80);
}

uint64_t sub_10004A960()
{
  return sub_10004A96C((uint64_t)&unk_1000CFEA8);
}

uint64_t sub_10004A96C(uint64_t a1)
{
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = v1;
  KeyPath = swift_getKeyPath(a1);
  v4 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(a1);
  v6 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v7 = sub_10004E5D0((unint64_t *)&qword_100114300, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v5, v6, v7);
  swift_release(v5);
  return v9;
}

uint64_t sub_10004AA5C()
{
  uint64_t v0;

  v0 = type metadata accessor for Schema.Version(0);
  sub_10001C038(v0, qword_10011FC28);
  sub_100014124(v0, (uint64_t)qword_10011FC28);
  return Schema.Version.init(_:_:_:)(1, 0, 0);
}

uint64_t sub_10004AAB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100005360(&qword_100114388);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_1000CD7E0;
  v2 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v3 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  *(_QWORD *)(v1 + 32) = v2;
  *(_QWORD *)(v1 + 40) = v3;
  return v1;
}

uint64_t sub_10004AB20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100113C90 != -1)
    swift_once(&qword_100113C90, sub_10004AA5C);
  v2 = type metadata accessor for Schema.Version(0);
  v3 = sub_100014124(v2, (uint64_t)qword_10011FC28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void sub_10004AB90(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10004AB9C(a1, (uint64_t)&unk_1000CFD90, a2);
}

void sub_10004AB9C(_QWORD *a1@<X0>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v10[0] = *a1;
  KeyPath = swift_getKeyPath(a2);
  v6 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v10, KeyPath, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(a2);
  v8 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v7, v8, &protocol witness table for String);
  swift_release(v7);
  v9 = v10[1];
  *a3 = v10[0];
  a3[1] = v9;
}

uint64_t sub_10004AC7C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004AEE8(a1, a2, a3, a4, (uint64_t)&unk_1000CFD90, (uint64_t)sub_10004E490);
}

void sub_10004AC90(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10004ACA8(a1, (uint64_t)&unk_1000CFDB8, a2);
}

void sub_10004AC9C(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10004ACA8(a1, (uint64_t)&unk_1000CFDE0, a2);
}

void sub_10004ACA8(uint64_t *a1@<X0>, uint64_t a2@<X3>, _BYTE *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v6 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(a2);
  v8 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v7, v8, &protocol witness table for Bool);
  swift_release(v7);
  *a3 = v9;
}

double sub_10004AD88(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  _QWORD v6[3];
  char v7;
  uint64_t v8;

  v2 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000CFDE0);
  v6[2] = v8;
  v7 = v2;
  v4 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_10004E474, v6, (char *)&type metadata for () + 8, v4);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10004AE30(uint64_t a1, char a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  double result;
  char v6;

  KeyPath = swift_getKeyPath(&unk_1000CFDE0);
  v6 = a2;
  v4 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Bool);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_10004AEBC(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10004ACA8(a1, (uint64_t)&unk_1000CFE08, a2);
}

void sub_10004AEC8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10004AB9C(a1, (uint64_t)&unk_1000CFE30, a2);
}

uint64_t sub_10004AED4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004AEE8(a1, a2, a3, a4, (uint64_t)&unk_1000CFE30, (uint64_t)sub_10004E450);
}

uint64_t sub_10004AEE8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  _QWORD v12[7];
  uint64_t v13;

  v7 = *a1;
  v8 = a1[1];
  v13 = *a2;
  KeyPath = swift_getKeyPath(a5);
  v12[2] = v13;
  v12[3] = v7;
  v12[4] = v8;
  v10 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  swift_bridgeObjectRetain(v8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v13, KeyPath, a6, v12, (char *)&type metadata for () + 8, v10);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v8);
}

double sub_10004AFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v7;
  double result;
  _QWORD v9[2];

  KeyPath = swift_getKeyPath(a4);
  v9[0] = a2;
  v9[1] = a3;
  v7 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v9, v7, &protocol witness table for String);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_10004B03C(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10004AB9C(a1, (uint64_t)&unk_1000CFE58, a2);
}

uint64_t sub_10004B048(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004AEE8(a1, a2, a3, a4, (uint64_t)&unk_1000CFE58, (uint64_t)sub_10004E42C);
}

double sub_10004B05C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10004B074(a1, (uint64_t)&unk_1000CFE80, a2);
}

double sub_10004B068@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10004B074(a1, (uint64_t)&unk_1000CFEA8, a2);
}

double sub_10004B074@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X3>, _OWORD *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;

  *(_QWORD *)&v11 = *a1;
  KeyPath = swift_getKeyPath(a2);
  v6 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(a2);
  v8 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v9 = sub_10004E5D0((unint64_t *)&qword_100114300, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(v7, v8, v9);
  swift_release(v7);
  result = *(double *)&v11;
  *a3 = v11;
  return result;
}

double sub_10004B170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  double result;
  _QWORD v10[2];

  KeyPath = swift_getKeyPath(a4);
  v10[0] = a2;
  v10[1] = a3;
  v7 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v8 = sub_10004E5D0(&qword_100115B40, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v10, v7, v8);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10004B220(uint64_t *a1)
{
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  uint64_t v7;

  v7 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000CFED0);
  v2 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  v3 = swift_getKeyPath(&unk_1000CFED0);
  v4 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v5 = sub_100005178(&qword_100114310, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(v3, v4, v5);
  *(_QWORD *)&result = swift_release(v3).n128_u64[0];
  return result;
}

double sub_10004B318(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  double result;

  KeyPath = swift_getKeyPath(&unk_1000CFED0);
  v4 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v5 = sub_100005178(&qword_100115B38, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, a2, v4, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

_QWORD *sub_10004B3BC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  void (*v75)(char *, uint64_t, __n128);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  int v85;
  int v86;
  char *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101[16];
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  char v105[16];
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;

  v17 = v16;
  v90 = a8;
  v88 = a7;
  v86 = a6;
  v85 = a5;
  v84 = a4;
  v83 = a3;
  v82 = a1;
  v99 = a15;
  v100 = a16;
  v98 = a14;
  v97 = a13;
  v96 = a12;
  v92 = a11;
  v91 = a10;
  v89 = a9;
  v19 = *v16;
  v95 = type metadata accessor for Date(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95, v20);
  v93 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[6] = sub_100005360(&qword_100115B30);
  v22 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v111[0] = v19;
  v111[1] = v19;
  v111[2] = v22;
  v112 = v22;
  v17[7] = swift_getOpaqueTypeConformance2(v111, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10004E510(v17 + 3);
  static PersistentModel.createBackingData<A>()(v19, v19, v22, v22);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v23 = v112;
  v24 = v113;
  sub_10004E54C(v111, v112);
  KeyPath = swift_getKeyPath(&unk_1000CFD90);
  v109 = 0x6369736162;
  v110 = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v109, &type metadata for String, &protocol witness table for String, v23, v24);
  swift_release(KeyPath);
  sub_100004F28(v111);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v26 = v112;
  v27 = v113;
  sub_10004E54C(v111, v112);
  v28 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v109) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v28, &v109, &type metadata for Bool, &protocol witness table for Bool, v26, v27);
  swift_release(v28);
  sub_100004F28(v111);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v29 = v112;
  v30 = v113;
  sub_10004E54C(v111, v112);
  v31 = swift_getKeyPath(&unk_1000CFDE0);
  LOBYTE(v109) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v31, &v109, &type metadata for Bool, &protocol witness table for Bool, v29, v30);
  swift_release(v31);
  sub_100004F28(v111);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v32 = v112;
  v33 = v113;
  sub_10004E54C(v111, v112);
  v34 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v109) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v34, &v109, &type metadata for Bool, &protocol witness table for Bool, v32, v33);
  swift_release(v34);
  v35 = sub_100004F28(v111);
  *((_WORD *)v17 + 8) = 257;
  v87 = (char *)v17 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  ObservationRegistrar.init()(v35);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v36 = v112;
  v37 = v113;
  sub_10004E54C(v111, v112);
  v38 = swift_getKeyPath(&unk_1000CFD68);
  v109 = v82;
  v110 = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v38, &v109, &type metadata for String, &protocol witness table for String, v36, v37);
  swift_bridgeObjectRelease(a2);
  swift_release(v38);
  sub_100004F28(v111);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v39 = v112;
  v40 = v113;
  sub_10004E54C(v111, v112);
  v41 = swift_getKeyPath(&unk_1000CFD90);
  v42 = v84;
  v109 = v83;
  v110 = v84;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v41, &v109, &type metadata for String, &protocol witness table for String, v39, v40);
  swift_bridgeObjectRelease(v42);
  swift_release(v41);
  sub_100004F28(v111);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v43 = v112;
  v44 = v113;
  sub_10004E54C(v111, v112);
  v45 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v109) = v85;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v45, &v109, &type metadata for Bool, &protocol witness table for Bool, v43, v44);
  swift_release(v45);
  sub_100004F28(v111);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v46 = v112;
  v47 = v113;
  sub_10004E54C(v111, v112);
  v48 = swift_getKeyPath(&unk_1000CFDE0);
  LOBYTE(v109) = v86;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v48, &v109, &type metadata for Bool, &protocol witness table for Bool, v46, v47);
  swift_release(v48);
  sub_100004F28(v111);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v49 = v112;
  v50 = v113;
  sub_10004E54C(v111, v112);
  v51 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v109) = v88;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v51, &v109, &type metadata for Bool, &protocol witness table for Bool, v49, v50);
  swift_release(v51);
  sub_100004F28(v111);
  v52 = v89;
  v53 = sub_100054F4C(v90, v89);
  v55 = v54;
  swift_bridgeObjectRelease(v52);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v56 = v112;
  v57 = v113;
  sub_10004E54C(v111, v112);
  v58 = swift_getKeyPath(&unk_1000CFE30);
  v109 = v53;
  v110 = v55;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v58, &v109, &type metadata for String, &protocol witness table for String, v56, v57);
  swift_bridgeObjectRelease(v55);
  swift_release(v58);
  sub_100004F28(v111);
  v59 = v92;
  v60 = sub_100054F4C(v91, v92);
  v62 = v61;
  swift_bridgeObjectRelease(v59);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v63 = v112;
  v64 = v113;
  sub_10004E54C(v111, v112);
  v65 = swift_getKeyPath(&unk_1000CFE58);
  v109 = v60;
  v110 = v62;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v65, &v109, &type metadata for String, &protocol witness table for String, v63, v64);
  swift_bridgeObjectRelease(v62);
  swift_release(v65);
  sub_100004F28(v111);
  v66 = v94;
  v67 = v93;
  v68 = v96;
  v69 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v93, v96, v95);
  sub_10004E4B4((uint64_t)(v17 + 3), (uint64_t)v111);
  v70 = v112;
  v71 = v113;
  sub_10004E54C(v111, v112);
  v72 = swift_getKeyPath(&unk_1000CFED0);
  v73 = sub_100005178(&qword_100115B38, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v72, v67, v69, v73, v70, v71);
  v74 = swift_release(v72);
  v75 = *(void (**)(char *, uint64_t, __n128))(v66 + 8);
  v75(v67, v69, v74);
  sub_100004F28(v111);
  v111[0] = v17;
  v76 = swift_getKeyPath(&unk_1000CFE80);
  v106 = v17;
  v107 = v97;
  v77 = v98;
  v108 = v98;
  v78 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v111, v76, sub_10004E630, v105, (char *)&type metadata for () + 8, v78);
  swift_release(v76);
  swift_bridgeObjectRelease(v77);
  v111[0] = v17;
  v79 = swift_getKeyPath(&unk_1000CFEA8);
  v80 = v100;
  v102 = v17;
  v103 = v99;
  v104 = v100;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v111, v79, sub_10004E644, v101, (char *)&type metadata for () + 8, v78);
  swift_release(v79);
  swift_bridgeObjectRelease(v80);
  ((void (*)(uint64_t, uint64_t))v75)(v68, v69);
  return v17;
}

_QWORD *sub_10004BC0C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  void (*v68)(char *, uint64_t, __n128);
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD v85[3];
  uint64_t v86;
  uint64_t v87;

  v12 = v11;
  v76 = a7;
  v77 = a8;
  v73 = a5;
  v74 = a6;
  v71 = a3;
  v72 = a4;
  v82 = a11;
  v78 = a10;
  v79 = a9;
  v15 = *v11;
  v75 = type metadata accessor for Date(0);
  v81 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75, v16);
  v80 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12[6] = sub_100005360(&qword_100115B30);
  v18 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v85[0] = v15;
  v85[1] = v15;
  v85[2] = v18;
  v86 = v18;
  v12[7] = swift_getOpaqueTypeConformance2(v85, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10004E510(v12 + 3);
  static PersistentModel.createBackingData<A>()(v15, v15, v18, v18);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v19 = v86;
  v20 = v87;
  sub_10004E54C(v85, v86);
  KeyPath = swift_getKeyPath(&unk_1000CFD90);
  v83 = 0x6369736162;
  v84 = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v83, &type metadata for String, &protocol witness table for String, v19, v20);
  swift_release(KeyPath);
  sub_100004F28(v85);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v23 = v86;
  v22 = v87;
  sub_10004E54C(v85, v86);
  v24 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v83) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v24, &v83, &type metadata for Bool, &protocol witness table for Bool, v23, v22);
  swift_release(v24);
  sub_100004F28(v85);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v25 = v86;
  v26 = v87;
  sub_10004E54C(v85, v86);
  v27 = swift_getKeyPath(&unk_1000CFDE0);
  LOBYTE(v83) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v27, &v83, &type metadata for Bool, &protocol witness table for Bool, v25, v26);
  swift_release(v27);
  sub_100004F28(v85);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v28 = v86;
  v29 = v87;
  sub_10004E54C(v85, v86);
  v30 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v83) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v30, &v83, &type metadata for Bool, &protocol witness table for Bool, v28, v29);
  swift_release(v30);
  v31 = sub_100004F28(v85);
  *((_WORD *)v12 + 8) = 257;
  ObservationRegistrar.init()(v31);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v32 = v86;
  v33 = v87;
  sub_10004E54C(v85, v86);
  v34 = swift_getKeyPath(&unk_1000CFD68);
  v83 = a1;
  v84 = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v34, &v83, &type metadata for String, &protocol witness table for String, v32, v33);
  swift_bridgeObjectRelease(a2);
  swift_release(v34);
  sub_100004F28(v85);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v35 = v86;
  v36 = v87;
  sub_10004E54C(v85, v86);
  v37 = swift_getKeyPath(&unk_1000CFD90);
  v38 = v72;
  v83 = v71;
  v84 = v72;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v37, &v83, &type metadata for String, &protocol witness table for String, v35, v36);
  swift_bridgeObjectRelease(v38);
  swift_release(v37);
  sub_100004F28(v85);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v39 = v86;
  v40 = v87;
  sub_10004E54C(v85, v86);
  v41 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v83) = v73;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v41, &v83, &type metadata for Bool, &protocol witness table for Bool, v39, v40);
  swift_release(v41);
  sub_100004F28(v85);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v42 = v86;
  v43 = v87;
  sub_10004E54C(v85, v86);
  v44 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v83) = v74;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v44, &v83, &type metadata for Bool, &protocol witness table for Bool, v42, v43);
  swift_release(v44);
  sub_100004F28(v85);
  v45 = v77;
  v46 = sub_100054F4C(v76, v77);
  v48 = v47;
  swift_bridgeObjectRelease(v45);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v49 = v86;
  v50 = v87;
  sub_10004E54C(v85, v86);
  v51 = swift_getKeyPath(&unk_1000CFE30);
  v83 = v46;
  v84 = v48;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v51, &v83, &type metadata for String, &protocol witness table for String, v49, v50);
  swift_bridgeObjectRelease(v48);
  swift_release(v51);
  sub_100004F28(v85);
  v52 = v78;
  v53 = sub_100054F4C(v79, v78);
  v55 = v54;
  swift_bridgeObjectRelease(v52);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v56 = v86;
  v57 = v87;
  sub_10004E54C(v85, v86);
  v58 = swift_getKeyPath(&unk_1000CFE58);
  v83 = v53;
  v84 = v55;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v58, &v83, &type metadata for String, &protocol witness table for String, v56, v57);
  swift_bridgeObjectRelease(v55);
  swift_release(v58);
  sub_100004F28(v85);
  v60 = v80;
  v59 = v81;
  v61 = v82;
  v62 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v80, v82, v75);
  sub_10004E4B4((uint64_t)(v12 + 3), (uint64_t)v85);
  v63 = v86;
  v64 = v87;
  sub_10004E54C(v85, v86);
  v65 = swift_getKeyPath(&unk_1000CFED0);
  v66 = sub_100005178(&qword_100115B38, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v65, v60, v62, v66, v63, v64);
  v67 = swift_release(v65);
  v68 = *(void (**)(char *, uint64_t, __n128))(v59 + 8);
  v68(v60, v62, v67);
  sub_100004F28(v85);
  ((void (*)(uint64_t, uint64_t))v68)(v61, v62);
  return v12;
}

uint64_t sub_10004C250(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  char v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  _OWORD v103[2];
  _QWORD v104[3];
  uint64_t v105;
  uint64_t v106;

  v2 = v1;
  v4 = *v1;
  v95 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95, v6);
  v94 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (uint64_t)(v2 + 3);
  v2[6] = sub_100005360(&qword_100115B30);
  v9 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v104[0] = v4;
  v104[1] = v4;
  v104[2] = v9;
  v105 = v9;
  v2[7] = swift_getOpaqueTypeConformance2(v104, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10004E510(v2 + 3);
  static PersistentModel.createBackingData<A>()(v4, v4, v9, v9);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v104);
  v10 = v105;
  v11 = v106;
  sub_10004E54C(v104, v105);
  KeyPath = swift_getKeyPath(&unk_1000CFD90);
  *(_QWORD *)&v103[0] = 0x6369736162;
  *((_QWORD *)&v103[0] + 1) = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v103, &type metadata for String, &protocol witness table for String, v10, v11);
  swift_release(KeyPath);
  sub_100004F28(v104);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v104);
  v13 = v105;
  v14 = v106;
  sub_10004E54C(v104, v105);
  v15 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v103[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v15, v103, &type metadata for Bool, &protocol witness table for Bool, v13, v14);
  swift_release(v15);
  sub_100004F28(v104);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v104);
  v16 = v105;
  v17 = v106;
  sub_10004E54C(v104, v105);
  v18 = swift_getKeyPath(&unk_1000CFDE0);
  LOBYTE(v103[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v18, v103, &type metadata for Bool, &protocol witness table for Bool, v16, v17);
  swift_release(v18);
  sub_100004F28(v104);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v104);
  v19 = v105;
  v20 = v106;
  sub_10004E54C(v104, v105);
  v21 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v103[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v21, v103, &type metadata for Bool, &protocol witness table for Bool, v19, v20);
  swift_release(v21);
  v22 = sub_100004F28(v104);
  *((_WORD *)v2 + 8) = 257;
  result = ObservationRegistrar.init()(v22);
  if (!*(_QWORD *)(a1 + 16))
  {
    __break(1u);
    goto LABEL_41;
  }
  result = sub_10001CAA4(0);
  if ((v24 & 1) == 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v96 = v2;
  sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)&v101);
  sub_1000054E8(&v101, v103);
  swift_dynamicCast(&v99, v103, (char *)&type metadata for Any + 8, &type metadata for String, 7);
  v25 = v99;
  v26 = v100;
  sub_10004E4B4(v8, (uint64_t)v104);
  v27 = v105;
  v28 = v106;
  sub_10004E54C(v104, v105);
  v29 = swift_getKeyPath(&unk_1000CFD68);
  v97 = v25;
  v98 = v26;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v29, &v97, &type metadata for String, &protocol witness table for String, v27, v28);
  swift_bridgeObjectRelease(v26);
  swift_release(v29);
  result = sub_100004F28(v104);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  result = sub_10001CAA4(1u);
  if ((v30 & 1) == 0)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)&v101);
  sub_1000054E8(&v101, v103);
  swift_dynamicCast(&v99, v103, (char *)&type metadata for Any + 8, &type metadata for String, 7);
  v31 = v99;
  v32 = v100;
  sub_10004E4B4(v8, (uint64_t)v104);
  v33 = v105;
  v34 = v106;
  sub_10004E54C(v104, v105);
  v35 = swift_getKeyPath(&unk_1000CFD90);
  v97 = v31;
  v98 = v32;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v35, &v97, &type metadata for String, &protocol witness table for String, v33, v34);
  swift_bridgeObjectRelease(v32);
  swift_release(v35);
  result = sub_100004F28(v104);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  result = sub_10001CAA4(2u);
  if ((v36 & 1) == 0)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)&v101);
  sub_1000054E8(&v101, v103);
  swift_dynamicCast(&v99, v103, (char *)&type metadata for Any + 8, &type metadata for Bool, 7);
  v37 = v99;
  sub_10004E4B4(v8, (uint64_t)v104);
  v38 = v105;
  v39 = v106;
  sub_10004E54C(v104, v105);
  v40 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v97) = v37;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v40, &v97, &type metadata for Bool, &protocol witness table for Bool, v38, v39);
  swift_release(v40);
  result = sub_100004F28(v104);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  result = sub_10001CAA4(3u);
  if ((v41 & 1) == 0)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)&v101);
  sub_1000054E8(&v101, v103);
  swift_dynamicCast(&v99, v103, (char *)&type metadata for Any + 8, &type metadata for Bool, 7);
  v42 = v99;
  sub_10004E4B4(v8, (uint64_t)v104);
  v43 = v105;
  v44 = v106;
  sub_10004E54C(v104, v105);
  v45 = swift_getKeyPath(&unk_1000CFDE0);
  LOBYTE(v97) = v42;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v45, &v97, &type metadata for Bool, &protocol witness table for Bool, v43, v44);
  swift_release(v45);
  result = sub_100004F28(v104);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  result = sub_10001CAA4(4u);
  if ((v46 & 1) == 0)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)&v101);
  sub_1000054E8(&v101, v103);
  swift_dynamicCast(&v99, v103, (char *)&type metadata for Any + 8, &type metadata for Bool, 7);
  v47 = v99;
  sub_10004E4B4(v8, (uint64_t)v104);
  v48 = v105;
  v49 = v106;
  sub_10004E54C(v104, v105);
  v50 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v97) = v47;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v50, &v97, &type metadata for Bool, &protocol witness table for Bool, v48, v49);
  swift_release(v50);
  result = sub_100004F28(v104);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  result = sub_10001CAA4(5u);
  if ((v51 & 1) == 0)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }
  sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)&v101);
  sub_1000054E8(&v101, v103);
  swift_dynamicCast(&v99, v103, (char *)&type metadata for Any + 8, &type metadata for String, 7);
  v52 = v99;
  v53 = v100;
  sub_10004E4B4(v8, (uint64_t)v104);
  v54 = v105;
  v55 = v106;
  sub_10004E54C(v104, v105);
  v56 = swift_getKeyPath(&unk_1000CFE30);
  v97 = v52;
  v98 = v53;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v56, &v97, &type metadata for String, &protocol witness table for String, v54, v55);
  swift_bridgeObjectRelease(v53);
  swift_release(v56);
  result = sub_100004F28(v104);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  result = sub_10001CAA4(6u);
  if ((v57 & 1) == 0)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * result, (uint64_t)&v101);
  sub_1000054E8(&v101, v103);
  swift_dynamicCast(&v99, v103, (char *)&type metadata for Any + 8, &type metadata for String, 7);
  v58 = v99;
  v59 = v100;
  sub_10004E4B4(v8, (uint64_t)v104);
  v60 = v105;
  v61 = v106;
  sub_10004E54C(v104, v105);
  v62 = swift_getKeyPath(&unk_1000CFE58);
  v97 = v58;
  v98 = v59;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v62, &v97, &type metadata for String, &protocol witness table for String, v60, v61);
  swift_bridgeObjectRelease(v59);
  swift_release(v62);
  sub_100004F28(v104);
  v63 = *(_QWORD *)(a1 + 16);
  v93 = v5;
  if (v63)
  {
    v64 = sub_10001CAA4(7u);
    v65 = v96;
    if ((v66 & 1) != 0)
    {
      sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * v64, (uint64_t)v104);
      v67 = swift_dynamicCast(v103, v104, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if (v67)
        v68 = *(_QWORD *)&v103[0];
      else
        v68 = 0;
      if (v67)
        v69 = *((_QWORD *)&v103[0] + 1);
      else
        v69 = 0;
    }
    else
    {
      v68 = 0;
      v69 = 0;
    }
  }
  else
  {
    v68 = 0;
    v69 = 0;
    v65 = v96;
  }
  sub_10004E4B4(v8, (uint64_t)v104);
  v70 = v105;
  v71 = v106;
  sub_10004E54C(v104, v105);
  v72 = swift_getKeyPath(&unk_1000CFE80);
  *(_QWORD *)&v103[0] = v68;
  *((_QWORD *)&v103[0] + 1) = v69;
  v73 = sub_100005360(&qword_100114308);
  v74 = sub_10004E5D0(&qword_100115B40, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v72, v103, v73, v74, v70, v71);
  swift_release(v72);
  swift_bridgeObjectRelease(v69);
  sub_100004F28(v104);
  *((_BYTE *)v65 + 16) = 0;
  if (*(_QWORD *)(a1 + 16) && (v75 = sub_10001CAA4(8u), (v76 & 1) != 0))
  {
    sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * v75, (uint64_t)v104);
    v77 = swift_dynamicCast(v103, v104, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v77)
      v78 = *(_QWORD *)&v103[0];
    else
      v78 = 0;
    if (v77)
      v79 = *((_QWORD *)&v103[0] + 1);
    else
      v79 = 0;
  }
  else
  {
    v78 = 0;
    v79 = 0;
  }
  sub_10004E4B4(v8, (uint64_t)v104);
  v80 = v105;
  v81 = v106;
  sub_10004E54C(v104, v105);
  v82 = swift_getKeyPath(&unk_1000CFEA8);
  *(_QWORD *)&v103[0] = v78;
  *((_QWORD *)&v103[0] + 1) = v79;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v82, v103, v73, v74, v80, v81);
  swift_release(v82);
  swift_bridgeObjectRelease(v79);
  sub_100004F28(v104);
  v83 = v96;
  *((_BYTE *)v96 + 17) = 0;
  if (*(_QWORD *)(a1 + 16) && (v84 = sub_10001CAA4(9u), (v85 & 1) != 0))
  {
    sub_1000052E0(*(_QWORD *)(a1 + 56) + 32 * v84, (uint64_t)&v101);
  }
  else
  {
    v101 = 0u;
    v102 = 0u;
  }
  result = swift_bridgeObjectRelease(a1);
  if (*((_QWORD *)&v102 + 1))
  {
    sub_1000054E8(&v101, v103);
    v87 = v94;
    v86 = v95;
    swift_dynamicCast(v94, v103, (char *)&type metadata for Any + 8, v95, 7);
    sub_10004E4B4(v8, (uint64_t)v104);
    v88 = v105;
    v89 = v106;
    sub_10004E54C(v104, v105);
    v90 = swift_getKeyPath(&unk_1000CFED0);
    v91 = sub_100005178(&qword_100115B38, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of BackingData.setValue<A>(forKey:to:)(v90, v87, v86, v91, v88, v89);
    v92 = swift_release(v90);
    (*(void (**)(char *, uint64_t, __n128))(v93 + 8))(v87, v86, v92);
    sub_100004F28(v104);
    return (uint64_t)v83;
  }
LABEL_54:
  __break(1u);
  return result;
}

_QWORD *sub_10004CDAC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  __n128 v73;
  void (*v75)(char *, uint64_t, uint64_t);
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  char v81[16];
  _QWORD *v82;
  char *v83;
  char v84[16];
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  char v88[16];
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  _QWORD v94[3];
  uint64_t v95;
  uint64_t v96;

  v2 = v1;
  v4 = *v1;
  v80 = type metadata accessor for Date(0);
  v78 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80, v5);
  v79 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (uint64_t)(v2 + 3);
  v2[6] = sub_100005360(&qword_100115B30);
  v8 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v94[0] = v4;
  v94[1] = v4;
  v94[2] = v8;
  v95 = v8;
  v2[7] = swift_getOpaqueTypeConformance2(v94, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10004E510(v2 + 3);
  static PersistentModel.createBackingData<A>()(v4, v4, v8, v8);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v9 = v95;
  v10 = v96;
  sub_10004E54C(v94, v95);
  KeyPath = swift_getKeyPath(&unk_1000CFD90);
  v92 = 0x6369736162;
  v93 = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v92, &type metadata for String, &protocol witness table for String, v9, v10);
  swift_release(KeyPath);
  sub_100004F28(v94);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v12 = v95;
  v13 = v96;
  sub_10004E54C(v94, v95);
  v14 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v92) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v14, &v92, &type metadata for Bool, &protocol witness table for Bool, v12, v13);
  swift_release(v14);
  sub_100004F28(v94);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v15 = v95;
  v16 = v96;
  sub_10004E54C(v94, v95);
  v17 = swift_getKeyPath(&unk_1000CFDE0);
  LOBYTE(v92) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v17, &v92, &type metadata for Bool, &protocol witness table for Bool, v15, v16);
  swift_release(v17);
  sub_100004F28(v94);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v18 = v95;
  v19 = v96;
  sub_10004E54C(v94, v95);
  v20 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v92) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v20, &v92, &type metadata for Bool, &protocol witness table for Bool, v18, v19);
  swift_release(v20);
  v21 = sub_100004F28(v94);
  v76 = v2;
  *((_WORD *)v2 + 8) = 257;
  v77 = (char *)v2 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  ObservationRegistrar.init()(v21);
  v23 = *(_QWORD *)a1;
  v22 = *(_QWORD *)(a1 + 8);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v25 = v95;
  v24 = v96;
  sub_10004E54C(v94, v95);
  v26 = swift_getKeyPath(&unk_1000CFD68);
  v92 = v23;
  v93 = v22;
  swift_bridgeObjectRetain(v22);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v26, &v92, &type metadata for String, &protocol witness table for String, v25, v24);
  swift_bridgeObjectRelease(v22);
  swift_release(v26);
  sub_100004F28(v94);
  v28 = *(_QWORD *)(a1 + 16);
  v27 = *(_QWORD *)(a1 + 24);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v29 = v95;
  v30 = v96;
  sub_10004E54C(v94, v95);
  v31 = swift_getKeyPath(&unk_1000CFD90);
  v92 = v28;
  v93 = v27;
  swift_bridgeObjectRetain(v27);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v31, &v92, &type metadata for String, &protocol witness table for String, v29, v30);
  swift_bridgeObjectRelease(v27);
  swift_release(v31);
  sub_100004F28(v94);
  LOBYTE(v28) = *(_BYTE *)(a1 + 32);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v32 = v95;
  v33 = v96;
  sub_10004E54C(v94, v95);
  v34 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v92) = v28;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v34, &v92, &type metadata for Bool, &protocol witness table for Bool, v32, v33);
  swift_release(v34);
  sub_100004F28(v94);
  LOBYTE(v28) = *(_BYTE *)(a1 + 33);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v35 = v95;
  v36 = v96;
  sub_10004E54C(v94, v95);
  v37 = swift_getKeyPath(&unk_1000CFDE0);
  LOBYTE(v92) = v28;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v37, &v92, &type metadata for Bool, &protocol witness table for Bool, v35, v36);
  swift_release(v37);
  sub_100004F28(v94);
  LOBYTE(v28) = *(_BYTE *)(a1 + 34);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v38 = v95;
  v39 = v96;
  sub_10004E54C(v94, v95);
  v40 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v92) = v28;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v40, &v92, &type metadata for Bool, &protocol witness table for Bool, v38, v39);
  swift_release(v40);
  sub_100004F28(v94);
  v41 = sub_100054F4C(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v43 = v42;
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v44 = v95;
  v45 = v96;
  sub_10004E54C(v94, v95);
  v46 = swift_getKeyPath(&unk_1000CFE30);
  v92 = v41;
  v93 = v43;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v46, &v92, &type metadata for String, &protocol witness table for String, v44, v45);
  swift_bridgeObjectRelease(v43);
  swift_release(v46);
  sub_100004F28(v94);
  v47 = sub_100054F4C(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v49 = v48;
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)v94);
  v50 = v95;
  v51 = v96;
  sub_10004E54C(v94, v95);
  v52 = swift_getKeyPath(&unk_1000CFE58);
  v92 = v47;
  v93 = v49;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v52, &v92, &type metadata for String, &protocol witness table for String, v50, v51);
  swift_bridgeObjectRelease(v49);
  swift_release(v52);
  sub_100004F28(v94);
  v53 = a1 + *(int *)(type metadata accessor for GenericRecord(0) + 52);
  v54 = v78;
  v75 = *(void (**)(char *, uint64_t, uint64_t))(v78 + 16);
  v55 = v79;
  v56 = v80;
  v75(v79, v53, v80);
  sub_10004E4B4(v7, (uint64_t)v94);
  v57 = v95;
  v58 = v96;
  sub_10004E54C(v94, v95);
  v59 = swift_getKeyPath(&unk_1000CFED0);
  v60 = sub_100005178(&qword_100115B38, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v59, v55, v56, v60, v57, v58);
  v61 = swift_release(v59);
  v78 = *(_QWORD *)(v54 + 8);
  ((void (*)(char *, uint64_t, __n128))v78)(v55, v56, v61);
  sub_100004F28(v94);
  v62 = *(_QWORD *)(a1 + 72);
  v63 = *(_QWORD *)(a1 + 80);
  v64 = v76;
  v94[0] = v76;
  v65 = swift_getKeyPath(&unk_1000CFE80);
  v89 = v64;
  v90 = v62;
  v91 = v63;
  v66 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  swift_bridgeObjectRetain(v63);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v94, v65, sub_10004E570, v88, (char *)&type metadata for () + 8, v66);
  swift_release(v65);
  swift_bridgeObjectRelease(v63);
  v67 = *(_QWORD *)(a1 + 88);
  v68 = *(_QWORD *)(a1 + 96);
  v94[0] = v64;
  v69 = swift_getKeyPath(&unk_1000CFEA8);
  v85 = v64;
  v86 = v67;
  v87 = v68;
  swift_bridgeObjectRetain(v68);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v94, v69, sub_10004E594, v84, (char *)&type metadata for () + 8, v66);
  swift_release(v69);
  swift_bridgeObjectRelease(v68);
  v70 = v79;
  v71 = v80;
  v75(v79, v53, v80);
  v94[0] = v64;
  v72 = swift_getKeyPath(&unk_1000CFED0);
  v82 = v64;
  v83 = v70;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v94, v72, sub_10004E5B8, v81, (char *)&type metadata for () + 8, v66);
  v73 = swift_release(v72);
  ((void (*)(char *, uint64_t, __n128))v78)(v70, v71, v73);
  sub_10002C0B8(a1);
  return v64;
}

_QWORD *sub_10004D5E4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[3];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v4 = *v1;
  v2[6] = sub_100005360(&qword_100115B30);
  v5 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  *(_QWORD *)&v21 = v4;
  *((_QWORD *)&v21 + 1) = v4;
  v22 = v5;
  v23 = v5;
  v2[7] = swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>, 1);
  sub_10004E510(v2 + 3);
  static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)&v21);
  v6 = v23;
  v7 = v24;
  sub_10004E54C(&v21, v23);
  KeyPath = swift_getKeyPath(&unk_1000CFD90);
  v20[0] = 0x6369736162;
  v20[1] = 0xE500000000000000;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, v20, &type metadata for String, &protocol witness table for String, v6, v7);
  swift_release(KeyPath);
  sub_100004F28(&v21);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)&v21);
  v9 = v23;
  v10 = v24;
  sub_10004E54C(&v21, v23);
  v11 = swift_getKeyPath(&unk_1000CFDB8);
  LOBYTE(v20[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v11, v20, &type metadata for Bool, &protocol witness table for Bool, v9, v10);
  swift_release(v11);
  sub_100004F28(&v21);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)&v21);
  v12 = v23;
  v13 = v24;
  sub_10004E54C(&v21, v23);
  v14 = swift_getKeyPath(&unk_1000CFDE0);
  LOBYTE(v20[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v14, v20, &type metadata for Bool, &protocol witness table for Bool, v12, v13);
  swift_release(v14);
  sub_100004F28(&v21);
  sub_10004E4B4((uint64_t)(v2 + 3), (uint64_t)&v21);
  v15 = v23;
  v16 = v24;
  sub_10004E54C(&v21, v23);
  v17 = swift_getKeyPath(&unk_1000CFE08);
  LOBYTE(v20[0]) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v17, v20, &type metadata for Bool, &protocol witness table for Bool, v15, v16);
  swift_release(v17);
  v18 = sub_100004F28(&v21);
  *((_WORD *)v2 + 8) = 257;
  ObservationRegistrar.init()(v18);
  *((_WORD *)v2 + 8) = 0;
  sub_10004E4B4((uint64_t)a1, (uint64_t)&v21);
  swift_beginAccess(v2 + 3, v20, 33, 0);
  sub_100004F28(v2 + 3);
  sub_10004E4F8(&v21, (uint64_t)(v2 + 3));
  swift_endAccess(v20);
  sub_100004F28(a1);
  return v2;
}

uint64_t sub_10004D8A0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100004F28(v0 + 3);
  v1 = (char *)v0 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10004D8F8()
{
  return type metadata accessor for SchemaV1.HistoryRecord(0);
}

uint64_t type metadata accessor for SchemaV1.HistoryRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100115A20;
  if (!qword_100115A20)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SchemaV1.HistoryRecord);
  return result;
}

uint64_t sub_10004D93C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[8] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[9] = (char *)&value witness table for () + 64;
  v4[10] = "(";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[11] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SchemaV1.HistoryRecord._SwiftDataNoType()
{
  return &type metadata for SchemaV1.HistoryRecord._SwiftDataNoType;
}

ValueMetadata *type metadata accessor for SchemaV1()
{
  return &type metadata for SchemaV1;
}

void sub_10004DA00(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[0] = *v1;
  KeyPath = swift_getKeyPath(&unk_1000CFD68);
  v4 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v4);
  swift_release(KeyPath);
  v5 = swift_getKeyPath(&unk_1000CFD68);
  v6 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v5, v6, &protocol witness table for String);
  swift_release(v5);
  v7 = v8[1];
  *a1 = v8[0];
  a1[1] = v7;
}

uint64_t sub_10004DAE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_10004D5E4(a1);
  return v3;
}

uint64_t sub_10004DB20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + 24;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10004E4B4(v3, a1);
}

uint64_t sub_10004DB68(__int128 *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + 24);
  swift_beginAccess(v3, v5, 33, 0);
  sub_100004F28(v3);
  sub_10004E4F8(a1, (uint64_t)v3);
  return swift_endAccess(v5);
}

void (*sub_10004DBC0(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 24, v3 + 10, 0, 0);
  sub_10004E4B4(v1 + 24, (uint64_t)v3);
  return sub_10004DC28;
}

void sub_10004DC28(uint64_t *a1, char a2)
{
  __int128 *v2;
  __int128 *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = (__int128 *)*a1;
  v3 = (__int128 *)(*a1 + 40);
  if ((a2 & 1) != 0)
  {
    v4 = (_QWORD *)(*((_QWORD *)v2 + 16) + 24);
    sub_10004E4B4(*a1, (uint64_t)v3);
    swift_beginAccess(v4, (char *)v2 + 104, 33, 0);
    sub_100004F28(v4);
    sub_10004E4F8(v3, (uint64_t)v4);
    swift_endAccess((char *)v2 + 104);
    sub_100004F28(v2);
  }
  else
  {
    v5 = (_QWORD *)(*((_QWORD *)v2 + 16) + 24);
    swift_beginAccess(v5, v3, 33, 0);
    sub_100004F28(v5);
    sub_10004E4F8(v2, (uint64_t)v5);
    swift_endAccess(v3);
  }
  free(v2);
}

Swift::Int sub_10004DCE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD v6[10];

  v6[9] = *v2;
  Hasher.init(_seed:)(v6);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_10004DD48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

Swift::Int sub_10004DDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_10004DDFC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a1;
  v4 = *a2;
  v5 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_10004DE50()
{
  return sub_100005178(&qword_1001143E0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC64);
}

uint64_t sub_10004DE7C()
{
  return sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
}

uint64_t sub_10004DEA8()
{
  return sub_100005178(&qword_1001143E8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC8C);
}

uint64_t sub_10004DED4()
{
  return sub_100005178(&qword_100115B20, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFD2C);
}

void sub_10004DF00(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10004AB9C(a1, (uint64_t)&unk_1000CFD68, a2);
}

uint64_t sub_10004DF1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  v0 = sub_100005360(&qword_100115B28);
  v1 = *(_QWORD *)(type metadata accessor for Schema.PropertyMetadata(0) - 8);
  v2 = swift_allocObject(v0, ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80))+ 10 * *(_QWORD *)(v1 + 72), *(unsigned __int8 *)(v1 + 80) | 7);
  *(_OWORD *)(v2 + 16) = xmmword_1000CFB20;
  KeyPath = swift_getKeyPath(&unk_1000CFD68);
  v17 = 0u;
  v18 = 0u;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(25705, 0xE200000000000000, KeyPath, &v17, &v14);
  v4 = swift_getKeyPath(&unk_1000CFD90);
  *((_QWORD *)&v18 + 1) = &type metadata for String;
  *(_QWORD *)&v17 = 0x6369736162;
  *((_QWORD *)&v17 + 1) = 0xE500000000000000;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(1701080941, 0xE400000000000000, v4, &v17, &v14);
  v5 = swift_getKeyPath(&unk_1000CFDB8);
  *((_QWORD *)&v18 + 1) = &type metadata for Bool;
  LOBYTE(v17) = 0;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x4E50527369, 0xE500000000000000, v5, &v17, &v14);
  v6 = swift_getKeyPath(&unk_1000CFDE0);
  *((_QWORD *)&v18 + 1) = &type metadata for Bool;
  LOBYTE(v17) = 0;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6E65727275437369, 0xEA00000000007963, v6, &v17, &v14);
  v7 = swift_getKeyPath(&unk_1000CFE08);
  *((_QWORD *)&v18 + 1) = &type metadata for Bool;
  LOBYTE(v17) = 0;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6544656D75737361, 0xED00007365657267, v7, &v17, &v14);
  v8 = swift_getKeyPath(&unk_1000CFE30);
  v17 = 0u;
  v18 = 0u;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6C61567475706E69, 0xEA00000000006575, v8, &v17, &v14);
  v9 = swift_getKeyPath(&unk_1000CFE58);
  v17 = 0u;
  v18 = 0u;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6156746C75736572, 0xEB0000000065756CLL, v9, &v17, &v14);
  v10 = swift_getKeyPath(&unk_1000CFE80);
  v17 = 0u;
  v18 = 0u;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x696E557475706E69, 0xEB00000000444974, v10, &v17, &v14);
  v11 = swift_getKeyPath(&unk_1000CFEA8);
  v17 = 0u;
  v18 = 0u;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6E55746C75736572, 0xEC00000044497469, v11, &v17, &v14);
  v12 = swift_getKeyPath(&unk_1000CFED0);
  v17 = 0u;
  v18 = 0u;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(0x6D617473656D6974, 0xE900000000000070, v12, &v17, &v14);
  return v2;
}

void sub_10004E2D8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10004AB9C(a1, (uint64_t)&unk_1000CFD90, a2);
}

uint64_t sub_10004E2F4(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004AEE8(a1, a2, a3, a4, (uint64_t)&unk_1000CFD90, (uint64_t)sub_10004E490);
}

void sub_10004E318(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10004ACA8(a1, (uint64_t)&unk_1000CFDB8, a2);
}

void sub_10004E334(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10004ACA8(a1, (uint64_t)&unk_1000CFDE0, a2);
}

void sub_10004E354(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10004ACA8(a1, (uint64_t)&unk_1000CFE08, a2);
}

void sub_10004E370(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10004AB9C(a1, (uint64_t)&unk_1000CFE30, a2);
}

uint64_t sub_10004E38C(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004AEE8(a1, a2, a3, a4, (uint64_t)&unk_1000CFE30, (uint64_t)sub_10004E450);
}

void sub_10004E3B0(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10004AB9C(a1, (uint64_t)&unk_1000CFE58, a2);
}

uint64_t sub_10004E3CC(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_10004AEE8(a1, a2, a3, a4, (uint64_t)&unk_1000CFE58, (uint64_t)sub_10004E42C);
}

double sub_10004E3F0@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10004B074(a1, (uint64_t)&unk_1000CFE80, a2);
}

double sub_10004E40C@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_10004B074(a1, (uint64_t)&unk_1000CFEA8, a2);
}

double sub_10004E42C()
{
  uint64_t *v0;

  return sub_10004AFA8(v0[2], v0[3], v0[4], (uint64_t)&unk_1000CFE58);
}

double sub_10004E450()
{
  uint64_t *v0;

  return sub_10004AFA8(v0[2], v0[3], v0[4], (uint64_t)&unk_1000CFE30);
}

double sub_10004E474()
{
  uint64_t v0;

  return sub_10004AE30(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

double sub_10004E490()
{
  uint64_t *v0;

  return sub_10004AFA8(v0[2], v0[3], v0[4], (uint64_t)&unk_1000CFD90);
}

uint64_t sub_10004E4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10004E4F8(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

_QWORD *sub_10004E510(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

_QWORD *sub_10004E54C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

double sub_10004E570()
{
  uint64_t *v0;

  return sub_10004B170(v0[2], v0[3], v0[4], (uint64_t)&unk_1000CFE80);
}

double sub_10004E594()
{
  uint64_t *v0;

  return sub_10004B170(v0[2], v0[3], v0[4], (uint64_t)&unk_1000CFEA8);
}

double sub_10004E5B8()
{
  uint64_t v0;

  return sub_10004B318(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004E5D0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(&qword_100114308);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

double sub_10004E630()
{
  return sub_10004E570();
}

double sub_10004E644()
{
  return sub_10004E594();
}

NSString sub_10004E658()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10011FC40 = (uint64_t)result;
  return result;
}

NSString sub_10004E68C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10011FC48 = (uint64_t)result;
  return result;
}

NSString sub_10004E6C0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10011FC50 = (uint64_t)result;
  return result;
}

NSString sub_10004E6F4()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10011FC58 = (uint64_t)result;
  return result;
}

NSString sub_10004E728()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10011FC60 = (uint64_t)result;
  return result;
}

uint64_t sub_10004E75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000D0090);
  v3 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v3);
  swift_release(KeyPath);
  v4 = swift_getKeyPath(&unk_1000D0090);
  v5 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v6 = sub_100013E20();
  PersistentModel.getValue<A>(forKey:)(v4, v5, v6);
  swift_release(v4);
  v7 = v12;
  swift_bridgeObjectRelease(v12);
  if (!v7)
    return 0;
  v11 = v1;
  v8 = swift_getKeyPath(&unk_1000D00B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, v8, v3);
  swift_release(v8);
  v9 = swift_getKeyPath(&unk_1000D00B8);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6);
  swift_release(v9);
  result = v12;
  if (v12)
  {
    swift_bridgeObjectRelease(v12);
    return 1;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HistoryRecordKey(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryRecordKey(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10004E9AC + 4 * byte_1000CFF05[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10004E9E0 + 4 * byte_1000CFF00[v4]))();
}

uint64_t sub_10004E9E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004E9E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10004E9F0);
  return result;
}

uint64_t sub_10004E9FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10004EA04);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_10004EA08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004EA10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HistoryRecordKey()
{
  return &type metadata for HistoryRecordKey;
}

_QWORD *sub_10004EA2C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v15);
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    v6 = a2[3];
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_QWORD *)(a1 + 24) = v6;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    v8 = a2[8];
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v8;
    v9 = a2[10];
    *(_QWORD *)(a1 + 72) = a2[9];
    *(_QWORD *)(a1 + 80) = v9;
    v10 = a2[12];
    v11 = *(int *)(a3 + 52);
    v17 = (uint64_t)a2 + v11;
    v12 = a1 + v11;
    *(_QWORD *)(a1 + 88) = a2[11];
    *(_QWORD *)(a1 + 96) = v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v14(v12, v17, v13);
  }
  return v3;
}

uint64_t sub_10004EB44(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  v4 = (char *)a1 + *(int *)(a2 + 52);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_10004EBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v8;
  v9 = *(_QWORD *)(a2 + 96);
  v10 = *(int *)(a3 + 52);
  v15 = a2 + v10;
  v11 = a1 + v10;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13(v11, v15, v12);
  return a1;
}

uint64_t sub_10004ECA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 52);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

uint64_t sub_10004EDD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v5 = *(int *)(a3 + 52);
  v6 = a1 + v5;
  v7 = a2 + v5;
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v8 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_10004EE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a2 + 96);
  v17 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v16;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 52);
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 40))(v19, v20, v21);
  return a1;
}

uint64_t sub_10004EF34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10004EF40);
}

uint64_t sub_10004EF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t sub_10004EFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10004EFC8);
}

uint64_t sub_10004EFC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 52), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for GenericRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100115BA0;
  if (!qword_100115BA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GenericRecord);
  return result;
}

uint64_t sub_10004F078(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_1000CFF40;
  v4[1] = &unk_1000CFF40;
  v4[2] = &unk_1000CFF58;
  v4[3] = &unk_1000CFF58;
  v4[4] = &unk_1000CFF58;
  v4[5] = &unk_1000CFF40;
  v4[6] = &unk_1000CFF40;
  v4[7] = &unk_1000CFF70;
  v4[8] = &unk_1000CFF70;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10004F10C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *v1;
  v4 = v1[1];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = v1[2];
  v6 = v1[3];
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  swift_bridgeObjectRelease(v6);
  Hasher._combine(_:)(*((_BYTE *)v1 + 32));
  Hasher._combine(_:)(*((_BYTE *)v1 + 33));
  Hasher._combine(_:)(*((_BYTE *)v1 + 34));
  v7 = v1[5];
  v8 = v1[6];
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(a1, v7, v8);
  swift_bridgeObjectRelease(v8);
  v9 = v1[7];
  v10 = v1[8];
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(a1, v9, v10);
  swift_bridgeObjectRelease(v10);
  v11 = v1[10];
  if (!v11)
  {
    Hasher._combine(_:)(0);
    v13 = v1[12];
    if (v13)
      goto LABEL_3;
LABEL_5:
    Hasher._combine(_:)(0);
    goto LABEL_6;
  }
  v12 = v1[9];
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v12, v11);
  swift_bridgeObjectRelease(v11);
  v13 = v1[12];
  if (!v13)
    goto LABEL_5;
LABEL_3:
  v14 = v1[11];
  Hasher._combine(_:)(1u);
  swift_bridgeObjectRetain(v13);
  String.hash(into:)(a1, v14, v13);
  swift_bridgeObjectRelease(v13);
LABEL_6:
  type metadata accessor for GenericRecord(0);
  v15 = type metadata accessor for Date(0);
  v16 = sub_100005178(&qword_100115C08, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return dispatch thunk of Hashable.hash(into:)(a1, v15, v16);
}

uint64_t sub_10004F2C4@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int sub_10004F2D0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10004F10C((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10004F310()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10004F10C((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_10004F34C()
{
  return sub_100005178(&qword_100115BF8, type metadata accessor for GenericRecord, (uint64_t)&unk_1000CFF88);
}

unint64_t sub_10004F37C()
{
  unint64_t result;

  result = qword_100115C00;
  if (!qword_100115C00)
  {
    result = swift_getWitnessTable(&unk_1000D0068, &type metadata for HistoryRecordKey);
    atomic_store(result, (unint64_t *)&qword_100115C00);
  }
  return result;
}

uint64_t sub_10004F3C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = v4 == *(_QWORD *)a2 && v5 == v6;
  if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0) & 1) == 0)
    return 0;
  v8 = a1[2];
  v9 = a1[3];
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = v8 == v10 && v9 == v11;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0) & 1) == 0)
    return 0;
  if (*((unsigned __int8 *)a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *((unsigned __int8 *)a1 + 33) != *(unsigned __int8 *)(a2 + 33)
    || *((unsigned __int8 *)a1 + 34) != *(unsigned __int8 *)(a2 + 34))
  {
    return 0;
  }
  v14 = a1[5];
  v15 = a1[6];
  v16 = *(_QWORD *)(a2 + 40);
  v17 = *(_QWORD *)(a2 + 48);
  if ((v14 != v16 || v15 != v17) && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v16, v17, 0) & 1) == 0)
    return 0;
  v18 = a1[7];
  v19 = a1[8];
  v20 = *(_QWORD *)(a2 + 56);
  v21 = *(_QWORD *)(a2 + 64);
  if ((v18 != v20 || v19 != v21) && (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0) & 1) == 0)
    return 0;
  v22 = a1[10];
  v23 = *(_QWORD *)(a2 + 80);
  if (v22)
  {
    if (!v23)
      return 0;
    v24 = a1[9];
    v25 = *(_QWORD *)(a2 + 72);
    if ((v24 != v25 || v22 != v23) && (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v22, v25, v23, 0) & 1) == 0)
      return 0;
  }
  else if (v23)
  {
    return 0;
  }
  v26 = a1[12];
  v27 = *(_QWORD *)(a2 + 96);
  if (v26)
  {
    if (v27)
    {
      v28 = a1[11];
      v29 = *(_QWORD *)(a2 + 88);
      if (v28 == v29 && v26 == v27)
        goto LABEL_35;
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(v28, v26, v29, v27, 0) & 1) != 0)
        goto LABEL_35;
    }
    return 0;
  }
  if (v27)
    return 0;
LABEL_35:
  v30 = *(int *)(type metadata accessor for GenericRecord(0) + 52);
  return static Date.== infix(_:_:)((char *)a1 + v30, a2 + v30);
}

uint64_t getEnumTagSinglePayload for NotesFeatureFlags(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for NotesFeatureFlags(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10004F5D4 + 4 * byte_1000D00E0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10004F5F4 + 4 * byte_1000D00E5[v4]))();
}

_BYTE *sub_10004F5D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10004F5F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10004F5FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10004F604(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10004F60C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10004F614(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotesFeatureFlags()
{
  return &type metadata for NotesFeatureFlags;
}

unint64_t sub_10004F634()
{
  unint64_t result;

  result = qword_100115C10;
  if (!qword_100115C10)
  {
    result = swift_getWitnessTable(&unk_1000D0154, &type metadata for NotesFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100115C10);
  }
  return result;
}

uint64_t sub_10004F678()
{
  return 1;
}

Swift::Int sub_10004F680()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_10004F6C0()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_10004F6E4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

const char *sub_10004F720()
{
  return "Notes";
}

const char *sub_10004F734()
{
  return "GreyParrot";
}

uint64_t sub_10004F748(char a1)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 1:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.clear.getter();
      break;
    case 2:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.negate.getter();
      break;
    case 3:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.percent.getter();
      break;
    case 4:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.divide.getter();
      break;
    case 5:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.multiply.getter();
      break;
    case 6:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.subtract.getter();
      break;
    case 7:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.add.getter();
      break;
    case 8:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.equals.getter();
      break;
    case 9:
    case 53:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.decimal.getter();
      break;
    case 11:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit0.getter();
      break;
    case 12:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit1.getter();
      break;
    case 13:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit2.getter();
      break;
    case 14:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit3.getter();
      break;
    case 15:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit4.getter();
      break;
    case 16:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit5.getter();
      break;
    case 17:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit6.getter();
      break;
    case 18:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit7.getter();
      break;
    case 19:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit8.getter();
      break;
    case 20:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit9.getter();
      break;
    case 21:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.openParenthesis.getter();
      break;
    case 22:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.closeParenthesis.getter();
      break;
    case 28:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.square.getter();
      break;
    case 29:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.cube.getter();
      break;
    case 30:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.power.getter();
      break;
    case 31:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.exponentialBaseEuler.getter();
      break;
    case 32:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.exponentialBase10.getter();
      break;
    case 33:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.reciprocal.getter();
      break;
    case 34:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.squareRoot.getter();
      break;
    case 35:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.cubeRoot.getter();
      break;
    case 36:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.root.getter();
      break;
    case 37:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.reverseRoot.getter();
      break;
    case 38:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.logarithmNatural.getter();
      break;
    case 39:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.logarithmBase10.getter();
      break;
    case 40:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.factorial.getter();
      break;
    case 41:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.sine.getter();
      break;
    case 42:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.cosine.getter();
      break;
    case 43:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.tangent.getter();
      break;
    case 44:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.eulerNumber.getter();
      break;
    case 45:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.ee.getter();
      break;
    case 47:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.hyperbolicSine.getter();
      break;
    case 48:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.hyperbolicCosine.getter();
      break;
    case 49:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.hyperbolicTangent.getter();
      break;
    case 50:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.pi.getter();
      break;
    case 51:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.random.getter();
      break;
    case 52:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.delete.getter();
      break;
    case 55:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.exponentialBaseCustom.getter();
      break;
    case 56:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.exponentialBase2.getter();
      break;
    case 57:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.logarithmBaseCustom.getter();
      break;
    case 58:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.logarithmBase2.getter();
      break;
    case 59:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.inverseSine.getter();
      break;
    case 60:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.inverseCosine.getter();
      break;
    case 61:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.inverseTangent.getter();
      break;
    case 62:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.inverseHyperbolicSine.getter();
      break;
    case 63:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.inverseHyperbolicCosine.getter();
      break;
    case 64:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.inverseHyperbolicTangent.getter();
      break;
    case 65:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digitA.getter();
      break;
    case 66:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digitB.getter();
      break;
    case 67:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digitC.getter();
      break;
    case 68:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digitD.getter();
      break;
    case 69:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digitE.getter();
      break;
    case 70:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digitF.getter();
      break;
    case 71:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digitFF.getter();
      break;
    case 72:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.digit00.getter();
      break;
    case 73:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.and.getter();
      break;
    case 74:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.or.getter();
      break;
    case 75:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.nor.getter();
      break;
    case 76:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.xor.getter();
      break;
    case 77:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.rightShift.getter();
      break;
    case 78:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.leftShift.getter();
      break;
    case 79:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.rightShiftCustom.getter();
      break;
    case 80:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.leftShiftCustom.getter();
      break;
    case 81:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.rightRotate.getter();
      break;
    case 82:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.leftRotate.getter();
      break;
    case 83:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.byteFlip.getter();
      break;
    case 84:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.wordFlip.getter();
      break;
    case 85:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.neg.getter();
      break;
    case 86:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.not.getter();
      break;
    case 87:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.mod.getter();
      break;
    case 88:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.drop.getter();
      break;
    case 89:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.swap.getter();
      break;
    case 90:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.rollOut.getter();
      break;
    case 91:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.rollIn.getter();
      break;
    case 92:
      type metadata accessor for CalculateExpression.Operation(0);
      result = static CalculateExpression.Operation.enter.getter();
      break;
    default:
      return result;
  }
  return result;
}

void sub_10004FE08(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10004FE44()
{
  Swift::String v0;
  uint64_t v1;

  v0 = CalculatorButtonRepresentable.stringValue()();
  v1 = sub_100051554(v0._countAndFlagsBits, (uint64_t)v0._object);
  swift_bridgeObjectRelease(v0._object);
  return v1;
}

void sub_10004FE80()
{
  JUMPOUT(0x10004FE64);
}

void sub_10004FE8C()
{
  JUMPOUT(0x10004FE64);
}

void sub_10004FE98()
{
  JUMPOUT(0x10004FE64);
}

void sub_10004FEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  id v13;
  void *v14;

  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v10 = qword_10011FF08;
  KeyPath = swift_getKeyPath(&unk_1000D04C0);
  a10 = v10;
  v12 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&a10, KeyPath, v12);
  v13 = objc_msgSend(*(id *)(v10 + 48), "percentSymbol", swift_release(KeyPath).n128_f64[0]);
  if (!v13)
  {
    __break(1u);
    JUMPOUT(0x10004FF34);
  }
  v14 = v13;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

  JUMPOUT(0x10004FE64);
}

Swift::Int sub_100050670()
{
  Swift::Int result;

  result = sub_10005191C((uint64_t)&off_100107AE8);
  static CalculatorButtonRepresentable.shiftableButtons = result;
  return result;
}

uint64_t *CalculatorButtonRepresentable.shiftableButtons.unsafeMutableAddressor()
{
  if (qword_100113CC0 != -1)
    swift_once(&qword_100113CC0, sub_100050670);
  return &static CalculatorButtonRepresentable.shiftableButtons;
}

uint64_t static CalculatorButtonRepresentable.shiftableButtons.getter()
{
  return sub_100050870(&qword_100113CC0, &static CalculatorButtonRepresentable.shiftableButtons, (uint64_t)sub_100050670);
}

Swift::Int sub_1000506F0()
{
  Swift::Int result;

  result = sub_10005191C((uint64_t)&off_100107AC0);
  static CalculatorButtonRepresentable.alternateRPNButtons = result;
  return result;
}

uint64_t *CalculatorButtonRepresentable.alternateRPNButtons.unsafeMutableAddressor()
{
  if (qword_100113CC8 != -1)
    swift_once(&qword_100113CC8, sub_1000506F0);
  return &static CalculatorButtonRepresentable.alternateRPNButtons;
}

uint64_t static CalculatorButtonRepresentable.alternateRPNButtons.getter()
{
  return sub_100050870(&qword_100113CC8, &static CalculatorButtonRepresentable.alternateRPNButtons, (uint64_t)sub_1000506F0);
}

Swift::Int sub_100050770()
{
  Swift::Int result;

  result = sub_10005191C((uint64_t)&off_100107BF8);
  static CalculatorButtonRepresentable.swappableButtons = result;
  return result;
}

uint64_t *CalculatorButtonRepresentable.swappableButtons.unsafeMutableAddressor()
{
  if (qword_100113CD0 != -1)
    swift_once(&qword_100113CD0, sub_100050770);
  return &static CalculatorButtonRepresentable.swappableButtons;
}

uint64_t static CalculatorButtonRepresentable.swappableButtons.getter()
{
  return sub_100050870(&qword_100113CD0, &static CalculatorButtonRepresentable.swappableButtons, (uint64_t)sub_100050770);
}

Swift::Int sub_1000507F0()
{
  Swift::Int result;

  result = sub_10005191C((uint64_t)&off_100107C20);
  static CalculatorButtonRepresentable.attributedTitledButtons = result;
  return result;
}

uint64_t *CalculatorButtonRepresentable.attributedTitledButtons.unsafeMutableAddressor()
{
  if (qword_100113CD8 != -1)
    swift_once(&qword_100113CD8, sub_1000507F0);
  return &static CalculatorButtonRepresentable.attributedTitledButtons;
}

uint64_t static CalculatorButtonRepresentable.attributedTitledButtons.getter()
{
  return sub_100050870(&qword_100113CD8, &static CalculatorButtonRepresentable.attributedTitledButtons, (uint64_t)sub_1000507F0);
}

uint64_t sub_100050870(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  if (*a1 != -1)
    swift_once(a1, a3);
  return swift_bridgeObjectRetain(*a2);
}

uint64_t CalculatorButtonRepresentable.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_1000508B4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s10Calculator0A19ButtonRepresentableO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1000508DC(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

Calculator::CalculatorButtonRepresentable __swiftcall CalculatorButtonRepresentable.shiftedButton(isRPN:)(Swift::Bool isRPN)
{
  Calculator::CalculatorButtonRepresentable v1;
  Calculator::CalculatorButtonRepresentable result;
  BOOL v4;
  Calculator::CalculatorButtonRepresentable v5;

  result = Calculator_CalculatorButtonRepresentable_exponentialBase2;
  switch(v1)
  {
    case Calculator_CalculatorButtonRepresentable_power:
      v4 = !isRPN;
      v5 = Calculator_CalculatorButtonRepresentable_power;
      goto LABEL_16;
    case Calculator_CalculatorButtonRepresentable_exponential:
      if (isRPN)
        result = Calculator_CalculatorButtonRepresentable_power;
      else
        result = Calculator_CalculatorButtonRepresentable_exponentialBaseY;
      break;
    case Calculator_CalculatorButtonRepresentable_exponentialBase10:
      return result;
    case Calculator_CalculatorButtonRepresentable_logarithmNatural:
      result = Calculator_CalculatorButtonRepresentable_logarithm;
      break;
    case Calculator_CalculatorButtonRepresentable_logarithmBase10:
      result = Calculator_CalculatorButtonRepresentable_logarithmBase2;
      break;
    case Calculator_CalculatorButtonRepresentable_sine:
      result = Calculator_CalculatorButtonRepresentable_inverseSine;
      break;
    case Calculator_CalculatorButtonRepresentable_cosine:
      result = Calculator_CalculatorButtonRepresentable_inverseCosine;
      break;
    case Calculator_CalculatorButtonRepresentable_tangent:
      result = Calculator_CalculatorButtonRepresentable_inverseTangent;
      break;
    case Calculator_CalculatorButtonRepresentable_hyperbolicSine:
      result = Calculator_CalculatorButtonRepresentable_inverseHyperbolicSine;
      break;
    case Calculator_CalculatorButtonRepresentable_hyperbolicCosine:
      result = Calculator_CalculatorButtonRepresentable_inverseHyperbolicCosine;
      break;
    case Calculator_CalculatorButtonRepresentable_hyperbolicTangent:
      result = Calculator_CalculatorButtonRepresentable_inverseHyperbolicTangent;
      break;
    case Calculator_CalculatorButtonRepresentable_exponentialBaseY:
      v4 = !isRPN;
      v5 = Calculator_CalculatorButtonRepresentable_exponential;
LABEL_16:
      if (v4)
        result = v5;
      else
        result = Calculator_CalculatorButtonRepresentable_exponentialBaseY;
      break;
    case Calculator_CalculatorButtonRepresentable_exponentialBase2:
      result = Calculator_CalculatorButtonRepresentable_exponentialBase10;
      break;
    case Calculator_CalculatorButtonRepresentable_logarithm:
      result = Calculator_CalculatorButtonRepresentable_logarithmNatural;
      break;
    case Calculator_CalculatorButtonRepresentable_logarithmBase2:
      result = Calculator_CalculatorButtonRepresentable_logarithmBase10;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseSine:
      result = Calculator_CalculatorButtonRepresentable_sine;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseCosine:
      result = Calculator_CalculatorButtonRepresentable_cosine;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseTangent:
      result = Calculator_CalculatorButtonRepresentable_tangent;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseHyperbolicSine:
      result = Calculator_CalculatorButtonRepresentable_hyperbolicSine;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseHyperbolicCosine:
      result = Calculator_CalculatorButtonRepresentable_hyperbolicCosine;
      break;
    case Calculator_CalculatorButtonRepresentable_inverseHyperbolicTangent:
      result = Calculator_CalculatorButtonRepresentable_hyperbolicTangent;
      break;
    default:
      result = v1;
      break;
  }
  return result;
}

Calculator::CalculatorButtonRepresentable __swiftcall CalculatorButtonRepresentable.alternateRPNButton()()
{
  Calculator::CalculatorButtonRepresentable result;

  if (result > Calculator_CalculatorButtonRepresentable_cubeRoot)
  {
    if (result == Calculator_CalculatorButtonRepresentable_root)
    {
      return 37;
    }
    else if (result == Calculator_CalculatorButtonRepresentable_exponentialBaseY)
    {
      return 30;
    }
  }
  else if (result == Calculator_CalculatorButtonRepresentable_equals)
  {
    return 92;
  }
  else if (result == Calculator_CalculatorButtonRepresentable_power)
  {
    return 55;
  }
  return result;
}

Calculator::CalculatorButtonRepresentable __swiftcall CalculatorButtonRepresentable.editableButton(_:)(Swift::Bool a1)
{
  Calculator::CalculatorButtonRepresentable v1;
  Calculator::CalculatorButtonRepresentable v2;
  Calculator::CalculatorButtonRepresentable v3;

  if (v1 == Calculator_CalculatorButtonRepresentable_allClear)
    v2 = Calculator_CalculatorButtonRepresentable_delete;
  else
    v2 = v1;
  if (v1 == Calculator_CalculatorButtonRepresentable_delete)
    v3 = Calculator_CalculatorButtonRepresentable_allClear;
  else
    v3 = v1;
  if (a1)
    return v2;
  else
    return v3;
}

Swift::String __swiftcall CalculatorButtonRepresentable.stringValue()()
{
  unsigned __int8 v0;
  uint64_t v1;
  void *v2;
  Swift::String result;

  v1 = ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100050A74 + 4 * word_1000D028C[v0]))(48, 0xE100000000000000);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t sub_100050A74()
{
  return 1701736302;
}

uint64_t sub_100050A84()
{
  return 17217;
}

uint64_t sub_100050A90()
{
  return 2961195;
}

uint64_t sub_100050AA0()
{
  return 0x746E6563726570;
}

uint64_t sub_100050AB8()
{
  return 47043;
}

uint64_t sub_100050AC4()
{
  return 38851;
}

uint64_t sub_100050AD0()
{
  return 9603298;
}

uint64_t sub_100050AE0()
{
  return 43;
}

uint64_t sub_100050AE8()
{
  return 61;
}

uint64_t sub_100050AF0()
{
  return 0x6C616D69636564;
}

uint64_t sub_100050B08()
{
  return 1701080941;
}

uint64_t sub_100050B18()
{
  return 49;
}

uint64_t sub_100050B20()
{
  return 50;
}

uint64_t sub_100050B28()
{
  return 51;
}

uint64_t sub_100050B30()
{
  return 52;
}

uint64_t sub_100050B38()
{
  return 53;
}

uint64_t sub_100050B40()
{
  return 54;
}

uint64_t sub_100050B48()
{
  return 55;
}

uint64_t sub_100050B50()
{
  return 56;
}

uint64_t sub_100050B58()
{
  return 57;
}

uint64_t sub_100050B60()
{
  return 680427746;
}

uint64_t sub_100050B70()
{
  return 697204962;
}

uint64_t sub_100050B80()
{
  return 25453;
}

uint64_t sub_100050B8C()
{
  return 11117;
}

uint64_t sub_100050B98()
{
  return 11629;
}

uint64_t sub_100050BA4()
{
  return 29293;
}

uint64_t sub_100050BB0()
{
  return 6581810;
}

uint64_t sub_100050BC4()
{
  return 11715192;
}

uint64_t sub_100050BD4()
{
  return 11780728;
}

uint64_t sub_100050BE8()
{
  return 12110456;
}

uint64_t sub_100050BF8()
{
  return 10734437;
}

uint64_t sub_100050C0C()
{
  return 2748002353;
}

uint64_t sub_100050C1C()
{
  return 7876401;
}

uint64_t sub_100050C2C()
{
  return 1953657203;
}

uint64_t sub_100050C40()
{
  return 1953653347;
}

uint64_t sub_100050C50()
{
  return 0x789A88E279;
}

uint64_t sub_100050C64()
{
  return 0x799A88E278;
}

uint64_t sub_100050C78()
{
  return 28268;
}

uint64_t sub_100050C84()
{
  return 6778732;
}

uint64_t sub_100050C9C()
{
  return 0x6169726F74636166;
}

uint64_t sub_100050CB8()
{
  return 7235955;
}

uint64_t sub_100050CCC()
{
  return 7565155;
}

uint64_t sub_100050CDC()
{
  return 7233908;
}

uint64_t sub_100050CEC()
{
  return 101;
}

uint64_t sub_100050CF4()
{
  return 17733;
}

uint64_t sub_100050D00()
{
  return 6578546;
}

uint64_t sub_100050D10()
{
  return 1752066419;
}

uint64_t sub_100050D24()
{
  return 1752395619;
}

uint64_t sub_100050D34()
{
  return 1752064372;
}

uint64_t sub_100050D44()
{
  return 26992;
}

uint64_t sub_100050D50()
{
  return 0x6D6F646E6152;
}

uint64_t sub_100050D64()
{
  return 0x6574656C6564;
}

uint64_t sub_100050D78()
{
  return 0x616D6D6F63;
}

uint64_t sub_100050D8C()
{
  return 6776164;
}

uint64_t sub_100050D9C()
{
  return 10734457;
}

uint64_t sub_100050DB0()
{
  return 10734386;
}

uint64_t sub_100050DC0()
{
  return 2036821868;
}

uint64_t sub_100050DD0()
{
  return 845639532;
}

uint64_t sub_100050DE0()
{
  return 1852404577;
}

uint64_t sub_100050DF0()
{
  return 1936679777;
}

uint64_t sub_100050E00()
{
  return 1851880545;
}

uint64_t sub_100050E10()
{
  return 0x686E697361;
}

uint64_t sub_100050E24()
{
  return 0x68736F6361;
}

uint64_t sub_100050E38()
{
  return 0x686E617461;
}

uint64_t sub_100050E4C()
{
  return 65;
}

uint64_t sub_100050E54()
{
  return 66;
}

uint64_t sub_100050E5C()
{
  return 67;
}

uint64_t sub_100050E64()
{
  return 68;
}

uint64_t sub_100050E6C()
{
  return 69;
}

uint64_t sub_100050E74()
{
  return 70;
}

uint64_t sub_100050E7C()
{
  return 17990;
}

uint64_t sub_100050E88()
{
  return 12336;
}

uint64_t sub_100050E94()
{
  return 4476481;
}

uint64_t sub_100050EA4()
{
  return 21071;
}

uint64_t sub_100050EB0()
{
  return 5394254;
}

uint64_t sub_100050EC0()
{
  return 5394264;
}

uint64_t sub_100050ED4()
{
  return 0x3E3E8E80E2;
}

uint64_t sub_100050EE8()
{
  return 0x3C3C8E80E2;
}

uint64_t sub_100050EFC()
{
  return 1497251416;
}

uint64_t sub_100050F0C()
{
  return 1497119832;
}

uint64_t sub_100050F1C()
{
  return 5402450;
}

uint64_t sub_100050F2C()
{
  return 5009234;
}

uint64_t sub_100050F3C()
{
  return 0x8882E270696C66;
}

unint64_t sub_100050F54()
{
  return 0xE28182E270696C66;
}

uint64_t sub_100050F70()
{
  return 4670798;
}

uint64_t sub_100050F80()
{
  return 5525326;
}

uint64_t sub_100050F90()
{
  return 6582125;
}

uint64_t sub_100050FA4()
{
  return 1886351972;
}

uint64_t sub_100050FB4()
{
  return 0x799486E278;
}

uint64_t sub_100050FC8()
{
  return 2441536082;
}

uint64_t sub_100050FD8()
{
  return 2475090514;
}

uint64_t sub_100050FE8()
{
  return 0x7265746E65;
}

uint64_t sub_100050FFC(unsigned __int8 a1, double a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = 0;
  v3 = a1 - 27;
  v4 = 0xE100000000000000;
  v5 = 0xE200000000000000;
  v6 = 50;
  v7 = 25710;
  v8 = 0;
  switch(v3)
  {
    case 0:
      goto LABEL_16;
    case 1:
      v2 = 0;
      v8 = 0;
      v5 = 0xE100000000000000;
      v6 = 120;
      v7 = 50;
      goto LABEL_16;
    case 2:
      v2 = 0;
      v8 = 0;
      v5 = 0xE100000000000000;
      v6 = 120;
      v7 = 51;
      goto LABEL_16;
    case 3:
      v2 = 0;
      v8 = 0;
      v5 = 0xE100000000000000;
      v6 = 120;
      v7 = 121;
      goto LABEL_16;
    case 4:
      v2 = 0;
      v8 = 0;
      v4 = 0xA400000000000000;
      v5 = 0xE100000000000000;
      v6 = 2459016688;
      v7 = 120;
      goto LABEL_16;
    case 5:
      v2 = 0;
      v8 = 0;
      v4 = 0xE200000000000000;
      v5 = 0xE100000000000000;
      v6 = 12337;
      v7 = 120;
      goto LABEL_16;
    case 12:
      v7 = 0;
      v5 = 0;
      v4 = 0xE300000000000000;
      v8 = 0xE200000000000000;
      v2 = 12337;
      goto LABEL_12;
    case 28:
      v2 = 0;
      v8 = 0;
      v5 = 0xE100000000000000;
      v6 = 121;
      v7 = 120;
      goto LABEL_16;
    case 29:
      v2 = 0;
      v8 = 0;
      v5 = 0xE100000000000000;
      v6 = 50;
      v7 = 120;
      goto LABEL_16;
    case 30:
      v7 = 0;
      v5 = 0;
      v4 = 0xE300000000000000;
      v8 = 0xE100000000000000;
      v2 = 121;
      goto LABEL_12;
    case 31:
      v7 = 0;
      v5 = 0;
      v4 = 0xE300000000000000;
      v8 = 0xE100000000000000;
      v2 = 50;
LABEL_12:
      v6 = 6778732;
      goto LABEL_16;
    case 56:
      v7 = 0;
      v5 = 0;
      v4 = 0xE400000000000000;
      v8 = 0xE100000000000000;
      v2 = 56;
      goto LABEL_15;
    case 57:
      v7 = 0;
      v5 = 0;
      v4 = 0xE400000000000000;
      v8 = 0xE200000000000000;
      v2 = 13873;
LABEL_15:
      v6 = 1885957222;
LABEL_16:
      v2 = (uint64_t)sub_1000B1508(a2, v6, v4, v7, v5, v2, v8);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v5);
      break;
    default:
      return v2;
  }
  return v2;
}

void sub_1000511C8(char a1)
{
  switch(a1)
  {
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 45:
    case 47:
    case 48:
    case 49:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
      return;
    default:
      sub_10004FE08(0, a1);
      break;
  }
}

Swift::Int sub_1000513B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005360(&qword_100115C30);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v27 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v27 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)(v28);
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = v16[1];
        v18 = *v16 == v8 && v17 == v7;
        if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }
        v19 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v19;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v20 = (_QWORD *)(v15 + 16 * v11);
          v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v23 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v23 = v8;
      v23[1] = v7;
      v24 = *(_QWORD *)(v3 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v26;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100051554(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v13;

  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v4 = qword_10011FF08;
  KeyPath = swift_getKeyPath(&unk_1000D04C0);
  v13 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100114A48, type metadata accessor for AppSettings, (uint64_t)&unk_1000D4B00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v13, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(id *)(v4 + 48);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "numberFromString:", v8);

  if (!v9)
  {
    v9 = v7;
LABEL_8:

    swift_bridgeObjectRetain(a2);
    return a1;
  }
  v10 = objc_msgSend(v7, "stringFromNumber:", v9);
  if (!v10)
  {

    goto LABEL_8;
  }
  v11 = v10;
  a1 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

  return a1;
}

void *sub_1000516B4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  void *result;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;

  v2 = type metadata accessor for Calendar.Component(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v32 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    sub_100005360(&qword_100115C38);
    v12 = static _SetStorage.allocate(capacity:)(v11);
    v13 = 0;
    v14 = *(unsigned __int8 *)(v3 + 80);
    v33 = v11;
    v34 = a1 + ((v14 + 32) & ~v14);
    v15 = *(_QWORD *)(v3 + 72);
    v36 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v37 = v12 + 56;
    while (1)
    {
      v35 = v13;
      v36(v10, v34 + v15 * v13, v2);
      v16 = *(_QWORD *)(v12 + 40);
      v17 = sub_100005178(&qword_100115C40, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
      v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v2, v17);
      v19 = ~(-1 << *(_BYTE *)(v12 + 32));
      v20 = v18 & v19;
      v21 = (v18 & (unint64_t)v19) >> 6;
      v22 = *(_QWORD *)(v37 + 8 * v21);
      v23 = 1 << (v18 & v19);
      if ((v23 & v22) != 0)
      {
        do
        {
          v36(v6, *(_QWORD *)(v12 + 48) + v20 * v15, v2);
          v24 = sub_100005178(&qword_100115C48, (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component, (uint64_t)&protocol conformance descriptor for Calendar.Component);
          v25 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v10, v2, v24);
          v26 = v3;
          v27 = *(void (**)(char *, uint64_t))(v3 + 8);
          v27(v6, v2);
          if ((v25 & 1) != 0)
          {
            v27(v10, v2);
            v3 = v26;
            v11 = v33;
            goto LABEL_4;
          }
          v20 = (v20 + 1) & v19;
          v21 = v20 >> 6;
          v22 = *(_QWORD *)(v37 + 8 * (v20 >> 6));
          v23 = 1 << v20;
          v3 = v26;
        }
        while ((v22 & (1 << v20)) != 0);
        v11 = v33;
      }
      *(_QWORD *)(v37 + 8 * v21) = v23 | v22;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v12 + 48) + v20 * v15, v10, v2);
      v29 = *(_QWORD *)(v12 + 16);
      v30 = __OFADD__(v29, 1);
      v31 = v29 + 1;
      if (v30)
        break;
      *(_QWORD *)(v12 + 16) = v31;
LABEL_4:
      v13 = v35 + 1;
      if (v35 + 1 == v11)
        return (void *)v12;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

Swift::Int sub_10005191C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100005360(&qword_100115C28);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(unsigned __int8 *)(v6 + v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(unsigned __int8 *)(v14 + v10) == (_DWORD)v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_BYTE *)(v14 + v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

unint64_t _s10Calculator0A19ButtonRepresentableO8rawValueACSgSi_tcfC_0(unint64_t result)
{
  if (result >= 0x5D)
    return 93;
  return result;
}

unint64_t sub_100051A70()
{
  unint64_t result;

  result = qword_100115C18;
  if (!qword_100115C18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorButtonRepresentable, &type metadata for CalculatorButtonRepresentable);
    atomic_store(result, (unint64_t *)&qword_100115C18);
  }
  return result;
}

unint64_t sub_100051AB8()
{
  unint64_t result;

  result = qword_100115C20;
  if (!qword_100115C20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorButtonRepresentable, &type metadata for CalculatorButtonRepresentable);
    atomic_store(result, (unint64_t *)&qword_100115C20);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CalculatorButtonRepresentable(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xA4)
    goto LABEL_17;
  if (a2 + 92 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 92) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 92;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 92;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 92;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x5D;
  v8 = v6 - 93;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorButtonRepresentable(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 92 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 92) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xA4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xA3)
    return ((uint64_t (*)(void))((char *)&loc_100051BD8 + 4 * byte_1000D03AA[v4]))();
  *a1 = a2 + 92;
  return ((uint64_t (*)(void))((char *)sub_100051C0C + 4 * byte_1000D03A5[v4]))();
}

uint64_t sub_100051C0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100051C14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100051C1CLL);
  return result;
}

uint64_t sub_100051C28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100051C30);
  *(_BYTE *)result = a2 + 92;
  return result;
}

uint64_t sub_100051C34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100051C3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CalculatorButtonRepresentable()
{
  return &type metadata for CalculatorButtonRepresentable;
}

uint64_t destroy for SectionHeaderView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for SectionHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t assignWithCopy for SectionHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for SectionHeaderView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SectionHeaderView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_release(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionHeaderView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionHeaderView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SectionHeaderView()
{
  return &type metadata for SectionHeaderView;
}

uint64_t sub_100051E74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6154, 1);
}

double sub_100051E84@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double result;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v2 = v1;
  v4 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  if ((v1[4] & 1) != 0)
  {
    v15 = v1[1];
    v16 = swift_bridgeObjectRetain(v15);
    LocalizedStringResource.init(stringLiteral:)(v8, v15, v16);
    v53 = Text.init(_:)(v7);
    v54 = v17;
    *(_QWORD *)&v55 = v18 & 1;
    *((_QWORD *)&v55 + 1) = v19;
    v56 = 0;
  }
  else
  {
    v9 = v1[1];
    *(_QWORD *)&v41 = *v1;
    *((_QWORD *)&v41 + 1) = v9;
    v10 = sub_100004F84();
    v11 = swift_bridgeObjectRetain(v9);
    v53 = Text.init<A>(_:)(&v41, &type metadata for String, v10, v11);
    v54 = v13;
    *(_QWORD *)&v55 = v12 & 1;
    *((_QWORD *)&v55 + 1) = v14;
    v56 = 1;
  }
  _ConditionalContent<>.init(storage:)(&v41, &v53, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
  v40 = *((_QWORD *)&v41 + 1);
  v20 = v41;
  v21 = v42;
  v22 = v43;
  v23 = v1[3];
  KeyPath = swift_getKeyPath(&unk_1000D0568);
  v39 = KeyPath;
  v25 = v2[2];
  v26 = swift_getKeyPath(&unk_1000D0598);
  v27 = v40;
  v53 = v20;
  v54 = v40;
  v55 = v21;
  v56 = v22;
  v57 = KeyPath;
  v58 = v23;
  v38 = v23;
  v59 = v26;
  v60 = v25;
  v28 = v26;
  swift_retain(v23);
  swift_retain(v25);
  v30 = static Alignment.leading.getter(v29);
  sub_100035720(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v41, 0.0, 1, 0.0, 1, v30, v31);
  sub_1000520FC(v20, v27, v21, *((uint64_t *)&v21 + 1));
  swift_release(v25);
  swift_release(v28);
  swift_release(v38);
  swift_release(v39);
  v32 = v50;
  *(_OWORD *)(a1 + 128) = v49;
  *(_OWORD *)(a1 + 144) = v32;
  *(_OWORD *)(a1 + 160) = v51;
  *(_QWORD *)(a1 + 176) = v52;
  v33 = v46;
  *(_OWORD *)(a1 + 64) = v45;
  *(_OWORD *)(a1 + 80) = v33;
  v34 = v48;
  *(_OWORD *)(a1 + 96) = v47;
  *(_OWORD *)(a1 + 112) = v34;
  v35 = v42;
  *(_OWORD *)a1 = v41;
  *(_OWORD *)(a1 + 16) = v35;
  result = *(double *)&v43;
  v37 = v44;
  *(_OWORD *)(a1 + 32) = v43;
  *(_OWORD *)(a1 + 48) = v37;
  return result;
}

uint64_t sub_1000520FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  sub_10002DD44(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

unint64_t sub_100052128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115C50;
  if (!qword_100115C50)
  {
    v1 = sub_100005608(&qword_100115C58);
    sub_100052194();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115C50);
  }
  return result;
}

unint64_t sub_100052194()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115C60;
  if (!qword_100115C60)
  {
    v1 = sub_100005608(&qword_100115C68);
    sub_100052210();
    sub_10005234C((unint64_t *)&qword_100114F20, &qword_100114F28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115C60);
  }
  return result;
}

unint64_t sub_100052210()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115C70;
  if (!qword_100115C70)
  {
    v1 = sub_100005608(&qword_100115C78);
    sub_10005228C();
    sub_10005234C(&qword_100114C28, &qword_100114C30);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115C70);
  }
  return result;
}

unint64_t sub_10005228C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115C80;
  if (!qword_100115C80)
  {
    v1 = sub_100005608(&qword_100115C88);
    sub_1000522F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100115C80);
  }
  return result;
}

unint64_t sub_1000522F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115C90;
  if (!qword_100115C90)
  {
    v1 = sub_100005608(&qword_100115C98);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100115C90);
  }
  return result;
}

uint64_t sub_10005234C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005608(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for HistoryDeletionConfirmationView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for HistoryDeletionConfirmationView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v5 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for HistoryDeletionConfirmationView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v8 = a2[3];
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  a1[3] = v8;
  v10 = a2[5];
  v9 = a2[6];
  v11 = a1[6];
  a1[5] = v10;
  a1[6] = v9;
  swift_retain(v9);
  swift_release(v11);
  return a1;
}

__n128 initializeWithTake for HistoryDeletionConfirmationView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HistoryDeletionConfirmationView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for HistoryDeletionConfirmationView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryDeletionConfirmationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryDeletionConfirmationView()
{
  return &type metadata for HistoryDeletionConfirmationView;
}

uint64_t sub_1000525D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F61A0, 1);
}

uint64_t sub_1000525E0()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v17;
  _BYTE v18[16];
  __int128 *v19;
  _BYTE v20[16];
  __int128 *v21;
  __int128 v22;
  char v23;
  _QWORD v24[2];
  unsigned __int8 v25;

  v1 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000031, 0x80000001000D6B00);
  v2 = Text.init(_:tableName:bundle:comment:)(v1);
  v4 = v3;
  v6 = v5;
  v8 = v7 & 1;
  v22 = *v0;
  v23 = *((_BYTE *)v0 + 16);
  v9 = sub_100005360(&qword_100115300);
  Binding.projectedValue.getter(v24, v9);
  v10 = v24[0];
  v11 = v24[1];
  v17 = v25;
  v21 = v0;
  v19 = v0;
  v12 = sub_100005360(&qword_100115CA0);
  v13 = sub_100005360(&qword_100115CA8);
  v14 = sub_100008078(&qword_100115CB0, &qword_100115CA0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v15 = sub_100008078(&qword_100115CB8, &qword_100115CA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)(v2, v4, v8, v6, v10, v11, v17, 0, sub_100052D74, v20, sub_100052D7C, v18, v12, v13, &type metadata for Text, v14, v15, &protocol witness table for Text);
  swift_release(v11);
  swift_release(v10);
  sub_10002DD44(v2, v4, v8);
  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_1000527A4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  void (*v44)(char *, char *, uint64_t);
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, _QWORD, uint64_t, uint64_t);
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  char *v65;
  char v66[16];
  uint64_t v67;
  char v68[16];
  uint64_t v69;
  _QWORD v70[2];

  v65 = a2;
  v3 = type metadata accessor for KeyEquivalent(0);
  v62 = *(_QWORD *)(v3 - 8);
  v63 = (void (*)(char *, uint64_t))v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005360(&qword_100115CC0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100005360(&qword_100115CC8);
  v54 = *(_QWORD *)(v60 - 8);
  v11 = v54;
  __chkstk_darwin(v60, v12);
  v64 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v54 - v16;
  v61 = sub_100005360(&qword_100115CD0);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61, v18);
  v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21, v22);
  v58 = (char *)&v54 - v24;
  static ButtonRole.destructive.getter(v23);
  v25 = type metadata accessor for ButtonRole(0);
  v57 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v57(v10, 0, 1, v25);
  v26 = *(_QWORD *)(a1 + 8);
  v70[0] = *(_QWORD *)a1;
  v27 = *(_QWORD *)(a1 + 48);
  v55 = v26;
  v56 = v27;
  v28 = swift_allocObject(&unk_10010A548, 72, 7);
  v29 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v28 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v28 + 32) = v29;
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v28 + 64) = *(_QWORD *)(a1 + 48);
  v69 = a1;
  sub_100052DCC(v70);
  swift_retain(v26);
  swift_retain(v27);
  v30 = Button.init(role:action:label:)(v10, sub_100052DBC, v28, sub_100052DC4, v68, &type metadata for Text, &protocol witness table for Text);
  static KeyEquivalent.delete.getter(v30);
  v31 = EventModifiers.init(rawValue:)(0);
  v32 = sub_100008078(&qword_100115CD8, &qword_100115CC8, (uint64_t)&protocol conformance descriptor for Button<A>);
  v33 = v20;
  v34 = v31;
  v35 = v60;
  View.keyboardShortcut(_:modifiers:)(v6, v34, v60, v32);
  (*(void (**)(char *, _QWORD))(v62 + 8))(v6, v63);
  v63 = *(void (**)(char *, uint64_t))(v11 + 8);
  v63(v17, v35);
  v37 = v58;
  v36 = v59;
  v38 = v33;
  v39 = v33;
  v40 = v61;
  v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v59 + 32))(v58, v38, v61);
  static ButtonRole.cancel.getter(v41);
  v57(v10, 0, 1, v25);
  v42 = swift_allocObject(&unk_10010A570, 72, 7);
  v43 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v42 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v42 + 32) = v43;
  *(_OWORD *)(v42 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v42 + 64) = *(_QWORD *)(a1 + 48);
  v67 = a1;
  sub_100052DCC(v70);
  swift_retain(v55);
  swift_retain(v56);
  Button.init(role:action:label:)(v10, sub_100052E2C, v42, sub_100052E7C, v66, &type metadata for Text, &protocol witness table for Text);
  v44 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v44(v39, v37, v40);
  v45 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v46 = v64;
  v45(v64, v17, v35);
  v47 = v65;
  v44(v65, v39, v40);
  v48 = &v47[*(int *)(sub_100005360(&qword_100115CE0) + 48)];
  v49 = v35;
  v45(v48, v46, v35);
  v50 = v35;
  v51 = v63;
  v63(v17, v50);
  v52 = *(void (**)(char *, uint64_t))(v36 + 8);
  v52(v37, v40);
  v51(v46, v49);
  return ((uint64_t (*)(char *, uint64_t))v52)(v39, v40);
}

uint64_t sub_100052BC4(void (**a1)(void))
{
  uint64_t v2;
  char v4;
  __int128 v5;
  char v6;

  a1[5]();
  v5 = *(_OWORD *)a1;
  v6 = *((_BYTE *)a1 + 16);
  v4 = 0;
  v2 = sub_100005360(&qword_100115300);
  return Binding.wrappedValue.setter(&v4, v2);
}

uint64_t sub_100052C20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10[2];
  _BYTE v11[16];

  sub_100052E84((uint64_t *)(a1 + 24), (uint64_t)v10);
  sub_100052E84(v10, (uint64_t)v11);
  if ((v11[8] & 1) != 0)
  {
    v3 = 0x41206574656C6544;
    v4 = 0xEA00000000006C6CLL;
  }
  else
  {
    v3 = 0x6574656C6544;
    v4 = 0xE600000000000000;
  }
  v5 = LocalizedStringKey.init(stringLiteral:)(v3, v4);
  result = Text.init(_:tableName:bundle:comment:)(v5);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v8 & 1;
  *(_QWORD *)(a2 + 24) = v9;
  return result;
}

uint64_t sub_100052CC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0x6C65636E6143, 0xE600000000000000);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100052D34()
{
  return sub_1000525E0();
}

uint64_t sub_100052D74@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000527A4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_100052D7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  result = sub_10004A1FC(*(_QWORD *)(*(_QWORD *)(v1 + 16) + 24), *(_BYTE *)(*(_QWORD *)(v1 + 16) + 32));
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100052DBC()
{
  uint64_t v0;

  return sub_100052BC4((void (**)(void))(v0 + 16));
}

uint64_t sub_100052DC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100052C20(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_100052DCC(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_100052DF8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100052E2C()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(v0 + 16);
  v5 = *(_BYTE *)(v0 + 32);
  v3 = 0;
  v1 = sub_100005360(&qword_100115300);
  return Binding.wrappedValue.setter(&v3, v1);
}

uint64_t sub_100052E7C@<X0>(uint64_t a1@<X8>)
{
  return sub_100052CC8(a1);
}

uint64_t sub_100052E84(uint64_t *a1, uint64_t a2)
{
  initializeWithTake for CalculatorModeSwitchPPTTests(a2, a1);
  return a2;
}

uint64_t sub_100052EC0()
{
  _QWORD v1[6];

  v1[0] = sub_100005608(&qword_100115CA0);
  v1[1] = sub_100005608(&qword_100115CA8);
  v1[2] = &type metadata for Text;
  v1[3] = sub_100008078(&qword_100115CB0, &qword_100115CA0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v1[4] = sub_100008078(&qword_100115CB8, &qword_100115CA8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v1[5] = &protocol witness table for Text;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:message:)>>, 1);
}

uint64_t sub_100052F74()
{
  uint64_t result;

  result = static Color.orange.getter();
  qword_10011FC88 = result;
  return result;
}

uint64_t sub_100052F90()
{
  uint64_t result;

  result = static Color.primary.getter();
  qword_10011FC90 = result;
  return result;
}

uint64_t sub_100052FAC()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_10011FC98 = result;
  return result;
}

uint64_t sub_100052FC8(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113DC0, &qword_10011FD68, &qword_10011FCA0, (uint64_t)sub_100053398);
}

uint64_t sub_100052FEC(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113CF0, &qword_10011FC98, &qword_10011FCA8, (uint64_t)sub_100052FAC);
}

uint64_t sub_100053010(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v7;

  if (*a2 != -1)
    swift_once(a2, a5);
  v7 = *a3;
  *a4 = *a3;
  return swift_retain(v7);
}

uint64_t sub_100053054()
{
  uint64_t result;

  result = static Color.primary.getter();
  qword_10011FCB0 = result;
  return result;
}

uint64_t sub_100053070(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113CE0, &qword_10011FC88, &qword_10011FCB8, (uint64_t)sub_100052F74);
}

uint64_t sub_100053094()
{
  uint64_t result;

  result = static Color.white.getter();
  qword_10011FCC0 = result;
  return result;
}

uint64_t sub_1000530B0(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113CE0, &qword_10011FC88, &qword_10011FCC8, (uint64_t)sub_100052F74);
}

uint64_t sub_1000530D4()
{
  uint64_t result;

  result = static Color.white.getter();
  qword_10011FCD0 = result;
  return result;
}

uint64_t sub_1000530F0(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113D88, &qword_10011FD30, &qword_10011FCD8, (uint64_t)sub_100053240);
}

uint64_t sub_100053114(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113CE0, &qword_10011FC88, &qword_10011FCE0, (uint64_t)sub_100052F74);
}

uint64_t sub_100053138()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_10011FCE8 = result;
  return result;
}

uint64_t sub_100053154(uint64_t a1)
{
  return sub_1000532C4(1.0, 0.623529412, 0.0392156863, a1, &qword_10011FCF0);
}

uint64_t sub_100053174()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_10011FCF8 = result;
  return result;
}

uint64_t sub_100053190()
{
  uint64_t result;

  result = static Color.primary.getter();
  qword_10011FD00 = result;
  return result;
}

uint64_t sub_1000531AC()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_10011FD08 = result;
  return result;
}

uint64_t sub_1000531C8()
{
  uint64_t result;

  result = static Color.clear.getter();
  qword_10011FD10 = result;
  return result;
}

uint64_t sub_1000531E4()
{
  uint64_t result;

  result = static Color.red.getter();
  qword_10011FD18 = result;
  return result;
}

uint64_t sub_100053200(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113D90, &qword_10011FD38, &qword_10011FD20, (uint64_t)sub_100053254);
}

uint64_t sub_100053224()
{
  uint64_t result;

  result = static Color.secondary.getter();
  qword_10011FD28 = result;
  return result;
}

uint64_t sub_100053240(uint64_t a1)
{
  return sub_100053540(a1, (SEL *)&selRef_tertiaryLabelColor, &qword_10011FD30);
}

uint64_t sub_100053254(uint64_t a1)
{
  return sub_1000533AC(0.65, a1, &qword_10011FD38);
}

uint64_t sub_100053268(uint64_t a1)
{
  return sub_100053424(0.55, a1, &qword_10011FD40);
}

uint64_t sub_10005327C(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113CE0, &qword_10011FC88, &qword_10011FD48, (uint64_t)sub_100052F74);
}

uint64_t sub_1000532A0(uint64_t a1)
{
  return sub_1000532C4(0.988235294, 0.780392157, 0.552941176, a1, &qword_10011FD50);
}

uint64_t sub_1000532C4(double a1, double a2, double a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v9 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v13 + 104))(v12, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v12, a1, a2, a3, 1.0);
  *a5 = result;
  return result;
}

uint64_t sub_10005336C(uint64_t a1)
{
  return sub_1000533AC(0.3, a1, &qword_10011FD58);
}

uint64_t sub_100053384(uint64_t a1)
{
  return sub_100053424(0.45, a1, &qword_10011FD60);
}

uint64_t sub_100053398(uint64_t a1)
{
  return sub_1000533AC(0.2, a1, &qword_10011FD68);
}

uint64_t sub_1000533AC(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = static Color.gray.getter();
  v6 = Color.opacity(_:)(a1);
  result = swift_release(v5);
  *a3 = v6;
  return result;
}

uint64_t sub_1000533FC(uint64_t a1)
{
  return sub_100053424(0.3, a1, &qword_10011FD70);
}

uint64_t sub_100053414(uint64_t a1)
{
  return sub_100053424(0.5, a1, &qword_10011FD78);
}

uint64_t sub_100053424(double a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v9 + 104))(v8, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:white:opacity:)(v8, a1, 1.0);
  *a3 = result;
  return result;
}

uint64_t sub_1000534B4(uint64_t a1)
{
  return sub_100053540(a1, (SEL *)&selRef_secondarySystemFillColor, &qword_10011FD80);
}

uint64_t sub_1000534C8(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113DC0, &qword_10011FD68, &qword_10011FD88, (uint64_t)sub_100053398);
}

uint64_t sub_1000534EC()
{
  uint64_t result;

  result = static Color.gray.getter();
  qword_10011FD90 = result;
  return result;
}

uint64_t sub_100053508(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113CE0, &qword_10011FC88, &qword_10011FD98, (uint64_t)sub_100052F74);
}

uint64_t sub_10005352C(uint64_t a1)
{
  return sub_100053540(a1, (SEL *)&selRef_separatorColor, &qword_10011FDA0);
}

uint64_t sub_100053540(uint64_t a1, SEL *a2, uint64_t *a3)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), *a2);
  result = Color.init(uiColor:)(v4);
  *a3 = result;
  return result;
}

uint64_t sub_100053584(uint64_t a1)
{
  return sub_100053010(a1, &qword_100113CF8, &qword_10011FCA0, &qword_10011FDA8, (uint64_t)sub_100052FC8);
}

uint64_t sub_1000535A8()
{
  uint64_t result;

  result = static Color.clear.getter();
  qword_10011FDB0 = result;
  return result;
}

uint64_t sub_1000535C4()
{
  unint64_t v0;
  uint64_t v2;

  v0 = sub_10000765C();
  EnvironmentValues.subscript.getter(&v2, &type metadata for ModeMenuPresentationKey, &type metadata for ModeMenuPresentationKey, v0);
  return v2;
}

_QWORD *sub_100053600()
{
  char v1;

  v1 = 0;
  return static Binding.constant(_:)(&qword_100115CE8, &v1, &type metadata for ModeMenuPresentationState);
}

uint64_t sub_100053634@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (qword_100113E10 != -1)
    swift_once(&qword_100113E10, sub_100053600);
  v2 = qword_100115CE8;
  v3 = unk_100115CF0;
  v4 = byte_100115CF8;
  *(_QWORD *)a1 = qword_100115CE8;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  swift_retain(v2);
  return swift_retain(v3);
}

uint64_t EnvironmentValues.isModeMenuPresented.getter()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v5;
  _QWORD v6[2];

  v0 = sub_10000765C();
  EnvironmentValues.subscript.getter(v6, &type metadata for ModeMenuPresentationKey, &type metadata for ModeMenuPresentationKey, v0);
  v1 = v6[0];
  v2 = v6[1];
  v3 = sub_100005360(&qword_100113FB0);
  Binding.wrappedValue.getter(&v5, v3);
  swift_release(v2);
  swift_release(v1);
  return v5;
}

uint64_t getEnumTagSinglePayload for ModeMenuPresentationState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ModeMenuPresentationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10005380C + 4 * byte_1000D0695[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100053840 + 4 * byte_1000D0690[v4]))();
}

uint64_t sub_100053840(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053848(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100053850);
  return result;
}

uint64_t sub_10005385C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100053864);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100053868(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100053870(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ModeMenuPresentationState()
{
  return &type metadata for ModeMenuPresentationState;
}

ValueMetadata *type metadata accessor for ModeMenuPresentationKey()
{
  return &type metadata for ModeMenuPresentationKey;
}

uint64_t destroy for DismissModeMenuAction(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

ValueMetadata *type metadata accessor for DismissModeMenuAction()
{
  return &type metadata for DismissModeMenuAction;
}

uint64_t _s10Calculator21PresentModeMenuActionVwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for HistoryViewFirstLaunch(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t assignWithTake for HistoryViewFirstLaunch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for HistoryViewFirstLaunch(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HistoryViewFirstLaunch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PresentModeMenuAction()
{
  return &type metadata for PresentModeMenuAction;
}

void sub_100053A68(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000D07F0, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed, a2);
}

double sub_100053A7C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D07F0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100055E28, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100053B24(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000D07C8, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed, a2);
}

double sub_100053B38(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D07C8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100055E44, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

void sub_100053BE0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000D07A0, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed, a2);
}

double sub_100053BF4(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D07A0);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100055E60, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100053C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v8;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
  v8 = a2;
  sub_100054A4C(a1, (uint64_t)sub_100054A10, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v8);
  v6 = v8;
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v2)
    swift_bridgeObjectRelease(v6);
  return v6;
}

uint64_t sub_100053D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  char *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  Swift::String v31;
  Swift::String v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int16 v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;

  v45 = a2;
  v46 = a3;
  v44 = a1;
  v49 = a4;
  v48 = type metadata accessor for AttributedString.FormattingOptions(0);
  __chkstk_darwin(v48, v4);
  v47 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005360(&qword_100114A98);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0, v8);
  v13 = __chkstk_darwin(v11, v12);
  v43 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for AttributedString.InterpolationOptions(0, v13);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for String.LocalizationValue.StringInterpolation(0, v18);
  v23 = __chkstk_darwin(v21, v22);
  v25 = (char *)&v42 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 2, v23);
  v26._countAndFlagsBits = 0x202C7475706E49;
  v26._object = (void *)0xE700000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v26);
  v50 = _swiftEmptyArrayStorage;
  v27 = sub_100005178(&qword_100115DD0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.InterpolationOptions, (uint64_t)&protocol conformance descriptor for AttributedString.InterpolationOptions);
  v28 = sub_100005360(&qword_100115DD8);
  v29 = sub_100057064(&qword_100115DE0, &qword_100115DD8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v28, v29, v15, v27);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)(v44, v20);
  v30 = *(void (**)(char *, uint64_t))(v16 + 8);
  v30(v20, v15);
  v31._countAndFlagsBits = 0x746C75736572202CLL;
  v31._object = (void *)0xEA0000000000202CLL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v31);
  v50 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v28, v29, v15, v27);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:options:)(v45, v20);
  v30(v20, v15);
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v32);
  v33 = v43;
  String.LocalizationValue.init(stringInterpolation:)(v25);
  v34 = type metadata accessor for Locale(0);
  v35 = *(_QWORD *)(v34 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v10, v46, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v10, 0, 1, v34);
  v50 = _swiftEmptyArrayStorage;
  v36 = sub_100005178(&qword_100114AB0, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.FormattingOptions, (uint64_t)&protocol conformance descriptor for AttributedString.FormattingOptions);
  v37 = sub_100005360(&qword_100114AB8);
  v38 = sub_100057064((unint64_t *)&qword_100114AC0, &qword_100114AB8);
  v39 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v37, v38, v48, v36);
  v41 = 256;
  return AttributedString.init(localized:options:table:bundle:locale:comment:)(v33, v39, 0, 0, 0, v10, 0, 0, v41);
}

uint64_t type metadata accessor for Utilities()
{
  return objc_opt_self(_TtC10Calculator9Utilities);
}

id sub_1000540B0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D0818);
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 16);
  *a2 = v6;
  return v6;
}

void sub_10005413C(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D0818);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100056228, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

uint64_t sub_1000541F0(uint64_t a1, int64_t a2, uint64_t a3)
{
  unint64_t *v3;
  unint64_t v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  char v28;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  *v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(_QWORD *)(v5 + 24) >> 1)
  {
    if (v6 <= v10)
      v13 = v6 + v9;
    else
      v13 = v6;
    v5 = sub_100071BF8(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *v3 = v5;
  }
  v14 = type metadata accessor for FilteredHistoryRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  v18 = v16 + v17 * a1;
  swift_arrayDestroy(v18, v8, v14);
  if (!v9)
    goto LABEL_25;
  v19 = *(_QWORD *)(v5 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_33;
  if (v20 < 0)
  {
LABEL_35:
    v28 = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
    __break(1u);
    return result;
  }
  v21 = v18 + v17;
  v22 = v16 + v17 * a2;
  if (v18 + v17 < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack(v21, v22, v20, v14);
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront(v21);
  }
  v24 = *(_QWORD *)(v5 + 16);
  v25 = __OFADD__(v24, v9);
  v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  *(_QWORD *)(v5 + 16) = v26;
LABEL_25:
  if (v17 >= 1)
    sub_1000174EC(a3, v18);
  return sub_100004F48(a3, &qword_100114330);
}

uint64_t sub_1000543BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v26 = v7;
    else
      v26 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v7);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v29 = v7;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v7);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    v17 = (char *)swift_bridgeObjectRelease(v7);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100054694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v7 = a1;
    v6 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v6 < 0)
    v24 = v6;
  else
    v24 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v6);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v6 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v6 < 0)
      v26 = v6;
    else
      v26 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v6);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v6);
    goto LABEL_15;
  }
LABEL_37:
  if (v6 < 0)
    v25 = v6;
  else
    v25 = v6 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v6);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v6);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v6 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v6;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v6 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v6);
  v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v6);
  swift_bridgeObjectRelease(*v4);
  *v4 = v6;
  v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v7);
  v16 = sub_10000A5A8(0, (unint64_t *)&qword_1001145E0, CalculateUnit_ptr);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v6 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v6 < 0)
    v27 = v6;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v6);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v6);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v6 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v6 < 0)
      v29 = v6;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v6);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    v17 = (char *)swift_bridgeObjectRelease(v6);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_10005497C(unint64_t a1)
{
  return sub_100071BF8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_100054994(_QWORD *a1)
{
  return sub_100072018(0, a1[2], 0, a1);
}

uint64_t sub_1000549A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

id sub_100054A10@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;

  v4 = *a1;
  sub_1000052E0((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  *a2 = v4;
  return v4;
}

void sub_100054A4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *i;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  unint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  _OWORD v45[2];
  void *v46;
  _OWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v9 = -1 << *(_BYTE *)(a1 + 32);
  v10 = ~v9;
  v11 = *(_QWORD *)(a1 + 64);
  v12 = -v9;
  v48 = a1;
  v49 = a1 + 64;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  else
    v13 = -1;
  v50 = v10;
  v51 = 0;
  v52 = v13 & v11;
  v53 = a2;
  v54 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_100054D74((uint64_t)&v46);
  v14 = v46;
  if (!v46)
    goto LABEL_27;
  sub_1000054E8(v47, v45);
  v15 = *(_QWORD **)a5;
  v17 = sub_10001CA24((uint64_t)v14);
  v18 = v15[2];
  v19 = (v16 & 1) == 0;
  v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v21 = v16;
  if (v15[3] >= v20)
  {
    if ((a4 & 1) != 0)
    {
      if ((v16 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      sub_10001DBE8();
      if ((v21 & 1) != 0)
        goto LABEL_12;
    }
LABEL_14:
    v25 = *(_QWORD **)a5;
    *(_QWORD *)(*(_QWORD *)a5 + 8 * (v17 >> 6) + 64) |= 1 << v17;
    *(_QWORD *)(v25[6] + 8 * v17) = v14;
    sub_1000054E8(v45, (_OWORD *)(v25[7] + 32 * v17));
    v26 = v25[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v25[2] = v28;
LABEL_16:
    sub_100054D74((uint64_t)&v46);
    for (i = v46; v46; i = v46)
    {
      sub_1000054E8(v47, v45);
      v31 = *(_QWORD **)a5;
      v33 = sub_10001CA24((uint64_t)i);
      v34 = v31[2];
      v35 = (v32 & 1) == 0;
      v36 = v34 + v35;
      if (__OFADD__(v34, v35))
        goto LABEL_28;
      v37 = v32;
      if (v31[3] < v36)
      {
        sub_10001D0D8(v36, 1);
        v38 = sub_10001CA24((uint64_t)i);
        if ((v37 & 1) != (v39 & 1))
          goto LABEL_30;
        v33 = v38;
      }
      if ((v37 & 1) != 0)
      {
        sub_1000052E0((uint64_t)v45, (uint64_t)v44);
        sub_100004F28(v45);

        v30 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v33);
        sub_100004F28(v30);
        sub_1000054E8(v44, v30);
      }
      else
      {
        v40 = *(_QWORD **)a5;
        *(_QWORD *)(*(_QWORD *)a5 + 8 * (v33 >> 6) + 64) |= 1 << v33;
        *(_QWORD *)(v40[6] + 8 * v33) = i;
        sub_1000054E8(v45, (_OWORD *)(v40[7] + 32 * v33));
        v41 = v40[2];
        v27 = __OFADD__(v41, 1);
        v42 = v41 + 1;
        if (v27)
          goto LABEL_29;
        v40[2] = v42;
      }
      sub_100054D74((uint64_t)&v46);
    }
LABEL_27:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100014B78(v48);
    swift_release(v54);
    return;
  }
  sub_10001D0D8(v20, a4 & 1);
  v22 = sub_10001CA24((uint64_t)v14);
  if ((v21 & 1) == (v23 & 1))
  {
    v17 = v22;
    if ((v21 & 1) == 0)
      goto LABEL_14;
LABEL_12:
    sub_1000052E0((uint64_t)v45, (uint64_t)v44);
    sub_100004F28(v45);

    v24 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + 32 * v17);
    sub_100004F28(v24);
    sub_1000054E8(v44, v24);
    goto LABEL_16;
  }
LABEL_30:
  type metadata accessor for CalculateKey(0);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v43);
  __break(1u);
}

uint64_t sub_100054D74@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void (*v18)(_OWORD *);
  uint64_t result;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v10);
    sub_1000052E0(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(_QWORD *)&v24[0] = v11;
    v12 = v11;
    goto LABEL_23;
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    v15 = *(_QWORD *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      v9 = (v15 - 1) & v15;
      v10 = __clz(__rbit64(v15)) + (v13 << 6);
      v7 = v13;
      goto LABEL_3;
    }
    v16 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      v15 = *(_QWORD *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        v13 = v16;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        v15 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          v13 = v5 + 3;
          goto LABEL_7;
        }
        v16 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          v15 = *(_QWORD *)(v4 + 8 * v16);
          if (v15)
            goto LABEL_10;
          v13 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            v15 = *(_QWORD *)(v4 + 8 * v13);
            if (v15)
              goto LABEL_7;
            v7 = v14 - 1;
            v17 = v5 + 6;
            while (v14 != v17)
            {
              v15 = *(_QWORD *)(v4 + 8 * v17++);
              if (v15)
              {
                v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v18 = (void (*)(_OWORD *))v1[5];
  result = sub_100007CD8((uint64_t)v24, (uint64_t)v22, &qword_100115DB8);
  if (*(_QWORD *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    v21 = v23;
    v18(v20);
    return sub_100004F48((uint64_t)v20, &qword_100115DC0);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t sub_100054F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t inited;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[112];

  v33 = a1;
  v3 = type metadata accessor for UUID(0);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CalculateExpression.Base(0, v5);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100115D98);
  inited = swift_initStackObject(v13, v34);
  *(_OWORD *)(inited + 16) = xmmword_1000D0760;
  v15 = (void *)CalculateKeyLocales;
  *(_QWORD *)(inited + 32) = CalculateKeyLocales;
  v16 = sub_100005360(&qword_100115DA8);
  *(_QWORD *)(inited + 40) = _swiftEmptyArrayStorage;
  v17 = (void *)CalculateKeyAllowPartialExpressions;
  *(_QWORD *)(inited + 64) = v16;
  *(_QWORD *)(inited + 72) = v17;
  v18 = objc_allocWithZone((Class)NSNumber);
  swift_bridgeObjectRetain(a2);
  v19 = v15;
  v20 = v17;
  v21 = objc_msgSend(v18, "initWithBool:", 1);
  *(_QWORD *)(inited + 104) = sub_10000A5A8(0, (unint64_t *)&qword_100115DB0, NSNumber_ptr);
  *(_QWORD *)(inited + 80) = v21;
  v22 = sub_10001C104(inited);
  v23 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for CalculateExpression.Base.base10(_:), v8);
  UUID.init()(v23);
  v24 = type metadata accessor for CalculateExpression(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  v25 = CalculateExpression.init(_:options:base:id:)(v33, a2, v22, v12, v7);
  v26 = sub_100005360(&qword_100115DA0);
  v27 = type metadata accessor for Locale(0);
  v28 = swift_allocObject(v26, ((*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v27 - 8) + 80) | 7);
  *(_OWORD *)(v28 + 16) = xmmword_1000CD7E0;
  Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
  v29 = CalculateExpression.locales.setter(v28);
  v30 = CalculateExpression.expression.getter(v29);
  swift_release(v25);
  return v30;
}

uint64_t sub_1000551A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = (void *)swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = (void *)swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100055470(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100071BF8(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for FilteredHistoryRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100055618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t inited;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  _BYTE v40[160];

  v39[0] = a1;
  v5 = type metadata accessor for UUID(0);
  v7 = __chkstk_darwin(v5, v6);
  v9 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CalculateExpression.Base(0, v7);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005360(&qword_100115D98);
  inited = swift_initStackObject(v15, v40);
  *(_OWORD *)(inited + 16) = xmmword_1000D0770;
  v17 = (void *)CalculateKeyLocales;
  *(_QWORD *)(inited + 32) = CalculateKeyLocales;
  v18 = sub_100005360(&qword_100115DA0);
  v19 = type metadata accessor for Locale(0);
  v20 = swift_allocObject(v18, ((*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80) | 7);
  *(_OWORD *)(v20 + 16) = xmmword_1000CD7E0;
  v21 = v17;
  Locale.init(identifier:)(0x53555F6E65, 0xE500000000000000);
  v22 = sub_100005360(&qword_100115DA8);
  *(_QWORD *)(inited + 40) = v20;
  v23 = (void *)CalculateKeyAllowPartialExpressions;
  *(_QWORD *)(inited + 64) = v22;
  *(_QWORD *)(inited + 72) = v23;
  v24 = objc_allocWithZone((Class)NSNumber);
  v25 = v23;
  v26 = objc_msgSend(v24, "initWithBool:", 1);
  v27 = sub_10000A5A8(0, (unint64_t *)&qword_100115DB0, NSNumber_ptr);
  *(_QWORD *)(inited + 80) = v26;
  v28 = (void *)CalculateKeyScientificNotationFormat;
  *(_QWORD *)(inited + 104) = v27;
  *(_QWORD *)(inited + 112) = v28;
  v29 = objc_allocWithZone((Class)NSNumber);
  v30 = v28;
  v31 = objc_msgSend(v29, "initWithUnsignedInteger:", 0);
  *(_QWORD *)(inited + 144) = v27;
  *(_QWORD *)(inited + 120) = v31;
  v32 = sub_10001C104(inited);
  swift_bridgeObjectRetain(a3);
  v34 = sub_100053C9C(v33, v32);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for CalculateExpression.Base.base10(_:), v10);
  swift_bridgeObjectRetain(a2);
  UUID.init()(v35);
  v36 = type metadata accessor for CalculateExpression(0);
  swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v37 = CalculateExpression.init(_:options:base:id:)(v39[0], a2, v34, v14, v9);
  CalculateExpression.locales.setter(_swiftEmptyArrayStorage);
  return v37;
}

void sub_1000558B0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100055918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  uint64_t v3;
  char v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21[18];

  KeyPath = swift_getKeyPath(&unk_1000D07F0);
  v21[0] = v1;
  v3 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v21, KeyPath, v3);
  swift_release(KeyPath);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed) & 1) != 0)
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, 0xEA00000000006369, 0x657061506874616DLL, 0xE900000000000072, 0);
    swift_bridgeObjectRelease(0xEA00000000006369);
    if ((v4 & 1) != 0)
    {
      if (qword_100113F40 != -1)
        swift_once(&qword_100113F40, sub_1000BF928);
      LOBYTE(v21[0]) = 0;
      v5 = SBSGetScreenLockStatus(v21);
      if (LOBYTE(v21[0]) && v5)
        __asm { BR              X10 }
    }
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, 0xEA00000000006369, 0x6369736162, 0xE500000000000000, 0);
    swift_bridgeObjectRelease(0xEA00000000006369);
    if ((v6 & 1) == 0)
    {
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v7 = type metadata accessor for Logger(0);
      v8 = sub_100014124(v7, (uint64_t)qword_10011FEA8);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        v11 = swift_slowAlloc(22, -1);
        v12 = swift_slowAlloc(64, -1);
        v21[0] = v12;
        *(_DWORD *)v11 = 136446466;
        LOBYTE(v20) = 0;
        v13 = String.init<A>(describing:)(&v20, &type metadata for CalculatorAppMode);
        v15 = v14;
        v20 = sub_100029918(v13, v14, v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21);
        swift_bridgeObjectRelease(v15);
        *(_WORD *)(v11 + 12) = 2082;
        LOBYTE(v20) = v0;
        v16 = String.init<A>(describing:)(&v20, &type metadata for CalculatorAppMode);
        v18 = v17;
        v20 = sub_100029918(v16, v17, v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21);
        swift_bridgeObjectRelease(v18);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "forced mode: %{public}s from current mode: %{public}s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v12, -1, -1);
        swift_slowDealloc(v11, -1, -1);
      }

      return 0;
    }
  }
  return v0;
}

void sub_100055DB0(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000D07A0, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeProgrammerAllowed, a2);
}

void sub_100055DD8(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000D07C8, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed, a2);
}

void sub_100055E00(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  sub_10002892C(a1, (uint64_t)&unk_1000D07F0, &OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed, a2);
}

uint64_t sub_100055E28()
{
  uint64_t v0;

  return sub_100046770(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100055E44()
{
  uint64_t v0;

  return sub_1000467A4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100055E60()
{
  uint64_t v0;

  return sub_1000467C8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100055E7C()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD v8[2];
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v0 = (void *)qword_10011FED8;
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100007CD8((uint64_t)v9, (uint64_t)v10, &qword_100114A20);
  if (!v11)
  {
    sub_100004F48((uint64_t)v10, &qword_100114A20);
    return 0;
  }
  if ((swift_dynamicCast(v8, v10, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  v3 = v8[0];
  v4 = v8[1];
  v5 = sub_10001C104((uint64_t)_swiftEmptyArrayStorage);
  v6 = sub_100055618(v3, v4, v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return v6;
}

id sub_100055FDC()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  _QWORD v12[2];
  _OWORD v13[2];
  _QWORD v14[4];

  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v0 = (void *)qword_10011FED8;
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v13, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  sub_100007CD8((uint64_t)v13, (uint64_t)v14, &qword_100114A20);
  if (!v14[3])
  {
    sub_100004F48((uint64_t)v14, &qword_100114A20);
    return 0;
  }
  if ((swift_dynamicCast(v12, v14, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    return 0;
  v3 = v12[1];
  if (qword_100113E60 != -1)
    swift_once(&qword_100113E60, sub_10007DD3C);
  v4 = qword_10011FE08;
  KeyPath = swift_getKeyPath(&unk_1000D0818);
  v14[0] = v4;
  v6 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v14, KeyPath, v6);
  swift_release(KeyPath);
  v7 = *(id *)(v4 + 16);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  v9 = objc_msgSend(v7, "findUnitWithName:", v8);

  if (v9)
  {
    v10 = objc_msgSend(v9, "shortName");

    v9 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  }
  return v9;
}

void sub_100056228()
{
  uint64_t v0;

  sub_10007DD78(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100056240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_10000A5A8(0, (unint64_t *)&qword_100115DC8, UIApplicationShortcutItem_ptr);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = (void *)swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = (void *)swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_10005651C()
{
  id v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSArray v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  unint64_t v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;

  v50 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v0 = objc_msgSend(v50, "shortcutItems");
  if (!v0)
  {
    objc_msgSend(v50, "setShortcutItems:", 0);
    swift_bridgeObjectRelease(0);

    return;
  }
  v1 = v0;
  v49 = sub_10000A5A8(0, (unint64_t *)&qword_100115DC8, UIApplicationShortcutItem_ptr);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v49);

  v51 = v2;
  v3 = (unint64_t)v2 >> 62;
  if ((unint64_t)v2 >> 62)
  {
LABEL_30:
    if (v2 < 0)
      v19 = v2;
    else
      v19 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v4 = _CocoaArrayWrapper.endIndex.getter(v19);
    if (v4)
      goto LABEL_4;
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v2);
    if (v4)
    {
LABEL_4:
      v5 = 0;
      while (1)
      {
        if ((v2 & 0xC000000000000001) != 0)
          v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
        else
          v6 = *(id *)(v2 + 8 * v5 + 32);
        v7 = v6;
        v8 = objc_msgSend(v6, "type");
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        v11 = v10;

        if (v9 == 0x7473614C79706F63 && v11 == 0xEE00746C75736552)
        {
          swift_bridgeObjectRelease(v2);

          v15 = 0xEE00746C75736552;
          goto LABEL_20;
        }
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, 0x7473614C79706F63, 0xEE00746C75736552, 0);

        swift_bridgeObjectRelease(v11);
        if ((v13 & 1) != 0)
          break;
        v14 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
          __break(1u);
          goto LABEL_30;
        }
        ++v5;
        if (v14 == v4)
          goto LABEL_15;
      }
      v15 = v2;
LABEL_20:
      swift_bridgeObjectRelease(v15);
      v16 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
        __break(1u);
      }
      else if (!v3)
      {
        if (v16 == *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_23;
LABEL_49:
        v24 = v5 + 5;
        while (1)
        {
          v25 = v24 - 4;
          if ((v2 & 0xC000000000000001) != 0)
          {
            v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v2);
          }
          else
          {
            if ((v25 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
              return;
            }
            if (v25 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_93;
            v26 = *(id *)(v2 + 8 * v24);
          }
          v27 = v26;
          v28 = objc_msgSend(v26, "type");
          v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
          v31 = v30;

          if (v29 == 0x7473614C79706F63 && v31 == 0xEE00746C75736552)
          {

            swift_bridgeObjectRelease(0xEE00746C75736552);
          }
          else
          {
            v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, 0x7473614C79706F63, 0xEE00746C75736552, 0);

            swift_bridgeObjectRelease(v31);
            if ((v33 & 1) == 0)
            {
              if (v25 != v5)
              {
                if ((v2 & 0xC000000000000001) != 0)
                {
                  v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
                  v37 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24 - 4, v2);
                }
                else
                {
                  if (v5 < 0)
                    goto LABEL_96;
                  v34 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
                  if (v5 >= v34)
                    goto LABEL_97;
                  v35 = *(id *)(v2 + 8 * v5 + 32);
                  if ((v25 & 0x8000000000000000) != 0)
                    goto LABEL_98;
                  if (v25 >= v34)
                    goto LABEL_99;
                  v36 = (uint64_t)v35;
                  v37 = *(id *)(v2 + 8 * v24);
                }
                v38 = v37;
                if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v2)
                  || v2 < 0
                  || (v2 & 0x4000000000000000) != 0)
                {
                  v2 = sub_1000549A8(v2);
                  v51 = v2;
                }
                v39 = *(void **)((v2 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
                *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20) = v38;

                specialized Array._endMutation()(v40);
                v41 = v51;
                if (!swift_isUniquelyReferenced_nonNull_bridgeObject(v51)
                  || v51 < 0
                  || (v51 & 0x4000000000000000) != 0)
                {
                  v41 = sub_1000549A8(v51);
                  v51 = v41;
                }
                if ((v25 & 0x8000000000000000) != 0)
                  goto LABEL_100;
                v42 = v41 & 0xFFFFFFFFFFFFFF8;
                if (v25 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_101;
                v43 = *(void **)(v42 + 8 * v24);
                *(_QWORD *)(v42 + 8 * v24) = v36;

                specialized Array._endMutation()(v44);
              }
              if (__OFADD__(v5++, 1))
                goto LABEL_95;
            }
          }
          v46 = v24 - 3;
          if (__OFADD__(v25, 1))
            goto LABEL_94;
          v2 = v51;
          if ((unint64_t)v51 >> 62)
          {
            if (v51 < 0)
              v48 = v51;
            else
              v48 = v51 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v51);
            v47 = _CocoaArrayWrapper.endIndex.getter(v48);
            swift_bridgeObjectRelease(v51);
          }
          else
          {
            v47 = *(_QWORD *)((v51 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          ++v24;
          if (v46 == v47)
            goto LABEL_23;
        }
      }
      if (v2 < 0)
        v22 = v2;
      else
        v22 = v2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v2);
      v23 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v2);
      if (v16 == v23)
        goto LABEL_23;
      goto LABEL_49;
    }
  }
LABEL_15:
  swift_bridgeObjectRelease(v2);
  if (v3)
    goto LABEL_40;
  v5 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_23:
  while (!((unint64_t)v2 >> 62))
  {
    v17 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17 >= v5)
      goto LABEL_25;
LABEL_39:
    __break(1u);
LABEL_40:
    if (v2 < 0)
      v21 = v2;
    else
      v21 = v2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v5 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v2);
  }
  if (v2 < 0)
    v20 = v2;
  else
    v20 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v17 = _CocoaArrayWrapper.endIndex.getter(v20);
  swift_bridgeObjectRelease(v2);
  if (v17 < v5)
    goto LABEL_39;
LABEL_25:
  sub_100056240(v5, v17);
  if (v51)
  {
    v18.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v51);
  }
  else
  {
    v18.super.isa = 0;
  }
  objc_msgSend(v50, "setShortcutItems:", v18.super.isa);

}

void sub_100056AE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(char *, uint64_t);
  id v44;
  NSURL *v45;
  void *v46;
  void *v47;
  unint64_t v48;
  Class isa;
  _QWORD v50[2];
  uint64_t v51;
  uint64_t v52;

  v2 = sub_100005360(&qword_100114860);
  __chkstk_darwin(v2, v3);
  v5 = (char *)v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v50 - v8;
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)v50 - v13;
  v15 = type metadata accessor for URL(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)v50 - v22;
  sub_10005701C(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100004F48((uint64_t)v14, &qword_100114860);
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v24 = type metadata accessor for Logger(0);
    sub_100014124(v24, (uint64_t)qword_10011FEA8);
    v25 = sub_10005701C(a1, (uint64_t)v9);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v52 = v29;
      *(_DWORD *)v28 = 136315138;
      sub_10005701C((uint64_t)v9, (uint64_t)v5);
      v30 = String.init<A>(describing:)(v5, v2);
      v32 = v31;
      v51 = sub_100029918(v30, v31, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v32);
      sub_100004F48((uint64_t)v9, &qword_100114860);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Can't open URL: %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_100004F48((uint64_t)v9, &qword_100114860);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v14, v15);
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v33 = type metadata accessor for Logger(0);
    sub_100014124(v33, (uint64_t)qword_10011FEA8);
    v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v16 + 16))(v19, v23, v15);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v52 = v38;
      *(_DWORD *)v37 = 136315138;
      v50[1] = v37 + 4;
      v39 = sub_100005178(&qword_100114A78, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v15, v39);
      v42 = v41;
      v51 = sub_100029918(v40, v41, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v42);
      v43 = *(void (**)(char *, uint64_t))(v16 + 8);
      v43(v19, v15);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "opening URL: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      v43 = *(void (**)(char *, uint64_t))(v16 + 8);
      v43(v19, v15);
    }

    v44 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    URL._bridgeToObjectiveC()(v45);
    v47 = v46;
    v48 = sub_10001C38C((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for OpenExternalURLOptionsKey(0);
    sub_100005178(&qword_100114078, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1000CD4F4);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v48);
    objc_msgSend(v44, "openURL:options:completionHandler:", v47, isa, 0);

    v43(v23, v15);
  }
}

uint64_t sub_10005701C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100114860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100057064(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100005608(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeWithCopy for CalculatorKeypadLayout(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for CalculatorKeypadLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  return a1;
}

__n128 initializeWithTake for CalculatorKeypadLayout(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for CalculatorKeypadLayout(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorKeypadLayout(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorKeypadLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorKeypadLayout()
{
  return &type metadata for CalculatorKeypadLayout;
}

unint64_t sub_10005725C()
{
  unint64_t result;

  result = qword_100115DE8;
  if (!qword_100115DE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_100115DE8);
  }
  return result;
}

void sub_1000572A0(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = v5;
  v12 = type metadata accessor for LayoutSubviews(0);
  v13 = sub_1000580FC((unint64_t *)&qword_100115E08, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(&v15, v12, v13);
  dispatch thunk of Collection.endIndex.getter(&v14, v12, v13);
  if (v15 != v14)
  {
    LOBYTE(v15) = a2 & 1;
    LOBYTE(v14) = a4 & 1;
    sub_1000573C8(a5, a1, a2 & 1, a3, a4 & 1);
    if (__OFSUB__(*(_QWORD *)(v6 + 16), 1))
    {
      __break(1u);
    }
    else if (!__OFSUB__(*(_QWORD *)(v6 + 8), 1))
    {
      return;
    }
    __break(1u);
  }
}

void sub_1000573C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  double *v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  double *v42;
  double v43;
  double v44;
  uint64_t v45;
  void (*v46)(_QWORD *, _QWORD);
  char *v47;
  char *v48;
  double v49;
  double v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  _QWORD v61[2];
  double v62;
  double v63;
  char *v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  _QWORD v70[4];

  LODWORD(v65) = a5;
  v10 = type metadata accessor for LayoutSubview(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v64 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360(&qword_100115DF8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LayoutSubviews(0);
  v67 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  v66 = (char *)v61 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100005360(&qword_100115E00);
  __chkstk_darwin(v21, v22);
  v68 = (uint64_t)v61 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a3 & 1) != 0 || (a2 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
  {
    v24 = a1;
    v25 = INFINITY;
  }
  else
  {
    v26 = *(_QWORD *)(v5 + 16);
    if (__OFSUB__(v26, 1))
    {
LABEL_38:
      __break(1u);
      return;
    }
    v24 = a1;
    v27 = *(double *)&a2 - *(double *)(v5 + 24) * (double)(v26 - 1);
    if (v27 < 0.0)
      v27 = 0.0;
    v25 = v27 / (double)v26;
  }
  v28 = *(_QWORD *)(v5 + 8);
  if (__OFSUB__(v28, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  v29 = *(double *)&a4;
  if ((v65 & 1) != 0)
    v29 = 10.0;
  v61[1] = v5;
  v30 = v29 - *(double *)(v5 + 24) * (double)(v28 - 1);
  if (v30 < 0.0)
    v31 = 0.0;
  else
    v31 = v30;
  v65 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v65(v66, v24, v18);
  v32 = sub_1000580FC((unint64_t *)&unk_100115E10, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  v33 = v68;
  dispatch thunk of Sequence.makeIterator()(v18, v32);
  v34 = (uint64_t *)(v33 + *(int *)(v21 + 36));
  v35 = sub_1000580FC((unint64_t *)&qword_100115E08, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  v36 = *v34;
  dispatch thunk of Collection.endIndex.getter(v70, v18, v35);
  if (v36 == v70[0])
  {
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v38 = (double *)_swiftEmptyArrayStorage;
LABEL_16:
    v37(v17, 1, 1, v10);
  }
  else
  {
    v62 = v31 / (double)v28;
    v63 = v25;
    v38 = (double *)_swiftEmptyArrayStorage;
    v45 = v68;
    while (1)
    {
      v46 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v70, v34, v18, v35);
      (*(void (**)(char *))(v11 + 16))(v17);
      v46(v70, 0);
      v47 = v66;
      v65(v66, v45, v18);
      dispatch thunk of Collection.formIndex(after:)(v34, v18, v35);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v47, v18);
      v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
      v37(v17, 0, 1, v10);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v17, 1, v10) == 1)
        break;
      v48 = v64;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v64, v17, v10);
      LOBYTE(v70[0]) = 0;
      v69 = 0;
      LayoutSubview.sizeThatFits(_:)(*(_QWORD *)&v63, 0, *(_QWORD *)&v62, 0);
      v50 = v49;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v48, v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        v38 = (double *)sub_100072110(0, *((_QWORD *)v38 + 2) + 1, 1, v38);
      v52 = *((_QWORD *)v38 + 2);
      v51 = *((_QWORD *)v38 + 3);
      if (v52 >= v51 >> 1)
        v38 = (double *)sub_100072110((_QWORD *)(v51 > 1), v52 + 1, 1, v38);
      *((_QWORD *)v38 + 2) = v52 + 1;
      v38[v52 + 4] = v50;
      v53 = *v34;
      v45 = v68;
      dispatch thunk of Collection.endIndex.getter(v70, v18, v35);
      if (v53 == v70[0])
        goto LABEL_16;
    }
  }
  sub_1000580BC(v68);
  v39 = *((_QWORD *)v38 + 2);
  if (v39)
  {
    v40 = v38[4];
    v41 = v39 - 1;
    if (v41)
    {
      v42 = v38 + 5;
      do
      {
        v43 = *v42++;
        v44 = v43;
        if (v40 < v43)
          v40 = v44;
        --v41;
      }
      while (v41);
    }
  }
  swift_bridgeObjectRelease(v38);
  v54 = (void *)objc_opt_self(UIDevice);
  v55 = objc_msgSend(v54, "currentDevice");
  v56 = objc_msgSend(v55, "userInterfaceIdiom");

  if (v56)
  {
    v57 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v57, "bounds");

    sub_100009614();
  }
  v58 = objc_msgSend(v54, "currentDevice");
  v59 = objc_msgSend(v58, "userInterfaceIdiom");

  if (v59 == (id)1)
  {
    sub_100009CC4();
    v60 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
    objc_msgSend(v60, "bounds");

  }
}

_QWORD *sub_100057998(uint64_t a1, int a2, void (*a3)(char *, uint64_t, uint64_t), int a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *result;
  double MinX;
  double MinY;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  void (*v53)(_QWORD *, _QWORD);
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  double v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  _QWORD v78[4];
  uint64_t v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;

  v11 = v10;
  v74 = (char *)a6;
  LODWORD(v69) = a4;
  v71 = a3;
  LODWORD(v68) = a2;
  v70 = *(double *)&a1;
  v17 = type metadata accessor for LayoutSubview(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v77 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LayoutSubviews(0);
  v75 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100005360(&qword_100115DF8);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v66 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100005360(&qword_100115E00);
  __chkstk_darwin(v67, v29);
  v31 = (char *)&v66 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32, v33);
  v35 = (char *)&v66 - v34;
  v36 = sub_1000580FC((unint64_t *)&qword_100115E08, (uint64_t)&protocol conformance descriptor for LayoutSubviews);
  dispatch thunk of Collection.startIndex.getter(v78, v21, v36);
  v76 = a5;
  result = dispatch thunk of Collection.endIndex.getter(&v79, v21, v36);
  if (v78[0] != v79)
  {
    v72 = v24;
    v73 = v28;
    v80.origin.x = a7;
    v80.origin.y = a8;
    v80.size.width = a9;
    v80.size.height = a10;
    MinX = CGRectGetMinX(v80);
    v81.origin.x = a7;
    v81.origin.y = a8;
    v81.size.width = a9;
    v81.size.height = a10;
    MinY = CGRectGetMinY(v81);
    LOBYTE(v78[0]) = v68 & 1;
    LOBYTE(v79) = LOBYTE(v69) & 1;
    v40 = v76;
    sub_1000573C8(v76, *(uint64_t *)&v70, v68 & 1, (uint64_t)v71, LOBYTE(v69) & 1);
    v42 = v41;
    v44 = v43;
    v71 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 16);
    v71(v31, v40, v21);
    dispatch thunk of Collection.startIndex.getter(v78, v21, v36);
    v45 = v67;
    *(_QWORD *)&v31[*(int *)(v67 + 36)] = v78[0];
    sub_100058074((uint64_t)v31, (uint64_t)v35);
    v46 = &v35[*(int *)(v45 + 36)];
    v47 = *(_QWORD *)v46;
    v74 = v35;
    dispatch thunk of Collection.endIndex.getter(v78, v21, v36);
    if (v47 == v78[0])
    {
      v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
LABEL_4:
      v48(v73, 1, 1, v17);
    }
    else
    {
      v49 = v36;
      v76 = 0;
      v70 = v42;
      v69 = v44;
      v68 = v11;
      v50 = (uint64_t)v74;
      while (1)
      {
        v53 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v78, v46, v21, v49);
        v54 = v73;
        (*(void (**)(char *))(v18 + 16))(v73);
        v53(v78, 0);
        v55 = v72;
        v71(v72, v50, v21);
        v56 = v49;
        v57 = v49;
        v58 = v54;
        dispatch thunk of Collection.formIndex(after:)(v46, v21, v57);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v55, v21);
        v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
        v48(v58, 0, 1, v17);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v58, 1, v17) == 1)
          break;
        v59 = (*(uint64_t (**)(char *, char *, uint64_t))(v18 + 32))(v77, v58, v17);
        v60 = static UnitPoint.topLeading.getter(v59);
        LOBYTE(v78[0]) = 0;
        LOBYTE(v79) = 0;
        result = (_QWORD *)LayoutSubview.place(at:anchor:proposal:)(*(_QWORD *)&v70, 0, *(_QWORD *)&v69, 0, MinX, MinY, v60, v61);
        v62 = *(_QWORD *)(v11 + 16);
        v63 = __OFSUB__(v62, 1);
        v64 = v62 - 1;
        if (v63)
        {
          __break(1u);
          return result;
        }
        v65 = v76;
        if (v76 >= v64)
        {
          v82.origin.x = a7;
          v82.origin.y = a8;
          v82.size.width = a9;
          v82.size.height = a10;
          MinX = CGRectGetMinX(v82);
          (*(void (**)(char *, uint64_t))(v18 + 8))(v77, v17);
          v76 = 0;
          MinY = v44 + MinY + *(double *)(v11 + 24);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v18 + 8))(v77, v17);
          v76 = v65 + 1;
          MinX = v42 + MinX + *(double *)(v11 + 24);
        }
        v50 = (uint64_t)v74;
        v51 = *(_QWORD *)v46;
        v49 = v56;
        dispatch thunk of Collection.endIndex.getter(v78, v21, v56);
        v52 = v51 == v78[0];
        v11 = v68;
        if (v52)
          goto LABEL_4;
      }
    }
    return (_QWORD *)sub_1000580BC((uint64_t)v74);
  }
  return result;
}

void sub_100057E7C(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5)
{
  sub_1000572A0(a1, a2 & 1, a3, a4 & 1, a5);
}

_QWORD *sub_100057EC4(uint64_t a1, char a2, void (*a3)(char *, uint64_t, uint64_t), char a4, uint64_t a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  return sub_100057998(a1, a2 & 1, a3, a4 & 1, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_100057F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100057F64(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100057F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100057F64(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t))&Layout.explicitAlignment(of:in:proposal:subviews:cache:));
}

uint64_t sub_100057F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void (*sub_100057FA0(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_100057FFC;
}

void sub_100057FFC(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

unint64_t sub_100058030()
{
  unint64_t result;

  result = qword_100115DF0;
  if (!qword_100115DF0)
  {
    result = swift_getWitnessTable(&unk_1000D0868, &type metadata for CalculatorKeypadLayout);
    atomic_store(result, (unint64_t *)&qword_100115DF0);
  }
  return result;
}

uint64_t sub_100058074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100115E00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000580BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100005360(&qword_100115E00);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000580FC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for LayoutSubviews(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

id sub_100058378()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SceneDelegate()
{
  return objc_opt_self(_TtC10Calculator13SceneDelegate);
}

uint64_t sub_1000583C8(void *a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  Swift::String_optional v27;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  v2 = objc_msgSend(a1, "type");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  if (v3 == 0x7473614C79706F63 && v5 == 0xEE00746C75736552)
  {
    swift_bridgeObjectRelease(0xEE00746C75736552);
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7473614C79706F63, 0xEE00746C75736552, v3, v5, 0);
    swift_bridgeObjectRelease(v5);
    if ((v7 & 1) == 0)
    {
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v8 = type metadata accessor for Logger(0);
      sub_100014124(v8, (uint64_t)qword_10011FEA8);
      v9 = a1;
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v36 = v13;
        *(_DWORD *)v12 = 136315138;
        v14 = objc_msgSend(v9, "debugDescription");
        v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
        v17 = v16;

        v34 = sub_100029918(v15, v17, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

        swift_bridgeObjectRelease(v17);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error: Unkown shortcutItem initiated: %s", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);

      }
      else
      {

      }
      return 0;
    }
  }
  v18 = sub_100055E7C();
  if (v18)
  {
    v19 = v18;
    v20 = CalculateExpression.copyableExpression.getter();
    v22 = v21;
    v36 = v20;
    v37 = v21;
    v23 = sub_100055FDC();
    if (v24)
    {
      v25 = v24;
      String.append(_:)(*(Swift::String *)&v23);
      swift_bridgeObjectRelease(v25);
      v26._countAndFlagsBits = 32;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(0xE100000000000000);
      v20 = v36;
      v22 = v37;
    }
    v27.value._countAndFlagsBits = v20;
    v27.value._object = v22;
    CalculateExpression.copyToClipboard(overridePlaintext:)(v27);
    swift_bridgeObjectRelease(v22);
    swift_release(v19);
    return 1;
  }
  else
  {
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100014124(v29, (uint64_t)qword_10011FEA8);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Error: 'Copy Last Result' shortcut item initiated though no last result is being stored", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    return 1;
  }
}

id sub_100058778()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *object;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;
  NSString v24;
  NSString v25;
  NSString v26;
  id v27;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;

  v0 = type metadata accessor for Locale(0);
  v2 = __chkstk_darwin(v0, v1);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.LocalizationValue(0, v2);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100055E7C();
  if (!v9)
    return 0;
  v10 = v9;
  v11 = CalculateExpression.copyableExpression.getter();
  v13 = v12;
  v31 = v11;
  v32 = v12;
  v14 = sub_100055FDC();
  if (v15)
  {
    v16 = v15;
    v30._countAndFlagsBits = 32;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v14);
    swift_bridgeObjectRelease(v16);
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v13 = v32;
  }
  v18 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x80000001000D6BE0);
  static Locale.current.getter(v18);
  String.init(localized:table:bundle:locale:comment:)(v8, 0, 0, 0, v4, "Copy Last Result Shortcut Title", 31, 2);
  v20 = v19;
  if (qword_100113F38 != -1)
    swift_once(&qword_100113F38, sub_1000B32C4);
  v21 = (void *)qword_10011FF00;
  v22 = objc_allocWithZone((Class)UIApplicationShortcutItem);
  v23 = v21;
  v24 = String._bridgeToObjectiveC()();
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v13);
  v27 = objc_msgSend(v22, "initWithType:localizedTitle:localizedSubtitle:icon:userInfo:", v24, v25, v26, v23, 0);
  swift_release(v10);

  return v27;
}

unint64_t sub_100058B2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100115DC8;
  if (!qword_100115DC8)
  {
    v1 = objc_opt_self(UIApplicationShortcutItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100115DC8);
  }
  return result;
}

uint64_t sub_100058B68(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v32;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v20 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v20 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain(v20);
  }
  else
  {
    v5 = *a2;
    v6 = *((_BYTE *)a2 + 8);
    *(_QWORD *)a1 = *a2;
    *(_BYTE *)(a1 + 8) = v6;
    v7 = a2[2];
    v8 = *((_BYTE *)a2 + 24);
    *(_QWORD *)(a1 + 16) = v7;
    *(_BYTE *)(a1 + 24) = v8;
    v9 = a2[4];
    v10 = *((_BYTE *)a2 + 40);
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 40) = v10;
    v11 = a2[6];
    v12 = *((_BYTE *)a2 + 56);
    *(_QWORD *)(a1 + 48) = v11;
    v13 = *(int *)(a3 + 32);
    v14 = (uint64_t *)((char *)a2 + v13);
    v15 = (uint64_t *)(a1 + v13);
    *(_BYTE *)(a1 + 56) = v12;
    swift_retain(v5);
    swift_retain(v7);
    swift_retain(v9);
    swift_retain(v11);
    v16 = sub_100005360(&qword_100115688);
    if (swift_getEnumCaseMultiPayload(v14, v16) == 1)
    {
      v17 = sub_100005360(&qword_100115F10);
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v14, 1, v17))
      {
        v19 = sub_100005360((uint64_t *)&unk_100115690);
        memcpy(v15, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        v25 = *v14;
        v26 = v14[1];
        *v15 = *v14;
        v15[1] = v26;
        v27 = *(int *)(v17 + 32);
        v28 = (char *)v15 + v27;
        v32 = (char *)v14 + v27;
        v29 = type metadata accessor for EditMode(0);
        v30 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
        swift_retain(v25);
        swift_retain(v26);
        v30(v28, v32, v29);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      }
      v22 = v15;
      v23 = v16;
      v24 = 1;
    }
    else
    {
      v21 = *v14;
      *v15 = *v14;
      swift_retain(v21);
      v22 = v15;
      v23 = v16;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
  }
  return a1;
}

void sub_100058D48(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  v4 = (_QWORD *)((char *)a1 + *(int *)(a2 + 32));
  v5 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v6 = sub_100005360(&qword_100115F10);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6))
    {
      swift_release(*v4);
      swift_release(v4[1]);
      v7 = (char *)v4 + *(int *)(v6 + 32);
      v8 = type metadata accessor for EditMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    }
  }
  else
  {
    swift_release(*v4);
  }
}

uint64_t sub_100058E28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v28;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  v10 = a2[6];
  v11 = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  v12 = *(int *)(a3 + 32);
  v13 = (uint64_t *)((char *)a2 + v12);
  v14 = (uint64_t *)(a1 + v12);
  *(_BYTE *)(a1 + 56) = v11;
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v10);
  v15 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v13, v15) == 1)
  {
    v16 = sub_100005360(&qword_100115F10);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16))
    {
      v18 = sub_100005360((uint64_t *)&unk_100115690);
      memcpy(v14, v13, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      v19 = 1;
    }
    else
    {
      v21 = *v13;
      v22 = v13[1];
      *v14 = *v13;
      v14[1] = v22;
      v23 = *(int *)(v16 + 32);
      v24 = (char *)v14 + v23;
      v28 = (char *)v13 + v23;
      v25 = type metadata accessor for EditMode(0);
      v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
      swift_retain(v21);
      swift_retain(v22);
      v26(v24, v28, v25);
      v19 = 1;
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
  }
  else
  {
    v20 = *v13;
    *v14 = *v13;
    swift_retain(v20);
    v19 = 0;
  }
  swift_storeEnumTagMultiPayload(v14, v15, v19);
  return a1;
}

uint64_t *sub_100058FDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v34;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v7;
  swift_retain(v6);
  swift_release(v8);
  v9 = a2[2];
  v10 = *((_BYTE *)a2 + 24);
  v11 = a1[2];
  a1[2] = v9;
  *((_BYTE *)a1 + 24) = v10;
  swift_retain(v9);
  swift_release(v11);
  v12 = a2[4];
  v13 = *((_BYTE *)a2 + 40);
  v14 = a1[4];
  a1[4] = v12;
  *((_BYTE *)a1 + 40) = v13;
  swift_retain(v12);
  swift_release(v14);
  v15 = a2[6];
  v16 = *((_BYTE *)a2 + 56);
  v17 = a1[6];
  a1[6] = v15;
  *((_BYTE *)a1 + 56) = v16;
  swift_retain(v15);
  swift_release(v17);
  if (a1 != a2)
  {
    v18 = *(int *)(a3 + 32);
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    sub_100004F48((uint64_t)a1 + v18, &qword_100115688);
    v21 = sub_100005360(&qword_100115688);
    if (swift_getEnumCaseMultiPayload(v20, v21) == 1)
    {
      v22 = sub_100005360(&qword_100115F10);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22))
      {
        v24 = sub_100005360((uint64_t *)&unk_100115690);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        v25 = 1;
      }
      else
      {
        v27 = *v20;
        *v19 = *v20;
        v28 = v20[1];
        v19[1] = v28;
        v29 = *(int *)(v22 + 32);
        v30 = (char *)v19 + v29;
        v34 = (char *)v20 + v29;
        v31 = type metadata accessor for EditMode(0);
        v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
        swift_retain(v27);
        swift_retain(v28);
        v32(v30, v34, v31);
        v25 = 1;
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v19, 0, 1, v22);
      }
    }
    else
    {
      v26 = *v20;
      *v19 = *v20;
      swift_retain(v26);
      v25 = 0;
    }
    swift_storeEnumTagMultiPayload(v19, v21, v25);
  }
  return a1;
}

uint64_t sub_1000591DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(int *)(a3 + 32);
  v5 = (_QWORD *)(a2 + v4);
  v6 = (_QWORD *)(a1 + v4);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v7 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v5, v7) == 1)
  {
    v8 = sub_100005360(&qword_100115F10);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8))
    {
      v10 = sub_100005360((uint64_t *)&unk_100115690);
      memcpy(v6, v5, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v11 = v5[1];
      *v6 = *v5;
      v6[1] = v11;
      v12 = *(int *)(v8 + 32);
      v13 = (char *)v6 + v12;
      v14 = (char *)v5 + v12;
      v15 = type metadata accessor for EditMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
    swift_storeEnumTagMultiPayload(v6, v7, 1);
  }
  else
  {
    memcpy(v6, v5, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_100059348(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = *((_BYTE *)a2 + 8);
  v7 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v6;
  swift_release(v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v8;
  swift_release(v9);
  v10 = *((_BYTE *)a2 + 40);
  v11 = a1[4];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = v10;
  swift_release(v11);
  v12 = *((_BYTE *)a2 + 56);
  v13 = a1[6];
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = v12;
  swift_release(v13);
  if (a1 != a2)
  {
    v14 = *(int *)(a3 + 32);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    sub_100004F48((uint64_t)a1 + v14, &qword_100115688);
    v17 = sub_100005360(&qword_100115688);
    if (swift_getEnumCaseMultiPayload(v16, v17) == 1)
    {
      v18 = sub_100005360(&qword_100115F10);
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18))
      {
        v20 = sub_100005360((uint64_t *)&unk_100115690);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
      }
      else
      {
        v21 = v16[1];
        *v15 = *v16;
        v15[1] = v21;
        v22 = *(int *)(v18 + 32);
        v23 = (char *)v15 + v22;
        v24 = (char *)v16 + v22;
        v25 = type metadata accessor for EditMode(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v15, 0, 1, v18);
      }
      swift_storeEnumTagMultiPayload(v15, v17, 1);
    }
    else
    {
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1000594F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100059500);
}

uint64_t sub_100059500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 254)
  {
    v4 = *(unsigned __int8 *)(a1 + 8);
    if (v4 > 1)
      return (v4 ^ 0xFF) + 1;
    else
      return 0;
  }
  else
  {
    v8 = sub_100005360(&qword_100115F18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100059578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100059584);
}

uint64_t sub_100059584(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *(_BYTE *)(result + 8) = -(char)a2;
  }
  else
  {
    v7 = sub_100005360(&qword_100115F18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CalculatorHistoryListView(uint64_t a1)
{
  uint64_t result;

  result = qword_100115F78;
  if (!qword_100115F78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorHistoryListView);
  return result;
}

void sub_100059634(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "\t";
  v4[1] = "\t";
  v4[2] = "\t";
  v4[3] = "\t";
  sub_1000596AC(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

void sub_1000596AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100115F88)
  {
    v2 = sub_100005608((uint64_t *)&unk_100115690);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100115F88);
  }
}

uint64_t sub_100059704(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6330, 1);
}

void sub_100059714(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D0A90);
  v6 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 52);
}

double sub_1000597A0(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D0A90);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_100061D5C, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_100059848@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char v13;

  sub_100059944(a2);
  v4 = a2 + *(int *)(sub_100005360(&qword_100115FC8) + 36);
  v5 = v4 + *(int *)(type metadata accessor for CalculatorHistoryScrollPPTTests(0) + 24);
  v6 = type metadata accessor for ScrollViewProxy(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v5, a1, v6);
  v7 = type metadata accessor for CalculatorHistoryViewModel(0);
  v8 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  *(_QWORD *)v4 = Environment.init<A>(_:)(v7, v7, v8);
  *(_BYTE *)(v4 + 8) = v9 & 1;
  v10 = type metadata accessor for CalculatorToolbarViewModel(0);
  v11 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  result = Environment.init<A>(_:)(v10, v10, v11);
  *(_QWORD *)(v4 + 16) = result;
  *(_BYTE *)(v4 + 24) = v13 & 1;
  return result;
}

double sub_100059944@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  void (*v74)(char *, uint64_t);
  unint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t OpaqueTypeConformance2;
  char *v85;
  uint64_t v86;
  __n128 v87;
  double result;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  void (*v93)(char *, uint64_t);
  void (*v94)(char *, uint64_t, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119[16];
  uint64_t *v120;
  uint64_t (*v121)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;

  v116 = a1;
  v106 = type metadata accessor for PlainListStyle(0);
  v107 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106, v2);
  v101 = (char *)&v89 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CalculatorHistoryListView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v117 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100115FD0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100005360(&qword_100115FD8);
  v100 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v14);
  v96 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100005360(&qword_100115FE0);
  v104 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105, v16);
  v92 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100005360(&qword_100115FE8);
  __chkstk_darwin(v111, v18);
  v103 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100005360(&qword_100115FF0);
  v114 = *(_QWORD *)(v20 - 8);
  v115 = v20;
  __chkstk_darwin(v20, v21);
  v113 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100005360(&qword_100115FF8);
  v110 = *(_QWORD *)(v112 - 8);
  v24 = __chkstk_darwin(v112, v23);
  v109 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = swift_allocBox(v9, v24);
  v28 = v27;
  v29 = v1;
  v30 = *(_QWORD *)(v1 + 32);
  v31 = *(_BYTE *)(v1 + 40);
  v118 = v29;
  v32 = swift_retain(v30);
  v33 = sub_100043984(v32, v31);
  swift_release(v30);
  v34 = type metadata accessor for CalculatorHistoryViewModel(0);
  v97 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  Bindable<A>.init(wrappedValue:)(v33, v34, v97);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v98 = v28;
  v94 = v35;
  v35(v13, v28, v9);
  Bindable.wrappedValue.getter(&v127, v9);
  v36 = *(void (**)(char *, uint64_t))(v10 + 8);
  v108 = v13;
  v95 = v9;
  v93 = v36;
  v36(v13, v9);
  v37 = v127;
  v38 = *(_QWORD *)(v127 + 16);
  swift_retain(v38);
  swift_release(v37);
  KeyPath = swift_getKeyPath(&unk_1000D09E8);
  v127 = v38;
  v40 = sub_100005178(&qword_100114338, type metadata accessor for CalculatorHistoryRecordManager, (uint64_t)&protocol conformance descriptor for CalculatorHistoryRecordManager);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v127, KeyPath, v40);
  swift_release(KeyPath);
  swift_beginAccess(v38 + 48, &v127, 0, 0);
  v89 = *(_QWORD *)(v38 + 48);
  swift_bridgeObjectRetain(v89);
  swift_release(v38);
  type metadata accessor for MainActor(0);
  v41 = swift_retain(v26);
  v42 = static MainActor.shared.getter(v41);
  v43 = (_QWORD *)swift_allocObject(&unk_10010A8E8, 40, 7);
  v43[2] = v42;
  v43[3] = &protocol witness table for MainActor;
  v43[4] = v26;
  sub_10005F3F8(v29, (uint64_t)v8);
  v44 = swift_retain(v26);
  v45 = static MainActor.shared.getter(v44);
  v46 = *(unsigned __int8 *)(v5 + 80);
  v90 = ~v46;
  v47 = (v46 + 40) & ~v46;
  v48 = v117;
  v49 = (_QWORD *)swift_allocObject(&unk_10010A910, v47 + v117, v46 | 7);
  v49[2] = v45;
  v49[3] = &protocol witness table for MainActor;
  v49[4] = v26;
  sub_10005F548((uint64_t)v8, (uint64_t)v49 + v47);
  v50 = sub_100005360(&qword_100116000);
  Binding.init(get:set:)(&v124, sub_10005FEF8, v43, sub_100060020, v49, v50);
  v51 = v124;
  v52 = v125;
  v53 = v126;
  sub_10005F3F8(v118, (uint64_t)v8);
  v54 = (v46 + 16) & ~v46;
  v55 = (v48 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v91 = v46 | 7;
  v56 = swift_allocObject(&unk_10010A938, v55 + 8, v46 | 7);
  v102 = v8;
  sub_10005F548((uint64_t)v8, v56 + v54);
  *(_QWORD *)(v56 + v55) = v26;
  v123 = v89;
  v120 = &v123;
  v121 = sub_100060068;
  v122 = v56;
  swift_retain(v26);
  v57 = sub_100005360(&qword_100116008);
  v58 = sub_1000605BC();
  v59 = v96;
  v60 = v52;
  v61 = v92;
  List.init(selection:content:)(v51, v60, v53, sub_1000605B0, v119, &type metadata for String, v57, &protocol witness table for String, v58);
  swift_release(v56);
  v62 = swift_bridgeObjectRelease(v123);
  v63 = v101;
  PlainListStyle.init()(v62);
  v64 = sub_100008078(&qword_1001161B0, &qword_100115FD8, (uint64_t)&protocol conformance descriptor for List<A, B>);
  v65 = v99;
  v66 = v106;
  View.listStyle<A>(_:)(v63, v99, v106, v64, &protocol witness table for PlainListStyle);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v63, v66);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v59, v65);
  if (qword_100113CE0 != -1)
    swift_once(&qword_100113CE0, sub_100052F74);
  v67 = qword_10011FC88;
  v68 = swift_getKeyPath(&unk_1000D0A10);
  v69 = v104;
  v70 = (uint64_t)v103;
  v71 = v105;
  (*(void (**)(char *, char *, uint64_t))(v104 + 16))(v103, v61, v105);
  v72 = v111;
  v73 = (uint64_t *)(v70 + *(int *)(v111 + 36));
  *v73 = v68;
  v73[1] = v67;
  v74 = *(void (**)(char *, uint64_t))(v69 + 8);
  swift_retain(v67);
  v74(v61, v71);
  v75 = sub_10006101C();
  v76 = v113;
  View.scrollContentBackground(_:)(2, v72, v75);
  sub_100004F48(v70, &qword_100115FE8);
  v77 = v108;
  v78 = v95;
  v94(v108, v98, v95);
  Bindable.wrappedValue.getter(&v124, v78);
  v93(v77, v78);
  v79 = v124;
  v80 = swift_getKeyPath(&unk_1000D0A40);
  v124 = v79;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v124, v80, v97);
  swift_release(v80);
  LOBYTE(v77) = *(_BYTE *)(v79 + 32);
  swift_release(v79);
  LOBYTE(v123) = (_BYTE)v77;
  v81 = (uint64_t)v102;
  sub_10005F3F8(v118, (uint64_t)v102);
  v82 = (v46 + 24) & v90;
  v83 = swift_allocObject(&unk_10010A960, v82 + v117, v91);
  *(_QWORD *)(v83 + 16) = v26;
  sub_10005F548(v81, v83 + v82);
  swift_retain(v26);
  v124 = v72;
  v125 = v75;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v124, &opaque type descriptor for <<opaque return type of View.scrollContentBackground(_:)>>, 1);
  v85 = v109;
  v86 = v115;
  View.onChange<A>(of:initial:_:)(&v123, 0, sub_10006121C, v83, v115, &type metadata for Bool, OpaqueTypeConformance2, &protocol witness table for Bool);
  v87 = swift_release(v83);
  (*(void (**)(char *, uint64_t, __n128))(v114 + 8))(v76, v86, v87);
  (*(void (**)(uint64_t, char *, uint64_t))(v110 + 32))(v116, v85, v112);
  *(_QWORD *)&result = swift_release(v26).n128_u64[0];
  return result;
}

void sub_10005A1F0(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];

  v4 = sub_100005360(&qword_100115FD0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_projectBox(a1, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v9, v10, v4);
  Bindable.wrappedValue.getter(v16, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  v11 = v16[0];
  KeyPath = swift_getKeyPath(&unk_1000D0A68);
  v16[0] = v11;
  v13 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v13);
  swift_release(KeyPath);
  swift_beginAccess(v11 + 24, v16, 0, 0);
  v14 = *(_QWORD *)(v11 + 24);
  swift_bridgeObjectRetain(v14);
  swift_release(v11);
  *a2 = v14;
}

double sub_10005A324(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v23 = a5;
  v7 = sub_100005360(&qword_100115FD0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v14 = swift_projectBox(a4, v10);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v24(v12, v14, v7);
  Bindable.wrappedValue.getter(&v28, v7);
  v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v12, v7);
  v16 = v28;
  KeyPath = swift_getKeyPath(&unk_1000D0A68);
  v26 = v16;
  v27 = v13;
  v28 = v16;
  v18 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  swift_bridgeObjectRetain(v13);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v28, KeyPath, sub_1000170DC, v25, (char *)&type metadata for () + 8, v18);
  swift_release(v16);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v13);
  if (*(_QWORD *)(v13 + 16))
  {
    v24(v12, v14, v7);
    Bindable.wrappedValue.getter(&v28, v7);
    v15(v12, v7);
    v20 = v28;
    v21 = swift_getKeyPath(&unk_1000D0C68);
    v28 = v20;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v28, v21, v18);
    swift_release(v21);
    v22 = *(_QWORD *)(v20 + 40);
    swift_retain(v22);
    *(_QWORD *)&result = swift_release(v20).n128_u64[0];
    if (v22)
    {
      sub_10005A528(v22);
      *(_QWORD *)&result = swift_release(v22).n128_u64[0];
    }
  }
  return result;
}

void sub_10005A528(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  unsigned int (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  _OWORD v70[2];

  v2 = v1;
  v69 = a1;
  v3 = type metadata accessor for AccessibilityNotification.ScreenChanged(0);
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  __chkstk_darwin(v3, v4);
  v65 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EditMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v68 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100005360(&qword_1001161F0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360((uint64_t *)&unk_100115690);
  __chkstk_darwin(v14, v15);
  v17 = (uint64_t *)((char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_100005360(&qword_1001161F8);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v64 - v24;
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v64 - v28;
  type metadata accessor for CalculatorHistoryListView(0);
  sub_1000439D0(v17);
  v30 = sub_100005360(&qword_100115F10);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v17, 1, v30) == 1)
  {
    sub_100004F48((uint64_t)v17, (uint64_t *)&unk_100115690);
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v31(v29, 1, 1, v6);
  }
  else
  {
    Binding.wrappedValue.getter(v29, v30);
    sub_100004F48((uint64_t)v17, &qword_100115F10);
    v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v31(v29, 0, 1, v6);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v25, enum case for EditMode.active(_:), v6);
  v31(v25, 0, 1, v6);
  v32 = (uint64_t)&v13[*(int *)(v10 + 48)];
  sub_10000531C((uint64_t)v29, (uint64_t)v13, &qword_1001161F8);
  sub_10000531C((uint64_t)v25, v32, &qword_1001161F8);
  v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v33((uint64_t)v13, 1, v6) == 1)
  {
    sub_100004F48((uint64_t)v25, &qword_1001161F8);
    sub_100004F48((uint64_t)v29, &qword_1001161F8);
    if (v33(v32, 1, v6) == 1)
    {
      sub_100004F48((uint64_t)v13, &qword_1001161F8);
      return;
    }
  }
  else
  {
    sub_10000531C((uint64_t)v13, (uint64_t)v21, &qword_1001161F8);
    if (v33(v32, 1, v6) != 1)
    {
      v60 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v68, v32, v6);
      v61 = sub_100005178(&qword_100116200, (uint64_t (*)(uint64_t))&type metadata accessor for EditMode, (uint64_t)&protocol conformance descriptor for EditMode);
      v62 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v60, v6, v61);
      v63 = *(void (**)(char *, uint64_t))(v7 + 8);
      v63(v60, v6);
      sub_100004F48((uint64_t)v25, &qword_1001161F8);
      sub_100004F48((uint64_t)v29, &qword_1001161F8);
      v63(v21, v6);
      sub_100004F48((uint64_t)v13, &qword_1001161F8);
      if ((v62 & 1) != 0)
        return;
      goto LABEL_10;
    }
    sub_100004F48((uint64_t)v25, &qword_1001161F8);
    sub_100004F48((uint64_t)v29, &qword_1001161F8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v21, v6);
  }
  sub_100004F48((uint64_t)v13, &qword_1001161F0);
LABEL_10:
  v34 = *v2;
  v35 = *((_BYTE *)v2 + 8);
  v36 = swift_retain(*v2);
  v37 = sub_100043890(v36, v35);
  swift_release(v34);
  v38 = v2[2];
  v39 = *((_BYTE *)v2 + 24);
  v40 = swift_retain(v38);
  v41 = sub_1000439B4(v40, v39);
  swift_release(v38);
  v42 = sub_10004835C();
  swift_release(v41);
  sub_100025DD4(v69, v42);
  swift_release(v37);
  swift_release(v42);
  v43 = v2[6];
  LOBYTE(v41) = *((_BYTE *)v2 + 56);
  v44 = swift_retain(v43);
  v45 = sub_1000438AC(v44, v41);
  swift_release(v43);
  KeyPath = swift_getKeyPath(&unk_1000D0B10);
  *(_QWORD *)&v70[0] = v45;
  v47 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v70, KeyPath, v47);
  swift_release(KeyPath);
  LODWORD(v41) = *(unsigned __int8 *)(v45 + 17);
  swift_release(v45);
  if ((_DWORD)v41 == 1)
  {
    v48 = v2[6];
    v49 = *((_BYTE *)v2 + 56);
    v50 = swift_retain(v48);
    v51 = sub_1000438AC(v50, v49);
    swift_release(v48);
    v52 = swift_getKeyPath(&unk_1000D0B38);
    *(_QWORD *)&v70[0] = v51;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v70, v52, v47);
    swift_release(v52);
    v53 = *(unsigned __int8 *)(v51 + 16);
    swift_release(v51);
    if (v53 == 1)
    {
      v54 = v2[6];
      v55 = *((_BYTE *)v2 + 56);
      v56 = swift_retain(v54);
      v57 = sub_1000438AC(v56, v55);
      swift_release(v54);
      if (qword_100113F40 != -1)
        swift_once(&qword_100113F40, sub_1000BF928);
      sub_1000BF854();
      sub_100068F30(0);
      swift_release(v57);
      memset(v70, 0, sizeof(v70));
      v58 = v65;
      AccessibilityNotification.ScreenChanged.init(_:)(v70);
      v59 = v67;
      _AccessibilityNotifications.post()();
      (*(void (**)(char *, uint64_t))(v66 + 8))(v58, v59);
    }
  }
}

uint64_t sub_10005AB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[16];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = sub_100005360(&qword_100116040);
  __chkstk_darwin(v8, v9);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_100005360(&qword_100116030);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = &v25[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = a1;
  v27 = a2;
  v28 = a3;
  sub_10005C96C(a1, (uint64_t)v11);
  v17 = sub_100005360(&qword_100116068);
  v18 = sub_10006071C();
  v19 = sub_1000607E4();
  Section<>.init(header:content:)(v11, sub_1000612DC, v25, v8, v17, v18, v19);
  if (qword_100113A30 != -1)
    swift_once(&qword_100113A30, sub_10001B8A0);
  v20 = qword_10011F8B8;
  v21 = qword_10011F8B8;
  if (qword_100113A28 != -1)
  {
    swift_once(&qword_100113A28, sub_10001B87C);
    v21 = qword_10011F8B8;
  }
  v22 = qword_10011F8B0;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v13 + 16))(a4, v16, v12);
  v23 = a4 + *(int *)(sub_100005360(&qword_100116020) + 36);
  *(_QWORD *)v23 = v20;
  *(_QWORD *)(v23 + 8) = v22;
  *(_QWORD *)(v23 + 16) = v21;
  *(_QWORD *)(v23 + 24) = v22;
  *(_BYTE *)(v23 + 32) = 0;
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_10005AD24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v8 = type metadata accessor for CalculatorHistoryListView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100116078);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for FilteredHistoryRecord(0) + 24));
  v35 = v18;
  sub_10005F3F8(a2, (uint64_t)v12);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_10010A9B0, v21 + 8, v19 | 7);
  sub_10005F548((uint64_t)v12, v22 + v20);
  *(_QWORD *)(v22 + v21) = a3;
  swift_bridgeObjectRetain(v18);
  swift_retain(a3);
  v23 = sub_100005360(&qword_100114348);
  v24 = sub_100005360(&qword_100116088);
  v25 = sub_100008078(&qword_1001161E0, &qword_100114348, (uint64_t)&protocol conformance descriptor for [A]);
  v26 = sub_1000608EC(&qword_100116080, &qword_100116088, (void (*)(void))sub_10006095C, (void (*)(void))sub_100060FD0);
  v27 = sub_100005178(&qword_100115B20, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFD2C);
  ForEach<>.init(_:content:)(&v35, sub_100061310, v22, v23, &type metadata for String, v24, v25, v26, v27);
  if (qword_100113A10 != -1)
    swift_once(&qword_100113A10, sub_10001B84C);
  v28 = qword_10011F898;
  if (qword_100113A20 != -1)
    swift_once(&qword_100113A20, sub_10001B86C);
  v29 = qword_10011F8A8;
  v30 = qword_10011F8A8;
  if (qword_100113A18 != -1)
  {
    swift_once(&qword_100113A18, sub_10001B85C);
    v30 = qword_10011F8A8;
  }
  v31 = qword_10011F8A0;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 16))(a4, v17, v13);
  v32 = a4 + *(int *)(sub_100005360(&qword_100116068) + 36);
  *(_QWORD *)v32 = v28;
  *(_QWORD *)(v32 + 8) = v29;
  *(_QWORD *)(v32 + 16) = v31;
  *(_QWORD *)(v32 + 24) = v30;
  *(_BYTE *)(v32 + 32) = 0;
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t sub_10005AFEC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  __n128 v66;
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t KeyPath;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;

  v110 = a3;
  v93 = a2;
  v120 = a4;
  v5 = sub_100005360(&qword_100115FD0);
  v112 = *(_QWORD *)(v5 - 8);
  v113 = v5;
  __chkstk_darwin(v5, v6);
  v111 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CalculatorHistoryListView(0);
  v105 = *(_QWORD *)(v8 - 8);
  v107 = *(_QWORD *)(v105 + 64);
  v10 = __chkstk_darwin(v8, v9);
  v103 = (uint64_t)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AccessibilityActionKind(0, v10);
  v108 = *(_QWORD *)(v12 - 8);
  v109 = v12;
  __chkstk_darwin(v12, v13);
  v101 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for AccessibilityChildBehavior(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v15);
  v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100005360(&qword_1001160C0);
  v96 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95, v18);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100005360(&qword_1001161E8);
  v106 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102, v21);
  v94 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100005360(&qword_1001160B8);
  __chkstk_darwin(v104, v23);
  v100 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  v97 = (char *)&v92 - v27;
  v117 = sub_100005360(&qword_1001160A8);
  __chkstk_darwin(v117, v28);
  v118 = (uint64_t)&v92 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100005360(&qword_100116098);
  __chkstk_darwin(v115, v30);
  v119 = (uint64_t)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100005360(&qword_100116088);
  __chkstk_darwin(v114, v32);
  v116 = (uint64_t)&v92 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *a1;
  sub_10005B8B0(*a1, (uint64_t)v20);
  static AccessibilityChildBehavior.combine.getter(v35);
  v36 = sub_100005608(&qword_1001160C8);
  v37 = sub_100005608(&qword_1001160D0);
  v38 = sub_100005608(&qword_1001160D8);
  v39 = sub_100005608(&qword_1001160E0);
  v40 = sub_100005608(&qword_1001160E8);
  v41 = sub_100060C00();
  v42 = sub_100008078(&qword_100116148, &qword_1001160E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v123 = v39;
  v124 = v40;
  v125 = v41;
  v126 = v42;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v123, &opaque type descriptor for <<opaque return type of View.contextMenu<A>(menuItems:)>>, 1);
  v44 = sub_100060EB0();
  v123 = v38;
  v124 = v37;
  v125 = OpaqueTypeConformance2;
  v126 = v44;
  v45 = swift_getOpaqueTypeConformance2(&v123, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v123 = v36;
  v124 = v37;
  v125 = v45;
  v126 = v44;
  v46 = swift_getOpaqueTypeConformance2(&v123, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v47 = v94;
  v48 = v95;
  View.accessibilityElement(children:)(v17, v95, v46);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v17, v99);
  v49 = v48;
  v50 = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v20, v48);
  v51 = v101;
  static AccessibilityActionKind.default.getter(v50);
  v52 = v103;
  sub_10005F3F8(v93, v103);
  v53 = *(unsigned __int8 *)(v105 + 80);
  v54 = (v53 + 16) & ~v53;
  v55 = (v107 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
  v57 = swift_allocObject(&unk_10010A9D8, v56 + 8, v53 | 7);
  sub_10005F548(v52, v57 + v54);
  v58 = v110;
  *(_QWORD *)(v57 + v55) = v110;
  *(_QWORD *)(v57 + v56) = v34;
  v59 = v58;
  swift_retain(v58);
  swift_retain(v34);
  v123 = v49;
  v124 = v46;
  v60 = (uint64_t)v97;
  v61 = swift_getOpaqueTypeConformance2(&v123, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v62 = (uint64_t)v100;
  v63 = v51;
  v64 = v51;
  v65 = v102;
  View.accessibilityAction(_:_:)(v64, sub_1000614A8, v57, v102, v61);
  v66 = swift_release(v57);
  (*(void (**)(char *, uint64_t, __n128))(v108 + 8))(v63, v109, v66);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v47, v65);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000011, 0x80000001000D6C20, v104);
  sub_100004F48(v62, &qword_1001160B8);
  v68 = swift_projectBox(v59, v67);
  v70 = v111;
  v69 = v112;
  v71 = v113;
  (*(void (**)(char *, uint64_t, uint64_t))(v112 + 16))(v111, v68, v113);
  Bindable.wrappedValue.getter(&v123, v71);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
  v72 = v123;
  KeyPath = swift_getKeyPath(&unk_1000D0A68);
  v123 = v72;
  v74 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v123, KeyPath, v74);
  swift_release(KeyPath);
  swift_beginAccess(v72 + 24, &v123, 0, 0);
  v75 = *(_QWORD *)(v72 + 24);
  swift_bridgeObjectRetain(v75);
  swift_release(v72);
  v121 = v34;
  v76 = swift_getKeyPath(&unk_1000D0AE8);
  v77 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v121, v76, v77);
  swift_release(v76);
  v78 = swift_getKeyPath(&unk_1000D0AE8);
  v79 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v78, v79, &protocol witness table for String);
  swift_release(v78);
  v80 = v122;
  LOBYTE(v78) = sub_10003B6FC(v121, v122, v75);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v75);
  if ((v78 & 1) != 0)
  {
    if (qword_100113DD8 != -1)
      swift_once(&qword_100113DD8, sub_1000534B4);
    v81 = &qword_10011FD80;
  }
  else
  {
    if (qword_100113D68 != -1)
      swift_once(&qword_100113D68, sub_1000531C8);
    v81 = &qword_10011FD10;
  }
  v82 = *v81;
  v83 = swift_retain(*v81);
  v121 = v82;
  swift_retain(v83);
  v84 = AnyView.init<A>(_:)(&v121, &type metadata for Color, &protocol witness table for Color);
  v85 = v118;
  sub_10000531C(v60, v118, &qword_1001160B8);
  swift_release(v82);
  *(_QWORD *)(v85 + *(int *)(v117 + 36)) = v84;
  sub_100004F48(v60, &qword_1001160B8);
  v86 = v119;
  sub_10000531C(v85, v119, &qword_1001160A8);
  *(_BYTE *)(v86 + *(int *)(v115 + 36)) = 1;
  v87 = sub_100004F48(v85, &qword_1001160A8);
  v88 = static HorizontalAlignment.listRowSeparatorLeading.getter(v87);
  v89 = v116;
  sub_10000531C(v86, v116, &qword_100116098);
  v90 = (uint64_t *)(v89 + *(int *)(v114 + 36));
  *v90 = v88;
  v90[1] = (uint64_t)sub_10005C924;
  v90[2] = 0;
  sub_100004F48(v86, &qword_100116098);
  return sub_100007CD8(v89, v120, &qword_100116088);
}

void sub_10005B8B0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  double (*v71)(char *, uint64_t);
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t OpaqueTypeConformance2;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;

  v124 = a2;
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v115 = *(_QWORD *)(v4 - 8);
  v116 = v4;
  __chkstk_darwin(v4, v5);
  v114 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100005360(&qword_100116130);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100005360(&qword_100116118);
  __chkstk_darwin(v107, v11);
  v13 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100005360(&qword_100116208);
  v111 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113, v14);
  v110 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100005360(&qword_100115238);
  __chkstk_darwin(v108, v16);
  v18 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100005360(&qword_100115240);
  __chkstk_darwin(v19, v20);
  v112 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100005360(&qword_100116100);
  __chkstk_darwin(v109, v22);
  v24 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100005360(&qword_1001160E0);
  __chkstk_darwin(v117, v25);
  v106 = (uint64_t)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100005360(&qword_1001160D8);
  v119 = *(_QWORD *)(v27 - 8);
  v120 = v27;
  __chkstk_darwin(v27, v28);
  v118 = (char *)&v104 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100005360(&qword_1001160C8);
  v122 = *(_QWORD *)(v30 - 8);
  v123 = v30;
  __chkstk_darwin(v30, v31);
  v121 = (char *)&v104 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = *(_QWORD *)(v2 + 32);
  v126 = v2;
  v34 = *(_BYTE *)(v2 + 40);
  v35 = swift_retain(v33);
  v36 = sub_100043984(v35, v34);
  swift_release(v33);
  v37 = *(_QWORD *)(v36 + 16);
  swift_retain(v37);
  swift_release(v36);
  v38 = sub_100011EC0(a1);
  swift_release(v37);
  v39 = swift_retain(v33);
  v40 = sub_100043984(v39, v34);
  v41 = v33;
  v42 = a1;
  swift_release(v41);
  v43 = *(_QWORD *)(v40 + 16);
  swift_retain(v43);
  swift_release(v40);
  v44 = sub_1000121D4(a1);
  v45 = swift_release(v43);
  v46 = static HorizontalAlignment.leading.getter(v45);
  if (qword_100113A00 != -1)
    swift_once(&qword_100113A00, sub_10001B82C);
  v47 = qword_10011F888;
  *(_QWORD *)v10 = v46;
  *((_QWORD *)v10 + 1) = v47;
  v10[16] = 0;
  v48 = (uint64_t)&v10[*(int *)(sub_100005360(&qword_100116210) + 44)];
  v49 = v126;
  v125 = v38;
  v105 = v44;
  v50 = sub_10005D058(v126, (uint64_t)v38, v42, (uint64_t)v44, v48);
  v51 = static Edge.Set.top.getter(v50);
  v52 = v51;
  v53 = EdgeInsets.init(_all:)(v51, 8.0);
  v55 = v54;
  v57 = v56;
  v59 = v58;
  sub_10000531C((uint64_t)v10, (uint64_t)v13, &qword_100116130);
  v60 = v107;
  v61 = &v13[*(int *)(v107 + 36)];
  *v61 = v52;
  *((double *)v61 + 1) = v53;
  *((_QWORD *)v61 + 2) = v55;
  *((_QWORD *)v61 + 3) = v57;
  *((_QWORD *)v61 + 4) = v59;
  v61[40] = 0;
  v62 = sub_100004F48((uint64_t)v10, &qword_100116130);
  v63 = v114;
  static AccessibilityChildBehavior.ignore.getter(v62);
  v64 = sub_100060DA4();
  v65 = v110;
  View.accessibilityElement(children:)(v63, v60, v64);
  (*(void (**)(char *, uint64_t))(v115 + 8))(v63, v116);
  sub_100004F48((uint64_t)v13, &qword_100116118);
  v66 = sub_10005CE78(v42, v49, (uint64_t)&unk_1000D0BE0);
  v67 = sub_10005CE78(v42, v49, (uint64_t)&unk_1000D0B90);
  v68 = v111;
  v69 = v113;
  (*(void (**)(char *, char *, uint64_t))(v111 + 16))(v18, v65, v113);
  v70 = (uint64_t *)&v18[*(int *)(v108 + 36)];
  *v70 = v42;
  v70[1] = (uint64_t)v66;
  v70[2] = (uint64_t)v67;
  v71 = *(double (**)(char *, uint64_t))(v68 + 8);
  swift_retain(v42);
  v72.n128_f64[0] = v71(v65, v69);
  v73 = static Alignment.leading.getter(v72);
  v74 = v112;
  sub_1000358D8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v112, 0.0, 1, 0.0, 1, v73, v75);
  sub_100004F48((uint64_t)v18, &qword_100115238);
  sub_10000531C(v74, (uint64_t)v24, &qword_100115240);
  v24[*(int *)(v109 + 36)] = 0;
  sub_100004F48(v74, &qword_100115240);
  v76 = v106;
  sub_10000531C((uint64_t)v24, v106, &qword_100116100);
  v77 = v117;
  *(_BYTE *)(v76 + *(int *)(v117 + 36)) = 0;
  v78 = sub_100004F48((uint64_t)v24, &qword_100116100);
  __chkstk_darwin(v78, v79);
  v100 = v125;
  v101 = v42;
  v80 = sub_100005360(&qword_1001160E8);
  v81 = sub_100060C00();
  v82 = v42;
  v83 = sub_100008078(&qword_100116148, &qword_1001160E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v84 = v118;
  View.contextMenu<A>(menuItems:)(sub_100061508, &v99, v77, v80, v81, v83);
  v85 = sub_100004F48(v76, &qword_1001160E0);
  __chkstk_darwin(v85, v86);
  v102 = v49;
  v103 = v82;
  v87 = v82;
  v88 = sub_100005360(&qword_1001160D0);
  v127 = v77;
  v128 = v80;
  v129 = v81;
  v130 = v83;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.contextMenu<A>(menuItems:)>>, 1);
  v90 = sub_100060EB0();
  v92 = v120;
  v91 = v121;
  View.swipeActions<A>(edge:allowsFullSwipe:content:)(1, 1, sub_100061514, &v100, v120, v88, OpaqueTypeConformance2, v90);
  v93 = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v84, v92);
  __chkstk_darwin(v93, v94);
  v95 = v105;
  v100 = v105;
  v101 = v87;
  v102 = v126;
  v127 = v92;
  v128 = v88;
  v129 = OpaqueTypeConformance2;
  v130 = v90;
  v96 = swift_getOpaqueTypeConformance2(&v127, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
  v97 = v123;
  View.swipeActions<A>(edge:allowsFullSwipe:content:)(1, 1, sub_10006151C, &v99, v123, v88, v96, v90);
  v98 = swift_release(v125);
  (*(void (**)(char *, uint64_t, __n128))(v122 + 8))(v91, v97, v98);
  swift_release(v95);
}

double sub_10005C0A8(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  __n128 v35;
  uint64_t v36;
  double result;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[2];
  _QWORD v81[3];

  v77 = a3;
  v72 = a2;
  v75 = sub_100005360(&qword_100115FD0);
  v73 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75, v4);
  v74 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for EditMode(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_1001161F0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005360((uint64_t *)&unk_100115690);
  __chkstk_darwin(v15, v16);
  v18 = (void (**)(char *, uint64_t, uint64_t))((char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_100005360(&qword_1001161F8);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v72 - v25;
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v72 - v29;
  type metadata accessor for CalculatorHistoryListView(0);
  v76 = a1;
  sub_1000439D0(v18);
  v31 = sub_100005360(&qword_100115F10);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v18, 1, v31) == 1)
  {
    sub_100004F48((uint64_t)v18, (uint64_t *)&unk_100115690);
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v32(v30, 1, 1, v6);
  }
  else
  {
    Binding.wrappedValue.getter(v30, v31);
    sub_100004F48((uint64_t)v18, &qword_100115F10);
    v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v32(v30, 0, 1, v6);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v26, enum case for EditMode.active(_:), v6);
  v32(v26, 0, 1, v6);
  v33 = (uint64_t)&v14[*(int *)(v11 + 48)];
  sub_10000531C((uint64_t)v30, (uint64_t)v14, &qword_1001161F8);
  sub_10000531C((uint64_t)v26, v33, &qword_1001161F8);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v34((uint64_t)v14, 1, v6) != 1)
  {
    sub_10000531C((uint64_t)v14, (uint64_t)v22, &qword_1001161F8);
    if (v34(v33, 1, v6) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v10, v33, v6);
      v38 = sub_100005178(&qword_100116200, (uint64_t (*)(uint64_t))&type metadata accessor for EditMode, (uint64_t)&protocol conformance descriptor for EditMode);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)(v22, v10, v6, v38);
      v40 = *(void (**)(char *, uint64_t))(v7 + 8);
      v40(v10, v6);
      sub_100004F48((uint64_t)v26, &qword_1001161F8);
      sub_100004F48((uint64_t)v30, &qword_1001161F8);
      v40(v22, v6);
      sub_100004F48((uint64_t)v14, &qword_1001161F8);
      v36 = v77;
      if ((v39 & 1) != 0)
        goto LABEL_12;
LABEL_10:
      sub_10005A528(v36);
      return result;
    }
    sub_100004F48((uint64_t)v26, &qword_1001161F8);
    sub_100004F48((uint64_t)v30, &qword_1001161F8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v22, v6);
LABEL_9:
    sub_100004F48((uint64_t)v14, &qword_1001161F0);
    v36 = v77;
    goto LABEL_10;
  }
  sub_100004F48((uint64_t)v26, &qword_1001161F8);
  sub_100004F48((uint64_t)v30, &qword_1001161F8);
  if (v34(v33, 1, v6) != 1)
    goto LABEL_9;
  sub_100004F48((uint64_t)v14, &qword_1001161F8);
  v36 = v77;
LABEL_12:
  v76 = swift_projectBox(v72, v35);
  v41 = v73;
  v42 = v74;
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  v43 = v75;
  v72(v74, v76, v75);
  Bindable.wrappedValue.getter(v81, v43);
  v73 = *(_QWORD *)(v41 + 8);
  ((void (*)(char *, uint64_t))v73)(v42, v43);
  v44 = v81[0];
  KeyPath = swift_getKeyPath(&unk_1000D0A68);
  v81[0] = v44;
  v46 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v81, KeyPath, v46);
  swift_release(KeyPath);
  swift_beginAccess(v44 + 24, v81, 0, 0);
  v47 = *(_QWORD *)(v44 + 24);
  swift_bridgeObjectRetain(v47);
  swift_release(v44);
  v78 = v36;
  v48 = swift_getKeyPath(&unk_1000D0AE8);
  v49 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v48, v49);
  swift_release(v48);
  v50 = swift_getKeyPath(&unk_1000D0AE8);
  v51 = v77;
  v52 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  PersistentModel.getValue<A>(forKey:)(v50, v52, &protocol witness table for String);
  swift_release(v50);
  v53 = v79;
  LOBYTE(v50) = sub_10003B6FC(v78, v79, v47);
  swift_bridgeObjectRelease(v53);
  v54 = v42;
  v55 = v46;
  v56 = (void (*)(char *, uint64_t))v73;
  swift_bridgeObjectRelease(v47);
  v72(v54, v76, v43);
  Bindable.wrappedValue.getter(&v78, v43);
  v56(v54, v43);
  v57 = v78;
  v78 = v51;
  v58 = swift_getKeyPath(&unk_1000D0AE8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v58, v49);
  swift_release(v58);
  if ((v50 & 1) != 0)
  {
    v59 = swift_getKeyPath(&unk_1000D0AE8);
    PersistentModel.getValue<A>(forKey:)(v59, v52, &protocol witness table for String);
    swift_release(v59);
    v61 = v78;
    v60 = v79;
    v62 = swift_getKeyPath(&unk_1000D0A68);
    v78 = v57;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v62, v55);
    swift_release(v62);
    v78 = v57;
    v63 = swift_getKeyPath(&unk_1000D0A68);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v78, v63, v55);
    swift_release(v63);
    swift_beginAccess(v57 + 24, &v78, 33, 0);
    sub_1000600C8(v61, v60);
    v65 = v64;
    swift_endAccess(&v78);
    swift_bridgeObjectRelease(v60);
  }
  else
  {
    v66 = swift_getKeyPath(&unk_1000D0AE8);
    PersistentModel.getValue<A>(forKey:)(v66, v52, &protocol witness table for String);
    swift_release(v66);
    v67 = v78;
    v68 = v79;
    v69 = swift_getKeyPath(&unk_1000D0A68);
    v78 = v57;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v78, v69, v55);
    swift_release(v69);
    v78 = v57;
    v70 = swift_getKeyPath(&unk_1000D0A68);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(&v78, v70, v55);
    swift_release(v70);
    swift_beginAccess(v57 + 24, &v78, 33, 0);
    sub_10008A914(v80, v67, v68);
    v65 = v80[1];
    swift_endAccess(&v78);
  }
  swift_bridgeObjectRelease(v65);
  sub_1000150CC();
  v78 = v57;
  v71 = swift_getKeyPath(&unk_1000D0A68);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v78, v71, v55);
  swift_release(v57);
  *(_QWORD *)&result = swift_release(v71).n128_u64[0];
  return result;
}

double sub_10005C924()
{
  if (qword_100113A20 != -1)
    swift_once(&qword_100113A20, sub_10001B86C);
  return *(double *)&qword_10011F8A8 * -3.0;
}

uint64_t sub_10005C96C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t KeyPath;
  unint64_t v27;
  uint64_t v28;

  v28 = a2;
  v3 = sub_100005360(&qword_100116058);
  __chkstk_darwin(v3, v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100005360(&qword_1001161D8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100116040);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (uint64_t *)(a1 + *(int *)(type metadata accessor for FilteredHistoryRecord(0) + 20));
  v16 = *v15;
  v17 = v15[1];
  v18 = 0xE500000000000000;
  v19 = 0x7961646F54;
  switch(v17)
  {
    case 0uLL:
      break;
    case 1uLL:
      v18 = 0xE900000000000079;
      v19 = 0x6164726574736559;
      break;
    case 2uLL:
      v18 = 0xEF73796144203720;
      v19 = 0x73756F6976657250;
      break;
    case 3uLL:
      v18 = 0x80000001000D56E0;
      v19 = 0xD000000000000010;
      break;
    default:
      v19 = *v15;
      v18 = v15[1];
      break;
  }
  v27 = v19;
  sub_100014070(v16, v17);
  if (qword_100113EB0 != -1)
    swift_once(&qword_100113EB0, sub_100089974);
  v20 = qword_10011FE58;
  v21 = qword_100113D60;
  swift_retain(qword_10011FE58);
  if (v21 != -1)
    swift_once(&qword_100113D60, sub_1000531AC);
  v22 = qword_10011FD08;
  v23 = v17 < 4;
  v24 = type metadata accessor for Text.Case(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v10, 1, 1, v24);
  KeyPath = swift_getKeyPath(&unk_1000D0AB8);
  sub_10000531C((uint64_t)v10, (uint64_t)v6 + *(int *)(v3 + 28), &qword_1001161D8);
  *v6 = KeyPath;
  sub_10000531C((uint64_t)v6, (uint64_t)&v14[*(int *)(v11 + 36)], &qword_100116058);
  *(_QWORD *)v14 = v27;
  *((_QWORD *)v14 + 1) = v18;
  *((_QWORD *)v14 + 2) = v20;
  *((_QWORD *)v14 + 3) = v22;
  v14[32] = v23;
  swift_retain_n(v22, 2);
  swift_retain(v20);
  swift_bridgeObjectRetain(v18);
  sub_100004F48((uint64_t)v6, &qword_100116058);
  sub_100004F48((uint64_t)v10, &qword_1001161D8);
  swift_release(v22);
  swift_release(v20);
  swift_bridgeObjectRelease(v18);
  return sub_100007CD8((uint64_t)v14, v28, &qword_100116040);
}

double sub_10005CC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  double result;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  uint64_t v27;
  _QWORD v28[3];

  v6 = sub_100005360(&qword_100115FD0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = swift_projectBox(a3, v9);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v11, v12, v6);
  Bindable.wrappedValue.getter(v28, v6);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v11, v6);
  v13 = v28[0];
  KeyPath = swift_getKeyPath(&unk_1000D0A68);
  v28[0] = v13;
  v15 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v28, KeyPath, v15);
  swift_release(KeyPath);
  swift_beginAccess(v13 + 24, v28, 0, 0);
  v16 = *(_QWORD *)(v13 + 24);
  swift_bridgeObjectRetain(v16);
  swift_release(v13);
  v17 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRelease(v16);
  if (v17 <= 1)
  {
    v19 = *a4;
    v20 = *((_BYTE *)a4 + 8);
    v21 = swift_retain(v19);
    v22 = sub_100043890(v21, v20);
    swift_release(v19);
    v23 = swift_getKeyPath(&unk_1000D0A90);
    __chkstk_darwin(v23, v24);
    *(_QWORD *)&v26[-16] = v22;
    v26[-8] = 5;
    v27 = v22;
    v25 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v27, v23, sub_10006127C, &v26[-32], (char *)&type metadata for () + 8, v25);
    swift_release(v22);
    *(_QWORD *)&result = swift_release(v23).n128_u64[0];
  }
  return result;
}

id sub_10005CE78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  uint64_t v22;
  void *v23;

  v22 = a1;
  KeyPath = swift_getKeyPath(a3);
  v6 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v22, KeyPath, v6);
  swift_release(KeyPath);
  v7 = swift_getKeyPath(a3);
  v8 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  v9 = sub_100013E20();
  PersistentModel.getValue<A>(forKey:)(v7, v8, v9);
  swift_release(v7);
  v10 = v23;
  if (v23)
  {
    v11 = *(_QWORD *)(a2 + 16);
    v12 = *(_BYTE *)(a2 + 24);
    v13 = swift_retain(v11);
    v14 = sub_1000439B4(v13, v12);
    swift_release(v11);
    v15 = sub_10004835C();
    swift_release(v14);
    v16 = *(_QWORD *)(v15 + 16);
    swift_retain(v16);
    swift_release(v15);
    v17 = swift_getKeyPath(&unk_1000D0BB8);
    v22 = v16;
    v18 = sub_100005178((unint64_t *)&qword_100114A88, type metadata accessor for CalculatorUnitConversionDataProvider, (uint64_t)&unk_1000D2520);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v22, v17, v18);
    swift_release(v17);
    v19 = *(id *)(v16 + 16);
    swift_release(v16);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    v10 = objc_msgSend(v19, "findUnitWithName:", v20);

  }
  return v10;
}

uint64_t sub_10005D058@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;

  v10 = sub_100005360(&qword_100116288);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v30 - v16;
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v30 - v20;
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v30 - v24;
  v26 = (char *)sub_10005CE78(a3, a1, (uint64_t)&unk_1000D0BE0);
  if (qword_100113D50 != -1)
    swift_once(&qword_100113D50, sub_100053174);
  sub_10005EAEC(a2, qword_10011FCF8, v26, 0x6365527475706E49, (char *)0xEB0000000064726FLL, 0x6365527475706E49, 0xEF74696E5564726FLL, (uint64_t)v25, 18.0);

  v27 = (char *)sub_10005CE78(a3, a1, (uint64_t)&unk_1000D0B90);
  if (qword_100113D58 != -1)
    swift_once(&qword_100113D58, sub_100053190);
  sub_10005EAEC(a4, qword_10011FD00, v27, 0x6552746C75736552, (char *)0xEC00000064726F63, 0xD000000000000010, 0x80000001000D6D30, (uint64_t)v21, 23.0);

  sub_10000531C((uint64_t)v25, (uint64_t)v17, &qword_100116288);
  sub_10000531C((uint64_t)v21, (uint64_t)v13, &qword_100116288);
  sub_10000531C((uint64_t)v17, a5, &qword_100116288);
  v28 = sub_100005360(&qword_100116290);
  sub_10000531C((uint64_t)v13, a5 + *(int *)(v28 + 48), &qword_100116288);
  sub_100004F48((uint64_t)v21, &qword_100116288);
  sub_100004F48((uint64_t)v25, &qword_100116288);
  sub_100004F48((uint64_t)v13, &qword_100116288);
  return sub_100004F48((uint64_t)v17, &qword_100116288);
}

uint64_t sub_10005D2EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  __n128 v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  void (*v103)(char *, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t OpaqueTypeConformance2;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char v135[16];
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139[8];
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[2];

  v116 = a4;
  v127 = a5;
  v8 = sub_100005360(&qword_100115CC0);
  __chkstk_darwin(v8, v9);
  v118 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100005360(&qword_100116218);
  v126 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125, v11);
  v119 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100116220);
  __chkstk_darwin(v13, v14);
  v120 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16, v17);
  v121 = (uint64_t)&v105 - v19;
  v124 = type metadata accessor for Divider(0, v18);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124, v20);
  v122 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v23);
  v132 = (char *)&v105 - v24;
  v25 = type metadata accessor for CalculatorHistoryListView(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v29 = v28;
  v115 = v28;
  v30 = (char *)&v105 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100005360(&qword_100116228);
  v112 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31, v32);
  v34 = (char *)&v105 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100005360(&qword_100116230);
  v113 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35, v36);
  v38 = (char *)&v105 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100005360(&qword_100116238);
  __chkstk_darwin(v39, v40);
  v117 = (uint64_t)&v105 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  v130 = (uint64_t)&v105 - v44;
  __chkstk_darwin(v45, v46);
  v133 = (uint64_t)&v105 - v47;
  __chkstk_darwin(v48, v49);
  v134 = (uint64_t)&v105 - v50;
  v128 = a3;
  v129 = v30;
  sub_10005F3F8(a3, (uint64_t)v30);
  v114 = *(unsigned __int8 *)(v26 + 80);
  v111 = ((v114 + 32) & ~v114) + v29;
  v51 = (v114 + 32) & ~v114;
  v110 = v51;
  v131 = v114 | 7;
  v52 = swift_allocObject(&unk_10010AA50, v111, v114 | 7);
  *(_QWORD *)(v52 + 16) = a1;
  *(_QWORD *)(v52 + 24) = a2;
  sub_10005F548((uint64_t)v30, v52 + v51);
  v140 = a2;
  v141 = a3;
  v142 = a1;
  swift_retain(a1);
  v53 = a2;
  swift_retain(a2);
  v54 = sub_100005360(&qword_100116240);
  v109 = v54;
  v108 = sub_100008078(&qword_100116248, &qword_100116240, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  Button.init(action:label:)(sub_10006154C, v52, sub_10006159C, v139, v54, v108);
  v55 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001000D6C90);
  v57 = v56;
  LOBYTE(v52) = v58;
  v60 = v59;
  v61 = sub_100008078(&qword_100116250, &qword_100116228, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.help(_:)(v55, v57, v52 & 1, v60, v31, v61);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v57);
  v112 = *(_QWORD *)(v112 + 8);
  v106 = v31;
  ((void (*)(char *, uint64_t))v112)(v34, v31);
  v143[0] = v31;
  v143[1] = v61;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v143, &opaque type descriptor for <<opaque return type of View.help(_:)>>, 1);
  v62 = v133;
  v63 = v35;
  View.accessibilityIdentifier(_:)(0x7270784579706F43, 0xEE006E6F69737365, v35, OpaqueTypeConformance2);
  v64 = *(void (**)(char *, uint64_t))(v113 + 8);
  v64(v38, v63);
  sub_100007CD8(v62, v134, &qword_100116238);
  v66 = v128;
  v65 = (uint64_t)v129;
  sub_10005F3F8(v128, (uint64_t)v129);
  v67 = swift_allocObject(&unk_10010AA78, v111, v131);
  v68 = v116;
  *(_QWORD *)(v67 + 16) = v116;
  *(_QWORD *)(v67 + 24) = v53;
  sub_10005F548(v65, v67 + v110);
  v136 = v53;
  v137 = v66;
  v138 = v68;
  swift_retain(v53);
  swift_retain(v68);
  Button.init(action:label:)(sub_10006152C, v67, sub_1000616C8, v135, v109, v108);
  v69 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000018, 0x80000001000D6CB0);
  v71 = v70;
  v73 = v72;
  v75 = v106;
  View.help(_:)(v69, v70, v74 & 1, v72, v106, v61);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v71);
  ((void (*)(char *, uint64_t))v112)(v34, v75);
  v76 = v130;
  View.accessibilityIdentifier(_:)(0x7573655279706F43, 0xEA0000000000746CLL, v63, OpaqueTypeConformance2);
  v64(v38, v63);
  v77 = v76;
  v78 = v133;
  v79 = sub_100007CD8(v76, v133, &qword_100116238);
  v80 = v132;
  v81.n128_f64[0] = Divider.init()(v79);
  v82 = v118;
  static ButtonRole.destructive.getter(v81);
  v83 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v83 - 8) + 56))(v82, 0, 1, v83);
  v84 = (uint64_t)v129;
  sub_10005F3F8(v128, (uint64_t)v129);
  v85 = (v114 + 16) & ~v114;
  v86 = (v115 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
  v87 = swift_allocObject(&unk_10010AAA0, v86 + 8, v131);
  sub_10005F548(v84, v87 + v85);
  *(_QWORD *)(v87 + v86) = v53;
  swift_retain(v53);
  v88 = sub_100005360(&qword_100116258);
  v89 = sub_10006185C();
  v90 = v119;
  Button.init(role:action:label:)(v82, sub_100061800, v87, sub_10005E1DC, 0, v88, v89);
  v91 = sub_100008078(&qword_100116278, &qword_100116218, (uint64_t)&protocol conformance descriptor for Button<A>);
  v92 = (uint64_t)v120;
  v93 = v125;
  View.accessibilityIdentifier(_:)(0x6574656C6544, 0xE600000000000000, v125, v91);
  (*(void (**)(char *, uint64_t))(v126 + 8))(v90, v93);
  v94 = v121;
  sub_100007CD8(v92, v121, &qword_100116220);
  sub_10000531C(v134, v77, &qword_100116238);
  v95 = v117;
  sub_10000531C(v78, v117, &qword_100116238);
  v96 = v123;
  v97 = *(void (**)(char *, char *, uint64_t))(v123 + 16);
  v98 = v122;
  v99 = v80;
  v100 = v124;
  v97(v122, v99, v124);
  sub_10000531C(v94, v92, &qword_100116220);
  v101 = v127;
  sub_10000531C(v77, v127, &qword_100116238);
  v102 = (int *)sub_100005360(&qword_100116280);
  sub_10000531C(v95, v101 + v102[12], &qword_100116238);
  v97((char *)(v101 + v102[16]), v98, v100);
  sub_10000531C(v92, v101 + v102[20], &qword_100116220);
  sub_100004F48(v94, &qword_100116220);
  v103 = *(void (**)(char *, uint64_t))(v96 + 8);
  v103(v132, v100);
  sub_100004F48(v133, &qword_100116238);
  sub_100004F48(v134, &qword_100116238);
  sub_100004F48(v92, &qword_100116220);
  v103(v98, v100);
  sub_100004F48(v95, &qword_100116238);
  return sub_100004F48(v130, &qword_100116238);
}

uint64_t sub_10005DC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = LocalizedStringKey.init(stringLiteral:)(0x7078452079706F43, 0xEF6E6F6973736572);
  LOWORD(v31) = 2;
  v7 = Text.init(_:tableName:bundle:comment:)(v6);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = sub_10005CE78(a1, a2, (uint64_t)&unk_1000D0BE0);
  if (v14)
  {
    v15 = v14;
    v16 = CalculateExpression.copyableExpression.getter(v14);
    v18 = v17;
    v32 = v16;
    v33 = v17;
    swift_bridgeObjectRetain(v17);
    v19._countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v18);
    v20 = objc_msgSend(v15, "shortName", 38, v31);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    swift_bridgeObjectRetain(v33);
    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v23);

    v25 = v32;
    v26 = v33;
  }
  else
  {
    v25 = CalculateExpression.copyableExpression.getter(0);
    v26 = v27;
  }
  if (qword_100113C10 != -1)
    swift_once(&qword_100113C10, sub_10002E234);
  v28 = v11 & 1;
  v29 = qword_10011FAC8;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v28;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v25;
  *(_QWORD *)(a3 + 40) = v26;
  *(_BYTE *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a3 + 64) = v29;
  sub_10002DE88(v7, v9, v28);
  swift_bridgeObjectRetain(v13);
  sub_10002DE88(v25, v26, 0);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  swift_retain(v29);
  sub_10002DD44(v25, v26, 0);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  sub_10002DD44(v7, v9, v28);
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_10005DE78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = LocalizedStringKey.init(stringLiteral:)(0x7365522079706F43, 0xEB00000000746C75);
  LOWORD(v31) = 2;
  v7 = Text.init(_:tableName:bundle:comment:)(v6);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  v14 = sub_10005CE78(a1, a2, (uint64_t)&unk_1000D0B90);
  if (v14)
  {
    v15 = v14;
    v16 = CalculateExpression.copyableExpression.getter(v14);
    v18 = v17;
    v32 = v16;
    v33 = v17;
    swift_bridgeObjectRetain(v17);
    v19._countAndFlagsBits = 32;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v18);
    v20 = objc_msgSend(v15, "shortName", 34, v31);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    swift_bridgeObjectRetain(v33);
    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v23);

    v25 = v32;
    v26 = v33;
  }
  else
  {
    v25 = CalculateExpression.copyableExpression.getter(0);
    v26 = v27;
  }
  if (qword_100113C10 != -1)
    swift_once(&qword_100113C10, sub_10002E234);
  v28 = v11 & 1;
  v29 = qword_10011FAC8;
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v28;
  *(_QWORD *)(a3 + 24) = v13;
  *(_QWORD *)(a3 + 32) = v25;
  *(_QWORD *)(a3 + 40) = v26;
  *(_BYTE *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a3 + 64) = v29;
  sub_10002DE88(v7, v9, v28);
  swift_bridgeObjectRetain(v13);
  sub_10002DE88(v25, v26, 0);
  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  swift_retain(v29);
  sub_10002DD44(v25, v26, 0);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  sub_10002DD44(v7, v9, v28);
  return swift_bridgeObjectRelease(v13);
}

double sub_10005E0B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  _QWORD v14[3];

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = swift_retain(v3);
  v6 = sub_100043984(v5, v4);
  swift_release(v3);
  KeyPath = swift_getKeyPath(&unk_1000D0A68);
  v14[0] = v6;
  v8 = sub_100005178(&qword_1001145D0, type metadata accessor for CalculatorHistoryViewModel, (uint64_t)&unk_1000CDCA4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v14, KeyPath, v8);
  swift_release(KeyPath);
  swift_beginAccess(v6 + 24, v14, 0, 0);
  v9 = *(_QWORD *)(v6 + 24);
  swift_bridgeObjectRetain(v9);
  swift_release(v6);
  v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRelease(v9);
  v11 = swift_retain(v3);
  v12 = sub_100043984(v11, v4);
  swift_release(v3);
  if (v10 < 2)
    sub_10000D938(a2);
  else
    sub_100016818();
  *(_QWORD *)&result = swift_release(v12).n128_u64[0];
  return result;
}

uint64_t sub_10005E1DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t *v10;
  uint64_t (*v11)(char *, uint64_t);
  uint64_t v13;

  v2 = sub_100005360(&qword_100116270);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = LocalizedStringKey.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
  Label<>.init(_:systemImage:)(v7);
  if (qword_100113D70 != -1)
    swift_once(&qword_100113D70, sub_1000531E4);
  v8 = qword_10011FD18;
  KeyPath = swift_getKeyPath(&unk_1000D0B60);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 16))(a1, v6, v2);
  v10 = (uint64_t *)(a1 + *(int *)(sub_100005360(&qword_100116258) + 36));
  *v10 = KeyPath;
  v10[1] = v8;
  v11 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  swift_retain(v8);
  return v11(v6, v2);
}

uint64_t sub_10005E2FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v45 = a2;
  v48 = a3;
  v4 = type metadata accessor for CalculatorHistoryListView(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100115CC0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100116170);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005360(&qword_100116160);
  __chkstk_darwin(v46, v18);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100005360(&qword_1001160D0);
  v22 = __chkstk_darwin(v47, v21);
  v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter(v22);
  v25 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 0, 1, v25);
  sub_10005F3F8(a1, (uint64_t)v8);
  v26 = *(unsigned __int8 *)(v5 + 80);
  v27 = (v26 + 16) & ~v26;
  v28 = (v6 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = swift_allocObject(&unk_10010AA28, v28 + 8, v26 | 7);
  sub_10005F548((uint64_t)v8, v29 + v27);
  v30 = v45;
  *(_QWORD *)(v29 + v28) = v45;
  swift_retain(v30);
  Button.init(role:action:label:)(v12, sub_10006153C, v29, sub_10005E68C, 0, &type metadata for Image, &protocol witness table for Image);
  if (qword_100113D70 != -1)
    swift_once(&qword_100113D70, sub_1000531E4);
  v31 = qword_10011FD18;
  KeyPath = swift_getKeyPath(&unk_1000D0A10);
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v17, v13);
  v33 = v46;
  v34 = (uint64_t *)&v20[*(int *)(v46 + 36)];
  *v34 = KeyPath;
  v34[1] = v31;
  v35 = *(void (**)(char *, uint64_t))(v14 + 8);
  swift_retain(v31);
  v35(v17, v13);
  v36 = LocalizedStringKey.init(stringLiteral:)(0x6574656C6544, 0xE600000000000000);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v43 = sub_100060F34();
  View.accessibilityLabel(_:)(v36, v38, v40 & 1, v42, v33, v43);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v38);
  sub_100004F48((uint64_t)v20, &qword_100116160);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000011, 0x80000001000D6C70, v47);
  return sub_100004F48((uint64_t)v24, &qword_1001160D0);
}

double sub_10005E634(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  v5 = swift_retain(v3);
  v6 = sub_100043984(v5, v4);
  swift_release(v3);
  sub_10000D938(a2);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_10005E68C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10005EAAC(&qword_100113C08, &qword_10011FAC0, (uint64_t)sub_10002E208, a1);
}

uint64_t sub_10005E6A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t *v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v40 = a2;
  v43 = a4;
  v6 = type metadata accessor for CalculatorHistoryListView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  v10 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100116170);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100005360(&qword_100116160);
  __chkstk_darwin(v41, v16);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100005360(&qword_1001160D0);
  __chkstk_darwin(v42, v19);
  v21 = (char *)&v40 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005F3F8(a3, (uint64_t)v10);
  v22 = *(unsigned __int8 *)(v7 + 80);
  v23 = (v22 + 32) & ~v22;
  v24 = swift_allocObject(&unk_10010AA00, v23 + v8, v22 | 7);
  v25 = v40;
  *(_QWORD *)(v24 + 16) = a1;
  *(_QWORD *)(v24 + 24) = v25;
  sub_10005F548((uint64_t)v10, v24 + v23);
  swift_retain(a1);
  swift_retain(v25);
  Button.init(action:label:)(sub_10006152C, v24, sub_10005EA90, 0, &type metadata for Image, &protocol witness table for Image);
  if (qword_100113D78 != -1)
    swift_once(&qword_100113D78, sub_100053200);
  v26 = qword_10011FD20;
  KeyPath = swift_getKeyPath(&unk_1000D0A10);
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v18, v15, v11);
  v28 = v41;
  v29 = (uint64_t *)&v18[*(int *)(v41 + 36)];
  *v29 = KeyPath;
  v29[1] = v26;
  v30 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_retain(v26);
  v30(v15, v11);
  v31 = LocalizedStringKey.init(stringLiteral:)(0x7365522079706F43, 0xEB00000000746C75);
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v38 = sub_100060F34();
  View.accessibilityLabel(_:)(v31, v33, v35 & 1, v37, v28, v38);
  swift_bridgeObjectRelease(v37);
  swift_bridgeObjectRelease(v33);
  sub_100004F48((uint64_t)v18, &qword_100116160);
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000020, 0x80000001000D6C40, v42);
  return sub_100004F48((uint64_t)v21, &qword_1001160D0);
}

uint64_t sub_10005E988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v4 = sub_10005CE78(a2, a3, a4);
  if (v4)
  {
    v5 = v4;
    v6 = CalculateExpression.copyableExpression.getter(v4);
    v8 = v7;
    v20 = v6;
    v21 = v7;
    swift_bridgeObjectRetain(v7);
    v9._countAndFlagsBits = 32;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(v8);
    v10 = objc_msgSend(v5, "shortName");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    swift_bridgeObjectRetain(v21);
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v13);

    v15 = v20;
    v16 = v21;
  }
  else
  {
    v15 = CalculateExpression.copyableExpression.getter(0);
    v16 = v17;
  }
  v18 = v16;
  CalculateExpression.copyToClipboard(overridePlaintext:)(*(Swift::String_optional *)&v15);
  return swift_bridgeObjectRelease(v16);
}

uint64_t sub_10005EA90@<X0>(uint64_t *a1@<X8>)
{
  return sub_10005EAAC(&qword_100113C10, &qword_10011FAC8, (uint64_t)sub_10002E234, a1);
}

uint64_t sub_10005EAAC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = *a2;
  *a4 = *a2;
  return swift_retain(v6);
}

uint64_t sub_10005EAEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  __int128 v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t *v44;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _OWORD v50[3];

  v47 = a6;
  v48 = a7;
  v46 = a5;
  v49 = a8;
  v14 = sub_100005360(&qword_100116298);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005360(&qword_1001162A0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005360(&qword_1001162A8);
  v24 = __chkstk_darwin(v22, v23);
  v26 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = static VerticalAlignment.firstTextBaseline.getter(v24);
  if (qword_100113A08 != -1)
    swift_once(&qword_100113A08, sub_10001B83C);
  v28 = qword_10011F890;
  *(_QWORD *)v17 = v27;
  *((_QWORD *)v17 + 1) = v28;
  v17[16] = 0;
  v29 = sub_100005360(&qword_1001162B0);
  v30 = sub_10005EDAC(a1, a2, a4, v46, a3, v47, v48, (uint64_t)&v17[*(int *)(v29 + 44)], a9);
  v31 = CalculateExpression.copyableExpression.getter(v30);
  v33 = v32;
  sub_10000531C((uint64_t)v17, (uint64_t)v21, &qword_100116298);
  v34 = (uint64_t *)&v21[*(int *)(v18 + 36)];
  *v34 = v31;
  v34[1] = v33;
  v34[2] = (uint64_t)a3;
  v35 = a3;
  v36 = sub_100004F48((uint64_t)v17, &qword_100116298);
  v37 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(v50, 0, 1, *(_QWORD *)&a9, 0, v37, v38);
  sub_10000531C((uint64_t)v21, (uint64_t)v26, &qword_1001162A0);
  v39 = &v26[*(int *)(v22 + 36)];
  v40 = v50[1];
  *(_OWORD *)v39 = v50[0];
  *((_OWORD *)v39 + 1) = v40;
  *((_OWORD *)v39 + 2) = v50[2];
  sub_100004F48((uint64_t)v21, &qword_1001162A0);
  if (qword_100113EA8 != -1)
    swift_once(&qword_100113EA8, sub_10008995C);
  v41 = qword_10011FE50;
  KeyPath = swift_getKeyPath(&unk_1000D0C08);
  v43 = v49;
  sub_10000531C((uint64_t)v26, v49, &qword_1001162A8);
  v44 = (uint64_t *)(v43 + *(int *)(sub_100005360(&qword_100116288) + 36));
  *v44 = KeyPath;
  v44[1] = v41;
  swift_retain(v41);
  return sub_100004F48((uint64_t)v26, &qword_1001162A8);
}

uint64_t sub_10005EDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, double a9@<D0>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t KeyPath;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;

  v88 = a6;
  v89 = a7;
  v92 = a4;
  v93 = a5;
  v91 = a3;
  v96 = a8;
  v12 = sub_100005360(&qword_1001162B8);
  __chkstk_darwin(v12, v13);
  v87 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005360(&qword_1001162C0);
  __chkstk_darwin(v15, v16);
  v95 = (uint64_t)&v86 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v94 = (char *)&v86 - v20;
  v21 = sub_100005360(&qword_1001162C8);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for CalculateExpressionView(0);
  v90 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v86 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100005360(&qword_1001162D0);
  __chkstk_darwin(v29, v30);
  v32 = (char *)&v86 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v86 - v35;
  v37 = a9 / 1.35;
  v38 = qword_100113B58;
  v39 = a1;
  swift_retain(a1);
  swift_retain(a2);
  if (v38 != -1)
    swift_once(&qword_100113B58, sub_10001BB64);
  v40 = type metadata accessor for Text.TruncationMode(0);
  v41 = sub_100014124(v40, (uint64_t)qword_10011F9E0);
  v42 = *(_QWORD *)(v40 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v24, v41, v40);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v24, 0, 1, v40);
  CalculateExpressionView.init(expression:isEditable:fontSize:minFontSizeRatio:textAlignment:textColor:truncationMode:operationCallback:)(v39, 0, *(_QWORD *)&v37, 0, 0, 1, 0, a2, v24, 0, 0);
  v43 = sub_100005178((unint64_t *)&qword_1001162D8, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpressionView, (uint64_t)&protocol conformance descriptor for CalculateExpressionView);
  View.accessibilityIdentifier(_:)(v91, v92, v25, v43);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v28, v25);
  sub_100007CD8((uint64_t)v32, (uint64_t)v36, &qword_1001162D0);
  if (v93)
  {
    v44 = a2;
    v92 = v93;
    v45 = objc_msgSend(v92, "shortName");
    v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v48 = v47;

    v97 = v46;
    v98 = v48;
    v49 = sub_100004F84();
    v51 = Text.init<A>(_:)(&v97, &type metadata for String, v49, v50);
    v93 = v36;
    v53 = v52;
    v55 = v54;
    v57 = v56 & 1;
    v58 = Text.foregroundColor(_:)(v44, v51, v52, v57, v54);
    v60 = v59;
    v62 = v61;
    v64 = v63 & 1;
    sub_10002DD44(v51, v53, v57);
    swift_bridgeObjectRelease(v55);
    v65 = type metadata accessor for Font.Design(0);
    v66 = (uint64_t)v87;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v87, 1, 1, v65);
    v67 = static Font.system(size:weight:design:)(0, 1, v66, v37);
    sub_100004F48(v66, &qword_1001162B8);
    v69 = Text.font(_:)(v67, v58, v60, v64, v62, v68);
    v71 = v70;
    v73 = v72;
    v75 = v74;
    swift_release(v67);
    LOBYTE(v67) = v73 & 1;
    sub_10002DD44(v58, v60, v64);
    swift_bridgeObjectRelease(v62);
    KeyPath = swift_getKeyPath(&unk_1000D0C38);
    v97 = v69;
    v98 = v71;
    v99 = v73 & 1;
    v100 = v75;
    v101 = 0x4000000000000000;
    v102 = KeyPath;
    v103 = 1;
    v104 = 0;
    v77 = sub_100005360(&qword_1001162F0);
    v78 = sub_100061920();
    v79 = (uint64_t)v94;
    View.accessibilityIdentifier(_:)(v88, v89, v77, v78);

    sub_10002DD44(v69, v71, v67);
    swift_release(KeyPath);
    v36 = v93;
    swift_bridgeObjectRelease(v75);
    v80 = sub_100005360(&qword_1001162E0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v79, 0, 1, v80);
  }
  else
  {
    v81 = sub_100005360(&qword_1001162E0);
    v79 = (uint64_t)v94;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56))(v94, 1, 1, v81);
  }
  sub_10000531C((uint64_t)v36, (uint64_t)v32, &qword_1001162D0);
  v82 = v95;
  sub_10000531C(v79, v95, &qword_1001162C0);
  v83 = v96;
  sub_10000531C((uint64_t)v32, v96, &qword_1001162D0);
  v84 = sub_100005360(&qword_1001162E8);
  sub_10000531C(v82, v83 + *(int *)(v84 + 48), &qword_1001162C0);
  sub_100004F48(v79, &qword_1001162C0);
  sub_100004F48((uint64_t)v36, &qword_1001162D0);
  sub_100004F48(v82, &qword_1001162C0);
  return sub_100004F48((uint64_t)v32, &qword_1001162D0);
}

uint64_t sub_10005F354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(a1, a2);
  sub_10005F3F8(v3, (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_10010A8C0, v8 + v6, v7 | 7);
  result = sub_10005F548((uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v9 + v8);
  *a3 = sub_10005F58C;
  a3[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v9;
  return result;
}

uint64_t sub_10005F3F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalculatorHistoryListView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F43C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for CalculatorHistoryListView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v7 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = sub_100005360(&qword_100115F10);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    {
      swift_release(*v6);
      swift_release(v6[1]);
      v9 = (char *)v6 + *(int *)(v8 + 32);
      v10 = type metadata accessor for EditMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10005F548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CalculatorHistoryListView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005F58C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for CalculatorHistoryListView(0);
  return sub_100059848(a1, a2);
}

uint64_t sub_10005F5D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  Swift::String v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *object;
  Swift::String v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  Swift::String v57;
  id v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t countAndFlagsBits;
  void *v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  unint64_t v114;
  _BYTE v116[12];
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  _BYTE *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  Swift::String v138;

  v137 = a1;
  v132 = a5;
  v8 = type metadata accessor for Locale(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = &v116[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for UUID(0);
  v15 = __chkstk_darwin(v13, v14);
  v130 = &v116[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for CalculateExpression.Base(0, v15);
  v126 = *(_QWORD *)(v17 - 8);
  v127 = v17;
  v19 = __chkstk_darwin(v17, v18);
  v21 = &v116[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = type metadata accessor for AttributedString(0, v19);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v131 = &v116[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v26, v27);
  v128 = &v116[-v28];
  __chkstk_darwin(v29, v30);
  v129 = &v116[-v31];
  v134 = sub_100005360(&qword_100116340);
  __chkstk_darwin(v134, v32);
  v136 = &v116[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v34 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v34, v35);
  v37 = &v116[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v133 = sub_100005360(&qword_100116348);
  __chkstk_darwin(v133, v38);
  v135 = &v116[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a3 && a4)
  {
    v40 = a3;
    v131 = a4;
    LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(18, 4);
    v41._countAndFlagsBits = 0x202C7475706E49;
    v41._object = (void *)0xE700000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v41);
    v138._countAndFlagsBits = a2;
    KeyPath = swift_getKeyPath(&unk_1000D0D00);
    v43 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v138, KeyPath, v43);
    swift_release(KeyPath);
    v44 = swift_getKeyPath(&unk_1000D0D00);
    v45 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
    PersistentModel.getValue<A>(forKey:)(v44, v45, &protocol witness table for String);
    swift_release(v44);
    object = v138._object;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v138);
    swift_bridgeObjectRelease(object);
    v47._countAndFlagsBits = 32;
    v47._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v47);
    v48 = objc_msgSend(v40, "displayName");
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    v52._countAndFlagsBits = v49;
    v52._object = v51;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v52);
    swift_bridgeObjectRelease(v51);
    v53._countAndFlagsBits = 0x746C75736572202CLL;
    v53._object = (void *)0xE900000000000020;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v53);
    v138._countAndFlagsBits = a2;
    v54 = swift_getKeyPath(&unk_1000D0D28);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v138, v54, v43);
    swift_release(v54);
    v55 = swift_getKeyPath(&unk_1000D0D28);
    PersistentModel.getValue<A>(forKey:)(v55, v45, &protocol witness table for String);
    swift_release(v55);
    v56 = v138._object;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v138);
    swift_bridgeObjectRelease(v56);
    v57._countAndFlagsBits = 32;
    v57._object = (void *)0xE100000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v57);
    v58 = v131;
    v59 = objc_msgSend(v131, "displayName");
    v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
    v62 = v61;

    v63._countAndFlagsBits = v60;
    v63._object = v62;
    LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v63);
    swift_bridgeObjectRelease(v62);
    v64._countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v64);
    v65 = LocalizedStringKey.init(stringInterpolation:)(v37);
    v67 = v66;
    LOBYTE(v59) = v68;
    v70 = v69;
    v71 = sub_100005360(&qword_100116350);
    v72 = sub_100008078(&qword_100116358, &qword_100116350, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v73 = (uint64_t)v135;
    View.accessibilityLabel(_:)(v65, v67, v59 & 1, v70, v71, v72);
    swift_bridgeObjectRelease(v70);
    swift_bridgeObjectRelease(v67);
    v74 = v136;
    sub_10000531C(v73, (uint64_t)v136, &qword_100116348);
    swift_storeEnumTagMultiPayload(v74, v134, 0);
    v75 = sub_100061C58();
    _ConditionalContent<>.init(storage:)(v132, v74, v133, v133, v75, v75);

  }
  else
  {
    v124 = type metadata accessor for Utilities();
    v119 = a2 + OBJC_IVAR____TtCO10Calculator8SchemaV113HistoryRecord___observationRegistrar;
    v138._countAndFlagsBits = a2;
    v125 = v8;
    v76 = swift_getKeyPath(&unk_1000D0D00);
    v123 = v23;
    v77 = sub_100005178(&qword_1001142F0, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v138, v76, v77);
    swift_release(v76);
    v78 = swift_getKeyPath(&unk_1000D0D00);
    v118 = sub_100005178(&qword_1001142F8, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
    PersistentModel.getValue<A>(forKey:)(v78, v118, &protocol witness table for String);
    swift_release(v78);
    v122 = v9;
    v79 = a2;
    countAndFlagsBits = v138._countAndFlagsBits;
    v81 = v138._object;
    v82 = sub_100029214((uint64_t)_swiftEmptyArrayStorage);
    v120 = v12;
    v83 = v82;
    v117 = enum case for CalculateExpression.Base.base10(_:);
    v121 = v22;
    v84 = v127;
    v126 = *(_QWORD *)(v126 + 104);
    v85 = v21;
    v86 = ((uint64_t (*)(_BYTE *))v126)(v21);
    v87 = v130;
    UUID.init()(v86);
    v88 = type metadata accessor for CalculateExpression(0);
    swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
    v89 = CalculateExpression.init(_:options:base:id:)(countAndFlagsBits, v81, v83, v21, v87);
    v90 = (uint64_t)v128;
    CalculateExpression.accessibilityMathEquationDescription.getter();
    swift_release(v89);
    v138._countAndFlagsBits = v79;
    v91 = swift_getKeyPath(&unk_1000D0D28);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v138, v91, v77);
    swift_release(v91);
    v92 = swift_getKeyPath(&unk_1000D0D28);
    PersistentModel.getValue<A>(forKey:)(v92, v118, &protocol witness table for String);
    swift_release(v92);
    v93 = v138._countAndFlagsBits;
    v94 = v138._object;
    v95 = sub_100029214((uint64_t)_swiftEmptyArrayStorage);
    v96 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v126)(v85, v117, v84);
    UUID.init()(v96);
    swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
    v97 = CalculateExpression.init(_:options:base:id:)(v93, v94, v95, v85, v87);
    v98 = (uint64_t)v131;
    CalculateExpression.accessibilityMathEquationDescription.getter();
    swift_release(v97);
    v99 = (uint64_t)v120;
    static Locale.current.getter(v100);
    v101 = v129;
    sub_100053D18(v90, v98, v99, (uint64_t)v129);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v99, v125);
    v102 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
    v103 = v121;
    v102(v98, v121);
    v102(v90, v103);
    v104 = Text.init(_:)(v101);
    v106 = v105;
    v108 = v107;
    v110 = v109 & 1;
    v111 = sub_100005360(&qword_100116350);
    v112 = sub_100008078(&qword_100116358, &qword_100116350, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v73 = (uint64_t)v135;
    View.accessibilityLabel(_:)(v104, v106, v110, v108, v111, v112);
    sub_10002DD44(v104, v106, v110);
    swift_bridgeObjectRelease(v108);
    v113 = v136;
    sub_10000531C(v73, (uint64_t)v136, &qword_100116348);
    swift_storeEnumTagMultiPayload(v113, v134, 1);
    v114 = sub_100061C58();
    _ConditionalContent<>.init(storage:)(v132, v113, v133, v133, v114, v114);
  }
  return sub_100004F48(v73, &qword_100116348);
}

uint64_t sub_10005FEB8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_10005F5D8(a1, *(_QWORD *)v2, *(void **)(v2 + 8), *(void **)(v2 + 16), a2);
}

uint64_t sub_10005FECC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10005FEF8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10005A1F0(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10005FF04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for CalculatorHistoryListView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v7 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = sub_100005360(&qword_100115F10);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    {
      swift_release(*v6);
      swift_release(v6[1]);
      v9 = (char *)v6 + *(int *)(v8 + 32);
      v10 = type metadata accessor for EditMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_100060020(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorHistoryListView(0) - 8) + 80);
  return sub_10005A324(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_100060068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for CalculatorHistoryListView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10005AB58(a1, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_1000600C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10008BDB4();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_100060254(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

unint64_t sub_100060254(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

uint64_t sub_100060418(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_100005360(&qword_1001161D8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000531C(a1, (uint64_t)v5, &qword_1001161D8);
  return EnvironmentValues.textCase.setter(v5);
}

uint64_t sub_100060498(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = *a1;
  v5 = v14;
  v6 = swift_allocObject(&unk_10010A988, 32, 7);
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = a3;
  swift_bridgeObjectRetain(v5);
  swift_retain(a3);
  v7 = sub_100005360(&qword_1001161C0);
  v8 = type metadata accessor for UUID(0);
  v9 = sub_100005360(&qword_100116020);
  v10 = sub_100008078(&qword_1001161C8, &qword_1001161C0, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = sub_100060620();
  v12 = sub_100005178(&qword_1001161D0, type metadata accessor for FilteredHistoryRecord, (uint64_t)&unk_1000D0DB0);
  return ForEach<>.init(_:content:)(&v14, sub_1000612BC, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1000605B0()
{
  uint64_t v0;

  return sub_100060498(*(uint64_t **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

unint64_t sub_1000605BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116010;
  if (!qword_100116010)
  {
    v1 = sub_100005608(&qword_100116008);
    sub_100060620();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100116010);
  }
  return result;
}

unint64_t sub_100060620()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116018;
  if (!qword_100116018)
  {
    v1 = sub_100005608(&qword_100116020);
    sub_1000606A4();
    sub_100008078(&qword_1001161A0, &qword_1001161A8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116018);
  }
  return result;
}

unint64_t sub_1000606A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116028;
  if (!qword_100116028)
  {
    v1 = sub_100005608(&qword_100116030);
    sub_10006071C();
    sub_1000607E4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Section<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100116028);
  }
  return result;
}

unint64_t sub_10006071C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116038;
  if (!qword_100116038)
  {
    v1 = sub_100005608(&qword_100116040);
    sub_1000607A0();
    sub_100008078(&qword_100116050, &qword_100116058, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116038);
  }
  return result;
}

unint64_t sub_1000607A0()
{
  unint64_t result;

  result = qword_100116048;
  if (!qword_100116048)
  {
    result = swift_getWitnessTable(&unk_1000D0514, &type metadata for SectionHeaderView);
    atomic_store(result, (unint64_t *)&qword_100116048);
  }
  return result;
}

unint64_t sub_1000607E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116060;
  if (!qword_100116060)
  {
    v1 = sub_100005608(&qword_100116068);
    sub_100060868();
    sub_100008078(&qword_1001161A0, &qword_1001161A8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116060);
  }
  return result;
}

unint64_t sub_100060868()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116070;
  if (!qword_100116070)
  {
    v1 = sub_100005608(&qword_100116078);
    sub_1000608EC(&qword_100116080, &qword_100116088, (void (*)(void))sub_10006095C, (void (*)(void))sub_100060FD0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100116070);
  }
  return result;
}

uint64_t sub_1000608EC(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005608(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006095C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116090;
  if (!qword_100116090)
  {
    v1 = sub_100005608(&qword_100116098);
    sub_1000609E0();
    sub_100008078(&qword_100116188, &qword_100116190, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116090);
  }
  return result;
}

unint64_t sub_1000609E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001160A0;
  if (!qword_1001160A0)
  {
    v1 = sub_100005608(&qword_1001160A8);
    sub_100060A64();
    sub_100008078(&qword_100116178, &qword_100116180, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001160A0);
  }
  return result;
}

unint64_t sub_100060A64()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  result = qword_1001160B0;
  if (!qword_1001160B0)
  {
    v1 = sub_100005608(&qword_1001160B8);
    v2 = sub_100005608(&qword_1001160C0);
    v3 = sub_100005608(&qword_1001160C8);
    v4 = sub_100005608(&qword_1001160D0);
    v5 = sub_100005608(&qword_1001160D8);
    v10 = sub_100005608(&qword_1001160E0);
    v11 = sub_100005608(&qword_1001160E8);
    v12 = sub_100060C00();
    v13 = sub_100008078(&qword_100116148, &qword_1001160E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.contextMenu<A>(menuItems:)>>, 1);
    v7 = sub_100060EB0();
    v10 = v5;
    v11 = v4;
    v12 = OpaqueTypeConformance2;
    v13 = v7;
    v8 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
    v10 = v3;
    v11 = v4;
    v12 = v8;
    v13 = v7;
    v9 = swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.swipeActions<A>(edge:allowsFullSwipe:content:)>>, 1);
    v10 = v2;
    v11 = v9;
    swift_getOpaqueTypeConformance2(&v10, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001160B0);
  }
  return result;
}

unint64_t sub_100060C00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001160F0;
  if (!qword_1001160F0)
  {
    v1 = sub_100005608(&qword_1001160E0);
    sub_1000608EC(&qword_1001160F8, &qword_100116100, (void (*)(void))sub_100060CA4, (void (*)(void))sub_100060E6C);
    sub_100008078(&qword_100114B78, &qword_100114B80, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001160F0);
  }
  return result;
}

unint64_t sub_100060CA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116108;
  if (!qword_100116108)
  {
    v1 = sub_100005608(&qword_100115240);
    sub_100060D10();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116108);
  }
  return result;
}

unint64_t sub_100060D10()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100116110;
  if (!qword_100116110)
  {
    v1 = sub_100005608(&qword_100115238);
    v2[0] = sub_100005608(&qword_100116118);
    v2[1] = sub_100060DA4();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100060E28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116110);
  }
  return result;
}

unint64_t sub_100060DA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116120;
  if (!qword_100116120)
  {
    v1 = sub_100005608(&qword_100116118);
    sub_100008078(&qword_100116128, &qword_100116130, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116120);
  }
  return result;
}

unint64_t sub_100060E28()
{
  unint64_t result;

  result = qword_100116138;
  if (!qword_100116138)
  {
    result = swift_getWitnessTable(&unk_1000D0CB0, &type metadata for HistoryViewAccessibilityLabel);
    atomic_store(result, (unint64_t *)&qword_100116138);
  }
  return result;
}

unint64_t sub_100060E6C()
{
  unint64_t result;

  result = qword_100116140;
  if (!qword_100116140)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&qword_100116140);
  }
  return result;
}

unint64_t sub_100060EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116150;
  if (!qword_100116150)
  {
    v1 = sub_100005608(&qword_1001160D0);
    sub_100060F34();
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116150);
  }
  return result;
}

unint64_t sub_100060F34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116158;
  if (!qword_100116158)
  {
    v1 = sub_100005608(&qword_100116160);
    sub_100008078(&qword_100116168, &qword_100116170, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116158);
  }
  return result;
}

unint64_t sub_100060FD0()
{
  unint64_t result;

  result = qword_100116198;
  if (!qword_100116198)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AlignmentWritingModifier, &type metadata for _AlignmentWritingModifier);
    atomic_store(result, (unint64_t *)&qword_100116198);
  }
  return result;
}

unint64_t sub_10006101C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1001161B8;
  if (!qword_1001161B8)
  {
    v1 = sub_100005608(&qword_100115FE8);
    v2[0] = sub_100005608(&qword_100115FD8);
    v2[1] = type metadata accessor for PlainListStyle(255);
    v2[2] = sub_100008078(&qword_1001161B0, &qword_100115FD8, (uint64_t)&protocol conformance descriptor for List<A, B>);
    v2[3] = &protocol witness table for PlainListStyle;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listStyle<A>(_:)>>, 1);
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001161B8);
  }
  return result;
}

uint64_t sub_100061108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for CalculatorHistoryListView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v7 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = sub_100005360(&qword_100115F10);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    {
      swift_release(*v6);
      swift_release(v6[1]);
      v9 = (char *)v6 + *(int *)(v8 + 32);
      v10 = type metadata accessor for EditMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

double sub_10006121C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorHistoryListView(0) - 8) + 80);
  return sub_10005CC68(a1, a2, *(_QWORD *)(v2 + 16), (uint64_t *)(v2 + ((v5 + 24) & ~v5)));
}

uint64_t sub_10006127C()
{
  uint64_t v0;

  return sub_1000226A4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_100061298()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000612BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000612DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10005AD24(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1000612E8()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_100061310@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for CalculatorHistoryListView(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_10005AFEC(a1, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_100061370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = type metadata accessor for CalculatorHistoryListView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v7 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = sub_100005360(&qword_100115F10);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    {
      swift_release(*v6);
      swift_release(v6[1]);
      v9 = (char *)v6 + *(int *)(v8 + 32);
      v10 = type metadata accessor for EditMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release(*v6);
  }
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, v12 + 8, v3 | 7);
}

double sub_1000614A8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for CalculatorHistoryListView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10005C0A8(v0 + v2, *(void (**)(char *, uint64_t, uint64_t))(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100061508@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10005D2EC(v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_100061514@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005E2FC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10006151C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10005E6A8(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_10006152C()
{
  return sub_100061558((uint64_t)&unk_1000D0B90);
}

uint64_t sub_10006153C()
{
  return sub_10006180C((uint64_t (*)(unint64_t, _QWORD))sub_10005E634);
}

uint64_t sub_10006154C()
{
  return sub_100061558((uint64_t)&unk_1000D0BE0);
}

uint64_t sub_100061558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CalculatorHistoryListView(0) - 8) + 80);
  return sub_10005E988(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3), a1);
}

uint64_t sub_10006159C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005DC34(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000615AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;

  v1 = type metadata accessor for CalculatorHistoryListView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v7 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = sub_100005360(&qword_100115F10);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    {
      swift_release(*v6);
      swift_release(v6[1]);
      v9 = (char *)v6 + *(int *)(v8 + 32);
      v10 = type metadata accessor for EditMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release(*v6);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000616C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005DE78(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000616D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = type metadata accessor for CalculatorHistoryListView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 32));
  v7 = sub_100005360(&qword_100115688);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = sub_100005360(&qword_100115F10);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8))
    {
      swift_release(*v6);
      swift_release(v6[1]);
      v9 = (char *)v6 + *(int *)(v8 + 32);
      v10 = type metadata accessor for EditMode(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release(*v6);
  }
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v11 + 8;
  swift_release(*(_QWORD *)(v0 + v11));
  return swift_deallocObject(v0, v12, v3 | 7);
}

uint64_t sub_100061800()
{
  return sub_10006180C((uint64_t (*)(unint64_t, _QWORD))sub_10005E0B8);
}

uint64_t sub_10006180C(uint64_t (*a1)(unint64_t, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(type metadata accessor for CalculatorHistoryListView(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return a1(v1 + v3, *(_QWORD *)(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_10006185C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116260;
  if (!qword_100116260)
  {
    v1 = sub_100005608(&qword_100116258);
    sub_100008078(&qword_100116268, &qword_100116270, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    sub_100008078(&qword_100114C28, &qword_100114C30, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116260);
  }
  return result;
}

unint64_t sub_100061920()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001162F8;
  if (!qword_1001162F8)
  {
    v1 = sub_100005608(&qword_1001162F0);
    sub_1000619A4();
    sub_100008078(&qword_100116320, &qword_100116328, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001162F8);
  }
  return result;
}

unint64_t sub_1000619A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116300;
  if (!qword_100116300)
  {
    v1 = sub_100005608(&qword_100116308);
    sub_100008078(&qword_100116310, &qword_100116318, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116300);
  }
  return result;
}

void destroy for HistoryViewAccessibilityLabel(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);

}

uint64_t *_s10Calculator29HistoryViewAccessibilityLabelVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  v3 = *a2;
  v4 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = (uint64_t)v4;
  v5 = (void *)a2[2];
  a1[2] = (uint64_t)v5;
  swift_retain(v3);
  v6 = v4;
  v7 = v5;
  return a1;
}

uint64_t *assignWithCopy for HistoryViewAccessibilityLabel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = (void *)a1[1];
  v7 = (void *)a2[1];
  a1[1] = (uint64_t)v7;
  v8 = v7;

  v9 = (void *)a1[2];
  v10 = (void *)a2[2];
  a1[2] = (uint64_t)v10;
  v11 = v10;

  return a1;
}

__n128 initializeWithTake for KeypadButtonAction(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

_QWORD *assignWithTake for HistoryViewAccessibilityLabel(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;

  swift_release(*a1);
  v4 = (void *)a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;

  v5 = (void *)a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for KeypadButtonAction(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeypadButtonAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for HistoryViewAccessibilityLabel()
{
  return &type metadata for HistoryViewAccessibilityLabel;
}

uint64_t sub_100061C0C()
{
  return sub_100008078(&qword_100116330, &qword_100116338, (uint64_t)&protocol conformance descriptor for ScrollViewReader<A>);
}

uint64_t sub_100061C38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6358, 1);
}

unint64_t sub_100061C58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116360;
  if (!qword_100116360)
  {
    v1 = sub_100005608(&qword_100116348);
    sub_100008078(&qword_100116358, &qword_100116350, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116360);
  }
  return result;
}

unint64_t sub_100061CF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116368;
  if (!qword_100116368)
  {
    v1 = sub_100005608(&qword_100116370);
    sub_100061C58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116368);
  }
  return result;
}

uint64_t sub_100061D5C()
{
  return sub_10006127C();
}

uint64_t *sub_100061D70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    if (v11 >= 4)
    {
      *v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    v13 = *(int *)(a3 + 24);
    v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = v14;
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_100061E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = *(_QWORD *)(a1 + *(int *)(a2 + 20) + 8);
  if (v5 >= 4)
    swift_bridgeObjectRelease(v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_100061E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  if (v10 >= 4)
  {
    *v8 = *v9;
    v8[1] = v10;
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  v11 = *(int *)(a3 + 24);
  v12 = *(_QWORD *)(a2 + v11);
  *(_QWORD *)(a1 + v11) = v12;
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t sub_100061F18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  v11 = *(_QWORD *)(a2 + v7 + 8);
  if (v10 >= 4)
  {
    if (v11 >= 4)
    {
      *v8 = *v9;
      v13 = v9[1];
      v8[1] = v13;
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRelease(v10);
      goto LABEL_8;
    }
    sub_100062000((uint64_t)v8);
    goto LABEL_6;
  }
  if (v11 < 4)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  *v8 = *v9;
  v12 = v9[1];
  v8[1] = v12;
  swift_bridgeObjectRetain(v12);
LABEL_8:
  v14 = *(int *)(a3 + 24);
  v15 = *(_QWORD *)(a2 + v14);
  v16 = *(_QWORD *)(a1 + v14);
  *(_QWORD *)(a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_100062000(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for String - 1) + 8))();
  return a1;
}

uint64_t sub_100062034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100062098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >= 4)
  {
    v11 = v9[1];
    if (v11 >= 4)
    {
      *v8 = *v9;
      v8[1] = v11;
      swift_bridgeObjectRelease(v10);
      goto LABEL_6;
    }
    sub_100062000((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)(a1 + v12);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_100062148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100062154);
}

uint64_t sub_100062154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000621D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000621DC);
}

uint64_t sub_1000621DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FilteredHistoryRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1001163D0;
  if (!qword_1001163D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FilteredHistoryRecord);
  return result;
}

uint64_t sub_100062290(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1000D0D98;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100062314()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116410;
  if (!qword_100116410)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_100116410);
  }
  return result;
}

uint64_t sub_10006235C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

unint64_t destroy for TimestampSelectionType(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s10Calculator22TimestampSelectionTypeOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for TimestampSelectionType(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for TimestampSelectionType(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TimestampSelectionType(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TimestampSelectionType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_1000625A8(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1000625C0(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TimestampSelectionType()
{
  return &type metadata for TimestampSelectionType;
}

unint64_t sub_1000625F4()
{
  unint64_t result;

  result = qword_100116418;
  if (!qword_100116418)
  {
    result = swift_getWitnessTable(&unk_1000D0E50, &type metadata for TimestampSelectionType);
    atomic_store(result, (unint64_t *)&qword_100116418);
  }
  return result;
}

uint64_t sub_100062638(uint64_t *a1, uint64_t a2)
{
  return sub_1000629C0(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_10006264C(uint64_t *a1, uint64_t a2)
{
  return sub_100062A4C(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

BOOL sub_100062660(uint64_t a1, uint64_t *a2)
{
  return sub_100062674(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *a2, a2[1]);
}

BOOL sub_100062674(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v12;

  switch(a4)
  {
    case 0:
      if (!a2)
        goto LABEL_17;
      v6 = 0;
      goto LABEL_12;
    case 1:
      if (a2 == 1)
        goto LABEL_17;
      v6 = 1;
      goto LABEL_12;
    case 2:
      if (a2 == 2)
        goto LABEL_17;
      v6 = 2;
      goto LABEL_12;
    case 3:
      if (a2 == 3)
        goto LABEL_17;
      v6 = 3;
      goto LABEL_12;
    default:
      if (a2 >= 4)
      {
        if (a3 == a1 && a4 == a2)
        {
LABEL_17:
          v8 = 0;
        }
        else
        {
          v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a1, a2, 0);
          v8 = 0;
          if ((v12 & 1) == 0)
            v8 = _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a1, a2, 1);
        }
      }
      else
      {
        v6 = 4;
LABEL_12:
        v7 = 4;
        if (a2 < 4)
          v7 = a2;
        v8 = v6 < v7;
      }
      return (v8 & 1) == 0;
  }
}

BOOL sub_100062780(uint64_t *a1, uint64_t a2)
{
  return sub_100062794(*a1, a1[1], *(_QWORD *)a2, *(_QWORD *)(a2 + 8));
}

BOOL sub_100062794(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  char v8;
  char v12;

  switch(a2)
  {
    case 0:
      if (!a4)
        goto LABEL_17;
      v6 = 0;
      goto LABEL_12;
    case 1:
      if (a4 == 1)
        goto LABEL_17;
      v6 = 1;
      goto LABEL_12;
    case 2:
      if (a4 == 2)
        goto LABEL_17;
      v6 = 2;
      goto LABEL_12;
    case 3:
      if (a4 == 3)
        goto LABEL_17;
      v6 = 3;
      goto LABEL_12;
    default:
      if (a4 >= 4)
      {
        if (a1 == a3 && a2 == a4)
        {
LABEL_17:
          v8 = 0;
        }
        else
        {
          v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
          v8 = 0;
          if ((v12 & 1) == 0)
            v8 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 1);
        }
      }
      else
      {
        v6 = 4;
LABEL_12:
        v7 = 4;
        if (a4 < 4)
          v7 = a4;
        v8 = v6 < v7;
      }
      return (v8 & 1) == 0;
  }
}

uint64_t sub_1000628A0(uint64_t a1, uint64_t *a2)
{
  return sub_1000628B4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *a2, a2[1]);
}

uint64_t sub_1000628B4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  char v11;

  switch(a4)
  {
    case 0:
      if (!a2)
        return 0;
      v6 = 0;
      goto LABEL_12;
    case 1:
      if (a2 == 1)
        return 0;
      v6 = 1;
      goto LABEL_12;
    case 2:
      if (a2 == 2)
        return 0;
      v6 = 2;
      goto LABEL_12;
    case 3:
      if (a2 == 3)
        return 0;
      v6 = 3;
      goto LABEL_12;
    default:
      if (a2 >= 4)
      {
        if (a3 == a1 && a4 == a2)
        {
          return 0;
        }
        else
        {
          v11 = _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a1, a2, 0);
          result = 0;
          if ((v11 & 1) == 0)
            return _stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a1, a2, 1);
        }
      }
      else
      {
        v6 = 4;
LABEL_12:
        v7 = 4;
        if (a2 < 4)
          v7 = a2;
        return v6 < v7;
      }
      return result;
  }
}

uint64_t sub_1000629C0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  switch(a2)
  {
    case 0:
      if (a4)
        goto LABEL_14;
      result = 1;
      break;
    case 1:
      if (a4 != 1)
        goto LABEL_14;
      result = 1;
      break;
    case 2:
      if (a4 != 2)
        goto LABEL_14;
      result = 1;
      break;
    case 3:
      if (a4 != 3)
        goto LABEL_14;
      result = 1;
      break;
    default:
      if (a4 < 4)
      {
LABEL_14:
        result = 0;
      }
      else if (a1 == a3 && a2 == a4)
      {
        result = 1;
      }
      else
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
      }
      break;
  }
  return result;
}

uint64_t sub_100062A4C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  char v11;

  switch(a2)
  {
    case 0:
      if (!a4)
        return 0;
      v6 = 0;
      goto LABEL_12;
    case 1:
      if (a4 == 1)
        return 0;
      v6 = 1;
      goto LABEL_12;
    case 2:
      if (a4 == 2)
        return 0;
      v6 = 2;
      goto LABEL_12;
    case 3:
      if (a4 == 3)
        return 0;
      v6 = 3;
      goto LABEL_12;
    default:
      if (a4 >= 4)
      {
        if (a1 == a3 && a2 == a4)
        {
          return 0;
        }
        else
        {
          v11 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
          result = 0;
          if ((v11 & 1) == 0)
            return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 1);
        }
      }
      else
      {
        v6 = 4;
LABEL_12:
        v7 = 4;
        if (a4 < 4)
          v7 = a4;
        return v6 < v7;
      }
      return result;
  }
}

uint64_t getEnumTagSinglePayload for FocusField(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100062C34 + 4 * byte_1000D0E85[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100062C68 + 4 * byte_1000D0E80[v4]))();
}

uint64_t sub_100062C68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100062C70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100062C78);
  return result;
}

uint64_t sub_100062C84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100062C8CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100062C90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100062C98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FocusField()
{
  return &type metadata for FocusField;
}

unint64_t sub_100062CB8()
{
  unint64_t result;

  result = qword_100116420;
  if (!qword_100116420)
  {
    result = swift_getWitnessTable(&unk_1000D0EBC, &type metadata for FocusField);
    atomic_store(result, (unint64_t *)&qword_100116420);
  }
  return result;
}

uint64_t destroy for CalculatorDisplayView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for CalculatorDisplayView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v7 = a2[5];
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for CalculatorDisplayView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v10 = a1[5];
  v11 = a2[5];
  a1[5] = v11;
  swift_retain(v11);
  swift_release(v10);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

__n128 initializeWithTake for CalculatorDisplayView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for CalculatorDisplayView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v8 = a1[5];
  a1[5] = a2[5];
  swift_release(v8);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorDisplayView(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorDisplayView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorDisplayView()
{
  return &type metadata for CalculatorDisplayView;
}

uint64_t sub_100062F94(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6420, 1);
}

uint64_t sub_100062FA4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __n128 v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t KeyPath;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  char v73;
  __int128 v74;
  char v75;
  _OWORD v76[7];
  _OWORD v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD v86[3];

  v2 = v1;
  v70 = a1;
  v3 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v68 = *(_QWORD *)(v3 - 8);
  v69 = v3;
  __chkstk_darwin(v3, v4);
  v67 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100005360(&qword_100116428);
  __chkstk_darwin(v64, v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for TaskPriority(0);
  v58 = *(_QWORD *)(v62 - 8);
  v9 = v58;
  __chkstk_darwin(v62, v10);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100005360(&qword_100116430);
  __chkstk_darwin(v61, v13);
  v15 = (_OWORD *)((char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100005360(&qword_100116438);
  v65 = *(_QWORD *)(v16 - 8);
  v66 = v16;
  v18 = __chkstk_darwin(v16, v17);
  v63 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = static Alignment.bottomLeading.getter(v18);
  v22 = v21;
  sub_100063508((uint64_t *)v2, (uint64_t)v76);
  v84 = v76[5];
  v85 = v76[6];
  v86[0] = v77[0];
  *(_OWORD *)((char *)v86 + 11) = *(_OWORD *)((char *)v77 + 11);
  v81 = v76[2];
  v82 = v76[3];
  v83 = v76[4];
  v79 = v76[0];
  v80 = v76[1];
  *(_QWORD *)&v78 = v20;
  *((_QWORD *)&v78 + 1) = v22;
  v74 = *(_OWORD *)(v2 + 32);
  v75 = *(_BYTE *)(v2 + 48);
  v72 = *(_OWORD *)(v2 + 32);
  v73 = *(_BYTE *)(v2 + 48);
  v23 = sub_100005360(&qword_100116440);
  FocusState.wrappedValue.getter(&v71, v23);
  v24 = *(_QWORD *)v2;
  v25 = *(unsigned __int8 *)(v2 + 8);
  v59 = v71;
  v60 = v25;
  *(_QWORD *)&v72 = *(_QWORD *)(v2 + 16);
  BYTE8(v72) = *(_BYTE *)(v2 + 24);
  v26 = swift_allocObject(&unk_10010ADF0, 65, 7);
  v27 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v26 + 32) = v27;
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(v26 + 64) = *(_BYTE *)(v2 + 48);
  swift_retain(v24);
  sub_100052DCC(&v72);
  sub_1000660D8((uint64_t)&v74);
  static TaskPriority.userInitiated.getter(v28);
  v29 = v64;
  v30 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v31 = v62;
  v30(&v8[*(int *)(v64 + 36)], v12, v62);
  v8[*(int *)(v29 + 40)] = v59;
  *(_QWORD *)v8 = &unk_100116450;
  *((_QWORD *)v8 + 1) = v26;
  v32 = v61;
  sub_10000531C((uint64_t)v8, (uint64_t)v15 + *(int *)(v61 + 36), &qword_100116428);
  v33 = v85;
  v15[6] = v84;
  v15[7] = v33;
  v15[8] = v86[0];
  *(_OWORD *)((char *)v15 + 139) = *(_OWORD *)((char *)v86 + 11);
  v34 = v81;
  v15[2] = v80;
  v15[3] = v34;
  v35 = v83;
  v15[4] = v82;
  v15[5] = v35;
  v36 = v79;
  *v15 = v78;
  v15[1] = v36;
  sub_100066100((uint64_t)&v78);
  sub_100004F48((uint64_t)v8, &qword_100116428);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v12, v31);
  sub_1000662C0((uint64_t)v76);
  v37 = swift_retain(v24);
  v38 = sub_100043890(v37, v60);
  swift_release(v24);
  KeyPath = swift_getKeyPath(&unk_1000D0F98);
  v71 = v38;
  v40 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v71, KeyPath, v40);
  swift_release(KeyPath);
  LOBYTE(v29) = *(_BYTE *)(v38 + 52);
  swift_release(v38);
  LOBYTE(v71) = v29;
  v41 = swift_allocObject(&unk_10010AE18, 65, 7);
  v42 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v41 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v41 + 32) = v42;
  *(_OWORD *)(v41 + 48) = *(_OWORD *)(v2 + 32);
  *(_BYTE *)(v41 + 64) = *(_BYTE *)(v2 + 48);
  swift_retain(v24);
  sub_100052DCC(&v72);
  sub_1000660D8((uint64_t)&v74);
  v43 = sub_100005360(&qword_100116458);
  v44 = sub_100066B68();
  v45 = sub_100066FB8(&qword_100116480, &qword_100116458, (void (*)(void))sub_100062CB8, (uint64_t)&protocol conformance descriptor for <A> A?);
  v46 = v63;
  View.onChange<A>(of:initial:_:)(&v71, 0, sub_100066B60, v41, v32, v43, v44, v45);
  swift_release(v41);
  sub_100004F48((uint64_t)v15, &qword_100116430);
  v47 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_100113CB0 != -1)
    swift_once(&qword_100113CB0, sub_10004E6F4);
  v48 = v67;
  NSNotificationCenter.publisher(for:object:)(qword_10011FC58, 0);

  v50 = v65;
  v49 = v66;
  v51 = v70;
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v70, v46, v66);
  v52 = sub_100005360(&qword_100116488);
  v54 = v68;
  v53 = v69;
  (*(void (**)(uint64_t, char *, uint64_t))(v68 + 16))(v51 + *(int *)(v52 + 52), v48, v69);
  v55 = (_QWORD *)(v51 + *(int *)(v52 + 56));
  *v55 = CalculatorButtonRepresentable.id.getter;
  v55[1] = 0;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v48, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v46, v49);
}

__n128 sub_100063508@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  unsigned __int8 v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  unsigned __int8 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __n128 result;
  uint64_t v86;
  unsigned __int8 v87;
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _OWORD v97[2];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  _OWORD v105[2];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  char v115;
  _OWORD v116[7];
  _OWORD v117[2];
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[2];
  uint64_t v126;
  char v127;
  __int128 v128;
  char v129;
  __int128 v130;
  __n128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _OWORD v137[3];

  v4 = *a1;
  v5 = *((_BYTE *)a1 + 8);
  v6 = swift_retain(*a1);
  v7 = sub_100043890(v6, v5);
  swift_release(v4);
  KeyPath = swift_getKeyPath(&unk_1000D0FC0);
  *(_QWORD *)&v130 = v7;
  v9 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v130, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(unsigned __int8 *)(v7 + 49);
  swift_release(v7);
  if (v10 == 1)
  {
    v128 = *((_OWORD *)a1 + 2);
    v129 = *((_BYTE *)a1 + 48);
    v118 = *((_OWORD *)a1 + 2);
    LOBYTE(v119) = *((_BYTE *)a1 + 48);
    v11 = sub_100005360(&qword_100116440);
    FocusState.projectedValue.getter(&v130, v11);
    v88 = *((_QWORD *)&v130 + 1);
    v89 = v130;
    v87 = v131.n128_u8[0];
    v126 = a1[2];
    v127 = *((_BYTE *)a1 + 24);
    v12 = swift_allocObject(&unk_10010AE90, 65, 7);
    v13 = *((_OWORD *)a1 + 1);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v12 + 32) = v13;
    *(_OWORD *)(v12 + 48) = *((_OWORD *)a1 + 2);
    *(_BYTE *)(v12 + 64) = *((_BYTE *)a1 + 48);
    v14 = type metadata accessor for CalculatorViewModel(0);
    swift_retain(v4);
    sub_100052DCC(&v126);
    sub_1000660D8((uint64_t)&v128);
    v86 = Environment.init<A>(_:)(v14, v14, v9);
    v16 = v15;
    v17 = type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
    v18 = sub_100005178(&qword_100116508, type metadata accessor for CalculatorUnitConversionViewModelWrapper, (uint64_t)&unk_1000CF484);
    v19 = Environment.init<A>(_:)(v17, v17, v18);
    v21 = v20;
    v22 = type metadata accessor for CalculatorLayout(0);
    v23 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    v24 = Environment.init<A>(_:)(v22, v22, v23);
    v26 = v25;
    LOBYTE(v118) = 0;
    State.init(wrappedValue:)(&v130, &v118, &type metadata for Bool);
    v27 = v130;
    v28 = *((_QWORD *)&v130 + 1);
    LOBYTE(v118) = 0;
    State.init(wrappedValue:)(&v130, &v118, &type metadata for Bool);
    *(_QWORD *)&v90 = sub_100066C18;
    *((_QWORD *)&v90 + 1) = v12;
    *(_QWORD *)&v91 = v86;
    BYTE8(v91) = v16 & 1;
    *(_QWORD *)&v92 = v19;
    BYTE8(v92) = v21 & 1;
    *(_QWORD *)&v93 = v24;
    BYTE8(v93) = v26 & 1;
    LOBYTE(v94) = v27;
    *((_QWORD *)&v94 + 1) = v28;
    LOBYTE(v95) = v130;
    *((_QWORD *)&v95 + 1) = *((_QWORD *)&v130 + 1);
    *(_QWORD *)&v96 = v89;
    *((_QWORD *)&v96 + 1) = v88;
    LOBYTE(v97[0]) = v87;
    *(_OWORD *)((char *)v97 + 8) = xmmword_1000D1200;
    v108 = v92;
    v109 = v93;
    v106 = v90;
    v107 = v91;
    v114 = 0x4059000000000000;
    v112 = v96;
    v113 = v97[0];
    v110 = v94;
    v111 = v95;
    v115 = 1;
    sub_100066E90((uint64_t)&v106);
    sub_100007CD8((uint64_t)&v106, (uint64_t)&v130, &qword_100116500);
    sub_100066E98(&v90);
    v29 = sub_100005360(&qword_1001164B8);
    v30 = sub_100005360(&qword_1001164E0);
    v31 = sub_100066CAC();
    v32 = sub_100008078(&qword_1001164D8, &qword_1001164E0, (uint64_t)&unk_1000D2358);
    _ConditionalContent<>.init(storage:)(&v98, &v130, v29, v30, v31, v32);
    v124 = v104;
    v125[0] = v105[0];
    *(_OWORD *)((char *)v125 + 10) = *(_OWORD *)((char *)v105 + 10);
    v120 = v100;
    v121 = v101;
    v122 = v102;
    v123 = v103;
    v118 = v98;
    v119 = v99;
    sub_100066E08((uint64_t)&v118);
    sub_100007CD8((uint64_t)&v118, (uint64_t)&v130, &qword_100116490);
    v33 = sub_100005360(&qword_100116498);
    v34 = sub_100005360(&qword_1001164A0);
    v35 = sub_100066C28();
    v36 = sub_100066D74();
    _ConditionalContent<>.init(storage:)(v116, &v130, v33, v34, v35, v36);
    sub_100066F24(&v90);
  }
  else
  {
    v37 = swift_retain(v4);
    v38 = sub_100043890(v37, v5);
    swift_release(v4);
    v39 = *(_QWORD *)(v38 + 16);
    v40 = swift_getKeyPath(&unk_1000D0FE8);
    *(_QWORD *)&v130 = v39;
    v41 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v130, v40, v41);
    swift_release(v40);
    v42 = *(_QWORD *)(v39 + 24);
    v43 = swift_retain(v42);
    v44 = CalculateExpression.format.getter(v43);
    swift_release(v38);
    swift_release(v42);
    if (v44 != 2)
    {
      v106 = *((_OWORD *)a1 + 2);
      LOBYTE(v107) = *((_BYTE *)a1 + 48);
      v118 = *((_OWORD *)a1 + 2);
      LOBYTE(v119) = *((_BYTE *)a1 + 48);
      v65 = sub_100005360(&qword_100116440);
      FocusState.projectedValue.getter(&v130, v65);
      v66 = v130;
      v67 = v131.n128_u8[0];
      *(_QWORD *)&v98 = a1[2];
      BYTE8(v98) = *((_BYTE *)a1 + 24);
      v68 = swift_allocObject(&unk_10010AE40, 65, 7);
      v69 = *((_OWORD *)a1 + 1);
      *(_OWORD *)(v68 + 16) = *(_OWORD *)a1;
      *(_OWORD *)(v68 + 32) = v69;
      *(_OWORD *)(v68 + 48) = *((_OWORD *)a1 + 2);
      *(_BYTE *)(v68 + 64) = *((_BYTE *)a1 + 48);
      v70 = type metadata accessor for CalculatorViewModel(0);
      swift_retain(v4);
      sub_100052DCC(&v98);
      sub_1000660D8((uint64_t)&v106);
      v71 = Environment.init<A>(_:)(v70, v70, v9);
      v73 = v72;
      v74 = type metadata accessor for CalculatorLayout(0);
      v75 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
      v76 = Environment.init<A>(_:)(v74, v74, v75);
      *(_QWORD *)&v118 = sub_100066C18;
      *((_QWORD *)&v118 + 1) = v68;
      *(_QWORD *)&v119 = v71;
      BYTE8(v119) = v73 & 1;
      *(_QWORD *)&v120 = v76;
      BYTE8(v120) = v77 & 1;
      v121 = v66;
      LOWORD(v122) = v67;
      sub_100066C1C((uint64_t)&v118);
      sub_100007CD8((uint64_t)&v118, (uint64_t)v116, &qword_100116490);
      v78 = sub_100005360(&qword_100116498);
      v79 = sub_100005360(&qword_1001164A0);
      v80 = sub_100066C28();
      v81 = sub_100066D74();
      _ConditionalContent<>.init(storage:)(&v130, v116, v78, v79, v80, v81);
      goto LABEL_7;
    }
    v90 = *((_OWORD *)a1 + 2);
    LOBYTE(v91) = *((_BYTE *)a1 + 48);
    v118 = *((_OWORD *)a1 + 2);
    LOBYTE(v119) = *((_BYTE *)a1 + 48);
    v45 = sub_100005360(&qword_100116440);
    FocusState.projectedValue.getter(&v130, v45);
    v46 = v130;
    v47 = v131.n128_u8[0];
    *(_QWORD *)&v128 = a1[2];
    BYTE8(v128) = *((_BYTE *)a1 + 24);
    v48 = swift_allocObject(&unk_10010AE68, 65, 7);
    v49 = *((_OWORD *)a1 + 1);
    *(_OWORD *)(v48 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v48 + 32) = v49;
    *(_OWORD *)(v48 + 48) = *((_OWORD *)a1 + 2);
    *(_BYTE *)(v48 + 64) = *((_BYTE *)a1 + 48);
    v50 = type metadata accessor for CalculatorViewModel(0);
    swift_retain(v4);
    sub_100052DCC(&v128);
    sub_1000660D8((uint64_t)&v90);
    v51 = Environment.init<A>(_:)(v50, v50, v9);
    LOBYTE(v50) = v52;
    v53 = type metadata accessor for CalculatorLayout(0);
    v54 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
    v55 = Environment.init<A>(_:)(v53, v53, v54);
    *(_QWORD *)&v106 = sub_100066C18;
    *((_QWORD *)&v106 + 1) = v48;
    *(_QWORD *)&v107 = v51;
    BYTE8(v107) = v50 & 1;
    *(_QWORD *)&v108 = v55;
    BYTE8(v108) = v56 & 1;
    v109 = v46;
    LOBYTE(v110) = v47;
    sub_100066DFC((uint64_t)&v106);
    sub_100007CD8((uint64_t)&v106, (uint64_t)&v130, &qword_100116500);
    swift_retain(v46);
    swift_retain(*((_QWORD *)&v46 + 1));
    swift_retain(v48);
    swift_retain(v51);
    swift_retain(v55);
    v57 = sub_100005360(&qword_1001164B8);
    v58 = sub_100005360(&qword_1001164E0);
    v59 = sub_100066CAC();
    v60 = sub_100008078(&qword_1001164D8, &qword_1001164E0, (uint64_t)&unk_1000D2358);
    _ConditionalContent<>.init(storage:)(&v98, &v130, v57, v58, v59, v60);
    v124 = v104;
    v125[0] = v105[0];
    *(_OWORD *)((char *)v125 + 10) = *(_OWORD *)((char *)v105 + 10);
    v120 = v100;
    v121 = v101;
    v122 = v102;
    v123 = v103;
    v118 = v98;
    v119 = v99;
    sub_100066E08((uint64_t)&v118);
    sub_100007CD8((uint64_t)&v118, (uint64_t)&v130, &qword_100116490);
    v61 = sub_100005360(&qword_100116498);
    v62 = sub_100005360(&qword_1001164A0);
    v63 = sub_100066C28();
    v64 = sub_100066D74();
    _ConditionalContent<>.init(storage:)(v116, &v130, v61, v62, v63, v64);
    swift_release(*((_QWORD *)&v46 + 1));
    swift_release(v46);
    swift_release(v55);
    swift_release(v51);
    swift_release(v48);
  }
  v136 = v116[6];
  v137[0] = v117[0];
  *(_OWORD *)((char *)v137 + 11) = *(_OWORD *)((char *)v117 + 11);
  v132 = v116[2];
  v133 = v116[3];
  v134 = v116[4];
  v135 = v116[5];
  v130 = v116[0];
  v131 = (__n128)v116[1];
LABEL_7:
  v82 = v137[0];
  *(_OWORD *)(a2 + 96) = v136;
  *(_OWORD *)(a2 + 112) = v82;
  *(_OWORD *)(a2 + 123) = *(_OWORD *)((char *)v137 + 11);
  v83 = v133;
  *(_OWORD *)(a2 + 32) = v132;
  *(_OWORD *)(a2 + 48) = v83;
  v84 = v135;
  *(_OWORD *)(a2 + 64) = v134;
  *(_OWORD *)(a2 + 80) = v84;
  result = v131;
  *(_OWORD *)a2 = v130;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_100063E3C(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a1;
  v33 = sub_100005360(&qword_100116518);
  __chkstk_darwin(v33, v2);
  v31 = sub_100005360(&qword_100116520);
  __chkstk_darwin(v31, v3);
  v32 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100005360(&qword_100116528);
  __chkstk_darwin(v25, v5);
  v27 = (char *)v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100005360(&qword_100116530);
  __chkstk_darwin(v26, v7);
  v23[1] = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v30 = sub_100005360(&qword_100116538);
  __chkstk_darwin(v30, v11);
  v28 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v29 = (char *)v23 - v15;
  v16 = *v1;
  v24 = v1;
  v17 = *((_BYTE *)v1 + 8);
  v18 = swift_retain(v16);
  v19 = sub_100043890(v18, v17);
  swift_release(v16);
  KeyPath = swift_getKeyPath(&unk_1000D1010);
  v35 = v19;
  v21 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v35, KeyPath, v21);
  swift_release(KeyPath);
  v22 = *(unsigned __int8 *)(v19 + 48);
  swift_release(v19);
  __asm { BR              X9 }
}

uint64_t sub_100064094()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __n128 v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, v2 - 3836, 0x6D6D6172676F7270, 0xEA00000000007265, 0);
  swift_bridgeObjectRelease(v2 - 3836);
  if ((v6 & 1) == 0)
  {
    v7 = swift_retain(v4);
    v8 = sub_100043890(v7, v0);
    swift_release(v4);
    KeyPath = swift_getKeyPath(&unk_1000D1010);
    *(_QWORD *)(v5 - 88) = v8;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v5 - 88, KeyPath, v3);
    swift_release(KeyPath);
    v10 = *(unsigned __int8 *)(v8 + 48);
    swift_release(v8);
    __asm { BR              X9 }
  }
  v11 = 1701736302;
  v12 = swift_retain(v4);
  v13 = sub_100043890(v12, v0);
  swift_release(v4);
  v14 = swift_getKeyPath(&unk_1000D1038);
  *(_QWORD *)(v5 - 88) = v13;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v5 - 88, v14, v3);
  swift_release(v14);
  v15 = *(unsigned __int8 *)(v13 + 65);
  swift_release(v13);
  if (v15)
  {
    if (v15 == 1)
    {
      swift_bridgeObjectRelease(0xE500000000000000);
LABEL_9:
      v19 = swift_retain(v4);
      v20 = sub_100043890(v19, v0);
      swift_release(v4);
      v21 = *(_QWORD *)(v20 + 16);
      swift_retain(v21);
      swift_release(v20);
      v22 = swift_getKeyPath(&unk_1000D0FE8);
      *(_QWORD *)(v5 - 88) = v21;
      v23 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v5 - 88, v22, v23);
      swift_release(v22);
      v24 = *(_QWORD *)(v21 + 24);
      swift_retain(v24);
      v25 = swift_release(v21);
      v26 = ((uint64_t (*)(__n128))CalculateExpression.ascii.getter)(v25);
      v28 = v27;
      swift_release(v24);
      v29 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v29 = v26 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
        swift_bridgeObjectRetain(v28);
        sub_100064F68(1, v26, v28, 0x6176204949435341, 0xEB0000000065756CLL, v1);
        swift_bridgeObjectRelease(v28);
        v30 = sub_100005360(&qword_100116570);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v1, 0, 1, v30);
      }
      else
      {
        swift_bridgeObjectRelease(v28);
        v36 = sub_100005360(&qword_100116570);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v1, 1, 1, v36);
      }
      v38 = *(_QWORD *)(v5 - 104);
      v37 = *(_QWORD **)(v5 - 96);
      v39 = *(_QWORD *)(v5 - 120);
      v40 = *(_QWORD *)(v5 - 112);
      v42 = *(_QWORD *)(v5 - 136);
      v41 = *(_QWORD *)(v5 - 128);
      v43 = *(_QWORD *)(v5 - 152);
      sub_10000531C(v1, v43, &qword_100116530);
      swift_storeEnumTagMultiPayload(v43, *(_QWORD *)(v5 - 168), 0);
      v44 = sub_100066FB8(&qword_100116560, &qword_100116530, (void (*)(void))sub_1000670A0, (uint64_t)&protocol conformance descriptor for <A> A?);
      v45 = *(_QWORD **)(v5 - 144);
      _ConditionalContent<>.init(storage:)(v45, v43, *(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 160), v44, v44);
      sub_100004F48(v1, &qword_100116530);
      v46 = sub_100005360(&qword_100116558);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v45, 0, 1, v46);
      v47 = (uint64_t)v45;
LABEL_28:
      sub_100007CD8(v47, v42, &qword_100116538);
      goto LABEL_29;
    }
    v16 = 0xE700000000000000;
    v17 = 0x65646F63696E55;
  }
  else
  {
    v16 = 0xE400000000000000;
    v17 = 1701736302;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v16, 0x4949435341, 0xE500000000000000, 0);
  swift_bridgeObjectRelease(v16);
  if ((v18 & 1) != 0)
    goto LABEL_9;
  v31 = swift_retain(v4);
  v32 = sub_100043890(v31, v0);
  swift_release(v4);
  v33 = swift_getKeyPath(&unk_1000D1038);
  *(_QWORD *)(v5 - 88) = v32;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v5 - 88, v33, v3);
  swift_release(v33);
  v34 = *(unsigned __int8 *)(v32 + 65);
  swift_release(v32);
  if (v34)
  {
    if (v34 != 1)
    {
      swift_bridgeObjectRelease(0xE700000000000000);
      v38 = *(_QWORD *)(v5 - 104);
      v37 = *(_QWORD **)(v5 - 96);
      v42 = *(_QWORD *)(v5 - 136);
      v48 = *(_QWORD *)(v5 - 184);
      goto LABEL_22;
    }
    v35 = 0xE500000000000000;
    v11 = 0x4949435341;
  }
  else
  {
    v35 = 0xE400000000000000;
  }
  v38 = *(_QWORD *)(v5 - 104);
  v37 = *(_QWORD **)(v5 - 96);
  v42 = *(_QWORD *)(v5 - 136);
  v48 = *(_QWORD *)(v5 - 184);
  v49 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v35, 0x65646F63696E55, 0xE700000000000000, 0);
  swift_bridgeObjectRelease(v35);
  if ((v49 & 1) != 0)
  {
LABEL_22:
    v51 = swift_retain(v4);
    v52 = sub_100043890(v51, v0);
    swift_release(v4);
    v53 = *(_QWORD *)(v52 + 16);
    swift_retain(v53);
    swift_release(v52);
    v54 = swift_getKeyPath(&unk_1000D0FE8);
    *(_QWORD *)(v5 - 88) = v53;
    v55 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v5 - 88, v54, v55);
    swift_release(v54);
    v56 = *(_QWORD *)(v53 + 24);
    swift_retain(v56);
    v57 = swift_release(v53);
    v58 = ((uint64_t (*)(__n128))CalculateExpression.unicode.getter)(v57);
    v60 = v59;
    swift_release(v56);
    v61 = HIBYTE(v60) & 0xF;
    if ((v60 & 0x2000000000000000) == 0)
      v61 = v58 & 0xFFFFFFFFFFFFLL;
    if (v61)
    {
      swift_bridgeObjectRetain(v60);
      sub_100064F68(1, v58, v60, 0x2065646F63696E55, 0xED000065756C6176, v48);
      swift_bridgeObjectRelease(v60);
      v62 = sub_100005360(&qword_100116570);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v48, 0, 1, v62);
    }
    else
    {
      swift_bridgeObjectRelease(v60);
      v63 = sub_100005360(&qword_100116570);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v48, 1, 1, v63);
    }
    v39 = *(_QWORD *)(v5 - 120);
    v40 = *(_QWORD *)(v5 - 112);
    v41 = *(_QWORD *)(v5 - 128);
    v64 = *(_QWORD *)(v5 - 152);
    sub_10000531C(v48, v64, &qword_100116530);
    swift_storeEnumTagMultiPayload(v64, *(_QWORD *)(v5 - 168), 1);
    v65 = sub_100066FB8(&qword_100116560, &qword_100116530, (void (*)(void))sub_1000670A0, (uint64_t)&protocol conformance descriptor for <A> A?);
    v66 = *(_QWORD **)(v5 - 144);
    _ConditionalContent<>.init(storage:)(v66, v64, *(_QWORD *)(v5 - 160), *(_QWORD *)(v5 - 160), v65, v65);
    sub_100004F48(v48, &qword_100116530);
    v67 = sub_100005360(&qword_100116558);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 0, 1, v67);
    v47 = (uint64_t)v66;
    goto LABEL_28;
  }
  v50 = sub_100005360(&qword_100116558);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v42, 1, 1, v50);
  v39 = *(_QWORD *)(v5 - 120);
  v40 = *(_QWORD *)(v5 - 112);
  v41 = *(_QWORD *)(v5 - 128);
LABEL_29:
  sub_10000531C(v42, v40, &qword_100116538);
  swift_storeEnumTagMultiPayload(v40, v39, 0);
  v68 = sub_100066FB8(&qword_100116548, &qword_100116538, (void (*)(void))sub_10006701C, (uint64_t)&protocol conformance descriptor for <A> A?);
  v69 = sub_100066FB8(&qword_1001165E8, &qword_100116518, (void (*)(void))sub_100067264, (uint64_t)&protocol conformance descriptor for <A> A?);
  _ConditionalContent<>.init(storage:)(v37, v40, v41, v38, v68, v69);
  return sub_100004F48(v42, &qword_100116538);
}

uint64_t sub_100064A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 40) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 48) = static MainActor.shared.getter(v2);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_100064AE0, v3, v4);
}

uint64_t sub_100064AE0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  _OWORD *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 *v29;

  v1 = *(uint64_t **)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = swift_retain(*v1);
  v5 = sub_100043890(v4, v3);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_1000D0F98);
  *(_QWORD *)(v0 + 16) = v5;
  v7 = (_OWORD *)(v0 + 16);
  v8 = (unsigned __int8 *)(v0 + 33);
  v9 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v9);
  swift_release(KeyPath);
  LODWORD(v1) = *(unsigned __int8 *)(v5 + 52);
  swift_release(v5);
  v10 = *(_QWORD *)(v0 + 40);
  if ((_DWORD)v1 == 6)
  {
    v11 = swift_retain(v2);
    v12 = sub_100043890(v11, v3);
    swift_release(v2);
    v13 = sub_100026774();
    swift_release(v12);
    v14 = *(_OWORD *)(v10 + 32);
    *(_BYTE *)(v0 + 32) = *(_BYTE *)(v10 + 48);
    *v7 = v14;
    v15 = sub_100005360(&qword_100116440);
    FocusState.wrappedValue.getter((_QWORD *)(v0 + 33), v15);
    v16 = *v8;
    if (v16 == 6 || v16 != v13)
    {
      v29 = (__int128 *)(v10 + 32);
      v17 = swift_retain(v2);
      v18 = sub_100043890(v17, v3);
      swift_release(v2);
      v19 = swift_getKeyPath(&unk_1000D0F98);
      v20 = swift_task_alloc(32);
      *(_QWORD *)(v20 + 16) = v18;
      *(_BYTE *)(v20 + 24) = v13;
      *(_QWORD *)v7 = v18;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v19, sub_100061D5C, v20, (char *)&type metadata for () + 8, v9);
      swift_release(v19);
      swift_release(v18);
      v21 = v20;
      v22 = v29;
      swift_task_dealloc(v21);
LABEL_7:
      v27 = *v22;
      *(_BYTE *)(v0 + 32) = *((_BYTE *)v22 + 16);
      *v7 = v27;
      *v8 = v13;
      FocusState.wrappedValue.setter(v0 + 33, v15);
    }
  }
  else
  {
    v23 = *(_OWORD *)(v10 + 32);
    *(_BYTE *)(v0 + 32) = *(_BYTE *)(v10 + 48);
    *v7 = v23;
    v15 = sub_100005360(&qword_100116440);
    FocusState.wrappedValue.getter((_QWORD *)(v0 + 33), v15);
    if (*v8 != 6)
    {
      v22 = (__int128 *)(v10 + 32);
      v24 = swift_retain(v2);
      v25 = sub_100043890(v24, v3);
      swift_release(v2);
      v26 = swift_getKeyPath(&unk_1000D0F98);
      *(_QWORD *)v7 = v25;
      ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, v26, v9);
      swift_release(v26);
      v13 = *(_BYTE *)(v25 + 52);
      swift_release(v25);
      goto LABEL_7;
    }
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100064D9C(uint64_t *a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  char v18;
  char v19;
  __int128 v20;
  char v21;

  v2 = *a1;
  v3 = *((_BYTE *)a1 + 8);
  v4 = swift_retain(*a1);
  v5 = sub_100043890(v4, v3);
  swift_release(v2);
  KeyPath = swift_getKeyPath(&unk_1000D0F98);
  *(_QWORD *)&v20 = v5;
  v7 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v7);
  swift_release(KeyPath);
  v8 = *(unsigned __int8 *)(v5 + 52);
  swift_release(v5);
  if (v8 == 5)
  {
    v9 = swift_retain(v2);
    v10 = sub_100043890(v9, v3);
    swift_release(v2);
    v11 = sub_100026774();
    swift_release(v10);
    v12 = swift_retain(v2);
    v13 = sub_100043890(v12, v3);
    swift_release(v2);
    v14 = swift_getKeyPath(&unk_1000D0F98);
    __chkstk_darwin(v14, v15);
    v17[2] = v13;
    v18 = v11;
    *(_QWORD *)&v20 = v13;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v20, v14, sub_10006127C, v17, (char *)&type metadata for () + 8, v7);
    swift_release(v13);
    swift_release(v14);
    v20 = *((_OWORD *)a1 + 2);
    v21 = *((_BYTE *)a1 + 48);
    v19 = v11;
    v16 = sub_100005360(&qword_100116440);
    FocusState.wrappedValue.setter(&v19, v16);
  }
}

uint64_t sub_100064F68@<X0>(int a1@<W0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  int v72;
  double v73;
  double v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;

  v118 = a1;
  v120 = a6;
  v10 = sub_100005360(&qword_100116648);
  __chkstk_darwin(v10, v11);
  v119 = (uint64_t)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100005360(&qword_100116650);
  v13 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107, v14);
  v16 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100005360(&qword_1001165C0);
  __chkstk_darwin(v106, v17);
  v19 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100005360(&qword_1001165B0);
  __chkstk_darwin(v108, v20);
  v22 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100005360(&qword_1001165A0);
  __chkstk_darwin(v109, v23);
  v112 = (uint64_t)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100005360(&qword_100116590);
  __chkstk_darwin(v110, v25);
  v114 = (uint64_t)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100005360(&qword_100116580);
  __chkstk_darwin(v111, v27);
  v117 = (char *)&v105 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_100005360(&qword_100116570);
  __chkstk_darwin(v113, v29);
  v116 = (uint64_t)&v105 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v32);
  v115 = (uint64_t)&v105 - v33;
  *(_QWORD *)&v121 = a2;
  *((_QWORD *)&v121 + 1) = a3;
  LOBYTE(v122) = 0;
  *((_QWORD *)&v122 + 1) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  v34 = LocalizedStringKey.init(stringLiteral:)(a4, a5);
  v35 = Text.init(_:tableName:bundle:comment:)(v34);
  v37 = v36;
  v39 = v38;
  LOBYTE(a4) = v40 & 1;
  View.help(_:)();
  v41 = v37;
  v42 = a3;
  sub_10002DD44(v35, v41, a4);
  swift_bridgeObjectRelease(a3);
  v43 = swift_bridgeObjectRelease(v39);
  v44 = static Color.white.getter(v43);
  v45 = v107;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v19, v16, v107);
  *(_QWORD *)&v19[*(int *)(v106 + 36)] = v44;
  v46 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v45);
  v47 = static Alignment.center.getter(v46);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v121, 0, 1, 0, 1, 0, 1, 0x4028000000000000, 0, 0, 1, 0, 1, v47, v48);
  sub_10000531C((uint64_t)v19, (uint64_t)v22, &qword_1001165C0);
  v49 = &v22[*(int *)(v108 + 36)];
  v50 = v126;
  *((_OWORD *)v49 + 4) = v125;
  *((_OWORD *)v49 + 5) = v50;
  *((_OWORD *)v49 + 6) = v127;
  v51 = v122;
  *(_OWORD *)v49 = v121;
  *((_OWORD *)v49 + 1) = v51;
  v52 = v124;
  *((_OWORD *)v49 + 2) = v123;
  *((_OWORD *)v49 + 3) = v52;
  v53 = sub_100004F48((uint64_t)v19, &qword_1001165C0);
  v54 = static Edge.Set.vertical.getter(v53);
  v55 = static Edge.Set.leading.getter();
  v56 = Edge.Set.init(rawValue:)(0);
  v57 = Edge.Set.init(rawValue:)(v56);
  if (Edge.Set.init(rawValue:)(v57 & v54) != v54)
    v56 = Edge.Set.init(rawValue:)(v56 | v54);
  v58 = Edge.Set.init(rawValue:)(v56);
  v59 = Edge.Set.init(rawValue:)(v58 & v55);
  if (v59 != v55)
  {
    v59 = Edge.Set.init(rawValue:)(v56 | v55);
    LOBYTE(v56) = v59;
  }
  v60 = EdgeInsets.init(_all:)(v59, 2.0);
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v67 = v112;
  sub_10000531C((uint64_t)v22, v112, &qword_1001165B0);
  v68 = v67 + *(int *)(v109 + 36);
  *(_BYTE *)v68 = v56;
  *(double *)(v68 + 8) = v60;
  *(_QWORD *)(v68 + 16) = v62;
  *(_QWORD *)(v68 + 24) = v64;
  *(_QWORD *)(v68 + 32) = v66;
  *(_BYTE *)(v68 + 40) = 0;
  v69 = sub_100004F48((uint64_t)v22, &qword_1001165B0);
  v70 = static Edge.Set.trailing.getter(v69);
  v71 = v70;
  v72 = v118 & 1;
  if ((v118 & 1) != 0)
    v73 = 2.0;
  else
    v73 = 0.0;
  if ((v118 & 1) != 0)
    v74 = 8.0;
  else
    v74 = 0.0;
  v75 = EdgeInsets.init(_all:)(v70, v73);
  v77 = v76;
  v79 = v78;
  v81 = v80;
  v82 = v114;
  sub_10000531C(v67, v114, &qword_1001165A0);
  v83 = v82 + *(int *)(v110 + 36);
  *(_BYTE *)v83 = v71;
  *(double *)(v83 + 8) = v75;
  *(_QWORD *)(v83 + 16) = v77;
  *(_QWORD *)(v83 + 24) = v79;
  *(_QWORD *)(v83 + 32) = v81;
  *(_BYTE *)(v83 + 40) = 0;
  sub_100004F48(v67, &qword_1001165A0);
  v84 = v119;
  v85 = sub_100065CF4(v72, v119);
  v86 = static Alignment.center.getter(v85);
  v88 = v87;
  v89 = (uint64_t)v117;
  v90 = (uint64_t)&v117[*(int *)(v111 + 36)];
  sub_10000531C(v84, v90, &qword_100116648);
  v91 = (uint64_t *)(v90 + *(int *)(sub_100005360(&qword_1001165E0) + 36));
  *v91 = v86;
  v91[1] = v88;
  sub_10000531C(v82, v89, &qword_100116590);
  sub_100004F48(v84, &qword_100116648);
  v92 = sub_100004F48(v82, &qword_100116590);
  v93 = static Edge.Set.bottom.getter(v92);
  LOBYTE(v86) = v93;
  v94 = EdgeInsets.init(_all:)(v93, v74);
  v96 = v95;
  v98 = v97;
  v100 = v99;
  v101 = v116;
  sub_10000531C(v89, v116, &qword_100116580);
  v102 = v101 + *(int *)(v113 + 36);
  *(_BYTE *)v102 = v86;
  *(double *)(v102 + 8) = v94;
  *(_QWORD *)(v102 + 16) = v96;
  *(_QWORD *)(v102 + 24) = v98;
  *(_QWORD *)(v102 + 32) = v100;
  *(_BYTE *)(v102 + 40) = 0;
  sub_100004F48(v89, &qword_100116580);
  v103 = v115;
  sub_100007CD8(v101, v115, &qword_100116570);
  sub_100007CD8(v103, v120, &qword_100116570);
  return swift_bridgeObjectRelease(v42);
}

uint64_t sub_100065658@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  int v67;
  double v68;
  double v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  double v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;

  v111 = a1;
  v113 = a2;
  v2 = sub_100005360(&qword_100116648);
  __chkstk_darwin(v2, v3);
  v112 = (uint64_t)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100005360(&qword_100116680);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101, v5);
  v7 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100005360(&qword_100116640);
  __chkstk_darwin(v99, v8);
  v10 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100005360(&qword_100116630);
  __chkstk_darwin(v102, v11);
  v13 = (char *)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100005360(&qword_100116620);
  __chkstk_darwin(v103, v14);
  v106 = (uint64_t)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100005360(&qword_100116610);
  __chkstk_darwin(v104, v16);
  v108 = (uint64_t)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100005360(&qword_100116600);
  __chkstk_darwin(v105, v18);
  v110 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100005360(&qword_100116540);
  __chkstk_darwin(v107, v20);
  v109 = (uint64_t)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v114 = 6578514;
  *((_QWORD *)&v114 + 1) = 0xE300000000000000;
  v22 = sub_100004F84();
  v24 = Text.init<A>(_:)(&v114, &type metadata for String, v22, v23);
  v26 = v25;
  v28 = v27;
  *(_QWORD *)&v114 = v24;
  *((_QWORD *)&v114 + 1) = v25;
  v30 = v29 & 1;
  LOBYTE(v115) = v29 & 1;
  *((_QWORD *)&v115 + 1) = v27;
  v31 = LocalizedStringKey.init(stringLiteral:)(0x736E6169646152, 0xE700000000000000);
  v33 = v32;
  v35 = v34;
  View.help(_:)(v31, v32, v36 & 1, v34, &type metadata for Text, &protocol witness table for Text);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v33);
  sub_10002DD44(v24, v26, v30);
  v37 = swift_bridgeObjectRelease(v28);
  v38 = static Color.white.getter(v37);
  v39 = v100;
  v40 = v101;
  (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v10, v7, v101);
  *(_QWORD *)&v10[*(int *)(v99 + 36)] = v38;
  v41 = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v7, v40);
  v42 = static Alignment.center.getter(v41);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v114, 0, 1, 0, 1, 0, 1, 0x4028000000000000, 0, 0, 1, 0, 1, v42, v43);
  sub_10000531C((uint64_t)v10, (uint64_t)v13, &qword_100116640);
  v44 = &v13[*(int *)(v102 + 36)];
  v45 = v119;
  *((_OWORD *)v44 + 4) = v118;
  *((_OWORD *)v44 + 5) = v45;
  *((_OWORD *)v44 + 6) = v120;
  v46 = v115;
  *(_OWORD *)v44 = v114;
  *((_OWORD *)v44 + 1) = v46;
  v47 = v117;
  *((_OWORD *)v44 + 2) = v116;
  *((_OWORD *)v44 + 3) = v47;
  v48 = sub_100004F48((uint64_t)v10, &qword_100116640);
  v49 = static Edge.Set.vertical.getter(v48);
  v50 = static Edge.Set.leading.getter();
  v51 = Edge.Set.init(rawValue:)(0);
  v52 = Edge.Set.init(rawValue:)(v51);
  if (Edge.Set.init(rawValue:)(v52 & v49) != v49)
    v51 = Edge.Set.init(rawValue:)(v51 | v49);
  v53 = Edge.Set.init(rawValue:)(v51);
  v54 = Edge.Set.init(rawValue:)(v53 & v50);
  if (v54 != v50)
  {
    v54 = Edge.Set.init(rawValue:)(v51 | v50);
    LOBYTE(v51) = v54;
  }
  v55 = EdgeInsets.init(_all:)(v54, 2.0);
  v57 = v56;
  v59 = v58;
  v61 = v60;
  v62 = v106;
  sub_10000531C((uint64_t)v13, v106, &qword_100116630);
  v63 = v62 + *(int *)(v103 + 36);
  *(_BYTE *)v63 = v51;
  *(double *)(v63 + 8) = v55;
  *(_QWORD *)(v63 + 16) = v57;
  *(_QWORD *)(v63 + 24) = v59;
  *(_QWORD *)(v63 + 32) = v61;
  *(_BYTE *)(v63 + 40) = 0;
  v64 = sub_100004F48((uint64_t)v13, &qword_100116630);
  v65 = static Edge.Set.trailing.getter(v64);
  v66 = v65;
  v67 = v111 & 1;
  if ((v111 & 1) != 0)
    v68 = 2.0;
  else
    v68 = 0.0;
  if ((v111 & 1) != 0)
    v69 = 8.0;
  else
    v69 = 0.0;
  v70 = EdgeInsets.init(_all:)(v65, v68);
  v72 = v71;
  v74 = v73;
  v76 = v75;
  v77 = v108;
  sub_10000531C(v62, v108, &qword_100116620);
  v78 = v77 + *(int *)(v104 + 36);
  *(_BYTE *)v78 = v66;
  *(double *)(v78 + 8) = v70;
  *(_QWORD *)(v78 + 16) = v72;
  *(_QWORD *)(v78 + 24) = v74;
  *(_QWORD *)(v78 + 32) = v76;
  *(_BYTE *)(v78 + 40) = 0;
  sub_100004F48(v62, &qword_100116620);
  v79 = v112;
  v80 = sub_100065CF4(v67, v112);
  v81 = static Alignment.center.getter(v80);
  v83 = v82;
  v84 = (uint64_t)v110;
  v85 = (uint64_t)&v110[*(int *)(v105 + 36)];
  sub_10000531C(v79, v85, &qword_100116648);
  v86 = (uint64_t *)(v85 + *(int *)(sub_100005360(&qword_1001165E0) + 36));
  *v86 = v81;
  v86[1] = v83;
  sub_10000531C(v77, v84, &qword_100116610);
  sub_100004F48(v79, &qword_100116648);
  v87 = sub_100004F48(v77, &qword_100116610);
  v88 = static Edge.Set.bottom.getter(v87);
  LOBYTE(v81) = v88;
  v89 = EdgeInsets.init(_all:)(v88, v69);
  v91 = v90;
  v93 = v92;
  v95 = v94;
  v96 = v109;
  sub_10000531C(v84, v109, &qword_100116600);
  v97 = v96 + *(int *)(v107 + 36);
  *(_BYTE *)v97 = v81;
  *(double *)(v97 + 8) = v89;
  *(_QWORD *)(v97 + 16) = v91;
  *(_QWORD *)(v97 + 24) = v93;
  *(_QWORD *)(v97 + 32) = v95;
  *(_BYTE *)(v97 + 40) = 0;
  sub_100004F48(v84, &qword_100116600);
  return sub_100007CD8(v96, v113, &qword_100116540);
}

uint64_t sub_100065CF4@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char v29;
  char v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;

  LODWORD(v48) = a1;
  v46 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v46, v3);
  v47 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100005360(&qword_100116658);
  v6 = __chkstk_darwin(v45, v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Material(0, v6);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360(&qword_100116660);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005360(&qword_100116668);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005360(&qword_100116670);
  v25 = __chkstk_darwin(v22, v23);
  v27 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v48 & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v24 + 56))(a2, 1, 1, v22, v25);
  v48 = v24;
  v28 = static Material.ultraThin.getter(v25);
  v29 = static Edge.Set.all.getter(v28);
  v44 = a2;
  v30 = v29;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v8, v13, v9);
  v8[*(int *)(v45 + 36)] = v30;
  sub_10000531C((uint64_t)v8, (uint64_t)v17, &qword_100116658);
  sub_100004F48((uint64_t)v8, &qword_100116658);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  sub_10000531C((uint64_t)v17, (uint64_t)v21, &qword_100116660);
  *(_QWORD *)&v21[*(int *)(v18 + 36)] = 0x3FC999999999999ALL;
  sub_100004F48((uint64_t)v17, &qword_100116660);
  v31 = v47;
  v32 = &v47[*(int *)(v46 + 20)];
  v33 = enum case for RoundedCornerStyle.continuous(_:);
  v34 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 104))(v32, v33, v34);
  __asm { FMOV            V0.2D, #4.0 }
  *v31 = _Q0;
  v40 = (uint64_t)&v27[*(int *)(v22 + 36)];
  sub_1000674BC((uint64_t)v31, v40);
  *(_WORD *)(v40 + *(int *)(sub_100005360(&qword_100116678) + 36)) = 256;
  sub_10000531C((uint64_t)v21, (uint64_t)v27, &qword_100116668);
  sub_100067500((uint64_t)v31);
  sub_100004F48((uint64_t)v21, &qword_100116668);
  v41 = v44;
  sub_100007CD8((uint64_t)v27, v44, &qword_100116670);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v41, 0, 1, v22);
}

uint64_t sub_100066048@<X0>(uint64_t a1@<X8>)
{
  return sub_100062FA4(a1);
}

uint64_t sub_10006608C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10011644C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100013F04;
  return sub_100064A74(v0 + 16);
}

uint64_t sub_1000660D8(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100066100(uint64_t a1)
{
  sub_100066168(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_WORD *)(a1 + 152), *(_BYTE *)(a1 + 154));
  return a1;
}

uint64_t sub_100066168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18, char a19)
{
  if ((a19 & 1) == 0)
    return sub_10006621C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, (unsigned __int16)(a18 & 0x1FF) >> 8);
  swift_retain(a7);
  swift_retain(a8);
  swift_retain(a2);
  swift_retain(a3);
  return swift_retain(a5);
}

uint64_t sub_10006621C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v19 = a7;
  v20 = a5;
  v21 = a3;
  if ((a19 & 1) != 0)
  {
    v23 = a5;
    v24 = a3;
    v21 = a7;
    v20 = a8;
    v19 = a2;
  }
  else
  {
    v23 = a12;
    v24 = a10;
    swift_retain(a13);
    swift_retain(a14);
    swift_retain(a2);
  }
  swift_retain(v21);
  swift_retain(v20);
  swift_retain(v19);
  swift_retain(v24);
  return swift_retain(v23);
}

uint64_t sub_1000662C0(uint64_t a1)
{
  sub_100066328(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_WORD *)(a1 + 136), *(_BYTE *)(a1 + 138));
  return a1;
}

void sub_100066328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, __int16 a18, char a19)
{
  if ((a19 & 1) != 0)
  {
    swift_release(a2);
    swift_release(a8);
    swift_release(a3);
    swift_release(a5);
    swift_release(a7);
  }
  else
  {
    sub_1000663DC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, (unsigned __int16)(a18 & 0x1FF) >> 8);
  }
}

uint64_t sub_1000663DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char a19)
{
  swift_release(a2);
  if ((a19 & 1) != 0)
  {
    swift_release(a8);
    swift_release(a3);
    swift_release(a5);
    a13 = a7;
  }
  else
  {
    swift_release(a14);
    swift_release(a3);
    swift_release(a5);
    swift_release(a7);
    swift_release(a10);
    swift_release(a12);
  }
  return swift_release(a13);
}

uint64_t sub_100066494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100116690);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
}

BOOL sub_1000664D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_1000664EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, _QWORD *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  Class isa;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD v86[2];
  _QWORD v87[3];
  _BYTE v88[8];

  v81 = a1;
  v85 = a4;
  v7 = type metadata accessor for AccessibilityTraits(0, a5);
  v75 = *(_QWORD *)(v7 - 8);
  v76 = v7;
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100005360(&qword_1001166A0);
  __chkstk_darwin(v82, v11);
  v84 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100005360(&qword_1001166A8);
  __chkstk_darwin(v83, v13);
  v77 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v78 = (char *)&v74 - v17;
  __chkstk_darwin(v18, v19);
  v80 = (char *)&v74 - v20;
  __chkstk_darwin(v21, v22);
  v79 = (char *)&v74 - v23;
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v74 - v26;
  __chkstk_darwin(v28, v29);
  v31 = (char *)&v74 - v30;
  v32 = swift_retain(a2);
  v33 = sub_100043890(v32, a3 & 1);
  swift_release(a2);
  v34 = *(_QWORD *)(v33 + 16);
  if ((a3 & 0x100) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1000D0FE8);
    v86[0] = v34;
    v39 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v86, KeyPath, v39);
    swift_release(KeyPath);
    v37 = (_QWORD *)(v34 + 24);
  }
  else
  {
    v35 = swift_getKeyPath(&unk_1000D1148);
    v86[0] = v34;
    v36 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v35, v36);
    swift_release(v35);
    v37 = (_QWORD *)(v34 + 32);
  }
  v40 = *v37;
  swift_retain(*v37);
  swift_release(v33);
  v42 = CalculateExpression.activeError.getter(v41);
  v43 = swift_release(v40);
  if (v42)
  {
    swift_getErrorValue(v42, v88, v87);
    v44 = Error.localizedDescription.getter(v87[1], v87[2]);
    v46 = v45;
    v86[0] = v44;
    v86[1] = v45;
    v47 = sub_100005360(&qword_1001166B0);
    v48 = sub_100008078(&qword_1001166B8, &qword_1001166B0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v49 = sub_100004F84();
    View.accessibilityLabel<A>(_:)(v86, v47, &type metadata for String, v48, v49);
    swift_bridgeObjectRelease(v46);
    v50 = v84;
    sub_10000531C((uint64_t)v31, v84, &qword_1001166A8);
    swift_storeEnumTagMultiPayload(v50, v82, 0);
    v51 = sub_100067808();
    _ConditionalContent<>.init(storage:)(v85, v50, v83, v83, v51, v51);
    swift_errorRelease(v42);
    v27 = v31;
  }
  else
  {
    static AccessibilityTraits.isMathEquation.getter(v43);
    v52 = sub_100005360(&qword_1001166B0);
    v53 = sub_100008078(&qword_1001166B8, &qword_1001166B0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    v54 = (uint64_t)v77;
    View.accessibilityAddTraits(_:)(v10, v52, v53);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v10, v76);
    v55 = swift_retain(a2);
    v56 = sub_100043890(v55, a3 & 1);
    swift_release(a2);
    v57 = *(_QWORD *)(v56 + 16);
    if ((a3 & 0x100) != 0)
    {
      v61 = swift_getKeyPath(&unk_1000D0FE8);
      v86[0] = v57;
      v62 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v61, v62);
      swift_release(v61);
      v60 = (_QWORD *)(v57 + 24);
    }
    else
    {
      v58 = swift_getKeyPath(&unk_1000D1148);
      v86[0] = v57;
      v59 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
      ObservationRegistrar.access<A, B>(_:keyPath:)(v86, v58, v59);
      swift_release(v58);
      v60 = (_QWORD *)(v57 + 32);
    }
    v63 = *v60;
    swift_retain(*v60);
    v64 = swift_release(v56);
    v65 = CalculateExpression.accessibilityMathEquation.getter(v64);
    swift_release(v63);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v65);
    v67 = (uint64_t)v78;
    v68 = v83;
    ModifiedContent<>.accessibilityCustomAttribute(_:value:)(0x71456874614D5841, 0xEE006E6F69746175, isa, v83);

    sub_100004F48(v54, &qword_1001166A8);
    v69 = (uint64_t)v80;
    ModifiedContent<>.accessibilityCustomAttribute(_:value:)(0xD00000000000001ELL, 0x80000001000D6DB0, 0, v68);
    sub_100004F48(v67, &qword_1001166A8);
    v70 = (uint64_t)v79;
    ModifiedContent<>.accessibilityCustomAttribute(_:value:)(0xD00000000000001ALL, 0x80000001000D6DD0, 0, v68);
    sub_100004F48(v69, &qword_1001166A8);
    sub_100007CD8(v70, (uint64_t)v27, &qword_1001166A8);
    v71 = v84;
    sub_10000531C((uint64_t)v27, v84, &qword_1001166A8);
    swift_storeEnumTagMultiPayload(v71, v82, 1);
    v72 = sub_100067808();
    _ConditionalContent<>.init(storage:)(v85, v71, v68, v68, v72, v72);
  }
  return sub_100004F48((uint64_t)v27, &qword_1001166A8);
}

uint64_t sub_100066B2C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  __int16 v4;

  if (*(_BYTE *)(v3 + 9))
    v4 = 256;
  else
    v4 = 0;
  return sub_1000664EC(a1, *(_QWORD *)v3, v4 | *(unsigned __int8 *)(v3 + 8), a2, a3);
}

void sub_100066B60()
{
  uint64_t v0;

  sub_100064D9C((uint64_t *)(v0 + 16));
}

unint64_t sub_100066B68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116460;
  if (!qword_100116460)
  {
    v1 = sub_100005608(&qword_100116430);
    sub_100008078(&qword_100116468, &qword_100116470, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_100008078(&qword_100116478, &qword_100116428, (uint64_t)&protocol conformance descriptor for _TaskValueModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116460);
  }
  return result;
}

uint64_t sub_100066C1C(uint64_t result)
{
  *(_BYTE *)(result + 138) = 1;
  return result;
}

unint64_t sub_100066C28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001164A8;
  if (!qword_1001164A8)
  {
    v1 = sub_100005608(&qword_100116498);
    sub_100066CAC();
    sub_100008078(&qword_1001164D8, &qword_1001164E0, (uint64_t)&unk_1000D2358);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001164A8);
  }
  return result;
}

unint64_t sub_100066CAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001164B0;
  if (!qword_1001164B0)
  {
    v1 = sub_100005608(&qword_1001164B8);
    sub_100008078(&qword_1001164C0, &qword_1001164C8, (uint64_t)&unk_1000D4590);
    sub_100066D30();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001164B0);
  }
  return result;
}

unint64_t sub_100066D30()
{
  unint64_t result;

  result = qword_1001164D0;
  if (!qword_1001164D0)
  {
    result = swift_getWitnessTable(&unk_1000D1074, &type metadata for DisplayViewFrame);
    atomic_store(result, (unint64_t *)&qword_1001164D0);
  }
  return result;
}

unint64_t sub_100066D74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001164E8;
  if (!qword_1001164E8)
  {
    v1 = sub_100005608(&qword_1001164A0);
    sub_100008078(&qword_1001164F0, &qword_1001164F8, (uint64_t)&unk_1000D43D8);
    sub_100066D30();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001164E8);
  }
  return result;
}

uint64_t sub_100066DFC(uint64_t result)
{
  *(_BYTE *)(result + 137) = 1;
  return result;
}

uint64_t sub_100066E08(uint64_t result)
{
  *(_BYTE *)(result + 138) = 0;
  return result;
}

uint64_t sub_100066E14()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 65, 7);
}

uint64_t sub_100066E48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  sub_100063E3C(a1);
  v2 = sub_100005360(&qword_100116510);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t sub_100066E90(uint64_t result)
{
  *(_BYTE *)(result + 137) = 0;
  return result;
}

_QWORD *sub_100066E98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  swift_retain(a1[12]);
  swift_retain(v8);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

_QWORD *sub_100066F24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[12];
  swift_release(a1[13]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_100066FB8(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100005608(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006701C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116550;
  if (!qword_100116550)
  {
    v1 = sub_100005608(&qword_100116558);
    sub_100066FB8(&qword_100116560, &qword_100116530, (void (*)(void))sub_1000670A0, (uint64_t)&protocol conformance descriptor for <A> A?);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116550);
  }
  return result;
}

unint64_t sub_1000670A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116568;
  if (!qword_100116568)
  {
    v1 = sub_100005608(&qword_100116570);
    sub_100067124(&qword_100116578, &qword_100116580, (void (*)(void))sub_1000671A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116568);
  }
  return result;
}

uint64_t sub_100067124(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(a2);
    a3();
    sub_100008078(&qword_1001165D8, &qword_1001165E0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000671A8()
{
  return sub_100067320(&qword_100116588, &qword_100116590, (void (*)(void))sub_1000671C4);
}

uint64_t sub_1000671C4()
{
  return sub_100067320(&qword_100116598, &qword_1001165A0, (void (*)(void))sub_1000671E0);
}

unint64_t sub_1000671E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001165A8;
  if (!qword_1001165A8)
  {
    v1 = sub_100005608(&qword_1001165B0);
    sub_100067410(&qword_1001165B8, &qword_1001165C0, (uint64_t)&opaque type descriptor for <<opaque return type of View.help(_:)>>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001165A8);
  }
  return result;
}

unint64_t sub_100067264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001165F0;
  if (!qword_1001165F0)
  {
    v1 = sub_100005608(&qword_100116540);
    sub_100067124(&qword_1001165F8, &qword_100116600, (void (*)(void))sub_1000672E8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001165F0);
  }
  return result;
}

uint64_t sub_1000672E8()
{
  return sub_100067320(&qword_100116608, &qword_100116610, (void (*)(void))sub_100067304);
}

uint64_t sub_100067304()
{
  return sub_100067320(&qword_100116618, &qword_100116620, (void (*)(void))sub_10006738C);
}

uint64_t sub_100067320(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10006738C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116628;
  if (!qword_100116628)
  {
    v1 = sub_100005608(&qword_100116630);
    sub_100067410(&qword_100116638, &qword_100116640, (uint64_t)&opaque type descriptor for <<opaque return type of View.help(_:)>>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116628);
  }
  return result;
}

uint64_t sub_100067410(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(a2);
    v7[0] = &type metadata for Text;
    v7[1] = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(v7, a3, 1);
    sub_100008078(&qword_1001165C8, &qword_1001165D0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000674BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100067500(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for DisplayViewFrame(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100067588 + 4 * byte_1000D0E97[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000675BC + 4 * byte_1000D0E92[v4]))();
}

uint64_t sub_1000675BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000675C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000675CCLL);
  return result;
}

uint64_t sub_1000675D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000675E0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000675E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000675EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DisplayViewFrame()
{
  return &type metadata for DisplayViewFrame;
}

uint64_t sub_100067608()
{
  return sub_100008078(&qword_100116688, &qword_100116488, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
}

uint64_t sub_100067634(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6464, 1);
}

uint64_t sub_100067648(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for AccessibilityMathEquationViewModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t initializeWithTake for AccessibilityMathEquationViewModifier(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t *assignWithTake for AccessibilityMathEquationViewModifier(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  *((_BYTE *)a1 + 9) = *((_BYTE *)a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityMathEquationViewModifier(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityMathEquationViewModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 10) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityMathEquationViewModifier()
{
  return &type metadata for AccessibilityMathEquationViewModifier;
}

uint64_t sub_1000677CC()
{
  return sub_100008078(&qword_100116698, &qword_100116690, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
}

uint64_t sub_1000677F8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F64A8, 1);
}

unint64_t sub_100067808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001166C0;
  if (!qword_1001166C0)
  {
    v1 = sub_100005608(&qword_1001166A8);
    sub_100008078(&qword_1001166B8, &qword_1001166B0, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001166C0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AXMathEquationExpression(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000678F8 + 4 * byte_1000D0EA1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006792C + 4 * byte_1000D0E9C[v4]))();
}

uint64_t sub_10006792C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067934(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006793CLL);
  return result;
}

uint64_t sub_100067948(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100067950);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100067954(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006795C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AXMathEquationExpression()
{
  return &type metadata for AXMathEquationExpression;
}

unint64_t sub_10006797C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001166C8;
  if (!qword_1001166C8)
  {
    v1 = sub_100005608(&qword_1001166D0);
    sub_100067808();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001166C8);
  }
  return result;
}

unint64_t sub_1000679E4()
{
  unint64_t result;

  result = qword_1001166D8;
  if (!qword_1001166D8)
  {
    result = swift_getWitnessTable(&unk_1000D118C, &type metadata for AXMathEquationExpression);
    atomic_store(result, (unint64_t *)&qword_1001166D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorDetailsTopView()
{
  return &type metadata for CalculatorDetailsTopView;
}

uint64_t sub_100067A38(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F64EC, 1);
}

_QWORD *sub_100067A48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  unint64_t v20;
  _QWORD *result;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;

  v28 = static HorizontalAlignment.center.getter();
  v2 = static Alignment.center.getter(v28);
  v4 = _FrameLayout.init(width:height:alignment:)(&v31, 0, 1, 0x4046000000000000, 0, v2, v3);
  v5 = v31;
  v6 = v32;
  v7 = v34;
  v26 = v35;
  v27 = v33;
  v25 = v36;
  v8 = static VerticalAlignment.bottom.getter(v4);
  if (qword_100113AD8 != -1)
    swift_once(&qword_100113AD8, sub_10001BA60);
  v9 = qword_10011F960;
  v10 = type metadata accessor for CalculatorViewModel(0);
  v11 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v12 = Environment.init<A>(_:)(v10, v10, v11);
  v14 = v13;
  v15 = type metadata accessor for CalculatorLayout(0);
  v16 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v17 = Environment.init<A>(_:)(v15, v15, v16);
  v19 = v18;
  v20 = sub_100067D08();
  result = FocusState.init<A>()(v29, &type metadata for FocusField, v20);
  v22 = v29[0];
  v23 = v29[1];
  v24 = v30;
  *(_QWORD *)a1 = v28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v27;
  *(_BYTE *)(a1 + 48) = v7;
  *(_QWORD *)(a1 + 56) = v26;
  *(_QWORD *)(a1 + 64) = v25;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v9;
  *(_BYTE *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = v12;
  *(_BYTE *)(a1 + 104) = v14 & 1;
  *(_QWORD *)(a1 + 112) = v17;
  *(_BYTE *)(a1 + 120) = v19 & 1;
  *(_BYTE *)(a1 + 128) = v22;
  *(_QWORD *)(a1 + 136) = v23;
  *(_BYTE *)(a1 + 144) = v24;
  return result;
}

double sub_100067C28@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double result;
  __int128 v7;
  _OWORD v8[9];
  char v9;
  _BYTE v10[152];

  v2 = static HorizontalAlignment.center.getter();
  sub_100067A48((uint64_t)v8);
  *(_OWORD *)&v10[119] = v8[7];
  *(_OWORD *)&v10[103] = v8[6];
  *(_OWORD *)&v10[55] = v8[3];
  *(_OWORD *)&v10[39] = v8[2];
  *(_OWORD *)&v10[135] = v8[8];
  v10[151] = v9;
  *(_OWORD *)&v10[71] = v8[4];
  *(_OWORD *)&v10[87] = v8[5];
  *(_OWORD *)&v10[7] = v8[0];
  *(_OWORD *)&v10[23] = v8[1];
  v3 = *(_OWORD *)&v10[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v10[96];
  *(_OWORD *)(a1 + 129) = v3;
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v10[128];
  v4 = *(_OWORD *)&v10[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v10[32];
  *(_OWORD *)(a1 + 65) = v4;
  v5 = *(_OWORD *)&v10[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v10[64];
  *(_OWORD *)(a1 + 97) = v5;
  result = *(double *)v10;
  v7 = *(_OWORD *)&v10[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v10;
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 161) = *(_QWORD *)&v10[144];
  *(_OWORD *)(a1 + 33) = v7;
  return result;
}

unint64_t sub_100067D08()
{
  unint64_t result;

  result = qword_1001166E0;
  if (!qword_1001166E0)
  {
    result = swift_getWitnessTable(&unk_1000D0EE4, &type metadata for FocusField);
    atomic_store(result, (unint64_t *)&qword_1001166E0);
  }
  return result;
}

unint64_t sub_100067D50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001166E8;
  if (!qword_1001166E8)
  {
    v1 = sub_100005608(&qword_1001166F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1001166E8);
  }
  return result;
}

double sub_100067D9C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100005360(&qword_100116720);
  v1 = swift_allocObject(v0, 72, 7);
  *(_QWORD *)&result = 5;
  *(_OWORD *)(v1 + 16) = xmmword_1000D1290;
  *(_QWORD *)(v1 + 32) = &off_100107C50;
  *(_QWORD *)(v1 + 40) = &off_100107C78;
  *(_QWORD *)(v1 + 48) = &off_100107CA0;
  *(_QWORD *)(v1 + 56) = &off_100107CC8;
  *(_QWORD *)(v1 + 64) = &off_100107CF0;
  off_1001166F8 = (_UNKNOWN *)v1;
  return result;
}

double sub_100067E0C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100005360(&qword_100116720);
  v1 = swift_allocObject(v0, 72, 7);
  *(_QWORD *)&result = 5;
  *(_OWORD *)(v1 + 16) = xmmword_1000D1290;
  *(_QWORD *)(v1 + 32) = &off_100107D18;
  *(_QWORD *)(v1 + 40) = &off_100107D40;
  *(_QWORD *)(v1 + 48) = &off_100107D68;
  *(_QWORD *)(v1 + 56) = &off_100107D90;
  *(_QWORD *)(v1 + 64) = &off_100107DB8;
  off_100116700 = (_UNKNOWN *)v1;
  return result;
}

double sub_100067E7C()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100005360(&qword_100116720);
  v1 = swift_allocObject(v0, 64, 7);
  *(_QWORD *)&result = 4;
  *(_OWORD *)(v1 + 16) = xmmword_1000CE770;
  *(_QWORD *)(v1 + 32) = &off_100107DE0;
  *(_QWORD *)(v1 + 40) = &off_100107E08;
  *(_QWORD *)(v1 + 48) = &off_100107E30;
  *(_QWORD *)(v1 + 56) = &off_100107E58;
  qword_100116708 = v1;
  return result;
}

double sub_100067EE0()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100005360(&qword_100116720);
  v1 = swift_allocObject(v0, 72, 7);
  *(_QWORD *)&result = 5;
  *(_OWORD *)(v1 + 16) = xmmword_1000D1290;
  *(_QWORD *)(v1 + 32) = &off_100107E80;
  *(_QWORD *)(v1 + 40) = &off_100107EA8;
  *(_QWORD *)(v1 + 48) = &off_100107ED0;
  *(_QWORD *)(v1 + 56) = &off_100107EF8;
  *(_QWORD *)(v1 + 64) = &off_100107F20;
  qword_100116710 = v1;
  return result;
}

double sub_100067F50()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100005360(&qword_100116720);
  v1 = swift_allocObject(v0, 72, 7);
  *(_QWORD *)&result = 5;
  *(_OWORD *)(v1 + 16) = xmmword_1000D1290;
  *(_QWORD *)(v1 + 32) = &off_100107F48;
  *(_QWORD *)(v1 + 40) = &off_100107F70;
  *(_QWORD *)(v1 + 48) = &off_100107F98;
  *(_QWORD *)(v1 + 56) = &off_100107FC0;
  *(_QWORD *)(v1 + 64) = &off_100107FE8;
  qword_100116718 = v1;
  return result;
}

void sub_100067FC0(uint64_t a1, char a2)
{
  if (a1)
    sub_100009ED0();
  __asm { BR              X10 }
}

uint64_t sub_100068030()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;

  swift_bridgeObjectRelease(0xEA00000000006369);
  if ((v1 & 1) != 0)
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, 0xEA00000000006369, 0x6D6D6172676F7270, v2 + 3836, 0);
    swift_bridgeObjectRelease(0xEA00000000006369);
    if ((v3 & 1) == 0)
      return 10;
  }
  return v0;
}

_QWORD *sub_100068188(uint64_t a1, char a2, char a3, char a4, char a5, char a6, uint64_t a7, char a8)
{
  char v14;
  _QWORD *v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unsigned __int8 v30;
  unsigned int v31;
  Swift::Int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  unsigned int v59;
  Swift::Int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  BOOL v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v75;
  char v76;
  _QWORD *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  int64_t v85;
  int64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *v93;
  char v94;
  char v95;
  char v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  _QWORD v103[9];
  _QWORD *v104;
  _QWORD *v105;

  if (!a1)
  {
    if ((a8 & 1) != 0)
      goto LABEL_11;
    goto LABEL_22;
  }
  v14 = sub_100009ED0();
  if ((a8 & 1) == 0)
  {
    swift_retain(a1);
    v19 = sub_100009CC4();
    if (v19 / sub_100009BC4() > 0.9)
    {
      if (qword_100113E28 != -1)
        swift_once(&qword_100113E28, sub_100067E7C);
      v15 = (_QWORD *)qword_100116708;
      swift_bridgeObjectRetain(qword_100116708);
      swift_release(a1);
      goto LABEL_25;
    }
    swift_release(a1);
LABEL_22:
    if (qword_100113E20 != -1)
      swift_once(&qword_100113E20, sub_100067E0C);
    v15 = off_100116700;
    swift_bridgeObjectRetain(off_100116700);
LABEL_25:
    v101 = 0;
    v78 = _swiftEmptyArrayStorage;
    v17 = v15[2];
    if (!v17)
    {
LABEL_16:
      swift_bridgeObjectRelease(v15);
      v92 = _swiftEmptyArrayStorage;
      goto LABEL_100;
    }
    goto LABEL_26;
  }
  if ((v14 & 1) != 0)
  {
    if (qword_100113E20 != -1)
      swift_once(&qword_100113E20, sub_100067E0C);
    v15 = off_100116700;
    v16 = qword_100113E38;
    swift_bridgeObjectRetain(off_100116700);
    if (v16 != -1)
      swift_once(&qword_100113E38, sub_100067F50);
    v78 = (_QWORD *)qword_100116718;
    swift_bridgeObjectRetain(qword_100116718);
    v101 = 0;
    v17 = v15[2];
    if (!v17)
      goto LABEL_16;
    goto LABEL_26;
  }
LABEL_11:
  if (qword_100113E18 != -1)
    swift_once(&qword_100113E18, sub_100067D9C);
  v15 = off_1001166F8;
  v18 = qword_100113E30;
  swift_bridgeObjectRetain(off_1001166F8);
  if (v18 != -1)
    swift_once(&qword_100113E30, sub_100067EE0);
  v78 = (_QWORD *)qword_100116710;
  swift_bridgeObjectRetain(qword_100116710);
  v101 = 1;
  v17 = v15[2];
  if (!v17)
    goto LABEL_16;
LABEL_26:
  v105 = _swiftEmptyArrayStorage;
  sub_1000137A4(0, v17, 0);
  v20 = 0;
  v75 = v15;
  v87 = (char *)(v15 + 4);
  v21 = _swiftEmptyArrayStorage;
  v76 = a4;
  v97 = a4 & 1;
  if ((a4 & 1) != 0)
    v22 = 55;
  else
    v22 = 31;
  v83 = v22;
  if ((a4 & 1) != 0)
    v23 = 55;
  else
    v23 = 30;
  if ((a4 & 1) != 0)
    v24 = 30;
  else
    v24 = 55;
  v79 = v24;
  v81 = v23;
  v25 = a7 + 56;
  v95 = a5 & 1;
  v94 = a6 & 1;
  v85 = v17;
  do
  {
    v26 = *(_QWORD *)&v87[8 * v20];
    v27 = *(_QWORD *)(v26 + 16);
    if (v27)
    {
      v90 = v20;
      v93 = v21;
      v104 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v26);
      sub_1000137D0(0, v27, 0);
      v28 = 0;
      v29 = v104;
      v88 = v26;
      v99 = v26 + 32;
      while (1)
      {
        v30 = *(_BYTE *)(v99 + v28);
        v31 = v30;
        if ((a2 & 1) != 0)
        {
          v31 = 56;
          switch(*(_BYTE *)(v99 + v28))
          {
            case 0x1E:
              v31 = v81;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x1F:
              v31 = v79;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x20:
              break;
            case 0x26:
              v31 = 57;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x27:
              v31 = 58;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x29:
              v31 = 59;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x2A:
              v31 = 60;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x2B:
              v31 = 61;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x2F:
              v31 = 62;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x30:
              v31 = 63;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x31:
              v31 = 64;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x37:
              v31 = v83;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x38:
              v31 = 32;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x39:
              v31 = 38;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x3A:
              v31 = 39;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x3B:
              v31 = 41;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x3C:
              v31 = 42;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x3D:
              v31 = 43;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x3E:
              v31 = 47;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            case 0x3F:
              v31 = 48;
              break;
            case 0x40:
              v31 = 49;
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
            default:
              v31 = *(unsigned __int8 *)(v99 + v28);
              if (!*(_QWORD *)(a7 + 16))
                goto LABEL_90;
              goto LABEL_80;
          }
        }
        if (!*(_QWORD *)(a7 + 16))
          goto LABEL_90;
LABEL_80:
        Hasher.init(_seed:)(v103);
        Hasher._combine(_:)(v31);
        v32 = Hasher._finalize()();
        v33 = -1 << *(_BYTE *)(a7 + 32);
        v34 = v32 & ~v33;
        if (((*(_QWORD *)(v25 + ((v34 >> 3) & 0xFFFFFFFFFFFFF8)) >> v34) & 1) == 0)
          goto LABEL_90;
        v35 = *(_QWORD *)(a7 + 48);
        if (*(unsigned __int8 *)(v35 + v34) != v31)
        {
          v36 = ~v33;
          v37 = (v34 + 1) & v36;
          if (((*(_QWORD *)(v25 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
            goto LABEL_90;
          if (*(unsigned __int8 *)(v35 + v37) != v31)
            break;
        }
        v38 = 1;
LABEL_91:
        v104 = v29;
        v42 = v29[2];
        v41 = v29[3];
        if (v42 >= v41 >> 1)
        {
          sub_1000137D0(v41 > 1, v42 + 1, 1);
          v29 = v104;
        }
        v29[2] = v42 + 1;
        v43 = (char *)&v29[v42] - v42;
        v43[32] = v30;
        ++v28;
        v43[33] = a2 & 1;
        v43[34] = v97;
        v43[35] = v95;
        v43[36] = v94;
        v43[37] = v38;
        v43[38] = v101;
        if (v28 == v27)
        {
          swift_bridgeObjectRelease(v88);
          v20 = v90;
          v21 = v93;
          v17 = v85;
          goto LABEL_96;
        }
      }
      v39 = (v37 + 1) & v36;
      if (((*(_QWORD *)(v25 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
      {
        do
        {
          v40 = *(unsigned __int8 *)(v35 + v39);
          v38 = v40 == v31;
          if (v40 == v31)
            break;
          v39 = (v39 + 1) & v36;
        }
        while (((*(_QWORD *)(v25 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0);
        goto LABEL_91;
      }
LABEL_90:
      v38 = 0;
      goto LABEL_91;
    }
    v29 = _swiftEmptyArrayStorage;
LABEL_96:
    v105 = v21;
    v45 = v21[2];
    v44 = v21[3];
    if (v45 >= v44 >> 1)
    {
      sub_1000137A4(v44 > 1, v45 + 1, 1);
      v21 = v105;
    }
    ++v20;
    v21[2] = v45 + 1;
    v21[v45 + 4] = v29;
  }
  while (v20 != v17);
  v92 = v21;
  swift_bridgeObjectRelease(v75);
  a4 = v76;
LABEL_100:
  v46 = v78[2];
  if (v46)
  {
    v105 = _swiftEmptyArrayStorage;
    sub_1000137A4(0, v46, 0);
    v47 = 0;
    v48 = v105;
    if ((a3 & 1) != 0)
      v49 = 46;
    else
      v49 = 54;
    v96 = a4 & 1;
    v98 = v49;
    if ((a4 & 1) != 0)
      v50 = 55;
    else
      v50 = 31;
    if ((a4 & 1) != 0)
      v51 = 55;
    else
      v51 = 30;
    v82 = v51;
    v84 = v50;
    if ((a4 & 1) != 0)
      v52 = 30;
    else
      v52 = 55;
    v80 = v52;
    v53 = a7 + 56;
    v86 = v46;
    while (1)
    {
      v54 = v78[v47 + 4];
      v55 = *(_QWORD *)(v54 + 16);
      if (v55)
        break;
      v57 = _swiftEmptyArrayStorage;
LABEL_158:
      v105 = v48;
      v73 = v48[2];
      v72 = v48[3];
      if (v73 >= v72 >> 1)
      {
        sub_1000137A4(v72 > 1, v73 + 1, 1);
        v48 = v105;
      }
      ++v47;
      v48[2] = v73 + 1;
      v48[v73 + 4] = v57;
      if (v47 == v46)
        goto LABEL_161;
    }
    v91 = v47;
    v104 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v54);
    sub_1000137D0(0, v55, 0);
    v56 = 0;
    v57 = v104;
    v89 = v54;
    v100 = v54 + 32;
    while (2)
    {
      if (*(_BYTE *)(v100 + v56) == 46)
        v58 = v98;
      else
        v58 = *(_BYTE *)(v100 + v56);
      if ((a2 & 1) != 0)
      {
        v59 = 56;
        switch(*(_BYTE *)(v100 + v56))
        {
          case 0x1E:
            v59 = v82;
            break;
          case 0x1F:
            v59 = v80;
            break;
          case 0x20:
            goto LABEL_123;
          case 0x26:
            v59 = 57;
            break;
          case 0x27:
            v59 = 58;
            break;
          case 0x29:
            v59 = 59;
            break;
          case 0x2A:
            v59 = 60;
            break;
          case 0x2B:
            v59 = 61;
            break;
          case 0x2F:
            v59 = 62;
            break;
          case 0x30:
            v59 = 63;
            break;
          case 0x31:
            v59 = 64;
            break;
          case 0x37:
            v59 = v84;
            break;
          case 0x38:
            v59 = 32;
            break;
          case 0x39:
            v59 = 38;
            break;
          case 0x3A:
            v59 = 39;
            break;
          case 0x3B:
            v59 = 41;
            break;
          case 0x3C:
            v59 = 42;
            break;
          case 0x3D:
            v59 = 43;
            break;
          case 0x3E:
            v59 = 47;
            break;
          case 0x3F:
            v59 = 48;
            break;
          case 0x40:
            v59 = 49;
            break;
          default:
            goto LABEL_122;
        }
      }
      else
      {
LABEL_122:
        v59 = *(unsigned __int8 *)(v100 + v56);
      }
      if (!*(_QWORD *)(a7 + 16))
        goto LABEL_133;
      Hasher.init(_seed:)(v103);
      Hasher._combine(_:)(v59);
      v60 = Hasher._finalize()();
      v61 = -1 << *(_BYTE *)(a7 + 32);
      v62 = v60 & ~v61;
      if (((*(_QWORD *)(v53 + ((v62 >> 3) & 0xFFFFFFFFFFFFF8)) >> v62) & 1) == 0)
        goto LABEL_133;
      v63 = *(_QWORD *)(a7 + 48);
      if (*(unsigned __int8 *)(v63 + v62) == v59)
        goto LABEL_128;
      v64 = ~v61;
      v65 = (v62 + 1) & v64;
      if (((*(_QWORD *)(v53 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
        goto LABEL_133;
LABEL_123:
      if (*(unsigned __int8 *)(v63 + v65) == v59)
      {
LABEL_128:
        v66 = 1;
        goto LABEL_134;
      }
      v67 = (v65 + 1) & v64;
      if (((*(_QWORD *)(v53 + ((v67 >> 3) & 0xFFFFFFFFFFFFF8)) >> v67) & 1) != 0)
      {
        do
        {
          v68 = *(unsigned __int8 *)(v63 + v67);
          v66 = v68 == v59;
          if (v68 == v59)
            break;
          v67 = (v67 + 1) & v64;
        }
        while (((*(_QWORD *)(v53 + ((v67 >> 3) & 0xFFFFFFFFFFFFF8)) >> v67) & 1) != 0);
      }
      else
      {
LABEL_133:
        v66 = 0;
      }
LABEL_134:
      v104 = v57;
      v70 = v57[2];
      v69 = v57[3];
      if (v70 >= v69 >> 1)
      {
        sub_1000137D0(v69 > 1, v70 + 1, 1);
        v57 = v104;
      }
      v57[2] = v70 + 1;
      v71 = (uint64_t)&v57[v70] - v70;
      *(_BYTE *)(v71 + 32) = v58;
      ++v56;
      *(_BYTE *)(v71 + 33) = a2 & 1;
      *(_BYTE *)(v71 + 34) = v96;
      *(_WORD *)(v71 + 35) = 0;
      *(_BYTE *)(v71 + 37) = v66;
      *(_BYTE *)(v71 + 38) = v101;
      if (v56 == v55)
      {
        swift_bridgeObjectRelease(v89);
        v46 = v86;
        v47 = v91;
        goto LABEL_158;
      }
      continue;
    }
  }
LABEL_161:
  swift_bridgeObjectRelease(v78);
  return v92;
}

uint64_t sub_100068BB8()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D13D0);
  v4 = v0;
  v2 = sub_1000694AC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_100068C24()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D13A8);
  v4 = v0;
  v2 = sub_1000694AC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(unsigned __int8 *)(v0 + 16);
}

void sub_100068C90(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D13A8);
  v6 = v3;
  v5 = sub_1000694AC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v5);
  swift_release(KeyPath);
  *a2 = *(_BYTE *)(v3 + 16);
}

double sub_100068D04(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  double result;
  _QWORD v7[3];
  char v8;
  uint64_t v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D13A8);
  v7[2] = v3;
  v8 = v2;
  v9 = v3;
  v5 = sub_1000694AC();
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v9, KeyPath, sub_1000694FC, v7, (char *)&type metadata for () + 8, v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_100068D94(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  double result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = sub_100005360(&qword_1001142E0);
  *(_QWORD *)&result = __chkstk_darwin(v6, v7).n128_u64[0];
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    v11 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    type metadata accessor for MainActor(0);
    v12 = swift_retain(a2);
    v13 = static MainActor.shared.getter(v12);
    v14 = swift_allocObject(&unk_10010B1A8, 41, 7);
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = &protocol witness table for MainActor;
    *(_QWORD *)(v14 + 32) = a2;
    *(_BYTE *)(v14 + 40) = a3 & 1;
    v15 = sub_100096424((uint64_t)v10, (uint64_t)&unk_1001167F8, v14);
    *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  }
  return result;
}

uint64_t sub_100068E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v5 + 32) = a5;
  *(_QWORD *)(v5 + 16) = a4;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 24) = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100068EF4, v7, v8);
}

uint64_t sub_100068EF4()
{
  uint64_t v0;
  char v1;

  v1 = *(_BYTE *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 24));
  sub_100068F30(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100068F30(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[3];
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v3 = a1 & 1;
  KeyPath = swift_getKeyPath(&unk_1000D13A8);
  v21 = v1;
  v5 = sub_1000694AC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v21, KeyPath, v5);
  swift_release(KeyPath);
  if (*(unsigned __int8 *)(v1 + 16) != v3)
  {
    v6 = swift_getKeyPath(&unk_1000D13A8);
    __chkstk_darwin(v6, v7);
    v17[2] = v1;
    v18 = v3;
    v21 = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v21, v6, sub_1000695B4, v17, (char *)&type metadata for () + 8, v5);
    swift_release(v6);
    if (qword_100113F00 != -1)
      swift_once(&qword_100113F00, sub_1000A85AC);
    v8 = type metadata accessor for Logger(0);
    sub_100014124(v8, (uint64_t)qword_10011FEA8);
    v9 = swift_retain_n(v1, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v21 = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = swift_getKeyPath(&unk_1000D13A8);
      v19 = v1;
      ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, v14, v5);
      swift_release(v14);
      if (*(_BYTE *)(v1 + 16))
        v15 = 1702195828;
      else
        v15 = 0x65736C6166;
      if (*(_BYTE *)(v1 + 16))
        v16 = 0xE400000000000000;
      else
        v16 = 0xE500000000000000;
      v19 = sub_100029918(v15, v16, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sidebar toggled with %{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
  }
}

uint64_t sub_1000691F0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 17) = a2;
  return result;
}

uint64_t sub_1000691F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC10Calculator26CalculatorToolbarViewModel___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100069248()
{
  return type metadata accessor for CalculatorToolbarViewModel(0);
}

uint64_t type metadata accessor for CalculatorToolbarViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_100116758;
  if (!qword_100116758)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorToolbarViewModel);
  return result;
}

uint64_t sub_10006928C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1000D1330;
  v4[1] = &unk_1000D1348;
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10006930C()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t KeyPath;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(43);
  v1._object = (void *)0x80000001000D6E60;
  v1._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v1);
  KeyPath = swift_getKeyPath(&unk_1000D13A8);
  v10 = v0;
  v3 = sub_1000694AC();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v3);
  swift_release(KeyPath);
  if (*(_BYTE *)(v0 + 16))
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if (*(_BYTE *)(v0 + 16))
    v5 = 0xE400000000000000;
  else
    v5 = 0xE500000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0xD000000000000014;
  v7._object = (void *)0x80000001000D6E80;
  String.append(_:)(v7);
  v8 = swift_getKeyPath(&unk_1000D13D0);
  v10 = v0;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, v8, v3);
  swift_release(v8);
  LOBYTE(v10) = *(_BYTE *)(v0 + 17);
  _print_unlocked<A, B>(_:_:)(&v10, v11, &type metadata for SidebarPresentationStyle, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  return v11[0];
}

uint64_t sub_100069484()
{
  return sub_10006930C();
}

unint64_t sub_1000694AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113F50;
  if (!qword_100113F50)
  {
    v1 = type metadata accessor for CalculatorToolbarViewModel(255);
    result = swift_getWitnessTable(&unk_1000D1388, v1);
    atomic_store(result, (unint64_t *)&qword_100113F50);
  }
  return result;
}

void sub_1000694FC()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 16) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_10006950C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_100069538(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = *(_BYTE *)(v1 + 40);
  v8 = (_QWORD *)swift_task_alloc(dword_1001167F4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100013F04;
  return sub_100068E84(a1, v4, v5, v6, v7);
}

void sub_1000695B4()
{
  sub_1000694FC();
}

uint64_t sub_1000695C8()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  _QWORD v29[2];

  v0 = sub_100005360(&qword_1001168A8);
  v2 = __chkstk_darwin(v0, v1);
  v29[0] = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource.BundleDescription(0, v2);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Locale(0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0, v11);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for LocalizedStringResource(0);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = __chkstk_darwin(v18, v20);
  v23 = (char *)v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for TypeDisplayRepresentation(0, v21);
  sub_10001C038(v24, static CalculatorAppView.typeDisplayRepresentation);
  sub_100014124(v24, (uint64_t)static CalculatorAppView.typeDisplayRepresentation);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x74616C75636C6143, 0xEA0000000000726FLL);
  static Locale.current.getter(v25);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v4);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v17, 0xD000000000000011, 0x80000001000D6EA0, v13, v8, 0, 0, 256);
  v26 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v27 = v29[0];
  v26(v29[0], 1, 1, v18);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v23, v27);
}

uint64_t CalculatorAppView.typeDisplayRepresentation.unsafeMutableAddressor(__n128 a1)
{
  uint64_t v1;

  if (qword_100113E40 != -1)
    swift_once(&qword_100113E40, sub_1000695C8);
  v1 = type metadata accessor for TypeDisplayRepresentation(0, a1);
  return sub_100014124(v1, (uint64_t)static CalculatorAppView.typeDisplayRepresentation);
}

uint64_t static CalculatorAppView.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  uint64_t v4;

  if (qword_100113E40 != -1)
    swift_once(&qword_100113E40, sub_1000695C8);
  v3 = type metadata accessor for TypeDisplayRepresentation(0, a2);
  v4 = sub_100014124(v3, (uint64_t)static CalculatorAppView.typeDisplayRepresentation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v4, v3);
}

unint64_t sub_1000698A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t result;
  uint64_t v35;
  char *v36;
  char *v37;

  v0 = sub_100005360(&qword_1001168B8);
  __chkstk_darwin(v0, v1);
  v37 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005360(&qword_1001168A8);
  v5 = __chkstk_darwin(v3, v4);
  v36 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalizedStringResource.BundleDescription(0, v5);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Locale(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0, v14);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100005360(&qword_1001168C0);
  v27 = *(_QWORD *)(sub_100005360(&qword_100114888) - 8);
  v28 = swift_allocObject(v26, ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72), *(unsigned __int8 *)(v27 + 80) | 7);
  *(_OWORD *)(v28 + 16) = xmmword_1000CD7E0;
  v29 = String.LocalizationValue.init(stringLiteral:)(0x74616C75636C6143, 0xEA0000000000726FLL);
  static Locale.current.getter(v29);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for LocalizedStringResource.BundleDescription.main(_:), v7);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0xD000000000000011, 0x80000001000D6EA0, v16, v11, "Title for the Calculator App entity for AppIntents", 50, 2);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v31 = v36;
  v30(v36, 1, 1, v21);
  v32 = type metadata accessor for DisplayRepresentation.Image(0);
  v33 = v37;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v37, 1, 1, v32);
  DisplayRepresentation.init(title:subtitle:image:)(v25, v31, v33);
  result = sub_10001C4D0(v28);
  static CalculatorAppView.caseDisplayRepresentations = result;
  return result;
}

uint64_t *CalculatorAppView.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_100113E48 != -1)
    swift_once(&qword_100113E48, sub_1000698A8);
  return &static CalculatorAppView.caseDisplayRepresentations;
}

double static CalculatorAppView.caseDisplayRepresentations.getter()
{
  double result;

  if (qword_100113E48 != -1)
    swift_once(&qword_100113E48, sub_1000698A8);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static CalculatorAppView.caseDisplayRepresentations).n128_u64[0];
  return result;
}

BOOL CalculatorAppView.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100108010, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

_UNKNOWN **static CalculatorAppView.allCases.getter()
{
  return &off_100108048;
}

uint64_t CalculatorAppView.rawValue.getter()
{
  return 7368801;
}

uint64_t sub_100069C54@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100108070, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100069CA4(_QWORD *a1@<X8>)
{
  *a1 = 7368801;
  a1[1] = 0xE300000000000000;
}

unint64_t sub_100069CBC()
{
  unint64_t result;

  result = qword_100116800;
  if (!qword_100116800)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116800);
  }
  return result;
}

Swift::Int sub_100069D00()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 7368801, 0xE300000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100069D48(uint64_t a1)
{
  return String.hash(into:)(a1, 7368801, 0xE300000000000000);
}

Swift::Int sub_100069D58()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 7368801, 0xE300000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100069DA0()
{
  unint64_t result;

  result = qword_100116808;
  if (!qword_100116808)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116808);
  }
  return result;
}

unint64_t sub_100069DE8()
{
  unint64_t result;

  result = qword_100116810;
  if (!qword_100116810)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116810);
  }
  return result;
}

unint64_t sub_100069E30()
{
  unint64_t result;

  result = qword_100116818;
  if (!qword_100116818)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116818);
  }
  return result;
}

void *sub_100069E74()
{
  return &protocol witness table for String;
}

unint64_t sub_100069E84()
{
  unint64_t result;

  result = qword_100116820;
  if (!qword_100116820)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116820);
  }
  return result;
}

unint64_t sub_100069ECC()
{
  unint64_t result;

  result = qword_100116828;
  if (!qword_100116828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116828);
  }
  return result;
}

unint64_t sub_100069F14()
{
  unint64_t result;

  result = qword_100116830;
  if (!qword_100116830)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116830);
  }
  return result;
}

unint64_t sub_100069F5C()
{
  unint64_t result;

  result = qword_100116838;
  if (!qword_100116838)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116838);
  }
  return result;
}

uint64_t sub_100069FA4@<X0>(uint64_t a1@<X8>)
{
  return sub_10006A66C(&qword_100113E40, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static CalculatorAppView.typeDisplayRepresentation, (uint64_t)sub_1000695C8, a1);
}

uint64_t sub_100069FC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A5E4(a1, a2, a3, (uint64_t (*)(void))sub_100069FDC, (uint64_t)&opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>);
}

unint64_t sub_100069FDC()
{
  unint64_t result;

  result = qword_100116840;
  if (!qword_100116840)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116840);
  }
  return result;
}

uint64_t sub_10006A020(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100069FDC();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

unint64_t sub_10006A05C()
{
  unint64_t result;

  result = qword_100116848;
  if (!qword_100116848)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116848);
  }
  return result;
}

unint64_t sub_10006A0A4()
{
  unint64_t result;

  result = qword_100116850;
  if (!qword_100116850)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116850);
  }
  return result;
}

unint64_t sub_10006A0EC()
{
  unint64_t result;

  result = qword_100116858;
  if (!qword_100116858)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CalculatorAppView, &type metadata for CalculatorAppView);
    atomic_store(result, (unint64_t *)&qword_100116858);
  }
  return result;
}

uint64_t sub_10006A130(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100069F5C();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

unint64_t sub_10006A16C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116860;
  if (!qword_100116860)
  {
    v1 = sub_100005608(&qword_100116868);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100116860);
  }
  return result;
}

void sub_10006A1B8(_QWORD *a1@<X8>)
{
  *a1 = &off_1001080A8;
}

unint64_t sub_10006A1CC()
{
  unint64_t result;

  result = qword_100116870;
  if (!qword_100116870)
  {
    result = swift_getWitnessTable(&unk_1000D16EC, &type metadata for LaunchCalculatorOpenIntent);
    atomic_store(result, (unint64_t *)&qword_100116870);
  }
  return result;
}

uint64_t sub_10006A210(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[16];

  v1 = type metadata accessor for LocalizedStringResource.BundleDescription(0, a1);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Locale(0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for String.LocalizationValue(0, v8);
  __chkstk_darwin(v11, v12);
  v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  sub_10001C038(v15, qword_10011FDD8);
  sub_100014124(v15, (uint64_t)qword_10011FDD8);
  v16 = String.LocalizationValue.init(stringLiteral:)(0x74616C75636C6143, 0xEA0000000000726FLL);
  static Locale.current.getter(v16);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v1);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0xD000000000000011, 0x80000001000D6EA0, v10, v5, 0, 0, 256);
}

uint64_t sub_10006A390()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for IntentAuthenticationPolicy(0);
  sub_10001C038(v0, qword_10011FDF0);
  v1 = sub_100014124(v0, (uint64_t)qword_10011FDF0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 - 8) + 104))(v1, enum case for IntentAuthenticationPolicy.alwaysAllowed(_:), v0);
}

uint64_t sub_10006A3E8()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_10006A408()
{
  return IntentParameter.wrappedValue.setter();
}

void (*sub_10006A428(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10006A470;
}

void sub_10006A470(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

unint64_t sub_10006A4A4()
{
  unint64_t result;

  result = qword_100116878;
  if (!qword_100116878)
  {
    result = swift_getWitnessTable(&unk_1000D1714, &type metadata for LaunchCalculatorOpenIntent);
    atomic_store(result, (unint64_t *)&qword_100116878);
  }
  return result;
}

unint64_t sub_10006A4EC()
{
  unint64_t result;

  result = qword_100116880;
  if (!qword_100116880)
  {
    result = swift_getWitnessTable(&unk_1000D17A4, &type metadata for LaunchCalculatorOpenIntent);
    atomic_store(result, (unint64_t *)&qword_100116880);
  }
  return result;
}

unint64_t sub_10006A534()
{
  unint64_t result;

  result = qword_100116888;
  if (!qword_100116888)
  {
    result = swift_getWitnessTable(&unk_1000D17CC, &type metadata for LaunchCalculatorOpenIntent);
    atomic_store(result, (unint64_t *)&qword_100116888);
  }
  return result;
}

uint64_t sub_10006A578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A5E4(a1, a2, a3, (uint64_t (*)(void))sub_10006A58C, (uint64_t)&opaque type descriptor for <<opaque return type of OpenIntent.perform()>>);
}

unint64_t sub_10006A58C()
{
  unint64_t result;

  result = qword_100116890;
  if (!qword_100116890)
  {
    result = swift_getWitnessTable(&unk_1000D169C, &type metadata for LaunchCalculatorOpenIntent);
    atomic_store(result, (unint64_t *)&qword_100116890);
  }
  return result;
}

uint64_t sub_10006A5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10006A5E4(a1, a2, a3, (uint64_t (*)(void))sub_10006A4A4, (uint64_t)&opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>);
}

uint64_t sub_10006A5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a4();
  return swift_getOpaqueTypeConformance2(v7, a5, 1);
}

uint64_t sub_10006A624@<X0>(uint64_t a1@<X8>)
{
  return sub_10006A66C(&qword_100113E50, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)qword_10011FDD8, (uint64_t)sub_10006A210, a1);
}

uint64_t sub_10006A648@<X0>(uint64_t a1@<X8>)
{
  return sub_10006A66C(&qword_100113E58, (uint64_t (*)(_QWORD))&type metadata accessor for IntentAuthenticationPolicy, (uint64_t)qword_10011FDF0, (uint64_t)sub_10006A390, a1);
}

uint64_t sub_10006A66C@<X0>(_QWORD *a1@<X2>, uint64_t (*a2)(_QWORD)@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  v8 = a2(0);
  v9 = sub_100014124(v8, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a5, v9, v8);
}

uint64_t sub_10006A6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to OpenIntent.perform()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_10006A58C();
  *v5 = v2;
  v5[1] = sub_100013F04;
  return OpenIntent.perform()(a1, a2, v6);
}

uint64_t sub_10006A754@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_10006A840();
  *a1 = result;
  return result;
}

unint64_t sub_10006A778()
{
  return 0xD00000000000001ALL;
}

uint64_t storeEnumTagSinglePayload for CalculatorAppView(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10006A7D4 + 4 * byte_1000D1400[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10006A7F4 + 4 * byte_1000D1405[v4]))();
}

_BYTE *sub_10006A7D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10006A7F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006A7FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006A804(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006A80C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006A814(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CalculatorAppView()
{
  return &type metadata for CalculatorAppView;
}

ValueMetadata *type metadata accessor for LaunchCalculatorOpenIntent()
{
  return &type metadata for LaunchCalculatorOpenIntent;
}

uint64_t sub_10006A840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[2];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v44 = *(_QWORD *)(v0 - 8);
  v45 = v0;
  __chkstk_darwin(v0, v1);
  v43 = (char *)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005360(&qword_1001168A0);
  __chkstk_darwin(v3, v4);
  v42 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v41 - v8;
  v10 = sub_100005360(&qword_1001168A8);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource.BundleDescription(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Locale(0);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for String.LocalizationValue(0, v22);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v41 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for LocalizedStringResource(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  v33 = (char *)&v41 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_100005360(&qword_1001168B0);
  v34 = String.LocalizationValue.init(stringLiteral:)(0x74616C75636C6143, 0xEA0000000000726FLL);
  static Locale.current.getter(v34);
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, enum case for LocalizedStringResource.BundleDescription.main(_:), v15);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v28, 0xD000000000000011, 0x80000001000D6EA0, v24, v19, "Title for the Calculator App entity for AppIntents", 50, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v14, 1, 1, v29);
  v46[0] = 0;
  v35 = type metadata accessor for IntentDialog(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v36(v9, 1, 1, v35);
  v37 = v42;
  v36(v42, 1, 1, v35);
  v38 = v43;
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v43, enum case for InputConnectionBehavior.default(_:), v45);
  v39 = sub_100069FDC();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v33, v14, v46, v9, v37, v38, &off_1001080D0, v39);
}

ValueMetadata *type metadata accessor for CalculatorDetailsView()
{
  return &type metadata for CalculatorDetailsView;
}

uint64_t sub_10006AB70(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F65B0, 1);
}

double sub_10006AB80@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  double result;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char v50;
  char v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  char v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  char v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v4 = type metadata accessor for CalculatorViewModel(0);
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v6 = Environment.init<A>(_:)(v4, v4, v5);
  v8 = v7;
  v9 = type metadata accessor for CalculatorLayout(0);
  v10 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v11 = Environment.init<A>(_:)(v9, v9, v10);
  v13 = v12;
  v14 = *a1;
  LOBYTE(a1) = *((_BYTE *)a1 + 8);
  v15 = swift_retain(v14);
  v16 = sub_100043890(v15, (char)a1);
  swift_release(v14);
  KeyPath = swift_getKeyPath(&unk_1000D1910);
  v62 = v16;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v62, KeyPath, v5);
  swift_release(KeyPath);
  v18 = *(_BYTE *)(v16 + 48);
  swift_release(v16);
  sub_100079BF8(v18, (uint64_t)&v38);
  v19 = v38;
  v20 = v39;
  v21 = v40;
  v22 = v41;
  v23 = v42;
  v24 = v43;
  v25 = v44;
  v26 = v45;
  v27 = v46;
  v28 = v47;
  v29 = v48;
  v51 = v39;
  v50 = v41;
  v49 = v43;
  *(_QWORD *)&v52 = v38;
  BYTE8(v52) = v39;
  *(_QWORD *)&v53 = v40;
  BYTE8(v53) = v41;
  *(_QWORD *)&v54 = v42;
  BYTE8(v54) = v43;
  v55 = v44;
  v56 = v45;
  v57 = v46;
  v58 = v47;
  *(_QWORD *)&v59 = v48;
  *((_QWORD *)&v59 + 1) = 0x4000000000000000;
  v61 = v8 & 1;
  v60 = v13 & 1;
  v30 = v52;
  v31 = v53;
  v32 = v54;
  *(_OWORD *)(a2 + 88) = v44;
  *(_OWORD *)(a2 + 72) = v32;
  *(_OWORD *)(a2 + 56) = v31;
  *(_OWORD *)(a2 + 40) = v30;
  v33 = v56;
  v34 = v57;
  v35 = v58;
  *(_OWORD *)(a2 + 152) = v59;
  *(_OWORD *)(a2 + 136) = v35;
  *(_OWORD *)(a2 + 120) = v34;
  *(_OWORD *)(a2 + 104) = v33;
  v36 = v61;
  *(_QWORD *)a2 = v6;
  *(_BYTE *)(a2 + 8) = v36;
  *(_QWORD *)(a2 + 16) = v11;
  *(_BYTE *)(a2 + 24) = v13 & 1;
  *(_QWORD *)(a2 + 32) = 0;
  v62 = v19;
  v63 = v20;
  v64 = v21;
  v65 = v22;
  v66 = v23;
  v67 = v24;
  v68 = v25;
  v69 = v26;
  v70 = v27;
  v71 = v28;
  v72 = v29;
  v73 = 0x4000000000000000;
  swift_retain(v11);
  swift_retain(v6);
  sub_10006D6E8((uint64_t *)&v52);
  sub_10006D76C(&v62);
  swift_release(v11);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

uint64_t sub_10006ADEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  double v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  double v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t OpaqueTypeConformance2;
  char *v95;
  _QWORD *v96;
  uint64_t v97;
  _OWORD *v98;
  __int128 v99;
  _OWORD *v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char v113;
  uint64_t KeyPath;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  _OWORD *v124;
  _OWORD *v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t (*v129)@<X0>(uint64_t *@<X0>, int8x8_t (**)@<D0>(uint64_t@<X8>)@<X8>);
  uint64_t (*v130)@<X0>(uint64_t *@<X0>, int8x8_t (**)@<D0>(uint64_t@<X8>)@<X8>);
  uint64_t v131;
  uint64_t v132;
  uint64_t (**v133)@<X0>(uint64_t *@<X0>, int8x8_t (**)@<D0>(uint64_t@<X8>)@<X8>);
  uint64_t v134;
  char *v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  double v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  double v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _OWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _QWORD v183[2];
  _OWORD v184[25];
  char v185;
  _BYTE v186[7];
  double v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191;
  _BYTE v192[7];
  char v193;
  _BYTE v194[7];
  double v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  _BYTE v200[7];
  char v201;
  _BYTE v202[7];
  double v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  _BYTE v208[7];
  char v209;
  _BYTE v210[7];
  double v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char v215;
  uint64_t v216;
  char v217;
  _OWORD v218[10];
  uint64_t v219;
  _OWORD v220[11];
  char v221;
  _OWORD v222[8];
  _OWORD v223[25];
  char v224;
  _BYTE v225[7];
  char v226;
  _BYTE v227[7];
  _BYTE v228[7];
  char v229;
  _BYTE v230[7];
  _BYTE v231[7];
  char v232;
  _BYTE v233[7];
  _BYTE v234[7];
  _QWORD v235[52];

  v2 = v1;
  v182 = a1;
  v3 = type metadata accessor for LayoutDirection(0);
  v180 = *(_QWORD *)(v3 - 8);
  v181 = v3;
  __chkstk_darwin(v3, v4);
  v179 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v177 = *(_QWORD *)(v6 - 8);
  v178 = v6;
  __chkstk_darwin(v6, v7);
  v176 = (char *)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_1001168C8);
  v163 = *(_QWORD *)(v9 - 8);
  v164 = v9;
  __chkstk_darwin(v9, v10);
  v160 = (char *)&v151 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100005360(&qword_1001168D0);
  __chkstk_darwin(v159, v12);
  v162 = (char *)&v151 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100005360(&qword_1001168D8);
  __chkstk_darwin(v165, v14);
  v167 = (uint64_t)&v151 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100005360(&qword_1001168E0);
  __chkstk_darwin(v169, v16);
  v168 = (uint64_t)&v151 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005360(&qword_1001168E8);
  v173 = *(_QWORD *)(v18 - 8);
  v174 = v18;
  __chkstk_darwin(v18, v19);
  v170 = (char *)&v151 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = sub_100005360(&qword_1001168F0);
  __chkstk_darwin(v172, v21);
  v171 = (char *)&v151 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v175 = (char *)&v151 - v25;
  v27 = static Alignment.center.getter(v26);
  v29 = v28;
  v30 = static Alignment.center.getter(v27);
  v32 = sub_100035AFC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v222, 0.0, 1, INFINITY, 0, v30, v31, v27, v29);
  v166 = (_OWORD *)static Alignment.bottom.getter(v32);
  v161 = v33;
  v34 = *(uint64_t *)(v2 + 16);
  v35 = *(_BYTE *)(v2 + 24);
  v217 = *(_BYTE *)(v2 + 8);
  v216 = *(_QWORD *)v2;
  v36 = sub_10006CC6C(v216, v217, v34, v35);
  v158 = static HorizontalAlignment.center.getter();
  sub_10006AB80((uint64_t *)v2, (uint64_t)v218);
  *(_OWORD *)((char *)&v220[7] + 7) = v218[7];
  *(_OWORD *)((char *)&v220[8] + 7) = v218[8];
  *(_OWORD *)((char *)&v220[9] + 7) = v218[9];
  *(_OWORD *)((char *)&v220[3] + 7) = v218[3];
  *(_OWORD *)((char *)&v220[4] + 7) = v218[4];
  *(_OWORD *)((char *)&v220[5] + 7) = v218[5];
  *(_OWORD *)((char *)&v220[6] + 7) = v218[6];
  *(_OWORD *)((char *)v220 + 7) = v218[0];
  *(_OWORD *)((char *)&v220[1] + 7) = v218[1];
  v221 = 0;
  *(_QWORD *)((char *)&v220[10] + 7) = v219;
  *(_OWORD *)((char *)&v220[2] + 7) = v218[2];
  v37 = static Alignment.top.getter();
  v156 = v38;
  v157 = v37;
  v39 = type metadata accessor for CalculatorLayout(0);
  v40 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v41 = Environment.init<A>(_:)(v39, v39, v40);
  LOBYTE(v39) = v42;
  v43 = type metadata accessor for CalculatorToolbarViewModel(0);
  v44 = sub_100005178((unint64_t *)&qword_100113F50, type metadata accessor for CalculatorToolbarViewModel, (uint64_t)&unk_1000D1388);
  v45 = Environment.init<A>(_:)(v43, v43, v44);
  LOBYTE(v43) = v46;
  v235[0] = 0x3FF0000000000000;
  v47 = State.init(wrappedValue:)(v184, v235, &type metadata for Double);
  v223[4] = v222[4];
  v223[5] = v222[5];
  v223[6] = v222[6];
  v223[7] = v222[7];
  v223[0] = v222[0];
  v223[1] = v222[1];
  v223[2] = v222[2];
  v223[3] = v222[3];
  *((double *)&v223[8] + 1) = v36;
  *(_OWORD *)((char *)&v223[16] + 1) = v220[7];
  *(_OWORD *)((char *)&v223[17] + 1) = v220[8];
  *(_OWORD *)((char *)&v223[18] + 1) = v220[9];
  v223[19] = *(_OWORD *)((char *)&v220[9] + 15);
  *(_OWORD *)((char *)&v223[12] + 1) = v220[3];
  *(_OWORD *)((char *)&v223[13] + 1) = v220[4];
  *(_OWORD *)((char *)&v223[14] + 1) = v220[5];
  *(_OWORD *)((char *)&v223[15] + 1) = v220[6];
  *(_OWORD *)((char *)&v223[9] + 1) = v220[0];
  *(_QWORD *)&v223[8] = v158;
  LOBYTE(v223[9]) = 0;
  *(_OWORD *)((char *)&v223[10] + 1) = v220[1];
  *(_OWORD *)((char *)&v223[11] + 1) = v220[2];
  *(_QWORD *)&v223[20] = v166;
  *((double *)&v223[20] + 1) = v161;
  *(_QWORD *)&v223[21] = v41;
  BYTE8(v223[21]) = v39 & 1;
  *(_QWORD *)&v223[22] = v45;
  BYTE8(v223[22]) = v43 & 1;
  v223[23] = v184[0];
  *(_QWORD *)&v223[24] = v157;
  *((_QWORD *)&v223[24] + 1) = v156;
  v48 = static Edge.Set.top.getter(v47);
  LODWORD(v166) = v48;
  if (qword_100113A50 != -1)
    v48 = swift_once(&qword_100113A50, sub_10001B8E0);
  v161 = EdgeInsets.init(_all:)(v48, *(double *)&qword_10011F8D8);
  v157 = v50;
  v158 = v49;
  v156 = v51;
  v52 = memcpy(v235, v223, 0x190uLL);
  v224 = 0;
  LODWORD(v155) = static Edge.Set.bottom.getter(v52);
  v53 = swift_retain(v34);
  v54 = sub_1000436BC(v53, v35);
  swift_release(v34);
  sub_1000A5788();
  v56 = v55;
  swift_release(v54);
  v58 = EdgeInsets.init(_all:)(v57, v56);
  v153 = v59;
  v154 = v58;
  v151 = v61;
  v152 = v60;
  v62 = v224;
  v226 = 0;
  v63 = static Edge.Set.horizontal.getter();
  v64 = swift_retain(v34);
  v65 = sub_1000436BC(v64, v35);
  swift_release(v34);
  sub_1000A5788();
  v67 = v66;
  swift_release(v65);
  v69 = EdgeInsets.init(_all:)(v68, v67);
  v71 = v70;
  v73 = v72;
  v75 = v74;
  v76 = v226;
  v229 = 0;
  LOBYTE(v65) = static Edge.Set.horizontal.getter();
  v77 = swift_retain(v34);
  v78 = sub_1000436BC(v77, v35);
  swift_release(v34);
  sub_1000A5868(v78);
  v80 = v79;
  swift_release(v78);
  v82 = EdgeInsets.init(_all:)(v81, v80);
  v84 = v83;
  v86 = v85;
  v88 = v87;
  *(_DWORD *)v200 = *(_DWORD *)v231;
  *(_DWORD *)&v200[3] = *(_DWORD *)&v231[3];
  *(_DWORD *)v202 = *(_DWORD *)v230;
  *(_DWORD *)&v202[3] = *(_DWORD *)&v230[3];
  v232 = 0;
  memcpy(v184, v235, sizeof(v184));
  v185 = (char)v166;
  *(_DWORD *)v186 = *(_DWORD *)v225;
  *(_DWORD *)&v186[3] = *(_DWORD *)&v225[3];
  v187 = v161;
  v188 = v158;
  v189 = v157;
  v190 = v156;
  v191 = v62;
  *(_DWORD *)v192 = *(_DWORD *)v228;
  *(_DWORD *)&v192[3] = *(_DWORD *)&v228[3];
  v193 = v155;
  *(_DWORD *)v194 = *(_DWORD *)v227;
  *(_DWORD *)&v194[3] = *(_DWORD *)&v227[3];
  v195 = v154;
  v196 = v153;
  v197 = v152;
  v198 = v151;
  v199 = v76;
  v201 = v63;
  v203 = v69;
  v204 = v71;
  v205 = v73;
  v206 = v75;
  v207 = v229;
  *(_DWORD *)v208 = *(_DWORD *)v234;
  *(_DWORD *)&v208[3] = *(_DWORD *)&v234[3];
  v209 = v65;
  *(_DWORD *)v210 = *(_DWORD *)v233;
  *(_DWORD *)&v210[3] = *(_DWORD *)&v233[3];
  v211 = v82;
  v212 = v84;
  v213 = v86;
  v214 = v88;
  v215 = 0;
  v89 = sub_100005360(&qword_1001168F8);
  v90 = sub_100005360(&qword_100116900);
  v91 = sub_100067320(&qword_100116908, &qword_1001168F8, (void (*)(void))sub_10006CE14);
  v92 = sub_100005608(&qword_1001169A0);
  v93 = sub_100008078(&qword_1001169A8, &qword_1001169A0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v183[0] = v92;
  v183[1] = v93;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v183, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v95 = v160;
  View.toolbar<A>(content:)(sub_10006BA9C, 0, v89, v90, v91, OpaqueTypeConformance2);
  v96 = sub_10006CFF4(v223);
  v158 = static Color.clear.getter(v96);
  v157 = static SafeAreaRegions.keyboard.getter();
  LODWORD(v156) = static Edge.Set.all.getter(v157);
  v97 = *(_QWORD *)(v2 + 32);
  LOBYTE(v90) = *(_BYTE *)(v2 + 40);
  v98 = (_OWORD *)swift_allocObject(&unk_10010B560, 57, 7);
  v99 = *(_OWORD *)(v2 + 16);
  v98[1] = *(_OWORD *)v2;
  v98[2] = v99;
  *(_OWORD *)((char *)v98 + 41) = *(_OWORD *)(v2 + 25);
  v100 = (_OWORD *)swift_allocObject(&unk_10010B588, 57, 7);
  v101 = *(_OWORD *)(v2 + 16);
  v100[1] = *(_OWORD *)v2;
  v100[2] = v101;
  v166 = (_OWORD *)v2;
  *(_OWORD *)((char *)v100 + 41) = *(_OWORD *)(v2 + 25);
  swift_retain(v34);
  sub_100052DCC(&v216);
  sub_1000076D0(v97, v90);
  v161 = *(double *)&v34;
  swift_retain(v34);
  sub_100052DCC(&v216);
  v102 = sub_1000076D0(v97, v90);
  v155 = static Alignment.center.getter(v102);
  v104 = v103;
  v105 = (uint64_t)v162;
  v106 = v163;
  v107 = v164;
  (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v162, v95, v164);
  v108 = v105 + *(int *)(v159 + 36);
  v109 = v157;
  *(_QWORD *)v108 = v158;
  *(_QWORD *)(v108 + 8) = v109;
  *(_BYTE *)(v108 + 16) = v156;
  *(_QWORD *)(v108 + 24) = sub_100037734;
  *(_QWORD *)(v108 + 32) = 0;
  *(_QWORD *)(v108 + 40) = sub_10006D0D0;
  *(_QWORD *)(v108 + 48) = v98;
  *(_QWORD *)(v108 + 56) = sub_100037A70;
  *(_QWORD *)(v108 + 64) = 0;
  *(_QWORD *)(v108 + 72) = sub_10006D0DC;
  *(_QWORD *)(v108 + 80) = v100;
  *(_QWORD *)(v108 + 88) = v155;
  *(_QWORD *)(v108 + 96) = v104;
  v110 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v95, v107);
  v163 = static Alignment.center.getter(v110);
  v160 = v111;
  sub_1000076D0(v97, v90);
  LOBYTE(v95) = sub_1000436D8(v97, v90);
  v164 = v97;
  v112 = v97;
  v113 = v90;
  sub_100007720(v112, v90);
  if ((v95 & 1) != 0)
  {
    KeyPath = swift_getKeyPath(&unk_1000D18E8);
    v115 = type metadata accessor for CalculatorViewModel(0);
    v116 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v117 = Environment.init<A>(_:)(v115, v115, v116);
    v118 = 0;
    v120 = v119 & 1;
  }
  else
  {
    KeyPath = 0;
    v117 = 0;
    v120 = 0;
    v118 = 65280;
  }
  v121 = v167;
  sub_10000531C(v105, v167, &qword_1001168D0);
  v122 = v121 + *(int *)(v165 + 36);
  *(_QWORD *)v122 = KeyPath;
  *(_QWORD *)(v122 + 8) = 0;
  *(_QWORD *)(v122 + 16) = v118;
  *(_QWORD *)(v122 + 24) = v117;
  *(_BYTE *)(v122 + 32) = v120;
  v123 = v160;
  *(_QWORD *)(v122 + 40) = v163;
  *(_QWORD *)(v122 + 48) = v123;
  sub_100004F48(v105, &qword_1001168D0);
  v124 = (_OWORD *)swift_allocObject(&unk_10010B5B0, 57, 7);
  v125 = v166;
  v126 = v166[1];
  v124[1] = *v166;
  v124[2] = v126;
  *(_OWORD *)((char *)v124 + 41) = *(_OWORD *)((char *)v125 + 25);
  swift_retain(*(_QWORD *)&v161);
  sub_100052DCC(&v216);
  v127 = sub_1000076D0(v164, v113);
  v128 = static Alignment.center.getter(v127);
  v130 = v129;
  v131 = v168;
  sub_10000531C(v121, v168, &qword_1001168D8);
  v132 = v169;
  v133 = (uint64_t (**)@<X0>(uint64_t *@<X0>, int8x8_t (**)@<D0>(uint64_t@<X8>)@<X8>))(v131 + *(int *)(v169 + 36));
  *v133 = sub_10006D120;
  v133[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, int8x8_t (**)@<D0>(uint64_t@<X8>)@<X8>))v124;
  v133[2] = (uint64_t (*)@<X0>(uint64_t *@<X0>, int8x8_t (**)@<D0>(uint64_t@<X8>)@<X8>))v128;
  v133[3] = v130;
  v134 = sub_100004F48(v121, &qword_1001168D8);
  v135 = v176;
  static AccessibilityChildBehavior.contain.getter(v134);
  v136 = sub_10006D128();
  v137 = v170;
  View.accessibilityElement(children:)(v135, v132, v136);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v135, v178);
  sub_100004F48(v131, &qword_1001168E0);
  *(_QWORD *)&v184[0] = v132;
  *((_QWORD *)&v184[0] + 1) = v136;
  v138 = swift_getOpaqueTypeConformance2(v184, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v139 = (uint64_t)v171;
  v140 = v174;
  View.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001000D6F00, v174, v138);
  (*(void (**)(char *, uint64_t))(v173 + 8))(v137, v140);
  v141 = (uint64_t)v175;
  ModifiedContent<>.accessibilityCustomAttribute(_:value:)(0xD000000000000022, 0x80000001000D6F20, 1, v172);
  sub_100004F48(v139, &qword_1001168F0);
  v142 = swift_getKeyPath(&unk_1000D18B8);
  v144 = v179;
  v143 = v180;
  v145 = v181;
  (*(void (**)(char *, _QWORD, uint64_t))(v180 + 104))(v179, enum case for LayoutDirection.leftToRight(_:), v181);
  v146 = sub_100005360(&qword_1001169E8);
  v147 = v182;
  v148 = (uint64_t *)(v182 + *(int *)(v146 + 36));
  v149 = sub_100005360(&qword_100113FE0);
  (*(void (**)(char *, char *, uint64_t))(v143 + 16))((char *)v148 + *(int *)(v149 + 28), v144, v145);
  *v148 = v142;
  sub_10000531C(v141, v147, &qword_1001168F0);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
  return sub_100004F48(v141, &qword_1001168F0);
}

uint64_t sub_10006BA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t OpaqueTypeConformance2;
  uint64_t v14;
  _QWORD v16[2];

  v0 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v0, v1);
  v3 = (char *)v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100005360(&qword_1001169A0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.automatic.getter(v7);
  v10 = sub_100005360(&qword_100116A10);
  v11 = sub_100005608(&qword_100116A18);
  v12 = sub_10006D5E0();
  v16[0] = v11;
  v16[1] = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v16, &opaque type descriptor for <<opaque return type of View.focusable(_:)>>, 1);
  ToolbarItem<>.init(placement:content:)(v3, sub_10006BBEC, 0, v10, OpaqueTypeConformance2);
  v14 = sub_100008078(&qword_1001169A8, &qword_1001169A0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v4, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_10006BBEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  v0 = sub_100005360(&qword_100116170);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100005360(&qword_100116A30);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100005360(&qword_100116A18);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Button.init(action:label:)(CalculatorButtonRepresentable.id.getter, 0, sub_10006BD94, 0, &type metadata for Image, &protocol witness table for Image);
  (*(void (**)(char *, char *, uint64_t))(v1 + 16))(v8, v4, v0);
  *(_QWORD *)&v8[*(int *)(v5 + 36)] = 0;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  v13 = sub_10006D664();
  View.accessibilityHidden(_:)(1, v5, v13);
  sub_100004F48((uint64_t)v8, &qword_100116A30);
  v14 = sub_10006D5E0();
  View.focusable(_:)(0, v9, v14);
  return sub_100004F48((uint64_t)v12, &qword_100116A18);
}

uint64_t sub_10006BD94@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  if (qword_100113C08 != -1)
    swift_once(&qword_100113C08, sub_10002E208);
  v2 = qword_10011FAC0;
  *a1 = qword_10011FAC0;
  return swift_retain(v2);
}

void sub_10006BDE4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;

  v4 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v20 = *a2;
  v21 = *((_BYTE *)a2 + 8);
  v18 = a2[2];
  v19 = *((_BYTE *)a2 + 24);
  v16 = a2[4];
  v17 = *((_BYTE *)a2 + 40);
  sub_100052DCC(&v20);
  sub_100052DCC(&v18);
  v11 = sub_10006D3B8((uint64_t)&v16);
  v12 = static MainActor.shared.getter(v11);
  v13 = swift_allocObject(&unk_10010B650, 96, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  v14 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v13 + 48) = v14;
  *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + 25);
  *(_QWORD *)(v13 + 80) = v8;
  *(_QWORD *)(v13 + 88) = v9;
  v15 = sub_100096424((uint64_t)v7, (uint64_t)&unk_100116A08, v13);
  swift_release(v15);
}

uint64_t sub_10006BF24(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(double *)(v6 + 32) = a1;
  *(double *)(v6 + 40) = a2;
  *(_QWORD *)(v6 + 24) = a6;
  v7 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v6 + 48) = static MainActor.shared.getter(v7);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor);
  return swift_task_switch(sub_10006BF94, v8, v9);
}

uint64_t sub_10006BF94()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v2 = *(double *)(v0 + 32);
  v1 = *(double *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 48));
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_BYTE *)(v3 + 24);
  v6 = swift_retain(v4);
  v7 = sub_1000436BC(v6, v5);
  swift_release(v4);
  KeyPath = swift_getKeyPath(&unk_1000D1A00);
  *(_QWORD *)(v0 + 16) = v7;
  v9 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v9);
  swift_release(KeyPath);
  v10 = *(double *)(v7 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize);
  v11 = *(double *)(v7 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSize + 8);
  swift_release(v7);
  if (v10 != v2 || v11 != v1)
  {
    v14 = *(_QWORD *)(v0 + 32);
    v13 = *(_QWORD *)(v0 + 40);
    v15 = swift_retain(v4);
    v16 = sub_1000436BC(v15, v5);
    swift_release(v4);
    v17 = swift_getKeyPath(&unk_1000D1A00);
    v18 = (_QWORD *)swift_task_alloc(48);
    v18[2] = v16;
    v18[3] = v14;
    v18[4] = v13;
    *(_QWORD *)(v0 + 16) = v16;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v17, sub_10006D5C4, v18, (char *)&type metadata for () + 8, v9);
    swift_release(v17);
    swift_release(v16);
    swift_task_dealloc(v18);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10006C134(__int128 *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;

  v4 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v9 = *((_QWORD *)a1 + 3);
  v10 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v7, 1, 1, v10);
  type metadata accessor for MainActor(0);
  v21 = *a2;
  v22 = *((_BYTE *)a2 + 8);
  v19 = a2[2];
  v20 = *((_BYTE *)a2 + 24);
  v17 = a2[4];
  v18 = *((_BYTE *)a2 + 40);
  sub_100052DCC(&v21);
  sub_100052DCC(&v19);
  v11 = sub_10006D3B8((uint64_t)&v17);
  v12 = static MainActor.shared.getter(v11);
  v13 = swift_allocObject(&unk_10010B628, 112, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = &protocol witness table for MainActor;
  v14 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v13 + 32) = *(_OWORD *)a2;
  *(_OWORD *)(v13 + 48) = v14;
  *(_OWORD *)(v13 + 57) = *(_OWORD *)((char *)a2 + 25);
  *(_OWORD *)(v13 + 80) = v16;
  *(_QWORD *)(v13 + 96) = v8;
  *(_QWORD *)(v13 + 104) = v9;
  v15 = sub_100096424((uint64_t)v7, (uint64_t)&unk_1001169F8, v13);
  swift_release(v15);
}

uint64_t sub_10006C284(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(double *)(v8 + 48) = a3;
  *(double *)(v8 + 56) = a4;
  *(double *)(v8 + 32) = a1;
  *(double *)(v8 + 40) = a2;
  *(_QWORD *)(v8 + 24) = a8;
  v9 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v8 + 64) = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_10006C2F8, v10, v11);
}

uint64_t sub_10006C2F8()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23;

  v2 = *(double *)(v0 + 48);
  v1 = *(double *)(v0 + 56);
  v4 = *(double *)(v0 + 32);
  v3 = *(double *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 64));
  v6 = *(_QWORD *)(v5 + 16);
  v7 = *(_BYTE *)(v5 + 24);
  v8 = swift_retain(v6);
  v9 = sub_1000436BC(v8, v7);
  swift_release(v6);
  KeyPath = swift_getKeyPath(&unk_1000D19D8);
  *(_QWORD *)(v0 + 16) = v9;
  v11 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 16, KeyPath, v11);
  swift_release(KeyPath);
  v12 = *(double *)(v9 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets);
  v13 = *(double *)(v9 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets + 8);
  v14 = *(double *)(v9 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets + 16);
  v15 = *(double *)(v9 + OBJC_IVAR____TtC10Calculator16CalculatorLayout__detailsViewSafeAreaInsets + 24);
  swift_release(v9);
  if ((static EdgeInsets.== infix(_:_:)(v12, v13, v14, v15, v4, v3, v2, v1) & 1) == 0)
  {
    v17 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v0 + 56);
    v23 = *(_OWORD *)(v0 + 32);
    v18 = swift_retain(v6);
    v19 = sub_1000436BC(v18, v7);
    swift_release(v6);
    v20 = swift_getKeyPath(&unk_1000D19D8);
    v21 = swift_task_alloc(64);
    *(_QWORD *)(v21 + 16) = v19;
    *(_OWORD *)(v21 + 24) = v23;
    *(_QWORD *)(v21 + 40) = v17;
    *(_QWORD *)(v21 + 48) = v16;
    *(_QWORD *)(v0 + 16) = v19;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v0 + 16, v20, sub_10006D4C0, v21, (char *)&type metadata for () + 8, v11);
    swift_release(v20);
    swift_release(v19);
    swift_task_dealloc(v21);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006C4DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, int8x8_t (**a3)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  __int128 v7;
  int8x8_t (*v8)@<D0>(uint64_t@<X8>);
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char v15;

  v4 = *a1;
  if (*a1)
  {
    v14 = *a2;
    v15 = *((_BYTE *)a2 + 8);
    v12 = a2[2];
    v13 = *((_BYTE *)a2 + 24);
    v10 = a2[4];
    v11 = *((_BYTE *)a2 + 40);
    v6 = swift_allocObject(&unk_10010B5D8, 65, 7);
    *(_QWORD *)(v6 + 16) = v4;
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)(v6 + 24) = *(_OWORD *)a2;
    *(_OWORD *)(v6 + 40) = v7;
    *(_OWORD *)(v6 + 49) = *(_OWORD *)((char *)a2 + 25);
    sub_100052DCC(&v14);
    sub_100052DCC(&v12);
    sub_10006D3B8((uint64_t)&v10);
    v8 = sub_10006D3AC;
  }
  else
  {
    v8 = 0;
    v6 = 0;
  }
  *a3 = v8;
  a3[1] = (int8x8_t (*)@<D0>(uint64_t@<X8>))v6;
  return swift_retain(v4);
}

int8x8_t sub_10006C5AC@<D0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  CGFloat v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t KeyPath;
  unint64_t v30;
  unint64_t v31;
  CGFloat Width;
  CGFloat Height;
  uint64_t v34;
  __n128 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  CGFloat v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CGFloat MinX;
  CGFloat MinY;
  uint64_t v47;
  uint64_t v48;
  uint64x2_t v49;
  int16x8_t v50;
  int8x8_t result;
  int v52;
  double v53;
  double v54;
  uint64_t v55;
  _BYTE v56[4];
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_BYTE *, uint64_t, __n128);
  int v72;
  double v73;
  double v74;
  double v75;
  double v76;
  double v77;
  double v78;
  uint64_t v79;
  uint64_t v80;
  _BYTE v81[7];
  _BYTE v82[7];
  unsigned __int8 v83;
  _BYTE v84[7];
  char v85;
  _BYTE v86[7];
  char v87;
  _BYTE v88[7];
  char v89;
  _BYTE v90[7];
  char v91;
  _BYTE v92[7];
  unsigned __int8 v93;
  _DWORD v94[2];
  unsigned __int8 v95;
  CGRect v96;
  CGRect v97;
  CGRect v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;

  v6 = sub_100005360(&qword_100113FF0);
  v74 = *(double *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = &v56[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10, v11);
  v13 = &v56[-v12];
  type metadata accessor for CGRect(0);
  GeometryProxy.subscript.getter(&v75, a1, v14);
  v15 = v75;
  v16 = v76;
  v17 = v77;
  v18 = v78;
  v19 = *a2;
  v20 = *((_BYTE *)a2 + 8);
  v21 = swift_retain(*a2);
  v22 = sub_100043890(v21, v20);
  swift_release(v19);
  v23 = type metadata accessor for CalculatorViewModel(0);
  v24 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  Bindable<A>.init(wrappedValue:)(v22, v23, v24);
  v25 = a2[2];
  LOBYTE(a2) = *((_BYTE *)a2 + 24);
  v26 = swift_retain(v25);
  v27 = sub_1000436BC(v26, (char)a2);
  swift_release(v25);
  Bindable.wrappedValue.getter(&v75, v6);
  v28 = v75;
  KeyPath = swift_getKeyPath(&unk_1000D1910);
  v75 = v28;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v75, KeyPath, v24);
  swift_release(KeyPath);
  LOBYTE(v25) = *(_BYTE *)(*(_QWORD *)&v28 + 48);
  swift_release(*(_QWORD *)&v28);
  sub_100067FC0(v27, v25);
  v31 = v30;
  swift_release(v27);
  v96.origin.x = v15;
  v96.origin.y = v16;
  v96.size.width = v17;
  v96.size.height = v18;
  Width = CGRectGetWidth(v96);
  v97.origin.x = v15;
  v97.origin.y = v16;
  v97.size.width = v17;
  v97.size.height = v18;
  Height = CGRectGetHeight(v97);
  Bindable.projectedValue.getter(v6);
  v34 = swift_getKeyPath(&unk_1000D1938);
  Bindable<A>.subscript.getter(&v75, v34, v6);
  v35 = swift_release(v34);
  v71 = *(void (**)(_BYTE *, uint64_t, __n128))(*(_QWORD *)&v74 + 8);
  v71(v9, v6, v35);
  v74 = v75;
  v73 = v76;
  v72 = LOBYTE(v77);
  v69 = Environment.init<A>(_:)(v23, v23, v24);
  LOBYTE(v94[0]) = v36 & 1;
  v37 = type metadata accessor for CalculatorLayout(0);
  v38 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v64 = Environment.init<A>(_:)(v37, v37, v38);
  LOBYTE(v37) = v39;
  v65 = swift_getKeyPath(&unk_1000D1960);
  v66 = swift_getKeyPath(&unk_1000D1988);
  v70 = swift_getKeyPath(&unk_1000D19B0);
  v91 = v94[0];
  v89 = v37 & 1;
  v87 = 0;
  v85 = 0;
  v68 = (v31 >> 40) & 1;
  v67 = HIWORD(v31) & 1;
  v83 = 0;
  v98.origin.x = v15;
  v98.origin.y = v16;
  v98.size.width = v17;
  v98.size.height = v18;
  v40 = CGRectGetWidth(v98);
  v99.origin.x = v15;
  v99.origin.y = v16;
  v99.size.width = v17;
  v99.size.height = v18;
  v41.n128_f64[0] = CGRectGetHeight(v99);
  v42 = v41.n128_u64[0];
  v43 = static Alignment.bottomLeading.getter(v41);
  _FrameLayout.init(width:height:alignment:)(&v75, *(_QWORD *)&v40, 0, v42, 0, v43, v44);
  v63 = v75;
  v62 = v77;
  v61 = v79;
  v60 = v80;
  LOBYTE(v24) = v91;
  LOBYTE(v23) = v89;
  LOBYTE(v34) = v87;
  LOBYTE(v42) = v85;
  v59 = v83;
  v95 = LOBYTE(v76);
  v93 = LOBYTE(v78);
  v100.origin.x = v15;
  v100.origin.y = v16;
  v100.size.width = v17;
  v100.size.height = v18;
  MinX = CGRectGetMinX(v100);
  v101.origin.x = v15;
  v101.origin.y = v16;
  v101.size.width = v17;
  v101.size.height = v18;
  MinY = CGRectGetMinY(v101);
  v58 = v95;
  *(_DWORD *)(a3 + 169) = v94[0];
  *(_DWORD *)(a3 + 172) = *(_DWORD *)((char *)v94 + 3);
  v57 = v93;
  *(_DWORD *)(a3 + 185) = *(_DWORD *)v92;
  *(_DWORD *)(a3 + 188) = *(_DWORD *)&v92[3];
  v47 = swift_getKeyPath(&unk_1000D1960);
  v48 = swift_allocObject(&unk_10010B600, 17, 7);
  *(_BYTE *)(v48 + 16) = 1;
  ((void (*)(_BYTE *, uint64_t))v71)(v13, v6);
  *(_QWORD *)a3 = v69;
  *(_BYTE *)(a3 + 8) = v24;
  *(_DWORD *)(a3 + 9) = *(_DWORD *)v90;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)&v90[3];
  *(_QWORD *)(a3 + 16) = v64;
  *(_BYTE *)(a3 + 24) = v23;
  *(_DWORD *)(a3 + 25) = *(_DWORD *)v88;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)&v88[3];
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = v65;
  *(_BYTE *)(a3 + 56) = v34;
  *(_DWORD *)(a3 + 57) = *(_DWORD *)v86;
  *(_DWORD *)(a3 + 60) = *(_DWORD *)&v86[3];
  *(_QWORD *)(a3 + 64) = v66;
  *(_QWORD *)(a3 + 72) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 81) = v42;
  v49 = (uint64x2_t)vdupq_n_s64(v31);
  *(_BYTE *)(a3 + 82) = v31;
  v50 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v49, (uint64x2_t)xmmword_1000CCFD0), (int32x4_t)vshlq_u64(v49, (uint64x2_t)xmmword_1000CCFC0));
  *(int8x8_t *)v50.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v50), (int8x8_t)0x1000100010001);
  result = vmovn_s16(v50);
  *(_DWORD *)(a3 + 83) = result.i32[0];
  *(_BYTE *)(a3 + 87) = v68;
  *(_BYTE *)(a3 + 88) = v67;
  *(_DWORD *)(a3 + 89) = *(_DWORD *)v84;
  *(_DWORD *)(a3 + 92) = *(_DWORD *)&v84[3];
  *(CGFloat *)(a3 + 96) = Width;
  *(CGFloat *)(a3 + 104) = Height;
  *(_QWORD *)(a3 + 112) = v70;
  *(_BYTE *)(a3 + 120) = v59;
  v52 = *(_DWORD *)v82;
  *(_DWORD *)(a3 + 124) = *(_DWORD *)&v82[3];
  *(_DWORD *)(a3 + 121) = v52;
  v53 = v73;
  *(double *)(a3 + 128) = v74;
  *(double *)(a3 + 136) = v53;
  *(_BYTE *)(a3 + 144) = v72;
  *(_DWORD *)(a3 + 148) = *(_DWORD *)&v81[3];
  *(_DWORD *)(a3 + 145) = *(_DWORD *)v81;
  v54 = v63;
  *(_QWORD *)(a3 + 152) = 0;
  *(double *)(a3 + 160) = v54;
  *(_BYTE *)(a3 + 168) = v58;
  *(double *)(a3 + 176) = v62;
  *(_BYTE *)(a3 + 184) = v57;
  v55 = v60;
  *(_QWORD *)(a3 + 192) = v61;
  *(_QWORD *)(a3 + 200) = v55;
  *(CGFloat *)(a3 + 208) = MinX;
  *(CGFloat *)(a3 + 216) = MinY;
  *(_QWORD *)(a3 + 224) = v47;
  *(_QWORD *)(a3 + 232) = sub_100007BC4;
  *(_QWORD *)(a3 + 240) = v48;
  return result;
}

uint64_t sub_10006CC34@<X0>(uint64_t a1@<X8>)
{
  return sub_10006ADEC(a1);
}

double sub_10006CC6C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v25;

  v6 = a2 & 1;
  v7 = a4 & 1;
  v8 = swift_retain(a1);
  v9 = sub_100043890(v8, v6);
  swift_release(a1);
  v10 = *(_QWORD *)(v9 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D1A28);
  v25 = v10;
  v12 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v12);
  swift_release(KeyPath);
  v13 = *(_QWORD *)(v10 + 24);
  v14 = swift_retain(v13);
  v15 = CalculateExpression.format.getter(v14);
  swift_release(v9);
  swift_release(v13);
  v16 = swift_retain(a3);
  v17 = sub_1000436BC(v16, v7);
  swift_release(a3);
  if (v15 == 2)
  {
    sub_1000A5C60(v17, 0);
  }
  else
  {
    v19 = swift_retain(a1);
    v20 = sub_100043890(v19, v6);
    swift_release(a1);
    v21 = swift_getKeyPath(&unk_1000D1910);
    v25 = v20;
    v22 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, v21, v22);
    swift_release(v20);
    swift_release(v21);
    v18 = sub_1000A5B2C();
  }
  v23 = v18;
  swift_release(v17);
  return v23;
}

uint64_t sub_10006CE14()
{
  return sub_100067320(&qword_100116910, &qword_100116918, (void (*)(void))sub_10006CE30);
}

uint64_t sub_10006CE30()
{
  return sub_100067320(&qword_100116920, &qword_100116928, (void (*)(void))sub_10006CE4C);
}

uint64_t sub_10006CE4C()
{
  return sub_100067320(&qword_100116930, &qword_100116938, (void (*)(void))sub_10006CE68);
}

unint64_t sub_10006CE68()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116940;
  if (!qword_100116940)
  {
    v1 = sub_100005608(&qword_100116948);
    sub_10006CEEC();
    sub_100008078(&qword_100116990, &qword_100116998, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116940);
  }
  return result;
}

unint64_t sub_10006CEEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116950;
  if (!qword_100116950)
  {
    v1 = sub_100005608(&qword_100116958);
    sub_10006CF70();
    sub_100008078(&qword_100116980, &qword_100116988, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116950);
  }
  return result;
}

unint64_t sub_10006CF70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116960;
  if (!qword_100116960)
  {
    v1 = sub_100005608(&qword_100116968);
    sub_100008078(&qword_100116970, &qword_100116978, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116960);
  }
  return result;
}

_QWORD *sub_10006CFF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[19];
  v3 = a1[21];
  v4 = a1[24];
  v5 = a1[26];
  v6 = a1[28];
  v7 = a1[32];
  v8 = a1[35];
  v9 = a1[38];
  v10 = a1[42];
  v12 = a1[44];
  v13 = a1[47];
  swift_release(a1[31]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  swift_release(v8);
  swift_release(v9);
  swift_release(v10);
  swift_release(v12);
  swift_release(v13);
  return a1;
}

void sub_10006D0D0(uint64_t *a1)
{
  uint64_t v1;

  sub_10006BDE4(a1, (uint64_t *)(v1 + 16));
}

void sub_10006D0DC(__int128 *a1)
{
  uint64_t v1;

  sub_10006C134(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_10006D0E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  sub_100007720(*(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_10006D120@<X0>(uint64_t *a1@<X0>, int8x8_t (**a2)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v2;

  return sub_10006C4DC(a1, (uint64_t *)(v2 + 16), a2);
}

unint64_t sub_10006D128()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001169B0;
  if (!qword_1001169B0)
  {
    v1 = sub_100005608(&qword_1001168E0);
    sub_10006D1AC();
    sub_100008078(&qword_1001169D8, &qword_1001169E0, (uint64_t)&protocol conformance descriptor for _OverlayPreferenceModifier<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001169B0);
  }
  return result;
}

unint64_t sub_10006D1AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001169B8;
  if (!qword_1001169B8)
  {
    v1 = sub_100005608(&qword_1001168D8);
    sub_10006D230();
    sub_100008078(&qword_1001169C8, &qword_1001169D0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001169B8);
  }
  return result;
}

unint64_t sub_10006D230()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_1001169C0;
  if (!qword_1001169C0)
  {
    v1 = sub_100005608(&qword_1001168D0);
    v2 = sub_100005608(&qword_1001168F8);
    v3 = sub_100005608(&qword_100116900);
    v4 = sub_100067320(&qword_100116908, &qword_1001168F8, (void (*)(void))sub_10006CE14);
    v6 = sub_100005608(&qword_1001169A0);
    v7 = sub_100008078(&qword_1001169A8, &qword_1001169A0, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v6 = v2;
    v7 = v3;
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    sub_100008078(&qword_100115158, &qword_100115160, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001169C0);
  }
  return result;
}

uint64_t sub_10006D36C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100007720(*(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  return swift_deallocObject(v0, 65, 7);
}

int8x8_t sub_10006D3AC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10006C5AC(*(_QWORD *)(v1 + 16), (uint64_t *)(v1 + 24), a1);
}

uint64_t sub_10006D3B8(uint64_t a1)
{
  sub_1000076D0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

uint64_t sub_10006D404()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10006D414()
{
  return sub_10006D4E8(112);
}

uint64_t sub_10006D41C(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  _QWORD *v10;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[10];
  v7 = v1[11];
  v8 = v1[12];
  v9 = v1[13];
  v10 = (_QWORD *)swift_task_alloc(dword_1001169F4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100013F04;
  return sub_10006C284(v6, v7, v8, v9, a1, v4, v5, (uint64_t)(v1 + 4));
}

uint64_t sub_10006D4C0()
{
  uint64_t v0;

  return sub_100009B94(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40), *(double *)(v0 + 48));
}

uint64_t sub_10006D4E0()
{
  return sub_10006D4E8(96);
}

uint64_t sub_10006D4E8(uint64_t a1)
{
  uint64_t v1;

  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  swift_release(*(_QWORD *)(v1 + 48));
  sub_100007720(*(_QWORD *)(v1 + 64), *(_BYTE *)(v1 + 72));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10006D534(uint64_t a1)
{
  double *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  _QWORD *v8;

  v4 = *((_QWORD *)v1 + 2);
  v5 = *((_QWORD *)v1 + 3);
  v6 = v1[10];
  v7 = v1[11];
  v8 = (_QWORD *)swift_task_alloc(dword_100116A04);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014F2C;
  return sub_10006BF24(v6, v7, a1, v4, v5, (uint64_t)(v1 + 4));
}

uint64_t sub_10006D5C4()
{
  uint64_t v0;

  return sub_1000099D0(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

unint64_t sub_10006D5E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116A20;
  if (!qword_100116A20)
  {
    v1 = sub_100005608(&qword_100116A18);
    sub_10006D664();
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116A20);
  }
  return result;
}

unint64_t sub_10006D664()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116A28;
  if (!qword_100116A28)
  {
    v1 = sub_100005608(&qword_100116A30);
    sub_100008078(&qword_100116168, &qword_100116170, (uint64_t)&protocol conformance descriptor for Button<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116A28);
  }
  return result;
}

uint64_t *sub_10006D6E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[7];
  v6 = a1[8];
  v7 = a1[11];
  swift_retain(a1[14]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *sub_10006D76C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[8];
  v6 = a1[11];
  v7 = a1[14];
  swift_release(a1[7]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  return a1;
}

unint64_t sub_10006D800()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116A38;
  if (!qword_100116A38)
  {
    v1 = sub_100005608(&qword_1001169E8);
    sub_10006D884();
    sub_100008078(&qword_100115358, &qword_100113FE0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116A38);
  }
  return result;
}

unint64_t sub_10006D884()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100116A40[0];
  if (!qword_100116A40[0])
  {
    v1 = sub_100005608(&qword_1001168F0);
    v2[0] = sub_100005608(&qword_1001168E0);
    v2[1] = sub_10006D128();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, qword_100116A40);
  }
  return result;
}

uint64_t sub_10006D930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[16];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v33 = a8;
  v34 = a4;
  v31 = a7;
  v32 = a3;
  v35 = a9;
  v13 = type metadata accessor for Optional(255, a6);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a5, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for GridRow(0, v15, WitnessTable);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22, v23);
  v26 = (char *)&v30 - v25;
  v27 = static VerticalAlignment.firstTextBaseline.getter(v24);
  v37 = a5;
  v38 = a6;
  v39 = v31;
  v40 = v33;
  v41 = a1;
  v42 = a2;
  v43 = v32;
  v44 = v34;
  GridRow.init(alignment:content:)(v27, 0, sub_10006DED8, v36, v15, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for GridRow<A>, v17);
  sub_100046714((uint64_t)v21, v17, (uint64_t)v26);
  v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  sub_10003E144((uint64_t)v26, v17, v35);
  return ((uint64_t (*)(char *, uint64_t))v28)(v26, v17);
}

uint64_t sub_10006DACC@<X0>(void (*a1)(__n128)@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t WitnessTable;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  uint64_t (*v32)(char *, uint64_t);
  _QWORD v34[2];
  void (*v35)(uint64_t);
  uint64_t (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  uint64_t v43[3];

  v38 = a7;
  v39 = a8;
  v34[0] = a6;
  v34[1] = a3;
  v35 = a2;
  v10 = type metadata accessor for Optional(0, a5);
  v37 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v34 - v16;
  v18 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v19, v20);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v23, v24);
  v27 = (char *)v34 - v26;
  a1(v25);
  sub_100046714((uint64_t)v22, a4, (uint64_t)v27);
  v36 = *(uint64_t (**)(char *, uint64_t))(v18 + 8);
  v28 = v36(v22, a4);
  v35(v28);
  v43[2] = v38;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v10);
  sub_100046714((uint64_t)v13, v10, (uint64_t)v17);
  v30 = v37;
  v31 = *(void (**)(char *, uint64_t))(v37 + 8);
  v31(v13, v10);
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v22, v27, a4);
  v43[0] = (uint64_t)v22;
  (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v13, v17, v10);
  v43[1] = (uint64_t)v13;
  v42[0] = a4;
  v42[1] = v10;
  v40 = v34[0];
  v41 = WitnessTable;
  sub_10003E15C(v43, 2uLL, (uint64_t)v42);
  v31(v17, v10);
  v32 = v36;
  v36(v27, a4);
  v31(v13, v10);
  return v32(v22, a4);
}

uint64_t sub_10006DCD8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10006D930(*v2, v2[1], v2[2], v2[3], a1[2], a1[3], a1[4], a1[5], a2);
}

void sub_10006DCF0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10006DCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t sub_10006DD00(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t sub_10006DD28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *sub_10006DD70(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v4);
  swift_release(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t sub_10006DDCC(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t sub_10006DE10(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10006DE58(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for InputContainerView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for InputContainerView);
}

uint64_t sub_10006DEA4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_1000F6620, 1);
}

uint64_t sub_10006DED8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10006DACC(*(void (**)(__n128))(v1 + 48), *(void (**)(uint64_t))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_10006DEEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;

  v1 = *a1;
  v2 = type metadata accessor for Optional(255, a1[1]);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v1, v2, 0, 0);
  v4 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v4);
  v6 = type metadata accessor for GridRow(255, v4, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for GridRow<A>, v6);
}

double destroy for BackgroundDimView(uint64_t a1)
{
  double result;

  sub_100007ED0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 24)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for BackgroundDimView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 17);
  v7 = *(unsigned __int8 *)(a2 + 16);
  sub_100007DE0(*(_QWORD *)a2, v5, v7, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 17) = v6;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v8;
  *(_BYTE *)(a1 + 32) = v9;
  swift_retain(v8);
  return a1;
}

uint64_t assignWithCopy for BackgroundDimView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 17);
  v7 = *(unsigned __int8 *)(a2 + 16);
  sub_100007DE0(*(_QWORD *)a2, v5, v7, v6);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_BYTE *)(a1 + 17);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v11 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 17) = v6;
  sub_100007ED0(v8, v9, v11, v10);
  v12 = *(_QWORD *)(a2 + 24);
  v13 = *(_BYTE *)(a2 + 32);
  v14 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v12;
  *(_BYTE *)(a1 + 32) = v13;
  swift_retain(v12);
  swift_release(v14);
  return a1;
}

uint64_t assignWithTake for BackgroundDimView(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v9 = *(unsigned __int8 *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = v5;
  sub_100007ED0(v6, v7, v9, v8);
  v10 = *(_BYTE *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = v10;
  swift_release(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for BackgroundDimView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BackgroundDimView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BackgroundDimView()
{
  return &type metadata for BackgroundDimView;
}

uint64_t sub_10006E1A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F667C, 1);
}

void sub_10006E1B4()
{
  __int128 *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[7];
  _OWORD v28[2];
  __int128 v29;
  __int16 v30;
  _OWORD v31[7];
  _OWORD v32[3];

  v26 = sub_100005360(&qword_100116AC8);
  __chkstk_darwin(v26, v1);
  v25 = sub_100005360(&qword_100116AD0);
  __chkstk_darwin(v25, v2);
  v4 = static Alignment.center.getter(v3);
  v6 = v5;
  v7 = static Alignment.center.getter(v4);
  sub_100035AFC(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v27, 0.0, 1, INFINITY, 0, v7, v8, v4, v6);
  v10 = static Color.black.getter(v9);
  v11 = Color.opacity(_:)(0.6);
  swift_release(v10);
  v13 = static Edge.Set.all.getter(v12);
  LOBYTE(v10) = v13;
  v14 = static Edge.Set.all.getter(v13);
  *(_QWORD *)&v28[1] = v11;
  BYTE8(v28[1]) = v10;
  BYTE9(v28[1]) = v14;
  v29 = *v0;
  v30 = *((_WORD *)v0 + 8);
  v15 = *((_QWORD *)v0 + 3);
  LOBYTE(v10) = *((_BYTE *)v0 + 32);
  v16 = swift_allocObject(&unk_10010B7C8, 49, 7);
  v17 = v0[1];
  *(_OWORD *)(v16 + 16) = *v0;
  *(_OWORD *)(v16 + 32) = v17;
  *(_BYTE *)(v16 + 48) = *((_BYTE *)v0 + 32);
  sub_10006E6BC((uint64_t)&v29);
  swift_retain(v15);
  v18 = sub_100005360(&qword_100116AD8);
  v19 = sub_10006E6F0();
  View.onTapGesture(count:perform:)(1, sub_10006E6B4, v16, v18, v19);
  swift_release(v16);
  v31[6] = v27[6];
  v32[0] = v28[0];
  *(_OWORD *)((char *)v32 + 10) = *(_OWORD *)((char *)v28 + 10);
  v31[2] = v27[2];
  v31[3] = v27[3];
  v31[4] = v27[4];
  v31[5] = v27[5];
  v31[0] = v27[0];
  v31[1] = v27[1];
  sub_10006E7E0((uint64_t)v31);
  v20 = swift_retain(v15);
  v21 = sub_100043890(v20, v10);
  swift_release(v15);
  KeyPath = swift_getKeyPath(&unk_1000D1B68);
  *(_QWORD *)&v27[0] = v21;
  v23 = sub_10006E810();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v27, KeyPath, v23);
  swift_release(KeyPath);
  v24 = *(unsigned __int8 *)(v21 + 48);
  swift_release(v21);
  __asm { BR              X9 }
}

uint64_t sub_10006E448()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, 0xEA00000000006369, 0x657061506874616DLL, 0xE900000000000072, 0);
  swift_bridgeObjectRelease(0xEA00000000006369);
  v5 = v0[2];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v2, v5);
  *(_BYTE *)(v3 + *(int *)(v0[1] + 36)) = v4 & 1;
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v5);
  return sub_10006E858(v3, v0[3]);
}

double sub_10006E518(uint64_t a1)
{
  uint64_t v2;
  double result;
  _QWORD v4[4];

  v2 = static Animation.easeOut(duration:)(0.17);
  v4[2] = a1;
  withAnimation<A>(_:_:)(v2, sub_10006E8A0, v4, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_10006E580(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(unsigned __int8 *)(a1 + 17);
  sub_100007DE0(*(_QWORD *)a1, v2, v3, v4);
  v5 = sub_1000439FC(v1, v2, v3 | (v4 << 8));
  v7 = v6;
  v9 = v8;
  sub_100007ED0(v1, v2, v3, v4);
  swift_retain(v5);
  swift_retain(v7);
  v10 = sub_100005360(&qword_100113FB0);
  Binding.wrappedValue.getter(&v16, v10);
  v13 = v5;
  v14 = v7;
  v15 = v9 & 1;
  v12 = 0;
  Binding.wrappedValue.setter(&v12, v10);
  swift_release_n(v7, 2);
  return swift_release_n(v5, 2);
}

uint64_t sub_10006E680()
{
  uint64_t v0;

  sub_100007ED0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(_BYTE *)(v0 + 33));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 49, 7);
}

double sub_10006E6B4()
{
  uint64_t v0;

  return sub_10006E518(v0 + 16);
}

uint64_t sub_10006E6BC(uint64_t a1)
{
  sub_100007DE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(_BYTE *)(a1 + 17));
  return a1;
}

unint64_t sub_10006E6F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116AE0;
  if (!qword_100116AE0)
  {
    v1 = sub_100005608(&qword_100116AD8);
    sub_10006E75C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116AE0);
  }
  return result;
}

unint64_t sub_10006E75C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116AE8;
  if (!qword_100116AE8)
  {
    v1 = sub_100005608(&qword_100116AF0);
    sub_10006CF70();
    sub_100008078(&qword_100114B68, &qword_100114B70, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116AE8);
  }
  return result;
}

uint64_t sub_10006E7E0(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 128));
  return a1;
}

unint64_t sub_10006E810()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100113FA0;
  if (!qword_100113FA0)
  {
    v1 = type metadata accessor for CalculatorViewModel(255);
    result = swift_getWitnessTable(&unk_1000CE268, v1);
    atomic_store(result, (unint64_t *)&qword_100113FA0);
  }
  return result;
}

uint64_t sub_10006E858(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_100116AD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10006E8A0()
{
  uint64_t v0;

  return sub_10006E580(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10006E8BC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100116AF8;
  if (!qword_100116AF8)
  {
    v1 = sub_100005608(&qword_100116AD0);
    v2[0] = sub_100005608(&qword_100116AD8);
    v2[1] = sub_10006E6F0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onTapGesture(count:perform:)>>, 1);
    sub_10003AC9C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116AF8);
  }
  return result;
}

uint64_t sub_10006E950(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  v3 = v2;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_1000054E8((_OWORD *)a1, v16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14 = *v2;
    *v2 = 0x8000000000000000;
    sub_10001E120(v16, a2, isUniquelyReferenced_nonNull_native);
    v6 = *v2;
    *v2 = v14;
    return swift_bridgeObjectRelease(v6);
  }
  else
  {
    sub_100004F48(a1, &qword_100114A20);
    v8 = sub_10001CAA4(a2);
    if ((v9 & 1) != 0)
    {
      v10 = v8;
      v11 = swift_isUniquelyReferenced_nonNull_native(*v2);
      v12 = *v2;
      v15 = *v3;
      *v3 = 0x8000000000000000;
      if ((v11 & 1) == 0)
      {
        sub_10001DA2C();
        v12 = v15;
      }
      sub_1000054E8((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v10), v16);
      sub_100072574(v10, v12);
      v13 = *v3;
      *v3 = v12;
      swift_bridgeObjectRelease(v13);
    }
    else
    {
      memset(v16, 0, sizeof(v16));
    }
    return sub_100004F48((uint64_t)v16, &qword_100114A20);
  }
}

uint64_t sub_10006EA60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1[29] = v0;
  v2 = sub_100005360(&qword_100116C08);
  v1[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100005360(&qword_100116C70);
  v1[31] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[32] = v4;
  v1[33] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for StoreContext();
  v1[34] = v5;
  v7 = sub_100072878(&qword_100116BF8, v6, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1C00);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v5, v7);
  return swift_task_switch(sub_10006EB24, v8, v9);
}

void sub_10006EB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  __int128 v78;
  __int128 v79;

  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100014124(v1, (uint64_t)qword_10011FEA8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Attempting to fetch all existing records from db.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 272);
  v8 = *(_QWORD *)(v0 + 240);

  v9 = sub_100005360(&qword_100116C10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  v10 = sub_100005360(&qword_100116C78);
  v11 = *(_QWORD *)(sub_100005360(&qword_100116C80) - 8);
  v12 = swift_allocObject(v10, ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72), *(unsigned __int8 *)(v11 + 80) | 7);
  *(_OWORD *)(v12 + 16) = xmmword_1000CD7E0;
  KeyPath = swift_getKeyPath(&unk_1000D1C50);
  v14 = sub_100072878(&qword_100116C88, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  SortDescriptor.init<A>(_:order:)(KeyPath, 1, v14);
  v15 = type metadata accessor for SchemaV1.HistoryRecord(0);
  v16 = sub_100072878(&qword_1001142F8, 255, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  FetchDescriptor.init(predicate:sortBy:)(v8, v12, v15, v16);
  v18 = sub_100072878(&qword_100116C00, v17, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1BC8);
  v19 = ModelActor.modelContext.getter(v7, v18);
  v20 = dispatch thunk of ModelContext.fetch<A>(_:)(v6, v15, v16);
  swift_release(v19);
  if ((unint64_t)v20 >> 62)
  {
    if (v20 < 0)
      v64 = v20;
    else
      v64 = v20 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v20);
    v21 = _CocoaArrayWrapper.endIndex.getter(v64);
    swift_bridgeObjectRelease(v20);
    if (v21)
      goto LABEL_7;
LABEL_28:
    v77 = _swiftEmptyArrayStorage;
    goto LABEL_29;
  }
  v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v21)
    goto LABEL_28;
LABEL_7:
  if (v21 < 1)
  {
    __break(1u);
    return;
  }
  v22 = 0;
  v75 = (_QWORD *)(v0 + 16);
  v74 = v20 & 0xC000000000000001;
  v77 = _swiftEmptyArrayStorage;
  v73 = v20;
  do
  {
    v76 = v22;
    if (v74)
    {
      v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
    }
    else
    {
      v23 = *(_QWORD *)(v20 + 8 * v22 + 32);
      swift_retain(v23);
    }
    *(_QWORD *)(v0 + 200) = v23;
    v24 = swift_getKeyPath(&unk_1000D1C28);
    v25 = sub_100072878(&qword_1001142F0, 255, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 200, v24, v25);
    swift_release(v24);
    v26 = swift_getKeyPath(&unk_1000D1C28);
    PersistentModel.getValue<A>(forKey:)(v26, v16, &protocol witness table for String);
    swift_release(v26);
    v27 = *(_QWORD *)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 72);
    *((_QWORD *)&v79 + 1) = &type metadata for String;
    *(_QWORD *)&v78 = v27;
    *((_QWORD *)&v78 + 1) = v28;
    sub_10006E950((uint64_t)&v78, 0);
    *(_QWORD *)(v0 + 216) = v23;
    v29 = swift_getKeyPath(&unk_1000D1C78);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 216, v29, v25);
    swift_release(v29);
    v30 = swift_getKeyPath(&unk_1000D1C78);
    PersistentModel.getValue<A>(forKey:)(v30, v16, &protocol witness table for String);
    swift_release(v30);
    v31 = *(_QWORD *)(v0 + 96);
    v32 = *(_QWORD *)(v0 + 104);
    *((_QWORD *)&v79 + 1) = &type metadata for String;
    *(_QWORD *)&v78 = v31;
    *((_QWORD *)&v78 + 1) = v32;
    sub_10006E950((uint64_t)&v78, 1);
    *(_QWORD *)(v0 + 152) = v23;
    v33 = swift_getKeyPath(&unk_1000D1CA0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 152, v33, v25);
    swift_release(v33);
    v34 = swift_getKeyPath(&unk_1000D1CA0);
    PersistentModel.getValue<A>(forKey:)(v34, v16, &protocol witness table for Bool);
    swift_release(v34);
    v35 = *(_BYTE *)(v0 + 281);
    *((_QWORD *)&v79 + 1) = &type metadata for Bool;
    LOBYTE(v78) = v35;
    sub_10006E950((uint64_t)&v78, 2);
    *(_QWORD *)(v0 + 144) = v23;
    v36 = swift_getKeyPath(&unk_1000D1CC8);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 144, v36, v25);
    swift_release(v36);
    v37 = swift_getKeyPath(&unk_1000D1CC8);
    PersistentModel.getValue<A>(forKey:)(v37, v16, &protocol witness table for Bool);
    swift_release(v37);
    v38 = *(_BYTE *)(v0 + 280);
    *((_QWORD *)&v79 + 1) = &type metadata for Bool;
    LOBYTE(v78) = v38;
    sub_10006E950((uint64_t)&v78, 3);
    *(_QWORD *)(v0 + 160) = v23;
    v39 = swift_getKeyPath(&unk_1000D1CF0);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 160, v39, v25);
    swift_release(v39);
    v40 = swift_getKeyPath(&unk_1000D1CF0);
    PersistentModel.getValue<A>(forKey:)(v40, v16, &protocol witness table for Bool);
    swift_release(v40);
    v41 = *(_BYTE *)(v0 + 282);
    *((_QWORD *)&v79 + 1) = &type metadata for Bool;
    LOBYTE(v78) = v41;
    sub_10006E950((uint64_t)&v78, 4);
    *(_QWORD *)(v0 + 176) = v23;
    v42 = swift_getKeyPath(&unk_1000D1D18);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 176, v42, v25);
    swift_release(v42);
    v43 = swift_getKeyPath(&unk_1000D1D18);
    PersistentModel.getValue<A>(forKey:)(v43, v16, &protocol witness table for String);
    swift_release(v43);
    v44 = *(_QWORD *)(v0 + 128);
    v45 = *(_QWORD *)(v0 + 136);
    *((_QWORD *)&v79 + 1) = &type metadata for String;
    *(_QWORD *)&v78 = v44;
    *((_QWORD *)&v78 + 1) = v45;
    sub_10006E950((uint64_t)&v78, 5);
    *(_QWORD *)(v0 + 192) = v23;
    v46 = swift_getKeyPath(&unk_1000D1D40);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 192, v46, v25);
    swift_release(v46);
    v47 = swift_getKeyPath(&unk_1000D1D40);
    PersistentModel.getValue<A>(forKey:)(v47, v16, &protocol witness table for String);
    swift_release(v47);
    v48 = *(_QWORD *)(v0 + 112);
    v49 = *(_QWORD *)(v0 + 120);
    *((_QWORD *)&v79 + 1) = &type metadata for String;
    *(_QWORD *)&v78 = v48;
    *((_QWORD *)&v78 + 1) = v49;
    sub_10006E950((uint64_t)&v78, 6);
    *(_QWORD *)(v0 + 208) = v23;
    v50 = swift_getKeyPath(&unk_1000D1D68);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 208, v50, v25);
    swift_release(v50);
    v51 = swift_getKeyPath(&unk_1000D1D68);
    v52 = sub_100013E20();
    PersistentModel.getValue<A>(forKey:)(v51, v16, v52);
    swift_release(v51);
    v53 = *(_QWORD *)(v0 + 88);
    if (v53)
    {
      v54 = *(_QWORD *)(v0 + 80);
      *((_QWORD *)&v79 + 1) = &type metadata for String;
      *(_QWORD *)&v78 = v54;
      *((_QWORD *)&v78 + 1) = v53;
    }
    else
    {
      v78 = 0u;
      v79 = 0u;
    }
    sub_10006E950((uint64_t)&v78, 7);
    *(_QWORD *)(v0 + 224) = v23;
    v55 = swift_getKeyPath(&unk_1000D1D90);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 224, v55, v25);
    swift_release(v55);
    v56 = swift_getKeyPath(&unk_1000D1D90);
    PersistentModel.getValue<A>(forKey:)(v56, v16, v52);
    swift_release(v56);
    v57 = *(_QWORD *)(v0 + 56);
    if (v57)
    {
      v58 = *(_QWORD *)(v0 + 48);
      *((_QWORD *)&v79 + 1) = &type metadata for String;
      *(_QWORD *)&v78 = v58;
      *((_QWORD *)&v78 + 1) = v57;
    }
    else
    {
      v78 = 0u;
      v79 = 0u;
    }
    sub_10006E950((uint64_t)&v78, 8);
    *(_QWORD *)(v0 + 40) = type metadata accessor for Date(0);
    sub_10004E510(v75);
    *(_QWORD *)(v0 + 168) = v23;
    v59 = swift_getKeyPath(&unk_1000D1C50);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 168, v59, v25);
    swift_release(v59);
    v60 = swift_getKeyPath(&unk_1000D1C50);
    v61 = sub_100072878(&qword_100114310, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    PersistentModel.getValue<A>(forKey:)(v60, v16, v61);
    swift_release(v60);
    sub_10006E950((uint64_t)v75, 9);
    if ((swift_isUniquelyReferenced_nonNull_native(v77) & 1) == 0)
      v77 = sub_100071F0C(0, v77[2] + 1, 1, v77);
    v20 = v73;
    v63 = v77[2];
    v62 = v77[3];
    if (v63 >= v62 >> 1)
      v77 = sub_100071F0C((_QWORD *)(v62 > 1), v63 + 1, 1, v77);
    ++v22;
    v77[2] = v63 + 1;
    v77[v63 + 4] = &_swiftEmptyDictionarySingleton;
    swift_release(v23);
  }
  while (v21 != v76 + 1);
LABEL_29:
  v65 = swift_bridgeObjectRelease(v20);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Successfully fetched all existing records from db.", v68, 2u);
    swift_slowDealloc(v68, -1, -1);
  }
  v70 = *(_QWORD *)(v0 + 256);
  v69 = *(_QWORD *)(v0 + 264);
  v71 = *(_QWORD *)(v0 + 248);

  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
  v72 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v72);
  (*(void (**)(_QWORD *))(v0 + 8))(v77);
}

uint64_t sub_10006F6E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[11] = a1;
  v2[12] = v1;
  v3 = type metadata accessor for GenericRecord(0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for StoreContext();
  v2[14] = v4;
  v6 = sub_100072878(&qword_100116BF8, v5, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1C00);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v6);
  return swift_task_switch(sub_10006F77C, v7, v8);
}

uint64_t sub_10006F77C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t type;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 104);
  sub_100072530(*(_QWORD *)(v0 + 88), v1);
  v2 = type metadata accessor for SchemaV1.HistoryRecord(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = sub_10004CDAC(v1);
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v4 = type metadata accessor for Logger(0);
  sub_100014124(v4, (uint64_t)qword_10011FEA8);
  v5 = swift_retain_n(v3, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    type = swift_slowAlloc(32, -1);
    *(_DWORD *)v8 = 136315138;
    v22 = type;
    *(_QWORD *)(v0 + 64) = v3;
    KeyPath = swift_getKeyPath(&unk_1000D1C28);
    v10 = sub_100072878(&qword_1001142F0, 255, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFC48);
    ObservationRegistrar.access<A, B>(_:keyPath:)(v0 + 64, KeyPath, v10);
    swift_release(KeyPath);
    v11 = swift_getKeyPath(&unk_1000D1C28);
    v12 = sub_100072878(&qword_1001142F8, 255, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
    PersistentModel.getValue<A>(forKey:)(v11, v12, &protocol witness table for String);
    swift_release(v11);
    v13 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 80) = sub_100029918(*(_QWORD *)(v0 + 16), v13, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Adding record: %s to db.", v8, 0xCu);
    swift_arrayDestroy(type, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(type, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v3, 2);
  }
  v15 = *(_QWORD *)(v0 + 112);
  v16 = sub_100072878(&qword_100116C00, v14, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1BC8);
  v17 = ModelActor.modelContext.getter(v15, v16);
  v18 = sub_100072878(&qword_1001142F8, 255, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
  dispatch thunk of ModelContext.insert<A>(_:)(v3, v2, v18);
  swift_release(v17);
  v19 = ModelActor.modelContext.getter(v15, v16);
  dispatch thunk of ModelContext.save()();
  swift_release(v19);
  swift_release(v3);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006FD60(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v4 + 56) = a2;
  *(_QWORD *)(v4 + 64) = v3;
  *(_BYTE *)(v4 + 120) = a3;
  *(_QWORD *)(v4 + 48) = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_100005360(&qword_100116C08) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 72) = swift_task_alloc(v5);
  *(_QWORD *)(v4 + 80) = swift_task_alloc(v5);
  v6 = sub_100005360(&qword_100116C10);
  *(_QWORD *)(v4 + 88) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 96) = v7;
  *(_QWORD *)(v4 + 104) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for StoreContext();
  *(_QWORD *)(v4 + 112) = v8;
  v10 = sub_100072878(&qword_100116BF8, v9, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1C00);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v8, v10);
  return swift_task_switch(sub_10006FE3C, v11, v12);
}

uint64_t sub_10006FE3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, _QWORD);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v1 = v0 + 16;
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = type metadata accessor for Logger(0);
  sub_100014124(v3, (uint64_t)qword_10011FEA8);
  v4 = swift_bridgeObjectRetain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 56);
  if (v7)
  {
    v9 = *(_QWORD *)(v0 + 48);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v39 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(v8);
    *(_QWORD *)(v0 + 40) = sub_100029918(v9, v8, &v39);
    v1 = v0 + 16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease_n(v8, 3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Deleting record: %s from db.", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  v12 = *(_QWORD *)(v0 + 112);
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 56);
  v15 = *(unsigned __int8 *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 48);
  v17 = swift_task_alloc(32);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 24) = v14;
  v18 = type metadata accessor for SchemaV1.HistoryRecord(0);
  *(_QWORD *)(v0 + 16) = v18;
  Predicate.init(_:)(sub_1000723D8, v17, 1, v1);
  v20 = sub_100072878(&qword_100116C00, v19, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1BC8);
  v21 = ModelActor.modelContext.getter(v12, v20);
  v22 = *(void (**)(uint64_t, uint64_t, _QWORD))(v13 + 16);
  v23 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 88);
  if (v15 == 1)
  {
    v25 = *(_QWORD *)(v0 + 80);
    v22(v25, v23, *(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v25, 0, 1, v24);
    v26 = sub_100072878(&qword_1001142F8, 255, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v18, v25, 1, v18, v26);
    v28 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 104);
    v29 = *(_QWORD *)(v0 + 80);
    v30 = *(_QWORD *)(v0 + 88);
    swift_release(v21);
    sub_100004F48(v29, &qword_100116C08);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v30);
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 72);
    v22(v31, v23, *(_QWORD *)(v0 + 88));
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v31, 0, 1, v24);
    v32 = sub_100072878(&qword_1001142F8, 255, type metadata accessor for SchemaV1.HistoryRecord, (uint64_t)&unk_1000CFCCC);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v18, v31, 1, v18, v32);
    v33 = *(_QWORD *)(v0 + 112);
    sub_100004F48(*(_QWORD *)(v0 + 72), &qword_100116C08);
    swift_release(v21);
    v34 = ModelActor.modelContext.getter(v33, v20);
    dispatch thunk of ModelContext.save()();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 96) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 88));
    swift_release(v34);
  }
  v35 = *(_QWORD *)(v0 + 104);
  v37 = *(_QWORD *)(v0 + 72);
  v36 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(v17);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000704C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[2];

  v8 = sub_100005360(&qword_100116C18);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100116C20);
  v14 = *(_QWORD *)(v13 - 8);
  v33 = v13;
  v34 = v14;
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100005360(&qword_100116C28);
  v32 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18, v19);
  v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v35[0] = a2;
  v35[1] = a3;
  static PredicateExpressions.build_Arg<A>(_:)(v35, &type metadata for String, v20);
  v24 = sub_100008078(&qword_100116C30, &qword_100116C18, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v23, v8, v24);
  KeyPath = swift_getKeyPath(&unk_1000D1C28);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v12, KeyPath, v8, v24);
  v26 = swift_release(KeyPath);
  (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v12, v8, v26);
  a4[3] = sub_100005360(&qword_100116C38);
  a4[4] = sub_1000723E4();
  sub_10004E510(a4);
  v27 = sub_100008078(&qword_100116C60, &qword_100116C28, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  v28 = sub_100008078(&qword_100116C68, &qword_100116C20, (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  v29 = v33;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v22, v17, v18, v33, v27, v28, &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v22, v18);
}

uint64_t sub_100070714(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for StoreContext();
  v2[8] = v3;
  v5 = sub_100072878(&qword_100116BF8, v4, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1C00);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v3, v5);
  v2[9] = v6;
  v2[10] = v7;
  return swift_task_switch(sub_100070788, v6, v7);
}

uint64_t sub_100070788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40[2];

  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v1 = v0 + 40;
  v2 = *(_QWORD *)(v0 + 48);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 88) = sub_100014124(v3, (uint64_t)qword_10011FEA8);
  v4 = swift_bridgeObjectRetain_n(v2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 48);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v40[0] = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = swift_bridgeObjectRetain(v8);
    v12 = Array.description.getter(v11, &type metadata for String);
    v14 = v13;
    swift_bridgeObjectRelease(v8);
    v15 = v12;
    v1 = v0 + 40;
    *(_QWORD *)(v0 + 40) = sub_100029918(v15, v14, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Deleting records with identifiers: %s from db.", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  v17 = *(_QWORD **)(v0 + 48);
  v18 = v17[2];
  *(_QWORD *)(v0 + 96) = v18;
  if (v18)
  {
    *(_QWORD *)(v0 + 104) = 0;
    v19 = v17[5];
    *(_QWORD *)(v0 + 112) = v19;
    v20 = v17[4];
    v21 = dword_100116B3C;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v17);
    v22 = (_QWORD *)swift_task_alloc(v21);
    *(_QWORD *)(v0 + 120) = v22;
    *v22 = v0;
    v22[1] = sub_100070DB4;
    return sub_10006FD60(v20, v19, 1);
  }
  else
  {
    v24 = v1;
    v25 = *(_QWORD *)(v0 + 64);
    v26 = sub_100072878(&qword_100116C00, v16, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1BC8);
    v27 = ModelActor.modelContext.getter(v25, v26);
    dispatch thunk of ModelContext.save()();
    v28 = *(_QWORD *)(v0 + 48);
    swift_release(v27);
    v29 = swift_bridgeObjectRetain_n(v28, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 48);
    if (v32)
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      *(_DWORD *)v34 = 136315138;
      v40[0] = v35;
      v36 = swift_bridgeObjectRetain(v33);
      v37 = Array.description.getter(v36, &type metadata for String);
      v39 = v38;
      swift_bridgeObjectRelease(v33);
      *(_QWORD *)(v0 + 32) = sub_100029918(v37, v39, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v24);
      swift_bridgeObjectRelease_n(v33, 2);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Successfully deleted records with identifiers: %s from db.", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v33, 2);
    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100070DB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v3);
  v4 = v2[14];
  if (v0)
  {
    v5 = v2[6];
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v5);
    v6 = v2[9];
    v7 = v2[10];
    v8 = sub_1000712B4;
  }
  else
  {
    swift_bridgeObjectRelease(v4);
    v6 = v2[9];
    v7 = v2[10];
    v8 = sub_100070E30;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100070E30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41[2];

  v1 = *(_QWORD *)(v0 + 104) + 1;
  if (v1 != *(_QWORD *)(v0 + 96))
  {
    *(_QWORD *)(v0 + 104) = v1;
    v20 = *(_QWORD *)(v0 + 48) + 16 * v1;
    v21 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v0 + 112) = v21;
    v22 = *(_QWORD *)(v20 + 32);
    v23 = dword_100116B3C;
    swift_bridgeObjectRetain(v21);
    v24 = (_QWORD *)swift_task_alloc(v23);
    *(_QWORD *)(v0 + 120) = v24;
    *v24 = v0;
    v24[1] = sub_100070DB4;
    return sub_10006FD60(v22, v21, 1);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = sub_100072878(&qword_100116C00, v4, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1BC8);
  v6 = ModelActor.modelContext.getter(v3, v5);
  dispatch thunk of ModelContext.save()();
  if (!v2)
  {
    v26 = *(_QWORD *)(v0 + 48);
    swift_release(v6);
    v27 = swift_bridgeObjectRetain_n(v26, 2);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    v30 = os_log_type_enabled(v28, v29);
    v31 = *(_QWORD *)(v0 + 48);
    if (v30)
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v41[0] = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = swift_bridgeObjectRetain(v31);
      v35 = Array.description.getter(v34, &type metadata for String);
      v37 = v36;
      swift_bridgeObjectRelease(v31);
      *(_QWORD *)(v0 + 32) = sub_100029918(v35, v37, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
      swift_bridgeObjectRelease_n(v31, 2);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully deleted records with identifiers: %s from db.", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    v38 = v31;
LABEL_10:
    swift_bridgeObjectRelease_n(v38, 2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  swift_release(v6);
  v7 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(v7);
  swift_errorRetain(v2);
  swift_bridgeObjectRetain(v7);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 48);
  if (!v11)
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

    v38 = v12;
    goto LABEL_10;
  }
  v13 = swift_slowAlloc(22, -1);
  v39 = (uint64_t *)swift_slowAlloc(8, -1);
  v40 = swift_slowAlloc(32, -1);
  *(_DWORD *)v13 = 138412546;
  v41[0] = v40;
  swift_errorRetain(v2);
  v14 = _swift_stdlib_bridgeErrorToNSError(v2);
  *(_QWORD *)(v0 + 16) = v14;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
  *v39 = v14;
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  *(_WORD *)(v13 + 12) = 2080;
  v15 = swift_bridgeObjectRetain(v12);
  v16 = Array.description.getter(v15, &type metadata for String);
  v18 = v17;
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(v0 + 24) = sub_100029918(v16, v18, v41);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
  swift_bridgeObjectRelease_n(v12, 2);
  swift_bridgeObjectRelease(v18);
  _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error: %@ deleting records with identifiers: %s from datastore.", (uint8_t *)v13, 0x16u);
  v19 = sub_100005360(&qword_100114358);
  swift_arrayDestroy(v39, 1, v19);
  swift_slowDealloc(v39, -1, -1);
  swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v40, -1, -1);
  swift_slowDealloc(v13, -1, -1);

  swift_errorRelease(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000712B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v16;
  NSObject *log;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(v2);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 48);
    log = v4;
    v7 = swift_slowAlloc(22, -1);
    v16 = (uint64_t *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v19 = v18;
    *(_DWORD *)v7 = 138412546;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *v16 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    *(_WORD *)(v7 + 12) = 2080;
    v9 = swift_bridgeObjectRetain(v6);
    v10 = Array.description.getter(v9, &type metadata for String);
    v12 = v11;
    swift_bridgeObjectRelease(v6);
    *(_QWORD *)(v0 + 24) = sub_100029918(v10, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v5, "Error: %@ deleting records with identifiers: %s from datastore.", (uint8_t *)v7, 0x16u);
    v13 = sub_100005360(&qword_100114358);
    swift_arrayDestroy(v16, 1, v13);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 48);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_bridgeObjectRelease_n(v14, 2);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for StoreContext();
  v3[9] = v4;
  v6 = sub_100072878(&qword_100116BF8, v5, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1C00);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, v6);
  return swift_task_switch(sub_100071590, v7, v8);
}

uint64_t sub_100071590()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint8_t *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45[2];

  v1 = v0;
  v43 = v0 + 2;
  v41 = v0 + 5;
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v40 = v0 + 4;
  v2 = type metadata accessor for Logger(0);
  v42 = sub_100014124(v2, (uint64_t)qword_10011FEA8);
  v3 = Logger.logObject.getter(v42);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[6];
    v6 = v0[7];
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v45[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = dispatch thunk of static PersistentModel.schemaMetadata.getter(v5, v6);
    v10 = type metadata accessor for Schema.PropertyMetadata(0);
    v11 = Array.description.getter(v9, v10);
    v13 = v12;
    swift_bridgeObjectRelease(v9);
    v0[5] = sub_100029918(v11, v13, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v41, v0 + 6);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deleting all records of type: %s from db.", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  v14 = v0[9];
  v16 = v1[6];
  v15 = v1[7];
  v18 = sub_100072878(&qword_100116C00, v17, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1BC8);
  v19 = ModelActor.modelContext.getter(v14, v18);
  v1[2] = v16;
  v20 = type metadata accessor for Predicate(255, 1, v43);
  v21 = type metadata accessor for Optional(0, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v23, 1, 1, v20);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v16, v23, 1, v16, v15);
  v24 = v1[9];
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v23, v21);
  swift_release(v19);
  v25 = ModelActor.modelContext.getter(v24, v18);
  dispatch thunk of ModelContext.save()();
  swift_release(v25);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = v1[6];
    v31 = v1[7];
    v44 = v23;
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v45[0] = v33;
    *(_DWORD *)v32 = 136315138;
    v34 = dispatch thunk of static PersistentModel.schemaMetadata.getter(v30, v31);
    v35 = type metadata accessor for Schema.PropertyMetadata(0);
    v36 = Array.description.getter(v34, v35);
    v38 = v37;
    swift_bridgeObjectRelease(v34);
    v1[4] = sub_100029918(v36, v38, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, v41);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully deleted all records of type: %s from db.", v32, 0xCu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v39 = v32;
    v23 = v44;
    swift_slowDealloc(v39, -1, -1);
  }

  swift_task_dealloc(v23);
  return ((uint64_t (*)(void))v1[1])();
}

uint64_t sub_100071AF0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for StoreContext()
{
  return objc_opt_self(_TtC10Calculator12StoreContext);
}

uint64_t sub_100071B3C(uint64_t a1, uint64_t a2)
{
  return sub_100072878(&qword_100116BF8, a2, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1C00);
}

uint64_t sub_100071B68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for StoreContext();
  v2 = sub_100072878(&qword_100116C00, v1, (uint64_t (*)(uint64_t))type metadata accessor for StoreContext, (uint64_t)&unk_1000D1BC8);
  return ModelActor.unownedExecutor.getter(v0, v2);
}

uint64_t sub_100071BAC()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_100071BB4()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100071BD8(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return _swift_stdlib_bridgeErrorToNSError(v1);
}

uint64_t sub_100071BF8(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100005360(&qword_100116CA0);
  v11 = *(_QWORD *)(type metadata accessor for FilteredHistoryRecord(0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = type metadata accessor for FilteredHistoryRecord(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10007292C(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_QWORD *sub_100071E00(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005360(&qword_100114430);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100072B28(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100071F0C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005360(&qword_100116C90);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100072C18(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100072018(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005360(&qword_100116CA8);
      v11 = (_QWORD *)swift_allocObject(v10, v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * v12 - 64;
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= (_QWORD *)((char *)a4 + v8 + 32))
          memmove(v13, a4 + 4, v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100072A44(0, v8, (char *)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100072110(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005360(&qword_100116CB0);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100072D20(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10007221C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100005360(&qword_100116CB8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_100072E08(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

void sub_100072328(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

uint64_t sub_1000723D8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000704C8(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_1000723E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116C40;
  if (!qword_100116C40)
  {
    v1 = sub_100005608(&qword_100116C38);
    sub_100072450();
    sub_1000724B4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.Equal<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116C40);
  }
  return result;
}

unint64_t sub_100072450()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116C48;
  if (!qword_100116C48)
  {
    v1 = sub_100005608(&qword_100116C28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> PredicateExpressions.Value<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100116C48);
  }
  return result;
}

unint64_t sub_1000724B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116C50;
  if (!qword_100116C50)
  {
    v1 = sub_100005608(&qword_100116C20);
    sub_100008078(&qword_100116C58, &qword_100116C18, (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> PredicateExpressions.KeyPath<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116C50);
  }
  return result;
}

uint64_t sub_100072530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GenericRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100072574(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v24);
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_BYTE *)(v12 + v3);
          v14 = (_BYTE *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void (*sub_10007272C(uint64_t **a1, unint64_t a2, uint64_t a3))(_QWORD *)
{
  uint64_t *v6;

  v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)sub_1000727D8(v6, a2, a3);
  return sub_100072780;
}

void (*sub_100072784(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(_QWORD *)
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = sub_1000728B8(v6, a2, a3);
  return sub_100072780;
}

uint64_t *sub_1000727D8(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain(*(_QWORD *)(a3 + 8 * a2 + 32));
LABEL_5:
    *v3 = v4;
    return (uint64_t *)destroy for CalculatorModeSwitchPPTTests;
  }
  __break(1u);
  return result;
}

uint64_t sub_100072878(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void (*sub_1000728B8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return sub_100072924;
  }
  __break(1u);
  return result;
}

void sub_100072924(id *a1)
{

}

uint64_t sub_10007292C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(type metadata accessor for FilteredHistoryRecord(0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100072A44(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if ((v4 & 0x8000000000000000) != 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100072B28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100072C18(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_100005360(&qword_100116C98);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

char *sub_100072D20(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100072E08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for CalculatorKeypadButton(_DWORD *result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CalculatorKeypadButton(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 7))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorKeypadButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 7) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 7) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorButtonImage()
{
  return &type metadata for CalculatorButtonImage;
}

uint64_t sub_100072FB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6740, 1);
}

_QWORD *sub_100072FC8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t OpaqueTypeConformance2;
  unint64_t v73;
  int v75;
  unsigned __int8 v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t KeyPath;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  _BYTE *v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  const mach_header_64 *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unsigned __int8 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _BYTE *v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  void (*v152)(_BYTE *, uint64_t);
  unsigned __int8 v153;
  _BYTE *v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE *v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BYTE *v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  _BYTE *v173;
  uint64_t v174;
  __n128 v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  uint64_t v184;
  _BYTE *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  __int16 v191;
  _BYTE v192[12];
  int v193;
  uint64_t v194;
  int v195;
  _BYTE *v196;
  uint64_t v197;
  uint64_t v198;
  _BYTE *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _BYTE *v205;
  int v206;
  int v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  _BYTE *v214;
  _BYTE *v215;
  _BYTE *v216;
  uint64_t v217;
  _BYTE *v218;
  _BYTE *v219;
  _BYTE *v220;
  _BYTE *v221;
  _BYTE *v222;
  _BYTE *v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE *v226;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  uint64_t v231;
  uint64_t v232;
  _BYTE *v233;
  _BYTE *v234;
  _QWORD *v235;
  _QWORD v236[4];
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  uint64_t v245;

  v2 = v1;
  v235 = a1;
  v3 = sub_100005360(&qword_100116D00);
  v5 = __chkstk_darwin(v3, v4);
  v7 = &v192[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v232 = type metadata accessor for LongPressGesture(0, v5);
  v231 = *(_QWORD *)(v232 - 8);
  __chkstk_darwin(v232, v8);
  v230 = &v192[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100005360(&qword_100116D08);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v233 = &v192[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v229 = type metadata accessor for ContentTransition(0);
  v228 = *(_QWORD *)(v229 - 8);
  v15 = __chkstk_darwin(v229, v14);
  v227 = &v192[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v225 = type metadata accessor for AccessibilityTraits(0, v15);
  v224 = *(_QWORD *)(v225 - 8);
  __chkstk_darwin(v225, v17);
  v222 = &v192[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19, v20);
  v223 = &v192[-v21];
  __chkstk_darwin(v22, v23);
  v220 = &v192[-v24];
  v210 = sub_100005360(&qword_100116D10);
  v209 = *(_QWORD *)(v210 - 8);
  __chkstk_darwin(v210, v25);
  v27 = &v192[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v212 = sub_100005360(&qword_100116D18);
  v211 = *(_QWORD *)(v212 - 8);
  __chkstk_darwin(v212, v28);
  v30 = &v192[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v213 = sub_100005360(&qword_100116D20);
  __chkstk_darwin(v213, v31);
  v214 = &v192[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v217 = sub_100005360(&qword_100116D28);
  __chkstk_darwin(v217, v33);
  v215 = &v192[-((v34 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v35, v36);
  v216 = &v192[-v37];
  __chkstk_darwin(v38, v39);
  v218 = &v192[-v40];
  __chkstk_darwin(v41, v42);
  v234 = &v192[-v43];
  __chkstk_darwin(v44, v45);
  v219 = &v192[-v46];
  v47 = sub_100005360(&qword_100116D30);
  __chkstk_darwin(v47, v48);
  v221 = &v192[-((v49 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v50 = sub_100005360(&qword_100116D38);
  __chkstk_darwin(v50, v51);
  v226 = &v192[-((v52 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v53 = sub_100005360(&qword_100116D40);
  __chkstk_darwin(v53, v54);
  v60 = __chkstk_darwin(v55, v56);
  v61 = *(unsigned __int8 *)(v2 + 41);
  if (v61 == 10)
  {
    v62 = static HorizontalAlignment.center.getter(v60);
    v63 = static Alignment.center.getter(v62);
    sub_100035C98(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v237, 0.0, 1, INFINITY, 0, v63, v64, v62, 0, 1);
    v65 = v244;
    *((_OWORD *)v7 + 6) = v243;
    *((_OWORD *)v7 + 7) = v65;
    *((_QWORD *)v7 + 16) = v245;
    v66 = v240;
    *((_OWORD *)v7 + 2) = v239;
    *((_OWORD *)v7 + 3) = v66;
    v67 = v242;
    *((_OWORD *)v7 + 4) = v241;
    *((_OWORD *)v7 + 5) = v67;
    v68 = v238;
    *(_OWORD *)v7 = v237;
    *((_OWORD *)v7 + 1) = v68;
    swift_storeEnumTagMultiPayload(v7, v3, 1);
    v69 = sub_100005360(&qword_100116DC8);
    v70 = sub_100075BA8();
    v71 = sub_100008078(&qword_100116DC0, &qword_100116D08, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
    v236[0] = v50;
    v236[1] = v10;
    v236[2] = v70;
    v236[3] = v71;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v236, &opaque type descriptor for <<opaque return type of View.simultaneousGesture<A>(_:including:)>>, 1);
    v73 = sub_100075CD0();
    return _ConditionalContent<>.init(storage:)(v235, v7, v53, v69, OpaqueTypeConformance2, v73);
  }
  else
  {
    v198 = v59;
    v199 = &v192[-v57];
    v200 = v58;
    v197 = v50;
    v201 = v53;
    v202 = v11;
    v203 = v10;
    v204 = v3;
    v205 = v7;
    v75 = *(unsigned __int8 *)(v2 + 47);
    v195 = *(unsigned __int8 *)(v2 + 46);
    v206 = *(unsigned __int8 *)(v2 + 45);
    v207 = *(unsigned __int8 *)(v2 + 44);
    v208 = *(unsigned __int8 *)(v2 + 43);
    v196 = v30;
    v76 = *(_BYTE *)(v2 + 42);
    v193 = v76;
    v77 = swift_allocObject(&unk_10010B968, 81, 7);
    v78 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v77 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v77 + 64) = v78;
    *(_BYTE *)(v77 + 80) = *(_BYTE *)(v2 + 64);
    v79 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v77 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v77 + 32) = v79;
    __chkstk_darwin(v77, v80);
    v190 = v2;
    sub_1000758B0(v2);
    v81 = sub_100005360(&qword_100116D48);
    v82 = sub_10003D3C8(&qword_100116D50, &qword_100116D48, (void (*)(void))sub_100075908);
    Button.init(action:label:)(sub_1000758A0, v77, sub_1000758A8, &v189, v81, v82);
    v83 = *(_QWORD *)(v2 + 48);
    v84 = *(_QWORD *)(v2 + 56);
    v85 = *(_QWORD *)v2;
    v86 = *(_BYTE *)(v2 + 8);
    v87 = swift_retain(*(_QWORD *)v2);
    v88 = sub_100043C04(v87, v86);
    swift_release(v85);
    KeyPath = swift_getKeyPath(&unk_1000D1EE8);
    *(_QWORD *)&v237 = v88;
    v90 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v237, KeyPath, v90);
    swift_release(KeyPath);
    v91 = *(_BYTE *)(v88 + 16);
    swift_release(v88);
    v92 = swift_getKeyPath(&unk_1000D1F10);
    v93 = type metadata accessor for CalculatorViewModel(0);
    v94 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    v95 = Environment.init<A>(_:)(v93, v93, v94);
    LOBYTE(v237) = v61;
    BYTE1(v237) = v76;
    BYTE2(v237) = v208;
    v194 = v61;
    BYTE3(v237) = v207;
    BYTE4(v237) = v206;
    v96 = v195;
    BYTE5(v237) = v195;
    BYTE6(v237) = v75;
    *((_QWORD *)&v237 + 1) = v83;
    *(_QWORD *)&v238 = v84;
    BYTE8(v238) = v91;
    *(_QWORD *)&v239 = v92;
    BYTE8(v239) = 0;
    *(_QWORD *)&v240 = v95;
    BYTE8(v240) = v97 & 1;
    v98 = sub_100008078(&qword_100116D70, &qword_100116D10, (uint64_t)&protocol conformance descriptor for Button<A>);
    v99 = sub_10003D4F0();
    v100 = v196;
    v101 = v210;
    View.buttonStyle<A>(_:)(&v237, v210, &type metadata for CalculatorButtonStyle, v98, v99);
    sub_100007720(v92, 0);
    v102 = swift_release(v95);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v209 + 8))(v27, v101, v102);
    LOBYTE(v101) = *(_BYTE *)(v2 + 64);
    v103 = swift_getKeyPath(&unk_1000D1F40);
    v104 = swift_allocObject(&unk_10010B990, 17, 7);
    *(_BYTE *)(v104 + 16) = v101;
    v105 = v211;
    v106 = (uint64_t)v214;
    v107 = v212;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v211 + 16))(v214, v100, v212);
    v108 = v213;
    v109 = (uint64_t *)(v106 + *(int *)(v213 + 36));
    *v109 = v103;
    v109[1] = (uint64_t)sub_100075A5C;
    v109[2] = v104;
    (*(void (**)(_BYTE *, uint64_t))(v105 + 8))(v100, v107);
    v110 = 0x1000000000000;
    if (!v75)
      v110 = 0;
    v111 = 0x10000000000;
    if (!v96)
      v111 = 0;
    v112 = &_mh_execute_header;
    if (!v206)
      v112 = 0;
    v113 = 0x1000000;
    if (!v207)
      v113 = 0;
    v114 = 0x10000;
    if (!v208)
      v114 = 0;
    v115 = 256;
    if (!v193)
      v115 = 0;
    v116 = v110 | v194 | v111 | (unint64_t)v112 | v113 | v114 | v115;
    v117 = sub_10003C884(v116);
    sub_100097FF4(v117);
    v191 = 2;
    v190 = 41;
    v119 = Text.init(_:tableName:bundle:comment:)(v118);
    v121 = v120;
    v123 = v122;
    v125 = v124 & 1;
    v126 = sub_100075A64();
    v127 = (uint64_t)v215;
    View.accessibilityLabel(_:)(v119, v121, v125, v123, v108, v126);
    sub_10002DD44(v119, v121, v125);
    swift_bridgeObjectRelease(v123);
    sub_100004F48(v106, &qword_100116D20);
    v128 = sub_10003C884(v116);
    v129 = sub_1000977FC(v128);
    v131 = v130;
    v132 = v216;
    v133 = v217;
    ModifiedContent<>.accessibilityIdentifier(_:)(v129, v130, v217);
    swift_bridgeObjectRelease(v131);
    sub_100004F48(v127, &qword_100116D28);
    v134 = sub_10003C884(v116);
    v135 = (uint64_t)v132;
    if (v134 == 84)
    {
      v140 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000039, 0x80000001000D6250);
      v143 = v142;
      v145 = v144;
      v136 = v197;
      v137 = v225;
    }
    else
    {
      v136 = v197;
      v137 = v225;
      if (v134 == 83)
      {
        v139 = 0xD00000000000002CLL;
        v138 = 0x80000001000D6290;
      }
      else if (v134 == 51)
      {
        v138 = 0x80000001000D62C0;
        v139 = 0xD000000000000029;
      }
      else
      {
        v139 = 0;
        v138 = 0xE000000000000000;
      }
      v140 = LocalizedStringKey.init(stringLiteral:)(v139, v138);
      v143 = v146;
      v145 = v147;
    }
    v148 = (uint64_t)v218;
    ModifiedContent<>.accessibilityHint(_:)(v140, v143, v141 & 1, v145, v133);
    swift_bridgeObjectRelease(v145);
    swift_bridgeObjectRelease(v143);
    v149 = sub_100004F48(v135, &qword_100116D28);
    v150 = v220;
    static AccessibilityTraits.isButton.getter(v149);
    ModifiedContent<>.accessibilityRemoveTraits(_:)(v150, v133);
    v151 = v224;
    v152 = *(void (**)(_BYTE *, uint64_t))(v224 + 8);
    v152(v150, v137);
    sub_100004F48(v148, &qword_100116D28);
    v153 = sub_10003C884(v116);
    if (v153 <= 0x36u && ((1 << v153) & 0x40400008000000) != 0)
    {
      v154 = v222;
      static AccessibilityTraits.isToggle.getter();
    }
    else
    {
      v154 = v222;
      static AccessibilityTraits.isKeyboardKey.getter();
    }
    v155 = v223;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v151 + 32))(v223, v154, v137);
    v156 = (uint64_t)v219;
    v157 = (uint64_t)v234;
    ModifiedContent<>.accessibilityAddTraits(_:)(v155, v133);
    v152(v155, v137);
    sub_100004F48(v157, &qword_100116D28);
    v158 = v221;
    sub_10000531C(v156, (uint64_t)v221, &qword_100116D28);
    v159 = sub_100004F48(v156, &qword_100116D28);
    v160 = v227;
    static ContentTransition.identity.getter(v159);
    v161 = swift_getKeyPath(&unk_1000D1F70);
    v162 = (uint64_t)v226;
    v163 = (uint64_t *)&v226[*(int *)(v136 + 36)];
    v164 = sub_100005360(&qword_100116D90);
    v165 = v228;
    v166 = v229;
    (*(void (**)(char *, _BYTE *, uint64_t))(v228 + 16))((char *)v163 + *(int *)(v164 + 28), v160, v229);
    *v163 = v161;
    sub_10000531C((uint64_t)v158, v162, &qword_100116D30);
    (*(void (**)(_BYTE *, uint64_t))(v165 + 8))(v160, v166);
    v167 = sub_100004F48((uint64_t)v158, &qword_100116D30);
    v168 = v230;
    LongPressGesture.init(minimumDuration:maximumDistance:)(v167, 0.5, 10.0);
    v169 = swift_allocObject(&unk_10010B9B8, 81, 7);
    v170 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v169 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v169 + 64) = v170;
    *(_BYTE *)(v169 + 80) = *(_BYTE *)(v2 + 64);
    v171 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v169 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v169 + 32) = v171;
    sub_1000758B0(v2);
    v172 = sub_100005178(&qword_100116D98, (uint64_t (*)(uint64_t))&type metadata accessor for LongPressGesture, (uint64_t)&protocol conformance descriptor for LongPressGesture);
    v173 = v233;
    v174 = v232;
    Gesture.onEnded(_:)(sub_100075BA0, v169, v232, v172);
    v175 = swift_release(v169);
    v176 = (*(uint64_t (**)(_BYTE *, uint64_t, __n128))(v231 + 8))(v168, v174, v175);
    v177 = static GestureMask.all.getter(v176);
    v178 = sub_100075BA8();
    v179 = sub_100008078(&qword_100116DC0, &qword_100116D08, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
    v180 = v198;
    v181 = v203;
    View.simultaneousGesture<A>(_:including:)(v173, v177, v136, v203, v178, v179);
    (*(void (**)(_BYTE *, uint64_t))(v202 + 8))(v173, v181);
    sub_100004F48(v162, &qword_100116D38);
    v182 = v200;
    v183 = v199;
    v184 = v201;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v200 + 32))(v199, v180, v201);
    v185 = v205;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v182 + 16))(v205, v183, v184);
    swift_storeEnumTagMultiPayload(v185, v204, 0);
    v186 = sub_100005360(&qword_100116DC8);
    *(_QWORD *)&v237 = v136;
    *((_QWORD *)&v237 + 1) = v181;
    *(_QWORD *)&v238 = v178;
    *((_QWORD *)&v238 + 1) = v179;
    v187 = swift_getOpaqueTypeConformance2(&v237, &opaque type descriptor for <<opaque return type of View.simultaneousGesture<A>(_:including:)>>, 1);
    v188 = sub_100075CD0();
    _ConditionalContent<>.init(storage:)(v235, v185, v184, v186, v187, v188);
    return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v182 + 8))(v183, v184);
  }
}

void sub_100073F6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void (*v6)(uint64_t, _QWORD);
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  const mach_header_64 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const mach_header_64 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *oslog;
  uint64_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  sub_10003B1A4(v2, v3, v4, v5);
  v6 = (void (*)(uint64_t, _QWORD))sub_100043DDC(v2, v3, v4, v5);
  v8 = v7;
  v10 = v9;
  sub_10003B214(v2, v3, v4, v5);
  if (v6)
  {
    v11 = 0x1000000000000;
    if (!*(_BYTE *)(a1 + 47))
      v11 = 0;
    v12 = 0x10000000000;
    if (!*(_BYTE *)(a1 + 46))
      v12 = 0;
    v13 = &_mh_execute_header;
    if (!*(_BYTE *)(a1 + 45))
      v13 = 0;
    v14 = 0x1000000;
    if (!*(_BYTE *)(a1 + 44))
      v14 = 0;
    v15 = 0x10000;
    if (!*(_BYTE *)(a1 + 43))
      v15 = 0;
    v16 = 256;
    if (!*(_BYTE *)(a1 + 42))
      v16 = 0;
    v17 = sub_10003C884(v16 | *(unsigned __int8 *)(a1 + 41) | v15 | v14 | (unint64_t)v13 | v12 | v11);
    v18 = v17;
    v6(v17, 0);
    if (v10)
    {
      v19 = 3;
      if (v18 != 52)
        v19 = 1;
      if (v18 == 10)
        v20 = 6;
      else
        v20 = v19;
      objc_msgSend(v10, "actionOccurred:", v20);

    }
    swift_release(v8);
  }
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v21 = type metadata accessor for Logger(0);
  sub_100014124(v21, (uint64_t)qword_10011FEA8);
  sub_1000758B0(a1);
  v22 = sub_1000758B0(a1);
  oslog = Logger.logObject.getter(v22);
  v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v38 = v25;
    *(_DWORD *)v24 = 136380675;
    v26 = 0x1000000000000;
    if (!*(_BYTE *)(a1 + 47))
      v26 = 0;
    v27 = 0x10000000000;
    if (!*(_BYTE *)(a1 + 46))
      v27 = 0;
    v28 = &_mh_execute_header;
    if (!*(_BYTE *)(a1 + 45))
      v28 = 0;
    v29 = 0x1000000;
    if (!*(_BYTE *)(a1 + 44))
      v29 = 0;
    v30 = 0x10000;
    if (!*(_BYTE *)(a1 + 43))
      v30 = 0;
    v31 = 256;
    if (!*(_BYTE *)(a1 + 42))
      v31 = 0;
    v32 = sub_10003C884(v31 | *(unsigned __int8 *)(a1 + 41) | v30 | v29 | (unint64_t)v28 | v27 | v26);
    sub_10004FE08(0, v32);
    v34 = v33;
    v37 = sub_100029918(v35, v33, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
    swift_bridgeObjectRelease(v34);
    sub_100075D54(a1);
    sub_100075D54(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v23, "%{private}s tapped", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {
    sub_100075D54(a1);
    sub_100075D54(a1);

  }
}

__n128 sub_1000742D4@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  _OWORD v17[9];

  sub_1000743B0((uint64_t)&v13);
  v12 = v13;
  v2 = v14;
  v3 = v15;
  v4 = v16;
  v6 = static Alignment.center.getter(v5);
  sub_100035E5C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v17, 0.0, 1, INFINITY, 0, v6, v7, v12, *((uint64_t *)&v12 + 1), v2, v3 | (v4 << 8));
  v8 = v17[7];
  *(_OWORD *)(a1 + 96) = v17[6];
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v17[8];
  v9 = v17[3];
  *(_OWORD *)(a1 + 32) = v17[2];
  *(_OWORD *)(a1 + 48) = v9;
  v10 = v17[5];
  *(_OWORD *)(a1 + 64) = v17[4];
  *(_OWORD *)(a1 + 80) = v10;
  result = (__n128)v17[1];
  *(_OWORD *)a1 = v17[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

double sub_1000743B0@<D0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  const mach_header_64 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  double result;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  __int128 v27;
  __int16 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;

  v2 = v1;
  v4 = 0x1000000000000;
  if (!v1[47])
    v4 = 0;
  v5 = 0x10000000000;
  if (!v1[46])
    v5 = 0;
  v6 = &_mh_execute_header;
  if (!v1[45])
    v6 = 0;
  v7 = 0x1000000;
  if (!v1[44])
    v7 = 0;
  v8 = 0x10000;
  if (!v1[43])
    v8 = 0;
  v9 = 256;
  if (!v1[42])
    v9 = 0;
  v10 = v9 | v1[41] | v8 | v7 | (unint64_t)v6 | v5 | v4;
  sub_100074794(v10);
  v12 = v11;
  swift_bridgeObjectRelease(v11);
  if (!v12)
  {
    v15 = *(_QWORD *)v2;
    v16 = v2[8];
    v17 = swift_retain(*(_QWORD *)v2);
    v18 = sub_100043C04(v17, v16);
    swift_release(v15);
    KeyPath = swift_getKeyPath(&unk_1000D1EE8);
    *(_QWORD *)&v29 = v18;
    v20 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v29, KeyPath, v20);
    swift_release(KeyPath);
    v21 = *(unsigned __int8 *)(v18 + 16);
    swift_release(v18);
    __asm { BR              X9 }
  }
  v26 = v10;
  v13 = sub_10003D454();
  v14 = sub_100075974();
  v27 = 0uLL;
  v28 = 0;
  _ConditionalContent<>.init(storage:)(&v29, &v26, &type metadata for CalculatorButtonImage, &type metadata for CalculatorButtonText, v13, v14);
  result = *(double *)&v29;
  v23 = v30;
  v24 = v31;
  v25 = v32;
  *(_OWORD *)a1 = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_BYTE *)(a1 + 25) = v25;
  return result;
}

double sub_10007462C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  char v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  const mach_header_64 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(void **)(a2 + 32);
  v6 = *(_BYTE *)(a2 + 40);
  sub_10003B1A4(v3, v4, v5, v6);
  v7 = (void (*)(uint64_t, uint64_t))sub_100043DDC(v3, v4, v5, v6);
  v9 = v8;
  v11 = v10;
  result = sub_10003B214(v3, v4, v5, v6);
  if (v7)
  {
    v13 = 0x1000000000000;
    if (!*(_BYTE *)(a2 + 47))
      v13 = 0;
    v14 = 0x10000000000;
    if (!*(_BYTE *)(a2 + 46))
      v14 = 0;
    v15 = &_mh_execute_header;
    if (!*(_BYTE *)(a2 + 45))
      v15 = 0;
    v16 = 0x1000000;
    if (!*(_BYTE *)(a2 + 44))
      v16 = 0;
    v17 = 0x10000;
    if (!*(_BYTE *)(a2 + 43))
      v17 = 0;
    v18 = 256;
    if (!*(_BYTE *)(a2 + 42))
      v18 = 0;
    v19 = sub_10003C884(v18 | *(unsigned __int8 *)(a2 + 41) | v17 | v16 | (unint64_t)v15 | v14 | v13);
    v20 = v19;
    v7(v19, 1);
    if (v11)
    {
      v21 = 4;
      if (v20 != 52)
        v21 = 1;
      if (v20 == 10)
        v22 = 6;
      else
        v22 = v21;
      objc_msgSend(v11, "actionOccurred:", v22);

    }
    *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  }
  return result;
}

unint64_t sub_100074794(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;

  v1 = a1;
  if ((a1 & 0x10000) == 0)
    goto LABEL_11;
  if (qword_100113CC8 != -1)
    swift_once(&qword_100113CC8, sub_1000506F0);
  if (!sub_10003B98C(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
  {
LABEL_11:
    if ((v1 & 0x100) != 0)
    {
      if (qword_100113CC0 != -1)
        swift_once(&qword_100113CC0, sub_100050670);
      if (sub_10003B98C(v1, static CalculatorButtonRepresentable.shiftableButtons))
      {
        LOBYTE(v1) = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
        goto LABEL_18;
      }
    }
    if ((v1 & 0x10000FF) == 0x1000001)
      return 0x622E6574656C6564;
    if ((v1 & 0x1000000FFLL) != 0x100000002)
      goto LABEL_18;
    return 0;
  }
  if (v1 <= 0x37u && ((1 << v1) & 0x80001040000100) != 0)
    return 0;
LABEL_18:
  result = 0;
  switch((char)v1)
  {
    case 2:
      result = 0xD000000000000017;
      break;
    case 3:
      result = 0x746E6563726570;
      break;
    case 4:
      result = 0x656469766964;
      break;
    case 5:
      result = 0x796C7069746C756DLL;
      break;
    case 6:
      result = 0x73756E696DLL;
      break;
    case 7:
      result = 1937075312;
      break;
    case 8:
      result = 0x6C61757165;
      break;
    case 10:
      result = 0x74616C75636C6163;
      break;
    case 52:
      return 0x622E6574656C6564;
    default:
      return result;
  }
  return result;
}

_QWORD *sub_1000749D8@<X0>(_QWORD *a1@<X8>)
{
  return sub_100072FC8(a1);
}

_QWORD *sub_100074A18@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>, __n128 a4@<Q0>, double a5@<D1>)
{
  double v7;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  _QWORD *result;
  uint64_t v53;
  __int128 v54;
  unsigned __int8 v55;
  char v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  unsigned __int8 v59;
  unsigned __int8 v60;
  double v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v77;
  unint64_t v78;
  __n128 v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int16 v90;
  __int128 v91;
  __int128 v92;
  unsigned __int8 v93;
  char v94;

  v7 = a4.n128_f64[0];
  v10 = type metadata accessor for AttributedString(0, a4);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Font._StylisticAlternative(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1 & 0x10101010101FFLL;
  v21 = sub_10003C884(v20);
  v22 = (v21 - 33) < 5 || v21 == 2;
  v87 = a3;
  if (v22)
  {
    sub_100074E9C(v20);
    *(_QWORD *)&v91 = v23;
    *((_QWORD *)&v91 + 1) = v24;
    v25 = sub_100004F84();
    v27 = Text.init<A>(_:)(&v91, &type metadata for String, v25, v26);
    v29 = v28;
    v31 = v30;
    v33 = v32 & 1;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, enum case for Font._StylisticAlternative.nine(_:), v15);
    v86 = (id)Text._stylisticAlternative(_:)(v19, v27, v29, v33, v31);
    v35 = v34;
    v36 = v15;
    v38 = v37;
    v40 = v39 & 1;
    v41 = v27;
    a3 = v87;
    sub_10002DD44(v41, v29, v33);
    swift_bridgeObjectRelease(v31);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v36);
    v42 = (uint64_t)v86;
    *(_QWORD *)&v88 = v86;
    *((_QWORD *)&v88 + 1) = v35;
    v43 = v40;
    *(_QWORD *)&v89 = v40;
    *((_QWORD *)&v89 + 1) = v38;
    LOBYTE(v90) = 0;
    v44 = v35;
    v45 = v35;
    LOBYTE(v35) = v43;
    sub_10002DE88((uint64_t)v86, v44, v43);
    v46 = v38;
    swift_bridgeObjectRetain(v38);
    _ConditionalContent<>.init(storage:)(&v91, &v88, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
    v88 = v91;
    v89 = v92;
    v90 = v93;
    v47 = sub_100005360(&qword_100115C98);
    v48 = sub_1000522F0();
    _ConditionalContent<>.init(storage:)(&v91, &v88, v47, &type metadata for Text, v48, &protocol witness table for Text);
    v49 = v42;
    v50 = v45;
    v51 = v35;
LABEL_7:
    sub_10002DD44(v49, v50, v51);
    result = (_QWORD *)swift_bridgeObjectRelease(v46);
    goto LABEL_8;
  }
  v57 = sub_10003C884(v20);
  v58 = v57;
  if (qword_100113CD8 != -1)
    swift_once(&qword_100113CD8, sub_1000507F0);
  if (sub_10003B98C(v58, static CalculatorButtonRepresentable.attributedTitledButtons))
  {
    v59 = sub_10003C884(v20);
    v60 = sub_10003C884(v20);
    v61 = sub_1000A6974(v60, v7, a5);
    v62 = (void *)sub_100050FFC(v59, v61);
    if (v62)
    {
      v86 = v62;
      AttributedString.init(_:)();
      v63 = Text.init(_:)(v14);
      v65 = v64;
      v46 = v66;
      v68 = v67 & 1;
      *(_QWORD *)&v88 = v63;
      *((_QWORD *)&v88 + 1) = v64;
      *(_QWORD *)&v89 = v67 & 1;
      *((_QWORD *)&v89 + 1) = v66;
      LOBYTE(v90) = 1;
      sub_10002DE88(v63, v64, v67 & 1);
      swift_bridgeObjectRetain(v46);
      _ConditionalContent<>.init(storage:)(&v91, &v88, &type metadata for Text, &type metadata for Text, &protocol witness table for Text, &protocol witness table for Text);
      v70 = *((_QWORD *)&v91 + 1);
      v69 = v91;
      v71 = v92;
      v88 = v91;
      v89 = v92;
      v90 = v93;
      sub_10003AF68(v91, *((uint64_t *)&v91 + 1), v92, *((uint64_t *)&v92 + 1));
      v72 = sub_100005360(&qword_100115C98);
      v73 = sub_1000522F0();
      _ConditionalContent<>.init(storage:)(&v91, &v88, v72, &type metadata for Text, v73, &protocol witness table for Text);

      v74 = v69;
      a3 = v87;
      sub_1000520FC(v74, v70, v71, *((uint64_t *)&v71 + 1));
      v49 = v63;
      v50 = v65;
      v51 = v68;
      goto LABEL_7;
    }
  }
  if ((a2 & 1) != 0)
  {
    sub_10003C884(v20);
    v77 = CalculatorButtonRepresentable.stringValue()();
    object = v77._object;
    countAndFlagsBits = v77._countAndFlagsBits;
  }
  else
  {
    sub_100074E9C(v20);
  }
  *(_QWORD *)&v91 = countAndFlagsBits;
  *((_QWORD *)&v91 + 1) = object;
  v78 = sub_100004F84();
  *(_QWORD *)&v88 = Text.init<A>(_:)(&v91, &type metadata for String, v78, v79);
  *((_QWORD *)&v88 + 1) = v81;
  *(_QWORD *)&v89 = v80 & 1;
  *((_QWORD *)&v89 + 1) = v82;
  v90 = 256;
  v83 = sub_100005360(&qword_100115C98);
  v84 = sub_1000522F0();
  result = _ConditionalContent<>.init(storage:)(&v91, &v88, v83, &type metadata for Text, v84, &protocol witness table for Text);
LABEL_8:
  v53 = *((_QWORD *)&v91 + 1);
  v54 = v92;
  v55 = v93;
  v56 = v94;
  *(_QWORD *)a3 = v91;
  *(_QWORD *)(a3 + 8) = v53;
  *(_OWORD *)(a3 + 16) = v54;
  *(_BYTE *)(a3 + 32) = v55;
  *(_BYTE *)(a3 + 33) = v56;
  return result;
}

void sub_100074E9C(uint64_t a1)
{
  Calculator::CalculatorButtonRepresentable v2;
  char v3;

  v2 = (char)a1;
  if ((a1 & 0x10000) == 0)
    goto LABEL_12;
  if (qword_100113CC8 != -1)
    swift_once(&qword_100113CC8, sub_1000506F0);
  if (sub_10003B98C(v2, static CalculatorButtonRepresentable.alternateRPNButtons))
  {
    if (v2 > Calculator_CalculatorButtonRepresentable_cubeRoot)
    {
      if (v2 == Calculator_CalculatorButtonRepresentable_root)
      {
        v2 = Calculator_CalculatorButtonRepresentable_xRoot;
      }
      else if (v2 == Calculator_CalculatorButtonRepresentable_exponentialBaseY)
      {
        v2 = Calculator_CalculatorButtonRepresentable_power;
      }
    }
    else if (v2 == Calculator_CalculatorButtonRepresentable_equals)
    {
      v2 = Calculator_CalculatorButtonRepresentable_enter;
    }
    else if (v2 == Calculator_CalculatorButtonRepresentable_power)
    {
      v2 = Calculator_CalculatorButtonRepresentable_exponentialBaseY;
    }
  }
  else
  {
    if ((a1 & 0x100) == 0)
      goto LABEL_14;
LABEL_12:
    if (qword_100113CC0 != -1)
      swift_once(&qword_100113CC0, sub_100050670);
    if (sub_10003B98C(v2, static CalculatorButtonRepresentable.shiftableButtons))
    {
      v2 = CalculatorButtonRepresentable.shiftedButton(isRPN:)(a1 & 0x10000);
    }
    else
    {
LABEL_14:
      if ((a1 & 0x1000000FFLL) == 0x100000002)
        v3 = 34;
      else
        v3 = v2;
      if ((a1 & 0x10000FF) == 0x1000001)
        v2 = Calculator_CalculatorButtonRepresentable_delete;
      else
        v2 = v3;
    }
  }
  sub_10004FE08((a1 & 0x1000000FFLL) == 0x100000002, v2);
}

double sub_100074FF8@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const mach_header_64 *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  double result;
  __int128 v15;
  _OWORD v16[2];
  char v17;
  char v18;

  v4 = 256;
  if (!v2[1])
    v4 = 0;
  v5 = v4 | *v2;
  v6 = 0x10000;
  if (!v2[2])
    v6 = 0;
  v7 = 0x1000000;
  if (!v2[3])
    v7 = 0;
  v8 = v5 | v6 | v7;
  v9 = &_mh_execute_header;
  if (!v2[4])
    v9 = 0;
  v10 = 0x10000000000;
  if (!v2[5])
    v10 = 0;
  v11 = 0x1000000000000;
  if (!v2[6])
    v11 = 0;
  a2.n128_u64[0] = *((_QWORD *)v2 + 1);
  sub_100074A18(v8 | (unint64_t)v9 | v10 | v11, v2[24], (uint64_t)v16, a2, *((double *)v2 + 2));
  v12 = v17;
  v13 = v18;
  result = *(double *)v16;
  v15 = v16[1];
  *(_OWORD *)a1 = v16[0];
  *(_OWORD *)(a1 + 16) = v15;
  *(_BYTE *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 33) = v13;
  return result;
}

uint64_t sub_1000750C0(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = a1;
  if ((a1 & 0x10000) != 0)
  {
    if (qword_100113CC8 != -1)
      swift_once(&qword_100113CC8, sub_1000506F0);
    if (sub_10003B98C(v1, static CalculatorButtonRepresentable.alternateRPNButtons))
    {
      if (v1 > 0x37u || ((1 << v1) & 0x80001040000100) == 0)
        goto LABEL_15;
LABEL_7:
      __break(1u);
    }
  }
  if ((v1 & 0x100) != 0)
  {
    if (qword_100113CC0 != -1)
      swift_once(&qword_100113CC0, sub_100050670);
    if (sub_10003B98C(v1, static CalculatorButtonRepresentable.shiftableButtons))
    {
      v1 = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v1 & 0x10000);
      goto LABEL_15;
    }
  }
  if ((v1 & 0x10000FF) != 0x1000001)
  {
    if ((v1 & 0x1000000FFLL) == 0x100000002)
    {
      __break(1u);
      JUMPOUT(0x1000752E8);
    }
LABEL_15:
    v2 = 0xE400000000000000;
    v3 = 1937075312;
    switch((char)v1)
    {
      case 2:
        v2 = 0x80000001000D6FF0;
        v3 = 0xD000000000000017;
        return Image.init(_internalSystemName:)(v3, v2);
      case 3:
        v2 = 0xE700000000000000;
        v3 = 0x746E6563726570;
        return Image.init(_internalSystemName:)(v3, v2);
      case 4:
        v2 = 0xE600000000000000;
        v3 = 0x656469766964;
        return Image.init(_internalSystemName:)(v3, v2);
      case 5:
        v2 = 0xE800000000000000;
        v3 = 0x796C7069746C756DLL;
        return Image.init(_internalSystemName:)(v3, v2);
      case 6:
        v2 = 0xE500000000000000;
        v3 = 0x73756E696DLL;
        return Image.init(_internalSystemName:)(v3, v2);
      case 7:
        return Image.init(_internalSystemName:)(v3, v2);
      case 8:
        v2 = 0xE500000000000000;
        v3 = 0x6C61757165;
        return Image.init(_internalSystemName:)(v3, v2);
      case 10:
        v2 = 0xEF6C6C69662E726FLL;
        v3 = 0x74616C75636C6163;
        return Image.init(_internalSystemName:)(v3, v2);
      case 52:
        break;
      default:
        goto LABEL_7;
    }
  }
  v2 = 0xEF647261776B6361;
  v3 = 0x622E6574656C6564;
  return Image.init(_internalSystemName:)(v3, v2);
}

uint64_t sub_1000753B4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  const mach_header_64 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = 0x1000000000000;
  if (!v1[6])
    v3 = 0;
  v4 = 0x10000000000;
  if (!v1[5])
    v4 = 0;
  v5 = &_mh_execute_header;
  if (!v1[4])
    v5 = 0;
  v6 = 0x1000000;
  if (!v1[3])
    v6 = 0;
  v7 = 0x10000;
  if (!v1[2])
    v7 = 0;
  v8 = 256;
  if (!v1[1])
    v8 = 0;
  result = sub_1000750C0(v8 | *v1 | v7 | v6 | (unint64_t)v5 | v4 | v3);
  *(_QWORD *)a1 = 0x4000000000000000;
  *(_QWORD *)(a1 + 8) = result;
  *(_WORD *)(a1 + 16) = 0;
  return result;
}

double destroy for CalculatorButtonView(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  return sub_10003B214(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_BYTE *)(a1 + 40));
}

uint64_t initializeWithCopy for CalculatorButtonView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = (void *)a2[4];
  v9 = *((_BYTE *)a2 + 40);
  swift_retain(v4);
  sub_10003B1A4(v6, v7, v8, v9);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v9;
  *(_DWORD *)(a1 + 41) = *(_DWORD *)((char *)a2 + 41);
  *(_DWORD *)(a1 + 44) = *((_DWORD *)a2 + 11);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t *assignWithCopy for CalculatorButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = a2[3];
  v9 = (void *)a2[4];
  v10 = *((_BYTE *)a2 + 40);
  sub_10003B1A4(v7, v8, v9, v10);
  v11 = a1[2];
  v12 = a1[3];
  v13 = (void *)a1[4];
  v14 = *((_BYTE *)a1 + 40);
  a1[2] = v7;
  a1[3] = v8;
  a1[4] = (uint64_t)v9;
  *((_BYTE *)a1 + 40) = v10;
  sub_10003B214(v11, v12, v13, v14);
  *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a1 + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a1 + 43) = *((_BYTE *)a2 + 43);
  *((_BYTE *)a1 + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a1 + 45) = *((_BYTE *)a2 + 45);
  *((_BYTE *)a1 + 46) = *((_BYTE *)a2 + 46);
  *((_BYTE *)a1 + 47) = *((_BYTE *)a2 + 47);
  a1[6] = a2[6];
  a1[7] = a2[7];
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

__n128 initializeWithTake for CalculatorButtonView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for CalculatorButtonView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = a2[4];
  v7 = *((_BYTE *)a2 + 40);
  v8 = a1[2];
  v9 = a1[3];
  v10 = (void *)a1[4];
  v11 = *((_BYTE *)a1 + 40);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = v6;
  *((_BYTE *)a1 + 40) = v7;
  sub_10003B214(v8, v9, v10, v11);
  *((_BYTE *)a1 + 41) = *((_BYTE *)a2 + 41);
  *((_BYTE *)a1 + 42) = *((_BYTE *)a2 + 42);
  *((_BYTE *)a1 + 43) = *((_BYTE *)a2 + 43);
  *((_BYTE *)a1 + 44) = *((_BYTE *)a2 + 44);
  *((_BYTE *)a1 + 45) = *((_BYTE *)a2 + 45);
  *((_BYTE *)a1 + 46) = *((_BYTE *)a2 + 46);
  *((_BYTE *)a1 + 47) = *((_BYTE *)a2 + 47);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorButtonView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorButtonView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorButtonView()
{
  return &type metadata for CalculatorButtonView;
}

unint64_t sub_100075784()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116CC0;
  if (!qword_100116CC0)
  {
    v1 = sub_100005608(&qword_100116CC8);
    sub_100075808();
    sub_100008078(&qword_100116CF0, &qword_100116CF8, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116CC0);
  }
  return result;
}

unint64_t sub_100075808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116CD0;
  if (!qword_100116CD0)
  {
    v1 = sub_100005608(&qword_100116CD8);
    sub_100008078(&qword_100116CE0, &qword_100116CE8, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116CD0);
  }
  return result;
}

uint64_t sub_10007588C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F6784, 1);
}

void sub_1000758A0()
{
  uint64_t v0;

  sub_100073F6C(v0 + 16);
}

double sub_1000758A8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1000742D4(a1).n128_u64[0];
  return result;
}

uint64_t sub_1000758B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_retain(*(_QWORD *)a1);
  sub_10003B1A4(v2, v3, v4, v5);
  return a1;
}

unint64_t sub_100075908()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116D58;
  if (!qword_100116D58)
  {
    v1 = sub_100005608(&qword_100116D60);
    sub_10003D454();
    sub_100075974();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116D58);
  }
  return result;
}

unint64_t sub_100075974()
{
  unint64_t result;

  result = qword_100116D68;
  if (!qword_100116D68)
  {
    result = swift_getWitnessTable(&unk_1000D1FB8, &type metadata for CalculatorButtonText);
    atomic_store(result, (unint64_t *)&qword_100116D68);
  }
  return result;
}

uint64_t sub_1000759C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for ContentTransition(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v6 + 16))(v5, a1);
  return EnvironmentValues.contentTransition.setter(v5);
}

uint64_t sub_100075A4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_100075A5C(_BYTE *a1)
{
  uint64_t v1;

  return sub_1000C41D8(a1, *(_BYTE *)(v1 + 16));
}

unint64_t sub_100075A64()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100116D78;
  if (!qword_100116D78)
  {
    v1 = sub_100005608(&qword_100116D20);
    v2[0] = sub_100005608(&qword_100116D10);
    v2[1] = &type metadata for CalculatorButtonStyle;
    v2[2] = sub_100008078(&qword_100116D70, &qword_100116D10, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_10003D4F0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_100008078(&qword_100116D80, &qword_100116D88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116D78);
  }
  return result;
}

uint64_t sub_100075B44()
{
  return EnvironmentValues.contentTransition.getter();
}

uint64_t sub_100075B6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10003B214(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject(v0, 81, 7);
}

double sub_100075BA0(uint64_t a1)
{
  uint64_t v1;

  return sub_10007462C(a1, v1 + 16);
}

unint64_t sub_100075BA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116DA0;
  if (!qword_100116DA0)
  {
    v1 = sub_100005608(&qword_100116D38);
    sub_10003D3C8(&qword_100116DA8, &qword_100116D30, (void (*)(void))sub_100075C4C);
    sub_100008078(&qword_100116DB8, &qword_100116D90, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116DA0);
  }
  return result;
}

unint64_t sub_100075C4C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116DB0;
  if (!qword_100116DB0)
  {
    v1 = sub_100005608(&qword_100116D28);
    sub_100075A64();
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116DB0);
  }
  return result;
}

unint64_t sub_100075CD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116DD0;
  if (!qword_100116DD0)
  {
    v1 = sub_100005608(&qword_100116DC8);
    sub_100008078(&qword_100116DD8, &qword_100116DE0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116DD0);
  }
  return result;
}

uint64_t sub_100075D54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(void **)(a1 + 32);
  v5 = *(_BYTE *)(a1 + 40);
  swift_release(*(_QWORD *)a1);
  sub_10003B214(v2, v3, v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorButtonText(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorButtonText(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorButtonText()
{
  return &type metadata for CalculatorButtonText;
}

unint64_t sub_100075E5C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100116DE8;
  if (!qword_100116DE8)
  {
    v1 = sub_100005608(&qword_100116DF0);
    v2[0] = sub_100005608(&qword_100116D38);
    v2[1] = sub_100005608(&qword_100116D08);
    v2[2] = sub_100075BA8();
    v2[3] = sub_100008078(&qword_100116DC0, &qword_100116D08, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.simultaneousGesture<A>(_:including:)>>, 1);
    sub_100075CD0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116DE8);
  }
  return result;
}

uint64_t sub_100075F34(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F67AC, 1);
}

unint64_t sub_100075F48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116DF8;
  if (!qword_100116DF8)
  {
    v1 = sub_100005608(&qword_100116E00);
    sub_100075FAC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> Group<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100116DF8);
  }
  return result;
}

unint64_t sub_100075FAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116E08;
  if (!qword_100116E08)
  {
    v1 = sub_100005608(&qword_100116E10);
    sub_1000522F0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116E08);
  }
  return result;
}

void sub_10007601C(uint64_t a1, char a2)
{
  uint64_t v3;
  id v4;

  if (*(_QWORD *)a1)
  {
    if ((a2 & 1) != 0)
    {
      if (qword_100113ED0 != -1)
        swift_once(&qword_100113ED0, sub_1000A5238);
      v3 = qword_10011FE78;
      v4 = (id)qword_10011FE78;
    }
    else
    {
      v3 = 0;
    }

    *(_QWORD *)(a1 + 16) = v3;
  }
}

ValueMetadata *type metadata accessor for CalculatorKeypadButton()
{
  return &type metadata for CalculatorKeypadButton;
}

uint64_t sub_10007609C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  double (**v44)();
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t OpaqueTypeConformance2;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  unint64_t v89;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  unint64_t v109;
  void *v110;
  __int128 v111;
  uint64_t v112;

  v106 = a2;
  v3 = sub_100005360(&qword_100116E20);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = sub_100005360(&qword_100116E28);
  __chkstk_darwin(v91, v7);
  v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100005360(&qword_100116E30);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95, v10);
  v92 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100005360(&qword_100116E38);
  __chkstk_darwin(v93, v12);
  v107 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100005360(&qword_100116E40);
  v101 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v14);
  v96 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_100116E48);
  v102 = *(_QWORD *)(v16 - 8);
  v103 = v16;
  __chkstk_darwin(v16, v17);
  v97 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_100005360(&qword_100116E50);
  __chkstk_darwin(v100, v19);
  v98 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = sub_100005360(&qword_100116E58);
  __chkstk_darwin(v105, v21);
  v104 = (uint64_t)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000770D8((uint64_t)v6);
  v23 = static Animation.spring(response:dampingFraction:blendDuration:)(0.4, 0.8, 0.5);
  v111 = *(_OWORD *)(a1 + 7);
  v108 = *(_OWORD *)(a1 + 7);
  v24 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v112, v24);
  v25 = v112;
  KeyPath = swift_getKeyPath(&unk_1000D2118);
  *(_QWORD *)&v108 = v25;
  v27 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v108, KeyPath, v27);
  swift_release(KeyPath);
  LOBYTE(KeyPath) = *(_BYTE *)(v25 + 16);
  swift_release(v25);
  sub_10000531C((uint64_t)v6, (uint64_t)v9, &qword_100116E20);
  v28 = v91;
  v29 = &v9[*(int *)(v91 + 36)];
  *(_QWORD *)v29 = v23;
  v29[8] = KeyPath;
  sub_100004F48((uint64_t)v6, &qword_100116E20);
  v108 = v111;
  State.wrappedValue.getter(&v112, v24);
  v30 = v112;
  v31 = type metadata accessor for CalculatorKeypadViewModel(0);
  v32 = sub_10007A1D0();
  v33 = v92;
  View.environment<A>(_:)(v30, v28, v31, v32, v27);
  swift_release(v30);
  sub_100004F48((uint64_t)v9, &qword_100116E28);
  v34 = swift_allocObject(&unk_10010BD00, 136, 7);
  v35 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v34 + 80) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(v34 + 96) = v35;
  *(_OWORD *)(v34 + 112) = *((_OWORD *)a1 + 6);
  *(_QWORD *)(v34 + 128) = a1[14];
  v36 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v34 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v34 + 32) = v36;
  v37 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v34 + 48) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v34 + 64) = v37;
  v38 = v94;
  v39 = v107;
  v40 = v33;
  v41 = v33;
  v42 = v95;
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v107, v40, v95);
  v43 = v93;
  v44 = (double (**)())&v39[*(int *)(v93 + 36)];
  *v44 = sub_10007A3DC;
  v44[1] = (double (*)())v34;
  v44[2] = 0;
  v44[3] = 0;
  sub_10006D6E8(a1);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v41, v42);
  v45 = *a1;
  LOBYTE(v42) = *((_BYTE *)a1 + 8);
  v46 = swift_retain(*a1);
  v47 = sub_100043890(v46, v42);
  swift_release(v45);
  v48 = swift_getKeyPath(&unk_1000D2140);
  *(_QWORD *)&v108 = v47;
  v49 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v108, v48, v49);
  swift_release(v48);
  LOBYTE(v39) = *(_BYTE *)(v47 + 50);
  swift_release(v47);
  LOBYTE(v108) = (_BYTE)v39;
  v50 = swift_allocObject(&unk_10010BD28, 136, 7);
  v51 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v50 + 80) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(v50 + 96) = v51;
  *(_OWORD *)(v50 + 112) = *((_OWORD *)a1 + 6);
  *(_QWORD *)(v50 + 128) = a1[14];
  v52 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v50 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v50 + 32) = v52;
  v53 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v50 + 48) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v50 + 64) = v53;
  sub_10006D6E8(a1);
  v54 = sub_10007A3F8();
  v55 = v96;
  v56 = (uint64_t)v107;
  View.onChange<A>(of:initial:_:)(&v108, 0, sub_10007A3F0, v50, v43, &type metadata for Bool, v54, &protocol witness table for Bool);
  swift_release(v50);
  sub_100004F48(v56, &qword_100116E38);
  v57 = swift_retain(v45);
  v58 = sub_100043890(v57, v42);
  swift_release(v45);
  v59 = swift_getKeyPath(&unk_1000D2168);
  *(_QWORD *)&v108 = v58;
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v108, v59, v49);
  swift_release(v59);
  LOBYTE(v59) = *(_BYTE *)(v58 + 48);
  swift_release(v58);
  LOBYTE(v112) = v59;
  v60 = swift_allocObject(&unk_10010BD50, 136, 7);
  v61 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v60 + 80) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(v60 + 96) = v61;
  *(_OWORD *)(v60 + 112) = *((_OWORD *)a1 + 6);
  *(_QWORD *)(v60 + 128) = a1[14];
  v62 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v60 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v60 + 32) = v62;
  v63 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v60 + 48) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v60 + 64) = v63;
  sub_10006D6E8(a1);
  *(_QWORD *)&v108 = v43;
  *((_QWORD *)&v108 + 1) = &type metadata for Bool;
  v109 = v54;
  v110 = &protocol witness table for Bool;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v108, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v65 = sub_100049B04();
  v66 = v97;
  v67 = v99;
  View.onChange<A>(of:initial:_:)(&v112, 0, sub_10007A4DC, v60, v99, &type metadata for CalculatorAppMode, OpaqueTypeConformance2, v65);
  v68 = swift_release(v60);
  (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v55, v67, v68);
  v69 = swift_getKeyPath(&unk_1000D2190);
  v70 = swift_allocObject(&unk_10010BD78, 17, 7);
  *(_BYTE *)(v70 + 16) = 1;
  v72 = v102;
  v71 = v103;
  v73 = (uint64_t)v98;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v98, v66, v103);
  v74 = (uint64_t *)(v73 + *(int *)(v100 + 36));
  *v74 = v69;
  v74[1] = (uint64_t)sub_100007BC4;
  v74[2] = v70;
  (*(void (**)(char *, uint64_t))(v72 + 8))(v66, v71);
  v75 = swift_allocObject(&unk_10010BDA0, 136, 7);
  v76 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v75 + 80) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(v75 + 96) = v76;
  *(_OWORD *)(v75 + 112) = *((_OWORD *)a1 + 6);
  *(_QWORD *)(v75 + 128) = a1[14];
  v77 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v75 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v75 + 32) = v77;
  v78 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v75 + 48) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v75 + 64) = v78;
  v79 = swift_getKeyPath(&unk_1000D2190);
  v80 = v104;
  sub_10000531C(v73, v104, &qword_100116E50);
  v81 = v105;
  v82 = (uint64_t *)(v80 + *(int *)(v105 + 36));
  *v82 = v79;
  v82[1] = (uint64_t)sub_10007A500;
  v82[2] = v75;
  v82[3] = 0;
  sub_10006D6E8(a1);
  v83 = sub_100004F48(v73, &qword_100116E50);
  v84 = static EventModifiers.shift.getter(v83);
  v85 = swift_allocObject(&unk_10010BDC8, 136, 7);
  v86 = *((_OWORD *)a1 + 5);
  *(_OWORD *)(v85 + 80) = *((_OWORD *)a1 + 4);
  *(_OWORD *)(v85 + 96) = v86;
  *(_OWORD *)(v85 + 112) = *((_OWORD *)a1 + 6);
  *(_QWORD *)(v85 + 128) = a1[14];
  v87 = *((_OWORD *)a1 + 1);
  *(_OWORD *)(v85 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v85 + 32) = v87;
  v88 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v85 + 48) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v85 + 64) = v88;
  sub_10006D6E8(a1);
  v89 = sub_10007A52C();
  View._onModifierKeysChanged(mask:initial:_:)(v84, 1, sub_10007A524, v85, v81, v89);
  swift_release(v85);
  return sub_100004F48(v80, &qword_100116E58);
}

double sub_10007690C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  char v23;
  __int128 v24;
  uint64_t v25;

  v24 = *(_OWORD *)(a1 + 7);
  v2 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v25, v2);
  v3 = v25;
  KeyPath = swift_getKeyPath(&unk_1000D2230);
  *(_QWORD *)&v24 = v3;
  v5 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(unsigned __int8 *)(v3 + 18);
  swift_release(v3);
  v7 = *a1;
  v8 = *((_BYTE *)a1 + 8);
  v9 = swift_retain(*a1);
  v10 = sub_100043890(v9, v8);
  swift_release(v7);
  v11 = swift_getKeyPath(&unk_1000D2140);
  *(_QWORD *)&v24 = v10;
  v12 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v11, v12);
  swift_release(v11);
  v13 = *(unsigned __int8 *)(v10 + 50);
  *(_QWORD *)&result = swift_release(v10).n128_u64[0];
  if (v6 != v13)
  {
    v24 = *(_OWORD *)(a1 + 7);
    State.wrappedValue.getter(&v25, v2);
    v15 = v25;
    v16 = swift_retain(v7);
    v17 = sub_100043890(v16, v8);
    swift_release(v7);
    v18 = swift_getKeyPath(&unk_1000D2140);
    *(_QWORD *)&v24 = v17;
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, v18, v12);
    swift_release(v18);
    v19 = *(_BYTE *)(v17 + 50);
    swift_release(v17);
    v20 = swift_getKeyPath(&unk_1000D2230);
    __chkstk_darwin(v20, v21);
    v22[2] = v15;
    v23 = v19;
    *(_QWORD *)&v24 = v15;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v24, v20, sub_10007AC9C, v22, (char *)&type metadata for () + 8, v5);
    swift_release(v15);
    *(_QWORD *)&result = swift_release(v20).n128_u64[0];
  }
  return result;
}

double sub_100076B70(uint64_t a1, char *a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  double result;
  _QWORD v9[3];
  char v10;
  __int128 v11;
  uint64_t v12;

  v3 = *a2;
  v11 = *(_OWORD *)(a3 + 56);
  v4 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v12, v4);
  v5 = v12;
  KeyPath = swift_getKeyPath(&unk_1000D2230);
  v9[2] = v5;
  v10 = v3;
  *(_QWORD *)&v11 = v5;
  v7 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v11, KeyPath, sub_10007A6D4, v9, (char *)&type metadata for () + 8, v7);
  swift_release(v5);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_100076C40(uint64_t a1, char *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;

  v2 = *a2;
  v3 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v6, v3);
  v4 = v6;
  sub_100089C34(v2);
  *(_QWORD *)&result = swift_release(v4).n128_u64[0];
  return result;
}

double sub_100076C98(char a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  double result;
  NSObject *v17;

  v3 = v2;
  v6 = *v2;
  v7 = *((_BYTE *)v3 + 8);
  v8 = swift_retain(v6);
  v9 = sub_100043890(v8, v7);
  swift_release(v6);
  v10 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v17, v10);
  v11 = v17;
  v12 = v3[2];
  LOBYTE(v3) = *((_BYTE *)v3 + 24);
  v13 = swift_retain(v12);
  v14 = sub_1000439B4(v13, (char)v3);
  swift_release(v12);
  v15 = sub_10004835C();
  swift_release(v14);
  sub_100023790(a1, a2, v11, v15);
  swift_release(v9);
  swift_release(v11);
  *(_QWORD *)&result = swift_release(v15).n128_u64[0];
  return result;
}

void sub_100076D8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)();
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[2];

  v5 = static EventModifiers.shift.getter();
  v6 = EventModifiers.init(rawValue:)(v5);
  v7 = EventModifiers.init(rawValue:)(v6 & a2);
  v8 = *a3;
  v9 = *((_BYTE *)a3 + 8);
  if (v7 != v5)
    goto LABEL_3;
  v10 = swift_retain(*a3);
  v11 = sub_100043890(v10, v9);
  swift_release(v8);
  KeyPath = swift_getKeyPath(&unk_1000D21E0);
  *(_QWORD *)&v39[0] = v11;
  v13 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v39, KeyPath, v13);
  swift_release(KeyPath);
  v14 = *(unsigned __int8 *)(v11 + 52);
  swift_release(v11);
  if (v14 == 3)
  {
LABEL_3:
    v15 = swift_retain(v8);
    v16 = sub_100043890(v15, v9);
    swift_release(v8);
    sub_100027C44(0x1Bu);
    swift_release(v16);
    v39[0] = *(_OWORD *)(a3 + 7);
    v17 = sub_100005360(&qword_100116E60);
    State.wrappedValue.getter(&v37, v17);
    v18 = v37;
    v19 = swift_getKeyPath(&unk_1000D21B8);
    __chkstk_darwin(v19, v20);
    v35 = v18;
    v36 = 0;
    *(_QWORD *)&v39[0] = v18;
    v21 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
    v22 = (char *)&type metadata for () + 8;
    v23 = sub_1000438D0;
    v24 = v39;
LABEL_4:
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v24, v19, v23, &v34, v22, v21);
    swift_release(v18);
    swift_release(v19);
    return;
  }
  v25 = swift_retain(v8);
  v26 = sub_100043890(v25, v9);
  swift_release(v8);
  v27 = swift_getKeyPath(&unk_1000D2208);
  *(_QWORD *)&v39[0] = v26;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v39, v27, v13);
  swift_release(v27);
  swift_beginAccess(v26 + 80, v39, 0, 0);
  v28 = *(_QWORD *)(v26 + 80);
  swift_bridgeObjectRetain(v28);
  swift_release(v26);
  v29 = sub_100094674(27, v28);
  swift_bridgeObjectRelease(v28);
  if (!v29)
  {
    v30 = swift_retain(v8);
    v31 = sub_100043890(v30, v9);
    swift_release(v8);
    sub_100027ABC(27);
    swift_release(v31);
    v37 = *(_OWORD *)(a3 + 7);
    v32 = sub_100005360(&qword_100116E60);
    State.wrappedValue.getter(&v38, v32);
    v18 = v38;
    v19 = swift_getKeyPath(&unk_1000D21B8);
    __chkstk_darwin(v19, v33);
    v35 = v18;
    v36 = 1;
    *(_QWORD *)&v37 = v18;
    v21 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
    v22 = (char *)&type metadata for () + 8;
    v23 = sub_10004671C;
    v24 = &v37;
    goto LABEL_4;
  }
}

void sub_1000770D8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  _QWORD v12[8];
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;

  v17 = a1;
  v16 = sub_100005360(&qword_100116EC0);
  __chkstk_darwin(v16, v2);
  v12[1] = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100005360(&qword_100116F10);
  __chkstk_darwin(v13, v4);
  v15 = (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360(&qword_100116E80);
  __chkstk_darwin(v14, v6);
  v12[0] = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *(_OWORD *)(v1 + 56);
  v8 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v20, v8);
  v9 = v20;
  KeyPath = swift_getKeyPath(&unk_1000D2118);
  *(_QWORD *)&v19 = v9;
  v18 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v19, KeyPath, v18);
  swift_release(KeyPath);
  v11 = *(unsigned __int8 *)(v9 + 16);
  swift_release(v9);
  __asm { BR              X10 }
}

uint64_t sub_10007728C()
{
  uint64_t v0;
  _OWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t (*v21)(uint64_t, __n128);

  *(_DWORD *)(v3 - 176) = _stringCompareWithSmolCheck(_:_:expecting:)(0x657061506874616DLL, 0xE900000000000072, 0x6669746E65696373, 0xEA00000000006369, 0);
  swift_bridgeObjectRelease(0xE900000000000072);
  *(_OWORD *)(v3 - 112) = *v1;
  State.wrappedValue.getter((_QWORD *)(v3 - 88), v0);
  v4 = v2[4];
  v5 = *((unsigned __int8 *)v2 + 40);
  v6 = swift_retain(v4);
  *(_DWORD *)(v3 - 172) = v5;
  *(_QWORD *)(v3 - 184) = sub_1000436BC(v6, v5);
  swift_release(v4);
  *(_QWORD *)(v3 - 208) = v0;
  v7 = v1;
  v8 = *v2;
  v9 = *((_BYTE *)v2 + 8);
  v10 = swift_retain(*v2);
  *(_QWORD *)(v3 - 192) = sub_100043890(v10, v9);
  v11 = sub_100043890(v8, v9);
  swift_release(v8);
  v12 = *(_QWORD *)(v11 + 16);
  KeyPath = swift_getKeyPath(&unk_1000D2258);
  *(_QWORD *)(v3 - 112) = v12;
  v14 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v3 - 112, KeyPath, v14);
  swift_release(KeyPath);
  v15 = *(_QWORD *)(v12 + 24);
  v16 = swift_retain(v15);
  CalculateExpression.format.getter(v16);
  swift_release(v11);
  swift_release(v15);
  *(_OWORD *)(v3 - 112) = *v7;
  State.wrappedValue.getter((_QWORD *)(v3 - 88), *(_QWORD *)(v3 - 208));
  v17 = *(_QWORD *)(v3 - 88);
  v18 = swift_getKeyPath(&unk_1000D2118);
  *(_QWORD *)(v3 - 112) = v17;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v3 - 112, v18, *(_QWORD *)(v3 - 120));
  swift_release(v18);
  v19 = *(unsigned __int8 *)(v17 + 16);
  v20 = swift_release(v17);
  v21 = (uint64_t (*)(uint64_t, __n128))((char *)sub_100077488 + 4 * byte_1000D2094[v19]);
  *(_QWORD *)(v3 - 168) = v2;
  *(_QWORD *)(v3 - 200) = v4;
  return v21(0x6669746E65696373, v20);
}

uint64_t sub_100077488()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  swift_bridgeObjectRelease(0xE500000000000000);
  v5 = swift_retain(v1);
  v6 = sub_100043890(v5, v0);
  swift_release(v1);
  KeyPath = swift_getKeyPath(&unk_1000D2280);
  *(_QWORD *)(v4 - 112) = v6;
  v8 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 - 112, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(id *)(v6 + 40);
  swift_release(v6);
  v10 = swift_getKeyPath(&unk_1000D22A8);
  *(_QWORD *)(v4 - 112) = v9;
  v11 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 - 112, v10, v11);
  swift_release(v10);
  LOBYTE(v10) = v9[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isSquareRootOnBasicCalculatorForced];

  LOBYTE(v9) = v3 == 2;
  v12 = swift_getKeyPath(&unk_1000D21B8);
  *(_QWORD *)(v4 - 112) = v2;
  v13 = *(_QWORD *)(v4 - 120);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 - 112, v12, v13);
  swift_release(v12);
  LOBYTE(v12) = *(_BYTE *)(v2 + 17);
  v14 = *(_QWORD *)(v4 - 192);
  v15 = sub_1000AC150();
  v16 = swift_retain(v15);
  v17 = CalculateExpression.assumeDegrees.getter(v16);
  swift_release(v15);
  v18 = swift_getKeyPath(&unk_1000D2230);
  *(_QWORD *)(v4 - 112) = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4 - 112, v18, v13);
  swift_release(v18);
  LOBYTE(v18) = *(_BYTE *)(v2 + 18);
  v19 = sub_10008A254(v14);
  v20 = *(_DWORD *)(v4 - 176) & 1;
  v21 = *(_QWORD *)(v4 - 184);
  v22 = sub_100068188(v21, v12, v17 & 1, (char)v9, v18, v10, (uint64_t)v19, v20);
  v24 = v23;
  swift_release(v2);
  swift_release(v21);
  swift_release(v14);
  swift_bridgeObjectRelease(v19);
  v25 = *(_QWORD *)(v4 - 200);
  v26 = swift_retain(v25);
  v27 = sub_1000436BC(v26, *(_DWORD *)(v4 - 172));
  swift_release(v25);
  LOBYTE(v25) = sub_100009ED0();
  swift_release(v27);
  if ((v25 & 1) != 0)
  {
    v28 = *(_QWORD *)(v4 - 216);
    sub_100077CD8();
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v24);
    v29 = &qword_100116EC0;
    v30 = *(_QWORD *)(v4 - 144);
    sub_10000531C(v28, v30, &qword_100116EC0);
    swift_storeEnumTagMultiPayload(v30, *(_QWORD *)(v4 - 160), 1);
  }
  else
  {
    v28 = *(_QWORD *)(v4 - 224);
    sub_100077850((uint64_t)v22, v24, v20);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v24);
    v29 = &qword_100116E80;
    v30 = *(_QWORD *)(v4 - 144);
    sub_10000531C(v28, v30, &qword_100116E80);
    swift_storeEnumTagMultiPayload(v30, *(_QWORD *)(v4 - 160), 0);
  }
  v31 = sub_10007A2D8();
  v32 = sub_100008078(&qword_100116EB8, &qword_100116EC0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  _ConditionalContent<>.init(storage:)(*(_QWORD **)(v4 - 128), v30, *(_QWORD *)(v4 - 152), *(_QWORD *)(v4 - 136), v31, v32);
  return sub_100004F48(v28, v29);
}

void sub_100077850(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;

  v7 = *(_QWORD *)(v3 + 32);
  v8 = *(_BYTE *)(v3 + 40);
  v9 = swift_retain(v7);
  sub_1000436BC(v9, v8);
  swift_release(v7);
  v10 = a1;
  v11 = *(_QWORD *)(a1 + 16);
  v26 = *(_OWORD *)(v3 + 56);
  v24 = *(_OWORD *)(v3 + 56);
  v12 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v25, v12);
  v13 = v25;
  v14 = swift_retain(v7);
  v23 = v8;
  v15 = sub_1000436BC(v14, v8);
  swift_release(v7);
  if ((a3 & 1) == 0)
  {
    if (v11)
    {
      swift_release(v13);
      swift_release(v15);
      goto LABEL_8;
    }
LABEL_12:
    __break(1u);
    JUMPOUT(0x100077CC8);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    if (v11)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
      v17 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 16);
      swift_release(v13);
      swift_release(v15);
      if (!__OFADD__(v16, v17))
      {
LABEL_8:
        v18 = swift_retain(v7);
        sub_1000436BC(v18, v23);
        swift_release(v7);
        *((_QWORD *)&v24 + 1) = *((_QWORD *)&v26 + 1);
        State.wrappedValue.getter(&v25, v12);
        v19 = v25;
        KeyPath = swift_getKeyPath(&unk_1000D2118);
        *(_QWORD *)&v24 = v19;
        v21 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
        ObservationRegistrar.access<A, B>(_:keyPath:)(&v24, KeyPath, v21);
        swift_release(KeyPath);
        v22 = *(unsigned __int8 *)(v19 + 16);
        swift_release(v19);
        __asm { BR              X9 }
      }
      goto LABEL_11;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
  goto LABEL_12;
}

void sub_100077CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)(v1 + 40);
  v4 = swift_retain(v2);
  sub_1000436BC(v4, v3);
  swift_release(v2);
  v10 = *(_OWORD *)(v1 + 56);
  v5 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v11, v5);
  v6 = v11;
  KeyPath = swift_getKeyPath(&unk_1000D2118);
  *(_QWORD *)&v10 = v6;
  v8 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v8);
  swift_release(KeyPath);
  v9 = *(unsigned __int8 *)(v6 + 16);
  swift_release(v6);
  __asm { BR              X9 }
}

void sub_100077DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;

  v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657061506874616DLL, 0xE900000000000072, 0x6669746E65696373, 0xEA00000000006369, 0);
  swift_bridgeObjectRelease(0xE900000000000072);
  sub_1000A5C60(v5, v6 & 1);
  v8 = v7;
  v9 = swift_release(v5);
  *(_QWORD *)v4 = static HorizontalAlignment.center.getter(v9);
  *(_QWORD *)(v4 + 8) = v8;
  *(_BYTE *)(v4 + 16) = 0;
  v10 = sub_100005360(&qword_100116F18);
  sub_10007838C(v1, v2, v0, v3 & 1, v4 + *(int *)(v10 + 44));
}

void sub_100077EC8(unint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v62 = a5;
  v64 = a6;
  v65 = a4;
  v66 = sub_100005360(&qword_100116F60);
  v68 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66, v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100116F40);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v60 - v19;
  v21 = sub_100005360(&qword_100116FF8);
  __chkstk_darwin(v21, v22);
  v26 = __chkstk_darwin(v23, v24);
  v27 = *a1;
  v63 = v28;
  v67 = (uint64_t)&v60 - v25;
  if ((a2 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))((char *)&v60 - v25, 1, 1, v12, v26);
    v43 = v66;
    if ((v27 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_9:
      __break(1u);
      goto LABEL_10;
    }
LABEL_6:
    if (v27 < *(_QWORD *)(v65 + 16))
    {
      v69 = *(_QWORD *)(v65 + 8 * v27 + 32);
      v44 = v69;
      v45 = swift_allocObject(&unk_10010BF58, 136, 7);
      v46 = *(_OWORD *)(a3 + 80);
      *(_OWORD *)(v45 + 80) = *(_OWORD *)(a3 + 64);
      *(_OWORD *)(v45 + 96) = v46;
      *(_OWORD *)(v45 + 112) = *(_OWORD *)(a3 + 96);
      *(_QWORD *)(v45 + 128) = *(_QWORD *)(a3 + 112);
      v47 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v45 + 16) = *(_OWORD *)a3;
      *(_OWORD *)(v45 + 32) = v47;
      v48 = *(_OWORD *)(a3 + 48);
      *(_OWORD *)(v45 + 48) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v45 + 64) = v48;
      sub_10006D6E8((uint64_t *)a3);
      swift_bridgeObjectRetain(v44);
      v49 = v12;
      v50 = sub_100005360(&qword_100114420);
      v51 = sub_100005360(&qword_100116F70);
      v52 = sub_100008078(&qword_100116FD8, &qword_100114420, (uint64_t)&protocol conformance descriptor for [A]);
      v53 = sub_10007A804();
      v54 = sub_10007AA58();
      ForEach<>.init(_:content:)(&v69, sub_10007AC94, v45, v50, &type metadata for CalculatorButtonRepresentable, v51, v52, v53, v54);
      v55 = v68;
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v16, v11, v43);
      *(_QWORD *)&v16[*(int *)(v49 + 36)] = 0x4000000000000000;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v43);
      sub_100007CD8((uint64_t)v16, (uint64_t)v20, &qword_100116F40);
      v56 = v67;
      v57 = v63;
      sub_10000531C(v67, v63, &qword_100116FF8);
      sub_10000531C((uint64_t)v20, (uint64_t)v16, &qword_100116F40);
      v58 = v64;
      sub_10000531C(v57, v64, &qword_100116FF8);
      v59 = sub_100005360(qword_100117000);
      sub_10000531C((uint64_t)v16, v58 + *(int *)(v59 + 48), &qword_100116F40);
      sub_100004F48((uint64_t)v20, &qword_100116F40);
      sub_100004F48(v56, &qword_100116FF8);
      sub_100004F48((uint64_t)v16, &qword_100116F40);
      sub_100004F48(v57, &qword_100116FF8);
      return;
    }
    goto LABEL_9;
  }
  v61 = v13;
  if ((v27 & 0x8000000000000000) != 0)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v27 < *(_QWORD *)(v62 + 16))
  {
    v69 = *(_QWORD *)(v62 + 8 * v27 + 32);
    v29 = v69;
    v30 = swift_allocObject(&unk_10010BF80, 136, 7);
    v31 = *(_OWORD *)(a3 + 80);
    *(_OWORD *)(v30 + 80) = *(_OWORD *)(a3 + 64);
    *(_OWORD *)(v30 + 96) = v31;
    *(_OWORD *)(v30 + 112) = *(_OWORD *)(a3 + 96);
    *(_QWORD *)(v30 + 128) = *(_QWORD *)(a3 + 112);
    v32 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)(v30 + 16) = *(_OWORD *)a3;
    *(_OWORD *)(v30 + 32) = v32;
    v33 = *(_OWORD *)(a3 + 48);
    *(_OWORD *)(v30 + 48) = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(v30 + 64) = v33;
    swift_bridgeObjectRetain(v29);
    sub_10006D6E8((uint64_t *)a3);
    v62 = sub_100005360(&qword_100114420);
    v34 = sub_100005360(&qword_100116F70);
    v35 = sub_100008078(&qword_100116FD8, &qword_100114420, (uint64_t)&protocol conformance descriptor for [A]);
    v36 = v12;
    v37 = sub_10007A804();
    v38 = sub_10007AA58();
    v39 = v34;
    v40 = v67;
    v41 = v37;
    v12 = v36;
    ForEach<>.init(_:content:)(&v69, sub_10007AC98, v30, v62, &type metadata for CalculatorButtonRepresentable, v39, v35, v41, v38);
    v42 = v68;
    v43 = v66;
    (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v20, v11, v66);
    *(_QWORD *)&v20[*(int *)(v12 + 36)] = 0x4008000000000000;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v43);
    sub_100007CD8((uint64_t)v20, v40, &qword_100116F40);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v40, 0, 1, v12);
    goto LABEL_6;
  }
LABEL_11:
  __break(1u);
}

void sub_10007838C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD v26[7];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;

  v30 = a4;
  v31 = a3;
  v29 = a2;
  v28 = sub_100005360(&qword_100116F20);
  __chkstk_darwin(v28, v7);
  v9 = (char *)v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v27 = sub_100005360(&qword_100116F28);
  v12 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v13);
  v26[2] = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100005360(&qword_100116F30);
  __chkstk_darwin(v15, v16);
  v26[3] = (char *)v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v32 = *(_OWORD *)(a1 + 56);
  v20 = sub_100005360(&qword_100116E60);
  State.wrappedValue.getter(&v33, v20);
  v21 = v33;
  KeyPath = swift_getKeyPath(&unk_1000D2118);
  *(_QWORD *)&v32 = v21;
  v23 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v32, KeyPath, v23);
  swift_release(KeyPath);
  v24 = *(unsigned __int8 *)(v21 + 16);
  swift_release(v21);
  v25 = (char *)&loc_100078560 + dword_100078B14[v24];
  v26[4] = a5;
  v26[5] = v9;
  v26[6] = v12;
  __asm { BR              X9 }
}

uint64_t sub_100078578()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t KeyPath;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  swift_bridgeObjectRelease(0xEA00000000006369);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_BYTE *)(v2 + 40);
  v7 = swift_retain(v5);
  v8 = sub_1000436BC(v7, v6);
  swift_release(v5);
  v9 = *(_QWORD *)(*(_QWORD *)(v3 - 152) + 16);
  if (!v9)
  {
LABEL_5:
    __break(1u);
    JUMPOUT(0x100078B14);
  }
  v10 = v1;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 - 152) + 32) + 16);
  v12 = swift_retain(v5);
  v13 = sub_1000436BC(v12, v6);
  swift_release(v5);
  v14 = (*(_DWORD *)(v3 - 156) & 1) == 0;
  sub_1000A5E70(v13, v14);
  v16 = v15;
  swift_release(v13);
  v17 = swift_retain(v5);
  v18 = sub_1000436BC(v17, v6);
  swift_release(v5);
  v19 = sub_1000A5FAC(v18, v14);
  swift_release(v18);
  *v0 = v8;
  v0[1] = v9;
  v0[2] = v11;
  v20 = v10;
  v21 = *(_QWORD *)(v3 - 152);
  v0[3] = v4;
  v0[4] = v16;
  *((double *)v0 + 5) = v19;
  *(_QWORD *)(v3 - 232) = (char *)v0 + *(int *)(*(_QWORD *)(v3 - 176) + 44);
  *(_QWORD *)(v3 - 144) = sub_100079900(0, v9);
  KeyPath = swift_getKeyPath(&unk_1000D22D8);
  v23 = swift_allocObject(&unk_10010BE18, 153, 7);
  v24 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v23 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v23 + 96) = v24;
  *(_OWORD *)(v23 + 112) = *(_OWORD *)(v2 + 96);
  v25 = *(_QWORD *)(v2 + 112);
  v26 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v23 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v23 + 32) = v26;
  v27 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v23 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v23 + 64) = v27;
  v28 = *(_QWORD *)(v3 - 168);
  *(_QWORD *)(v23 + 128) = v25;
  *(_QWORD *)(v23 + 136) = v28;
  *(_QWORD *)(v23 + 144) = v21;
  *(_BYTE *)(v23 + 152) = *(_DWORD *)(v3 - 156) & 1;
  sub_10006D6E8((uint64_t *)v2);
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v21);
  v29 = sub_100005360(&qword_100116F38);
  v30 = sub_100005360(&qword_100116F40);
  v31 = sub_100008078(&qword_100116F48, &qword_100116F38, (uint64_t)&protocol conformance descriptor for [A]);
  v32 = sub_10007A71C();
  v33 = ((uint64_t (*)(uint64_t, uint64_t, void (*)(unint64_t *@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, uint64_t, void *, unint64_t))ForEach<>.init(_:id:content:))(v3 - 144, KeyPath, sub_10007AA3C, v23, v29, v30, v31, &protocol witness table for Int, v32);
  v34 = static AnyTransition.opacity.getter(v33);
  v35 = ((uint64_t (*)(void))static AnyTransition.identity.getter)();
  v36 = ((uint64_t (*)(uint64_t, uint64_t))static AnyTransition.asymmetric(insertion:removal:))(v34, v35);
  swift_release(v34);
  swift_release(v35);
  v37 = *(_QWORD *)(v3 - 224);
  sub_10000531C((uint64_t)v0, v37, &qword_100116F20);
  v38 = *(_QWORD *)(v3 - 184);
  *(_QWORD *)(v37 + *(int *)(v38 + 36)) = v36;
  sub_100004F48((uint64_t)v0, &qword_100116F20);
  sub_100007CD8(v37, v20, &qword_100116F28);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v3 - 192) + 56))(v20, 0, 1, v38);
  v39 = *(_QWORD *)(v2 + 32);
  v40 = *(_BYTE *)(v2 + 40);
  v41 = swift_retain(v39);
  v42 = sub_1000436BC(v41, v40);
  swift_release(v39);
  v43 = *(_QWORD *)(v28 + 16);
  if (!v43)
  {
    __break(1u);
    goto LABEL_5;
  }
  v44 = *(_QWORD *)(v28 + 32);
  *(_QWORD *)(v3 - 184) = v20;
  v45 = *(_QWORD *)(v44 + 16);
  v46 = swift_retain(v39);
  v47 = sub_1000436BC(v46, v40);
  swift_release(v39);
  v48 = *(_DWORD *)(v3 - 156);
  sub_1000A5E70(v47, (v48 & 1) == 0);
  v50 = v49;
  swift_release(v47);
  v51 = swift_retain(v39);
  v52 = sub_1000436BC(v51, v40);
  swift_release(v39);
  v53 = sub_1000A5FAC(v52, (v48 & 1) == 0);
  swift_release(v52);
  *v0 = v42;
  v0[1] = v43;
  v0[2] = v45;
  v0[3] = v4;
  v0[4] = v50;
  *((double *)v0 + 5) = v53;
  *(_QWORD *)(v3 - 144) = sub_100079900(0, v43);
  v54 = swift_getKeyPath(&unk_1000D22D8);
  v55 = swift_allocObject(&unk_10010BDF0, 153, 7);
  v56 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v55 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v55 + 96) = v56;
  *(_OWORD *)(v55 + 112) = *(_OWORD *)(v2 + 96);
  v57 = *(_QWORD *)(v2 + 112);
  v58 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v55 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v55 + 32) = v58;
  v59 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v55 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v55 + 64) = v59;
  v60 = *(_QWORD *)(v3 - 168);
  *(_QWORD *)(v55 + 128) = v57;
  *(_QWORD *)(v55 + 136) = v60;
  v61 = *(_QWORD *)(v3 - 152);
  *(_QWORD *)(v55 + 144) = v61;
  *(_BYTE *)(v55 + 152) = v48 & 1;
  sub_10006D6E8((uint64_t *)v2);
  swift_bridgeObjectRetain(v60);
  swift_bridgeObjectRetain(v61);
  v62 = sub_100005360(&qword_100116F38);
  v63 = sub_100005360(&qword_100116F40);
  v64 = sub_100008078(&qword_100116F48, &qword_100116F38, (uint64_t)&protocol conformance descriptor for [A]);
  v65 = sub_10007A71C();
  ((void (*)(uint64_t, uint64_t, void (*)(unint64_t *@<X0>, uint64_t@<X8>), uint64_t, uint64_t, uint64_t, uint64_t, void *, unint64_t))ForEach<>.init(_:id:content:))(v3 - 144, v54, sub_10007A70C, v55, v62, v63, v64, &protocol witness table for Int, v65);
  v66 = *(_QWORD *)(v3 - 184);
  v67 = *(_QWORD *)(v3 - 216);
  sub_10000531C(v66, v67, &qword_100116F30);
  v68 = *(_QWORD *)(v3 - 200);
  sub_10000531C((uint64_t)v0, v68, &qword_100116F20);
  v69 = *(_QWORD *)(v3 - 208);
  sub_10000531C(v67, v69, &qword_100116F30);
  v70 = sub_100005360(&qword_100116FD0);
  sub_10000531C(v68, v69 + *(int *)(v70 + 48), &qword_100116F20);
  sub_100004F48((uint64_t)v0, &qword_100116F20);
  sub_100004F48(v66, &qword_100116F30);
  sub_100004F48(v68, &qword_100116F20);
  return sub_100004F48(v67, &qword_100116F30);
}

void sub_100078B24(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = sub_100005360(&qword_100116F60);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v13 < *(_QWORD *)(a3 + 16))
  {
    v25 = *(_QWORD *)(a3 + 8 * v13 + 32);
    v14 = v25;
    v15 = swift_allocObject(&unk_10010BE40, 136, 7);
    v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v15 + 80) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v15 + 96) = v16;
    *(_OWORD *)(v15 + 112) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(v15 + 128) = *(_QWORD *)(a2 + 112);
    v17 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v15 + 32) = v17;
    v18 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v15 + 64) = v18;
    swift_bridgeObjectRetain(v14);
    sub_10006D6E8((uint64_t *)a2);
    v19 = sub_100005360(&qword_100114420);
    v20 = sub_100005360(&qword_100116F70);
    v21 = sub_100008078(&qword_100116FD8, &qword_100114420, (uint64_t)&protocol conformance descriptor for [A]);
    v22 = sub_10007A804();
    v23 = sub_10007AA58();
    ForEach<>.init(_:content:)(&v25, sub_10007AA50, v15, v19, &type metadata for CalculatorButtonRepresentable, v20, v21, v22, v23);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a4, v12, v8);
    *(_QWORD *)(a4 + *(int *)(sub_100005360(&qword_100116F40) + 36)) = 0x4008000000000000;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return;
  }
  __break(1u);
}

void sub_100078CE8(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = sub_100005360(&qword_100116F60);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  if ((*a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v13 < *(_QWORD *)(a3 + 16))
  {
    v25 = *(_QWORD *)(a3 + 8 * v13 + 32);
    v14 = v25;
    v15 = swift_allocObject(&unk_10010BEB8, 136, 7);
    v16 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(v15 + 80) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(v15 + 96) = v16;
    *(_OWORD *)(v15 + 112) = *(_OWORD *)(a2 + 96);
    *(_QWORD *)(v15 + 128) = *(_QWORD *)(a2 + 112);
    v17 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v15 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v15 + 32) = v17;
    v18 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v15 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v15 + 64) = v18;
    swift_bridgeObjectRetain(v14);
    sub_10006D6E8((uint64_t *)a2);
    v19 = sub_100005360(&qword_100114420);
    v20 = sub_100005360(&qword_100116F70);
    v21 = sub_100008078(&qword_100116FD8, &qword_100114420, (uint64_t)&protocol conformance descriptor for [A]);
    v22 = sub_10007A804();
    v23 = sub_10007AA58();
    ForEach<>.init(_:content:)(&v25, sub_10007AAC0, v15, v19, &type metadata for CalculatorButtonRepresentable, v20, v21, v22, v23);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(a4, v12, v8);
    *(_QWORD *)(a4 + *(int *)(sub_100005360(&qword_100116F40) + 36)) = 0x4000000000000000;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return;
  }
  __break(1u);
}

void sub_100078EAC(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const mach_header_64 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  _BYTE *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  _BYTE v52[7];
  char v53;
  __int128 v54;
  _QWORD v55[3];

  v43 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v54 = *((_OWORD *)a2 + 6);
  v11 = sub_100005360(&qword_100116FE8);
  State.wrappedValue.getter(v55, v11);
  v12 = v55[0];
  v13 = v55[1];
  v14 = *a2;
  v15 = *((_BYTE *)a2 + 8);
  v16 = swift_retain(*a2);
  v17 = sub_100043890(v16, v15);
  swift_release(v14);
  v48 = v10;
  v49 = v8;
  v18 = 0x1000000000000;
  if (!v10)
    v18 = 0;
  v51 = v6;
  v19 = 0x10000000000;
  if (!v9)
    v19 = 0;
  v20 = &_mh_execute_header;
  if (!v8)
    v20 = 0;
  v50 = v7;
  v21 = 0x1000000;
  if (!v7)
    v21 = 0;
  v22 = 0x10000;
  if (!v6)
    v22 = 0;
  v23 = 256;
  if (!v5)
    v23 = 0;
  v24 = sub_10003C884(v23 | v43 | v22 | v21 | (unint64_t)v20 | v19 | v18);
  v25 = sub_10004F748(v24);
  if (v25)
  {
    v26 = v25;
    v27 = sub_1000AC150();
    v28 = swift_retain(v27);
    v29 = CalculateExpression.allowedOperations.getter(v28);
    swift_release(v27);
    LOBYTE(v27) = sub_10003B830(v26, v29);
    swift_release(v17);
    swift_release(v26);
    swift_bridgeObjectRelease(v29);
    v45 = v27 ^ 1;
  }
  else
  {
    swift_release(v17);
    v45 = 0;
  }
  v30 = type metadata accessor for CalculatorKeypadViewModel(0);
  v31 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  v46 = Environment.init<A>(_:)(v30, v30, v31);
  v33 = v32;
  KeyPath = swift_getKeyPath(&unk_1000D2190);
  v47 = static Anchor.Source<A>.bounds.getter(KeyPath);
  v34 = (_BYTE *)swift_allocObject(&unk_10010BE68, 23, 7);
  v34[16] = v43;
  v34[17] = v5;
  v34[18] = v51;
  v34[19] = v50;
  v34[20] = v49;
  v34[21] = v9;
  v34[22] = v10;
  v35 = swift_allocObject(&unk_10010BE90, 136, 7);
  v36 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v35 + 80) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v35 + 96) = v36;
  *(_OWORD *)(v35 + 112) = *((_OWORD *)a2 + 6);
  *(_QWORD *)(v35 + 128) = a2[14];
  v37 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v35 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v35 + 32) = v37;
  v38 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v35 + 48) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v35 + 64) = v38;
  v53 = v33 & 1;
  v39 = a2[6];
  sub_10006D6E8(a2);
  v40 = Namespace.wrappedValue.getter(v39);
  LODWORD(v39) = static MatchedGeometryProperties.frame.getter();
  v41 = static UnitPoint.center.getter();
  *(_DWORD *)(a3 + 9) = v55[0];
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v55 + 3);
  *(_DWORD *)(a3 + 65) = *(_DWORD *)v52;
  *(_DWORD *)(a3 + 68) = *(_DWORD *)&v52[3];
  *(_QWORD *)a3 = v46;
  *(_BYTE *)(a3 + 8) = v53;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = KeyPath;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 41) = v43;
  *(_BYTE *)(a3 + 42) = v5;
  *(_BYTE *)(a3 + 43) = v51;
  *(_BYTE *)(a3 + 44) = v50;
  *(_BYTE *)(a3 + 45) = v49;
  *(_BYTE *)(a3 + 46) = v9;
  *(_BYTE *)(a3 + 47) = v48;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v13;
  *(_BYTE *)(a3 + 64) = v45 & 1;
  *(_QWORD *)(a3 + 72) = v47;
  *(_QWORD *)(a3 + 80) = sub_10007AAAC;
  *(_QWORD *)(a3 + 88) = v34;
  *(_QWORD *)(a3 + 96) = sub_10007AC90;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = sub_10007AAB4;
  *(_QWORD *)(a3 + 120) = v35;
  *(_BYTE *)(a3 + 128) = v43;
  *(_DWORD *)(a3 + 132) = *(_DWORD *)((char *)&v54 + 3);
  *(_DWORD *)(a3 + 129) = v54;
  *(_QWORD *)(a3 + 136) = v40;
  *(_DWORD *)(a3 + 144) = v39;
  *(double *)(a3 + 152) = v41;
  *(_QWORD *)(a3 + 160) = v42;
  *(_BYTE *)(a3 + 168) = 1;
}

_QWORD *sub_100079234(double *a1)
{
  double v1;
  double v2;
  uint64_t v3;
  _QWORD *result;
  double v6;
  double v7;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100005360(&qword_100116FE8);
  result = State.wrappedValue.getter(&v6, v3);
  if (v6 != v1 || v7 != v2)
  {
    v6 = v1;
    v7 = v2;
    return (_QWORD *)State.wrappedValue.setter(&v6, v3);
  }
  return result;
}

void sub_1000792D0(unsigned __int8 *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const mach_header_64 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  _BYTE *v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t KeyPath;
  char v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char v49;
  char v50;
  char v51;
  _BYTE v52[7];
  char v53;
  __int128 v54;
  _QWORD v55[3];

  v43 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v54 = *(_OWORD *)(a2 + 9);
  v11 = sub_100005360(&qword_100116FE8);
  State.wrappedValue.getter(v55, v11);
  v12 = v55[0];
  v13 = v55[1];
  v14 = *a2;
  v15 = *((_BYTE *)a2 + 8);
  v16 = swift_retain(*a2);
  v17 = sub_100043890(v16, v15);
  swift_release(v14);
  v48 = v10;
  v49 = v8;
  v18 = 0x1000000000000;
  if (!v10)
    v18 = 0;
  v51 = v6;
  v19 = 0x10000000000;
  if (!v9)
    v19 = 0;
  v20 = &_mh_execute_header;
  if (!v8)
    v20 = 0;
  v50 = v7;
  v21 = 0x1000000;
  if (!v7)
    v21 = 0;
  v22 = 0x10000;
  if (!v6)
    v22 = 0;
  v23 = 256;
  if (!v5)
    v23 = 0;
  v24 = sub_10003C884(v23 | v43 | v22 | v21 | (unint64_t)v20 | v19 | v18);
  v25 = sub_10004F748(v24);
  if (v25)
  {
    v26 = v25;
    v27 = sub_1000AC150();
    v28 = swift_retain(v27);
    v29 = CalculateExpression.allowedOperations.getter(v28);
    swift_release(v27);
    LOBYTE(v27) = sub_10003B830(v26, v29);
    swift_release(v17);
    swift_release(v26);
    swift_bridgeObjectRelease(v29);
    v45 = v27 ^ 1;
  }
  else
  {
    swift_release(v17);
    v45 = 0;
  }
  v30 = type metadata accessor for CalculatorKeypadViewModel(0);
  v31 = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
  v46 = Environment.init<A>(_:)(v30, v30, v31);
  v33 = v32;
  KeyPath = swift_getKeyPath(&unk_1000D2190);
  v47 = static Anchor.Source<A>.bounds.getter(KeyPath);
  v34 = (_BYTE *)swift_allocObject(&unk_10010BEE0, 23, 7);
  v34[16] = v43;
  v34[17] = v5;
  v34[18] = v51;
  v34[19] = v50;
  v34[20] = v49;
  v34[21] = v9;
  v34[22] = v10;
  v35 = swift_allocObject(&unk_10010BF08, 136, 7);
  v36 = *((_OWORD *)a2 + 5);
  *(_OWORD *)(v35 + 80) = *((_OWORD *)a2 + 4);
  *(_OWORD *)(v35 + 96) = v36;
  *(_OWORD *)(v35 + 112) = *((_OWORD *)a2 + 6);
  *(_QWORD *)(v35 + 128) = a2[14];
  v37 = *((_OWORD *)a2 + 1);
  *(_OWORD *)(v35 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v35 + 32) = v37;
  v38 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v35 + 48) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v35 + 64) = v38;
  v53 = v33 & 1;
  v39 = a2[6];
  sub_10006D6E8(a2);
  v40 = Namespace.wrappedValue.getter(v39);
  LODWORD(v39) = static MatchedGeometryProperties.frame.getter();
  v41 = static UnitPoint.center.getter();
  *(_DWORD *)(a3 + 9) = v55[0];
  *(_DWORD *)(a3 + 12) = *(_DWORD *)((char *)v55 + 3);
  *(_DWORD *)(a3 + 65) = *(_DWORD *)v52;
  *(_DWORD *)(a3 + 68) = *(_DWORD *)&v52[3];
  *(_QWORD *)a3 = v46;
  *(_BYTE *)(a3 + 8) = v53;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = KeyPath;
  *(_BYTE *)(a3 + 40) = 0;
  *(_BYTE *)(a3 + 41) = v43;
  *(_BYTE *)(a3 + 42) = v5;
  *(_BYTE *)(a3 + 43) = v51;
  *(_BYTE *)(a3 + 44) = v50;
  *(_BYTE *)(a3 + 45) = v49;
  *(_BYTE *)(a3 + 46) = v9;
  *(_BYTE *)(a3 + 47) = v48;
  *(_QWORD *)(a3 + 48) = v12;
  *(_QWORD *)(a3 + 56) = v13;
  *(_BYTE *)(a3 + 64) = v45 & 1;
  *(_QWORD *)(a3 + 72) = v47;
  *(_QWORD *)(a3 + 80) = sub_10007AAAC;
  *(_QWORD *)(a3 + 88) = v34;
  *(_QWORD *)(a3 + 96) = sub_100037734;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = sub_10007AB6C;
  *(_QWORD *)(a3 + 120) = v35;
  *(_BYTE *)(a3 + 128) = v43;
  *(_DWORD *)(a3 + 132) = *(_DWORD *)((char *)&v54 + 3);
  *(_DWORD *)(a3 + 129) = v54;
  *(_QWORD *)(a3 + 136) = v40;
  *(_DWORD *)(a3 + 144) = v39;
  *(double *)(a3 + 152) = v41;
  *(_QWORD *)(a3 + 160) = v42;
  *(_BYTE *)(a3 + 168) = 1;
}

uint64_t sub_100079658@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a2;
  v4 = result;
  if ((a2 & 0x10000) != 0)
  {
    if (qword_100113CC8 != -1)
      swift_once(&qword_100113CC8, sub_1000506F0);
    result = sub_10003B98C(v3, static CalculatorButtonRepresentable.alternateRPNButtons);
    if ((result & 1) != 0)
    {
      if (v3 <= 0x37u && ((1 << v3) & 0x80001040000100) != 0)
        goto LABEL_17;
      goto LABEL_15;
    }
  }
  if ((v3 & 0x100) != 0)
  {
    if (qword_100113CC0 != -1)
      swift_once(&qword_100113CC0, sub_100050670);
    result = sub_10003B98C(v3, static CalculatorButtonRepresentable.shiftableButtons);
    if ((result & 1) != 0)
    {
      result = CalculatorButtonRepresentable.shiftedButton(isRPN:)(v3 & 0x10000);
      LOBYTE(v3) = result;
      goto LABEL_15;
    }
  }
  v6 = 0;
  if ((v3 & 0x10000FF) != 0x1000001 && (v3 & 0x1000000FFLL) != 0x100000002)
  {
LABEL_15:
    if (v3 == 10)
    {
      result = swift_retain(v4);
      v6 = v4;
      goto LABEL_18;
    }
LABEL_17:
    v6 = 0;
  }
LABEL_18:
  *a3 = v6;
  return result;
}

_QWORD *sub_1000797B4(double *a1)
{
  double v1;
  double v2;
  uint64_t v3;
  _QWORD *result;
  double v6;
  double v7;

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_100005360(&qword_100116FE8);
  result = State.wrappedValue.getter(&v6, v3);
  if (v6 != v1 || v7 != v2)
  {
    v6 = v1;
    v7 = v2;
    return (_QWORD *)State.wrappedValue.setter(&v6, v3);
  }
  return result;
}

uint64_t sub_100079850()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  _QWORD v6[6];
  _OWORD v7[7];
  uint64_t v8;

  v1 = *(_OWORD *)(v0 + 80);
  v7[4] = *(_OWORD *)(v0 + 64);
  v7[5] = v1;
  v7[6] = *(_OWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 112);
  v2 = *(_OWORD *)(v0 + 16);
  v7[0] = *(_OWORD *)v0;
  v7[1] = v2;
  v3 = *(_OWORD *)(v0 + 48);
  v7[2] = *(_OWORD *)(v0 + 32);
  v7[3] = v3;
  v6[5] = 0;
  Transaction.disablesAnimations.setter(1);
  v6[2] = v7;
  swift_retain(0);
  v4 = sub_100005360(&qword_100116E18);
  withTransaction<A>(_:_:)(0, sub_10007A1B0, v6, v4);
  return swift_release_n(0, 2);
}

int64_t *sub_100079900(int64_t *result, int64_t a2)
{
  uint64_t v2;
  int64_t v4;
  uint64_t v5;
  int64_t *v6;
  int64_t v7;
  uint64_t v8;
  int64_t v9[3];

  v2 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
    __break(1u);
  }
  else
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    v4 = (int64_t)result;
    if (v2 <= 0)
    {
      v6 = _swiftEmptyArrayStorage;
    }
    else
    {
      v5 = sub_100005360(&qword_100116FF0);
      v6 = (int64_t *)swift_allocObject(v5, 8 * v2 + 32, 7);
      v7 = j__malloc_size(v6);
      v8 = v7 - 32;
      if (v7 < 32)
        v8 = v7 - 25;
      v6[2] = v2;
      v6[3] = 2 * (v8 >> 3);
    }
    result = sub_100079AB8(v9, v6 + 4, v2, v4, a2);
    if (result == (int64_t *)v2)
      return v6;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000799C4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    if (v2 <= 0)
    {
      v4 = _swiftEmptyArrayStorage;
    }
    else
    {
      v3 = sub_100005360(&qword_100114320);
      v4 = (_QWORD *)swift_allocObject(v3, 8 * v2 + 32, 7);
      v5 = j__malloc_size(v4);
      v6 = v5 - 32;
      if (v5 < 32)
        v6 = v5 - 25;
      v4[2] = v2;
      v4[3] = (2 * (v6 >> 3)) | 1;
    }
    swift_bridgeObjectRetain(v1);
    v7 = sub_100016E60((unint64_t)(v4 + 4), v2, v1);
    v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    if (v1 < 0)
      v9 = v1;
    else
      v9 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2)
      return _swiftEmptyArrayStorage;
  }
  return v4;
}

int64_t *sub_100079AB8(int64_t *result, int64_t *a2, uint64_t a3, int64_t a4, int64_t a5)
{
  int64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int64_t *v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64x2_t v14;
  int64x2_t *v15;
  int64x2_t v16;
  int64_t *v17;
  int64_t v18;

  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v5 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = v5;
    return (int64_t *)a3;
  }
  if (a3 < 0)
    goto LABEL_31;
  if (a5 == a4)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (a5 < a4)
    goto LABEL_32;
  v6 = a5 - a4;
  if (a5 > a4)
  {
    v5 = a4 + 1;
    *a2 = a4;
    if (a3 == 1)
      goto LABEL_7;
    if (v5 == a5)
    {
      a3 = 1;
      v5 = a5;
      goto LABEL_7;
    }
    v7 = v6 - 2;
    if (v6 - 2 >= (unint64_t)(a3 - 2))
      v7 = a3 - 2;
    if (v7 >= ~a4 + a5)
      v7 = ~a4 + a5;
    v8 = v7 + 1;
    if (v8 >= 5)
    {
      v11 = v8 & 3;
      if ((v8 & 3) == 0)
        v11 = 4;
      v12 = v8 - v11;
      v13 = v5 + v8 - v11;
      v10 = &a2[v8 - v11];
      v9 = v12 + 2;
      v14 = vaddq_s64(vdupq_n_s64(v5), (int64x2_t)xmmword_1000D22F0);
      v15 = (int64x2_t *)(a2 + 3);
      v16 = vdupq_n_s64(2uLL);
      do
      {
        v15[-1] = v14;
        *v15 = vaddq_s64(v14, v16);
        v14 = vaddq_s64(v14, vdupq_n_s64(4uLL));
        v15 += 2;
        v12 -= 4;
      }
      while (v12);
      v5 = v13;
    }
    else
    {
      v9 = 2;
      v10 = a2;
    }
    v17 = v10 + 1;
    while (v5 < a5)
    {
      v18 = v5 + 1;
      *v17 = v5;
      if (a3 == v9)
      {
        ++v5;
        goto LABEL_7;
      }
      ++v9;
      ++v17;
      ++v5;
      if (a5 == v18)
      {
        v5 = a5;
        a3 = a5 - a4;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100079BF8@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = type metadata accessor for CalculatorViewModel(0);
  v5 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  v30 = Environment.init<A>(_:)(v4, v4, v5);
  v7 = v6;
  v8 = type metadata accessor for CalculatorUnitConversionViewModelWrapper(0);
  v9 = sub_100005178(&qword_100116508, type metadata accessor for CalculatorUnitConversionViewModelWrapper, (uint64_t)&unk_1000CF484);
  v10 = Environment.init<A>(_:)(v8, v8, v9);
  v12 = v11;
  v13 = type metadata accessor for CalculatorLayout(0);
  v14 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  v15 = Environment.init<A>(_:)(v13, v13, v14);
  v17 = v16;
  type metadata accessor for CGSize(0);
  v19 = v18;
  v31 = 0;
  v32 = 0;
  State.init(wrappedValue:)(&v33, &v31, v18);
  v20 = v33;
  v21 = v34;
  v22 = v35;
  v31 = 0;
  v32 = 0;
  State.init(wrappedValue:)(&v33, &v31, v19);
  v23 = v33;
  v24 = v34;
  v25 = v35;
  v26 = type metadata accessor for CalculatorKeypadViewModel(0);
  swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
  v31 = sub_10008A164(a1);
  result = State.init(wrappedValue:)(&v33, &v31, v26);
  v28 = v33;
  v29 = v34;
  *(_QWORD *)a2 = v30;
  *(_BYTE *)(a2 + 8) = v7 & 1;
  *(_QWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 24) = v12 & 1;
  *(_QWORD *)(a2 + 32) = v15;
  *(_BYTE *)(a2 + 40) = v17 & 1;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v28;
  *(_QWORD *)(a2 + 64) = v29;
  *(_QWORD *)(a2 + 72) = v20;
  *(_QWORD *)(a2 + 80) = v21;
  *(_QWORD *)(a2 + 88) = v22;
  *(_QWORD *)(a2 + 96) = v23;
  *(_QWORD *)(a2 + 104) = v24;
  *(_QWORD *)(a2 + 112) = v25;
  return result;
}

uint64_t destroy for CalculatorKeypadView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[7]);
  swift_release(a1[8]);
  swift_release(a1[11]);
  return swift_release(a1[14]);
}

uint64_t initializeWithCopy for CalculatorKeypadView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  v7 = a2[4];
  v8 = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  v9 = a2[7];
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_QWORD *)(a1 + 56) = v9;
  v10 = a2[8];
  *(_QWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  v11 = a2[11];
  *(_QWORD *)(a1 + 88) = v11;
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  v12 = a2[14];
  *(_QWORD *)(a1 + 112) = v12;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v7);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v12);
  return a1;
}

uint64_t *assignWithCopy for CalculatorKeypadView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_retain(v4);
  swift_release(v6);
  v7 = a2[2];
  v8 = *((_BYTE *)a2 + 24);
  v9 = a1[2];
  a1[2] = v7;
  *((_BYTE *)a1 + 24) = v8;
  swift_retain(v7);
  swift_release(v9);
  v10 = a2[4];
  v11 = *((_BYTE *)a2 + 40);
  v12 = a1[4];
  a1[4] = v10;
  *((_BYTE *)a1 + 40) = v11;
  swift_retain(v10);
  swift_release(v12);
  a1[6] = a2[6];
  v13 = a2[7];
  v14 = a1[7];
  a1[7] = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = a1[8];
  v16 = a2[8];
  a1[8] = v16;
  swift_retain(v16);
  swift_release(v15);
  a1[9] = a2[9];
  a1[10] = a2[10];
  v17 = a1[11];
  v18 = a2[11];
  a1[11] = v18;
  swift_retain(v18);
  swift_release(v17);
  a1[12] = a2[12];
  a1[13] = a2[13];
  v19 = a1[14];
  v20 = a2[14];
  a1[14] = v20;
  swift_retain(v20);
  swift_release(v19);
  return a1;
}

__n128 initializeWithTake for CalculatorKeypadView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t *assignWithTake for CalculatorKeypadView(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_release(v5);
  v6 = *((_BYTE *)a2 + 24);
  v7 = a1[2];
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = v6;
  swift_release(v7);
  v8 = *((_BYTE *)a2 + 40);
  v9 = a1[4];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = v8;
  swift_release(v9);
  a1[6] = a2[6];
  swift_release(a1[7]);
  v10 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  swift_release(v10);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v11 = a1[11];
  a1[11] = a2[11];
  swift_release(v11);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  v12 = a1[14];
  a1[14] = a2[14];
  swift_release(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CalculatorKeypadView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CalculatorKeypadView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CalculatorKeypadView()
{
  return &type metadata for CalculatorKeypadView;
}

uint64_t sub_10007A1A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F680C, 1);
}

uint64_t sub_10007A1B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007609C(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_10007A1D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116E68;
  if (!qword_100116E68)
  {
    v1 = sub_100005608(&qword_100116E28);
    sub_10007A254();
    sub_100008078(&qword_100116EC8, &qword_100116ED0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116E68);
  }
  return result;
}

unint64_t sub_10007A254()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116E70;
  if (!qword_100116E70)
  {
    v1 = sub_100005608(&qword_100116E20);
    sub_10007A2D8();
    sub_100008078(&qword_100116EB8, &qword_100116EC0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116E70);
  }
  return result;
}

unint64_t sub_10007A2D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116E78;
  if (!qword_100116E78)
  {
    v1 = sub_100005608(&qword_100116E80);
    sub_100008078(&qword_100116E88, &qword_100116E90, (uint64_t)&protocol conformance descriptor for _LayoutRoot<A>);
    sub_10007A35C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _VariadicView.Tree<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116E78);
  }
  return result;
}

unint64_t sub_10007A35C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116E98;
  if (!qword_100116E98)
  {
    v1 = sub_100005608(&qword_100116EA0);
    sub_100008078(&qword_100116EA8, &qword_100116EB0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100116E98);
  }
  return result;
}

double sub_10007A3DC()
{
  uint64_t v0;

  return sub_10007690C((uint64_t *)(v0 + 16));
}

double sub_10007A3F0(uint64_t a1, char *a2)
{
  uint64_t v2;

  return sub_100076B70(a1, a2, v2 + 16);
}

unint64_t sub_10007A3F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100116ED8;
  if (!qword_100116ED8)
  {
    v1 = sub_100005608(&qword_100116E38);
    v2[0] = sub_100005608(&qword_100116E28);
    v2[1] = type metadata accessor for CalculatorKeypadViewModel(255);
    v2[2] = sub_10007A1D0();
    v2[3] = sub_100005178(&qword_100114AC8, type metadata accessor for CalculatorKeypadViewModel, (uint64_t)&unk_1000D2A00);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.environment<A>(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116ED8);
  }
  return result;
}

double sub_10007A4DC(uint64_t a1, char *a2)
{
  return sub_100076C40(a1, a2);
}

uint64_t sub_10007A4EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

double sub_10007A500(char a1, char a2)
{
  return sub_100076C98(a1, a2);
}

void sub_10007A524(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100076D8C(a1, a2, (uint64_t *)(v2 + 16));
}

unint64_t sub_10007A52C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116EE0;
  if (!qword_100116EE0)
  {
    v1 = sub_100005608(&qword_100116E58);
    sub_10007A5B0();
    sub_100008078(&qword_100116F00, &qword_100116F08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116EE0);
  }
  return result;
}

unint64_t sub_10007A5B0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  unint64_t v4;
  uint64_t v5;
  ValueMetadata *v6;
  unint64_t v7;
  void *v8;

  result = qword_100116EE8;
  if (!qword_100116EE8)
  {
    v1 = sub_100005608(&qword_100116E50);
    v2 = sub_100005608(&qword_100116E40);
    v5 = sub_100005608(&qword_100116E38);
    v6 = (ValueMetadata *)&type metadata for Bool;
    v7 = sub_10007A3F8();
    v8 = &protocol witness table for Bool;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v4 = sub_100049B04();
    v5 = v2;
    v6 = &type metadata for CalculatorAppMode;
    v7 = OpaqueTypeConformance2;
    v8 = (void *)v4;
    swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    sub_100008078(&qword_100116EF0, &qword_100116EF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyTransformModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116EE8);
  }
  return result;
}

uint64_t sub_10007A6D4()
{
  uint64_t v0;

  return sub_10008A15C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10007A70C(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100078CE8(a1, v2 + 16, *(_QWORD *)(v2 + 136), a2);
}

unint64_t sub_10007A71C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F50;
  if (!qword_100116F50)
  {
    v1 = sub_100005608(&qword_100116F40);
    sub_10007A7A0();
    sub_100008078(&qword_100116310, &qword_100116318, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F50);
  }
  return result;
}

unint64_t sub_10007A7A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F58;
  if (!qword_100116F58)
  {
    v1 = sub_100005608(&qword_100116F60);
    sub_10007A804();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ForEach<A, B, C>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F58);
  }
  return result;
}

unint64_t sub_10007A804()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F68;
  if (!qword_100116F68)
  {
    v1 = sub_100005608(&qword_100116F70);
    sub_10007A888();
    sub_100008078(&qword_100116FC0, &qword_100116FC8, (uint64_t)&protocol conformance descriptor for _MatchedGeometryEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F68);
  }
  return result;
}

unint64_t sub_10007A888()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F78;
  if (!qword_100116F78)
  {
    v1 = sub_100005608(&qword_100116F80);
    sub_10007A90C();
    sub_100008078(&qword_100116FB0, &qword_100116FB8, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F78);
  }
  return result;
}

unint64_t sub_10007A90C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100116F88;
  if (!qword_100116F88)
  {
    v1 = sub_100005608(&qword_100116F90);
    sub_10007A990();
    sub_100008078(&qword_100116FA0, &qword_100116FA8, (uint64_t)&protocol conformance descriptor for _AnchorWritingModifier<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100116F88);
  }
  return result;
}

unint64_t sub_10007A990()
{
  unint64_t result;

  result = qword_100116F98;
  if (!qword_100116F98)
  {
    result = swift_getWitnessTable(&unk_1000D1E98, &type metadata for CalculatorButtonView);
    atomic_store(result, (unint64_t *)&qword_100116F98);
  }
  return result;
}

uint64_t sub_10007A9D8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[13]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  return swift_deallocObject(v0, 153, 7);
}

void sub_10007AA3C(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100078B24(a1, v2 + 16, *(_QWORD *)(v2 + 144), a2);
}

void sub_10007AA50(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100078EAC(a1, (uint64_t *)(v2 + 16), a2);
}

unint64_t sub_10007AA58()
{
  unint64_t result;

  result = qword_100116FE0;
  if (!qword_100116FE0)
  {
    result = swift_getWitnessTable(&unk_1000D2038, &type metadata for CalculatorKeypadButton);
    atomic_store(result, (unint64_t *)&qword_100116FE0);
  }
  return result;
}

uint64_t sub_10007AA9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 23, 7);
}

_QWORD *sub_10007AAB4(double *a1)
{
  return sub_100079234(a1);
}

void sub_10007AAC0(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1000792D0(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_10007AAC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 23, 7);
}

uint64_t sub_10007AAD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  const mach_header_64 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = 0x1000000000000;
  if (!v2[22])
    v3 = 0;
  v4 = 0x10000000000;
  if (!v2[21])
    v4 = 0;
  v5 = &_mh_execute_header;
  if (!v2[20])
    v5 = 0;
  v6 = 0x1000000;
  if (!v2[19])
    v6 = 0;
  v7 = 0x10000;
  if (!v2[18])
    v7 = 0;
  v8 = 256;
  if (!v2[17])
    v8 = 0;
  return sub_100079658(a1, v8 | v2[16] | v7 | v6 | (unint64_t)v5 | v4 | v3, a2);
}

_QWORD *sub_10007AB6C(double *a1)
{
  return sub_1000797B4(a1);
}

uint64_t sub_10007AB74()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[14]);
  swift_release(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[19]);
  return swift_deallocObject(v0, 160, 7);
}

void sub_10007ABD8(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_100077EC8(a1, *(_BYTE *)(v2 + 16), v2 + 24, *(_QWORD *)(v2 + 144), *(_QWORD *)(v2 + 152), a2);
}

uint64_t sub_10007ABF0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[13]);
  swift_release(v0[16]);
  return swift_deallocObject(v0, 136, 7);
}

uint64_t sub_10007AC44()
{
  _QWORD v1[2];

  v1[0] = sub_100005608(&qword_100116E58);
  v1[1] = sub_10007A52C();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View._onModifierKeysChanged(mask:initial:_:)>>, 1);
}

uint64_t sub_10007AC9C()
{
  return sub_10007A6D4();
}

uint64_t sub_10007ACB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10007ACB8(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  return swift_release(a1[7]);
}

uint64_t sub_10007ACF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t sub_10007AD84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  swift_retain(v6);
  swift_release(v8);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_BYTE *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  swift_retain(v9);
  swift_release(v11);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t sub_10007AE40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_BYTE *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = v5;
  swift_release(v6);
  v7 = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = v7;
  swift_release(v8);
  swift_release(*(_QWORD *)(a1 + 48));
  v9 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v9);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t sub_10007AEC4(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10007AF0C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for CalculatorRPNDisplayView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000055DC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CalculatorRPNDisplayView);
}

uint64_t sub_10007AF6C(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1000F6870, 1);
}

uint64_t sub_10007AFA0()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.wrappedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_10007AFEC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  __int128 v5;
  char v6;

  v5 = *(_OWORD *)(v1 + 48);
  v6 = *(_BYTE *)(v1 + 64);
  v4 = a1;
  v2 = sub_100005360(&qword_1001170B0);
  return FocusState.Binding.wrappedValue.setter(&v4, v2);
}

uint64_t sub_10007B03C()
{
  uint64_t v0;
  uint64_t v2;

  v0 = sub_100005360(&qword_1001170B0);
  FocusState.Binding.projectedValue.getter(&v2, v0);
  return v2;
}

uint64_t sub_10007B08C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t TupleTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeConformance2;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t WitnessTable;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;

  v3 = v2;
  v105 = a2;
  v106 = a1;
  v107 = *(_QWORD *)(a1 + 16);
  v4 = type metadata accessor for Optional(255, v107);
  v5 = sub_100005608(&qword_100114F28);
  v7 = type metadata accessor for ModifiedContent(255, v4, v5, v6);
  v8 = sub_100005608(&qword_100117088);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v7, v8, 0, 0);
  v10 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v10);
  v11 = type metadata accessor for HStack(0, v10);
  v93 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v92 = (char *)&v85 - v13;
  v14 = sub_100005608(&qword_100117090);
  v15 = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v11);
  v16 = sub_10007C3C0();
  v111 = v11;
  v112 = v14;
  v113 = v15;
  v114 = v16;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v111, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v96 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v18);
  v108 = (char *)&v85 - v19;
  type metadata accessor for CalculateEngine(255);
  v21 = v20;
  v111 = v11;
  v112 = v14;
  v91 = v14;
  v90 = v15;
  v113 = v15;
  v114 = v16;
  v89 = v16;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v23 = sub_100005178(&qword_1001170A8, (uint64_t (*)(uint64_t))type metadata accessor for CalculateEngine, (uint64_t)&unk_1000CD038);
  v104 = OpaqueTypeMetadata2;
  v111 = OpaqueTypeMetadata2;
  v112 = v21;
  v94 = v21;
  v95 = OpaqueTypeConformance2;
  v113 = OpaqueTypeConformance2;
  v114 = v23;
  v97 = v23;
  v24 = swift_getOpaqueTypeMetadata2(0, &v111, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v101 = *(_QWORD *)(v24 - 8);
  v25 = __chkstk_darwin(v24, v24);
  v88 = (char *)&v85 - v26;
  v103 = v27;
  v99 = type metadata accessor for ModifiedContent(0, v27, &type metadata for _AppearanceActionModifier, v25);
  v102 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v28);
  v98 = (char *)&v85 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v31);
  v100 = (uint64_t)&v85 - v32;
  v34 = static VerticalAlignment.bottom.getter(v33);
  v35 = v34;
  if (qword_100113998 != -1)
    v34 = swift_once(&qword_100113998, sub_10001B758);
  __chkstk_darwin(v34, qword_10011F820);
  v36 = v107;
  v106 = *(_QWORD *)(v106 + 24);
  v37 = v106;
  *(&v85 - 4) = v107;
  *(&v85 - 3) = v37;
  *(&v85 - 2) = v2;
  v38 = v92;
  HStack.init(alignment:spacing:content:)(v35, v39, 0, sub_10007C43C, &v85 - 6, v10, WitnessTable);
  v40 = *(_QWORD *)(v2 + 16);
  v41 = *(_BYTE *)(v2 + 24);
  LODWORD(WitnessTable) = v41;
  swift_retain(v40);
  v43 = sub_100043890(v42, v41);
  swift_release(v40);
  v44 = *(_QWORD *)(v43 + 16);
  swift_retain(v44);
  swift_release(v43);
  KeyPath = swift_getKeyPath(&unk_1000D23A8);
  v111 = v44;
  v46 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v111, KeyPath, v46);
  swift_release(KeyPath);
  v47 = *(_QWORD *)(v44 + 24);
  swift_retain(v47);
  v48 = swift_release(v44);
  v49 = CalculateExpression.postfixStack.getter(v48);
  swift_release(v47);
  v111 = v49;
  v50 = *(_QWORD *)(v3 + 8);
  v51 = *(_QWORD *)(v3 + 32);
  v117 = *(_BYTE *)(v3 + 40);
  v52 = *(_QWORD *)(v3 + 56);
  v115 = *(_QWORD *)(v3 + 48);
  v116 = v51;
  v53 = swift_allocObject(&unk_10010C038, 97, 7);
  v54 = v36;
  *(_QWORD *)(v53 + 16) = v36;
  v55 = v106;
  *(_QWORD *)(v53 + 24) = v106;
  v56 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v53 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v53 + 80) = v56;
  *(_BYTE *)(v53 + 96) = *(_BYTE *)(v3 + 64);
  v57 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v53 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v53 + 48) = v57;
  swift_retain(v40);
  swift_retain(v50);
  sub_100052DCC(&v116);
  sub_100052DCC(&v115);
  v86 = v52;
  swift_retain(v52);
  View.onChange<A>(of:initial:_:)(&v111, 0, sub_10007C454, v53, v11, v91, v90, v89);
  swift_release(v53);
  swift_bridgeObjectRelease(v111);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v38, v11);
  swift_retain(v40);
  v59 = sub_100043890(v58, WitnessTable);
  swift_release(v40);
  v60 = swift_getKeyPath(&unk_1000D23D0);
  v111 = v59;
  v61 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v111, v60, v61);
  swift_release(v60);
  v62 = *(_QWORD *)(v59 + 72);
  swift_release(v59);
  v111 = v62;
  v63 = swift_allocObject(&unk_10010C060, 97, 7);
  *(_QWORD *)(v63 + 16) = v54;
  *(_QWORD *)(v63 + 24) = v55;
  v64 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v63 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v63 + 80) = v64;
  *(_BYTE *)(v63 + 96) = *(_BYTE *)(v3 + 64);
  v65 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v63 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v63 + 48) = v65;
  swift_retain(v40);
  swift_retain(v50);
  sub_100052DCC(&v116);
  sub_100052DCC(&v115);
  swift_retain(v52);
  v66 = swift_checkMetadataState(0, v94);
  v67 = v88;
  v68 = v104;
  v69 = v95;
  v70 = v97;
  v71 = v108;
  View.onChange<A>(of:initial:_:)(&v111, 0, sub_10007C46C, v63, v104, v66, v95, v97);
  v72 = swift_release(v63);
  (*(void (**)(char *, uint64_t, __n128))(v96 + 8))(v71, v68, v72);
  v73 = swift_allocObject(&unk_10010C088, 97, 7);
  v74 = v106;
  *(_QWORD *)(v73 + 16) = v107;
  *(_QWORD *)(v73 + 24) = v74;
  v75 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v73 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v73 + 80) = v75;
  *(_BYTE *)(v73 + 96) = *(_BYTE *)(v3 + 64);
  v76 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v73 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v73 + 48) = v76;
  swift_retain(v40);
  swift_retain(v50);
  sub_100052DCC(&v116);
  sub_100052DCC(&v115);
  swift_retain(v86);
  v111 = v68;
  v112 = v66;
  v113 = v69;
  v114 = v70;
  v77 = swift_getOpaqueTypeConformance2(&v111, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v78 = (uint64_t)v98;
  v79 = v103;
  View.onDisappear(perform:)(sub_10007C47C, v73, v103, v77);
  v80 = swift_release(v73);
  (*(void (**)(char *, uint64_t, __n128))(v101 + 8))(v67, v79, v80);
  v109 = v77;
  v110 = &protocol witness table for _AppearanceActionModifier;
  v81 = v99;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v99);
  v82 = v100;
  sub_100046714(v78, v81, v100);
  v83 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
  v83(v78, v81);
  sub_10003E144(v82, v81, v105);
  return ((uint64_t (*)(uint64_t, uint64_t))v83)(v82, v81);
}

uint64_t sub_10007B840@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(char *, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char *v36;
  uint64_t (*v37)(__n128);
  uint64_t v38;
  uint64_t v39;
  uint64_t WitnessTable;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t KeyPath;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t (*v92)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  void (**v111)(char *, uint64_t, __n128);
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t OpaqueTypeConformance2;
  _QWORD v125[2];
  uint64_t v126[5];
  _OWORD v127[3];
  uint64_t v128;
  uint64_t v129;
  char v130;

  v95 = a3;
  v98 = a2;
  v118 = a4;
  v101 = type metadata accessor for Color.RGBColorSpace(0);
  v100 = *(_QWORD *)(v101 - 8);
  v8 = __chkstk_darwin(v101, v7);
  v99 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for CalculateExpressionStackView(0, v8);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108, v10);
  v97 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100005360(&qword_1001170B8);
  __chkstk_darwin(v106, v12);
  v105 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100005360(&qword_1001170C0);
  __chkstk_darwin(v114, v14);
  v112 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100005360(&qword_100117088);
  v115 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117, v16);
  v116 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v113 = (char *)&v94 - v20;
  v21 = type metadata accessor for Optional(0, a2);
  v111 = *(void (***)(char *, uint64_t, __n128))(v21 - 8);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v94 - v23;
  v25 = sub_100005608(&qword_100114F28);
  v27 = type metadata accessor for ModifiedContent(0, v21, v25, v26);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  v31 = (void (**)(char *, uint64_t, __n128))((char *)&v94 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = __chkstk_darwin(v32, v33);
  v36 = (char *)&v94 - v35;
  v37 = *(uint64_t (**)(__n128))a1;
  v96 = *(_QWORD *)(a1 + 8);
  v38 = v37(v34);
  v39 = static Font.footnote.getter(v38);
  v126[4] = a3;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v21);
  View.font(_:)(v39, v21, WitnessTable);
  v41 = swift_release(v39);
  v111[1](v24, v21, v41);
  v42 = sub_10007C490();
  v126[2] = WitnessTable;
  v126[3] = v42;
  v43 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v27);
  v110 = v36;
  v102 = v43;
  sub_100046714((uint64_t)v31, v27, (uint64_t)v36);
  v104 = v28;
  v44 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 8);
  v111 = v31;
  v109 = v27;
  v103 = v44;
  v44((uint64_t)v31, v27);
  v45 = *(_QWORD *)(a1 + 16);
  v46 = *(_BYTE *)(a1 + 24);
  v47 = ((uint64_t (*)(uint64_t))swift_retain)(v45);
  v48 = sub_100043890(v47, v46);
  swift_release(v45);
  v49 = *(_QWORD *)(v48 + 16);
  swift_retain(v49);
  swift_release(v48);
  KeyPath = swift_getKeyPath(&unk_1000D23A8);
  *(_QWORD *)&v127[0] = v49;
  v51 = sub_100005178(&qword_100114A28, type metadata accessor for CalculatorExpressionManager, (uint64_t)&unk_1000D3C90);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v127, KeyPath, v51);
  swift_release(KeyPath);
  v52 = *(_QWORD *)(v49 + 24);
  swift_retain(v52);
  swift_release(v49);
  v54 = static Color.white.getter(v53);
  v55 = *(_QWORD *)(a1 + 32);
  v130 = *(_BYTE *)(a1 + 40);
  v56 = *(_QWORD *)(a1 + 56);
  v128 = *(_QWORD *)(a1 + 48);
  v129 = v55;
  v57 = swift_allocObject(&unk_10010C0B0, 97, 7);
  v58 = v95;
  *(_QWORD *)(v57 + 16) = v98;
  *(_QWORD *)(v57 + 24) = v58;
  v59 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v57 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v57 + 80) = v59;
  *(_BYTE *)(v57 + 96) = *(_BYTE *)(a1 + 64);
  v60 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v57 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v57 + 48) = v60;
  v61 = v99;
  (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v99, enum case for Color.RGBColorSpace.sRGB(_:), v101);
  swift_retain(v45);
  swift_retain(v96);
  sub_100052DCC(&v129);
  sub_100052DCC(&v128);
  swift_retain(v56);
  v62 = Color.init(_:white:opacity:)(v61, 1.0, 0.8);
  v63 = v97;
  v64 = CalculateExpressionStackView.init(expression:textAlignment:textColor:rowCount:separatorColor:operationCallback:)(v52, 2, v54, 4, v62, sub_10007C524, v57);
  if (qword_100113B50 != -1)
    v64 = swift_once(&qword_100113B50, sub_10001BB50);
  v65 = qword_10011F9D8;
  v66 = static Alignment.center.getter(v64);
  _FrameLayout.init(width:height:alignment:)(v127, 0, 1, v65, 0, v66, v67);
  v68 = v107;
  v69 = (uint64_t)v105;
  v70 = v108;
  (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v105, v63, v108);
  v71 = v106;
  v72 = (_OWORD *)(v69 + *(int *)(v106 + 36));
  v73 = v127[1];
  *v72 = v127[0];
  v72[1] = v73;
  v72[2] = v127[2];
  (*(void (**)(char *, uint64_t))(v68 + 8))(v63, v70);
  v74 = sub_10007C530();
  v75 = (uint64_t)v112;
  View.accessibilityIdentifier(_:)(0xD000000000000018, 0x80000001000D2300, v71, v74);
  sub_100004F48(v69, &qword_1001170B8);
  v76 = sub_10007B03C();
  v78 = v77;
  v119 = v76;
  v120 = v77;
  LOBYTE(v121) = v79;
  LOBYTE(v126[0]) = 4;
  v80 = sub_100005360(&qword_100116458);
  v108 = v80;
  v81 = sub_10007C5B4();
  v82 = sub_10007C638();
  v83 = (uint64_t)v116;
  v84 = v114;
  View.focused<A>(_:equals:)(&v119, v126, v114, v80, v81, v82);
  swift_release(v78);
  swift_release(v76);
  sub_100004F48(v75, &qword_1001170C0);
  v85 = v115;
  v86 = v113;
  v87 = v117;
  (*(void (**)(char *, uint64_t, uint64_t))(v115 + 32))(v113, v83, v117);
  v88 = (uint64_t)v111;
  v89 = v110;
  v90 = v109;
  (*(void (**)(void (**)(char *, uint64_t, __n128), char *, uint64_t))(v104 + 16))(v111, v110, v109);
  v126[0] = v88;
  (*(void (**)(uint64_t, char *, uint64_t))(v85 + 16))(v83, v86, v87);
  v126[1] = v83;
  v125[0] = v90;
  v125[1] = v87;
  v122 = v82;
  v123 = v102;
  v119 = v84;
  v120 = v108;
  v121 = v81;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v119, &opaque type descriptor for <<opaque return type of View.focused<A>(_:equals:)>>, 1);
  sub_10003E15C(v126, 2uLL, (uint64_t)v125);
  v91 = *(void (**)(char *, uint64_t))(v85 + 8);
  v91(v86, v87);
  v92 = v103;
  v103((uint64_t)v89, v90);
  v91((char *)v83, v87);
  return v92(v88, v90);
}

double sub_10007C014(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = swift_retain(v3);
  v6 = sub_100043890(v5, v4);
  swift_release(v3);
  sub_10002816C(a1, 0);
  *(_QWORD *)&result = swift_release(v6).n128_u64[0];
  return result;
}

_QWORD *sub_10007C070(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  __int128 *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[3];
  char v14;
  char v15;
  __int128 v16;
  char v17;

  v16 = *(_OWORD *)(a1 + 48);
  v17 = *(_BYTE *)(a1 + 64);
  v2 = sub_100005360(&qword_1001170B0);
  result = FocusState.Binding.wrappedValue.getter(&v15, v2);
  if (v15 != 6)
  {
    v4 = (__int128 *)(a1 + 48);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_BYTE *)(a1 + 24);
    swift_retain(v5);
    v8 = sub_100043890(v7, v6);
    swift_release(v5);
    KeyPath = swift_getKeyPath(&unk_1000D23F8);
    __chkstk_darwin(KeyPath, v10);
    v13[2] = v8;
    v14 = 6;
    *(_QWORD *)&v16 = v8;
    v11 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v16, KeyPath, sub_100061D5C, v13, (char *)&type metadata for () + 8, v11);
    swift_release(v8);
    swift_release(KeyPath);
    v16 = *v4;
    v17 = *((_BYTE *)v4 + 16);
    v15 = 6;
    v12 = sub_100005360(&qword_1001170B0);
    return (_QWORD *)FocusState.Binding.wrappedValue.setter(&v15, v12);
  }
  return result;
}

double sub_10007C1E0(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 24);
  swift_retain(v1);
  v4 = sub_100043890(v3, v2);
  swift_release(v1);
  KeyPath = swift_getKeyPath(&unk_1000D23F8);
  v8[2] = v4;
  v9 = 6;
  v10 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_100061D5C, v8, (char *)&type metadata for () + 8, v6);
  swift_release(v4);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

double sub_10007C2B0(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  double result;
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_BYTE *)(a1 + 24);
  swift_retain(v1);
  v4 = sub_100043890(v3, v2);
  swift_release(v1);
  KeyPath = swift_getKeyPath(&unk_1000D23F8);
  v8[2] = v4;
  v9 = 6;
  v10 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v10, KeyPath, sub_10006127C, v8, (char *)&type metadata for () + 8, v6);
  swift_release(v4);
  *(_QWORD *)&result = swift_release(KeyPath).n128_u64[0];
  return result;
}

uint64_t sub_10007C380@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10007B08C(a1, a2);
}

unint64_t sub_10007C3C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117098;
  if (!qword_100117098)
  {
    v1 = sub_100005608(&qword_100117090);
    sub_100005178(&qword_1001170A0, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpression, (uint64_t)&protocol conformance descriptor for CalculateExpression);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100117098);
  }
  return result;
}

uint64_t sub_10007C43C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10007B840(v1[4], v1[2], v1[3], a1);
}

_QWORD *sub_10007C454()
{
  uint64_t v0;

  return sub_10007C070(v0 + 32);
}

double sub_10007C46C()
{
  uint64_t v0;

  return sub_10007C1E0(v0 + 32);
}

double sub_10007C47C()
{
  uint64_t v0;

  return sub_10007C2B0(v0 + 32);
}

unint64_t sub_10007C490()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114F20;
  if (!qword_100114F20)
  {
    v1 = sub_100005608(&qword_100114F28);
    result = swift_getWitnessTable(&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100114F20);
  }
  return result;
}

uint64_t sub_10007C4E0()
{
  _QWORD *v0;

  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 97, 7);
}

double sub_10007C524(_QWORD *a1)
{
  uint64_t v1;

  return sub_10007C014(a1, v1 + 32);
}

unint64_t sub_10007C530()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001170C8;
  if (!qword_1001170C8)
  {
    v1 = sub_100005608(&qword_1001170B8);
    sub_100005178(&qword_1001170D0, (uint64_t (*)(uint64_t))&type metadata accessor for CalculateExpressionStackView, (uint64_t)&protocol conformance descriptor for CalculateExpressionStackView);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001170C8);
  }
  return result;
}

unint64_t sub_10007C5B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001170D8;
  if (!qword_1001170D8)
  {
    v1 = sub_100005608(&qword_1001170C0);
    sub_10007C530();
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001170D8);
  }
  return result;
}

unint64_t sub_10007C638()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001170E0;
  if (!qword_1001170E0)
  {
    v1 = sub_100005608(&qword_100116458);
    sub_100067D08();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1001170E0);
  }
  return result;
}

uint64_t sub_10007C69C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t TupleTypeMetadata2;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t WitnessTable;
  unint64_t v11;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v13;
  uint64_t v14;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v1 = type metadata accessor for Optional(255, *a1);
  v2 = sub_100005608(&qword_100114F28);
  v4 = type metadata accessor for ModifiedContent(255, v1, v2, v3);
  v5 = sub_100005608(&qword_100117088);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v4, v5, 0, 0);
  v7 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v7);
  v8 = type metadata accessor for HStack(255, v7);
  v9 = sub_100005608(&qword_100117090);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HStack<A>, v8);
  v11 = sub_10007C3C0();
  v21 = v8;
  v22 = v9;
  v23 = WitnessTable;
  v24 = v11;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v21, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  type metadata accessor for CalculateEngine(255);
  v14 = v13;
  v21 = v8;
  v22 = v9;
  v23 = WitnessTable;
  v24 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v16 = sub_100005178(&qword_1001170A8, (uint64_t (*)(uint64_t))type metadata accessor for CalculateEngine, (uint64_t)&unk_1000CD038);
  v21 = OpaqueTypeMetadata2;
  v22 = v14;
  v23 = OpaqueTypeConformance2;
  v24 = v16;
  v17 = swift_getOpaqueTypeMetadata2(255, &v21, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v19 = type metadata accessor for ModifiedContent(255, v17, &type metadata for _AppearanceActionModifier, v18);
  v21 = OpaqueTypeMetadata2;
  v22 = v14;
  v23 = OpaqueTypeConformance2;
  v24 = v16;
  swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
}

id sub_10007C868(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  NSString v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v12;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = 0;
  v7 = objc_msgSend(v3, "initWithBundleIdentifier:allowPlaceholder:error:", v6, a3 & 1, &v12);

  v8 = v12;
  if (v7)
  {
    v9 = v12;
  }
  else
  {
    v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
  return v7;
}

uint64_t sub_10007C940()
{
  id v0;
  id v1;
  id v2;
  void *v4;
  id v5;
  unsigned __int8 v6;
  id v7;
  unsigned __int8 v8;
  id v9;

  v0 = objc_allocWithZone((Class)LSApplicationRecord);
  v1 = sub_10007C868(0xD000000000000015, 0x80000001000D7040, 0);
  v4 = v1;
  if (!v1)
    return 0;
  v5 = objc_msgSend(v1, "applicationState");
  v6 = objc_msgSend(v5, "isRestricted");

  if ((v6 & 1) != 0)
  {

    return 0;
  }
  v7 = objc_msgSend(v4, "applicationState");
  v8 = objc_msgSend(v7, "isInstalled");

  if ((v8 & 1) != 0)
  {

    return 1;
  }
  else
  {
    v9 = objc_msgSend(v4, "applicationState");
    v2 = objc_msgSend(v9, "isPlaceholder");

  }
  return (uint64_t)v2;
}

id sub_10007CAD8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_10007CB08(void *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v2 = objc_msgSend(a1, "role");
  v3 = objc_msgSend(objc_allocWithZone((Class)UISceneConfiguration), "initWithName:sessionRole:", 0, v2);

  v4 = objc_msgSend(a1, "role");
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIWindowSceneSessionRoleApplication);
  if (v5 == v8 && v7 == v9)
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);

    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0)
      return v3;
  }
  v13 = type metadata accessor for SceneDelegate();
  objc_msgSend(v3, "setDelegateClass:", swift_getObjCClassFromMetadata(v13));
  return v3;
}

uint64_t destroy for BounceEffect(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for BounceEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for BounceEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for BounceEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for BounceEffect(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BounceEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for BounceEffect()
{
  return &type metadata for BounceEffect;
}

uint64_t sub_10007CDCC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F68FC, 1);
}

uint64_t sub_10007CDDC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;

  v37 = a1;
  v40 = a4;
  v10 = sub_100005360(&qword_1001171E0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100005360(&qword_1001171E8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100005360(&qword_1001171F0);
  __chkstk_darwin(v38, v18);
  v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100005360(&qword_1001171F8);
  __chkstk_darwin(v39, v21);
  v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = a2;
  v42 = a3;
  v24 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.getter(&v43, v24);
  if ((_BYTE)v43)
    v25 = a5;
  else
    v25 = 0.0;
  v26 = sub_100005360(&qword_100117200);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v13, v37, v26);
  v27 = &v13[*(int *)(v10 + 36)];
  *(_QWORD *)v27 = 0;
  *((double *)v27 + 1) = v25;
  v28 = static Animation.spring(response:dampingFraction:blendDuration:)(0.35, 0.7, 0.0);
  v29 = Animation.delay(_:)(a6 / 3.0);
  swift_release(v28);
  v41 = a2;
  v42 = a3;
  State.wrappedValue.getter(&v43, v24);
  LOBYTE(v28) = v43;
  sub_10000531C((uint64_t)v13, (uint64_t)v17, &qword_1001171E0);
  v30 = &v17[*(int *)(v14 + 36)];
  *(_QWORD *)v30 = v29;
  v30[8] = v28;
  sub_100004F48((uint64_t)v13, &qword_1001171E0);
  v31 = swift_allocObject(&unk_10010C198, 48, 7);
  *(_BYTE *)(v31 + 16) = a2;
  *(_QWORD *)(v31 + 24) = a3;
  *(double *)(v31 + 32) = a5;
  *(double *)(v31 + 40) = a6;
  sub_10000531C((uint64_t)v17, (uint64_t)v20, &qword_1001171E8);
  v32 = &v20[*(int *)(v38 + 36)];
  *(_QWORD *)v32 = sub_10007D140;
  *((_QWORD *)v32 + 1) = v31;
  *((_QWORD *)v32 + 2) = 0;
  *((_QWORD *)v32 + 3) = 0;
  swift_retain(a3);
  sub_100004F48((uint64_t)v17, &qword_1001171E8);
  v33 = swift_allocObject(&unk_10010C1C0, 48, 7);
  *(_BYTE *)(v33 + 16) = a2;
  *(_QWORD *)(v33 + 24) = a3;
  *(double *)(v33 + 32) = a5;
  *(double *)(v33 + 40) = a6;
  sub_10000531C((uint64_t)v20, (uint64_t)v23, &qword_1001171F0);
  v34 = &v23[*(int *)(v39 + 36)];
  *(_QWORD *)v34 = 0;
  *((_QWORD *)v34 + 1) = 0;
  *((_QWORD *)v34 + 2) = sub_10007D140;
  *((_QWORD *)v34 + 3) = v33;
  swift_retain(a3);
  sub_100004F48((uint64_t)v20, &qword_1001171F0);
  return sub_10007D194((uint64_t)v23, v40);
}

uint64_t sub_10007D10C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10007CDDC(a1, *(_BYTE *)v2, *(_QWORD *)(v2 + 8), a2, *(double *)(v2 + 16), *(double *)(v2 + 24));
}

uint64_t sub_10007D11C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10007D144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[9];
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 24);
  v4[1] = *(_BYTE *)(v0 + 16);
  v5 = v1;
  v4[0] = 0;
  v2 = sub_100005360(&qword_100113FF8);
  return State.wrappedValue.setter(v4, v2);
}

uint64_t sub_10007D194(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100005360(&qword_1001171F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007D1DC()
{
  return sub_10007D224(&qword_100117208, &qword_1001171F8, (void (*)(void))sub_10007D208);
}

uint64_t sub_10007D208()
{
  return sub_10007D224(&qword_100117210, &qword_1001171F0, (void (*)(void))sub_10007D290);
}

uint64_t sub_10007D224(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100005608(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10007D290()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117218;
  if (!qword_100117218)
  {
    v1 = sub_100005608(&qword_1001171E8);
    sub_10007D314();
    sub_100008078(&qword_100115558, &qword_100115550, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117218);
  }
  return result;
}

unint64_t sub_10007D314()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117220;
  if (!qword_100117220)
  {
    v1 = sub_100005608(&qword_1001171E0);
    sub_100008078(&qword_100117228, &qword_100117200, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117220);
  }
  return result;
}

id sub_10007D39C()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v4;

  KeyPath = swift_getKeyPath(&unk_1000D2540);
  v4 = v0;
  v2 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v4, KeyPath, v2);
  swift_release(KeyPath);
  return *(id *)(v0 + 16);
}

id sub_10007D408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t KeyPath;
  unint64_t v3;
  void *v4;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD v22[2];
  _OWORD v23[2];
  _QWORD v24[4];

  v1 = v0;
  KeyPath = swift_getKeyPath(&unk_1000D2590);
  v24[0] = v0;
  v3 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v24, KeyPath, v3);
  swift_release(KeyPath);
  v4 = *(void **)(v0 + 40);
  if (v4)
    return v4;
  if (qword_100113F10 != -1)
    goto LABEL_25;
  while (1)
  {
    v6 = (void *)qword_10011FED8;
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "objectForKey:", v7);

    if (v8)
    {
      _bridgeAnyObjectToAny(_:)(v23, v8);
      swift_unknownObjectRelease(v8);
    }
    else
    {
      memset(v23, 0, sizeof(v23));
    }
    sub_100004E58((uint64_t)v23, (uint64_t)v24);
    if (v24[3])
    {
      if ((swift_dynamicCast(v22, v24, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v9 = v22[0];
        v10 = v22[1];
        v11 = swift_getKeyPath(&unk_1000D2540);
        v24[0] = v1;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v24, v11, v3);
        v12 = objc_msgSend(*(id *)(v1 + 16), "categories", swift_release(v11).n128_f64[0]);
        v13 = sub_10000A5A8(0, (unint64_t *)&qword_100117318, CalculateUnitCategory_ptr);
        v14 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

        swift_bridgeObjectRetain(v10);
        v15 = sub_100080EFC(v14, v9, v10, (uint64_t (*)(void))&CalculateUnitCategory.id.getter);
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease_n(v10, 2);
        if (v15)
          return v15;
      }
    }
    else
    {
      sub_100039C90((uint64_t)v24);
    }
    v15 = (void *)swift_getKeyPath(&unk_1000D2540);
    v24[0] = v1;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v24, v15, v3);
    v16 = objc_msgSend(*(id *)(v1 + 16), "categories", swift_release(v15).n128_f64[0]);
    v17 = sub_10000A5A8(0, (unint64_t *)&qword_100117318, CalculateUnitCategory_ptr);
    v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    if ((unint64_t)v1 >> 62)
      break;
    v18 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (!v18)
      goto LABEL_21;
LABEL_14:
    v19 = 4;
    while (1)
    {
      v20 = (v1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v1)
          : *(id *)(v1 + 8 * v19);
      v15 = v20;
      v3 = v19 - 3;
      if (__OFADD__(v19 - 4, 1))
        break;
      if (objc_msgSend(v20, "unitType") == (id)16)
        goto LABEL_22;

      ++v19;
      if (v3 == v18)
        goto LABEL_21;
    }
    __break(1u);
LABEL_25:
    swift_once(&qword_100113F10, sub_1000A8D50);
  }
  if (v1 < 0)
    v21 = v1;
  else
    v21 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v18 = _CocoaArrayWrapper.endIndex.getter(v21);
  if (v18)
    goto LABEL_14;
LABEL_21:
  swift_bridgeObjectRelease_n(v1, 2);
  __break(1u);
LABEL_22:
  swift_bridgeObjectRelease_n(v1, 2);
  return v15;
}

id sub_10007D774()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  void *v3;
  id v4;
  void *v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v17[2];
  _OWORD v18[2];
  _QWORD v19[4];

  KeyPath = swift_getKeyPath(&unk_1000D25B8);
  v19[0] = v0;
  v2 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 48);
  if (v3)
  {
    v4 = *(id *)(v0 + 48);
    goto LABEL_14;
  }
  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v5 = (void *)qword_10011FED8;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "objectForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v18, v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_100004E58((uint64_t)v18, (uint64_t)v19);
  if (!v19[3])
  {
    sub_100039C90((uint64_t)v19);
LABEL_13:
    v14 = sub_10007D408();
    v4 = objc_msgSend(v14, "preferredFromUnit");

    goto LABEL_14;
  }
  if ((swift_dynamicCast(v17, v19, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_13;
  v8 = v17[0];
  v9 = v17[1];
  v10 = sub_10007D408();
  v11 = objc_msgSend(v10, "units");

  v12 = sub_10000A5A8(0, (unint64_t *)&qword_1001145E0, CalculateUnit_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  swift_bridgeObjectRetain(v9);
  v4 = sub_100080EFC(v13, v8, v9, (uint64_t (*)(void))&CalculateUnit.id.getter);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease_n(v9, 2);
  if (!v4)
    goto LABEL_13;
LABEL_14:
  v15 = v3;
  return v4;
}

id sub_10007D9A4()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  void *v3;
  id v4;
  void *v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  _QWORD v17[2];
  _OWORD v18[2];
  _QWORD v19[4];

  KeyPath = swift_getKeyPath(&unk_1000D25E0);
  v19[0] = v0;
  v2 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v19, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 56);
  if (v3)
  {
    v4 = *(id *)(v0 + 56);
    goto LABEL_14;
  }
  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v5 = (void *)qword_10011FED8;
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "objectForKey:", v6);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v18, v7);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  sub_100004E58((uint64_t)v18, (uint64_t)v19);
  if (!v19[3])
  {
    sub_100039C90((uint64_t)v19);
LABEL_13:
    v14 = sub_10007D408();
    v4 = objc_msgSend(v14, "preferredToUnit");

    goto LABEL_14;
  }
  if ((swift_dynamicCast(v17, v19, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    goto LABEL_13;
  v8 = v17[0];
  v9 = v17[1];
  v10 = sub_10007D408();
  v11 = objc_msgSend(v10, "units");

  v12 = sub_10000A5A8(0, (unint64_t *)&qword_1001145E0, CalculateUnit_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  swift_bridgeObjectRetain(v9);
  v4 = sub_100080EFC(v13, v8, v9, (uint64_t (*)(void))&CalculateUnit.id.getter);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease_n(v9, 2);
  if (!v4)
    goto LABEL_13;
LABEL_14:
  v15 = v3;
  return v4;
}

_QWORD *sub_10007DBD4(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_1000137EC(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v15 = v1 & 0xC000000000000001;
    v5 = v1;
    while (v2 != v4)
    {
      if (v15)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      else
        v6 = *(id *)(v1 + 8 * v4 + 32);
      v7 = v6;
      v8 = CalculateUnit.id.getter(v6);
      v10 = v9;

      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_1000137EC(v11 > 1, v12 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      v1 = v5;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v1 < 0)
      v14 = v1;
    else
      v14 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(v1);
  }
  __break(1u);
  return result;
}

_QWORD *sub_10007DD3C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for CalculatorUnitConversionDataProvider(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = sub_10007E83C();
  qword_10011FE08 = v1;
  return result;
}

void sub_10007DD78(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2;
  v3 = a2;

}

uint64_t sub_10007DDA8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  _QWORD *v46;

  v1 = *(_QWORD **)(v0 + 24);
  if (v1)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
    return (uint64_t)v1;
  }
  v2 = v0;
  KeyPath = swift_getKeyPath(&unk_1000D2540);
  v46 = (_QWORD *)v0;
  v4 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v46, KeyPath, v4);
  v5 = objc_msgSend(*(id *)(v0 + 16), "categories", swift_release(KeyPath).n128_f64[0]);
  v6 = sub_10000A5A8(0, (unint64_t *)&qword_100117318, CalculateUnitCategory_ptr);
  isUniquelyReferenced_nonNull_native = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  v1 = (_QWORD *)sub_10001C650((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)isUniquelyReferenced_nonNull_native >> 62)
  {
LABEL_30:
    if (isUniquelyReferenced_nonNull_native < 0)
      v37 = isUniquelyReferenced_nonNull_native;
    else
      v37 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(isUniquelyReferenced_nonNull_native, 2);
    v8 = _CocoaArrayWrapper.endIndex.getter(v37);
    swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
    v40 = v2;
    if (v8)
      goto LABEL_5;
LABEL_34:
    swift_bridgeObjectRelease_n(isUniquelyReferenced_nonNull_native, 2);
    v38 = *(_QWORD *)(v40 + 24);
    *(_QWORD *)(v40 + 24) = v1;
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRelease(v38);
    return (uint64_t)v1;
  }
  v8 = *(_QWORD *)((isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
  v40 = v0;
  if (!v8)
    goto LABEL_34;
LABEL_5:
  v2 = 0;
  v41 = isUniquelyReferenced_nonNull_native;
  v42 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  v9 = 4;
  while (1)
  {
    if (v42)
      v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, isUniquelyReferenced_nonNull_native);
    else
      v13 = *(id *)(isUniquelyReferenced_nonNull_native + 8 * v9);
    v14 = v13;
    if (__OFADD__(v9 - 4, 1))
    {
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v15 = CalculateUnitCategory.id.getter();
    v45 = v16;
    v44 = v14;
    v17 = objc_msgSend(v44, "units");
    v18 = sub_10000A5A8(0, (unint64_t *)&qword_1001145E0, CalculateUnit_ptr);
    v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

    v43 = v9 - 3;
    if (v19 < 0 || (v19 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain(v19);
      v20 = (uint64_t)sub_1000799C4(v36);
      swift_bridgeObjectRelease(v19);
    }
    else
    {
      v20 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
    }
    v46 = (_QWORD *)v20;
    sub_10007FC28((uint64_t *)&v46);
    swift_bridgeObjectRelease(v19);
    v21 = (uint64_t)v46;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
    v46 = v1;
    v22 = v15;
    v24 = sub_1000053A4(v15, v45);
    v25 = v1[2];
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
      goto LABEL_28;
    v28 = v23;
    if (v1[3] < v27)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v1 = v46;
      if ((v23 & 1) != 0)
        goto LABEL_6;
    }
    else
    {
      sub_10001DF54();
      v1 = v46;
      if ((v28 & 1) != 0)
      {
LABEL_6:
        v10 = v1[7] + 16 * v24;
        v11 = *(void **)v10;
        swift_bridgeObjectRelease(*(_QWORD *)(v10 + 8));

        isUniquelyReferenced_nonNull_native = (uint64_t)v44;
        *(_QWORD *)v10 = v44;
        *(_QWORD *)(v10 + 8) = v21;
        v12 = v45;
        goto LABEL_7;
      }
    }
LABEL_22:
    v1[(v24 >> 6) + 8] |= 1 << v24;
    v31 = (uint64_t *)(v1[6] + 16 * v24);
    isUniquelyReferenced_nonNull_native = (uint64_t)v44;
    v12 = v45;
    *v31 = v22;
    v31[1] = v45;
    v32 = (_QWORD *)(v1[7] + 16 * v24);
    *v32 = v44;
    v32[1] = v21;
    v33 = v1[2];
    v34 = __OFADD__(v33, 1);
    v35 = v33 + 1;
    if (v34)
      goto LABEL_29;
    v1[2] = v35;
    swift_bridgeObjectRetain(v45);
LABEL_7:

    swift_bridgeObjectRelease(v12);
    swift_bridgeObjectRelease(0x8000000000000000);
    ++v9;
    isUniquelyReferenced_nonNull_native = v41;
    if (v43 == v8)
      goto LABEL_34;
  }
  sub_10001D718(v27, isUniquelyReferenced_nonNull_native);
  v29 = sub_1000053A4(v22, v45);
  if ((v28 & 1) == (v30 & 1))
  {
    v24 = v29;
    v1 = v46;
    if ((v28 & 1) != 0)
      goto LABEL_6;
    goto LABEL_22;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

double sub_10007E170()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  double result;
  _QWORD v4[3];

  KeyPath = swift_getKeyPath(&unk_1000D2568);
  v4[0] = v0;
  v2 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v4, KeyPath, v2);
  swift_release(KeyPath);
  swift_beginAccess(v0 + 32, v4, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32)).n128_u64[0];
  return result;
}

double sub_10007E1F4@<D0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  double result;
  _QWORD v8[3];

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D2568);
  v8[0] = v3;
  v5 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v8, KeyPath, v5);
  swift_release(KeyPath);
  swift_beginAccess(v3 + 32, v8, 0, 0);
  v6 = *(_QWORD *)(v3 + 32);
  *a2 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v6).n128_u64[0];
  return result;
}

uint64_t sub_10007E280(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D2568);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_10007FBE0();
  swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_100081204, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

void *sub_10007E320()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D2590);
  v6 = v0;
  v2 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 40);
  v4 = v3;
  return v3;
}

id sub_10007E394@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D2590);
  v8 = v3;
  v5 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 40);
  *a2 = v6;
  return v6;
}

void sub_10007E408(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D2590);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_10007FBE0();
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000811F0, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

void sub_10007E4A4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = a2;
  v3 = a2;

}

void *sub_10007E4D4()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D25B8);
  v6 = v0;
  v2 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 48);
  v4 = v3;
  return v3;
}

id sub_10007E548@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D25B8);
  v8 = v3;
  v5 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 48);
  *a2 = v6;
  return v6;
}

void sub_10007E5BC(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D25B8);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_10007FBE0();
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000811DC, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

void sub_10007E658(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = a2;
  v3 = a2;

}

void *sub_10007E688()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  void *v3;
  id v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1000D25E0);
  v6 = v0;
  v2 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  v3 = *(void **)(v0 + 56);
  v4 = v3;
  return v3;
}

id sub_10007E6FC@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  void *v6;
  uint64_t v8;

  v3 = *a1;
  KeyPath = swift_getKeyPath(&unk_1000D25E0);
  v8 = v3;
  v5 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v5);
  swift_release(KeyPath);
  v6 = *(void **)(v3 + 56);
  *a2 = v6;
  return v6;
}

void sub_10007E770(void **a1, uint64_t *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  id v6;
  _QWORD v7[5];
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1000D25E0);
  v7[2] = v3;
  v7[3] = v2;
  v8 = v3;
  v5 = sub_10007FBE0();
  v6 = v2;
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(&v8, KeyPath, sub_1000811C8, v7, (char *)&type metadata for () + 8, v5);
  swift_release(KeyPath);

}

void sub_10007E80C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 56);
  *(_QWORD *)(a1 + 56) = a2;
  v3 = a2;

}

_QWORD *sub_10007E83C()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  unint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  NSString v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  NSString v34;
  id v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v42[16];
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD v48[2];
  _QWORD v49[5];

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)CalculateUnitCollection), "initWithLocales:", 0);
  v0[2] = v2;
  v0[3] = 0;
  v0[4] = _swiftEmptyArrayStorage;
  v0[5] = 0;
  v0[6] = 0;
  v0[7] = 0;
  ObservationRegistrar.init()(v2);
  v3 = sub_10007D408();
  v4 = CalculateUnitCategory.id.getter();
  v6 = v5;

  KeyPath = swift_getKeyPath(&unk_1000D2540);
  v49[0] = v1;
  v8 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v49, KeyPath, v8);
  v9 = objc_msgSend((id)v1[2], "categories", swift_release(KeyPath).n128_f64[0]);
  v10 = sub_10000A5A8(0, (unint64_t *)&qword_100117318, CalculateUnitCategory_ptr);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v10);

  swift_bridgeObjectRetain(v6);
  v12 = sub_100080EFC(v11, v4, v6, (uint64_t (*)(void))&CalculateUnitCategory.id.getter);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease_n(v6, 2);
  if (v12)
  {
    v13 = swift_getKeyPath(&unk_1000D2590);
    __chkstk_darwin(v13, v14);
    v43 = v1;
    v44 = v12;
    v49[0] = v1;
    v15 = v12;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v49, v13, sub_10002AF44, v42, (char *)&type metadata for () + 8, v8);
    swift_release(v13);

    v16 = sub_10007D774();
    v17 = swift_getKeyPath(&unk_1000D25B8);
    __chkstk_darwin(v17, v18);
    v43 = v1;
    v44 = v16;
    v49[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v49, v17, sub_100080E8C, v42, (char *)&type metadata for () + 8, v8);
    swift_release(v17);

    v19 = sub_10007D9A4();
    v20 = swift_getKeyPath(&unk_1000D25E0);
    __chkstk_darwin(v20, v21);
    v43 = v1;
    v44 = v19;
    v49[0] = v1;
    ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v49, v20, sub_100080EC8, v42, (char *)&type metadata for () + 8, v8);

    swift_release(v20);
  }
  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v22 = (void *)qword_10011FED8;
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v22, "objectForKey:", v23);

  if (v24)
  {
    _bridgeAnyObjectToAny(_:)(v48, v24);
    swift_unknownObjectRelease(v24);
  }
  else
  {
    memset(v48, 0, sizeof(v48));
  }
  sub_100004E58((uint64_t)v48, (uint64_t)v49);
  if (v49[3])
  {
    v25 = sub_100005360(&qword_100117320);
    if ((swift_dynamicCast(&v47, v49, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
    {
      v26 = v8;
      v27 = v47;
      v49[0] = _swiftEmptyArrayStorage;
      v28 = *(_QWORD *)(v47 + 16);
      if (v28)
      {
        v46 = 0;
        swift_retain(v1);
        swift_bridgeObjectRetain(v27);
        v45 = v27;
        v29 = (uint64_t *)(v27 + 40);
        do
        {
          v31 = *v29;
          v32 = swift_getKeyPath(&unk_1000D2540);
          *(_QWORD *)&v48[0] = v1;
          swift_bridgeObjectRetain(v31);
          ObservationRegistrar.access<A, B>(_:keyPath:)(v48, v32, v26);
          swift_release(v32);
          v33 = (id)v1[2];
          v34 = String._bridgeToObjectiveC()();
          v35 = objc_msgSend(v33, "findUnitWithName:", v34);
          swift_bridgeObjectRelease(v31);

          if (v35)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            v37 = *(_QWORD *)((v49[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
            v36 = *(_QWORD *)((v49[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v37 >= v36 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
            v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v35);
            specialized Array._endMutation()(v30);
          }
          v29 += 2;
          --v28;
        }
        while (v28);
        v27 = v45;
        swift_bridgeObjectRelease(v45);
        v38 = (_QWORD *)v49[0];
      }
      else
      {
        swift_retain(v1);
        v38 = _swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease(v27);
      swift_release(v1);
      v39 = swift_getKeyPath(&unk_1000D2568);
      __chkstk_darwin(v39, v40);
      v43 = v1;
      v44 = v38;
      v49[0] = v1;
      ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)(v49, v39, sub_1000142D4, v42, (char *)&type metadata for () + 8, v26);
      swift_release(v39);
      swift_bridgeObjectRelease(v38);
    }
  }
  else
  {
    sub_100039C90((uint64_t)v49);
  }
  return v1;
}

void sub_10007EDC0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  Class isa;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  _QWORD v47[3];

  v2 = v1;
  KeyPath = swift_getKeyPath(&unk_1000D2568);
  v47[0] = v1;
  v5 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v47, KeyPath, v5);
  swift_release(KeyPath);
  v6 = (uint64_t *)(v1 + 32);
  swift_beginAccess(v1 + 32, v47, 0, 0);
  v7 = *(_QWORD *)(v1 + 32);
  v8 = a1;
  swift_bridgeObjectRetain(v7);
  v10 = sub_100080D08(v9);
  v12 = v11;
  swift_bridgeObjectRelease(v7);

  if ((v12 & 1) == 0)
  {
    v13 = swift_getKeyPath(&unk_1000D2568);
    v46[0] = v2;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v46, v13, v5);
    swift_release(v13);
    v46[0] = v2;
    v14 = swift_getKeyPath(&unk_1000D2568);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v46, v14, v5);
    swift_release(v14);
    swift_beginAccess(v2 + 32, v46, 33, 0);
    v15 = (void *)sub_10000ED7C(v10);
    swift_endAccess(v46);

    v46[0] = v2;
    v16 = swift_getKeyPath(&unk_1000D2568);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v46, v16, v5);
    swift_release(v16);
  }
  v17 = swift_getKeyPath(&unk_1000D2568);
  v46[0] = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v46, v17, v5);
  swift_release(v17);
  v18 = *(_QWORD *)(v2 + 32);
  if (!((unint64_t)v18 >> 62))
  {
    if (*(uint64_t *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10) >= 20)
      goto LABEL_5;
LABEL_12:
    v26 = swift_getKeyPath(&unk_1000D2568);
    v46[0] = v2;
    v27 = v8;
    ObservationRegistrar.access<A, B>(_:keyPath:)(v46, v26, v5);
    swift_release(v26);
    v46[0] = v2;
    v28 = swift_getKeyPath(&unk_1000D2568);
    ObservationRegistrar.willSet<A, B>(_:keyPath:)(v46, v28, v5);
    swift_release(v28);
    swift_beginAccess(v2 + 32, v46, 33, 0);
    v29 = *(_QWORD *)(v2 + 32);
    if ((unint64_t)v29 >> 62
      && (v29 < 0 ? (v40 = *(_QWORD *)(v2 + 32)) : (v40 = v29 & 0xFFFFFFFFFFFFFF8),
          swift_bridgeObjectRetain(*(_QWORD *)(v2 + 32)),
          v41 = _CocoaArrayWrapper.endIndex.getter(v40),
          swift_bridgeObjectRelease(v29),
          v41 < 0))
    {
      __break(1u);
    }
    else
    {
      sub_100054694(0, 0, (uint64_t)v27);
      swift_endAccess(v46);
      v46[0] = v2;
      v30 = swift_getKeyPath(&unk_1000D2568);
      ObservationRegistrar.didSet<A, B>(_:keyPath:)(v46, v30, v5);
      swift_release(v30);
      if (qword_100113F10 == -1)
      {
LABEL_14:
        v31 = (void *)qword_10011FED8;
        v32 = swift_getKeyPath(&unk_1000D2568);
        v46[0] = v2;
        ObservationRegistrar.access<A, B>(_:keyPath:)(v46, v32, v5);
        swift_release(v32);
        v33 = *(_QWORD *)(v2 + 32);
        swift_bridgeObjectRetain(v33);
        v35 = sub_10007DBD4(v34);
        swift_bridgeObjectRelease(v33);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v35);
        v37 = String._bridgeToObjectiveC()();
        objc_msgSend(v31, "setObject:forKey:", isa, v37);

        return;
      }
    }
    swift_once(&qword_100113F10, sub_1000A8D50);
    goto LABEL_14;
  }
  if (v18 < 0)
    v38 = *(_QWORD *)(v2 + 32);
  else
    v38 = v18 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + 32));
  v39 = _CocoaArrayWrapper.endIndex.getter(v38);
  swift_bridgeObjectRelease(v18);
  if (v39 < 20)
    goto LABEL_12;
LABEL_5:
  v19 = swift_getKeyPath(&unk_1000D2568);
  v46[0] = v2;
  ObservationRegistrar.access<A, B>(_:keyPath:)(v46, v19, v5);
  swift_release(v19);
  v46[0] = v2;
  v20 = swift_getKeyPath(&unk_1000D2568);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v46, v20, v5);
  swift_release(v20);
  swift_beginAccess(v2 + 32, v46, 33, 0);
  v21 = *(_QWORD *)(v2 + 32);
  if (!((unint64_t)v21 >> 62))
  {
    if (*(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_7;
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v21 < 0)
    v42 = *(_QWORD *)(v2 + 32);
  else
    v42 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + 32));
  v43 = _CocoaArrayWrapper.endIndex.getter(v42);
  swift_bridgeObjectRelease(v21);
  if (!v43)
    goto LABEL_30;
LABEL_7:
  v22 = (void *)sub_100080C88();
  if (v22)
  {
LABEL_11:

    swift_endAccess(v46);
    v46[0] = v2;
    v25 = swift_getKeyPath(&unk_1000D2568);
    ObservationRegistrar.didSet<A, B>(_:keyPath:)(v46, v25, v5);
    swift_release(v25);
    goto LABEL_12;
  }
  v21 = *v6;
  if ((unint64_t)*v6 >> 62)
  {
LABEL_31:
    if (v21 < 0)
      v44 = v21;
    else
      v44 = v21 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v21);
    v45 = _CocoaArrayWrapper.endIndex.getter(v44);
    swift_bridgeObjectRelease(v21);
    v24 = v45 - 1;
    if (!__OFSUB__(v45, 1))
      goto LABEL_10;
    goto LABEL_36;
  }
  v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
  v24 = v23 - 1;
  if (!__OFSUB__(v23, 1))
  {
LABEL_10:
    v22 = (void *)sub_10000ED7C(v24);
    goto LABEL_11;
  }
LABEL_36:
  __break(1u);
}

void sub_10007F308()
{
  uint64_t v0;
  uint64_t KeyPath;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSString v7;
  uint64_t v8;
  _QWORD v9[3];

  KeyPath = swift_getKeyPath(&unk_1000D2568);
  v9[0] = v0;
  v2 = sub_10007FBE0();
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v2);
  swift_release(KeyPath);
  v9[0] = v0;
  v3 = swift_getKeyPath(&unk_1000D2568);
  ObservationRegistrar.willSet<A, B>(_:keyPath:)(v9, v3, v2);
  swift_release(v3);
  swift_beginAccess(v0 + 32, v9, 1, 0);
  v4 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v4);
  v8 = v0;
  v5 = swift_getKeyPath(&unk_1000D2568);
  ObservationRegistrar.didSet<A, B>(_:keyPath:)(&v8, v5, v2);
  swift_release(v5);
  if (qword_100113F10 != -1)
    swift_once(&qword_100113F10, sub_1000A8D50);
  v6 = (void *)qword_10011FED8;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setURL:forKey:", 0, v7, v8);

}

void sub_10007F464(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  int64_t v13;
  id v14;
  NSString v15;
  unsigned int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  id v57;
  unint64_t v58;
  unint64_t v59;
  __int128 v60;
  _QWORD *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  int64_t v69;
  int64_t v70;
  __int128 v71;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return;
  v3 = a2;
  v4 = 0;
  v68 = sub_10007DDA8();
  v66 = v68 + 64;
  v5 = 1 << *(_BYTE *)(v68 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v68 + 64);
  v67 = (unint64_t)(v5 + 63) >> 6;
  v8 = _swiftEmptyArrayStorage;
  v65 = v3;
LABEL_7:
  v62 = v8 + 9;
  v63 = v8;
  if (v7)
  {
LABEL_8:
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v4 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    if (__OFADD__(v4++, 1))
    {
      __break(1u);
      goto LABEL_76;
    }
    if (v4 >= v67)
      goto LABEL_73;
    v12 = *(_QWORD *)(v66 + 8 * v4);
    if (v12)
      goto LABEL_21;
    v13 = v4 + 1;
    if (v4 + 1 >= v67)
      goto LABEL_73;
    v12 = *(_QWORD *)(v66 + 8 * v13);
    if (!v12)
    {
      v13 = v4 + 2;
      if (v4 + 2 >= v67)
        goto LABEL_73;
      v12 = *(_QWORD *)(v66 + 8 * v13);
      if (!v12)
      {
        v13 = v4 + 3;
        if (v4 + 3 >= v67)
          goto LABEL_73;
        v12 = *(_QWORD *)(v66 + 8 * v13);
        if (!v12)
        {
          v13 = v4 + 4;
          if (v4 + 4 >= v67)
          {
LABEL_73:
            swift_release(v68);
            return;
          }
          v12 = *(_QWORD *)(v66 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
    v4 = v13;
LABEL_21:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v4 << 6);
LABEL_22:
    v71 = *(_OWORD *)(*(_QWORD *)(v68 + 56) + 16 * v10);
    v14 = (id)v71;
    swift_bridgeObjectRetain(*((_QWORD *)&v71 + 1));
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v14, "contains:", v15);

    if (v16)
    {
      v57 = v14;
      swift_bridgeObjectRetain(*((_QWORD *)&v71 + 1));
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_10007221C(0, v8[2] + 1, 1, v8);
      v59 = v8[2];
      v58 = v8[3];
      v60 = v71;
      if (v59 >= v58 >> 1)
      {
        v61 = sub_10007221C((_QWORD *)(v58 > 1), v59 + 1, 1, v8);
        v60 = v71;
        v8 = v61;
      }
      v8[2] = v59 + 1;
      *(_OWORD *)&v8[2 * v59 + 4] = v60;
      goto LABEL_72;
    }
    v17 = v8[2];
    if (v17)
    {
      v69 = v4;
      *(_QWORD *)&v71 = v7;
      v18 = (void *)v8[4];
      v19 = v8[5];
      swift_bridgeObjectRetain_n(v8, 2);
      v20 = v18;
      v21 = swift_bridgeObjectRetain(v19);
      v22 = CalculateUnitCategory.id.getter(v21);
      v24 = v23;
      v26 = CalculateUnitCategory.id.getter(v25);
      if (v22 == v26 && v24 == v27)
        goto LABEL_38;
      v29 = v27;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v26, v27, 0);
      swift_bridgeObjectRelease(v19);

      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v29);
      if ((v30 & 1) == 0)
      {
        if (v17 == 1)
        {
          v7 = v71;
LABEL_31:
          v8 = v63;
          swift_bridgeObjectRelease_n(v63, 2);
          v3 = v65;
          v4 = v69;
          goto LABEL_32;
        }
        v19 = v8[7];
        v20 = (id)v8[6];
        v32 = swift_bridgeObjectRetain(v19);
        v33 = CalculateUnitCategory.id.getter(v32);
        v24 = v34;
        v37 = CalculateUnitCategory.id.getter(v35);
        v38 = v36;
        if (v33 != v37 || v24 != v36)
        {
          v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v24, v37, v36, 0);
          swift_bridgeObjectRelease(v19);

          swift_bridgeObjectRelease(v24);
          swift_bridgeObjectRelease(v38);
          if ((v39 & 1) != 0)
            goto LABEL_39;
          v7 = v71;
          if (v17 == 2)
            goto LABEL_31;
          v40 = 2;
          v41 = v62;
          while (!__OFADD__(v40, 1))
          {
            v64 = v40 + 1;
            v19 = *v41;
            v20 = (id)*(v41 - 1);
            v42 = swift_bridgeObjectRetain(v19);
            v43 = CalculateUnitCategory.id.getter(v42);
            v24 = v44;
            v46 = CalculateUnitCategory.id.getter(v45);
            if (v43 == v46 && v24 == v47)
            {
              v8 = v63;
              v3 = v65;
              goto LABEL_38;
            }
            v49 = v47;
            v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v24, v46, v47, 0);
            swift_bridgeObjectRelease(v19);

            swift_bridgeObjectRelease(v24);
            swift_bridgeObjectRelease(v49);
            if ((v50 & 1) != 0)
            {
              v8 = v63;
              v3 = v65;
              goto LABEL_39;
            }
            v41 += 2;
            ++v40;
            v7 = v71;
            if (v64 == v17)
              goto LABEL_31;
          }
LABEL_76:
          __break(1u);
          goto LABEL_77;
        }
LABEL_38:
        swift_bridgeObjectRelease(v19);

        swift_bridgeObjectRelease_n(v24, 2);
      }
LABEL_39:
      v4 = v69;
      v7 = v71;
      swift_bridgeObjectRelease_n(v8, 2);
      swift_bridgeObjectRelease(*((_QWORD *)&v71 + 1));

      if ((_QWORD)v71)
        goto LABEL_8;
    }
    else
    {
LABEL_32:
      swift_bridgeObjectRetain(*((_QWORD *)&v71 + 1));
      swift_bridgeObjectRetain(v3);
      v31 = (uint64_t)sub_100081064(*((uint64_t *)&v71 + 1));
      v3 = v65;
      swift_bridgeObjectRelease(*((_QWORD *)&v71 + 1));
      swift_bridgeObjectRelease(v65);
      if ((unint64_t)v31 >> 62)
      {
        if (v31 < 0)
          v51 = v31;
        else
          v51 = v31 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v31);
        v52 = _CocoaArrayWrapper.endIndex.getter(v51);
        swift_bridgeObjectRelease(v31);
        if (v52)
        {
LABEL_62:
          v70 = v4;
          v53 = v14;
          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
            v8 = sub_10007221C(0, v8[2] + 1, 1, v8);
          v55 = v8[2];
          v54 = v8[3];
          if (v55 >= v54 >> 1)
            v8 = sub_10007221C((_QWORD *)(v54 > 1), v55 + 1, 1, v8);
          v8[2] = v55 + 1;
          v56 = &v8[2 * v55];
          v56[4] = v53;
          v56[5] = v31;
          v4 = v70;
LABEL_72:
          swift_bridgeObjectRelease(*((_QWORD *)&v71 + 1));

          goto LABEL_7;
        }
      }
      else if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_62;
      }
      swift_bridgeObjectRelease(*((_QWORD *)&v71 + 1));

      swift_bridgeObjectRelease(v31);
      if (v7)
        goto LABEL_8;
    }
  }
  while (1)
  {
    v4 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v4 >= v67)
      goto LABEL_73;
    v12 = *(_QWORD *)(v66 + 8 * v4);
    ++v13;
    if (v12)
      goto LABEL_21;
  }
LABEL_77:
  __break(1u);
}

uint64_t sub_10007FA7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  v1 = v0 + OBJC_IVAR____TtC10Calculator36CalculatorUnitConversionDataProvider___observationRegistrar;
  v2 = type metadata accessor for ObservationRegistrar(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10007FAFC()
{
  return type metadata accessor for CalculatorUnitConversionDataProvider(0);
}

uint64_t type metadata accessor for CalculatorUnitConversionDataProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100117260;
  if (!qword_100117260)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CalculatorUnitConversionDataProvider);
  return result;
}

uint64_t sub_10007FB40(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = "\b";
  v4[4] = "\b";
  v4[5] = "\b";
  result = type metadata accessor for ObservationRegistrar(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

unint64_t sub_10007FBE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100114A88;
  if (!qword_100114A88)
  {
    v1 = type metadata accessor for CalculatorUnitConversionDataProvider(255);
    result = swift_getWitnessTable(&unk_1000D2520, v1);
    atomic_store(result, (unint64_t *)&qword_100114A88);
  }
  return result;
}

uint64_t sub_10007FC28(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  Swift::Int v5;
  uint64_t v7[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_100080CF4(v2);
    *a1 = v2;
  }
  v4 = *(_QWORD *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  v5 = sub_10007FCA0(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

Swift::Int sub_10007FCA0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  Swift::Int v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id *v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  Swift::Int v41;
  Swift::Int v42;
  uint64_t *v43;
  uint64_t v44;
  Swift::Int v45;
  uint64_t v46;
  void *v47;
  Swift::Int v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  char v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  Swift::Int v125;
  char *v126;
  char *v127;
  unint64_t v128;
  Swift::Int v129;
  Swift::Int v130;
  Swift::Int v131;
  uint64_t v132;
  uint64_t v133;
  char *__dst;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v2 = v1;
  v4 = a1[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result < v4)
  {
    if (v4 >= 0)
      v6 = v4;
    else
      v6 = v4 + 1;
    if (v4 >= -1)
    {
      v7 = result;
      v122 = a1;
      if (v4 < 2)
      {
        v11 = (char *)_swiftEmptyArrayStorage;
        v140 = (uint64_t)_swiftEmptyArrayStorage;
        __dst = (char *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 32);
        if (v4 != 1)
        {
          v14 = _swiftEmptyArrayStorage[2];
          if (v14 < 2)
            goto LABEL_110;
          goto LABEL_98;
        }
      }
      else
      {
        v8 = v6 >> 1;
        v9 = sub_10000A5A8(0, (unint64_t *)&qword_1001145E0, CalculateUnit_ptr);
        v10 = static Array._allocateBufferUninitialized(minimumCapacity:)(v8, v9);
        *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
        __dst = (char *)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
        v140 = v10;
      }
      v12 = 0;
      v13 = *a1;
      v124 = *a1 + 16;
      v125 = v7;
      v123 = *a1 - 8;
      v11 = (char *)_swiftEmptyArrayStorage;
      v131 = v4;
      v135 = *a1;
      while (1)
      {
        v15 = v12++;
        v130 = v15;
        if (v12 < v4)
        {
          v126 = v11;
          v16 = *(void **)(v13 + 8 * v15);
          v17 = *(id *)(v13 + 8 * v12);
          v18 = v16;
          v19 = objc_msgSend(v17, "displayName");
          v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          v22 = v21;

          v138 = v20;
          v139 = v22;
          v23 = objc_msgSend(v18, "displayName");
          v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
          v26 = v25;

          v136 = v24;
          v137 = v26;
          v4 = v131;
          v128 = sub_100004F84();
          v132 = StringProtocol.localizedStandardCompare<A>(_:)(&v136, &type metadata for String, &type metadata for String, v128, v128);

          swift_bridgeObjectRelease(v22);
          swift_bridgeObjectRelease(v26);
          v12 = v15 + 2;
          if (v15 + 2 < v131)
          {
            v27 = (id *)(v124 + 8 * v15);
            while (1)
            {
              v28 = *(v27 - 1);
              v29 = *v27;
              v30 = v28;
              v31 = objc_msgSend(v29, "displayName");
              v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
              v34 = v33;

              v138 = v32;
              v139 = v34;
              v35 = objc_msgSend(v30, "displayName");
              v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
              v38 = v37;

              v136 = v36;
              v137 = v38;
              v39 = StringProtocol.localizedStandardCompare<A>(_:)(&v136, &type metadata for String, &type metadata for String, v128, v128);

              swift_bridgeObjectRelease(v34);
              swift_bridgeObjectRelease(v38);
              if ((v132 == -1) == (v39 != -1))
                break;
              ++v12;
              ++v27;
              v4 = v131;
              if (v131 == v12)
              {
                v12 = v131;
                goto LABEL_22;
              }
            }
            v4 = v131;
LABEL_22:
            v15 = v130;
          }
          v11 = v126;
          v13 = v135;
          if (v132 == -1)
          {
            if (v12 < v15)
              goto LABEL_136;
            if (v15 < v12)
            {
              v40 = (uint64_t *)(v123 + 8 * v12);
              v41 = v12;
              v42 = v15;
              v43 = (uint64_t *)(v135 + 8 * v15);
              do
              {
                if (v42 != --v41)
                {
                  if (!v135)
                    goto LABEL_139;
                  v44 = *v43;
                  *v43 = *v40;
                  *v40 = v44;
                }
                ++v42;
                --v40;
                ++v43;
              }
              while (v42 < v41);
            }
          }
        }
        if (v12 < v4)
        {
          if (__OFSUB__(v12, v15))
            goto LABEL_132;
          if (v12 - v15 < v125)
          {
            if (__OFADD__(v15, v125))
              goto LABEL_134;
            if (v15 + v125 >= v4)
              v45 = v4;
            else
              v45 = v15 + v125;
            if (v45 < v15)
            {
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
              break;
            }
            if (v12 != v45)
            {
              v127 = v11;
              v129 = v45;
              v46 = v123 + 8 * v12;
              do
              {
                v47 = *(void **)(v13 + 8 * v12);
                v48 = v15;
                v133 = v46;
                v49 = v46;
                while (1)
                {
                  v50 = *(void **)v49;
                  v51 = v47;
                  v52 = v50;
                  v53 = objc_msgSend(v51, "displayName");
                  v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
                  v56 = v55;

                  v138 = v54;
                  v139 = v56;
                  v57 = objc_msgSend(v52, "displayName");
                  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
                  v60 = v59;

                  v136 = v58;
                  v137 = v60;
                  v61 = sub_100004F84();
                  v62 = StringProtocol.localizedStandardCompare<A>(_:)(&v136, &type metadata for String, &type metadata for String, v61, v61);

                  swift_bridgeObjectRelease(v56);
                  swift_bridgeObjectRelease(v60);
                  if (v62 != -1)
                    break;
                  v13 = v135;
                  if (!v135)
                    goto LABEL_137;
                  v63 = *(void **)v49;
                  v47 = *(void **)(v49 + 8);
                  *(_QWORD *)v49 = v47;
                  *(_QWORD *)(v49 + 8) = v63;
                  v49 -= 8;
                  if (v12 == ++v48)
                    goto LABEL_42;
                }
                v13 = v135;
LABEL_42:
                ++v12;
                v46 = v133 + 8;
                v15 = v130;
              }
              while (v12 != v129);
              v12 = v129;
              v11 = v127;
            }
          }
        }
        if (v12 < v15)
          goto LABEL_127;
        if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
          v11 = sub_100080AD4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
        v65 = *((_QWORD *)v11 + 2);
        v64 = *((_QWORD *)v11 + 3);
        v14 = v65 + 1;
        v13 = v135;
        if (v65 >= v64 >> 1)
        {
          v114 = sub_100080AD4((char *)(v64 > 1), v65 + 1, 1, v11);
          v13 = v135;
          v11 = v114;
        }
        *((_QWORD *)v11 + 2) = v14;
        v66 = v11 + 32;
        v67 = &v11[16 * v65 + 32];
        *(_QWORD *)v67 = v15;
        *((_QWORD *)v67 + 1) = v12;
        if (v65)
        {
          while (1)
          {
            v68 = v14 - 1;
            if (v14 >= 4)
            {
              v73 = &v66[16 * v14];
              v74 = *((_QWORD *)v73 - 8);
              v75 = *((_QWORD *)v73 - 7);
              v79 = __OFSUB__(v75, v74);
              v76 = v75 - v74;
              if (v79)
                goto LABEL_116;
              v78 = *((_QWORD *)v73 - 6);
              v77 = *((_QWORD *)v73 - 5);
              v79 = __OFSUB__(v77, v78);
              v71 = v77 - v78;
              v72 = v79;
              if (v79)
                goto LABEL_117;
              v80 = v14 - 2;
              v81 = &v66[16 * v14 - 32];
              v83 = *(_QWORD *)v81;
              v82 = *((_QWORD *)v81 + 1);
              v79 = __OFSUB__(v82, v83);
              v84 = v82 - v83;
              if (v79)
                goto LABEL_119;
              v79 = __OFADD__(v71, v84);
              v85 = v71 + v84;
              if (v79)
                goto LABEL_122;
              if (v85 >= v76)
              {
                v103 = &v66[16 * v68];
                v105 = *(_QWORD *)v103;
                v104 = *((_QWORD *)v103 + 1);
                v79 = __OFSUB__(v104, v105);
                v106 = v104 - v105;
                if (v79)
                  goto LABEL_126;
                v96 = v71 < v106;
                goto LABEL_86;
              }
            }
            else
            {
              if (v14 != 3)
              {
                v97 = *((_QWORD *)v11 + 4);
                v98 = *((_QWORD *)v11 + 5);
                v79 = __OFSUB__(v98, v97);
                v90 = v98 - v97;
                v91 = v79;
                goto LABEL_80;
              }
              v70 = *((_QWORD *)v11 + 4);
              v69 = *((_QWORD *)v11 + 5);
              v79 = __OFSUB__(v69, v70);
              v71 = v69 - v70;
              v72 = v79;
            }
            if ((v72 & 1) != 0)
              goto LABEL_118;
            v80 = v14 - 2;
            v86 = &v66[16 * v14 - 32];
            v88 = *(_QWORD *)v86;
            v87 = *((_QWORD *)v86 + 1);
            v89 = __OFSUB__(v87, v88);
            v90 = v87 - v88;
            v91 = v89;
            if (v89)
              goto LABEL_121;
            v92 = &v66[16 * v68];
            v94 = *(_QWORD *)v92;
            v93 = *((_QWORD *)v92 + 1);
            v79 = __OFSUB__(v93, v94);
            v95 = v93 - v94;
            if (v79)
              goto LABEL_124;
            if (__OFADD__(v90, v95))
              goto LABEL_125;
            if (v90 + v95 >= v71)
            {
              v96 = v71 < v95;
LABEL_86:
              if (v96)
                v68 = v80;
              goto LABEL_88;
            }
LABEL_80:
            if ((v91 & 1) != 0)
              goto LABEL_120;
            v99 = &v66[16 * v68];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v79 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v79)
              goto LABEL_123;
            if (v102 < v90)
              goto LABEL_14;
LABEL_88:
            v107 = v68 - 1;
            if (v68 - 1 >= v14)
            {
              __break(1u);
LABEL_113:
              __break(1u);
LABEL_114:
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
              goto LABEL_135;
            }
            if (!v13)
              goto LABEL_138;
            v108 = v11;
            v109 = &v66[16 * v107];
            v110 = *(_QWORD *)v109;
            v111 = &v66[16 * v68];
            v112 = *((_QWORD *)v111 + 1);
            sub_1000806D0((id *)(v13 + 8 * *(_QWORD *)v109), (id *)(v13 + 8 * *(_QWORD *)v111), v13 + 8 * v112, __dst);
            if (v1)
            {
              v11 = v108;
              goto LABEL_110;
            }
            if (v112 < v110)
              goto LABEL_113;
            if (v68 > *((_QWORD *)v108 + 2))
              goto LABEL_114;
            *(_QWORD *)v109 = v110;
            *(_QWORD *)&v66[16 * v107 + 8] = v112;
            v113 = *((_QWORD *)v108 + 2);
            if (v68 >= v113)
              goto LABEL_115;
            v11 = v108;
            v14 = v113 - 1;
            memmove(&v66[16 * v68], v111 + 16, 16 * (v113 - 1 - v68));
            *((_QWORD *)v108 + 2) = v113 - 1;
            v13 = v135;
            if (v113 <= 2)
              goto LABEL_14;
          }
        }
        v14 = 1;
LABEL_14:
        v4 = v131;
        if (v12 >= v131)
        {
          v2 = v1;
          if (v14 < 2)
          {
LABEL_110:
            v121 = swift_bridgeObjectRelease(v11);
            *(_QWORD *)((v140 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
            specialized Array._endMutation()(v121);
            return swift_bridgeObjectRelease(v140);
          }
LABEL_98:
          v115 = *v122;
          while (1)
          {
            v116 = v14 - 2;
            if (v14 < 2)
              goto LABEL_128;
            if (!v115)
              goto LABEL_140;
            v117 = *(_QWORD *)&v11[16 * v116 + 32];
            v118 = *(_QWORD *)&v11[16 * v14 + 24];
            sub_1000806D0((id *)(v115 + 8 * v117), (id *)(v115 + 8 * *(_QWORD *)&v11[16 * v14 + 16]), v115 + 8 * v118, __dst);
            if (v2)
              goto LABEL_110;
            if (v118 < v117)
              goto LABEL_129;
            if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
              v11 = sub_100080C74((uint64_t)v11);
            if (v116 >= *((_QWORD *)v11 + 2))
              goto LABEL_130;
            v119 = &v11[16 * v116 + 32];
            *(_QWORD *)v119 = v117;
            *((_QWORD *)v119 + 1) = v118;
            v120 = *((_QWORD *)v11 + 2);
            if (v14 > v120)
              goto LABEL_131;
            memmove(&v11[16 * v14 + 16], &v11[16 * v14 + 32], 16 * (v120 - v14));
            *((_QWORD *)v11 + 2) = v120 - 1;
            v14 = v120 - 1;
            if (v120 <= 2)
              goto LABEL_110;
          }
        }
      }
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  if (v4 < 0)
    goto LABEL_133;
  if (v4)
    return sub_100080560(0, v4, 1, a1);
  return result;
}

uint64_t sub_100080560(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  uint64_t v26;

  v23 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v26 = *a4;
    v5 = v26 + 8 * a3 - 8;
LABEL_5:
    v6 = *(void **)(v26 + 8 * v4);
    v7 = v23;
    v24 = v5;
    while (1)
    {
      v8 = *(void **)v5;
      v9 = v6;
      v10 = v8;
      v11 = objc_msgSend(v9, "displayName");
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v25[2] = v12;
      v25[3] = v14;
      v15 = objc_msgSend(v10, "displayName");
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      v25[0] = v16;
      v25[1] = v18;
      v19 = sub_100004F84();
      v20 = StringProtocol.localizedStandardCompare<A>(_:)(v25, &type metadata for String, &type metadata for String, v19, v19);

      swift_bridgeObjectRelease(v14);
      result = swift_bridgeObjectRelease(v18);
      if (v20 != -1)
      {
LABEL_4:
        ++v4;
        v5 = v24 + 8;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v26)
        break;
      v21 = *(void **)v5;
      v6 = *(void **)(v5 + 8);
      *(_QWORD *)v5 = v6;
      *(_QWORD *)(v5 + 8) = v21;
      v5 -= 8;
      if (v4 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000806D0(id *a1, id *__src, unint64_t a3, char *__dst)
{
  id *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id *v28;
  char *v29;
  id *v30;
  id *v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t result;
  char *v48;
  char *v50;
  void **v51;
  id *v52;
  id *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void **v60;
  id *v61;

  v5 = __src;
  v6 = (char *)__src - (char *)a1;
  v7 = (char *)__src - (char *)a1 + 7;
  if ((char *)__src - (char *)a1 >= 0)
    v7 = (char *)__src - (char *)a1;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)__src;
  v10 = a3 - (_QWORD)__src + 7;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v10 = a3 - (_QWORD)__src;
  v11 = v10 >> 3;
  v61 = a1;
  v60 = (void **)__dst;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (__dst != (char *)__src || &__src[v11] <= (id *)__dst)
        memmove(__dst, __src, 8 * v11);
      v48 = __dst;
      v29 = &__dst[8 * v11];
      v59 = v29;
      v61 = v5;
      if (a1 < v5 && v9 >= 8)
      {
        v30 = (id *)(a3 - 8);
        v31 = v5;
        do
        {
          v54 = v5;
          v50 = v29;
          v52 = v30 + 1;
          v33 = (void *)*((_QWORD *)v29 - 1);
          v29 -= 8;
          v32 = v33;
          v34 = *--v31;
          v35 = v32;
          v36 = v34;
          v37 = objc_msgSend(v35, "displayName");
          v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
          v40 = v39;

          v57 = v38;
          v58 = v40;
          v41 = objc_msgSend(v36, "displayName");
          v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
          v44 = v43;

          v55 = v42;
          v56 = v44;
          v45 = sub_100004F84();
          v46 = StringProtocol.localizedStandardCompare<A>(_:)(&v55, &type metadata for String, &type metadata for String, v45, v45);

          swift_bridgeObjectRelease(v40);
          swift_bridgeObjectRelease(v44);
          if (v46 == -1)
          {
            v29 = v50;
            if (v52 != v54 || v30 >= v54)
              *v30 = *v31;
            v61 = v31;
          }
          else
          {
            v59 = v29;
            v31 = v54;
            if (v52 < (id *)v50 || v30 >= (id *)v50 || v52 != (id *)v50)
              *v30 = *(id *)v29;
          }
          if (v31 <= a1)
            break;
          --v30;
          v5 = v31;
        }
        while (v29 > v48);
      }
      goto LABEL_42;
    }
  }
  else if (v6 >= -7)
  {
    if (__dst != (char *)a1 || &a1[v8] <= (id *)__dst)
      memmove(__dst, a1, 8 * v8);
    v51 = (void **)&__dst[8 * v8];
    v59 = (char *)v51;
    if ((unint64_t)v5 < a3 && v6 >= 8)
    {
      v12 = (void **)__dst;
      v13 = a1;
      do
      {
        v14 = *v12;
        v15 = *v5;
        v16 = v14;
        v17 = objc_msgSend(v15, "displayName");
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        v57 = v18;
        v58 = v20;
        v21 = objc_msgSend(v16, "displayName");
        v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        v23 = v5;
        v25 = v24;

        v55 = v22;
        v56 = v25;
        v26 = sub_100004F84();
        v27 = StringProtocol.localizedStandardCompare<A>(_:)(&v55, &type metadata for String, &type metadata for String, v26, v26);

        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v25);
        if (v27 == -1)
        {
          v28 = v23 + 1;
          if (v13 < v23 || v13 >= v28 || v13 != v23)
            *v13 = *v23;
        }
        else
        {
          if (v13 != v12)
            *v13 = *v12;
          v60 = ++v12;
          v28 = v23;
        }
        ++v13;
        if (v12 >= v51)
          break;
        v5 = v28;
      }
      while ((unint64_t)v28 < a3);
      v61 = v13;
    }
LABEL_42:
    sub_100080BCC((void **)&v61, (const void **)&v60, &v59);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100080AD4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100005360(&qword_100117328);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100080BCC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_100080C74(uint64_t a1)
{
  return sub_100080AD4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100080C88()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *v0 = v1;
  if (!(_DWORD)result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    result = sub_100054990(v1);
    v1 = result;
    *v0 = result;
  }
  v3 = v1 & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(_QWORD *)(v3 + 16) = v5;
    specialized Array._endMutation()(result);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100080CF4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_100080D08(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v2)
  {
    for (i = 0; ; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
      else
        v4 = *(id *)(a1 + 8 * i + 32);
      v5 = v4;
      v6 = CalculateUnit.id.getter();
      v8 = v7;
      v10 = CalculateUnit.id.getter();
      v11 = v9;
      if (v6 == v10 && v8 == v9)
      {

        swift_bridgeObjectRelease_n(v8, 2);
        return i;
      }
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v10, v9, 0);

      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) != 0)
        return i;
      v13 = i + 1;
      if (__OFADD__(i, 1))
        break;
      if (v13 == v2)
        return 0;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

void sub_100080E8C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v2;
  v4 = v2;

}

void sub_100080EC8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v3 = *(void **)(v1 + 56);
  *(_QWORD *)(v1 + 56) = v2;
  v4 = v2;

}

void *sub_100080EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_17;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1)
         : *(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v12 = a4();
      v14 = v13;
      if (v12 == a2 && v13 == a3)
      {
        swift_bridgeObjectRelease(a1);
LABEL_15:
        swift_bridgeObjectRelease(a3);
        return v10;
      }
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0);
      swift_bridgeObjectRelease(v14);
      if ((v15 & 1) != 0)
      {
        a3 = a1;
        goto LABEL_15;
      }

      ++v8;
      if (v11 == v7)
        goto LABEL_21;
    }
    __break(1u);
LABEL_17:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_21:
  swift_bridgeObjectRelease(a1);
  return 0;
}

_QWORD *sub_100081064(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  id v4;
  void *v5;
  unint64_t v6;
  NSString v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, a1);
LABEL_9:
        v5 = v4;
        v6 = v3 + 1;
        if (__OFADD__(v3, 1))
          goto LABEL_15;
        v7 = String._bridgeToObjectiveC()();
        v8 = objc_msgSend(v5, "contains:", v7);

        if (v8)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v9 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v9);
          v10 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v5);
          specialized ContiguousArray._endMutation()(v10);
        }
        else
        {

        }
        ++v3;
        if (v6 == v2)
          return _swiftEmptyArrayStorage;
      }
      if (v3 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v12 = a1;
      else
        v12 = a1 & 0xFFFFFFFFFFFFFF8;
      v2 = _CocoaArrayWrapper.endIndex.getter(v12);
      if (!v2)
        return _swiftEmptyArrayStorage;
    }
    v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

void sub_1000811C8()
{
  sub_100080EC8();
}

void sub_1000811DC()
{
  sub_100080E8C();
}

void sub_1000811F0()
{
  sub_10002AF44();
}

uint64_t sub_100081204()
{
  return sub_1000142D4();
}

uint64_t sub_100081218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;

  v8 = type metadata accessor for CalculatorMDMRestrictionsManager(0);
  v9 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  *(_QWORD *)a4 = Environment.init<A>(_:)(v8, v8, v9);
  *(_BYTE *)(a4 + 8) = v10 & 1;
  v11 = type metadata accessor for CalculatorLayout(0);
  v12 = sub_100005178((unint64_t *)&qword_100113F48, type metadata accessor for CalculatorLayout, (uint64_t)&unk_1000CD690);
  *(_QWORD *)(a4 + 16) = Environment.init<A>(_:)(v11, v11, v12);
  *(_BYTE *)(a4 + 24) = v13 & 1;
  *(_QWORD *)(a4 + 32) = swift_getKeyPath(&unk_1000D2690);
  *(_QWORD *)(a4 + 40) = 0;
  *(_WORD *)(a4 + 48) = 0;
  v14 = type metadata accessor for CalculatorViewModel(0);
  v15 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  *(_QWORD *)(a4 + 56) = Environment.init<A>(_:)(v14, v14, v15);
  *(_BYTE *)(a4 + 64) = v16 & 1;
  *(_QWORD *)(a4 + 72) = a1;
  *(_QWORD *)(a4 + 80) = a2;
  *(_BYTE *)(a4 + 88) = a3;
  v20 = 0;
  State.init(wrappedValue:)(&v21, &v20, &type metadata for CalculatorAlertMode);
  v17 = v22;
  *(_BYTE *)(a4 + 96) = v21;
  *(_QWORD *)(a4 + 104) = v17;
  v20 = 0;
  State.init(wrappedValue:)(&v21, &v20, &type metadata for Bool);
  v18 = v22;
  *(_BYTE *)(a4 + 112) = v21;
  *(_QWORD *)(a4 + 120) = v18;
  type metadata accessor for ModeMenuView(0);
  return AccessibilityFocusState.init<>()();
}

void sub_1000813A4(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  double v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  double v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char v138;
  uint64_t KeyPath;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t (**v151)();
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  __n128 v158;
  uint64_t v159;
  char *v160;
  unint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t OpaqueTypeConformance2;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  char v218;

  v212 = a1;
  v3 = type metadata accessor for AccessibilityTraits(0, a2);
  v209 = *(_QWORD *)(v3 - 8);
  v210 = v3;
  __chkstk_darwin(v3, v4);
  v208 = (char *)&v174 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccessibilityChildBehavior(0);
  v206 = *(_QWORD *)(v6 - 8);
  v207 = v6;
  v8 = __chkstk_darwin(v6, v7);
  v205 = (char *)&v174 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AccessibilityActionKind(0, v8);
  v203 = *(_QWORD *)(v10 - 8);
  v204 = v10;
  __chkstk_darwin(v10, v11);
  v202 = (char *)&v174 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v211 = type metadata accessor for ModeMenuView(0);
  v193 = *(_QWORD *)(v211 - 8);
  __chkstk_darwin(v211, v13);
  v194 = v14;
  v195 = (uint64_t)&v174 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v180, v15);
  v17 = (uint64_t *)((char *)&v174 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_100005360(&qword_1001173F0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v174 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100005360(&qword_1001173F8);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v174 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100005360(&qword_100117400);
  __chkstk_darwin(v175, v26);
  v28 = (char *)&v174 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v177 = sub_100005360(&qword_100117408);
  __chkstk_darwin(v177, v29);
  v176 = (uint64_t)&v174 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100005360(&qword_100117410);
  __chkstk_darwin(v178, v31);
  v179 = (char *)&v174 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v181 = sub_100005360(&qword_100117418);
  __chkstk_darwin(v181, v33);
  v182 = (uint64_t)&v174 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100005360(&qword_100117420);
  __chkstk_darwin(v35, v36);
  v183 = (uint64_t)&v174 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100005360(&qword_100117428);
  __chkstk_darwin(v184, v38);
  v185 = (uint64_t)&v174 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = sub_100005360(&qword_100117430);
  __chkstk_darwin(v186, v40);
  v187 = (uint64_t)&v174 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v189 = sub_100005360(&qword_100117438);
  __chkstk_darwin(v189, v42);
  v188 = (char *)&v174 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v192 = sub_100005360(&qword_100117440);
  v191 = *(_QWORD *)(v192 - 8);
  __chkstk_darwin(v192, v44);
  v190 = (char *)&v174 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100005360(&qword_100117448);
  __chkstk_darwin(v46, v47);
  v196 = (char *)&v174 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v199 = sub_100005360(&qword_100117450);
  __chkstk_darwin(v199, v49);
  v201 = (char *)&v174 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100005360(&qword_100117458);
  v198 = *(_QWORD *)(v200 - 8);
  v52 = __chkstk_darwin(v200, v51);
  v197 = (char *)&v174 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = static Alignment.leading.getter(v52);
  v56 = v55;
  v57 = *(_QWORD *)(v2 + 16);
  v213 = v2;
  v58 = *(_BYTE *)(v2 + 24);
  swift_retain(v57);
  v60 = sub_1000436BC(v59, v58);
  swift_release(v57);
  if (sub_1000090E4())
  {
    if (qword_100113B80 != -1)
      swift_once(&qword_100113B80, sub_10001BFE4);
    v61 = &qword_10011FA18;
  }
  else
  {
    if (qword_1001139C0 != -1)
      swift_once(&qword_1001139C0, sub_10001B7AC);
    v61 = &qword_10011F848;
  }
  v62 = *v61;
  swift_release(v60);
  swift_retain(v57);
  v64 = sub_1000436BC(v63, v58);
  swift_release(v57);
  if (sub_1000090E4())
  {
    if (qword_100113B78 != -1)
      swift_once(&qword_100113B78, sub_10001BFD4);
    v65 = &qword_10011FA10;
  }
  else
  {
    if (qword_1001139B8 != -1)
      swift_once(&qword_1001139B8, sub_10001B79C);
    v65 = &qword_10011F840;
  }
  v66 = *v65;
  swift_release(v64);
  *(_QWORD *)v21 = v54;
  *((_QWORD *)v21 + 1) = v56;
  *((_QWORD *)v21 + 2) = v62;
  v21[24] = 0;
  *((_QWORD *)v21 + 4) = v66;
  v21[40] = 0;
  v67 = sub_100005360(&qword_100117460);
  sub_10008243C(v213, (uint64_t)&v21[*(int *)(v67 + 44)]);
  v69 = static Edge.Set.vertical.getter(v68);
  swift_retain(v57);
  v71 = sub_1000436BC(v70, v58);
  swift_release(v57);
  if (sub_1000090E4())
  {
    if (qword_100113B90 != -1)
      swift_once(&qword_100113B90, sub_10001C004);
    v72 = &qword_10011FA28;
  }
  else
  {
    if (qword_1001139D8 != -1)
      swift_once(&qword_1001139D8, sub_10001B7DC);
    v72 = &qword_10011F860;
  }
  v73 = *(double *)v72;
  swift_release(v71);
  v75 = EdgeInsets.init(_all:)(v74, v73);
  v77 = v76;
  v79 = v78;
  v81 = v80;
  sub_10000531C((uint64_t)v21, (uint64_t)v25, &qword_1001173F0);
  v82 = &v25[*(int *)(v22 + 36)];
  *v82 = v69;
  *((double *)v82 + 1) = v75;
  *((_QWORD *)v82 + 2) = v77;
  *((_QWORD *)v82 + 3) = v79;
  *((_QWORD *)v82 + 4) = v81;
  v82[40] = 0;
  v83 = sub_100004F48((uint64_t)v21, &qword_1001173F0);
  v84 = static Edge.Set.horizontal.getter(v83);
  v85 = *(_QWORD *)(v213 + 16);
  v86 = *(_BYTE *)(v213 + 24);
  swift_retain(v85);
  v88 = sub_1000436BC(v87, v86);
  swift_release(v85);
  if (sub_1000090E4())
  {
    if (qword_100113B88 != -1)
      swift_once(&qword_100113B88, sub_10001BFF4);
    v89 = &qword_10011FA20;
  }
  else
  {
    if (qword_1001139D0 != -1)
      swift_once(&qword_1001139D0, sub_10001B7CC);
    v89 = &qword_10011F858;
  }
  v90 = *(double *)v89;
  swift_release(v88);
  v92 = EdgeInsets.init(_all:)(v91, v90);
  v94 = v93;
  v96 = v95;
  v98 = v97;
  sub_10000531C((uint64_t)v25, (uint64_t)v28, &qword_1001173F8);
  v99 = &v28[*(int *)(v175 + 36)];
  *v99 = v84;
  *((double *)v99 + 1) = v92;
  *((_QWORD *)v99 + 2) = v94;
  *((_QWORD *)v99 + 3) = v96;
  *((_QWORD *)v99 + 4) = v98;
  v99[40] = 0;
  sub_100004F48((uint64_t)v25, &qword_1001173F8);
  if (qword_100113CF8 != -1)
    swift_once(&qword_100113CF8, sub_100052FC8);
  v100 = qword_10011FCA0;
  swift_retain(qword_10011FCA0);
  v102 = static Color.black.getter(v101);
  v103 = static Edge.Set.all.getter(v102);
  v104 = v103;
  v105 = static Alignment.center.getter(v103);
  v107 = v106;
  v108 = v176;
  sub_10000531C((uint64_t)v28, v176, &qword_100117400);
  v109 = v108 + *(int *)(v177 + 36);
  *(_QWORD *)v109 = v100;
  *(_QWORD *)(v109 + 8) = v102;
  *(_BYTE *)(v109 + 16) = v104;
  *(_QWORD *)(v109 + 24) = v105;
  *(_QWORD *)(v109 + 32) = v107;
  sub_100004F48((uint64_t)v28, &qword_100117400);
  v110 = *(_QWORD *)(v213 + 16);
  LOBYTE(v102) = *(_BYTE *)(v213 + 24);
  swift_retain(v110);
  v112 = sub_1000436BC(v111, v102);
  swift_release(v110);
  if (sub_1000090E4())
  {
    v113 = 0x403B800000000000;
    v114 = (uint64_t)v179;
  }
  else
  {
    v114 = (uint64_t)v179;
    if (qword_1001139C8 != -1)
      swift_once(&qword_1001139C8, sub_10001B7BC);
    v113 = qword_10011F850;
  }
  swift_release(v112);
  v115 = (char *)v17 + *(int *)(v180 + 20);
  v116 = enum case for RoundedCornerStyle.continuous(_:);
  v117 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 104))(v115, v116, v117);
  *v17 = v113;
  v17[1] = v113;
  v118 = v114 + *(int *)(v178 + 36);
  sub_100014084((uint64_t)v17, v118, (uint64_t (*)(_QWORD))&type metadata accessor for RoundedRectangle);
  *(_WORD *)(v118 + *(int *)(sub_100005360(&qword_100116678) + 36)) = 256;
  sub_10000531C(v108, v114, &qword_100117408);
  sub_100067500((uint64_t)v17);
  v119 = sub_100004F48(v108, &qword_100117408);
  v120 = static Color.black.getter(v119);
  v121 = *(_QWORD *)(v213 + 16);
  LOBYTE(v116) = *(_BYTE *)(v213 + 24);
  swift_retain(v121);
  v123 = sub_1000436BC(v122, v116);
  swift_release(v121);
  if (sub_1000090E4())
  {
    v124 = 0x403B800000000000;
  }
  else
  {
    if (qword_1001139C8 != -1)
      swift_once(&qword_1001139C8, sub_10001B7BC);
    v124 = qword_10011F850;
  }
  swift_release(v123);
  v125 = v182;
  sub_10000531C(v114, v182, &qword_100117410);
  v126 = v125 + *(int *)(v181 + 36);
  *(_QWORD *)v126 = v120;
  *(_QWORD *)(v126 + 8) = v124;
  *(_OWORD *)(v126 + 16) = xmmword_1000D2610;
  sub_100004F48(v114, &qword_100117410);
  v127 = v183;
  sub_10000531C(v125, v183, &qword_100117418);
  sub_100004F48(v125, &qword_100117418);
  v128 = v213;
  v129 = *(_QWORD *)(v213 + 104);
  v214 = *(_BYTE *)(v213 + 96);
  v215 = v129;
  v130 = sub_100005360(&qword_100117468);
  State.projectedValue.getter(&v216, v130);
  v131 = v216;
  v132 = v217;
  v133 = v218;
  v134 = *(_QWORD *)(v128 + 120);
  v214 = *(_BYTE *)(v128 + 112);
  v215 = v134;
  v135 = sub_100005360(&qword_100113FF8);
  State.projectedValue.getter(&v216, v135);
  v136 = v216;
  v137 = v217;
  v138 = v218;
  KeyPath = swift_getKeyPath(&unk_1000D2690);
  v140 = v185;
  sub_10000531C(v127, v185, &qword_100117420);
  v141 = v140 + *(int *)(v184 + 36);
  *(_QWORD *)v141 = KeyPath;
  *(_QWORD *)(v141 + 8) = 0;
  *(_WORD *)(v141 + 16) = 0;
  *(_QWORD *)(v141 + 24) = v131;
  *(_QWORD *)(v141 + 32) = v132;
  *(_BYTE *)(v141 + 40) = v133;
  *(_QWORD *)(v141 + 48) = v136;
  *(_QWORD *)(v141 + 56) = v137;
  *(_BYTE *)(v141 + 64) = v138;
  sub_100004F48(v127, &qword_100117420);
  v142 = v213;
  v143 = v195;
  sub_100014084(v213, v195, type metadata accessor for ModeMenuView);
  v144 = *(unsigned __int8 *)(v193 + 80);
  v145 = (v144 + 16) & ~v144;
  v146 = v145 + v194;
  v147 = v144 | 7;
  v148 = swift_allocObject(&unk_10010C230, v145 + v194, v144 | 7);
  sub_1000140C8(v143, v148 + v145, type metadata accessor for ModeMenuView);
  v149 = v187;
  sub_10000531C(v140, v187, &qword_100117428);
  v150 = v186;
  v151 = (uint64_t (**)())(v149 + *(int *)(v186 + 36));
  *v151 = sub_100087ABC;
  v151[1] = (uint64_t (*)())v148;
  v151[2] = 0;
  v151[3] = 0;
  v152 = sub_100004F48(v140, &qword_100117428);
  v153 = v202;
  static AccessibilityActionKind.escape.getter(v152);
  v154 = v142;
  sub_100014084(v142, v143, type metadata accessor for ModeMenuView);
  v155 = swift_allocObject(&unk_10010C258, v146, v147);
  sub_1000140C8(v143, v155 + v145, type metadata accessor for ModeMenuView);
  v156 = sub_100087AD8();
  v157 = (uint64_t)v188;
  View.accessibilityAction(_:_:)(v153, sub_100087ACC, v155, v150, v156);
  v158 = swift_release(v155);
  (*(void (**)(char *, uint64_t, __n128))(v203 + 8))(v153, v204, v158);
  v159 = sub_100004F48(v149, &qword_100117430);
  v160 = v205;
  static AccessibilityChildBehavior.contain.getter(v159);
  v161 = sub_100087D9C();
  v162 = v190;
  v163 = v189;
  View.accessibilityElement(children:)(v160, v189, v161);
  (*(void (**)(char *, uint64_t))(v206 + 8))(v160, v207);
  v164 = sub_100004F48(v157, &qword_100117438);
  v165 = v208;
  static AccessibilityTraits.isModal.getter(v164);
  v216 = v163;
  v217 = v161;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v216, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
  v167 = v192;
  View.accessibilityAddTraits(_:)(v165, v192, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v209 + 8))(v165, v210);
  (*(void (**)(char *, uint64_t))(v191 + 8))(v162, v167);
  v168 = *(_QWORD *)(v142 + 56);
  LOBYTE(v165) = *(_BYTE *)(v154 + 64);
  swift_retain(*(_QWORD *)(v154 + 56));
  v170 = sub_100043890(v169, (char)v165);
  swift_release(v168);
  v171 = swift_getKeyPath(&unk_1000D2780);
  v216 = v170;
  v172 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v216, v171, v172);
  swift_release(v171);
  v173 = *(unsigned __int8 *)(v170 + 48);
  swift_release(v170);
  __asm { BR              X9 }
}

void sub_10008243C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t KeyPath;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[2];
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  ValueMetadata *v106;
  unint64_t v107;
  _BYTE v108[9];

  v98 = a2;
  v83 = sub_100005360(&qword_1001174F0);
  __chkstk_darwin(v83, v3);
  v86 = (char *)v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100005360(&qword_1001174F8);
  __chkstk_darwin(v85, v5);
  v89 = (char *)v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v8);
  v88 = (char *)v82 - v9;
  v10 = sub_100005360(&qword_100117500);
  __chkstk_darwin(v10, v11);
  v82[1] = (char *)v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82[0] = sub_100005360(&qword_100117508);
  __chkstk_darwin(v82[0], v13);
  v87 = (char *)v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v84 = (char *)v82 - v17;
  v18 = sub_100005360(&qword_100117510);
  __chkstk_darwin(v18, v19);
  v97 = (char *)v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v99 = (char *)v82 - v23;
  v24 = sub_100005360(&qword_100117518);
  __chkstk_darwin(v24, v25);
  v96 = (char *)v82 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v28);
  v103 = (uint64_t)v82 - v29;
  v91 = sub_100005360(&qword_100117520);
  __chkstk_darwin(v91, v30);
  v90 = (_QWORD *)((char *)v82 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v32, v33);
  v35 = (char *)v82 - v34;
  __chkstk_darwin(v36, v37);
  v39 = (char *)v82 - v38;
  v92 = sub_100005360(&qword_100117528);
  v94 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92, v40);
  v95 = (char *)v82 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v43);
  v100 = (uint64_t)v82 - v44;
  __chkstk_darwin(v45, v46);
  v93 = (uint64_t)v82 - v47;
  __chkstk_darwin(v48, v49);
  v101 = (uint64_t)v82 - v50;
  __chkstk_darwin(v51, v52);
  v54 = (char *)v82 - v53;
  __chkstk_darwin(v55, v56);
  v58 = (char *)v82 - v57;
  *(_QWORD *)v39 = 0;
  v59 = 1;
  v39[8] = 1;
  sub_100082EB8(a1);
  v108[0] = 1;
  State.init(wrappedValue:)(&v104, v108, &type metadata for Bool);
  v60 = v104;
  v61 = v105;
  sub_10000531C((uint64_t)v39, (uint64_t)v54, &qword_100117520);
  v62 = v92;
  v63 = &v54[*(int *)(v92 + 36)];
  *v63 = v60;
  *((_QWORD *)v63 + 1) = v61;
  *((_OWORD *)v63 + 1) = xmmword_1000D2620;
  sub_100004F48((uint64_t)v39, &qword_100117520);
  v102 = v58;
  v64 = (uint64_t)v58;
  v65 = a1;
  v66 = v91;
  sub_100007CD8((uint64_t)v54, v64, &qword_100117528);
  *(_QWORD *)v35 = 0;
  v35[8] = 1;
  sub_1000832C0(a1, (uint64_t)&v35[*(int *)(v66 + 36)]);
  v108[0] = 1;
  State.init(wrappedValue:)(&v104, v108, &type metadata for Bool);
  LOBYTE(v61) = v104;
  v67 = v105;
  v68 = v93;
  sub_10000531C((uint64_t)v35, v93, &qword_100117520);
  v69 = v68 + *(int *)(v62 + 36);
  *(_BYTE *)v69 = v61;
  *(_QWORD *)(v69 + 8) = v67;
  *(_OWORD *)(v69 + 16) = xmmword_1000D2630;
  sub_100004F48((uint64_t)v35, &qword_100117520);
  sub_100007CD8(v68, v101, &qword_100117528);
  v106 = &type metadata for NotesFeatureFlags;
  v107 = sub_10003AA0C();
  LOBYTE(v68) = isFeatureEnabled(_:)(&v104);
  sub_100004F28(&v104);
  if ((v68 & 1) != 0)
  {
    v70 = (uint64_t)v90;
    *v90 = 0;
    *(_BYTE *)(v70 + 8) = 1;
    sub_100083898(v65, v70 + *(int *)(v66 + 36));
    v108[0] = 1;
    State.init(wrappedValue:)(&v104, v108, &type metadata for Bool);
    v71 = v104;
    v72 = v105;
    v73 = v100;
    sub_10000531C(v70, v100, &qword_100117520);
    v74 = v73 + *(int *)(v62 + 36);
    *(_BYTE *)v74 = v71;
    *(_QWORD *)(v74 + 8) = v72;
    *(_OWORD *)(v74 + 16) = xmmword_1000D2640;
    sub_100004F48(v70, &qword_100117520);
    sub_100007CD8(v73, v103, &qword_100117528);
    v59 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v103, v59, 1, v62);
  v75 = *(_QWORD *)(v65 + 56);
  v76 = *(_BYTE *)(v65 + 64);
  swift_retain(v75);
  v78 = sub_100043890(v77, v76);
  swift_release(v75);
  KeyPath = swift_getKeyPath(&unk_1000D2780);
  v104 = v78;
  v80 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v104, KeyPath, v80);
  swift_release(KeyPath);
  v81 = *(unsigned __int8 *)(v78 + 48);
  swift_release(v78);
  __asm { BR              X9 }
}

uint64_t sub_100082A8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;

  v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669746E65696373, 0xEA00000000006369, 0x657061506874616DLL, 0xE900000000000072, 0);
  swift_bridgeObjectRelease(0xEA00000000006369);
  if ((v4 & 1) != 0)
  {
    v6 = sub_100005360(&qword_100117538);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v0, 1, 1, v6);
  }
  else
  {
    v7 = *(_QWORD *)(v3 - 312);
    sub_100084434(v7, v5);
    *(_BYTE *)(v3 - 89) = 1;
    State.init(wrappedValue:)((_QWORD *)(v3 - 136), v3 - 89, &type metadata for Bool);
    v8 = v1;
    v9 = *(_BYTE *)(v3 - 136);
    v10 = *(_QWORD *)(v3 - 128);
    v11 = *(_QWORD *)(v3 - 272);
    sub_10000531C(v7, v11, &qword_100117500);
    v12 = v11 + *(int *)(*(_QWORD *)(v3 - 320) + 36);
    *(_BYTE *)v12 = v9;
    *(_QWORD *)(v12 + 8) = v10;
    *(_OWORD *)(v12 + 16) = xmmword_1000D2640;
    sub_100004F48(v7, &qword_100117500);
    v13 = *(_QWORD *)(v3 - 296);
    sub_100007CD8(v11, v13, &qword_100117508);
    v14 = *(_QWORD *)(v3 - 280);
    *(_QWORD *)v14 = 0;
    *(_BYTE *)(v14 + 8) = 1;
    sub_100084A04(v2, v14 + *(int *)(*(_QWORD *)(v3 - 304) + 36));
    *(_BYTE *)(v3 - 89) = 1;
    State.init(wrappedValue:)((_QWORD *)(v3 - 136), v3 - 89, &type metadata for Bool);
    v15 = *(_BYTE *)(v3 - 136);
    v16 = *(_QWORD *)(v3 - 128);
    v17 = *(_QWORD *)(v3 - 256);
    sub_10000531C(v14, v17, &qword_1001174F0);
    v18 = v17 + *(int *)(*(_QWORD *)(v3 - 288) + 36);
    *(_BYTE *)v18 = v15;
    *(_QWORD *)(v18 + 8) = v16;
    v1 = v8;
    *(_OWORD *)(v18 + 16) = xmmword_1000D2650;
    sub_100004F48(v14, &qword_1001174F0);
    v19 = *(_QWORD *)(v3 - 264);
    sub_100007CD8(v17, v19, &qword_1001174F8);
    sub_10000531C(v13, v11, &qword_100117508);
    sub_10000531C(v19, v17, &qword_1001174F8);
    sub_10000531C(v11, v8, &qword_100117508);
    v20 = sub_100005360(&qword_100117530);
    sub_10000531C(v17, v8 + *(int *)(v20 + 48), &qword_1001174F8);
    v21 = v19;
    v0 = *(_QWORD *)(v3 - 176);
    sub_100004F48(v21, &qword_1001174F8);
    sub_100004F48(v13, &qword_100117508);
    sub_100004F48(v17, &qword_1001174F8);
    sub_100004F48(v11, &qword_100117508);
    v22 = sub_100005360(&qword_100117538);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v8, 0, 1, v22);
    sub_100007CD8(v8, v0, &qword_100117510);
  }
  v23 = *(_QWORD *)(v3 - 168);
  sub_10000531C(*(_QWORD *)(v3 - 152), v23, &qword_100117528);
  v24 = *(_QWORD *)(v3 - 160);
  v25 = *(_QWORD *)(v3 - 208);
  sub_10000531C(v24, v25, &qword_100117528);
  v26 = *(_QWORD *)(v3 - 144);
  v27 = *(_QWORD *)(v3 - 200);
  sub_10000531C(v26, v27, &qword_100117518);
  sub_10000531C(v0, v1, &qword_100117510);
  v28 = *(_QWORD *)(v3 - 184);
  sub_10000531C(v23, v28, &qword_100117528);
  v29 = v0;
  v30 = v1;
  v31 = (int *)sub_100005360(&qword_100117540);
  sub_10000531C(v25, v28 + v31[12], &qword_100117528);
  sub_10000531C(v27, v28 + v31[16], &qword_100117518);
  sub_10000531C(v30, v28 + v31[20], &qword_100117510);
  sub_100004F48(v29, &qword_100117510);
  sub_100004F48(v26, &qword_100117518);
  sub_100004F48(v24, &qword_100117528);
  sub_100004F48(*(_QWORD *)(v3 - 152), &qword_100117528);
  sub_100004F48(v30, &qword_100117510);
  sub_100004F48(v27, &qword_100117518);
  sub_100004F48(v25, &qword_100117528);
  return sub_100004F48(v23, &qword_100117528);
}

void sub_100082EB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = type metadata accessor for ModeMenuView(0);
  __chkstk_darwin(v2, v3);
  v4 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v4, v5);
  v6 = type metadata accessor for ModeMenuOption(0);
  v8 = __chkstk_darwin(v6, v7);
  LocalizedStringResource.init(stringLiteral:)(0x6369736142, 0xE500000000000000, v8);
  if (qword_100113BA8 != -1)
    swift_once(&qword_100113BA8, sub_10002DF7C);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_BYTE *)(a1 + 64);
  swift_retain(qword_10011FA60);
  swift_retain(v9);
  v12 = sub_100043890(v11, v10);
  swift_release(v9);
  KeyPath = swift_getKeyPath(&unk_1000D2780);
  v16 = v12;
  v14 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v16, KeyPath, v14);
  swift_release(KeyPath);
  v15 = *(unsigned __int8 *)(v12 + 48);
  swift_release(v12);
  __asm { BR              X10 }
}

double sub_100083220(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;
  _QWORD v7[4];

  v2 = static Animation.easeOut(duration:)(0.17);
  v7[2] = a1;
  withAnimation<A>(_:_:)(v2, sub_100089808, v7, (char *)&type metadata for () + 8);
  swift_release(v2);
  v3 = *(_QWORD *)(a1 + 56);
  LOBYTE(a1) = *(_BYTE *)(a1 + 64);
  swift_retain(v3);
  v5 = sub_100043890(v4, a1);
  swift_release(v3);
  sub_10001F808(0);
  *(_QWORD *)&result = swift_release(v5).n128_u64[0];
  return result;
}

void sub_1000832C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v3 = type metadata accessor for ModeMenuView(0);
  v18 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v3, v5);
  v20 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v19 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v6);
  v7 = type metadata accessor for ModeMenuOption(0);
  v9 = __chkstk_darwin(v7, v8);
  LocalizedStringResource.init(stringLiteral:)(0x6669746E65696353, 0xEA00000000006369, v9);
  if (qword_100113BB0 != -1)
    swift_once(&qword_100113BB0, sub_10002DFBC);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_BYTE *)(a1 + 64);
  v17[1] = qword_10011FA68;
  swift_retain(qword_10011FA68);
  swift_retain(v10);
  v13 = sub_100043890(v12, v11);
  swift_release(v10);
  KeyPath = swift_getKeyPath(&unk_1000D2780);
  v23 = v13;
  v15 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v15);
  swift_release(KeyPath);
  v16 = *(unsigned __int8 *)(v13 + 48);
  swift_release(v13);
  __asm { BR              X9 }
}

void sub_1000836D4(uint64_t a1)
{
  id v2;
  char v3;
  unsigned __int8 *v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  char v19;
  unsigned __int8 *v20;
  uint64_t v21;

  v2 = *(id *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  sub_1000392B8(*(id *)a1, v3);
  v4 = (unsigned __int8 *)sub_100043FD0(v2, v3);
  sub_100039308(v2, v3);
  KeyPath = swift_getKeyPath(&unk_1000D2888);
  v20 = v4;
  v6 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v20, KeyPath, v6);
  swift_release(KeyPath);
  LODWORD(v2) = v4[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeScientificAllowed];

  if ((_DWORD)v2 == 1)
  {
    v7 = static Animation.easeOut(duration:)(0.17);
    __chkstk_darwin(v7, v8);
    v18[2] = a1;
    withAnimation<A>(_:_:)(v9, sub_100089808, v18, (char *)&type metadata for () + 8);
    swift_release(v7);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_BYTE *)(a1 + 64);
    swift_retain(v10);
    v13 = sub_100043890(v12, v11);
    swift_release(v10);
    sub_10001F808(1);
    swift_release(v13);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 104);
    LOBYTE(v20) = *(_BYTE *)(a1 + 96);
    v21 = v14;
    v19 = 4;
    v15 = sub_100005360(&qword_100117468);
    State.wrappedValue.setter(&v19, v15);
    v16 = *(_QWORD *)(a1 + 120);
    LOBYTE(v20) = *(_BYTE *)(a1 + 112);
    v21 = v16;
    v19 = 1;
    v17 = sub_100005360(&qword_100113FF8);
    State.wrappedValue.setter(&v19, v17);
  }
}

void sub_100083898(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v22 = a2;
  v3 = type metadata accessor for ModeMenuView(0);
  v18 = *(_QWORD *)(v3 - 8);
  v4 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v3, v5);
  v20 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v19 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v6);
  v7 = type metadata accessor for ModeMenuOption(0);
  v9 = __chkstk_darwin(v7, v8);
  LocalizedStringResource.init(stringLiteral:)(0x746F4E206874614DLL, 0xEA00000000007365, v9);
  if (qword_100113BB8 != -1)
    swift_once(&qword_100113BB8, sub_10002DFEC);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_BYTE *)(a1 + 64);
  v17[1] = qword_10011FA70;
  swift_retain(qword_10011FA70);
  swift_retain(v10);
  v13 = sub_100043890(v12, v11);
  swift_release(v10);
  KeyPath = swift_getKeyPath(&unk_1000D2780);
  v23 = v13;
  v15 = sub_100005178((unint64_t *)&qword_100113FA0, type metadata accessor for CalculatorViewModel, (uint64_t)&unk_1000CE268);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v23, KeyPath, v15);
  swift_release(KeyPath);
  v16 = *(unsigned __int8 *)(v13 + 48);
  swift_release(v13);
  __asm { BR              X9 }
}

double sub_100083CB4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  _BYTE v11[7];
  char v12;

  v2 = type metadata accessor for ModeMenuView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  if (qword_100113F40 != -1)
    swift_once(&qword_100113F40, sub_1000BF928);
  v12 = 0;
  v6 = SBSGetScreenLockStatus(&v12);
  if (!v12 || !v6)
    return sub_100083DF4();
  sub_100014084(a1, (uint64_t)&v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for ModeMenuView);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_10010C2A8, v8 + v4, v7 | 7);
  sub_1000140C8((uint64_t)&v11[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], v9 + v8, type metadata accessor for ModeMenuView);
  sub_1000C00F4((uint64_t)sub_100087F08, v9);
  *(_QWORD *)&result = swift_release(v9).n128_u64[0];
  return result;
}

double sub_100083DF4()
{
  void **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  char v15;
  unsigned __int8 *v16;
  uint64_t KeyPath;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double result;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  unsigned int v60;
  uint64_t v61;
  _BYTE v62[15];
  char v63;
  unsigned __int8 *v64;
  uint64_t v65;

  v1 = (uint64_t)v0;
  v2 = type metadata accessor for ModeMenuView(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2, v5);
  v6 = sub_100005360(&qword_1001142E0);
  __chkstk_darwin(v6, v7);
  v9 = &v62[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100005360(&qword_100114860);
  __chkstk_darwin(v10, v11);
  v13 = &v62[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = *v0;
  v15 = *(_BYTE *)(v1 + 8);
  sub_1000392B8(v14, v15);
  v16 = (unsigned __int8 *)sub_100043FD0(v14, v15);
  sub_100039308(v14, v15);
  KeyPath = swift_getKeyPath(&unk_1000D27A8);
  v64 = v16;
  v18 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v64, KeyPath, v18);
  swift_release(KeyPath);
  LODWORD(v14) = v16[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorModeMathPaperAllowed];

  if ((_DWORD)v14 == 1)
  {
    if ((sub_10007C940() & 1) != 0)
    {
      v19 = objc_allocWithZone((Class)LSApplicationRecord);
      v20 = sub_10007C868(0xD000000000000015, 0x80000001000D7040, 0);
      v59 = v20;
      if (!v20)
        goto LABEL_4;
      if (qword_100113990 != -1)
        swift_once(&qword_100113990, sub_10001B6D0);
      v60 = objc_msgSend((id)qword_1001147B0, "requiresPreflightForApplicationRecord:", v59);

      if (!v60)
      {
LABEL_4:
        v21 = *(_QWORD *)(v1 + 56);
        v22 = *(_BYTE *)(v1 + 64);
        swift_retain(v21);
        v24 = sub_100043890(v23, v22);
        swift_release(v21);
        sub_10001F808(2);
        swift_release(v24);
LABEL_24:
        v52 = type metadata accessor for TaskPriority(0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v9, 1, 1, v52);
        sub_100014084(v1, (uint64_t)&v62[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for ModeMenuView);
        v53 = type metadata accessor for MainActor(0);
        v54 = static MainActor.shared.getter(v53);
        v55 = *(unsigned __int8 *)(v3 + 80);
        v56 = (v55 + 32) & ~v55;
        v57 = swift_allocObject(&unk_10010C2D0, v56 + v4, v55 | 7);
        *(_QWORD *)(v57 + 16) = v54;
        *(_QWORD *)(v57 + 24) = &protocol witness table for MainActor;
        sub_1000140C8((uint64_t)&v62[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)], v57 + v56, type metadata accessor for ModeMenuView);
        v58 = sub_100096424((uint64_t)v9, (uint64_t)&unk_100117550, v57);
        *(_QWORD *)&result = swift_release(v58).n128_u64[0];
        return result;
      }
      v61 = *(_QWORD *)(v1 + 104);
      LOBYTE(v64) = *(_BYTE *)(v1 + 96);
      v65 = v61;
      v50 = 2;
    }
    else
    {
      if (qword_100113B98 != -1)
        swift_once(&qword_100113B98, sub_10001C014);
      v35 = sub_100014124(v10, (uint64_t)qword_10011FA30);
      sub_10000531C(v35, (uint64_t)v13, &qword_100114860);
      v37 = type metadata accessor for URL(0, v36);
      v38 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 48))(v13, 1, v37);
      sub_100004F48((uint64_t)v13, &qword_100114860);
      if (v38 == 1)
      {
        if (qword_100113F00 != -1)
          swift_once(&qword_100113F00, sub_1000A85AC);
        v39 = type metadata accessor for Logger(0);
        v40 = sub_100014124(v39, (uint64_t)qword_10011FEA8);
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v41, v42))
        {
          v43 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v43 = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid URL link attempting to prompt Notes app installation.", v43, 2u);
          swift_slowDealloc(v43, -1, -1);
        }

        goto LABEL_24;
      }
      if (qword_100113F00 != -1)
        swift_once(&qword_100113F00, sub_1000A85AC);
      v44 = type metadata accessor for Logger(0);
      v45 = sub_100014124(v44, (uint64_t)qword_10011FEA8);
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Notes app not installed. Prompting installation…", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }

      v49 = *(_QWORD *)(v1 + 104);
      LOBYTE(v64) = *(_BYTE *)(v1 + 96);
      v65 = v49;
      v50 = 1;
    }
    v63 = v50;
    v51 = sub_100005360(&qword_100117468);
    State.wrappedValue.setter(&v63, v51);
    goto LABEL_24;
  }
  if (qword_100113F00 != -1)
    swift_once(&qword_100113F00, sub_1000A85AC);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_100014124(v25, (uint64_t)qword_10011FEA8);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Math Notes disabled…", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  v30 = *(_QWORD *)(v1 + 104);
  LOBYTE(v64) = *(_BYTE *)(v1 + 96);
  v65 = v30;
  v63 = 5;
  v31 = sub_100005360(&qword_100117468);
  State.wrappedValue.setter(&v63, v31);
  v32 = *(_QWORD *)(v1 + 120);
  LOBYTE(v64) = *(_BYTE *)(v1 + 112);
  v65 = v32;
  v63 = 1;
  v33 = sub_100005360(&qword_100113FF8);
  State.wrappedValue.setter(&v63, v33);
  return result;
}

uint64_t sub_100084434@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  double v55;
  uint64_t v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  double v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  double v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  _OWORD v92[3];

  v91 = a1;
  v3 = type metadata accessor for Divider(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100005360(&qword_100117618);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100005360(&qword_100117620);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100005360(&qword_100117628);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100005360(&qword_100117630);
  __chkstk_darwin(v87, v20);
  v90 = (char *)&v86 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100005360(&qword_100117500);
  __chkstk_darwin(v88, v22);
  v89 = (uint64_t)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  Divider.init()(v24);
  v26 = static Alignment.center.getter(v25);
  _FrameLayout.init(width:height:alignment:)(v92, 0, 1, 0x3FF0000000000000, 0, v26, v27);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v11, v7, v3);
  v28 = &v11[*(int *)(v8 + 36)];
  v29 = v92[1];
  *(_OWORD *)v28 = v92[0];
  *((_OWORD *)v28 + 1) = v29;
  *((_OWORD *)v28 + 2) = v92[2];
  v30 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v31 = static Color.black.getter(v30);
  LOBYTE(v7) = static Edge.Set.all.getter(v31);
  sub_10000531C((uint64_t)v11, (uint64_t)v15, &qword_100117618);
  v32 = &v15[*(int *)(v12 + 36)];
  *(_QWORD *)v32 = v31;
  v32[8] = (char)v7;
  v33 = sub_100004F48((uint64_t)v11, &qword_100117618);
  v34 = static Edge.Set.horizontal.getter(v33);
  v35 = *(_QWORD *)(v2 + 16);
  v36 = *(_BYTE *)(v2 + 24);
  swift_retain(v35);
  v38 = sub_1000436BC(v37, v36);
  swift_release(v35);
  if (sub_1000090E4())
  {
    v39 = 27.5;
  }
  else
  {
    if (qword_1001139C8 != -1)
      swift_once(&qword_1001139C8, sub_10001B7BC);
    v39 = *(double *)&qword_10011F850;
  }
  v40 = (uint64_t)v90;
  swift_release(v38);
  v42 = EdgeInsets.init(_all:)(v41, -v39);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  sub_10000531C((uint64_t)v15, (uint64_t)v19, &qword_100117620);
  v49 = &v19[*(int *)(v16 + 36)];
  *v49 = v34;
  *((double *)v49 + 1) = v42;
  *((_QWORD *)v49 + 2) = v44;
  *((_QWORD *)v49 + 3) = v46;
  *((_QWORD *)v49 + 4) = v48;
  v49[40] = 0;
  v50 = sub_100004F48((uint64_t)v15, &qword_100117620);
  v51 = static Edge.Set.top.getter(v50);
  swift_retain(v35);
  v53 = sub_1000436BC(v52, v36);
  swift_release(v35);
  if (sub_1000090E4())
  {
    if (qword_100113B78 != -1)
      swift_once(&qword_100113B78, sub_10001BFD4);
    v54 = &qword_10011FA10;
  }
  else
  {
    if (qword_1001139B8 != -1)
      swift_once(&qword_1001139B8, sub_10001B79C);
    v54 = &qword_10011F840;
  }
  v55 = *(double *)v54;
  swift_release(v53);
  v57 = EdgeInsets.init(_all:)(v56, v55 * 0.5);
  v59 = v58;
  v61 = v60;
  v63 = v62;
  sub_10000531C((uint64_t)v19, v40, &qword_100117628);
  v64 = v40 + *(int *)(v87 + 36);
  *(_BYTE *)v64 = v51;
  *(double *)(v64 + 8) = v57;
  *(_QWORD *)(v64 + 16) = v59;
  *(_QWORD *)(v64 + 24) = v61;
  *(_QWORD *)(v64 + 32) = v63;
  *(_BYTE *)(v64 + 40) = 0;
  v65 = sub_100004F48((uint64_t)v19, &qword_100117628);
  v66 = static Edge.Set.bottom.getter(v65);
  swift_retain(v35);
  v68 = sub_1000436BC(v67, v36);
  swift_release(v35);
  if (sub_1000090E4())
  {
    if (qword_100113B90 != -1)
      swift_once(&qword_100113B90, sub_10001C004);
    v69 = &qword_10011FA28;
  }
  else
  {
    if (qword_1001139D8 != -1)
      swift_once(&qword_1001139D8, sub_10001B7DC);
    v69 = &qword_10011F860;
  }
  v70 = *(double *)v69;
  swift_release(v68);
  swift_retain(v35);
  v72 = sub_1000436BC(v71, v36);
  swift_release(v35);
  if (sub_1000090E4())
  {
    if (qword_100113B78 != -1)
      swift_once(&qword_100113B78, sub_10001BFD4);
    v73 = &qword_10011FA10;
  }
  else
  {
    if (qword_1001139B8 != -1)
      swift_once(&qword_1001139B8, sub_10001B79C);
    v73 = &qword_10011F840;
  }
  v74 = *(double *)v73;
  swift_release(v72);
  v76 = EdgeInsets.init(_all:)(v75, v70 - v74);
  v78 = v77;
  v80 = v79;
  v82 = v81;
  v83 = v89;
  sub_10000531C(v40, v89, &qword_100117630);
  v84 = v83 + *(int *)(v88 + 36);
  *(_BYTE *)v84 = v66;
  *(double *)(v84 + 8) = v76;
  *(_QWORD *)(v84 + 16) = v78;
  *(_QWORD *)(v84 + 24) = v80;
  *(_QWORD *)(v84 + 32) = v82;
  *(_BYTE *)(v84 + 40) = 0;
  sub_100004F48(v40, &qword_100117630);
  return sub_100007CD8(v83, v91, &qword_100117500);
}

uint64_t sub_100084A04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t KeyPath;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t (*v67)(char *, uint64_t, __n128);
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  uint64_t v98;
  uint64_t OpaqueTypeConformance2;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  __n128 v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  id v138;
  char v139;
  unsigned __int8 *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned __int8 *v196;
  unint64_t v197;
  unsigned __int8 v198;
  uint64_t v199;
  __int16 v200;
  char v201;

  v192 = a2;
  v3 = sub_100005360(&qword_100117558);
  __chkstk_darwin(v3, v4);
  v193 = (uint64_t)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  v190 = (char *)&v163 - v8;
  v11 = __chkstk_darwin(v9, v10);
  v191 = (uint64_t)&v163 - v12;
  v13 = type metadata accessor for AccessibilityTraits(0, v11);
  v187 = *(_QWORD *)(v13 - 8);
  v188 = v13;
  __chkstk_darwin(v13, v14);
  v186 = (char *)&v163 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for ControlSize(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182, v16);
  v180 = (char *)&v163 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for TintPlacement(0);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175, v18);
  v172 = (char *)&v163 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = v19;
  __chkstk_darwin(v20, v21);
  v173 = (char *)&v163 - v22;
  v23 = type metadata accessor for ModeMenuView(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(_QWORD *)(v24 + 64);
  __chkstk_darwin(v23, v26);
  v27 = (char *)&v163 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = sub_100005360(&qword_100117560);
  v165 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166, v28);
  v163 = (char *)&v163 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100005360(&qword_100117568);
  __chkstk_darwin(v164, v30);
  v167 = (char *)&v163 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_100005360(&qword_100117570);
  __chkstk_darwin(v168, v32);
  v171 = (uint64_t)&v163 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100005360(&qword_100117578);
  __chkstk_darwin(v176, v34);
  v170 = (char *)&v163 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = sub_100005360(&qword_100117580);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179, v36);
  v177 = (char *)&v163 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100005360(&qword_100117588);
  __chkstk_darwin(v185, v38);
  v183 = (char *)&v163 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v40, v41);
  v184 = (char *)&v163 - v42;
  __chkstk_darwin(v43, v44);
  v195 = (uint64_t)&v163 - v45;
  __chkstk_darwin(v46, v47);
  v194 = (uint64_t)&v163 - v48;
  sub_100014084(a1, (uint64_t)v27, type metadata accessor for ModeMenuView);
  v49 = type metadata accessor for MainActor(0);
  v50 = static MainActor.shared.getter(v49);
  v51 = *(unsigned __int8 *)(v24 + 80);
  v52 = (v51 + 32) & ~v51;
  v53 = v52 + v25;
  v54 = v51 | 7;
  v55 = swift_allocObject(&unk_10010C2F8, v53, v51 | 7);
  *(_QWORD *)(v55 + 16) = v50;
  *(_QWORD *)(v55 + 24) = &protocol witness table for MainActor;
  sub_1000140C8((uint64_t)v27, v55 + v52, type metadata accessor for ModeMenuView);
  v189 = a1;
  v56 = sub_100014084(a1, (uint64_t)v27, type metadata accessor for ModeMenuView);
  v57 = static MainActor.shared.getter(v56);
  v58 = swift_allocObject(&unk_10010C320, v53, v54);
  *(_QWORD *)(v58 + 16) = v57;
  *(_QWORD *)(v58 + 24) = &protocol witness table for MainActor;
  v59 = v58 + v52;
  v60 = v163;
  sub_1000140C8((uint64_t)v27, v59, type metadata accessor for ModeMenuView);
  Binding.init(get:set:)(&v196, sub_100088AEC, v55, sub_100088C44, v58, &type metadata for Bool);
  Toggle.init(isOn:label:)(v196, v197, v198, sub_1000859FC, 0, &type metadata for Text, &protocol witness table for Text);
  if (qword_100113CE0 != -1)
    swift_once(&qword_100113CE0, sub_100052F74);
  v61 = qword_10011FC88;
  KeyPath = swift_getKeyPath(&unk_1000D27D0);
  v63 = v165;
  v64 = (uint64_t)v167;
  v65 = v166;
  (*(void (**)(char *, char *, uint64_t))(v165 + 16))(v167, v60, v166);
  v66 = (uint64_t *)(v64 + *(int *)(v164 + 36));
  *v66 = KeyPath;
  v66[1] = v61;
  v67 = *(uint64_t (**)(char *, uint64_t, __n128))(v63 + 8);
  v68 = swift_retain(v61);
  v69 = v67(v60, v65, v68);
  v70 = static Color.white.getter(v69);
  v71 = v173;
  static TintPlacement.switchThumb.getter();
  v72 = swift_getKeyPath(&unk_1000D2800);
  v196 = (unsigned __int8 *)v70;
  v73 = v174;
  v74 = v172;
  v75 = v175;
  (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v172, v71, v175);
  v76 = *(unsigned __int8 *)(v73 + 80);
  v77 = (v76 + 24) & ~v76;
  v78 = swift_allocObject(&unk_10010C348, v77 + v169, v76 | 7);
  sub_100007CD8((uint64_t)&v196, v78 + 16, &qword_100117590);
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v78 + v77, v74, v75);
  v79 = v171;
  sub_10000531C(v64, v171, &qword_100117568);
  v80 = (uint64_t *)(v79 + *(int *)(v168 + 36));
  *v80 = v72;
  v80[1] = (uint64_t)sub_100088D98;
  v80[2] = v78;
  (*(void (**)(char *, uint64_t))(v73 + 8))(v71, v75);
  sub_100004F48(v64, &qword_100117568);
  v81 = v181;
  v82 = v180;
  v83 = v182;
  (*(void (**)(char *, _QWORD, uint64_t))(v181 + 104))(v180, enum case for ControlSize.mini(_:), v182);
  v84 = swift_getKeyPath(&unk_1000D2830);
  v85 = v176;
  v86 = (uint64_t)v170;
  v87 = (uint64_t *)&v170[*(int *)(v176 + 36)];
  v88 = sub_100005360(&qword_100117598);
  (*(void (**)(char *, char *, uint64_t))(v81 + 16))((char *)v87 + *(int *)(v88 + 28), v82, v83);
  *v87 = v84;
  sub_10000531C(v79, v86, &qword_100117570);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v83);
  sub_100004F48(v79, &qword_100117570);
  v89 = sub_100088DE0();
  v90 = v177;
  View.labelsHidden()(v85, v89);
  sub_100004F48(v86, &qword_100117578);
  v91 = LocalizedStringKey.init(stringLiteral:)(0x6E6F432074696E55, 0xEF6E6F6973726576);
  v92 = Text.init(_:tableName:bundle:comment:)(v91);
  v94 = v93;
  v96 = v95;
  v98 = v97 & 1;
  v196 = (unsigned __int8 *)v85;
  v197 = v89;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v196, &opaque type descriptor for <<opaque return type of View.labelsHidden()>>, 1);
  v100 = (uint64_t)v183;
  v101 = v179;
  View.accessibilityLabel(_:)(v92, v94, v98, v96, v179, OpaqueTypeConformance2);
  sub_10002DD44(v92, v94, v98);
  swift_bridgeObjectRelease(v96);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v90, v101);
  v102 = sub_100005360(&qword_100114EC8);
  v103 = v187;
  v104 = swift_allocObject(v102, ((*(unsigned __int8 *)(v187 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v187 + 80))+ 2 * *(_QWORD *)(v187 + 72), *(unsigned __int8 *)(v187 + 80) | 7);
  *(_OWORD *)(v104 + 16) = xmmword_1000D0760;
  v105 = static AccessibilityTraits.isToggle.getter();
  static AccessibilityTraits.isButton.getter(v105);
  v196 = (unsigned __int8 *)v104;
  v106 = sub_100005178(&qword_100114EA8, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityTraits, (uint64_t)&protocol conformance descriptor for AccessibilityTraits);
  v107 = sub_100005360(&qword_100114EB0);
  v108 = sub_100008078(&qword_100114EB8, &qword_100114EB0, (uint64_t)&protocol conformance descriptor for [A]);
  v109 = v186;
  v110 = v107;
  v111 = v188;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v196, v110, v108, v188, v106);
  v113 = (uint64_t)v184;
  v112 = v185;
  ModifiedContent<>.accessibilityAddTraits(_:)(v109, v185);
  (*(void (**)(char *, uint64_t))(v103 + 8))(v109, v111);
  sub_100004F48(v100, &qword_100117588);
  v114 = v195;
  ModifiedContent<>.accessibilityIdentifier(_:)(0xD000000000000014, 0x80000001000D7210, v112);
  sub_100004F48(v113, &qword_100117588);
  sub_100007CD8(v114, v194, &qword_100117588);
  v115 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, 0x80000001000D7230);
  v116 = Text.init(_:tableName:bundle:comment:)(v115);
  v118 = v117;
  v120 = v119;
  v122 = v121;
  v123 = v189;
  v124 = *(_QWORD *)(v189 + 16);
  LOBYTE(v84) = *(_BYTE *)(v189 + 24);
  swift_retain(v124);
  v126 = sub_1000436BC(v125, v84);
  swift_release(v124);
  if (sub_1000090E4())
  {
    if (qword_100113EB8 != -1)
      swift_once(&qword_100113EB8, sub_10008998C);
    v127 = &qword_10011FE60;
  }
  else
  {
    if (qword_100113E98 != -1)
      swift_once(&qword_100113E98, sub_10008992C);
    v127 = &qword_10011FE40;
  }
  v128 = *v127;
  swift_retain(*v127);
  v129 = swift_release(v126);
  v130 = v120 & 1;
  v131 = Text.font(_:)(v128, v116, v118, v120 & 1, v122, v129);
  v133 = v132;
  v135 = v134;
  v137 = v136;
  swift_release(v128);
  sub_10002DD44(v116, v118, v130);
  swift_bridgeObjectRelease(v122);
  v138 = *(id *)v123;
  v139 = *(_BYTE *)(v123 + 8);
  sub_1000392B8(*(id *)v123, v139);
  v140 = (unsigned __int8 *)sub_100043FD0(v138, v139);
  sub_100039308(v138, v139);
  v141 = swift_getKeyPath(&unk_1000D2860);
  v196 = v140;
  v142 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v196, v141, v142);
  swift_release(v141);
  LODWORD(v138) = v140[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed];

  if ((_DWORD)v138 == 1)
    v144 = static HierarchicalShapeStyle.primary.getter(v143);
  else
    v144 = static HierarchicalShapeStyle.tertiary.getter(v143);
  v145 = v135 & 1;
  LODWORD(v196) = v144;
  v146 = Text.foregroundStyle<A>(_:)(&v196, v131, v133, v135 & 1, v137, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v148 = v147;
  v150 = v149;
  v152 = v151 & 1;
  sub_10002DD44(v131, v133, v145);
  swift_bridgeObjectRelease(v137);
  v196 = (unsigned __int8 *)v146;
  v197 = v148;
  v198 = v152;
  v199 = v150;
  v200 = 256;
  v201 = 1;
  v153 = sub_100005360(&qword_1001175D8);
  v154 = sub_10003D3C8(&qword_1001175E0, &qword_1001175D8, (void (*)(void))sub_100088F8C);
  v155 = (uint64_t)v190;
  View.accessibilityHidden(_:)(1, v153, v154);
  sub_10002DD44(v146, v148, v152);
  swift_bridgeObjectRelease(v150);
  v156 = v191;
  sub_100007CD8(v155, v191, &qword_100117558);
  v158 = v194;
  v157 = v195;
  sub_10000531C(v194, v195, &qword_100117588);
  v159 = v193;
  sub_10000531C(v156, v193, &qword_100117558);
  v160 = v192;
  sub_10000531C(v157, v192, &qword_100117588);
  v161 = sub_100005360(&qword_1001175F8);
  sub_10000531C(v159, v160 + *(int *)(v161 + 48), &qword_100117558);
  sub_100004F48(v156, &qword_100117558);
  sub_100004F48(v158, &qword_100117588);
  sub_100004F48(v159, &qword_100117558);
  return sub_100004F48(v157, &qword_100117588);
}

_QWORD *sub_100085768@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_100005360(&qword_100115300);
  result = Binding.wrappedValue.getter(&v4, v2);
  *a1 = v4;
  return result;
}

void sub_1000857BC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;
  id v6;
  char v7;
  unsigned __int8 *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  uint64_t v22;
  char v23;
  char v24;
  unsigned __int8 *v25;
  uint64_t v26;

  v5 = *a1;
  v6 = *(id *)a4;
  v7 = *(_BYTE *)(a4 + 8);
  sub_1000392B8(*(id *)a4, v7);
  v8 = (unsigned __int8 *)sub_100043FD0(v6, v7);
  sub_100039308(v6, v7);
  KeyPath = swift_getKeyPath(&unk_1000D2860);
  v25 = v8;
  v10 = sub_100005178((unint64_t *)&qword_100114A30, type metadata accessor for CalculatorMDMRestrictionsManager, (uint64_t)&unk_1000CF2B8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v25, KeyPath, v10);
  swift_release(KeyPath);
  LODWORD(v6) = v8[OBJC_IVAR____TtC10Calculator32CalculatorMDMRestrictionsManager__isCalculatorInputModeUnitConversionAllowed];

  if ((_DWORD)v6 == 1)
  {
    v11 = static Animation.easeInOut.getter();
    __chkstk_darwin(v11, v12);
    v22 = a4;
    v23 = v5;
    withAnimation<A>(_:_:)(v13, sub_100089010, v21, (char *)&type metadata for () + 8);
    swift_release(v11);
    v14 = static Animation.easeOut(duration:)(0.17);
    __chkstk_darwin(v14, v15);
    v22 = a4;
    withAnimation<A>(_:_:)(v16, sub_100089808, v21, (char *)&type metadata for () + 8);
    swift_release(v14);
  }
  else
  {
    v17 = *(_QWORD *)(a4 + 104);
    LOBYTE(v25) = *(_BYTE *)(a4 + 96);
    v26 = v17;
    v24 = 7;
    v18 = sub_100005360(&qword_100117468);
    State.wrappedValue.setter(&v24, v18);
    v19 = *(_QWORD *)(a4 + 120);
    LOBYTE(v25) = *(_BYTE *)(a4 + 112);
    v26 = v19;
    v24 = 1;
    v20 = sub_100005360(&qword_100113FF8);
    State.wrappedValue.setter(&v24, v20);
  }
}

uint64_t sub_1000859A4(uint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_BYTE *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 72);
  v8 = v2;
  v9 = v3;
  v6 = a2;
  v4 = sub_100005360(&qword_100115300);
  return Binding.wrappedValue.setter(&v6, v4);
}

uint64_t sub_1000859FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000014, 0x80000001000D7230);
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

uint64_t sub_100085A78()
{
  uint64_t v0;
  char v2;

  type metadata accessor for ModeMenuView(0);
  v2 = 1;
  v0 = sub_100005360(&qword_100117338);
  return AccessibilityFocusState.wrappedValue.setter(&v2, v0);
}

double sub_100085ACC(uint64_t a1)
{
  uint64_t v2;
  double result;
  _QWORD v4[4];

  v2 = static Animation.easeOut(duration:)(0.17);
  v4[2] = a1;
  withAnimation<A>(_:_:)(v2, sub_100087ED4, v4, (char *)&type metadata for () + 8);
  *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  return result;
}

uint64_t sub_100085B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 32) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 40) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_100085BA0, v6, v7);
}

uint64_t sub_100085BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 40));
  v2 = *(_QWORD *)(v1 + 104);
  *(_BYTE *)(v0 + 16) = *(_BYTE *)(v1 + 96);
  *(_QWORD *)(v0 + 24) = v2;
  v3 = sub_100005360(&qword_100117468);
  State.wrappedValue.getter((_QWORD *)(v0 + 48), v3);
  v4 = *(_QWORD *)(v0 + 32);
  if (*(_BYTE *)(v0 + 48))
  {
    v5 = *(_QWORD *)(v4 + 120);
    *(_BYTE *)(v0 + 16) = *(_BYTE *)(v4 + 112);
    *(_QWORD *)(v0 + 24) = v5;
    *(_BYTE *)(v0 + 48) = 1;
    v6 = sub_100005360(&qword_100113FF8);
    State.wrappedValue.setter(v0 + 48, v6);
  }
  else
  {
    v7 = static Animation.easeOut(duration:)(0.17);
    v8 = swift_task_alloc(32);
    *(_QWORD *)(v8 + 16) = v4;
    withAnimation<A>(_:_:)(v7, sub_100089808, v8, (char *)&type metadata for () + 8);
    swift_release(v7);
    swift_task_dealloc(v8);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100085C98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(unsigned __int8 *)(a1 + 49);
  sub_100007DE0(v1, v2, v3, v4);
  v5 = sub_1000439FC(v1, v2, v3 | (v4 << 8));
  v7 = v6;
  v9 = v8;
  sub_100007ED0(v1, v2, v3, v4);
  swift_retain(v5);
  swift_retain(v7);
  v10 = sub_100005360(&qword_100113FB0);
  Binding.wrappedValue.getter(&v16, v10);
  v13 = v5;
  v14 = v7;
  v15 = v9 & 1;
  v12 = 0;
  Binding.wrappedValue.setter(&v12, v10);
  swift_release_n(v7, 2);
  return swift_release_n(v5, 2);
}

uint64_t type metadata accessor for ModeMenuView(uint64_t a1)
{
  uint64_t result;

  result = qword_100117398;
  if (!qword_100117398)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ModeMenuView);
  return result;
}

char *sub_100085DD4(char *a1, char **a2, uint64_t a3)
{
  int v5;
  char *v7;
  char v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  int *v29;
  uint64_t v30;
  unsigned int (*v32)(char *, uint64_t, uint64_t, __n128);

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v28[(v5 + 16) & ~(unint64_t)v5];
  }
  else
  {
    v7 = *a2;
    v8 = *((_BYTE *)a2 + 8);
    sub_1000392B8(*a2, v8);
    *(_QWORD *)a1 = v7;
    a1[8] = v8;
    v9 = a2[2];
    v10 = *((_BYTE *)a2 + 24);
    *((_QWORD *)a1 + 2) = v9;
    a1[24] = v10;
    v11 = (uint64_t)a2[4];
    v12 = (uint64_t)a2[5];
    v13 = *((_BYTE *)a2 + 49);
    v14 = *((unsigned __int8 *)a2 + 48);
    swift_retain(v9);
    sub_100007DE0(v11, v12, v14, v13);
    *((_QWORD *)a1 + 4) = v11;
    *((_QWORD *)a1 + 5) = v12;
    a1[48] = v14;
    a1[49] = v13;
    v15 = a2[7];
    v16 = *((_BYTE *)a2 + 64);
    *((_QWORD *)a1 + 7) = v15;
    a1[64] = v16;
    v17 = a2[9];
    v18 = a2[10];
    *((_QWORD *)a1 + 9) = v17;
    *((_QWORD *)a1 + 10) = v18;
    a1[88] = *((_BYTE *)a2 + 88);
    a1[96] = *((_BYTE *)a2 + 96);
    v19 = a2[13];
    *((_QWORD *)a1 + 13) = v19;
    a1[112] = *((_BYTE *)a2 + 112);
    v20 = a2[15];
    v21 = *(int *)(a3 + 44);
    v22 = &a1[v21];
    v23 = (char *)a2 + v21;
    *((_QWORD *)a1 + 15) = v20;
    v24 = type metadata accessor for AccessibilityTechnologies(0);
    v25 = *(_QWORD *)(v24 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v25 + 48);
    swift_retain(v15);
    swift_retain(v17);
    swift_retain(v18);
    swift_retain(v19);
    v26 = swift_retain(v20);
    if (v32(v23, 1, v24, v26))
    {
      v27 = sub_100005360(&qword_100117330);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v29 = (int *)sub_100005360(&qword_100117338);
    v22[v29[9]] = v23[v29[9]];
    v30 = v29[10];
    v28 = *(char **)&v23[v30];
    *(_QWORD *)&v22[v30] = v28;
    v22[v29[11]] = v23[v29[11]];
  }
  swift_retain(v28);
  return a1;
}

double sub_100085FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  sub_100039308(*(id *)a1, *(_BYTE *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  sub_100007ED0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(_BYTE *)(a1 + 49));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 72));
  swift_release(*(_QWORD *)(a1 + 80));
  swift_release(*(_QWORD *)(a1 + 104));
  swift_release(*(_QWORD *)(a1 + 120));
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for AccessibilityTechnologies(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = *(_QWORD *)(v4 + *(int *)(sub_100005360(&qword_100117338) + 40));
  *(_QWORD *)&result = swift_release(v7).n128_u64[0];
  return result;
}

uint64_t sub_10008609C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v31)(char *, uint64_t, uint64_t, __n128);

  v6 = *(id *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_1000392B8(*(id *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_BYTE *)(a2 + 49);
  v13 = *(unsigned __int8 *)(a2 + 48);
  swift_retain(v8);
  sub_100007DE0(v10, v11, v13, v12);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  *(_BYTE *)(a1 + 48) = v13;
  *(_BYTE *)(a1 + 49) = v12;
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v14;
  *(_BYTE *)(a1 + 64) = v15;
  v16 = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = v17;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v18 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v18;
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v19 = *(_QWORD *)(a2 + 120);
  v20 = *(int *)(a3 + 44);
  v21 = (char *)(a1 + v20);
  v22 = (char *)(a2 + v20);
  *(_QWORD *)(a1 + 120) = v19;
  v23 = type metadata accessor for AccessibilityTechnologies(0);
  v24 = *(_QWORD *)(v23 - 8);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v24 + 48);
  swift_retain(v14);
  swift_retain(v16);
  swift_retain(v17);
  swift_retain(v18);
  v25 = swift_retain(v19);
  if (v31(v22, 1, v23, v25))
  {
    v26 = sub_100005360(&qword_100117330);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v27 = (int *)sub_100005360(&qword_100117338);
  v21[v27[9]] = v22[v27[9]];
  v28 = v27[10];
  v29 = *(_QWORD *)&v22[v28];
  *(_QWORD *)&v21[v28] = v29;
  v21[v27[11]] = v22[v27[11]];
  swift_retain(v29);
  return a1;
}

uint64_t sub_100086274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t, uint64_t);
  int v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = *(id *)a2;
  v7 = *(_BYTE *)(a2 + 8);
  sub_1000392B8(*(id *)a2, v7);
  v8 = *(void **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_100039308(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_BYTE *)(a2 + 24);
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_BYTE *)(a1 + 24) = v11;
  swift_retain(v10);
  swift_release(v12);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_BYTE *)(a2 + 49);
  v16 = *(_BYTE *)(a2 + 48);
  sub_100007DE0(v13, v14, v16, v15);
  v17 = *(_QWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a1 + 40);
  v19 = *(_BYTE *)(a1 + 49);
  *(_QWORD *)(a1 + 32) = v13;
  *(_QWORD *)(a1 + 40) = v14;
  v20 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v16;
  *(_BYTE *)(a1 + 49) = v15;
  sub_100007ED0(v17, v18, v20, v19);
  v21 = *(_QWORD *)(a2 + 56);
  v22 = *(_BYTE *)(a2 + 64);
  v23 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v21;
  *(_BYTE *)(a1 + 64) = v22;
  swift_retain(v21);
  swift_release(v23);
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v25;
  swift_retain(v25);
  swift_release(v24);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v26;
  swift_retain(v26);
  swift_release(v27);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 96) = *(_BYTE *)(a2 + 96);
  v28 = *(_QWORD *)(a1 + 104);
  v29 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v29;
  swift_retain(v29);
  swift_release(v28);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  v30 = *(_QWORD *)(a1 + 120);
  v31 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v31;
  swift_retain(v31);
  swift_release(v30);
  v32 = *(int *)(a3 + 44);
  v33 = (char *)(a1 + v32);
  v34 = (char *)(a2 + v32);
  v35 = type metadata accessor for AccessibilityTechnologies(0);
  v36 = *(_QWORD *)(v35 - 8);
  v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  LODWORD(v14) = v37(v33, 1, v35);
  v38 = v37(v34, 1, v35);
  if (!(_DWORD)v14)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
    goto LABEL_6;
  }
  if (v38)
  {
LABEL_6:
    v39 = sub_100005360(&qword_100117330);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
LABEL_7:
  v40 = (int *)sub_100005360(&qword_100117338);
  v33[v40[9]] = v34[v40[9]];
  v41 = v40[10];
  v42 = *(_QWORD *)&v33[v41];
  v43 = *(_QWORD *)&v34[v41];
  *(_QWORD *)&v33[v41] = v43;
  swift_retain(v43);
  swift_release(v42);
  v33[v40[11]] = v34[v40[11]];
  return a1;
}

uint64_t sub_1000864DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v4 = *(_OWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v4;
  v5 = *(_OWORD *)(a2 + 112);
  v6 = *(int *)(a3 + 44);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  v9 = type metadata accessor for AccessibilityTechnologies(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100005360(&qword_100117330);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = (int *)sub_100005360(&qword_100117338);
  v7[v12[9]] = v8[v12[9]];
  *(_QWORD *)&v7[v12[10]] = *(_QWORD *)&v8[v12[10]];
  v7[v12[11]] = v8[v12[11]];
  return a1;
}

uint64_t sub_100086618(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;

  v6 = *a2;
  v7 = *((_BYTE *)a2 + 8);
  v8 = *(void **)a1;
  v9 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 8) = v7;
  sub_100039308(v8, v9);
  v10 = *((_BYTE *)a2 + 24);
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v10;
  swift_release(v11);
  v12 = *((_BYTE *)a2 + 48);
  v13 = *((_BYTE *)a2 + 49);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_BYTE *)(a1 + 49);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  v17 = *(unsigned __int8 *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v12;
  *(_BYTE *)(a1 + 49) = v13;
  sub_100007ED0(v14, v15, v17, v16);
  v18 = *((_BYTE *)a2 + 64);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_BYTE *)(a1 + 64) = v18;
  swift_release(v19);
  v20 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = a2[9];
  swift_release(v20);
  v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = a2[10];
  swift_release(v21);
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  v22 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_release(v22);
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  v23 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = a2[15];
  swift_release(v23);
  v24 = *(int *)(a3 + 44);
  v25 = (char *)(a1 + v24);
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for AccessibilityTechnologies(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 40))(v25, v26, v27);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v28 + 8))(v25, v27);
    goto LABEL_6;
  }
  if (v31)
  {
LABEL_6:
    v32 = sub_100005360(&qword_100117330);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
LABEL_7:
  v33 = (int *)sub_100005360(&qword_100117338);
  v25[v33[9]] = v26[v33[9]];
  v34 = v33[10];
  v35 = *(_QWORD *)&v25[v34];
  *(_QWORD *)&v25[v34] = *(_QWORD *)&v26[v34];
  swift_release(v35);
  v25[v33[11]] = v26[v33[11]];
  return a1;
}

uint64_t sub_100086828(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100086834);
}

uint64_t sub_100086834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100005360(&qword_100117338);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_1000868B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000868C0);
}

uint64_t sub_1000868C0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 80) = (a2 - 1);
  }
  else
  {
    v7 = sub_100005360(&qword_100117338);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

void sub_100086938(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = "\t";
  v4[1] = "\t";
  v4[2] = &unk_1000D26E8;
  v4[3] = "\t";
  v4[4] = &unk_1000D2700;
  v4[5] = &unk_1000D2718;
  v4[6] = &unk_1000D2718;
  sub_1000869D0();
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
  }
}

void sub_1000869D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1001173A8)
  {
    v0 = type metadata accessor for AccessibilityFocusState(0, &type metadata for Bool, &protocol witness table for Bool);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1001173A8);
  }
}

uint64_t sub_100086A2C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1000F69B8, 1);
}

void sub_100086A40(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[16];
  __int128 v11;
  char v12;
  _QWORD v13[4];

  v10[8] = a1;
  v10[15] = a2;
  v3 = sub_100005360(&qword_100117638);
  v10[13] = *(_QWORD *)(v3 - 8);
  v10[14] = v3;
  __chkstk_darwin(v3, v4);
  v10[12] = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100005360(&qword_100117640);
  v10[10] = *(_QWORD *)(v6 - 8);
  v10[11] = v6;
  __chkstk_darwin(v6, v7);
  v10[9] = (char *)v10 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_OWORD *)(v2 + 24);
  v12 = *(_BYTE *)(v2 + 40);
  v9 = sub_100005360(&qword_100117648);
  Binding.wrappedValue.getter(v13, v9);
  __asm { BR              X10 }
}

uint64_t sub_100086B30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeConformance2;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x80000001000D7310);
  LOWORD(v33) = 256;
  v32 = 0;
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)(v1 - 280) = v4;
  *(_QWORD *)(v1 - 248) = v5;
  v7 = v6 & 1;
  *(_OWORD *)(v1 - 112) = *(_OWORD *)(v0 + 48);
  *(_BYTE *)(v1 - 96) = *(_BYTE *)(v0 + 64);
  v8 = sub_100005360(&qword_100115300);
  v9 = Binding.projectedValue.getter((_QWORD *)(v1 - 176), v8);
  *(_QWORD *)(v1 - 256) = &v34;
  v10 = *(_QWORD *)(v1 - 168);
  *(_QWORD *)(v1 - 272) = *(_QWORD *)(v1 - 176);
  *(_DWORD *)(v1 - 260) = *(unsigned __int8 *)(v1 - 160);
  __chkstk_darwin(v9, v11);
  v32 = v0;
  __chkstk_darwin(v12, v13);
  v30 = v0;
  v14 = sub_100005360(&qword_100117650);
  *(_QWORD *)(v1 - 296) = v14;
  v15 = sub_100005360(&qword_100117658);
  *(_QWORD *)(v1 - 288) = v15;
  v16 = sub_100008078(&qword_100117660, &qword_100117650, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
  v17 = sub_100008078(&qword_100117668, &qword_100117658, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v28 = v15;
  v27 = v14;
  v18 = *(_QWORD *)(v1 - 208);
  v19 = *(_QWORD *)(v1 - 280);
  v20 = *(_QWORD *)(v1 - 248);
  v21 = *(_QWORD *)(v1 - 272);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t (*)@<X0>(_BYTE *@<X8>), uint64_t *, void (*)(), uint64_t *, uint64_t, uint64_t, void *, uint64_t, uint64_t, void *))View.alert<A, B>(_:isPresented:actions:message:))(v3, v19, v7, v20, v21, v10, *(unsigned int *)(v1 - 260), sub_10008951C, &v31, sub_100089524, &v29, v27, v28, &type metadata for Text, v16, v17, &protocol witness table for Text);
  swift_release(v10);
  swift_release(v21);
  sub_10002DD44(v3, v19, v7);
  swift_bridgeObjectRelease(v20);
  v22 = *(_QWORD *)(v1 - 288);
  *(_QWORD *)(v1 - 176) = *(_QWORD *)(v1 - 296);
  *(_QWORD *)(v1 - 168) = v22;
  *(_QWORD *)(v1 - 160) = &type metadata for Text;
  *(_QWORD *)(v1 - 152) = v16;
  *(_QWORD *)(v1 - 144) = v17;
  *(_QWORD *)(v1 - 136) = &protocol witness table for Text;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v1 - 176, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:message:)>>, 1);
  v24 = *(_QWORD *)(v1 - 232);
  v25 = *(_QWORD *)(v1 - 192);
  ((void (*)(uint64_t, uint64_t))View.allowsSecureDrawing())(v25, OpaqueTypeConformance2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 - 200) + 8))(v18, v25);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v1 - 224) + 32))(*(_QWORD *)(v1 - 184), v24, *(_QWORD *)(v1 - 216));
}

uint64_t sub_100086E34@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v43;
  uint64_t v44;
  void (*v45)(_BYTE *, uint64_t);
  _BYTE v47[12];
  int v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE v53[16];
  uint64_t v54;
  __int128 v55;
  char v56;
  uint64_t v57;

  v52 = a2;
  v3 = sub_100005360(&qword_100117670);
  __chkstk_darwin(v3, v4);
  v6 = &v47[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7, v8);
  v10 = &v47[-v9];
  v11 = sub_100005360(&qword_100115CC0);
  __chkstk_darwin(v11, v12);
  v14 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_100005360(&qword_100115CC8);
  v51 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v18 = &v47[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v19, v20);
  v22 = &v47[-v21];
  static ButtonRole.cancel.getter(v23);
  v24 = type metadata accessor for ButtonRole(0);
  v25 = 1;
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v14, 0, 1, v24);
  v26 = swift_allocObject(&unk_10010C448, 81, 7);
  v27 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v26 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v26 + 64) = v27;
  *(_BYTE *)(v26 + 80) = *(_BYTE *)(a1 + 64);
  v28 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v26 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v26 + 32) = v28;
  v54 = a1;
  sub_100089588(a1);
  Button.init(role:action:label:)(v14, sub_100089530, v26, sub_100089580, v53, &type metadata for Text, &protocol witness table for Text);
  v55 = *(_OWORD *)(a1 + 24);
  v56 = *(_BYTE *)(a1 + 40);
  v29 = sub_100005360(&qword_100117648);
  Binding.wrappedValue.getter(&v57, v29);
  if (v57 == 2)
  {
    v50 = v6;
    v30 = 0x746F4E206E65704FLL;
    v31 = 0xEA00000000007365;
    goto LABEL_5;
  }
  if (v57 == 1)
  {
    v50 = v6;
    v30 = 0x6C6C6174736E49;
    v31 = 0xE700000000000000;
LABEL_5:
    v49 = LocalizedStringKey.init(stringLiteral:)(v30, v31);
    v33 = v32;
    v48 = v34;
    v36 = v35;
    v37 = swift_allocObject(&unk_10010C470, 81, 7);
    v38 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v37 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v37 + 64) = v38;
    *(_BYTE *)(v37 + 80) = *(_BYTE *)(a1 + 64);
    v39 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v37 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v37 + 32) = v39;
    __chkstk_darwin(v37, v40);
    *(_QWORD *)&v47[-32] = v49;
    *(_QWORD *)&v47[-24] = v33;
    v47[-16] = v48 & 1;
    *(_QWORD *)&v47[-8] = v36;
    sub_100089588(a1);
    Button.init(action:label:)(sub_100089644, v37, sub_10008964C, &v47[-48], &type metadata for Text, &protocol witness table for Text);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v33);
    v25 = 0;
    v6 = v50;
  }
  v41 = v51;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v10, v25, 1, v15);
  v42 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16);
  v42(v18, v22, v15);
  sub_10000531C((uint64_t)v10, (uint64_t)v6, &qword_100117670);
  v43 = v52;
  v42(v52, v18, v15);
  v44 = sub_100005360(&qword_100117678);
  sub_10000531C((uint64_t)v6, (uint64_t)&v43[*(int *)(v44 + 48)], &qword_100117670);
  sub_100004F48((uint64_t)v10, &qword_100117670);
  v45 = *(void (**)(_BYTE *, uint64_t))(v41 + 8);
  v45(v22, v15);
  sub_100004F48((uint64_t)v6, &qword_100117670);
  return ((uint64_t (*)(_BYTE *, uint64_t))v45)(v18, v15);
}

void sub_1000871F8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100005360(&qword_100117648);
  Binding.wrappedValue.getter(&v1, v0);
  __asm { BR              X10 }
}

uint64_t sub_100087250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = LocalizedStringKey.init(stringLiteral:)(19279, 0xE200000000000000);
  result = Text.init(_:tableName:bundle:comment:)(v1);
  *(_QWORD *)v0 = result;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = v4 & 1;
  *(_QWORD *)(v0 + 24) = v5;
  return result;
}

uint64_t sub_1000872C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _QWORD v41[2];
  __int128 v42;
  char v43;
  char v44;
  __int128 v45;
  char v46;

  v2 = sub_100005360(&qword_1001142E0);
  v4 = __chkstk_darwin(v2, v3);
  v41[0] = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0, v4);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100005360(&qword_100114860);
  __chkstk_darwin(v11, v12);
  v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)v41 - v17;
  __chkstk_darwin(v19, v20);
  v22 = (char *)v41 - v21;
  v45 = *(_OWORD *)(a1 + 24);
  v46 = *(_BYTE *)(a1 + 40);
  v42 = *(_OWORD *)(a1 + 24);
  v43 = *(_BYTE *)(a1 + 40);
  v23 = sub_100005360(&qword_100117648);
  Binding.wrappedValue.getter(&v44, v23);
  if (v44 == 1)
  {
    if (qword_100113B98 != -1)
      swift_once(&qword_100113B98, sub_10001C014);
    v24 = qword_10011FA30;
  }
  else
  {
    if (qword_100113BA0 != -1)
      swift_once(&qword_100113BA0, sub_10001C078);
    v24 = qword_10011FA48;
  }
  v25 = sub_100014124(v11, (uint64_t)v24);
  sub_10000531C(v25, (uint64_t)v22, &qword_100114860);
  sub_10000531C((uint64_t)v22, (uint64_t)v18, &qword_100114860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6) == 1)
  {
    sub_100004F48((uint64_t)v18, &qword_100114860);
    v42 = v45;
    v43 = v46;
    v44 = 0;
    Binding.wrappedValue.setter(&v44, v23);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v18, v6);
    if (qword_100113EC8 != -1)
      swift_once(&qword_100113EC8, sub_100096568);
    v26 = qword_10011FE70;
    KeyPath = swift_getKeyPath(&unk_1000D2918);
    *(_QWORD *)&v42 = v26;
    v28 = sub_100005178(&qword_100114778, type metadata accessor for CalculatorNetworkManager, (uint64_t)&protocol conformance descriptor for CalculatorNetworkManager);
    ObservationRegistrar.access<A, B>(_:keyPath:)(&v42, KeyPath, v28);
    swift_release(KeyPath);
    if ((*(_BYTE *)(v26 + 16) & 1) != 0 || (v42 = v45, v43 = v46, Binding.wrappedValue.getter(&v44, v23), v44 == 2))
    {
      v29 = static Animation.easeOut(duration:)(0.17);
      __chkstk_darwin(v29, v30);
      v41[-2] = a1;
      withAnimation<A>(_:_:)(v31, sub_10006E8A0, &v41[-4], (char *)&type metadata for () + 8);
      swift_release(v29);
      v42 = v45;
      v43 = v46;
      v44 = 0;
      Binding.wrappedValue.setter(&v44, v23);
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v14, v10, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
      sub_100056AE8((uint64_t)v14);
      sub_100004F48((uint64_t)v14, &qword_100114860);
    }
    else
    {
      v42 = v45;
      v43 = v46;
      Binding.wrappedValue.getter(&v44, v23);
      v42 = v45;
      v43 = v46;
      if (v44 == 1)
      {
        v44 = 3;
        Binding.wrappedValue.setter(&v44, v23);
        v33 = type metadata accessor for TaskPriority(0);
        v34 = v41[0];
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v41[0], 1, 1, v33);
        type metadata accessor for MainActor(0);
        v35 = sub_100089588(a1);
        v36 = static MainActor.shared.getter(v35);
        v37 = swift_allocObject(&unk_10010C498, 97, 7);
        *(_QWORD *)(v37 + 16) = v36;
        *(_QWORD *)(v37 + 24) = &protocol witness table for MainActor;
        v38 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)(v37 + 64) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v37 + 80) = v38;
        *(_BYTE *)(v37 + 96) = *(_BYTE *)(a1 + 64);
        v39 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(v37 + 32) = *(_OWORD *)a1;
        *(_OWORD *)(v37 + 48) = v39;
        v40 = sub_100096424(v34, (uint64_t)&unk_100117688, v37);
        swift_release(v40);
      }
      else
      {
        v44 = 0;
        Binding.wrappedValue.setter(&v44, v23);
      }
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return sub_100004F48((uint64_t)v22, &qword_100114860);
}

uint64_t sub_1000877D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v4 + 40) = a4;
  v5 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 48) = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  return swift_task_switch(sub_10008783C, v6, v7);
}

uint64_t sub_10008783C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 48));
  v2 = *(_OWORD *)(v1 + 24);
  *(_BYTE *)(v0 + 32) = *(_BYTE *)(v1 + 40);
  *(_OWORD *)(v0 + 16) = v2;
  v3 = sub_100005360(&qword_100117648);
  Binding.wrappedValue.getter((_QWORD *)(v0 + 33), v3);
  if (*(_BYTE *)(v0 + 33))
  {
    v4 = *(_QWORD *)(v0 + 40);
    v5 = *(_BYTE *)(v4 + 64);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v4 + 48);
    *(_BYTE *)(v0 + 32) = v5;
    *(_BYTE *)(v0 + 33) = 1;
    v6 = sub_100005360(&qword_100115300);
    Binding.wrappedValue.setter(v0 + 33, v6);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000878DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;

  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a3);
  result = Text.init(_:tableName:bundle:comment:)(a1);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v8;
  *(_BYTE *)(a4 + 16) = v9 & 1;
  *(_QWORD *)(a4 + 24) = v10;
  return result;
}

void sub_100087970()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100005360(&qword_100117648);
  Binding.wrappedValue.getter(&v1, v0);
  __asm { BR              X10 }
}

uint64_t sub_1000879C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  uint64_t v5;

  v1 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000028, 0x80000001000D7330);
  result = Text.init(_:tableName:bundle:comment:)(v1);
  *(_QWORD *)v0 = result;
  *(_QWORD *)(v0 + 8) = v3;
  *(_BYTE *)(v0 + 16) = v4 & 1;
  *(_QWORD *)(v0 + 24) = v5;
  return result;
}

void sub_100087A60()
{
  JUMPOUT(0x1000879DCLL);
}

void sub_100087A78(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_100086A40(a1, a2);
}

uint64_t sub_100087ABC()
{
  return sub_100089160((uint64_t (*)(uint64_t))sub_100085A78);
}

uint64_t sub_100087ACC()
{
  return sub_100089160((uint64_t (*)(uint64_t))sub_100085ACC);
}

unint64_t sub_100087AD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117470;
  if (!qword_100117470)
  {
    v1 = sub_100005608(&qword_100117430);
    sub_1000608EC(&qword_100117478, &qword_100117428, (void (*)(void))sub_100087B64, (void (*)(void))sub_100087D58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117470);
  }
  return result;
}

uint64_t sub_100087B64()
{
  return sub_10003D3C8(&qword_100117480, &qword_100117420, (void (*)(void))sub_100087B88);
}

uint64_t sub_100087B88()
{
  return sub_10003D3C8(&qword_100117488, &qword_100117418, (void (*)(void))sub_100087BAC);
}

unint64_t sub_100087BAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117490;
  if (!qword_100117490)
  {
    v1 = sub_100005608(&qword_100117410);
    sub_100087C30();
    sub_100008078(&qword_1001174C8, &qword_100116678, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117490);
  }
  return result;
}

unint64_t sub_100087C30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100117498;
  if (!qword_100117498)
  {
    v1 = sub_100005608(&qword_100117408);
    sub_10003D3C8(&qword_1001174A0, &qword_100117400, (void (*)(void))sub_100087CD4);
    sub_100008078(&qword_1001174B8, &qword_1001174C0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100117498);
  }
  return result;
}

unint64_t sub_100087CD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001174A8;
  if (!qword_1001174A8)
  {
    v1 = sub_100005608(&qword_1001173F8);
    sub_100008078(&qword_1001174B0, &qword_1001173F0, (uint64_t)&protocol conformance descriptor for Grid<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001174A8);
  }
  return result;
}

unint64_t sub_100087D58()
{
  unint64_t result;

  result = qword_1001174D0;
  if (!qword_1001174D0)
  {
    result = swift_getWitnessTable(&unk_1000D28C4, &type metadata for CalculatorAppAlert);
    atomic_store(result, (unint64_t *)&qword_1001174D0);
  }
  return result;
}

unint64_t sub_100087D9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1001174D8;
  if (!qword_1001174D8)
  {
    v1 = sub_100005608(&qword_100117438);
    sub_100087AD8();
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001174D8);
  }
  return result;
}

unint64_t sub_100087E28()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1001174E8;
  if (!qword_1001174E8)
  {
    v1 = sub_100005608(&qword_100117448);
    v2[0] = sub_100005608(&qword_100117438);
    v2[1] = sub_100087D9C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_100005178(&qword_100114B60, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1001174E8);
  }
  return result;
}

uint64_t sub_100087ED4()
{
  uint64_t v0;

  return sub_100085C98(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100087EF8()
{
  return sub_100089160((uint64_t (*)(uint64_t))sub_100083CB4);
}

double sub_100087F08(uint64_t a1)
{
  double result;

  type metadata accessor for ModeMenuView(0);
  if (!a1)
    return sub_100083DF4();
  return result;
}

uint64_t sub_100087F48@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100087F70(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

double sub_100087F98(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for TintPlacement(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v7 + 16))(v11, a3, v6, v9);
    v17 = a2;
    swift_retain_n(a2, 2);
    v12 = AnyShapeStyle.init<A>(_:)(&v17, &type metadata for Color, &protocol witness table for Color);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v17 = *a1;
    *a1 = 0x8000000000000000;
    sub_1000880AC(v12, (uint64_t)v11, isUniquelyReferenced_nonNull_native);
    v14 = *a1;
    *a1 = v17;
    swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    v9.n128_u64[0] = swift_release(a2).n128_u64[0];
  }
  return v9.n128_f64[0];
}

void sub_1000880AC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  char v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = (_QWORD **)v3;
  v9 = type metadata accessor for TintPlacement(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)*v3;
  v16 = sub_100088208(a2);
  v17 = v14[2];
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v15;
  if (v14[3] >= v19)
  {
    if ((a3 & 1) != 0)
    {
      v22 = *v5;
      if ((v15 & 1) == 0)
        goto LABEL_11;
LABEL_8:
      v23 = v22[7];
      swift_release(*(_QWORD *)(v23 + 8 * v16));
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return;
    }
LABEL_10:
    sub_100088274();
    v22 = *v5;
    if ((v4 & 1) == 0)
      goto LABEL_11;
    goto LABEL_8;
  }
  sub_1000884DC(v19, a3 & 1);
  v20 = sub_100088208(a2);
  if ((v4 & 1) != (v21 & 1))
  {
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return;
  }
  v16 = v20;
  v22 = *v5;
  if ((v4 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a2, v9);
  sub_100088888(v16, (uint64_t)v13, a1, v22);
}

