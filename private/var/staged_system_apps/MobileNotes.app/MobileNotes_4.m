void sub_1002FDB24()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  const mach_header_64 *v16;

  v1 = &v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration];
  if (v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration] == 2)
  {
    v2 = (void *)sub_1002FFA38();
  }
  else
  {
    v3 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
    if (v3 && (v4 = objc_msgSend(v3, "collectionViewDiffableDataSource")) != 0)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, "snapshot");
      v7 = objc_msgSend(v6, "itemIdentifiers");

      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, (char *)&type metadata for Any + 8);
      v9 = v0;
      v10 = sub_10030B9B8(v8);
      swift_bridgeObjectRelease(v8);

    }
    else
    {
      v10 = _swiftEmptyArrayStorage;
    }
    v11 = 256;
    if (!v1[1])
      v11 = 0;
    v12 = v11 | *v1;
    v13 = 0x10000;
    if (!v1[2])
      v13 = 0;
    v14 = 0x1000000;
    if (!v1[3])
      v14 = 0;
    v15 = v12 | v13 | v14;
    v16 = &_mh_execute_header;
    if (!v1[4])
      LODWORD(v16) = 0;
    v2 = (void *)sub_10030BE4C((uint64_t)v10, v15 | v16);
    swift_bridgeObjectRelease(v10);
  }
  objc_msgSend(v0, "setCollectionViewLayout:", v2);

}

double sub_1002FDD88(char a1)
{
  char *v1;
  int v2;
  objc_class *ObjectType;
  char *v4;
  double result;
  int16x8_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const mach_header_64 *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int8x16_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const mach_header_64 *v35;
  uint64_t v36;
  objc_super v37;
  objc_super v38;

  v2 = a1 & 1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = &v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration];
  objc_msgSend(v1, "setAllowsSelectionDuringEditing:", v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration] == 1);
  objc_msgSend(v1, "setAllowsMultipleSelectionDuringEditing:", objc_msgSend(v1, "allowsSelectionDuringEditing"));
  v38.receiver = v1;
  v38.super_class = ObjectType;
  if (objc_msgSendSuper2(&v38, "isEditing") == v2 || *v4 == 1)
  {
    sub_1002FC610(0, 0, 0);
  }
  else
  {
    v37.receiver = v1;
    v37.super_class = ObjectType;
    if (objc_msgSendSuper2(&v37, "isEditing"))
    {
      v7 = *((_QWORD *)v4 + 1);
      v8 = v4[16];
      v9 = 256;
      if (!v4[1])
        v9 = 0;
      v10 = 0x10000;
      if (!v4[2])
        v10 = 0;
      v11 = 0x1000000;
      if (!v4[3])
        v11 = 0;
      v12 = &_mh_execute_header;
      if (!v4[4])
        v12 = 0;
      v13 = 0x10000000000;
      if (!v4[5])
        v13 = 0;
      v14 = v9 | *v4 | v10 | v11 | (unint64_t)v12 | v13;
      v15 = &v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_previousNonEditingConfiguration];
      *(_QWORD *)v15 = v14;
      *((_QWORD *)v15 + 1) = v7;
      v15[16] = v8;
      *v4 = 2;
      *((_QWORD *)v4 + 1) = 0;
      *(_DWORD *)(v4 + 1) = 0;
      v4[5] = 0;
      v4[16] = 1;
      sub_1002FC054(v14, v7, v8);
    }
    else
    {
      v16 = &v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_previousNonEditingConfiguration];
      v17 = *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_previousNonEditingConfiguration];
      if ((v17 & 0xFF00) == 0x200)
      {
        LOBYTE(v17) = 0;
        LOBYTE(v18) = 0;
        v19 = 0;
        v6.i64[0] = 0x100010000;
        v20 = 1;
      }
      else
      {
        v19 = *((_QWORD *)v16 + 1);
        v21 = (int8x16_t)vdupq_n_s64(v17);
        v18 = (v17 >> 40) & 1;
        v20 = v16[16] & 1;
        v6 = (int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_1004623A0)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v21, (int8x16_t)xmmword_1004623B0))));
        *(int8x8_t *)v6.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v6), (int8x8_t)0x1000100010001);
      }
      v22 = *v4;
      v23 = v4[1];
      v24 = v4[2];
      v25 = v4[3];
      v26 = v4[4];
      v27 = v4[5];
      v28 = *((_QWORD *)v4 + 1);
      v29 = v4[16];
      *v4 = v17;
      *(_DWORD *)(v4 + 1) = vmovn_s16(v6).u32[0];
      v4[5] = v18;
      *((_QWORD *)v4 + 1) = v19;
      v4[16] = v20;
      v30 = 256;
      if (!v23)
        v30 = 0;
      v31 = v30 | v22;
      v32 = 0x10000;
      if (!v24)
        v32 = 0;
      v33 = 0x1000000;
      if (!v25)
        v33 = 0;
      v34 = v31 | v32 | v33;
      v35 = &_mh_execute_header;
      if (!v26)
        v35 = 0;
      v36 = 0x10000000000;
      if (!v27)
        v36 = 0;
      sub_1002FC054(v34 | (unint64_t)v35 | v36, v28, v29);
      *(_QWORD *)&result = 512;
      *(_OWORD *)v16 = xmmword_1004623C0;
      v16[16] = 0;
    }
  }
  return result;
}

char *sub_1002FE0C4(unint64_t a1, uint64_t a2, char a3)
{
  char *v3;
  char *v4;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  int v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  char *v29;
  uint64x2_t v30;
  int16x8_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  char *v35;
  char *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  id v41;
  char *v42;
  id v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  id v50;
  void *v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t ObjectType;
  objc_class *v60;
  objc_super v61;

  v4 = v3;
  ObjectType = swift_getObjectType(v4);
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource] = 0;
  v8 = &v4[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_selectionDidChange];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  v9 = &v4[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_dataDidChange];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_defaultAccountObjectID] = 0;
  v10 = (void *)objc_opt_self(ICNoteContext);
  v11 = v4;
  v12 = objc_msgSend(v10, "sharedContext");
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "workerManagedObjectContext");

  }
  else
  {
    v14 = 0;
  }
  v15 = a3 & 1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_workerContext] = v14;
  v16 = objc_msgSend(v10, "sharedContext", ObjectType);
  if (v16)
  {
    v17 = v16;
    v18 = objc_msgSend(v16, "managedObjectContext");

  }
  else
  {
    v18 = 0;
  }
  v19 = a1 & 0x10000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_viewContext] = v18;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_presentingViewController] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelectionBeforeDrag] = 0;
  v20 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_sizingCell;
  v21 = type metadata accessor for TagCell();
  *(_QWORD *)&v11[v20] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v21)), "init");
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagObjectID] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_renameTagAction] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDeletionViewController] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController] = 0;
  v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_hasLoaded] = 0;
  v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_hasAppliedInitialTagSelection] = 0;
  v22 = &v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_previousNonEditingConfiguration];
  *(_OWORD *)v22 = xmmword_1004623C0;
  v22[16] = 0;
  v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_allowsContextualMenu] = 1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_listLayoutExtraHeightPadding] = 0x4028000000000000;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_lastEvaluatedTagVisibilityWidth] = 0;
  v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_isRenamingTags] = 0;
  v23 = &v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_currentRenamedTagInfo];
  *(_QWORD *)v23 = 1;
  *((_QWORD *)v23 + 1) = 0;
  *((_QWORD *)v23 + 2) = 0;
  *((_QWORD *)v23 + 3) = 0;
  v24 = &v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_accessibilityProvider];
  *((_QWORD *)v24 + 4) = 0;
  *(_OWORD *)v24 = 0u;
  *((_OWORD *)v24 + 1) = 0u;
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView____lazy_storage___tagSizingLabel] = 0;
  v25 = objc_msgSend(v10, "sharedContext");
  if (v25)
  {
    v26 = v25;
    v27 = objc_msgSend(v25, "workerManagedObjectContext");

  }
  else
  {
    v27 = 0;
  }
  v28 = objc_msgSend(objc_allocWithZone((Class)ICTagSelection), "initWithManagedObjectContext:", v27);

  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection] = v28;
  v29 = &v11[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration];
  *v29 = a1;
  v30 = (uint64x2_t)vdupq_n_s64(a1);
  v31 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v30, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v30, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v31.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v31), (int8x8_t)0x1000100010001);
  *(_DWORD *)(v29 + 1) = vmovn_s16(v31).u32[0];
  v29[5] = BYTE5(v19);
  *((_QWORD *)v29 + 1) = a2;
  v29[16] = v15 != 0;

  v32 = a1 & 0x101010101FFLL;
  v33 = (void *)sub_10030BE4C((uint64_t)_swiftEmptyArrayStorage, a1 & 0x10101FF);
  v61.receiver = v11;
  v61.super_class = v60;
  v34 = objc_msgSendSuper2(&v61, "initWithFrame:collectionViewLayout:", v33, 0.0, 0.0, 0.0, 0.0);

  v35 = (char *)v34;
  objc_msgSend(v35, "setScrollEnabled:", 0);
  objc_msgSend(v35, "setAllowsMultipleSelection:", 1);
  objc_msgSend(v35, "setAlpha:", 1.0);
  v36 = &v35[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_previousNonEditingConfiguration];
  *(_QWORD *)v36 = v32;
  *((_QWORD *)v36 + 1) = a2;
  v36[16] = v15;
  v37 = *(void **)&v35[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_workerContext];
  if (v37)
  {
    v38 = *(void **)&v35[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_viewContext];
    if (v38)
    {
      v39 = objc_allocWithZone((Class)type metadata accessor for TagDataSource());
      v40 = v37;
      v41 = v38;
      v42 = v35;
      v43 = v40;
      v44 = v41;
      v45 = sub_1002A9F28(v42, v43, v44);
      v46 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource;
      v47 = *(void **)&v42[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
      *(_QWORD *)&v42[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource] = v45;

      if (v19)
      {
        v48 = *(void **)&v42[v46];
        if (v48)
        {
          v49 = objc_msgSend(v48, "indexer");
          objc_msgSend(v49, "reloadDataAndWait");

        }
      }
      v50 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      objc_msgSend(v50, "addObserver:selector:name:object:", v42, "dataSourceDidUpdate:", ICDataSourceDataDidUpdateNotification, *(_QWORD *)&v42[v46]);

    }
  }
  v51 = (void *)objc_opt_self(UIColor);
  v52 = v35;
  v53 = objc_msgSend(v51, "clearColor");
  objc_msgSend(v52, "setBackgroundColor:", v53);

  objc_msgSend(v52, "setDelegate:", v52);
  objc_msgSend(v52, "setDropDelegate:", v52);
  objc_msgSend(v52, "setAllowsFocus:", 0);
  sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
  v54 = static UITraitCollection.traitsAffectingSize.getter();
  v55 = swift_allocObject(&unk_1005677D0, 24, 7);
  swift_unknownObjectWeakInit(v55 + 16, v52);
  v56 = UIView.registerForTraitChanges<A>(_:handler:)(v54, sub_10030C894, v55, v60);

  swift_unknownObjectRelease(v56, v57);
  swift_bridgeObjectRelease(v54);
  swift_release(v55);
  return v52;
}

void sub_1002FE6C4()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration) == 1)
    sub_1002FDB24();
  sub_1002FC32C(1);
  v1 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_dataDidChange);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_dataDidChange + 8);
    v3 = swift_retain(v2);
    v1(v3);
    sub_100012C50((uint64_t)v1, v2);
  }
}

void sub_1002FE7A8(void *a1)
{
  _BYTE *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource] = 0;
  v2 = &v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_selectionDidChange];
  *v2 = 0;
  v2[1] = 0;
  v3 = &v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_dataDidChange];
  *v3 = 0;
  v3[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_defaultAccountObjectID] = 0;
  v4 = (void *)objc_opt_self(ICNoteContext);
  v5 = objc_msgSend(v4, "sharedContext");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "workerManagedObjectContext");

  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_workerContext] = v7;
  v8 = objc_msgSend(v4, "sharedContext");
  if (v8)
  {
    v9 = v8;
    v10 = objc_msgSend(v8, "managedObjectContext");

  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_viewContext] = v10;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_presentingViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelectionBeforeDrag] = 0;
  v11 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_sizingCell;
  v12 = type metadata accessor for TagCell();
  *(_QWORD *)&v1[v11] = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v12)), "init");
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagObjectID] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_renameTagAction] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDeletionViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController] = 0;
  v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_hasLoaded] = 0;
  v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_hasAppliedInitialTagSelection] = 0;
  v13 = &v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_previousNonEditingConfiguration];
  *(_OWORD *)v13 = xmmword_1004623C0;
  v13[16] = 0;
  v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_allowsContextualMenu] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_listLayoutExtraHeightPadding] = 0x4028000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_lastEvaluatedTagVisibilityWidth] = 0;
  v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_isRenamingTags] = 0;
  v14 = &v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_currentRenamedTagInfo];
  *v14 = 1;
  v14[1] = 0;
  v14[2] = 0;
  v14[3] = 0;
  v15 = &v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_accessibilityProvider];
  *((_QWORD *)v15 + 4) = 0;
  *(_OWORD *)v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView____lazy_storage___tagSizingLabel] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100488100, "MobileNotes/TagCollectionView.swift", 35, 2, 244, 0);
  __break(1u);
}

void sub_1002FEA20()
{
  char *v0;
  void *v1;
  char *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  double v24;
  id v25;
  void *v26;
  id v27;
  _BYTE v28[24];

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_currentRenamedTagInfo];
  swift_beginAccess(&v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_currentRenamedTagInfo], v28, 32, 0);
  v3 = *(void **)v2;
  if (*(_QWORD *)v2 && v3 != (void *)1)
  {
    v4 = objc_msgSend(v3, "objectID", swift_endAccess(v28).n128_f64[0]);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v1, "window");
      v7 = objc_msgSend(v6, "rootViewController");

      v8 = objc_msgSend(v1, "ic_viewControllerManager");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "noteEditorViewController");

        v11 = objc_msgSend(v10, "eventReporter");
      }
      else
      {
        v11 = 0;
      }
      objc_allocWithZone((Class)type metadata accessor for TagCreateOrRenameAlertController());
      v12 = v5;
      v13 = v7;
      v14 = sub_1002F88BC(v5, v7, v11, 1);

      swift_beginAccess(v2, v28, 32, 0);
      v15 = 0;
      v16 = 0;
      if (*(_QWORD *)v2 != 1)
      {
        v15 = *((_QWORD *)v2 + 1);
        v16 = *((_QWORD *)v2 + 2);
        swift_bridgeObjectRetain(v16);
      }
      swift_endAccess(v28);
      v17 = swift_allocObject(&unk_1005677D0, 24, 7);
      swift_unknownObjectWeakInit(v17 + 16, v1);
      swift_retain(v17);
      v18 = sub_1002F5B64(v15, v16, (uint64_t)sub_10030E74C, v17);
      swift_release_n(v17, 2);
      swift_bridgeObjectRelease(v16);
      if (v18)
      {
        v19 = objc_msgSend(v18, "presentationController");
        if (v19)
        {
          v20 = v19;
          if (*(_QWORD *)v2 == 1 || (v21 = (void *)*((_QWORD *)v2 + 3)) == 0)
            v22 = 0;
          else
            v22 = v21;
          objc_msgSend(v20, "setSourceView:", v22);

        }
        swift_beginAccess(v2, v28, 32, 0);
        if (*(_QWORD *)v2 == 1 || (v23 = *((_QWORD *)v2 + 3)) == 0)
          *(_QWORD *)&v24 = swift_endAccess(v28).n128_u64[0];
        else
          objc_msgSend(*(id *)(v23 + OBJC_IVAR____TtC11MobileNotes14TagEditingCell_textField), "resignFirstResponder", swift_endAccess(v28).n128_f64[0]);
        v25 = objc_msgSend(v1, "window", v24);
        if (v25)
        {
          v26 = v25;
          v27 = objc_msgSend(v25, "rootViewController");

          if (v27)
          {
            objc_msgSend(v27, "presentViewController:animated:completion:", v18, 1, 0);

          }
        }

        *((_BYTE *)v1 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_isRenamingTags) = 0;
      }
      else
      {

      }
    }
  }
  else
  {
    swift_endAccess(v28);
  }
}

void sub_1002FED80(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _QWORD *v6;
  void *v7;
  id v8;
  _BYTE *v9;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];

  v3 = a3 + 16;
  if ((a1 & 1) != 0)
  {
    swift_beginAccess(a3 + 16, v11, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v3);
    if (Strong)
    {
      v5 = (void *)Strong;
      v6 = (_QWORD *)(Strong + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_currentRenamedTagInfo);
      swift_beginAccess(Strong + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_currentRenamedTagInfo, v10, 0, 0);
      if (*v6 != 1)
      {
        v7 = (void *)v6[3];
        if (v7)
        {
          v8 = v7;

          v5 = v8;
          sub_1002B7E70();
        }
      }

    }
  }
  swift_beginAccess(v3, v12, 0, 0);
  v9 = (_BYTE *)swift_unknownObjectWeakLoadStrong(v3);
  if (v9)
  {
    v9[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_isRenamingTags] = 0;

  }
}

void sub_1002FEE50(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  _BYTE *v9;
  _BYTE v10[24];
  _BYTE v11[24];
  _BYTE v12[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v12, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = objc_msgSend(Strong, "collectionViewLayout");

    objc_msgSend(v6, "invalidateLayout");
  }
  swift_beginAccess(v3, v11, 0, 0);
  v7 = swift_unknownObjectWeakLoadStrong(v3);
  if (v7)
  {
    v8 = (void *)v7;
    sub_1002FC610(0, 0, 0);

  }
  if (a2)
    a2();
  swift_beginAccess(v3, v10, 0, 0);
  v9 = (_BYTE *)swift_unknownObjectWeakLoadStrong(v3);
  if (v9)
  {
    v9[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_hasLoaded] = 1;

  }
}

void sub_1002FEF58(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, int a7, void (*a8)(uint64_t))
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t Strong;
  void *v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  Class isa;
  uint64_t v35;
  void (*v36)(uint64_t);
  char *v37;
  int v38;
  void (*v39)(uint64_t);
  void *v40;
  char v41[24];

  v39 = a8;
  v38 = a7;
  v14 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for IndexPath(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v37 = (char *)&v37 - v22;
  a1 += 16;
  swift_beginAccess(a1, v41, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v24 = (void *)Strong;
    v25 = a3;
    swift_bridgeObjectRetain(a5);
    v26 = sub_10030BC3C(a2, v25, a4, a5);

    swift_bridgeObjectRelease(a5);
    v27 = objc_msgSend(a6, "collectionViewDiffableDataSource");
    v40 = v26;
    v28 = sub_100012E18(&qword_1005D1230);
    v29 = Optional._bridgeToObjectiveC()(v28);
    v30 = objc_msgSend(v27, "indexPathForItemIdentifier:", v29);

    swift_unknownObjectRelease(v29, v31);
    if (v30)
    {
      static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v30);

      v32 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
      v32(v16, v21, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
      {
        v33 = v37;
        v32(v37, v16, v17);
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v24, "selectItemAtIndexPath:animated:scrollPosition:", isa, v38 & 1, 0);

        sub_10030C508();
        v35 = (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v33, v17);
        v36 = v39;
        if (!v39)
          goto LABEL_9;
        goto LABEL_8;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
    }
    v35 = sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D6350);
    v36 = v39;
    if (!v39)
    {
LABEL_9:

      return;
    }
LABEL_8:
    v36(v35);
    goto LABEL_9;
  }
}

void sub_1002FF274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  void *v6;
  uint64_t v7;
  _BYTE v8[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    sub_1002FF2F4();
    v6 = *(void **)&v5[OBJC_IVAR____TtC11MobileNotes17TagCollectionView____lazy_storage___tagSizingLabel];
    *(_QWORD *)&v5[OBJC_IVAR____TtC11MobileNotes17TagCollectionView____lazy_storage___tagSizingLabel] = v7;

    sub_1002FDB24();
    objc_msgSend(v5, "reloadData");
    sub_1002FC32C(0);

  }
}

void sub_1002FF2F4()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  double v4;
  double v5;
  id v6;
  id v7;
  double v8;
  double v9;
  id v10;
  id v11;
  void *v12;
  id v13;

  v1 = (void *)objc_opt_self(UIFontMetrics);
  v2 = objc_msgSend(v1, "defaultMetrics");
  v3 = objc_msgSend(v0, "traitCollection");
  objc_msgSend(v2, "scaledValueForValue:compatibleWithTraitCollection:", v3, 48.0);
  v5 = v4;

  v6 = objc_msgSend(v1, "defaultMetrics");
  v7 = objc_msgSend(v0, "traitCollection");
  objc_msgSend(v6, "scaledValueForValue:compatibleWithTraitCollection:", v7, 34.0);
  v9 = v8;

  v10 = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, v5, v9);
  v11 = objc_msgSend((id)objc_opt_self(UIFont), "ic_preferredFontForStyle:symbolicTraits:", UIFontTextStyleSubheadline, 2);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "ic_fontWithSingleLineA");

    if (v13)
    {
      objc_msgSend(v10, "setFont:", v13);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1002FF494(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  double v12;
  id v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t (*v19)();
  _QWORD *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  NSString v28;
  id v29;
  id v30;
  id v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t result;
  uint64_t v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  id v45;
  _QWORD aBlock[5];
  uint64_t v47;
  id v48;
  id v49;
  uint64_t v50;
  CGRect v51;

  v2 = v1;
  sub_100128424(a1, (uint64_t)aBlock);
  v4 = sub_1000163BC(0, (unint64_t *)&unk_1005D70B0, ICTagNewTagItemIdentifier_ptr);
  if (swift_dynamicCast(&v49, aBlock, (char *)&type metadata for Any + 8, v4, 6))
  {

    v5 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_sizingCell];
    +[ICTagCell newTagImage]_0();
    v7 = v6;
    sub_1003B9AFC(v6);

    v8 = (void *)objc_opt_self(UIFontMetrics);
    v9 = objc_msgSend(v8, "defaultMetrics");
    v10 = objc_msgSend(v2, "traitCollection");
    objc_msgSend(v9, "scaledValueForValue:compatibleWithTraitCollection:", v10, 48.0);
    v12 = v11;

    v13 = objc_msgSend(v8, "defaultMetrics");
    v14 = objc_msgSend(v2, "traitCollection");
    objc_msgSend(v13, "scaledValueForValue:compatibleWithTraitCollection:", v14, 34.0);
    v16 = v15;

    LODWORD(v17) = 1112014848;
    LODWORD(v18) = 1112014848;
    objc_msgSend(v5, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", v12, v16, v17, v18);
    v19 = 0;
    v20 = 0;
LABEL_6:
    objc_msgSend(v2, "frame");
    CGRectGetWidth(v51);
    return sub_100012C50((uint64_t)v19, (uint64_t)v20);
  }
  v49 = 0;
  v50 = 0;
  sub_100128424(a1, (uint64_t)aBlock);
  v21 = sub_1000163BC(0, &qword_1005D89B0, ICTagAllTagsItemIdentifier_ptr);
  if (swift_dynamicCast(&v48, aBlock, (char *)&type metadata for Any + 8, v21, 6))
  {

    v22 = objc_msgSend((id)objc_opt_self(ICTagAllTagsItemIdentifier), "displayText");
    v23 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26 = v50;
    v49 = v23;
    v50 = v25;
    swift_bridgeObjectRelease(v26);
    v19 = 0;
    v20 = 0;
    if (v25)
    {
LABEL_5:
      swift_bridgeObjectRetain(v25);
      v27 = sub_1002FF9DC();
      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v25);
      objc_msgSend(v27, "setText:", v28);

      v29 = sub_1002FF9DC();
      v30 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
      v31 = objc_msgSend(v2, "traitCollection");
      objc_msgSend(v30, "scaledValueForValue:compatibleWithTraitCollection:", v31, 34.0);
      v33 = v32;

      LODWORD(v34) = 1112014848;
      LODWORD(v35) = 1148846080;
      objc_msgSend(v29, "systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:", UILayoutFittingCompressedSize.width, v33, v34, v35);

      swift_bridgeObjectRelease(v50);
      goto LABEL_6;
    }
    return sub_100012C50((uint64_t)v19, (uint64_t)v20);
  }
  sub_100128424(a1, (uint64_t)aBlock);
  v37 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  if ((swift_dynamicCast(&v48, aBlock, (char *)&type metadata for Any + 8, v37, 6) & 1) == 0)
    return swift_bridgeObjectRelease(v50);
  v38 = v48;
  v39 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
  if (!v39)
  {

    return swift_bridgeObjectRelease(v50);
  }
  v40 = *(id *)(v39 + OBJC_IVAR____TtC11MobileNotes13TagDataSource_modernBackgroundManagedObjectContext);
  if ((objc_msgSend(v38, "ic_isHashtagType") & 1) == 0)
  {

    return swift_bridgeObjectRelease(v50);
  }
  v20 = (_QWORD *)swift_allocObject(&unk_1005678C0, 40, 7);
  v20[2] = v40;
  v20[3] = v38;
  v20[4] = &v49;
  v41 = swift_allocObject(&unk_1005678E8, 32, 7);
  *(_QWORD *)(v41 + 16) = sub_10030C9D4;
  *(_QWORD *)(v41 + 24) = v20;
  aBlock[4] = sub_1000165D0;
  v47 = v41;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016618;
  aBlock[3] = &unk_100567900;
  v42 = _Block_copy(aBlock);
  v43 = v47;
  v44 = v40;
  v45 = v38;
  swift_retain(v41);
  swift_release(v43);
  objc_msgSend(v44, "performBlockAndWait:", v42);

  _Block_release(v42);
  LOBYTE(v45) = swift_isEscapingClosureAtFileLocation(v41, "", 101, 558, 53, 1);
  result = swift_release(v41);
  if ((v45 & 1) == 0)
  {
    v19 = sub_10030C9D4;
    v25 = v50;
    if (v50)
      goto LABEL_5;
    return sub_100012C50((uint64_t)v19, (uint64_t)v20);
  }
  __break(1u);
  return result;
}

id sub_1002FF9DC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView____lazy_storage___tagSizingLabel;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView____lazy_storage___tagSizingLabel);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView____lazy_storage___tagSizingLabel);
  }
  else
  {
    sub_1002FF2F4();
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1002FFA38()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(v1, "ic_viewControllerManager");
  if (v10
    && (v11 = v10, v12 = objc_msgSend(v10, "hasCompactWidth"), v11, (v12 & 1) != 0))
  {
    v13 = 1;
    v14 = (unsigned int *)&enum case for UICollectionLayoutListConfiguration.Appearance.plain(_:);
  }
  else
  {
    v13 = 0;
    v14 = (unsigned int *)&enum case for UICollectionLayoutListConfiguration.Appearance.sidebar(_:);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *v14, v2);
  UICollectionLayoutListConfiguration.init(appearance:)(v5);
  UICollectionLayoutListConfiguration.showsSeparators.setter(v13);
  v15 = swift_allocObject(&unk_1005677D0, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v1);
  UICollectionLayoutListConfiguration.trailingSwipeActionsConfigurationProvider.setter(sub_10030C8A0, v15);
  sub_1000163BC(0, (unint64_t *)&qword_1005D5060, UICollectionViewCompositionalLayout_ptr);
  v16 = static UICollectionViewCompositionalLayout.list(using:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v16;
}

uint64_t sub_1002FFBDC(void *a1, uint64_t a2, _QWORD *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = objc_msgSend(a1, "ic_existingObjectWithID:", a2);
  if (!v4)
  {
    v9 = 0;
LABEL_8:
    v15 = 0;
    goto LABEL_9;
  }
  v5 = v4;
  v6 = objc_opt_self(ICHashtag);
  v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
  if (!v7)
  {

    v9 = 0;
    goto LABEL_8;
  }
  v8 = objc_msgSend(v7, "displayText");
  v9 = v8;
  if (!v8)
  {

    goto LABEL_8;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend(v12, "ic_withHashtagPrefix");

  v9 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

LABEL_9:
  v16 = a3[1];
  *a3 = v9;
  a3[1] = v15;
  return swift_bridgeObjectRelease(v16);
}

id sub_1002FFCEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  Class isa;
  id v24;
  _QWORD aBlock[5];
  uint64_t v27;

  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_100567848, v8 + v6, v7 | 7);
  *(_QWORD *)(v9 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  v10 = (void *)objc_opt_self(NSBundle);
  swift_retain(a2);
  v11 = objc_msgSend(v10, "mainBundle");
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  swift_retain(v9);
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  aBlock[4] = sub_10030C91C;
  v27 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100300548;
  aBlock[3] = &unk_100567860;
  v17 = _Block_copy(aBlock);
  v18 = objc_msgSend((id)objc_opt_self(UIContextualAction), "contextualActionWithStyle:title:handler:", 1, v16, v17);

  _Block_release(v17);
  swift_release(v27);
  v19 = sub_100012E18(&qword_1005CF6F0);
  v20 = swift_allocObject(v19, 40, 7);
  *(_OWORD *)(v20 + 16) = xmmword_100456F30;
  *(_QWORD *)(v20 + 32) = v18;
  aBlock[0] = v20;
  specialized Array._endMutation()(v20);
  v21 = aBlock[0];
  sub_1000163BC(0, (unint64_t *)&unk_1005D89A0, UIContextualAction_ptr);
  v22 = v18;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v21);
  v24 = objc_msgSend((id)objc_opt_self(UISwipeActionsConfiguration), "configurationWithActions:", isa);

  objc_msgSend(v24, "setPerformsFirstActionWithFullSwipe:", 0);
  swift_release(v9);

  return v24;
}

uint64_t sub_1002FFFB0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  _BYTE v10[24];

  v6 = a5 + 16;
  swift_beginAccess(a5 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    sub_100300028();

  }
  return a3(1);
}

void sub_100300028()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  id v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Class v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  id v50;
  id v51;
  id v52;
  uint64_t v53;
  void *v54;
  _OWORD v55[2];
  _QWORD v56[4];

  v1 = v0;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
  if (!v2)
    goto LABEL_20;
  v3 = objc_msgSend(v2, "collectionViewDiffableDataSource");
  if (!v3)
    goto LABEL_20;
  v4 = v3;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v6 = objc_msgSend(v4, "itemIdentifierForIndexPath:", isa);

  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v55, v6);
    swift_unknownObjectRelease(v6, v7);
  }
  else
  {
    memset(v55, 0, sizeof(v55));
  }
  sub_10014BD1C((uint64_t)v55, (uint64_t)v56, &qword_1005CF190);
  if (!v56[3])
  {

    sub_100012DDC((uint64_t)v56, &qword_1005CF190);
    goto LABEL_20;
  }
  v8 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  if ((swift_dynamicCast(&v54, v56, (char *)&type metadata for Any + 8, v8, 6) & 1) == 0)
  {
LABEL_19:

    goto LABEL_20;
  }
  v9 = v54;
  v10 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_viewContext];
  if (!v10 || (v11 = objc_msgSend(v10, "objectWithID:", v54)) == 0)
  {
LABEL_18:

    goto LABEL_19;
  }
  v12 = v11;
  v13 = objc_opt_self(ICHashtag);
  v14 = swift_dynamicCastObjCClass(v12, v13);
  if (!v14
    || (v15 = v14,
        v16 = IndexPath._bridgeToObjectiveC()().super.isa,
        v17 = objc_msgSend(v1, "cellForItemAtIndexPath:", v16),
        v16,
        !v17))
  {
LABEL_17:

    goto LABEL_18;
  }
  v18 = type metadata accessor for TagEditingCell();
  v19 = swift_dynamicCastClass(v17, v18);
  if (!v19)
  {

    goto LABEL_17;
  }
  v20 = v19;
  if ((sub_1002B6F98() & 1) == 0)
  {
    v53 = v20;
    v24 = objc_msgSend(v1, "ic_viewControllerManager");
    v25 = objc_msgSend(v1, "window");
    v26 = objc_msgSend(v1, "ic_viewControllerManager");
    if (v26)
    {
      v27 = v26;
      v51 = v25;
      v28 = v24;
      v29 = objc_msgSend(v26, "noteEditorViewController");

      v30 = objc_msgSend(v29, "eventReporter");
      v24 = v28;
      v25 = v51;
    }
    else
    {
      v30 = 0;
    }
    v31 = objc_allocWithZone((Class)type metadata accessor for TagDeletionAlertController());
    v32 = sub_100214EA4(v24, v25, v30, 3);

    v33 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDeletionViewController;
    v34 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDeletionViewController];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDeletionViewController] = v32;

    v35 = *(_BYTE **)&v1[v33];
    if (v35)
    {
      v36 = sub_100012E18(&qword_1005CF6F0);
      v37 = swift_allocObject(v36, 40, 7);
      *(_OWORD *)(v37 + 16) = xmmword_100456F30;
      *(_QWORD *)(v37 + 32) = v15;
      v56[0] = v37;
      specialized Array._endMutation()(v37);
      v38 = v56[0];
      v35[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_shouldSendNotification] = 0;
      v52 = v12;
      v39 = v35;
      sub_100394C7C(v38);
      if (v40)
      {
        v41 = v40;
        v42 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v41);
      }
      else
      {
        v42 = 0;
      }
      v43 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v42, 0, 0);

      v44 = sub_100214870(v38);
      objc_msgSend(v43, "addAction:", v44);
      v45 = sub_100215020();
      objc_msgSend(v43, "addAction:", v45);

      swift_bridgeObjectRelease(v38);
      v46 = objc_msgSend(v43, "presentationController");
      if (v46)
      {
        v47 = v46;
        objc_msgSend(v46, "setSourceView:", v53);

      }
      v48 = objc_msgSend(v1, "window");
      if (v48)
      {
        v49 = v48;
        v50 = objc_msgSend(v48, "rootViewController");

        if (v50)
        {
          objc_msgSend(v50, "presentViewController:animated:completion:", v43, 1, 0);

        }
      }

    }
    else
    {

    }
    goto LABEL_23;
  }

LABEL_20:
  v21 = IndexPath._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v1, "cellForItemAtIndexPath:", v21);

  if (!v4)
    return;
  v22 = type metadata accessor for TagEditingCell();
  v23 = swift_dynamicCastClass(v4, v22);
  if (v23)
    objc_msgSend(*(id *)(v23 + OBJC_IVAR____TtC11MobileNotes14TagEditingCell_textField), "resignFirstResponder");
LABEL_23:

}

void sub_100300548(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6;
  void (*v7)(id, id, uint64_t (*)(char), uint64_t);
  void *v8;
  uint64_t v9;
  id v10;
  id v11;

  v7 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  v8 = _Block_copy(aBlock);
  v9 = swift_allocObject(&unk_100567898, 24, 7);
  *(_QWORD *)(v9 + 16) = v8;
  swift_retain(v6);
  v11 = a2;
  v10 = a3;
  v7(v11, v10, sub_1001FDC98, v9);
  swift_release(v6);
  swift_release(v9);

}

double sub_1003005F8(uint64_t a1, void *a2, void *a3, void *a4)
{
  char **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  double result;
  uint64_t v21;
  char **v22;
  id v23;
  id v24;
  id v25;

  v7 = a2;
  v8 = (uint64_t)sub_10030BA94(a1, v7);

  if ((unint64_t)v8 >> 62)
  {
LABEL_20:
    if (v8 < 0)
      v21 = v8;
    else
      v21 = v8 & 0xFFFFFFFFFFFFFF8;
    v9 = _CocoaArrayWrapper.endIndex.getter(v21);
    if (v9)
      goto LABEL_3;
LABEL_24:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
    return result;
  }
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    goto LABEL_24;
LABEL_3:
  v25 = objc_msgSend(v7, "objectWithID:", a3, v22);
  v10 = objc_opt_self(ICHashtag);
  v11 = swift_dynamicCastObjCClass(v25, v10);
  if (v11)
  {
    v12 = v11;
    v22 = v7;
    v23 = a4;
    v13 = 4;
    v7 = &selRef_startICInsertChecklistTest_;
    while (1)
    {
      if ((v8 & 0xC000000000000001) != 0)
        v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13 - 4, v8);
      else
        v14 = *(id *)(v8 + 8 * v13);
      a3 = v14;
      a4 = (void *)(v13 - 3);
      if (__OFADD__(v13 - 4, 1))
      {
        __break(1u);
        goto LABEL_20;
      }
      if ((objc_msgSend(v14, "isDeletedOrInTrash") & 1) != 0)
        break;

      v15 = String._bridgeToObjectiveC()();
      objc_msgSend(a3, "updateChangeCountWithReason:", v15);

      ++v13;
      if (a4 == (void *)v9)
      {
        objc_msgSend(v22, "ic_save", swift_bridgeObjectRelease(v8).n128_f64[0]);
        goto LABEL_17;
      }
    }
    v16 = objc_msgSend(v23, "window", swift_bridgeObjectRelease(v8).n128_f64[0]);
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v16, "rootViewController");

      if (v18)
      {
        v24 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RecoverNoteAlertController()), "initWithNote:selectedRange:", a3, 0, 0);
        sub_1003305B8(v18);

        v19 = v24;
        goto LABEL_18;
      }
    }

  }
  else
  {
    swift_bridgeObjectRelease(v8);
  }
LABEL_17:
  v19 = v25;
LABEL_18:

  return result;
}

void sub_100300874()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  id v23;

  v1 = v0;
  v2 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_presentingViewController;
  v3 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_presentingViewController];
  v4 = v3;
  v5 = objc_msgSend(v1, "ic_viewControllerManager");
  v6 = v5;
  if (v5)
  {
    v7 = objc_msgSend(v5, "noteEditorViewController");

    v6 = objc_msgSend(v7, "eventReporter");
  }
  v8 = objc_allocWithZone((Class)type metadata accessor for TagCreateOrRenameAlertController());
  v9 = sub_1002F88BC(0, v3, v6, 1);

  v10 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController;
  v11 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController] = v9;

  v12 = *(_QWORD *)&v1[v10];
  if (v12)
  {
    v13 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_defaultAccountObjectID];
    v14 = *(void **)(v12 + OBJC_IVAR____TtC11MobileNotes32TagCreateOrRenameAlertController_accountObjectID);
    *(_QWORD *)(v12 + OBJC_IVAR____TtC11MobileNotes32TagCreateOrRenameAlertController_accountObjectID) = v13;
    v15 = v13;

    v16 = *(void **)&v1[v10];
    if (v16)
    {
      v17 = swift_allocObject(&unk_1005679D8, 24, 7);
      *(_QWORD *)(v17 + 16) = v1;
      v18 = v1;
      v19 = v16;
      v23 = sub_1002F5B64(0, 0, (uint64_t)sub_10030CA6C, v17);

      swift_release(v17);
      v20 = v23;
      if (v23)
      {
        v21 = *(void **)&v1[v2];
        if (v21)
        {
          v22 = v21;
          objc_msgSend(v22, "presentViewController:animated:completion:", v23, 1, 0);

          v20 = v23;
        }

      }
    }
  }
}

void sub_100300A3C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;

  if (a2)
  {
    v4 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection;
    v5 = *(void **)(a3 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection);
    v10 = a2;
    v6 = objc_msgSend(v5, "objectIDs");
    v7 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    v8 = sub_100167280();
    v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

    LOBYTE(v6) = sub_100379FD0(v10, v9);
    swift_bridgeObjectRelease(v9);
    if ((v6 & 1) == 0)
    {
      objc_msgSend(*(id *)(a3 + v4), "addObjectID:toExcluded:", v10, 0);
      sub_1002FC610(1, 0, 1);
    }

  }
}

uint64_t type metadata accessor for TagCollectionView()
{
  return objc_opt_self(_TtC11MobileNotes17TagCollectionView);
}

uint64_t sub_100300CB0(uint64_t a1, uint64_t a2)
{
  return sub_10030C744(a1, a2) & 1;
}

uint64_t sub_100300CD4(uint64_t result)
{
  _QWORD *v1;

  *(_BYTE *)(*v1 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_isRenamingTags) = result;
  return result;
}

void sub_100300CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BYTE v14[24];

  v9 = *v4 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_currentRenamedTagInfo;
  swift_beginAccess(v9, v14, 1, 0);
  v10 = *(void **)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v12 = *(_QWORD *)(v9 + 16);
  v13 = *(void **)(v9 + 24);
  *(_QWORD *)v9 = a1;
  *(_QWORD *)(v9 + 8) = a2;
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  sub_10030C82C(v10, v11, v12, v13);
}

uint64_t sub_100300EDC(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  id v14;
  uint64_t v16;

  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v13 = a3;
  v14 = a1;
  a5(v12);

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Class sub_100300F94(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  NSString v25;
  NSString v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  void *v32;
  id v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  NSString v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  id v45;
  id v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  id v54;
  NSString v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  id v65;
  void *v66;
  uint64_t v67;
  void *v68;
  id v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  NSString v73;
  id v74;
  uint64_t v75;
  void *v76;
  void *v77;
  UIMenuElementSize v78;
  uint64_t v79;
  UIMenuElementSize v80;
  Swift::String v81;
  Class isa;
  uint64_t v84;
  uint64_t v85;
  Swift::OpaquePointer v86;
  id v87;
  uint64_t v88;
  char *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  UIImage_optional v93;

  v11 = type metadata accessor for IndexPath(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = swift_allocObject(&unk_100567AC8, 32, 7);
  *(_QWORD *)(v14 + 16) = a2;
  *(_QWORD *)(v14 + 24) = a3;
  v91 = v14;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a6, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 40) & ~v15;
  v17 = (char *)swift_allocObject(&unk_100567AF0, v16 + v13, v15 | 7);
  *((_QWORD *)v17 + 2) = a4;
  *((_QWORD *)v17 + 3) = a3;
  *((_QWORD *)v17 + 4) = a5;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v17[v16], (char *)&v87 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  v18 = swift_allocObject(&unk_100567B18, 24, 7);
  *(_QWORD *)(v18 + 16) = a4;
  v92 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
  v19 = (void *)objc_opt_self(NSBundle);
  v20 = a3;
  v21 = a4;
  v87 = v20;
  v89 = (char *)v21;
  v22 = a2;
  v23 = a5;
  v24 = objc_msgSend(v19, "mainBundle");
  v25 = String._bridgeToObjectiveC()();
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v24, "localizedStringForKey:value:table:", v25, v26, 0);

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  v31 = String._bridgeToObjectiveC()();
  v32 = (void *)objc_opt_self(UIImage);
  v33 = objc_msgSend(v32, "systemImageNamed:", v31);

  swift_retain(v18);
  v88 = v18;
  v34 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v28, v30, 0, 0, v33, 0, 0, 0, 0, 0, 0, sub_10030E6E4, v18);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
  v36 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v35 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v36 >= v35 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
  v90 = v34;
  v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
  specialized Array._endMutation()(v37);
  v38 = objc_msgSend(v19, "mainBundle");
  v39 = String._bridgeToObjectiveC()();
  v40 = objc_msgSend(v38, "localizedStringForKey:value:table:", v39, 0, 0);

  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  v44 = String._bridgeToObjectiveC()();
  v45 = objc_msgSend(v32, "systemImageNamed:", v44);

  swift_retain(v17);
  v46 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v41, v43, 0, 0, v45, 0, 0, 0, 0, 2, 0, sub_10030E6A0, v17);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v46);
  v48 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v47 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v48 >= v47 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
  v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v46);
  v50 = specialized Array._endMutation()(v49);
  v52 = ICDebugModeEnabled(v50, v51);
  v53 = v91;
  if (v52)
  {
    v54 = objc_msgSend(v19, "mainBundle");
    v55 = String._bridgeToObjectiveC()();
    v56 = objc_msgSend(v54, "localizedStringForKey:value:table:", v55, 0, 0);

    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
    v59 = v58;

    swift_retain(v53);
    v60 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v57, v59, 0, 0, 0, 0, 0, 0, 0, 2, 0, sub_10030E614, v53);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v60);
    v62 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v61 = *(_QWORD *)((v92 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v62 >= v61 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v61 > 1, v62 + 1, 1);
    v63 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v60);
    specialized Array._endMutation()(v63);

  }
  v64 = *(void **)&v89[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_viewContext];
  if (v64 && (v65 = objc_msgSend(v64, "objectWithID:", v87)) != 0)
  {
    v66 = v65;
    v67 = objc_opt_self(ICHashtag);
    v68 = (void *)swift_dynamicCastObjCClass(v66, v67);
    if (v68)
    {
      sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
      v69 = objc_msgSend(v68, "displayText");
      if (v69)
      {
        v70 = v69;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
        v72 = v71;

        v73 = String._bridgeToObjectiveC()();
        v74 = objc_msgSend(v73, "ic_withHashtagPrefix", swift_bridgeObjectRelease(v72).n128_f64[0]);

        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        v77 = v76;

        goto LABEL_18;
      }
    }
    else
    {

      sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    }
    v75 = 0;
  }
  else
  {
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v75 = 0;
    v68 = 0;
  }
  v77 = (void *)0xE000000000000000;
LABEL_18:
  v78 = v92;
  if ((unint64_t)v92 >> 62)
  {
    if (v92 < 0)
      v84 = v92;
    else
      v84 = v92 & 0xFFFFFFFFFFFFFF8;
    v85 = sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
    swift_bridgeObjectRetain(v78);
    v80 = _bridgeCocoaArray<A>(_:)(v84, v85);
    swift_bridgeObjectRelease(v78);
  }
  else
  {
    swift_bridgeObjectRetain(v92);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v79);
    sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
    v80 = v78;
  }
  swift_bridgeObjectRelease(v78);
  v81._countAndFlagsBits = v75;
  v81._object = v77;
  v93.value.super.isa = 0;
  v93.is_nil = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v81, (Swift::String_optional)0, v93, 0, 0xFFFFFFFFFFFFFFFFLL, v80, v86).super.super.isa;

  swift_release(v53);
  swift_release(v17);

  swift_release(v88);
  return isa;
}

uint64_t sub_100301748(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t result;
  _QWORD v12[5];
  uint64_t v13;

  v5 = swift_allocObject(&unk_100567B90, 32, 7);
  *(_QWORD *)(v5 + 16) = a2;
  *(_QWORD *)(v5 + 24) = a3;
  v6 = swift_allocObject(&unk_100567BB8, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_10030E728;
  *(_QWORD *)(v6 + 24) = v5;
  v12[4] = sub_100194900;
  v13 = v6;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100016618;
  v12[3] = &unk_100567BD0;
  v7 = _Block_copy(v12);
  v8 = v13;
  v9 = a2;
  v10 = a3;
  swift_retain(v6);
  swift_release(v8);
  objc_msgSend(v9, "performBlockAndWait:", v7);
  _Block_release(v7);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation(v6, "", 101, 860, 46, 1);
  swift_release(v5);
  result = swift_release(v6);
  if ((a3 & 1) != 0)
    __break(1u);
  return result;
}

void sub_10030187C(void *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  id v5;

  v5 = objc_msgSend(a1, "objectWithID:", a2);
  v3 = objc_opt_self(ICHashtag);
  v4 = (void *)swift_dynamicCastObjCClass(v5, v3);
  if (v4)
  {
    objc_msgSend(v4, "markForDeletion");
    objc_msgSend(a1, "ic_save");
  }

}

void sub_1003018F8(int a1, char *a2, uint64_t a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  id v30;
  id v31;
  id v32;
  id v33;
  void *v34;
  Class isa;
  id v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  unint64_t v41;

  v7 = objc_msgSend(a2, "ic_viewControllerManager");
  v8 = objc_msgSend(a2, "window");
  v9 = objc_msgSend(a2, "ic_viewControllerManager");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "noteEditorViewController");

    v12 = objc_msgSend(v11, "eventReporter");
  }
  else
  {
    v12 = 0;
  }
  v13 = objc_allocWithZone((Class)type metadata accessor for TagDeletionAlertController());
  v14 = sub_100214EA4(v7, v8, v12, 1);

  v15 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDeletionViewController;
  v16 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDeletionViewController];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDeletionViewController] = v14;

  v17 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_viewContext];
  if (v17)
  {
    v18 = objc_msgSend(v17, "objectWithID:", a3);
    if (v18)
    {
      v40 = v18;
      v19 = objc_opt_self(ICHashtag);
      v20 = swift_dynamicCastObjCClass(v40, v19);
      if (v20)
      {
        v21 = *(_BYTE **)&a2[v15];
        if (v21)
        {
          v22 = v20;
          v23 = sub_100012E18(&qword_1005CF6F0);
          v24 = swift_allocObject(v23, 40, 7);
          *(_OWORD *)(v24 + 16) = xmmword_100456F30;
          *(_QWORD *)(v24 + 32) = v22;
          v41 = v24;
          specialized Array._endMutation()(v24);
          v21[OBJC_IVAR____TtC11MobileNotes26TagDeletionAlertController_shouldSendNotification] = 1;
          v25 = v40;
          v26 = v21;
          sub_100394C7C(v41);
          if (v27)
          {
            v28 = v27;
            v29 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v28);
          }
          else
          {
            v29 = 0;
          }
          v30 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v29, 0, 0);

          v31 = sub_100214870(v41);
          objc_msgSend(v30, "addAction:", v31);
          v32 = sub_100215020();
          objc_msgSend(v30, "addAction:", v32);

          swift_bridgeObjectRelease(v41);
          v33 = objc_msgSend(v30, "presentationController");
          if (v33)
          {
            v34 = v33;
            isa = IndexPath._bridgeToObjectiveC()().super.isa;
            v36 = objc_msgSend(a4, "cellForItemAtIndexPath:", isa);

            objc_msgSend(v34, "setSourceView:", v36);
          }
          v37 = objc_msgSend(a2, "window", v40);
          if (v37)
          {
            v38 = v37;
            v39 = objc_msgSend(v37, "rootViewController");

            if (v39)
            {
              objc_msgSend(v39, "presentViewController:animated:completion:", v30, 1, 0);

            }
          }

        }
      }

    }
  }
}

void sub_100301C6C(int a1, char *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char *v22;
  id v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v3 = objc_msgSend(a2, "window");
  v4 = objc_msgSend(v3, "rootViewController");

  v5 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagObjectID];
  v6 = v5;
  v7 = objc_msgSend(a2, "ic_viewControllerManager");
  v8 = v7;
  if (v7)
  {
    v9 = objc_msgSend(v7, "noteEditorViewController");

    v8 = objc_msgSend(v9, "eventReporter");
  }
  objc_allocWithZone((Class)type metadata accessor for TagCreateOrRenameAlertController());
  v23 = v4;
  v10 = sub_1002F88BC(v5, v4, v8, 2);

  v11 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController;
  v12 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController] = v10;

  v13 = *(void **)&a2[v11];
  if (v13)
  {
    v14 = v13;
    v15 = sub_1002F5B64(0, 0, 0, 0);

    if (v15)
    {
      v16 = objc_msgSend(a2, "window");
      if (v16)
      {
        v17 = v16;
        v18 = objc_msgSend(v16, "rootViewController");

        if (v18)
        {
          v19 = swift_allocObject(&unk_100567B40, 24, 7);
          *(_QWORD *)(v19 + 16) = a2;
          aBlock[4] = sub_10030E6EC;
          v25 = v19;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_100206734;
          aBlock[3] = &unk_100567B58;
          v20 = _Block_copy(aBlock);
          v21 = v25;
          v22 = a2;
          swift_release(v21);
          objc_msgSend(v18, "presentViewController:animated:completion:", v15, 1, v20);

          _Block_release(v20);
          return;
        }
      }

    }
  }

}

id sub_100301F94(void *a1, int a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  void (*v25)(_BYTE *, _BYTE *, uint64_t);
  Class isa;
  id v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v39[12];
  int v40;

  v3 = v2;
  v6 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v6);
  v8 = &v39[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for IndexPath(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = &v39[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11);
  v15 = &v39[-v14];
  v16 = objc_msgSend(a1, "identifier");
  v17 = objc_opt_self(NSManagedObjectID);
  v18 = swift_dynamicCastObjCClass(v16, v17);
  if (!v18)
    goto LABEL_14;
  v20 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
  if (!v20)
    goto LABEL_14;
  v21 = v18;
  v40 = a2;
  v22 = v20;
  v23 = objc_msgSend(v22, "collectionViewDiffableDataSource");
  v24 = objc_msgSend(v23, "indexPathForItemIdentifier:", v21);

  if (!v24)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    goto LABEL_10;
  }
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v25 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v25(v8, v13, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
LABEL_10:

    swift_unknownObjectRelease(v16, v36);
    sub_100012DDC((uint64_t)v8, (uint64_t *)&unk_1005D6350);
    return 0;
  }
  v25(v15, v8, v9);
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v3, "cellForItemAtIndexPath:", isa);

  if (!v27)
  {
LABEL_12:

    swift_unknownObjectRelease(v16, v37);
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
    return 0;
  }
  v28 = type metadata accessor for TagCell();
  v29 = (_BYTE *)swift_dynamicCastClass(v27, v28);
  if (!v29)
  {

    goto LABEL_12;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "contentView");
  v32 = objc_msgSend(v31, "window");

  if (!v32)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);

LABEL_14:
    swift_unknownObjectRelease(v16, v19);
    return 0;
  }
  v30[OBJC_IVAR___ICTagCell_isPreviewing] = v40 & 1;
  sub_1003B747C();
  v33 = objc_msgSend(v30, "contentView");
  v34 = objc_msgSend(objc_allocWithZone((Class)UITargetedPreview), "initWithView:", v33);

  swift_unknownObjectRelease(v16, v35);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
  return v34;
}

id sub_100302304(void *a1, uint64_t a2, void *a3, void *a4, int a5)
{
  id v8;
  id v9;
  id v10;
  id v11;

  v8 = a3;
  v9 = a4;
  v10 = a1;
  v11 = sub_100301F94(v9, a5);

  return v11;
}

void sub_100302378(void *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X8>)
{
  id v4;
  uint64_t v5;
  void *v6;
  unsigned __int8 v7;

  v4 = objc_msgSend(a1, "objectWithID:", a2);
  v5 = objc_opt_self(ICNote);
  v6 = (void *)swift_dynamicCastObjCClass(v4, v5);
  if (v6)
  {
    v7 = objc_msgSend(v6, "isPasswordProtected");

  }
  else
  {

    v7 = 0;
  }
  *a3 = v7;
}

void sub_1003025DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  Class isa;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 v22;
  _OWORD v23[2];
  _BYTE v24[24];
  uint64_t v25;
  void *v26;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_workerContext);
  if (!v3)
    goto LABEL_17;
  v4 = *(void **)(a1 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource);
  if (!v4)
  {
LABEL_16:
    v3 = 0;
    goto LABEL_17;
  }
  v5 = (id)v3;
  v6 = objc_msgSend(v4, "collectionViewDiffableDataSource");
  if (!v6)
  {
LABEL_15:

    goto LABEL_16;
  }
  v7 = v6;
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v9 = objc_msgSend(v7, "itemIdentifierForIndexPath:", isa);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(v23, v9);
    swift_unknownObjectRelease(v9, v10);
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_10014BD1C((uint64_t)v23, (uint64_t)v24, &qword_1005CF190);
  if (!v25)
  {

    sub_100012DDC((uint64_t)v24, &qword_1005CF190);
    goto LABEL_16;
  }
  v11 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  if ((swift_dynamicCast(&v26, v24, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {

    goto LABEL_15;
  }
  v12 = v26;
  v13 = objc_msgSend(v5, "objectWithID:", v26);
  v14 = objc_opt_self(ICHashtag);
  v15 = (void *)swift_dynamicCastObjCClass(v13, v14);
  if (!v15 || (v16 = objc_msgSend(v15, "standardizedContent")) == 0)
  {

    goto LABEL_16;
  }
  v17 = v16;
  v18 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagsWithStandardizedContent:context:", v16, v5);

  v19 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
  v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v18, v19);

  v21 = sub_1002FA9A0(v20);
  swift_bridgeObjectRelease(v20);
  if ((sub_1002FBBEC((uint64_t)v21) & 1) != 0)
  {
    swift_bridgeObjectRelease(v21);

    v3 = 2;
  }
  else
  {
    v22 = sub_1002FBAF4((uint64_t)v21);
    swift_bridgeObjectRelease(v21);

    v3 = 3;
    if ((v22 & 1) == 0)
      v3 = 1;
  }
LABEL_17:
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = 0;
}

void destroy for CurrentRenamedTagInfo(uint64_t a1)
{

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *initializeWithCopy for CurrentRenamedTagInfo(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(void **)(a2 + 24);
  a1[2] = v5;
  a1[3] = v6;
  v7 = v3;
  swift_bridgeObjectRetain(v5);
  v8 = v6;
  return a1;
}

uint64_t assignWithCopy for CurrentRenamedTagInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(void **)(a1 + 24);
  v10 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  v11 = v10;

  return a1;
}

uint64_t assignWithTake for CurrentRenamedTagInfo(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v5 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  return a1;
}

uint64_t getEnumTagSinglePayload for CurrentRenamedTagInfo(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CurrentRenamedTagInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrentRenamedTagInfo()
{
  return &type metadata for CurrentRenamedTagInfo;
}

uint64_t getEnumTagSinglePayload for TagCollectionViewConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 1);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TagCollectionViewConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 1) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TagCollectionViewConfiguration()
{
  return &type metadata for TagCollectionViewConfiguration;
}

id sub_100302C1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v5 = sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v5);
  swift_retain(v3);
  v7 = (void *)v4(v6);
  swift_release(v3);
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_100302C94(Swift::Int *a1, void *a2)
{
  return sub_1003041BC(a1, a2, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr, (uint64_t *)&unk_1005CF650);
}

uint64_t sub_100302CB0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  __int128 v15;
  uint64_t v17;
  _BYTE v18[40];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  swift_bridgeObjectRetain(v6);
  v8 = AnyHashable._rawHashValue(seed:)(v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      sub_10020DB18(*(_QWORD *)(v6 + 48) + 40 * v10, (uint64_t)v18);
      v12 = static AnyHashable.== infix(_:_:)(v18, a2);
      sub_10018550C((uint64_t)v18);
      if ((v12 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease(v6);
    sub_10018550C(a2);
    sub_10020DB18(*(_QWORD *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_10020DB18(a2, (uint64_t)v18);
    v17 = *v3;
    *v3 = 0x8000000000000000;
    sub_100306540((uint64_t)v18, v10, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v17;
    swift_bridgeObjectRelease(v14);
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v15;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_100302E28(Swift::Int *a1, void *a2)
{
  return sub_1003041BC(a1, a2, (unint64_t *)&qword_1005D3D00, NSObject_ptr, (uint64_t *)&unk_1005D8A50);
}

uint64_t sub_100302E44(Swift::Int *a1, void *a2)
{
  return sub_10030335C(a1, a2, type metadata accessor for NoteSearchResult, &qword_1005D8AE8);
}

uint64_t sub_100302E58(Swift::Int *a1, void *a2)
{
  return sub_1003041BC(a1, a2, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr, (uint64_t *)&unk_1005D8A70);
}

uint64_t sub_100302E74(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100306838((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_1003030D0(Swift::Int *a1, void *a2)
{
  return sub_1003041BC(a1, a2, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr, (uint64_t *)&unk_1005D8B10);
}

uint64_t sub_1003030EC(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100019C6C(&qword_1005D8980, v12, (uint64_t)&protocol conformance descriptor for IndexPath);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100019C6C((unint64_t *)&unk_1005D8988, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100306A8C((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100303348(Swift::Int *a1, void *a2)
{
  return sub_10030335C(a1, a2, type metadata accessor for AttachmentSearchResult, &qword_1005D8AC8);
}

uint64_t sub_10030335C(Swift::Int *a1, void *a2, uint64_t (*a3)(_QWORD), uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  Swift::Int v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  char v22;
  uint64_t v23;
  id v24;
  char v25;
  void *v26;
  id v27;
  Swift::Int v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  char isUniquelyReferenced_nonNull_native;
  id v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v40;
  Swift::Int v41;

  v7 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v4);
    v12 = a2;
    v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease(v10);

      v40 = v13;
      v14 = a3(0);
      swift_unknownObjectRetain(v13);
      swift_dynamicCast(&v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
      *a1 = v41;
      swift_unknownObjectRelease(v13, v15);
      return 0;
    }
    result = __CocoaSet.count.getter(v11);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v28 = sub_100304484(v11, result + 1, a4, a3);
    v41 = v28;
    v29 = *(_QWORD *)(v28 + 16);
    if (*(_QWORD *)(v28 + 24) <= v29)
    {
      v35 = v29 + 1;
      v36 = v12;
      sub_100006988(v35, a4);
      v30 = v41;
    }
    else
    {
      v30 = v28;
      v31 = v12;
    }
    sub_1003060AC((uint64_t)v12, v30);
    v37 = *v7;
    *v7 = v30;
    swift_bridgeObjectRelease(v37);
    *a1 = (Swift::Int)v12;
  }
  else
  {
    v17 = *(_QWORD *)(v10 + 40);
    swift_bridgeObjectRetain(v10);
    v18 = NSObject._rawHashValue(seed:)(v17);
    v19 = -1 << *(_BYTE *)(v10 + 32);
    v20 = v18 & ~v19;
    if (((*(_QWORD *)(v10 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
    {
      a3(0);
      v21 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v20);
      v22 = static NSObject.== infix(_:_:)(v21);

      if ((v22 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v10);
        v26 = *(void **)(*(_QWORD *)(*v7 + 48) + 8 * v20);
        *a1 = (Swift::Int)v26;
        v27 = v26;
        return 0;
      }
      v23 = ~v19;
      while (1)
      {
        v20 = (v20 + 1) & v23;
        if (((*(_QWORD *)(v10 + 56 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
          break;
        v24 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v20);
        v25 = static NSObject.== infix(_:_:)(v24);

        if ((v25 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v41 = *v7;
    *v7 = 0x8000000000000000;
    v33 = a2;
    sub_1003063BC((uint64_t)v33, v20, isUniquelyReferenced_nonNull_native, a4, a3);
    v34 = *v7;
    *v7 = v41;
    swift_bridgeObjectRelease(v34);
    *a1 = (Swift::Int)v33;
  }
  return 1;
}

uint64_t sub_100303608(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100019C6C((unint64_t *)&unk_1005CF700, v12, (uint64_t)&protocol conformance descriptor for URL);
  swift_bridgeObjectRetain(v10);
  v35 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a1;
    v33 = ~v15;
    v34 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100019C6C((unint64_t *)&qword_1005D8A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v33;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        v3 = v31;
        a1 = v32;
        v26 = v34;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(_QWORD *)(*v31 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v35;
    v20(v9, v35, v6);
    v36 = *v3;
    *v3 = 0x8000000000000000;
    sub_100306CE0((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    v29 = *v3;
    *v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100303864(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  _QWORD v24[9];

  v7 = *v3;
  Hasher.init(_seed:)(v24, *(_QWORD *)(*v3 + 40));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease(v7);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100306F34(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  v23 = *v3;
  *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100303A10(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), a2);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v15 = *v3;
    *v3 = 0x8000000000000000;
    sub_1003070CC(a2, v9, isUniquelyReferenced_nonNull_native);
    v14 = *v3;
    *v3 = v15;
    swift_bridgeObjectRelease(v14);
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_QWORD *)(v10 + 8 * v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v10 + 8 * v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100303B08(Swift::Int *a1, void *a2)
{
  return sub_1003041BC(a1, a2, (unint64_t *)&qword_1005D8AB0, ICNoteEditorViewController_ptr, (uint64_t *)&unk_1005CF890);
}

uint64_t sub_100303B24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[10];

  v58 = a1;
  v71 = sub_100012E18((uint64_t *)&unk_1005D3D30);
  __chkstk_darwin(v71);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = _s3TagVMa(0);
  v68 = *(_QWORD *)(v62 - 8);
  v6 = __chkstk_darwin(v62);
  v72 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v56 = (uint64_t)&v55 - v8;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v14 = __chkstk_darwin(v13);
  v65 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v55 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v55 - v19;
  v57 = v2;
  v21 = *v2;
  Hasher.init(_seed:)(v73, *(_QWORD *)(*v2 + 40));
  v60 = a2;
  sub_100012CE8(a2, (uint64_t)v20, (uint64_t *)&unk_1005D7B20);
  v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v22 = v70(v20, 1, v9);
  v64 = v10;
  v55 = v9;
  if (v22 == 1)
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v20, v9);
    Hasher._combine(_:)(1u);
    v23 = sub_100019C6C((unint64_t *)&unk_1005D89F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    swift_bridgeObjectRetain(v21);
    dispatch thunk of Hashable.hash(into:)(v73, v9, v23);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  v24 = v60;
  v25 = (uint64_t)v65;
  v26 = (_QWORD *)(v60 + *(int *)(v62 + 20));
  v27 = *v26;
  v28 = v26[1];
  v61 = v26;
  swift_bridgeObjectRetain(v28);
  String.hash(into:)(v73, v27, v28);
  swift_bridgeObjectRelease(v28);
  v29 = Hasher._finalize()();
  v30 = -1 << *(_BYTE *)(v21 + 32);
  v31 = v29 & ~v30;
  v32 = v21 + 56;
  v33 = v21;
  if (((*(_QWORD *)(v21 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0)
  {
    v59 = v12;
    v67 = ~v30;
    v68 = *(_QWORD *)(v68 + 72);
    v34 = v72;
    v35 = v55;
    v69 = v21;
    v63 = v21 + 56;
    do
    {
      v36 = *(_QWORD *)(v33 + 48);
      v66 = v68 * v31;
      sub_100145220(v36 + v68 * v31, v34, _s3TagVMa);
      v37 = v24;
      sub_100012CE8(v24, (uint64_t)v18, (uint64_t *)&unk_1005D7B20);
      v38 = v34;
      v39 = (uint64_t)&v5[*(int *)(v71 + 48)];
      sub_100012CE8(v38, (uint64_t)v5, (uint64_t *)&unk_1005D7B20);
      sub_100012CE8((uint64_t)v18, v39, (uint64_t *)&unk_1005D7B20);
      v40 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v70;
      if (v70(v5, 1, v35) == 1)
      {
        sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D7B20);
        if (v40(v39, 1, v35) != 1)
          goto LABEL_13;
        sub_100012DDC((uint64_t)v5, (uint64_t *)&unk_1005D7B20);
        v24 = v37;
      }
      else
      {
        sub_100012CE8((uint64_t)v5, v25, (uint64_t *)&unk_1005D7B20);
        if (v40(v39, 1, v35) == 1)
        {
          sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D7B20);
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v25, v35);
          v32 = v63;
LABEL_13:
          sub_100012DDC((uint64_t)v5, (uint64_t *)&unk_1005D3D30);
          v24 = v37;
          goto LABEL_7;
        }
        v41 = v64;
        v42 = v59;
        (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v59, v39, v35);
        v43 = sub_100019C6C(&qword_1005D36F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v44 = dispatch thunk of static Equatable.== infix(_:_:)(v65, v42, v35, v43);
        v45 = *(void (**)(char *, uint64_t))(v41 + 8);
        v46 = v42;
        v25 = (uint64_t)v65;
        v45(v46, v35);
        sub_100012DDC((uint64_t)v18, (uint64_t *)&unk_1005D7B20);
        v45((char *)v25, v35);
        v24 = v60;
        sub_100012DDC((uint64_t)v5, (uint64_t *)&unk_1005D7B20);
        v32 = v63;
        if ((v44 & 1) == 0)
          goto LABEL_7;
      }
      v47 = (_QWORD *)(v72 + *(int *)(v62 + 20));
      v48 = v47[1];
      v49 = v61[1];
      if (*v47 == *v61 && v48 == v49
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*v47, v48, *v61, v49, 0) & 1) != 0)
      {
        sub_100145264(v72, _s3TagVMa);
        swift_bridgeObjectRelease(v69);
        sub_100145264(v24, _s3TagVMa);
        sub_100145220(*(_QWORD *)(*v57 + 48) + v66, v58, _s3TagVMa);
        return 0;
      }
LABEL_7:
      v34 = v72;
      sub_100145264(v72, _s3TagVMa);
      v31 = (v31 + 1) & v67;
      v33 = v69;
    }
    while (((*(_QWORD *)(v32 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8)) >> v31) & 1) != 0);
  }
  swift_bridgeObjectRelease(v33);
  v51 = v57;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v57);
  v53 = v56;
  sub_100145220(v24, v56, _s3TagVMa);
  v73[0] = *v51;
  *v51 = 0x8000000000000000;
  sub_1003071EC(v53, v31, isUniquelyReferenced_nonNull_native);
  v54 = *v51;
  *v51 = v73[0];
  swift_bridgeObjectRelease(v54);
  sub_10013B170(v24, v58, _s3TagVMa);
  return 1;
}

uint64_t sub_100304170(Swift::Int *a1, void *a2)
{
  return sub_1003041BC(a1, a2, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr, &qword_1005D8AA0);
}

uint64_t sub_10030418C(Swift::Int *a1, void *a2)
{
  return sub_10030335C(a1, a2, type metadata accessor for TableSearchResult, &qword_1005D8AA8);
}

uint64_t sub_1003041A0(Swift::Int *a1, void *a2)
{
  return sub_1003041BC(a1, a2, &qword_1005D8540, CKShareParticipant_ptr, (uint64_t *)&unk_1005CF7C0);
}

uint64_t sub_1003041BC(Swift::Int *a1, void *a2, unint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t *v9;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  char v27;
  void *v28;
  id v29;
  Swift::Int v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  char isUniquelyReferenced_nonNull_native;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v43;
  Swift::Int v44;

  v9 = v5;
  v12 = *v5;
  if ((*v5 & 0xC000000000000001) != 0)
  {
    if (v12 < 0)
      v13 = *v5;
    else
      v13 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v5);
    v14 = a2;
    v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease(v12);

      v43 = v15;
      v16 = sub_1000163BC(0, a3, a4);
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(&v44, &v43, (char *)&type metadata for Swift.AnyObject + 8, v16, 7);
      *a1 = v44;
      swift_unknownObjectRelease(v15, v17);
      return 0;
    }
    result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v30 = sub_100304678(v13, result + 1, a5, a3, a4);
    v44 = v30;
    v31 = *(_QWORD *)(v30 + 16);
    if (*(_QWORD *)(v30 + 24) <= v31)
    {
      v37 = v31 + 1;
      v38 = v14;
      sub_100006988(v37, a5);
      v32 = v44;
    }
    else
    {
      v32 = v30;
      v33 = v14;
    }
    sub_1003060AC((uint64_t)v14, v32);
    v39 = *v9;
    *v9 = v32;
    swift_bridgeObjectRelease(v39);
    *a1 = (Swift::Int)v14;
  }
  else
  {
    v19 = *(_QWORD *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    v20 = NSObject._rawHashValue(seed:)(v19);
    v21 = -1 << *(_BYTE *)(v12 + 32);
    v22 = v20 & ~v21;
    v40 = a4;
    if (((*(_QWORD *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
    {
      sub_1000163BC(0, a3, a4);
      v23 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v22);
      v24 = static NSObject.== infix(_:_:)(v23);

      if ((v24 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        v28 = *(void **)(*(_QWORD *)(*v9 + 48) + 8 * v22);
        *a1 = (Swift::Int)v28;
        v29 = v28;
        return 0;
      }
      v25 = ~v21;
      while (1)
      {
        v22 = (v22 + 1) & v25;
        if (((*(_QWORD *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
          break;
        v26 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v22);
        v27 = static NSObject.== infix(_:_:)(v26);

        if ((v27 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v12);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    v44 = *v9;
    *v9 = 0x8000000000000000;
    v35 = a2;
    sub_1003066A8((uint64_t)v35, v22, isUniquelyReferenced_nonNull_native, a5, a3, v40);
    v36 = *v9;
    *v9 = v44;
    swift_bridgeObjectRelease(v36);
    *a1 = (Swift::Int)v35;
  }
  return 1;
}

Swift::Int sub_100304484(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a2)
  {
    sub_100012E18(a3);
    v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v27 = v8;
    v9 = __CocoaSet.makeIterator()(a1);
    v10 = __CocoaSet.Iterator.next()();
    if (v10)
    {
      v11 = v10;
      v12 = a4(0);
      do
      {
        v25 = v11;
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v12, 7);
        v8 = v27;
        v20 = *(_QWORD *)(v27 + 16);
        if (*(_QWORD *)(v27 + 24) <= v20)
        {
          sub_100006988(v20 + 1, a3);
          v8 = v27;
        }
        v13 = v26;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
        v15 = v8 + 56;
        v16 = -1 << *(_BYTE *)(v8 + 32);
        v17 = result & ~v16;
        v18 = v17 >> 6;
        if (((-1 << v17) & ~*(_QWORD *)(v8 + 56 + 8 * (v17 >> 6))) != 0)
        {
          v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v8 + 56 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v21 = 0;
          v22 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v22 && (v21 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v23 = v18 == v22;
            if (v18 == v22)
              v18 = 0;
            v21 |= v23;
            v24 = *(_QWORD *)(v15 + 8 * v18);
          }
          while (v24 == -1);
          v19 = __clz(__rbit64(~v24)) + (v18 << 6);
        }
        *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
        *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v19) = v13;
        ++*(_QWORD *)(v8 + 16);
        v11 = __CocoaSet.Iterator.next()();
      }
      while (v11);
    }
    swift_release(v9);
  }
  else
  {
    swift_unknownObjectRelease(a1, 0);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v8;
}

Swift::Int sub_100304678(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int result;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a2)
  {
    sub_100012E18(a3);
    v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    v29 = v10;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = __CocoaSet.Iterator.next()();
    if (v12)
    {
      v13 = v12;
      v14 = sub_1000163BC(0, a4, a5);
      do
      {
        v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7);
        v10 = v29;
        v22 = *(_QWORD *)(v29 + 16);
        if (*(_QWORD *)(v29 + 24) <= v22)
        {
          sub_100006988(v22 + 1, a3);
          v10 = v29;
        }
        v15 = v28;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v10 + 40));
        v17 = v10 + 56;
        v18 = -1 << *(_BYTE *)(v10 + 32);
        v19 = result & ~v18;
        v20 = v19 >> 6;
        if (((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v20 == v24;
            if (v20 == v24)
              v20 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v17 + 8 * v20);
          }
          while (v26 == -1);
          v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }
        *(_QWORD *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v21) = v15;
        ++*(_QWORD *)(v10 + 16);
        v13 = __CocoaSet.Iterator.next()();
      }
      while (v13);
    }
    swift_release(v11);
  }
  else
  {
    swift_unknownObjectRelease(a1, 0);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v10;
}

Swift::Int sub_100304878(uint64_t a1, uint64_t a2)
{
  return sub_100304678(a1, a2, (uint64_t *)&unk_1005D8A70, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
}

Swift::Int sub_100304894(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  Swift::Int result;
  int64_t v16;
  uint64_t (*v17)(uint64_t);
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  int64_t v50;
  _QWORD v51[9];

  v2 = v1;
  v4 = (int *)type metadata accessor for FolderEntity(0);
  v49 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_100012E18((uint64_t *)&unk_1005D8AF0);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v48 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v46 = v1;
  v47 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain(v7);
  v16 = 0;
  v17 = type metadata accessor for FolderEntity;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v50 = v16;
      v20 = v19 | (v16 << 6);
      goto LABEL_26;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v21 >= v47)
      goto LABEL_35;
    v22 = v48[v21];
    v23 = v16 + 1;
    if (!v22)
    {
      v23 = v16 + 2;
      if (v16 + 2 >= v47)
        goto LABEL_35;
      v22 = v48[v23];
      if (!v22)
      {
        v23 = v16 + 3;
        if (v16 + 3 >= v47)
          goto LABEL_35;
        v22 = v48[v23];
        if (!v22)
          break;
      }
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v50 = v23;
    v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_26:
    v25 = v7;
    v26 = *(_QWORD *)(v49 + 72);
    v27 = v17;
    sub_10013B170(*(_QWORD *)(v7 + 48) + v26 * v20, (uint64_t)v6, v17);
    Hasher.init(_seed:)(v51, *(_QWORD *)(v9 + 40));
    v28 = type metadata accessor for FolderID(0);
    v29 = sub_100019C6C(&qword_1005D0570, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
    dispatch thunk of Hashable.hash(into:)(v51, v28, v29);
    v30 = type metadata accessor for URL(0);
    v31 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v51, v30, v31);
    v32 = &v6[v4[6]];
    v33 = *(_QWORD *)v32;
    v34 = *((_QWORD *)v32 + 1);
    swift_bridgeObjectRetain(v34);
    String.hash(into:)(v51, v33, v34);
    swift_bridgeObjectRelease(v34);
    v35 = &v6[v4[7]];
    v36 = *(_QWORD *)v35;
    v37 = *((_QWORD *)v35 + 1);
    swift_bridgeObjectRetain(v37);
    String.hash(into:)(v51, v36, v37);
    swift_bridgeObjectRelease(v37);
    Hasher._combine(_:)(v6[v4[8]]);
    Hasher._combine(_:)(v6[v4[9]]);
    result = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(v9 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    if (((-1 << v39) & ~*(_QWORD *)(v14 + 8 * (v39 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v14 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
      v7 = v25;
      v17 = v27;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      v7 = v25;
      v17 = v27;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v14 + 8 * v40);
      }
      while (v44 == -1);
      v18 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = sub_10013B170((uint64_t)v6, *(_QWORD *)(v9 + 48) + v18 * v26, v17);
    ++*(_QWORD *)(v9 + 16);
    v16 = v50;
  }
  v24 = v16 + 4;
  if (v16 + 4 < v47)
  {
    v22 = v48[v24];
    if (!v22)
    {
      while (1)
      {
        v23 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_41;
        if (v23 >= v47)
          goto LABEL_35;
        v22 = v48[v23];
        ++v24;
        if (v22)
          goto LABEL_25;
      }
    }
    v23 = v16 + 4;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v46;
  v45 = 1 << *(_BYTE *)(v7 + 32);
  if (v45 > 63)
    bzero(v48, ((unint64_t)(v45 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v48 = -1 << v45;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

Swift::Int sub_100304CE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100012E18((uint64_t *)&unk_1005D8A80);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain(v3);
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v11)
          goto LABEL_36;
        v20 = v8[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v11)
            goto LABEL_36;
          v20 = v8[v14];
          if (!v20)
          {
            v14 = v19 + 2;
            if (v19 + 2 >= v11)
              goto LABEL_36;
            v20 = v8[v14];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_36:
                swift_release(v3);
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v20 = v8[v21];
              if (!v20)
              {
                while (1)
                {
                  v14 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v20 = v8[v14];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v14 = v21;
            }
          }
        }
LABEL_26:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = *(_QWORD *)(v3 + 48) + 40 * v18;
      v32 = *(_OWORD *)v22;
      v33 = *(_OWORD *)(v22 + 16);
      v34 = *(_QWORD *)(v22 + 32);
      result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = *(_QWORD *)(v6 + 48) + 40 * v15;
      *(_OWORD *)v16 = v32;
      *(_OWORD *)(v16 + 16) = v33;
      *(_QWORD *)(v16 + 32) = v34;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100304FB0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;

  v48 = a4;
  v49 = a5;
  v7 = v5;
  v47 = a2;
  v9 = a2(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100012E18(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v45 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v7;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain(v12);
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      goto LABEL_35;
    v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v26 = v45[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100019C6C(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v44)
  {
    v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v43;
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 > 63)
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v45 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  result = swift_release(v12);
  *v7 = v14;
  return result;
}

Swift::Int sub_100305310(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100012E18(&qword_1005D89E0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain(v3);
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34, *(_QWORD *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_1003055EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100012E18(&qword_1005D8AC0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_10030586C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = _s3TagVMa(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D8A00);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_28;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = (_QWORD *)(v8 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & *(_QWORD *)(v8 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  result = swift_retain(v8);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_8;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if (v19 >= v14)
      goto LABEL_24;
    v20 = v11[v19];
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_24;
      v20 = v11[v16];
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_24;
        v20 = v11[v16];
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_8:
    sub_10013B170(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v5 + 72) * v18, (uint64_t)v7, _s3TagVMa);
    result = sub_100305EA4((uint64_t)v7, v9);
  }
  v21 = v19 + 3;
  if (v21 < v14)
  {
    v20 = v11[v21];
    if (!v20)
    {
      while (1)
      {
        v16 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_30;
        if (v16 >= v14)
          goto LABEL_24;
        v20 = v11[v16];
        ++v21;
        if (v20)
          goto LABEL_23;
      }
    }
    v16 = v21;
    goto LABEL_23;
  }
LABEL_24:
  swift_release(v8);
  v22 = 1 << *(_BYTE *)(v8 + 32);
  if (v22 > 63)
    bzero((void *)(v8 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v22;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_28:
  result = swift_release(v8);
  *v2 = v9;
  return result;
}

void sub_100305A94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  int64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  _QWORD v52[9];

  v2 = v1;
  v4 = type metadata accessor for AccountEntity(0);
  v5 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  v50 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_100012E18((uint64_t *)&unk_1005D8A90);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  v10 = v9;
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_39;
  v11 = 1 << *(_BYTE *)(v8 + 32);
  v12 = *(_QWORD *)(v8 + 56);
  v48 = (_QWORD *)(v8 + 56);
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v46 = v1;
  v47 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  swift_retain(v8);
  v16 = 0;
  v17 = type metadata accessor for AccountEntity;
  v18 = v49;
  while (1)
  {
    if (v14)
    {
      v20 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v51 = v16;
      v21 = v20 | (v16 << 6);
      goto LABEL_26;
    }
    v22 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return;
    }
    if (v22 >= v47)
      goto LABEL_35;
    v23 = v48[v22];
    v24 = v16 + 1;
    if (!v23)
    {
      v24 = v16 + 2;
      if (v16 + 2 >= v47)
        goto LABEL_35;
      v23 = v48[v24];
      if (!v23)
      {
        v24 = v16 + 3;
        if (v16 + 3 >= v47)
          goto LABEL_35;
        v23 = v48[v24];
        if (!v23)
          break;
      }
    }
LABEL_25:
    v14 = (v23 - 1) & v23;
    v51 = v24;
    v21 = __clz(__rbit64(v23)) + (v24 << 6);
LABEL_26:
    v26 = v8;
    v27 = *(_QWORD *)(v50 + 72);
    v28 = v17;
    sub_10013B170(*(_QWORD *)(v8 + 48) + v27 * v21, (uint64_t)v7, v17);
    Hasher.init(_seed:)(v52, *(_QWORD *)(v10 + 40));
    v29 = type metadata accessor for AccountID(0);
    v30 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
    dispatch thunk of Hashable.hash(into:)(v52, v29, v30);
    v31 = type metadata accessor for URL(0);
    v32 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v52, v31, v32);
    v33 = &v7[*(int *)(v18 + 24)];
    v34 = *(_QWORD *)v33;
    v35 = *((_QWORD *)v33 + 1);
    swift_bridgeObjectRetain(v35);
    String.hash(into:)(v52, v34, v35);
    swift_bridgeObjectRelease(v35);
    v36 = Hasher._finalize()();
    v37 = -1 << *(_BYTE *)(v10 + 32);
    v38 = v36 & ~v37;
    v39 = v38 >> 6;
    if (((-1 << v38) & ~*(_QWORD *)(v15 + 8 * (v38 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v15 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
      v8 = v26;
      v17 = v28;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      v8 = v26;
      v17 = v28;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v15 + 8 * v39);
      }
      while (v43 == -1);
      v19 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    sub_10013B170((uint64_t)v7, *(_QWORD *)(v10 + 48) + v19 * v27, v17);
    ++*(_QWORD *)(v10 + 16);
    v16 = v51;
  }
  v25 = v16 + 4;
  if (v16 + 4 < v47)
  {
    v23 = v48[v25];
    if (!v23)
    {
      while (1)
      {
        v24 = v25 + 1;
        if (__OFADD__(v25, 1))
          goto LABEL_41;
        if (v24 >= v47)
          goto LABEL_35;
        v23 = v48[v24];
        ++v25;
        if (v23)
          goto LABEL_25;
      }
    }
    v24 = v16 + 4;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v8);
  v2 = v46;
  v44 = 1 << *(_BYTE *)(v8 + 32);
  if (v44 > 63)
    bzero(v48, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v48 = -1 << v44;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_39:
  swift_release(v8);
  *v2 = v10;
}

uint64_t sub_100305EA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t result;
  _QWORD v20[9];

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v8);
  v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v20, *(_QWORD *)(a2 + 40));
  sub_100012CE8(a1, (uint64_t)v10, (uint64_t *)&unk_1005D7B20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v11 = sub_100019C6C((unint64_t *)&unk_1005D89F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v20, v4, v11);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12 = _s3TagVMa(0);
  v13 = (uint64_t *)(a1 + *(int *)(v12 + 20));
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(v20, v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = Hasher._finalize()();
  v17 = _HashTable.nextHole(atOrAfter:)(v16 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
  result = sub_10013B170(a1, *(_QWORD *)(a2 + 48) + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v17, _s3TagVMa);
  ++*(_QWORD *)(a2 + 16);
  return result;
}

unint64_t sub_1003060AC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  unint64_t result;

  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
  result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1 << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1 << *(_BYTE *)(a2 + 32)));
  *(_QWORD *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
  *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * result) = a1;
  ++*(_QWORD *)(a2 + 16);
  return result;
}

uint64_t sub_10030612C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[9];

  v4 = v3;
  v8 = (int *)type metadata accessor for FolderEntity(0);
  v9 = *((_QWORD *)v8 - 1);
  __chkstk_darwin(v8);
  v11 = (char *)&v38[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(*v4 + 16);
  v13 = *(_QWORD *)(*v4 + 24);
  v37 = v9;
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_26;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100304894(v14);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100308188(type metadata accessor for FolderEntity, (uint64_t *)&unk_1005D8AF0);
      goto LABEL_26;
    }
    sub_100308540(v14);
  }
  v15 = *v4;
  Hasher.init(_seed:)(v38, *(_QWORD *)(*v4 + 40));
  FolderEntity.hash(into:)((uint64_t)v38);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v9 + 72);
    while (1)
    {
      sub_100145220(*(_QWORD *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for FolderEntity);
      if ((static FolderID.== infix(_:_:)(v11, a1) & 1) != 0
        && (static URL.== infix(_:_:)(&v11[v8[5]], a1 + v8[5]) & 1) != 0)
      {
        v20 = v8[6];
        v21 = *(_QWORD *)&v11[v20];
        v22 = *(_QWORD *)&v11[v20 + 8];
        v23 = (_QWORD *)(a1 + v20);
        v24 = v23[1];
        v25 = v21 == *v23 && v22 == v24;
        if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, *v23, v24, 0) & 1) != 0)
        {
          v26 = v8[7];
          v27 = *(_QWORD *)&v11[v26];
          v28 = *(_QWORD *)&v11[v26 + 8];
          v29 = (_QWORD *)(a1 + v26);
          v30 = v29[1];
          v31 = v27 == *v29 && v28 == v30;
          if ((v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, *v29, v30, 0) & 1) != 0)
            && v11[v8[8]] == *(_BYTE *)(a1 + v8[8])
            && v11[v8[9]] == *(_BYTE *)(a1 + v8[9]))
          {
            break;
          }
        }
      }
      sub_100145264((uint64_t)v11, type metadata accessor for FolderEntity);
      a2 = (a2 + 1) & v18;
      if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_26;
    }
    sub_100145264((uint64_t)v11, type metadata accessor for FolderEntity);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
  }
LABEL_26:
  v32 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_10013B170(a1, *(_QWORD *)(v32 + 48) + *(_QWORD *)(v37 + 72) * a2, type metadata accessor for FolderEntity);
  v34 = *(_QWORD *)(v32 + 16);
  v35 = __OFADD__(v34, 1);
  v36 = v34 + 1;
  if (v35)
    __break(1u);
  else
    *(_QWORD *)(v32 + 16) = v36;
  return result;
}

void sub_1003063BC(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t *v5;
  uint64_t *v7;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v7 = v5;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_14;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100006988(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      sub_1003083A0(a4);
      goto LABEL_14;
    }
    sub_100016148(v12, a4);
  }
  v13 = *v5;
  v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v5 + 40));
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v16 = a5(0);
    v17 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * a2);
    v18 = static NSObject.== infix(_:_:)();

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }
    else
    {
      v19 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v20 = *(id *)(*(_QWORD *)(v13 + 48) + 8 * a2);
        v21 = static NSObject.== infix(_:_:)();

        if ((v21 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v22 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v22 + 48) + 8 * a2) = a1;
  v23 = *(_QWORD *)(v22 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v22 + 16) = v25;
}

uint64_t sub_100306540(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[40];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100304CE8(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_100307A54();
      goto LABEL_12;
    }
    sub_10030894C(v9);
  }
  v10 = *v3;
  result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      sub_10020DB18(*(_QWORD *)(v10 + 48) + 40 * a2, (uint64_t)v20);
      v13 = static AnyHashable.== infix(_:_:)(v20, v6);
      result = sub_10018550C((uint64_t)v20);
      if ((v13 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v15 = *(_QWORD *)(v14 + 48) + 40 * a2;
  v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v6;
  *(_OWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v6 + 32);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v14 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_1003066A8(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t *v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = v6;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100006988(v14, a4);
  }
  else
  {
    if (v13 > v12)
    {
      sub_1003083A0(a4);
      goto LABEL_14;
    }
    sub_100016148(v14, a4);
  }
  v15 = *v6;
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v6 + 40));
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = sub_1000163BC(0, a5, a6);
    v19 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
    v20 = static NSObject.== infix(_:_:)(v19);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
        v23 = static NSObject.== infix(_:_:)(v22);

        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v24 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * a2) = a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v27;
}

uint64_t sub_100306838(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100304FB0(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1005D8AE0, (unint64_t *)&qword_1005D8AD0, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100307C20((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1005D8AE0);
      goto LABEL_12;
    }
    sub_100308BDC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1005D8AE0, (unint64_t *)&qword_1005D8AD0, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100306A8C(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100304FB0(v12, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_1005D8998, &qword_1005D8980, (uint64_t)&protocol conformance descriptor for IndexPath);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100307C20((uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, &qword_1005D8998);
      goto LABEL_12;
    }
    sub_100308BDC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_1005D8998, &qword_1005D8980, (uint64_t)&protocol conformance descriptor for IndexPath);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100019C6C(&qword_1005D8980, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100019C6C((unint64_t *)&unk_1005D8988, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100306CE0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100304FB0(v12, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1005CF6F8, (unint64_t *)&unk_1005CF700, (uint64_t)&protocol conformance descriptor for URL);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100307C20((uint64_t (*)(_QWORD))&type metadata accessor for URL, &qword_1005CF6F8);
      goto LABEL_12;
    }
    sub_100308BDC(v12, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1005CF6F8, (unint64_t *)&unk_1005CF700, (uint64_t)&protocol conformance descriptor for URL);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100019C6C((unint64_t *)&qword_1005D8A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_100306F34(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100305310(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100307E44();
      goto LABEL_22;
    }
    sub_100308EF8(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29, *(_QWORD *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

uint64_t sub_1003070CC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1003055EC(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100307FF4();
      goto LABEL_14;
    }
    sub_1003091A4(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v3 + 40), v5);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_1003071EC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  unsigned int v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  unsigned int (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  char *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[10];

  v68 = a1;
  v67 = sub_100012E18((uint64_t *)&unk_1005D3D30);
  __chkstk_darwin(v67);
  v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = _s3TagVMa(0);
  v8 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v57 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v15 = __chkstk_darwin(v14);
  v61 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v55 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v55 - v20;
  v22 = *(_QWORD *)(*v3 + 16);
  v23 = *(_QWORD *)(*v3 + 24);
  v56 = v3;
  v55 = v8;
  if (v23 > v22 && (a3 & 1) != 0)
    goto LABEL_25;
  v24 = v22 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10030586C(v24);
  }
  else
  {
    if (v23 > v22)
    {
      sub_100308188(_s3TagVMa, &qword_1005D8A00);
      goto LABEL_25;
    }
    sub_100309404(v24);
  }
  v66 = *v3;
  Hasher.init(_seed:)(v69, *(_QWORD *)(v66 + 40));
  sub_100012CE8(v68, (uint64_t)v21, (uint64_t *)&unk_1005D7B20);
  v25 = v12;
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v27 = v26(v21, 1, v11);
  v59 = v25;
  if (v27 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v28 = v57;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v57, v21, v11);
    Hasher._combine(_:)(1u);
    v29 = sub_100019C6C((unint64_t *)&unk_1005D89F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v69, v11, v29);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v28, v11);
  }
  v30 = (_QWORD *)(v68 + *(int *)(v60 + 20));
  v31 = *v30;
  v32 = v30[1];
  v58 = v30;
  swift_bridgeObjectRetain(v32);
  String.hash(into:)(v69, v31, v32);
  swift_bridgeObjectRelease(v32);
  v33 = Hasher._finalize()();
  v34 = -1 << *(_BYTE *)(v66 + 32);
  a2 = v33 & ~v34;
  v65 = v66 + 56;
  if (((*(_QWORD *)(v66 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v64 = ~v34;
    v35 = *(_QWORD *)(v8 + 72);
    v62 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v26;
    v63 = v35;
    v36 = _s3TagVMa;
    v37 = (uint64_t)v61;
    do
    {
      v38 = v36;
      sub_100145220(*(_QWORD *)(v66 + 48) + v63 * a2, (uint64_t)v10, v36);
      sub_100012CE8(v68, (uint64_t)v19, (uint64_t *)&unk_1005D7B20);
      v39 = (uint64_t)&v7[*(int *)(v67 + 48)];
      sub_100012CE8((uint64_t)v10, (uint64_t)v7, (uint64_t *)&unk_1005D7B20);
      sub_100012CE8((uint64_t)v19, v39, (uint64_t *)&unk_1005D7B20);
      v40 = v62;
      if (v62((uint64_t)v7, 1, v11) == 1)
      {
        sub_100012DDC((uint64_t)v19, (uint64_t *)&unk_1005D7B20);
        if (v40(v39, 1, v11) != 1)
          goto LABEL_20;
        sub_100012DDC((uint64_t)v7, (uint64_t *)&unk_1005D7B20);
      }
      else
      {
        sub_100012CE8((uint64_t)v7, v37, (uint64_t *)&unk_1005D7B20);
        if (v40(v39, 1, v11) == 1)
        {
          sub_100012DDC((uint64_t)v19, (uint64_t *)&unk_1005D7B20);
          (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v37, v11);
LABEL_20:
          sub_100012DDC((uint64_t)v7, (uint64_t *)&unk_1005D3D30);
          goto LABEL_14;
        }
        v41 = v59;
        v42 = v57;
        (*(void (**)(char *, uint64_t, uint64_t))(v59 + 32))(v57, v39, v11);
        v43 = sub_100019C6C(&qword_1005D36F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v44 = dispatch thunk of static Equatable.== infix(_:_:)(v61, v42, v11, v43);
        v45 = *(void (**)(char *, uint64_t))(v41 + 8);
        v46 = v42;
        v37 = (uint64_t)v61;
        v45(v46, v11);
        sub_100012DDC((uint64_t)v19, (uint64_t *)&unk_1005D7B20);
        v45((char *)v37, v11);
        sub_100012DDC((uint64_t)v7, (uint64_t *)&unk_1005D7B20);
        if ((v44 & 1) == 0)
          goto LABEL_14;
      }
      v47 = &v10[*(int *)(v60 + 20)];
      v48 = *((_QWORD *)v47 + 1);
      v49 = v58[1];
      if (*(_QWORD *)v47 == *v58 && v48 == v49
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v47, v48, *v58, v49, 0) & 1) != 0)
      {
        sub_100145264((uint64_t)v10, _s3TagVMa);
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v60);
        __break(1u);
        break;
      }
LABEL_14:
      v36 = v38;
      sub_100145264((uint64_t)v10, v38);
      a2 = (a2 + 1) & v64;
    }
    while (((*(_QWORD *)(v65 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_25:
  v50 = *v56;
  *(_QWORD *)(*v56 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_10013B170(v68, *(_QWORD *)(v50 + 48) + *(_QWORD *)(v55 + 72) * a2, _s3TagVMa);
  v52 = *(_QWORD *)(v50 + 16);
  v53 = __OFADD__(v52, 1);
  v54 = v52 + 1;
  if (v53)
    __break(1u);
  else
    *(_QWORD *)(v50 + 16) = v54;
  return result;
}

uint64_t sub_100307788(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _QWORD v39[9];

  v7 = type metadata accessor for AccountEntity(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(*v3 + 16);
  v12 = *(_QWORD *)(*v3 + 24);
  v36 = v8;
  v37 = v3;
  if (v12 > v11 && (a3 & 1) != 0)
    goto LABEL_19;
  v13 = v11 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100305A94(v13);
  }
  else
  {
    if (v12 > v11)
    {
      sub_100308188(type metadata accessor for AccountEntity, (uint64_t *)&unk_1005D8A90);
      goto LABEL_19;
    }
    sub_1003095F8(v13);
  }
  v14 = *v3;
  Hasher.init(_seed:)(v39, *(_QWORD *)(*v3 + 40));
  v15 = type metadata accessor for AccountID(0);
  v16 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
  dispatch thunk of Hashable.hash(into:)(v39, v15, v16);
  v17 = a1 + *(int *)(v7 + 20);
  v18 = type metadata accessor for URL(0);
  v19 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v38 = v17;
  dispatch thunk of Hashable.hash(into:)(v39, v18, v19);
  v20 = (_QWORD *)(a1 + *(int *)(v7 + 24));
  v21 = *v20;
  v22 = v20[1];
  swift_bridgeObjectRetain(v22);
  String.hash(into:)(v39, v21, v22);
  swift_bridgeObjectRelease(v22);
  v23 = Hasher._finalize()();
  v24 = -1 << *(_BYTE *)(v14 + 32);
  a2 = v23 & ~v24;
  if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v25 = ~v24;
    v26 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_100145220(*(_QWORD *)(v14 + 48) + v26 * a2, (uint64_t)v10, type metadata accessor for AccountEntity);
      if ((static AccountID.== infix(_:_:)(v10, a1) & 1) != 0
        && (static URL.== infix(_:_:)(&v10[*(int *)(v7 + 20)], v38) & 1) != 0)
      {
        v27 = &v10[*(int *)(v7 + 24)];
        v28 = *((_QWORD *)v27 + 1);
        v29 = v20[1];
        v30 = *(_QWORD *)v27 == *v20 && v28 == v29;
        if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v27, v28, *v20, v29, 0) & 1) != 0)
          break;
      }
      sub_100145264((uint64_t)v10, type metadata accessor for AccountEntity);
      a2 = (a2 + 1) & v25;
      if (((*(_QWORD *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_19;
    }
    sub_100145264((uint64_t)v10, type metadata accessor for AccountEntity);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
    __break(1u);
  }
LABEL_19:
  v31 = *v37;
  *(_QWORD *)(*v37 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_10013B170(a1, *(_QWORD *)(v31 + 48) + *(_QWORD *)(v36 + 72) * a2, type metadata accessor for AccountEntity);
  v33 = *(_QWORD *)(v31 + 16);
  v34 = __OFADD__(v33, 1);
  v35 = v33 + 1;
  if (v34)
    __break(1u);
  else
    *(_QWORD *)(v31 + 16) = v35;
  return result;
}

void *sub_100307A54()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_100012E18((uint64_t *)&unk_1005D8A80);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)sub_10020DB18(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100307C20(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_100012E18(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_100307E44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_100012E18(&qword_1005D89E0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_100307FF4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_100012E18(&qword_1005D8AC0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100308188(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - v8;
  sub_100012E18(a2);
  v10 = *v2;
  v11 = static _SetStorage.copy(original:)(*v2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release(v10);
LABEL_30:
    *v5 = v12;
    return result;
  }
  v29 = v5;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    sub_100145220(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    result = (void *)sub_10013B170((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release(v10);
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

id sub_1003083A0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_100012E18(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

Swift::Int sub_100308540(uint64_t a1)
{
  uint64_t *v1;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char v39;
  unint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t i;
  uint64_t v47;
  _QWORD v48[9];

  v3 = (int *)type metadata accessor for FolderEntity(0);
  v47 = *((_QWORD *)v3 - 1);
  __chkstk_darwin(v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v1;
  v6 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_100012E18((uint64_t *)&unk_1005D8AF0);
  v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release(v6);
LABEL_37:
    *v43 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v44 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v45 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain(v6);
  v15 = 0;
  v16 = type metadata accessor for FolderEntity;
  for (i = v6; ; v6 = i)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_26;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v45)
      goto LABEL_35;
    v21 = *(_QWORD *)(v44 + 8 * v20);
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v45)
        goto LABEL_35;
      v21 = *(_QWORD *)(v44 + 8 * v15);
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v45)
          goto LABEL_35;
        v21 = *(_QWORD *)(v44 + 8 * v15);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v47 + 72);
    v24 = *(_QWORD *)(v6 + 48) + v23 * v19;
    v25 = v16;
    sub_100145220(v24, (uint64_t)v5, v16);
    Hasher.init(_seed:)(v48, *(_QWORD *)(v8 + 40));
    v26 = type metadata accessor for FolderID(0);
    v27 = sub_100019C6C(&qword_1005D0570, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
    dispatch thunk of Hashable.hash(into:)(v48, v26, v27);
    v28 = type metadata accessor for URL(0);
    v29 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v48, v28, v29);
    v30 = &v5[v3[6]];
    v31 = *(_QWORD *)v30;
    v32 = *((_QWORD *)v30 + 1);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(v48, v31, v32);
    swift_bridgeObjectRelease(v32);
    v33 = &v5[v3[7]];
    v34 = *(_QWORD *)v33;
    v35 = *((_QWORD *)v33 + 1);
    swift_bridgeObjectRetain(v35);
    String.hash(into:)(v48, v34, v35);
    swift_bridgeObjectRelease(v35);
    Hasher._combine(_:)(v5[v3[8]]);
    Hasher._combine(_:)(v5[v3[9]]);
    result = Hasher._finalize()();
    v36 = -1 << *(_BYTE *)(v8 + 32);
    v37 = result & ~v36;
    v38 = v37 >> 6;
    if (((-1 << v37) & ~*(_QWORD *)(v13 + 8 * (v37 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v37) & ~*(_QWORD *)(v13 + 8 * (v37 >> 6)))) | v37 & 0x7FFFFFFFFFFFFFC0;
      v16 = v25;
    }
    else
    {
      v39 = 0;
      v40 = (unint64_t)(63 - v36) >> 6;
      v16 = v25;
      do
      {
        if (++v38 == v40 && (v39 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v41 = v38 == v40;
        if (v38 == v40)
          v38 = 0;
        v39 |= v41;
        v42 = *(_QWORD *)(v13 + 8 * v38);
      }
      while (v42 == -1);
      v17 = __clz(__rbit64(~v42)) + (v38 << 6);
    }
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_10013B170((uint64_t)v5, *(_QWORD *)(v8 + 48) + v17 * v23, v16);
    ++*(_QWORD *)(v8 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v45)
  {
LABEL_35:
    result = swift_release_n(v6, 2);
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v44 + 8 * v22);
  if (v21)
  {
    v15 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v15 >= v45)
      goto LABEL_35;
    v21 = *(_QWORD *)(v44 + 8 * v15);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_10030894C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  Swift::Int result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];
  uint64_t v33;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100012E18((uint64_t *)&unk_1005D8A80);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain(v3);
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_27;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v21 >= v11)
      goto LABEL_36;
    v22 = *(_QWORD *)(v8 + 8 * v21);
    ++v14;
    if (!v22)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_36;
      v22 = *(_QWORD *)(v8 + 8 * v14);
      if (!v22)
      {
        v14 = v21 + 2;
        if (v21 + 2 >= v11)
          goto LABEL_36;
        v22 = *(_QWORD *)(v8 + 8 * v14);
        if (!v22)
          break;
      }
    }
LABEL_26:
    v10 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_27:
    sub_10020DB18(*(_QWORD *)(v3 + 48) + 40 * v20, (uint64_t)v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v6 + 48) + 40 * v15;
    v17 = v32[0];
    v18 = v32[1];
    *(_QWORD *)(v16 + 32) = v33;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(_QWORD *)(v6 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v22 = *(_QWORD *)(v8 + 8 * v23);
  if (v22)
  {
    v14 = v23;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v22 = *(_QWORD *)(v8 + 8 * v14);
    ++v23;
    if (v22)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100308BDC(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;

  v43 = a4;
  v44 = a5;
  v7 = v5;
  v42 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_100012E18(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_37:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v39 = v7;
  v40 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v41 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain(v13);
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_35;
      v27 = *(_QWORD *)(v40 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v27 = *(_QWORD *)(v40 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_100019C6C(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v32 = -1 << *(_BYTE *)(v15 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v34);
      }
      while (v38 == -1);
      v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    result = swift_release_n(v13, 2);
    v7 = v39;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

Swift::Int sub_100308EF8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100012E18(&qword_1005D89E0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain(v3);
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33, *(_QWORD *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1003091A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_100012E18(&qword_1005D8AC0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v6 + 40), v20);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100309404(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = _s3TagVMa(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(&qword_1005D8A00);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release(v8);
LABEL_26:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = v8 + 56;
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & *(_QWORD *)(v8 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  result = swift_retain(v8);
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_8;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v11 + 8 * v19);
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_24;
      v20 = *(_QWORD *)(v11 + 8 * v16);
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v11 + 8 * v16);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_8:
    sub_100145220(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v5 + 72) * v18, (uint64_t)v7, _s3TagVMa);
    result = sub_100305EA4((uint64_t)v7, v9);
  }
  v21 = v19 + 3;
  if (v21 >= v14)
  {
LABEL_24:
    result = swift_release_n(v8, 2);
    goto LABEL_26;
  }
  v20 = *(_QWORD *)(v11 + 8 * v21);
  if (v20)
  {
    v16 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v11 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_1003095F8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[9];

  v3 = type metadata accessor for AccountEntity(0);
  v4 = *(_QWORD *)(v3 - 8);
  v47 = v3;
  v48 = v4;
  __chkstk_darwin(v3);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = v1;
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_100012E18((uint64_t *)&unk_1005D8A90);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_release(v7);
LABEL_37:
    *v43 = v9;
    return;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v44 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v45 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  swift_retain(v7);
  v15 = 0;
  v16 = type metadata accessor for AccountEntity;
  v46 = v7;
  v17 = v47;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v20 = v19 | (v15 << 6);
      goto LABEL_26;
    }
    v21 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v21 >= v45)
      goto LABEL_35;
    v22 = *(_QWORD *)(v44 + 8 * v21);
    ++v15;
    if (!v22)
    {
      v15 = v21 + 1;
      if (v21 + 1 >= v45)
        goto LABEL_35;
      v22 = *(_QWORD *)(v44 + 8 * v15);
      if (!v22)
      {
        v15 = v21 + 2;
        if (v21 + 2 >= v45)
          goto LABEL_35;
        v22 = *(_QWORD *)(v44 + 8 * v15);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v15 << 6);
LABEL_26:
    v24 = *(_QWORD *)(v48 + 72);
    v25 = *(_QWORD *)(v7 + 48) + v24 * v20;
    v26 = v16;
    sub_100145220(v25, (uint64_t)v6, v16);
    Hasher.init(_seed:)(v49, *(_QWORD *)(v9 + 40));
    v27 = type metadata accessor for AccountID(0);
    v28 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
    dispatch thunk of Hashable.hash(into:)(v49, v27, v28);
    v29 = type metadata accessor for URL(0);
    v30 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v49, v29, v30);
    v31 = &v6[*(int *)(v17 + 24)];
    v32 = *(_QWORD *)v31;
    v33 = *((_QWORD *)v31 + 1);
    swift_bridgeObjectRetain(v33);
    String.hash(into:)(v49, v32, v33);
    swift_bridgeObjectRelease(v33);
    v34 = Hasher._finalize()();
    v35 = -1 << *(_BYTE *)(v9 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    if (((-1 << v36) & ~*(_QWORD *)(v14 + 8 * (v36 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v36) & ~*(_QWORD *)(v14 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      v16 = v26;
    }
    else
    {
      v38 = 0;
      v39 = (unint64_t)(63 - v35) >> 6;
      v16 = v26;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v40 = v37 == v39;
        if (v37 == v39)
          v37 = 0;
        v38 |= v40;
        v41 = *(_QWORD *)(v14 + 8 * v37);
      }
      while (v41 == -1);
      v18 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    sub_10013B170((uint64_t)v6, *(_QWORD *)(v9 + 48) + v18 * v24, v16);
    ++*(_QWORD *)(v9 + 16);
    v7 = v46;
  }
  v23 = v21 + 3;
  if (v23 >= v45)
  {
LABEL_35:
    swift_release_n(v7, 2);
    goto LABEL_37;
  }
  v22 = *(_QWORD *)(v44 + 8 * v23);
  if (v22)
  {
    v15 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v15 >= v45)
      goto LABEL_35;
    v22 = *(_QWORD *)(v44 + 8 * v15);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_1003099C0(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  id v6;
  char v7;
  uint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v2 = v1;
  v4 = *v1;
  if ((*v1 & 0xC000000000000001) != 0)
  {
    if (v4 < 0)
      v5 = *v1;
    else
      v5 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v6 = a1;
    v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      v8 = sub_10030A274(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }
LABEL_15:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  v9 = *(_QWORD *)(v4 + 40);
  swift_bridgeObjectRetain(v4);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v4 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    goto LABEL_15;
  type metadata accessor for UIAppIntentInteraction(0);
  v13 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
  v14 = static NSObject.== infix(_:_:)(v13);

  if ((v14 & 1) == 0)
  {
    v15 = ~v11;
    do
    {
      v12 = (v12 + 1) & v15;
      if (((*(_QWORD *)(v4 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_15;
      v16 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v12);
      v17 = static NSObject.== infix(_:_:)(v16);

    }
    while ((v17 & 1) == 0);
  }
  swift_bridgeObjectRelease(v4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v19 = *v2;
  v22 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003083A0(&qword_1005CF6D8);
    v19 = v22;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v19 + 48) + 8 * v12);
  sub_10030A83C(v12);
  v20 = *v2;
  *v2 = v22;
  swift_bridgeObjectRelease(v20);
  return v8;
}

uint64_t sub_100309B8C(void *a1)
{
  return sub_100309BA8(a1, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr, (uint64_t *)&unk_1005D8A70);
}

uint64_t sub_100309BA8(void *a1, unint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v4;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;

  v8 = v4;
  v10 = *v4;
  if ((*v4 & 0xC000000000000001) != 0)
  {
    if (v10 < 0)
      v11 = *v4;
    else
      v11 = v10 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v10);
    v12 = a1;
    v13 = __CocoaSet.contains(_:)();

    if ((v13 & 1) != 0)
    {
      v14 = sub_10030A40C(v11, (uint64_t)v12, a4, a2, a3);
      swift_bridgeObjectRelease(v10);
      return v14;
    }
LABEL_15:
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  v15 = *(_QWORD *)(v10 + 40);
  swift_bridgeObjectRetain(v10);
  v16 = NSObject._rawHashValue(seed:)(v15);
  v17 = -1 << *(_BYTE *)(v10 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
    goto LABEL_15;
  sub_1000163BC(0, a2, a3);
  v19 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
  v20 = static NSObject.== infix(_:_:)(v19);

  if ((v20 & 1) == 0)
  {
    v21 = ~v17;
    do
    {
      v18 = (v18 + 1) & v21;
      if (((*(_QWORD *)(v10 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_15;
      v22 = *(id *)(*(_QWORD *)(v10 + 48) + 8 * v18);
      v23 = static NSObject.== infix(_:_:)(v22);

    }
    while ((v23 & 1) == 0);
  }
  swift_bridgeObjectRelease(v10);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v25 = *v8;
  v28 = *v8;
  *v8 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1003083A0(a4);
    v25 = v28;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v25 + 48) + 8 * v18);
  sub_10030A83C(v18);
  v26 = *v8;
  *v8 = v28;
  swift_bridgeObjectRelease(v26);
  return v14;
}

uint64_t sub_100309D90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for Participant(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100019C6C(&qword_1005D89D8, v12, (uint64_t)&protocol conformance descriptor for Participant);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100019C6C(&qword_1005D89E8, (uint64_t (*)(uint64_t))&type metadata accessor for Participant, (uint64_t)&protocol conformance descriptor for Participant);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100307C20((uint64_t (*)(_QWORD))&type metadata accessor for Participant, &qword_1005D89D0);
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_10030A5B4(v16, (uint64_t (*)(uint64_t))&type metadata accessor for Participant, &qword_1005D89D8, (uint64_t)&protocol conformance descriptor for Participant);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_100309FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100019C6C(&qword_1005D8980, v12, (uint64_t)&protocol conformance descriptor for IndexPath);
  swift_bridgeObjectRetain(v10);
  v33 = a1;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v31 = v3;
    v32 = a2;
    v17 = ~v15;
    v18 = *(_QWORD *)(v7 + 72);
    v34 = v7;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v20 = v18 * v16;
      v19(v9, *(_QWORD *)(v10 + 48) + v18 * v16, v6);
      v21 = sub_100019C6C((unint64_t *)&unk_1005D8988, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v33, v6, v21);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        break;
      v16 = (v16 + 1) & v17;
      if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v10);
        v23 = 1;
        a2 = v32;
        v7 = v34;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
      }
    }
    swift_bridgeObjectRelease(v10);
    v24 = v31;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    v26 = *v24;
    v35 = *v24;
    *v24 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100307C20((uint64_t (*)(_QWORD))&type metadata accessor for IndexPath, &qword_1005D8998);
      v26 = v35;
    }
    v27 = *(_QWORD *)(v26 + 48) + v20;
    v7 = v34;
    a2 = v32;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v34 + 32))(v32, v27, v6);
    sub_10030A5B4(v16, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_1005D8980, (uint64_t)&protocol conformance descriptor for IndexPath);
    v28 = *v24;
    *v24 = v35;
    swift_bridgeObjectRelease(v28);
    v23 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v10);
    v23 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1, v6);
}

uint64_t sub_10030A258(void *a1)
{
  return sub_100309BA8(a1, (unint64_t *)&qword_1005D8AB0, ICNoteEditorViewController_ptr, (uint64_t *)&unk_1005CF890);
}

uint64_t sub_10030A274(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t result;
  Swift::Int v19;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  swift_unknownObjectRetain(a1);
  v8 = sub_100304484(v7, v6, &qword_1005CF6D8, (uint64_t (*)(_QWORD))&type metadata accessor for UIAppIntentInteraction);
  v19 = v8;
  v9 = *(_QWORD *)(v8 + 40);
  swift_retain(v8);
  v10 = NSObject._rawHashValue(seed:)(v9);
  v11 = -1 << *(_BYTE *)(v8 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    type metadata accessor for UIAppIntentInteraction(0);
    v13 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
    v14 = static NSObject.== infix(_:_:)(v13);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v12);
      sub_10030A83C(v12);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *v3 = v19;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v15 = ~v11;
      while (1)
      {
        v12 = (v12 + 1) & v15;
        if (((*(_QWORD *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
          break;
        v16 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v12);
        v17 = static NSObject.== infix(_:_:)(v16);

        if ((v17 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

uint64_t sub_10030A40C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, _QWORD *a5)
{
  Swift::Int *v5;
  Swift::Int *v9;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t result;
  Swift::Int v25;

  v9 = v5;
  swift_bridgeObjectRelease(*v9);
  v12 = __CocoaSet.count.getter(a1);
  swift_unknownObjectRetain(a1);
  v14 = sub_100304678(v13, v12, a3, a4, a5);
  v25 = v14;
  v15 = *(_QWORD *)(v14 + 40);
  swift_retain(v14);
  v16 = NSObject._rawHashValue(seed:)(v15);
  v17 = -1 << *(_BYTE *)(v14 + 32);
  v18 = v16 & ~v17;
  if (((*(_QWORD *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    sub_1000163BC(0, a4, a5);
    v19 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v18);
    v20 = static NSObject.== infix(_:_:)(v19);

    if ((v20 & 1) != 0)
    {
LABEL_6:
      swift_release(v14);
      v14 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 8 * v18);
      sub_10030A83C(v18);
      if ((static NSObject.== infix(_:_:)(a2) & 1) != 0)
      {
        *v9 = v25;
        return v14;
      }
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        v18 = (v18 + 1) & v21;
        if (((*(_QWORD *)(v14 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v14 + 48) + 8 * v18);
        v23 = static NSObject.== infix(_:_:)(v22);

        if ((v23 & 1) != 0)
          goto LABEL_6;
      }
    }
    swift_release(v14);
    __break(1u);
  }
  result = swift_release(v14);
  __break(1u);
  return result;
}

uint64_t sub_10030A5B4(int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  uint64_t (*v38)(uint64_t);
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;

  v39 = a3;
  v40 = a4;
  v38 = a2;
  v6 = a2(0);
  v41 = *(_QWORD *)(v6 - 8);
  result = __chkstk_darwin(v6);
  v9 = (char *)&v34 - v8;
  v10 = *v4;
  v11 = *v4 + 56;
  v12 = -1 << *(_BYTE *)(*v4 + 32);
  v13 = (a1 + 1) & ~v12;
  if (((1 << v13) & *(_QWORD *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    v35 = v4;
    v14 = ~v12;
    swift_retain(v10);
    v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    if ((*(_QWORD *)(v11 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
    {
      v37 = (v15 + 1) & v14;
      v16 = *(_QWORD *)(v41 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        v17 = v11;
        v18 = v16;
        v19 = v16 * v13;
        v36(v9, *(_QWORD *)(v10 + 48) + v16 * v13, v6);
        v20 = *(_QWORD *)(v10 + 40);
        v21 = sub_100019C6C(v39, v38, v40);
        v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v6, v21);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v6);
        v23 = v22 & v14;
        if (a1 >= (uint64_t)v37)
        {
          if (v23 >= v37 && a1 >= (uint64_t)v23)
          {
LABEL_16:
            v26 = *(_QWORD *)(v10 + 48);
            v16 = v18;
            v27 = v18 * a1;
            v28 = v26 + v18 * a1;
            v29 = v26 + v19;
            if (v18 * a1 < v19 || v28 >= v29 + v18)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v29);
              a1 = v13;
            }
            else
            {
              a1 = v13;
              if (v27 != v19)
              {
                swift_arrayInitWithTakeBackToFront(v28, v29);
                a1 = v13;
              }
            }
            goto LABEL_5;
          }
        }
        else if (v23 >= v37 || a1 >= (uint64_t)v23)
        {
          goto LABEL_16;
        }
        v16 = v18;
LABEL_5:
        v13 = (v13 + 1) & v14;
        v11 = v17;
      }
      while (((*(_QWORD *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
    }
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
    result = swift_release(v10);
    v4 = v35;
  }
  else
  {
    *(_QWORD *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a1) - 1;
  }
  v30 = *v4;
  v31 = *(_QWORD *)(*v4 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v30 + 16) = v33;
    ++*(_DWORD *)(v30 + 36);
  }
  return result;
}

unint64_t sub_10030A83C(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 40);
        v11 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(v3 + 48);
            v17 = (_QWORD *)(v16 + 8 * v2);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v2 != v6 || (v2 = v6, v17 >= v18 + 1))
            {
              *v17 = *v18;
              v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v19 = *(_QWORD *)(v3 + 16);
  v20 = __OFSUB__(v19, 1);
  v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_10030A9DC(unint64_t result)
{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(v3);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(v3 + 48);
        v11 = (_QWORD *)(v10 + 8 * v6);
        v12 = static Hasher._hash(seed:_:)(*(_QWORD *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            v15 = (_QWORD *)(v10 + 8 * v2);
            if (v2 != v6 || (v2 = v6, v15 >= v11 + 1))
            {
              *v15 = *v11;
              v2 = v6;
            }
          }
        }
        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v16 = *(_QWORD *)(v3 + 16);
  v17 = __OFSUB__(v16, 1);
  v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

Swift::Int sub_10030AB60(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  unint64_t *v29;

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100012E18((uint64_t *)&unk_1005D8A70);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v29 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v29[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v29[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = v9[5];
    v19 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v14);
    result = NSObject._rawHashValue(seed:)(v18);
    v20 = -1 << *((_BYTE *)v9 + 32);
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(_QWORD *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v29[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v29[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10030ADBC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10030ADE0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))&type metadata accessor for Participant, &qword_1005D89D0, &qword_1005D89D8, (uint64_t)&protocol conformance descriptor for Participant);
}

uint64_t sub_10030ADE0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t *a6, unint64_t *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  unint64_t *v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a7;
  v44 = a8;
  v42 = a5;
  v13 = a5(0);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v15 = (char *)&v40 - v14;
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }
  if (*(_QWORD *)(a4 + 16) == a3)
    return a4;
  sub_100012E18(a6);
  result = static _SetStorage.allocate(capacity:)(a3);
  v16 = result;
  v40 = a1;
  v41 = a2;
  if (a2 < 1)
    v18 = 0;
  else
    v18 = *a1;
  v19 = 0;
  v20 = result + 56;
  while (1)
  {
    if (v18)
    {
      v21 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v22 = v21 | (v19 << 6);
    }
    else
    {
      v23 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_40;
      if (v23 >= v41)
      {
LABEL_37:
        swift_release(a4);
        return v16;
      }
      v24 = v40[v23];
      ++v19;
      if (!v24)
      {
        v19 = v23 + 1;
        if (v23 + 1 >= v41)
          goto LABEL_37;
        v24 = v40[v19];
        if (!v24)
        {
          v19 = v23 + 2;
          if (v23 + 2 >= v41)
            goto LABEL_37;
          v24 = v40[v19];
          if (!v24)
          {
            v25 = v23 + 3;
            if (v25 >= v41)
              goto LABEL_37;
            v24 = v40[v25];
            if (!v24)
            {
              while (1)
              {
                v19 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_41;
                if (v19 >= v41)
                  goto LABEL_37;
                v24 = v40[v19];
                ++v25;
                if (v24)
                  goto LABEL_24;
              }
            }
            v19 = v25;
          }
        }
      }
LABEL_24:
      v18 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v19 << 6);
    }
    v26 = a4;
    v27 = *(_QWORD *)(a4 + 48);
    v28 = *(_QWORD *)(v45 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v15, v27 + v28 * v22, v13);
    v29 = *(_QWORD *)(v16 + 40);
    v30 = sub_100019C6C(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v29, v13, v30);
    v31 = -1 << *(_BYTE *)(v16 + 32);
    v32 = result & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6))) != 0)
    {
      v34 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v20 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v37 = v33 == v36;
        if (v33 == v36)
          v33 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v33);
      }
      while (v38 == -1);
      v34 = __clz(__rbit64(~v38)) + (v33 << 6);
    }
    *(_QWORD *)(v20 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v45 + 32))(*(_QWORD *)(v16 + 48) + v34 * v28, v15, v13);
    ++*(_QWORD *)(v16 + 16);
    if (__OFSUB__(a3--, 1))
      break;
    a4 = v26;
    if (!a3)
      goto LABEL_37;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_10030B0D0(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_10030B250((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a2, v3);
    swift_release(a2);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v9 = sub_10030B250((unint64_t *)v10, v7, a2, v3);
    swift_release(a2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v9;
}

uint64_t sub_10030B250(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(unint64_t, unint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t (*v45)(char *, uint64_t);
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t i;
  int64_t v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v72 = a2;
  v75 = a1;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v72 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v72 - v15;
  result = __chkstk_darwin(v14);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = *(_QWORD *)(a4 + 16);
  v81 = a4;
  v82 = a3;
  v83 = v7;
  if (v20 >= v19)
  {
    v77 = 0;
    v46 = 0;
    v47 = *(_QWORD *)(a3 + 56);
    v73 = a3 + 56;
    v48 = 1 << *(_BYTE *)(a3 + 32);
    if (v48 < 64)
      v49 = ~(-1 << v48);
    else
      v49 = -1;
    v50 = v49 & v47;
    v74 = (unint64_t)(v48 + 63) >> 6;
    v80 = a4 + 56;
    if (v50)
      goto LABEL_38;
LABEL_39:
    v52 = v46 + 1;
    if (__OFADD__(v46, 1))
    {
LABEL_63:
      __break(1u);
      goto LABEL_64;
    }
    if (v52 < v74)
    {
      v53 = *(_QWORD *)(v73 + 8 * v52);
      v54 = v46 + 1;
      if (v53)
        goto LABEL_52;
      v54 = v46 + 2;
      if (v46 + 2 < v74)
      {
        v53 = *(_QWORD *)(v73 + 8 * v54);
        if (v53)
          goto LABEL_52;
        v54 = v46 + 3;
        if (v46 + 3 < v74)
        {
          v53 = *(_QWORD *)(v73 + 8 * v54);
          if (v53)
            goto LABEL_52;
          v55 = v46 + 4;
          if (v46 + 4 < v74)
          {
            v53 = *(_QWORD *)(v73 + 8 * v55);
            if (!v53)
            {
              while (1)
              {
                v54 = v55 + 1;
                if (__OFADD__(v55, 1))
                  goto LABEL_67;
                if (v54 >= v74)
                  goto LABEL_61;
                v53 = *(_QWORD *)(v73 + 8 * v54);
                ++v55;
                if (v53)
                  goto LABEL_52;
              }
            }
            v54 = v46 + 4;
LABEL_52:
            v78 = (v53 - 1) & v53;
            v79 = v54;
            for (i = __clz(__rbit64(v53)) + (v54 << 6); ; i = __clz(__rbit64(v50)) | (v46 << 6))
            {
              v56 = *(_QWORD *)(a3 + 48);
              v57 = *(_QWORD *)(v7 + 72);
              v76 = i;
              v58 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
              v58(v10, v56 + v57 * i, v6);
              v59 = *(_QWORD *)(a4 + 40);
              v60 = sub_100019C6C(&qword_1005D8980, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
              v61 = v7;
              v62 = v10;
              v63 = dispatch thunk of Hashable._rawHashValue(seed:)(v59, v6, v60);
              v64 = -1 << *(_BYTE *)(a4 + 32);
              v65 = v63 & ~v64;
              if (((*(_QWORD *)(v80 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) != 0)
              {
                v66 = ~v64;
                while (1)
                {
                  v58(v13, *(_QWORD *)(v81 + 48) + v65 * v57, v6);
                  v67 = sub_100019C6C((unint64_t *)&unk_1005D8988, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
                  v68 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v62, v6, v67);
                  v69 = *(void (**)(char *, uint64_t))(v83 + 8);
                  v69(v13, v6);
                  if ((v68 & 1) != 0)
                    break;
                  v65 = (v65 + 1) & v66;
                  if (((*(_QWORD *)(v80 + ((v65 >> 3) & 0xFFFFFFFFFFFFF8)) >> v65) & 1) == 0)
                    goto LABEL_59;
                }
                v10 = v62;
                result = ((uint64_t (*)(char *, uint64_t))v69)(v62, v6);
                *(unint64_t *)((char *)v75 + ((v76 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v76;
                v50 = v78;
                v26 = __OFADD__(v77++, 1);
                a4 = v81;
                a3 = v82;
                v7 = v83;
                v46 = v79;
                if (v26)
                  goto LABEL_65;
                if (!v78)
                  goto LABEL_39;
              }
              else
              {
                v69 = *(void (**)(char *, uint64_t))(v61 + 8);
LABEL_59:
                v10 = v62;
                result = ((uint64_t (*)(char *, uint64_t))v69)(v62, v6);
                a4 = v81;
                a3 = v82;
                v7 = v83;
                v50 = v78;
                v46 = v79;
                if (!v78)
                  goto LABEL_39;
              }
LABEL_38:
              v78 = (v50 - 1) & v50;
              v79 = v46;
            }
          }
        }
      }
    }
LABEL_61:
    v70 = v72;
    v71 = v77;
    swift_retain(a3);
    return sub_10030ADE0(v75, v70, v71, a3, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, &qword_1005D8998, &qword_1005D8980, (uint64_t)&protocol conformance descriptor for IndexPath);
  }
  v76 = (unint64_t)&v72 - v18;
  v77 = 0;
  v21 = 0;
  v22 = *(_QWORD *)(a4 + 56);
  v73 = a4 + 56;
  v23 = 1 << *(_BYTE *)(a4 + 32);
  if (v23 < 64)
    v24 = ~(-1 << v23);
  else
    v24 = -1;
  v25 = v24 & v22;
  v74 = (unint64_t)(v23 + 63) >> 6;
  v80 = a3 + 56;
  do
  {
    v27 = v76;
    if (v25)
    {
LABEL_8:
      v78 = (v25 - 1) & v25;
      v79 = v21;
      v28 = __clz(__rbit64(v25)) | (v21 << 6);
      goto LABEL_23;
    }
    while (1)
    {
      v29 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        goto LABEL_63;
      }
      if (v29 >= v74)
        goto LABEL_61;
      v30 = *(_QWORD *)(v73 + 8 * v29);
      v31 = v21 + 1;
      if (!v30)
      {
        v31 = v21 + 2;
        if (v21 + 2 >= v74)
          goto LABEL_61;
        v30 = *(_QWORD *)(v73 + 8 * v31);
        if (!v30)
        {
          v31 = v21 + 3;
          if (v21 + 3 >= v74)
            goto LABEL_61;
          v30 = *(_QWORD *)(v73 + 8 * v31);
          if (!v30)
          {
            v32 = v21 + 4;
            if (v21 + 4 >= v74)
              goto LABEL_61;
            v30 = *(_QWORD *)(v73 + 8 * v32);
            if (!v30)
            {
              while (1)
              {
                v31 = v32 + 1;
                if (__OFADD__(v32, 1))
                  goto LABEL_66;
                if (v31 >= v74)
                  goto LABEL_61;
                v30 = *(_QWORD *)(v73 + 8 * v31);
                ++v32;
                if (v30)
                  goto LABEL_22;
              }
            }
            v31 = v21 + 4;
          }
        }
      }
LABEL_22:
      v78 = (v30 - 1) & v30;
      v79 = v31;
      v28 = __clz(__rbit64(v30)) + (v31 << 6);
LABEL_23:
      v33 = *(_QWORD *)(v7 + 72);
      v34 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
      v34(v27, *(_QWORD *)(a4 + 48) + v33 * v28, v6);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 32))(v16, v27, v6);
      v35 = *(_QWORD *)(v82 + 40);
      v36 = sub_100019C6C(&qword_1005D8980, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v37 = v7;
      v38 = v16;
      v39 = dispatch thunk of Hashable._rawHashValue(seed:)(v35, v6, v36);
      a3 = v82;
      v40 = -1 << *(_BYTE *)(v82 + 32);
      v41 = v39 & ~v40;
      if (((*(_QWORD *)(v80 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) != 0)
        break;
      v45 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
LABEL_29:
      v16 = v38;
      result = v45(v38, v6);
      a4 = v81;
      v7 = v83;
      v27 = v76;
      v25 = v78;
      v21 = v79;
      if (v78)
        goto LABEL_8;
    }
    v42 = ~v40;
    while (1)
    {
      v34((unint64_t)v13, *(_QWORD *)(a3 + 48) + v41 * v33, v6);
      v43 = sub_100019C6C((unint64_t *)&unk_1005D8988, (uint64_t (*)(uint64_t))&type metadata accessor for IndexPath, (uint64_t)&protocol conformance descriptor for IndexPath);
      v44 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v38, v6, v43);
      v45 = *(uint64_t (**)(char *, uint64_t))(v83 + 8);
      v45(v13, v6);
      if ((v44 & 1) != 0)
        break;
      v41 = (v41 + 1) & v42;
      a3 = v82;
      if (((*(_QWORD *)(v80 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8)) >> v41) & 1) == 0)
        goto LABEL_29;
    }
    v16 = v38;
    result = v45(v38, v6);
    *(unint64_t *)((char *)v75 + ((v41 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v41;
    v25 = v78;
    v26 = __OFADD__(v77++, 1);
    a4 = v81;
    a3 = v82;
    v7 = v83;
    v21 = v79;
  }
  while (!v26);
LABEL_64:
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
  return result;
}

uint64_t sub_10030B928(unint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5, char a6)
{
  uint64_t result;

  result = 0;
  if (a4 == a1
    && ((a1 >> 8) & 1) == ((a4 >> 8) & 1)
    && ((a1 >> 16) & 1) == ((a4 >> 16) & 1)
    && ((a1 >> 24) & 1) == ((a4 >> 24) & 1)
    && (BYTE4(a1) & 1) == (BYTE4(a4) & 1)
    && ((a1 >> 40) & 1) == ((a4 >> 40) & 1))
  {
    if ((a3 & 1) != 0)
    {
      if ((a6 & 1) != 0)
        return 1;
    }
    else if ((a6 & 1) == 0 && a2 == a5)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

_QWORD *sub_10030B9B8(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100137178(0, v1, 0);
    v3 = a1 + 32;
    do
    {
      sub_1002FF494(v3);
      v5 = v4;
      v7 = _swiftEmptyArrayStorage[2];
      v6 = _swiftEmptyArrayStorage[3];
      if (v7 >= v6 >> 1)
        sub_100137178(v6 > 1, v7 + 1, 1);
      _swiftEmptyArrayStorage[2] = v7 + 1;
      _swiftEmptyArrayStorage[v7 + 4] = v5;
      v3 += 32;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

_QWORD *sub_10030BA94(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v15))
  {
    v5 = 4;
    while (1)
    {
      v6 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, a1)
         : *(id *)(a1 + 8 * v5);
      v7 = v6;
      v8 = v5 - 3;
      if (__OFADD__(v5 - 4, 1))
        break;
      v9 = objc_msgSend(a2, "objectWithID:", v6);
      v10 = objc_opt_self(ICNote);
      v11 = swift_dynamicCastObjCClass(v9, v10);

      if (v11)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
        specialized Array._endMutation()(v14);
      }
      else
      {

      }
      ++v5;
      if (v8 == v4)
        goto LABEL_20;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v15 = a1;
    else
      v15 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_20:
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

void *sub_10030BC3C(unint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char **v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;

  v6 = a1;
  if (a1 >> 62)
    goto LABEL_23;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v7)
  {
    do
    {
      v30 = v6;
      v8 = v6 & 0xC000000000000001;
      v9 = 4;
      v10 = &selRef_lastRunNotesVersionKey;
      while (1)
      {
        v11 = v8 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9 - 4, v6) : *(id *)(v6 + 8 * v9);
        v12 = v9 - 3;
        if (__OFADD__(v9 - 4, 1))
          break;
        v32 = v11;
        v13 = objc_msgSend(a2, v10[405], v11);
        v14 = objc_opt_self(ICHashtag);
        v15 = (void *)swift_dynamicCastObjCClass(v13, v14);
        if (v15 && (v16 = objc_msgSend(v15, "standardizedContent")) != 0)
        {
          v17 = v16;
          v18 = v8;
          v19 = v7;
          v20 = a2;
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
          v23 = v22;

          if (v21 == a3 && v23 == a4)
          {
            swift_bridgeObjectRelease(v30);
            swift_bridgeObjectRelease(a4);

            return v32;
          }
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, a3, a4, 0);
          swift_bridgeObjectRelease(v23);

          if ((v25 & 1) != 0)
          {
            swift_bridgeObjectRelease(v30);
            return v32;
          }
          v13 = v32;
          a2 = v20;
          v7 = v19;
          v6 = v30;
          v8 = v18;
          v10 = &selRef_lastRunNotesVersionKey;
        }
        else
        {

        }
        ++v9;
        if (v12 == v7)
          goto LABEL_27;
      }
      __break(1u);
LABEL_23:
      v27 = a4;
      if (v6 < 0)
        v28 = v6;
      else
        v28 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v6);
      v29 = _CocoaArrayWrapper.endIndex.getter(v28);
      a4 = v27;
      v7 = v29;
    }
    while (v29);
  }
LABEL_27:
  swift_bridgeObjectRelease(v6);
  return 0;
}

uint64_t sub_10030BE4C(uint64_t a1, int a2)
{
  uint64_t v2;
  double v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class isa;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  char **v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  double v29;
  double v30;
  id v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  Class v44;
  id v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;

  if (a2 != 1)
  {
    v3 = 16.0;
    if ((a2 & 0x1000000) == 0)
    {
      if (objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision"))
        v3 = 12.0;
      else
        v3 = 0.0;
    }
    v4 = (void *)objc_opt_self(NSCollectionLayoutDimension);
    v5 = objc_msgSend(v4, "estimatedDimension:", 48.0);
    v6 = objc_msgSend(v4, "estimatedDimension:", 34.0);
    v7 = (void *)objc_opt_self(NSCollectionLayoutSize);
    v8 = objc_msgSend(v7, "sizeWithWidthDimension:heightDimension:", v5, v6);

    v9 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutItem), "itemWithLayoutSize:", v8);
    v10 = objc_msgSend(v4, "fractionalWidthDimension:", 1.0);
    v11 = objc_msgSend(v4, "estimatedDimension:", 34.0);
    v12 = objc_msgSend(v7, "sizeWithWidthDimension:heightDimension:", v10, v11);

    v13 = (void *)objc_opt_self(NSCollectionLayoutGroup);
    v14 = sub_100012E18(&qword_1005CF6F0);
    v15 = swift_allocObject(v14, 40, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100456F30;
    *(_QWORD *)(v15 + 32) = v9;
    v48 = v15;
    specialized Array._endMutation()(v15);
    sub_1000163BC(0, (unint64_t *)&qword_1005D89B8, NSCollectionLayoutItem_ptr);
    v16 = v9;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v48);
    v18 = objc_msgSend(v13, "horizontalGroupWithLayoutSize:subitems:", v12, isa);

    v19 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSpacing), "fixedSpacing:", 8.0);
    objc_msgSend(v18, "setInterItemSpacing:", v19);

    v20 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSection), "sectionWithGroup:", v18);
    objc_msgSend(v20, "setContentInsets:", v3, v3, v3, v3);
    objc_msgSend(v20, "setInterGroupSpacing:", 8.0);
    v21 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCompositionalLayout), "initWithSection:", v20);
    goto LABEL_20;
  }
  v2 = a1;
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRetain(a1);
  }
  else
  {
    v22 = sub_100012E18((uint64_t *)&unk_1005D89C0);
    v2 = swift_allocObject(v22, 40, 7);
    *(_OWORD *)(v2 + 16) = xmmword_100451C20;
    *(_QWORD *)(v2 + 32) = 0;
  }
  v23 = (void *)objc_opt_self(NSCollectionLayoutDimension);
  v24 = &selRef_copyNoteHTMLToPasteboard;
  v8 = objc_msgSend(v23, "estimatedDimension:", 34.0);
  v25 = *(_QWORD *)(v2 + 16);
  if (v25)
  {
    v26 = (void *)objc_opt_self(NSCollectionLayoutSize);
    v27 = (void *)objc_opt_self(NSCollectionLayoutItem);
    swift_bridgeObjectRetain(v2);
    v28 = 0;
    v29 = 0.0;
    do
    {
      v30 = *(double *)(v2 + 8 * v28 + 32);
      v31 = objc_msgSend(v23, "absoluteDimension:", v30);
      v32 = v8;
      v33 = objc_msgSend(v26, "sizeWithWidthDimension:heightDimension:", v31, v8);
      v34 = objc_msgSend(v27, "itemWithLayoutSize:", v33);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
      v37 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v36 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v37 >= v36 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
      v29 = v29 + v30;
      ++v28;
      v38 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
      specialized Array._endMutation()(v38);
      v8 = v32;
    }
    while (v25 != v28);
    swift_bridgeObjectRelease(v2);
    v24 = &selRef_copyNoteHTMLToPasteboard;
  }
  else
  {
    v29 = 0.0;
  }
  result = swift_bridgeObjectRelease(v2);
  if ((unint64_t)_swiftEmptyArrayStorage >> 62)
  {
    if ((uint64_t)_swiftEmptyArrayStorage < 0)
      v46 = _swiftEmptyArrayStorage;
    else
      v46 = (_QWORD *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    v47 = _CocoaArrayWrapper.endIndex.getter(v46);
    result = swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v41 = v47 - 1;
    if (!__OFSUB__(v47, 1))
      goto LABEL_19;
  }
  else
  {
    v40 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8) + 0x10);
    v41 = v40 - 1;
    if (!__OFSUB__(v40, 1))
    {
LABEL_19:
      v16 = objc_msgSend(v23, "absoluteDimension:", v29 + (double)v41 * 8.0);
      v18 = objc_msgSend(v23, v24[449], 46.0);
      v42 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSize), "sizeWithWidthDimension:heightDimension:", v16, v18);
      v43 = (void *)objc_opt_self(NSCollectionLayoutGroup);
      sub_1000163BC(0, (unint64_t *)&qword_1005D89B8, NSCollectionLayoutItem_ptr);
      v44 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      v12 = objc_msgSend(v43, "horizontalGroupWithLayoutSize:subitems:", v42, v44);

      v45 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSpacing), "fixedSpacing:", 8.0);
      objc_msgSend(v12, "setInterItemSpacing:", v45);

      v20 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSection), "sectionWithGroup:", v12);
      objc_msgSend(v20, "setContentInsets:", 6.0, 20.0, 6.0, 20.0);
      objc_msgSend(v20, "setOrthogonalScrollingBehavior:", 1);
      v21 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCompositionalLayout), "initWithSection:", v20);

LABEL_20:
      return (uint64_t)v21;
    }
  }
  __break(1u);
  return result;
}

void sub_10030C508()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  void *v4;
  Class isa;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  _OWORD v19[2];
  _BYTE v20[24];
  uint64_t v21;
  objc_super v22;

  v1 = v0;
  v22.receiver = v0;
  v22.super_class = (Class)swift_getObjectType(v0);
  if ((objc_msgSendSuper2(&v22, "isEditing") & 1) == 0)
  {
    v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
    if (v2)
    {
      v3 = objc_msgSend(v2, "collectionViewDiffableDataSource");
      if (v3)
      {
        v4 = v3;
        isa = IndexPath._bridgeToObjectiveC()().super.isa;
        v6 = objc_msgSend(v4, "itemIdentifierForIndexPath:", isa);

        if (v6)
        {
          _bridgeAnyObjectToAny(_:)(v19, v6);
          swift_unknownObjectRelease(v6, v7);
        }
        else
        {
          memset(v19, 0, sizeof(v19));
        }
        sub_10014BD1C((uint64_t)v19, (uint64_t)v20, &qword_1005CF190);
        if (v21)
        {
          v8 = sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
          if ((swift_dynamicCast(&v18, v20, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
          {
            v9 = v18;
            v10 = objc_opt_self(ICTagNewTagItemIdentifier);
            if (swift_dynamicCastObjCClass(v9, v10))
            {
              sub_100300874();
            }
            else
            {
              v11 = objc_opt_self(ICTagAllTagsItemIdentifier);
              if (swift_dynamicCastObjCClass(v9, v11))
              {
                objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection], "setMode:", 1);
              }
              else
              {
                v12 = objc_opt_self(NSManagedObjectID);
                v13 = swift_dynamicCastObjCClass(v9, v12);
                if (v13)
                {
                  v14 = v13;
                  v15 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection;
                  v16 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection];
                  v17 = v9;
                  objc_msgSend(v16, "setMode:", 0);
                  objc_msgSend(*(id *)&v1[v15], "addObjectID:toExcluded:", v14, 0);

                }
              }
            }
            sub_1002FC610(0, 0, 1);

          }
          else
          {

          }
        }
        else
        {

          sub_100012DDC((uint64_t)v20, &qword_1005CF190);
        }
      }
    }
  }
}

uint64_t sub_10030C744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  char v10;
  _BYTE v13[24];

  v3 = type metadata accessor for UICellConfigurationState(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = (_QWORD *)(v2 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_accessibilityProvider);
  swift_beginAccess(v2 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_accessibilityProvider, v13, 0, 0);
  v8 = v7[3];
  if (v8)
  {
    v9 = objc_msgSend((id)*sub_10012D19C(v7, v8), "_bridgedConfigurationState");
    static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)(v9);

    v10 = UICellConfigurationState.isEditing.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

void sub_10030C82C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1 != (void *)1)
  {

    swift_bridgeObjectRelease(a3);
  }
}

uint64_t sub_10030C870()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10030C894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002FF274(a1, a2, v2);
}

id sub_10030C8A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1002FFCEC(a1, v1);
}

uint64_t sub_10030C8A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10030C91C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for IndexPath(0);
  return sub_1002FFFB0(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_10030C984()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10030C9A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10030C9D4()
{
  uint64_t v0;

  return sub_1002FFBDC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD **)(v0 + 32));
}

uint64_t sub_10030C9E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030C9F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  if (*(_QWORD *)(v0 + 72))
    swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10030CA48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10030CA6C(uint64_t a1, void *a2)
{
  uint64_t v2;

  sub_100300A3C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10030CA74()
{
  char *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  Class v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v29;
  _OWORD v30[2];
  _BYTE v31[24];
  uint64_t v32;
  objc_super v33;

  v1 = v0;
  v33.receiver = v0;
  v33.super_class = (Class)swift_getObjectType(v0);
  if ((objc_msgSendSuper2(&v33, "isEditing") & 1) != 0)
    return 0;
  v3 = &v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration];
  if (v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_configuration + 4] == 1)
  {
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v5 = objc_msgSend(v0, "cellForItemAtIndexPath:", isa);

    if (v5)
    {
      v6 = type metadata accessor for TagCell();
      v7 = swift_dynamicCastClass(v5, v6);
      if (v7
        && (v8 = v7, (v9 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource]) != 0)
        && (v10 = objc_msgSend(v9, "collectionViewDiffableDataSource")) != 0)
      {
        v11 = v10;
        v12 = IndexPath._bridgeToObjectiveC()().super.isa;
        v13 = objc_msgSend(v11, "itemIdentifierForIndexPath:", v12);

        if (v13)
        {
          _bridgeAnyObjectToAny(_:)(v30, v13);
          swift_unknownObjectRelease(v13, v14);
        }
        else
        {
          memset(v30, 0, sizeof(v30));
        }
        sub_10014BD1C((uint64_t)v30, (uint64_t)v31, &qword_1005CF190);
        if (v32)
        {
          v16 = sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
          if ((swift_dynamicCast(&v29, v31, (char *)&type metadata for Any + 8, v16, 6) & 1) != 0)
          {
            v17 = v29;
            v18 = objc_msgSend((id)objc_opt_self(ICTagAllTagsItemIdentifier), "sharedItemIdentifier");
            v19 = static NSObject.== infix(_:_:)(v17);

            if ((v19 & 1) != 0)
            {
              if (*(_BYTE *)(v8 + OBJC_IVAR___ICTagCell_isExcluded) != 1)
              {
                objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection], "setMode:", 2);
                goto LABEL_31;
              }
              if (*v3 == 1)
              {
                objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection], "setMode:", 1);
LABEL_31:
                sub_1002FC610(0, 0, 1);

LABEL_34:
                return 0;
              }
            }
            v20 = objc_opt_self(NSManagedObjectID);
            v21 = swift_dynamicCastObjCClass(v17, v20);
            if (v21)
            {
              v22 = v21;
              v23 = *(_BYTE *)(v8 + OBJC_IVAR___ICTagCell_isExcluded);
              v24 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection;
              v25 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection];
              v26 = v17;
              if ((v23 & 1) == 0)
              {
                objc_msgSend(v25, "addObjectID:toExcluded:", v22, 1);
                sub_1002FC610(0, 0, 1);

                goto LABEL_34;
              }
              objc_msgSend(v25, "removeObjectID:fromExcluded:", v22, 1);
              if (*v3 == 1
                && ((objc_msgSend(*(id *)&v1[v24], "isEmpty") & 1) != 0
                 || objc_msgSend(*(id *)&v1[v24], "mode") == (id)2))
              {
                v27 = *(id *)&v1[v24];
                v2 = 1;
                objc_msgSend(v27, "setMode:", 1);

                return v2;
              }

            }
            else
            {

            }
            return 1;
          }

        }
        else
        {

          sub_100012DDC((uint64_t)v31, &qword_1005CF190);
        }
      }
      else
      {

      }
    }
  }
  if (*v3 != 1)
    return 1;
  v15 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection;
  if (objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection], "mode") != (id)1)
  {
    if (objc_msgSend(*(id *)&v1[v15], "selectedTagCount") == (id)1)
    {
      objc_msgSend(*(id *)&v1[v15], "setMode:", 1);
      sub_1002FC610(0, 0, 1);
      return 1;
    }
    return 1;
  }
  return 0;
}

void sub_10030CEB8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  Class isa;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  __int128 v13;
  __int128 v14;

  v1 = v0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource);
  if (!v2)
  {
    v13 = 0u;
    v14 = 0u;
LABEL_10:
    sub_100012DDC((uint64_t)&v13, &qword_1005CF190);
    return;
  }
  v3 = objc_msgSend(v2, "collectionViewDiffableDataSource");
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, "itemIdentifierForIndexPath:", isa);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v12, v5);
    swift_unknownObjectRelease(v5, v6);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  sub_10014BD1C((uint64_t)v12, (uint64_t)&v13, &qword_1005CF190);
  if (!*((_QWORD *)&v14 + 1))
    goto LABEL_10;
  v7 = sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
  if ((swift_dynamicCast(v12, &v13, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
  {
    v8 = *(void **)&v12[0];
    v9 = objc_opt_self(ICTagAllTagsItemIdentifier);
    if (swift_dynamicCastObjCClass(v8, v9))
    {
      objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection), "setMode:", 0);
    }
    else
    {
      v10 = objc_opt_self(NSManagedObjectID);
      v11 = swift_dynamicCastObjCClass(v8, v10);
      if (v11)
        objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection), "removeObjectID:fromExcluded:", v11, 0);
    }
    sub_1002FC610(0, 0, 1);

  }
}

id sub_10030D070(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  Class isa;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  void *v25;
  char *v26;
  id v27;
  id v28;
  id v29;
  char *v30;
  id v31;
  __int128 aBlock;
  __int128 v34;
  Class (*v35)(uint64_t);
  char *v36;
  _OWORD v37[2];

  v3 = v2;
  v6 = type metadata accessor for IndexPath(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = 0;
  if (v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_allowsContextualMenu] == 1)
  {
    v10 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
    if (v10)
    {
      v11 = objc_msgSend(v10, "collectionViewDiffableDataSource");
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v13 = objc_msgSend(v11, "itemIdentifierForIndexPath:", isa);

      if (v13)
      {
        _bridgeAnyObjectToAny(_:)(v37, v13);
        swift_unknownObjectRelease(v13, v14);
      }
      else
      {
        memset(v37, 0, sizeof(v37));
      }
      sub_10014BD1C((uint64_t)v37, (uint64_t)&aBlock, &qword_1005CF190);
      if (*((_QWORD *)&v34 + 1))
      {
        v15 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
        if ((swift_dynamicCast(v37, &aBlock, (char *)&type metadata for Any + 8, v15, 6) & 1) != 0)
        {
          v16 = *(void **)&v37[0];
          v17 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_workerContext];
          if (v17)
          {
            v18 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagObjectID];
            *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagObjectID] = *(_QWORD *)&v37[0];
            v19 = v17;
            v20 = v16;

            (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
            v21 = *(unsigned __int8 *)(v7 + 80);
            v22 = (v21 + 48) & ~v21;
            v23 = (char *)swift_allocObject(&unk_100567A78, v22 + v8, v21 | 7);
            *((_QWORD *)v23 + 2) = v19;
            *((_QWORD *)v23 + 3) = v20;
            *((_QWORD *)v23 + 4) = v3;
            *((_QWORD *)v23 + 5) = a1;
            (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v23[v22], (char *)&aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
            v24 = (void *)objc_opt_self(UIContextMenuConfiguration);
            v35 = sub_10030E5A4;
            v36 = v23;
            *(_QWORD *)&aBlock = _NSConcreteStackBlock;
            *((_QWORD *)&aBlock + 1) = 1107296256;
            *(_QWORD *)&v34 = sub_100302C1C;
            *((_QWORD *)&v34 + 1) = &unk_100567A90;
            v25 = _Block_copy(&aBlock);
            v26 = v36;
            v27 = v20;
            swift_retain_n(v23, 2);
            v28 = v19;
            v29 = v27;
            v30 = v3;
            v31 = a1;
            swift_release(v26);
            v9 = objc_msgSend(v24, "configurationWithIdentifier:previewProvider:actionProvider:", v29, 0, v25);

            swift_release(v23);
            _Block_release(v25);

            swift_release(v23);
            return v9;
          }

        }
        return 0;
      }
    }
    else
    {
      aBlock = 0u;
      v34 = 0u;
    }
    sub_100012DDC((uint64_t)&aBlock, &qword_1005CF190);
    return 0;
  }
  return v9;
}

id sub_10030D374(void *a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t *v33;
  __int128 *v34;
  id v35;
  char *v37;
  void *v38;
  id v39;
  Class isa;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  Class v63;
  double v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(char *, unint64_t, uint64_t);
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  Class v71;
  Class v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  id v81;
  id v82;
  uint64_t v83;
  id v84;
  uint64_t *v85;
  unsigned int (*v86)(char *, uint64_t, uint64_t);
  void (*v87)(char *, char *, uint64_t);
  id v88;
  unint64_t v89;
  void (*v90)(char *, unint64_t, uint64_t);
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;

  v3 = v2;
  v6 = sub_100012E18((uint64_t *)&unk_1005D6350);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v79 - v10;
  v12 = type metadata accessor for IndexPath(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v91 = (char *)&v79 - v17;
  v18 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelectionBeforeDrag;
  if (!*(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelectionBeforeDrag])
  {
    v19 = objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection], "copy");
    _bridgeAnyObjectToAny(_:)(&v94, v19);
    swift_unknownObjectRelease(v19, v20);
    v21 = sub_1000163BC(0, &qword_1005D67D0, ICTagSelection_ptr);
    v22 = swift_dynamicCast(&v92, &v94, (char *)&type metadata for Any + 8, v21, 6);
    v23 = v92;
    if (!v22)
      v23 = 0;
    v24 = *(void **)&v3[v18];
    *(_QWORD *)&v3[v18] = v23;

  }
  v25 = objc_msgSend(a1, "localDragSession");
  if (!v25)
  {
    v94 = 0u;
    v95 = 0u;
LABEL_15:
    v33 = &qword_1005CF190;
    v34 = &v94;
    goto LABEL_16;
  }
  v26 = v25;
  v27 = objc_msgSend(v25, "localContext");
  swift_unknownObjectRelease(v26, v28);
  if (v27)
  {
    _bridgeAnyObjectToAny(_:)(&v92, v27);
    swift_unknownObjectRelease(v27, v29);
  }
  else
  {
    v92 = 0u;
    v93 = 0u;
  }
  sub_10014BD1C((uint64_t)&v92, (uint64_t)&v94, &qword_1005CF190);
  if (!*((_QWORD *)&v95 + 1))
    goto LABEL_15;
  v30 = sub_1000163BC(0, (unint64_t *)&unk_1005D8A18, &off_10054DD90);
  if ((swift_dynamicCast(&v92, &v94, (char *)&type metadata for Any + 8, v30, 6) & 1) == 0)
    return objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:", 1);
  v31 = (id)v92;
  if (objc_msgSend((id)v92, "dragSessionType") != (id)1)
  {

    return objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:", 1);
  }
  sub_100012CE8(a2, (uint64_t)v11, (uint64_t *)&unk_1005D6350);
  v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v32(v11, 1, v12) == 1)
  {

    v33 = (uint64_t *)&unk_1005D6350;
    v34 = (__int128 *)v11;
LABEL_16:
    sub_100012DDC((uint64_t)v34, v33);
    return objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:", 1);
  }
  v37 = v91;
  v87 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v87(v91, v11, v12);
  v38 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
  if (!v38)
  {
    v94 = 0u;
    v95 = 0u;
LABEL_42:

    sub_100012DDC((uint64_t)&v94, &qword_1005CF190);
LABEL_44:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v37, v12);
    return objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:", 1);
  }
  v86 = v32;
  v39 = objc_msgSend(v38, "collectionViewDiffableDataSource");
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v41 = objc_msgSend(v39, "itemIdentifierForIndexPath:", isa);

  if (v41)
  {
    _bridgeAnyObjectToAny(_:)(&v92, v41);
    swift_unknownObjectRelease(v41, v42);
  }
  else
  {
    v92 = 0u;
    v93 = 0u;
  }
  sub_10014BD1C((uint64_t)&v92, (uint64_t)&v94, &qword_1005CF190);
  v37 = v91;
  if (!*((_QWORD *)&v95 + 1))
    goto LABEL_42;
  v43 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  if ((swift_dynamicCast(&v92, &v94, (char *)&type metadata for Any + 8, v43, 6) & 1) == 0)
  {

    goto LABEL_44;
  }
  v44 = (void *)v92;
  if ((objc_msgSend((id)v92, "ic_isHashtagType") & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v91, v12);

    return objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:", 1);
  }
  v81 = v44;
  v45 = objc_msgSend(v31, "currentSourceObjectIDs");
  v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v45, v43);

  v47 = (unint64_t)v46 >> 62;
  if ((unint64_t)v46 >> 62)
    goto LABEL_80;
  v48 = *(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
  v49 = v3;
  swift_bridgeObjectRetain(v46);
  while (1)
  {
    v82 = v31;
    v90 = (void (*)(char *, unint64_t, uint64_t))v46;
    if (v48)
    {
      v88 = (id)v48;
      v80 = v47;
      v47 = 0;
      v89 = v46 & 0xC000000000000001;
      v83 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_workerContext;
      v50 = 4;
      do
      {
        if (v89)
          v51 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v50 - 4, v46);
        else
          v51 = *(id *)(v46 + 8 * v50);
        v46 = (uint64_t)v51;
        v31 = (id)(v50 - 3);
        if (__OFADD__(v50 - 4, 1))
        {
          __break(1u);
          goto LABEL_79;
        }
        v52 = objc_msgSend(v51, "ic_isModernNoteType");
        if ((_DWORD)v52 && *(_QWORD *)&v3[v83])
        {
          v85 = &v79;
          __chkstk_darwin(v52);
          *(&v79 - 2) = (uint64_t)v53;
          *(&v79 - 1) = v46;
          v84 = v53;
          NSManagedObjectContext.performAndWait<A>(_:)(sub_10030E500, &v79 - 4, &type metadata for Bool);

          if (v94 == 1)
          {

            v46 = (uint64_t)v90;
            swift_bridgeObjectRelease(v90);
            LODWORD(v88) = 1;
            goto LABEL_47;
          }
        }
        else
        {

        }
        ++v50;
        v46 = (uint64_t)v90;
      }
      while (v31 != v88);

      swift_bridgeObjectRelease(v46);
      LODWORD(v88) = 0;
LABEL_47:
      if (v80)
        goto LABEL_50;
LABEL_48:
      v31 = *(id *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v46);
      goto LABEL_54;
    }

    swift_bridgeObjectRelease(v46);
    LODWORD(v88) = 0;
    if (!v47)
      goto LABEL_48;
LABEL_50:
    v54 = v46 < 0 ? v46 : v46 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v46);
    v31 = (id)_CocoaArrayWrapper.endIndex.getter(v54);
LABEL_54:
    if (!v31)
      break;
    v89 = v46 & 0xC000000000000001;
    v55 = 4;
    while (1)
    {
      v47 = v55 - 4;
      v56 = v89
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v55 - 4, v46)
          : *(id *)(v46 + 8 * v55);
      v46 = (uint64_t)v56;
      v57 = (id)(v55 - 3);
      if (__OFADD__(v47, 1))
        break;
      v58 = objc_msgSend(v56, "ic_isLegacyType");

      if (v58)
      {
        swift_bridgeObjectRelease_n(v90, 2);
        goto LABEL_73;
      }
      ++v55;
      v46 = (uint64_t)v90;
      if (v57 == v31)
        goto LABEL_62;
    }
LABEL_79:
    __break(1u);
LABEL_80:
    if (v46 < 0)
      v77 = v46;
    else
      v77 = v46 & 0xFFFFFFFFFFFFFF8;
    v78 = v3;
    swift_bridgeObjectRetain(v46);
    v48 = _CocoaArrayWrapper.endIndex.getter(v77);
  }
LABEL_62:
  swift_bridgeObjectRelease_n(v46, 2);
  if ((v88 & 1) != 0)
  {
LABEL_73:
    v35 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:", 1);
    v76 = v81;
  }
  else
  {
    v59 = sub_100012E18(&qword_1005CF6F0);
    v60 = swift_allocObject(v59, 40, 7);
    *(_OWORD *)(v60 + 16) = xmmword_100456F30;
    v61 = v81;
    *(_QWORD *)(v60 + 32) = v81;
    *(_QWORD *)&v94 = v60;
    specialized Array._endMutation()(v60);
    v62 = v94;
    v88 = v61;
    sub_100012E18(&qword_1005D70C0);
    v63 = Array._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v64 = swift_bridgeObjectRelease(v62).n128_u64[0];
    objc_msgSend(v82, "setCurrentDropTargetItemIDs:", v63, v64);

    v65 = objc_msgSend(v3, "indexPathsForVisibleItems");
    v66 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v65, v12);

    v67 = *(_QWORD *)(v66 + 16);
    v85 = (uint64_t *)v66;
    if (v67)
    {
      v68 = v66 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v69 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      v89 = *(_QWORD *)(v13 + 72);
      v90 = v69;
      v69(v9, v68, v12);
      while (1)
      {
        v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
        v70(v9, 0, 1, v12);
        if (v86(v9, 1, v12) == 1)
          break;
        v87(v16, v9, v12);
        v71 = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v3, "deselectItemAtIndexPath:animated:", v71, 0);

        v72 = IndexPath._bridgeToObjectiveC()().super.isa;
        v73 = objc_msgSend(v3, "cellForItemAtIndexPath:", v72);

        if (v73)
        {
          v74 = type metadata accessor for TagCell();
          v75 = swift_dynamicCastClass(v73, v74);
          if (v75)
          {
            *(_BYTE *)(v75 + OBJC_IVAR___ICTagCell_isExcluded) = 0;
            sub_1003B747C();
          }

        }
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
        v68 += v89;
        if (!--v67)
          goto LABEL_75;
        v90(v9, v68, v12);
      }
    }
    else
    {
      v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
LABEL_75:
      v70(v9, 1, 1, v12);
    }
    objc_msgSend(*(id *)&v3[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection], "clear", swift_bridgeObjectRelease(v85).n128_f64[0]);
    v35 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewDropProposal), "initWithDropOperation:intent:", 3, 2);
    v76 = v88;
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v91, v12);
  return v35;
}

void sub_10030DCFC(void *a1)
{
  char *v1;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  id v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  id v61;
  _QWORD aBlock[3];
  void *v63;
  uint64_t (*v64)();
  uint64_t v65;
  uint64_t v66;
  id v67;
  __int128 v68;
  __int128 v69;

  v4 = objc_msgSend(a1, "session");
  v5 = objc_msgSend(v4, "localDragSession");
  swift_unknownObjectRelease(v4, v6);
  if (!v5)
    return;
  v7 = objc_msgSend(v5, "localContext");
  if (v7)
  {
    v8 = v7;
    _bridgeAnyObjectToAny(_:)(&v68, v7);
    swift_unknownObjectRelease(v8, v9);
  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }
  sub_10014BD1C((uint64_t)&v68, (uint64_t)aBlock, &qword_1005CF190);
  if (!v63)
  {
    swift_unknownObjectRelease(v5, v10);
    sub_100012DDC((uint64_t)aBlock, &qword_1005CF190);
    return;
  }
  v11 = sub_1000163BC(0, (unint64_t *)&unk_1005D8A18, &off_10054DD90);
  if ((swift_dynamicCast(&v67, aBlock, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
  {
    swift_unknownObjectRelease(v5, v12);
    return;
  }
  v61 = v67;
  v13 = objc_msgSend(v67, "currentDropTargetItemIDs");
  v14 = sub_100012E18(&qword_1005D70C0);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  aBlock[0] = _swiftEmptyArrayStorage;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v28 = v15;
    else
      v28 = v15 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v15);
    v16 = _CocoaArrayWrapper.endIndex.getter(v28);
    if (v16)
      goto LABEL_9;
LABEL_27:
    swift_bridgeObjectRelease(v15);
    v27 = _swiftEmptyArrayStorage;
    goto LABEL_28;
  }
  v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v15);
  if (!v16)
    goto LABEL_27;
LABEL_9:
  if (v16 < 1)
  {
    __break(1u);
    goto LABEL_52;
  }
  v17 = v1;
  for (i = 0; i != v16; ++i)
  {
    if ((v15 & 0xC000000000000001) != 0)
    {
      v19 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v15);
    }
    else
    {
      v19 = *(_QWORD *)(v15 + 8 * i + 32);
      swift_unknownObjectRetain(v19);
    }
    v20 = objc_opt_self(NSManagedObjectID);
    v21 = swift_dynamicCastObjCClass(v19, v20);
    if (v21)
    {
      v23 = v21;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v25 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      v24 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v25 >= v24 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      v26 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
      specialized Array._endMutation()(v26);
    }
    else
    {
      swift_unknownObjectRelease(v19, v22);
    }
  }
  swift_bridgeObjectRelease(v15);
  v27 = (_QWORD *)aBlock[0];
  v1 = v17;
LABEL_28:
  swift_bridgeObjectRelease(v15);
  isEscapingClosureAtFileLocation = (uint64_t)sub_1002FAB1C((uint64_t)v27);
  *(_QWORD *)&v30 = swift_bridgeObjectRelease(v27).n128_u64[0];
  if (!isEscapingClosureAtFileLocation)
  {
    swift_unknownObjectRelease(v5, v29);

    return;
  }
  v31 = objc_msgSend(v5, "items", v30);
  v32 = sub_1000163BC(0, &qword_1005D8A28, UIDragItem_ptr);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v31, v32);

  v67 = _swiftEmptyArrayStorage;
  if ((unint64_t)v3 >> 62)
  {
LABEL_52:
    if (v3 < 0)
      v47 = v3;
    else
      v47 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v33 = _CocoaArrayWrapper.endIndex.getter(v47);
    if (v33)
      goto LABEL_31;
    goto LABEL_56;
  }
  v33 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v3);
  if (v33)
  {
LABEL_31:
    v59 = isEscapingClosureAtFileLocation;
    v60 = v1;
    if (v33 >= 1)
    {
      v34 = 0;
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
          v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v3);
        else
          v36 = *(id *)(v3 + 8 * v34 + 32);
        v37 = v36;
        v38 = objc_msgSend(v36, "localObject");
        if (v38)
        {
          v39 = v38;
          _bridgeAnyObjectToAny(_:)(&v68, v38);
          swift_unknownObjectRelease(v39, v40);
        }
        else
        {
          v68 = 0u;
          v69 = 0u;
        }
        sub_10014BD1C((uint64_t)&v68, (uint64_t)aBlock, &qword_1005CF190);
        if (v63)
        {
          v41 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
          if ((swift_dynamicCast(&v66, aBlock, (char *)&type metadata for Any + 8, v41, 6) & 1) != 0)
            goto LABEL_46;
        }
        else
        {
          sub_100012DDC((uint64_t)aBlock, &qword_1005CF190);
        }
        v66 = 0;
LABEL_46:

        v43 = v66;
        if (v66)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          v45 = *(_QWORD *)(((unint64_t)v67 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v44 = *(_QWORD *)(((unint64_t)v67 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v45 >= v44 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
          v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v45, v43);
          specialized Array._endMutation()(v35);
        }
        if (v33 == ++v34)
        {
          swift_bridgeObjectRelease(v3);
          v46 = v67;
          v1 = v60;
          isEscapingClosureAtFileLocation = v59;
          goto LABEL_57;
        }
      }
    }
    __break(1u);
    return;
  }
LABEL_56:
  swift_bridgeObjectRelease(v3);
  v46 = _swiftEmptyArrayStorage;
LABEL_57:
  swift_bridgeObjectRelease(v3);
  v49 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_workerContext];
  if (v49)
  {
    v50 = (_QWORD *)swift_allocObject(&unk_100567A00, 48, 7);
    v50[2] = v46;
    v50[3] = v49;
    v50[4] = isEscapingClosureAtFileLocation;
    v50[5] = v1;
    v51 = (void *)isEscapingClosureAtFileLocation;
    v52 = swift_allocObject(&unk_100567A28, 32, 7);
    *(_QWORD *)(v52 + 16) = sub_10030E4E4;
    *(_QWORD *)(v52 + 24) = v50;
    v64 = sub_100194900;
    v65 = v52;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016618;
    v63 = &unk_100567A40;
    v53 = _Block_copy(aBlock);
    v54 = v65;
    v55 = v49;
    swift_bridgeObjectRetain(v46);
    v56 = v51;
    v57 = v1;
    swift_retain(v52);
    swift_release(v54);
    objc_msgSend(v55, "performBlockAndWait:", v53);

    _Block_release(v53);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v52, "", 101, 625, 38, 1);
    swift_unknownObjectRelease(v5, v58);

    swift_bridgeObjectRelease(v46);
    swift_release(v50);
    swift_release(v52);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return;
    __break(1u);
  }
  swift_unknownObjectRelease(v5, v48);

  swift_bridgeObjectRelease(v46);
}

void sub_10030E370()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v1 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelectionBeforeDrag;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelectionBeforeDrag);
  if (v2)
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagSelection) = v2;
    v4 = v2;

    sub_1002FC610(0, 0, 0);
    v5 = *(void **)(v0 + v1);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(v0 + v1) = 0;

}

uint64_t sub_10030E3E4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v6[7];
  char v7;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_workerContext);
  if (v2
    && (v6[3] = a1,
        v3 = v2,
        v4 = sub_100012E18((uint64_t *)&unk_1005D8A08),
        NSManagedObjectContext.performAndWait<A>(_:)(sub_10030E490, v6, v4),
        v3,
        v7 != 1))
  {
    return v6[6];
  }
  else
  {
    return 0;
  }
}

void sub_10030E490(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1003025DC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10030E4A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 48, 7);
}

double sub_10030E4E4()
{
  uint64_t v0;

  return sub_1003005F8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10030E4F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10030E500(unsigned __int8 *a1@<X8>)
{
  uint64_t v1;

  sub_100302378(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10030E518()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

Class sub_10030E5A4(uint64_t a1)
{
  void **v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IndexPath(0) - 8) + 80);
  return sub_100300F94(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)v1 + ((v3 + 48) & ~v3));
}

uint64_t sub_10030E5E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030E614(uint64_t a1)
{
  uint64_t v1;

  return sub_100301748(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10030E61C()
{
  id *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for IndexPath(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(char *, uint64_t))(v2 + 8))((char *)v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10030E6A0(int a1)
{
  uint64_t v1;

  type metadata accessor for IndexPath(0);
  sub_1003018F8(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

void sub_10030E6E4(int a1)
{
  uint64_t v1;

  sub_100301C6C(a1, *(char **)(v1 + 16));
}

void sub_10030E6EC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagRenameViewController);
  if (v1)
  {
    v2 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes32TagCreateOrRenameAlertController_alertTextField);
    if (v2)
      objc_msgSend(v2, "selectAll:", 0);
  }
}

void sub_10030E728()
{
  uint64_t v0;

  sub_10030187C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10030E730()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10030E740()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_10030E74C(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1002FED80(a1, a2, v2);
}

uint64_t storeEnumTagSinglePayload for TagCollectionViewConfiguration.ViewMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10030E7A0 + 4 * byte_1004623D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10030E7D4 + 4 * byte_1004623D0[v4]))();
}

uint64_t sub_10030E7D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10030E7DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10030E7E4);
  return result;
}

uint64_t sub_10030E7F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10030E7F8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10030E7FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10030E804(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TagCollectionViewConfiguration.ViewMode()
{
  return &type metadata for TagCollectionViewConfiguration.ViewMode;
}

unint64_t sub_10030E824()
{
  unint64_t result;

  result = qword_1005D8B00;
  if (!qword_1005D8B00)
  {
    result = swift_getWitnessTable(&unk_10046251C, &type metadata for TagCollectionViewConfiguration.ViewMode);
    atomic_store(result, (unint64_t *)&qword_1005D8B00);
  }
  return result;
}

uint64_t VisibleChecklistItemsQuery.entities(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for ChecklistItemEntity(0);
  v4[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[9] = swift_task_alloc(v7);
  v4[10] = swift_task_alloc(v7);
  v8 = sub_100012E18(&qword_1005CF198);
  v4[11] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v9);
  v4[13] = swift_task_alloc(v9);
  v10 = type metadata accessor for ChecklistItemID(0);
  v4[14] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[15] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v4[16] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v13);
  v4[18] = swift_task_alloc(v13);
  v14 = sub_100012E18(&qword_1005D8B90);
  v4[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10030E9DC, 0, 0);
}

uint64_t sub_10030E9DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 160) = v2;
  v3 = *(_QWORD *)(v0 + 120);
  if (v2)
  {
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 224) = v4;
    v5 = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 176) = 0;
    *(_QWORD *)(v0 + 184) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 168) = v5;
    v6 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 112);
    v8 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    swift_bridgeObjectRetain(v1);
    sub_100145220(v8, v6, type metadata accessor for ChecklistItemID);
    v9 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
    *(_QWORD *)(v0 + 192) = v9;
    v9(v6, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v7) != 1)
    {
      v10 = *(unsigned __int8 *)(v0 + 224);
      v11 = *(_QWORD *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 136);
      v13 = *(_QWORD *)(v0 + 40);
      v14 = *(_QWORD *)(v0 + 32);
      v15 = (v10 + 16) & ~v10;
      v16 = (*(_QWORD *)(v0 + 128) + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
      v35 = *(_QWORD *)(v0 + 48);
      v17 = v10 | 7;
      sub_10013B170(*(_QWORD *)(v0 + 152), v11, type metadata accessor for ChecklistItemID);
      AppDependency.wrappedValue.getter((_QWORD *)(v0 + 16));
      v18 = *(void **)(v0 + 16);
      *(_QWORD *)(v0 + 200) = objc_msgSend(v18, "modernManagedObjectContext");

      sub_100145220(v11, v12, type metadata accessor for ChecklistItemID);
      v19 = swift_allocObject(&unk_100567D80, v16 + 24, v17);
      *(_QWORD *)(v0 + 208) = v19;
      sub_10013B170(v12, v19 + v15, type metadata accessor for ChecklistItemID);
      v20 = (_QWORD *)(v19 + v16);
      *v20 = v14;
      v20[1] = v13;
      v20[2] = v35;
      v21 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      swift_retain(v14);
      swift_retain(v13);
      swift_retain(v35);
      v22 = (_QWORD *)swift_task_alloc(v21);
      *(_QWORD *)(v0 + 216) = v22;
      *v22 = v0;
      v22[1] = sub_10030EC84;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 104), sub_100310F04, v19, *(_QWORD *)(v0 + 88));
    }
  }
  else
  {
    v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56);
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = swift_bridgeObjectRetain(v1);
    v24(v25, 1, 1, v26, v27);
  }
  v28 = *(_QWORD *)(v0 + 144);
  v29 = *(_QWORD *)(v0 + 152);
  v30 = *(_QWORD *)(v0 + 136);
  v32 = *(_QWORD *)(v0 + 96);
  v31 = *(_QWORD *)(v0 + 104);
  v34 = *(_QWORD *)(v0 + 72);
  v33 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_task_dealloc(v29);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_10030EC84()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  v2 = *(void **)(*(_QWORD *)v0 + 200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release(v1);

  return swift_task_switch(sub_10030ECE8, 0, 0);
}

uint64_t sub_10030ECE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  sub_100012CE8(*(_QWORD *)(v0 + 104), v1, &qword_1005CF198);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 96);
    sub_100012DDC(*(_QWORD *)(v0 + 104), &qword_1005CF198);
    sub_100145264(v4, type metadata accessor for ChecklistItemID);
    sub_100012DDC(v5, &qword_1005CF198);
    v6 = *(_QWORD *)(v0 + 184);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 72);
    v8 = *(_QWORD *)(v0 + 80);
    sub_10013B170(*(_QWORD *)(v0 + 96), v8, type metadata accessor for ChecklistItemEntity);
    sub_100145220(v8, v9, type metadata accessor for ChecklistItemEntity);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    v6 = *(_QWORD *)(v0 + 184);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v6 = sub_10016B844(0, *(_QWORD *)(v6 + 16) + 1, 1, *(_QWORD *)(v0 + 184));
    v12 = *(_QWORD *)(v6 + 16);
    v11 = *(_QWORD *)(v6 + 24);
    if (v12 >= v11 >> 1)
      v6 = sub_10016B844(v11 > 1, v12 + 1, 1, v6);
    v13 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v6 + 16) = v12 + 1;
    sub_10013B170(v15, v6+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v12, type metadata accessor for ChecklistItemEntity);
    sub_100145264(v16, type metadata accessor for ChecklistItemEntity);
    sub_100012DDC(v14, &qword_1005CF198);
    sub_100145264(v13, type metadata accessor for ChecklistItemID);
  }
  v18 = *(_QWORD *)(v0 + 176) + 1;
  if (v18 == *(_QWORD *)(v0 + 160))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
LABEL_11:
    v24 = *(_QWORD *)(v0 + 144);
    v23 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 96);
    v26 = *(_QWORD *)(v0 + 104);
    v29 = *(_QWORD *)(v0 + 72);
    v28 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
  }
  *(_QWORD *)(v0 + 176) = v18;
  *(_QWORD *)(v0 + 184) = v6;
  v19 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 120);
  sub_100145220(*(_QWORD *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 224) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 224))+ *(_QWORD *)(v0 + 168) * v18, v19, type metadata accessor for ChecklistItemID);
  v22 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56);
  *(_QWORD *)(v0 + 192) = v22;
  v22(v19, 0, 1, v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
    goto LABEL_11;
  v31 = *(unsigned __int8 *)(v0 + 224);
  v32 = *(_QWORD *)(v0 + 144);
  v33 = *(_QWORD *)(v0 + 136);
  v34 = *(_QWORD *)(v0 + 40);
  v35 = *(_QWORD *)(v0 + 32);
  v36 = (v31 + 16) & ~v31;
  v37 = (*(_QWORD *)(v0 + 128) + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = *(_QWORD *)(v0 + 48);
  v38 = v31 | 7;
  sub_10013B170(*(_QWORD *)(v0 + 152), v32, type metadata accessor for ChecklistItemID);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 16));
  v39 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 200) = objc_msgSend(v39, "modernManagedObjectContext");

  sub_100145220(v32, v33, type metadata accessor for ChecklistItemID);
  v40 = swift_allocObject(&unk_100567D80, v37 + 24, v38);
  *(_QWORD *)(v0 + 208) = v40;
  sub_10013B170(v33, v40 + v36, type metadata accessor for ChecklistItemID);
  v41 = (_QWORD *)(v40 + v37);
  *v41 = v35;
  v41[1] = v34;
  v41[2] = v44;
  v42 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  swift_retain(v35);
  swift_retain(v34);
  swift_retain(v44);
  v43 = (_QWORD *)swift_task_alloc(v42);
  *(_QWORD *)(v0 + 216) = v43;
  *v43 = v0;
  v43[1] = sub_10030EC84;
  return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 104), sub_100310F04, v40, *(_QWORD *)(v0 + 88));
}

void sub_10030F0D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  NSURL *v10;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, _BYTE *);
  void (*v14)(uint64_t, uint64_t, uint64_t, _BYTE *);
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  id v43;
  void *aBlock[5];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;

  v5 = type metadata accessor for ChecklistItemID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppDependency.wrappedValue.getter(aBlock);
  v9 = aBlock[0];
  v11 = (void *)ChecklistItemID.note(in:)(aBlock[0], v10);

  if (!v11)
    goto LABEL_10;
  v12 = objc_opt_self(ICNote);
  v13 = (void (*)(uint64_t, uint64_t, uint64_t, _BYTE *))swift_dynamicCastObjCClass(v11, v12);
  v14 = v13;
  if (!v13)
  {

LABEL_11:
    v24 = 0;
    goto LABEL_12;
  }
  v15 = objc_msgSend(v13, "textStorage");
  if (!v15)
  {

LABEL_10:
    v14 = 0;
    goto LABEL_11;
  }
  v16 = v15;
  v38 = v14;
  v39 = a2;
  v40 = v2;
  v46 = 0;
  v47 = 0;
  v48 = 2;
  v43 = ICTTAttributeNameParagraphStyle;
  v17 = objc_msgSend(v16, "ic_range");
  v41 = v18;
  v42 = v17;
  sub_100145220(a1, (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ChecklistItemID);
  v19 = *(unsigned __int8 *)(v6 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_100567EE8, v23 + 8, v19 | 7);
  sub_10013B170((uint64_t)v8, v24 + v20, type metadata accessor for ChecklistItemID);
  *(_QWORD *)(v24 + v21) = v16;
  *(_QWORD *)(v24 + v22) = &v46;
  *(_QWORD *)(v24 + v23) = &v48;
  v25 = swift_allocObject(&unk_100567F10, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_100312AA4;
  *(_QWORD *)(v25 + 24) = v24;
  aBlock[4] = sub_100312B48;
  v45 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (void *)1107296256;
  aBlock[2] = sub_1003DA3F0;
  aBlock[3] = &unk_100567F28;
  v26 = _Block_copy(aBlock);
  v27 = v45;
  swift_retain(v25);
  v28 = v16;
  swift_release(v27);
  v29 = v43;
  objc_msgSend(v28, "enumerateAttribute:inRange:options:usingBlock:", v43, v42, v41, 0, v26);

  _Block_release(v26);
  LOBYTE(v29) = swift_isEscapingClosureAtFileLocation(v25, "", 117, 34, 157, 1);
  swift_release(v25);
  if ((v29 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v30 = v47;
    a2 = v39;
    if (!v47 || v48 == 2)
    {

      swift_bridgeObjectRelease(v47);
      v14 = sub_100312AA4;
LABEL_12:
      v31 = type metadata accessor for ChecklistItemEntity(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a2, 1, 1, v31);
      sub_100012C50((uint64_t)v14, v24);
      return;
    }
    v32 = v46;
    v33 = v39;
    v34 = v48 & 1;
    sub_100145220(a1, (uint64_t)v8, type metadata accessor for ChecklistItemID);
    *(_QWORD *)&v35 = swift_bridgeObjectRetain(v30).n128_u64[0];
    ChecklistItemEntity.init(id:managedObjectID:text:checked:)((uint64_t)v8, objc_msgSend(v38, "objectID", v35), v32, v30, v34, v33);

    v36 = type metadata accessor for ChecklistItemEntity(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(v33, 0, 1, v36);
    v37 = v47;
    swift_release(v24);
    swift_bridgeObjectRelease(v37);
  }
}

void sub_10030F484(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, void *a6, uint64_t *a7, unsigned __int8 *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t);
  int v42;
  id v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char *v68;
  id v69;
  void *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSString v81;
  id v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  id v92;
  void *v93;
  unsigned __int8 v94;
  void (*v95)(char *, uint64_t, uint64_t, uint64_t);
  id v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t *v105;
  unsigned __int8 *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  _BYTE *v113;
  id v114[2];
  _QWORD v115[5];

  v105 = a7;
  v106 = a8;
  v112 = a6;
  v113 = a4;
  v110 = a2;
  v111 = a3;
  v104 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v104);
  v103 = (char *)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UTType(0);
  v101 = *(_QWORD *)(v11 - 8);
  v102 = v11;
  __chkstk_darwin(v11);
  v98 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AttributedString(0);
  v99 = *(_QWORD *)(v13 - 8);
  v100 = v13;
  __chkstk_darwin(v13);
  v97 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CharacterSet(0);
  v108 = *(_QWORD *)(v15 - 8);
  v109 = v15;
  __chkstk_darwin(v15);
  v107 = (char *)&v95 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v95 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100012E18((uint64_t *)&unk_1005D8C60);
  __chkstk_darwin(v21);
  v23 = (char *)&v95 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v25 = __chkstk_darwin(v24);
  v27 = (char *)&v95 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25);
  v30 = (char *)&v95 - v29;
  __chkstk_darwin(v28);
  v32 = (char *)&v95 - v31;
  sub_100012CE8(a1, (uint64_t)v115, &qword_1005CF190);
  if (!v115[3])
  {
    sub_100012DDC((uint64_t)v115, &qword_1005CF190);
    return;
  }
  v33 = sub_1000163BC(0, (unint64_t *)&qword_1005D06B0, ICTTParagraphStyle_ptr);
  if ((swift_dynamicCast(v114, v115, (char *)&type metadata for Any + 8, v33, 6) & 1) == 0)
    return;
  v34 = v114[0];
  if (objc_msgSend(v114[0], "style") != 103)
  {

    return;
  }
  v35 = type metadata accessor for ChecklistItemID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v32, a5 + *(int *)(v35 + 20), v17);
  v36 = v34;
  v37 = 1;
  v95 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v95(v32, 0, 1, v17);
  v96 = v36;
  v38 = objc_msgSend(v36, "uuid");
  if (v38)
  {
    v39 = v38;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

    v37 = 0;
  }
  v95(v30, v37, 1, v17);
  v40 = (uint64_t)&v23[*(int *)(v21 + 48)];
  sub_100012CE8((uint64_t)v32, (uint64_t)v23, (uint64_t *)&unk_1005D06A0);
  sub_100012CE8((uint64_t)v30, v40, (uint64_t *)&unk_1005D06A0);
  v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v41((uint64_t)v23, 1, v17) == 1)
  {
    sub_100012DDC((uint64_t)v30, (uint64_t *)&unk_1005D06A0);
    sub_100012DDC((uint64_t)v32, (uint64_t *)&unk_1005D06A0);
    v42 = v41(v40, 1, v17);
    v43 = v96;
    if (v42 == 1)
    {
      sub_100012DDC((uint64_t)v23, (uint64_t *)&unk_1005D06A0);
      goto LABEL_15;
    }
LABEL_13:
    sub_100012DDC((uint64_t)v23, (uint64_t *)&unk_1005D8C60);

    return;
  }
  sub_100012CE8((uint64_t)v23, (uint64_t)v27, (uint64_t *)&unk_1005D06A0);
  if (v41(v40, 1, v17) == 1)
  {
    sub_100012DDC((uint64_t)v30, (uint64_t *)&unk_1005D06A0);
    sub_100012DDC((uint64_t)v32, (uint64_t *)&unk_1005D06A0);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
    v43 = v96;
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 32))(v20, v40, v17);
  v44 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v45 = dispatch thunk of static Equatable.== infix(_:_:)(v27, v20, v17, v44);
  v46 = *(void (**)(char *, uint64_t))(v18 + 8);
  v46(v20, v17);
  sub_100012DDC((uint64_t)v30, (uint64_t *)&unk_1005D06A0);
  sub_100012DDC((uint64_t)v32, (uint64_t *)&unk_1005D06A0);
  v46(v27, v17);
  sub_100012DDC((uint64_t)v23, (uint64_t *)&unk_1005D06A0);
  if ((v45 & 1) == 0)
  {

    return;
  }
LABEL_15:
  v47 = v112;
  v48 = objc_msgSend(v112, "mutableString");
  v50 = v110;
  v49 = v111;
  v51 = objc_msgSend(v48, "paragraphRangeForRange:", v110, v111);
  v53 = v52;

  v54 = v107;
  static CharacterSet.newlines.getter();
  v55 = NSAttributedString.range(byTrimmingCharactersIn:in:)(v54, v51, v53, 0);
  v57 = v56;
  v58 = (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v54, v109);
  if (v55 == NSNotFound.getter(v58))
  {
    v55 = v50;
    v57 = v49;
  }
  v59 = objc_msgSend(v47, "string");
  v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
  v62 = v61;

  v63 = Range<>.init(_:in:)(v55, v57, v60, v62);
  v65 = v64;
  LOBYTE(v59) = v66;
  swift_bridgeObjectRelease(v62);
  if ((v59 & 1) == 0)
  {
    v68 = v98;
    static UTType.rtf.getter(v67);
    v115[0] = v63;
    v115[1] = v65;
    v69 = objc_msgSend(v47, "string");
    v70 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v69);
    v72 = v71;

    v114[0] = v70;
    v114[1] = v72;
    v73 = sub_100012E18(&qword_1005D7B30);
    v74 = sub_100312970();
    v75 = sub_1001452E8();
    v76 = _NSRange.init<A, B>(_:in:)(v115, v114, v73, &type metadata for String, v74, v75);
    v78 = v77;
    UTType.identifier.getter(v76);
    v80 = v79;
    v81 = String._bridgeToObjectiveC()();
    v82 = objc_msgSend(v47, "filteredAttributedStringForUTI:range:", v81, v76, v78, swift_bridgeObjectRelease(v80).n128_f64[0]);

    v83 = v97;
    AttributedString.init(_:)(v82);
    v84 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v68, v102);
    v85 = v103;
    AttributedString.characters.getter(v84);
    (*(void (**)(char *, uint64_t))(v99 + 8))(v83, v100);
    v86 = sub_100019C6C(&qword_1005D3E90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
    v87 = String.init<A>(_:)(v85, v104, v86);
    v88 = v105;
    v89 = v105[1];
    *v105 = v87;
    v88[1] = v90;
    *(_QWORD *)&v91 = swift_bridgeObjectRelease(v89).n128_u64[0];
    v92 = objc_msgSend(v96, "todo", v91);
    if (v92)
    {
      v93 = v92;
      v94 = objc_msgSend(v92, "done");

    }
    else
    {
      v94 = 0;
    }
    *v106 = v94;
  }
  *v113 = 1;

}

uint64_t VisibleChecklistItemsQuery.suggestedEntities()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D8BA0 + dword_1005D8BA0);
  v6 = (_QWORD *)swift_task_alloc(unk_1005D8BA4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100312B50;
  return v8(a2, a3);
}

uint64_t sub_10030FCA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  v2 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v9 - v6;
  sub_100012CE8(a1, (uint64_t)&v9 - v6, (uint64_t *)&unk_1005D0B60);
  sub_100012CE8((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_1005D0B60);
  IntentParameter.wrappedValue.setter(v5);
  return sub_100012DDC((uint64_t)v7, (uint64_t *)&unk_1005D0B60);
}

uint64_t VisibleChecklistItemsQuery.entities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  char *v8;

  v8 = (char *)&dword_1005D8BB0 + dword_1005D8BB0;
  v6 = (_QWORD *)swift_task_alloc(unk_1005D8BB4);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100312B50;
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))v8)(a1, 0, 0, a3);
}

uint64_t VisibleChecklistItemsQuery.entities(for:matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D8BB0 + dword_1005D8BB0);
  v10 = (_QWORD *)swift_task_alloc(unk_1005D8BB4);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100312B50;
  return v12(a1, a2, a3, a5);
}

uint64_t sub_10030FE5C@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  NSNumber v16;
  id v17;
  char v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;
  _QWORD v37[2];
  _QWORD *v38;

  v9 = _swiftEmptyArrayStorage;
  v38 = _swiftEmptyArrayStorage;
  v10 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))objc_msgSend(a1, "ic_existingObjectWithID:", a2);
  if (!v10)
  {
    v23 = 0;
    goto LABEL_13;
  }
  v11 = v10;
  v12 = objc_opt_self(ICNote);
  v13 = (void *)swift_dynamicCastObjCClass(v11, v12);
  if (!v13)
  {

    v10 = 0;
    v23 = 0;
    goto LABEL_13;
  }
  v14 = v13;
  v34 = a4;
  v15 = objc_msgSend(v13, "hasChecklist");
  sub_1000163BC(0, (unint64_t *)&unk_1005D8C50, NSNumber_ptr);
  v16.super.super.isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
  if (!v15)
  {

    goto LABEL_12;
  }
  v17 = v15;
  v18 = static NSObject.== infix(_:_:)(v17);

  if ((v18 & 1) == 0 || (v19 = objc_msgSend(v14, "textStorage")) == 0)
  {

LABEL_12:
    v10 = 0;
    v23 = 0;
    v9 = _swiftEmptyArrayStorage;
    goto LABEL_13;
  }
  v20 = v19;
  v37[0] = 0;
  v37[1] = 0;
  v33 = ICTTAttributeNameParagraphStyle;
  v21 = objc_msgSend(v20, "ic_range");
  v31 = v22;
  v32 = v21;
  v23 = (_QWORD *)swift_allocObject(&unk_100567E58, 64, 7);
  v23[2] = v37;
  v23[3] = a2;
  v23[4] = v20;
  v23[5] = a3;
  v23[6] = v34;
  v23[7] = &v38;
  v24 = swift_allocObject(&unk_100567E80, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100312934;
  *(_QWORD *)(v24 + 24) = v23;
  aBlock[4] = sub_100147B3C;
  v36 = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003DA3F0;
  aBlock[3] = &unk_100567E98;
  v30 = _Block_copy(aBlock);
  v25 = v36;
  swift_bridgeObjectRetain(v34);
  swift_retain(v24);
  v26 = a2;
  v27 = v20;
  swift_release(v25);
  objc_msgSend(v27, "enumerateAttribute:inRange:options:usingBlock:", v33, v32, v31, 0, v30);

  _Block_release(v30);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v24, "", 117, 117, 161, 1);
  result = swift_release(v24);
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    v10 = sub_100312934;
    v9 = v38;
LABEL_13:
    result = sub_100012C50((uint64_t)v10, (uint64_t)v23);
    *a5 = v9;
    return result;
  }
  __break(1u);
  return result;
}

void sub_100310138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void *a6, void *a7, void *a8, uint64_t a9, char **a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  void *v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  uint64_t v81;
  char *v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSString v95;
  id v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  void *v107;
  int v108;
  uint64_t v109;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v111;
  unint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  id v136;
  id v137;
  char *v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;

  v122 = a8;
  v136 = a6;
  v137 = a7;
  v14 = type metadata accessor for ChecklistItemEntity(0);
  v125 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v124 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v127 = (uint64_t *)((char *)&v118 - v17);
  v135 = type metadata accessor for AttributedString.CharacterView(0);
  __chkstk_darwin(v135);
  v134 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UTType(0);
  v132 = *(_QWORD *)(v19 - 8);
  v133 = v19;
  __chkstk_darwin(v19);
  v129 = (char *)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for AttributedString(0);
  v130 = *(_QWORD *)(v21 - 8);
  v131 = v21;
  __chkstk_darwin(v21);
  v128 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for CharacterSet(0);
  v24 = *(char ***)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v118 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for ChecklistItemID(0);
  v28 = __chkstk_darwin(v27);
  v123 = (uint64_t)&v118 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v138 = (char *)&v118 - v30;
  v31 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v31);
  v33 = (char *)&v118 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for UUID(0);
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v118 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = __chkstk_darwin(v35);
  v41 = (char *)&v118 - v40;
  v43 = *a5;
  v42 = a5[1];
  v126 = a5;
  v44 = __OFADD__(v43, v42);
  v45 = v43 + v42;
  if (v44)
  {
    __break(1u);
    goto LABEL_48;
  }
  v46 = a2 + a3;
  if (__OFADD__(a2, a3))
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  if (v45 >= v46)
    v47 = a2 + a3;
  else
    v47 = v45;
  if (v43 >= a2 && v43 < v46)
  {
    v45 = v47 - v43;
    if (!__OFSUB__(v47, v43))
      goto LABEL_14;
    __break(1u);
  }
  if (v43 > a2 || v45 <= a2)
    goto LABEL_15;
  v45 = v47 - a2;
  if (__OFSUB__(v47, a2))
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
LABEL_14:
  if (v45 > 0)
    return;
LABEL_15:
  v119 = v41;
  v121 = v39;
  v120 = v38;
  sub_100012CE8(a1, (uint64_t)&v141, &qword_1005CF190);
  if (!v143)
  {
    sub_100012DDC((uint64_t)&v141, &qword_1005CF190);
    return;
  }
  v48 = sub_1000163BC(0, (unint64_t *)&qword_1005D06B0, ICTTParagraphStyle_ptr);
  if ((swift_dynamicCast(&v139, &v141, (char *)&type metadata for Any + 8, v48, 6) & 1) != 0)
  {
    v49 = v139;
    if (objc_msgSend(v139, "style") != 103)
    {

      return;
    }
    v118 = v49;
    v50 = objc_msgSend(v49, "uuid");
    if (v50)
    {
      v51 = v50;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v50);

      v52 = v121;
      v53 = *(void (**)(char *, char *, uint64_t))(v121 + 32);
      v54 = v37;
      v55 = v120;
      v53(v33, v54, v120);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v33, 0, 1, v55);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v33, 1, v55) != 1)
      {
        v56 = v119;
        v53(v119, v33, v55);
        v57 = (uint64_t)v138;
        (*(void (**)(char *, char *, uint64_t))(v121 + 16))(&v138[*(int *)(v27 + 20)], v56, v55);
        v58 = v136;
        v59 = objc_msgSend(v58, "URIRepresentation");
        v60 = v57;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v59);

        v136 = v58;
        v61 = v137;
        v62 = objc_msgSend(v137, "mutableString");
        v63 = objc_msgSend(v62, "paragraphRangeForRange:", a2, a3);
        v65 = v64;

        static CharacterSet.newlines.getter();
        v66 = NSAttributedString.range(byTrimmingCharactersIn:in:)(v26, v63, v65, 0);
        v68 = v67;
        v69 = v23;
        v70 = v61;
        v71 = ((uint64_t (*)(char *, uint64_t))v24[1])(v26, v69);
        if (v66 != NSNotFound.getter(v71))
        {
          a2 = v66;
          a3 = v68;
        }
        v72 = objc_msgSend(v61, "string");
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
        v75 = v74;

        v76 = Range<>.init(_:in:)(a2, a3, v73, v75);
        v78 = v77;
        v80 = v79;
        swift_bridgeObjectRelease(v75);
        if ((v80 & 1) != 0)
        {

          v109 = v60;
        }
        else
        {
          v82 = v129;
          static UTType.rtf.getter(v81);
          v141 = v76;
          v142 = v78;
          v83 = objc_msgSend(v70, "string");
          v84 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
          v86 = v85;

          v139 = v84;
          v140 = v86;
          v87 = sub_100012E18(&qword_1005D7B30);
          v88 = sub_100312970();
          v89 = sub_1001452E8();
          v90 = _NSRange.init<A, B>(_:in:)(&v141, &v139, v87, &type metadata for String, v88, v89);
          v92 = v91;
          UTType.identifier.getter(v90);
          v94 = v93;
          v95 = String._bridgeToObjectiveC()();
          v96 = objc_msgSend(v70, "filteredAttributedStringForUTI:range:", v95, v90, v92, swift_bridgeObjectRelease(v94).n128_f64[0]);

          v97 = v128;
          AttributedString.init(_:)(v96);
          v98 = (*(uint64_t (**)(char *, uint64_t))(v132 + 8))(v82, v133);
          v99 = v134;
          AttributedString.characters.getter(v98);
          (*(void (**)(char *, uint64_t))(v130 + 8))(v97, v131);
          v100 = sub_100019C6C(&qword_1005D3E90, (uint64_t (*)(uint64_t))&type metadata accessor for AttributedString.CharacterView, (uint64_t)&protocol conformance descriptor for AttributedString.CharacterView);
          v101 = String.init<A>(_:)(v99, v135, v100);
          v103 = v101;
          v104 = v102;
          if (!a9
            || (v141 = v101,
                v142 = v102,
                v139 = v122,
                v140 = a9,
                (StringProtocol.localizedStandardContains<A>(_:)(&v139, &type metadata for String, &type metadata for String, v89, v89) & 1) != 0))
          {
            v24 = a10;
            v26 = v138;
            v105 = v123;
            sub_100145220((uint64_t)v138, v123, type metadata accessor for ChecklistItemID);
            v106 = objc_msgSend(v118, "todo");
            if (v106)
            {
              v107 = v106;
              v108 = objc_msgSend(v106, "done");

            }
            else
            {
              v108 = 0;
            }
            a5 = v127;
            ChecklistItemEntity.init(id:managedObjectID:text:checked:)(v105, v136, v103, v104, v108, (uint64_t)v127);
            v37 = v124;
            sub_100145220((uint64_t)a5, (uint64_t)v124, type metadata accessor for ChecklistItemEntity);
            v33 = *a10;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a10);
            *a10 = v33;
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
LABEL_36:
              v112 = *((_QWORD *)v33 + 2);
              v111 = *((_QWORD *)v33 + 3);
              if (v112 >= v111 >> 1)
              {
                v33 = (char *)sub_10016B844(v111 > 1, v112 + 1, 1, (unint64_t)v33);
                *v24 = v33;
              }
              *((_QWORD *)v33 + 2) = v112 + 1;
              sub_10013B170((uint64_t)v37, (uint64_t)&v33[((*(unsigned __int8 *)(v125 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v125 + 80))+ *(_QWORD *)(v125 + 72) * v112], type metadata accessor for ChecklistItemEntity);
              v113 = v126;
              v114 = *v126;
              v115 = v126[1];

              v116 = v114 + v115;
              if (__OFADD__(v114, v115))
              {
                __break(1u);
              }
              else if (!__OFADD__(a2, a3))
              {
                if (v116 <= a2 + a3)
                  v116 = a2 + a3;
                if (v114 >= a2)
                  v114 = a2;
                v117 = v116 - v114;
                if (!__OFSUB__(v116, v114))
                {
                  sub_100145264((uint64_t)a5, type metadata accessor for ChecklistItemEntity);
                  sub_100145264((uint64_t)v26, type metadata accessor for ChecklistItemID);
                  (*(void (**)(char *, uint64_t))(v121 + 8))(v119, v120);
                  *v113 = v114;
                  v113[1] = v117;
                  return;
                }
LABEL_53:
                __break(1u);
                return;
              }
              __break(1u);
              goto LABEL_53;
            }
LABEL_50:
            v33 = (char *)sub_10016B844(0, *((_QWORD *)v33 + 2) + 1, 1, (unint64_t)v33);
            *v24 = v33;
            goto LABEL_36;
          }
          swift_bridgeObjectRelease(v104);

          v109 = (uint64_t)v138;
        }
        sub_100145264(v109, type metadata accessor for ChecklistItemID);
        (*(void (**)(char *, uint64_t))(v121 + 8))(v119, v120);
        return;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v33, 1, 1, v120);
    }

    sub_100012DDC((uint64_t)v33, (uint64_t *)&unk_1005D06A0);
  }
}

uint64_t sub_100310AAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes26VisibleChecklistItemsQueryVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_100310AD4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = (_QWORD *)swift_task_alloc(dword_1005D8B84);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100141D68;
  return VisibleChecklistItemsQuery.entities(for:)(a1, v4, v5, v6);
}

uint64_t sub_100310B3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D8BA0 + dword_1005D8BA0);
  v5 = (_QWORD *)swift_task_alloc(unk_1005D8BA4);
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = v2;
  v5[1] = sub_10013B218;
  return v7(v3, v4);
}

uint64_t sub_100310BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1002F9EA8();
  *v5 = v2;
  v5[1] = sub_100130768;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t VisibleChecklistItemsQuery.entities(matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1005D8BC8 + dword_1005D8BC8);
  v8 = (_QWORD *)swift_task_alloc(unk_1005D8BCC);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_100312B50;
  return v10(a1, a2, a4);
}

uint64_t sub_100310C8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  *(_QWORD *)(v4 + 16) = a1;
  v7 = *(_QWORD *)(v3 + 8);
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1005D8BC8 + dword_1005D8BC8);
  v8 = (_QWORD *)swift_task_alloc(unk_1005D8BCC);
  *(_QWORD *)(v4 + 24) = v8;
  *v8 = v4;
  v8[1] = sub_100136FB0;
  return v10(a2, a3, v7);
}

uint64_t _s11MobileNotes26VisibleChecklistItemsQueryVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v8 = 0xD000000000000024;
  v9 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v10, &v8, &type metadata for String, &protocol witness table for String);
  v0 = type metadata accessor for AppDependencyManager(0);
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(v10, v1);
  sub_100012E18(&qword_1005CEE50);
  v8 = 0xD000000000000021;
  v9 = 0x8000000100476B70;
  v3 = AnyHashable.init<A>(_:)(v10, &v8, &type metadata for String, &protocol witness table for String);
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(v10, v4);
  sub_100012E18((uint64_t *)&unk_1005D8C70);
  KeyPath = swift_getKeyPath(&unk_100462700, v5);
  IntentParameterDependency.__allocating_init<A, B>(_:)(KeyPath);
  return v2;
}

uint64_t sub_100310E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for ChecklistItemID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(v1 + 20);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 16));
  return swift_deallocObject(v0, v6 + 24, v5);
}

void sub_100310F04(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChecklistItemID(0) - 8) + 80);
  sub_10030F0D8(v1 + ((v3 + 16) & ~v3), a1);
}

uint64_t sub_100310F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  return swift_task_switch(sub_100310F84, 0, 0);
}

void sub_100310F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;

  *(_QWORD *)(v0 + 16) = _swiftEmptyArrayStorage;
  v1 = *(_QWORD *)(v0 + 40);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v18 = *(_QWORD *)(v0 + 40);
    else
      v18 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v18);
    *(_QWORD *)(v0 + 72) = v2;
    if (v2)
    {
LABEL_3:
      if (v2 < 1)
      {
        __break(1u);
      }
      else
      {
        v3 = 0;
        while (1)
        {
          *(_QWORD *)(v0 + 80) = v3;
          v4 = *(_QWORD *)(v0 + 40);
          v5 = (v4 & 0xC000000000000001) != 0
             ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v4)
             : *(id *)(v4 + 8 * v3 + 32);
          v6 = v5;
          *(_QWORD *)(v0 + 88) = v5;
          AppDependency.wrappedValue.getter((_QWORD *)(v0 + 24));
          v7 = *(void **)(v0 + 24);
          v8 = objc_msgSend(v7, "managedObjectContextForObjectID:", v6);
          *(_QWORD *)(v0 + 96) = v8;

          if (v8)
            break;

          v3 = *(_QWORD *)(v0 + 80) + 1;
          if (v3 == *(_QWORD *)(v0 + 72))
          {
            v9 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
            v10 = *(_QWORD **)(v0 + 16);
            goto LABEL_17;
          }
        }
        v12 = *(_QWORD *)(v0 + 48);
        v11 = *(_QWORD *)(v0 + 56);
        v13 = (_QWORD *)swift_allocObject(&unk_100567E30, 48, 7);
        *(_QWORD *)(v0 + 104) = v13;
        v13[2] = v8;
        v13[3] = v6;
        v13[4] = v12;
        v13[5] = v11;
        v14 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
        v8;
        v15 = v6;
        swift_bridgeObjectRetain(v11);
        v16 = (_QWORD *)swift_task_alloc(v14);
        *(_QWORD *)(v0 + 112) = v16;
        v17 = sub_100012E18(qword_1005D8C10);
        *v16 = v0;
        v16[1] = sub_100311168;
        NSManagedObjectContext.perform<A>(_:)(v0 + 32, sub_1003128E4, v13, v17);
      }
      return;
    }
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    *(_QWORD *)(v0 + 72) = v2;
    if (v2)
      goto LABEL_3;
  }
  v9 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  v10 = _swiftEmptyArrayStorage;
LABEL_17:
  (*(void (**)(_QWORD *, __n128))(v0 + 8))(v10, v9);
}

uint64_t sub_100311168()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_release(v1);
  return swift_task_switch(sub_1003111C4, 0, 0);
}

uint64_t sub_1003111C4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  __n128 v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;

  v2 = *(void **)(v0 + 88);
  v1 = *(void **)(v0 + 96);
  sub_1001D9928(*(_QWORD *)(v0 + 32));

  v3 = *(_QWORD *)(v0 + 80) + 1;
  if (v3 == *(_QWORD *)(v0 + 72))
  {
LABEL_7:
    v9 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
    return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 16), v9);
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 80) = v3;
      v4 = *(_QWORD *)(v0 + 40);
      v5 = (v4 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v4)
         : *(id *)(v4 + 8 * v3 + 32);
      v6 = v5;
      *(_QWORD *)(v0 + 88) = v5;
      AppDependency.wrappedValue.getter((_QWORD *)(v0 + 24));
      v7 = *(void **)(v0 + 24);
      v8 = objc_msgSend(v7, "managedObjectContextForObjectID:", v6);
      *(_QWORD *)(v0 + 96) = v8;

      if (v8)
        break;

      v3 = *(_QWORD *)(v0 + 80) + 1;
      if (v3 == *(_QWORD *)(v0 + 72))
        goto LABEL_7;
    }
    v12 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 56);
    v13 = (_QWORD *)swift_allocObject(&unk_100567E30, 48, 7);
    *(_QWORD *)(v0 + 104) = v13;
    v13[2] = v8;
    v13[3] = v6;
    v13[4] = v12;
    v13[5] = v11;
    v14 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v8;
    v15 = v6;
    swift_bridgeObjectRetain(v11);
    v16 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 112) = v16;
    v17 = sub_100012E18(qword_1005D8C10);
    *v16 = v0;
    v16[1] = sub_100311168;
    return NSManagedObjectContext.perform<A>(_:)(v0 + 32, sub_1003128E4, v13, v17);
  }
}

uint64_t sub_100311354(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[27] = a1;
  v2[28] = a2;
  v3 = type metadata accessor for NoteID(0);
  v2[29] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[30] = v4;
  v2[31] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NoteEntity(0);
  v2[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ManagedEntityContextType(0);
  v2[33] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[34] = v7;
  v2[35] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003113FC, 0, 0);
}

uint64_t sub_1003113FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(uint64_t, uint64_t);

  v2 = v0[34];
  v1 = v0[35];
  v3 = v0[33];
  AppDependency.wrappedValue.getter(v0 + 23);
  v4 = (void *)v0[23];
  v5 = objc_msgSend(v4, "modernManagedObjectContext");
  v0[36] = v5;

  AppDependency.wrappedValue.getter(v0 + 24);
  v6 = (void *)v0[24];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ManagedEntityContextType.html(_:), v3);
  v7 = ICUnifiedNoteContext.managedObjectContext(for:)(v1);
  v0[37] = v7;
  (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[35], v0[33]);

  v8 = IntentParameterDependency.wrappedValue.getter();
  v0[38] = v8;
  if (v8)
  {
    v11 = v0[31];
    v10 = v0[32];
    v12 = v0[29];
    v13 = v0[30];
    KeyPath = swift_getKeyPath(&unk_1004626D8, v9);
    v15 = sub_1001B32F0();
    IntentProjection.subscript.getter(KeyPath, v15);
    swift_release(KeyPath);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v11, v10, v12);
    sub_100145264(v10, type metadata accessor for NoteEntity);
    AppDependency.wrappedValue.getter(v0 + 26);
    v16 = v0[26];
    v0[39] = v16;
    v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
    v17 = (_QWORD *)swift_task_alloc(unk_1005D7894);
    v0[40] = v17;
    *v17 = v0;
    v17[1] = sub_1003116C4;
    return v23(v0[31], v16);
  }
  else
  {
    v19 = v0 + 2;
    v20 = objc_msgSend(objc_allocWithZone((Class)ICRecentNotesCoreDataIndexer), "initWithLegacyManagedObjectContext:modernManagedObjectContext:", v7, v5);
    v0[42] = v20;
    objc_msgSend(v20, "setMaximumNumberOfNotesPerAccount:", 10);
    objc_msgSend(v20, "setChecklistsOnly:", 1);
    v0[2] = v0;
    v0[3] = sub_100311818;
    v21 = swift_continuation_init(v0 + 2, 0);
    v0[10] = _NSConcreteStackBlock;
    v22 = v0 + 10;
    v22[1] = 0x40000000;
    v22[2] = sub_1001D8384;
    v22[3] = &unk_100567EC0;
    v22[4] = v21;
    objc_msgSend(v20, "reloadData:", v22);
    return swift_continuation_await(v19);
  }
}

uint64_t sub_1003116C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)(*(_QWORD *)v1 + 312);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 328) = a1;
  swift_task_dealloc(v2);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_100311744, 0, 0);
}

uint64_t sub_100311744()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v9;

  v1 = v0[41];
  v2 = v0[38];
  if (v1)
  {
    v3 = sub_100012E18(&qword_1005CF6F0);
    v4 = swift_allocObject(v3, 40, 7);
    *(_OWORD *)(v4 + 16) = xmmword_100456F30;
    *(_QWORD *)(v4 + 32) = v1;
    v9 = (_QWORD *)v4;
    specialized Array._endMutation()(v4);
    v5 = v9;
    swift_release(v2);
  }
  else
  {
    swift_release(v0[38]);
    v5 = _swiftEmptyArrayStorage;
  }
  v0[43] = v5;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D8BB0 + dword_1005D8BB0);
  v6 = (_QWORD *)swift_task_alloc(unk_1005D8BB4);
  v0[44] = v6;
  *v6 = v0;
  v6[1] = sub_100311AB0;
  return v8((uint64_t)v5, 0, 0, v0[27]);
}

uint64_t sub_100311818()
{
  return swift_task_switch(sub_100311864, 0, 0);
}

uint64_t sub_100311864()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char **v9;
  char **v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t v22;
  id v23;
  uint64_t v24;
  id *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = objc_msgSend(*(id *)(v0 + 336), "newSnapshotFromIndex");
  v2 = objc_msgSend(v1, "itemIdentifiers");
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, (char *)&type metadata for Any + 8);

  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v23 = v1;
    v24 = v0;
    v5 = (_QWORD *)(v0 + 120);
    v6 = v0 + 152;
    v25 = (id *)(v0 + 200);
    v7 = v3;
    v8 = v3 + 32;
    v22 = v7;
    swift_bridgeObjectRetain(v7);
    v9 = &selRef_filteredSections;
    v10 = &selRef_filteredSections;
    v11 = NSManagedObjectID_ptr;
    while (1)
    {
      sub_100128424(v8, (uint64_t)v5);
      sub_100128424((uint64_t)v5, v6);
      v12 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, v11);
      if (swift_dynamicCast(v25, v6, (char *)&type metadata for Any + 8, v12, 6))
      {
        v13 = v11;
        v14 = *v25;
        if ((objc_msgSend(*v25, v9[325]) & 1) != 0
          && (objc_msgSend(v14, v10[323]) & 1) != 0)
        {
          v15 = sub_1000153C0(v5);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v17 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v16 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v17 >= v16 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
          v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v14);
          specialized Array._endMutation()(v18);
          v9 = &selRef_filteredSections;
          v10 = &selRef_filteredSections;
          v11 = v13;
          goto LABEL_5;
        }

        v11 = v13;
      }
      sub_1000153C0(v5);
LABEL_5:
      v8 += 32;
      if (!--v4)
      {
        v3 = v22;
        swift_bridgeObjectRelease(v22);
        v1 = v23;
        v0 = v24;
        break;
      }
    }
  }
  v19 = *(void **)(v0 + 336);

  swift_bridgeObjectRelease(v3);
  *(_QWORD *)(v0 + 344) = _swiftEmptyArrayStorage;
  v26 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D8BB0 + dword_1005D8BB0);
  v20 = (_QWORD *)swift_task_alloc(unk_1005D8BB4);
  *(_QWORD *)(v0 + 352) = v20;
  *v20 = v0;
  v20[1] = sub_100311AB0;
  return v26((uint64_t)_swiftEmptyArrayStorage, 0, 0, *(_QWORD *)(v0 + 216));
}

uint64_t sub_100311AB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 352);
  *(_QWORD *)(*v2 + 360) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100311B90;
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 344));
    *(_QWORD *)(v4 + 368) = a1;
    v6 = sub_100311B2C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100311B2C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);

  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 368));
}

uint64_t sub_100311B90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(void **)(v0 + 288);

  swift_bridgeObjectRelease(v1);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100311BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  v4 = sub_100012E18(&qword_1005D3938);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ManagedEntityContextType(0);
  v3[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[15] = v7;
  v3[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100311C88, 0, 0);
}

uint64_t sub_100311C88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = v0[15];
  v1 = v0[16];
  v3 = v0[14];
  AppDependency.wrappedValue.getter(v0 + 2);
  v4 = (void *)v0[2];
  v0[17] = objc_msgSend(v4, "modernManagedObjectContext");

  AppDependency.wrappedValue.getter(v0 + 3);
  v5 = (void *)v0[3];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ManagedEntityContextType.html(_:), v3);
  v0[18] = ICUnifiedNoteContext.managedObjectContext(for:)(v1);
  (*(void (**)(_QWORD, _QWORD))(v0[15] + 8))(v0[16], v0[14]);

  v6 = (void *)objc_opt_self(ICSearchQueryOperation);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "prefixMatchingQueryStringForSearchString:", v7);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v0[19] = v11;
  sub_1000163BC(0, (unint64_t *)&unk_1005D8C40, ICSearchQueryOperation_ptr);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to static ICSearchQueryOperation.searchResults(queryString:rankingQueries:)[1]);
  v0[20] = v12;
  *v12 = v0;
  v12[1] = sub_100311E4C;
  return static ICSearchQueryOperation.searchResults(queryString:rankingQueries:)(v9, v11, _swiftEmptyArrayStorage);
}

uint64_t sub_100311E4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 160);
  v3[21] = a1;
  v3[22] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1003126C8;
  }
  else
  {
    swift_bridgeObjectRelease(v3[19]);
    v5 = sub_100311EC0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100311EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 168);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v7 = *(_QWORD *)(v0 + 168);
    else
      v7 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 168));
    v8 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease(v1);
    if (v8)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v2 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 184) = static MainActor.shared.getter(v2);
    v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor, v3);
    return swift_task_switch(sub_100311FB4, v4, v5);
  }
  v9 = *(void **)(v0 + 136);
  v10 = *(void **)(v0 + 144);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));

  v11 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100311FB4()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  id v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  Class v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  char v31;
  uint64_t v32;
  id v33;
  NSNumber v34;
  Class v35;
  id v36;
  char v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  id *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v59;
  uint64_t v60;

  v2 = (void *)v0[17];
  v1 = (void *)v0[18];
  swift_release(v0[23]);
  v3 = objc_msgSend((id)objc_opt_self(ICSearchIndexer), "sharedIndexer");
  sub_1000163BC(0, (unint64_t *)&unk_1005D39C0, CSSearchableItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v5 = sub_100012E18(&qword_1005CF6F0);
  v6 = swift_allocObject(v5, 48, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100451BF0;
  *(_QWORD *)(v6 + 32) = v2;
  *(_QWORD *)(v6 + 40) = v1;
  v60 = v6;
  specialized Array._endMutation()(v6);
  sub_1000163BC(0, (unint64_t *)&unk_1005D39D0, NSManagedObjectContext_ptr);
  v7 = v2;
  v8 = v1;
  v9 = Array._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend(v3, "objectsForSearchableItems:inContexts:", isa, v9, swift_bridgeObjectRelease(v60).n128_f64[0]);

  v11 = sub_100012E18((uint64_t *)&unk_1005D39E0);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  v59 = v0;
  v0[4] = _swiftEmptyArrayStorage;
  v13 = v0 + 4;
  if ((unint64_t)v12 >> 62)
    goto LABEL_36;
  v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v12);
  while (v14)
  {
    v15 = 0;
    v55 = (id *)(v13 + 3);
    v56 = v13 + 2;
    v50 = v13;
    v16 = v13 + 1;
    v53 = v12;
    v54 = v59[12];
    v17 = v12 & 0xC000000000000001;
    v13 = (_QWORD *)v59[22];
    v57 = v14;
    v51 = v12 & 0xC000000000000001;
    v52 = v16;
    while (v17)
    {
      v18 = specialized _ArrayBuffer._getElementSlowPath(_:)(v15, v12);
      v19 = v15 + 1;
      if (__OFADD__(v15, 1))
        goto LABEL_35;
LABEL_11:
      *v16 = &OBJC_PROTOCOL___ICSearchIndexableNote;
      v20 = swift_dynamicCastObjCProtocolConditional(v18, 1, v16);
      if (v20)
      {
        v22 = v20;
        ObjectType = swift_getObjectType(v18);
        v24 = sub_1000163BC(0, (unint64_t *)&qword_1005D39F0, ICNote_ptr);
        v25 = swift_dynamicCastMetatype(ObjectType, v24) ? (void *)v22 : 0;
        if (v25)
        {
          v26 = qword_1005CEA80;
          swift_unknownObjectRetain(v18);
          if (v26 != -1)
            swift_once(&qword_1005CEA80, sub_1001DA458);
          v27 = v59[13];
          v28 = v59[11];
          v29 = sub_10012A0B0(v28, (uint64_t)static ICNote.hasValidEntityIdentifier);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 16))(v27, v29, v28);
          v59[6] = v55;
          v59[7] = v25;
          v30 = swift_unknownObjectRetain(v18);
          v31 = Predicate.evaluate(_:)(v56, v28, v30);
          v59[28] = v13;
          (*(void (**)(_QWORD, _QWORD))(v54 + 8))(v59[13], v59[11]);
          if (v13)
          {
            swift_unknownObjectRelease(v18, v32);

            swift_unknownObjectRelease(v18, v44);
            swift_bridgeObjectRelease(v53);
            swift_bridgeObjectRelease(v59[4]);
            swift_bridgeObjectRelease(v53);
            return swift_task_switch(sub_100312674, 0, 0);
          }

          if ((v31 & 1) == 0)
          {
            swift_unknownObjectRelease_n(v18, 2);
            v13 = 0;
            v14 = v57;
            v16 = v52;
            v12 = v53;
            v17 = v51;
            goto LABEL_5;
          }
          v14 = v57;
          v17 = v51;
          v16 = v52;
          if ((objc_msgSend(v25, "isHiddenFromSearch") & 1) != 0
            || objc_msgSend(v25, "isDeletedOrInTrash"))
          {
            swift_unknownObjectRelease_n(v18, 2);
            goto LABEL_23;
          }
          v33 = objc_msgSend(v25, "hasChecklist");
          sub_1000163BC(0, (unint64_t *)&unk_1005D8C50, NSNumber_ptr);
          v34.super.super.isa = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
          v35 = v34.super.super.isa;
          if (v33)
          {
            v36 = v33;
            v37 = static NSObject.== infix(_:_:)(v36);

            if ((v37 & 1) != 0)
            {
              v38 = objc_msgSend(v25, "objectID");
              v39 = swift_unknownObjectRelease_n(v18, 2);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
              v41 = *(_QWORD *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v40 = *(_QWORD *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x18);
              v14 = v57;
              if (v41 >= v40 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
              v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v38);
              specialized Array._endMutation()(v42);
LABEL_23:
              v13 = 0;
LABEL_24:
              v12 = v53;
              goto LABEL_5;
            }
          }
          else
          {

          }
          swift_unknownObjectRelease_n(v18, 2);
          v13 = 0;
          v14 = v57;
          goto LABEL_24;
        }
      }
      swift_unknownObjectRelease(v18, v21);
LABEL_5:
      ++v15;
      if (v19 == v14)
      {
        swift_bridgeObjectRelease(v12);
        v43 = (_QWORD *)*v50;
        goto LABEL_41;
      }
    }
    v18 = *(_QWORD *)(v12 + 8 * v15 + 32);
    swift_unknownObjectRetain(v18);
    v19 = v15 + 1;
    if (!__OFADD__(v15, 1))
      goto LABEL_11;
LABEL_35:
    __break(1u);
LABEL_36:
    if (v12 < 0)
      v46 = v12;
    else
      v46 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v14 = _CocoaArrayWrapper.endIndex.getter(v46);
  }
  swift_bridgeObjectRelease(v12);
  v43 = _swiftEmptyArrayStorage;
LABEL_41:
  v59[24] = v43;
  v47 = v59[21];
  v48 = v59[9];
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v47);
  v58 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D8BB0 + dword_1005D8BB0);
  v49 = (_QWORD *)swift_task_alloc(unk_1005D8BB4);
  v59[25] = v49;
  *v49 = v59;
  v49[1] = sub_100312550;
  return v58((uint64_t)v43, v59[8], v48, v59[10]);
}

uint64_t sub_100312550(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 200);
  *(_QWORD *)(*v2 + 208) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100312620;
  }
  else
  {
    *(_QWORD *)(v4 + 216) = a1;
    v6 = sub_1003125C4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1003125C4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 144);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));

  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_100312620()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 144);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));

  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100312674()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 136);
  v2 = *(void **)(v0 + 144);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 168));

  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003126C8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 144);
  v2 = *(void **)(v0 + 136);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 152));

  v3 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100312720()
{
  unint64_t result;

  result = qword_1005D8BD0;
  if (!qword_1005D8BD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleChecklistItemsQuery, &type metadata for VisibleChecklistItemsQuery);
    atomic_store(result, (unint64_t *)&qword_1005D8BD0);
  }
  return result;
}

unint64_t sub_100312768()
{
  unint64_t result;

  result = qword_1005D8BD8[0];
  if (!qword_1005D8BD8[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleChecklistItemsQuery, &type metadata for VisibleChecklistItemsQuery);
    atomic_store(result, qword_1005D8BD8);
  }
  return result;
}

unint64_t sub_1003127B0()
{
  unint64_t result;

  result = qword_1005D8BF8;
  if (!qword_1005D8BF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleChecklistItemsQuery, &type metadata for VisibleChecklistItemsQuery);
    atomic_store(result, (unint64_t *)&qword_1005D8BF8);
  }
  return result;
}

uint64_t sub_1003127F4()
{
  return sub_100019C6C(&qword_1005D8C00, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
}

unint64_t sub_100312824()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D8C08;
  if (!qword_1005D8C08)
  {
    v1 = sub_10001537C(qword_1005D8C10);
    sub_100019C6C(&qword_1005D8C00, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D8C08);
  }
  return result;
}

ValueMetadata *type metadata accessor for VisibleChecklistItemsQuery()
{
  return &type metadata for VisibleChecklistItemsQuery;
}

uint64_t sub_1003128B0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003128E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10030FE5C(*(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

uint64_t sub_100312900()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100312934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_100310138(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void **)(v4 + 24), *(void **)(v4 + 32), *(void **)(v4 + 40), *(_QWORD *)(v4 + 48), *(char ***)(v4 + 56));
}

uint64_t sub_100312960()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100312970()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D7B38;
  if (!qword_1005D7B38)
  {
    v1 = sub_10001537C(&qword_1005D7B30);
    result = swift_getWitnessTable(&protocol conformance descriptor for Range<A>, v1);
    atomic_store(result, &qword_1005D7B38);
  }
  return result;
}

_QWORD *sub_1003129BC@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t sub_1003129E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for ChecklistItemID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + *(int *)(v1 + 20);
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);

  return swift_deallocObject(v0, ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_100312AA4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for ChecklistItemID(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10030F484(a1, a2, a3, a4, v4 + v10, *(void **)(v4 + v11), *(uint64_t **)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 **)(v4 + ((((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100312B34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100312B58(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  char v13;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v3 = sub_10026C694(v3);
    *v1 = v3;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      v11 = memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)(v5 + 16) = v7;
      specialized Array._endMutation()(v11);
      return v10;
    }
  }
  v13 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v13, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100312C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  v1 = sub_100012E18(&qword_1005CF6F0);
  result = swift_allocObject(v1, 72, 7);
  *(_OWORD *)(result + 16) = xmmword_100462730;
  v3 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_doneButton);
  if (!v3)
  {
    __break(1u);
    goto LABEL_8;
  }
  *(_QWORD *)(result + 32) = v3;
  v4 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_newNoteButton);
  if (!v4)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  *(_QWORD *)(result + 40) = v4;
  v5 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_moreButton);
  if (!v5)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  *(_QWORD *)(result + 48) = v5;
  v6 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_backToNotesButton);
  if (!v6)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  *(_QWORD *)(result + 56) = v6;
  v7 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_paletteButton);
  if (v7)
  {
    *(_QWORD *)(result + 64) = v7;
    v13 = result;
    specialized Array._endMutation()(result);
    v8 = v3;
    v9 = v4;
    v10 = v5;
    v11 = v6;
    v12 = v7;
    return v13;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100312D34()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D8C80);
  sub_10012A0B0(v0, (uint64_t)qword_1005D8C80);
  return static Logger.systemPaper.getter();
}

id sub_100312D7C(uint64_t a1, uint64_t a2, void *a3)
{
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  void *v25;
  objc_class *v26;
  uint64_t v27;
  char *v28;
  double v29;
  NSString v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t ObjectType;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  objc_super v45;
  _QWORD *v46;

  v4 = v3;
  v41 = a3;
  v38 = a1;
  v39 = a2;
  ObjectType = swift_getObjectType(v3);
  v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(&v4[OBJC_IVAR___ICSystemPaperViewController_toolPickerForWindow], 0);
  *(_QWORD *)&v4[OBJC_IVAR___ICSystemPaperViewController_pageControlFadeOutTimer] = 0;
  v4[OBJC_IVAR___ICSystemPaperViewController_didCreateInitialEditorController] = 0;
  v4[OBJC_IVAR___ICSystemPaperViewController_hasFinishedInitialViewRefresh] = 0;
  v4[OBJC_IVAR___ICSystemPaperViewController_viewDidAppearAtLeastOnce] = 0;
  v42 = OBJC_IVAR___ICSystemPaperViewController_editorViewControllerUpdateDispatchQueue;
  sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v14 = v4;
  static DispatchQoS.unspecified.getter(v14);
  v46 = _swiftEmptyArrayStorage;
  v15 = sub_100019C6C((unint64_t *)&qword_1005D6870, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_100012E18((uint64_t *)&unk_1005CEF40);
  v17 = sub_100323A1C((unint64_t *)&qword_1005D6880, (uint64_t *)&unk_1005CEF40);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v16, v17, v8, v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v44);
  v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000028, 0x8000000100488BA0, v13, v10, v7, 0);
  *(_QWORD *)&v4[v42] = v18;
  v19 = OBJC_IVAR___ICSystemPaperViewController_editorViewControllerUpdateSemaphore;
  *(_QWORD *)&v14[v19] = dispatch_semaphore_create(0);
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_emptyNoteIds] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_incomingLink] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_incomingImageData] = _swiftEmptyArrayStorage;
  v20 = &v14[OBJC_IVAR___ICSystemPaperViewController_launchPreview];
  v21 = type metadata accessor for NotePreview(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_targetCachePoolSize] = 2;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_editorCachePool] = _swiftEmptyArrayStorage;
  v22 = OBJC_IVAR___ICSystemPaperViewController_noteCache;
  v23 = objc_allocWithZone((Class)NSCache);
  *(_QWORD *)&v14[v22] = objc_msgSend(v23, "init", v38);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10012921C((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v24 = &_swiftEmptySetSingleton;
  }
  v26 = (objc_class *)ObjectType;
  v25 = v41;
  v27 = v39;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_subscriptions] = v24;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController____lazy_storage___indexer] = 0;
  v14[OBJC_IVAR___ICSystemPaperViewController_shouldShowModernAccountAlert] = 0;
  v14[OBJC_IVAR___ICSystemPaperViewController_isSettingCurrentNote] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController] = 0;
  swift_unknownObjectWeakInit(&v14[OBJC_IVAR___ICSystemPaperViewController_viewControllerManager], 0);
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_pageViewController] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_launchImageView] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_doneButton] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_newNoteButton] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_moreButton] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_backToNotesButton] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_pageContainerView] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_pageControl] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_paletteButton] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundView] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewBottomConstraint] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewHeight] = 0x4054000000000000;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewOnscreenBottomConstraintConstant] = 0;
  v28 = &v14[OBJC_IVAR___ICSystemPaperViewController____lazy_storage___toolPickerBackgroundViewOffscreenBottomConstraintConstant];
  *(_QWORD *)v28 = 0;
  v28[8] = 1;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_toolPickerSpringAnimationDampingRatio] = 0x3FEB0A3D70A3D70ALL;
  *(_QWORD *)&v14[OBJC_IVAR___ICSystemPaperViewController_toolPickerSpringAnimationResponse] = 0x3FE0FDF3B645A1CBLL;

  if (v27)
  {
    v30 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v29 = swift_bridgeObjectRelease(v27).n128_u64[0];
  }
  else
  {
    v30 = 0;
  }
  v45.receiver = v14;
  v45.super_class = v26;
  v31 = objc_msgSendSuper2(&v45, "initWithNibName:bundle:", v30, v25, v29);

  sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
  v32 = v31;
  v33 = static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
  v34 = swift_allocObject(&unk_1005682F8, 24, 7);
  swift_unknownObjectWeakInit(v34 + 16, v32);
  v35 = UIViewController.registerForTraitChanges<A>(_:handler:)(v33, sub_100323A5C, v34, v26);

  swift_unknownObjectRelease(v35, v36);
  swift_bridgeObjectRelease(v33);
  swift_release(v34);
  return v32;
}

id sub_100313324(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  objc_class *v23;
  char *v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ObjectType;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  objc_super v37;
  _QWORD *v38;

  v2 = v1;
  v33 = a1;
  ObjectType = swift_getObjectType(v1);
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v35 = *(_QWORD *)(v3 - 8);
  v36 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&ObjectType - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&ObjectType - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&ObjectType - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(&v2[OBJC_IVAR___ICSystemPaperViewController_toolPickerForWindow], 0);
  *(_QWORD *)&v2[OBJC_IVAR___ICSystemPaperViewController_pageControlFadeOutTimer] = 0;
  v2[OBJC_IVAR___ICSystemPaperViewController_didCreateInitialEditorController] = 0;
  v2[OBJC_IVAR___ICSystemPaperViewController_hasFinishedInitialViewRefresh] = 0;
  v2[OBJC_IVAR___ICSystemPaperViewController_viewDidAppearAtLeastOnce] = 0;
  v34 = OBJC_IVAR___ICSystemPaperViewController_editorViewControllerUpdateDispatchQueue;
  sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v12 = v2;
  static DispatchQoS.unspecified.getter(v12);
  v38 = _swiftEmptyArrayStorage;
  v13 = sub_100019C6C((unint64_t *)&qword_1005D6870, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_100012E18((uint64_t *)&unk_1005CEF40);
  v15 = sub_100323A1C((unint64_t *)&qword_1005D6880, (uint64_t *)&unk_1005CEF40);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v14, v15, v6, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v36);
  v16 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000028, 0x8000000100488BA0, v11, v8, v5, 0);
  *(_QWORD *)&v2[v34] = v16;
  v17 = OBJC_IVAR___ICSystemPaperViewController_editorViewControllerUpdateSemaphore;
  *(_QWORD *)&v12[v17] = dispatch_semaphore_create(0);
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_emptyNoteIds] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_incomingLink] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_incomingImageData] = _swiftEmptyArrayStorage;
  v18 = &v12[OBJC_IVAR___ICSystemPaperViewController_launchPreview];
  v19 = type metadata accessor for NotePreview(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_targetCachePoolSize] = 2;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_editorCachePool] = _swiftEmptyArrayStorage;
  v20 = OBJC_IVAR___ICSystemPaperViewController_noteCache;
  *(_QWORD *)&v12[v20] = objc_msgSend(objc_allocWithZone((Class)NSCache), "init");
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_10012921C((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v21 = &_swiftEmptySetSingleton;
  }
  v23 = (objc_class *)ObjectType;
  v22 = v33;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_subscriptions] = v21;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController____lazy_storage___indexer] = 0;
  v12[OBJC_IVAR___ICSystemPaperViewController_shouldShowModernAccountAlert] = 0;
  v12[OBJC_IVAR___ICSystemPaperViewController_isSettingCurrentNote] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController] = 0;
  swift_unknownObjectWeakInit(&v12[OBJC_IVAR___ICSystemPaperViewController_viewControllerManager], 0);
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_pageViewController] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_launchImageView] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_doneButton] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_newNoteButton] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_moreButton] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_backToNotesButton] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_pageContainerView] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_pageControl] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_paletteButton] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundView] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewBottomConstraint] = 0;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewHeight] = 0x4054000000000000;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewOnscreenBottomConstraintConstant] = 0;
  v24 = &v12[OBJC_IVAR___ICSystemPaperViewController____lazy_storage___toolPickerBackgroundViewOffscreenBottomConstraintConstant];
  *(_QWORD *)v24 = 0;
  v24[8] = 1;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_toolPickerSpringAnimationDampingRatio] = 0x3FEB0A3D70A3D70ALL;
  *(_QWORD *)&v12[OBJC_IVAR___ICSystemPaperViewController_toolPickerSpringAnimationResponse] = 0x3FE0FDF3B645A1CBLL;

  v37.receiver = v12;
  v37.super_class = v23;
  v25 = objc_msgSendSuper2(&v37, "initWithCoder:", v22);
  if (v25)
  {
    sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
    v26 = v25;
    v27 = static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
    v28 = swift_allocObject(&unk_1005682F8, 24, 7);
    swift_unknownObjectWeakInit(v28 + 16, v26);
    v29 = UIViewController.registerForTraitChanges<A>(_:handler:)(v27, sub_100323A5C, v28, v23);

    swift_unknownObjectRelease(v29, v30);
    swift_bridgeObjectRelease(v27);
    swift_release(v28);
  }
  else
  {

  }
  return v25;
}

id sub_1003138D8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR___ICSystemPaperViewController____lazy_storage___indexer;
  v2 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController____lazy_storage___indexer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICSystemPaperViewController____lazy_storage___indexer);
  }
  else
  {
    v4 = (void *)sub_100313938(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_100313938(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v2
    && (v3 = v2,
        v4 = objc_msgSend(v2, "workerManagedObjectContext"),
        v3,
        v4))
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)ICNoteCoreDataIndexer), "initWithLegacyManagedObjectContext:modernManagedObjectContext:", 0, v4);
    v6 = objc_msgSend((id)objc_opt_self(ICFolderCustomNoteSortType), "folderNoteSortTypeWithOrder:direction:", 2, 1);
    objc_msgSend(v5, "setSortType:", v6);

    objc_msgSend(v5, "setDateHeadersType:", 1);
    objc_msgSend(v5, "setDelegate:", a1);
    v7 = objc_msgSend((id)objc_opt_self(ICQuery), "queryForSystemPaperNotesAllowsRecentlyDeleted:", 0);
    objc_msgSend(v5, "setNoteQuery:", v7);

    return (uint64_t)v5;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000032, 0x80000001004887F0, "MobileNotes/SystemPaperViewController.swift", 43, 2, 93, 0);
    __break(1u);
  }
  return result;
}

void sub_100313AD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  _BYTE v7[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v7, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = objc_msgSend(Strong, "viewIfLoaded");

    if (v6)
      sub_100313B40();

  }
}

void sub_100313B40()
{
  char *v0;
  NSString v1;
  void *v2;
  NSObject *v3;
  NSString v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  double v16;
  void *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  NSObject *v30;
  NSObject *v31;

  v1 = String._bridgeToObjectiveC()();
  v2 = (void *)objc_opt_self(UIColor);
  v3 = objc_msgSend(v2, "colorNamed:", v1);

  if (!v3)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10012A0B0(v19, (uint64_t)qword_1005D8C80);
    v31 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v31, v21);
    if (os_log_type_enabled(v31, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v22, "Couldn't find paper_palette_shadow from the color xcassets.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    goto LABEL_20;
  }
  v4 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v2, "colorNamed:", v4);

  if (!v31)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10012A0B0(v24, (uint64_t)qword_1005D8C80);
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.error.getter(v26, v27);
    if (os_log_type_enabled(v26, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "Couldn't find paper_palette_background from the color xcassets.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = v3;
    goto LABEL_21;
  }
  v5 = OBJC_IVAR___ICSystemPaperViewController_paletteButton;
  v6 = *(void **)&v0[OBJC_IVAR___ICSystemPaperViewController_paletteButton];
  if (!v6)
  {
    __break(1u);
    goto LABEL_23;
  }
  v7 = objc_msgSend(v6, "layer");
  v8 = -[NSObject CGColor](v31, "CGColor");
  objc_msgSend(v7, "setBackgroundColor:", v8);

  v9 = *(void **)&v0[v5];
  if (!v9)
  {
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = objc_msgSend(v9, "layer");
  v11 = -[NSObject CGColor](v3, "CGColor");
  objc_msgSend(v10, "setShadowColor:", v11);

  v12 = objc_msgSend(v0, "traitCollection");
  v13 = objc_msgSend(v12, "userInterfaceStyle");

  v14 = *(void **)&v0[v5];
  if (v13 == (id)2)
  {
    if (v14)
    {
      v15 = objc_msgSend(v14, "layer");
      v17 = v15;
      v18 = 1058642330;
LABEL_19:
      LODWORD(v16) = v18;
      objc_msgSend(v15, "setShadowOpacity:", v16);

LABEL_20:
      v30 = v31;
LABEL_21:

      return;
    }
    goto LABEL_24;
  }
  if (v14)
  {
    v15 = objc_msgSend(v14, "layer");
    v17 = v15;
    v18 = 1061997773;
    goto LABEL_19;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_100313EDC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v12 = (void *)static OS_dispatch_queue.main.getter(v11);
  v13 = swift_allocObject(&unk_1005684B0, 32, 7);
  *(_QWORD *)(v13 + 16) = a1;
  *(_QWORD *)(v13 + 24) = v1;
  aBlock[4] = sub_100323654;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_1005684C8;
  v14 = _Block_copy(aBlock);
  v15 = v25;
  v16 = v2;
  v17 = swift_release(v15);
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v20 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_1003140EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  if (a1 < 1)
  {
LABEL_10:
    __break(1u);
  }
  else
  {
    v3 = (_QWORD *)(a2 + OBJC_IVAR___ICSystemPaperViewController_editorCachePool);
    v4 = 1;
    while (1)
    {
      v5 = sub_1003141DC(0);
      v6 = swift_beginAccess(v3, v11, 33, 0);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
      v8 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v7 = *(_QWORD *)((*v3 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v8 >= v7 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
      v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v5);
      specialized Array._endMutation()(v9);
      swift_endAccess(v11);
      if (a1 == v4)
        break;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        goto LABEL_10;
      }
    }
  }
}

id sub_1003141DC(uint64_t a1)
{
  uint64_t v1;
  int IsTextKit2Enabled;
  Class *v4;
  id v5;
  uint64_t v6;
  void *Strong;
  void *v8;
  id result;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;

  IsTextKit2Enabled = ICInternalSettingsIsTextKit2Enabled();
  v4 = (Class *)ICTK2NoteEditorViewController_ptr;
  if (!IsTextKit2Enabled)
    v4 = (Class *)ICNoteEditorViewController_ptr;
  v5 = objc_msgSend(objc_allocWithZone(*v4), "initWithIdentifier:options:", -1, 3);
  objc_msgSend(v5, "setAdditionalSafeAreaInsets:", 0.0, 0.0, 0.0, 0.0);
  v6 = v1 + OBJC_IVAR___ICSystemPaperViewController_viewControllerManager;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v6);
  objc_msgSend(v5, "setViewControllerManager:", Strong);

  v8 = (void *)swift_unknownObjectWeakLoadStrong(v6);
  objc_msgSend(v5, "setDelegate:", v8);

  result = objc_msgSend(v5, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_16;
  }
  v10 = result;
  v11 = (void *)objc_opt_self(UIColor);
  v12 = objc_msgSend(v11, "systemBackgroundColor");
  objc_msgSend(v10, "setBackgroundColor:", v12);

  result = objc_msgSend(v5, "view");
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v13 = result;
  v14 = objc_msgSend(result, "layer");

  objc_msgSend(v14, "setCornerRadius:", 4.0);
  result = objc_msgSend(v5, "view");
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v15 = result;
  v16 = objc_msgSend(result, "layer");

  objc_msgSend(v16, "setCornerCurve:", kCACornerCurveContinuous);
  result = objc_msgSend(v5, "view");
  if (!result)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v17 = result;
  v18 = objc_msgSend(result, "layer");

  objc_msgSend(v18, "setMasksToBounds:", 1);
  result = objc_msgSend(v5, "view");
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v19 = result;
  v20 = objc_msgSend(result, "layer");

  v21 = objc_msgSend(v11, "separatorColor");
  v22 = objc_msgSend(v21, "CGColor");

  objc_msgSend(v20, "setShadowColor:", v22);
  result = objc_msgSend(v5, "view");
  if (!result)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v23 = result;
  v24 = objc_msgSend(result, "layer");

  objc_msgSend(v24, "setShadowOffset:", 0.0, 0.0);
  result = objc_msgSend(v5, "view");
  if (!result)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v25 = result;
  v26 = objc_msgSend(result, "layer");

  objc_msgSend(v26, "setShadowRadius:", 0.0);
  if (a1)
    objc_msgSend(v5, "setNote:", a1);
  v27 = objc_msgSend(v5, "textView");
  if (v27)
  {
    v28 = v27;
    objc_msgSend(v27, "_setCropDrawingAttachmentsWhenViewIsSmaller:", 1);

  }
  return v5;
}

void sub_1003145A0()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char **v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  UIMenuElementSize v17;
  Swift::String v18;
  Class isa;
  void *v20;
  void *v21;
  id v22;
  id v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  id v29;
  double v30;
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  double v39;
  void *v40;
  id v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  id v55;
  void *v56;
  id v57;
  id v58;
  NSString v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  NSString v63;
  double v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  id v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  NSString v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  NSString v80;
  void *v81;
  uint64_t v82;
  void *v83;
  id v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __n128 v90;
  void (*v91)(char *, uint64_t, __n128);
  char *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  __n128 v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  Swift::OpaquePointer v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  char *v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  char **v112;
  UIMenuElementSize aBlock[5];
  uint64_t v114;
  objc_super v115;
  UIImage_optional v116;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115.receiver = v1;
  v115.super_class = ObjectType;
  objc_msgSendSuper2(&v115, "viewDidLoad");
  sub_100313EDC(2);
  v7 = (char **)OBJC_IVAR___ICSystemPaperViewController_moreButton;
  v8 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_moreButton];
  if (!v8)
  {
    __break(1u);
    goto LABEL_24;
  }
  objc_msgSend(v8, "setShowsMenuAsPrimaryAction:", 1);
  v9 = *(char **)((char *)v7 + (_QWORD)v1);
  if (!v9)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v10 = (void *)objc_opt_self(UIDeferredMenuElement);
  v11 = swift_allocObject(&unk_1005682F8, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v1);
  aBlock[4] = (UIMenuElementSize)sub_1003239B0;
  v114 = v11;
  aBlock[0] = (UIMenuElementSize)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (UIMenuElementSize)sub_10031DE34;
  aBlock[3] = (UIMenuElementSize)&unk_1005689C8;
  v12 = _Block_copy(aBlock);
  v13 = v114;
  v14 = v9;
  v15 = objc_msgSend(v10, "elementWithUncachedProvider:", v12, swift_release(v13).n128_f64[0]);
  _Block_release(v12);
  sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
  v16 = sub_100012E18(&qword_1005CF6F0);
  v17 = swift_allocObject(v16, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_100456F30;
  *(_QWORD *)(v17 + 32) = v15;
  aBlock[0] = v17;
  specialized Array._endMutation()(v17);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  v116.value.super.isa = 0;
  v116.is_nil = 0;
  isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v18, (Swift::String_optional)0, v116, 0, 0xFFFFFFFFFFFFFFFFLL, aBlock[0], v101).super.super.isa;
  objc_msgSend(v14, "setMenu:", isa);

  v112 = v7;
  v20 = *(char **)((char *)v7 + (_QWORD)v1);
  if (!v20)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v7 = (char **)0xD000000000000016;
  v21 = (void *)objc_opt_self(NSBundle);
  v22 = v20;
  v111 = v21;
  v23 = objc_msgSend(v21, "mainBundle");
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend(v23, "localizedStringForKey:value:table:", v24, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v27 = v26;

  v28 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "setAccessibilityLabel:", v28, swift_bridgeObjectRelease(v27).n128_f64[0]);

  v29 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  objc_msgSend(v29, "pointSize");
  v31 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 5, 2, v30);
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v32, v31);

  v34 = OBJC_IVAR___ICSystemPaperViewController_paletteButton;
  v35 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_paletteButton];
  if (!v35)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v107 = v33;
  objc_msgSend(v35, "setImage:forState:", v33, 0);
  sub_100313B40();
  v36 = *(void **)&v1[v34];
  if (!v36)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v37 = objc_msgSend(v36, "layer");
  v38 = *(void **)&v1[v34];
  if (!v38)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  objc_msgSend(v38, "bounds");
  objc_msgSend(v37, "setCornerRadius:", v39 * 0.5);

  v40 = *(void **)&v1[v34];
  if (!v40)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v104 = v31;
  v105 = v29;
  v106 = v6;
  v41 = objc_msgSend(v40, "layer");
  objc_msgSend(v41, "setShadowRadius:", 10.0);

  v42 = *(void **)&v1[v34];
  if (!v42)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v103 = v3;
  v43 = (void *)objc_opt_self(UIColor);
  v44 = v42;
  v45 = objc_msgSend(v43, "secondaryLabelColor");
  objc_msgSend(v44, "setTintColor:", v45);

  v46 = *(void **)&v1[v34];
  if (!v46)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v47 = objc_msgSend(v46, "layer");
  objc_msgSend(v47, "setMasksToBounds:", 0);

  v48 = OBJC_IVAR___ICSystemPaperViewController_newNoteButton;
  v49 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_newNoteButton];
  if (!v49)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v110 = objc_msgSend(v49, "imageForState:", 0);
  if (v110)
  {
    v50 = *(char **)((char *)v112 + (_QWORD)v1);
    if (v50)
    {
      v109 = objc_msgSend(v50, "imageForState:", 0);
      if (!v109)
      {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000020, 0x8000000100488AC0, "MobileNotes/SystemPaperViewController.swift", 43, 2, 169, 0);
        goto LABEL_44;
      }
      v51 = OBJC_IVAR___ICSystemPaperViewController_backToNotesButton;
      v52 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_backToNotesButton];
      if (v52)
      {
        v108 = objc_msgSend(v52, "imageForState:", 0);
        if (!v108)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000027, 0x8000000100488AF0, "MobileNotes/SystemPaperViewController.swift", 43, 2, 170, 0);
          goto LABEL_44;
        }
        v102 = v4;
        v53 = *(void **)&v1[v48];
        if (v53)
        {
          v54 = v53;
          v55 = objc_msgSend(v43, "tertiaryLabelColor");
          v7 = (char **)objc_msgSend(v110, "imageWithTintColor:renderingMode:", v55, 1);

          objc_msgSend(v54, "setImage:forStates:", v7, 1);
          v56 = *(void **)&v1[v48];
          if (v56)
          {
            v57 = v56;
            v58 = objc_msgSend(v111, "mainBundle");
            v59 = String._bridgeToObjectiveC()();
            v60 = objc_msgSend(v58, "localizedStringForKey:value:table:", v59, 0, 0);

            static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
            v62 = v61;

            v63 = String._bridgeToObjectiveC()();
            *(_QWORD *)&v64 = swift_bridgeObjectRelease(v62).n128_u64[0];
            v7 = &selRef_save_;
            objc_msgSend(v57, "setAccessibilityLabel:", v63, v64);

            v65 = *(char **)((char *)v112 + (_QWORD)v1);
            if (v65)
            {
              v66 = v65;
              v67 = objc_msgSend(v43, "tertiaryLabelColor");
              v68 = objc_msgSend(v109, "imageWithTintColor:renderingMode:", v67, 1);

              objc_msgSend(v66, "setImage:forStates:", v68, 1);
              v69 = *(void **)&v1[v51];
              if (v69)
              {
                v70 = v69;
                v71 = objc_msgSend(v43, "tertiaryLabelColor");
                v72 = objc_msgSend(v108, "imageWithTintColor:renderingMode:", v71, 1);

                objc_msgSend(v70, "setImage:forStates:", v72, 1);
                v73 = *(void **)&v1[v51];
                if (v73)
                {
                  v74 = v73;
                  v75 = objc_msgSend(v111, "mainBundle");
                  v76 = String._bridgeToObjectiveC()();
                  v77 = objc_msgSend(v75, "localizedStringForKey:value:table:", v76, 0, 0);

                  static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
                  v79 = v78;

                  v80 = String._bridgeToObjectiveC()();
                  objc_msgSend(v74, "setAccessibilityLabel:", v80, swift_bridgeObjectRelease(v79).n128_f64[0]);

                  v81 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_pageControl];
                  v82 = v102;
                  if (v81)
                  {
                    objc_msgSend(v81, "setAlpha:", 0.0);
                    v83 = (void *)objc_opt_self(NSNotificationCenter);
                    v84 = objc_msgSend(v83, "defaultCenter");
                    v85 = v106;
                    NSNotificationCenter.publisher(for:object:)(ICAccountsDidChangeNotification, 0);

                    v86 = swift_allocObject(&unk_1005682F8, 24, 7);
                    swift_unknownObjectWeakInit(v86 + 16, v1);
                    v87 = sub_100019C6C((unint64_t *)&qword_1005D8FC0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
                    v88 = v103;
                    v89 = Publisher<>.sink(receiveValue:)(sub_1003239B8, v86, v103, v87);
                    v90 = swift_release(v86);
                    v91 = *(void (**)(char *, uint64_t, __n128))(v82 + 8);
                    v91(v85, v88, v90);
                    v92 = &v1[OBJC_IVAR___ICSystemPaperViewController_subscriptions];
                    swift_beginAccess(&v1[OBJC_IVAR___ICSystemPaperViewController_subscriptions], aBlock, 33, 0);
                    AnyCancellable.store(in:)(v92);
                    swift_endAccess(aBlock);
                    v93 = objc_msgSend(v83, "defaultCenter", swift_release(v89).n128_f64[0]);
                    NSNotificationCenter.publisher(for:object:)(ICNoteEditorDidChangeNoteNotification, 0);

                    v94 = swift_allocObject(&unk_1005682F8, 24, 7);
                    swift_unknownObjectWeakInit(v94 + 16, v1);
                    v95 = Publisher<>.sink(receiveValue:)(sub_1003239C0, v94, v88, v87);
                    v96 = swift_release(v94);
                    v91(v85, v88, v96);
                    swift_beginAccess(v92, aBlock, 33, 0);
                    AnyCancellable.store(in:)(v92);
                    swift_endAccess(aBlock);
                    v97 = objc_msgSend(v83, "defaultCenter", swift_release(v95).n128_f64[0]);
                    NSNotificationCenter.publisher(for:object:)(PKPencilSqueezeInteractionDidChangePaletteViewVisibilityNotification, 0);

                    v98 = swift_allocObject(&unk_1005682F8, 24, 7);
                    swift_unknownObjectWeakInit(v98 + 16, v1);
                    v99 = Publisher<>.sink(receiveValue:)(sub_1003239C8, v98, v88, v87);
                    v100 = swift_release(v98);
                    v91(v85, v88, v100);
                    swift_beginAccess(v92, aBlock, 33, 0);
                    AnyCancellable.store(in:)(v92);
                    swift_endAccess(aBlock);

                    swift_release(v99);
                    return;
                  }
                  goto LABEL_40;
                }
LABEL_39:
                __break(1u);
LABEL_40:
                __break(1u);
                goto LABEL_41;
              }
LABEL_38:
              __break(1u);
              goto LABEL_39;
            }
LABEL_37:
            __break(1u);
            goto LABEL_38;
          }
LABEL_36:
          __break(1u);
          goto LABEL_37;
        }
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
LABEL_41:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, (char *)v7 + 13, 0x8000000100488A90, "MobileNotes/SystemPaperViewController.swift", 43, 2, 168, 0);
LABEL_44:
  __break(1u);
}

void sub_1003151C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  char v8[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (char *)Strong;
    v5 = *(void **)(Strong + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
    if (v5)
      objc_msgSend(v5, "doneEditing");
    sub_100316DB8();
    v6 = (char *)swift_unknownObjectWeakLoadStrong(&v4[OBJC_IVAR___ICSystemPaperViewController_viewControllerManager]);
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v6, "closeAuxiliaryWindowAnimated:", 1);

      v4 = v7;
    }

  }
}

void sub_10031525C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_1003152B4();

  }
}

void sub_1003152B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  _QWORD v22[2];
  _QWORD v23[5];
  __int128 v24;
  __int128 v25;

  v1 = v0;
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005D8C80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Received noteEditorDidChangeNote.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  if ((*(_BYTE *)(v1 + OBJC_IVAR___ICSystemPaperViewController_isSettingCurrentNote) & 1) == 0)
  {
    Notification.object.getter(v23);
    if (v23[3])
    {
      v7 = sub_1000163BC(0, (unint64_t *)&qword_1005D8AB0, ICNoteEditorViewController_ptr);
      v8 = swift_dynamicCast(&v24, v23, (char *)&type metadata for Any + 8, v7, 6);
      if ((v8 & 1) != 0)
      {
        v10 = v24;
        v11 = (id *)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
        v12 = *(_QWORD *)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
        if ((_QWORD)v24)
        {
          v8 = swift_unknownObjectRelease(v24, v9);
          if (!v12 || v10 != v12)
            return;
        }
        else if (v12)
        {
          return;
        }
LABEL_14:
        v13 = Notification.userInfo.getter(v8);
        if (v13)
        {
          v14 = v13;
          v22[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(ICNoteEditorDidChangeNoteNotificationNewNoteKey);
          v22[1] = v15;
          AnyHashable.init<A>(_:)(v23, v22, &type metadata for String, &protocol witness table for String);
          if (*(_QWORD *)(v14 + 16) && (v16 = sub_100248ECC((uint64_t)v23), (v17 & 1) != 0))
          {
            sub_100128424(*(_QWORD *)(v14 + 56) + 32 * v16, (uint64_t)&v24);
          }
          else
          {
            v24 = 0u;
            v25 = 0u;
          }
          swift_bridgeObjectRelease(v14);
          sub_10018550C((uint64_t)v23);
          if (*((_QWORD *)&v25 + 1))
          {
            v18 = sub_1000163BC(0, (unint64_t *)&qword_1005D39F0, ICNote_ptr);
            if ((swift_dynamicCast(v23, &v24, (char *)&type metadata for Any + 8, v18, 6) & 1) != 0)
            {
              v19 = (void *)v23[0];
              if (*v11
                && (v20 = objc_msgSend(*v11, "note"), v20, v20))
              {

              }
              else
              {
                v21 = v19;
                sub_100318A54(v19, 0, 0, 0, 0);

              }
            }
            return;
          }
        }
        else
        {
          v24 = 0u;
          v25 = 0u;
        }
        sub_100012DDC((uint64_t)&v24, &qword_1005CF190);
        return;
      }
    }
    else
    {
      v8 = sub_100012DDC((uint64_t)v23, &qword_1005CF190);
    }
    v11 = (id *)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
    if (*(_QWORD *)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController))
      return;
    goto LABEL_14;
  }
}

uint64_t sub_100315594(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  aBlock[4] = sub_1003239D0;
  v22 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_1005689F0;
  v12 = _Block_copy(aBlock);
  v13 = v22;
  swift_retain(a2);
  swift_release(v13);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v17 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_10031578C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_1003157DC();

  }
}

void sub_1003157DC()
{
  char *v0;
  char *v1;
  void *Strong;
  char **v3;
  void *v4;
  unsigned int v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  unsigned int v12;
  Class isa;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  double v45;
  id v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  char *v56;
  char v57;
  void **aBlock;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;

  v1 = v0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR___ICSystemPaperViewController_toolPickerForWindow]);
  v3 = &selRef_updateHeaderViewMargins;
  if (Strong && (v4 = Strong, v5 = objc_msgSend(Strong, "isVisible"), v4, v5))
  {
    v6 = objc_msgSend(v1, "view");
    if (!v6)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v7 = v6;
    v8 = (void *)objc_opt_self(PKPencilSqueezeInteraction);
    v9 = objc_msgSend(v7, "window");

    v10 = objc_msgSend(v9, "windowScene");
    v11 = objc_msgSend(v8, "_existingInteractionForWindowScene:", v10);

    if (v11)
    {
      v12 = objc_msgSend(v11, "_paletteViewVisible");

      LODWORD(isa) = v12 ^ 1;
    }
    else
    {
      LODWORD(isa) = 1;
    }
  }
  else
  {
    LODWORD(isa) = 0;
  }
  v14 = OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundView;
  v15 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundView];
  if (v15)
  {
    v16 = objc_msgSend(v15, "superview");
    if (v16)
    {

      if ((isa & 1) == 0)
        goto LABEL_19;
LABEL_18:
      v45 = *(double *)&v1[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewOnscreenBottomConstraintConstant];
LABEL_20:
      v46 = objc_msgSend(v1, v3[145]);
      if (v46)
      {
        v47 = v46;
        objc_msgSend(v46, "layoutIfNeeded");

        v48 = (void *)objc_opt_self(UIView);
        v49 = swift_allocObject(&unk_1005685F0, 32, 7);
        *(_QWORD *)(v49 + 16) = v1;
        *(double *)(v49 + 24) = v45;
        v62 = sub_1003236AC;
        v63 = v49;
        aBlock = _NSConcreteStackBlock;
        v59 = 1107296256;
        v60 = sub_100206734;
        v61 = &unk_100568608;
        v50 = _Block_copy(&aBlock);
        v51 = v63;
        v52 = v1;
        swift_release(v51);
        v53 = swift_allocObject(&unk_100568640, 32, 7);
        *(_BYTE *)(v53 + 16) = (_BYTE)isa;
        *(_QWORD *)(v53 + 24) = v52;
        v62 = sub_1003236DC;
        v63 = v53;
        aBlock = _NSConcreteStackBlock;
        v59 = 1107296256;
        v60 = sub_10032009C;
        v61 = &unk_100568658;
        v54 = _Block_copy(&aBlock);
        v55 = v63;
        v56 = v52;
        swift_release(v55);
        objc_msgSend(v48, "ic_animateUsingSpringWithDampingRatio:response:animations:completion:", v50, v54, 0.845, 0.531);
        _Block_release(v54);
        _Block_release(v50);
        return;
      }
      __break(1u);
      goto LABEL_24;
    }
  }
  if (!(_DWORD)isa)
  {
LABEL_19:
    v45 = sub_10031FFA4();
    goto LABEL_20;
  }
  v17 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", 8);
  v18 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v17);

  objc_msgSend(v18, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v19 = objc_msgSend(v1, "view");
  if (!v19)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (!*(_QWORD *)&v1[OBJC_IVAR___ICSystemPaperViewController_paletteButton])
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v20 = v19;
  objc_msgSend(v19, "insertSubview:belowSubview:", v18);

  v21 = objc_msgSend(v18, "bottomAnchor");
  v22 = objc_msgSend(v1, "view");
  if (!v22)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v23 = v22;
  v57 = (char)isa;
  v24 = objc_msgSend(v22, "bottomAnchor");

  v25 = objc_msgSend(v21, "constraintEqualToAnchor:constant:", v24, sub_10031FFA4());
  v26 = sub_100012E18(&qword_1005CF6F0);
  v27 = swift_allocObject(v26, 64, 7);
  *(_OWORD *)(v27 + 16) = xmmword_100451BE0;
  v28 = objc_msgSend(v18, "leadingAnchor");
  v29 = objc_msgSend(v1, "view");
  if (!v29)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v30 = v29;
  v31 = objc_msgSend(v29, "leadingAnchor");

  v32 = objc_msgSend(v28, "constraintEqualToAnchor:", v31);
  *(_QWORD *)(v27 + 32) = v32;
  *(_QWORD *)(v27 + 40) = v25;
  v33 = v25;
  v34 = objc_msgSend(v18, "trailingAnchor");
  v35 = objc_msgSend(v1, "view");
  if (v35)
  {
    v36 = v35;
    v37 = (void *)objc_opt_self(NSLayoutConstraint);
    v38 = objc_msgSend(v36, "trailingAnchor");

    v39 = objc_msgSend(v34, "constraintEqualToAnchor:", v38);
    *(_QWORD *)(v27 + 48) = v39;
    v40 = objc_msgSend(v18, "heightAnchor");
    v41 = objc_msgSend(v40, "constraintEqualToConstant:", *(double *)&v1[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewHeight]);

    *(_QWORD *)(v27 + 56) = v41;
    aBlock = (void **)v27;
    specialized Array._endMutation()(v42);
    sub_1000163BC(0, (unint64_t *)&qword_1005D8F60, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v37, "activateConstraints:", isa, swift_bridgeObjectRelease(v27).n128_f64[0]);

    v43 = *(void **)&v1[v14];
    *(_QWORD *)&v1[v14] = v18;

    v44 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewBottomConstraint];
    *(_QWORD *)&v1[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewBottomConstraint] = v33;

    v3 = &selRef_updateHeaderViewMargins;
    LOBYTE(isa) = v57;
    goto LABEL_18;
  }
LABEL_29:
  __break(1u);
}

void sub_100315E30(char a1)
{
  char *v1;
  void *v3;
  char *v4;
  uint64_t v5;
  int v6;
  id v7;
  void *v8;
  _BYTE v9[24];
  objc_super v10;

  v10.receiver = v1;
  v10.super_class = (Class)swift_getObjectType(v1);
  objc_msgSendSuper2(&v10, "viewWillAppear:", a1 & 1);
  v3 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_launchImageView];
  if (v3)
  {
    v4 = &v1[OBJC_IVAR___ICSystemPaperViewController_launchPreview];
    swift_beginAccess(v4, v9, 32, 0);
    v5 = type metadata accessor for NotePreview(0);
    v6 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5);
    v7 = v3;
    v8 = 0;
    if (!v6)
      v8 = (void *)NotePreview.chrome.getter();
    swift_endAccess(v9);
    objc_msgSend(v7, "setImage:", v8);

  }
  else
  {
    __break(1u);
  }
}

void sub_100315F50(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  id v33;
  NSString v34;
  NSString v35;
  id v36;
  id v37;
  NSString v38;
  id v39;
  objc_super v40;

  v2 = v1;
  v40.receiver = v2;
  v40.super_class = (Class)swift_getObjectType(v2);
  objc_msgSendSuper2(&v40, "viewDidAppear:", a1 & 1);
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10012A0B0(v4, (uint64_t)qword_1005D8C80);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "SPVC view did appear.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v2[OBJC_IVAR___ICSystemPaperViewController_viewDidAppearAtLeastOnce] = 1;
  v9 = objc_msgSend(v2, "view");
  if (!v9)
  {
    __break(1u);
    return;
  }
  v10 = v9;
  v11 = objc_msgSend(v9, "window");

  if (v11)
  {
    v12 = objc_msgSend((id)objc_opt_self(ICInkPaletteController), "sharedToolPickerForWindow:", v11);
    if (v12)
    {
      v13 = v12;
      objc_msgSend(v12, "addObserver:", v2);

      swift_unknownObjectWeakAssign(&v2[OBJC_IVAR___ICSystemPaperViewController_toolPickerForWindow], v13);
      v11 = v13;
    }

  }
  sub_1003164A8(1);
  if (v2[OBJC_IVAR___ICSystemPaperViewController_shouldShowModernAccountAlert] == 1)
  {
    v2[OBJC_IVAR___ICSystemPaperViewController_shouldShowModernAccountAlert] = 0;
    v14 = (void *)objc_opt_self(NSBundle);
    v15 = objc_msgSend(v14, "mainBundle");
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "localizedStringForKey:value:table:", v16, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v18;

    ICInternalSettingsIsAppleAccountBrandingEnabled();
    v20 = objc_msgSend(v14, "mainBundle");
    v22 = String._bridgeToObjectiveC()();
    v23 = objc_msgSend(v20, "localizedStringForKey:value:table:", v22, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v25 = v24;

    v26 = objc_msgSend(v14, "mainBundle");
    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v26, "localizedStringForKey:value:table:", v27, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v30 = v29;

    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v31);

    v33 = objc_allocWithZone((Class)OBWelcomeController);
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v33, "initWithTitle:detailText:icon:contentLayout:", v34, v35, v32, 2, swift_bridgeObjectRelease(v25).n128_f64[0]);

    v37 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
    objc_msgSend(v37, "addTarget:action:forControlEvents:", v2, "openNotesSettings:", 64);
    v38 = String._bridgeToObjectiveC()();
    objc_msgSend(v37, "setTitle:forState:", v38, 0, swift_bridgeObjectRelease(v30).n128_f64[0]);

    v39 = objc_msgSend(v36, "buttonTray");
    objc_msgSend(v39, "addButton:", v37);

    objc_msgSend(v36, "setModalInPresentation:", 1);
    objc_msgSend(v2, "presentViewController:animated:completion:", v36, 0, 0);

  }
  else
  {
    v21 = sub_100356ED8();
    if (!v21)
      return;
    v37 = v21;
    objc_msgSend(v2, "presentViewController:animated:completion:", v21, 0, 0);
  }

}

void sub_1003164A8(char a1)
{
  char *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  id v19;
  id v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;

  v2 = v1;
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10012A0B0(v4, (uint64_t)qword_1005D8C80);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Starting UI state refresh.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend(v1, "view");
  if (!v9)
    goto LABEL_12;
  v27 = v9;
  v10 = -[NSObject window](v9, "window");

  if (!v10)
  {

LABEL_12:
    v27 = Logger.logObject.getter(v9);
    v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v21, "View wasn't ready in refreshUIStateIfPossible.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
    goto LABEL_17;
  }
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Refreshing system paper UI...", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v16 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
  if (v16)
  {
    v17 = swift_allocObject(&unk_1005689B0, 40, 7);
    *(_QWORD *)(v17 + 16) = v1;
    v18 = a1 & 1;
    *(_BYTE *)(v17 + 24) = a1 & 1;
    *(_QWORD *)(v17 + 32) = v16;
    v19 = v16;
    v20 = v2;
    sub_100319318(v16, 0, v18, 0, (uint64_t)sub_1003239A0, v17);

    swift_release(v17);
    return;
  }
  v23 = Logger.logObject.getter(v15);
  v25 = static os_log_type_t.error.getter(v23, v24);
  if (os_log_type_enabled(v23, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v25, "Expected non-nil currentNoteEditorViewController", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

LABEL_17:
}

void sub_1003167FC(char a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  void *Strong;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD aBlock[5];
  uint64_t v41;
  char v42[24];
  objc_super v43;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v8 - 8);
  v37 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43.receiver = v2;
  v43.super_class = ObjectType;
  objc_msgSendSuper2(&v43, "viewWillDisappear:", a1 & 1);
  v11 = (uint64_t *)&v2[OBJC_IVAR___ICSystemPaperViewController_emptyNoteIds];
  swift_beginAccess(&v2[OBJC_IVAR___ICSystemPaperViewController_emptyNoteIds], v42, 0, 0);
  v12 = *v11;
  if ((unint64_t)*v11 >> 62)
  {
    if (v12 < 0)
      v28 = *v11;
    else
      v28 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v13 = _CocoaArrayWrapper.endIndex.getter(v28);
    if (!v13)
      goto LABEL_13;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v12);
    if (!v13)
      goto LABEL_13;
  }
  v35 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  if (v13 < 1)
  {
    __break(1u);
    return;
  }
  v14 = 0;
  v32 = v12 & 0xC000000000000001;
  v33 = v13;
  v34 = v12;
  do
  {
    if (v32)
      v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v12);
    else
      v15 = *(id *)(v12 + 8 * v14 + 32);
    v16 = v15;
    v17 = v39;
    ++v14;
    v18 = (void *)static OS_dispatch_queue.main.getter(v15);
    v19 = swift_allocObject(&unk_100568960, 32, 7);
    *(_QWORD *)(v19 + 16) = v17;
    *(_QWORD *)(v19 + 24) = v16;
    aBlock[4] = sub_10032396C;
    v41 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100206734;
    aBlock[3] = &unk_100568978;
    v20 = _Block_copy(aBlock);
    v21 = v41;
    v22 = v17;
    v23 = v16;
    swift_release(v21);
    static DispatchQoS.unspecified.getter(v24);
    aBlock[0] = _swiftEmptyArrayStorage;
    v25 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_100012E18((uint64_t *)&unk_1005D8530);
    v27 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v5, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v5);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v10, v37);
    v12 = v34;
  }
  while (v33 != v14);
LABEL_13:
  swift_bridgeObjectRelease(v12);
  v29 = v39;
  sub_100316DB8();
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v29[OBJC_IVAR___ICSystemPaperViewController_toolPickerForWindow]);
  if (Strong)
  {
    v31 = Strong;
    objc_msgSend(Strong, "removeObserver:", v29);

  }
}

void sub_100316B44(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = (void *)sub_100316BAC(a2);
  if (v2)
  {
    v3 = v2;
    if (objc_msgSend(v2, "isEmpty"))
      objc_msgSend(v3, "markForDeletion");

  }
}

uint64_t sub_100316BAC(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v17;
  uint64_t v18;

  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR___ICSystemPaperViewController_noteCache), "objectForKey:", a1);
  if (v3)
    return (uint64_t)v3;
  v5 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "managedObjectContext");

    if (v7)
    {
      v18 = 0;
      v8 = (_QWORD *)swift_allocObject(&unk_100568500, 40, 7);
      v8[2] = v7;
      v8[3] = a1;
      v8[4] = &v18;
      v9 = swift_allocObject(&unk_100568528, 32, 7);
      *(_QWORD *)(v9 + 16) = sub_10032365C;
      *(_QWORD *)(v9 + 24) = v8;
      aBlock[4] = sub_1000165D0;
      v17 = v9;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016618;
      aBlock[3] = &unk_100568540;
      v10 = _Block_copy(aBlock);
      v11 = v17;
      v12 = v7;
      v13 = a1;
      swift_retain(v9);
      swift_release(v11);
      objc_msgSend(v12, "performBlockAndWait:", v10);

      _Block_release(v10);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v9, "", 109, 331, 36, 1);
      swift_release(v9);
      if ((isEscapingClosureAtFileLocation & 1) == 0)
      {
        v4 = v18;
        swift_release(v8);
        return v4;
      }
      __break(1u);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000035, 0x8000000100488850, "MobileNotes/SystemPaperViewController.swift", 43, 2, 326, 0);
  __break(1u);
  return result;
}

void sub_100316DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;

  v1 = v0;
  v2 = OBJC_IVAR___ICSystemPaperViewController_pageControlFadeOutTimer;
  v3 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_pageControlFadeOutTimer);
  if (v3)
  {
    v4 = qword_1005CEC88;
    v5 = v3;
    if (v4 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10012A0B0(v6, (uint64_t)qword_1005D8C80);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalidating pageControlFadeOutTimer...", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    objc_msgSend(v5, "invalidate");
    v11 = *(void **)(v1 + v2);
  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(v1 + v2) = 0;

}

void sub_100316F0C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  id v10;
  void *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;
  id v17;

  v1 = OBJC_IVAR___ICSystemPaperViewController_pageViewController;
  v2 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_pageViewController);
  if (!v2)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v3 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  v17 = *(id *)(v0 + OBJC_IVAR___ICSystemPaperViewController_pageViewController);
  if (!v3)
  {
    v16 = v2;
    v5 = 0.0;
    v6 = 0.0;
    v7 = 0.0;
    v8 = 0.0;
    goto LABEL_8;
  }
  v4 = v2;
  v5 = 0.0;
  v6 = 0.0;
  v7 = 0.0;
  v8 = 0.0;
  if ((objc_msgSend(v3, "isInkPickerShowing") & 1) == 0)
  {
LABEL_8:
    objc_msgSend(v17, "_setDisabledScrollingRegion:", v5, v6, v7, v8);

    return;
  }
  v9 = *(void **)(v0 + v1);
  if (!v9)
    goto LABEL_10;
  v10 = objc_msgSend(v9, "view");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, "bounds");
    v5 = v12;
    v6 = v13;
    v7 = v14;
    v8 = v15;

    goto LABEL_8;
  }
LABEL_11:
  __break(1u);
}

void sub_10031701C(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  _QWORD *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  _QWORD v16[5];
  _QWORD *v17;

  v3 = v2;
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10012A0B0(v6, (uint64_t)qword_1005D8C80);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Starting asyncNoteIdentifiersWithFreshSnapshot...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = sub_1003138D8();
  v12 = (_QWORD *)swift_allocObject(&unk_100568050, 40, 7);
  v12[2] = v3;
  v12[3] = a1;
  v12[4] = a2;
  v16[4] = sub_1003233D0;
  v17 = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_100206734;
  v16[3] = &unk_100568068;
  v13 = _Block_copy(v16);
  v14 = v17;
  v15 = v3;
  swift_retain(a2);
  swift_release(v14);
  objc_msgSend(v11, "reloadData:", v13);
  _Block_release(v13);

}

uint64_t sub_1003171A8(uint64_t a1, void (*a2)(_QWORD *))
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10012A0B0(v3, (uint64_t)qword_1005D8C80);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "asyncNoteIdentifiersWithFreshSnapshot indexer reloadData finished.", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_1003138D8();
  v9 = objc_msgSend(v8, "newSnapshotFromIndex");

  v10 = objc_msgSend(v9, "itemIdentifiers");
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, (char *)&type metadata for Any + 8);

  v12 = sub_100317318(v11);
  swift_bridgeObjectRelease(v11);
  if (v12)
    v13 = v12;
  else
    v13 = _swiftEmptyArrayStorage;
  a2(v13);
  return swift_bridgeObjectRelease(v13);
}

_QWORD *sub_100317318(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  id v9;
  _BYTE v10[32];
  _QWORD *v11;

  v11 = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2)
    return v11;
  for (i = a1 + 32; ; i += 32)
  {
    sub_100128424(i, (uint64_t)v10);
    v4 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    if (!swift_dynamicCast(&v9, v10, (char *)&type metadata for Any + 8, v4, 6))
      break;
    v5 = v9;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    v6 = v11[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
    v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
    specialized ContiguousArray._endMutation()(v7);
    if (!--v2)
      return v11;
  }
  v9 = 0;
  swift_release(v11);

  return 0;
}

_QWORD *sub_100317430()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;

  v0 = sub_1003138D8();
  v1 = objc_msgSend(v0, "firstRelevantItemIdentifier");
  swift_unknownObjectRelease(v1, v2);

  if (!v1)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10012A0B0(v3, (uint64_t)qword_1005D8C80);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Performing initial note identifier fetch.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = sub_1003138D8();
    objc_msgSend(v8, "reloadDataAndWait");

    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Finished initial note identifier fetch.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  v13 = sub_1003138D8();
  v14 = objc_msgSend(v13, "newSnapshotFromIndex");

  v15 = objc_msgSend(v14, "itemIdentifiers");
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, (char *)&type metadata for Any + 8);

  v17 = sub_100317318(v16);
  swift_bridgeObjectRelease(v16);
  if (!v17)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10012A0B0(v18, (uint64_t)qword_1005D8C80);
    v20 = Logger.logObject.getter(v19);
    v22 = static os_log_type_t.error.getter(v20, v21);
    if (os_log_type_enabled(v20, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v22, "[sync] Didn't get NSManagedObjectIDs from the note indexer snapshot.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    return _swiftEmptyArrayStorage;
  }
  return v17;
}

void sub_1003176F0(void *a1, void *a2, void **a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;

  v5 = objc_msgSend(a1, "ic_existingObjectWithID:", a2);
  if (v5)
  {
    v6 = v5;
    v7 = objc_opt_self(ICNote);
    v8 = swift_dynamicCastObjCClass(v6, v7);
    if (v8)
    {
      v9 = *a3;
      *a3 = (void *)v8;

      return;
    }

  }
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v10 = type metadata accessor for Logger(0);
  sub_10012A0B0(v10, (uint64_t)qword_1005D8C80);
  v18 = a2;
  v11 = Logger.logObject.getter(v18);
  v13 = static os_log_type_t.error.getter(v11, v12);
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 138412290;
    v19 = v18;
    v16 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4);
    *v15 = v18;

    _os_log_impl((void *)&_mh_execute_header, v11, v13, "Note with either didn't exist or was malformed {identifier: %@}", v14, 0xCu);
    v17 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
}

void sub_100317908()
{
  char *v0;
  void *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  id v35;
  id v36;
  id v37;
  Class isa;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  id v42;
  NSObject *oslog;
  NSObject *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(void **)&v0[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
  if (!v1 || (v2 = v0, (v3 = objc_msgSend(v1, "note")) == 0))
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10012A0B0(v22, (uint64_t)qword_1005D8C80);
    v44 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v44, v24);
    if (os_log_type_enabled(v44, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v25, "Couldn't find a note to delete.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
LABEL_19:

    return;
  }
  v44 = v3;
  v4 = swift_allocObject(&unk_100568898, 24, 7);
  v5 = sub_100317430();
  *(_QWORD *)(v4 + 16) = v5;
  v6 = -[NSObject objectID](v44, "objectID", swift_bridgeObjectRetain(v5).n128_f64[0]);
  sub_1003DA47C((uint64_t)v6, (uint64_t)v5);
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease(v5);

  if ((v10 & 1) != 0)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_10012A0B0(v27, (uint64_t)qword_1005D8C80);
    oslog = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(oslog, v29);
    if (os_log_type_enabled(oslog, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v30, "Couldn't find index of the note we're about to delete.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
      swift_release(v4);

      return;
    }
    swift_release(v4);

    goto LABEL_19;
  }
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v11 = type metadata accessor for Logger(0);
  sub_10012A0B0(v11, (uint64_t)qword_1005D8C80);
  v12 = v44;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = (id)v4;
    v16 = swift_slowAlloc(32, -1);
    v47 = v16;
    *(_DWORD *)v15 = 136315138;
    v17 = -[NSObject ic_loggingIdentifier](v12, "ic_loggingIdentifier");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v46 = sub_1003A4190(v18, v20, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v15 + 4);

    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Deleting note %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v21 = v16;
    v4 = (uint64_t)v45;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  v32 = sub_100012E18((uint64_t *)&unk_1005D5620);
  v33 = swift_allocObject(v32, 64, 7);
  *(_OWORD *)(v33 + 16) = xmmword_100451C20;
  *(_QWORD *)(v33 + 56) = sub_1000163BC(0, (unint64_t *)&qword_1005D39F0, ICNote_ptr);
  *(_QWORD *)(v33 + 32) = v12;
  v34 = v12;
  v35 = objc_msgSend(v2, "view");
  v36 = objc_msgSend(v35, "window");

  v37 = objc_allocWithZone((Class)ICDeleteDecisionController);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v39 = objc_msgSend(v37, "initWithSourceObjects:window:", isa, v36, swift_bridgeObjectRelease(v33).n128_f64[0]);

  v40 = (_QWORD *)swift_allocObject(&unk_1005688C0, 40, 7);
  v40[2] = v4;
  v40[3] = v2;
  v40[4] = v8;
  v41 = sub_1000163BC(0, (unint64_t *)&unk_1005D8FB0, &off_10054DD50);
  swift_retain(v4);
  v42 = v2;
  ICDeleteDecisionControlling.performDecision(completion:)(sub_1003238F8, v40, v41);

  swift_release(v4);
  swift_release(v40);
}

void sub_100317E58(char a1, uint64_t isEscapingClosureAtFileLocation, id a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint8_t *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  _QWORD *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint8_t *v36;
  _QWORD *v37;
  uint64_t v38;
  void **v39;
  id v40;
  void **v41;
  void *v42;
  NSObject *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  _QWORD *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  Swift::String v58;
  void *object;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *oslog;
  os_log_t osloga;
  char v66[24];
  _QWORD v67[3];
  void **v68;
  void **aBlock;
  _QWORD v70[4];
  uint64_t v71;
  char v72[24];
  char v73[32];

  LOBYTE(v7) = a1;
  if (qword_1005CEC88 != -1)
    goto LABEL_37;
  while (1)
  {
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10012A0B0(v8, (uint64_t)qword_1005D8C80);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Entering completion handler.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    oslog = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.info.getter();
    v15 = os_log_type_enabled(oslog, v14);
    if ((v7 & 1) == 0)
      break;
    isEscapingClosureAtFileLocation += 16;
    if (v15)
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Finished note delete.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = sub_100317430();
    swift_beginAccess(isEscapingClosureAtFileLocation, v73, 1, 0);
    v18 = *(_QWORD *)isEscapingClosureAtFileLocation;
    *(_QWORD *)isEscapingClosureAtFileLocation = v17;
    swift_bridgeObjectRelease(v18);
    swift_beginAccess(isEscapingClosureAtFileLocation, v72, 0, 0);
    v19 = *(_QWORD *)isEscapingClosureAtFileLocation;
    v60 = (uint64_t *)isEscapingClosureAtFileLocation;
    v61 = a4;
    if (*(_QWORD *)isEscapingClosureAtFileLocation >> 62)
    {
      if (v19 < 0)
        v51 = *(_QWORD *)isEscapingClosureAtFileLocation;
      else
        v51 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v19, 3);
      v52 = a3;
      v7 = _CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease(v19);
      if (!v7)
      {
LABEL_42:
        swift_bridgeObjectRelease_n(v19, 2);

        v54 = Logger.logObject.getter(v53);
        v55 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v54, v55))
        {
          v56 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v56 = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Adding note because we'd have no notes left to show.", v56, 2u);
          swift_slowDealloc(v56, -1, -1);
        }

        sub_100318704(0);
        return;
      }
    }
    else
    {
      v7 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v19, 2);
      v20 = a3;
      if (!v7)
        goto LABEL_42;
    }
    v21 = v19 & 0xC000000000000001;
    osloga = (os_log_t)OBJC_IVAR___ICSystemPaperViewController_noteCache;
    a4 = 4;
    v62 = v19 & 0xC000000000000001;
    v63 = v19;
    while (1)
    {
      v23 = v21 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a4 - 4, v19) : *(id *)(v19 + 8 * a4);
      v24 = v23;
      v25 = a4 - 3;
      if (__OFADD__(a4 - 4, 1))
        break;
      v26 = objc_msgSend(*(id *)((char *)&osloga->isa + (_QWORD)a3), "objectForKey:", v23);
      if (v26)
      {
        v22 = v26;

      }
      else
      {
        v27 = v7;
        v7 = (uint64_t)a3;
        v28 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
        if (!v28
          || (v29 = v28,
              v30 = objc_msgSend(v28, "managedObjectContext"),
              v29,
              !v30))
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000035, 0x8000000100488850, "MobileNotes/SystemPaperViewController.swift", 43, 2, 326, 0);
          goto LABEL_51;
        }
        v67[0] = 0;
        v31 = (_QWORD *)swift_allocObject(&unk_1005688E8, 40, 7);
        v31[2] = v30;
        v31[3] = v24;
        v31[4] = v67;
        v32 = swift_allocObject(&unk_100568910, 32, 7);
        *(_QWORD *)(v32 + 16) = sub_100323B64;
        *(_QWORD *)(v32 + 24) = v31;
        v70[3] = sub_100194900;
        v71 = v32;
        aBlock = _NSConcreteStackBlock;
        v70[0] = 1107296256;
        v70[1] = sub_100016618;
        v70[2] = &unk_100568928;
        v33 = _Block_copy(&aBlock);
        v34 = v71;
        a3 = v30;
        v35 = v24;
        swift_retain(v32);
        objc_msgSend(a3, "performBlockAndWait:", v33, swift_release(v34).n128_f64[0]);

        _Block_release(v33);
        isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v32, "", 109, 331, 36, 1);
        swift_release(v32);
        if ((isEscapingClosureAtFileLocation & 1) != 0)
          goto LABEL_36;
        v22 = (void *)v67[0];

        swift_release(v31);
        a3 = (id)v7;
        v7 = v27;
        v21 = v62;
        v19 = v63;
        if (!v22)
          goto LABEL_12;
      }
      isEscapingClosureAtFileLocation = (uint64_t)objc_msgSend(v22, "isDeletedOrInTrash");

      if (!(_DWORD)isEscapingClosureAtFileLocation)
      {

        swift_bridgeObjectRelease_n(v19, 2);
        if (__OFSUB__(v61, 1))
        {
          __break(1u);
        }
        else
        {
          v7 = (v61 - 1) & ~((v61 - 1) >> 63);
          v68 = (void **)v7;
          v37 = sub_100317430();
          v38 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
          Array.subscript.getter(&aBlock, v7, v37, v38);
          swift_bridgeObjectRelease(v37);
          v39 = aBlock;
          if (!aBlock
            || (v40 = a3,
                v41 = v39,
                v42 = (void *)sub_100316BAC(v41),
                v40,
                v41,
                v41,
                !v42))
          {
            while (1)
            {
              aBlock = 0;
              v70[0] = 0xE000000000000000;
              _StringGuts.grow(_:)(31);
              swift_bridgeObjectRelease(v70[0]);
              aBlock = (void **)0xD00000000000001DLL;
              v70[0] = 0x8000000100488950;
              v67[0] = v7;
              v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
              object = v58._object;
              String.append(_:)(v58);
              swift_bridgeObjectRelease(object);
              _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, aBlock, v70[0], "MobileNotes/SystemPaperViewController.swift", 43, 2, 393, 0);
LABEL_51:
              __break(1u);
            }
          }
          v43 = v42;
          v44 = Logger.logObject.getter(v43);
          v45 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v44, v45))
          {
            v46 = swift_slowAlloc(22, -1);
            v47 = (_QWORD *)swift_slowAlloc(8, -1);
            *(_DWORD *)v46 = 138412546;
            aBlock = (void **)&v43->isa;
            v48 = v43;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v70, v46 + 4);
            *v47 = v42;

            *(_WORD *)(v46 + 12) = 2048;
            swift_beginAccess(&v68, v66, 0, 0);
            aBlock = v68;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v70, v46 + 14);
            _os_log_impl((void *)&_mh_execute_header, v44, v45, "Setting current note after delete: %@ at index: %ld", (uint8_t *)v46, 0x16u);
            v49 = sub_100012E18(&qword_1005D3A30);
            swift_arrayDestroy(v47, 1, v49);
            swift_slowDealloc(v47, -1, -1);
            swift_slowDealloc(v46, -1, -1);
          }
          else
          {

            v44 = v43;
          }

          a4 = v43;
          sub_100318A54(v42, 1, 1, 0, 0);

          swift_beginAccess(&v68, &aBlock, 0, 0);
          v19 = (uint64_t)v68;
          swift_beginAccess(v60, v67, 0, 0);
          isEscapingClosureAtFileLocation = *v60;
          if (!((unint64_t)*v60 >> 62))
          {
            v50 = *(_QWORD *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_34:
            sub_10031909C(v19, v50, 1);

            return;
          }
        }
        if (isEscapingClosureAtFileLocation < 0)
          v57 = isEscapingClosureAtFileLocation;
        else
          v57 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
        v50 = _CocoaArrayWrapper.endIndex.getter(v57);
        swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
        goto LABEL_34;
      }
LABEL_12:
      ++a4;
      if (v25 == v7)
        goto LABEL_42;
    }
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    swift_once(&qword_1005CEC88, sub_100312D34);
  }
  if (v15)
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Cancelled note delete.", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

}

void sub_100318704(void *a1)
{
  char *v1;
  void *v2;
  uint64_t Strong;
  void *v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  __int128 v33;
  __int128 v34;

  v2 = v1;
  Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR___ICSystemPaperViewController_viewControllerManager]);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = a1;
    if (!a1)
      v6 = v2;
    v7 = a1;
    v8 = objc_msgSend(v5, "showNewNoteWithApproach:sender:animated:", 18, v6, 1);

    if (v8)
    {
      *((_QWORD *)&v34 + 1) = swift_getObjectType(v8);
      *(_QWORD *)&v33 = v8;
    }
    else
    {
      v33 = 0u;
      v34 = 0u;
    }
    v32[2] = sub_100012E18(&qword_1005CF190);
    v31 = swift_allocObject(&unk_1005683C0, 48, 7);
    sub_100012CE8((uint64_t)&v33, v31 + 16, &qword_1005CF190);
    v9 = (void *)sub_100169C70((uint64_t)&v31);
    sub_1000153C0(&v31);
    sub_100012DDC((uint64_t)&v33, &qword_1005CF190);
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v10 = type metadata accessor for Logger(0);
    sub_10012A0B0(v10, (uint64_t)qword_1005D8C80);
    v11 = v9;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v33 = v15;
      *(_DWORD *)v14 = 136315138;
      v16 = objc_msgSend(v11, "ic_loggingIdentifier");
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v31 = sub_1003A4190(v17, v19, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v14 + 4);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Created new note {note: %s}", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    v20 = v11;
    v21 = (uint64_t)sub_100317430();
    v22 = v21;
    if ((unint64_t)v21 >> 62)
    {
      if (v21 >= 0)
        v21 &= 0xFFFFFFFFFFFFFF8uLL;
      v23 = _CocoaArrayWrapper.endIndex.getter(v21);
    }
    else
    {
      v23 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v24 = v20;
    v25 = objc_msgSend(v24, "objectID");
    sub_1003DA47C((uint64_t)v25, v22);
    v27 = v26;
    v29 = v28;
    swift_bridgeObjectRelease(v22);

    if ((v29 & 1) != 0)
      v30 = 0;
    else
      v30 = v27;
    sub_10031909C(v30, v23, 1);

  }
}

void sub_100318A54(void *a1, int a2, uint64_t a3, int a4, char a5)
{
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t IsPageViewControllerCrashWorkaroundDisabled;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t v45;
  int v46;
  id v47;
  void *v48;
  int v49;
  uint64_t v50;
  id v51;
  _BYTE *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  void *v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65[4];

  v6 = v5;
  v63 = a4;
  v11 = sub_100012E18((uint64_t *)&unk_1005D8FA0);
  __chkstk_darwin(v11);
  v59 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10012A0B0(v13, (uint64_t)qword_1005D8C80);
  v15 = a1;
  v58 = v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v62 = a2;
  if (v18)
  {
    v60 = a3;
    v19 = a5;
    v20 = swift_slowAlloc(24, -1);
    v21 = swift_slowAlloc(32, -1);
    v65[0] = v21;
    *(_DWORD *)v20 = 136315650;
    v61 = a1;
    if (a1)
    {
      v22 = objc_msgSend(v15, "loggingDescription");
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v25 = v24;

    }
    else
    {
      v25 = 0xA300000000000000;
      v23 = 9732322;
    }
    v64 = sub_1003A4190(v23, v25, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v20 + 4);

    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v20 + 12) = 1024;
    LODWORD(v64) = v63 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 4, v20 + 14);
    *(_WORD *)(v20 + 18) = 1024;
    a5 = v19;
    LODWORD(v64) = v19 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 4, v20 + 20);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Setting note {note: %s} (setEditing: %{BOOL}d, showInkPicker: %{BOOL}d)", (uint8_t *)v20, 0x18u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    a3 = v60;
    a1 = v61;
  }
  else
  {

  }
  v27 = OBJC_IVAR___ICSystemPaperViewController_isSettingCurrentNote;
  v6[OBJC_IVAR___ICSystemPaperViewController_isSettingCurrentNote] = 1;
  if (*(_QWORD *)&v6[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController])
  {
LABEL_27:
    if ((v62 & 1) != 0)
    {
      IsPageViewControllerCrashWorkaroundDisabled = ICInternalSettingsIsPageViewControllerCrashWorkaroundDisabled();
      v49 = IsPageViewControllerCrashWorkaroundDisabled ^ 1;
      if (a1)
      {
LABEL_29:
        v50 = swift_allocObject(&unk_1005687A8, 43, 7);
        *(_QWORD *)(v50 + 16) = v15;
        *(_QWORD *)(v50 + 24) = v6;
        *(_QWORD *)(v50 + 32) = a3;
        *(_BYTE *)(v50 + 40) = v49;
        *(_BYTE *)(v50 + 41) = a5 & 1;
        *(_BYTE *)(v50 + 42) = v63 & 1;
        v51 = v15;
        v52 = v6;
        sub_10031701C((uint64_t)sub_1003237D8, v50);

        swift_release(v50);
LABEL_36:
        v6[v27] = 0;
        return;
      }
    }
    else
    {
      v49 = 0;
      if (a1)
        goto LABEL_29;
    }
    if (*(_QWORD *)&v6[OBJC_IVAR___ICSystemPaperViewController_pageViewController])
    {
      sub_100319318(0, 0, v49, 0, 0, 0);
    }
    else
    {
      v53 = Logger.logObject.getter(IsPageViewControllerCrashWorkaroundDisabled);
      v54 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "pageViewController wasn't available in setCurrentNote. Will pick it up later in refreshUIStateIfPossible.", v55, 2u);
        swift_slowDealloc(v55, -1, -1);
      }

    }
    goto LABEL_36;
  }
  type metadata accessor for NotePreviewProvider(0);
  v28 = (void *)static NotePreviewProvider.shared.getter();
  v61 = a1;
  v57 = v27;
  if (!a1)
  {
    v35 = 0;
    v30 = 0;
    v34 = 0;
    goto LABEL_22;
  }
  v29 = objc_msgSend(v15, "account");
  v30 = v29;
  v60 = a3;
  if (!v29)
  {
    v32 = a5;
LABEL_17:
    v34 = 0;
    goto LABEL_18;
  }
  v31 = objc_msgSend(v29, "identifier");

  v32 = a5;
  if (!v31)
  {
    v30 = 0;
    goto LABEL_17;
  }
  v30 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
  v34 = v33;

LABEL_18:
  v36 = objc_msgSend(v15, "identifier");
  if (v36)
  {
    v37 = v36;
    a1 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v35 = v38;

  }
  else
  {
    a1 = 0;
    v35 = 0;
  }
  a5 = v32;
  a3 = v60;
LABEL_22:
  v39 = (uint64_t)v59;
  NotePreviewProvider.preview(accountId:noteId:prefersDefaultFallback:)(v30, v34, a1, v35, 1);

  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v34);
  v40 = type metadata accessor for NotePreview(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
  a1 = v61;
  v41 = (uint64_t)&v6[OBJC_IVAR___ICSystemPaperViewController_launchPreview];
  swift_beginAccess(&v6[OBJC_IVAR___ICSystemPaperViewController_launchPreview], v65, 33, 0);
  sub_1003237F0(v39, v41);
  v42 = objc_msgSend(v6, "viewIfLoaded", swift_endAccess(v65).n128_f64[0]);

  v27 = v57;
  if (!v42)
    goto LABEL_27;
  v43 = *(void **)&v6[OBJC_IVAR___ICSystemPaperViewController_launchImageView];
  if (v43)
  {
    v44 = a1;
    swift_beginAccess(v41, v65, 32, 0);
    v45 = type metadata accessor for NotePreview(0);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 48))(v41, 1, v45);
    v47 = v43;
    v48 = 0;
    if (!v46)
      v48 = (void *)NotePreview.chrome.getter();
    objc_msgSend(v47, "setImage:", v48, swift_endAccess(v65).n128_f64[0]);

    a1 = v44;
    goto LABEL_27;
  }
  __break(1u);
}

id sub_10031909C(uint64_t a1, uint64_t a2, char a3)
{
  _BYTE *v3;
  uint64_t v5;
  id result;
  id v8;
  double v9;
  double v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _BYTE *v15;
  _QWORD v16[5];
  uint64_t v17;

  v5 = OBJC_IVAR___ICSystemPaperViewController_pageControl;
  result = *(id *)&v3[OBJC_IVAR___ICSystemPaperViewController_pageControl];
  if (!result)
  {
    __break(1u);
    goto LABEL_12;
  }
  objc_msgSend(result, "setNumberOfPages:", a2);
  result = *(id *)&v3[v5];
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v8 = objc_msgSend(result, "currentPage");
  result = *(id *)&v3[v5];
  if (!result)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  result = objc_msgSend(result, "setCurrentPage:", a1);
  if ((a3 & 1) == 0)
    return result;
  result = *(id *)&v3[v5];
  if (!result)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  result = objc_msgSend(result, "currentPage");
  if (result != v8)
  {
    v9 = 0.0;
    if ((v3[OBJC_IVAR___ICSystemPaperViewController_hasFinishedInitialViewRefresh] & 1) == 0)
    {
      objc_msgSend((id)objc_opt_self(ICSystemPaperConstants), "delayBeforePageControlFadesInInitially");
      v9 = v10;
    }
    v11 = (void *)objc_opt_self(UIView);
    v12 = swift_allocObject(&unk_100568258, 24, 7);
    *(_QWORD *)(v12 + 16) = v3;
    v16[4] = sub_10032358C;
    v17 = v12;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_100206734;
    v16[3] = &unk_100568270;
    v13 = _Block_copy(v16);
    v14 = v17;
    v15 = v3;
    swift_release(v14);
    objc_msgSend(v11, "animateWithDuration:delay:options:animations:completion:", 0, v13, 0, 0.25, v9);
    _Block_release(v13);
    return (id)sub_100320EF0();
  }
  return result;
}

uint64_t sub_100319318(void *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t ObjectType;
  int v61;
  int v62;
  void *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  id v67;
  _QWORD *v68;
  uint64_t aBlock[5];
  uint64_t v70;

  v64 = a5;
  v61 = a4;
  v62 = a3;
  ObjectType = swift_getObjectType(v6);
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DispatchQoS(0);
  v66 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v65 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = UUID.init()(v16);
  v20 = UUID.uuidString.getter(v19);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v23 = type metadata accessor for Logger(0);
  sub_10012A0B0(v23, (uint64_t)qword_1005D8C80);
  v24 = a1;
  swift_bridgeObjectRetain_n(v22, 2);
  v67 = v24;
  v25 = Logger.logObject.getter(v67);
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(22, -1);
    v55 = a2;
    v28 = v27;
    v54 = swift_slowAlloc(64, -1);
    aBlock[0] = v54;
    *(_DWORD *)v28 = 136315394;
    v57 = a1;
    swift_bridgeObjectRetain(v22);
    v68 = (_QWORD *)sub_1003A4190(v20, v22, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, aBlock, v28 + 4);
    swift_bridgeObjectRelease_n(v22, 3);
    *(_WORD *)(v28 + 12) = 2080;
    v68 = v57;
    v29 = v67;
    v56 = a6;
    v30 = v29;
    v31 = sub_100012E18(&qword_1005D8F40);
    v32 = String.init<A>(describing:)(&v68, v31);
    v33 = v10;
    v35 = v34;
    v68 = (_QWORD *)sub_1003A4190(v32, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, aBlock, v28 + 14);

    v36 = v35;
    v10 = v33;
    a6 = v56;
    a1 = v57;
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[sCEVC:%s] setCurrentEditorViewController invoked to set: %s. About to enter serial dispatch queue.", (uint8_t *)v28, 0x16u);
    v37 = v54;
    swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v28;
    a2 = v55;
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    v39 = v67;
    swift_bridgeObjectRelease_n(v22, 2);
  }
  v40 = v63;
  v41 = swift_allocObject(&unk_100568118, 88, 7);
  *(_QWORD *)(v41 + 16) = v20;
  *(_QWORD *)(v41 + 24) = v22;
  *(_QWORD *)(v41 + 32) = a1;
  *(_QWORD *)(v41 + 40) = v40;
  *(_BYTE *)(v41 + 48) = v61 & 1;
  *(_BYTE *)(v41 + 49) = v62 & 1;
  v42 = v64;
  *(_QWORD *)(v41 + 56) = a2;
  *(_QWORD *)(v41 + 64) = v42;
  v43 = ObjectType;
  *(_QWORD *)(v41 + 72) = a6;
  *(_QWORD *)(v41 + 80) = v43;
  aBlock[4] = (uint64_t)sub_1003234A4;
  v70 = v41;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100206734;
  aBlock[3] = (uint64_t)&unk_100568130;
  v44 = _Block_copy(aBlock);
  v45 = v67;
  v46 = v40;
  v47 = sub_100166B74(v42, a6);
  v48 = v65;
  static DispatchQoS.unspecified.getter(v47);
  v68 = _swiftEmptyArrayStorage;
  v49 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v50 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v51 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v50, v51, v10, v49);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v48, v12, v44);
  _Block_release(v44);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v48, v58);
  return swift_release(v70);
}

uint64_t sub_1003197CC(uint64_t a1, void *a2, void *a3, uint64_t a4, char a5, int a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v30 = a6;
  v31 = a7;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v15 - 8);
  v33 = v15;
  __chkstk_darwin(v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v19 = (void *)static OS_dispatch_queue.main.getter(v18);
  v20 = swift_allocObject(&unk_1005687D0, 51, 7);
  *(_QWORD *)(v20 + 16) = a1;
  *(_QWORD *)(v20 + 24) = a2;
  *(_QWORD *)(v20 + 32) = a3;
  *(_QWORD *)(v20 + 40) = a4;
  *(_BYTE *)(v20 + 48) = a5;
  *(_BYTE *)(v20 + 49) = v30;
  *(_BYTE *)(v20 + 50) = v31;
  aBlock[4] = sub_10032386C;
  v36 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_1005687E8;
  v21 = _Block_copy(aBlock);
  v22 = v36;
  swift_bridgeObjectRetain(a1);
  v23 = a2;
  v24 = a3;
  v25 = swift_release(v22);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v28 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v12, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v17, v33);
}

void sub_100319A0C(uint64_t a1, id a2, _BYTE *a3, uint64_t a4, char a5, char a6, char a7)
{
  id v14;
  __objc2_meth_list **p_inst_meths;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  __objc2_meth_list **v32;
  uint8_t *v33;
  uint8_t *v34;
  id v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  id v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  _DWORD *v47;
  uint8_t *buf;
  os_log_type_t type;
  uint64_t v50;
  NSObject *log;
  uint64_t v52;
  uint64_t v53;

  v14 = objc_msgSend(a2, "objectID");
  LOBYTE(a1) = sub_100263C7C((uint64_t)v14, a1);

  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  if ((a1 & 1) == 0)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v16 = type metadata accessor for Logger(0);
    sub_10012A0B0(v16, (uint64_t)qword_1005D8C80);
    v17 = a2;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.fault.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      log = v18;
      type = v19;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v53 = v50;
      *(_DWORD *)v20 = 136315138;
      v47 = v20 + 4;
      buf = v20;
      LOBYTE(v20) = a6;
      v21 = a5;
      v22 = objc_msgSend(v17, "ic_loggingDescription");
      v23 = a4;
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v26 = v25;

      a5 = v21;
      a6 = (char)v20;
      v27 = v24;
      a4 = v23;
      p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
      v52 = sub_1003A4190(v27, v26, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v47);

      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Snapshot didn't contain new note {note: %s}", buf, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(buf, -1, -1);

    }
    else
    {

    }
  }
  if (objc_msgSend(a2, "isDeletedOrInTrash"))
  {
    if (p_inst_meths[401] != (__objc2_meth_list *)-1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_10012A0B0(v28, (uint64_t)qword_1005D8C80);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.fault.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = p_inst_meths;
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Note is deleted or in the trash. This shouldn't happen.", v33, 2u);
      v34 = v33;
      p_inst_meths = v32;
      swift_slowDealloc(v34, -1, -1);
    }

  }
  v35 = sub_100319E94((uint64_t)a2, 1);
  v36 = OBJC_IVAR___ICSystemPaperViewController_didCreateInitialEditorController;
  objc_msgSend(v35, "setNeedsToPerformInitialPaperAnimations:", (a3[OBJC_IVAR___ICSystemPaperViewController_didCreateInitialEditorController] & 1) == 0);
  v37 = a3[v36];
  a3[v36] = 1;
  if (*(_QWORD *)&a3[OBJC_IVAR___ICSystemPaperViewController_pageViewController])
  {
    v38 = v37 ^ 1;
    v39 = swift_allocObject(&unk_100568820, 42, 7);
    *(_BYTE *)(v39 + 16) = a6 & 1;
    *(_QWORD *)(v39 + 24) = a3;
    *(_QWORD *)(v39 + 32) = v35;
    *(_BYTE *)(v39 + 40) = a7 & 1;
    *(_BYTE *)(v39 + 41) = v38;
    v40 = v35;
    v41 = a3;
    sub_100319318(v35, a4, a5 & 1, 0, (uint64_t)sub_1003238B0, v39);

    swift_release(v39);
  }
  else
  {
    if (p_inst_meths[401] != (__objc2_meth_list *)-1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_10012A0B0(v42, (uint64_t)qword_1005D8C80);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "pageViewController wasn't available in setCurrentNote. Will pick it up later in refreshUIStateIfPossible.", v46, 2u);
      swift_slowDealloc(v46, -1, -1);

    }
    else
    {

    }
  }
}

id sub_100319E94(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];

  v3 = v2;
  if ((a2 & 1) == 0)
    return sub_1003141DC(a1);
  v5 = (uint64_t *)(v2 + OBJC_IVAR___ICSystemPaperViewController_editorCachePool);
  swift_beginAccess(v3 + OBJC_IVAR___ICSystemPaperViewController_editorCachePool, v22, 0, 0);
  v6 = *v5;
  if ((unint64_t)*v5 >> 62)
  {
    if (v6 < 0)
      v9 = *v5;
    else
      v9 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v5);
    v10 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v6);
    if (!v10)
    {
LABEL_10:
      v11 = *v5;
      if ((unint64_t)v11 >> 62)
      {
        if (v11 < 0)
          v19 = v11;
        else
          v19 = v11 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v11);
        v20 = _CocoaArrayWrapper.endIndex.getter(v19);
        swift_bridgeObjectRelease(v11);
        if (!v20)
          goto LABEL_12;
      }
      else if (!*(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_12:
        if (qword_1005CEC88 != -1)
          swift_once(&qword_1005CEC88, sub_100312D34);
        v12 = type metadata accessor for Logger(0);
        v13 = sub_10012A0B0(v12, (uint64_t)qword_1005D8C80);
        v14 = Logger.logObject.getter(v13);
        v16 = static os_log_type_t.error.getter(v14, v15);
        if (os_log_type_enabled(v14, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v17 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, v16, "Tried to use an editor from the pool, but the pool didn't have any editors available.", v17, 2u);
          swift_slowDealloc(v17, -1, -1);
        }

      }
      return sub_1003141DC(a1);
    }
  }
  else if (!*(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_10;
  }
  swift_beginAccess(v5, v21, 33, 0);
  v7 = (void *)sub_10031C294();
  *(_QWORD *)&v8 = swift_endAccess(v21).n128_u64[0];
  if (!v7)
    goto LABEL_10;
  objc_msgSend(v7, "setNote:", a1, v8);
  sub_100313EDC(1);
  return v7;
}

void sub_10031A088(char a1, void *a2, NSObject *a3, char a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = __chkstk_darwin(v14);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v45 = v16;
    v46 = v15;
    v19 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
    v44 = static OS_dispatch_queue.main.getter(v19);
    v20 = swift_allocObject(&unk_100568848, 24, 7);
    *(_QWORD *)(v20 + 16) = a2;
    aBlock[4] = sub_1003238C4;
    v48 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100206734;
    aBlock[3] = &unk_100568860;
    v43 = _Block_copy(aBlock);
    v21 = v48;
    v22 = a2;
    v23 = swift_release(v21);
    static DispatchQoS.unspecified.getter(v23);
    aBlock[0] = _swiftEmptyArrayStorage;
    v24 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v42 = v11;
    v25 = a4;
    v26 = v24;
    v27 = sub_100012E18((uint64_t *)&unk_1005D8530);
    v28 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
    v29 = v26;
    LOBYTE(v26) = v25;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v10, v29);
    v31 = v43;
    v30 = (void *)v44;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v13, v43);
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v18, v46);
    if ((v26 & 1) == 0)
      goto LABEL_7;
  }
  else
  {
    -[NSObject createInkPickerControllerIfNecessary](a3, "createInkPickerControllerIfNecessary");
    if ((a4 & 1) == 0)
      goto LABEL_7;
  }
  v32 = -[NSObject textView](a3, "textView");
  if (v32)
  {
    v33 = v32;
    v34 = objc_msgSend(v33, "textStorage");
    v35 = objc_msgSend(v34, "length");

    objc_msgSend(v33, "setSelectedRange:", v35, 0);
    -[NSObject startEditing](a3, "startEditing");

  }
LABEL_7:
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_10012A0B0(v36, (uint64_t)qword_1005D8C80);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Finished setting note.", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

  if ((a5 & 1) != 0)
    sub_10031A494(a3);
}

void sub_10031A41C(uint64_t a1)
{
  id v1;
  id v2;

  v2 = *(id *)(a1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  objc_msgSend(v2, "createInkPickerControllerIfNecessary");
  v1 = objc_msgSend(v2, "inkPaletteController");
  objc_msgSend(v1, "showInkPalette:animated:", 1, 1);

}

void sub_10031A494(os_log_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  id v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  Class isa;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  os_log_t oslog;
  NSObject *osloga;
  NSObject *v41;
  uint64_t v42;

  v2 = v1;
  v4 = OBJC_IVAR___ICSystemPaperViewController_incomingLink;
  if (*(_QWORD *)&v1[OBJC_IVAR___ICSystemPaperViewController_incomingLink]
    || *(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR___ICSystemPaperViewController_incomingImageData] + 16))
  {
    v5 = OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController;
    v6 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
    if (!v6
      || (sub_1000163BC(0, (unint64_t *)&qword_1005D8AB0, ICNoteEditorViewController_ptr),
          v7 = a1,
          v8 = v6,
          v9 = static NSObject.== infix(_:_:)(v7),
          v7,
          v8,
          (v9 & 1) == 0))
    {
      if (qword_1005CEC88 != -1)
        swift_once(&qword_1005CEC88, sub_100312D34);
      v10 = type metadata accessor for Logger(0);
      sub_10012A0B0(v10, (uint64_t)qword_1005D8C80);
      v11 = a1;
      v12 = v2;
      v13 = v11;
      v14 = v12;
      v15 = Logger.logObject.getter(v14);
      v17 = static os_log_type_t.error.getter(v15, v16);
      if (os_log_type_enabled(v15, v17))
      {
        oslog = a1;
        v18 = swift_slowAlloc(22, -1);
        v19 = (_QWORD *)swift_slowAlloc(16, -1);
        *(_DWORD *)v18 = 138412546;
        v20 = *(void **)&v2[v5];
        if (v20)
        {
          v41 = *(NSObject **)&v2[v5];
          v21 = v20;
        }
        else
        {
          v41 = 0;
        }
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v18 + 4);
        *v19 = v20;

        *(_WORD *)(v18 + 12) = 2112;
        v41 = v13;
        v26 = v13;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v18 + 14);
        v19[1] = v13;

        _os_log_impl((void *)&_mh_execute_header, v15, v17, "unexpected current note editor: %@, expected: %@", (uint8_t *)v18, 0x16u);
        v27 = sub_100012E18(&qword_1005D3A30);
        swift_arrayDestroy(v19, 2, v27);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

        a1 = oslog;
      }
      else
      {

      }
    }
    if (v2[OBJC_IVAR___ICSystemPaperViewController_viewDidAppearAtLeastOnce] == 1)
    {
      v28 = *(_QWORD *)&v2[v4];
      if (v28)
      {
        -[NSObject addSystemPaperLink:updateFirstResponder:](a1, "addSystemPaperLink:updateFirstResponder:", v28, 0);
        v29 = *(void **)&v2[v4];
        *(_QWORD *)&v2[v4] = 0;

      }
      v30 = OBJC_IVAR___ICSystemPaperViewController_incomingImageData;
      v31 = *(_QWORD *)&v2[OBJC_IVAR___ICSystemPaperViewController_incomingImageData];
      if (*(_QWORD *)(v31 + 16))
      {
        swift_bridgeObjectRetain(*(_QWORD *)&v2[OBJC_IVAR___ICSystemPaperViewController_incomingImageData]);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v31);
        -[NSObject addSystemPaperImageData:updateFirstResponder:](a1, "addSystemPaperImageData:updateFirstResponder:", isa, 0);

        v33 = *(_QWORD *)&v2[v30];
        *(_QWORD *)&v2[v30] = _swiftEmptyArrayStorage;
        swift_bridgeObjectRelease(v33);
      }
    }
    else
    {
      if (qword_1005CEC88 != -1)
        swift_once(&qword_1005CEC88, sub_100312D34);
      v34 = type metadata accessor for Logger(0);
      v35 = sub_10012A0B0(v34, (uint64_t)qword_1005D8C80);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v38 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "view hasn't appeared yet; deferring adding links or images until -viewDidAppear:",
          v38,
          2u);
        swift_slowDealloc(v38, -1, -1);
      }

    }
  }
  else
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10012A0B0(v22, (uint64_t)qword_1005D8C80);
    osloga = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(osloga, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, osloga, v24, "No links or images to add", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

void sub_10031AA58(uint64_t a1, unint64_t a2, void *a3, void *a4, int a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  void **v29;
  void *v30;
  uint64_t v31;
  void **v32;
  void **v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  void **v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t);
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  void **v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  void (*v74)(char *, uint64_t);
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void **aBlock;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  void *v100;
  void *v101;
  _QWORD *v102;

  v89 = a8;
  LODWORD(v83) = a5;
  v15 = type metadata accessor for DispatchTime(0);
  v87 = *(_QWORD *)(v15 - 8);
  v88 = v15;
  v16 = __chkstk_darwin(v15);
  v18 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v86 = (char *)&v78 - v19;
  v93 = type metadata accessor for DispatchWorkItemFlags(0);
  v85 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v92 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for DispatchQoS(0);
  v84 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v90 = (char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10012A0B0(v22, (uint64_t)qword_1005D8C80);
  v24 = swift_bridgeObjectRetain_n(a2, 2);
  v94 = v23;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter();
  v27 = os_log_type_enabled(v25, v26);
  v95 = a1;
  if (v27)
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = (void **)swift_slowAlloc(32, -1);
    v82 = (uint64_t)a3;
    v81 = v18;
    v30 = a4;
    v31 = a7;
    v32 = v29;
    aBlock = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain(a2);
    v96 = sub_1003A4190(v95, a2, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &aBlock, v28 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[sCEVC:%s] entered editorViewControllerUpdateDispatchQueue.", v28, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    v33 = v32;
    a7 = v31;
    a4 = v30;
    v18 = v81;
    a3 = (void *)v82;
    swift_slowDealloc(v33, -1, -1);
    v34 = v28;
    a1 = v95;
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v82 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v35 = (void *)static OS_dispatch_queue.main.getter(v82);
  v36 = swift_allocObject(&unk_100568168, 64, 7);
  *(_QWORD *)(v36 + 16) = a1;
  *(_QWORD *)(v36 + 24) = a2;
  *(_QWORD *)(v36 + 32) = a3;
  *(_QWORD *)(v36 + 40) = a4;
  *(_BYTE *)(v36 + 48) = v83 & 1;
  *(_BYTE *)(v36 + 49) = a6 & 1;
  *(_QWORD *)(v36 + 56) = a7;
  v101 = sub_100323510;
  v102 = (_QWORD *)v36;
  aBlock = _NSConcreteStackBlock;
  v98 = 1107296256;
  v99 = sub_100206734;
  v100 = &unk_100568180;
  v37 = _Block_copy(&aBlock);
  v38 = a1;
  v39 = v102;
  v40 = a3;
  v83 = a4;
  swift_bridgeObjectRetain(a2);
  v41 = swift_release(v39);
  v42 = v90;
  static DispatchQoS.unspecified.getter(v41);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v43 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v44 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v45 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  v46 = v92;
  v80 = v44;
  v79 = v45;
  v47 = v93;
  v81 = (char *)v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v44, v45, v93, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v42, v46, v37);
  _Block_release(v37);

  v48 = *(void (**)(char *, uint64_t))(v85 + 8);
  v48(v46, v47);
  v85 = *(_QWORD *)(v84 + 8);
  ((void (*)(char *, uint64_t))v85)(v42, v91);
  v49 = swift_bridgeObjectRetain_n(a2, 2);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = (void **)swift_slowAlloc(32, -1);
    aBlock = v53;
    *(_DWORD *)v52 = 136315138;
    swift_bridgeObjectRetain(a2);
    v96 = sub_1003A4190(v38, a2, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &aBlock, v52 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "[sCEVC:%s] waiting to get picked up in editorViewControllerUpdateDispatchQueue.", v52, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);

  }
  else
  {

    v54 = swift_bridgeObjectRelease_n(a2, 2);
  }
  static DispatchTime.now()(v54);
  v55 = v86;
  + infix(_:_:)(v18, 1.0);
  v56 = v88;
  v57 = *(void (**)(char *, uint64_t))(v87 + 8);
  v57(v18, v88);
  v58 = OS_dispatch_semaphore.wait(timeout:)(v55);
  v57(v55, v56);
  v59 = swift_bridgeObjectRetain_n(a2, 2);
  v60 = Logger.logObject.getter(v59);
  v62 = v60;
  if ((v58 & 1) == 0)
  {
    v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = (void **)swift_slowAlloc(32, -1);
      aBlock = v65;
      *(_DWORD *)v64 = 136315138;
      swift_bridgeObjectRetain(a2);
      v96 = sub_1003A4190(v95, a2, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &aBlock, v64 + 4);
      swift_bridgeObjectRelease_n(a2, 3);
      v66 = "[sCEVC:%s] Received UIPVC callback.";
      goto LABEL_14;
    }
LABEL_16:

    swift_bridgeObjectRelease_n(a2, 2);
    v67 = v89;
    if (!v89)
      return;
    goto LABEL_17;
  }
  v63 = static os_log_type_t.error.getter(v60, v61);
  if (!os_log_type_enabled(v62, v63))
    goto LABEL_16;
  v64 = (uint8_t *)swift_slowAlloc(12, -1);
  v65 = (void **)swift_slowAlloc(32, -1);
  aBlock = v65;
  *(_DWORD *)v64 = 136315138;
  swift_bridgeObjectRetain(a2);
  v96 = sub_1003A4190(v95, a2, (uint64_t *)&aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &aBlock, v64 + 4);
  swift_bridgeObjectRelease_n(a2, 3);
  v66 = "[sCEVC:%s] Timed out waiting for UIPVC callback.";
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v62, v63, v66, v64, 0xCu);
  swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v65, -1, -1);
  swift_slowDealloc(v64, -1, -1);

  v67 = v89;
  if (v89)
  {
LABEL_17:
    v68 = swift_retain(a9);
    v69 = (void *)static OS_dispatch_queue.main.getter(v68);
    v70 = (_QWORD *)swift_allocObject(&unk_1005681B8, 48, 7);
    v70[2] = v95;
    v70[3] = a2;
    v70[4] = v67;
    v70[5] = a9;
    v101 = sub_100323554;
    v102 = v70;
    aBlock = _NSConcreteStackBlock;
    v98 = 1107296256;
    v99 = sub_100206734;
    v100 = &unk_1005681D0;
    v71 = _Block_copy(&aBlock);
    v72 = v102;
    swift_bridgeObjectRetain(a2);
    sub_100166B74(v67, a9);
    v73 = swift_release(v72);
    v74 = v48;
    v75 = v90;
    static DispatchQoS.unspecified.getter(v73);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v77 = v92;
    v76 = v93;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v80, v79, v93, v81);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v75, v77, v71);
    _Block_release(v71);

    sub_100012C50(v67, a9);
    v74(v77, v76);
    ((void (*)(char *, uint64_t))v85)(v75, v91);
  }
}

void sub_10031B378(uint64_t a1, unint64_t a2, void *a3, char *a4, char a5, char a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  id v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  void *v55;
  id v56;
  void *v57;
  void *v58;
  id v59;
  Class isa;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  os_log_type_t type;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v73;
  uint64_t aBlock[5];
  uint64_t v75;

  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v10 = type metadata accessor for Logger(0);
  sub_10012A0B0(v10, (uint64_t)qword_1005D8C80);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  v67 = a7;
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    aBlock[0] = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    v73 = sub_1003A4190(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v14 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[sCEVC:%s] entered MT.", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  if (a3)
  {
    v16 = sub_100012E18(&qword_1005CF6F0);
    v17 = swift_allocObject(v16, 40, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100456F30;
    *(_QWORD *)(v17 + 32) = a3;
    aBlock[0] = v17;
    specialized Array._endMutation()(v17);
    v18 = *(void **)&a4[OBJC_IVAR___ICSystemPaperViewController_pageViewController];
    if (!v18)
    {
      __break(1u);
      goto LABEL_32;
    }
    v19 = (_QWORD *)aBlock[0];
    v20 = a3;
    v21 = objc_msgSend(v18, "viewControllers");
    if (v21)
    {
      v22 = v21;
      v23 = sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
      v24 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v22, v23);

      v25 = sub_100263CF4((uint64_t)v20, v24);
      swift_bridgeObjectRelease(v24);
    }
    else
    {

      v25 = 0;
    }
    a6 &= v25 ^ 1;
  }
  else
  {
    v25 = 0;
    v19 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain_n(a2, 2);
  v26 = swift_bridgeObjectRetain_n(v19, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter();
  v68 = a6;
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(22, -1);
    v66 = swift_slowAlloc(64, -1);
    aBlock[0] = v66;
    *(_DWORD *)v29 = 136315394;
    type = v28;
    swift_bridgeObjectRetain(a2);
    v73 = sub_1003A4190(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v29 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v29 + 12) = 2080;
    v30 = sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
    swift_bridgeObjectRetain(v19);
    v32 = Array.description.getter(v31, v30);
    v34 = v33;
    swift_bridgeObjectRelease(v19);
    v73 = sub_1003A4190(v32, v34, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v29 + 14);
    v35 = v19;
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v27, type, "[sCEVC:%s] viewControllers: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    v35 = v19;
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  v36 = swift_bridgeObjectRetain_n(a2, 2);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(18, -1);
    v40 = swift_slowAlloc(32, -1);
    aBlock[0] = v40;
    *(_DWORD *)v39 = 136315394;
    swift_bridgeObjectRetain(a2);
    v73 = sub_1003A4190(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v39 + 4);
    v41 = a2;
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v39 + 12) = 1024;
    LODWORD(v73) = v25 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, (char *)&v73 + 4, v39 + 14);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "[sCEVC:%s] alreadyPresent: %{BOOL}d", (uint8_t *)v39, 0x12u);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    v42 = v35;
    if ((v25 & 1) == 0)
    {
LABEL_23:
      v49 = v41;
      v50 = swift_bridgeObjectRetain_n(v41, 2);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        aBlock[0] = v54;
        *(_DWORD *)v53 = 136315138;
        swift_bridgeObjectRetain(v49);
        v73 = sub_1003A4190(a1, v49, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v53 + 4);
        swift_bridgeObjectRelease_n(v49, 3);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "[sCEVC:%s] Setting VCs...", v53, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v41, 2);
      }
      v55 = *(void **)&a4[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
      *(_QWORD *)&a4[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController] = a3;
      v56 = a3;

      v57 = *(void **)&a4[OBJC_IVAR___ICSystemPaperViewController_launchImageView];
      if (v57)
      {
        objc_msgSend(v57, "setHidden:", 1);
        v58 = *(void **)&a4[OBJC_IVAR___ICSystemPaperViewController_pageViewController];
        if (v58)
        {
          sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
          v59 = v58;
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v42);
          v61 = swift_allocObject(&unk_100568208, 24, 7);
          *(_QWORD *)(v61 + 16) = a4;
          aBlock[4] = (uint64_t)sub_100323560;
          v75 = v61;
          aBlock[0] = (uint64_t)_NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = (uint64_t)sub_100343CD8;
          aBlock[3] = (uint64_t)&unk_100568220;
          v62 = _Block_copy(aBlock);
          v63 = v75;
          v64 = a4;
          swift_release(v63);
          objc_msgSend(v59, "setViewControllers:direction:animated:completion:", isa, v67, v68 & 1, v62);
          _Block_release(v62);

          return;
        }
        goto LABEL_33;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      return;
    }
  }
  else
  {

    v41 = a2;
    swift_bridgeObjectRelease_n(a2, 2);
    v42 = v35;
    if ((v25 & 1) == 0)
      goto LABEL_23;
  }
  if ((a5 & 1) != 0)
    goto LABEL_23;
  swift_bridgeObjectRelease(v42);
  v43 = v41;
  v44 = swift_bridgeObjectRetain_n(v41, 2);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    aBlock[0] = v48;
    *(_DWORD *)v47 = 136315138;
    swift_bridgeObjectRetain(v43);
    v73 = sub_1003A4190(a1, v43, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, aBlock, v47 + 4);
    swift_bridgeObjectRelease_n(v43, 3);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "[sCEVC:%s] Signaling because already present.", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v41, 2);
  }
  OS_dispatch_semaphore.signal()();
}

uint64_t sub_10031BD04(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v6 = type metadata accessor for Logger(0);
  sub_10012A0B0(v6, (uint64_t)qword_1005D8C80);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v15 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_bridgeObjectRetain(a2);
    v14 = sub_1003A4190(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[sCEVC:%s] calling completion handler...", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    v12 = swift_bridgeObjectRelease_n(a2, 2);
  }
  return a3(v12);
}

void sub_10031BEB8(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  NSObject *oslog;

  sub_1003221A8();
  sub_100316F0C();
  sub_1003157DC();
  sub_10031A494(a3);
  *(_BYTE *)(a1 + OBJC_IVAR___ICSystemPaperViewController_hasFinishedInitialViewRefresh) = 1;
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10012A0B0(v5, (uint64_t)qword_1005D8C80);
  oslog = Logger.logObject.getter(v6);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Refresh finished.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

}

void sub_10031BFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  char v32;
  id v33;
  id v34;
  _BYTE v35[24];
  uint64_t v36;

  sub_100012CE8(a1, (uint64_t)v35, &qword_1005CF190);
  if (!v36)
  {
    sub_100012DDC((uint64_t)v35, &qword_1005CF190);
    return;
  }
  v7 = sub_1000163BC(0, (unint64_t *)&unk_1005D8F50, NSTextAttachment_ptr);
  if ((swift_dynamicCast(&v34, v35, (char *)&type metadata for Any + 8, v7, 6) & 1) == 0)
    return;
  v8 = v34;
  v9 = objc_msgSend(v34, "fileType");
  if (v9)
  {
    v10 = v9;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v13 = v12;

    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICAttachmentUTTypeSystemPaper);
    if (v11 != v14 || v13 != v15)
    {
      v17 = v15;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
      swift_bridgeObjectRelease(v17);
      if ((v18 & 1) != 0)
      {
LABEL_12:
        v22 = swift_bridgeObjectRelease(v13);
        goto LABEL_13;
      }
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICAttachmentUTTypeInlineDrawing);
      v21 = v19;
      if (v11 != v20 || v13 != v19)
      {
        v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v20, v19, 0);
        swift_bridgeObjectRelease(v21);
        v22 = swift_bridgeObjectRelease(v13);
        if ((v32 & 1) == 0)
          goto LABEL_23;
LABEL_13:
        if (ICInternalSettingsIsTextKit2Enabled(v22))
        {
          v23 = objc_msgSend(a5, "textLayoutManager");
          if (v23)
          {
            v24 = v23;
            v25 = objc_msgSend(v23, "documentRange");
            v26 = objc_msgSend(v25, "location");

            v27 = objc_msgSend(v24, "locationFromLocation:withOffset:", v26, a2);
            swift_unknownObjectRelease(v26, v28);
            if (v27)
            {
              v29 = objc_msgSend(a5, "textContainer");
              v30 = objc_msgSend(v8, "viewProviderForParentView:location:textContainer:", a5, v27, v29);

              swift_unknownObjectRelease(v27, v31);
LABEL_22:

              v33 = v30;
              goto LABEL_23;
            }

          }
        }
        v24 = objc_msgSend(a5, "layoutManager");
        v30 = objc_msgSend(v8, "viewProviderForParentView:characterIndex:layoutManager:", a5, a2, v24);
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease(v13);
    goto LABEL_12;
  }
LABEL_23:

}

unint64_t sub_10031C294()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *v0;
  if (!((unint64_t)*v0 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
    return 0;
  }
  if (v1 < 0)
    v5 = *v0;
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v0);
  v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease(v1);
  if (!v6)
    return 0;
LABEL_3:
  result = sub_100321FA0();
  if (!result)
  {
    v3 = *v0;
    if ((unint64_t)*v0 >> 62)
    {
      if (v3 < 0)
        v7 = *v0;
      else
        v7 = v3 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v0);
      v8 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v3);
      result = v8 - 1;
      if (!__OFSUB__(v8, 1))
        return sub_100312B58(result);
    }
    else
    {
      v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = v4 - 1;
      if (!__OFSUB__(v4, 1))
        return sub_100312B58(result);
    }
    __break(1u);
  }
  return result;
}

id sub_10031C35C(void *a1, char *a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  void ***v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  NSObject *v32;
  uint64_t v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  void **v37;
  uint64_t v38;
  id v39;
  _QWORD *v41;
  uint64_t v42;
  void **v43;
  id v44;
  void **v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  void **v67;
  uint64_t v68;
  char *v69;
  void **aBlock;
  _QWORD v71[4];
  _QWORD *v72;

  v69 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v68 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100317430();
  v12 = objc_msgSend(a1, "note");
  if (!v12
    || (v13 = v12, v14 = objc_msgSend(v12, "objectID"), v13, !v14))
  {
    swift_bridgeObjectRelease(v11);
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v21 = type metadata accessor for Logger(0);
    sub_10012A0B0(v21, (uint64_t)qword_1005D8C80);
    v22 = a1;
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.error.getter(v23, v24);
    if (os_log_type_enabled(v23, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138412290;
      aBlock = v22;
      v28 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v71, v26 + 4);
      *v27 = v22;

      _os_log_impl((void *)&_mh_execute_header, v23, v25, "Couldn't get current note identifier {editorViewController: %@}", v26, 0xCu);
      v29 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v15 = v14;
  sub_1003DA47C((uint64_t)v14, (uint64_t)v11);
  if ((v17 & 1) != 0)
  {
    swift_bridgeObjectRelease(v11);
    if (qword_1005CEC88 == -1)
      goto LABEL_17;
    goto LABEL_32;
  }
  if (__OFADD__(v16, v69))
  {
    __break(1u);
LABEL_32:
    swift_once(&qword_1005CEC88, sub_100312D34);
LABEL_17:
    v30 = type metadata accessor for Logger(0);
    sub_10012A0B0(v30, (uint64_t)qword_1005D8C80);
    v31 = (void **)v14;
    v32 = Logger.logObject.getter(v31);
    v34 = static os_log_type_t.error.getter(v32, v33);
    if (os_log_type_enabled(v32, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      aBlock = v31;
      v37 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v71, v35 + 4);
      *v36 = v14;

      _os_log_impl((void *)&_mh_execute_header, v32, v34, "Couldn't get index of note identifier fetchedNoteIdentifiers {currentNoteIdentifier: %@}", v35, 0xCu);
      v38 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  if (((unint64_t)&v69[v16] & 0x8000000000000000) == 0)
  {
    v66 = v14;
    v67 = (void **)&v69[v16];
    v18 = (uint64_t)sub_100317430();
    v15 = (id)v18;
    if ((unint64_t)v18 >> 62)
    {
      if (v18 >= 0)
        v18 &= 0xFFFFFFFFFFFFFF8uLL;
      v19 = _CocoaArrayWrapper.endIndex.getter(v18);
    }
    else
    {
      v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v15);
    if (__OFSUB__(v19, 1))
    {
      __break(1u);
    }
    else
    {
      v15 = v66;
      v20 = v67;
      if (v19 - 1 < (uint64_t)v67)
        goto LABEL_10;
      v41 = sub_100317430();
      v42 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      Array.subscript.getter(&aBlock, v20, v41, v42);
      swift_bridgeObjectRelease(v41);
      v43 = aBlock;
      if (aBlock)
      {
        v44 = v2;
        v45 = v43;
        v46 = (void *)sub_100316BAC(v45);

        if (v46)
        {
          v47 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
          v65 = static OS_dispatch_queue.main.getter(v47);
          v48 = (_QWORD *)swift_allocObject(&unk_100568460, 48, 7);
          v49 = v69;
          v48[2] = v67;
          v48[3] = v49;
          v48[4] = v11;
          v48[5] = v44;
          v71[3] = sub_100323648;
          v72 = v48;
          aBlock = _NSConcreteStackBlock;
          v71[0] = 1107296256;
          v71[1] = sub_100206734;
          v71[2] = &unk_100568478;
          v50 = _Block_copy(&aBlock);
          v51 = v72;
          v69 = (char *)v44;
          swift_release(v51);
          static DispatchQoS.unspecified.getter(v52);
          aBlock = (void **)_swiftEmptyArrayStorage;
          v53 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v54 = sub_100012E18((uint64_t *)&unk_1005D8530);
          v55 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
          dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v54, v55, v4, v53);
          v56 = (void *)v65;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v50);
          _Block_release(v50);

          (*(void (**)(char *, uint64_t))(v68 + 8))(v6, v4);
          (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
          v57 = v46;
          v39 = sub_100319E94((uint64_t)v46, 1);

          return v39;
        }
        swift_bridgeObjectRelease(v11);
        v15 = v66;
      }
      else
      {
        swift_bridgeObjectRelease(v11);
      }
      if (qword_1005CEC88 == -1)
      {
LABEL_28:
        v58 = type metadata accessor for Logger(0);
        v59 = sub_10012A0B0(v58, (uint64_t)qword_1005D8C80);
        v60 = Logger.logObject.getter(v59);
        v62 = static os_log_type_t.error.getter(v60, v61);
        if (os_log_type_enabled(v60, v62))
        {
          v63 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v63 = 134217984;
          aBlock = v67;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v71, v63 + 4);
          _os_log_impl((void *)&_mh_execute_header, v60, v62, "Couldn't fetch a note {index: %ld}", v63, 0xCu);
          swift_slowDealloc(v63, -1, -1);

        }
        else
        {

        }
        return 0;
      }
    }
    swift_once(&qword_1005CEC88, sub_100312D34);
    goto LABEL_28;
  }
LABEL_10:

  swift_bridgeObjectRelease(v11);
  return 0;
}

void sub_10031CAAC(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;

  v6 = a1 + a2;
  if (__OFADD__(a1, a2))
  {
    __break(1u);
  }
  else
  {
    if (v6 < 1)
      return;
    v4 = a4;
    v5 = a3;
    if (!(a3 >> 62))
    {
      v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
      v8 = v7 - 1;
      if (!__OFSUB__(v7, 1))
        goto LABEL_5;
LABEL_20:
      __break(1u);
LABEL_21:
      swift_once(&qword_1005CEC88, sub_100312D34);
LABEL_10:
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10012A0B0(v17, (uint64_t)qword_1005D8C80);
      v16 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.error.getter(v16, v19);
      if (os_log_type_enabled(v16, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v21 = 134217984;
        v24 = (void *)v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v21 + 4);
        _os_log_impl((void *)&_mh_execute_header, v16, v20, "Couldn't cache note for index: %ld", v21, 0xCu);
        swift_slowDealloc(v21, -1, -1);
      }
      goto LABEL_12;
    }
  }
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v23 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v8 = v23 - 1;
  if (__OFSUB__(v23, 1))
    goto LABEL_20;
LABEL_5:
  if (v6 >= v8)
    return;
  v9 = sub_100317430();
  v10 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  Array.subscript.getter(&v24, v6, v9, v10);
  swift_bridgeObjectRelease(v9);
  v11 = v24;
  if (!v24
    || (v12 = v4,
        v13 = v11,
        v14 = (void *)sub_100316BAC(v13),
        v12,
        v13,
        v13,
        !v14))
  {
    if (qword_1005CEC88 == -1)
      goto LABEL_10;
    goto LABEL_21;
  }
  v15 = *(id *)&v12[OBJC_IVAR___ICSystemPaperViewController_noteCache];
  v16 = objc_msgSend(v14, "objectID");
  objc_msgSend(v15, "setObject:forKey:", v14, v16);

LABEL_12:
}

void sub_10031CF34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  double y;
  double width;
  double height;
  id v20;
  id v21;
  id v22;
  id v23;
  char *v24;
  Class isa;
  uint64_t v26;
  uint64_t v27;
  NSString *v28;
  NSString *v29;
  NSArray v30;
  uint64_t v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  char v37[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v37, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (char *)Strong;
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10012A0B0(v5, (uint64_t)qword_1005D8C80);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "More Menu: Tapped share", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController;
    v11 = *(id *)&v4[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
    if (v11 && (v11 = objc_msgSend(v11, "note")) != 0)
    {
      v12 = v11;
      v13 = *(void **)&v4[v10];
      if (v13)
      {
        v14 = v13;
        if ((objc_msgSend(v14, "isInkPickerShowing") & 1) != 0)
          objc_msgSend(v14, "showInkPicker:animated:", 0, 1);
        v15 = objc_msgSend(v14, "inkPaletteController");
        if (v15)
        {
          v16 = v15;
          objc_msgSend(v15, "showInkPalette:animated:", 0, 1);

        }
        y = CGRectNull.origin.y;
        width = CGRectNull.size.width;
        height = CGRectNull.size.height;
        v20 = *(id *)&v4[OBJC_IVAR___ICSystemPaperViewController_moreButton];
        v21 = objc_msgSend(v14, "eventReporter");
        v22 = objc_allocWithZone((Class)ICSendNoteActivity);
        v23 = v12;
        v24 = v4;
        isa = (Class)objc_msgSend(v22, "initWithNote:presentingViewController:presentingBarButtonItem:presentingSourceView:presentingSourceRect:eventReporter:", v23, v24, 0, v20, v21, CGRectNull.origin.x, y, width, height);

        v26 = sub_100012E18((uint64_t *)&unk_1005D8FC8);
        v27 = swift_allocObject(v26, 48, 7);
        *(_OWORD *)(v27 + 16) = xmmword_100454E90;
        *(_QWORD *)(v27 + 32) = UIActivityTypeMarkupAsPDF;
        *(_QWORD *)(v27 + 40) = UIActivityTypeAssignToContact;
        type metadata accessor for ActivityType(0);
        v28 = UIActivityTypeMarkupAsPDF;
        v29 = UIActivityTypeAssignToContact;
        v30.super.isa = Array._bridgeToObjectiveC()().super.isa;
        -[objc_class performActivityWithExcludedTypes:completion:](isa, "performActivityWithExcludedTypes:completion:", v30.super.isa, 0, swift_bridgeObjectRelease(v27).n128_f64[0]);

      }
      else
      {
        v30.super.isa = (Class)Logger.logObject.getter(v11);
        v35 = static os_log_type_t.error.getter(v30.super.isa, v34);
        if (os_log_type_enabled((os_log_t)v30.super.isa, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v30.super.isa, v35, "Couldn't get currentNoteEditorViewController.", v36, 2u);
          swift_slowDealloc(v36, -1, -1);

          isa = (Class)v12;
        }
        else
        {

          isa = (Class)v4;
          v30.super.isa = (Class)v12;
        }
      }
    }
    else
    {
      v30.super.isa = (Class)Logger.logObject.getter(v11);
      v32 = static os_log_type_t.error.getter(v30.super.isa, v31);
      if (os_log_type_enabled((os_log_t)v30.super.isa, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v30.super.isa, v32, "Couldn't find a note to use for sharing.", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
        isa = (Class)v4;
      }
      else
      {
        isa = v30.super.isa;
        v30.super.isa = (Class)v4;
      }
    }

  }
}

void sub_10031D334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  _BYTE v10[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10012A0B0(v5, (uint64_t)qword_1005D8C80);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "More Menu: Tapped delete", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    sub_100317908();
  }
}

void sub_10031D43C(void (*a1)(__n128), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t Strong;
  char *v6;
  char v7;
  id v8;
  void *v9;
  unsigned int v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSString v17;
  id v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  unint64_t v55;
  _QWORD v56[2];
  char v57;
  ValueMetadata *v58;
  unint64_t v59;
  char v60[24];
  unint64_t v61;

  v4 = a3 + 16;
  v61 = (unint64_t)_swiftEmptyArrayStorage;
  swift_beginAccess(a3 + 16, v60, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v4);
  if (!Strong)
  {
    ((void (*)(_QWORD *))a1)(_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return;
  }
  v6 = (char *)Strong;
  v58 = &type metadata for PencilAndPaperFeature;
  v59 = sub_10013FAD0();
  v56[0] = "ScreenshotsInQuickNote";
  v56[1] = 22;
  v57 = 2;
  v7 = isFeatureEnabled(_:)(v56);
  sub_1000153C0(v56);
  if ((v7 & 1) != 0)
  {
    v8 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
    if (!v8)
    {
      __break(1u);
      return;
    }
    v9 = v8;
    v10 = objc_msgSend(v8, "isScreenShotAllowed");

    if (v10)
    {
      sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
      v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v12 = String._bridgeToObjectiveC()();
      v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);

      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v17 = String._bridgeToObjectiveC()();
      v18 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v17);

      v19 = swift_allocObject(&unk_1005682F8, 24, 7);
      swift_unknownObjectWeakInit(v19 + 16, v6);
      v20 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v14, v16, 0, 0, v18, 0, 0, 0, 0, 0, 0, sub_100323A14, v19);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      v22 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v21 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v22 >= v21 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
      v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
      specialized Array._endMutation()(v23);

    }
  }
  v24 = *(void **)&v6[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
  if (v24)
  {
    v25 = objc_msgSend(v24, "note");
    if (v25)
    {
      v26 = v25;
      if ((objc_msgSend(v25, "isEmpty") & 1) == 0)
      {
        v27 = swift_allocObject(&unk_1005682F8, 24, 7);
        swift_unknownObjectWeakInit(v27 + 16, v6);
        sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
        v28 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v29 = String._bridgeToObjectiveC()();
        v30 = objc_msgSend(v28, "localizedStringForKey:value:table:", v29, 0, 0);

        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v33 = v32;

        v34 = String._bridgeToObjectiveC()();
        v35 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v34);

        v36 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v31, v33, 0, 0, v35, 0, 0, 0, 0, 0, 0, sub_100323A0C, v27);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
        v37 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v38 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v37 >= v38 >> 1)
        {
          v55 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v37 + 1, 1);
          v37 = v55;
        }
        v39 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v36);
        specialized Array._endMutation()(v39);
      }

    }
  }
  v40 = swift_allocObject(&unk_1005682F8, 24, 7);
  swift_unknownObjectWeakInit(v40 + 16, v6);
  sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
  v41 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v41, "localizedStringForKey:value:table:", v42, 0, 0);

  v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v46 = v45;

  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v47);

  v49 = UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v44, v46, 0, 0, v48, 0, 0, 0, 0, 2, 0, sub_100323A04, v40);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v49);
  v51 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v50 = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v51 >= v50 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v50 > 1, v51 + 1, 1);
  v52 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v51, v49);
  specialized Array._endMutation()(v52);

  v53 = v61;
  v54 = swift_bridgeObjectRetain(v61);
  a1(v54);
  swift_bridgeObjectRelease_n(v53, 2);
}

uint64_t sub_10031DA90(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  id v6;
  _QWORD v7[4];
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v7[3] = sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v7[0] = a1;
    v6 = a1;
    sub_10031DB14();

    return sub_1000153C0(v7);
  }
  return result;
}

void sub_10031DB14()
{
  char *v0;
  char *v1;
  char v2;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, void *);
  ValueMetadata *v27;
  unint64_t v28;
  uint64_t v29;

  v1 = v0;
  v27 = &type metadata for PencilAndPaperFeature;
  v28 = sub_10013FAD0();
  v24 = (void **)"ScreenshotsInQuickNote";
  v25 = 22;
  LOBYTE(v26) = 2;
  v2 = isFeatureEnabled(_:)(&v24);
  sub_1000153C0(&v24);
  if ((v2 & 1) == 0)
    return;
  v3 = objc_msgSend((id)objc_opt_self(MCProfileConnection), "sharedConnection");
  if (!v3)
  {
    __break(1u);
    goto LABEL_16;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "isScreenShotAllowed");

  if (v5)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10012A0B0(v6, (uint64_t)qword_1005D8C80);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Tapped screenshot button", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(void **)&v1[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v1, "view");
      if (v13)
      {
        v14 = v13;
        v15 = objc_msgSend(v13, "window");

        if (v15 && (v16 = objc_msgSend(v15, "windowScene"), v15, v16))
        {
          v17 = sub_10031DF08(v16);
          v18 = swift_allocObject(&unk_1005686B8, 24, 7);
          *(_QWORD *)(v18 + 16) = sub_1001367C0((uint64_t)_swiftEmptyArrayStorage);
          v19 = (void *)objc_opt_self(CATransaction);
          objc_msgSend(v19, "begin");
          sub_10031E2F4((unint64_t)v17, v18 + 16);
          objc_msgSend(v19, "commit");
          swift_bridgeObjectRelease(v17);
          v20 = swift_allocObject(&unk_1005686E0, 24, 7);
          swift_unknownObjectWeakInit(v20 + 16, v12);
          v21 = swift_allocObject(&unk_100568708, 32, 7);
          *(_QWORD *)(v21 + 16) = v18;
          *(_QWORD *)(v21 + 24) = v20;
          v28 = (unint64_t)sub_10032375C;
          v29 = v21;
          v24 = _NSConcreteStackBlock;
          v25 = 1107296256;
          v26 = sub_10031EBE4;
          v27 = (ValueMetadata *)&unk_100568720;
          v22 = _Block_copy(&v24);
          v23 = v29;
          swift_retain(v18);
          swift_release(v23);
          sub_1001016E8(v16, v22);
          _Block_release(v22);

          swift_release(v18);
        }
        else
        {

        }
        return;
      }
LABEL_16:
      __break(1u);
    }
  }
}

uint64_t sub_10031DE34(uint64_t a1, void *aBlock)
{
  uint64_t v2;
  void (*v3)(void (*)(uint64_t), uint64_t);
  void *v4;
  uint64_t v5;

  v3 = *(void (**)(void (*)(uint64_t), uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject(&unk_100568A28, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  swift_retain(v2);
  v3(sub_1003239FC, v5);
  swift_release(v2);
  return swift_release(v5);
}

void sub_10031DEA4(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

_QWORD *sub_10031DF08(void *a1)
{
  void *v2;
  _QWORD *result;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  char v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSString *v13;
  Class v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  unint64_t v23;
  id v24;
  void *v25;
  id v26;
  objc_class *v27;
  uint64_t v28;
  id v29;
  uint64_t ObjCClassMetadata;
  uint64_t ObjectType;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  unint64_t v44;

  v2 = (void *)objc_opt_self(UIWindow);
  result = objc_msgSend(v2, "_applicationKeyWindow");
  if (!result)
  {
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  v4 = result;
  v5 = objc_msgSend(result, "windowScene");

  if (!v5)
    return _swiftEmptyArrayStorage;
  v6 = sub_1000163BC(0, &qword_1005D8F98, UIWindowScene_ptr);
  v7 = a1;
  v8 = v5;
  v42 = v6;
  v9 = static NSObject.== infix(_:_:)(v8);

  v43 = v7;
  if ((v9 & 1) == 0)
    return _swiftEmptyArrayStorage;
  result = objc_msgSend(v2, "allWindowsIncludingInternalWindows:onlyVisibleWindows:", 1, 1);
  if (result)
  {
    v10 = result;
    v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, (char *)&type metadata for Any + 8);

    v12 = (uint64_t)sub_1002B05A8(v11);
    swift_bridgeObjectRelease(v11);
    v13 = (NSString *)String._bridgeToObjectiveC()();
    v14 = NSClassFromString(v13);

    if ((unint64_t)v12 >> 62)
      goto LABEL_35;
    v15 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    v16 = v7;
LABEL_7:
    if (v15)
    {
      v17 = 0;
      v44 = v12 & 0xC000000000000001;
      v18 = v12 & 0xFFFFFFFFFFFFFF8;
      do
      {
        if (v44)
        {
          v21 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v12);
        }
        else
        {
          if (v17 >= *(_QWORD *)(v18 + 16))
          {
            __break(1u);
LABEL_34:
            __break(1u);
LABEL_35:
            if (v12 < 0)
              v40 = v12;
            else
              v40 = v12 & 0xFFFFFFFFFFFFFF8;
            v41 = v43;
            v15 = _CocoaArrayWrapper.endIndex.getter(v40);
            goto LABEL_7;
          }
          v21 = *(id *)(v12 + 8 * v17 + 32);
        }
        v22 = v21;
        v23 = v17 + 1;
        if (__OFADD__(v17, 1))
          goto LABEL_34;
        v24 = objc_msgSend(v21, "windowScene");
        if (v24)
        {
          v25 = v24;
          v26 = v43;
          v27 = v14;
          v28 = v12;
          v29 = v25;
          LOBYTE(v25) = static NSObject.== infix(_:_:)(v29);

          v12 = v28;
          v14 = v27;

          if ((v25 & 1) != 0)
            goto LABEL_9;
        }
        if (v14
          && (ObjectType = swift_getObjectType(v22),
              ObjCClassMetadata = swift_getObjCClassMetadata(v14),
              ObjectType == ObjCClassMetadata))
        {
LABEL_9:
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(ObjCClassMetadata);
          v19 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
          v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v22);
          specialized ContiguousArray._endMutation()(v20);
        }
        else
        {

        }
        ++v17;
      }
      while (v23 != v15);
    }
    swift_bridgeObjectRelease(v12);

    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0
      || ((unint64_t)_swiftEmptyArrayStorage & 0x4000000000000000) != 0)
    {
      v32 = _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage);
      if (v32)
        goto LABEL_25;
    }
    else
    {
      v32 = _swiftEmptyArrayStorage[2];
      if (v32)
      {
LABEL_25:
        result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v32);
        if ((v32 & 0x8000000000000000) == 0)
        {
          v33 = 0;
          do
          {
            if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001) != 0)
              v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v33, _swiftEmptyArrayStorage);
            else
              v34 = (id)_swiftEmptyArrayStorage[v33 + 4];
            v35 = v34;
            ++v33;
            v36 = objc_msgSend(v34, "layer", v42);

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v37);
            v38 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v38);
            v39 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v36);
            specialized ContiguousArray._endMutation()(v39);
          }
          while (v32 != v33);
          goto LABEL_31;
        }
        __break(1u);
        goto LABEL_42;
      }
    }
LABEL_31:
    swift_release(_swiftEmptyArrayStorage);
    return _swiftEmptyArrayStorage;
  }
LABEL_43:
  __break(1u);
  return result;
}

void sub_10031E2F4(unint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;
  char **v13;
  unsigned int v14;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;

  v3 = a1;
  if (a1 >> 62)
  {
LABEL_25:
    if (v3 < 0)
      v30 = v3;
    else
      v30 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v30);
    if (v4)
      goto LABEL_3;
LABEL_29:
    swift_bridgeObjectRelease(v3);
    return;
  }
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v4)
    goto LABEL_29;
LABEL_3:
  v32 = v3;
  v33 = v3 & 0xC000000000000001;
  v5 = 4;
  v6 = &selRef_predicateWithFormat_argumentArray_;
  while (1)
  {
    v9 = v5 - 4;
    if (v33)
    {
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3);
      v11 = v5 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_22;
    }
    else
    {
      v10 = *(id *)(v3 + 8 * v5);
      v11 = v5 - 3;
      if (__OFADD__(v9, 1))
      {
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    v34 = v11;
    v3 = v4;
    v12 = v10;
    v13 = v6;
    v14 = objc_msgSend(v12, v6[422]);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)a2);
    v16 = *(_QWORD *)a2;
    v35 = *(_QWORD **)a2;
    v17 = (uint64_t *)a2;
    *(_QWORD *)a2 = 0x8000000000000000;
    a2 = sub_100249468((uint64_t)v12);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = (v18 & 1) == 0;
    v21 = v19 + v20;
    if (__OFADD__(v19, v20))
      goto LABEL_23;
    v22 = v18;
    if (*(_QWORD *)(v16 + 24) < v21)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      v25 = v35;
      if ((v18 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_100250FC8();
      v25 = v35;
      if ((v22 & 1) != 0)
      {
LABEL_4:
        *(_DWORD *)(v25[7] + 4 * a2) = v14;
        goto LABEL_5;
      }
    }
LABEL_18:
    v25[(a2 >> 6) + 8] |= 1 << a2;
    *(_QWORD *)(v25[6] + 8 * a2) = v12;
    *(_DWORD *)(v25[7] + 4 * a2) = v14;
    v26 = v25[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_24;
    v25[2] = v28;
    v29 = v12;
LABEL_5:
    a2 = (unint64_t)v17;
    v7 = *v17;
    *v17 = (uint64_t)v25;

    v6 = v13;
    objc_msgSend(v12, "setDisableUpdateMask:", objc_msgSend(v12, v13[422], swift_bridgeObjectRelease(v7).n128_f64[0]) | 2);

    ++v5;
    v4 = v3;
    v8 = v34 == v3;
    v3 = v32;
    if (v8)
      goto LABEL_29;
  }
  sub_10024D988(v21, isUniquelyReferenced_nonNull_native);
  v23 = sub_100249468((uint64_t)v12);
  if ((v22 & 1) == (v24 & 1))
  {
    a2 = v23;
    v25 = v35;
    if ((v22 & 1) != 0)
      goto LABEL_4;
    goto LABEL_18;
  }
  v31 = sub_1000163BC(0, &qword_1005D8F90, CALayer_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v31);
  __break(1u);
}

uint64_t sub_10031E560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[5];
  _QWORD *v29;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v11 - 8);
  v26 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = (_QWORD *)swift_allocObject(&unk_100568758, 48, 7);
  v16[2] = a3;
  v16[3] = a1;
  v16[4] = a2;
  v16[5] = a4;
  aBlock[4] = sub_1003237A0;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_100568770;
  v17 = _Block_copy(aBlock);
  v18 = v29;
  swift_retain(a3);
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(a2);
  swift_retain(a4);
  swift_release(v18);
  static DispatchQoS.unspecified.getter(v19);
  aBlock[0] = _swiftEmptyArrayStorage;
  v20 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v22 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v13, v26);
}

void sub_10031E794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  void *Strong;
  void *v23;
  id v24;
  NSArray v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41[3];
  uint64_t v42;
  _BYTE v43[24];

  v7 = a1 + 16;
  v8 = a4 + 16;
  v9 = (void *)objc_opt_self(CATransaction);
  objc_msgSend(v9, "begin");
  swift_beginAccess(v7, v43, 0, 0);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v10 + 64;
  v12 = 1 << *(_BYTE *)(v10 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & *(_QWORD *)(v10 + 64);
  v15 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain(v10);
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_5;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v19 >= v15)
      goto LABEL_21;
    v20 = *(_QWORD *)(v11 + 8 * v19);
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v15)
        goto LABEL_21;
      v20 = *(_QWORD *)(v11 + 8 * v16);
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v15)
          goto LABEL_21;
        v20 = *(_QWORD *)(v11 + 8 * v16);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v14 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_5:
    objc_msgSend(*(id *)(*(_QWORD *)(v10 + 48) + 8 * v18), "setDisableUpdateMask:", *(unsigned int *)(*(_QWORD *)(v10 + 56) + 4 * v18));
  }
  v21 = v19 + 3;
  if (v21 < v15)
  {
    v20 = *(_QWORD *)(v11 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        v16 = v21 + 1;
        if (__OFADD__(v21, 1))
          break;
        if (v16 >= v15)
          goto LABEL_21;
        v20 = *(_QWORD *)(v11 + 8 * v16);
        ++v21;
        if (v20)
          goto LABEL_20;
      }
LABEL_35:
      __break(1u);
LABEL_36:
      swift_once(&qword_1005CEC88, sub_100312D34);
LABEL_25:
      v26 = type metadata accessor for Logger(0);
      sub_10012A0B0(v26, (uint64_t)qword_1005D8C80);
      swift_errorRetain(a3);
      v27 = swift_errorRetain(a3);
      v25.super.isa = (Class)Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v25.super.isa, v28);
      if (os_log_type_enabled((os_log_t)v25.super.isa, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        v41[0] = v31;
        *(_DWORD *)v30 = 136315138;
        v42 = a3;
        swift_errorRetain(a3);
        v32 = sub_100012E18(&qword_1005D8F88);
        v33 = String.init<A>(describing:)(&v42, v32);
        v35 = v34;
        v42 = sub_1003A4190(v33, v34, v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v30 + 4);
        swift_bridgeObjectRelease(v35);
        swift_errorRelease(a3);
        swift_errorRelease(a3);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v25.super.isa, v29, "failed to capture screenshot from system paper: {error: %s}", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {
        swift_errorRelease(a3);
        swift_errorRelease(a3);
      }
LABEL_33:

      return;
    }
    v16 = v21;
    goto LABEL_20;
  }
LABEL_21:
  objc_msgSend(v9, "commit", swift_release(v10).n128_f64[0]);
  if (!a2)
  {
    if (qword_1005CEC88 != -1)
      goto LABEL_36;
    goto LABEL_25;
  }
  swift_beginAccess(v8, v41, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v8);
  if (Strong)
  {
    v23 = Strong;
    v24 = objc_msgSend(Strong, "ic_isTextInputSourcePencil");
    v25.super.isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v23, "addSystemPaperImageData:updateFirstResponder:forceAddToPaper:", v25.super.isa, 0, v24);

    goto LABEL_33;
  }
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_10012A0B0(v36, (uint64_t)qword_1005D8C80);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "editor destroyed while waiting for screenshot; ignoring image data",
      v40,
      2u);
    swift_slowDealloc(v40, -1, -1);
  }

}

uint64_t sub_10031EBE4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for Data);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

void sub_10031ED08()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  void (*v20)(char *, char *, uint64_t);
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t inited;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Class isa;
  id v31;
  id v32;
  void *v33;
  id v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t *v44;
  uint64_t v45;
  id v46;
  NSObject *v47;
  uint64_t v48;
  os_log_type_t v49;
  uint8_t *v50;
  void **v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  void **aBlock;
  uint64_t v77;
  void (*v78)(uint64_t, void *, void *);
  void *v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  _BYTE v82[176];
  uint64_t v83;
  _BYTE v84[8];
  uint64_t v85;
  uint64_t v86;

  v1 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v1);
  v3 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v72 - v9;
  objc_msgSend((id)objc_opt_self(SYSystemPaperAnalytics), "logDismissEvent:", SYSystemPaperDismissMethodReturnToApp);
  v11 = objc_msgSend(v0, "view");
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(v11, "window");

    v74 = objc_msgSend(v13, "_windowHostingScene");
    v14 = OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController;
    v15 = *(void **)&v0[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
    if (v15 && (v16 = objc_msgSend(v15, "note")) != 0)
    {
      v17 = v16;
      v18 = objc_msgSend((id)objc_opt_self(ICAppURLUtilities), "appURLForContainingFolderWithNoteFocused:", v16);
      if (v18)
      {
        v19 = v18;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v18);

        v20 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
        v20(v3, v8, v4);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
        {
          v20(v10, v3, v4);
          if (v74)
          {
            v21 = objc_msgSend(v74, "_sceneIdentifier");
            v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
            v73 = v22;

            v23 = sub_100012E18((uint64_t *)&unk_1005D86E0);
            inited = swift_initStackObject(v23, v82);
            *(_OWORD *)(inited + 16) = xmmword_100454E90;
            aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPayloadURL);
            v77 = v25;
            AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &aBlock, &type metadata for String, &protocol witness table for String);
            *(_QWORD *)(inited + 96) = v4;
            v26 = sub_10012D160((_QWORD *)(inited + 72));
            (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v26, v10, v4);
            aBlock = (void **)static String._unconditionallyBridgeFromObjectiveC(_:)(SBSOpenApplicationOptionKeySceneIdentifier);
            v77 = v27;
            AnyHashable.init<A>(_:)((_QWORD *)(inited + 104), &aBlock, &type metadata for String, &protocol witness table for String);
            *(_QWORD *)(inited + 168) = &type metadata for String;
            v28 = v73;
            *(_QWORD *)(inited + 144) = v75;
            *(_QWORD *)(inited + 152) = v28;
            v29 = sub_100136444(inited);
            isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v29);
            v31 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationOptions), "optionsWithDictionary:", isa);

            v32 = (id)SBSCreateOpenApplicationService();
            if (!v32)
            {
              if (qword_1005CEC88 != -1)
                swift_once(&qword_1005CEC88, sub_100312D34);
              v66 = type metadata accessor for Logger(0);
              v67 = sub_10012A0B0(v66, (uint64_t)qword_1005D8C80);
              v68 = Logger.logObject.getter(v67);
              v70 = static os_log_type_t.error.getter(v68, v69);
              if (os_log_type_enabled(v68, v70))
              {
                v71 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v71 = 0;
                _os_log_impl((void *)&_mh_execute_header, v68, v70, "Couldn't acquire SBSCreateOpenApplicationService endpoint.", v71, 2u);
                swift_slowDealloc(v71, -1, -1);
              }

              goto LABEL_36;
            }
            v33 = v32;
            v34 = *(id *)&v0[v14];
            if (v34)
              v34 = objc_msgSend(v34, "doneEditing");
            v35 = (id)ICNotesAppBundleIdentifier(v34);
            if (!v35)
            {
              static String._unconditionallyBridgeFromObjectiveC(_:)(0);
              v37 = v36;
              v35 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v37);
            }
            v80 = sub_10031F868;
            v81 = 0;
            aBlock = _NSConcreteStackBlock;
            v77 = 1107296256;
            v78 = sub_1002EA0EC;
            v79 = &unk_100568680;
            v38 = _Block_copy(&aBlock);
            objc_msgSend(v33, "openApplication:withOptions:completion:", v35, v31, v38);
            _Block_release(v38);

          }
          else
          {
            if (qword_1005CEC88 != -1)
              swift_once(&qword_1005CEC88, sub_100312D34);
            v56 = type metadata accessor for Logger(0);
            v57 = sub_10012A0B0(v56, (uint64_t)qword_1005D8C80);
            v35 = Logger.logObject.getter(v57);
            v59 = static os_log_type_t.error.getter(v35, v58);
            if (os_log_type_enabled(v35, v59))
            {
              v60 = (uint8_t *)swift_slowAlloc(12, -1);
              v61 = (void **)swift_slowAlloc(32, -1);
              aBlock = v61;
              *(_DWORD *)v60 = 136315138;
              v75 = (v60 + 4);
              v83 = 0;
              v62 = sub_100012E18((uint64_t *)&unk_1005D8F70);
              v63 = String.init<A>(describing:)(&v83, v62);
              v65 = v64;
              v83 = sub_1003A4190(v63, v64, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v75);
              swift_bridgeObjectRelease(v65);
              _os_log_impl((void *)&_mh_execute_header, v35, v59, "Couldn't extract scene identifier from scene {scene: %s}", v60, 0xCu);
              swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v61, -1, -1);
              swift_slowDealloc(v60, -1, -1);
            }

          }
LABEL_36:
          (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
          return;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
      }
      sub_100012DDC((uint64_t)v3, &qword_1005CEFD0);
      if (qword_1005CEC88 != -1)
        swift_once(&qword_1005CEC88, sub_100312D34);
      v45 = type metadata accessor for Logger(0);
      sub_10012A0B0(v45, (uint64_t)qword_1005D8C80);
      v46 = v17;
      v47 = Logger.logObject.getter(v46);
      v49 = static os_log_type_t.error.getter(v47, v48);
      if (os_log_type_enabled(v47, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = (void **)swift_slowAlloc(32, -1);
        aBlock = v51;
        *(_DWORD *)v50 = 136315138;
        v52 = objc_msgSend(v46, "ic_loggingIdentifier");
        v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        v55 = v54;

        v83 = sub_1003A4190(v53, v55, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v50 + 4);

        swift_bridgeObjectRelease(v55);
        _os_log_impl((void *)&_mh_execute_header, v47, v49, "Couldn't get URL for note {note: %s}", v50, 0xCu);
        swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v51, -1, -1);
        swift_slowDealloc(v50, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      if (qword_1005CEC88 != -1)
        swift_once(&qword_1005CEC88, sub_100312D34);
      v39 = type metadata accessor for Logger(0);
      v40 = sub_10012A0B0(v39, (uint64_t)qword_1005D8C80);
      v75 = Logger.logObject.getter(v40);
      v42 = static os_log_type_t.error.getter(v75, v41);
      if (os_log_type_enabled(v75, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v75, v42, "No note was marked as currentNote.", v43, 2u);
        swift_slowDealloc(v43, -1, -1);

        v44 = &v86;
      }
      else
      {

        v44 = &v85;
      }

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10031F868(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *oslog;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  uint64_t v20;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v3 = type metadata accessor for Logger(0);
    sub_10012A0B0(v3, (uint64_t)qword_1005D8C80);
    swift_errorRetain(a2);
    v4 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(oslog, v5);
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v20 = v8;
      *(_DWORD *)v7 = 136315138;
      swift_getErrorValue(a2, v19, v18);
      v9 = Error.localizedDescription.getter(v18[1], v18[2]);
      v11 = v10;
      v17 = sub_1003A4190(v9, v10, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18, v7 + 4);
      swift_bridgeObjectRelease(v11);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Encountered error trying to jump back to Note {error: %s}", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

      swift_errorRelease(a2);
      return;
    }
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10012A0B0(v12, (uint64_t)qword_1005D8C80);
    oslog = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Successfully transitioned back to Notes.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
  }

}

void sub_10031FC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  NSURL *v8;
  void *v9;
  void *v10;
  unint64_t v11;
  Class isa;
  void *v13;
  void *Strong;
  void *v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v6)
  {
    v7 = v6;
    URL.init(stringLiteral:)("prefs:root=NOTES", 16, 2);
    URL._bridgeToObjectiveC()(v8);
    v10 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v11 = sub_1001356D4((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v7, "openSensitiveURL:withOptions:", v10, isa, swift_bridgeObjectRelease(v11).n128_f64[0]);

    v13 = *(void **)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
    if (v13)
      objc_msgSend(v13, "doneEditing");
    sub_100316DB8();
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR___ICSystemPaperViewController_viewControllerManager);
    if (Strong)
    {
      v15 = Strong;
      objc_msgSend(Strong, "closeAuxiliaryWindowAnimated:", 1);

    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10031FD9C(void *a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *))
{
  id v7;
  uint64_t v8;
  _QWORD v10[4];

  swift_unknownObjectRetain(a3);
  v7 = a1;
  _bridgeAnyObjectToAny(_:)(v10, a3);
  swift_unknownObjectRelease(a3, v8);
  a4(v10);

  return sub_1000153C0(v10);
}

id sub_10031FE0C(void *a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id result;

  v2 = objc_msgSend(a1, "destinationViewController");
  v3 = objc_opt_self(UIPageViewController);
  v4 = swift_dynamicCastObjCClass(v2, v3);
  if (!v4)
  {

    v4 = 0;
  }
  v5 = OBJC_IVAR___ICSystemPaperViewController_pageViewController;
  v6 = *(void **)(v1 + OBJC_IVAR___ICSystemPaperViewController_pageViewController);
  *(_QWORD *)(v1 + OBJC_IVAR___ICSystemPaperViewController_pageViewController) = v4;

  result = *(id *)(v1 + v5);
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }
  objc_msgSend(result, "setDataSource:", v1);
  result = *(id *)(v1 + v5);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  objc_msgSend(result, "setDelegate:", v1);
  result = *(id *)(v1 + v5);
  if (result)
    return objc_msgSend(result, "ic_setAutoscrollEnabled:", 0);
LABEL_9:
  __break(1u);
  return result;
}

double sub_10031FFA4()
{
  uint64_t v0;
  _BYTE *v1;
  double result;

  v1 = (_BYTE *)(v0
               + OBJC_IVAR___ICSystemPaperViewController____lazy_storage___toolPickerBackgroundViewOffscreenBottomConstraintConstant);
  if ((*(_BYTE *)(v0
                 + OBJC_IVAR___ICSystemPaperViewController____lazy_storage___toolPickerBackgroundViewOffscreenBottomConstraintConstant
                 + 8) & 1) == 0)
    return *(double *)v1;
  result = *(double *)(v0 + OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewHeight)
         + *(double *)(v0 + OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewHeight);
  *(double *)v1 = result;
  v1[8] = 0;
  return result;
}

void sub_10031FFDC(char *a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)&a1[OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundViewBottomConstraint];
  if (v2)
    objc_msgSend(v2, "setConstant:");
  v3 = objc_msgSend(a1, "view");
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, "layoutIfNeeded");

  }
  else
  {
    __break(1u);
  }
}

void sub_100320050(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5;
  void *v6;

  if ((a3 & 1) == 0 && (a1 & 1) != 0)
  {
    v5 = OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundView;
    v6 = *(void **)(a4 + OBJC_IVAR___ICSystemPaperViewController_toolPickerBackgroundView);
    if (v6)
    {
      objc_msgSend(v6, "removeFromSuperview");
      v6 = *(void **)(a4 + v5);
    }
    *(_QWORD *)(a4 + v5) = 0;

  }
}

uint64_t sub_10032009C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  v6 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v6(a2, a3);
  return swift_release(v5);
}

BOOL sub_1003200F4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = *(void **)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  if (!v3 || (v4 = objc_msgSend(v3, "note")) == 0)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10012A0B0(v16, (uint64_t)qword_1005D8C80);
    v5 = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v18, "No current note, can't determine whether or not a swipe is possible.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    goto LABEL_24;
  }
  v5 = v4;
  v6 = sub_100317430();
  v7 = -[NSObject objectID](v5, "objectID");
  sub_1003DA47C((uint64_t)v7, (uint64_t)v6);
  v9 = v8;
  v11 = v10;
  swift_bridgeObjectRelease(v6);

  if ((v11 & 1) != 0)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10012A0B0(v20, (uint64_t)qword_1005D8C80);
    v22 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.error.getter(v22, v23);
    if (!os_log_type_enabled(v22, v24))
      goto LABEL_23;
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    v26 = "Can't find index of current note to determine whether or not a swipe is possible.";
    goto LABEL_22;
  }
  if (a1 == 1)
  {

    return v9 > 0;
  }
  if (a1)
  {
    if (qword_1005CEC88 == -1)
      goto LABEL_20;
  }
  else
  {
    v12 = (uint64_t)sub_100317430();
    v13 = v12;
    if ((unint64_t)v12 >> 62)
    {
      if (v12 >= 0)
        v12 &= 0xFFFFFFFFFFFFFF8uLL;
      v14 = _CocoaArrayWrapper.endIndex.getter(v12);
    }
    else
    {
      v14 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v13);

    if (!__OFSUB__(v14, 1))
      return v9 < v14 - 1;
    __break(1u);
  }
  swift_once(&qword_1005CEC88, sub_100312D34);
LABEL_20:
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10012A0B0(v27, (uint64_t)qword_1005D8C80);
  v22 = Logger.logObject.getter(v28);
  v24 = static os_log_type_t.error.getter(v22, v29);
  if (os_log_type_enabled(v22, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    v26 = "Unsupported swipe direction.";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v22, v24, v26, v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }
LABEL_23:

LABEL_24:
  return 0;
}

void sub_100320428(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;

  v3 = *(void **)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  if (!v3)
  {
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10012A0B0(v7, (uint64_t)qword_1005D8C80);
    v48 = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v48, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v9, "No current note editor VC, can't synthesize swipe.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }
    goto LABEL_31;
  }
  v48 = *(NSObject **)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  if (a1 == 1)
  {
    v11 = v48;
    v5 = v48;
    v6 = -1;
  }
  else if (a1)
  {
    v12 = qword_1005CEC88;
    v13 = v3;
    if (v12 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10012A0B0(v14, (uint64_t)qword_1005D8C80);
    v16 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.error.getter(v16, v17);
    if (os_log_type_enabled(v16, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "Unsupported swipe direction.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v6 = 0;
    v5 = v48;
  }
  else
  {
    v4 = v48;
    v5 = v48;
    v6 = 1;
  }
  v20 = sub_10031C35C(v5, (char *)v6);
  if (v20)
  {
    v21 = v20;
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v22 = type metadata accessor for Logger(0);
    sub_10012A0B0(v22, (uint64_t)qword_1005D8C80);
    v23 = v21;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v47 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 134218242;
      v49 = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 4);
      *(_WORD *)(v26 + 12) = 2112;
      v49 = (uint64_t)v23;
      v27 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v26 + 14);
      *v47 = v21;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Synthesizing swipe with offset %ld to set new note editor view controller: %@", (uint8_t *)v26, 0x16u);
      v28 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v47, 1, v28);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

    }
    v35 = v23;
    sub_100319318(v21, a1, 1, 0, 0, 0);
    v36 = objc_msgSend(v35, "note");

    v37 = (uint64_t)sub_100317430();
    v38 = v37;
    if ((unint64_t)v37 >> 62)
    {
      if (v37 >= 0)
        v37 &= 0xFFFFFFFFFFFFFF8uLL;
      v39 = _CocoaArrayWrapper.endIndex.getter(v37);
      if (v36)
        goto LABEL_27;
    }
    else
    {
      v39 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v36)
      {
LABEL_27:
        v40 = v36;
        v41 = objc_msgSend(v40, "objectID");
        sub_1003DA47C((uint64_t)v41, v38);
        v43 = v42;
        v45 = v44;
        swift_bridgeObjectRelease(v38);

        if ((v45 & 1) != 0)
          v46 = 0;
        else
          v46 = v43;
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease(v38);
    v46 = 0;
LABEL_36:
    sub_10031909C(v46, v39, 1);

    goto LABEL_37;
  }
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_10012A0B0(v29, (uint64_t)qword_1005D8C80);
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.error.getter(v31, v32);
  if (!os_log_type_enabled(v31, v33))
  {

LABEL_31:
    return;
  }
  v34 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v34 = 134217984;
  v49 = v6;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v34 + 4);
  _os_log_impl((void *)&_mh_execute_header, v31, v33, "Couldn't find a note editor view controller for offset %ld. Maybe we're at the end of the list?", v34, 0xCu);
  swift_slowDealloc(v34, -1, -1);

LABEL_37:
}

uint64_t sub_100320B90()
{
  return type metadata accessor for SystemPaperViewController(0);
}

uint64_t type metadata accessor for SystemPaperViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D8DF8;
  if (!qword_1005D8DF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SystemPaperViewController);
  return result;
}

void sub_100320BD4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[36];

  v4[0] = "\b";
  v4[1] = &unk_100462798;
  v4[2] = &unk_1004627B0;
  v4[3] = &unk_1004627B0;
  v4[4] = &unk_1004627B0;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = &unk_100462798;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100320CDC(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[15] = &unk_100462798;
    v4[16] = &unk_1004627B0;
    v4[17] = &unk_1004627B0;
    v4[18] = &unk_100462798;
    v4[19] = "\b";
    v4[20] = &unk_100462798;
    v4[21] = &unk_100462798;
    v4[22] = &unk_100462798;
    v4[23] = &unk_100462798;
    v4[24] = &unk_100462798;
    v4[25] = &unk_100462798;
    v4[26] = &unk_100462798;
    v4[27] = &unk_100462798;
    v4[28] = &unk_100462798;
    v4[29] = &unk_100462798;
    v4[30] = &unk_100462798;
    v4[31] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[32] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[33] = &unk_1004627C8;
    v4[34] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[35] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 36, v4, a1 + 80);
  }
}

void sub_100320CDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D8E08)
  {
    v2 = type metadata accessor for NotePreview(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D8E08);
  }
}

uint64_t sub_100320EF0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v10 = (void *)static OS_dispatch_queue.main.getter(v9);
  v11 = swift_allocObject(&unk_1005682A8, 24, 7);
  *(_QWORD *)(v11 + 16) = v0;
  aBlock[4] = sub_100323594;
  v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_1005682C0;
  v12 = _Block_copy(aBlock);
  v13 = v23;
  v14 = v1;
  swift_release(v13);
  static DispatchQoS.unspecified.getter(v15);
  aBlock[0] = _swiftEmptyArrayStorage;
  v16 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v18 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v17, v18, v2, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1003210FC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD v14[5];
  uint64_t v15;

  sub_100316DB8();
  v2 = (void *)objc_opt_self(NSTimer);
  v3 = swift_allocObject(&unk_1005682F8, 24, 7);
  swift_unknownObjectWeakInit(v3 + 16, a1);
  v14[4] = sub_10032359C;
  v15 = v3;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1002489AC;
  v14[3] = &unk_100568310;
  v4 = _Block_copy(v14);
  swift_release(v15);
  v5 = objc_msgSend(v2, "scheduledTimerWithTimeInterval:repeats:block:", 0, v4, 1.0);
  _Block_release(v4);
  v6 = OBJC_IVAR___ICSystemPaperViewController_pageControlFadeOutTimer;
  v7 = *(void **)(a1 + OBJC_IVAR___ICSystemPaperViewController_pageControlFadeOutTimer);
  *(_QWORD *)(a1 + OBJC_IVAR___ICSystemPaperViewController_pageControlFadeOutTimer) = v5;

  v8 = *(void **)(a1 + v6);
  if (v8)
    objc_msgSend(v8, "setTolerance:", 0.1);
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10012A0B0(v9, (uint64_t)qword_1005D8C80);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "pageControlFadeOutTimer scheduled.", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

}

uint64_t sub_1003212B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter(v10);
  aBlock[4] = sub_1003235A4;
  v22 = a2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_100568338;
  v12 = _Block_copy(aBlock);
  v13 = v22;
  swift_retain(a2);
  swift_release(v13);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v17 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void sub_1003214B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _QWORD aBlock[5];
  uint64_t v15;
  char v16[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    if (qword_1005CEC88 != -1)
      swift_once(&qword_1005CEC88, sub_100312D34);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10012A0B0(v4, (uint64_t)qword_1005D8C80);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Finished pageControlFadeOutTimer. Fading out control...", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    sub_100316DB8();
    v9 = (void *)objc_opt_self(UIView);
    v10 = swift_allocObject(&unk_100568370, 24, 7);
    *(_QWORD *)(v10 + 16) = v3;
    aBlock[4] = sub_1003235AC;
    v15 = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100206734;
    aBlock[3] = &unk_100568388;
    v11 = _Block_copy(aBlock);
    v12 = v15;
    v13 = v3;
    swift_release(v12);
    objc_msgSend(v9, "animateWithDuration:delay:options:animations:completion:", 0, v11, 0, 0.75, 0.0);
    _Block_release(v11);

  }
}

uint64_t sub_100321664(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _QWORD aBlock[5];
  uint64_t v39;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10012A0B0(v11, (uint64_t)qword_1005D8C80);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Indexer did finish reloading data, then will refresh UI on MT.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = *(void **)&a2[OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController];
  if (v16 && (v17 = objc_msgSend(v16, "note")) != 0)
  {
    v18 = v17;
    v19 = objc_msgSend(v17, "objectID");
    sub_1003DA47C((uint64_t)v19, a1);
    v21 = v20;
    v23 = v22;

    if ((v23 & 1) != 0)
      v24 = 0;
    else
      v24 = v21;
  }
  else
  {
    v24 = 0;
  }
  v25 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v26 = (void *)static OS_dispatch_queue.main.getter(v25);
  v27 = swift_allocObject(&unk_1005680A0, 32, 7);
  *(_QWORD *)(v27 + 16) = a2;
  *(_QWORD *)(v27 + 24) = v24;
  aBlock[4] = sub_1003233DC;
  v39 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_1005680B8;
  v28 = _Block_copy(aBlock);
  v29 = v39;
  v30 = a2;
  swift_release(v29);
  static DispatchQoS.unspecified.getter(v31);
  aBlock[0] = _swiftEmptyArrayStorage;
  v32 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v34 = sub_100323A1C((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v4, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v6, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_100321988(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void *v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  id v27;
  NSObject *v28;
  NSObject *v29;
  char v30;
  char v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  void *v39;
  unsigned __int8 v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  uint64_t v47;
  os_log_t loga;
  NSObject *log;
  NSObject *oslog;
  uint64_t v51;
  uint64_t v52;

  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10012A0B0(v4, (uint64_t)qword_1005D8C80);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Starting UI refresh for indexer didChangeContentWith:controller:", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v10 = *(void **)(a1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  if (!v10)
  {
    oslog = Logger.logObject.getter(v9);
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v22, "Bailing out since we have a nil eVC.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
LABEL_27:

    return;
  }
  oslog = v10;
  v11 = -[NSObject note](oslog, "note");
  if (!v11)
  {
    log = Logger.logObject.getter(0);
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(log, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, log, v24, "Bailing out since we have a nil currentNote.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);

      return;
    }

    goto LABEL_27;
  }
  v12 = v11;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    loga = a2;
    v16 = swift_slowAlloc(32, -1);
    v52 = v16;
    *(_DWORD *)v15 = 136315138;
    v17 = objc_msgSend(v12, "ic_loggingIdentifier");
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v20 = v19;

    v51 = sub_1003A4190(v18, v20, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v15 + 4);

    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "About to set note again: %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v21 = v16;
    a2 = loga;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
  v26 = (uint64_t)sub_100317430();
  v27 = objc_msgSend(v12, "objectID");
  sub_1003DA47C((uint64_t)v27, v26);
  v29 = v28;
  v31 = v30;

  if ((v31 & 1) != 0)
  {
    swift_bridgeObjectRelease(v26);
    goto LABEL_24;
  }
  if ((unint64_t)v26 >> 62)
  {
    if (v26 < 0)
      v47 = v26;
    else
      v47 = v26 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v26);
    v32 = _CocoaArrayWrapper.endIndex.getter(v47);
    swift_bridgeObjectRelease(v26);
  }
  else
  {
    v32 = *(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v33 = swift_bridgeObjectRelease(v26).n128_u64[0];
  v34 = OBJC_IVAR___ICSystemPaperViewController_pageControl;
  v35 = *(void **)(a1 + OBJC_IVAR___ICSystemPaperViewController_pageControl);
  if (v35)
  {
    objc_msgSend(v35, "setNumberOfPages:", v32, v33);
    v36 = *(void **)(a1 + v34);
    if (v36)
    {
      objc_msgSend(v36, "currentPage");
      v37 = *(void **)(a1 + v34);
      if (v37)
      {
        objc_msgSend(v37, "setCurrentPage:", v29);
        if (v29 != a2)
        {
          v38 = -[NSObject textView](oslog, "textView");
          if (v38)
          {
            v39 = v38;
            v40 = -[NSObject isEditing](oslog, "isEditing");
            v41 = objc_msgSend(v39, "selectedRange");
            v43 = v42;
            v44 = swift_allocObject(&unk_1005680F0, 56, 7);
            *(_QWORD *)(v44 + 16) = oslog;
            *(_BYTE *)(v44 + 24) = v40;
            *(_QWORD *)(v44 + 32) = v39;
            *(_QWORD *)(v44 + 40) = v41;
            *(_QWORD *)(v44 + 48) = v43;
            v45 = oslog;
            v46 = v39;
            sub_100319318(v10, 0, 0, 1, (uint64_t)sub_100323410, v44);

            swift_release(v44);
LABEL_25:

            return;
          }
        }
LABEL_24:

        goto LABEL_25;
      }
      goto LABEL_34;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t sub_100321FA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *v0 = v1;
  if (!(_DWORD)result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    result = sub_10026C694(v1);
    v1 = result;
    *v0 = result;
  }
  v3 = v1 & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(_QWORD *)(v3 + 16) = v5;
    specialized Array._endMutation()(result);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10032200C(void *a1, uint64_t a2)
{
  NSString v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v13[4];
  __int128 v14;
  __int128 v15;

  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend((id)objc_opt_self(UIStoryboard), "storyboardWithName:bundle:", v4, 0);

  v6 = objc_msgSend(v5, "instantiateInitialViewController");
  if (v6)
  {
    *((_QWORD *)&v15 + 1) = sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
    *(_QWORD *)&v14 = v6;
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  v13[3] = sub_100012E18(&qword_1005CF190);
  v13[0] = swift_allocObject(&unk_1005683C0, 48, 7);
  sub_100012CE8((uint64_t)&v14, v13[0] + 16, &qword_1005CF190);
  v7 = v6;
  v8 = sub_100169E90((uint64_t)v13);
  sub_1000153C0(v13);
  sub_100012DDC((uint64_t)&v14, &qword_1005CF190);
  v9 = *(void **)(v8 + OBJC_IVAR___ICSystemPaperViewController_incomingLink);
  *(_QWORD *)(v8 + OBJC_IVAR___ICSystemPaperViewController_incomingLink) = a1;
  v10 = a1;

  v11 = *(_QWORD *)(v8 + OBJC_IVAR___ICSystemPaperViewController_incomingImageData);
  *(_QWORD *)(v8 + OBJC_IVAR___ICSystemPaperViewController_incomingImageData) = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v11);
  objc_msgSend(*(id *)(v8 + OBJC_IVAR___ICSystemPaperViewController_noteCache), "setCountLimit:", 2, v13[0]);

  return v8;
}

void sub_1003221A8()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  id v12;

  v1 = *(void **)(v0 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  if (v1)
    v2 = objc_msgSend(v1, "note");
  else
    v2 = 0;
  v3 = (uint64_t)sub_100317430();
  v4 = v3;
  if ((unint64_t)v3 >> 62)
  {
    if (v3 >= 0)
      v3 &= 0xFFFFFFFFFFFFFF8uLL;
    v5 = _CocoaArrayWrapper.endIndex.getter(v3);
    if (v2)
      goto LABEL_6;
LABEL_12:
    swift_bridgeObjectRelease(v4);
    v12 = 0;
    v11 = 0;
    goto LABEL_13;
  }
  v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    goto LABEL_12;
LABEL_6:
  v12 = v2;
  v6 = objc_msgSend(v12, "objectID");
  sub_1003DA47C((uint64_t)v6, v4);
  v8 = v7;
  v10 = v9;
  swift_bridgeObjectRelease(v4);

  if ((v10 & 1) != 0)
    v11 = 0;
  else
    v11 = v8;
LABEL_13:
  sub_10031909C(v11, v5, 1);

}

void sub_1003222AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  void *Strong;
  id v9;

  v1 = v0;
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005D8C80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Tapped done button", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  objc_msgSend((id)objc_opt_self(SYSystemPaperAnalytics), "logDismissEvent:", SYSystemPaperDismissMethodDone);
  v7 = *(void **)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  if (v7)
    objc_msgSend(v7, "doneEditing");
  sub_100316DB8();
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR___ICSystemPaperViewController_viewControllerManager);
  if (Strong)
  {
    v9 = Strong;
    objc_msgSend(Strong, "closeAuxiliaryWindowAnimated:", 1);

  }
}

void sub_10032240C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  id v12;
  void *v13;
  id v14;

  v1 = v0;
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005D8C80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Tapped palette button", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController;
  v8 = *(void **)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  if (v8)
  {
    v9 = objc_msgSend(v8, "isInkPickerShowing");
    v10 = *(void **)(v1 + v7);
    if (v10)
    {
      v11 = v9;
      v14 = v10;
      objc_msgSend(v14, "createInkPickerControllerIfNecessary");
      v12 = objc_msgSend(v14, "inkPaletteController");
      if (v12)
      {
        v13 = v12;
        objc_msgSend(v12, "showInkPalette:animated:", v11 ^ 1, 1);

      }
    }
  }
}

id sub_100322570(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v16[3];
  void *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  v17 = (void *)sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
  v16[0] = a1;
  v2 = a1;
  v3 = (void *)sub_10016A2C4((uint64_t)v16);
  sub_1000153C0(v16);
  v4 = sub_10031C35C(v3, (char *)0xFFFFFFFFFFFFFFFFLL);

  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v5, "textView", v16[0]);
    if (!v6)
    {
LABEL_5:

      return v4;
    }
    v7 = v6;
    v8 = objc_msgSend(v6, "textStorage");
    v9 = objc_msgSend(v8, "length");
    v10 = swift_allocObject(&unk_100568578, 24, 7);
    *(_QWORD *)(v10 + 16) = v7;
    v11 = swift_allocObject(&unk_1005685A0, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_100323A64;
    *(_QWORD *)(v11 + 24) = v10;
    v18 = sub_100312B48;
    v19 = v11;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_1003DA3F0;
    v17 = &unk_1005685B8;
    v12 = _Block_copy(v16);
    v13 = v19;
    v14 = v7;
    swift_retain(v11);
    objc_msgSend(v8, "enumerateAttribute:inRange:options:usingBlock:", NSAttachmentAttributeName, 0, v9, 0, v12, swift_release(v13).n128_f64[0]);

    _Block_release(v12);
    LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v11, "", 109, 675, 81, 1);

    swift_release(v10);
    swift_release(v11);
    if ((v8 & 1) != 0)
    {
      __break(1u);
      goto LABEL_5;
    }
  }
  return v4;
}

id sub_100322778(void *a1)
{
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v16[3];
  void *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;

  v17 = (void *)sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
  v16[0] = a1;
  v2 = a1;
  v3 = (void *)sub_10016A2C4((uint64_t)v16);
  sub_1000153C0(v16);
  v4 = sub_10031C35C(v3, (char *)1);

  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v5, "textView", v16[0]);
    if (!v6)
    {
LABEL_5:

      return v4;
    }
    v7 = v6;
    v8 = objc_msgSend(v6, "textStorage");
    v9 = objc_msgSend(v8, "length");
    v10 = swift_allocObject(&unk_1005683E8, 24, 7);
    *(_QWORD *)(v10 + 16) = v7;
    v11 = swift_allocObject(&unk_100568410, 32, 7);
    *(_QWORD *)(v11 + 16) = sub_100323604;
    *(_QWORD *)(v11 + 24) = v10;
    v18 = sub_100147B3C;
    v19 = v11;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_1003DA3F0;
    v17 = &unk_100568428;
    v12 = _Block_copy(v16);
    v13 = v19;
    v14 = v7;
    swift_retain(v11);
    objc_msgSend(v8, "enumerateAttribute:inRange:options:usingBlock:", NSAttachmentAttributeName, 0, v9, 0, v12, swift_release(v13).n128_f64[0]);

    _Block_release(v12);
    LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v11, "", 109, 675, 81, 1);

    swift_release(v10);
    swift_release(v11);
    if ((v8 & 1) != 0)
    {
      __break(1u);
      goto LABEL_5;
    }
  }
  return v4;
}

void sub_100322980(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  unint64_t v33;
  _QWORD v34[4];
  __int128 v35;
  __int128 v36;

  v4 = v1;
  v6 = OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController;
  v7 = *(void **)(v1 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
  if (!v7)
    goto LABEL_7;
  v8 = objc_msgSend(v7, "note");
  if (!v8)
    goto LABEL_7;
  v2 = v8;
  if (!objc_msgSend(v8, "isEmpty"))
    goto LABEL_6;
  v3 = objc_msgSend(v2, "objectID");
  v9 = (_QWORD *)(v1 + OBJC_IVAR___ICSystemPaperViewController_emptyNoteIds);
  v10 = swift_beginAccess(v4 + OBJC_IVAR___ICSystemPaperViewController_emptyNoteIds, &v35, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
  v11 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v12 = *(_QWORD *)((*v9 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v11 >= v12 >> 1)
    goto LABEL_30;
  while (1)
  {
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v3);
    specialized Array._endMutation()(v13);
    swift_endAccess(&v35);
LABEL_6:

LABEL_7:
    if ((unint64_t)a1 >> 62)
      break;
    v14 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (!v14)
      goto LABEL_17;
LABEL_9:
    if ((a1 & 0xC000000000000001) != 0)
    {
      v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
      goto LABEL_12;
    }
    v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
    {
      v15 = *(id *)(a1 + 32);
LABEL_12:
      v16 = v15;
      swift_bridgeObjectRelease(a1);
      *((_QWORD *)&v36 + 1) = sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
      *(_QWORD *)&v35 = v16;
      goto LABEL_18;
    }
    __break(1u);
LABEL_30:
    v33 = v11;
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v11 + 1, 1);
    v11 = v33;
  }
  if (a1 < 0)
    v17 = a1;
  else
    v17 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v11 = _CocoaArrayWrapper.endIndex.getter(v17);
  if (v11)
    goto LABEL_9;
LABEL_17:
  swift_bridgeObjectRelease(a1);
  v35 = 0u;
  v36 = 0u;
LABEL_18:
  v34[3] = sub_100012E18(&qword_1005CF190);
  v34[0] = swift_allocObject(&unk_1005683C0, 48, 7);
  sub_100012CE8((uint64_t)&v35, v34[0] + 16, &qword_1005CF190);
  v18 = (void *)sub_10016A2C4((uint64_t)v34);
  sub_1000153C0(v34);
  sub_100012DDC((uint64_t)&v35, &qword_1005CF190);
  v19 = objc_msgSend(v18, "note", v34[0]);
  v20 = (uint64_t)sub_100317430();
  v21 = v20;
  if ((unint64_t)v20 >> 62)
  {
    if (v20 >= 0)
      v20 &= 0xFFFFFFFFFFFFFF8uLL;
    v22 = _CocoaArrayWrapper.endIndex.getter(v20);
    if (!v19)
      goto LABEL_26;
LABEL_20:
    v23 = v19;
    v24 = objc_msgSend(v23, "objectID");
    sub_1003DA47C((uint64_t)v24, v21);
    v26 = v25;
    v28 = v27;
    swift_bridgeObjectRelease(v21);

    if ((v28 & 1) != 0)
      v29 = 0;
    else
      v29 = v26;
  }
  else
  {
    v22 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v19)
      goto LABEL_20;
LABEL_26:
    swift_bridgeObjectRelease(v21);
    v29 = 0;
  }
  sub_10031909C(v29, v22, 1);

  v30 = *(id *)(v4 + v6);
  objc_msgSend(v30, "createInkPickerControllerIfNecessary");
  v31 = objc_msgSend(v30, "inkPaletteController");
  objc_msgSend(v31, "showInkPalette:animated:", 0, 1);

  v32 = *(void **)(v4 + v6);
  *(_QWORD *)(v4 + v6) = v18;

}

void sub_100322CB8(char a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;

  v4 = v3;
  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10012A0B0(v8, (uint64_t)qword_1005D8C80);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(14, -1);
    *(_DWORD *)v12 = 67109376;
    v21 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4);
    *(_WORD *)(v12 + 8) = 1024;
    v20 = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 10);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "pageViewController didFinishAnimating: %{BOOL}d, transitionCompleted: %{BOOL}d", (uint8_t *)v12, 0xEu);
    swift_slowDealloc(v12, -1, -1);
  }

  if ((a3 & 1) != 0)
    goto LABEL_15;
  if (!((unint64_t)a2 >> 62))
  {
    if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      swift_bridgeObjectRetain(a2);
      goto LABEL_9;
    }
LABEL_15:
    sub_100316F0C();
    return;
  }
  if (a2 < 0)
    v18 = a2;
  else
    v18 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v19 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(a2);
  if (v19 != 1)
    goto LABEL_15;
  swift_bridgeObjectRetain(a2);
  if (!_CocoaArrayWrapper.endIndex.getter(v18))
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_15;
  }
LABEL_9:
  if ((a2 & 0xC000000000000001) != 0)
  {
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_12:
    v14 = v13;
    swift_bridgeObjectRelease(a2);
    v15 = objc_opt_self(ICNoteEditorViewController);
    v16 = swift_dynamicCastObjCClass(v14, v15);
    if (v16)
    {
      v17 = *(void **)(v4 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController);
      *(_QWORD *)(v4 + OBJC_IVAR___ICSystemPaperViewController_currentNoteEditorViewController) = v16;

    }
    else
    {

    }
    goto LABEL_15;
  }
  if (*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v13 = *(id *)(a2 + 32);
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_100322EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSOrderedCollectionChange v4;
  char v5;
  NSOrderedCollectionChange v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;

  v0 = sub_100012E18((uint64_t *)&unk_1005D8F30);
  v1 = CollectionDifference.removals.getter();
  v2 = CollectionDifference.insertions.getter(v0);
  v3 = v2;
  if (*(_QWORD *)(v1 + 16) == 1 && *(_QWORD *)(v2 + 16) == 1)
  {
    sub_100012CE8(v1 + 32, (uint64_t)&v22, &qword_1005D8F48);
    swift_bridgeObjectRelease(v1);
    if (HIBYTE(v25) != 255)
    {
      sub_100012E18(&qword_1005D8F48);
      v4.super.isa = CollectionDifference.Change._bridgeToObjectiveC()().super.isa;
      sub_100012DDC((uint64_t)&v22, &qword_1005D8F48);
      if (*(_QWORD *)(v3 + 16))
      {
        sub_100012CE8(v3 + 32, (uint64_t)&v22, &qword_1005D8F48);
      }
      else
      {
        v23 = 0u;
        v24 = 0u;
        v22 = 0u;
        v25 = -256;
      }
      swift_bridgeObjectRelease(v3);
      if (HIBYTE(v25) == 255)
      {

        goto LABEL_8;
      }
      v7.super.isa = CollectionDifference.Change._bridgeToObjectiveC()().super.isa;
      sub_100012DDC((uint64_t)&v22, &qword_1005D8F48);
      v8 = -[objc_class object](v4.super.isa, "object");
      if (v8)
      {
        v9 = v8;
        _bridgeAnyObjectToAny(_:)(&v20, v8);
        swift_unknownObjectRelease(v9, v10);
      }
      else
      {
        v20 = 0u;
        v21 = 0u;
      }
      sub_1001CBB70((uint64_t)&v20, (uint64_t)&v22);
      if (*((_QWORD *)&v23 + 1))
      {
        v11 = sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
        if ((swift_dynamicCast(&v19, &v22, (char *)&type metadata for Any + 8, v11, 6) & 1) == 0)
        {
LABEL_29:

          goto LABEL_8;
        }
        v12 = v19;
        v13 = -[objc_class object](v7.super.isa, "object");
        if (v13)
        {
          v14 = v13;
          _bridgeAnyObjectToAny(_:)(&v20, v13);
          swift_unknownObjectRelease(v14, v15);
        }
        else
        {
          v20 = 0u;
          v21 = 0u;
        }
        sub_1001CBB70((uint64_t)&v20, (uint64_t)&v22);
        if (*((_QWORD *)&v23 + 1))
        {
          if ((swift_dynamicCast(&v19, &v22, (char *)&type metadata for Any + 8, v11, 6) & 1) != 0)
          {
            v16 = v19;
            v17 = -[objc_class index](v4.super.isa, "index");
            if (v17 == -[objc_class index](v7.super.isa, "index"))
            {
              v18 = static NSObject.== infix(_:_:)(v12);

              v5 = v18 ^ 1;
              return v5 & 1;
            }

          }
          else
          {

          }
          goto LABEL_29;
        }

      }
      sub_100012DDC((uint64_t)&v22, &qword_1005CF190);
      goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v1);
  }
  swift_bridgeObjectRelease(v3);
LABEL_8:
  v5 = 1;
  return v5 & 1;
}

void sub_1003231CC()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *oslog;

  if (qword_1005CEC88 != -1)
    swift_once(&qword_1005CEC88, sub_100312D34);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10012A0B0(v1, (uint64_t)qword_1005D8C80);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Indexer did change content notification triggered.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = sub_100322EEC();
  if ((v6 & 1) != 0)
  {
    v7 = swift_allocObject(&unk_100568028, 24, 7);
    *(_QWORD *)(v7 + 16) = v0;
    v8 = v0;
    sub_10031701C((uint64_t)sub_10032339C, v7);
    swift_release(v7);
  }
  else
  {
    oslog = Logger.logObject.getter(v6);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Skipping resnapshotting because difference wasn't interesting.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

uint64_t sub_100323378()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10032339C(uint64_t a1)
{
  uint64_t v1;

  return sub_100321664(a1, *(char **)(v1 + 16));
}

uint64_t sub_1003233A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003233D0()
{
  uint64_t v0;

  return sub_1003171A8(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD *))(v0 + 24));
}

void sub_1003233DC()
{
  uint64_t v0;

  sub_100321988(*(_QWORD *)(v0 + 16), *(NSObject **)(v0 + 24));
}

uint64_t sub_1003233E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

id sub_100323410()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_QWORD *)(v0 + 48);
  objc_msgSend(v1, "setEditing:", v2);
  return objc_msgSend(v3, "setSelectedRange:", v4, v5);
}

uint64_t sub_100323460()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  if (*(_QWORD *)(v0 + 64))
    swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 88, 7);
}

void sub_1003234A4()
{
  uint64_t v0;

  sub_10031AA58(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_BYTE *)(v0 + 49), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1003234DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 64, 7);
}

void sub_100323510()
{
  uint64_t v0;

  sub_10031B378(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(char **)(v0 + 40), *(_BYTE *)(v0 + 48), *(_BYTE *)(v0 + 49), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100323528()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100323554()
{
  uint64_t v0;

  return sub_10031BD04(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

Swift::Int sub_100323560()
{
  return OS_dispatch_semaphore.signal()();
}

id sub_10032358C()
{
  return sub_1003235B4();
}

void sub_100323594()
{
  uint64_t v0;

  sub_1003210FC(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10032359C(uint64_t a1)
{
  uint64_t v1;

  return sub_1003212B8(a1, v1);
}

void sub_1003235A4()
{
  uint64_t v0;

  sub_1003214B0(v0);
}

id sub_1003235AC()
{
  return sub_1003235B4();
}

id sub_1003235B4()
{
  uint64_t v0;
  id result;

  result = *(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR___ICSystemPaperViewController_pageControl);
  if (result)
    return objc_msgSend(result, "setAlpha:");
  __break(1u);
  return result;
}

uint64_t sub_1003235D8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    sub_1000153C0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100323604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_10031BFB0(a1, a2, a3, a4, *(void **)(v4 + 16));
}

uint64_t sub_10032360C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10032361C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100323648()
{
  uint64_t v0;

  sub_10031CAAC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

void sub_100323654()
{
  uint64_t v0;

  sub_1003140EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10032365C()
{
  uint64_t v0;

  sub_1003176F0(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void ***)(v0 + 32));
}

uint64_t sub_100323668()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100323678()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100323688()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1003236AC()
{
  uint64_t v0;

  sub_10031FFDC(*(char **)(v0 + 16));
}

uint64_t sub_1003236B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1003236DC(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_100320050(a1, a2, *(_BYTE *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1003236E8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10032370C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100323730()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10032375C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10031E560(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100323764()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_errorRelease(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1003237A0()
{
  uint64_t *v0;

  sub_10031E794(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1003237AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 43, 7);
}

uint64_t sub_1003237D8(uint64_t a1)
{
  uint64_t v1;

  return sub_1003197CC(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(unsigned __int8 *)(v1 + 42));
}

uint64_t sub_1003237F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18((uint64_t *)&unk_1005D8FA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100323838()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 51, 7);
}

void sub_10032386C()
{
  uint64_t v0;

  sub_100319A0C(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24), *(_BYTE **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48), *(_BYTE *)(v0 + 49), *(_BYTE *)(v0 + 50));
}

uint64_t sub_100323884()
{
  uint64_t v0;

  return swift_deallocObject(v0, 42, 7);
}

void sub_1003238B0()
{
  uint64_t v0;

  sub_10031A088(*(_BYTE *)(v0 + 16), *(void **)(v0 + 24), *(NSObject **)(v0 + 32), *(_BYTE *)(v0 + 40), *(_BYTE *)(v0 + 41));
}

void sub_1003238C4()
{
  uint64_t v0;

  sub_10031A41C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1003238CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1003238F8(char a1)
{
  uint64_t v1;

  sub_100317E58(a1, *(_QWORD *)(v1 + 16), *(id *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100323904()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100323930()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100323940()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10032396C()
{
  uint64_t v0;

  sub_100316B44(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100323974()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1003239A0()
{
  uint64_t v0;

  sub_10031BEB8(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(NSObject **)(v0 + 32));
}

void sub_1003239B0(void (*a1)(__n128), uint64_t a2)
{
  uint64_t v2;

  sub_10031D43C(a1, a2, v2);
}

void sub_1003239B8(uint64_t a1)
{
  uint64_t v1;

  sub_1003151C0(a1, v1);
}

void sub_1003239C0(uint64_t a1)
{
  uint64_t v1;

  sub_10031525C(a1, v1);
}

uint64_t sub_1003239C8(uint64_t a1)
{
  uint64_t v1;

  return sub_100315594(a1, v1);
}

void sub_1003239D0()
{
  uint64_t v0;

  sub_10031578C(v0);
}

uint64_t sub_1003239D8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003239FC(uint64_t a1)
{
  uint64_t v1;

  sub_10031DEA4(a1, *(_QWORD *)(v1 + 16));
}

void sub_100323A04(uint64_t a1)
{
  uint64_t v1;

  sub_10031D334(a1, v1);
}

void sub_100323A0C(uint64_t a1)
{
  uint64_t v1;

  sub_10031CF34(a1, v1);
}

uint64_t sub_100323A14(void *a1)
{
  uint64_t v1;

  return sub_10031DA90(a1, v1);
}

uint64_t sub_100323A1C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001537C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100323A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100313AD0(a1, a2, v2);
}

void *DeleteFoldersIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static DeleteFoldersIntent.persistentIdentifier;
}

unint64_t static DeleteFoldersIntent.persistentIdentifier.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_100323B98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static DeleteFoldersIntent.title);
  sub_10012A0B0(v10, (uint64_t)static DeleteFoldersIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x46206574656C6544, 0xEE00737265646C6FLL);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t DeleteFoldersIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEC90 != -1)
    swift_once(&qword_1005CEC90, sub_100323B98);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static DeleteFoldersIntent.title);
}

uint64_t static DeleteFoldersIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEC90 != -1)
    swift_once(&qword_1005CEC90, sub_100323B98);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static DeleteFoldersIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static DeleteFoldersIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x8000000100488BF0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static DeleteFoldersIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005D8FD8);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18((uint64_t *)&unk_1005D8FE0);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B2980();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 1, &type metadata for DeleteFoldersIntent, v6);
  v7._countAndFlagsBits = 0x74206574656C6544;
  v7._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004627F0, v8);
  v10 = sub_100012E18(&qword_1005D8FF0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x737265646C6F6620;
  v11._object = (void *)0xE800000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for DeleteFoldersIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for DeleteFoldersIntent, v6);
}

uint64_t sub_10032415C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005D8FD8);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18((uint64_t *)&unk_1005D8FE0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 1, a1, a2);
  v10._countAndFlagsBits = 0x74206574656C6544;
  v10._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_1004627F0, v11);
  v13 = sub_100012E18(&qword_1005D8FF0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x737265646C6F6620;
  v14._object = (void *)0xE800000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_1003242D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1005D8FFC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100130768;
  return DeleteFoldersIntent.perform()(a1, v5, v4);
}

uint64_t DeleteFoldersIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[8] = static MainActor.shared.getter(v4);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor, v5);
  v3[9] = v6;
  v3[10] = v7;
  return swift_task_switch(sub_1003243A4, v6, v7);
}

uint64_t sub_1003243A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v0[2] = &type metadata for DeleteNotesIntent;
  v1 = v0[6];
  v2 = v0[7];
  v3 = sub_100012E18((uint64_t *)&unk_1005D9000);
  String.init<A>(describing:)(v0 + 2, v3);
  v5 = v4;
  v6 = objc_allocWithZone((Class)ICNAEventReporter);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "initWithSubTrackerName:", v7, swift_bridgeObjectRelease(v5).n128_f64[0]);
  v0[11] = v8;

  IntentParameter.wrappedValue.getter(v0 + 3);
  v9 = v0[3];
  swift_retain(v1);
  swift_retain(v2);
  sub_100325AE4(v9);
  v11 = v10;
  swift_bridgeObjectRelease(v9);
  swift_release(v2);
  swift_release(v1);
  if ((unint64_t)v11 >> 62)
  {
    if (v11 < 0)
      v26 = v11;
    else
      v26 = v11 & 0xFFFFFFFFFFFFFF8;
    v27 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    swift_bridgeObjectRetain(v11);
    v28 = _bridgeCocoaArray<A>(_:)(v26, v27);
    swift_bridgeObjectRelease_n(v11, 2);
    v11 = v28;
  }
  else
  {
    v12 = v11 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v11);
    v14 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v13);
    v15 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    if (swift_dynamicCastMetatype(v14, v15) || (v22 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_3:
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      v23 = (uint64_t *)(v12 + 32);
      while (1)
      {
        v24 = *v23;
        v25 = objc_opt_self(NSManagedObject);
        if (!swift_dynamicCastObjCClass(v24, v25))
          break;
        ++v23;
        if (!--v22)
          goto LABEL_3;
      }
      swift_bridgeObjectRelease(v11);
      v11 = v12 | 1;
    }
  }
  v0[12] = v11;
  v17 = v0[6];
  v16 = v0[7];
  v18 = (_QWORD *)swift_task_alloc(48);
  v0[13] = v18;
  v18[2] = v17;
  v18[3] = v16;
  v18[4] = v8;
  v19 = swift_task_alloc(32);
  v0[14] = v19;
  *(_QWORD *)(v19 + 16) = v17;
  *(_QWORD *)(v19 + 24) = v16;
  v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D9030 + dword_1005D9030);
  v20 = (_QWORD *)swift_task_alloc(unk_1005D9034);
  v0[15] = v20;
  *v20 = v0;
  v20[1] = sub_10032462C;
  return v29((uint64_t)&unk_1005D9018, (uint64_t)v18, (uint64_t)&unk_1005D9028, v19, v11);
}

uint64_t sub_10032462C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(*v2 + 128) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 72);
    v7 = *(_QWORD *)(v4 + 80);
    v8 = sub_100324754;
  }
  else
  {
    v10 = *(_QWORD *)(v4 + 104);
    v9 = *(_QWORD *)(v4 + 112);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 96));
    *(_BYTE *)(v4 + 136) = a1 & 1;
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    v6 = *(_QWORD *)(v4 + 72);
    v7 = *(_QWORD *)(v4 + 80);
    v8 = sub_1003246C0;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_1003246C0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v1 = *(unsigned __int8 *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 64));
  v3 = *(void **)(v0 + 88);
  if (v1 == 1)
  {
    static IntentResult.result<>()(v2);
  }
  else
  {
    v4 = sub_10013F4E8();
    v5 = swift_allocError(&type metadata for AppIntentsError, v4, 0, 0);
    *v6 = 8;
    swift_willThrow(v5);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100324754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(void **)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease(v3);

  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003247B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _s11MobileNotes19DeleteFoldersIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1003247D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[16] = a2;
  v5[17] = a5;
  v5[15] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[18] = v6;
  v5[19] = static MainActor.shared.getter(v6);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor, v7);
  v5[20] = v8;
  v5[21] = v9;
  return swift_task_switch(sub_10032484C, v8, v9);
}

uint64_t sub_10032484C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Class isa;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[17];
  v1 = v0[18];
  v3 = (void *)objc_opt_self(ICDeleteDecisionController);
  v0[22] = v3;
  sub_100012E18(&qword_1005D9098);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "deleteHTMLFoldersIfNeeded:eventReporter:", isa, v2);

  v0[23] = static MainActor.shared.getter(v5);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor, v6);
  v0[24] = v7;
  v0[25] = v8;
  return swift_task_switch(sub_100324904, v7, v8);
}

uint64_t sub_100324904()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  Class isa;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + 2;
  v2 = (void *)v0[22];
  v3 = v0[17];
  sub_1000163BC(0, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[26] = isa;
  v0[2] = v0;
  v0[3] = sub_1003249D4;
  v5 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v6 = v0 + 10;
  v6[1] = 0x40000000;
  v6[2] = sub_1001D8384;
  v6[3] = &unk_100568AD0;
  v6[4] = v5;
  objc_msgSend(v2, "deleteModernFoldersIfNeeded:eventReporter:completion:", isa, v3, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_1003249D4()
{
  uint64_t v0;

  return swift_task_switch(sub_100324A18, *(_QWORD *)(*(_QWORD *)v0 + 192), *(_QWORD *)(*(_QWORD *)v0 + 200));
}

uint64_t sub_100324A18()
{
  _QWORD *v0;
  void *v1;

  v1 = (void *)v0[26];
  swift_release(v0[23]);

  return swift_task_switch(sub_100324A58, v0[20], v0[21]);
}

uint64_t sub_100324A58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100324A8C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for ConfirmationActionName(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for LocalizedStringResource(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v9);
  v2[15] = swift_task_alloc(v9);
  v10 = type metadata accessor for IntentDialog(0);
  v2[16] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[17] = v11;
  v2[18] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18((uint64_t *)&unk_1005DA580);
  v2[19] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[20] = v13;
  v2[21] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MainActor(0);
  v2[22] = static MainActor.shared.getter(v14);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor, v15);
  v2[23] = v16;
  v2[24] = v17;
  return swift_task_switch(sub_100324C0C, v16, v17);
}

uint64_t sub_100324C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 144);
  v19 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v7 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 32);
  v20 = v2;
  v10 = String.LocalizationValue.init(stringLiteral:)(0x100000000000001FLL, 0x8000000100488C10);
  static Locale.current.getter(v10);
  v11 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v12(v7, enum case for LocalizedStringResource.BundleDescription.main(_:), v8);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v4, 0, 0, v6, v7, "Link confirmation dialog title", 30, 2);
  v13 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000064, 0x8000000100488C50);
  static Locale.current.getter(v13);
  v12(v7, v11, v8);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v4, 0, 0, v6, v7, "Link confirmation dialog supporting text", 40, 2);
  IntentDialog.init(full:supporting:)(v3, v5);
  static IntentResult.result<>(dialog:)(v1);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v1, v20);
  static ConfirmationActionName.continue.getter(v14);
  v15 = (_QWORD *)swift_task_alloc(async function pointer to AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)[1]);
  *(_QWORD *)(v0 + 200) = v15;
  v16 = sub_1001B2980();
  v17 = sub_100016638(&qword_1005D9090, (uint64_t *)&unk_1005DA580, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
  *v15 = v0;
  v15[1] = sub_100324E04;
  return AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 64), 1, &type metadata for DeleteFoldersIntent, *(_QWORD *)(v0 + 152), v16, v17);
}

uint64_t sub_100324E04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  v5 = *(_QWORD *)(*v1 + 160);
  v4 = *(_QWORD *)(*v1 + 168);
  v6 = *(_QWORD *)(*v1 + 152);
  v8 = *(_QWORD *)(*v1 + 56);
  v7 = *(_QWORD *)(*v1 + 64);
  v9 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v10 = sub_100324F50;
  else
    v10 = sub_100324EB0;
  return swift_task_switch(v10, *(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 192));
}

uint64_t sub_100324EB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100324F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 88);
  v8 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100324FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[7] = static MainActor.shared.getter(v6);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor, v7);
  v5[8] = v8;
  v5[9] = v9;
  return swift_task_switch(sub_100325064, v8, v9);
}

uint64_t sub_100325064()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Class isa;
  id v4;
  id v5;
  unint64_t v6;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(void);

  v1 = sub_1002B0348(*(_QWORD *)(v0 + 48));
  v2 = objc_allocWithZone((Class)ICDeleteDecision);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, "initWithSourceObjects:allowsRecentlyDeletedFolderAlert:", isa, 0, swift_bridgeObjectRelease(v1).n128_f64[0]);
  *(_QWORD *)(v0 + 80) = v4;

  v5 = objc_msgSend(v4, "type");
  v6 = (unint64_t)objc_msgSend(v4, "additionalStep");
  if (!v5)
  {
LABEL_7:
    v8 = *(int **)(v0 + 16);
    sub_100326984(v4, 0, ICFolder_ptr, (uint64_t *)&protocolRef_ICLegacyFolder_0);
    v10 = v9;
    v12 = v11;
    *(_QWORD *)(v0 + 88) = v9;
    *(_QWORD *)(v0 + 96) = v11;
    v30 = (uint64_t (*)(uint64_t, uint64_t))((char *)v8 + *v8);
    v13 = (_QWORD *)swift_task_alloc(v8[1]);
    *(_QWORD *)(v0 + 104) = v13;
    *v13 = v0;
    v13[1] = sub_100325300;
    return v30(v10, v12);
  }
  if (v5 == (id)1)
  {
    if (v6 <= 0xC && ((1 << v6) & 0x1B80) != 0)
      goto LABEL_7;
    v15 = objc_msgSend(v4, "guiltyObjects");
    v16 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        v22 = v17;
      else
        v22 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v18 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v19 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(v17);
    if (v19 >> 62)
    {
      v23 = v19;
      v24 = *(_QWORD *)(v0 + 48);
      v25 = v23 & 0xFFFFFFFFFFFFFF8;
      if (v24 < 0)
        v26 = *(_QWORD *)(v0 + 48);
      else
        v26 = v25;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
      v27 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(v24);
      if (v18 < v27)
        goto LABEL_12;
    }
    else if (v18 < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_12:
      v20 = *(int **)(v0 + 32);
      v31 = (uint64_t (*)(void))((char *)v20 + *v20);
      v21 = (_QWORD *)swift_task_alloc(v20[1]);
      *(_QWORD *)(v0 + 120) = v21;
      *v21 = v0;
      v21[1] = sub_100325374;
      return v31();
    }
  }
  v28 = *(_QWORD *)(v0 + 56);

  v29 = swift_release(v28);
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(0, v29);
}

uint64_t sub_100325300()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_100326E54;
  }
  else
  {
    v7 = v2[11];
    swift_bridgeObjectRelease(v2[12]);
    swift_bridgeObjectRelease(v7);
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_100326E50;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100325374()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100326E5C;
  else
    v4 = sub_1003253D4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_1003253D4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v1 = *(int **)(v0 + 16);
  sub_100326984(*(void **)(v0 + 80), 1, ICFolder_ptr, (uint64_t *)&protocolRef_ICLegacyFolder_0);
  v3 = v2;
  v5 = v4;
  *(_QWORD *)(v0 + 136) = v2;
  *(_QWORD *)(v0 + 144) = v4;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  v6 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 152) = v6;
  *v6 = v0;
  v6[1] = sub_100325464;
  return v8(v3, v5);
}

uint64_t sub_100325464()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_100326E58;
  }
  else
  {
    v7 = v2[17];
    swift_bridgeObjectRelease(v2[18]);
    swift_bridgeObjectRelease(v7);
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_100326E50;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_1003254D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  v6 = type metadata accessor for MainActor(0);
  v5[7] = static MainActor.shared.getter(v6);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor, v7);
  v5[8] = v8;
  v5[9] = v9;
  return swift_task_switch(sub_10032554C, v8, v9);
}

uint64_t sub_10032554C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  Class isa;
  id v4;
  id v5;
  unint64_t v6;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(void);

  v1 = sub_1002B0348(*(_QWORD *)(v0 + 48));
  v2 = objc_allocWithZone((Class)ICDeleteDecision);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, "initWithSourceObjects:allowsRecentlyDeletedFolderAlert:", isa, 0, swift_bridgeObjectRelease(v1).n128_f64[0]);
  *(_QWORD *)(v0 + 80) = v4;

  v5 = objc_msgSend(v4, "type");
  v6 = (unint64_t)objc_msgSend(v4, "additionalStep");
  if (!v5)
  {
LABEL_7:
    v8 = *(int **)(v0 + 16);
    sub_100326984(v4, 0, ICNote_ptr, (uint64_t *)&protocolRef_ICLegacyNote);
    v10 = v9;
    v12 = v11;
    *(_QWORD *)(v0 + 88) = v9;
    *(_QWORD *)(v0 + 96) = v11;
    v30 = (uint64_t (*)(uint64_t, uint64_t))((char *)v8 + *v8);
    v13 = (_QWORD *)swift_task_alloc(v8[1]);
    *(_QWORD *)(v0 + 104) = v13;
    *v13 = v0;
    v13[1] = sub_1003257E8;
    return v30(v10, v12);
  }
  if (v5 == (id)1)
  {
    if (v6 <= 0xC && ((1 << v6) & 0x1B80) != 0)
      goto LABEL_7;
    v15 = objc_msgSend(v4, "guiltyObjects");
    v16 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

    if ((unint64_t)v17 >> 62)
    {
      if (v17 < 0)
        v22 = v17;
      else
        v22 = v17 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v17);
      v18 = _CocoaArrayWrapper.endIndex.getter(v22);
      swift_bridgeObjectRelease(v17);
    }
    else
    {
      v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    v19 = *(_QWORD *)(v0 + 48);
    swift_bridgeObjectRelease(v17);
    if (v19 >> 62)
    {
      v23 = v19;
      v24 = *(_QWORD *)(v0 + 48);
      v25 = v23 & 0xFFFFFFFFFFFFFF8;
      if (v24 < 0)
        v26 = *(_QWORD *)(v0 + 48);
      else
        v26 = v25;
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
      v27 = _CocoaArrayWrapper.endIndex.getter(v26);
      swift_bridgeObjectRelease(v24);
      if (v18 < v27)
        goto LABEL_12;
    }
    else if (v18 < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_12:
      v20 = *(int **)(v0 + 32);
      v31 = (uint64_t (*)(void))((char *)v20 + *v20);
      v21 = (_QWORD *)swift_task_alloc(v20[1]);
      *(_QWORD *)(v0 + 120) = v21;
      *v21 = v0;
      v21[1] = sub_1003258F0;
      return v31();
    }
  }
  v28 = *(_QWORD *)(v0 + 56);

  v29 = swift_release(v28);
  return (*(uint64_t (**)(_QWORD, __n128))(v0 + 8))(0, v29);
}

uint64_t sub_1003257E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_1003258A0;
  }
  else
  {
    v7 = v2[11];
    swift_bridgeObjectRelease(v2[12]);
    swift_bridgeObjectRelease(v7);
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_10032585C;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_10032585C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);

  swift_release(v1);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
}

uint64_t sub_1003258A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(void **)(v0 + 80);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease(v1);

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_1003258F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 120);
  *(_QWORD *)(*v1 + 128) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100325A54;
  else
    v4 = sub_100325950;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_100325950()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v1 = *(int **)(v0 + 16);
  sub_100326984(*(void **)(v0 + 80), 1, ICNote_ptr, (uint64_t *)&protocolRef_ICLegacyNote);
  v3 = v2;
  v5 = v4;
  *(_QWORD *)(v0 + 136) = v2;
  *(_QWORD *)(v0 + 144) = v4;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)v1 + *v1);
  v6 = (_QWORD *)swift_task_alloc(v1[1]);
  *(_QWORD *)(v0 + 152) = v6;
  *v6 = v0;
  v6[1] = sub_1003259E0;
  return v8(v3, v5);
}

uint64_t sub_1003259E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_100325A94;
  }
  else
  {
    v7 = v2[17];
    swift_bridgeObjectRelease(v2[18]);
    swift_bridgeObjectRelease(v7);
    v4 = v2[8];
    v5 = v2[9];
    v6 = sub_100326E50;
  }
  return swift_task_switch(v6, v4, v5);
}

uint64_t sub_100325A54()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100325A94()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(void **)(v0 + 80);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 144));
  swift_bridgeObjectRelease(v1);

  swift_release(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

void sub_100325AE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __objc2_prot *v17;
  void *v18;
  _QWORD *v19;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v19 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v3 = type metadata accessor for FolderEntity(0);
    v4 = *(_QWORD *)(v3 - 8);
    v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v6 = *(_QWORD *)(v4 + 72);
    while (1)
    {
      AppDependency.wrappedValue.getter(&v18);
      v7 = v18;
      URL._bridgeToObjectiveC()((NSURL *)*(int *)(v3 + 20));
      v9 = v8;
      v10 = objc_msgSend(v7, "managedObjectIDForURIRepresentation:", v8);

      if (!v10)
        break;
      v11 = objc_msgSend(v7, "managedObjectContextForObjectID:", v10);
      if (!v11)
        goto LABEL_8;
      v12 = v11;
      v13 = objc_msgSend(v11, "objectWithID:", v10);

      v17 = &OBJC_PROTOCOL___ICFolderObject;
      v14 = swift_dynamicCastObjCProtocolUnconditional(v13, 1, &v17, 0, 0, 0);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v15 = v19[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v15);
      v16 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v14);
      specialized ContiguousArray._endMutation()(v16);
      v5 += v6;
      if (!--v2)
        return;
    }
    __break(1u);
LABEL_8:
    __break(1u);
  }
}

uint64_t _s11MobileNotes19DeleteFoldersIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  _QWORD v44[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v41 = *(_QWORD *)(v0 - 8);
  v42 = v0;
  __chkstk_darwin(v0);
  v40 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v39 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v38 = (char *)&v37 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100012E18((uint64_t *)&unk_1005CF160);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x737265646C6F46, 0xE700000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Delete Folders intent", 41, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x8000000100478250);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for folders", 33, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v44[0] = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v38;
  v28(v38, 1, 1, v27);
  v30 = v39;
  v28(v39, 1, 1, v27);
  v31 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v40, enum case for InputConnectionBehavior.default(_:), v42);
  v32 = sub_1003261AC();
  v33 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, v44, v29, v30, v31, v32);
  sub_100012E18(&qword_1005CEE50);
  v43[0] = 0xD000000000000021;
  v43[1] = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v44, v43, &type metadata for String, &protocol witness table for String);
  v34 = type metadata accessor for AppDependencyManager(0);
  v35 = static AppDependencyManager.shared.getter(v34);
  AppDependency.__allocating_init(key:manager:)(v44, v35);
  return v33;
}

uint64_t sub_100326070@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100326098(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_1005D9014);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100130768;
  return sub_1003247D8(a1, a2, v6, v7, v8);
}

uint64_t sub_100326110()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1005D9024);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100145358;
  return sub_100324A8C(v2, v3);
}

unint64_t sub_100326164()
{
  unint64_t result;

  result = qword_1005D9040;
  if (!qword_1005D9040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteFoldersIntent, &type metadata for DeleteFoldersIntent);
    atomic_store(result, (unint64_t *)&qword_1005D9040);
  }
  return result;
}

unint64_t sub_1003261AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D7870;
  if (!qword_1005D7870)
  {
    v1 = type metadata accessor for FolderEntity(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for FolderEntity, v1);
    atomic_store(result, (unint64_t *)&qword_1005D7870);
  }
  return result;
}

unint64_t sub_1003261FC()
{
  unint64_t result;

  result = qword_1005D9050;
  if (!qword_1005D9050)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteFoldersIntent, &type metadata for DeleteFoldersIntent);
    atomic_store(result, (unint64_t *)&qword_1005D9050);
  }
  return result;
}

unint64_t sub_100326244()
{
  unint64_t result;

  result = qword_1005D9058;
  if (!qword_1005D9058)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteFoldersIntent, &type metadata for DeleteFoldersIntent);
    atomic_store(result, (unint64_t *)&qword_1005D9058);
  }
  return result;
}

uint64_t sub_100326288(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of DeleteFoldersIntent.perform()>>, 1);
}

uint64_t sub_100326298(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static DeleteFoldersIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for DeleteFoldersIntent()
{
  return &type metadata for DeleteFoldersIntent;
}

uint64_t sub_1003262B8()
{
  return sub_100016638(&qword_1005D9068, &qword_1005D9070, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_1003262E4()
{
  return sub_100016638((unint64_t *)&qword_1005D1B40, (uint64_t *)&unk_1005D0690, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100326310(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  char v12;
  BOOL v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_26;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v4)
  {
    v5 = 0;
    v6 = v3 & 0xC000000000000001;
    v7 = a2 & 0xC000000000000001;
    v26 = v3;
    v27 = v3 + 32;
    v8 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v8 = a2;
    v28 = v8;
    v9 = a2 + 56;
    v24 = v3 & 0xC000000000000001;
    v25 = v4;
    while (v6)
    {
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      if (!v7)
        goto LABEL_13;
LABEL_8:
      v11 = v10;
      v12 = __CocoaSet.contains(_:)(v11, v28);

      if ((v12 & 1) != 0)
        return v5;
      v13 = __OFADD__(v5++, 1);
      if (v13)
        goto LABEL_25;
LABEL_21:
      if (v5 == v4)
        return 0;
    }
    v10 = *(id *)(v27 + 8 * v5);
    if (v7)
      goto LABEL_8;
LABEL_13:
    if (*(_QWORD *)(a2 + 16))
    {
      v14 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
      v15 = -1 << *(_BYTE *)(a2 + 32);
      v16 = v14 & ~v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
        v17 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v16);
        v18 = static NSObject.== infix(_:_:)(v17);

        if ((v18 & 1) != 0)
        {
LABEL_23:

          return v5;
        }
        v19 = ~v15;
        while (1)
        {
          v16 = (v16 + 1) & v19;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v16);
          v21 = static NSObject.== infix(_:_:)(v20);

          if ((v21 & 1) != 0)
            goto LABEL_23;
        }
      }
    }

    v4 = v25;
    v3 = v26;
    v7 = a2 & 0xC000000000000001;
    v6 = v24;
    v13 = __OFADD__(v5++, 1);
    if (!v13)
      goto LABEL_21;
LABEL_25:
    __break(1u);
LABEL_26:
    if (v3 < 0)
      v22 = v3;
    else
      v22 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v3);
  }
  return 0;
}

uint64_t sub_100326534(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  char v17;
  Swift::Int v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  char v22;
  id v23;
  char v24;
  id v25;
  id v26;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v6 = *a1;
  swift_bridgeObjectRetain(*a1);
  v8 = sub_100326310(v7, a2);
  v10 = v9;
  v11 = v3;
  swift_bridgeObjectRelease(v6);
  if (v3)
    return v8;
  if ((v10 & 1) == 0)
  {
    v12 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_68;
    v11 = *v5;
    if ((unint64_t)*v5 >> 62)
    {
LABEL_69:
      if (v11 < 0)
        v38 = v11;
      else
        v38 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v11);
      v39 = _CocoaArrayWrapper.endIndex.getter(v38);
      swift_bridgeObjectRelease(v11);
      if (v12 != v39)
        goto LABEL_6;
    }
    else if (v12 != *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v13 = a2 & 0xC000000000000001;
      v14 = a2 & 0xFFFFFFFFFFFFFF8;
      if (a2 < 0)
        v14 = a2;
      v45 = v14;
      v46 = a2 + 56;
      v42 = a2 & 0xC000000000000001;
      v43 = v5;
      while (1)
      {
        v15 = *v5;
        if ((*v5 & 0xC000000000000001) != 0)
        {
          v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v15);
          if (v13)
            goto LABEL_13;
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
LABEL_68:
            __break(1u);
            goto LABEL_69;
          }
          if (v12 >= *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_59;
          v16 = *(id *)(v15 + 8 * v12 + 32);
          if (v13)
          {
LABEL_13:
            v11 = (uint64_t)v16;
            v17 = __CocoaSet.contains(_:)(v11, v45);

            if ((v17 & 1) != 0)
              goto LABEL_44;
            if (v8 == v12)
              goto LABEL_43;
LABEL_25:
            v11 = *v5;
            if ((*v5 & 0xC000000000000001) != 0)
            {
              v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, *v5);
              v11 = *v5;
              if ((*v5 & 0xC000000000000001) == 0)
                goto LABEL_29;
            }
            else
            {
              if ((v8 & 0x8000000000000000) != 0)
                goto LABEL_62;
              if (v8 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
                goto LABEL_63;
              v25 = *(id *)(v11 + 8 * v8 + 32);
              if ((v11 & 0xC000000000000001) == 0)
              {
LABEL_29:
                if ((v12 & 0x8000000000000000) != 0)
                  goto LABEL_64;
                if (v12 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
                  goto LABEL_65;
                v26 = *(id *)(v11 + 8 * v12 + 32);
                goto LABEL_32;
              }
            }
            v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v11);
            v11 = *v5;
LABEL_32:
            isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v11);
            *v5 = v11;
            if (!isUniquelyReferenced_nonNull_bridgeObject || v11 < 0 || (v11 & 0x4000000000000000) != 0)
            {
              v11 = a3(v11);
              *v5 = v11;
            }
            v28 = *(void **)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20);
            *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v26;

            specialized Array._endMutation()(v29);
            v11 = *v5;
            v30 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v5);
            *v5 = v11;
            if (!v30 || v11 < 0 || (v11 & 0x4000000000000000) != 0)
            {
              v11 = a3(v11);
              *v5 = v11;
            }
            if ((v12 & 0x8000000000000000) != 0)
              goto LABEL_66;
            if (v12 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_67;
            v31 = *(void **)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v12 + 0x20);
            *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 8 * v12 + 0x20) = v25;

            specialized Array._endMutation()(v32);
            goto LABEL_43;
          }
        }
        if (*(_QWORD *)(a2 + 16))
        {
          v18 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40));
          v11 = -1 << *(_BYTE *)(a2 + 32);
          v19 = v18 & ~v11;
          if (((*(_QWORD *)(v46 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
          {
            sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
            v20 = a2;
            v21 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v19);
            v22 = static NSObject.== infix(_:_:)(v21);

            if ((v22 & 1) != 0)
            {
LABEL_23:

              a2 = v20;
              v13 = v42;
              v5 = v43;
              goto LABEL_44;
            }
            v11 = ~v11;
            while (1)
            {
              v19 = (v19 + 1) & v11;
              a2 = v20;
              if (((*(_QWORD *)(v46 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
                break;
              v23 = *(id *)(*(_QWORD *)(v20 + 48) + 8 * v19);
              v24 = static NSObject.== infix(_:_:)(v23);

              if ((v24 & 1) != 0)
                goto LABEL_23;
            }
          }
        }

        v13 = v42;
        v5 = v43;
        if (v8 != v12)
          goto LABEL_25;
LABEL_43:
        v33 = __OFADD__(v8++, 1);
        if (v33)
          goto LABEL_61;
LABEL_44:
        v33 = __OFADD__(v12++, 1);
        if (v33)
          goto LABEL_60;
        v11 = *v5;
        if ((unint64_t)*v5 >> 62)
        {
          if (v11 < 0)
            v35 = *v5;
          else
            v35 = v11 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v5);
          v34 = _CocoaArrayWrapper.endIndex.getter(v35);
          swift_bridgeObjectRelease(v11);
        }
        else
        {
          v34 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v12 == v34)
          return v8;
      }
    }
    return v8;
  }
  v36 = *v5;
  if (!((unint64_t)v36 >> 62))
    return *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v36 < 0)
    v40 = v36;
  else
    v40 = v36 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v36);
  v41 = _CocoaArrayWrapper.endIndex.getter(v40);
  swift_bridgeObjectRelease(v36);
  return v41;
}

void sub_100326984(void *a1, char a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t j;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;

  v7 = (uint64_t)a1;
  v8 = objc_msgSend(a1, "modernSourceObjects");
  v9 = sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  v39 = v10;
  v11 = objc_msgSend((id)v7, "htmlSourceObjects");
  v12 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

  v38 = v13;
  if ((a2 & 1) == 0)
    goto LABEL_7;
  v14 = objc_msgSend((id)v7, "guiltyObjects");
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v12);

  v16 = sub_10020C4CC(v15);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRetain(v16);
  v10 = 0;
  v12 = sub_100326534((uint64_t *)&v39, v16, sub_10026C694);
  swift_bridgeObjectRelease(v16);
  v7 = v39;
  if (v39 >> 62)
    goto LABEL_48;
  v17 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v17 < v12)
    goto LABEL_52;
LABEL_4:
  sub_10026F3E4(v12, v17);
  swift_bridgeObjectRetain(v16);
  v10 = sub_100326534((uint64_t *)&v38, v16, sub_10026C694);
  swift_bridgeObjectRelease(v16);
  v7 = v38;
  if (v38 >> 62)
  {
    while (1)
    {
      if (v7 < 0)
        v35 = v7;
      else
        v35 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v12 = _CocoaArrayWrapper.endIndex.getter(v35);
      swift_bridgeObjectRelease(v7);
      if (v12 < v10)
        goto LABEL_57;
LABEL_6:
      v7 = (uint64_t)&v38;
      sub_10026F708(v10, v12);
      swift_bridgeObjectRelease(v16);
      v10 = v39;
LABEL_7:
      v37 = (unint64_t)_swiftEmptyArrayStorage;
      if ((unint64_t)v10 >> 62)
      {
        if (v10 < 0)
          v7 = v10;
        else
          v7 = v10 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v10, 2);
        v16 = _CocoaArrayWrapper.endIndex.getter(v7);
        if (!v16)
        {
LABEL_25:
          swift_bridgeObjectRelease(v10);
          a3 = _swiftEmptyArrayStorage;
          goto LABEL_26;
        }
      }
      else
      {
        v16 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(v10, 2);
        if (!v16)
          goto LABEL_25;
      }
      if (v16 < 1)
      {
        __break(1u);
        goto LABEL_47;
      }
      for (i = 0; i != v16; ++i)
      {
        if ((v10 & 0xC000000000000001) != 0)
          v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
        else
          v19 = *(id *)(v10 + 8 * i + 32);
        v7 = (uint64_t)v19;
        v20 = objc_opt_self(*a3);
        v21 = swift_dynamicCastObjCClass(v7, v20);
        if (v21)
        {
          v22 = v21;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
          v24 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v23 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v24 >= v23 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
          v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
          v7 = (uint64_t)&v37;
          specialized Array._endMutation()(v25);
        }
        else
        {

        }
      }
      swift_bridgeObjectRelease(v10);
      a3 = (_QWORD *)v37;
LABEL_26:
      swift_bridgeObjectRelease(v10);
      v16 = v38;
      v37 = (unint64_t)_swiftEmptyArrayStorage;
      if (v38 >> 62)
      {
        if ((v38 & 0x8000000000000000) != 0)
          v7 = v38;
        else
          v7 = v38 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(v38, 2);
        v12 = _CocoaArrayWrapper.endIndex.getter(v7);
        if (!v12)
        {
LABEL_44:
          swift_bridgeObjectRelease(v16);
LABEL_45:
          swift_bridgeObjectRelease(v10);
          swift_bridgeObjectRelease_n(v16, 2);
          return;
        }
      }
      else
      {
        v12 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(v38, 2);
        if (!v12)
          goto LABEL_44;
      }
      if (v12 >= 1)
      {
        for (j = 0; j != v12; ++j)
        {
          if ((v16 & 0xC000000000000001) != 0)
            v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, v16);
          else
            v27 = *(id *)(v16 + 8 * j + 32);
          v28 = v27;
          v36 = *a4;
          v29 = swift_dynamicCastObjCProtocolConditional(v27, 1, &v36);
          if (v29)
          {
            v30 = v29;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
            v32 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v31 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v32 >= v31 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
            v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
            specialized Array._endMutation()(v33);
          }
          else
          {

          }
        }
        swift_bridgeObjectRelease(v16);
        goto LABEL_45;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      if (v7 < 0)
        v34 = v7;
      else
        v34 = v7 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v7);
      v17 = _CocoaArrayWrapper.endIndex.getter(v34);
      swift_bridgeObjectRelease(v7);
      if (v17 >= v12)
        goto LABEL_4;
LABEL_52:
      __break(1u);
    }
  }
  v12 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v12 >= v10)
    goto LABEL_6;
LABEL_57:
  __break(1u);
}

void sub_100326E60()
{
  Task.cancel()();
}

uint64_t sub_100326E74()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  v2 = 0;
  v0 = sub_100012E18(&qword_1005D9198);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = TaskLocal.init(wrappedValue:)(&v2);
  qword_1005D90B0 = result;
  return result;
}

uint64_t sub_100326EC4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[5]);
  v1 = (char *)v0 + OBJC_IVAR____TtC11MobileNotes35ProvisionalBackgroundTaskController_timeoutInterval;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100326F24()
{
  return type metadata accessor for ProvisionalBackgroundTaskController(0);
}

uint64_t type metadata accessor for ProvisionalBackgroundTaskController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D90E8;
  if (!qword_1005D90E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ProvisionalBackgroundTaskController);
  return result;
}

uint64_t sub_100326F68(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = "\t";
  v4[2] = &unk_100462A00;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

void sub_100326FF8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  NSString v25;
  _QWORD *v26;
  void *v27;
  _QWORD *v28;
  id v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t aBlock[5];
  _QWORD *v47;

  v5 = v4;
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v44 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTimeInterval(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = static Duration.zero.getter(v15);
  if ((static Duration.< infix(_:_:)(v18) & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((static Duration.< infix(_:_:)(5000000000000000000) & 1) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v42 = v11;
  v43 = v10;
  v19 = Duration.components.getter(a3, a4);
  v20 = 1000000000 * v19;
  if ((unsigned __int128)(v19 * (__int128)1000000000) >> 64 != (1000000000 * v19) >> 63)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  Duration.components.getter(a3, a4);
  if (__OFADD__(v20, v21 / 1000000000))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  *v17 = v20 + v21 / 1000000000;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for DispatchTimeInterval.nanoseconds(_:), v13);
  v22 = v5 + OBJC_IVAR____TtC11MobileNotes35ProvisionalBackgroundTaskController_timeoutInterval;
  swift_beginAccess(v5 + OBJC_IVAR____TtC11MobileNotes35ProvisionalBackgroundTaskController_timeoutInterval, aBlock, 33, 0);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v14 + 40))(v22, v17, v13);
  swift_endAccess(aBlock);
  if (*(_BYTE *)(v5 + 32) != 1)
  {
LABEL_10:
    sub_10032747C();
    return;
  }
  v23 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v24 = a1;
  v25 = String._bridgeToObjectiveC()();
  v26 = (_QWORD *)swift_allocObject(&unk_100568BE0, 40, 7);
  v26[2] = a1;
  v26[3] = a2;
  v26[4] = v5;
  aBlock[4] = (uint64_t)sub_100327FF0;
  v47 = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100206734;
  aBlock[3] = (uint64_t)&unk_100568BF8;
  v27 = _Block_copy(aBlock);
  v28 = v47;
  swift_bridgeObjectRetain(a2);
  swift_retain(v5);
  v29 = objc_msgSend(v23, "beginBackgroundTaskWithName:expirationHandler:", v25, v27, swift_release(v28).n128_f64[0]);
  _Block_release(v27);

  *(_QWORD *)(v5 + 24) = v29;
  *(_BYTE *)(v5 + 32) = 0;
  v30 = v44;
  static Logger.ui.getter(v31);
  swift_bridgeObjectRetain_n(a2, 2);
  v32 = swift_retain_n(v5, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v33, v34))
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(v5, 2);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v43);
    goto LABEL_10;
  }
  v35 = swift_slowAlloc(32, -1);
  v36 = swift_slowAlloc(64, -1);
  aBlock[0] = v36;
  *(_DWORD *)v35 = 136315650;
  swift_bridgeObjectRetain(a2);
  v45 = sub_1003A4190(v24, a2, aBlock);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, aBlock, v35 + 4);
  swift_bridgeObjectRelease_n(a2, 3);
  *(_WORD *)(v35 + 12) = 2048;
  v37 = *(_QWORD *)(v5 + 24);
  v38 = *(_BYTE *)(v5 + 32);
  swift_release(v5);
  if ((v38 & 1) == 0)
  {
    v45 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, aBlock, v35 + 14);
    swift_release(v5);
    *(_WORD *)(v35 + 22) = 2080;
    v39 = Duration.description.getter(a3);
    v41 = v40;
    v45 = sub_1003A4190(v39, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, aBlock, v35 + 24);
    swift_bridgeObjectRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Started provisional background task '%s' (id=%ld) with timeout of %s.", (uint8_t *)v35, 0x20u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v43);
    goto LABEL_10;
  }
LABEL_15:
  __break(1u);
}

uint64_t sub_10032747C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD aBlock[5];
  _QWORD *v47;
  char v48[24];

  v1 = v0;
  v44 = type metadata accessor for DispatchTimeInterval(0);
  v2 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v39 - v10;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  result = __chkstk_darwin(v12);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v1 + 32) & 1) == 0)
  {
    v16 = *(_QWORD *)(v1 + 24);
    result = swift_beginAccess(v1 + 16, v48, 0, 0);
    if (!*(_QWORD *)(*(_QWORD *)(v1 + 16) + 16))
    {
      v41 = v16;
      v42 = v6;
      v43 = v5;
      v17 = *(_QWORD *)(v1 + 40);
      if (v17)
      {
        v18 = swift_retain(*(_QWORD *)(v1 + 40));
        dispatch thunk of DispatchWorkItem.cancel()(v18);
        swift_release(v17);
        v19 = *(_QWORD *)(v1 + 40);
        *(_QWORD *)(v1 + 40) = 0;
        swift_release(v19);
      }
      v20 = swift_allocObject(&unk_100568C30, 24, 7);
      *(_QWORD *)(v20 + 16) = 0;
      v21 = (uint64_t *)(v20 + 16);
      v22 = (_QWORD *)swift_allocObject(&unk_100568C58, 40, 7);
      v22[2] = v20;
      v22[3] = v1;
      v22[4] = v41;
      aBlock[4] = sub_10032804C;
      v47 = v22;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100206734;
      aBlock[3] = &unk_100568C70;
      v23 = _Block_copy(aBlock);
      v45[0] = _swiftEmptyArrayStorage;
      v24 = sub_100225940();
      v40 = v20;
      v41 = v24;
      swift_retain(v20);
      swift_retain(v1);
      v25 = sub_100012E18((uint64_t *)&unk_1005D8530);
      v26 = sub_1002DECD4();
      dispatch thunk of SetAlgebra.init<A>(_:)(v45, v25, v26, v12, v41);
      v27 = type metadata accessor for DispatchWorkItem(0);
      swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
      v28 = DispatchWorkItem.init(flags:block:)(v15, v23);
      swift_release(v47);
      swift_beginAccess(v21, aBlock, 1, 0);
      v29 = *v21;
      *v21 = v28;
      swift_release(v29);
      v30 = *v21;
      v31 = *(_QWORD *)(v1 + 40);
      *(_QWORD *)(v1 + 40) = *v21;
      swift_retain(v30);
      swift_release(v31);
      v32 = sub_10015672C();
      v33 = (void *)static OS_dispatch_queue.main.getter(v32);
      static DispatchTime.now()();
      v34 = v1 + OBJC_IVAR____TtC11MobileNotes35ProvisionalBackgroundTaskController_timeoutInterval;
      swift_beginAccess(v34, v45, 0, 0);
      v35 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v34, v44);
      + infix(_:_:)(v9, v4);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v35);
      v36 = v43;
      v37 = *(uint64_t (**)(char *, uint64_t))(v42 + 8);
      result = v37(v9, v43);
      v38 = *v21;
      if (*v21)
      {
        swift_retain(*v21);
        OS_dispatch_queue.asyncAfter(deadline:execute:)(v11, v38);

        swift_release(v38);
        v37(v11, v36);
        return swift_release(v40);
      }
      else
      {
        __break(1u);
      }
    }
  }
  return result;
}

void sub_1003277EC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56[24];
  uint64_t v57[3];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[16];

  v55 = a1;
  v5 = sub_100012E18(&qword_1005D9188);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v51 - v9;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.ui.getter(v13);
  swift_retain_n(a3, 4);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v53 = v12;
    v54 = v11;
    v19 = swift_slowAlloc(32, -1);
    v52 = swift_slowAlloc(64, -1);
    v57[0] = v52;
    *(_DWORD *)v19 = 136315650;
    swift_bridgeObjectRetain(a2);
    v60 = sub_1003A4190(v55, a2, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v19 + 4);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v19 + 12) = 2080;
    if ((*(_BYTE *)(a3 + 32) & 1) != 0)
    {
      v20 = 0xE300000000000000;
      v21 = 7104878;
    }
    else
    {
      v60 = *(_QWORD *)(a3 + 24);
      v22 = sub_100156368();
      v21 = BinaryInteger.description.getter(&type metadata for Int, v22);
      v20 = v23;
    }
    v60 = sub_1003A4190(v21, v20, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v19 + 14);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v19 + 22) = 2048;
    swift_beginAccess(a3 + 16, v56, 0, 0);
    v24 = *(_QWORD *)(*(_QWORD *)(a3 + 16) + 16);
    swift_release(a3);
    v60 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v19 + 24);
    swift_release(a3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Provisional background task '%s' (id=%s) expiring; cancelling %ld subtask(s).",
      (uint8_t *)v19,
      0x20u);
    v25 = v52;
    swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v15, v54);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(a3, 4);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  swift_beginAccess(a3 + 16, &v60, 1, 0);
  v26 = *(_QWORD *)(a3 + 16);
  v27 = *(_QWORD *)(v26 + 64);
  v54 = a3;
  v55 = v26 + 64;
  v28 = 1 << *(_BYTE *)(v26 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v31 = (unint64_t)(v28 + 63) >> 6;
  v53 = v31 - 1;
  swift_bridgeObjectRetain(v26);
  v32 = 0;
  if (!v30)
    goto LABEL_14;
LABEL_12:
  v36 = __clz(__rbit64(v30));
  v30 &= v30 - 1;
  v37 = v36 | (v32 << 6);
  while (2)
  {
    v38 = *(_QWORD *)(v26 + 48);
    v39 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v8, v38 + *(_QWORD *)(*(_QWORD *)(v39 - 8) + 72) * v37, v39);
    v40 = *(_QWORD *)(v26 + 56) + 40 * v37;
    v41 = sub_100012E18(&qword_1005D9190);
    sub_10012D11C(v40, (uint64_t)&v8[*(int *)(v41 + 48)]);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v8, 0, 1, v41);
    while (1)
    {
      sub_100328058((uint64_t)v8, (uint64_t)v10);
      v46 = sub_100012E18(&qword_1005D9190);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v10, 1, v46) == 1)
      {
        swift_release(v26);
        v47 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
        v48 = v54;
        if ((*(_BYTE *)(v54 + 32) & 1) != 0)
          goto LABEL_37;
        v49 = v47;
        objc_msgSend(v47, "endBackgroundTask:", *(_QWORD *)(v54 + 24));

        *(_BYTE *)(v48 + 32) = 1;
        v50 = *(_QWORD *)(v48 + 16);
        *(_QWORD *)(v48 + 16) = &_swiftEmptyDictionarySingleton;
        *(_QWORD *)(v48 + 24) = 0;
        swift_bridgeObjectRelease(v50);
        return;
      }
      sub_10013B100((__int128 *)&v10[*(int *)(v46 + 48)], (uint64_t)v57);
      v33 = v58;
      v34 = v59;
      sub_10012D19C(v57, v58);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
      v35 = type metadata accessor for UUID(0);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v35 - 8) + 8))(v10, v35);
      sub_1000153C0(v57);
      if (v30)
        goto LABEL_12;
LABEL_14:
      v42 = v32 + 1;
      if (__OFADD__(v32, 1))
      {
        __break(1u);
        goto LABEL_36;
      }
      if (v42 < v31)
      {
        v43 = *(_QWORD *)(v55 + 8 * v42);
        if (v43)
          goto LABEL_17;
        v44 = v32 + 2;
        ++v32;
        if (v42 + 1 < v31)
        {
          v43 = *(_QWORD *)(v55 + 8 * v44);
          if (v43)
            goto LABEL_20;
          v32 = v42 + 1;
          if (v42 + 2 < v31)
          {
            v43 = *(_QWORD *)(v55 + 8 * (v42 + 2));
            if (v43)
            {
              v42 += 2;
              goto LABEL_17;
            }
            v44 = v42 + 3;
            v32 = v42 + 2;
            if (v42 + 3 < v31)
              break;
          }
        }
      }
LABEL_31:
      v45 = sub_100012E18(&qword_1005D9190);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v8, 1, 1, v45);
      v30 = 0;
    }
    v43 = *(_QWORD *)(v55 + 8 * v44);
    if (v43)
    {
LABEL_20:
      v42 = v44;
LABEL_17:
      v30 = (v43 - 1) & v43;
      v37 = __clz(__rbit64(v43)) + (v42 << 6);
      v32 = v42;
      continue;
    }
    break;
  }
  while (1)
  {
    v42 = v44 + 1;
    if (__OFADD__(v44, 1))
      break;
    if (v42 >= v31)
    {
      v32 = v53;
      goto LABEL_31;
    }
    v43 = *(_QWORD *)(v55 + 8 * v42);
    ++v44;
    if (v43)
      goto LABEL_17;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

void sub_100327DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v22, 0, 0);
  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = swift_retain(v10);
    v12 = dispatch thunk of DispatchWorkItem.isCancelled.getter(v11);
    swift_release(v10);
    if ((v12 & 1) == 0 && (*(_BYTE *)(a2 + 32) & 1) == 0 && *(_QWORD *)(a2 + 24) == a3)
    {
      v13 = swift_beginAccess(a2 + 16, v21, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 16))
      {
        v14 = static Logger.ui.getter(v13);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(12, -1);
          *(_DWORD *)v17 = 134217984;
          v20 = a3;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v17 + 4);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Provisional background task (id=%ld) finished normally with no more subtasks.", v17, 0xCu);
          swift_slowDealloc(v17, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
        v18 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
        objc_msgSend(v18, "endBackgroundTask:", a3);

        *(_QWORD *)(a2 + 24) = 0;
        *(_BYTE *)(a2 + 32) = 1;
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100327FC4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100327FF0()
{
  uint64_t v0;

  sub_1003277EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100327FFC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100328020()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10032804C()
{
  uint64_t *v0;

  sub_100327DDC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100328058(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D9188);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for SimulateQuotaExceededActivity()
{
  return objc_opt_self(ICSimulateQuotaExceededActivity);
}

void sub_100328318()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  NSString v12;
  id v13;

  v1 = *(void **)&v0[OBJC_IVAR___ICSimulateQuotaExceededActivity_note];
  v2 = objc_msgSend(v1, "recordID");
  if (!v2)
    goto LABEL_8;
  v3 = v2;
  v4 = objc_msgSend(v1, "account");
  if (!v4 || (v5 = v4, v6 = objc_msgSend(v4, "identifier"), v5, !v6))
  {

LABEL_8:
    objc_msgSend(v0, "activityDidFinish:", 0);
    return;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v8 = v7;

  v9 = objc_msgSend((id)objc_opt_self(ICAppDelegate), "sharedInstance");
  if (v9)
  {
    v10 = v9;
    v13 = objc_msgSend(v9, "cloudContextDelegate");

    if (v13)
    {
      v11 = objc_msgSend((id)objc_opt_self(ICCloudContext), "sharedContext");
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8);
      objc_msgSend(v13, "cloudContext:didExceedQuotaForRecordID:accountID:", v11, v3, v12);

      objc_msgSend(v0, "activityDidFinish:", 1);
      return;
    }

    swift_bridgeObjectRelease(v8);
    goto LABEL_8;
  }
  __break(1u);
}

uint64_t sub_1003284D0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10032855C()
{
  void *v0;
  id v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v8, "viewDidLoad");
  v1 = objc_msgSend(v0, "navigationItem");
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v1, "setTitle:", v7, swift_bridgeObjectRelease(v6).n128_f64[0]);

  sub_100328690(0);
}

void sub_100328690(int a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  char v35;
  char v36;
  uint64_t v37;

  v2 = v1;
  v34 = a1;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D9240);
  v33 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10032A250();
  v11 = v10;
  if ((unint64_t)v10 >> 62)
  {
    if (v10 < 0)
      v26 = v10;
    else
      v26 = v10 & 0xFFFFFFFFFFFFFF8;
    v27 = sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
    v13 = _bridgeCocoaArray<A>(_:)(v26, v27);
  }
  else
  {
    swift_bridgeObjectRetain(v10);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v12);
    sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
    v13 = v11;
  }
  v14 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection], "unresolvedParticipants", swift_bridgeObjectRelease(v11).n128_f64[0]);
  v15 = sub_1000163BC(0, &qword_1005D9210, ICCKShareUnknownParticipant_ptr);
  v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v28 = v16;
    else
      v28 = v16 & 0xFFFFFFFFFFFFFF8;
    v29 = sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
    swift_bridgeObjectRetain(v16);
    v18 = _bridgeCocoaArray<A>(_:)(v28, v29);
    swift_bridgeObjectRelease(v16);
  }
  else
  {
    swift_bridgeObjectRetain(v16);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v17);
    sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
    v18 = v16;
  }
  swift_bridgeObjectRelease(v16);
  v37 = v13;
  sub_1001D993C(v18);
  v19 = v37;
  if ((unint64_t)v37 >> 62)
  {
    if (v37 < 0)
      v30 = v37;
    else
      v30 = v37 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v37);
    v31 = _CocoaArrayWrapper.endIndex.getter(v30);
    swift_bridgeObjectRelease(v19);
    if (v31)
      goto LABEL_7;
  }
  else if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_7:
    objc_msgSend(v2, "_setContentUnavailableConfiguration:", 0);
    v20 = sub_10032B2E4();
    NSDiffableDataSourceSnapshot.init()(&type metadata for FolderComposerSelectionViewController.Section, &type metadata for AnyHashable, v20, &protocol witness table for AnyHashable);
    NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100556F00);
    v21 = sub_100012E18((uint64_t *)&unk_1005D21E0);
    v22 = swift_allocObject(v21, 72, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100451C20;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, &v2[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_joinSummaryIdentifier], v3);
    v23 = sub_10032B29C();
    AnyHashable.init<A>(_:)((_QWORD *)(v22 + 32), v6, v3, v23);
    v36 = 0;
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v22, &v36, v7);
    swift_bridgeObjectRelease(v22);
    NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100556F28);
    v24 = sub_1002B06A0(v19);
    swift_bridgeObjectRelease(v19);
    v35 = 1;
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v24, &v35, v7);
    swift_bridgeObjectRelease(v24);
    v25 = sub_100328B78();
    dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v9, v34 & 1, 0, 0);

    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v7);
    return;
  }
  swift_bridgeObjectRelease(v19);
  sub_10032A510();
}

BOOL sub_100328AA8(uint64_t a1)
{
  return a1 == 1;
}

BOOL sub_100328AB4(uint64_t a1)
{
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (a1 != 1)
    return 0;
  v2 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection), "unresolvedParticipants");
  v3 = sub_1000163BC(0, &qword_1005D9210, ICCKShareUnknownParticipant_ptr);
  v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if ((unint64_t)v4 >> 62)
  {
    if (v4 < 0)
      v7 = v4;
    else
      v7 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v5 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease(v4);
  return v5 > 0;
}

id sub_100328B78()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController____lazy_storage___diffableDataSource;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController____lazy_storage___diffableDataSource);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController____lazy_storage___diffableDataSource);
  }
  else
  {
    v4 = (void *)sub_100328D40(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_100328D40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;

  v2 = sub_100012E18(&qword_1005D9218);
  v93 = *(_QWORD *)(v2 - 8);
  v94 = v2;
  v95 = *(_QWORD *)(v93 + 64);
  v3 = __chkstk_darwin(v2);
  v92 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v107 = (char *)&v81 - v5;
  v6 = sub_100012E18(&qword_1005D63A0);
  v89 = *(_QWORD *)(v6 - 8);
  v90 = v6;
  v91 = *(_QWORD *)(v89 + 64);
  v7 = __chkstk_darwin(v6);
  v88 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v106 = (char *)&v81 - v9;
  v10 = sub_100012E18(&qword_1005D9220);
  v102 = *(_QWORD *)(v10 - 8);
  v103 = v10;
  v85 = *(_QWORD *)(v102 + 64);
  v11 = __chkstk_darwin(v10);
  v105 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v81 - v13;
  v14 = sub_100012E18(&qword_1005D9228);
  v15 = *(_QWORD *)(v14 - 8);
  v98 = v14;
  v99 = v15;
  v16 = *(_QWORD *)(v15 + 64);
  v17 = __chkstk_darwin(v14);
  v97 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v19 = (char *)&v81 - v18;
  v20 = sub_100012E18(&qword_1005D9230);
  v21 = *(_QWORD *)(v20 - 8);
  v100 = v20;
  v101 = v21;
  v22 = *(_QWORD *)(v21 + 64);
  v23 = __chkstk_darwin(v20);
  v82 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v25 = (char *)&v81 - v24;
  v26 = swift_allocObject(&unk_100568CD0, 24, 7);
  swift_unknownObjectUnownedInit(v26 + 16, a1);
  v27 = type metadata accessor for FolderComposerParticipantJoinCell();
  v28 = type metadata accessor for UUID(0);
  v87 = v25;
  UICollectionView.CellRegistration.init(handler:)(sub_10032AF3C, v26, v27, v28);
  v29 = swift_allocObject(&unk_100568CD0, 24, 7);
  swift_unknownObjectUnownedInit(v29 + 16, a1);
  v30 = type metadata accessor for FolderComposerParticipantCell();
  v31 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
  v86 = v19;
  UICollectionView.CellRegistration.init(handler:)(sub_10032AF44, v29, v30, v31);
  v32 = swift_allocObject(&unk_100568CD0, 24, 7);
  v96 = a1;
  swift_unknownObjectUnownedInit(v32 + 16, a1);
  v33 = sub_1000163BC(0, &qword_1005D9210, ICCKShareUnknownParticipant_ptr);
  v34 = v104;
  UICollectionView.CellRegistration.init(handler:)(sub_10032AF4C, v32, v30, v33);
  v84 = sub_10032EC38();
  v83 = swift_allocObject(&unk_100568CD0, 24, 7);
  swift_unknownObjectUnownedInit(v83 + 16, a1);
  v35 = v101;
  v36 = v100;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))((char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v100);
  v37 = v99;
  v38 = v19;
  v39 = v98;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v97, v38, v98);
  v41 = v102;
  v40 = v103;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v105, v34, v103);
  v42 = *(unsigned __int8 *)(v35 + 80);
  v43 = v35;
  v44 = (v42 + 24) & ~v42;
  v45 = *(unsigned __int8 *)(v37 + 80);
  v46 = (v22 + v45 + v44) & ~v45;
  v47 = *(unsigned __int8 *)(v41 + 80);
  v48 = (v16 + v47 + v46) & ~v47;
  v49 = swift_allocObject(&unk_100568CF8, v48 + v85, v42 | v45 | v47 | 7);
  *(_QWORD *)(v49 + 16) = v83;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 32))(v49 + v44, v82, v36);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v49 + v46, v97, v39);
  (*(void (**)(uint64_t, char *, uint64_t))(v41 + 32))(v49 + v48, v105, v40);
  v50 = objc_allocWithZone((Class)sub_100012E18(&qword_1005D9238));
  v51 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v84, sub_10032B060, v49);
  v52 = *(void **)(v96
                 + OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController____lazy_storage___diffableDataSource);
  *(_QWORD *)(v96
            + OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController____lazy_storage___diffableDataSource) = v51;

  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  v55 = v54;
  v56 = type metadata accessor for FolderComposerFilterHeader();
  v57 = v106;
  UICollectionView.SupplementaryRegistration.init(elementKind:handler:)(v53, v55, sub_100329F94, 0, v56);
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionFooter);
  v60 = v59;
  v61 = type metadata accessor for FolderComposerFilterFooter();
  v62 = v107;
  v63 = UICollectionView.SupplementaryRegistration.init(elementKind:handler:)(v58, v60, sub_10032A070, 0, v61);
  v64 = (void *)sub_100328B78(v63);
  v66 = v88;
  v65 = v89;
  v67 = v90;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v88, v57, v90);
  v69 = v92;
  v68 = v93;
  v70 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v92, v62, v94);
  v71 = *(unsigned __int8 *)(v65 + 80);
  v72 = v65;
  v73 = (v71 + 16) & ~v71;
  v74 = *(unsigned __int8 *)(v68 + 80);
  v75 = v68;
  v76 = (v91 + v74 + v73) & ~v74;
  v77 = swift_allocObject(&unk_100568D20, v76 + v95, v71 | v74 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v72 + 32))(v77 + v73, v66, v67);
  (*(void (**)(uint64_t, char *, uint64_t))(v75 + 32))(v77 + v76, v69, v70);
  dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter(sub_10032B1D8, v77);

  v79 = sub_100328B78(v78);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v107, v70);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v106, v67);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v104, v103);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v86, v98);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v87, v100);
  return v79;
}

uint64_t sub_1003293B0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  char *Strong;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;

  v5 = a4 + 16;
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(a4 + 16);
  v7 = *(id *)&Strong[OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection];

  v8 = *(void **)&a1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_participantSelection];
  *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_participantSelection] = v7;
  v9 = v7;

  sub_10032B370();
  objc_msgSend(a1, "setNeedsUpdateConfiguration");

  v10 = swift_unknownObjectUnownedLoadStrong(v5);
  v11 = swift_allocObject(&unk_100568D48, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  v12 = (uint64_t (**)(uint64_t))&a1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged];
  v14 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged];
  v13 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged + 8];
  *v12 = sub_10032B294;
  v12[1] = (uint64_t (*)(uint64_t))v11;
  return sub_100012C50(v14, v13);
}

uint64_t sub_100329484(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  Swift::OpaquePointer v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v19;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D9240);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)sub_100328B78(v9);
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()();

  v13 = sub_100012E18((uint64_t *)&unk_1005D21E0);
  v14._rawValue = (void *)swift_allocObject(v13, 72, 7);
  *((_OWORD *)v14._rawValue + 1) = xmmword_100451C20;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a2 + OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_joinSummaryIdentifier, v3);
  v15 = sub_10032B29C();
  AnyHashable.init<A>(_:)((_QWORD *)v14._rawValue + 4, v6, v3, v15);
  NSDiffableDataSourceSnapshot.reconfigureItems(_:)(v14);
  swift_bridgeObjectRelease(v14._rawValue);
  v17 = (void *)sub_100328B78(v16);
  dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v11, 1, 0, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void sub_100329600(char *a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *Strong;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v7 = sub_100012E18(&qword_1005CFE60);
  __chkstk_darwin(v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UICellAccessory.CheckmarkOptions(0);
  v36 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a3;
  v18 = *(void **)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_participant];
  *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_participant] = *a3;
  v19 = v17;

  objc_msgSend(a1, "setNeedsUpdateConfiguration");
  v20 = objc_msgSend(v19, "userIdentity");
  v21 = objc_msgSend(v20, "userRecordID");

  if (v21)
  {
    v35 = v10;
    v22 = a4 + 16;
    v23 = objc_msgSend(v21, "recordName");

    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    Strong = (char *)swift_unknownObjectUnownedLoadStrong(v22);
    v28 = *(id *)&Strong[OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection];

    v29 = objc_msgSend(v28, "participantUserIDs");
    v30 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for String, &protocol witness table for String);

    LOBYTE(v24) = sub_10037A140(v24, v26, v30);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v30);
    a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_showCheckmark] = v24 & 1;
    if ((v24 & 1) != 0)
    {
      v31 = sub_100012E18(&qword_1005CFE70);
      v32 = type metadata accessor for UICellAccessory(0);
      v33 = (_QWORD *)swift_allocObject(v31, ((*(unsigned __int8 *)(*(_QWORD *)(v32 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v32 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v32 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v32 - 8) + 80) | 7);
      *((_OWORD *)v33 + 1) = xmmword_100451C20;
      (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for UICellAccessory.DisplayedState.always(_:), v13);
      v34 = type metadata accessor for UICellAccessory.LayoutDimension(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v9, 1, 1, v34);
      UICellAccessory.CheckmarkOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v9, 0);
      static UICellAccessory.checkmark(displayed:options:)(v16, v12);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v12, v35);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }
    else
    {
      v33 = _swiftEmptyArrayStorage;
    }
    UICollectionViewListCell.accessories.setter(v33);
  }
}

uint64_t sub_100329934(char *a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  char *Strong;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;

  v7 = sub_100012E18(&qword_1005CFE60);
  __chkstk_darwin(v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UICellAccessory.CheckmarkOptions(0);
  v34 = *(_QWORD *)(v10 - 8);
  v35 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a3;
  v18 = a4 + 16;
  v19 = *(void **)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_unknownParticipant];
  *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_unknownParticipant] = v17;
  v20 = v17;

  objc_msgSend(a1, "setNeedsUpdateConfiguration");
  Strong = (char *)swift_unknownObjectUnownedLoadStrong(v18);
  v22 = *(id *)&Strong[OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection];

  v23 = objc_msgSend(v22, "participantUserIDs");
  v24 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for String, &protocol witness table for String);

  v25 = objc_msgSend(v20, "participantUserID");
  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v28 = v27;

  LOBYTE(v25) = sub_10037A140(v26, v28, v24);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v24);
  a1[OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_showCheckmark] = v25 & 1;
  if ((v25 & 1) != 0)
  {
    v29 = sub_100012E18(&qword_1005CFE70);
    v30 = type metadata accessor for UICellAccessory(0);
    v31 = (_QWORD *)swift_allocObject(v29, ((*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v30 - 8) + 80) | 7);
    *((_OWORD *)v31 + 1) = xmmword_100451C20;
    (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for UICellAccessory.DisplayedState.always(_:), v13);
    v32 = type metadata accessor for UICellAccessory.LayoutDimension(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v9, 1, 1, v32);
    UICellAccessory.CheckmarkOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v9, 0);
    static UICellAccessory.checkmark(displayed:options:)(v16, v12);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v12, v35);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  else
  {
    v31 = _swiftEmptyArrayStorage;
  }
  return UICollectionViewListCell.accessories.setter(v31);
}

uint64_t sub_100329C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t Strong;
  void (*v26)(char *, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  NSObject v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  objc_class *v35;
  NSObject v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  objc_class *v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];

  v44 = a7;
  v45 = a6;
  v46 = a2;
  v47 = a1;
  v10 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v43 - v14;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v22 = (char *)&v43 - v21;
  sub_10020DB18(a3, (uint64_t)v48);
  v23 = swift_dynamicCast(v15, v48, &type metadata for AnyHashable, v16, 6);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  if (!v23)
  {
    v24(v15, 1, 1, v16);
    goto LABEL_6;
  }
  v43 = a5;
  v24(v15, 0, 1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
LABEL_6:
    sub_100012DDC((uint64_t)v15, (uint64_t *)&unk_1005D06A0);
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v22, v15, v16);
  Strong = swift_unknownObjectUnownedLoadStrong(a4 + 16);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v26(v20, Strong + OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_joinSummaryIdentifier, v16);

  LOBYTE(Strong) = static UUID.== infix(_:_:)(v22, v20);
  v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  if ((Strong & 1) != 0)
  {
    v26(v13, (uint64_t)v22, v16);
    v24(v13, 0, 1, v16);
    v28 = type metadata accessor for FolderComposerParticipantJoinCell();
    v29 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(v43, v46, v13, v28, v16);
    sub_100012DDC((uint64_t)v13, (uint64_t *)&unk_1005D06A0);
    v27(v22, v16);
    return v29;
  }
  v27(v22, v16);
LABEL_7:
  v30.isa = AnyHashable._bridgeToObjectiveC()().isa;
  v31 = objc_opt_self(CKShareParticipant);
  v32 = swift_dynamicCastObjCClass(v30.isa, v31);
  if (v32)
  {
    v48[0] = v32;
    v33 = type metadata accessor for FolderComposerParticipantCell();
    v34 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
    v35 = v30.isa;
    v29 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(v45, v46, v48, v33, v34);

  }
  else
  {

    v36.isa = AnyHashable._bridgeToObjectiveC()().isa;
    v37 = objc_opt_self(ICCKShareUnknownParticipant);
    v38 = swift_dynamicCastObjCClass(v36.isa, v37);
    if (v38)
    {
      v48[0] = v38;
      v39 = type metadata accessor for FolderComposerParticipantCell();
      v40 = sub_1000163BC(0, &qword_1005D9210, ICCKShareUnknownParticipant_ptr);
      v41 = v36.isa;
      v29 = UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(v44, v46, v48, v39, v40);

    }
    else
    {

      return 0;
    }
  }
  return v29;
}

id sub_100329F94(char *a1)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, 0);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes26FolderComposerFilterHeader_text];
  v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes26FolderComposerFilterHeader_text + 8];
  *v8 = v5;
  v8[1] = v7;
  swift_bridgeObjectRelease(v9);
  return objc_msgSend(a1, "setNeedsUpdateConfiguration");
}

id sub_10032A070(char *a1)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, 0);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes26FolderComposerFilterFooter_text];
  v9 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes26FolderComposerFilterFooter_text + 8];
  *v8 = v5;
  v8[1] = v7;
  swift_bridgeObjectRelease(v9);
  return objc_msgSend(a1, "setNeedsUpdateConfiguration");
}

uint64_t sub_10032A144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v22;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  if (v11 == a2 && v12 == a3)
  {
    swift_bridgeObjectRelease(a3);
    goto LABEL_13;
  }
  v14 = v12;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, a3, 0);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
LABEL_13:
    v22 = type metadata accessor for FolderComposerFilterHeader();
    return UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)(a5, a4, v22);
  }
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionFooter);
  if (v16 == a2 && v17 == a3)
  {
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v19 = v17;
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a2, a3, 0);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
      return 0;
  }
  v22 = type metadata accessor for FolderComposerFilterFooter();
  a5 = a6;
  return UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)(a5, a4, v22);
}

void sub_10032A250()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  id v11;
  _QWORD aBlock[5];
  uint64_t v13;
  _QWORD *v14;

  v1 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "managedObjectContext");

    if (v3)
    {
      v4 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection), "accountObjectID");
      if (v4)
      {
        v5 = v4;
        v14 = _swiftEmptyArrayStorage;
        v6 = (_QWORD *)swift_allocObject(&unk_100568D70, 40, 7);
        v6[2] = v3;
        v6[3] = v5;
        v6[4] = &v14;
        v7 = swift_allocObject(&unk_100568D98, 32, 7);
        *(_QWORD *)(v7 + 16) = sub_10032B354;
        *(_QWORD *)(v7 + 24) = v6;
        aBlock[4] = sub_1000165D0;
        v13 = v7;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016618;
        aBlock[3] = &unk_100568DB0;
        v8 = _Block_copy(aBlock);
        v9 = v13;
        v10 = v3;
        v11 = v5;
        swift_retain(v7);
        objc_msgSend(v10, "performBlockAndWait:", v8, swift_release(v9).n128_f64[0]);

        _Block_release(v8);
        LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v7, "", 125, 131, 36, 1);
        swift_release(v7);
        if ((v8 & 1) != 0)
          __break(1u);
        else
          swift_release(v6);
      }
      else
      {

      }
    }
  }
}

void sub_10032A428(void *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v10 = objc_msgSend(a1, "ic_existingObjectWithID:", a2);
  if (v10)
  {
    v4 = objc_opt_self(ICAccount);
    v5 = (void *)swift_dynamicCastObjCClass(v10, v4);
    if (v5)
    {
      v6 = objc_msgSend(v5, "uniqueUserParticipants");
      v7 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

      v9 = *a3;
      *a3 = v8;
      swift_bridgeObjectRelease(v9);
    }
    else
    {

    }
  }
}

void sub_10032A510()
{
  void *v0;
  void *v1;
  NSString v2;
  id v3;
  void *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  id v17;

  v17 = objc_msgSend((id)objc_opt_self(UIContentUnavailableConfiguration), "emptyProminentConfiguration");
  v1 = (void *)objc_opt_self(UIImage);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "ic_systemImageNamed:", v2);

  objc_msgSend(v17, "setImage:", v3);
  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v17, "setText:", v10);

  v11 = objc_msgSend(v4, "mainBundle");
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v15 = v14;

  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  objc_msgSend(v17, "setSecondaryText:", v16);

  objc_msgSend(v0, "_setContentUnavailableConfiguration:", v17);
}

void sub_10032A78C()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController____lazy_storage___diffableDataSource));
}

uint64_t sub_10032A7F0()
{
  return type metadata accessor for FolderComposerParticipantViewController(0);
}

uint64_t type metadata accessor for FolderComposerParticipantViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D9200;
  if (!qword_1005D9200)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FolderComposerParticipantViewController);
  return result;
}

uint64_t sub_10032A834(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[1] = "\b";
  return swift_updateClassMetadata2(a1, 256, 2, v2, a1 + 216);
}

uint64_t sub_10032A880()
{
  id v0;
  NSObject v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _BOOL8 v5;
  Class isa;
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  _QWORD v13[5];

  v0 = sub_100328B78();
  dispatch thunk of UICollectionViewDiffableDataSource.itemIdentifier(for:)(v13);

  sub_10032AED0((uint64_t)v13, (uint64_t)v11);
  if (v12)
  {
    v1.isa = AnyHashable._bridgeToObjectiveC()().isa;
    sub_10018550C((uint64_t)v11);
    v2 = objc_opt_self(CKShareParticipant);
    v3 = swift_dynamicCastObjCClass(v1.isa, v2);
    if (v3)
    {
      v4 = (void *)v3;
      sub_10032AED0((uint64_t)v13, (uint64_t)v11);

      sub_100012DDC((uint64_t)v11, &qword_1005D5038);
      sub_100012DDC((uint64_t)v13, &qword_1005D5038);
      return 1;
    }

  }
  else
  {
    sub_100012DDC((uint64_t)v11, &qword_1005D5038);
  }
  sub_10032AED0((uint64_t)v13, (uint64_t)v11);
  sub_10032AED0((uint64_t)v11, (uint64_t)v9);
  if (v10)
  {
    isa = AnyHashable._bridgeToObjectiveC()().isa;
    sub_100012DDC((uint64_t)v11, &qword_1005D5038);
    sub_100012DDC((uint64_t)v13, &qword_1005D5038);
    sub_10018550C((uint64_t)v9);
    v7 = objc_opt_self(ICCKShareUnknownParticipant);
    v5 = swift_dynamicCastObjCClass(isa, v7) != 0;

  }
  else
  {
    sub_100012DDC((uint64_t)v11, &qword_1005D5038);
    sub_100012DDC((uint64_t)v13, &qword_1005D5038);
    sub_100012DDC((uint64_t)v9, &qword_1005D5038);
    return 0;
  }
  return v5;
}

void sub_10032AA04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  NSString v36;
  char **v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  Class v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;

  v2 = v1;
  v4 = sub_100012E18(&qword_1005CFE60);
  __chkstk_darwin(v4);
  v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UICellAccessory.CheckmarkOptions(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v55 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10032EC38();
  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v56 = objc_msgSend(v14, "cellForItemAtIndexPath:", isa);

  if (!v56)
    return;
  v16 = type metadata accessor for FolderComposerParticipantCell();
  v17 = swift_dynamicCastClass(v56, v16);
  if (!v17)
  {
LABEL_18:

    return;
  }
  v18 = v17;
  v50 = v11;
  v19 = *(void **)(v17 + OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_participant);
  v52 = v8;
  v53 = v7;
  v51 = v6;
  if (v19
    && (v20 = objc_msgSend(v19, "userIdentity"),
        v21 = objc_msgSend(v20, "userRecordID"),
        v20,
        v21))
  {
    v22 = objc_msgSend(v21, "recordName");

    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0;
  }
  v26 = *(void **)(v18 + OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_unknownParticipant);
  if (!v26)
  {
    if (!v25)
      goto LABEL_18;
    v30 = 0;
LABEL_13:
    v54 = a1;
    *(_QWORD *)&v31 = swift_bridgeObjectRelease(v30).n128_u64[0];
    goto LABEL_14;
  }
  v27 = objc_msgSend(v26, "participantUserID");
  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v30 = v29;

  if (v25)
    goto LABEL_13;
  if (!v30)
    goto LABEL_18;
  v54 = a1;
  v23 = v28;
  v25 = v30;
LABEL_14:
  v32 = OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection;
  v33 = objc_msgSend(*(id *)(v2 + OBJC_IVAR____TtC11MobileNotes39FolderComposerParticipantViewController_participantSelection), "participantUserIDs", v31);
  v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v33, &type metadata for String, &protocol witness table for String);

  LOBYTE(v33) = sub_10037A140(v23, v25, v34);
  swift_bridgeObjectRelease(v34);
  v35 = *(id *)(v2 + v32);
  v36 = String._bridgeToObjectiveC()();
  v37 = &selRef_removeParticipantUserID_;
  if ((v33 & 1) == 0)
    v37 = &selRef_addParticipantUserID_;
  objc_msgSend(v35, *v37, v36);

  v38 = objc_msgSend(*(id *)(v2 + v32), "participantUserIDs");
  v39 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v38, &type metadata for String, &protocol witness table for String);

  LOBYTE(v38) = sub_10037A140(v23, v25, v39);
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v39);
  *(_BYTE *)(v18 + OBJC_IVAR____TtC11MobileNotes29FolderComposerParticipantCell_showCheckmark) = v38 & 1;
  if ((v38 & 1) != 0)
  {
    v40 = sub_100012E18(&qword_1005CFE70);
    v41 = type metadata accessor for UICellAccessory(0);
    v42 = (_QWORD *)swift_allocObject(v40, ((*(unsigned __int8 *)(*(_QWORD *)(v41 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v41 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v41 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v41 - 8) + 80) | 7);
    *((_OWORD *)v42 + 1) = xmmword_100451C20;
    v43 = v55;
    v44 = v50;
    (*(void (**)(char *, _QWORD, uint64_t))(v55 + 104))(v13, enum case for UICellAccessory.DisplayedState.always(_:), v50);
    v45 = type metadata accessor for UICellAccessory.LayoutDimension(0);
    v46 = v51;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v51, 1, 1, v45);
    UICellAccessory.CheckmarkOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v46, 0);
    static UICellAccessory.checkmark(displayed:options:)(v13, v10);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v53);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v13, v44);
  }
  else
  {
    v42 = _swiftEmptyArrayStorage;
  }
  UICollectionViewListCell.accessories.setter(v42);
  v47 = sub_10032EC38();
  v48 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v47, "deselectItemAtIndexPath:animated:", v48, 0);

}

uint64_t sub_10032AED0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D5038);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10032AF18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectUnownedDestroy(v2 + 16, a2);
  return swift_deallocObject(v2, 24, 7);
}

uint64_t sub_10032AF3C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1003293B0(a1, a2, a3, v3);
}

void sub_10032AF44(char *a1, uint64_t a2, void **a3)
{
  uint64_t v3;

  sub_100329600(a1, a2, a3, v3);
}

uint64_t sub_10032AF4C(char *a1, uint64_t a2, void **a3)
{
  uint64_t v3;

  return sub_100329934(a1, a2, a3, v3);
}

uint64_t sub_10032AF54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = sub_100012E18(&qword_1005D9230);
  v1 = *(_QWORD *)(v18 - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 24) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v17 = sub_100012E18(&qword_1005D9228);
  v5 = *(_QWORD *)(v17 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v3 + v4 + v6) & ~v6;
  v8 = *(_QWORD *)(v5 + 64);
  v9 = sub_100012E18(&qword_1005D9220);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v7 + v8 + v11) & ~v11;
  v16 = v12 + *(_QWORD *)(v10 + 64);
  v13 = v2 | v6 | v11 | 7;
  v14 = swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, __n128))(v1 + 8))(v0 + v3, v18, v14);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v0 + v7, v17);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v9);
  return swift_deallocObject(v0, v16, v13);
}

uint64_t sub_10032B060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(sub_100012E18(&qword_1005D9230) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(sub_100012E18(&qword_1005D9228) - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012E18(&qword_1005D9220) - 8) + 80);
  return sub_100329C1C(a1, a2, a3, *(_QWORD *)(v3 + 16), v3 + v8, v3 + v11, v3 + ((v11 + v12 + v13) & ~v13));
}

uint64_t sub_10032B11C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100012E18(&qword_1005D63A0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_100012E18(&qword_1005D9218);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10032B1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(sub_100012E18(&qword_1005D63A0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012E18(&qword_1005D9218) - 8) + 80);
  return sub_10032A144(a1, a2, a3, a4, v4 + v10, v4 + ((v10 + v11 + v12) & ~v12));
}

uint64_t sub_10032B270()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10032B294(uint64_t a1)
{
  uint64_t v1;

  return sub_100329484(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10032B29C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D8AD0;
  if (!qword_1005D8AD0)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1005D8AD0);
  }
  return result;
}

unint64_t sub_10032B2E4()
{
  unint64_t result;

  result = qword_1005D9248;
  if (!qword_1005D9248)
  {
    result = swift_getWitnessTable(&unk_100463118, &type metadata for FolderComposerSelectionViewController.Section);
    atomic_store(result, (unint64_t *)&qword_1005D9248);
  }
  return result;
}

uint64_t sub_10032B328()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10032B354()
{
  uint64_t v0;

  sub_10032A428(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t **)(v0 + 32));
}

uint64_t sub_10032B360()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10032B370()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  _BOOL8 v4;
  void *v5;
  _BOOL8 v6;
  id v7;

  v1 = sub_10032B5BC(&OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell____lazy_storage___allAction, 1, (uint64_t)&unk_100568E28, (uint64_t)sub_10032BA1C);
  v2 = OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_participantSelection;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_participantSelection);
  v4 = v3 && objc_msgSend(v3, "joinOperator") == (id)1;
  objc_msgSend(v1, "setState:", v4);

  v7 = sub_10032B5BC(&OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell____lazy_storage___anyAction, 2, (uint64_t)&unk_100568E00, (uint64_t)sub_10032BA14);
  v5 = *(void **)(v0 + v2);
  v6 = v5 && objc_msgSend(v5, "joinOperator") == (id)2;
  objc_msgSend(v7, "setState:", v6);

}

uint64_t sub_10032B460()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_participantSelection);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, "summaryWithJoinOperatorMenu");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

UIMenu sub_10032B4CC()
{
  uint64_t v0;
  Swift::OpaquePointer preferredElementSize;
  id v2;
  Swift::String v3;
  UIImage_optional v5;

  sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
  v0 = sub_100012E18(&qword_1005CF6F0);
  preferredElementSize._rawValue = (void *)swift_allocObject(v0, 48, 7);
  *((_OWORD *)preferredElementSize._rawValue + 1) = xmmword_100451BF0;
  *((_QWORD *)preferredElementSize._rawValue + 4) = sub_10032B5BC(&OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell____lazy_storage___allAction, 1, (uint64_t)&unk_100568E28, (uint64_t)sub_10032BA1C);
  v2 = sub_10032B5BC(&OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell____lazy_storage___anyAction, 2, (uint64_t)&unk_100568E00, (uint64_t)sub_10032BA14);
  *((_QWORD *)preferredElementSize._rawValue + 5) = v2;
  specialized Array._endMutation()(v2);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v5.value.super.isa = 0;
  v5.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v3, (Swift::String_optional)0, v5, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize._rawValue, preferredElementSize);
}

id sub_10032B5BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;

  v5 = *a1;
  v6 = *(void **)&v4[*a1];
  if (v6)
  {
    v7 = *(id *)&v4[*a1];
  }
  else
  {
    v11 = v4;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v12 = (id)ICLocalizedStringFromICParticipantsFilterJoinOperator(a2);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = swift_allocObject(a3, 24, 7);
    *(_QWORD *)(v16 + 16) = v4;
    v17 = v4;
    v18 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v13, v15, 0, 0, 0, 0, 0, 0, 0, 0, 0, a4, v16);
    v19 = *(void **)&v4[v5];
    *(_QWORD *)&v11[v5] = v18;
    v7 = v18;

    v6 = 0;
  }
  v20 = v6;
  return v7;
}

id sub_10032B6C4(uint64_t a1, char *a2)
{
  id v3;
  id result;
  void (*v5)(uint64_t);
  uint64_t v6;

  v3 = *(id *)&a2[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_participantSelection];
  if (v3)
    v3 = objc_msgSend(v3, "setJoinOperator:", 1);
  sub_10032B370(v3);
  result = objc_msgSend(a2, "setNeedsUpdateConfiguration");
  v5 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged];
  if (v5)
  {
    v6 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged + 8];
    swift_retain(v6);
    v5(1);
    return (id)sub_100012C50((uint64_t)v5, v6);
  }
  return result;
}

id sub_10032B750(uint64_t a1, char *a2)
{
  id v3;
  id result;
  void (*v5)(uint64_t);
  uint64_t v6;

  v3 = *(id *)&a2[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_participantSelection];
  if (v3)
    v3 = objc_msgSend(v3, "setJoinOperator:", 2);
  sub_10032B370(v3);
  result = objc_msgSend(a2, "setNeedsUpdateConfiguration");
  v5 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged];
  if (v5)
  {
    v6 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged + 8];
    swift_retain(v6);
    v5(2);
    return (id)sub_100012C50((uint64_t)v5, v6);
  }
  return result;
}

id sub_10032B87C(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = &v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_participantSelection] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell____lazy_storage___allAction] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell____lazy_storage___anyAction] = 0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, "initWithCoder:", a1);

  return v5;
}

void sub_10032B924()
{
  uint64_t v0;

  sub_100012C50(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged), *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes33FolderComposerParticipantJoinCell_joinOperatorChanged + 8));

}

uint64_t type metadata accessor for FolderComposerParticipantJoinCell()
{
  return objc_opt_self(_TtC11MobileNotes33FolderComposerParticipantJoinCell);
}

uint64_t sub_10032B9F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10032BA14(uint64_t a1)
{
  uint64_t v1;

  return sub_10032B750(a1, *(char **)(v1 + 16));
}

id sub_10032BA1C(uint64_t a1)
{
  uint64_t v1;

  return sub_10032B6C4(a1, *(char **)(v1 + 16));
}

void *SetAttachmentSizeIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static SetAttachmentSizeIntent.persistentIdentifier;
}

unint64_t static SetAttachmentSizeIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_10032BA54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static SetAttachmentSizeIntent.title);
  sub_10012A0B0(v10, (uint64_t)static SetAttachmentSizeIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x80000001004890F0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t SetAttachmentSizeIntent.title.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CECA0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetAttachmentSizeIntent.title, (uint64_t)sub_10032BA54);
}

uint64_t static SetAttachmentSizeIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CECA0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetAttachmentSizeIntent.title, (uint64_t)sub_10032BA54, a1);
}

uint64_t static SetAttachmentSizeIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100489060);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static SetAttachmentSizeIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005D9298);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18((uint64_t *)&unk_1005D92A0);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B2BA0();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(20, 2, &type metadata for SetAttachmentSizeIntent, v6);
  v7._object = (void *)0x8000000100489090;
  v7._countAndFlagsBits = 0xD000000000000010;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100462AD8, v8);
  v10 = sub_100012E18(&qword_1005D92B0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 544175136;
  v11._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_100462B00, v12);
  v14 = sub_100012E18(&qword_1005D92B8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for SetAttachmentSizeIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for SetAttachmentSizeIntent, v6);
}

uint64_t SetAttachmentSizeIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch(sub_10032BFF8, 0, 0);
}

uint64_t sub_10032BFF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[6];
  v1 = v0[7];
  v4 = v0[4];
  v3 = v0[5];
  AppDependency.wrappedValue.getter(v0 + 2);
  v5 = (void *)v0[2];
  v0[8] = objc_msgSend(v5, "modernManagedObjectContext");

  v6 = (_QWORD *)swift_allocObject(&unk_100568E78, 48, 7);
  v0[9] = v6;
  v6[2] = v4;
  v6[3] = v3;
  v6[4] = v2;
  v6[5] = v1;
  v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  swift_retain(v4);
  swift_retain(v3);
  swift_retain(v2);
  swift_retain(v1);
  v8 = (_QWORD *)swift_task_alloc(v7);
  v0[10] = v8;
  *v8 = v0;
  v8[1] = sub_10032C0F4;
  return NSManagedObjectContext.perform<A>(_:)(v8, sub_10032D9E0, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_10032C0F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10032C19C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 72));
    v4 = sub_10032C160;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10032C160(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 64);
  static IntentResult.result<>()(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10032C19C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10032C1D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  __objc2_prot *v17;
  void *v18;

  v0 = type metadata accessor for AttachmentEntity(0);
  __chkstk_darwin(v0);
  v2 = (uint64_t *)((char *)&v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  IntentParameter.wrappedValue.getter(v2);
  AppDependency.wrappedValue.getter(&v18);
  v3 = v18;
  URL._bridgeToObjectiveC()((NSURL *)*(int *)(v0 + 20));
  v5 = v4;
  v6 = objc_msgSend(v3, "managedObjectIDForURIRepresentation:", v4);

  if (!v6)
  {
    __break(1u);
    goto LABEL_7;
  }
  v7 = objc_msgSend(v3, "managedObjectContextForObjectID:", v6);
  if (!v7)
  {
LABEL_7:
    __break(1u);
    JUMPOUT(0x10032C424);
  }
  v8 = v7;
  v9 = objc_msgSend(v7, "objectWithID:", v6);

  v17 = &OBJC_PROTOCOL___ICAttachmentObject;
  v10 = swift_dynamicCastObjCProtocolUnconditional(v9, 1, &v17, 0, 0, 0);
  sub_100270F08((uint64_t)v2);
  v11 = objc_opt_self(ICAttachment);
  if (swift_dynamicCastObjCClass(v10, v11))
  {
    v12 = v9;
    IntentParameter.wrappedValue.getter(&v18);
    __asm { BR              X10 }
  }
  v13 = sub_10013F4E8();
  v14 = swift_allocError(&type metadata for AppIntentsError, v13, 0, 0);
  *v15 = 16;
  swift_willThrow(v14);

}

void AttachmentViewSize.attachmentViewSize.getter(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_10032C45C()
{
  return 1;
}

uint64_t sub_10032C488@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CECA0, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetAttachmentSizeIntent.title, (uint64_t)sub_10032BA54, a1);
}

uint64_t sub_10032C4B4(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_1005D92C4);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_100130768;
  v5 = v1[1];
  *(_OWORD *)(v4 + 32) = *v1;
  *(_OWORD *)(v4 + 48) = v5;
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch(sub_10032BFF8, 0, 0);
}

uint64_t sub_10032C51C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = _s11MobileNotes23SetAttachmentSizeIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t sub_10032C544()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static AttachmentViewSize.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static AttachmentViewSize.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x656D686361747441, 0xEF657A695320746ELL);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Title for entity representing Notes attachment sizes", 52, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t AttachmentViewSize.typeDisplayRepresentation.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CECA8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AttachmentViewSize.typeDisplayRepresentation, (uint64_t)sub_10032C544);
}

uint64_t static AttachmentViewSize.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CECA8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AttachmentViewSize.typeDisplayRepresentation, (uint64_t)sub_10032C544, a1);
}

unint64_t sub_10032C7A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  char *v43;
  _BYTE *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  _BYTE *v54;
  uint64_t v55;
  unint64_t result;
  char *v57;
  char *v58;
  _BYTE *v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  void (*v63)(char *);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  void (*v69)(char *, uint64_t, uint64_t, uint64_t);
  char *v70;
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  char *v73;

  v0 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v0);
  v70 = (char *)&v57 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v73 = (char *)&v57 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for LocalizedStringResource(0);
  v14 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100012E18(&qword_1005D9368);
  v18 = sub_100012E18(&qword_1005D9370);
  v19 = *(_QWORD *)(v18 - 8);
  v66 = v18;
  v68 = *(_BYTE **)(v19 + 72);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = (v20 + 32) & ~v20;
  v22 = swift_allocObject(v17, v21 + 4 * (_QWORD)v68, v20 | 7);
  v62 = v22;
  *(_OWORD *)(v22 + 16) = xmmword_100457CB0;
  v65 = v22 + v21;
  *(_BYTE *)(v22 + v21) = 0;
  v23 = String.LocalizationValue.init(stringLiteral:)(0x746C7561666544, 0xE700000000000000);
  static Locale.current.getter(v23);
  v63 = *(void (**)(char *))(v5 + 104);
  v64 = v4;
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v63(v7);
  v25 = v16;
  v26 = v13;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v13, 0, 0, v10, v7, "Link enum value", 15, 2);
  v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v27 = v73;
  v71(v73, 1, 1, v72);
  v67 = type metadata accessor for DisplayRepresentation.Image(0);
  v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56);
  v28 = v70;
  v69(v70, 1, 1, v67);
  v29 = v25;
  DisplayRepresentation.init(title:subtitle:image:)(v25, v27, v28);
  v30 = v68;
  v32 = v65;
  v31 = v66;
  v60 = (uint64_t)&v68[v65 + *(int *)(v66 + 48)];
  v68[v65] = 1;
  v33 = v26;
  v34 = String.LocalizationValue.init(stringLiteral:)(0x6C6C616D53, 0xE500000000000000);
  v35 = v10;
  v57 = v10;
  static Locale.current.getter(v34);
  v36 = v7;
  v58 = v7;
  v37 = v7;
  v38 = v24;
  v61 = v24;
  v39 = v24;
  v41 = (void (*)(char *, uint64_t, uint64_t))v63;
  v40 = v64;
  ((void (*)(char *, uint64_t, uint64_t))v63)(v37, v39, v64);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v33, 0, 0, v35, v36, "Link enum value", 15, 2);
  v42 = v73;
  v71(v73, 1, 1, v72);
  v43 = v70;
  v69(v70, 1, 1, v67);
  DisplayRepresentation.init(title:subtitle:image:)(v29, v42, v43);
  v60 = 2 * (_QWORD)v30;
  v44 = (_BYTE *)(v32 + 2 * (_QWORD)v30);
  v59 = &v44[*(int *)(v31 + 48)];
  *v44 = 2;
  v45 = String.LocalizationValue.init(stringLiteral:)(0x6D756964654DLL, 0xE600000000000000);
  v46 = v57;
  static Locale.current.getter(v45);
  v47 = v58;
  v41(v58, v38, v40);
  v48 = v29;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v33, 0, 0, v46, v47, "Link enum value", 15, 2);
  v50 = v72;
  v49 = v73;
  v51 = v71;
  v71(v73, 1, 1, v72);
  v52 = v67;
  v53 = v69;
  v69(v43, 1, 1, v67);
  DisplayRepresentation.init(title:subtitle:image:)(v48, v49, v43);
  v54 = &v68[v60 + v65];
  v68 = &v54[*(int *)(v66 + 48)];
  *v54 = 3;
  v55 = String.LocalizationValue.init(stringLiteral:)(0x656772614CLL, 0xE500000000000000);
  static Locale.current.getter(v55);
  ((void (*)(char *, _QWORD, uint64_t))v63)(v47, v61, v64);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v33, 0, 0, v46, v47, "Link enum value", 15, 2);
  v51(v49, 1, 1, v50);
  v53(v43, 1, 1, v52);
  DisplayRepresentation.init(title:subtitle:image:)(v48, v49, v43);
  result = sub_100136A5C(v62);
  static AttachmentViewSize.caseDisplayRepresentations = result;
  return result;
}

uint64_t *AttachmentViewSize.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_1005CECB0 != -1)
    swift_once(&qword_1005CECB0, sub_10032C7A8);
  return &static AttachmentViewSize.caseDisplayRepresentations;
}

double static AttachmentViewSize.caseDisplayRepresentations.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_1005CECB0 != -1)
    swift_once(&qword_1005CECB0, sub_10032C7A8);
  swift_beginAccess(&static AttachmentViewSize.caseDisplayRepresentations, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static AttachmentViewSize.caseDisplayRepresentations).n128_u64[0];
  return result;
}

double static AttachmentViewSize.caseDisplayRepresentations.setter(uint64_t a1)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  if (qword_1005CECB0 != -1)
    swift_once(&qword_1005CECB0, sub_10032C7A8);
  swift_beginAccess(&static AttachmentViewSize.caseDisplayRepresentations, v4, 1, 0);
  v2 = static AttachmentViewSize.caseDisplayRepresentations;
  static AttachmentViewSize.caseDisplayRepresentations = a1;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t (*static AttachmentViewSize.caseDisplayRepresentations.modify(uint64_t a1))(_QWORD)
{
  if (qword_1005CECB0 != -1)
    swift_once(&qword_1005CECB0, sub_10032C7A8);
  swift_beginAccess(&static AttachmentViewSize.caseDisplayRepresentations, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t AttachmentViewSize.init(attachmentViewSize:)(unsigned __int16 a1)
{
  if (a1 >= 3u)
    return 0;
  else
    return 0x20103u >> (8 * a1);
}

_UNKNOWN **static AttachmentViewSize.allCases.getter()
{
  return &off_100556FF8;
}

uint64_t AttachmentViewSize.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10032CF1C + 4 * byte_100462AB4[a1]))(0x53746C7561666564, 0xEB00000000657A69);
}

uint64_t sub_10032CF1C()
{
  return 0x6C6C616D73;
}

uint64_t sub_10032CF30()
{
  return 0x6D756964656DLL;
}

uint64_t sub_10032CF44()
{
  return 0x656772616CLL;
}

void sub_10032CF58(char *a1)
{
  sub_10021623C(*a1);
}

unint64_t sub_10032CF64@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s11MobileNotes18AttachmentViewSizeO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10032CF90()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10032CFC8 + 4 * byte_100462AB8[*v0]))();
}

void sub_10032CFC8(_QWORD *a1@<X8>)
{
  *a1 = 0x6C6C616D73;
  a1[1] = 0xE500000000000000;
}

void sub_10032CFE0(_QWORD *a1@<X8>)
{
  *a1 = 0x6D756964656DLL;
  a1[1] = 0xE600000000000000;
}

void sub_10032CFF8(_QWORD *a1@<X8>)
{
  *a1 = 0x656772616CLL;
  a1[1] = 0xE500000000000000;
}

void sub_10032D010()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10032D064()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C6C616D73, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

void sub_10032D0C8()
{
  __asm { BR              X10 }
}

uint64_t sub_10032D10C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6C6C616D73, 0xE500000000000000);
  return swift_bridgeObjectRelease(0xE500000000000000);
}

void sub_10032D15C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10032D1AC()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6C6C616D73, 0xE500000000000000);
  swift_bridgeObjectRelease(0xE500000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10032D210@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CECA8, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AttachmentViewSize.typeDisplayRepresentation, (uint64_t)sub_10032C544, a1);
}

uint64_t sub_10032D234(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001283E0();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_10032D26C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10032DCAC();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_10032D2A4(_QWORD *a1@<X8>)
{
  *a1 = &off_100555940;
}

uint64_t _s11MobileNotes23SetAttachmentSizeIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(_BYTE *);
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  void (*v32)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  char v36;
  _BYTE *v37;
  unint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_BYTE *, uint64_t, uint64_t);
  uint64_t v44;
  _BYTE *v45;
  void (*v46)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v47;
  _BYTE *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _BYTE v55[12];
  unsigned int v56;
  void (*v57)(_BYTE *);
  uint64_t v58;
  void (*v59)(_BYTE *, uint64_t, uint64_t);
  unsigned int v60;
  _BYTE *v61;
  void (*v62)(_BYTE *, uint64_t, uint64_t, uint64_t);
  void (*v63)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  _BYTE *v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD v74[2];
  char v75;

  v71 = type metadata accessor for InputConnectionBehavior(0);
  v67 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v70 = &v55[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v1 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v2 = __chkstk_darwin(v1);
  v69 = &v55[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v68 = &v55[-v4];
  v5 = sub_100012E18(&qword_1005CF108);
  __chkstk_darwin(v5);
  v66 = &v55[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v7);
  v9 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = v10;
  __chkstk_darwin(v10);
  v14 = &v55[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = &v55[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = &v55[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  v64 = v21;
  __chkstk_darwin(v21);
  v61 = &v55[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = sub_100012E18((uint64_t *)&unk_1005CF110);
  v24 = String.LocalizationValue.init(stringLiteral:)(0x656D686361747441, 0xEA0000000000746ELL);
  static Locale.current.getter(v24);
  v25 = *(void (**)(_BYTE *))(v11 + 104);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v60 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v58 = v12;
  v25(v14);
  v59 = (void (*)(_BYTE *, uint64_t, uint64_t))v25;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Set Attachment Size intent", 46, 2);
  v27 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001004782D0);
  static Locale.current.getter(v27);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v25)(v14, v26, v12);
  v28 = v9;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for attachment", 36, 2);
  v63 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v22 + 56);
  v63(v9, 0, 1, v21);
  v29 = type metadata accessor for AttachmentEntity(0);
  v30 = v66;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v66, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v62 = v32;
  v33 = v68;
  v32(v68, 1, 1, v31);
  v34 = v69;
  v32(v69, 1, 1, v31);
  v74[0] = VisibleAccountsQuery.init(requireFolderCreationSupport:)();
  v74[1] = v35;
  v75 = v36 & 1;
  v56 = enum case for InputConnectionBehavior.default(_:);
  v57 = *(void (**)(_BYTE *))(v67 + 104);
  v37 = v70;
  v57(v70);
  v38 = sub_10012839C();
  v39 = v61;
  v67 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v61, v28, v30, v33, v34, v37, v74, &type metadata for VisibleAttachmentsQuery, v38);
  v66 = (_BYTE *)sub_100012E18((uint64_t *)&unk_1005CF170);
  v40 = String.LocalizationValue.init(stringLiteral:)(1702521171, 0xE400000000000000);
  static Locale.current.getter(v40);
  v41 = v60;
  v42 = v58;
  v43 = v59;
  v59(v14, v60, v58);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Set Attachment Size intent", 46, 2);
  v44 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000047, 0x8000000100478300);
  static Locale.current.getter(v44);
  v43(v14, v41, v42);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for size", 30, 2);
  v63(v28, 0, 1, v64);
  LOBYTE(v74[0]) = 4;
  v45 = v68;
  v46 = v62;
  v62(v68, 1, 1, v31);
  v47 = v69;
  v46(v69, 1, 1, v31);
  v48 = v70;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v57)(v70, v56, v71);
  v49 = sub_1001283E0();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v39, v28, v74, v45, v47, v48, &off_100555E80, v49);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v72 = 0xD000000000000024;
  v73 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v74, &v72, &type metadata for String, &protocol witness table for String);
  v50 = type metadata accessor for AppDependencyManager(0);
  v51 = static AppDependencyManager.shared.getter(v50);
  AppDependency.__allocating_init(key:manager:)(v74, v51);
  sub_100012E18(&qword_1005CEE50);
  v72 = 0xD000000000000021;
  v73 = 0x8000000100476B70;
  v52 = AnyHashable.init<A>(_:)(v74, &v72, &type metadata for String, &protocol witness table for String);
  v53 = static AppDependencyManager.shared.getter(v52);
  AppDependency.__allocating_init(key:manager:)(v74, v53);
  return v67;
}

uint64_t sub_10032D954@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10032D97C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10032D9A4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10032D9E0()
{
  sub_10032C1D8();
}

unint64_t _s11MobileNotes18AttachmentViewSizeO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100556F78, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t sub_10032DA48()
{
  unint64_t result;

  result = qword_1005D92C8;
  if (!qword_1005D92C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetAttachmentSizeIntent, &type metadata for SetAttachmentSizeIntent);
    atomic_store(result, (unint64_t *)&qword_1005D92C8);
  }
  return result;
}

unint64_t sub_10032DA90()
{
  unint64_t result;

  result = qword_1005D92D0;
  if (!qword_1005D92D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetAttachmentSizeIntent, &type metadata for SetAttachmentSizeIntent);
    atomic_store(result, (unint64_t *)&qword_1005D92D0);
  }
  return result;
}

uint64_t sub_10032DAD4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SetAttachmentSizeIntent.perform()>>, 1);
}

uint64_t sub_10032DAE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static SetAttachmentSizeIntent.parameterSummary>>, 1);
}

unint64_t sub_10032DAF8()
{
  unint64_t result;

  result = qword_1005D92E0;
  if (!qword_1005D92E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D92E0);
  }
  return result;
}

unint64_t sub_10032DB40()
{
  unint64_t result;

  result = qword_1005D92E8;
  if (!qword_1005D92E8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D92E8);
  }
  return result;
}

unint64_t sub_10032DB88()
{
  unint64_t result;

  result = qword_1005D92F0;
  if (!qword_1005D92F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D92F0);
  }
  return result;
}

unint64_t sub_10032DBD0()
{
  unint64_t result;

  result = qword_1005D92F8;
  if (!qword_1005D92F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D92F8);
  }
  return result;
}

unint64_t sub_10032DC18()
{
  unint64_t result;

  result = qword_1005D9300;
  if (!qword_1005D9300)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D9300);
  }
  return result;
}

unint64_t sub_10032DC60()
{
  unint64_t result;

  result = qword_1005D9308;
  if (!qword_1005D9308)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D9308);
  }
  return result;
}

unint64_t sub_10032DCAC()
{
  unint64_t result;

  result = qword_1005D9318;
  if (!qword_1005D9318)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D9318);
  }
  return result;
}

uint64_t sub_10032DCF0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1001283E0();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_10032DD34()
{
  unint64_t result;

  result = qword_1005D9328;
  if (!qword_1005D9328)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D9328);
  }
  return result;
}

unint64_t sub_10032DD7C()
{
  unint64_t result;

  result = qword_1005D9330;
  if (!qword_1005D9330)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D9330);
  }
  return result;
}

unint64_t sub_10032DDC4()
{
  unint64_t result;

  result = qword_1005D9338;
  if (!qword_1005D9338)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D9338);
  }
  return result;
}

uint64_t sub_10032DE08()
{
  return sub_100016638(&qword_1005D9340, &qword_1005D9348, (uint64_t)&protocol conformance descriptor for [A]);
}

ValueMetadata *type metadata accessor for SetAttachmentSizeIntent()
{
  return &type metadata for SetAttachmentSizeIntent;
}

uint64_t storeEnumTagSinglePayload for AttachmentViewSize(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10032DE90 + 4 * byte_100462ACD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10032DEC4 + 4 * byte_100462AC8[v4]))();
}

uint64_t sub_10032DEC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032DECC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10032DED4);
  return result;
}

uint64_t sub_10032DEE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10032DEE8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10032DEEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032DEF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AttachmentViewSize()
{
  return &type metadata for AttachmentViewSize;
}

uint64_t sub_10032DF10()
{
  return sub_100016638(&qword_1005D9350, (uint64_t *)&unk_1005D9358, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t ReplaceSelectionIntent.text.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for AttributedString(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  IntentParameter.wrappedValue.setter(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

void *ReplaceSelectionIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static ReplaceSelectionIntent.persistentIdentifier;
}

unint64_t static ReplaceSelectionIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_10032E0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static ReplaceSelectionIntent.title);
  sub_10012A0B0(v10, (uint64_t)static ReplaceSelectionIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x80000001004891A0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t ReplaceSelectionIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CECB8 != -1)
    swift_once(&qword_1005CECB8, sub_10032E0D8);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static ReplaceSelectionIntent.title);
}

uint64_t static ReplaceSelectionIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CECB8 != -1)
    swift_once(&qword_1005CECB8, sub_10032E0D8);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static ReplaceSelectionIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *ReplaceSelectionIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static ReplaceSelectionIntent.openAppWhenRun;
}

uint64_t static ReplaceSelectionIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002FLL, 0x8000000100489150);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static ReplaceSelectionIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005D9378);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D9380);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B2B5C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(23, 1, &type metadata for ReplaceSelectionIntent, v6);
  v7._object = (void *)0x8000000100489180;
  v7._countAndFlagsBits = 0xD000000000000017;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100462F08, v8);
  v10 = sub_100012E18(&qword_1005D9388);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for ReplaceSelectionIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for ReplaceSelectionIntent, v6);
}

uint64_t sub_10032E698@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes22ReplaceSelectionIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t _s11MobileNotes22ReplaceSelectionIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD v46[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v42 = *(_QWORD *)(v0 - 8);
  v43 = v0;
  __chkstk_darwin(v0);
  v41 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v40 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEEA0);
  __chkstk_darwin(v4);
  v39 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18(&qword_1005CEEA8);
  v23 = String.LocalizationValue.init(stringLiteral:)(1954047316, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for text to replace the selection with in the note", 66, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x80000001004783C0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for text", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for AttributedString(0);
  v28 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v39, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v40, 1, 1, v29);
  v31 = v41;
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, enum case for InputConnectionBehavior.default(_:), v43);
  v32 = IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v22, v8, v28, v30, v31);
  sub_100012E18(&qword_1005CEE50);
  v44 = 0xD000000000000021;
  v45 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v46, &v44, &type metadata for String, &protocol witness table for String);
  v33 = type metadata accessor for AppDependencyManager(0);
  v34 = static AppDependencyManager.shared.getter(v33);
  AppDependency.__allocating_init(key:manager:)(v46, v34);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v44 = 0xD000000000000024;
  v45 = 0x8000000100476B40;
  v35 = AnyHashable.init<A>(_:)(v46, &v44, &type metadata for String, &protocol witness table for String);
  v36 = static AppDependencyManager.shared.getter(v35);
  AppDependency.__allocating_init(key:manager:)(v46, v36);
  return v32;
}

uint64_t sub_10032EB24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_10032EB50()
{
  unint64_t result;

  result = qword_1005D9398;
  if (!qword_1005D9398)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReplaceSelectionIntent, &type metadata for ReplaceSelectionIntent);
    atomic_store(result, (unint64_t *)&qword_1005D9398);
  }
  return result;
}

unint64_t sub_10032EB98()
{
  unint64_t result;

  result = qword_1005D93A0;
  if (!qword_1005D93A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ReplaceSelectionIntent, &type metadata for ReplaceSelectionIntent);
    atomic_store(result, (unint64_t *)&qword_1005D93A0);
  }
  return result;
}

uint64_t sub_10032EBDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ReplaceSelectionIntent.perform()>>, 1);
}

uint64_t sub_10032EBEC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static ReplaceSelectionIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for ReplaceSelectionIntent()
{
  return &type metadata for ReplaceSelectionIntent;
}

uint64_t sub_10032EC0C()
{
  return sub_100016638(&qword_1005D93B0, &qword_1005D93B8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

id sub_10032EC38()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController____lazy_storage___collectionView;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController____lazy_storage___collectionView);
  if (v2)
  {
    v3 = *(id *)(v0
               + OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController____lazy_storage___collectionView);
  }
  else
  {
    v4 = sub_10032ECA8(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_10032EC98(_QWORD *a1@<X8>)
{
  *a1 = &off_100555C38;
}

id sub_10032ECA8(uint64_t a1)
{
  uint64_t v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _QWORD v9[5];
  uint64_t v10;

  v2 = swift_allocObject(&unk_1005693C8, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16, a1);
  v3 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCompositionalLayoutConfiguration), "init");
  v4 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
  v9[4] = sub_10032FCB0;
  v10 = v2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_1002287F4;
  v9[3] = &unk_1005693E0;
  v5 = _Block_copy(v9);
  v6 = objc_msgSend(v4, "initWithSectionProvider:configuration:", v5, v3);

  _Block_release(v5);
  swift_release(v10);
  v7 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v6, 0.0, 0.0, 0.0, 0.0);

  objc_msgSend(v7, "setDelegate:", a1);
  return v7;
}

void sub_10032EDE4()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  id v12;
  objc_super v13;

  v13.receiver = v0;
  v13.super_class = (Class)type metadata accessor for FolderComposerSelectionViewController(0);
  objc_msgSendSuper2(&v13, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = sub_10032EC38();
    objc_msgSend(v2, "addSubview:", v3);

    v4 = sub_10032EC38();
    objc_msgSend(v4, "ic_addAnchorsToFillSuperview");

    v5 = objc_msgSend(v0, "navigationController");
    if (!v5)
    {
      objc_msgSend(v0, "setPreferredContentSize:", *(double *)&v0[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_preferredPopoverWidth], *(double *)&v0[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedPopoverHeight]);
      v12 = sub_10032EC38();
      KeyPath = swift_getKeyPath(&unk_100463190, v6);
      v8 = swift_allocObject(&unk_1005693A0, 24, 7);
      *(_QWORD *)(v8 + 16) = v0;
      v9 = v0;
      v10 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_10032FC84, v8, &protocol witness table for NSObject);
      swift_release(KeyPath);
      swift_release(v8);

      v11 = *(void **)&v9[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_contentSizeObservation];
      *(_QWORD *)&v9[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_contentSizeObservation] = v10;

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10032EF64(uint64_t a1, uint64_t a2, char *a3)
{
  double v4;
  id v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;

  v4 = *(double *)&a3[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_preferredPopoverWidth];
  v5 = sub_10032EC38();
  objc_msgSend(v5, "contentSize");
  v7 = v6;

  v8 = sub_10032EC38();
  objc_msgSend(v8, "contentSize");
  v10 = v9;

  if (v10 > 0.0)
  {
    v11 = objc_msgSend(a3, "navigationController");

    if (!v11)
    {
      objc_msgSend(a3, "preferredContentSize");
      if (v13 != v4 || v12 != v7)
        objc_msgSend(a3, "setPreferredContentSize:", v4, v7);
    }
  }
}

void *sub_10032F080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  _QWORD *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Class isa;
  void *v39;
  id v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  NSString v46;
  id v47;
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Class v58;
  uint64_t v60;
  char v61[24];

  v6 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v61[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = &v61[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a3 += 16;
  swift_beginAccess(a3, v61, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (!Strong)
    return 0;
  v15 = (_QWORD *)Strong;
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v6);
  UICollectionLayoutListConfiguration.init(appearance:)(v9);
  sub_1000163BC(0, (unint64_t *)&qword_1005D50D8, NSCollectionLayoutSection_ptr);
  v16 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v13, a2);
  v17 = v16;
  if (a1)
  {
    objc_msgSend(v16, "contentInsets");
    objc_msgSend(v17, "setContentInsets:", 0.0);
  }
  else
  {
    v18 = objc_msgSend(v15, "parentViewController");
    if (v18)
    {
      v19 = v18;
      v20 = objc_opt_self(UINavigationController);
      v21 = swift_dynamicCastObjCClass(v19, v20);

      if (v21)
        v22 = 0.0;
      else
        v22 = 16.0;
    }
    else
    {
      v22 = 16.0;
    }
    objc_msgSend(v17, "contentInsets");
    objc_msgSend(v17, "setContentInsets:", v22);
  }
  if (((*(uint64_t (**)(uint64_t))((swift_isaMask & *v15) + 0xA8))(a1) & 1) != 0)
  {
    v23 = (void *)objc_opt_self(NSCollectionLayoutDimension);
    v24 = objc_msgSend(v23, "fractionalWidthDimension:", 1.0);
    v25 = objc_msgSend(v23, "estimatedDimension:", *(double *)((char *)v15+ OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedHeaderHeight));
    v26 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSize), "sizeWithWidthDimension:heightDimension:", v24, v25);

    static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
    v27 = v11;
    v29 = v28;
    v30 = v26;
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    v32 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutBoundarySupplementaryItem), "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v30, v31, 1);

    v33 = v32;
    objc_msgSend(v33, "contentInsets");
    objc_msgSend(v33, "setContentInsets:", 16.0);

    v34 = sub_100012E18(&qword_1005CF6F0);
    v35 = swift_allocObject(v34, 40, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100456F30;
    *(_QWORD *)(v35 + 32) = v33;
    v60 = v35;
    specialized Array._endMutation()(v35);
    v36 = v60;
    sub_1000163BC(0, &qword_1005D9450, NSCollectionLayoutBoundarySupplementaryItem_ptr);
    v37 = v33;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v36);
    objc_msgSend(v17, "setBoundarySupplementaryItems:", isa);

    v11 = v27;
  }
  if (((*(uint64_t (**)(uint64_t))((swift_isaMask & *v15) + 0xB0))(a1) & 1) != 0)
  {
    v39 = (void *)objc_opt_self(NSCollectionLayoutDimension);
    v40 = objc_msgSend(v39, "fractionalWidthDimension:", 1.0);
    v41 = objc_msgSend(v39, "estimatedDimension:", *(double *)((char *)v15+ OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedFooterHeight));
    v42 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSize), "sizeWithWidthDimension:heightDimension:", v40, v41);

    static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionFooter);
    v44 = v43;
    v45 = v42;
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v44);
    v47 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutBoundarySupplementaryItem), "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:", v45, v46, 5);

    v48 = v47;
    objc_msgSend(v48, "contentInsets");
    objc_msgSend(v48, "setContentInsets:", 0.0);

    v49 = v48;
    v50 = objc_msgSend(v17, "boundarySupplementaryItems");
    v51 = sub_1000163BC(0, &qword_1005D9450, NSCollectionLayoutBoundarySupplementaryItem_ptr);
    v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v50, v51);

    v60 = v52;
    v53 = v49;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v53);
    v55 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v54 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v55 >= v54 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v54 > 1, v55 + 1, 1);
    v56 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v55, v53);
    specialized Array._endMutation()(v56);

    v57 = v60;
    v58 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v57);
    objc_msgSend(v17, "setBoundarySupplementaryItems:", v58);

    objc_msgSend(v17, "contentInsets");
    objc_msgSend(v17, "setContentInsets:");

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

  }
  return v17;
}

id sub_10032F6D4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  char *v6;
  NSString v7;
  id v8;
  objc_super v10;

  v6 = v3;
  UUID.init()(v6);
  *(_QWORD *)&v6[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v6[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_verticalInset] = 0x4030000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedHeaderHeight] = 0x4046000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedFooterHeight] = 0x4046000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_preferredPopoverWidth] = 0x4079000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedPopoverHeight] = 0x4069000000000000;
  *(_QWORD *)&v6[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_contentSizeObservation] = 0;

  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v10.receiver = v6;
  v10.super_class = (Class)type metadata accessor for FolderComposerSelectionViewController(0);
  v8 = objc_msgSendSuper2(&v10, "initWithNibName:bundle:", v7, a3);

  return v8;
}

id sub_10032F848(void *a1)
{
  void *v1;
  char *v3;
  id v4;
  objc_super v6;

  v3 = v1;
  UUID.init()(v3);
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_verticalInset] = 0x4030000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedHeaderHeight] = 0x4046000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedFooterHeight] = 0x4046000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_preferredPopoverWidth] = 0x4079000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_estimatedPopoverHeight] = 0x4069000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes37FolderComposerSelectionViewController_contentSizeObservation] = 0;

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for FolderComposerSelectionViewController(0);
  v4 = objc_msgSendSuper2(&v6, "initWithCoder:", a1);

  return v4;
}

id sub_10032F948()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerSelectionViewController(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10032F9DC()
{
  return type metadata accessor for FolderComposerSelectionViewController(0);
}

uint64_t type metadata accessor for FolderComposerSelectionViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D9420;
  if (!qword_1005D9420)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FolderComposerSelectionViewController);
  return result;
}

uint64_t sub_10032FA20(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "\b";
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = "\b";
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FolderComposerSelectionViewController.Section(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10032FAF8 + 4 * byte_100463055[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10032FB2C + 4 * asc_100463050[v4]))();
}

uint64_t sub_10032FB2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032FB34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10032FB3CLL);
  return result;
}

uint64_t sub_10032FB48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10032FB50);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10032FB54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10032FB5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FolderComposerSelectionViewController.Section()
{
  return &type metadata for FolderComposerSelectionViewController.Section;
}

unint64_t sub_10032FB7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D9430;
  if (!qword_1005D9430)
  {
    v1 = sub_10001537C(&qword_1005D9438);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D9430);
  }
  return result;
}

unint64_t sub_10032FBCC()
{
  unint64_t result;

  result = qword_1005D9440;
  if (!qword_1005D9440)
  {
    result = swift_getWitnessTable(&unk_100463158, &type metadata for FolderComposerSelectionViewController.Section);
    atomic_store(result, (unint64_t *)&qword_1005D9440);
  }
  return result;
}

const char *sub_10032FC10()
{
  return "contentSize";
}

id sub_10032FC1C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;
  uint64_t v4;
  uint64_t v5;

  result = objc_msgSend(*a1, "contentSize");
  *a2 = v4;
  a2[1] = v5;
  return result;
}

id sub_10032FC4C(double *a1, id *a2)
{
  return objc_msgSend(*a2, "setContentSize:", *a1, a1[1]);
}

uint64_t sub_10032FC60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10032FC84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10032EF64(a1, a2, *(char **)(v2 + 16));
}

uint64_t sub_10032FC8C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void *sub_10032FCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10032F080(a1, a2, v2);
}

id sub_10032FCBC()
{
  void *v0;
  objc_class *ObjectType;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  objc_super v8;
  _QWORD aBlock[5];
  uint64_t v10;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCompositionalLayoutConfiguration), "init");
  v3 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
  aBlock[4] = sub_10032FE94;
  v10 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002287F4;
  aBlock[3] = &unk_100569480;
  v4 = _Block_copy(aBlock);
  v5 = objc_msgSend(v3, "initWithSectionProvider:configuration:", v4, v2);

  _Block_release(v4);
  swift_release(v10);
  v8.receiver = v0;
  v8.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v8, "initWithFrame:collectionViewLayout:", v5, 0.0, 0.0, 0.0, 0.0);

  return v6;
}

uint64_t type metadata accessor for FolderComposerCollectionView()
{
  return objc_opt_self(_TtC11MobileNotes28FolderComposerCollectionView);
}

void *sub_10032FE94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v13;

  v3 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v3);
  UICollectionLayoutListConfiguration.init(appearance:)(v6);
  sub_10032FFD4();
  v11 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v10, a2);
  objc_msgSend(v11, "contentInsets");
  objc_msgSend(v11, "setContentInsets:", 8.0);
  objc_msgSend(v11, "contentInsets");
  objc_msgSend(v11, "setContentInsets:");
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11;
}

unint64_t sub_10032FFD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D50D8;
  if (!qword_1005D50D8)
  {
    v1 = objc_opt_self(NSCollectionLayoutSection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D50D8);
  }
  return result;
}

uint64_t sub_100330010()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D9480);
  v1 = sub_10012A0B0(v0, (uint64_t)qword_1005D9480);
  return static Logger.ui.getter(v1);
}

id sub_1003300FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  NSString v4;

  v3 = *(_QWORD *)(a1 + *a3 + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

id sub_100330144(void *a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  id v7;
  id v8;

  v7 = objc_allocWithZone(v3);
  v8 = sub_100331254(a1, a2, a3);

  return v8;
}

id sub_1003301FC()
{
  char *v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  id v8;
  _QWORD v9[5];
  uint64_t v10;

  result = objc_msgSend(*(id *)&v0[OBJC_IVAR___ICRecoverNoteAlertController_note], "managedObjectContext");
  if (result)
  {
    v2 = result;
    v3 = swift_allocObject(&unk_100569548, 32, 7);
    *(_QWORD *)(v3 + 16) = v0;
    *(_QWORD *)(v3 + 24) = v2;
    v4 = swift_allocObject(&unk_100569570, 32, 7);
    *(_QWORD *)(v4 + 16) = sub_10033123C;
    *(_QWORD *)(v4 + 24) = v3;
    v9[4] = sub_1000165D0;
    v10 = v4;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_100016618;
    v9[3] = &unk_100569588;
    v5 = _Block_copy(v9);
    v6 = v10;
    v7 = v0;
    v8 = v2;
    swift_retain(v4);
    swift_release(v6);
    objc_msgSend(v8, "performBlockAndWait:", v5);

    _Block_release(v5);
    LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v4, "", 108, 55, 45, 1);
    swift_release(v3);
    result = (id)swift_release(v4);
    if ((v8 & 1) != 0)
      __break(1u);
  }
  return result;
}

void sub_100330354(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;

  v3 = *(void **)(a1 + OBJC_IVAR___ICRecoverNoteAlertController_note);
  v4 = objc_msgSend(v3, "account");
  if (v4)
  {
    v13 = v4;
    v5 = objc_msgSend(v4, "defaultFolder");
    objc_msgSend(v3, "undoablySetFolder:", v5);

    v6 = objc_msgSend((id)objc_opt_self(NSUndoManager), "shared");
    v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "localizedStringForKey:value:table:", v8, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    objc_msgSend(v6, "setActionName:", v12);

    objc_msgSend(a2, "ic_save");
  }
}

uint64_t sub_1003305B8(void *a1)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;

  v3 = objc_msgSend(*(id *)(v1 + OBJC_IVAR___ICRecoverNoteAlertController_note), "isSharedReadOnly");
  if ((v3 & 1) != 0)
  {
    if (qword_1005CECC0 != -1)
      swift_once(&qword_1005CECC0, sub_100330010);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10012A0B0(v4, (uint64_t)qword_1005D9480);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.error.getter(v6, v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Cannot show RecoverNoteAlertController for read-only shared note", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
  }
  else
  {
    v6 = sub_100330720();
    objc_msgSend(a1, "presentViewController:animated:completion:", v6, 1, 0);
  }

  return v3 ^ 1;
}

id sub_100330720()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;
  uint64_t v6;
  NSString v7;
  NSString v8;
  id v9;
  uint64_t v10;
  NSString v11;
  id v12;
  id v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v15 = *(_QWORD *)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_message);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_message + 8);
  swift_bridgeObjectRetain(v16);
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_detail);
  v4 = *(void **)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_detail + 8);
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  v6 = *(_QWORD *)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_title + 8);
  swift_bridgeObjectRetain(v6);
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v16);
  v9 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v7, v8, 1, v15);

  v10 = *(_QWORD *)(v1 + OBJC_IVAR___ICRecoverNoteAlertController_cancelButtonTitle + 8);
  swift_bridgeObjectRetain(v10);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v12 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v11, 1, 0);

  objc_msgSend(v9, "addAction:", v12);
  v13 = sub_1003308D0();
  objc_msgSend(v9, "addAction:", v13);

  return v9;
}

id sub_1003308D0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  NSString v4;
  void *v5;
  id v6;
  _QWORD v8[5];
  uint64_t v9;

  v1 = *(_QWORD *)&v0[OBJC_IVAR___ICRecoverNoteAlertController_recoverButtonTitle + 8];
  v2 = swift_allocObject(&unk_1005694F8, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  swift_bridgeObjectRetain(v1);
  v3 = v0;
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v1);
  v8[4] = sub_100331208;
  v9 = v2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1002489AC;
  v8[3] = &unk_100569510;
  v5 = _Block_copy(v8);
  swift_release(v9);
  v6 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v4, 0, v5);
  _Block_release(v5);

  return v6;
}

void sub_1003309D4(uint64_t a1, uint64_t a2)
{
  id v3;
  NSString v4;

  v3 = *(id *)(a2 + OBJC_IVAR___ICRecoverNoteAlertController_notificationCenter);
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v3, "postNotificationName:object:", v4, a2);

  sub_1003301FC();
  sub_100330A60();
}

void *NSNotification.RecoverNoteAlertControllerWillRecoverNoteNotification.unsafeMutableAddressor()
{
  return &static NSNotification.RecoverNoteAlertControllerWillRecoverNoteNotification;
}

void sub_100330A60()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t inited;
  void *v4;
  id v5;
  id v6;
  unint64_t v7;
  id v8;
  NSString v9;
  uint64_t v10;
  Class isa;
  uint64_t v12;

  v1 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithRange:", *(_QWORD *)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_selectedRange), *(_QWORD *)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_selectedRange + 8));
  v2 = sub_100012E18(&qword_1005D9500);
  inited = swift_initStackObject(v2, &v12);
  *(_OWORD *)(inited + 16) = xmmword_100454E90;
  *(_QWORD *)(inited + 32) = 0xD00000000000003BLL;
  *(_QWORD *)(inited + 40) = 0x80000001004893E0;
  v4 = *(void **)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_note);
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = 0xD000000000000041;
  *(_QWORD *)(inited + 64) = 0x8000000100489420;
  *(_QWORD *)(inited + 72) = v1;
  v5 = v4;
  v6 = v1;
  v7 = sub_100136A78(inited);
  v8 = *(id *)(v0 + OBJC_IVAR___ICRecoverNoteAlertController_notificationCenter);
  v9 = String._bridgeToObjectiveC()();
  v10 = sub_100330C18(v7);
  swift_bridgeObjectRelease(v7);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v8, "postNotificationName:object:userInfo:", v9, v0, isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

}

void *NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotification.unsafeMutableAddressor()
{
  return &static NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotification;
}

void *NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotificationNoteKey.unsafeMutableAddressor()
{
  return &static NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotificationNoteKey;
}

void *NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotificationRangeValueKey.unsafeMutableAddressor()
{
  return &static NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotificationRangeValueKey;
}

uint64_t sub_100330C18(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  id v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  _OWORD v41[2];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_100012E18(&qword_1005D0150);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v31 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v30 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v30)
      goto LABEL_37;
    v15 = *(_QWORD *)(v31 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v30)
        goto LABEL_37;
      v15 = *(_QWORD *)(v31 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v30)
          goto LABEL_37;
        v15 = *(_QWORD *)(v31 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v30)
            goto LABEL_37;
          v15 = *(_QWORD *)(v31 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v13);
    *(_QWORD *)&v41[0] = *v18;
    *((_QWORD *)&v41[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    v21 = v20;
    swift_dynamicCast(&v33, v41, &type metadata for String, &type metadata for AnyHashable, 7);
    v32 = v21;
    v22 = sub_1003311A8();
    swift_dynamicCast(v36, &v32, v22, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_1000160B8(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_1000160B8(v40, v41);
    sub_1000160B8(v41, &v37);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v23 = -1 << *((_BYTE *)v3 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)&v7[8 * (v24 >> 6)])) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)&v7[8 * v25];
      }
      while (v29 == -1);
      v10 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v33;
    *(_OWORD *)(v11 + 16) = v34;
    *(_QWORD *)(v11 + 32) = v35;
    result = (uint64_t)sub_1000160B8(&v37, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v30)
  {
LABEL_37:
    swift_release(v3);
    sub_1001452E0(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v31 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v30)
      goto LABEL_37;
    v15 = *(_QWORD *)(v31 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

id sub_100330FF4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RecoverNoteAlertController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t static NSNotification.RecoverNoteAlertControllerWillRecoverNoteNotification.getter()
{
  return 0xD000000000000035;
}

unint64_t static NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotification.getter()
{
  return 0xD000000000000034;
}

unint64_t static NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotificationNoteKey.getter()
{
  return 0xD00000000000003BLL;
}

unint64_t static NSNotification.RecoverNoteAlertControllerDidRecoverNoteNotificationRangeValueKey.getter()
{
  return 0xD000000000000041;
}

uint64_t type metadata accessor for RecoverNoteAlertController()
{
  return objc_opt_self(ICRecoverNoteAlertController);
}

unint64_t sub_1003311A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D3D00;
  if (!qword_1005D3D00)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D3D00);
  }
  return result;
}

uint64_t sub_1003311E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100331208(uint64_t a1)
{
  uint64_t v1;

  sub_1003309D4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100331210()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10033123C()
{
  uint64_t v0;

  sub_100330354(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100331244()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_100331254(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t v5;
  void *v6;
  char *v7;
  uint64_t *v8;
  void *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  id v31;
  NSString v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  id v38;
  NSString v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  id v45;
  objc_super v49;

  v5 = OBJC_IVAR___ICRecoverNoteAlertController_notificationCenter;
  v6 = (void *)objc_opt_self(NSNotificationCenter);
  v7 = v3;
  *(_QWORD *)&v3[v5] = objc_msgSend(v6, "defaultCenter");
  v8 = (uint64_t *)&v7[OBJC_IVAR___ICRecoverNoteAlertController_title];
  v9 = (void *)objc_opt_self(NSBundle);
  v10 = objc_msgSend(v9, "mainBundle");
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "localizedStringForKey:value:table:", v11, 0, 0);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *v8 = v13;
  v8[1] = v15;
  v16 = (uint64_t *)&v7[OBJC_IVAR___ICRecoverNoteAlertController_message];
  v17 = objc_msgSend(v9, "mainBundle");
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "localizedStringForKey:value:table:", v18, 0, 0);

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  *v16 = v20;
  v16[1] = v22;
  v23 = (uint64_t *)&v7[OBJC_IVAR___ICRecoverNoteAlertController_detail];
  v24 = objc_msgSend(v9, "mainBundle");
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v24, "localizedStringForKey:value:table:", v25, 0, 0);

  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  *v23 = v27;
  v23[1] = v29;
  v30 = (uint64_t *)&v7[OBJC_IVAR___ICRecoverNoteAlertController_cancelButtonTitle];
  v31 = objc_msgSend(v9, "mainBundle");
  v32 = String._bridgeToObjectiveC()();
  v33 = objc_msgSend(v31, "localizedStringForKey:value:table:", v32, 0, 0);

  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  *v30 = v34;
  v30[1] = v36;
  v37 = (uint64_t *)&v7[OBJC_IVAR___ICRecoverNoteAlertController_recoverButtonTitle];
  v38 = objc_msgSend(v9, "mainBundle");
  v39 = String._bridgeToObjectiveC()();
  v40 = objc_msgSend(v38, "localizedStringForKey:value:table:", v39, 0, 0);

  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  *v37 = v41;
  v37[1] = v43;
  *(_QWORD *)&v7[OBJC_IVAR___ICRecoverNoteAlertController_note] = a1;
  v44 = &v7[OBJC_IVAR___ICRecoverNoteAlertController_selectedRange];
  *(_QWORD *)v44 = a2;
  *((_QWORD *)v44 + 1) = a3;
  v45 = a1;

  v49.receiver = v7;
  v49.super_class = (Class)type metadata accessor for RecoverNoteAlertController();
  return objc_msgSendSuper2(&v49, "init");
}

double InsertNoteLinkIntent.init()@<D0>(uint64_t a1@<X8>)
{
  __int128 v2;
  double result;
  _OWORD v4[2];
  __int128 v5;
  uint64_t v6;

  sub_100332CE4((uint64_t *)v4);
  v2 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v2;
  result = *(double *)&v5;
  *(_OWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  return result;
}

uint64_t InsertNoteLinkIntent.linkedNote.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for NoteEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014FF9C(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_10014FFE0(a1);
}

uint64_t AddOrRemoveNoteLockIntent.target.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1002436C4(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100012DDC(a1, (uint64_t *)&unk_1005D0B60);
}

void *InsertNoteLinkIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static InsertNoteLinkIntent.persistentIdentifier;
}

unint64_t static InsertNoteLinkIntent.persistentIdentifier.getter()
{
  return 0xD000000000000018;
}

uint64_t sub_10033174C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static InsertNoteLinkIntent.title);
  sub_10012A0B0(v10, (uint64_t)static InsertNoteLinkIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x8000000100489830);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t InsertNoteLinkIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CECC8 != -1)
    swift_once(&qword_1005CECC8, sub_10033174C);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static InsertNoteLinkIntent.title);
}

uint64_t static InsertNoteLinkIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CECC8 != -1)
    swift_once(&qword_1005CECC8, sub_10033174C);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static InsertNoteLinkIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static InsertNoteLinkIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001004897C0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static InsertNoteLinkIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005D9508);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D9510);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B27E8();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(19, 2, &type metadata for InsertNoteLinkIntent, v6);
  v7._countAndFlagsBits = 0x6C20747265736E49;
  v7._object = (void *)0xEF206F74206B6E69;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100463200, v8);
  v10 = sub_100012E18(&qword_1005D9518);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 544106784;
  v11._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_100463228, v12);
  v14 = sub_100012E18(&qword_1005D9520);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for InsertNoteLinkIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for InsertNoteLinkIntent, v6);
}

uint64_t InsertNoteLinkIntent.useNoteTitleAsName.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t InsertNoteLinkIntent.useNoteTitleAsName.setter(char a1)
{
  char v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t (*InsertNoteLinkIntent.useNoteTitleAsName.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t InsertNoteLinkIntent.$useNoteTitleAsName.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t InsertNoteLinkIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2[18] = a1;
  v2[19] = v1;
  v3 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NoteEntity(0);
  v2[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[22] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v6);
  v2[24] = swift_task_alloc(v6);
  v2[25] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_100012E18((uint64_t *)&unk_1005D0B60) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[26] = swift_task_alloc(v7);
  v2[27] = swift_task_alloc(v7);
  return swift_task_switch(sub_100331EE4, 0, 0);
}

uint64_t sub_100331EE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  *(_QWORD *)(v0 + 224) = *(_QWORD *)(v4 + 48);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 104));
  v5 = *(void **)(v0 + 104);
  v6 = objc_msgSend(v5, "modernManagedObjectContext");
  *(_QWORD *)(v0 + 232) = v6;

  v7 = swift_allocObject(&unk_1005695D0, 24, 7);
  *(_QWORD *)(v0 + 240) = v7;
  *(_QWORD *)(v7 + 16) = 0;
  v8 = swift_allocObject(&unk_1005695D0, 24, 7);
  *(_QWORD *)(v0 + 248) = v8;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v4 + 8);
  IntentParameter.wrappedValue.getter(v1);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 48);
  LODWORD(v2) = v9(v1, 1, v2);
  v10 = sub_100012DDC((uint64_t)v1, (uint64_t *)&unk_1005D0B60);
  if ((_DWORD)v2 == 1)
  {
    v11 = *(_QWORD *)(v0 + 160);
    v12 = IntentParameter.projectedValue.getter(v10);
    v13 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 1, 1, v13);
    v14 = type metadata accessor for AppIntentError(0);
    v15 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v14, v15, 0, 0);
    IntentParameter.needsValueError(_:)(v11);
    swift_release(v12);
    v16 = sub_100012DDC(v11, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v16);
    swift_release(v8);
    swift_release(v7);

    v17 = *(_QWORD *)(v0 + 208);
    v19 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v23 = *(_QWORD **)(v0 + 208);
    v24 = *(_QWORD *)(v0 + 168);
    IntentParameter.wrappedValue.getter(v23);
    v25 = v9(v23, 1, v24);
    v26 = *(_QWORD *)(v0 + 208);
    if (v25)
    {
      sub_100012DDC(*(_QWORD *)(v0 + 208), (uint64_t *)&unk_1005D0B60);
      v27 = *(_QWORD *)(v0 + 248);
      v28 = *(_QWORD **)(v0 + 192);
      *(_QWORD *)(v0 + 288) = **(_QWORD **)(v0 + 152);
      IntentParameter.wrappedValue.getter(v28);
      AppDependency.wrappedValue.getter((_QWORD *)(v0 + 128));
      v29 = *(_QWORD *)(v0 + 128);
      *(_QWORD *)(v0 + 296) = v29;
      v30 = unk_1005D0B54;
      v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D0B50 + dword_1005D0B50);
      swift_retain(v27);
      v31 = (_QWORD *)swift_task_alloc(v30);
      *(_QWORD *)(v0 + 304) = v31;
      *v31 = v0;
      v31[1] = sub_10033238C;
      v32 = *(_QWORD *)(v0 + 248);
      v33 = v29;
    }
    else
    {
      sub_10014FF9C(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 200));
      sub_100012DDC(v26, (uint64_t *)&unk_1005D0B60);
      AppDependency.wrappedValue.getter((_QWORD *)(v0 + 136));
      v34 = *(_QWORD *)(v0 + 136);
      *(_QWORD *)(v0 + 264) = v34;
      v35 = unk_1005D0B54;
      v37 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D0B50 + dword_1005D0B50);
      swift_retain(v7);
      v36 = (_QWORD *)swift_task_alloc(v35);
      *(_QWORD *)(v0 + 272) = v36;
      *v36 = v0;
      v36[1] = sub_10033224C;
      v33 = v34;
      v32 = v7;
    }
    return v37((uint64_t)v37, v33, (uint64_t)sub_100175158, v32);
  }
}

uint64_t sub_10033224C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[34];
  (*v1)[35] = v0;
  swift_task_dealloc(v3);
  v4 = (void *)v2[33];
  v5 = v2[30];
  sub_10014FFE0(v2[25]);
  swift_release(v5);

  if (v0)
    v6 = sub_10033297C;
  else
    v6 = sub_1003322D4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1003322D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD **)(v0 + 192);
  *(_QWORD *)(v0 + 288) = **(_QWORD **)(v0 + 152);
  IntentParameter.wrappedValue.getter(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 128));
  *(_QWORD *)(v0 + 296) = *(_QWORD *)(v0 + 128);
  v3 = unk_1005D0B54;
  v6 = (uint64_t (*)(void))((char *)&dword_1005D0B50 + dword_1005D0B50);
  swift_retain(v1);
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 304) = v4;
  *v4 = v0;
  v4[1] = sub_10033238C;
  return v6();
}

uint64_t sub_10033238C()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[38];
  (*v1)[39] = v0;
  swift_task_dealloc(v3);
  v4 = (void *)v2[37];
  v5 = v2[31];
  sub_10014FFE0(v2[24]);
  swift_release(v5);

  if (v0)
    v6 = sub_100332A10;
  else
    v6 = sub_100332414;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100332414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v0 + 88) = 0;
  v1 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 96) = 0;
  v2 = swift_beginAccess(v1 + 16, v0 + 64, 0, 0);
  v3 = *(void **)(v1 + 16);
  if (!v3)
  {
    v15 = *(_QWORD *)(v0 + 240);
    goto LABEL_8;
  }
  v4 = *(_QWORD *)(v0 + 248);
  v2 = swift_beginAccess(v4 + 16, v0 + 40, 0, 0);
  v5 = *(void **)(v4 + 16);
  if (!v5)
  {
LABEL_13:
    v15 = *(_QWORD *)(v0 + 240);
    if (*(_QWORD *)(v15 + 16))
    {
      v37 = *(_QWORD *)(v0 + 248);
      v2 = swift_beginAccess(v37 + 16, v0 + 16, 0, 0);
      if (*(_QWORD *)(v37 + 16))
      {
        v39 = *(_QWORD *)(v0 + 240);
        v38 = *(_QWORD *)(v0 + 248);
        v40 = *(void **)(v0 + 232);
        type metadata accessor for ICError(0);
        v42 = v41;
        *(_QWORD *)(v0 + 120) = 227;
        v43 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
        v44 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
        v45 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 112), v0 + 120, v43, v42, v44);
        swift_willThrow(v45);

        swift_release(v38);
        v14 = v39;
        goto LABEL_16;
      }
      v15 = *(_QWORD *)(v0 + 240);
      v16 = *(_QWORD *)(v0 + 248);
      goto LABEL_9;
    }
LABEL_8:
    v16 = *(_QWORD *)(v0 + 248);
LABEL_9:
    v17 = *(void **)(v0 + 232);
    v18 = *(_QWORD *)(v0 + 160);
    v19 = IntentParameter.projectedValue.getter(v2);
    v20 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 1, 1, v20);
    v21 = type metadata accessor for AppIntentError(0);
    v22 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v21, v22, 0, 0);
    IntentParameter.needsValueError(_:)(v18);
    swift_release(v19);
    v23 = sub_100012DDC(v18, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v23);

    sub_10033368C(*(void **)(v0 + 88), *(void **)(v0 + 96));
    swift_release(v16);
    v14 = v15;
    goto LABEL_16;
  }
  v6 = v3;
  v7 = v5;
  if (!objc_msgSend(v6, "ic_isModernNoteType") || !objc_msgSend(v7, "ic_isModernNoteType"))
  {
    v25 = *(_QWORD *)(v0 + 240);
    v24 = *(_QWORD *)(v0 + 248);
    v26 = *(void **)(v0 + 232);
    v27 = sub_10013F4E8();
    v28 = swift_allocError(&type metadata for AppIntentsError, v27, 0, 0);
    *v29 = 2;
    swift_willThrow(v28);

    sub_10033368C(*(void **)(v0 + 88), *(void **)(v0 + 96));
    swift_release(v24);
    v14 = v25;
    goto LABEL_16;
  }
  v8 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 232);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = (_QWORD *)swift_task_alloc(64);
  v11[2] = v9;
  v11[3] = v6;
  v11[4] = v7;
  v11[5] = v0 + 88;
  v11[6] = v10;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1003336E4, v11, (char *)&type metadata for () + 8);
  if (!v8)
  {

    v2 = swift_task_dealloc(v11);
    v30 = *(void **)(v0 + 88);
    *(_QWORD *)(v0 + 320) = v30;
    if (v30)
    {
      v31 = *(void **)(v0 + 96);
      *(_QWORD *)(v0 + 328) = v31;
      sub_1003336B8(v30, v31);
      v32 = dword_1005D7854;
      v33 = v30;
      v34 = v31;
      v35 = (_QWORD *)swift_task_alloc(v32);
      *(_QWORD *)(v0 + 336) = v35;
      *v35 = v0;
      v35[1] = sub_100332818;
      return NoteEntity.init(for:in:)(*(_QWORD *)(v0 + 184), (uint64_t)v33, (uint64_t)v34);
    }
    goto LABEL_13;
  }
  v13 = *(_QWORD *)(v0 + 240);
  v12 = *(_QWORD *)(v0 + 248);

  swift_task_dealloc(v11);
  sub_10033368C(*(void **)(v0 + 88), *(void **)(v0 + 96));
  swift_release(v12);
  v14 = v13;
LABEL_16:
  swift_release(v14);
  v46 = *(_QWORD *)(v0 + 208);
  v48 = *(_QWORD *)(v0 + 192);
  v47 = *(_QWORD *)(v0 + 200);
  v49 = *(_QWORD *)(v0 + 184);
  v50 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100332818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  *(_QWORD *)(*(_QWORD *)v1 + 344) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100332AA4;
  else
    v3 = sub_10033287C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10033287C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void **)(v0 + 320);
  v1 = *(void **)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  v5 = *(void **)(v0 + 232);
  v6 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 208);
  v12 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 160);
  v9 = sub_100019C6C((unint64_t *)&qword_1005D0A80, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  static IntentResult.result<A>(value:)(v7, v8, v9);

  sub_10014FFE0(v7);
  sub_10033368C(*(void **)(v0 + 88), *(void **)(v0 + 96));
  swift_release(v3);
  swift_release(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v7);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10033297C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);

  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100332A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);

  swift_release(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100332AA4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void **)(v0 + 320);
  v1 = *(void **)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);

  sub_10033368C(*(void **)(v0 + 88), *(void **)(v0 + 96));
  swift_release(v4);
  swift_release(v3);
  v5 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100332B4C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;

  v10 = objc_msgSend(a1, "ic_existingObjectWithID:", a2);
  if (v10)
  {
    v11 = v10;
    v12 = objc_opt_self(ICNote);
    v13 = swift_dynamicCastObjCClass(v11, v12);
    if (v13)
    {
      v14 = (void *)v13;
      v15 = objc_msgSend(a1, "ic_existingObjectWithID:", a3);
      if (v15)
      {
        v16 = v15;
        v17 = objc_opt_self(ICNote);
        v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
        if (v18)
        {
          v19 = sub_100333A7C(v14, v18, *(id *)(a5 + 40));
          if (v5)
          {

          }
          else
          {
            v21 = v19;
            v22 = v20;

            v23 = *(void **)a4;
            v24 = *(void **)(a4 + 8);
            *(_QWORD *)a4 = v21;
            *(_QWORD *)(a4 + 8) = v22;
            sub_10033368C(v23, v24);
          }
          return;
        }

      }
    }

  }
}

uint64_t sub_100332C6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  _QWORD *v5;

  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 64) = *(_QWORD *)(v1 + 48);
  v5 = (_QWORD *)swift_task_alloc(dword_1005D952C);
  *(_QWORD *)(v2 + 72) = v5;
  *v5 = v2;
  v5[1] = sub_1001D25A0;
  return InsertNoteLinkIntent.perform()(a1);
}

uint64_t sub_100332CE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64x2_t v39;
  int16x8_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64x2_t v55;
  int16x8_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t, uint64_t);
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t *v73;
  char *v74;
  _QWORD v75[2];
  unint64_t v76;
  void (*v77)(char *, uint64_t, uint64_t, uint64_t);
  uint64x2_t v78;
  uint64x2_t v79;
  void (*v80)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t *v85;
  unsigned int v86;
  void (*v87)(char *, uint64_t, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  void (*v93)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  _QWORD v99[2];
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  unsigned __int32 v104;

  v85 = a1;
  v1 = sub_100012E18(&qword_1005CF180);
  __chkstk_darwin(v1);
  v84 = (char *)v75 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for InputConnectionBehavior(0);
  v92 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v98 = (char *)v75 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v5 = __chkstk_darwin(v4);
  v90 = (char *)v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v97 = (char *)v75 - v7;
  v8 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v8);
  v82 = (char *)v75 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v10);
  v12 = (char *)v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = v13;
  __chkstk_darwin(v13);
  v17 = (char *)v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Locale(0);
  __chkstk_darwin(v18);
  v20 = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v21);
  v23 = (char *)v75 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for LocalizedStringResource(0);
  v25 = *(_QWORD *)(v24 - 8);
  v94 = v24;
  __chkstk_darwin(v24);
  v96 = (char *)v75 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v27 = String.LocalizationValue.init(stringLiteral:)(0x4E2064656B6E694CLL, 0xEB0000000065746FLL);
  static Locale.current.getter(v27);
  v28 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 104);
  v86 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v88 = v15;
  v29(v17, enum case for LocalizedStringResource.BundleDescription.main(_:), v15);
  v87 = v29;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v20, v17, "Parameter title for linked note", 31, 2);
  v30 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000031, 0x8000000100478430);
  static Locale.current.getter(v30);
  v29(v17, v28, v15);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v20, v17, "Parameter description for linked note", 37, 2);
  v93 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56);
  v93(v12, 0, 1, v24);
  v81 = type metadata accessor for NoteEntity(0);
  v80 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56);
  v31 = v82;
  v80(v82, 1, 1, v81);
  v32 = type metadata accessor for IntentDialog(0);
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v34 = v97;
  v89 = v32;
  v33(v97, 1, 1, v32);
  v35 = v90;
  v33(v90, 1, 1, v32);
  v100 = sub_1001E8EEC();
  v101 = v36;
  v102 = v37;
  v103 = v38 & 1;
  v39 = (uint64x2_t)vdupq_n_s64(v38);
  v79 = (uint64x2_t)xmmword_100451C00;
  v78 = (uint64x2_t)xmmword_100451C10;
  v40 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v40.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v40), (int8x8_t)0x1000100010001);
  v104 = vmovn_s16(v40).u32[0];
  v91 = enum case for InputConnectionBehavior.default(_:);
  v92 = *(_QWORD *)(v92 + 104);
  v41 = v98;
  ((void (*)(char *))v92)(v98);
  v76 = sub_100127D40();
  v83 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v96, v12, v31, v34, v35, v41, &v100, &type metadata for VisibleNotesQuery, v76);
  v75[1] = sub_100012E18(&qword_1005CEEC8);
  v42 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v42);
  v43 = v86;
  v44 = v88;
  v45 = v87;
  v87(v17, v86, v88);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v20, v17, "Parameter title for note to update", 34, 2);
  v46 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000031, 0x80000001004784D0);
  static Locale.current.getter(v46);
  v45(v17, v43, v44);
  v47 = v12;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v20, v17, "Parameter description for target note", 37, 2);
  v93(v12, 0, 1, v94);
  v48 = v31;
  v80(v31, 1, 1, v81);
  v49 = v97;
  v50 = v89;
  v77 = v33;
  v33(v97, 1, 1, v89);
  v51 = v90;
  v33(v90, 1, 1, v50);
  v100 = sub_1001E8EEC();
  v101 = v52;
  v102 = v53;
  v103 = v54 & 1;
  v55 = (uint64x2_t)vdupq_n_s64(v54);
  v56 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v55, v78), (int32x4_t)vshlq_u64(v55, v79));
  *(int8x8_t *)v56.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v56), (int8x8_t)0x1000100010001);
  v104 = vmovn_s16(v56).u32[0];
  v57 = v98;
  v58 = v95;
  ((void (*)(char *, _QWORD, uint64_t))v92)(v98, v91, v95);
  v90 = (char *)IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v96, v47, v48, v49, v51, v57, &v100, &type metadata for VisibleNotesQuery, v76);
  v82 = (char *)sub_100012E18(&qword_1005CF188);
  v59 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x8000000100478540);
  static Locale.current.getter(v59);
  v60 = v86;
  v61 = v88;
  v62 = v87;
  v87(v17, v86, v88);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v20, v17, "Parameter title for use Note Title as Name", 42, 2);
  v63 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000034, 0x8000000100478590);
  static Locale.current.getter(v63);
  v62(v17, v60, v61);
  v64 = v47;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v20, v17, "Parameter description for use note title as name", 48, 2);
  v93(v47, 0, 1, v94);
  LOBYTE(v100) = 1;
  v65 = type metadata accessor for Bool.IntentDisplayName(0);
  v66 = v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v84, 1, 1, v65);
  v67 = v97;
  v77(v97, 1, 1, v89);
  v68 = v98;
  ((void (*)(char *, _QWORD, uint64_t))v92)(v98, v91, v58);
  v69 = IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v96, v64, &v100, v66, v67, v68);
  sub_100012E18(&qword_1005CEE50);
  v99[0] = 0xD000000000000021;
  v99[1] = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(&v100, v99, &type metadata for String, &protocol witness table for String);
  v70 = type metadata accessor for AppDependencyManager(0);
  v71 = static AppDependencyManager.shared.getter(v70);
  result = AppDependency.__allocating_init(key:manager:)(&v100, v71);
  v73 = v85;
  v74 = v90;
  *v85 = v83;
  v73[1] = (uint64_t)v74;
  v73[2] = 0;
  v73[3] = 0;
  *((_BYTE *)v73 + 32) = 1;
  v73[5] = v69;
  v73[6] = result;
  return result;
}

uint64_t sub_100333618@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100333640@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100333668()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10033368C(void *a1, void *a2)
{
  if (a1)
  {

  }
}

id sub_1003336B8(id result, void *a2)
{
  id v2;

  if (result)
  {
    v2 = result;
    return a2;
  }
  return result;
}

void sub_1003336E4()
{
  uint64_t v0;

  sub_100332B4C(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

unint64_t sub_100333708()
{
  unint64_t result;

  result = qword_1005D9530;
  if (!qword_1005D9530)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InsertNoteLinkIntent, &type metadata for InsertNoteLinkIntent);
    atomic_store(result, (unint64_t *)&qword_1005D9530);
  }
  return result;
}

unint64_t sub_100333750()
{
  unint64_t result;

  result = qword_1005D9538;
  if (!qword_1005D9538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InsertNoteLinkIntent, &type metadata for InsertNoteLinkIntent);
    atomic_store(result, (unint64_t *)&qword_1005D9538);
  }
  return result;
}

uint64_t sub_100333794(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of InsertNoteLinkIntent.perform()>>, 1)+ 8);
}

uint64_t sub_1003337B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static InsertNoteLinkIntent.parameterSummary>>, 1);
}

uint64_t destroy for InsertNoteLinkIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[5]);
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for InsertNoteLinkIntent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v5 = a2[5];
  v6 = a2[6];
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for InsertNoteLinkIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = *((_OWORD *)a2 + 1);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  *((_OWORD *)a1 + 1) = v8;
  v9 = a2[5];
  v10 = a1[5];
  a1[5] = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = a2[6];
  v12 = a1[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

__n128 initializeWithTake for InsertNoteLinkIntent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for InsertNoteLinkIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_release(*(_QWORD *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for InsertNoteLinkIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InsertNoteLinkIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InsertNoteLinkIntent()
{
  return &type metadata for InsertNoteLinkIntent;
}

uint64_t sub_100333A24()
{
  return sub_100016638(&qword_1005D9548, &qword_1005D9550, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_100333A50()
{
  return sub_100016638((unint64_t *)&qword_1005D0AB0, &qword_1005D0AB8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

id sub_100333A7C(void *a1, void *a2, id a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  char v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  NSString v30;
  unint64_t v31;
  void *v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  void (*v39)(char *, char *, uint64_t);
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  NSString v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  NSString v49;
  id v50;
  id v51;
  uint64_t v52;
  Class isa;
  id v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  NSString v60;
  id v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  unsigned __int8 v65;
  id v66;
  id v67;
  uint64_t v68;
  _QWORD v69[2];
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  id v74;
  uint64_t v75;
  id v76;

  v74 = a2;
  v5 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v5);
  v7 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v69 - v13;
  v15 = objc_msgSend(a1, "managedObjectContext");
  if (v15)
  {
    v16 = v15;
    if ((objc_msgSend(a1, "isPasswordProtectedAndLocked") & 1) != 0)
    {
      v17 = sub_10013F4E8();
      v18 = (_QWORD *)swift_allocError(&type metadata for AppIntentsError, v17, 0, 0);
      v20 = 11;
LABEL_12:
      *v19 = v20;
LABEL_13:
      swift_willThrow(v18);
LABEL_14:

      return a3;
    }
    if (!objc_msgSend(a1, "isEditable"))
    {
      v31 = sub_10013F4E8();
      v18 = (_QWORD *)swift_allocError(&type metadata for AppIntentsError, v31, 0, 0);
      v20 = 12;
      goto LABEL_12;
    }
    v25 = objc_msgSend(a1, "textStorage");
    if (!v25)
    {
      type metadata accessor for ICError(0);
      a3 = v33;
      v75 = 227;
      v34 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
      v35 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
      v18 = _BridgedStoredNSError.init(_:userInfo:)(&v76, &v75, v34, a3, v35);
      goto LABEL_13;
    }
    v73 = v25;
    v72 = objc_msgSend(v25, "length");
    IntentParameter.wrappedValue.getter(&v76);
    if (v76 == 1)
    {
      v26 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentInsertionController), "initWithNote:", a1);
      v27 = (void *)objc_opt_self(ICInlineAttachment);
      v28 = objc_msgSend(v27, "newLinkAttachmentToNote:fromNote:parentAttachment:", v74, a1, 0);
      if (v28)
      {
        v29 = v28;

        v30 = String._bridgeToObjectiveC()();
        objc_msgSend(v29, "updateChangeCountWithReason:", v30);

      }
    }
    else
    {
      v36 = (void *)objc_opt_self(ICAppURLUtilities);
      v37 = objc_msgSend(v36, "appURLForNote:", v74);
      if (v37)
      {
        v38 = v37;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v37);

        v39 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v39(v7, v12, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
        {
          v39(v14, v7, v8);
          v40 = objc_msgSend(v73, "attributesAtIndex:effectiveRange:", v72, 0);
          type metadata accessor for Key(0);
          v42 = v41;
          v70 = sub_100019C6C((unint64_t *)&qword_1005CF5E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100452820);
          v71 = v42;
          v69[1] = (char *)&type metadata for Any + 8;
          v69[0] = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v40, v42, (char *)&type metadata for Any + 8, v70);

          v43 = objc_msgSend(v74, "title");
          if (!v43)
          {
            v44 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v45 = String._bridgeToObjectiveC()();
            v43 = objc_msgSend(v44, "localizedStringForKey:value:table:", v45, 0, 0);

          }
          static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
          v47 = v46;

          v48 = objc_allocWithZone((Class)NSMutableAttributedString);
          v49 = String._bridgeToObjectiveC()();
          v50 = objc_msgSend(v48, "initWithString:", v49, swift_bridgeObjectRelease(v47).n128_f64[0]);

          v51 = v50;
          v52 = v69[0];
          isa = Dictionary._bridgeToObjectiveC()().super.isa;
          v54 = objc_msgSend(v51, "ic_range", swift_bridgeObjectRelease(v52).n128_f64[0]);
          objc_msgSend(v51, "addAttributes:range:", isa, v54, v55);

          URL._bridgeToObjectiveC()((NSURL *)&NSLinkAttributeName);
          v57 = v56;
          v58 = objc_msgSend(v51, "ic_range");
          objc_msgSend(v51, "addAttribute:value:range:", NSLinkAttributeName, v57, v58, v59);

          v60 = String._bridgeToObjectiveC()();
          v61 = objc_msgSend(v51, "ic_range");
          objc_msgSend(v51, "removeAttribute:range:", v60, v61, v62);

          v63 = objc_msgSend(v51, "ic_range");
          objc_msgSend(v73, "ic_replaceCharactersInRange:withAttributedSubstring:fromRange:", v72, 0, v51, v63, v64);

          (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
          goto LABEL_24;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
      }
      sub_100012DDC((uint64_t)v7, &qword_1005CEFD0);
    }
LABEL_24:
    objc_msgSend(a1, "updateModificationDateAndChangeCount");
    v76 = 0;
    v65 = objc_msgSend(v16, "save:", &v76);
    a3 = v76;
    if ((v65 & 1) != 0)
    {
      v66 = v76;
      a3 = objc_msgSend(a1, "objectID");

      return a3;
    }
    v67 = v76;
    _convertNSErrorToError(_:)(a3);

    swift_willThrow(v68);
    goto LABEL_14;
  }
  type metadata accessor for ICError(0);
  a3 = v21;
  v75 = 225;
  v22 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
  v23 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
  v24 = _BridgedStoredNSError.init(_:userInfo:)(&v76, &v75, v22, a3, v23);
  swift_willThrow(v24);
  return a3;
}

const char *ICArchive.packageExtension.unsafeMutableAddressor()
{
  return "notesarchive";
}

uint64_t static ICArchive.packageExtension.getter()
{
  return 0x6372617365746F6ELL;
}

uint64_t static ICArchive.archiveTitle<A>(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  id v18;
  NSString v19;
  id v20;
  _QWORD v22[2];

  v2 = type metadata accessor for ICObjectReferences(255);
  v3 = type metadata accessor for Optional(0, v2);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v22 - v5;
  if (Array.count.getter(a1, v2) != 1)
    goto LABEL_9;
  v22[1] = a1;
  v7 = type metadata accessor for Array(0, v2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  Collection.first.getter(v7, WitnessTable);
  v9 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
LABEL_9:
    v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v19 = String._bridgeToObjectiveC()();
    v20 = objc_msgSend(v18, "localizedStringForKey:value:table:", v19, 0, 0);

    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    return v14;
  }
  ICObjectReferences.title.getter(v2);
  v11 = v10;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v2);
  if (!v11)
    goto LABEL_9;
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend(v12, "ic_sanitizedFilenameString");

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0)
    v17 = v14 & 0xFFFFFFFFFFFFLL;
  if (!v17)
  {
    swift_bridgeObjectRelease(v16);
    goto LABEL_9;
  }
  return v14;
}

uint64_t static ICArchive.archiveFilename(forTitle:)()
{
  NSString v0;
  id v1;
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;

  v0 = String._bridgeToObjectiveC()();
  v1 = objc_msgSend(v0, "ic_sanitizedFilenameString");

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v3._countAndFlagsBits = 46;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x6372617365746F6ELL;
  v4._object = (void *)0xEC00000065766968;
  String.append(_:)(v4);
  return v2;
}

uint64_t sub_1003344E4(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000) == 0)
    return a2;
  __break(1u);
  return result;
}

uint64_t sub_100334524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONEncoder.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for JSONEncoder.DateEncodingStrategy.iso8601(_:), v0);
  result = dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v3);
  qword_100601D38 = v5;
  return result;
}

uint64_t sub_1003345CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v0 = type metadata accessor for JSONDecoder.DateDecodingStrategy(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = JSONDecoder.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for JSONDecoder.DateDecodingStrategy.iso8601(_:), v0);
  result = dispatch thunk of JSONDecoder.dateDecodingStrategy.setter(v3);
  qword_100601D40 = v5;
  return result;
}

uint64_t sub_100334674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v23;
  _QWORD v24[2];

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  v6 = v4;
  v7 = v5;
  if (v5)
  {
    v8 = sub_100263A64(v4, v5, &off_100557438);
    swift_arrayDestroy(&unk_100557458, 2, &type metadata for String);
    if ((v8 & 1) != 0)
    {
      v24[0] = 46;
      v24[1] = 0xE100000000000000;
      v9 = sub_1001452E8();
      v10 = StringProtocol.components<A>(separatedBy:)(v24, &type metadata for String, &type metadata for String, v9, v9);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRetain(v10);
      v11 = sub_100012E18(&qword_1005D4190);
      v12 = sub_100334818();
      v13 = BidirectionalCollection<>.joined(separator:)(46, 0xE100000000000000, v11, v12);
      swift_unknownObjectRelease(v10, v14);
      v15 = *(_QWORD *)(v10 + 16);
      if (v15)
      {
        v16 = v10 + 32 + 16 * v15;
        v17 = *(_QWORD *)(v16 - 16);
        v18 = *(void **)(v16 - 8);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRelease(v10);
        v23 = v13;
        v19._countAndFlagsBits = 3027488;
        v19._object = (void *)0xE300000000000000;
        String.append(_:)(v19);
        v20._countAndFlagsBits = v17;
        v20._object = v18;
        String.append(_:)(v20);
        swift_bridgeObjectRelease(v18);
      }
      else
      {
        swift_bridgeObjectRelease(v10);
        v23 = v13;
        v21._countAndFlagsBits = 12832;
        v21._object = (void *)0xE200000000000000;
        String.append(_:)(v21);
      }
      return v23;
    }
  }
  return v6;
}

unint64_t sub_100334818()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D4198;
  if (!qword_1005D4198)
  {
    v1 = sub_10001537C(&qword_1005D4190);
    result = swift_getWitnessTable(&protocol conformance descriptor for ArraySlice<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D4198);
  }
  return result;
}

void sub_100334864(uint64_t a1)
{
  int64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  int v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100137300(0, v1, 0);
    v4 = sub_100335C7C(a1);
    v5 = 0;
    v6 = a1 + 64;
    v19 = v1;
    v20 = v3;
    v21 = a1 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v9 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(a1 + 36) != v3)
        goto LABEL_24;
      v10 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v4);
      v11 = UInt.init(truncating:)();

      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1)
        sub_100137300(v12 > 1, v13 + 1, 1);
      _swiftEmptyArrayStorage[2] = v13 + 1;
      _swiftEmptyArrayStorage[v13 + 4] = v11;
      v7 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v7)
        goto LABEL_25;
      v6 = a1 + 64;
      v14 = *(_QWORD *)(v21 + 8 * v9);
      if ((v14 & (1 << v4)) == 0)
        goto LABEL_26;
      v3 = v20;
      if (*(_DWORD *)(a1 + 36) != v20)
        goto LABEL_27;
      v15 = v14 & (-2 << (v4 & 0x3F));
      if (v15)
      {
        v7 = __clz(__rbit64(v15)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v8 = v19;
      }
      else
      {
        v16 = v9 + 1;
        v17 = (unint64_t)(v7 + 63) >> 6;
        v8 = v19;
        if (v9 + 1 < v17)
        {
          v18 = *(_QWORD *)(v21 + 8 * v16);
          if (v18)
          {
LABEL_20:
            v7 = __clz(__rbit64(v18)) + (v16 << 6);
          }
          else
          {
            while (v17 - 2 != v9)
            {
              v18 = *(_QWORD *)(a1 + 80 + 8 * v9++);
              if (v18)
              {
                v16 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v5;
      v4 = v7;
      if (v5 == v8)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

void sub_100334A6C()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  Class isa;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD v32[5];

  v1 = &v0[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_amount];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_amount];
  v3 = v0[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_amount + 8];
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeType];
  v5 = v0[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeType + 8];
  v6 = swift_allocObject(&unk_100569778, 24, 7);
  *(_QWORD *)(v6 + 16) = v0;
  v7 = objc_allocWithZone((Class)ICDateFilterTypeSelection);
  v0;
  swift_retain(v6);
  v8 = objc_msgSend(v7, "initWithSelectionType:", 7);
  if (v5)
    v9 = 1;
  else
    v9 = v4;
  v31 = v8;
  objc_msgSend(v8, "setRelativeRangeSelectionType:", v9);
  isa = 0;
  if ((v1[8] & 1) == 0)
    isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v31, "setRelativeRangeAmount:", isa);

  v11 = objc_msgSend(v31, "relativeRangeLabel");
  if (v11)
  {
    v12 = v11;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0xE000000000000000;
  }
  v16 = objc_msgSend(v31, "relativeRangeTimeIntervalOptions", swift_bridgeObjectRetain(v15).n128_f64[0]);
  if (v16)
  {
    v30 = v6;
    v17 = v13;
    v18 = v4;
    v19 = v2;
    v20 = sub_1000163BC(0, (unint64_t *)&unk_1005D8C50, NSNumber_ptr);
    v21 = sub_10026E740();
    v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v16, v20, &type metadata for String, v21);

    swift_bridgeObjectRetain(v22);
    sub_100334864(v23);
    v24 = v3;
    v26 = v25;
    swift_bridgeObjectRelease(v22);
    v16 = sub_100336108(v26, v22);
    v27 = v22;
    v2 = v19;
    v4 = v18;
    v13 = v17;
    v6 = v30;
    swift_bridgeObjectRelease(v27);
    v28 = v26;
    v3 = v24;
    swift_bridgeObjectRelease(v28);
  }
  v32[3] = &type metadata for DateRangePickerContentConfiguration;
  v32[4] = sub_100336770();
  v29 = swift_allocObject(&unk_1005697A0, 88, 7);
  v32[0] = v29;
  *(_QWORD *)(v29 + 16) = v2;
  *(_BYTE *)(v29 + 24) = v3;
  *(_QWORD *)(v29 + 32) = v4;
  *(_BYTE *)(v29 + 40) = v5;
  *(_QWORD *)(v29 + 48) = v13;
  *(_QWORD *)(v29 + 56) = v15;
  *(_QWORD *)(v29 + 64) = v16;
  *(_QWORD *)(v29 + 72) = sub_100336768;
  *(_QWORD *)(v29 + 80) = v6;
  swift_bridgeObjectRetain(v16);
  UICollectionViewCell.contentConfiguration.setter(v32);
  swift_release(v6);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v15);

}

id sub_100334CF8(uint64_t a1, uint64_t a2, char *a3)
{
  char *v6;
  char *v7;
  id result;
  char *v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;

  v6 = &a3[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_amount];
  *(_QWORD *)v6 = a1;
  v6[8] = 0;
  objc_msgSend(a3, "setNeedsUpdateConfiguration");
  v7 = &a3[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeType];
  *(_QWORD *)v7 = a2;
  v7[8] = 0;
  result = objc_msgSend(a3, "setNeedsUpdateConfiguration");
  v9 = &a3[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeSelectionChanged];
  v10 = *(void (**)(uint64_t, uint64_t))&a3[OBJC_IVAR____TtC11MobileNotes39FolderComposerFilterCellDateRangePicker_rangeSelectionChanged];
  if (v10)
  {
    v11 = *((_QWORD *)v9 + 1);
    swift_retain(v11);
    v10(a1, a2);
    return (id)sub_100012C50((uint64_t)v10, v11);
  }
  return result;
}

id sub_100334F78()
{
  return sub_1002B86F4(type metadata accessor for FolderComposerFilterCellDateRangePicker);
}

uint64_t type metadata accessor for FolderComposerFilterCellDateRangePicker()
{
  return objc_opt_self(_TtC11MobileNotes39FolderComposerFilterCellDateRangePicker);
}

id sub_1003351C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView____lazy_storage___dateRangePicker;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView____lazy_storage___dateRangePicker);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView____lazy_storage___dateRangePicker);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIPickerView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v4, "setDataSource:", v0);
    objc_msgSend(v4, "setDelegate:", v0);
    objc_msgSend(v4, "_setSelectionBarIgnoresInset:", 1);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_100335290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE v24[40];

  v1 = v0 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration;
  swift_beginAccess(v0 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration, v23, 0, 0);
  sub_10012D11C(v1, (uint64_t)v24);
  v2 = sub_100012E18(&qword_1005D46F8);
  result = swift_dynamicCast(&v15, v24, v2, &type metadata for DateRangePickerContentConfiguration, 6);
  if ((result & 1) != 0)
  {
    v4 = v17;
    v5 = v18;
    v7 = v19;
    v6 = v20;
    v9 = v21;
    v8 = v22;
    if ((v16 & 1) == 0)
    {
      v10 = v15;
      result = (uint64_t)sub_1003351C0();
      v11 = __OFSUB__(v10, 1);
      v12 = v10 - 1;
      if (v11)
      {
        __break(1u);
        goto LABEL_12;
      }
      v13 = (void *)result;
      objc_msgSend((id)result, "selectRow:inComponent:animated:", v12, objc_msgSend((id)objc_opt_self(ICLocalizationUtilities), "isArabic"), 0);

    }
    if (v5)
    {
LABEL_9:
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      return sub_100012C50(v9, v8);
    }
    result = (uint64_t)sub_1003351C0();
    if (v4)
    {
      if (((v4 - 1) & 0x8000000000000000) == 0)
      {
        v14 = (void *)result;
        objc_msgSend((id)result, "selectRow:inComponent:animated:", v4 - 1, objc_msgSend((id)objc_opt_self(ICLocalizationUtilities), "isArabic") ^ 1, 0);

        goto LABEL_9;
      }
LABEL_13:
      __break(1u);
      return result;
    }
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

id sub_100335430()
{
  return sub_1002B86F4(type metadata accessor for DateRangePickerContentView);
}

uint64_t type metadata accessor for DateRangePickerContentView()
{
  return objc_opt_self(_TtC11MobileNotes26DateRangePickerContentView);
}

uint64_t sub_100335494@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration;
  swift_beginAccess(v3, v5, 0, 0);
  return sub_10012D11C(v3, a1);
}

uint64_t sub_1003354E4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _BYTE v5[24];

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration);
  swift_beginAccess(v1 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration, v5, 33, 0);
  sub_1003355CC(v3, a1);
  swift_endAccess(v5);
  sub_100335290();
  return sub_1000153C0(a1);
}

void (*sub_100335550(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration, a1, 33, 0);
  return sub_100335598;
}

void sub_100335598(uint64_t a1, char a2)
{
  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    sub_100335290();
}

_QWORD *sub_1003355CC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

id sub_100335734()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;

  v1 = *(_OWORD *)(v0 + 48);
  v10 = *(_OWORD *)(v0 + 32);
  v11 = v1;
  v12 = *(_QWORD *)(v0 + 64);
  v2 = *(_OWORD *)(v0 + 16);
  v9[0] = *(_OWORD *)v0;
  v9[1] = v2;
  sub_10014BD1C((uint64_t)&v10, (uint64_t)v13, &qword_1005D2978);
  sub_10014BD1C((uint64_t)&v11, (uint64_t)&v14, &qword_1005D9698);
  v3 = *((_QWORD *)&v11 + 1);
  v4 = v12;
  v5 = (char *)objc_allocWithZone((Class)type metadata accessor for DateRangePickerContentView());
  sub_10014BA28((uint64_t)v13);
  sub_10021FD58(&v14);
  sub_100166B74(v3, v4);
  v6 = sub_100335FE4((uint64_t)v9, v5);
  sub_100336B30(&qword_1005D96A0, v7, (uint64_t (*)(uint64_t))type metadata accessor for DateRangePickerContentView, (uint64_t)&unk_1004633AC);
  return v6;
}

uint64_t sub_100335808@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *v1;
  v3 = *((_BYTE *)v1 + 8);
  v4 = v1[2];
  v5 = *((_BYTE *)v1 + 24);
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v7);
  return sub_100166B74(v9, v10);
}

uint64_t sub_100335874(uint64_t a1, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  char v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;

  v63 = a1;
  v64 = 0;
  v8 = -1 << *(_BYTE *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = ~v8;
  v11 = -v8;
  v65 = a2;
  v66 = a2 + 64;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v67 = v10;
  v68 = 0;
  v69 = v12 & v9;
  v70 = 0;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  v13 = sub_100335E34();
  if (!v15)
    goto LABEL_24;
  v16 = v13;
  v17 = v15;
  v59 = v14;
  v71 = v13;
  v18 = (_QWORD *)*a4;
  v20 = sub_1002493C8(v13);
  v21 = v18[2];
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v24 = v19;
  if (v18[3] >= v23)
  {
    if ((a3 & 1) != 0)
    {
      if ((v19 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      sub_10025116C();
      if ((v24 & 1) == 0)
        goto LABEL_15;
    }
LABEL_12:
    v27 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v27);
    v62 = v27;
    swift_errorRetain(v27);
    v28 = sub_100012E18(&qword_1005D7A90);
    if ((swift_dynamicCast(v28, &v62, v28, &type metadata for _MergeError, 0) & 1) == 0)
    {
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a1);
      v29 = v65;
      swift_bridgeObjectRelease(v63);
      sub_1001452E0(v29);
      return swift_errorRelease(v62);
    }
    goto LABEL_29;
  }
  sub_10024DC4C(v23, a3 & 1);
  v25 = sub_1002493C8(v16);
  if ((v24 & 1) != (v26 & 1))
  {
LABEL_28:
    type metadata accessor for DateFilterRelativeRangeSelectionType(0);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v55);
    __break(1u);
LABEL_29:
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(30);
    v56._object = (void *)0x8000000100484800;
    v56._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v56);
    type metadata accessor for DateFilterRelativeRangeSelectionType(0);
    _print_unlocked<A, B>(_:_:)(&v71, &v60, v57, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v58._countAndFlagsBits = 39;
    v58._object = (void *)0xE100000000000000;
    String.append(_:)(v58);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v60, v61, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
    __break(1u);
    return result;
  }
  v20 = v25;
  if ((v24 & 1) != 0)
    goto LABEL_12;
LABEL_15:
  v31 = (_QWORD *)*a4;
  *(_QWORD *)(*a4 + 8 * (v20 >> 6) + 64) |= 1 << v20;
  *(_QWORD *)(v31[6] + 8 * v20) = v16;
  v32 = (_QWORD *)(v31[7] + 16 * v20);
  *v32 = v59;
  v32[1] = v17;
  v33 = v31[2];
  v34 = __OFADD__(v33, 1);
  v35 = v33 + 1;
  if (v34)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v31[2] = v35;
  v36 = sub_100335E34();
  if (v38)
  {
    v39 = v36;
    v40 = v37;
    v17 = v38;
    do
    {
      v71 = v39;
      v41 = (_QWORD *)*a4;
      v42 = sub_1002493C8(v39);
      v44 = v41[2];
      v45 = (v43 & 1) == 0;
      v34 = __OFADD__(v44, v45);
      v46 = v44 + v45;
      if (v34)
        goto LABEL_26;
      v47 = v43;
      if (v41[3] < v46)
      {
        sub_10024DC4C(v46, 1);
        v42 = sub_1002493C8(v39);
        if ((v47 & 1) != (v48 & 1))
          goto LABEL_28;
      }
      if ((v47 & 1) != 0)
        goto LABEL_12;
      v49 = (_QWORD *)*a4;
      *(_QWORD *)(*a4 + 8 * (v42 >> 6) + 64) |= 1 << v42;
      *(_QWORD *)(v49[6] + 8 * v42) = v39;
      v50 = (_QWORD *)(v49[7] + 16 * v42);
      *v50 = v40;
      v50[1] = v17;
      v51 = v49[2];
      v34 = __OFADD__(v51, 1);
      v52 = v51 + 1;
      if (v34)
        goto LABEL_27;
      v49[2] = v52;
      v39 = sub_100335E34();
      v40 = v53;
      v17 = v54;
    }
    while (v54);
  }
LABEL_24:
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(v63);
  return sub_1001452E0(v65);
}

uint64_t sub_100335C7C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 80);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v1 = *(_QWORD *)(a1 + 88);
  if (v1)
  {
    v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4)
    v7 = 4;
  v8 = v7 - 4;
  v9 = (unint64_t *)(a1 + 96);
  v2 = 192;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t sub_100335D2C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  void *v3;
  uint64_t v4;
  unint64_t result;
  id v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t);
  uint64_t v9;
  char v10;

  if ((*((_BYTE *)v2 + 49) & 1) != 0)
    return 0;
  v4 = v2[1];
  if (!v4)
  {
LABEL_13:
    v3 = 0;
    *((_BYTE *)v2 + 49) = 1;
    return (unint64_t)v3;
  }
  result = v4 - 1;
  if (__OFSUB__(v4, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  v2[1] = result;
  a2 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
LABEL_16:
    v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, a2);
LABEL_9:
    v3 = v6;
    if ((v2[6] & 1) != 0)
    {

    }
    else
    {
      v8 = (void (*)(uint64_t *__return_ptr, uint64_t))v2[4];
      v7 = v2[5];
      swift_retain(v7);
      v8(&v9, (uint64_t)(v2 + 2));
      swift_release(v7);
      if ((v10 & 1) == 0)
        return (unint64_t)v3;

      *((_BYTE *)v2 + 48) = 1;
    }
    goto LABEL_13;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(id *)(a2 + 8 * result + 32);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100335E34()
{
  int64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;

  if ((*(_BYTE *)(v2 + 56) & 1) == 0)
  {
    v4 = *(_QWORD *)(v2 + 8);
    v5 = *(_QWORD *)(*(_QWORD *)v2 + 16);
    if (v4 == v5)
    {
LABEL_4:
      v3 = 0;
      *(_BYTE *)(v2 + 56) = 1;
      return v3;
    }
    if (v4 >= v5)
    {
      __break(1u);
    }
    else
    {
      v3 = *(_QWORD *)(*(_QWORD *)v2 + 8 * v4 + 32);
      *(_QWORD *)(v2 + 8) = v4 + 1;
      v6 = *(_QWORD *)(v2 + 40);
      v7 = *(_QWORD *)(v2 + 48);
      if (v7)
      {
        v8 = (v7 - 1) & v7;
        v9 = __clz(__rbit64(v7)) | (v6 << 6);
LABEL_8:
        v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 16) + 56) + 16 * v9 + 8);
        *(_QWORD *)(v2 + 40) = v6;
        *(_QWORD *)(v2 + 48) = v8;
        swift_bridgeObjectRetain(v10);
        return v3;
      }
      v12 = v6 + 1;
      if (!__OFADD__(v6, 1))
      {
        v13 = (unint64_t)(*(_QWORD *)(v2 + 32) + 64) >> 6;
        v0 = *(_QWORD *)(v2 + 40);
        if (v12 >= v13)
          goto LABEL_31;
        v14 = *(_QWORD *)(v2 + 24);
        v15 = *(_QWORD *)(v14 + 8 * v12);
        if (v15)
        {
LABEL_13:
          v8 = (v15 - 1) & v15;
          v9 = __clz(__rbit64(v15)) + (v12 << 6);
          v6 = v12;
          goto LABEL_8;
        }
        v16 = v6 + 2;
        v0 = v6 + 1;
        if (v6 + 2 >= v13)
          goto LABEL_31;
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_16:
          v12 = v16;
          goto LABEL_13;
        }
        v0 = v6 + 2;
        if (v6 + 3 >= v13)
          goto LABEL_31;
        v15 = *(_QWORD *)(v14 + 8 * (v6 + 3));
        if (v15)
        {
          v12 = v6 + 3;
          goto LABEL_13;
        }
        v16 = v6 + 4;
        v0 = v6 + 3;
        if (v6 + 4 >= v13)
          goto LABEL_31;
        v15 = *(_QWORD *)(v14 + 8 * v16);
        if (v15)
          goto LABEL_16;
        v12 = v6 + 5;
        v0 = v6 + 4;
        if (v6 + 5 >= v13)
        {
LABEL_31:
          *(_QWORD *)(v2 + 40) = v0;
          *(_QWORD *)(v2 + 48) = 0;
          goto LABEL_4;
        }
        v15 = *(_QWORD *)(v14 + 8 * v12);
        if (v15)
          goto LABEL_13;
        v1 = v2;
        v0 = v13 - 1;
        v17 = v6 + 6;
        while (v13 != v17)
        {
          v15 = *(_QWORD *)(v14 + 8 * v17++);
          if (v15)
          {
            v12 = v17 - 1;
            goto LABEL_13;
          }
        }
LABEL_30:
        v2 = v1;
        goto LABEL_31;
      }
    }
    __break(1u);
    goto LABEL_30;
  }
  return 0;
}

id sub_100335FE4(uint64_t a1, char *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  id v7;
  id v8;
  id v9;
  id v10;
  objc_super v12;
  _QWORD v13[5];

  v13[3] = &type metadata for DateRangePickerContentConfiguration;
  v13[4] = sub_100336770();
  v4 = swift_allocObject(&unk_1005697A0, 88, 7);
  v13[0] = v4;
  v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v4 + 64) = v5;
  *(_QWORD *)(v4 + 80) = *(_QWORD *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v4 + 32) = v6;
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView____lazy_storage___dateRangePicker] = 0;
  sub_10012D11C((uint64_t)v13, (uint64_t)&a2[OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration]);
  v12.receiver = a2;
  v12.super_class = (Class)type metadata accessor for DateRangePickerContentView();
  v7 = objc_msgSendSuper2(&v12, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v7, "setPreservesSuperviewLayoutMargins:", 1);
  v8 = v7;
  v9 = sub_1003351C0();
  objc_msgSend(v8, "addSubview:", v9);

  v10 = sub_1003351C0();
  objc_msgSend(v10, "ic_addAnchorsToFillSuperviewLayoutMargins");

  sub_100335290();
  sub_1000153C0(v13);
  return v8;
}

void *sub_100336108(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  void *v7;

  if (*(_QWORD *)(a2 + 16) >= *(_QWORD *)(a1 + 16))
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(_QWORD *)(a2 + 16);
  if (v4)
  {
    sub_100012E18(&qword_1005D5C20);
    v5 = (void *)static _DictionaryStorage.allocate(capacity:)(v4);
  }
  else
  {
    v5 = &_swiftEmptyDictionarySingleton;
  }
  v7 = v5;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  sub_100335874(a1, a2, 1, &v7);
  return v7;
}

uint64_t sub_1003361C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE v21[40];

  if (a2 == 1)
  {
    if (!objc_msgSend((id)objc_opt_self(ICLocalizationUtilities), "isArabic"))
      goto LABEL_4;
LABEL_12:
    if (!__OFADD__(a1, 1))
    {
      v16[0] = a1 + 1;
      return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (a2)
    return 0;
  if ((objc_msgSend((id)objc_opt_self(ICLocalizationUtilities), "isArabic") & 1) == 0)
    goto LABEL_12;
LABEL_4:
  v4 = v2 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration;
  swift_beginAccess(v4, v20, 0, 0);
  sub_10012D11C(v4, (uint64_t)v21);
  v5 = sub_100012E18(&qword_1005D46F8);
  if ((swift_dynamicCast(v16, v21, v5, &type metadata for DateRangePickerContentConfiguration, 6) & 1) == 0)
    return 0;
  v7 = v16[5];
  v6 = v17;
  v9 = v18;
  v8 = v19;
  if (!v17)
  {
LABEL_15:
    swift_bridgeObjectRelease(v7);
    sub_100012C50(v9, v8);
    return 0;
  }
  v10 = a1 + 1;
  if (__OFADD__(a1, 1))
    goto LABEL_19;
  if ((v10 & 0x8000000000000000) == 0)
  {
    if (*(_QWORD *)(v17 + 16))
    {
      v11 = sub_1002493C8(v10);
      if ((v12 & 1) != 0)
      {
        v13 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v11);
        v14 = *v13;
        swift_bridgeObjectRetain(v13[1]);
        swift_bridgeObjectRelease(v6);
        swift_bridgeObjectRelease(v7);
        sub_100012C50(v9, v8);
        return v14;
      }
    }
    swift_bridgeObjectRelease(v6);
    goto LABEL_15;
  }
LABEL_20:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_1003363A0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *);
  uint64_t v17;
  id v18;
  void *v19;
  char *v20;
  char *v21;
  id v22;
  id v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[5];
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *);
  uint64_t v44;
  char v45[24];
  _BYTE v46[48];

  v37 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v2 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration;
  swift_beginAccess(v2 + OBJC_IVAR____TtC11MobileNotes26DateRangePickerContentView_configuration, v45, 0, 0);
  sub_10012D11C(v11, (uint64_t)v46);
  v12 = sub_100012E18(&qword_1005D46F8);
  result = swift_dynamicCast(aBlock, v46, v12, &type metadata for DateRangePickerContentConfiguration, 6);
  if ((result & 1) == 0)
    goto LABEL_7;
  v14 = v41;
  v15 = v42;
  v16 = v43;
  v17 = v44;
  sub_100166B74((uint64_t)v43, v44);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v15);
  result = sub_100012C50((uint64_t)v16, v17);
  if (!v16)
    goto LABEL_7;
  v36 = v5;
  v18 = sub_1003351C0();
  v19 = (void *)objc_opt_self(ICLocalizationUtilities);
  v20 = (char *)objc_msgSend(v18, "selectedRowInComponent:", objc_msgSend(v19, "isArabic"));

  v21 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v22 = sub_1003351C0();
  v23 = objc_msgSend(v22, "selectedRowInComponent:", objc_msgSend(v19, "isArabic") ^ 1);

  if (__OFADD__(v23, 1))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((((unint64_t)v23 + 1) & 0x8000000000000000) != 0)
  {
LABEL_12:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return result;
  }
  v16(v21);
  result = sub_100012C50((uint64_t)v16, v17);
  v5 = v36;
LABEL_7:
  if (!a2)
  {
    v24 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
    v25 = (void *)static OS_dispatch_queue.main.getter(v24);
    v26 = swift_allocObject(&unk_100569728, 24, 7);
    v27 = v37;
    *(_QWORD *)(v26 + 16) = v37;
    aBlock[4] = sub_100336754;
    v41 = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100206734;
    aBlock[3] = &unk_100569740;
    v28 = _Block_copy(aBlock);
    v29 = v41;
    v30 = v27;
    swift_release(v29);
    static DispatchQoS.unspecified.getter(v31);
    aBlock[0] = _swiftEmptyArrayStorage;
    v32 = v5;
    v33 = sub_100336B30((unint64_t *)&qword_1005D6380, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v34 = sub_100012E18((uint64_t *)&unk_1005D8530);
    v35 = sub_1002DECD4();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v4, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v10, v39);
  }
  return result;
}

uint64_t sub_100336730()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_100336754()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "reloadComponent:", 1);
}

id sub_100336768(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100334CF8(a1, a2, *(char **)(v2 + 16));
}

unint64_t sub_100336770()
{
  unint64_t result;

  result = qword_1005D9690;
  if (!qword_1005D9690)
  {
    result = swift_getWitnessTable(&unk_100463414, &type metadata for DateRangePickerContentConfiguration);
    atomic_store(result, (unint64_t *)&qword_1005D9690);
  }
  return result;
}

uint64_t sub_1003367B4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  if (v0[9])
    swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t destroy for DateRangePickerContentConfiguration(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(a1[5]);
  result = swift_bridgeObjectRelease(a1[6]);
  if (a1[7])
    return swift_release(a1[8]);
  return result;
}

uint64_t initializeWithCopy for DateRangePickerContentConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  v7 = (_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  if (v6)
  {
    v8 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v6;
    *(_QWORD *)(a1 + 64) = v8;
    swift_retain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v7;
  }
  return a1;
}

uint64_t assignWithCopy for DateRangePickerContentConfiguration(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v4;
  v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 32) = a2[4];
  v6 = a2[5];
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = a2[6];
  *(_QWORD *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v8);
  v10 = a2[7];
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v10)
    {
      v13 = a2[8];
      *(_QWORD *)(a1 + 56) = v10;
      *(_QWORD *)(a1 + 64) = v13;
      swift_retain(v13);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
    return a1;
  }
  if (!v10)
  {
    swift_release(*(_QWORD *)(a1 + 64));
    goto LABEL_7;
  }
  v11 = a2[8];
  v12 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  swift_retain(v11);
  swift_release(v12);
  return a1;
}

uint64_t assignWithTake for DateRangePickerContentConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 56);
  if (!*(_QWORD *)(a1 + 56))
  {
    if (v5)
    {
      v8 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v5;
      *(_QWORD *)(a1 + 64) = v8;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v5)
  {
    swift_release(*(_QWORD *)(a1 + 64));
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v6;
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for DateRangePickerContentConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DateRangePickerContentConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 72) = 0;
    if (a2)
      *(_QWORD *)(result + 40) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DateRangePickerContentConfiguration()
{
  return &type metadata for DateRangePickerContentConfiguration;
}

uint64_t sub_100336B30(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100336B74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t i;
  id v65;
  void *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD aBlock[5];
  _QWORD *v86;
  char v87[24];
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  _QWORD v93[6];

  v5 = (uint64_t *)(v2 + 16);
  swift_beginAccess(v2 + 16, v87, 0, 0);
  v6 = *(_QWORD *)(v2 + 16);
  v83 = v2;
  v7 = *(_QWORD *)(v2 + 40);
  swift_bridgeObjectRetain(v6);
  v8 = (uint64_t)sub_100337318(v7, v6);
  v9 = v8;
  v73 = a1;
  v74 = a2;
  v75 = v7;
  v76 = v5;
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 >= 0)
      v8 &= 0xFFFFFFFFFFFFFF8uLL;
    v10 = __CocoaSet.makeIterator()(v8);
    v11 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v12 = sub_1001452A0(&qword_1005D4160, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v8 = Set.Iterator.init(_cocoa:)(v10, v11, v12);
    v9 = v88;
    v79 = v89;
    v13 = v90;
    v14 = v91;
    v15 = v92;
  }
  else
  {
    v14 = 0;
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v79 = v8 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(v8 + 56);
  }
  v77 = (unint64_t)(v13 + 64) >> 6;
  v81 = v9;
  while (v9 < 0)
  {
    v22 = __CocoaSet.Iterator.next()(v8);
    if (!v22)
      goto LABEL_45;
    v23 = v22;
    v93[0] = v22;
    v24 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    swift_unknownObjectRetain(v23);
    swift_dynamicCast(aBlock, v93, (char *)&type metadata for Swift.AnyObject + 8, v24, 7);
    v25 = (id)aBlock[0];
    swift_unknownObjectRelease(v23, v26);
    v21 = v14;
    v19 = v15;
    if (!v25)
      goto LABEL_45;
LABEL_32:
    v30 = *(_QWORD *)(v83 + 24);
    if ((unint64_t)v30 >> 62)
    {
      if (v30 < 0)
        v36 = *(_QWORD *)(v83 + 24);
      else
        v36 = v30 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v83 + 24));
      v31 = _CocoaArrayWrapper.endIndex.getter(v36);
      if (!v31)
        goto LABEL_10;
    }
    else
    {
      v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v83 + 24));
      if (!v31)
        goto LABEL_10;
    }
    if (v31 < 1)
    {
      __break(1u);
LABEL_92:
      __break(1u);
LABEL_93:
      __break(1u);
LABEL_94:
      __break(1u);
      return;
    }
    v32 = 0;
    do
    {
      if ((v30 & 0xC000000000000001) != 0)
        v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32, v30);
      else
        v33 = *(id *)(v30 + 8 * v32 + 32);
      v34 = v33;
      ++v32;
      v35 = objc_msgSend(v33, "addHashtagToNoteBodyIfMissing:", v25, v73, v74);

    }
    while (v31 != v32);
LABEL_10:

    v8 = swift_bridgeObjectRelease(v30);
    v14 = v21;
    v15 = v19;
    v9 = v81;
  }
  if (v15)
  {
    v19 = (v15 - 1) & v15;
    v20 = __clz(__rbit64(v15)) | (v14 << 6);
    v21 = v14;
    goto LABEL_31;
  }
  v27 = v14 + 1;
  if (__OFADD__(v14, 1))
    goto LABEL_93;
  if (v27 < v77)
  {
    v28 = *(_QWORD *)(v79 + 8 * v27);
    v21 = v14 + 1;
    if (!v28)
    {
      v21 = v14 + 2;
      if (v14 + 2 >= v77)
        goto LABEL_45;
      v28 = *(_QWORD *)(v79 + 8 * v21);
      if (!v28)
      {
        v21 = v14 + 3;
        if (v14 + 3 >= v77)
          goto LABEL_45;
        v28 = *(_QWORD *)(v79 + 8 * v21);
        if (!v28)
        {
          v21 = v14 + 4;
          if (v14 + 4 >= v77)
            goto LABEL_45;
          v28 = *(_QWORD *)(v79 + 8 * v21);
          if (!v28)
          {
            v29 = v14 + 5;
            do
            {
              if (v77 == v29)
                goto LABEL_45;
              v28 = *(_QWORD *)(v79 + 8 * v29++);
            }
            while (!v28);
            v21 = v29 - 1;
          }
        }
      }
    }
    v19 = (v28 - 1) & v28;
    v20 = __clz(__rbit64(v28)) + (v21 << 6);
LABEL_31:
    v25 = *(id *)(*(_QWORD *)(v9 + 48) + 8 * v20);
    if (!v25)
      goto LABEL_45;
    goto LABEL_32;
  }
LABEL_45:
  sub_1001452E0(v9);
  v37 = *v76;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v37);
  v39 = (uint64_t)sub_100337318(v38, v75);
  v40 = swift_bridgeObjectRelease(v37);
  if ((v39 & 0xC000000000000001) != 0)
  {
    if (v39 < 0)
      v41 = v39;
    else
      v41 = v39 & 0xFFFFFFFFFFFFFF8;
    v42 = __CocoaSet.makeIterator()(v41);
    v43 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v44 = sub_1001452A0(&qword_1005D4160, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v40 = Set.Iterator.init(_cocoa:)(v42, v43, v44);
    v39 = v93[0];
    v80 = v93[1];
    v45 = v93[2];
    v46 = v93[3];
    v47 = v93[4];
  }
  else
  {
    v46 = 0;
    v48 = -1 << *(_BYTE *)(v39 + 32);
    v80 = v39 + 56;
    v45 = ~v48;
    v49 = -v48;
    if (v49 < 64)
      v50 = ~(-1 << v49);
    else
      v50 = -1;
    v47 = v50 & *(_QWORD *)(v39 + 56);
  }
  v78 = (unint64_t)(v45 + 64) >> 6;
  v82 = v39;
  while (2)
  {
    if (v39 < 0)
    {
      v54 = __CocoaSet.Iterator.next()(v40);
      if (!v54)
        goto LABEL_90;
      v55 = v54;
      v84 = v54;
      v56 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
      swift_unknownObjectRetain(v55);
      swift_dynamicCast(aBlock, &v84, (char *)&type metadata for Swift.AnyObject + 8, v56, 7);
      v57 = (id)aBlock[0];
      swift_unknownObjectRelease(v55, v58);
      v53 = v46;
      v51 = v47;
      if (!v57)
        goto LABEL_90;
      goto LABEL_77;
    }
    if (v47)
    {
      v51 = (v47 - 1) & v47;
      v52 = __clz(__rbit64(v47)) | (v46 << 6);
      v53 = v46;
LABEL_76:
      v57 = *(id *)(*(_QWORD *)(v39 + 48) + 8 * v52);
      if (!v57)
        goto LABEL_90;
LABEL_77:
      v62 = *(_QWORD *)(v83 + 24);
      if ((unint64_t)v62 >> 62)
      {
        if (v62 < 0)
          v67 = *(_QWORD *)(v83 + 24);
        else
          v67 = v62 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(v83 + 24));
        v63 = _CocoaArrayWrapper.endIndex.getter(v67);
        if (v63)
        {
LABEL_79:
          if (v63 < 1)
            goto LABEL_92;
          for (i = 0; i != v63; ++i)
          {
            if ((v62 & 0xC000000000000001) != 0)
              v65 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v62);
            else
              v65 = *(id *)(v62 + 8 * i + 32);
            v66 = v65;
            objc_msgSend(v65, "removeHashtag:", v57, v73, v74);

          }
        }
      }
      else
      {
        v63 = *(_QWORD *)((v62 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(*(_QWORD *)(v83 + 24));
        if (v63)
          goto LABEL_79;
      }

      v40 = swift_bridgeObjectRelease(v62);
      v46 = v53;
      v47 = v51;
      v39 = v82;
      continue;
    }
    break;
  }
  v59 = v46 + 1;
  if (__OFADD__(v46, 1))
    goto LABEL_94;
  if (v59 >= v78)
    goto LABEL_90;
  v60 = *(_QWORD *)(v80 + 8 * v59);
  v53 = v46 + 1;
  if (v60)
    goto LABEL_75;
  v53 = v46 + 2;
  if (v46 + 2 >= v78)
    goto LABEL_90;
  v60 = *(_QWORD *)(v80 + 8 * v53);
  if (v60)
    goto LABEL_75;
  v53 = v46 + 3;
  if (v46 + 3 >= v78)
    goto LABEL_90;
  v60 = *(_QWORD *)(v80 + 8 * v53);
  if (v60)
    goto LABEL_75;
  v53 = v46 + 4;
  if (v46 + 4 >= v78)
    goto LABEL_90;
  v60 = *(_QWORD *)(v80 + 8 * v53);
  if (v60)
  {
LABEL_75:
    v51 = (v60 - 1) & v60;
    v52 = __clz(__rbit64(v60)) + (v53 << 6);
    goto LABEL_76;
  }
  v61 = v46 + 5;
  while (v78 != v61)
  {
    v60 = *(_QWORD *)(v80 + 8 * v61++);
    if (v60)
    {
      v53 = v61 - 1;
      goto LABEL_75;
    }
  }
LABEL_90:
  sub_1001452E0(v39);
  v68 = *(void **)(v83 + 32);
  v69 = swift_allocObject(&unk_100569898, 24, 7);
  swift_weakInit(v69 + 16, v83);
  v70 = (_QWORD *)swift_allocObject(&unk_1005698C0, 40, 7);
  v70[2] = v69;
  v70[3] = v73;
  v70[4] = v74;
  aBlock[4] = sub_100337934;
  v86 = v70;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_1005698D8;
  v71 = _Block_copy(aBlock);
  v72 = v86;
  sub_100166B74(v73, v74);
  swift_release(v72);
  objc_msgSend(v68, "performBlock:", v71);
  _Block_release(v71);
}

void *sub_100337318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v2 = a2;
  v3 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_5;
LABEL_11:
    if (v4 > *(_QWORD *)(v2 + 16) >> 3)
      return sub_1003CB8FC(v3, v2);
    goto LABEL_13;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001) == 0)
    goto LABEL_11;
LABEL_5:
  if (v2 < 0)
    v5 = v2;
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    v6 = __CocoaSet.count.getter(v5);
    v7 = sub_100304878(v5, v6);
    swift_bridgeObjectRelease(v2);
    v2 = v7;
    return sub_1003CB8FC(v3, v2);
  }
LABEL_13:
  sub_1003CB3A4(v3);
  return (void *)v2;
}

void sub_10033740C(void *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t Strong;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void (*v41)(uint64_t);
  uint64_t v42;
  int64_t v43;
  _QWORD v44[3];
  char v45[24];
  id v46;
  char v47[24];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;

  v4 = a2 + 16;
  v5 = objc_msgSend(a1, "includedObjectIDs");
  v6 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  v7 = sub_1001452A0((unint64_t *)&qword_1005D3CC0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
  v8 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v5, v6, v7);

  v41 = a3;
  if ((v8 & 0xC000000000000001) != 0)
  {
    if (v8 < 0)
      v10 = v8;
    else
      v10 = v8 & 0xFFFFFFFFFFFFFF8;
    v11 = __CocoaSet.makeIterator()(v10);
    v9 = Set.Iterator.init(_cocoa:)(v11, v6, v7);
    v8 = v48;
    v12 = v49;
    v13 = v50;
    v14 = v51;
    v15 = v52;
  }
  else
  {
    v14 = 0;
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v12 = v8 + 56;
    v13 = ~v16;
    v17 = -v16;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v15 = v18 & *(_QWORD *)(v8 + 56);
  }
  v19 = v6;
  v43 = (unint64_t)(v13 + 64) >> 6;
  v42 = v4;
  if ((v8 & 0x8000000000000000) == 0)
    goto LABEL_16;
LABEL_13:
  v20 = (void *)__CocoaSet.Iterator.next()(v9);
  if (!v20)
    goto LABEL_42;
  v21 = v20;
  v46 = v20;
  swift_unknownObjectRetain(v20);
  swift_dynamicCast(v44, &v46, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
  v22 = (id)v44[0];
  swift_unknownObjectRelease(v21, v23);
  v24 = v14;
  v25 = v15;
  if (!v22)
    goto LABEL_42;
  while (1)
  {
    swift_beginAccess(v4, v47, 0, 0);
    Strong = swift_weakLoadStrong(v4);
    if (!Strong)
    {

      v14 = v24;
      v15 = v25;
      if (v8 < 0)
        goto LABEL_13;
      goto LABEL_16;
    }
    v31 = Strong;
    v32 = *(id *)(Strong + 32);
    swift_release(v31);
    v33 = objc_msgSend(v32, "objectWithID:", v22);

    if (v33)
    {
      v34 = objc_opt_self(ICHashtag);
      v35 = swift_dynamicCastObjCClass(v33, v34);
      if (v35)
      {
        v36 = (void *)v35;
        swift_beginAccess(v4, v45, 0, 0);
        v37 = swift_weakLoadStrong(v4);
        if (v37)
        {
          v38 = v37;
          swift_beginAccess(v37 + 16, v44, 33, 0);
          v39 = v33;
          v4 = v42;
          sub_100302E58((Swift::Int *)&v46, v36);
          swift_endAccess(v44);
          swift_release(v38);

          goto LABEL_40;
        }
      }

    }
LABEL_40:
    v14 = v24;
    v15 = v25;
    if (v8 < 0)
      goto LABEL_13;
LABEL_16:
    if (!v15)
      break;
    v25 = (v15 - 1) & v15;
    v26 = __clz(__rbit64(v15)) | (v14 << 6);
    v24 = v14;
LABEL_32:
    v22 = *(id *)(*(_QWORD *)(v8 + 48) + 8 * v26);
    if (!v22)
      goto LABEL_42;
  }
  v27 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    return;
  }
  if (v27 >= v43)
    goto LABEL_42;
  v28 = *(_QWORD *)(v12 + 8 * v27);
  v24 = v14 + 1;
  if (v28)
    goto LABEL_31;
  v24 = v14 + 2;
  if (v14 + 2 >= v43)
    goto LABEL_42;
  v28 = *(_QWORD *)(v12 + 8 * v24);
  if (v28)
    goto LABEL_31;
  v24 = v14 + 3;
  if (v14 + 3 >= v43)
    goto LABEL_42;
  v28 = *(_QWORD *)(v12 + 8 * v24);
  if (v28)
    goto LABEL_31;
  v24 = v14 + 4;
  if (v14 + 4 >= v43)
    goto LABEL_42;
  v28 = *(_QWORD *)(v12 + 8 * v24);
  if (v28)
  {
LABEL_31:
    v25 = (v28 - 1) & v28;
    v26 = __clz(__rbit64(v28)) + (v24 << 6);
    goto LABEL_32;
  }
  v29 = v14 + 5;
  while (v43 != v29)
  {
    v28 = *(_QWORD *)(v12 + 8 * v29++);
    if (v28)
    {
      v24 = v29 - 1;
      goto LABEL_31;
    }
  }
LABEL_42:
  v40 = sub_1001452E0(v8);
  if (v41)
    v41(v40);
}

void sub_1003377F8(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  id v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = *(id *)(Strong + 32);
    swift_release(v5);
    objc_msgSend(v6, "ic_save");

  }
  if (a2)
    a2();
}

uint64_t sub_100337880()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

uint64_t type metadata accessor for TagAssignmentModel()
{
  return objc_opt_self(_TtC11MobileNotes18TagAssignmentModel);
}

uint64_t sub_1003378DC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100337900()
{
  _QWORD *v0;

  swift_release(v0[2]);
  if (v0[3])
    swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100337934()
{
  uint64_t v0;

  sub_1003377F8(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_100337940(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  void **i;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::String v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (!a1[2])
    return swift_bridgeObjectRelease(a1);
  v47 = a1[2];
  v7 = a1[4];
  v6 = a1[5];
  v8 = (void *)a1[6];
  swift_bridgeObjectRetain(a1);
  v50 = v7;
  v51 = v6;
  v9 = (_QWORD *)*a3;
  swift_bridgeObjectRetain(v6);
  v10 = v8;
  v12 = sub_100249058(v7, v6);
  v13 = v9[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
    goto LABEL_23;
  v16 = v11;
  if (v9[3] >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v11 & 1) != 0)
        goto LABEL_10;
    }
    else
    {
      sub_10024FEC0();
      if ((v16 & 1) != 0)
        goto LABEL_10;
    }
LABEL_13:
    v22 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    v23 = (uint64_t *)(v22[6] + 16 * v12);
    *v23 = v7;
    v23[1] = v6;
    *(_QWORD *)(v22[7] + 8 * v12) = v10;
    v24 = v22[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (v25)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v22[2] = v26;
    v27 = v47 - 1;
    if (v47 == 1)
      return swift_bridgeObjectRelease_n(a1, 2);
    for (i = (void **)(a1 + 9); ; i += 3)
    {
      v6 = (uint64_t)*(i - 1);
      v30 = *i;
      v50 = (uint64_t)*(i - 2);
      v29 = v50;
      v51 = v6;
      v31 = (_QWORD *)*a3;
      swift_bridgeObjectRetain(v6);
      v10 = v30;
      v32 = sub_100249058(v50, v6);
      v34 = v31[2];
      v35 = (v33 & 1) == 0;
      v25 = __OFADD__(v34, v35);
      v36 = v34 + v35;
      if (v25)
        break;
      v37 = v33;
      if (v31[3] < v36)
      {
        sub_10024BC90(v36, 1);
        v32 = sub_100249058(v50, v6);
        if ((v37 & 1) != (v38 & 1))
          goto LABEL_25;
      }
      if ((v37 & 1) != 0)
        goto LABEL_10;
      v39 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v32 >> 6) + 64) |= 1 << v32;
      v40 = (uint64_t *)(v39[6] + 16 * v32);
      *v40 = v29;
      v40[1] = v6;
      *(_QWORD *)(v39[7] + 8 * v32) = v10;
      v41 = v39[2];
      v25 = __OFADD__(v41, 1);
      v42 = v41 + 1;
      if (v25)
        goto LABEL_24;
      v39[2] = v42;
      if (!--v27)
        return swift_bridgeObjectRelease_n(a1, 2);
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  sub_10024BC90(v15, a2 & 1);
  v17 = sub_100249058(v7, v6);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_13;
LABEL_10:
    v20 = swift_allocError(&type metadata for _MergeError, &protocol witness table for _MergeError, 0, 0);
    swift_willThrow(v20);
    v52 = v20;
    swift_errorRetain(v20);
    v21 = sub_100012E18(&qword_1005D7A90);
    if ((swift_dynamicCast(v21, &v52, v21, &type metadata for _MergeError, 0) & 1) == 0)
    {

      swift_bridgeObjectRelease_n(a1, 2);
      swift_bridgeObjectRelease(v6);
      return swift_errorRelease(v52);
    }
    goto LABEL_26;
  }
LABEL_25:
  v43 = sub_100012E18(&qword_1005D2978);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v43);
  __break(1u);
LABEL_26:
  v48 = 0;
  v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v44._object = (void *)0x8000000100484800;
  v44._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v44);
  v45 = sub_100012E18(&qword_1005D2978);
  _print_unlocked<A, B>(_:_:)(&v50, &v48, v45, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v46._countAndFlagsBits = 39;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v48, v49, "Swift/NativeDictionary.swift", 28, 2, 783, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100337CD8(uint64_t isStackAllocationSafe, uint64_t a2)
{
  unint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  Swift::Int v9;
  void *v10;
  uint64_t v12;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_100337E58((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, v3, a2);
    swift_release(a2);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v9 = sub_100337E58((unint64_t *)v10, v7, v3, a2);
    swift_release(a2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v9;
}

Swift::Int sub_100337E58(unint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  unint64_t j;
  unint64_t v21;
  id v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  id v28;
  Swift::Int v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  uint64_t v37;
  unint64_t i;
  unint64_t v39;
  id v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;

  v4 = a3;
  if (a3 >> 62)
    goto LABEL_38;
  v5 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  v50 = v4;
  if (v5)
  {
    while (1)
    {
      v51 = a4 + 56;
      if ((v4 & 0xC000000000000001) != 0)
        break;
      v25 = 0;
      v46 = v4 + 32;
      v47 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      v48 = 0;
      while (v25 != v47)
      {
        v27 = *(_QWORD *)(a4 + 40);
        v28 = *(id *)(v46 + 8 * v25);
        v29 = v27;
        v4 = (uint64_t)v28;
        v30 = NSObject._rawHashValue(seed:)(v29);
        v31 = -1 << *(_BYTE *)(a4 + 32);
        v32 = v30 & ~v31;
        v33 = v32 >> 6;
        v34 = 1 << v32;
        if (((1 << v32) & *(_QWORD *)(v51 + 8 * (v32 >> 6))) != 0)
        {
          v4 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
          v35 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v32);
          v36 = static NSObject.== infix(_:_:)(v35);

          if ((v36 & 1) != 0)
          {

          }
          else
          {
            v37 = ~v31;
            for (i = v32 + 1; ; i = v39 + 1)
            {
              v39 = i & v37;
              if (((*(_QWORD *)(v51 + (((i & v37) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v37)) & 1) == 0)
                goto LABEL_20;
              v40 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v39);
              v41 = static NSObject.== infix(_:_:)(v40);

              if ((v41 & 1) != 0)
                break;
            }

            v33 = v39 >> 6;
            v34 = 1 << v39;
          }
          v42 = a1[v33];
          a1[v33] = v34 | v42;
          v26 = v5;
          if ((v34 & v42) == 0)
          {
            v9 = __OFADD__(v48++, 1);
            if (v9)
            {
              __break(1u);
LABEL_35:
              __break(1u);
              break;
            }
          }
        }
        else
        {
LABEL_20:

          v26 = v5;
        }
        if (++v25 == v26)
          goto LABEL_43;
      }
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      if (v4 < 0)
        v43 = v4;
      else
        v43 = v4 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v4);
      v5 = _CocoaArrayWrapper.endIndex.getter(v43);
      v50 = v4;
      if (!v5)
        goto LABEL_42;
    }
    v48 = 0;
    v6 = 0;
    while (1)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v50);
      v9 = __OFADD__(v6++, 1);
      if (v9)
        goto LABEL_35;
      v10 = v8;
      v4 = v8;
      v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a4 + 40));
      v13 = -1 << *(_BYTE *)(a4 + 32);
      v14 = v11 & ~v13;
      v15 = v14 >> 6;
      v16 = 1 << v14;
      if (((1 << v14) & *(_QWORD *)(v51 + 8 * (v14 >> 6))) == 0)
        goto LABEL_5;
      v4 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
      v17 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v14);
      v18 = static NSObject.== infix(_:_:)(v17);

      if ((v18 & 1) == 0)
        break;
      swift_unknownObjectRelease(v10, v12);
LABEL_16:
      v24 = a1[v15];
      a1[v15] = v16 | v24;
      v7 = v5;
      if ((v16 & v24) == 0)
      {
        if (__OFADD__(v48, 1))
          goto LABEL_37;
        ++v48;
      }
LABEL_6:
      if (v6 == v7)
        goto LABEL_43;
    }
    v19 = ~v13;
    for (j = v14 + 1; ; j = v21 + 1)
    {
      v21 = j & v19;
      if (((*(_QWORD *)(v51 + (((j & v19) >> 3) & 0xFFFFFFFFFFFFF8)) >> (j & v19)) & 1) == 0)
        break;
      v22 = *(id *)(*(_QWORD *)(a4 + 48) + 8 * v21);
      v23 = static NSObject.== infix(_:_:)(v22);

      if ((v23 & 1) != 0)
      {
        swift_unknownObjectRelease(v10, v12);
        v15 = v21 >> 6;
        v16 = 1 << v21;
        goto LABEL_16;
      }
    }
LABEL_5:
    swift_unknownObjectRelease(v10, v12);
    v7 = v5;
    goto LABEL_6;
  }
LABEL_42:
  v48 = 0;
LABEL_43:
  swift_bridgeObjectRelease(v50);
  swift_retain(a4);
  return sub_10030AB60(a1, a2, v48, a4);
}

void sub_100338210(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[6];
  unint64_t v42;

  v3 = a1;
  v42 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000163BC(0, &qword_1005CFAD0, ICInlineAttachment_ptr);
    v7 = sub_1001452A0((unint64_t *)&qword_1005D4C18, &qword_1005CFAD0, ICInlineAttachment_ptr);
    v8 = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    v3 = v41[1];
    v39 = v41[2];
    v9 = v41[3];
    v10 = v41[4];
    v11 = v41[5];
  }
  else
  {
    v12 = -1 << *(_BYTE *)(a1 + 32);
    v39 = a1 + 56;
    v9 = ~v12;
    v13 = -v12;
    if (v13 < 64)
      v14 = ~(-1 << v13);
    else
      v14 = -1;
    v11 = v14 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v38 = (unint64_t)(v9 + 64) >> 6;
  while (v3 < 0)
  {
    v18 = __CocoaSet.Iterator.next()(v8);
    if (!v18)
      goto LABEL_44;
    v19 = v18;
    v40 = v18;
    v20 = sub_1000163BC(0, &qword_1005CFAD0, ICInlineAttachment_ptr);
    swift_unknownObjectRetain(v19);
    swift_dynamicCast(v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
    v21 = (id)v41[0];
    swift_unknownObjectRelease(v19, v22);
    v17 = v10;
    v15 = v11;
    if (!v21)
      goto LABEL_44;
LABEL_36:
    if (objc_msgSend(v21, "isHashtagAttachment")
      && (v26 = objc_msgSend(v21, "tokenContentIdentifier")) != 0)
    {
      v27 = v26;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v30 = v29;

      if (*(_QWORD *)(a2 + 16) && (v31 = sub_100249058(v28, v30), (v32 & 1) != 0))
      {
        v33 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v31);

        v34 = swift_bridgeObjectRelease(v30);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
        v36 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v35 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v36 >= v35 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v33);
        v8 = specialized Array._endMutation()(v37);
      }
      else
      {

        v8 = swift_bridgeObjectRelease(v30);
      }
    }
    else
    {

    }
    v10 = v17;
    v11 = v15;
  }
  if (v11)
  {
    v15 = (v11 - 1) & v11;
    v16 = __clz(__rbit64(v11)) | (v10 << 6);
    v17 = v10;
LABEL_35:
    v21 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    if (!v21)
      goto LABEL_44;
    goto LABEL_36;
  }
  v23 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v23 >= v38)
      goto LABEL_44;
    v24 = *(_QWORD *)(v39 + 8 * v23);
    v17 = v10 + 1;
    if (!v24)
    {
      v17 = v10 + 2;
      if (v10 + 2 >= v38)
        goto LABEL_44;
      v24 = *(_QWORD *)(v39 + 8 * v17);
      if (!v24)
      {
        v17 = v10 + 3;
        if (v10 + 3 >= v38)
          goto LABEL_44;
        v24 = *(_QWORD *)(v39 + 8 * v17);
        if (!v24)
        {
          v17 = v10 + 4;
          if (v10 + 4 >= v38)
            goto LABEL_44;
          v24 = *(_QWORD *)(v39 + 8 * v17);
          if (!v24)
          {
            v17 = v10 + 5;
            if (v10 + 5 >= v38)
              goto LABEL_44;
            v24 = *(_QWORD *)(v39 + 8 * v17);
            if (!v24)
            {
              v25 = v10 + 6;
              while (v38 != v25)
              {
                v24 = *(_QWORD *)(v39 + 8 * v25++);
                if (v24)
                {
                  v17 = v25 - 1;
                  goto LABEL_34;
                }
              }
LABEL_44:
              sub_1001452E0(v3);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v15 = (v24 - 1) & v24;
    v16 = __clz(__rbit64(v24)) + (v17 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_1003385CC(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v3 = objc_msgSend((id)objc_opt_self(ICHashtag), "canonicalHashtagsInContext:", a2);
  v4 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v22 = v5;
    else
      v22 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v5);
    v42 = v5;
    v44 = a1;
    if (v6)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v42 = v5;
    v44 = a1;
    if (v6)
    {
LABEL_3:
      v45 = _swiftEmptyArrayStorage;
      sub_100137140(0, v6 & ~(v6 >> 63), 0);
      if (v6 < 0)
      {
        __break(1u);
        goto LABEL_41;
      }
      v7 = 0;
      v8 = v45;
      v9 = v42;
      v10 = v42 & 0xC000000000000001;
      do
      {
        if (v10)
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v9);
        else
          v11 = *(id *)(v9 + 8 * v7 + 32);
        v12 = v11;
        v13 = objc_msgSend(v11, "standardizedContent", v42);
        if (v13)
        {
          v14 = v13;
          v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
          v17 = v16;

        }
        else
        {
          v15 = 0;
          v17 = 0;
        }
        v45 = v8;
        v19 = v8[2];
        v18 = v8[3];
        v20 = v19 + 1;
        if (v19 >= v18 >> 1)
        {
          sub_100137140(v18 > 1, v19 + 1, 1);
          v9 = v42;
          v8 = v45;
        }
        ++v7;
        v8[2] = v20;
        v21 = &v8[3 * v19];
        v21[4] = v15;
        v21[5] = v17;
        v21[6] = v12;
      }
      while (v6 != v7);
      a1 = v44;
      goto LABEL_20;
    }
  }
  v8 = _swiftEmptyArrayStorage;
  v20 = _swiftEmptyArrayStorage[2];
  if (v20)
  {
LABEL_20:
    sub_100012E18(&qword_1005D5C28);
    v23 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v20);
    goto LABEL_21;
  }
  v23 = &_swiftEmptyDictionarySingleton;
LABEL_21:
  v45 = v23;
  swift_bridgeObjectRetain(v8);
  v6 = 0;
  sub_100337940(v24, 1, &v45);
  swift_bridgeObjectRelease(v8);
  v25 = (uint64_t)v45;
  v26 = sub_10020BBE8(v42);
  swift_bridgeObjectRelease(v42);
  if (!((unint64_t)a1 >> 62))
  {
    v27 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v27)
      goto LABEL_23;
LABEL_39:
    swift_release(v25);
    swift_bridgeObjectRelease(a1);
    return v26;
  }
  if (a1 < 0)
    v40 = a1;
  else
    v40 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v27 = _CocoaArrayWrapper.endIndex.getter(v40);
  if (!v27)
    goto LABEL_39;
LABEL_23:
  if (v27 >= 1)
  {
    v28 = 0;
    v43 = a1 & 0xC000000000000001;
    do
    {
      if (v43)
        v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, a1);
      else
        v29 = *(id *)(a1 + 8 * v28 + 32);
      v30 = v29;
      v31 = objc_msgSend(v29, "visibleInlineAttachments", v43);
      v32 = sub_1000163BC(0, &qword_1005CFAD0, ICInlineAttachment_ptr);
      v33 = sub_1001452A0((unint64_t *)&qword_1005D4C18, &qword_1005CFAD0, ICInlineAttachment_ptr);
      v34 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v31, v32, v33);

      swift_retain(v25);
      sub_100338210(v34, v25);
      v36 = v35;
      swift_bridgeObjectRelease(v34);
      swift_release(v25);
      if ((v26 & 0xC000000000000001) != 0)
      {
        if (v26 < 0)
          v37 = v26;
        else
          v37 = v26 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v26);
        v38 = __CocoaSet.count.getter(v37);
        v39 = sub_100304878(v37, v38);
        swift_bridgeObjectRelease(v26);
        v26 = v39;
      }
      ++v28;
      v26 = sub_100337CD8(v36, v26);
      swift_bridgeObjectRelease(v36);

      a1 = v44;
    }
    while (v27 != v28);
    goto LABEL_39;
  }
LABEL_41:
  __break(1u);
  result = swift_unexpectedError(v6, "Swift/Dictionary.swift", 22, 1, 489);
  __break(1u);
  return result;
}

void sub_100338C38()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  Class isa;
  id v11;
  char *v12;
  id v13;
  id v14;
  char *v15;
  objc_super v16;
  UIAction_optional v17;
  UIMenu_optional v18;

  v1 = v0;
  v16.receiver = v0;
  v16.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v16, "viewDidLoad");
  v2 = objc_msgSend(v0, "navigationItem");
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v7 = v6;

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setTitle:", v8, swift_bridgeObjectRelease(v7).n128_f64[0]);

  v9 = objc_msgSend(v1, "navigationItem");
  sub_1000163BC(0, &qword_1005D9898, UIBarButtonItem_ptr);
  v17.value.super.super.isa = (Class)sub_100338EA8();
  v17.is_nil = 0;
  isa = UIBarButtonItem.init(systemItem:primaryAction:menu:)(UIBarButtonSystemItemCancel, v17, v18).super.super.isa;
  objc_msgSend(v9, "setLeftBarButtonItem:", isa);

  v11 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView, (uint64_t (*)(uint64_t))sub_1003394E8);
  v12 = sub_1003393C0();
  v13 = objc_msgSend(v12, "collectionViewDiffableDataSource");

  objc_msgSend(v11, "setDiffableDataSource:", v13);
  v14 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView, (uint64_t (*)(uint64_t))sub_1003394E8);
  objc_msgSend(v14, "setDelegate:", v1);

  if ((objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision") & 1) == 0)
    sub_100338F84();
  v15 = sub_1003393C0();
  objc_msgSend(v15, "reloadDataAnimated:", 0);

}

id sub_100338EA8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v1 = OBJC_IVAR___ICMoveViewController____lazy_storage___dismissAction;
  v2 = *(void **)(v0 + OBJC_IVAR___ICMoveViewController____lazy_storage___dismissAction);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICMoveViewController____lazy_storage___dismissAction);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = swift_allocObject(&unk_100569910, 24, 7);
    swift_unknownObjectWeakInit(v5 + 16, v0);
    v6 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(0, 0xE000000000000000, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10033A4AC, v5);
    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

void sub_100338F84()
{
  void *v0;
  double v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  Class isa;

  if (qword_1005CEC38 != -1)
    swift_once(&qword_1005CEC38, sub_1002E4CA8);
  v1 = *(double *)&qword_100601BF0;
  v2 = objc_msgSend(v0, "navigationController");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, "paletteForEdge:size:", 2, 0.0, v1);

    if (v4)
    {
      v5 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___headerView, (uint64_t (*)(uint64_t))sub_100339F18);
      objc_msgSend(v4, "addSubview:", v5);

      v6 = objc_msgSend(v0, "navigationController");
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v6, "attachPalette:isPinned:", v4, 0);

      }
      v29 = (void *)objc_opt_self(NSLayoutConstraint);
      v8 = sub_100012E18(&qword_1005CF6F0);
      v9 = swift_allocObject(v8, 64, 7);
      *(_OWORD *)(v9 + 16) = xmmword_100451BE0;
      v10 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___headerView, (uint64_t (*)(uint64_t))sub_100339F18);
      v11 = objc_msgSend(v10, "leadingAnchor");

      v12 = objc_msgSend(v4, "layoutMarginsGuide");
      v13 = objc_msgSend(v12, "leadingAnchor");

      v14 = objc_msgSend(v11, "constraintEqualToAnchor:", v13);
      *(_QWORD *)(v9 + 32) = v14;
      v15 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___headerView, (uint64_t (*)(uint64_t))sub_100339F18);
      v16 = objc_msgSend(v15, "trailingAnchor");

      v17 = objc_msgSend(v4, "layoutMarginsGuide");
      v18 = objc_msgSend(v17, "trailingAnchor");

      v19 = objc_msgSend(v16, "constraintEqualToAnchor:", v18);
      *(_QWORD *)(v9 + 40) = v19;
      v20 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___headerView, (uint64_t (*)(uint64_t))sub_100339F18);
      v21 = objc_msgSend(v20, "topAnchor");

      v22 = objc_msgSend(v4, "topAnchor");
      v23 = objc_msgSend(v21, "constraintEqualToAnchor:", v22);

      *(_QWORD *)(v9 + 48) = v23;
      v24 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___headerView, (uint64_t (*)(uint64_t))sub_100339F18);
      v25 = objc_msgSend(v24, "bottomAnchor");

      v26 = objc_msgSend(v4, "bottomAnchor");
      v27 = objc_msgSend(v25, "constraintEqualToAnchor:", v26);

      *(_QWORD *)(v9 + 56) = v27;
      specialized Array._endMutation()(v28);
      sub_1000163BC(0, (unint64_t *)&qword_1005D8F60, NSLayoutConstraint_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v29, "activateConstraints:", isa, swift_bridgeObjectRelease(v9).n128_f64[0]);

    }
  }
}

char *sub_1003393C0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;

  v1 = OBJC_IVAR___ICMoveViewController____lazy_storage___moveDataSource;
  v2 = *(void **)(v0 + OBJC_IVAR___ICMoveViewController____lazy_storage___moveDataSource);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR___ICMoveViewController____lazy_storage___moveDataSource);
  }
  else
  {
    v4 = v0;
    v5 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView, (uint64_t (*)(uint64_t))sub_1003394E8);
    v6 = *(_QWORD *)(v4 + OBJC_IVAR___ICMoveViewController_sourceObjectIds);
    objc_allocWithZone((Class)type metadata accessor for MoveDataSource(0));
    swift_bridgeObjectRetain(v6);
    v7 = sub_1002F22A0(v5, v6);
    v8 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v7;
    v3 = v7;

    v2 = 0;
  }
  v9 = v2;
  return v3;
}

id sub_100339470()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR___ICMoveViewController____lazy_storage___folderCreationController;
  v2 = *(void **)(v0 + OBJC_IVAR___ICMoveViewController____lazy_storage___folderCreationController);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICMoveViewController____lazy_storage___folderCreationController);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)ICFolderCreationController), "initWithViewController:creationApproach:", v0, 1);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1003394E8(void *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  _QWORD v11[4];
  __int128 v12;
  __int128 v13;

  v2 = objc_msgSend(a1, "legacyViewContext");
  v3 = objc_msgSend(a1, "modernViewContext");
  v4 = objc_msgSend(a1, "viewControllerManager");
  if (v4)
  {
    v5 = v4;
    *((_QWORD *)&v13 + 1) = sub_1000163BC(0, &qword_1005D1928, &off_10054E2D0);
    *(_QWORD *)&v12 = v5;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  v11[3] = sub_100012E18(&qword_1005CF190);
  v11[0] = swift_allocObject(&unk_100569960, 48, 7);
  sub_1001F83A4((uint64_t)&v12, v11[0] + 16);
  v6 = (void *)sub_10016A2E0((uint64_t)v11);
  sub_1000153C0(v11);
  sub_1000160C8((uint64_t)&v12);
  v7 = objc_allocWithZone((Class)ICFolderListCollectionView);
  v8 = a1;
  v9 = objc_msgSend(v7, "initWithPresentingViewController:legacyManagedObjectContext:modernManagedObjectContext:viewControllerManager:", v8, v2, v3, v6, v11[0]);

  objc_msgSend(v9, "setHasGroupInset:", 1);
  objc_msgSend(v9, "setHasSwipeActions:", 0);
  objc_msgSend(v9, "setShouldShowMoveHeader:", objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision"));
  objc_msgSend(v9, "setDragDelegate:", 0);
  objc_msgSend(v9, "setDragInteractionEnabled:", 0);
  objc_msgSend(v9, "setSpringLoaded:", 0);
  return v9;
}

uint64_t sub_100339800(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v4;
  id v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(id);
  uint64_t v20;
  id v21;
  id v23;
  _OWORD v24[2];
  _BYTE v25[24];
  uint64_t v26;

  v2 = v1;
  v4 = sub_1003393C0();
  v5 = objc_msgSend(v4, "collectionViewDiffableDataSource");

  isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "itemIdentifierForIndexPath:", isa);

  if (v7)
  {
    _bridgeAnyObjectToAny(_:)(v24, v7);
    swift_unknownObjectRelease(v7, v8);
  }
  else
  {
    memset(v24, 0, sizeof(v24));
  }
  sub_1001CBB70((uint64_t)v24, (uint64_t)v25);
  if (v26)
  {
    sub_1001F83A4((uint64_t)v25, (uint64_t)v24);
    v9 = sub_1000163BC(0, &qword_1005D9890, ICButtonItemIdentifier_ptr);
    if (swift_dynamicCast(&v23, v24, (char *)&type metadata for Any + 8, v9, 0))
    {
      v10 = v23;
      if (!objc_msgSend(v23, "type"))
      {
        objc_msgSend(a1, "ic_deselectAllItemsAnimated:", 1);
        v11 = objc_msgSend(v10, "parentIdentifier");
        if (v11)
        {
          v12 = v11;
          v13 = objc_opt_self(ICFolderListSectionIdentifier);
          v15 = (id)swift_dynamicCastObjCClass(v12, v13);
          if (!v15)
            swift_unknownObjectRelease(v12, v14);
        }
        else
        {
          v15 = 0;
        }
        sub_100339AC8(v15);

        goto LABEL_21;
      }
      if (objc_msgSend(v10, "type") == (id)1)
      {
        objc_msgSend(a1, "ic_deselectAllItemsAnimated:", 1);
        sub_100339C70();

LABEL_22:
        sub_1000153C0(v24);
        return sub_1000160C8((uint64_t)v25);
      }

    }
    v16 = sub_1000163BC(0, &qword_1005D1650, ICVirtualSmartFolderItemIdentifier_ptr);
    if (swift_dynamicCast(&v23, v24, (char *)&type metadata for Any + 8, v16, 0)
      || (v17 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr),
          swift_dynamicCast(&v23, v24, (char *)&type metadata for Any + 8, v17, 0)))
    {
      v15 = v23;
      v18 = v2 + OBJC_IVAR___ICMoveViewController_completionHandler;
      v19 = *(void (**)(id))(v2 + OBJC_IVAR___ICMoveViewController_completionHandler);
      if (v19)
      {
        v20 = *(_QWORD *)(v18 + 8);
        sub_100166B74((uint64_t)v19, v20);
        v21 = v15;
        v19(v15);

        sub_100012C50((uint64_t)v19, v20);
      }
LABEL_21:

      goto LABEL_22;
    }
    sub_1000153C0(v24);
  }
  objc_msgSend(a1, "ic_deselectAllItemsAnimated:", 1);
  return sub_1000160C8((uint64_t)v25);
}

void sub_100339AC8(id a1)
{
  uint64_t v1;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  void *v10;
  __objc2_prot *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v3 = sub_100339470();
  if (a1)
  {
    a1 = objc_msgSend(a1, "accountObjectID");
    v4 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView, (uint64_t (*)(uint64_t))sub_1003394E8);
    v5 = objc_msgSend(v4, "modernManagedObjectContext");

    if (a1)
    {
      v6 = objc_msgSend(v5, "objectWithID:", a1);

      v11 = &OBJC_PROTOCOL___ICNoteContainer;
      a1 = (id)swift_dynamicCastObjCProtocolConditional(v6, 1, &v11);
      if (!a1)

    }
    else
    {

    }
  }
  objc_msgSend(v3, "setNoteContainer:", a1);

  swift_unknownObjectRelease(a1, v7);
  v8 = sub_100339470();
  v9 = swift_allocObject(&unk_100569910, 24, 7);
  swift_unknownObjectWeakInit(v9 + 16, v1);
  aBlock[4] = sub_10033A478;
  v13 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001FD5D4;
  aBlock[3] = &unk_100569928;
  v10 = _Block_copy(aBlock);
  objc_msgSend(v8, "promptToAddFolderAllowingSmartFolder:withCompletionHandler:", 0, v10, swift_release(v13).n128_f64[0]);
  _Block_release(v10);

}

void sub_100339C70()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  void (*v7)(id);
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;

  v1 = (void *)objc_opt_self(ICNoteContext);
  objc_msgSend(v1, "enableLocalAccount");
  v2 = objc_msgSend(v1, "sharedContext");
  objc_msgSend(v2, "addOrDeleteLocalAccountIfNecessary");

  v3 = objc_msgSend(v1, "sharedContext");
  objc_msgSend(v3, "save");

  v4 = (void *)objc_opt_self(ICAccount);
  v5 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView, (uint64_t (*)(uint64_t))sub_1003394E8);
  v6 = objc_msgSend(v5, "modernManagedObjectContext");

  v12 = objc_msgSend(v4, "localAccountInContext:", v6);
  v7 = *(void (**)(id))(v0 + OBJC_IVAR___ICMoveViewController_completionHandler);
  if (v7)
  {
    v8 = *(_QWORD *)(v0 + OBJC_IVAR___ICMoveViewController_completionHandler + 8);
    swift_retain(v8);
    if (v12)
    {
      v9 = objc_msgSend(v12, "defaultFolder");
      v10 = objc_msgSend(v9, "objectID");

    }
    else
    {
      v10 = 0;
    }
    v7(v10);

    sub_100012C50((uint64_t)v7, v8);
    swift_unknownObjectRelease(v10, v11);
  }
  else
  {

  }
}

id sub_100339EBC(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;

  v3 = *a1;
  v4 = *(void **)(v2 + *a1);
  if (v4)
  {
    v5 = *(id *)(v2 + *a1);
  }
  else
  {
    v6 = (void *)a2(v2);
    v7 = *(void **)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;

    v4 = 0;
  }
  v8 = v4;
  return v5;
}

char *sub_100339F18(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  char *v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;

  v2 = type metadata accessor for MoveHeaderView();
  v3 = (char *)objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v2)), "init");
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v3, "setPreservesSuperviewLayoutMargins:", 1);
  v4 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView, (uint64_t (*)(uint64_t))sub_1003394E8);
  v5 = objc_msgSend(v4, "modernManagedObjectContext");

  v6 = OBJC_IVAR___ICMoveHeaderView_modernContext;
  v7 = *(void **)&v3[OBJC_IVAR___ICMoveHeaderView_modernContext];
  *(_QWORD *)&v3[OBJC_IVAR___ICMoveHeaderView_modernContext] = v5;
  v8 = v5;

  v9 = (char *)sub_1002E4708();
  v10 = *(void **)&v3[v6];
  v11 = *(void **)&v9[OBJC_IVAR___ICMovePreviewView_modernContext];
  *(_QWORD *)&v9[OBJC_IVAR___ICMovePreviewView_modernContext] = v10;
  v12 = v10;

  v13 = sub_100339EBC(&OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView, (uint64_t (*)(uint64_t))sub_1003394E8);
  v14 = objc_msgSend(v13, "legacyManagedObjectContext");

  v15 = OBJC_IVAR___ICMoveHeaderView_htmlContext;
  v16 = *(void **)&v3[OBJC_IVAR___ICMoveHeaderView_htmlContext];
  *(_QWORD *)&v3[OBJC_IVAR___ICMoveHeaderView_htmlContext] = v14;
  v17 = v14;

  v18 = (char *)sub_1002E4708();
  v19 = *(void **)&v3[v15];
  v20 = *(void **)&v18[OBJC_IVAR___ICMovePreviewView_htmlContext];
  *(_QWORD *)&v18[OBJC_IVAR___ICMovePreviewView_htmlContext] = v19;
  v21 = v19;

  v22 = *(_QWORD *)(a1 + OBJC_IVAR___ICMoveViewController_sourceObjectIds);
  v23 = *(_QWORD *)&v3[OBJC_IVAR___ICMoveHeaderView_objectIds];
  *(_QWORD *)&v3[OBJC_IVAR___ICMoveHeaderView_objectIds] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  sub_1002E50D0();
  return v3;
}

void sub_10033A0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *Strong;
  void *v4;
  void (*v5)(_QWORD);
  uint64_t v6;
  _BYTE v7[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(void (**)(_QWORD))&Strong[OBJC_IVAR___ICMoveViewController_completionHandler];
    if (v5)
    {
      v6 = *(_QWORD *)&Strong[OBJC_IVAR___ICMoveViewController_completionHandler + 8];
      sub_100166B74(*(_QWORD *)&Strong[OBJC_IVAR___ICMoveViewController_completionHandler], v6);

      v5(0);
      sub_100012C50((uint64_t)v5, v6);
    }
    else
    {

    }
  }
}

void sub_10033A174(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  void (*v6)(void);
  uint64_t v7;
  id v8;
  id v9;
  _BYTE v10[24];

  if (a1)
  {
    v3 = a2 + 16;
    swift_beginAccess(a2 + 16, v10, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v3);
    if (Strong)
    {
      v5 = (void *)Strong;
      v6 = *(void (**)(void))(Strong + OBJC_IVAR___ICMoveViewController_completionHandler);
      if (v6)
      {
        v7 = *(_QWORD *)(Strong + OBJC_IVAR___ICMoveViewController_completionHandler + 8);
        v8 = a1;
        sub_100166B74((uint64_t)v6, v7);

        v9 = objc_msgSend(v8, "objectID");
        v6();
        sub_100012C50((uint64_t)v6, v7);

        v5 = v8;
      }

    }
  }
}

uint64_t type metadata accessor for MoveViewController()
{
  return objc_opt_self(ICMoveViewController);
}

id sub_10033A3A4(uint64_t a1, uint64_t a2)
{
  char *v2;
  objc_class *ObjectType;
  char *v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  v6 = &v2[OBJC_IVAR___ICMoveViewController_completionHandler];
  *(_QWORD *)v6 = 0;
  *((_QWORD *)v6 + 1) = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICMoveViewController____lazy_storage___moveDataSource] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICMoveViewController____lazy_storage___folderCreationController] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICMoveViewController____lazy_storage___headerView] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICMoveViewController____lazy_storage___dismissAction] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICMoveViewController_sourceObjectIds] = a2;
  v8.receiver = v2;
  v8.super_class = ObjectType;
  return objc_msgSendSuper2(&v8, "initWithViewMode:viewControllerManager:viewControllerType:", 0, a1, 1);
}

uint64_t sub_10033A454()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10033A478(void *a1)
{
  uint64_t v1;

  sub_10033A174(a1, v1);
}

uint64_t sub_10033A480()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 40))
    sub_1000153C0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 48, 7);
}

void sub_10033A4AC(uint64_t a1)
{
  uint64_t v1;

  sub_10033A0E0(a1, v1);
}

void sub_10033A4B4()
{
  char *v0;
  char *v1;

  v1 = &v0[OBJC_IVAR___ICMoveViewController_completionHandler];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR___ICMoveViewController____lazy_storage___moveDataSource] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___ICMoveViewController____lazy_storage___folderCreationController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___ICMoveViewController____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___ICMoveViewController____lazy_storage___headerView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___ICMoveViewController____lazy_storage___dismissAction] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001004796E0, "MobileNotes/MoveViewController.swift", 36, 2, 29, 0);
  __break(1u);
}

uint64_t sub_10033A55C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033A588(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100463540, a2);
  v4 = swift_getKeyPath(&unk_100463568, v3);
  static Published.subscript.getter(&v6);
  swift_release(KeyPath);
  swift_release(v4);
  return v6;
}

id sub_10033A5F8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NoteDebugStatusController(0)), "init");
  qword_100601D48 = (uint64_t)result;
  return result;
}

uint64_t sub_10033A754@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100463540, a1);
  v5 = swift_getKeyPath(&unk_100463568, v4);
  static Published.subscript.getter(&v7);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10033A7D0(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100463540, a2);
  v6 = swift_getKeyPath(&unk_100463568, v5);
  v9 = v2;
  v7 = v2;
  return static Published.subscript.setter(&v9, v3, KeyPath, v6);
}

char *sub_10033A840()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  id v19;
  void *v20;
  char *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t KeyPath;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  objc_super v36;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = sub_100012E18(&qword_1005D9948);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v32 - v7;
  v9 = sub_100012E18(&qword_1005D9950);
  v32 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005D9958);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = &v1[OBJC_IVAR____TtC11MobileNotes25NoteDebugStatusController__currentNote];
  v35[0] = 0;
  v17 = v1;
  v18 = sub_100012E18(&qword_1005D1BB8);
  Published.init(initialValue:)(v35, v18);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v15, v12);

  v36.receiver = v17;
  v36.super_class = ObjectType;
  v19 = objc_msgSendSuper2(&v36, "init");
  v20 = (void *)objc_opt_self(ICNoteContext);
  v21 = (char *)v19;
  v22 = objc_msgSend(v20, "sharedContext");
  if (v22)
  {
    v24 = v22;
    KeyPath = swift_getKeyPath(&unk_100463518, v23);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 4);

    swift_release(KeyPath);
    v26 = &v21[OBJC_IVAR____TtC11MobileNotes25NoteDebugStatusController__currentNote];
    swift_beginAccess(&v21[OBJC_IVAR____TtC11MobileNotes25NoteDebugStatusController__currentNote], v35, 33, 0);
    Published.projectedValue.getter(v12);
    swift_endAccess(v35);
    v27 = sub_10033ACA8();
    Publisher<>.assign(to:)(v8, v9, v27);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v9);
    v29 = v33;
    v28 = v34;
    (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v6, v8, v34);
    swift_beginAccess(v26, v35, 33, 0);
    Published.projectedValue.setter(v6, v12);
    v30 = swift_endAccess(v35);
    (*(void (**)(char *, uint64_t, __n128))(v29 + 8))(v8, v28, v30);
  }

  return v21;
}

uint64_t sub_10033AB48()
{
  return type metadata accessor for NoteDebugStatusController(0);
}

uint64_t type metadata accessor for NoteDebugStatusController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D9930;
  if (!qword_1005D9930)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NoteDebugStatusController);
  return result;
}

void sub_10033AB8C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_10033ABF8(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_10033ABF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D9940)
  {
    v2 = sub_10001537C(&qword_1005D1BB8);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D9940);
  }
}

const char *sub_10033AC50()
{
  return "currentNote";
}

id sub_10033AC5C@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "currentNote");
  *a2 = result;
  return result;
}

id sub_10033AC94(_QWORD *a1, id *a2)
{
  return objc_msgSend(*a2, "setCurrentNote:", *a1);
}

unint64_t sub_10033ACA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D9960;
  if (!qword_1005D9960)
  {
    v1 = sub_10001537C(&qword_1005D9950);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D9960);
  }
  return result;
}

unint64_t sub_10033AD00()
{
  unint64_t result;

  result = qword_1005D9980;
  if (!qword_1005D9980)
  {
    result = swift_getWitnessTable(&unk_10046360C, &type metadata for ICFolderArchiveModel.Sorting);
    atomic_store(result, (unint64_t *)&qword_1005D9980);
  }
  return result;
}

void *sub_10033AD44(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t ObjectType;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  NSString v30;
  unint64_t v31;
  id v32;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v38 = a5;
  v7 = v6;
  v37 = a4;
  v36 = a3;
  v35 = type metadata accessor for ICQueryType(0);
  v11 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ICQueryEntity(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100012E18(&qword_1005D9A08);
  __chkstk_darwin(v18);
  v20 = (char *)&v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType(a1);
  v22 = v39;
  v23 = (void *)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, double))(a2 + 24))(v7[1], v7[2], v36 & 0x101, v37, v38, ObjectType, a2, a6);
  if (!v22)
  {
    v39 = 0;
    v24 = v17;
    v38 = type metadata accessor for ICFolderArchiveModel(0);
    sub_10033F340((uint64_t)v7 + *(int *)(v38 + 44), (uint64_t)v20);
    v25 = type metadata accessor for ICFolderArchiveModel.Query(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v20, 1, v25) == 1)
    {
      sub_100012DDC((uint64_t)v20, &qword_1005D9A08);
      v26 = 0;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v24, v20, v14);
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v13, &v20[*(int *)(v25 + 20)], v35);
      v27 = objc_allocWithZone((Class)type metadata accessor for ICQuery(0));
      v26 = (void *)ICQuery.init(entity:type:)(v24, v13);
      sub_100145264((uint64_t)v20, type metadata accessor for ICFolderArchiveModel.Query);
    }
    objc_msgSend(v23, "setSmartFolderQueryObjC:", v26);

    if (objc_msgSend(v23, "isRenamable"))
    {
      v28 = v7[9];
      if (v28)
        v29 = v7[9];
      else
        v29 = 0xE000000000000000;
      swift_bridgeObjectRetain(v28);
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
      objc_msgSend(v23, "setTitle:", v30);

    }
    if (objc_msgSend(v23, "supportsCustomNoteSortType"))
    {
      v31 = *(unsigned __int16 *)((char *)v7 + *(int *)(v38 + 48));
      if ((v31 & 0xFF00) == 0x200)
        v32 = 0;
      else
        v32 = objc_msgSend((id)objc_opt_self(ICFolderCustomNoteSortType), "folderNoteSortTypeWithOrder:direction:", qword_100463FB8[(char)v31], (v31 >> 8) & 1);
      objc_msgSend(v23, "setCustomNoteSortType:", v32);

    }
  }
  return v23;
}

void sub_10033B068(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t i;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;

  v5 = *(_QWORD *)(v2 + *(int *)(type metadata accessor for ICFolderArchiveModel(0) + 52));
  if (!v5)
    return;
  swift_bridgeObjectRetain(a2);
  v6 = (uint64_t)sub_1001FF26C(v5, a2);
  swift_bridgeObjectRelease(a2);
  v7 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  objc_msgSend(v7, "removeAllObjects");

  v8 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  v9 = v8;
  if ((unint64_t)v6 >> 62)
  {
    if (v6 < 0)
      v15 = v6;
    else
      v15 = v6 & 0xFFFFFFFFFFFFFF8;
    v16 = v8;
    swift_bridgeObjectRetain(v6);
    v10 = _CocoaArrayWrapper.endIndex.getter(v15);
    if (v10)
      goto LABEL_4;
LABEL_15:

    swift_bridgeObjectRelease_n(v6, 2);
    objc_msgSend(a1, "setSubFolderOrderMergeableDataDirty:", 1);
    objc_msgSend(a1, "saveSubFolderMergeableDataIfNeeded");
    v17 = objc_msgSend(a1, "subFolderIdentifiersOrderedSetDocument");
    return;
  }
  v10 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v8;
  swift_bridgeObjectRetain(v6);
  if (!v10)
    goto LABEL_15;
LABEL_4:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v6 & 0xC000000000000001) != 0)
        v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v6);
      else
        v13 = *(id *)(v6 + 8 * i + 32);
      v14 = v13;
      objc_msgSend(v9, "addObject:", v13);

    }
    goto LABEL_15;
  }
  __break(1u);
}

uint64_t sub_10033B230(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t IsAlexandriaDemoModeEnabled;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v40[3];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;

  v3 = v2;
  v5 = sub_100012E18(&qword_1005D4DF8);
  __chkstk_darwin(v5);
  v45 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D4E00);
  __chkstk_darwin(v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PersistedActivityEvent(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v42 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = _s8ActivityVMa(0);
  v13 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ICFolderArchiveModel(0) + 56));
  if (!v16)
    return 0;
  v48 = (unint64_t)_swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    goto LABEL_13;
  v40[1] = a1;
  v40[2] = v3;
  v18 = v16 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v44 = *(_QWORD *)(v13 + 72);
  v40[0] = v16;
  swift_bridgeObjectRetain(v16);
  v47 = v15;
  do
  {
    v46 = v17;
    v33 = sub_100145220(v18, (uint64_t)v15, _s8ActivityVMa);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v33);
    ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    sub_100220CC8((uint64_t)v9, 0.0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100012DDC((uint64_t)v9, &qword_1005D4E00);
      v43 = sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
      v19 = &v15[*(int *)(v41 + 44)];
      v20 = v10;
      v22 = *(_QWORD *)v19;
      v21 = *((_QWORD *)v19 + 1);
      v23 = v11;
      v24 = v9;
      v25 = v45;
      sub_100221268(v45, 0.0);
      v26 = v22;
      v10 = v20;
      v27 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(forData:fallback:)(v26, v21, v25);
      v28 = v25;
      v9 = v24;
      v11 = v23;
      v15 = v47;
      sub_100012DDC(v28, &qword_1005D4DF8);
      v29 = sub_100145264((uint64_t)v15, _s8ActivityVMa);
    }
    else
    {
      v35 = v42;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v9, v10);
      sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
      v36 = v45;
      sub_100221268(v45, 0.0);
      v27 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(for:fallback:)(v35, v36);
      sub_100012DDC(v36, &qword_1005D4DF8);
      v37 = v35;
      v15 = v47;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v10);
      v29 = sub_100145264((uint64_t)v15, _s8ActivityVMa);
      if (!v27)
        goto LABEL_8;
    }
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v31 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v30 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v31 >= v30 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
    v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v27);
    specialized Array._endMutation()(v32);
LABEL_8:
    v18 += v44;
    v17 = v46 - 1;
  }
  while (v46 != 1);
  swift_bridgeObjectRelease(v40[0]);
LABEL_13:
  v38 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.setter();
  return ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter(v38);
}

void sub_10033B604(id a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  id v29;
  void *v30;
  unsigned __int8 v31;
  __int16 v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  unsigned __int8 v48;
  char v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  id v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  id v66;
  void *v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  id v84;
  uint64_t v85;
  uint64_t *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;

  v86 = a2;
  v5 = _s8ActivityVMa(0);
  v88 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v83 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D9A08);
  __chkstk_darwin(v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_BYTE *)a3 = 2;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_BYTE *)(a3 + 56) = 2;
  *(_BYTE *)(a3 + 80) = 3;
  v10 = (int *)type metadata accessor for ICFolderArchiveModel(0);
  v11 = a3 + v10[11];
  v12 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v14 = v10[12];
  *(_WORD *)(a3 + v14) = 512;
  v85 = v10[13];
  *(_QWORD *)(a3 + v85) = 0;
  v15 = v10[14];
  v87 = (_QWORD *)a3;
  v82 = v15;
  *(_QWORD *)(a3 + v15) = 0;
  v16 = objc_msgSend(a1, "identifier");
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0xE000000000000000;
  }
  v21 = v87;
  v87[1] = v18;
  v21[2] = v20;
  v22 = objc_msgSend(a1, "title");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v21[8] = v23;
  v21[9] = v25;
  v26 = objc_msgSend(a1, "smartFolderQueryObjC");
  if (v26)
  {
    v27 = v26;
    v28 = dispatch thunk of ICQuery.entity.getter();
    dispatch thunk of ICQuery.type.getter(v28);

    v13((uint64_t)v9, 0, 1, v12);
  }
  else
  {
    v13((uint64_t)v9, 1, 1, v12);
  }
  sub_10033F2B4((uint64_t)v9, v11);
  v29 = objc_msgSend(a1, "customNoteSortType");
  if (!v29)
    goto LABEL_11;
  v30 = v29;
  if (objc_msgSend(v29, "isDefault")
    || (v31 = sub_10033E054((uint64_t)objc_msgSend(v30, "order")), v31 == 3))
  {

LABEL_11:
    v32 = 512;
    goto LABEL_12;
  }
  v48 = v31;
  v49 = sub_10033E1E4((uint64_t)objc_msgSend(v30, "direction"));

  if (v49 == 2)
    goto LABEL_11;
  v32 = v48 | ((v49 & 1) << 8);
LABEL_12:
  *(_WORD *)((char *)v87 + v14) = v32;
  v33 = objc_msgSend(a1, "subFolderIdentifiersOrderedSet");
  v34 = objc_msgSend(v33, "allObjects");

  v35 = sub_1000163BC(0, (unint64_t *)&qword_1005CFE78, NSString_ptr);
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

  if ((unint64_t)v36 >> 62)
  {
    if (v36 < 0)
      v50 = v36;
    else
      v50 = v36 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v36);
    v37 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v36);
    v84 = a1;
    if (v37)
      goto LABEL_14;
LABEL_29:
    swift_bridgeObjectRelease(v36);
    v39 = _swiftEmptyArrayStorage;
    goto LABEL_30;
  }
  v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  v84 = a1;
  if (!v37)
    goto LABEL_29;
LABEL_14:
  v89 = _swiftEmptyArrayStorage;
  sub_100137028(0, v37 & ~(v37 >> 63), 0);
  if (v37 < 0)
  {
    __break(1u);
    goto LABEL_45;
  }
  v38 = 0;
  v39 = v89;
  do
  {
    if ((v36 & 0xC000000000000001) != 0)
      v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
    else
      v40 = *(id *)(v36 + 8 * v38 + 32);
    v41 = v40;
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v44 = v43;

    v89 = v39;
    v46 = v39[2];
    v45 = v39[3];
    if (v46 >= v45 >> 1)
    {
      sub_100137028(v45 > 1, v46 + 1, 1);
      v39 = v89;
    }
    ++v38;
    v39[2] = v46 + 1;
    v47 = &v39[2 * v46];
    v47[4] = v42;
    v47[5] = v44;
  }
  while (v37 != v38);
  swift_bridgeObjectRelease(v36);
LABEL_30:
  v51 = v87;
  v52 = v85;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v87 + v85));
  *(_QWORD *)((char *)v51 + v52) = v39;
  v53 = v86;
  if ((v86[6] & 1) == 0)
  {
    sub_1001FFDEC(v86);
    a1 = v84;
    if ((*((_BYTE *)v53 + 51) & 1) == 0)
    {
LABEL_32:

      return;
    }
    goto LABEL_51;
  }
  a1 = v84;
  v54 = v84;
  v36 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter(v54);

  if ((unint64_t)v36 >> 62)
  {
LABEL_45:
    if (v36 < 0)
      v62 = v36;
    else
      v62 = v36 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v36);
    v55 = _CocoaArrayWrapper.endIndex.getter(v62);
    swift_bridgeObjectRelease(v36);
    v56 = (uint64_t)v83;
    if (v55)
      goto LABEL_35;
    goto LABEL_49;
  }
  v55 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  v56 = (uint64_t)v83;
  if (v55)
  {
LABEL_35:
    v89 = _swiftEmptyArrayStorage;
    sub_1001372E4(0, v55 & ~(v55 >> 63), 0);
    if (v55 < 0)
    {
      __break(1u);
      return;
    }
    v57 = 0;
    v58 = v89;
    do
    {
      if ((v36 & 0xC000000000000001) != 0)
        v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v57, v36);
      else
        v59 = *(id *)(v36 + 8 * v57 + 32);
      sub_10021FE60(v59, v56);
      v89 = v58;
      v61 = v58[2];
      v60 = v58[3];
      if (v61 >= v60 >> 1)
      {
        sub_1001372E4(v60 > 1, v61 + 1, 1);
        v58 = v89;
      }
      ++v57;
      v58[2] = v61 + 1;
      sub_10033F2FC(v56, (uint64_t)v58+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(_QWORD *)(v88 + 72) * v61);
    }
    while (v55 != v57);
    swift_bridgeObjectRelease(v36);
    goto LABEL_50;
  }
LABEL_49:
  swift_bridgeObjectRelease(v36);
  v58 = _swiftEmptyArrayStorage;
LABEL_50:
  v63 = v87;
  v64 = v82;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v87 + v82));
  v65 = v86;
  sub_1001FFDEC(v86);
  *(_QWORD *)((char *)v63 + v64) = v58;
  if ((*((_BYTE *)v65 + 51) & 1) == 0)
    goto LABEL_32;
LABEL_51:
  v66 = objc_msgSend(a1, "parent");
  if (v66
    && (v67 = v66, v68 = objc_msgSend(v66, "identifier"), v67, v68)
    || (v69 = objc_msgSend(a1, "account"),
        v68 = objc_msgSend(v69, "identifier"),
        v69,
        v68))
  {
    v70 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    v72 = v71;

  }
  else
  {
    v70 = 0;
    v72 = 0;
  }
  v73 = v87;
  swift_bridgeObjectRelease(v87[4]);
  v73[3] = v70;
  v73[4] = v72;
  v74 = objc_msgSend(a1, "parent");
  if (v74)
  {
    v75 = v74;
    v76 = objc_msgSend(v74, "title");
  }
  else
  {
    v75 = objc_msgSend(a1, "account");
    v76 = objc_msgSend(v75, "localizedName");
  }
  v77 = v76;

  v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
  v80 = v79;

  v81 = v87;
  swift_bridgeObjectRelease(v87[6]);
  v81[5] = v78;
  v81[6] = v80;
  *((_BYTE *)v81 + 56) = objc_msgSend(a1, "markedForDeletion");
  LOBYTE(v78) = sub_10033E2E0((unsigned __int16)objc_msgSend(a1, "folderType"));

  *((_BYTE *)v81 + 80) = v78;
}

uint64_t sub_10033BD68()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005D9968);
  sub_10012A0B0(v0, (uint64_t)qword_1005D9968);
  return static Logger.archiving.getter();
}

uint64_t sub_10033BDB0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10033BDF0 + 4 * byte_100463590[a1]))(0x6E65644965707974, 0xEE00726569666974);
}

uint64_t sub_10033BDF0()
{
  return 0x696669746E656469;
}

unint64_t sub_10033BE0C()
{
  return 0xD000000000000010;
}

uint64_t sub_10033BE28()
{
  return 0x6954746E65726170;
}

unint64_t sub_10033BE48()
{
  return 0xD000000000000013;
}

uint64_t sub_10033BEB8()
{
  return 0x6974697669746361;
}

uint64_t sub_10033BED8()
{
  return 0x74726F5365746F6ELL;
}

uint64_t sub_10033BEF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D9BF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_10034096C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.CodingKeys, &type metadata for ICFolderArchiveModel.CodingKeys, v11, v9, v10);
  LOBYTE(v33) = *(_BYTE *)v3;
  v34 = 0;
  v12 = sub_1001F62D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v33, &v34, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    LOBYTE(v33) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v33, v5);
    v15 = *(_QWORD *)(v3 + 24);
    v16 = *(_QWORD *)(v3 + 32);
    LOBYTE(v33) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v33, v5);
    v17 = *(_QWORD *)(v3 + 40);
    v18 = *(_QWORD *)(v3 + 48);
    LOBYTE(v33) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v33, v5);
    v19 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v33) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v33, v5);
    v20 = *(_QWORD *)(v3 + 64);
    v21 = *(_QWORD *)(v3 + 72);
    LOBYTE(v33) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v33, v5);
    LOBYTE(v33) = *(_BYTE *)(v3 + 80);
    v34 = 6;
    v22 = sub_1003409B0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, &type metadata for ICFolderArchiveModel.Types, v22);
    v23 = (int *)type metadata accessor for ICFolderArchiveModel(0);
    v24 = v3 + v23[11];
    LOBYTE(v33) = 7;
    v25 = type metadata accessor for ICFolderArchiveModel.Query(0);
    v26 = sub_100019C6C(&qword_1005D9C10, type metadata accessor for ICFolderArchiveModel.Query, (uint64_t)&unk_1004637C8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v24, &v33, v5, v25, v26);
    LOWORD(v33) = *(_WORD *)(v3 + v23[12]);
    v34 = 8;
    v27 = sub_1003409F4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, &type metadata for ICFolderArchiveModel.Sorting, v27);
    v33 = *(_QWORD *)(v3 + v23[13]);
    v34 = 9;
    v28 = sub_100012E18(&qword_1005D39A8);
    v29 = sub_1001F673C(&qword_1005D4348, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, v28, v29);
    v33 = *(_QWORD *)(v3 + v23[14]);
    v34 = 10;
    v30 = sub_100012E18(&qword_1005D9C20);
    v31 = sub_100340A7C(&qword_1005D9C28, &qword_1005D9C30, (uint64_t)&unk_10045C860, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v33, &v34, v5, v30, v31);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10033C28C(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;

  v43 = a2;
  v3 = sub_100012E18(&qword_1005D9A08);
  __chkstk_darwin(v3);
  v44 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = sub_100012E18(&qword_1005D9C38);
  v5 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for ICFolderArchiveModel(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v11 = 2;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v11[56] = 2;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  v11[80] = 3;
  v12 = (uint64_t)&v11[*(int *)(v9 + 44)];
  v13 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v50 = v12;
  v14(v12, 1, 1, v13);
  v15 = v8[12];
  *(_WORD *)&v11[v15] = 512;
  v49 = v8[13];
  *(_QWORD *)&v11[v49] = 0;
  v16 = v8[14];
  v46 = a1;
  v47 = v16;
  *(_QWORD *)&v11[v16] = 0;
  v17 = a1[3];
  v18 = a1[4];
  sub_10012D19C(a1, v17);
  v19 = sub_10034096C();
  v20 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.CodingKeys, &type metadata for ICFolderArchiveModel.CodingKeys, v19, v17, v18);
  if (v20)
  {
    sub_1000153C0(v46);
    v24 = v50;
    v25 = v47;
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 4));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 6));
    swift_bridgeObjectRelease(*((_QWORD *)v11 + 9));
    sub_100012DDC(v24, &qword_1005D9A08);
    swift_bridgeObjectRelease(*(_QWORD *)&v11[v49]);
    swift_bridgeObjectRelease(*(_QWORD *)&v11[v25]);
  }
  else
  {
    v21 = (uint64_t)v44;
    v48 = v5;
    v52 = 0;
    v22 = sub_1001F6580();
    v23 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v51, &type metadata for ICArchiveModels, &v52, v45, &type metadata for ICArchiveModels, v22);
    *v11 = v51;
    LOBYTE(v51) = 1;
    *((_QWORD *)v11 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v51, v23);
    *((_QWORD *)v11 + 2) = v26;
    LOBYTE(v51) = 2;
    *((_QWORD *)v11 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v23);
    *((_QWORD *)v11 + 4) = v27;
    LOBYTE(v51) = 3;
    *((_QWORD *)v11 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v23);
    *((_QWORD *)v11 + 6) = v28;
    LOBYTE(v51) = 4;
    v11[56] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v23);
    LOBYTE(v51) = 5;
    *((_QWORD *)v11 + 8) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v23);
    *((_QWORD *)v11 + 9) = v29;
    v52 = 6;
    v30 = sub_100340A38();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICFolderArchiveModel.Types, &v52, v23, &type metadata for ICFolderArchiveModel.Types, v30);
    v11[80] = v51;
    LOBYTE(v51) = 7;
    v31 = sub_100019C6C(&qword_1005D9988, type metadata accessor for ICFolderArchiveModel.Query, (uint64_t)&unk_100463674);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v13, &v51, v23, v13, v31);
    sub_10033F2B4(v21, v50);
    v52 = 8;
    v32 = sub_10033AD00();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICFolderArchiveModel.Sorting, &v52, v23, &type metadata for ICFolderArchiveModel.Sorting, v32);
    *(_WORD *)&v11[v15] = v51;
    v33 = sub_100012E18(&qword_1005D39A8);
    v52 = 9;
    v34 = sub_1001F673C(&qword_1005D43B0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &v52, v23, v33, v34);
    v35 = v51;
    v36 = v49;
    swift_bridgeObjectRelease(*(_QWORD *)&v11[v49]);
    *(_QWORD *)&v11[v36] = v35;
    v37 = sub_100012E18(&qword_1005D9C20);
    v52 = 10;
    v38 = sub_100340A7C(&qword_1005D9C48, &qword_1005D9C50, (uint64_t)&unk_10045C888, (uint64_t)&protocol conformance descriptor for <A> [A]);
    v39 = v45;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v52, v45, v37, v38);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v39);
    v40 = v51;
    v41 = v47;
    swift_bridgeObjectRelease(*(_QWORD *)&v11[v47]);
    *(_QWORD *)&v11[v41] = v40;
    sub_100145220((uint64_t)v11, v43, type metadata accessor for ICFolderArchiveModel);
    sub_1000153C0(v46);
    sub_100145264((uint64_t)v11, type metadata accessor for ICFolderArchiveModel);
  }
}

uint64_t sub_10033C844()
{
  unsigned __int8 *v0;

  return sub_10033BDB0(*v0);
}

uint64_t sub_10033C84C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10033E478(a1, a2);
  *a3 = result;
  return result;
}

void sub_10033C870(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_10033C87C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10034096C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033C8A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10034096C();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_10033C8CC(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10033C28C(a1, a2);
}

uint64_t sub_10033C8E0(_QWORD *a1)
{
  return sub_10033BEF8(a1);
}

uint64_t sub_10033C8F4(char *a1, unsigned __int8 *a2)
{
  return sub_100215B44(*a1, *a2);
}

Swift::Int sub_10033C900()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 0x4853415254;
  if (v1 != 1)
    v2 = 0x5452414D53;
  if (v1)
    v3 = v2;
  else
    v3 = 0x4C414D524F4ELL;
  if (v1)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10033C994(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 0x4853415254;
  if (*v1 != 1)
    v2 = 0x5452414D53;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x4C414D524F4ELL;
  if (*v1)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE600000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_10033CA04(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 0x4853415254;
  if (v2 != 1)
    v3 = 0x5452414D53;
  if (v2)
    v4 = v3;
  else
    v4 = 0x4C414D524F4ELL;
  if (v2)
    v5 = 0xE500000000000000;
  else
    v5 = 0xE600000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10033CA94@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100557020;
  result = sub_10033EBB4(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10033CAC8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0x4853415254;
  if (v2 != 1)
    v4 = 0x5452414D53;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x4C414D524F4ELL;
  if (!v5)
    v3 = 0xE500000000000000;
  *a1 = v6;
  a1[1] = v3;
}

void sub_10033CB1C(_QWORD *a1@<X8>)
{
  *a1 = &off_100555A30;
}

uint64_t sub_10033CB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100340EF8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10033CB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100340EF8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10033CBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2C5C(a1, a2, a3, a4, (uint64_t (*)(void))sub_100340F3C, (uint64_t (*)(void))sub_100340EF8);
}

uint64_t sub_10033CBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2CE8(a1, a2, a3, a4, (uint64_t (*)(void))sub_100340F3C, (uint64_t (*)(void))sub_100340EF8);
}

uint64_t sub_10033CBFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D9C58);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_10033E010();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.Query.CodingKeys, &type metadata for ICFolderArchiveModel.Query.CodingKeys, v11, v9, v10);
  v20 = 0;
  v12 = type metadata accessor for ICQueryEntity(0);
  v13 = sub_100019C6C(&qword_1005D9C60, (uint64_t (*)(uint64_t))&type metadata accessor for ICQueryEntity, (uint64_t)&protocol conformance descriptor for ICQueryEntity);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    v14 = v3 + *(int *)(type metadata accessor for ICFolderArchiveModel.Query(0) + 20);
    v19 = 1;
    v15 = type metadata accessor for ICQueryType(0);
    v16 = sub_100019C6C(&qword_1005D9C68, (uint64_t (*)(uint64_t))&type metadata accessor for ICQueryType, (uint64_t)&protocol conformance descriptor for ICQueryType);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10033CD80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v26 = a2;
  v28 = type metadata accessor for ICQueryType(0);
  v25 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for ICQueryEntity(0);
  v4 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v29 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = sub_100012E18(&qword_1005D9990);
  v6 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ICFolderArchiveModel.Query(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  sub_10012D19C(a1, v13);
  v14 = sub_10033E010();
  v31 = v8;
  v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.Query.CodingKeys, &type metadata for ICFolderArchiveModel.Query.CodingKeys, v14, v13, v12);
  if (v15)
    return sub_1000153C0(a1);
  v16 = v6;
  v17 = (uint64_t)v11;
  v18 = a1;
  v19 = v27;
  v20 = v28;
  v35 = 0;
  v21 = sub_100019C6C(&qword_1005D99A0, (uint64_t (*)(uint64_t))&type metadata accessor for ICQueryEntity, (uint64_t)&protocol conformance descriptor for ICQueryEntity);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v30, &v35, v32, v30, v21);
  v33 = v4;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 32))(v17, v29, v30);
  v34 = 1;
  v22 = sub_100019C6C(&qword_1005D99A8, (uint64_t (*)(uint64_t))&type metadata accessor for ICQueryType, (uint64_t)&protocol conformance descriptor for ICQueryType);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v20, &v34, v32, v20, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v31, v32);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v17 + *(int *)(v9 + 20), v19, v20);
  sub_100145220(v17, v26, type metadata accessor for ICFolderArchiveModel.Query);
  sub_1000153C0(v18);
  return sub_100145264(v17, type metadata accessor for ICFolderArchiveModel.Query);
}

uint64_t sub_10033D060()
{
  _BYTE *v0;

  if (*v0)
    return 1701869940;
  else
    return 0x797469746E65;
}

uint64_t sub_10033D090@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10033E910(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033D0B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10033E010();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033D0DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10033E010();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10033D104@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10033CD80(a1, a2);
}

uint64_t sub_10033D118(_QWORD *a1)
{
  return sub_10033CBFC(a1);
}

void sub_10033D12C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t, uint64_t);
  uint64_t *v19;
  uint64_t v20;
  id v21;
  void *v22;
  __n128 v23;
  uint64_t v24;
  _QWORD v25[2];

  v0 = type metadata accessor for ICQueryType(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (_QWORD *)((char *)v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = type metadata accessor for ICQueryEntity(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v25[1] = v8;
  sub_10012B334(v8, qword_100601D50);
  v25[0] = sub_10012A0B0(v8, (uint64_t)qword_100601D50);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for ICQueryEntity.note(_:), v4);
  v9 = swift_allocObject(&unk_1005699F8, 24, 7);
  v10 = sub_100012E18(&qword_1005D19A0);
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(unsigned __int8 *)(v1 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v10, v13 + 2 * v11, v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100454E90;
  v15 = (uint64_t *)(v14 + v13);
  v16 = swift_allocObject(&unk_100569A20, 17, 7);
  *(_BYTE *)(v16 + 16) = 1;
  *v15 = v16;
  v17 = enum case for ICQueryType.deleted(_:);
  v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v1 + 104);
  v18(v15, enum case for ICQueryType.deleted(_:), v0);
  v19 = (uint64_t *)((char *)v15 + v11);
  v20 = swift_allocObject(&unk_100569A20, 17, 7);
  *(_BYTE *)(v20 + 16) = 0;
  *v19 = v20;
  v18(v19, v17, v0);
  *(_QWORD *)(v9 + 16) = v14;
  *v3 = v9;
  v18(v3, enum case for ICQueryType.or(_:), v0);
  v21 = objc_allocWithZone((Class)type metadata accessor for ICQuery(0));
  v22 = (void *)ICQuery.init(entity:type:)(v7, v3);
  v24 = dispatch thunk of ICQuery.entity.getter(v23);
  dispatch thunk of ICQuery.type.getter(v24);

}

uint64_t sub_10033D34C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void *v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;

  v6 = type metadata accessor for String.Encoding(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter(v8);
  v11 = String.data(using:allowLossyConversion:)(v10, 0, a1, a2);
  v13 = v12;
  v14 = swift_bridgeObjectRelease(a2);
  (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, v6, v14);
  if (v13 >> 60 == 15)
  {
    v20 = type metadata accessor for ICFolderArchiveModel.Query(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a3, 1, 1, v20);
  }
  else
  {
    v15 = type metadata accessor for JSONDecoder(0);
    v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    v17 = JSONDecoder.init()(v16);
    v18 = type metadata accessor for ICQuery(0);
    v19 = sub_100019C6C(&qword_1005D99E0, (uint64_t (*)(uint64_t))&type metadata accessor for ICQuery, (uint64_t)&protocol conformance descriptor for ICQuery);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v26, v18, v11, v13, v18, v19);
    v21 = swift_release(v17);
    v22 = v26;
    dispatch thunk of ICQuery.entity.getter(v21);
    v23 = type metadata accessor for ICFolderArchiveModel.Query(0);
    dispatch thunk of ICQuery.type.getter(v23);

    sub_1001672D8(v11, v13);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a3, 0, 1, v23);
  }
}

uint64_t sub_10033D514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  if (qword_1005CECF0 != -1)
    swift_once(&qword_1005CECF0, sub_10033D12C);
  v4 = sub_10012A0B0(a1, (uint64_t)qword_100601D50);
  return sub_100145220(v4, a2, type metadata accessor for ICFolderArchiveModel.Query);
}

uint64_t sub_10033D580(uint64_t a1, uint64_t a2)
{
  return sub_10033F0AC(a1, a2);
}

uint64_t sub_10033D594(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100215CF0(*a1, *a2);
}

Swift::Int sub_10033D5A0()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xEB0000000054415FLL;
  v3 = 0x4445494649444F4DLL;
  if (v1 != 1)
  {
    v3 = 0x454C544954;
    v2 = 0xE500000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x5F44455441455243;
  if (v1)
    v5 = v2;
  else
    v5 = 0xEA00000000005441;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10033D648(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xEB0000000054415FLL;
  v3 = 0x4445494649444F4DLL;
  if (*v1 != 1)
  {
    v3 = 0x454C544954;
    v2 = 0xE500000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x5F44455441455243;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xEA00000000005441;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10033D6CC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xEB0000000054415FLL;
  v4 = 0x4445494649444F4DLL;
  if (v2 != 1)
  {
    v4 = 0x454C544954;
    v3 = 0xE500000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x5F44455441455243;
  if (v2)
    v6 = v3;
  else
    v6 = 0xEA00000000005441;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_10033D770@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  Swift::OpaquePointer v3;
  unint64_t result;

  v3._rawValue = &off_100557088;
  result = sub_10033EBB4(*a1, v3);
  *a2 = result;
  return result;
}

void sub_10033D7A4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEA00000000005441;
  v4 = 0xEB0000000054415FLL;
  v5 = 0x4445494649444F4DLL;
  if (v2 != 1)
  {
    v5 = 0x454C544954;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x5F44455441455243;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_10033D80C(_QWORD *a1@<X8>)
{
  *a1 = &off_1005559E0;
}

uint64_t sub_10033D81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10033EA70();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10033D878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10033EA70();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10033D8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2C5C(a1, a2, a3, a4, (uint64_t (*)(void))sub_10033EA2C, (uint64_t (*)(void))sub_10033EA70);
}

uint64_t sub_10033D8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2CE8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10033EA2C, (uint64_t (*)(void))sub_10033EA70);
}

uint64_t sub_10033D8EC(char *a1, char *a2)
{
  return sub_100215C44(*a1, *a2);
}

Swift::Int sub_10033D8F8()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x49444E4543534544;
  else
    v2 = 0x4E49444E45435341;
  if (v1)
    v3 = 0xEA0000000000474ELL;
  else
    v3 = 0xE900000000000047;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10033D980(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x49444E4543534544;
  else
    v2 = 0x4E49444E45435341;
  if (*v1)
    v3 = 0xEA0000000000474ELL;
  else
    v3 = 0xE900000000000047;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10033D9E4(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x49444E4543534544;
  else
    v3 = 0x4E49444E45435341;
  if (v2)
    v4 = 0xEA0000000000474ELL;
  else
    v4 = 0xE900000000000047;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10033DA68@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005570F0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_10033DAC4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x4E49444E45435341;
  if (*v1)
    v2 = 0x49444E4543534544;
  v3 = 0xE900000000000047;
  if (*v1)
    v3 = 0xEA0000000000474ELL;
  *a1 = v2;
  a1[1] = v3;
}

void sub_10033DB0C(_QWORD *a1@<X8>)
{
  *a1 = &off_100555A08;
}

uint64_t sub_10033DB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10033EB3C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10033DB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10033EB3C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10033DBC4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_10033EAF8();
  v5 = sub_10033EB3C();
  return static ArgumentDecodable<>.defaultArgument.getter(a1, a2, v4, v5, &protocol witness table for String);
}

uint64_t sub_10033DC20(_QWORD *a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v5 = sub_100012E18(&qword_1005D9C70);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_10033EE74();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.Sorting.CodingKeys, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys, v11, v9, v10);
  v19 = a2;
  v18 = 0;
  v12 = sub_100340B00();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for ICFolderArchiveModel.SortingOrders, v12);
  if (!v2)
  {
    v17 = HIBYTE(a2) & 1;
    v16 = 1;
    v13 = sub_100340B44();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for ICFolderArchiveModel.SortingDirections, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10033DD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2C5C(a1, a2, a3, a4, (uint64_t (*)(void))sub_10033EAF8, (uint64_t (*)(void))sub_10033EB3C);
}

uint64_t sub_10033DD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2CE8(a1, a2, a3, a4, (uint64_t (*)(void))sub_10033EAF8, (uint64_t (*)(void))sub_10033EB3C);
}

uint64_t sub_10033DD88()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F69746365726964;
  else
    return 0x726564726FLL;
}

uint64_t sub_10033DDC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10033EBF8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033DDE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10033EE74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10033DE10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10033EE74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10033DE38@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10033ECEC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
  }
  return result;
}

uint64_t sub_10033DE68(_QWORD *a1)
{
  unsigned __int8 *v1;
  __int16 v2;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  return sub_10033DC20(a1, v2 | *v1);
}

void sub_10033DE94()
{
  id v0;
  char v1;
  char v2;
  char v3;
  char v4;

  v0 = objc_msgSend(objc_allocWithZone((Class)ICFolderCustomNoteSortType), "init");
  if (objc_msgSend(v0, "isDefault") || (v1 = sub_10033E054((uint64_t)objc_msgSend(v0, "order")), v1 == 3))
  {

  }
  else
  {
    v2 = v1;
    v4 = sub_10033E1E4((uint64_t)objc_msgSend(v0, "direction"));

    if (v4 != 2)
    {
      v3 = v4 & 1;
      goto LABEL_5;
    }
  }
  v2 = 0;
  v3 = 0;
LABEL_5:
  byte_100601D68 = v2;
  byte_100601D69 = v3;
}

uint64_t sub_10033DF50@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t result;

  if (qword_1005CECF8 != -1)
    result = swift_once(&qword_1005CECF8, sub_10033DE94);
  v2 = byte_100601D69;
  *a1 = byte_100601D68;
  a1[1] = v2;
  return result;
}

uint64_t sub_10033DFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _WORD *a3@<X8>)
{
  uint64_t result;

  result = sub_10033EF40(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10033DFD0()
{
  return sub_100019C6C(&qword_1005D9988, type metadata accessor for ICFolderArchiveModel.Query, (uint64_t)&unk_100463674);
}

uint64_t type metadata accessor for ICFolderArchiveModel.Query(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D9B28, (uint64_t)&nominal type descriptor for ICFolderArchiveModel.Query);
}

unint64_t sub_10033E010()
{
  unint64_t result;

  result = qword_1005D9998;
  if (!qword_1005D9998)
  {
    result = swift_getWitnessTable(&unk_100463CEC, &type metadata for ICFolderArchiveModel.Query.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9998);
  }
  return result;
}

uint64_t sub_10033E054(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  result = 1;
  switch(a1)
  {
    case 0:
      if (qword_1005CECE8 != -1)
        swift_once(&qword_1005CECE8, sub_10033BD68);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_10012A0B0(v3, (uint64_t)qword_1005D9968);
      v5 = Logger.logObject.getter(v4);
      v7 = static os_log_type_t.error.getter(v5, v6);
      if (!os_log_type_enabled(v5, v7))
        goto LABEL_11;
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      v9 = "Cannot serialize default note sort order — returning nil";
      goto LABEL_10;
    case 1:
      return result;
    case 2:
      result = 0;
      break;
    case 3:
      result = 2;
      break;
    default:
      if (qword_1005CECE8 != -1)
        swift_once(&qword_1005CECE8, sub_10033BD68);
      v10 = type metadata accessor for Logger(0);
      v11 = sub_10012A0B0(v10, (uint64_t)qword_1005D9968);
      v5 = Logger.logObject.getter(v11);
      v7 = static os_log_type_t.fault.getter(v5);
      if (os_log_type_enabled(v5, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v8 = 0;
        v9 = "Unknown note sort order — returning nil";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v5, v7, v9, v8, 2u);
        swift_slowDealloc(v8, -1, -1);
      }
LABEL_11:

      result = 3;
      break;
  }
  return result;
}

uint64_t sub_10033E1E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (!a1)
    return 0;
  if (a1 == 1)
    return 1;
  if (qword_1005CECE8 != -1)
    swift_once(&qword_1005CECE8, sub_10033BD68);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005D9968);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v1 = 2;
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown note sort direction — returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    return 2;
  }
  return v1;
}

uint64_t sub_10033E2E0(unsigned __int16 a1)
{
  int v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1;
  result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 1;
      break;
    case 2:
      result = 2;
      break;
    case 3:
      if (qword_1005CECE8 != -1)
        swift_once(&qword_1005CECE8, sub_10033BD68);
      v9 = type metadata accessor for Logger(0);
      v10 = sub_10012A0B0(v9, (uint64_t)qword_1005D9968);
      v5 = Logger.logObject.getter(v10);
      v6 = static os_log_type_t.fault.getter(v5);
      if (!os_log_type_enabled(v5, v6))
        goto LABEL_13;
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      v8 = "Deprecated folder type — returning nil";
      goto LABEL_12;
    default:
      if (qword_1005CECE8 != -1)
        swift_once(&qword_1005CECE8, sub_10033BD68);
      v3 = type metadata accessor for Logger(0);
      v4 = sub_10012A0B0(v3, (uint64_t)qword_1005D9968);
      v5 = Logger.logObject.getter(v4);
      v6 = static os_log_type_t.fault.getter(v5);
      if (os_log_type_enabled(v5, v6))
      {
        v7 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v7 = 0;
        v8 = "Unknown folder type — returning nil";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v5, v6, v8, v7, 2u);
        swift_slowDealloc(v7, -1, -1);
      }
LABEL_13:

      result = 3;
      break;
  }
  return result;
}

uint64_t sub_10033E478(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974)
  {
    v5 = 0xEE00726569666974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010)
  {
    v8 = 0x8000000100482870;
    if (a2 == 0x8000000100482870)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100482870, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x6954746E65726170 && a2 == 0xEB00000000656C74)
  {
    v9 = 0xEB00000000656C74;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954746E65726170, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100482890)
  {
    v10 = 0x8000000100482890;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100482890, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v11 = 0xE500000000000000;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v12 = 0xE400000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x7972657571 && a2 == 0xE500000000000000)
  {
    v13 = 0xE500000000000000;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972657571, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x74726F5365746F6ELL && a2 == 0xEB00000000676E69)
  {
    v14 = 0xEB00000000676E69;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74726F5365746F6ELL, 0xEB00000000676E69, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x8000000100489DB0)
  {
    v15 = 0x8000000100489DB0;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100489DB0, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x6974697669746361 && a2 == 0xEA00000000007365)
  {
    swift_bridgeObjectRelease(0xEA00000000007365);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6974697669746361, 0xEA00000000007365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_10033E910(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x797469746E65 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E65, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_10033E9E8()
{
  unint64_t result;

  result = qword_1005D99B0;
  if (!qword_1005D99B0)
  {
    result = swift_getWitnessTable(&unk_100463CAC, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1005D99B0);
  }
  return result;
}

unint64_t sub_10033EA2C()
{
  unint64_t result;

  result = qword_1005D99B8;
  if (!qword_1005D99B8)
  {
    result = swift_getWitnessTable(&unk_100463C74, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1005D99B8);
  }
  return result;
}

unint64_t sub_10033EA70()
{
  unint64_t result;

  result = qword_1005D99C0;
  if (!qword_1005D99C0)
  {
    result = swift_getWitnessTable(&unk_100463C3C, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1005D99C0);
  }
  return result;
}

unint64_t sub_10033EAB4()
{
  unint64_t result;

  result = qword_1005D99C8;
  if (!qword_1005D99C8)
  {
    result = swift_getWitnessTable(&unk_100463BFC, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1005D99C8);
  }
  return result;
}

unint64_t sub_10033EAF8()
{
  unint64_t result;

  result = qword_1005D99D0;
  if (!qword_1005D99D0)
  {
    result = swift_getWitnessTable(&unk_100463BC4, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1005D99D0);
  }
  return result;
}

unint64_t sub_10033EB3C()
{
  unint64_t result;

  result = qword_1005D99D8;
  if (!qword_1005D99D8)
  {
    result = swift_getWitnessTable(&unk_100463B8C, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1005D99D8);
  }
  return result;
}

uint64_t sub_10033EB80()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10033EBA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_10033EBB4(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  unint64_t v5;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease(object);
  if (v5 >= 3)
    return 3;
  else
    return v5;
}

uint64_t sub_10033EBF8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x726564726FLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726564726FLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F69746365726964 && a2 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease(0xE90000000000006ELL);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746365726964, 0xE90000000000006ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10033ECEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t v12;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v3 = sub_100012E18(&qword_1005D99E8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10012D19C(a1, v7);
  v9 = sub_10033EE74();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICFolderArchiveModel.Sorting.CodingKeys, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_1000153C0(a1);
  BYTE1(v18) = 0;
  v10 = sub_10033EEB8();
  KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v18 + 2), &type metadata for ICFolderArchiveModel.SortingOrders, (char *)&v18 + 1, v3, &type metadata for ICFolderArchiveModel.SortingOrders, v10);
  v11 = BYTE2(v18);
  v17 = 1;
  v12 = sub_10033EEFC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for ICFolderArchiveModel.SortingDirections, &v17, v3, &type metadata for ICFolderArchiveModel.SortingDirections, v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = v18;
  sub_1000153C0(a1);
  if (v14)
    v15 = 256;
  else
    v15 = 0;
  return v15 | v11;
}

unint64_t sub_10033EE74()
{
  unint64_t result;

  result = qword_1005D99F0;
  if (!qword_1005D99F0)
  {
    result = swift_getWitnessTable(&unk_100463B3C, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D99F0);
  }
  return result;
}

unint64_t sub_10033EEB8()
{
  unint64_t result;

  result = qword_1005D99F8;
  if (!qword_1005D99F8)
  {
    result = swift_getWitnessTable(&unk_100463B14, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1005D99F8);
  }
  return result;
}

unint64_t sub_10033EEFC()
{
  unint64_t result;

  result = qword_1005D9A00;
  if (!qword_1005D9A00)
  {
    result = swift_getWitnessTable(&unk_100463AEC, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1005D9A00);
  }
  return result;
}

uint64_t sub_10033EF40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v20 = a2;
  v18[0] = 44;
  v18[1] = 0xE100000000000000;
  v3 = sub_1001452E8();
  v4 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v18, &type metadata for String, &type metadata for String, v3, v3);
  swift_bridgeObjectRelease(a2);
  if (v4[2] != 2)
    goto LABEL_3;
  v5 = v4[4];
  v6 = v4[5];
  v7 = sub_10033E9E8();
  v8 = sub_10033EA2C();
  v9 = sub_10033EA70();
  swift_bridgeObjectRetain(v6);
  result = ArgumentDecodable<>.init(fromArgument:)(v5, v6, &type metadata for ICFolderArchiveModel.SortingOrders, v7, v8, v9, &protocol witness table for String);
  v11 = v19;
  if (v19 == 3)
  {
LABEL_3:
    swift_bridgeObjectRelease(v4);
    return 512;
  }
  if (v4[2] >= 2uLL)
  {
    v13 = v4[6];
    v14 = v4[7];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease(v4);
    v15 = sub_10033EAB4();
    v16 = sub_10033EAF8();
    v17 = sub_10033EB3C();
    ArgumentDecodable<>.init(fromArgument:)(v13, v14, &type metadata for ICFolderArchiveModel.SortingDirections, v15, v16, v17, &protocol witness table for String);
    if (v19 != 2)
      return v11 & 0xFFFFFEFF | ((v19 & 1) << 8);
    return 512;
  }
  __break(1u);
  return result;
}

uint64_t sub_10033F0AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, _QWORD, uint64_t);
  void (*v10)(char *, uint64_t);
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  void *object;
  __n128 v16;
  uint64_t v17;
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Swift::String v22;
  void *v23;
  __n128 v24;
  _QWORD v26[2];

  v4 = type metadata accessor for AnsiStylings(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[0] = 0;
  v26[1] = 0xE000000000000000;
  v8 = enum case for AnsiStylings.cyan(_:);
  v9 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
  v9(v7, enum case for AnsiStylings.cyan(_:), v4);
  DefaultStringInterpolation.appendInterpolation(ansi:)(v7);
  v10 = *(void (**)(char *, uint64_t))(v5 + 8);
  v10(v7, v4);
  v11 = sub_10033E9E8();
  v12 = sub_10033EA2C();
  v13 = sub_10033EA70();
  v14._countAndFlagsBits = static ArgumentDecodable<>.typeSummary(forName:)(a1, a2, &type metadata for ICFolderArchiveModel.SortingOrders, v11, v12, v13, &protocol witness table for String);
  object = v14._object;
  String.append(_:)(v14);
  v16 = swift_bridgeObjectRelease(object);
  v17 = enum case for AnsiStylings.reset(_:);
  ((void (*)(char *, _QWORD, uint64_t, __n128))v9)(v7, enum case for AnsiStylings.reset(_:), v4, v16);
  DefaultStringInterpolation.appendInterpolation(ansi:)(v7);
  v10(v7, v4);
  v18._countAndFlagsBits = 44;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v9(v7, v8, v4);
  DefaultStringInterpolation.appendInterpolation(ansi:)(v7);
  v10(v7, v4);
  v19 = sub_10033EAB4();
  v20 = sub_10033EAF8();
  v21 = sub_10033EB3C();
  v22._countAndFlagsBits = static ArgumentDecodable<>.typeSummary(forName:)(a1, a2, &type metadata for ICFolderArchiveModel.SortingDirections, v19, v20, v21, &protocol witness table for String);
  v23 = v22._object;
  String.append(_:)(v22);
  v24 = swift_bridgeObjectRelease(v23);
  ((void (*)(char *, uint64_t, uint64_t, __n128))v9)(v7, v17, v4, v24);
  DefaultStringInterpolation.appendInterpolation(ansi:)(v7);
  v10(v7, v4);
  return v26[0];
}

uint64_t type metadata accessor for ICFolderArchiveModel(uint64_t a1)
{
  return sub_100010414(a1, (uint64_t *)&unk_1005D9A68, (uint64_t)&nominal type descriptor for ICFolderArchiveModel);
}

uint64_t sub_10033F2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D9A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10033F2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8ActivityVMa(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10033F340(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D9A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.Sorting.CodingKeys()
{
  return &type metadata for ICFolderArchiveModel.Sorting.CodingKeys;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.SortingDirections()
{
  return &type metadata for ICFolderArchiveModel.SortingDirections;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.SortingOrders()
{
  return &type metadata for ICFolderArchiveModel.SortingOrders;
}

_QWORD *sub_10033F3C0(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = a2[8];
    v11 = a2[9];
    *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
    v12 = a3[11];
    __dst = (char *)(a1 + v12);
    v13 = (char *)a2 + v12;
    *(_QWORD *)(a1 + 64) = v10;
    *(_QWORD *)(a1 + 72) = v11;
    v14 = type metadata accessor for ICFolderArchiveModel.Query(0);
    v29 = *(_QWORD *)(v14 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v29 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v16 = swift_bridgeObjectRetain(v11);
    if (v15(v13, 1, v14, v16))
    {
      v17 = sub_100012E18(&qword_1005D9A08);
      memcpy(__dst, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      v19 = type metadata accessor for ICQueryEntity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(__dst, v13, v19);
      v20 = *(int *)(v14 + 20);
      v21 = &__dst[v20];
      v22 = &v13[v20];
      v23 = type metadata accessor for ICQueryType(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v21, v22, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v14);
    }
    v24 = a3[13];
    *(_WORD *)((char *)v4 + a3[12]) = *(_WORD *)((char *)a2 + a3[12]);
    v25 = *(uint64_t *)((char *)a2 + v24);
    *(_QWORD *)((char *)v4 + v24) = v25;
    v26 = a3[14];
    v27 = *(uint64_t *)((char *)a2 + v26);
    *(_QWORD *)((char *)v4 + v26) = v27;
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v27);
  }
  return v4;
}

double sub_10033F58C(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[9]);
  v4 = (char *)a1 + a2[11];
  v5 = type metadata accessor for ICFolderArchiveModel.Query(0);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for ICQueryEntity(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v4, v6);
    v7 = &v4[*(int *)(v5 + 20)];
    v8 = type metadata accessor for ICQueryType(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[13]));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[14])).n128_u64[0];
  return result;
}

uint64_t sub_10033F658(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = a3[11];
  __dst = (char *)(a1 + v11);
  v12 = (char *)(a2 + v11);
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v10;
  v13 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v27 = *(_QWORD *)(v13 - 8);
  v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v27 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v15 = swift_bridgeObjectRetain(v10);
  if (v14(v12, 1, v13, v15))
  {
    v16 = sub_100012E18(&qword_1005D9A08);
    memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = type metadata accessor for ICQueryEntity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(__dst, v12, v17);
    v18 = *(int *)(v13 + 20);
    v19 = &__dst[v18];
    v20 = &v12[v18];
    v21 = type metadata accessor for ICQueryType(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v13);
  }
  v22 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v23 = *(_QWORD *)(a2 + v22);
  *(_QWORD *)(a1 + v22) = v23;
  v24 = a3[14];
  v25 = *(_QWORD *)(a2 + v24);
  *(_QWORD *)(a1 + v24) = v25;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t sub_10033F7F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v14 = a3[11];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      v35 = type metadata accessor for ICQueryEntity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v35 - 8) + 24))(v15, v16, v35);
      v36 = *(int *)(v17 + 20);
      v37 = &v15[v36];
      v38 = &v16[v36];
      v39 = type metadata accessor for ICQueryType(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
      goto LABEL_7;
    }
    sub_100145264((uint64_t)v15, type metadata accessor for ICFolderArchiveModel.Query);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v27 = sub_100012E18(&qword_1005D9A08);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v22 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v15, v16, v22);
  v23 = *(int *)(v17 + 20);
  v24 = &v15[v23];
  v25 = &v16[v23];
  v26 = type metadata accessor for ICQueryType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v28 = a3[13];
  v29 = *(_QWORD *)(a1 + v28);
  v30 = *(_QWORD *)(a2 + v28);
  *(_QWORD *)(a1 + v28) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v29);
  v31 = a3[14];
  v32 = *(_QWORD *)(a1 + v31);
  v33 = *(_QWORD *)(a2 + v31);
  *(_QWORD *)(a1 + v31) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v32);
  return a1;
}

uint64_t sub_10033FA54(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v7 = a3[11];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  *(_OWORD *)(a1 + 64) = v6;
  v10 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100012E18(&qword_1005D9A08);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for ICQueryEntity(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v8, v9, v13);
    v14 = *(int *)(v10 + 20);
    v15 = &v8[v14];
    v16 = &v9[v14];
    v17 = type metadata accessor for ICQueryType(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v18 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  *(_QWORD *)(a1 + v18) = *(_QWORD *)(a2 + v18);
  *(_QWORD *)(a1 + a3[14]) = *(_QWORD *)(a2 + a3[14]);
  return a1;
}

uint64_t sub_10033FBA8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v14 = a3[11];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for ICFolderArchiveModel.Query(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      v33 = type metadata accessor for ICQueryEntity(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 40))(v15, v16, v33);
      v34 = *(int *)(v17 + 20);
      v35 = &v15[v34];
      v36 = &v16[v34];
      v37 = type metadata accessor for ICQueryType(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 40))(v35, v36, v37);
      goto LABEL_7;
    }
    sub_100145264((uint64_t)v15, type metadata accessor for ICFolderArchiveModel.Query);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    v27 = sub_100012E18(&qword_1005D9A08);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_7;
  }
  v22 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v15, v16, v22);
  v23 = *(int *)(v17 + 20);
  v24 = &v15[v23];
  v25 = &v16[v23];
  v26 = type metadata accessor for ICQueryType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_7:
  v28 = a3[13];
  *(_WORD *)(a1 + a3[12]) = *(_WORD *)(a2 + a3[12]);
  v29 = *(_QWORD *)(a1 + v28);
  *(_QWORD *)(a1 + v28) = *(_QWORD *)(a2 + v28);
  swift_bridgeObjectRelease(v29);
  v30 = a3[14];
  v31 = *(_QWORD *)(a1 + v30);
  *(_QWORD *)(a1 + v30) = *(_QWORD *)(a2 + v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

uint64_t sub_10033FDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10033FDBC);
}

uint64_t sub_10033FDBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100012E18(&qword_1005D9A08);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_10033FE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10033FE48);
}

uint64_t sub_10033FE48(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100012E18(&qword_1005D9A08);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

void sub_10033FEC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = &unk_1004636E8;
  v4[1] = &unk_100463700;
  v4[2] = &unk_100463718;
  v4[3] = &unk_100463718;
  v4[4] = &unk_100463730;
  v4[5] = &unk_100463718;
  v4[6] = &unk_100463748;
  sub_10033FF74(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    v4[8] = &unk_100463760;
    v4[9] = &unk_100463778;
    v4[10] = &unk_100463778;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
  }
}

void sub_10033FF74(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D9A78)
  {
    v2 = type metadata accessor for ICFolderArchiveModel.Query(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D9A78);
  }
}

uint64_t _s11MobileNotes20ICFolderArchiveModelV17SortingDirectionsOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100340014 + 4 * byte_1004635A8[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100340048 + 4 * byte_1004635A3[v4]))();
}

uint64_t sub_100340048(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100340050(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100340058);
  return result;
}

uint64_t sub_100340064(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10034006CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100340070(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100340078(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.Query.CodingKeys()
{
  return &type metadata for ICFolderArchiveModel.Query.CodingKeys;
}

uint64_t *sub_100340094(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for ICQueryEntity(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ICQueryType(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_10034013C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for ICQueryType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_100340198(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ICQueryType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_100340214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ICQueryType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_100340290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ICQueryType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_10034030C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for ICQueryType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100340388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100340394);
}

uint64_t sub_100340394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for ICQueryEntity(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for ICQueryType(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100340408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100340414);
}

uint64_t sub_100340414(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for ICQueryEntity(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for ICQueryType(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_100340490(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for ICQueryEntity(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for ICQueryType(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_WORD *initializeBufferWithCopyOfBuffer for ICFolderArchiveModel.Sorting(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ICFolderArchiveModel.Sorting(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICFolderArchiveModel.Sorting(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100340600 + 4 * byte_1004635B2[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_100340634 + 4 * byte_1004635AD[v4]))();
}

uint64_t sub_100340634(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10034063C(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100340644);
  return result;
}

uint64_t sub_100340650(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100340658);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_10034065C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100340664(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.Sorting()
{
  return &type metadata for ICFolderArchiveModel.Sorting;
}

unint64_t sub_100340684()
{
  unint64_t result;

  result = qword_1005D9B60;
  if (!qword_1005D9B60)
  {
    result = swift_getWitnessTable(&unk_100463880, &type metadata for ICFolderArchiveModel.Query.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9B60);
  }
  return result;
}

uint64_t sub_1003406C8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100019C6C(&qword_1005D4DD8, type metadata accessor for ICFolderArchiveModel, (uint64_t)&unk_100463A9C);
  result = sub_100019C6C(&qword_1005D76D8, type metadata accessor for ICFolderArchiveModel, (uint64_t)&unk_100463AC4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100340728()
{
  unint64_t result;

  result = qword_1005D9BA0;
  if (!qword_1005D9BA0)
  {
    result = swift_getWitnessTable(&unk_10046392C, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1005D9BA0);
  }
  return result;
}

unint64_t sub_100340770()
{
  unint64_t result;

  result = qword_1005D9BA8;
  if (!qword_1005D9BA8)
  {
    result = swift_getWitnessTable(&unk_1004639BC, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1005D9BA8);
  }
  return result;
}

unint64_t sub_1003407B8()
{
  unint64_t result;

  result = qword_1005D9BB0;
  if (!qword_1005D9BB0)
  {
    result = swift_getWitnessTable(&unk_100463A74, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9BB0);
  }
  return result;
}

unint64_t sub_100340800()
{
  unint64_t result;

  result = qword_1005D9BB8;
  if (!qword_1005D9BB8)
  {
    result = swift_getWitnessTable(&unk_1004639E4, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9BB8);
  }
  return result;
}

unint64_t sub_100340848()
{
  unint64_t result;

  result = qword_1005D9BC0;
  if (!qword_1005D9BC0)
  {
    result = swift_getWitnessTable(&unk_100463A0C, &type metadata for ICFolderArchiveModel.Sorting.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9BC0);
  }
  return result;
}

uint64_t sub_10034088C()
{
  return sub_10012C9A4(&qword_1005D9BC8, &qword_1005D9BD0);
}

uint64_t sub_1003408B4()
{
  return sub_10012C9A4(&qword_1005D9BD8, &qword_1005D9BE0);
}

unint64_t sub_1003408E0()
{
  unint64_t result;

  result = qword_1005D9BE8;
  if (!qword_1005D9BE8)
  {
    result = swift_getWitnessTable(&unk_1004637F0, &type metadata for ICFolderArchiveModel.Query.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9BE8);
  }
  return result;
}

unint64_t sub_100340928()
{
  unint64_t result;

  result = qword_1005D9BF0;
  if (!qword_1005D9BF0)
  {
    result = swift_getWitnessTable(&unk_100463818, &type metadata for ICFolderArchiveModel.Query.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9BF0);
  }
  return result;
}

unint64_t sub_10034096C()
{
  unint64_t result;

  result = qword_1005D9C00;
  if (!qword_1005D9C00)
  {
    result = swift_getWitnessTable(&unk_100463F64, &type metadata for ICFolderArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9C00);
  }
  return result;
}

unint64_t sub_1003409B0()
{
  unint64_t result;

  result = qword_1005D9C08;
  if (!qword_1005D9C08)
  {
    result = swift_getWitnessTable(&unk_100463F3C, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D9C08);
  }
  return result;
}

unint64_t sub_1003409F4()
{
  unint64_t result;

  result = qword_1005D9C18;
  if (!qword_1005D9C18)
  {
    result = swift_getWitnessTable(&unk_1004637A0, &type metadata for ICFolderArchiveModel.Sorting);
    atomic_store(result, (unint64_t *)&qword_1005D9C18);
  }
  return result;
}

unint64_t sub_100340A38()
{
  unint64_t result;

  result = qword_1005D9C40;
  if (!qword_1005D9C40)
  {
    result = swift_getWitnessTable(&unk_100463F14, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D9C40);
  }
  return result;
}

uint64_t sub_100340A7C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001537C(&qword_1005D9C20);
    sub_100019C6C(a2, _s8ActivityVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100340B00()
{
  unint64_t result;

  result = qword_1005D9C78;
  if (!qword_1005D9C78)
  {
    result = swift_getWitnessTable(&unk_1004638C4, &type metadata for ICFolderArchiveModel.SortingOrders);
    atomic_store(result, (unint64_t *)&qword_1005D9C78);
  }
  return result;
}

unint64_t sub_100340B44()
{
  unint64_t result;

  result = qword_1005D9C80;
  if (!qword_1005D9C80)
  {
    result = swift_getWitnessTable(&unk_100463954, &type metadata for ICFolderArchiveModel.SortingDirections);
    atomic_store(result, (unint64_t *)&qword_1005D9C80);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ICFolderArchiveModel.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ICFolderArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_100340C64 + 4 * byte_1004635BC[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_100340C98 + 4 * byte_1004635B7[v4]))();
}

uint64_t sub_100340C98(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100340CA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100340CA8);
  return result;
}

uint64_t sub_100340CB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100340CBCLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_100340CC0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100340CC8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.CodingKeys()
{
  return &type metadata for ICFolderArchiveModel.CodingKeys;
}

uint64_t _s11MobileNotes20ICFolderArchiveModelV5TypesOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100340D30 + 4 * byte_1004635C6[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100340D64 + 4 * byte_1004635C1[v4]))();
}

uint64_t sub_100340D64(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100340D6C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100340D74);
  return result;
}

uint64_t sub_100340D80(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100340D88);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100340D8C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100340D94(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICFolderArchiveModel.Types()
{
  return &type metadata for ICFolderArchiveModel.Types;
}

uint64_t sub_100340DB4()
{
  return sub_10012C9A4(&qword_1005D9C88, &qword_1005D9C90);
}

unint64_t sub_100340DDC()
{
  unint64_t result;

  result = qword_1005D9C98;
  if (!qword_1005D9C98)
  {
    result = swift_getWitnessTable(&unk_100463E34, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D9C98);
  }
  return result;
}

unint64_t sub_100340E24()
{
  unint64_t result;

  result = qword_1005D9CA0;
  if (!qword_1005D9CA0)
  {
    result = swift_getWitnessTable(&unk_100463EEC, &type metadata for ICFolderArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9CA0);
  }
  return result;
}

unint64_t sub_100340E6C()
{
  unint64_t result;

  result = qword_1005D9CA8;
  if (!qword_1005D9CA8)
  {
    result = swift_getWitnessTable(&unk_100463E5C, &type metadata for ICFolderArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9CA8);
  }
  return result;
}

unint64_t sub_100340EB4()
{
  unint64_t result;

  result = qword_1005D9CB0;
  if (!qword_1005D9CB0)
  {
    result = swift_getWitnessTable(&unk_100463E84, &type metadata for ICFolderArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9CB0);
  }
  return result;
}

unint64_t sub_100340EF8()
{
  unint64_t result;

  result = qword_1005D9CB8;
  if (!qword_1005D9CB8)
  {
    result = swift_getWitnessTable(&unk_100463DBC, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D9CB8);
  }
  return result;
}

unint64_t sub_100340F3C()
{
  unint64_t result;

  result = qword_1005D9CC0;
  if (!qword_1005D9CC0)
  {
    result = swift_getWitnessTable(&unk_100463D84, &type metadata for ICFolderArchiveModel.Types);
    atomic_store(result, (unint64_t *)&qword_1005D9CC0);
  }
  return result;
}

uint64_t sub_10034109C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t result;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ICShowActivityStreamActivity_object);
  v2 = objc_opt_self(ICFolder);
  if (swift_dynamicCastObjCClass(v1, v2))
    goto LABEL_5;
  v3 = objc_opt_self(ICNote);
  if (swift_dynamicCastObjCClass(v1, v3))
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICShowActivityStreamActivity_viewControllerManager);
    if (Strong)
    {
      v5 = Strong;
      objc_msgSend(Strong, "showsActivityStream");

    }
LABEL_5:
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "localizedStringForKey:value:table:", v7, 0, 0);

    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    return v9;
  }
  _StringGuts.grow(_:)(45);
  ObjectType = swift_getObjectType(v1);
  v12 = _typeName(_:qualified:)(ObjectType, 0);
  v14 = v13;
  swift_bridgeObjectRelease(0xE000000000000000);
  v15._countAndFlagsBits = 0xD00000000000002BLL;
  v15._object = (void *)0x8000000100489EB0;
  String.append(_:)(v15);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v12, v14, "MobileNotes/ShowActivityStreamActivity.swift", 44, 2, 38, 0);
  __break(1u);
  return result;
}

double sub_100341394(void (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2)
{
  uint64_t v2;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *Strong;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;
  double result;
  uint64_t v19;
  void *v20;
  id v21;
  _QWORD v22[5];
  _QWORD *v23;

  v5 = String._bridgeToObjectiveC()();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  v9 = v2 + OBJC_IVAR___ICShowActivityStreamActivity_viewControllerManager;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR___ICShowActivityStreamActivity_viewControllerManager);
  if (Strong && (v11 = Strong, v12 = objc_msgSend(Strong, "showsActivityStream"), v11, v12))
  {
    v13 = swift_unknownObjectWeakLoadStrong(v9);
    if (v13)
    {
      v14 = (void *)v13;
      v15 = (_QWORD *)swift_allocObject(&unk_100569F70, 48, 7);
      v15[2] = a1;
      v15[3] = a2;
      v15[4] = v6;
      v15[5] = v8;
      v22[4] = sub_100341714;
      v23 = v15;
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 1107296256;
      v22[2] = sub_100206734;
      v22[3] = &unk_100569F88;
      v16 = _Block_copy(v22);
      v17 = v23;
      sub_100166B74((uint64_t)a1, a2);
      objc_msgSend(v14, "hideActivityStreamWithCompletion:", v16, swift_release(v17).n128_f64[0]);
      _Block_release(v16);

      return result;
    }
  }
  else
  {
    v19 = swift_unknownObjectWeakLoadStrong(v9);
    if (v19)
    {
      v20 = (void *)v19;
      v21 = objc_msgSend(*(id *)(v2 + OBJC_IVAR___ICShowActivityStreamActivity_object), "objectID");
      objc_msgSend(v20, "showActivityStreamForObjectWithObjectID:collabActivityContextPath:", v21, 2);

    }
    if (a1)
      a1(1, v6, v8);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for ShowActivityStreamActivity()
{
  return objc_opt_self(ICShowActivityStreamActivity);
}

uint64_t sub_1003416BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003416E0()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100341714()
{
  _QWORD *v0;
  uint64_t (*v1)(uint64_t, _QWORD, _QWORD);
  uint64_t result;

  v1 = (uint64_t (*)(uint64_t, _QWORD, _QWORD))v0[2];
  if (v1)
    return v1(1, v0[4], v0[5]);
  return result;
}

objc_class *sub_100341744()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::OpaquePointer preferredElementSize;
  id v7;
  Swift::String v8;
  Class isa;
  Swift::OpaquePointer v10;
  id v11;
  Swift::String v12;
  UIMenu v13;
  void *v14;
  id v15;
  UIImage_optional v17;
  UIImage_optional v18;

  v1 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize._rawValue = (void *)swift_allocObject(v5, 56, 7);
    *((_OWORD *)preferredElementSize._rawValue + 1) = xmmword_100454060;
    *((_QWORD *)preferredElementSize._rawValue + 4) = sub_100341C28();
    *((_QWORD *)preferredElementSize._rawValue + 5) = sub_100341D94();
    v7 = sub_100341EFC();
    *((_QWORD *)preferredElementSize._rawValue + 6) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v17.value.super.isa = 0;
    v17.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v17, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize._rawValue, preferredElementSize).super.super.isa;
    v10._rawValue = (void *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)v10._rawValue + 1) = xmmword_100451BF0;
    v11 = sub_100341A48();
    *((_QWORD *)v10._rawValue + 4) = v11;
    *((_QWORD *)v10._rawValue + 5) = isa;
    specialized Array._endMutation()(v11);
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v18.value.super.isa = 0;
    v18.is_nil = 0;
    v13.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v18, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v10._rawValue, v10).super.super.isa;
    v14 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v13;
    v3 = v13.super.super.isa;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_1003418B8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  _BOOL8 v19;
  id v20;

  v1 = (void *)sub_100341A48();
  v2 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  v5 = 1;
  if (v3)
  {
    v4 = objc_opt_self(ICSharedFilterTypeSelection);
    if (swift_dynamicCastObjCClass(v3, v4))
      v5 = 0;
  }
  objc_msgSend(v1, "setState:", v5);

  v6 = sub_100341C28();
  v7 = *(_QWORD *)(v0 + v2);
  v10 = 0;
  if (v7)
  {
    v8 = objc_opt_self(ICSharedFilterTypeSelection);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      if (objc_msgSend(v9, "selectionType") == (id)1)
        v10 = 1;
    }
  }
  objc_msgSend(v6, "setState:", v10);

  v11 = sub_100341D94();
  v12 = *(_QWORD *)(v0 + v2);
  v15 = 0;
  if (v12)
  {
    v13 = objc_opt_self(ICSharedFilterTypeSelection);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      if (objc_msgSend(v14, "selectionType") == (id)2)
        v15 = 1;
    }
  }
  objc_msgSend(v11, "setState:", v15);

  v20 = sub_100341EFC();
  v16 = *(_QWORD *)(v0 + v2);
  v19 = 0;
  if (v16)
  {
    v17 = objc_opt_self(ICSharedFilterTypeSelection);
    v18 = (void *)swift_dynamicCastObjCClass(v16, v17);
    if (v18)
    {
      if (objc_msgSend(v18, "selectionType") == (id)3)
        v19 = 1;
    }
  }
  objc_msgSend(v20, "setState:", v19);

}

id sub_100341A48()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionOff;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionOff];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionOff];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056A050, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100342528, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_100341BA4(uint64_t a1, char *a2)
{
  void *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  sub_1003418B8();
  v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    v5 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v6 = swift_retain(v5);
    v4(v6);
    sub_100012C50((uint64_t)v4, v5);
  }
}

id sub_100341C28()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionAnyone;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionAnyone];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionAnyone];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056A028, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100342500, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_100341D94()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionSpecificUsers;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionSpecificUsers];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionSpecificUsers];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056A000, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003424D8, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_100341EFC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionNotShared;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionNotShared];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionNotShared];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100569FD8, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003424B0, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_100342064(uint64_t a1, char a2)
{
  char *v2;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t result;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  if ((a2 & 1) == 0)
  {
    v4 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, "managedObjectContext");

      if (v6)
      {
        v7 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_accountObjectID];
        if (v7)
        {
          v8 = objc_allocWithZone((Class)ICSharedFilterTypeSelection);
          v9 = v7;
          v10 = objc_msgSend(v8, "initWithManagedObjectContext:accountObjectID:selectionType:joinOperator:", v6, v9, a1, a1 == 2);
          v11 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
          *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v10;
          v12 = v10;

          objc_msgSend(v2, "setNeedsUpdateConfiguration");
          goto LABEL_8;
        }

      }
    }
  }
  v14 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  v13 = objc_msgSend(v2, "setNeedsUpdateConfiguration");
LABEL_8:
  result = sub_1003418B8(v13);
  v16 = *(void (**)(uint64_t))&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v16)
  {
    v17 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v18 = swift_retain(v17);
    v16(v18);
    return sub_100012C50((uint64_t)v16, v17);
  }
  return result;
}

id sub_10034228C(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionAnyone] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionSpecificUsers] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionNotShared] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellShared();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

void sub_100342338()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionAnyone));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionSpecificUsers));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes30FolderComposerFilterCellShared____lazy_storage___menuActionNotShared));
}

id sub_100342394()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellShared();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellShared()
{
  return objc_opt_self(_TtC11MobileNotes30FolderComposerFilterCellShared);
}

objc_class *sub_10034244C()
{
  return sub_100341744();
}

void sub_10034246C()
{
  sub_1003418B8();
}

uint64_t sub_10034248C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003424B0()
{
  return sub_100342064(3, 0);
}

uint64_t sub_1003424D8()
{
  return sub_100342064(2, 0);
}

uint64_t sub_100342500()
{
  return sub_100342064(1, 0);
}

void sub_100342528(uint64_t a1)
{
  uint64_t v1;

  sub_100341BA4(a1, *(char **)(v1 + 16));
}

id ICAppIntentsManager.__allocating_init(dependencyManager:loggingConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  objc_class *v5;
  char *v11;
  char *v12;
  objc_super v14;

  v11 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_dependencyManager] = a1;
  v12 = &v11[OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_loggingConfiguration];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  *((_QWORD *)v12 + 2) = a4;
  *((_QWORD *)v12 + 3) = a5;
  v14.receiver = v11;
  v14.super_class = v5;
  return objc_msgSendSuper2(&v14, "init");
}

id ICAppIntentsManager.init(dependencyManager:loggingConfiguration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  objc_class *ObjectType;
  char *v12;
  objc_super v14;

  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_dependencyManager] = a1;
  v12 = &v5[OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_loggingConfiguration];
  *(_QWORD *)v12 = a2;
  *((_QWORD *)v12 + 1) = a3;
  *((_QWORD *)v12 + 2) = a4;
  *((_QWORD *)v12 + 3) = a5;
  v14.receiver = v5;
  v14.super_class = ObjectType;
  return objc_msgSendSuper2(&v14, "init");
}

uint64_t sub_10034263C(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100342654, 0, 0);
}

uint64_t sub_100342654()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;

  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 24) = static MainActor.shared.getter(v1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor, v2);
  return swift_task_switch(sub_1003426BC, v3, v4);
}

uint64_t sub_1003426BC()
{
  uint64_t v0;
  id v1;
  id v2;
  void *v3;

  swift_release(*(_QWORD *)(v0 + 24));
  v1 = objc_allocWithZone((Class)ICUnifiedNoteContext);
  sub_1000163BC(0, (unint64_t *)&qword_1005D6938, ICNoteContext_ptr);
  v2 = sub_100289D7C();
  v3 = (void *)sub_100289E78();
  *(_QWORD *)(v0 + 32) = objc_msgSend(v1, "initWithModernNoteContext:htmlNoteContext:options:", v2, v3, 0);

  return swift_task_switch(sub_100140D28, 0, 0);
}

uint64_t sub_1003427A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_1003427C8, 0, 0);
}

uint64_t sub_1003427C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = v0[5];
  v2 = v0[6];
  v3 = v0[4];
  v4 = (_QWORD *)v0[2];
  *v4 = v0[3];
  v4[1] = v3;
  v4[2] = v1;
  v4[3] = v2;
  v6 = (uint64_t (*)(void))v0[1];
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  return v6();
}

uint64_t sub_10034281C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100342848(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v8 = *(_OWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 32);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc(dword_1005D9D6C);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_100130768;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 48) = v4;
  *(_OWORD *)(v6 + 24) = v8;
  *(_QWORD *)(v6 + 16) = a1;
  return swift_task_switch(sub_1003427C8, 0, 0);
}

void ICAppIntentsManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.ICAppIntentsManager", 31, "init()", 6, 0);
  __break(1u);
}

void static ICAppIntentsManager.registerDependencies()()
{
  objc_class *v0;
  objc_class *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  id v6;
  objc_super v7;

  v1 = v0;
  v2 = type metadata accessor for AppDependencyManager(0);
  v3 = static AppDependencyManager.shared.getter(v2);
  v4 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_dependencyManager] = v3;
  v5 = &v4[OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_loggingConfiguration];
  *(_QWORD *)v5 = 0x6C7070612E6D6F63;
  *((_QWORD *)v5 + 1) = 0xEF7365746F6E2E65;
  *((_QWORD *)v5 + 2) = 1802398028;
  *((_QWORD *)v5 + 3) = 0xE400000000000000;
  v7.receiver = v4;
  v7.super_class = v1;
  v6 = objc_msgSendSuper2(&v7, "init");
  ICAppIntentsManager.registerDependencies()();

}

double _s11MobileNotes19ICAppIntentsManagerC27updateAppShortcutParametersyyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  char v11;
  uint64_t v12;

  v0 = type metadata accessor for ProvisionalBackgroundTaskController(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  *(_QWORD *)(v1 + 16) = sub_1001368BC((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v1 + 24) = 0;
  *(_BYTE *)(v1 + 32) = 1;
  *(_QWORD *)(v1 + 40) = 0;
  v2 = v1 + OBJC_IVAR____TtC11MobileNotes35ProvisionalBackgroundTaskController_timeoutInterval;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotes35ProvisionalBackgroundTaskController_timeoutInterval) = 1;
  v3 = enum case for DispatchTimeInterval.seconds(_:);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(v2, v3, v4);
  sub_100326FF8(0xD00000000000001ELL, 0x800000010048A050, 1000000000000000000, 0);
  if (qword_1005CEC98 != -1)
    swift_once(&qword_1005CEC98, sub_100326E74);
  v5 = qword_1005D90B0;
  v12 = v1;
  swift_retain(v1);
  v6 = sub_100012E18(&qword_1005D9DA0);
  swift_task_localValuePush(v5, &v12, v6);
  sub_1000163BC(0, &qword_1005D04C0, ICUnifiedNoteContext_ptr);
  v7 = static ICUnifiedNoteContext.$prefersViewContext.getter();
  v11 = 0;
  swift_task_localValuePush(v7, &v11, &type metadata for Bool);
  sub_100342BB0();
  v8 = static AppShortcutsProvider.updateAppShortcutParameters()();
  swift_task_localValuePop(v8);
  swift_release(v7);
  swift_task_localValuePop(v9);
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for ICAppIntentsManager()
{
  return objc_opt_self(_TtC11MobileNotes19ICAppIntentsManager);
}

unint64_t sub_100342BB0()
{
  unint64_t result;

  result = qword_1005D9DA8;
  if (!qword_1005D9DA8)
  {
    result = swift_getWitnessTable(&unk_100464D70, &type metadata for NotesAppShortcuts);
    atomic_store(result, (unint64_t *)&qword_1005D9DA8);
  }
  return result;
}

void sub_100342BF4()
{
  uint64_t v0;
  id v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v1 = objc_msgSend(*(id *)(v0 + OBJC_IVAR___ICNoteContainerActionMenu_viewControllerManager), "noteContainerViewMode");
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteContainerActionMenu_presentingViewController);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = objc_opt_self(ICNAViewController);
    v5 = (void *)swift_dynamicCastObjCClass(v3, v4);
    if (!v5)
    {
      v9 = v3;
LABEL_10:

      return;
    }
    v10 = objc_msgSend(v5, "eventReporter");

    if (v10)
    {
      v6 = sub_100070810((uint64_t)v1);
      v7 = *(void **)(v0 + OBJC_IVAR___ICNoteContainerActionMenu_noteContainer);
      if (v7)
        v8 = objc_msgSend(v7, "isShowingDateHeaders");
      else
        v8 = 0;
      objc_msgSend(v10, "submitNoteActionMenuEventForNoteBrowserWithUsageType:layout:activityType:isTimelineView:", 1, v6, 0, v8);
      v9 = v10;
      goto LABEL_10;
    }
  }
}

uint64_t sub_100342D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  id v22;
  uint64_t v23;

  v1 = v0;
  v2 = sub_1002DED28();
  v23 = v2;
  v3 = *(void **)(v0 + OBJC_IVAR___ICNoteContainerActionMenu_noteContainer);
  if (v3)
  {
    v4 = v2;
    v5 = objc_opt_self(ICAccount);
    if (swift_dynamicCastObjCClass(v3, v5))
    {
      v6 = *(void **)(v0 + OBJC_IVAR___ICNoteContainerActionMenu_viewControllerManager);
      swift_bridgeObjectRetain(v4);
      v7 = sub_10023A1AC(v6);
      swift_bridgeObjectRelease(v4);
      v22 = v7;
      v8 = sub_100012E18(&qword_1005D5880);
      Array.insertOptional(_:at:)(&v22, 0, v8);

    }
    v9 = objc_opt_self(ICFolder);
    v10 = swift_dynamicCastObjCClass(v3, v9);
    if (v10)
    {
      v11 = (void *)v10;
      v12 = v3;
      if (objc_msgSend(v11, "enforcedNoteContainerViewMode") == (id)-1)
      {
        v13 = sub_10023A1AC(*(void **)(v1 + OBJC_IVAR___ICNoteContainerActionMenu_viewControllerManager));
        v22 = v13;
        v14 = sub_100012E18(&qword_1005D5880);
        Array.insertOptional(_:at:)(&v22, 0, v14);

      }
    }
  }
  v15 = *(void **)(v1 + OBJC_IVAR___ICNoteContainerActionMenu_virtualSmartFolder);
  if (v15)
  {
    v16 = v15;
    if (objc_msgSend(v16, "enforcedNoteContainerViewMode") == (id)-1
      && (objc_msgSend(v16, "isTrashFolder") & 1) == 0)
    {
      v17 = sub_10023A1AC(*(void **)(v1 + OBJC_IVAR___ICNoteContainerActionMenu_viewControllerManager));
      v22 = v17;
      v18 = sub_100012E18(&qword_1005D5880);
      Array.insertOptional(_:at:)(&v22, 0, v18);

    }
  }
  v19 = sub_100239BB8(*(void **)(v1 + OBJC_IVAR___ICNoteContainerActionMenu_viewControllerManager));
  v22 = v19;
  v20 = sub_100012E18(&qword_1005D5880);
  Array.insertOptional(_:at:)(&v22, 0, v20);

  return v23;
}

id sub_100342FA0()
{
  id v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  double v8;
  id v9;
  id v11;
  uint64_t v12;

  v0 = sub_1002DEFC0();
  v1 = objc_msgSend(v0, "children");
  v2 = sub_100343460();
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  v12 = v3;
  v4 = sub_1003430B8();
  v11 = v4;
  v5 = sub_100012E18(&qword_1005D5880);
  Array.appendNonNil(_:)(&v11, v5);

  v6 = v12;
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v8 = swift_bridgeObjectRelease(v6).n128_u64[0];
  v9 = objc_msgSend(v0, "menuByReplacingChildren:", isa, v8, v11);

  return v9;
}

id sub_1003430B8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *Strong;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;

  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR___ICNoteContainerActionMenu_viewControllerManager), "behavior") == (id)1)
    return 0;
  v2 = v0 + OBJC_IVAR___ICNoteContainerActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteContainerActionMenu_presentingViewController);
  v4 = swift_unknownObjectWeakLoadStrong(v2);
  if (v4)
  {
    v5 = (void *)v4;
    v6 = objc_opt_self(ICNAViewController);
    v7 = (void *)swift_dynamicCastObjCClass(v5, v6);
    if (v7)
      v8 = objc_msgSend(v7, "eventReporter");
    else
      v8 = 0;

  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)ICViewAttachmentsActivity), "initWithPresentingViewController:eventReporter:", Strong, v8);

  v11 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteContainerActionMenu_completion);
  if (v11)
  {
    v12 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteContainerActionMenu_completion + 8);
    v16[4] = v11;
    v17 = v12;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_10023ABC8;
    v16[3] = &unk_10056A0A8;
    v13 = _Block_copy(v16);
    v14 = v17;
    swift_retain(v12);
    *(_QWORD *)&v10 = swift_release(v14).n128_u64[0];
  }
  else
  {
    v13 = 0;
  }
  v1 = objc_msgSend(v9, "actionWithCompletion:", v13, v10);
  _Block_release(v13);

  return v1;
}

id sub_100343410()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoteBrowseActionMenu();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NoteBrowseActionMenu()
{
  return objc_opt_self(ICNoteBrowseActionMenu);
}

unint64_t sub_100343460()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D8A30;
  if (!qword_1005D8A30)
  {
    v1 = objc_opt_self(UIMenuElement);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D8A30);
  }
  return result;
}

uint64_t sub_10034349C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100343664(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v5;
  id v6;

  v2[2] = a2;
  v5 = type metadata accessor for AppIntentsVocabularyManager(0);
  v2[3] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[4] = _Block_copy(a1);
  v6 = a2;
  return swift_task_switch(sub_1003436D4, 0, 0);
}

uint64_t sub_1003436D4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  static Logger.link.getter(a1);
  v2 = (_QWORD *)swift_task_alloc(dword_1005DBC04);
  *(_QWORD *)(v1 + 40) = v2;
  *v2 = v1;
  v2[1] = sub_100343724;
  return sub_1003AF8BC();
}

uint64_t sub_100343724()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *(_QWORD *)(*v1 + 24);
  v4 = *v1;
  *(_QWORD *)(v4 + 48) = v0;
  swift_task_dealloc(v2);
  sub_100343C00(v3);
  if (v0)
    return swift_task_switch(sub_1003437D4, 0, 0);
  v6 = *(_QWORD *)(v4 + 32);

  (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, 0);
  v7 = *(_QWORD *)(v4 + 24);
  _Block_release(*(const void **)(v4 + 32));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1003437D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);

  v3 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);

  v4 = *(_QWORD *)(v0 + 24);
  _Block_release(*(const void **)(v0 + 32));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for DonateDynamicAppVocabularyLaunchTask()
{
  return objc_opt_self(ICDonateDynamicAppVocabularyLaunchTask);
}

uint64_t sub_1003438A8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003438D4()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1005D9E14);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100130768;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1005D9E10 + dword_1005D9E10))(v2, v3);
}

uint64_t sub_100343938(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100145358;
  return v6();
}

uint64_t sub_100343990(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100145358;
  return v7();
}

uint64_t sub_1003439E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100343B2C(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      v12 = swift_unknownObjectRetain(v9);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10, v12);
      v15 = v14;
      swift_unknownObjectRelease(v9, v14);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_10056A1D8, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_1005D9E48, v17);
}

uint64_t sub_100343B2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18(&qword_1005D4680);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100343B6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100343B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1005D9E44);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100130768;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1005D9E40 + dword_1005D9E40))(a1, v4);
}

uint64_t sub_100343C00(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AppIntentsVocabularyManager(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100343CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

id sub_100343E48()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = OBJC_IVAR___ICTagDetailCell_attributedText;
  v2 = *(void **)&v0[OBJC_IVAR___ICTagDetailCell_attributedText];
  if (v2)
  {
    v3 = &v0[OBJC_IVAR___ICTagDetailCell_text];
    if (*(_QWORD *)&v0[OBJC_IVAR___ICTagDetailCell_text + 8])
    {
      *(_QWORD *)&v0[OBJC_IVAR___ICTagDetailCell_attributedText] = 0;

      if (*(_QWORD *)&v0[v1])
      {
        v4 = *((_QWORD *)v3 + 1);
        if (v4)
        {
          *(_QWORD *)v3 = 0;
          *((_QWORD *)v3 + 1) = 0;
          v5 = swift_bridgeObjectRelease(v4);
          sub_100343E48(v5);
        }
      }
      objc_msgSend(v0, "setNeedsUpdateConfiguration");
    }
  }
  return objc_msgSend(v0, "setNeedsUpdateConfiguration");
}

void sub_100343FBC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  _BOOL8 v4;
  void *v5;
  _BOOL8 v6;
  id v7;

  v1 = sub_1003453F0(&OBJC_IVAR___ICTagDetailCell____lazy_storage___allAction, 1, (uint64_t)&unk_10056A230, (uint64_t)sub_1003457E0);
  v2 = OBJC_IVAR___ICTagDetailCell_tagSelection;
  v3 = *(void **)(v0 + OBJC_IVAR___ICTagDetailCell_tagSelection);
  v4 = v3 && objc_msgSend(v3, "tagOperator") == (id)1;
  objc_msgSend(v1, "setState:", v4);

  v7 = sub_1003453F0(&OBJC_IVAR___ICTagDetailCell____lazy_storage___anyAction, 2, (uint64_t)&unk_10056A208, (uint64_t)sub_1003457C4);
  v5 = *(void **)(v0 + v2);
  v6 = v5 && objc_msgSend(v5, "tagOperator") == (id)2;
  objc_msgSend(v7, "setState:", v6);

}

void sub_1003440AC()
{
  char *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  id v15;

  v1 = *(void **)&v0[OBJC_IVAR___ICTagDetailCell_tagSelection];
  if (v1)
  {
    v2 = v0[OBJC_IVAR___ICTagDetailCell_showOperatorMenuButton];
    v3 = (void *)objc_opt_self(UIColor);
    v4 = v1;
    v5 = objc_msgSend(v3, "secondaryLabelColor");
    v6 = objc_msgSend(v4, "summaryWithJoinOperatorMenu:usingTextStyle:foregroundColor:", v2, UIFontTextStyleFootnote, v5);

    v7 = OBJC_IVAR___ICTagDetailCell_attributedText;
    v8 = *(void **)&v0[OBJC_IVAR___ICTagDetailCell_attributedText];
    *(_QWORD *)&v0[OBJC_IVAR___ICTagDetailCell_attributedText] = v6;
    v15 = v6;

    if (*(_QWORD *)&v0[v7])
    {
      v9 = &v0[OBJC_IVAR___ICTagDetailCell_text];
      v10 = *(_QWORD *)&v0[OBJC_IVAR___ICTagDetailCell_text + 8];
      if (v10)
      {
        *(_QWORD *)v9 = 0;
        *((_QWORD *)v9 + 1) = 0;
        swift_bridgeObjectRelease(v10);
        sub_100343E48();
      }
    }
    objc_msgSend(v0, "setNeedsUpdateConfiguration");

  }
  else
  {
    v11 = OBJC_IVAR___ICTagDetailCell_attributedText;
    v12 = *(void **)&v0[OBJC_IVAR___ICTagDetailCell_attributedText];
    *(_QWORD *)&v0[OBJC_IVAR___ICTagDetailCell_attributedText] = 0;

    if (*(_QWORD *)&v0[v11])
    {
      v13 = &v0[OBJC_IVAR___ICTagDetailCell_text];
      v14 = *(_QWORD *)&v0[OBJC_IVAR___ICTagDetailCell_text + 8];
      if (v14)
      {
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        swift_bridgeObjectRelease(v14);
        sub_100343E48();
      }
    }
    objc_msgSend(v0, "setNeedsUpdateConfiguration");
  }
}

id sub_1003442AC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  objc_class *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  NSString *v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR___ICTagDetailCell____lazy_storage___textView;
  v2 = *(void **)(v0 + OBJC_IVAR___ICTagDetailCell____lazy_storage___textView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICTagDetailCell____lazy_storage___textView);
  }
  else
  {
    v4 = v0;
    v5 = sub_10034559C();
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICTagSelectionMenuReplacementSubstring);
    v8 = v7;
    v9 = (void *)objc_opt_self(UIColor);
    v10 = UIFontTextStyleFootnote;
    v11 = objc_msgSend(v9, "secondaryLabelColor");
    v12 = objc_allocWithZone((Class)type metadata accessor for InlineMenuButtonTextView());
    v13 = sub_1003DAA9C(v5, v6, v8, v10, 2, v11);
    v14 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_1003443BC(void *a1, char a2)
{
  char *v2;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  void *v12;
  id v13;

  if ((a2 & 1) != 0)
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)CATransition), "init");
    v5 = (void *)objc_opt_self(CAMediaTimingFunction);
    v6 = v4;
    v7 = objc_msgSend(v5, "functionWithName:", kCAMediaTimingFunctionEaseInEaseOut);
    objc_msgSend(v6, "setTimingFunction:", v7);

    objc_msgSend(v6, "setType:", kCATransitionFade);
    objc_msgSend(v6, "setDuration:", 0.25);
    v8 = objc_msgSend(v2, "layer");
    static String._unconditionallyBridgeFromObjectiveC(_:)(kCATransitionFade);
    v10 = v9;
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v8, "addAnimation:forKey:", v6, v11, swift_bridgeObjectRelease(v10).n128_f64[0]);

  }
  v12 = *(void **)&v2[OBJC_IVAR___ICTagDetailCell_tagSelection];
  *(_QWORD *)&v2[OBJC_IVAR___ICTagDetailCell_tagSelection] = a1;
  v13 = a1;

  sub_100343FBC();
  sub_1003440AC();

}

id sub_100344588(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  objc_class *ObjectType;
  _QWORD *v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v10 = &v4[OBJC_IVAR___ICTagDetailCell_selectionOperatorChangeHandler];
  *v10 = 0;
  v10[1] = 0;
  v11 = &v4[OBJC_IVAR___ICTagDetailCell_text];
  *v11 = 0;
  v11[1] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagDetailCell_attributedText] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagDetailCell_maxNumberOfLines] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagDetailCell_tagSelection] = 0;
  v4[OBJC_IVAR___ICTagDetailCell_showOperatorMenuButton] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagDetailCell____lazy_storage___allAction] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagDetailCell____lazy_storage___anyAction] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagDetailCell____lazy_storage___menu] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagDetailCell____lazy_storage___listContentView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagDetailCell____lazy_storage___textView] = 0;
  v19.receiver = v4;
  v19.super_class = ObjectType;
  v12 = objc_msgSendSuper2(&v19, "initWithFrame:", a1, a2, a3, a4);
  sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
  v13 = v12;
  v14 = static UITraitCollection.traitsAffectingSizeAndColor.getter();
  v15 = swift_allocObject(&unk_10056A258, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v13);
  v16 = UIView.registerForTraitChanges<A>(_:handler:)(v14, sub_100345820, v15, ObjectType);

  swift_unknownObjectRelease(v16, v17);
  swift_bridgeObjectRelease(v14);
  swift_release(v15);
  return v13;
}

id sub_10034474C(void *a1)
{
  _BYTE *v1;
  objc_class *ObjectType;
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  v4 = &v1[OBJC_IVAR___ICTagDetailCell_selectionOperatorChangeHandler];
  *v4 = 0;
  v4[1] = 0;
  v5 = &v1[OBJC_IVAR___ICTagDetailCell_text];
  *v5 = 0;
  v5[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell_attributedText] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell_maxNumberOfLines] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell_tagSelection] = 0;
  v1[OBJC_IVAR___ICTagDetailCell_showOperatorMenuButton] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell____lazy_storage___allAction] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell____lazy_storage___anyAction] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell____lazy_storage___listContentView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell____lazy_storage___textView] = 0;
  v13.receiver = v1;
  v13.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v13, "initWithCoder:", a1);
  if (v6)
  {
    sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
    v7 = v6;
    v8 = static UITraitCollection.traitsAffectingSizeAndColor.getter();
    v9 = swift_allocObject(&unk_10056A258, 24, 7);
    swift_unknownObjectWeakInit(v9 + 16, v7);
    v10 = UIView.registerForTraitChanges<A>(_:handler:)(v8, sub_100345820, v9, ObjectType);

    swift_unknownObjectRelease(v10, v11);
    swift_bridgeObjectRelease(v8);
    swift_release(v9);
  }
  else
  {

  }
  return v6;
}

void sub_100344900(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  _QWORD *v32;
  id v33;
  id v34;
  _QWORD v36[3];
  uint64_t v37;
  void *v38;

  v2 = v1;
  v4 = type metadata accessor for UIListContentConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v36[-1] - v9;
  v11 = sub_100012E18(&qword_1005D7610);
  __chkstk_darwin(v11);
  v13 = (char *)&v36[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100344BDC();
  static UIBackgroundConfiguration.listGroupedHeaderFooter()();
  v14 = type metadata accessor for UIBackgroundConfiguration(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 0, 1, v14);
  v15 = UICollectionViewCell.backgroundConfiguration.setter(v13);
  v16 = (uint64_t *)(v1 + OBJC_IVAR___ICTagDetailCell_text);
  if (*(_QWORD *)(v1 + OBJC_IVAR___ICTagDetailCell_text + 8))
    goto LABEL_2;
  v23 = *(void **)(v1 + OBJC_IVAR___ICTagDetailCell_attributedText);
  if (!v23)
    return;
  if ((*(_BYTE *)(v1 + OBJC_IVAR___ICTagDetailCell_showOperatorMenuButton) & 1) == 0)
  {
LABEL_2:
    static UIListContentConfiguration.groupedFooter()(v15);
    v18 = type metadata accessor for UICellConfigurationState(0, v17);
    v37 = v18;
    v38 = &protocol witness table for UICellConfigurationState;
    v19 = sub_10012D160(v36);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v19, a1, v18);
    UIListContentConfiguration.updated(for:)(v36);
    v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    sub_1000153C0(v36);
    v21 = v16[1];
    if (v21)
    {
      v22 = *v16;
      swift_bridgeObjectRetain(v16[1]);
      UIListContentConfiguration.text.setter(v22, v21);
    }
    else
    {
      v29 = *(void **)(v2 + OBJC_IVAR___ICTagDetailCell_attributedText);
      if (v29)
      {
        v30 = v29;
        UIListContentConfiguration.attributedText.setter(v29);
      }
    }
    v31 = sub_100345210();
    v37 = v4;
    v38 = &protocol witness table for UIListContentConfiguration;
    v32 = sub_10012D160(v36);
    (*(void (**)(_QWORD *, char *, uint64_t))(v5 + 16))(v32, v10, v4);
    UIListContentView.configuration.setter(v36);

    v33 = sub_100345210();
    objc_msgSend(v33, "setHidden:", 0);

    v34 = sub_1003442AC();
    objc_msgSend(v34, "setHidden:", 1);

    v20(v10, v4);
  }
  else
  {
    v24 = v23;
    v25 = sub_1003442AC();
    v26 = v24;
    sub_1003DA6A0(v23);

    v27 = sub_1003442AC();
    objc_msgSend(v27, "setHidden:", 0);

    v28 = sub_100345210();
    objc_msgSend(v28, "setHidden:", 1);

  }
}

void sub_100344BDC()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  void *v53;
  Class isa;

  v1 = sub_1003442AC();
  v2 = objc_msgSend(v1, "superview");

  if (!v2)
  {
    v3 = sub_100345210();
    objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    v4 = sub_1003442AC();
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

    v5 = objc_msgSend(v0, "contentView");
    v6 = sub_100345210();
    objc_msgSend(v5, "addSubview:", v6);

    v7 = objc_msgSend(v0, "contentView");
    v8 = sub_1003442AC();
    objc_msgSend(v7, "addSubview:", v8);

    v53 = (void *)objc_opt_self(NSLayoutConstraint);
    v9 = sub_100012E18(&qword_1005CF6F0);
    v10 = swift_allocObject(v9, 96, 7);
    *(_OWORD *)(v10 + 16) = xmmword_1004640B0;
    v11 = sub_1003442AC();
    v12 = objc_msgSend(v11, "topAnchor");

    v13 = objc_msgSend(v0, "contentView");
    v14 = objc_msgSend(v13, "topAnchor");

    if (qword_1005CED08 != -1)
      swift_once(&qword_1005CED08, sub_1003453E0);
    v15 = objc_msgSend(v12, "constraintEqualToAnchor:constant:", v14, *(double *)&qword_1005D9E58);

    *(_QWORD *)(v10 + 32) = v15;
    v16 = sub_1003442AC();
    v17 = objc_msgSend(v16, "leadingAnchor");

    v18 = objc_msgSend(v0, "contentView");
    v19 = objc_msgSend(v18, "safeAreaLayoutGuide");

    v20 = objc_msgSend(v19, "leadingAnchor");
    if (qword_1005CED00 != -1)
      swift_once(&qword_1005CED00, sub_1003453D0);
    v21 = objc_msgSend(v17, "constraintEqualToAnchor:constant:", v20, *(double *)&qword_1005D9E50);

    *(_QWORD *)(v10 + 40) = v21;
    v22 = sub_1003442AC();
    v23 = objc_msgSend(v22, "trailingAnchor");

    v24 = objc_msgSend(v0, "contentView");
    v25 = objc_msgSend(v24, "trailingAnchor");

    v26 = objc_msgSend(v23, "constraintEqualToAnchor:constant:", v25, -*(double *)&qword_1005D9E50);
    *(_QWORD *)(v10 + 48) = v26;
    v27 = sub_1003442AC();
    v28 = objc_msgSend(v27, "bottomAnchor");

    v29 = objc_msgSend(v0, "contentView");
    v30 = objc_msgSend(v29, "bottomAnchor");

    v31 = objc_msgSend(v28, "constraintEqualToAnchor:constant:", v30, -*(double *)&qword_1005D9E58);
    *(_QWORD *)(v10 + 56) = v31;
    v32 = sub_100345210();
    v33 = objc_msgSend(v32, "topAnchor");

    v34 = objc_msgSend(v0, "contentView");
    v35 = objc_msgSend(v34, "topAnchor");

    v36 = objc_msgSend(v33, "constraintEqualToAnchor:", v35);
    *(_QWORD *)(v10 + 64) = v36;
    v37 = sub_100345210();
    v38 = objc_msgSend(v37, "leadingAnchor");

    v39 = objc_msgSend(v0, "contentView");
    v40 = objc_msgSend(v39, "leadingAnchor");

    v41 = objc_msgSend(v38, "constraintEqualToAnchor:", v40);
    *(_QWORD *)(v10 + 72) = v41;
    v42 = sub_100345210();
    v43 = objc_msgSend(v42, "trailingAnchor");

    v44 = objc_msgSend(v0, "contentView");
    v45 = objc_msgSend(v44, "trailingAnchor");

    v46 = objc_msgSend(v43, "constraintEqualToAnchor:", v45);
    *(_QWORD *)(v10 + 80) = v46;
    v47 = sub_100345210();
    v48 = objc_msgSend(v47, "bottomAnchor");

    v49 = objc_msgSend(v0, "contentView");
    v50 = objc_msgSend(v49, "bottomAnchor");

    v51 = objc_msgSend(v48, "constraintEqualToAnchor:", v50);
    *(_QWORD *)(v10 + 88) = v51;
    specialized Array._endMutation()(v52);
    sub_1000163BC(0, (unint64_t *)&qword_1005D8F60, NSLayoutConstraint_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v53, "activateConstraints:", isa, swift_bridgeObjectRelease(v10).n128_f64[0]);

  }
}

id sub_100345210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for UIListContentConfiguration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR___ICTagDetailCell____lazy_storage___listContentView;
  v6 = *(void **)(v1 + OBJC_IVAR___ICTagDetailCell____lazy_storage___listContentView);
  if (v6)
  {
    v7 = *(id *)(v1 + OBJC_IVAR___ICTagDetailCell____lazy_storage___listContentView);
  }
  else
  {
    sub_1000163BC(0, (unint64_t *)&qword_1005D7618, UIListContentView_ptr);
    static UIListContentConfiguration.groupedFooter()();
    v8 = (void *)UIListContentView.init(configuration:)(v4);
    v9 = *(void **)(v1 + v5);
    *(_QWORD *)(v1 + v5) = v8;
    v7 = v8;

    v6 = 0;
  }
  v10 = v6;
  return v7;
}

void sub_100345370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_1003440AC();
    objc_msgSend(v5, "setNeedsUpdateConfiguration");

  }
}

void sub_1003453D0()
{
  qword_1005D9E50 = 0x4034000000000000;
}

void sub_1003453E0()
{
  qword_1005D9E58 = 0x4020000000000000;
}

id sub_1003453F0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;

  v5 = *a1;
  v6 = *(void **)&v4[*a1];
  if (v6)
  {
    v7 = *(id *)&v4[*a1];
  }
  else
  {
    v11 = v4;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v12 = (id)ICLocalizedStringFromICTagSelectionOperator(a2);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v14 = v13;

    v15 = String.lowercased()();
    swift_bridgeObjectRelease(v14);
    v16 = swift_allocObject(a3, 24, 7);
    *(_QWORD *)(v16 + 16) = v4;
    v17 = v4;
    v18 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v15._countAndFlagsBits, v15._object, 0, 0, 0, 0, 0, 0, 0, 0, 0, a4, v16);
    v19 = *(void **)&v4[v5];
    *(_QWORD *)&v11[v5] = v18;
    v7 = v18;

    v6 = 0;
  }
  v20 = v6;
  return v7;
}

id sub_100345514(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result;
  void (*v6)(uint64_t);
  uint64_t v7;

  result = *(id *)(a2 + OBJC_IVAR___ICTagDetailCell_tagSelection);
  if (result)
    result = objc_msgSend(result, "setTagOperator:", a3);
  v6 = *(void (**)(uint64_t))(a2 + OBJC_IVAR___ICTagDetailCell_selectionOperatorChangeHandler);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + OBJC_IVAR___ICTagDetailCell_selectionOperatorChangeHandler + 8);
    swift_retain(v7);
    v6(a3);
    return (id)sub_100012C50((uint64_t)v6, v7);
  }
  return result;
}

objc_class *sub_10034559C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::OpaquePointer preferredElementSize;
  id v7;
  Swift::String v8;
  UIMenu v9;
  void *v10;
  id v11;
  UIImage_optional v13;

  v1 = OBJC_IVAR___ICTagDetailCell____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR___ICTagDetailCell____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR___ICTagDetailCell____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize._rawValue = (void *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)preferredElementSize._rawValue + 1) = xmmword_100451BF0;
    *((_QWORD *)preferredElementSize._rawValue + 4) = sub_1003453F0(&OBJC_IVAR___ICTagDetailCell____lazy_storage___allAction, 1, (uint64_t)&unk_10056A230, (uint64_t)sub_1003457E0);
    v7 = sub_1003453F0(&OBJC_IVAR___ICTagDetailCell____lazy_storage___anyAction, 2, (uint64_t)&unk_10056A208, (uint64_t)sub_1003457C4);
    *((_QWORD *)preferredElementSize._rawValue + 5) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v13.value.super.isa = 0;
    v13.is_nil = 0;
    v9.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v13, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize._rawValue, preferredElementSize).super.super.isa;
    v10 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v9;
    v3 = v9.super.super.isa;

    v2 = 0;
  }
  v11 = v2;
  return v3;
}

uint64_t type metadata accessor for TagDetailCell()
{
  return objc_opt_self(ICTagDetailCell);
}

uint64_t sub_1003457A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1003457C4(uint64_t a1)
{
  uint64_t v1;

  return sub_100345514(a1, *(_QWORD *)(v1 + 16), 2);
}

id sub_1003457E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100345514(a1, *(_QWORD *)(v1 + 16), 1);
}

uint64_t sub_1003457FC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100345820(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100345370(a1, a2, v2);
}

id sub_100345828(void *a1)
{
  char *v1;
  uint64_t v2;
  void *v3;
  id v4;
  char *v5;
  uint64_t v6;

  v2 = OBJC_IVAR___ICTagDetailCell_attributedText;
  v3 = *(void **)&v1[OBJC_IVAR___ICTagDetailCell_attributedText];
  *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell_attributedText] = a1;
  v4 = a1;

  if (*(_QWORD *)&v1[v2])
  {
    v5 = &v1[OBJC_IVAR___ICTagDetailCell_text];
    v6 = *(_QWORD *)&v1[OBJC_IVAR___ICTagDetailCell_text + 8];
    if (v6)
    {
      *(_QWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      swift_bridgeObjectRelease(v6);
      sub_100343E48();
    }
  }
  return objc_msgSend(v1, "setNeedsUpdateConfiguration");
}

uint64_t sub_100345894()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1003458CC(void *a1, uint64_t a2)
{
  _BYTE *v2;
  objc_class *ObjectType;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  objc_super v18;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  v2[OBJC_IVAR___ICMoveNavigationController_canAppearAbovePasswordEntryView] = 1;
  objc_allocWithZone((Class)type metadata accessor for MoveViewController());
  v6 = v2;
  v7 = sub_10033A3A4((uint64_t)a1, a2);
  v8 = OBJC_IVAR___ICMoveNavigationController_moveViewController;
  *(_QWORD *)&v6[OBJC_IVAR___ICMoveNavigationController_moveViewController] = v7;

  v9 = *(_QWORD *)&v6[v8];
  v18.receiver = v6;
  v18.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v18, "initWithRootViewController:", v9);
  v11 = (void *)objc_opt_self(UIDevice);
  v12 = v10;
  if (objc_msgSend(v11, "ic_isVision"))
    v13 = 1;
  else
    v13 = 2;
  objc_msgSend(v12, "setModalPresentationStyle:", v13);

  v14 = objc_msgSend(v12, "presentationController");
  if (v14)
  {
    v15 = v14;
    v16 = v12;
    objc_msgSend(v15, "setDelegate:", v16);

  }
  return v12;
}

uint64_t type metadata accessor for MoveNavigationController()
{
  return objc_opt_self(ICMoveNavigationController);
}

uint64_t sub_100345C48()
{
  unsigned __int8 v0;
  id v1;
  uint64_t v2;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(ICDeviceSupport), "isRunningUnitTests");
  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = type metadata accessor for Cohort();
  result = swift_allocObject(v2, 32, 7);
  *(_BYTE *)(result + 16) = v0;
  *(_QWORD *)(result + 24) = v1;
  qword_100601D70 = result;
  return result;
}

unint64_t sub_100345CC0()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  NSString v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v1 = *(void **)(v0 + 24);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v9, v3);
    swift_unknownObjectRelease(v3, v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_1001CBB70((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    sub_1000160C8((uint64_t)v10);
    goto LABEL_8;
  }
  if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, &type metadata for Int, 6) & 1) == 0)
  {
LABEL_8:
    v5 = sub_100345E38(0x63uLL) + 1;
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setInteger:forKey:", v5, v6);

    return v5;
  }
  return v8;
}

uint64_t sub_100345DF4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for Cohort()
{
  return objc_opt_self(_TtC11MobileNotes6Cohort);
}

unint64_t sub_100345E38(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ICArchiveCreator.softwareIdentifier.setter(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(v2[1]);
  *v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t ICArchiveCreator.softwareVersionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t ICArchiveCreator.softwareVersionName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return result;
}

uint64_t ICArchiveCreator.softwareVersion.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t ICArchiveCreator.softwareVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t (*CreateAttachmentIntent.insertionRange.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

double sub_100345FC4()
{
  double result;
  _OWORD v1[2];
  __int128 v2;

  sub_100346378((uint64_t *)v1);
  static ICArchiveCreator.default = v1[0];
  *(_OWORD *)&qword_100601D88 = v1[1];
  result = *(double *)&v2;
  *(_OWORD *)&qword_100601D98 = v2;
  return result;
}

__int128 *ICArchiveCreator.default.unsafeMutableAddressor()
{
  if (qword_1005CED18 != -1)
    swift_once(&qword_1005CED18, sub_100345FC4);
  return &static ICArchiveCreator.default;
}

double static ICArchiveCreator.default.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  if (qword_1005CED18 != -1)
    swift_once(&qword_1005CED18, sub_100345FC4);
  v2 = qword_100601DA0;
  *(_QWORD *)a1 = static ICArchiveCreator.default;
  v3 = *((_QWORD *)&static ICArchiveCreator.default + 1);
  *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)&static ICArchiveCreator.default + 8);
  v4 = v3;
  v5 = unk_100601D90;
  *(_OWORD *)(a1 + 24) = unk_100601D90;
  v6 = v5;
  *(_QWORD *)(a1 + 40) = v2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  *(_QWORD *)&result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

unint64_t sub_1003460C8()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6572617774666F73;
  if (*v0 == 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0xD000000000000012;
}

uint64_t sub_100346130@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10034664C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100346154(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003462E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10034617C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003462E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ICArchiveCreator.encode(to:)(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D9FC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1003462E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICArchiveCreator.CodingKeys, &type metadata for ICArchiveCreator.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v22 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v21 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v21, v5);
    v16 = v3[4];
    v17 = v3[5];
    v20 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v20, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_1003462E0()
{
  unint64_t result;

  result = qword_1005D9FC8;
  if (!qword_1005D9FC8)
  {
    result = swift_getWitnessTable(&unk_100464244, &type metadata for ICArchiveCreator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9FC8);
  }
  return result;
}

double ICArchiveCreator.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1003467BC(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100346364(_QWORD *a1)
{
  return ICArchiveCreator.encode(to:)(a1);
}

uint64_t sub_100346378@<X0>(uint64_t *a1@<X8>)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4 = objc_msgSend(v3, "bundleIdentifier");

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  v8 = objc_msgSend(v2, "mainBundle");
  v9 = objc_msgSend(v8, "infoDictionary");

  if (!v9)
  {
    v29 = 0u;
    v30 = 0u;
    goto LABEL_16;
  }
  v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v10 + 16) || (v11 = sub_100248A98(0xD00000000000001ALL, 0x8000000100478610), (v12 & 1) == 0))
  {
    v29 = 0u;
    v30 = 0u;
    swift_bridgeObjectRelease(v10);
    goto LABEL_16;
  }
  sub_100128424(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v29);
  swift_bridgeObjectRelease(v10);
  if (!*((_QWORD *)&v30 + 1))
  {
LABEL_16:
    sub_1000160C8((uint64_t)&v29);
    v14 = 0;
    v15 = 0;
    goto LABEL_17;
  }
  v13 = swift_dynamicCast(&v27, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if (v13)
    v14 = v27;
  else
    v14 = 0;
  if (v13)
    v15 = v28;
  else
    v15 = 0;
LABEL_17:
  v16 = objc_msgSend(v2, "mainBundle");
  v17 = objc_msgSend(v16, "infoDictionary");

  if (!v17)
  {
    v29 = 0u;
    v30 = 0u;
    goto LABEL_27;
  }
  v18 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (kCFBundleVersionKey)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleVersionKey);
    v21 = v20;
    if (*(_QWORD *)(v18 + 16) && (v22 = sub_100248A98(v19, v20), (v23 & 1) != 0))
    {
      sub_100128424(*(_QWORD *)(v18 + 56) + 32 * v22, (uint64_t)&v29);
    }
    else
    {
      v29 = 0u;
      v30 = 0u;
    }
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v18);
    if (*((_QWORD *)&v30 + 1))
    {
      result = swift_dynamicCast(&v27, &v29, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      v25 = v27;
      v26 = v28;
      if (!(_DWORD)result)
      {
        v25 = 0;
        v26 = 0;
      }
      goto LABEL_28;
    }
LABEL_27:
    result = sub_1000160C8((uint64_t)&v29);
    v25 = 0;
    v26 = 0;
LABEL_28:
    *a1 = v5;
    a1[1] = v7;
    a1[2] = v14;
    a1[3] = v15;
    a1[4] = v25;
    a1[5] = v26;
    return result;
  }
  swift_bridgeObjectRelease(v7);
  result = swift_bridgeObjectRelease(v15);
  __break(1u);
  return result;
}

uint64_t sub_10034664C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000012)
  {
    v4 = 0x800000010048A410;
    if (a2 == 0x800000010048A410)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010048A410, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x800000010048A430)
  {
    v6 = 0x800000010048A430;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010048A430, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6572617774666F73 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease(0xEF6E6F6973726556);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6572617774666F73, 0xEF6E6F6973726556, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

void sub_1003467BC(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48[8];
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v4 = sub_100012E18(&qword_1005D9FE8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (void *)objc_opt_self(NSBundle);
  v9 = objc_msgSend(v8, "mainBundle");
  v10 = objc_msgSend(v9, "bundleIdentifier");

  v45 = v5;
  if (v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v52 = v11;

  }
  else
  {
    v52 = 0;
  }
  v46 = v4;
  v12 = objc_msgSend(v8, "mainBundle");
  v13 = objc_msgSend(v12, "infoDictionary");

  v44 = a2;
  if (!v13)
  {
    v50 = 0u;
    v51 = 0u;
    goto LABEL_13;
  }
  v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v14 + 16) || (v15 = sub_100248A98(0xD00000000000001ALL, 0x8000000100478610), (v16 & 1) == 0))
  {
    v50 = 0u;
    v51 = 0u;
    swift_bridgeObjectRelease(v14);
    goto LABEL_13;
  }
  sub_100128424(*(_QWORD *)(v14 + 56) + 32 * v15, (uint64_t)&v50);
  swift_bridgeObjectRelease(v14);
  if (!*((_QWORD *)&v51 + 1))
  {
LABEL_13:
    sub_1000160C8((uint64_t)&v50);
    v17 = 0;
    goto LABEL_14;
  }
  if (swift_dynamicCast(v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    v17 = v49;
  else
    v17 = 0;
LABEL_14:
  v18 = objc_msgSend(v8, "mainBundle", v44);
  v19 = objc_msgSend(v18, "infoDictionary");

  if (v19)
  {
    v20 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v19, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    if (!kCFBundleVersionKey)
    {
      swift_bridgeObjectRelease(v52);
      swift_bridgeObjectRelease(v17);
      __break(1u);
      return;
    }
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleVersionKey);
    v23 = v22;
    if (*(_QWORD *)(v20 + 16) && (v24 = sub_100248A98(v21, v22), (v25 & 1) != 0))
    {
      sub_100128424(*(_QWORD *)(v20 + 56) + 32 * v24, (uint64_t)&v50);
    }
    else
    {
      v50 = 0u;
      v51 = 0u;
    }
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v20);
    if (*((_QWORD *)&v51 + 1))
    {
      if (swift_dynamicCast(v48, &v50, (char *)&type metadata for Any + 8, &type metadata for String, 6))v26 = v49;
      else
        v26 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    v50 = 0u;
    v51 = 0u;
  }
  sub_1000160C8((uint64_t)&v50);
  v26 = 0;
LABEL_26:
  v27 = v46;
  v28 = a1[3];
  v29 = a1[4];
  sub_10012D19C(a1, v28);
  v30 = sub_1003462E0();
  v31 = v47;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICArchiveCreator.CodingKeys, &type metadata for ICArchiveCreator.CodingKeys, v30, v28, v29);
  if (v31)
  {
    v32 = v52;
    sub_1000153C0(a1);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v17);
  }
  else
  {
    LOBYTE(v50) = 0;
    v33 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v27);
    v35 = v34;
    v47 = v33;
    swift_bridgeObjectRelease(v52);
    LOBYTE(v50) = 1;
    v36 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v27);
    v38 = v37;
    v52 = v36;
    swift_bridgeObjectRelease(v17);
    LOBYTE(v50) = 2;
    v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v50, v27);
    v41 = v40;
    v42 = swift_bridgeObjectRelease(v26);
    (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v7, v27, v42);
    sub_1000153C0(a1);
    v43 = v44;
    *v44 = v47;
    v43[1] = v35;
    v43[2] = v52;
    v43[3] = v38;
    v43[4] = v39;
    v43[5] = v41;
  }
}

uint64_t destroy for ICArchiveCreator(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

_QWORD *initializeWithCopy for ICArchiveCreator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for ICArchiveCreator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for ICArchiveCreator(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveCreator(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveCreator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveCreator()
{
  return &type metadata for ICArchiveCreator;
}

uint64_t storeEnumTagSinglePayload for ICArchiveCreator.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100346ED0 + 4 * byte_100464115[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100346F04 + 4 * asc_100464110[v4]))();
}

uint64_t sub_100346F04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100346F0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100346F14);
  return result;
}

uint64_t sub_100346F20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100346F28);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100346F2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100346F34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveCreator.CodingKeys()
{
  return &type metadata for ICArchiveCreator.CodingKeys;
}

unint64_t sub_100346F54()
{
  unint64_t result;

  result = qword_1005D9FD0;
  if (!qword_1005D9FD0)
  {
    result = swift_getWitnessTable(&unk_10046421C, &type metadata for ICArchiveCreator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9FD0);
  }
  return result;
}

unint64_t sub_100346F9C()
{
  unint64_t result;

  result = qword_1005D9FD8;
  if (!qword_1005D9FD8)
  {
    result = swift_getWitnessTable(&unk_10046418C, &type metadata for ICArchiveCreator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9FD8);
  }
  return result;
}

unint64_t sub_100346FE4()
{
  unint64_t result;

  result = qword_1005D9FE0;
  if (!qword_1005D9FE0)
  {
    result = swift_getWitnessTable(&unk_1004641B4, &type metadata for ICArchiveCreator.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005D9FE0);
  }
  return result;
}

uint64_t type metadata accessor for SmartFolderComposerDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DA018;
  if (!qword_1005DA018)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SmartFolderComposerDataSource);
  return result;
}

uint64_t sub_100347064(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = &unk_1004642E0;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = &unk_1004642F8;
  v2[3] = &unk_1004642E0;
  v2[4] = &unk_100464310;
  return swift_initClassMetadata2(a1, 0, 5, v2, a1 + qword_100601DA8);
}

unint64_t sub_1003470D0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003484DC(*a1);
  *a2 = result;
  return result;
}

void sub_1003470F8(_QWORD *a1@<X8>)
{
  *a1 = &off_100555AA8;
}

unint64_t sub_100347108@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003484EC(*a1);
  *a2 = result;
  return result;
}

void sub_100347130(_QWORD *a1@<X8>)
{
  *a1 = &off_100555B70;
}

uint64_t sub_100347140(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;

  v2 = v1;
  v4 = sub_100012E18(&qword_1005DA0C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10034947C();
  v9 = sub_1003494C0();
  NSDiffableDataSourceSnapshot.init()(&type metadata for SmartFolderComposerSection, &type metadata for SmartFolderComposerItem, v8, v9);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100557140);
  v25 = 0;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_100557168, &v25, v4);
  v24 = 1;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_100557190, &v24, v4);
  v10 = *(void **)(v2 + qword_1005DA000);
  if (v10)
  {
    v11 = (void *)objc_opt_self(ICHashtag);
    v12 = v10;
    v13 = objc_msgSend(v11, "allVisibleHashtagsInContext:", v12);
    v14 = sub_1002A9114();
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    if ((unint64_t)v15 >> 62)
    {
      if (v15 < 0)
        v18 = v15;
      else
        v18 = v15 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v15);
      v19 = _CocoaArrayWrapper.endIndex.getter(v18);

      swift_bridgeObjectRelease_n(v15, 2);
      if (!v19)
        goto LABEL_5;
    }
    else
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRelease(v15);

      if (!v16)
        goto LABEL_5;
    }
    v21 = 2;
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_1005571B8, &v21, v4);
  }
LABEL_5:
  v23 = 2;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_1005571E0, &v23, v4);
  if (*(_BYTE *)(v2 + qword_1005D9FF0) == 1)
  {
    v22 = 3;
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_100557208, &v22, v4);
  }
  dispatch thunk of UICollectionViewDiffableDataSource.apply(_:animatingDifferences:completion:)(v7, a1 & 1, 0, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100347388()
{
  return sub_100347CD4(1, (uint64_t (*)(_QWORD))type metadata accessor for SmartFolderComposerTextFieldCell);
}

id sub_100347398(uint64_t a1)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, 0);

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = (uint64_t *)(a1 + OBJC_IVAR___ICTagDetailCell_text);
  v9 = *(_QWORD *)(a1 + OBJC_IVAR___ICTagDetailCell_text + 8);
  *v8 = v5;
  v8[1] = v7;
  swift_bridgeObjectRelease(v9);
  return sub_100343E48();
}

void sub_100347464(uint64_t a1, int a2, int a3, id a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  double v15;
  NSString v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  if (a4)
  {
    v11 = objc_msgSend(a4, "title");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v13 = v12;

  }
  else
  {
    v13 = a6;
    swift_bridgeObjectRetain(a6);
  }
  v14 = sub_100376928();
  if (v13)
  {
    v16 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v15 = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v14, "setText:", v16, v15);

  v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell_textDidChange);
  v18 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell_textDidChange);
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell_textDidChange + 8);
  *v17 = a7;
  v17[1] = a8;
  sub_100166B74(a7, a8);
  sub_100012C50(v18, v19);
  v20 = sub_100376928();
  v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v21, "localizedStringForKey:value:table:", v22, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  v25 = v24;

  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "setAccessibilityLabel:", v26, swift_bridgeObjectRelease(v25).n128_f64[0]);

}

uint64_t sub_100347620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13 = String._bridgeToObjectiveC()();
  v14 = objc_msgSend(v12, "localizedStringForKey:value:table:", v13, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v16 = v15;

  v17 = sub_100376928();
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v17, "setPlaceholder:", v18, swift_bridgeObjectRelease(v16).n128_f64[0]);

  v19 = (uint64_t *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerCreateTagCell_tagDidChange);
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerCreateTagCell_tagDidChange);
  v21 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerCreateTagCell_tagDidChange + 8);
  *v19 = a4;
  v19[1] = a5;
  sub_100166B74(a4, a5);
  sub_100012C50(v20, v21);
  v22 = (uint64_t *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerCreateTagCell_tagDidEnter);
  v23 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerCreateTagCell_tagDidEnter);
  v24 = v22[1];
  *v22 = a6;
  v22[1] = a7;
  sub_100166B74(a6, a7);
  return sub_100012C50(v23, v24);
}

uint64_t sub_100347784(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, 0, 0);

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  v14 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell_text];
  v15 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell_text + 8];
  *v14 = v11;
  v14[1] = v13;
  objc_msgSend(a1, "setNeedsUpdateConfiguration", swift_bridgeObjectRelease(v15).n128_f64[0]);
  v16 = (uint64_t *)&a1[OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell_onDidChange];
  v17 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell_onDidChange];
  v18 = v16[1];
  *v16 = a4;
  v16[1] = a5;
  sub_100166B74(a4, a5);
  return sub_100012C50(v17, v18);
}

void sub_100347898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1003478D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  char v8;

  v8 = 0;
  v6 = type metadata accessor for TagDetailCell();
  return UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(a4, v4, &v8, v6, &type metadata for SmartFolderComposerItem);
}

id sub_100347A10(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t Strong;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char v14[24];

  v6 = a5 + 16;
  swift_beginAccess(a5 + 16, v14, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v6);
  if (Strong)
  {
    v8 = (void *)Strong;
    v10 = *(_QWORD *)(Strong + qword_1005DA010);
    v9 = *(_QWORD *)(Strong + qword_1005DA010 + 8);
    swift_bridgeObjectRetain(v9);

  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v11 = &a1[OBJC_IVAR____TtC11MobileNotes13TagHeaderCell_text];
  v12 = *(_QWORD *)&a1[OBJC_IVAR____TtC11MobileNotes13TagHeaderCell_text + 8];
  *(_QWORD *)v11 = v10;
  *((_QWORD *)v11 + 1) = v9;
  swift_bridgeObjectRelease(v12);
  return objc_msgSend(a1, "setNeedsUpdateConfiguration");
}

id sub_100347AB8(uint64_t a1)
{
  id result;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;

  result = (id)IndexPath.section.getter(a1);
  if (result == (id)3)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, 0, 0);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9 = (uint64_t *)(a1 + OBJC_IVAR___ICTagDetailCell_text);
    v10 = *(_QWORD *)(a1 + OBJC_IVAR___ICTagDetailCell_text + 8);
    *v9 = v6;
    v9[1] = v8;
    swift_bridgeObjectRelease(v10);
    return sub_100343E48();
  }
  return result;
}

uint64_t sub_100347B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v22;

  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  if (v11 == a2 && v12 == a3)
  {
    swift_bridgeObjectRelease(a3);
    goto LABEL_13;
  }
  v14 = v12;
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, a3, 0);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
LABEL_13:
    v22 = type metadata accessor for TagHeaderCell();
    return UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)(a5, a4, v22);
  }
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionFooter);
  if (v16 == a2 && v17 == a3)
  {
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    v19 = v17;
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a2, a3, 0);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
      return 0;
  }
  v22 = type metadata accessor for TagDetailCell();
  a5 = a6;
  return UICollectionView.dequeueConfiguredReusableSupplementary<A>(using:for:)(a5, a4, v22);
}

uint64_t sub_100347CA4()
{
  return sub_100347CD4(3, (uint64_t (*)(_QWORD))type metadata accessor for SmartFolderComposerTextFieldCell);
}

uint64_t sub_100347CB4()
{
  return sub_100347CD4(2, (uint64_t (*)(_QWORD))type metadata accessor for TagContainerCell);
}

uint64_t sub_100347CC4()
{
  return sub_100347CD4(4, (uint64_t (*)(_QWORD))type metadata accessor for SmartFolderComposerSwitchCell);
}

uint64_t sub_100347CD4(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  void *v12;
  Class isa;
  id v14;
  uint64_t v15;
  uint64_t result;
  _BYTE v17[15];
  char v18;

  v5 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v5);
  v7 = &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = a1;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v18);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10012D210((uint64_t)v7);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v11, v7, v8);
    v12 = *(void **)(v2 + qword_1005D9FF8);
    if (*(_BYTE *)(v2 + qword_1005DA008) == 1)
    {
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v14 = objc_msgSend(v12, "cellForItemAtIndexPath:", isa);

      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
      if (!v14)
        return 0;
    }
    else
    {
      v14 = (id)dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:cellForItemAt:)(*(_QWORD *)(v2 + qword_1005D9FF8), v11);
      (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    }
    v15 = a2(0);
    result = swift_dynamicCastClass(v14, v15);
    if (result)
      return result;

  }
  return 0;
}

uint64_t sub_100347E78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSString v18;
  Class isa;
  id v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _BYTE v42[15];
  char v43;

  v2 = v1;
  v4 = sub_100012E18(&qword_1005DA0C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v42[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for IndexPath(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = &v42[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = IndexPath.init(item:section:)(0, 2);
  dispatch thunk of UICollectionViewDiffableDataSource.snapshot()(v12);
  v43 = 2;
  v13 = NSDiffableDataSourceSnapshot.numberOfItems(inSection:)(&v43, v4);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  if (v13 >= 2)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
    v16 = v14;
    v17 = *(void **)(v2 + qword_1005D9FF8);
    if (*(_BYTE *)(v2 + qword_1005DA008) == 1)
    {
      v18 = String._bridgeToObjectiveC()();
      isa = IndexPath._bridgeToObjectiveC()().super.isa;
      v20 = objc_msgSend(v17, "supplementaryViewForElementKind:atIndexPath:", v18, isa);
      swift_bridgeObjectRelease(v16);

      if (!v20)
        return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
    }
    else
    {
      v20 = (id)dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:viewForSupplementaryElementOfKind:at:)(*(_QWORD *)(v2 + qword_1005D9FF8), v15, v14, v11);
      swift_bridgeObjectRelease(v16);
    }
    v21 = type metadata accessor for TagHeaderCell();
    v22 = swift_dynamicCastClass(v20, v21);
    if (v22)
    {
      v23 = (char *)v22;
      v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v25 = String._bridgeToObjectiveC()();
      v26 = objc_msgSend(v24, "localizedStringForKey:value:table:", v25, 0, 0);

      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      v30 = sub_100012E18((uint64_t *)&unk_1005D5630);
      v31 = swift_allocObject(v30, 72, 7);
      *(_OWORD *)(v31 + 16) = xmmword_100451C20;
      *(_QWORD *)(v31 + 56) = &type metadata for Int;
      *(_QWORD *)(v31 + 64) = &protocol witness table for Int;
      *(_QWORD *)(v31 + 32) = a1;
      v32 = static String.localizedStringWithFormat(_:_:)(v27, v29, v31);
      v34 = v33;
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v29);
      v35 = (uint64_t *)(v2 + qword_1005DA010);
      v36 = v35[1];
      *v35 = v32;
      v35[1] = v34;
      swift_bridgeObjectRelease(v36);
      v38 = *v35;
      v37 = v35[1];
      v39 = &v23[OBJC_IVAR____TtC11MobileNotes13TagHeaderCell_text];
      v40 = *(_QWORD *)&v23[OBJC_IVAR____TtC11MobileNotes13TagHeaderCell_text + 8];
      *(_QWORD *)v39 = v38;
      *((_QWORD *)v39 + 1) = v37;
      swift_bridgeObjectRetain(v37);
      objc_msgSend(v23, "setNeedsUpdateConfiguration", swift_bridgeObjectRelease(v40).n128_f64[0]);
    }

  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1003481A4()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1005DA010 + 8));
}

uint64_t sub_1003481E4(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_1005DA010 + 8));
}

void sub_100348230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_release(a3);
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.SmartFolderComposerDataSource", 41, "init(collectionView:cellProvider:)", 34, 0);
  __break(1u);
}

uint64_t sub_100348264()
{
  return type metadata accessor for SmartFolderComposerDataSource(0);
}

uint64_t storeEnumTagSinglePayload for SmartFolderComposerItem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1003482B8 + 4 * byte_1004642AA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1003482EC + 4 * byte_1004642A5[v4]))();
}

uint64_t sub_1003482EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003482F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003482FCLL);
  return result;
}

uint64_t sub_100348308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100348310);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100348314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10034831C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SmartFolderComposerItem()
{
  return &type metadata for SmartFolderComposerItem;
}

uint64_t storeEnumTagSinglePayload for SmartFolderComposerSection(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100348384 + 4 * byte_1004642B4[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003483B8 + 4 * byte_1004642AF[v4]))();
}

uint64_t sub_1003483B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003483C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003483C8);
  return result;
}

uint64_t sub_1003483D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003483DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1003483E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003483E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SmartFolderComposerSection()
{
  return &type metadata for SmartFolderComposerSection;
}

uint64_t sub_100348404()
{
  return sub_10012C9A4(&qword_1005DA068, &qword_1005DA070);
}

unint64_t sub_10034842C()
{
  unint64_t result;

  result = qword_1005DA078;
  if (!qword_1005DA078)
  {
    result = swift_getWitnessTable(&unk_10046442C, &type metadata for SmartFolderComposerSection);
    atomic_store(result, (unint64_t *)&qword_1005DA078);
  }
  return result;
}

uint64_t sub_100348470()
{
  return sub_10012C9A4(&qword_1005DA080, &qword_1005DA088);
}

unint64_t sub_100348498()
{
  unint64_t result;

  result = qword_1005DA090;
  if (!qword_1005DA090)
  {
    result = swift_getWitnessTable(&unk_100464504, &type metadata for SmartFolderComposerItem);
    atomic_store(result, (unint64_t *)&qword_1005DA090);
  }
  return result;
}

unint64_t sub_1003484DC(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

unint64_t sub_1003484EC(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

char *sub_1003484FC(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t *v47;
  id v48;
  NSString v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  void *v56;
  id v57;
  char *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t TagCell;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v127;
  char *v128;
  id v129;
  _BYTE *v130;
  char *v131;
  char *v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;

  v16 = v15;
  v150 = a8;
  v137 = a7;
  v136 = a6;
  v135 = a5;
  v134 = a4;
  v138 = a3;
  v133 = a2;
  v129 = a1;
  v146 = a15;
  v145 = a14;
  v144 = a13;
  v143 = a12;
  v141 = a11;
  v148 = a9;
  v140 = a10;
  v17 = sub_100012E18(&qword_1005D6FC0);
  v157 = *(_QWORD *)(v17 - 8);
  v158 = v17;
  v159 = *(_QWORD *)(v157 + 64);
  v18 = __chkstk_darwin(v17);
  v156 = (char *)&v127 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v153 = (char *)&v127 - v20;
  v154 = sub_100012E18(&qword_1005DA098);
  v152 = *(_QWORD *)(v154 - 8);
  v155 = *(_QWORD *)(v152 + 64);
  v21 = __chkstk_darwin(v154);
  v151 = (char *)&v127 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v171 = (char *)&v127 - v23;
  v24 = sub_100012E18(&qword_1005DA0A0);
  v176 = *(_QWORD *)(v24 - 8);
  v177 = v24;
  v149 = *(_QWORD *)(v176 + 64);
  v25 = __chkstk_darwin(v24);
  v170 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v166 = (char *)&v127 - v27;
  v28 = sub_100012E18(&qword_1005DA0A8);
  v174 = *(_QWORD *)(v28 - 8);
  v175 = v28;
  v147 = *(_QWORD *)(v174 + 64);
  v29 = __chkstk_darwin(v28);
  v169 = (char *)&v127 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v162 = (char *)&v127 - v31;
  v32 = sub_100012E18(&qword_1005DA0B0);
  v164 = *(_QWORD *)(v32 - 8);
  v165 = v32;
  v142 = *(_QWORD *)(v164 + 64);
  v33 = __chkstk_darwin(v32);
  v168 = (char *)&v127 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v160 = (char *)&v127 - v35;
  v173 = sub_100012E18(&qword_1005DA0B8);
  v163 = *(_QWORD *)(v173 - 8);
  v139 = *(_QWORD *)(v163 + 64);
  v36 = __chkstk_darwin(v173);
  v167 = (char *)&v127 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v39 = (char *)&v127 - v38;
  v172 = sub_100012E18(&qword_1005DA0C0);
  v161 = *(_QWORD *)(v172 - 8);
  v40 = *(_QWORD *)(v161 + 64);
  v41 = __chkstk_darwin(v172);
  v128 = (char *)&v127 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v41);
  v43 = (char *)&v127 - v42;
  v44 = qword_1005D9FF0;
  v45 = v16;
  *((_BYTE *)v16 + v44) = ICInternalSettingsSmartFoldersCanIncludeRecentlyDeletedNotes();
  v46 = qword_1005DA000;
  *(_QWORD *)&v45[qword_1005DA000] = 0;
  v45[qword_1005DA008] = 1;
  v47 = (uint64_t *)&v45[qword_1005DA010];
  v48 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v49 = String._bridgeToObjectiveC()();
  v50 = objc_msgSend(v48, "localizedStringForKey:value:table:", v49, 0, 0);

  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  v53 = v52;

  *v47 = v51;
  v47[1] = v53;
  v54 = v129;
  *(_QWORD *)&v45[qword_1005D9FF8] = v129;
  v55 = *(void **)&v45[v46];
  v56 = (void *)v138;
  *(_QWORD *)&v45[v46] = v138;
  v130 = v45;
  v129 = v54;
  v57 = v56;

  v138 = type metadata accessor for TagDetailCell();
  v58 = v43;
  v132 = v43;
  UICollectionView.CellRegistration.init(handler:)(sub_100347398, 0, v138, &type metadata for SmartFolderComposerItem);
  v59 = (_QWORD *)swift_allocObject(&unk_10056A5B8, 56, 7);
  v60 = v133;
  v61 = v134;
  v59[2] = v133;
  v59[3] = v61;
  v62 = v136;
  v59[4] = v135;
  v59[5] = v62;
  v63 = v137;
  v59[6] = v137;
  v64 = v60;
  sub_100166B74(v62, v63);
  v65 = type metadata accessor for SmartFolderComposerTextFieldCell();
  v66 = v39;
  v131 = v39;
  UICollectionView.CellRegistration.init(handler:)(sub_100348FB4, v59, v65, &type metadata for SmartFolderComposerItem);
  v67 = swift_allocObject(&unk_10056A5E0, 32, 7);
  v68 = v140;
  v69 = v141;
  *(_QWORD *)(v67 + 16) = v140;
  *(_QWORD *)(v67 + 24) = v69;
  sub_100166B74(v68, v69);
  v70 = type metadata accessor for TagContainerCell();
  v71 = v160;
  UICollectionView.CellRegistration.init(handler:)(sub_1002A8F54, v67, v70, &type metadata for SmartFolderComposerItem);
  v72 = (_QWORD *)swift_allocObject(&unk_10056A608, 48, 7);
  v73 = v143;
  v74 = v144;
  v72[2] = v143;
  v72[3] = v74;
  v75 = v145;
  v76 = v146;
  v72[4] = v145;
  v72[5] = v76;
  sub_100166B74(v73, v74);
  sub_100166B74(v75, v76);
  TagCell = type metadata accessor for SmartFolderComposerCreateTagCell();
  v78 = v162;
  UICollectionView.CellRegistration.init(handler:)(sub_100349004, v72, TagCell, &type metadata for SmartFolderComposerItem);
  v79 = swift_allocObject(&unk_10056A630, 32, 7);
  v80 = v150;
  v81 = v148;
  *(_QWORD *)(v79 + 16) = v150;
  *(_QWORD *)(v79 + 24) = v81;
  sub_100166B74(v80, v81);
  v82 = type metadata accessor for SmartFolderComposerSwitchCell();
  v83 = v166;
  UICollectionView.CellRegistration.init(handler:)(sub_100349040, v79, v82, &type metadata for SmartFolderComposerItem);
  v84 = v161;
  (*(void (**)(char *, char *, uint64_t))(v161 + 16))((char *)&v127 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0), v58, v172);
  v85 = v163;
  (*(void (**)(char *, char *, uint64_t))(v163 + 16))(v167, v66, v173);
  v86 = v164;
  v87 = v71;
  v88 = v165;
  (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v168, v87, v165);
  v89 = v174;
  (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v169, v78, v175);
  v90 = v176;
  (*(void (**)(char *, char *, uint64_t))(v176 + 16))(v170, v83, v177);
  v91 = *(unsigned __int8 *)(v84 + 80);
  v92 = v84;
  v93 = (v91 + 16) & ~v91;
  v94 = *(unsigned __int8 *)(v85 + 80);
  v95 = v85;
  v96 = (v40 + v94 + v93) & ~v94;
  v97 = *(unsigned __int8 *)(v86 + 80);
  v98 = (v139 + v97 + v96) & ~v97;
  v99 = *(unsigned __int8 *)(v89 + 80);
  v100 = (v142 + v99 + v98) & ~v99;
  v101 = *(unsigned __int8 *)(v90 + 80);
  v102 = (v147 + v101 + v100) & ~v101;
  v103 = swift_allocObject(&unk_10056A658, v102 + v149, v91 | v94 | v97 | v99 | v101 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v92 + 32))(v103 + v93, v128, v172);
  (*(void (**)(uint64_t, char *, uint64_t))(v95 + 32))(v103 + v96, v167, v173);
  (*(void (**)(uint64_t, char *, uint64_t))(v86 + 32))(v103 + v98, v168, v88);
  (*(void (**)(uint64_t, char *, uint64_t))(v174 + 32))(v103 + v100, v169, v175);
  (*(void (**)(uint64_t, char *, uint64_t))(v176 + 32))(v103 + v102, v170, v177);
  v104 = (void *)UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v129, sub_1003491EC, v103);
  v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionHeader);
  v107 = v106;
  v108 = swift_allocObject(&unk_10056A680, 24, 7);
  swift_unknownObjectWeakInit(v108 + 16, v104);
  v109 = type metadata accessor for TagHeaderCell();
  v170 = v104;
  v110 = v171;
  UICollectionView.SupplementaryRegistration.init(elementKind:handler:)(v105, v107, sub_100349320, v108, v109);
  v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(UICollectionElementKindSectionFooter);
  v112 = v153;
  UICollectionView.SupplementaryRegistration.init(elementKind:handler:)(v111, v113, sub_100347AB8, 0, v138);
  v114 = v152;
  v115 = v151;
  v116 = v154;
  (*(void (**)(char *, char *, uint64_t))(v152 + 16))(v151, v110, v154);
  v118 = v157;
  v117 = v158;
  v119 = v156;
  (*(void (**)(char *, char *, uint64_t))(v157 + 16))(v156, v112, v158);
  v120 = *(unsigned __int8 *)(v114 + 80);
  v121 = (v120 + 16) & ~v120;
  v122 = *(unsigned __int8 *)(v118 + 80);
  v123 = (v155 + v122 + v121) & ~v122;
  v124 = swift_allocObject(&unk_10056A6A8, v123 + v159, v120 | v122 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v114 + 32))(v124 + v121, v115, v116);
  (*(void (**)(uint64_t, char *, uint64_t))(v118 + 32))(v124 + v123, v119, v117);
  v125 = v170;
  dispatch thunk of UICollectionViewDiffableDataSource.supplementaryViewProvider.setter(sub_1003493E4, v124);

  sub_100347140(0);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v112, v117);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v171, v116);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v166, v177);
  (*(void (**)(char *, uint64_t))(v174 + 8))(v162, v175);
  (*(void (**)(char *, uint64_t))(v164 + 8))(v160, v165);
  (*(void (**)(char *, uint64_t))(v163 + 8))(v131, v173);
  (*(void (**)(char *, uint64_t))(v161 + 8))(v132, v172);
  return v125;
}

uint64_t sub_100348F78()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_100348FB4(uint64_t a1, int a2, int a3)
{
  uint64_t v3;

  sub_100347464(a1, a2, a3, *(id *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
}

uint64_t sub_100348FC8()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100349004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_100347620(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_100349014()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100349040(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100347784(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_100349048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = sub_100012E18(&qword_1005DA0C0);
  v27 = *(_QWORD *)(v29 - 8);
  v1 = *(unsigned __int8 *)(v27 + 80);
  v24 = (v1 + 16) & ~v1;
  v2 = *(_QWORD *)(v27 + 64);
  v28 = sub_100012E18(&qword_1005DA0B8);
  v22 = *(_QWORD *)(v28 - 8);
  v3 = *(unsigned __int8 *)(v22 + 80);
  v4 = (v24 + v2 + v3) & ~v3;
  v20 = v4;
  v5 = *(_QWORD *)(v22 + 64);
  v26 = sub_100012E18(&qword_1005DA0B0);
  v6 = *(_QWORD *)(v26 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v4 + v5 + v7) & ~v7;
  v19 = v8;
  v9 = *(_QWORD *)(v6 + 64);
  v25 = sub_100012E18(&qword_1005DA0A8);
  v10 = *(_QWORD *)(v25 - 8);
  v11 = *(unsigned __int8 *)(v10 + 80);
  v12 = (v8 + v9 + v11) & ~v11;
  v13 = *(_QWORD *)(v10 + 64);
  v23 = sub_100012E18(&qword_1005DA0A0);
  v14 = *(_QWORD *)(v23 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v16 = (v12 + v13 + v15) & ~v15;
  v21 = v16 + *(_QWORD *)(v14 + 64);
  v17 = v1 | v3 | v7 | v11 | v15 | 7;
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v24, v29);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v0 + v20, v28);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v19, v26);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v0 + v12, v25);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v0 + v16, v23);
  return swift_deallocObject(v0, v21, v17);
}

void sub_1003491EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100012E18(&qword_1005DA0C0);
  sub_100012E18(&qword_1005DA0B8);
  sub_100012E18(&qword_1005DA0B0);
  sub_100012E18(&qword_1005DA0A8);
  sub_100012E18(&qword_1005DA0A0);
  sub_100347898(a1, a2, a3);
}

uint64_t sub_1003492FC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

id sub_100349320(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_100347A10(a1, a2, a3, a4, v4);
}

uint64_t sub_100349328()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100012E18(&qword_1005DA098);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_100012E18(&qword_1005D6FC0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1003493E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_QWORD *)(sub_100012E18(&qword_1005DA098) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012E18(&qword_1005D6FC0) - 8) + 80);
  return sub_100347B98(a1, a2, a3, a4, v4 + v10, v4 + ((v10 + v11 + v12) & ~v12));
}

unint64_t sub_10034947C()
{
  unint64_t result;

  result = qword_1005DA0D0;
  if (!qword_1005DA0D0)
  {
    result = swift_getWitnessTable(&unk_1004643EC, &type metadata for SmartFolderComposerSection);
    atomic_store(result, (unint64_t *)&qword_1005DA0D0);
  }
  return result;
}

unint64_t sub_1003494C0()
{
  unint64_t result;

  result = qword_1005DA0D8;
  if (!qword_1005DA0D8)
  {
    result = swift_getWitnessTable(&unk_1004644C4, &type metadata for SmartFolderComposerItem);
    atomic_store(result, (unint64_t *)&qword_1005DA0D8);
  }
  return result;
}

uint64_t sub_100349504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  id v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;

  v2 = v1;
  v4 = type metadata accessor for TableID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
    goto LABEL_15;
  v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v9 = _swiftEmptyArrayStorage;
    if (!v8)
      return (uint64_t)v9;
    v19 = _swiftEmptyArrayStorage;
    result = sub_10013731C(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0)
      break;
    v11 = 0;
    v9 = v19;
    v17 = v2;
    v18 = a1 & 0xC000000000000001;
    v2 = a1;
    while (v8 != v11)
    {
      if (v18)
        v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v11, a1);
      else
        v12 = *(id *)(a1 + 8 * v11 + 32);
      v13 = v12;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, (uint64_t)v12 + OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_id, v4);

      v19 = v9;
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
      {
        sub_10013731C(v14 > 1, v15 + 1, 1);
        v9 = v19;
      }
      ++v11;
      v9[2] = v15 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))((unint64_t)v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v15, v7, v4);
      a1 = v2;
      if (v8 == v11)
        return (uint64_t)v9;
    }
    __break(1u);
LABEL_15:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003496D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for TableEntity(0);
  result = EntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

_QWORD *sub_100349718(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_100349750(a1, a2, a3, type metadata accessor for VisibleNotesQuery.Comparator);
}

_QWORD *sub_100349734(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_100349750(a1, a2, a3, type metadata accessor for VisibleAttachmentsQuery.Comparator);
}

_QWORD *sub_100349750(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = *(_QWORD *)(a3 + 16);
  result = _swiftEmptyArrayStorage;
  v18 = (unint64_t)_swiftEmptyArrayStorage;
  if (v6)
  {
    v9 = *(_QWORD *)(a4(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain(a3);
    do
    {
      v13 = a1(&v17, v10);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        return (_QWORD *)swift_bridgeObjectRelease(v18);
      }
      v14 = v17;
      if (v17)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v16 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v15 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v16 >= v15 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
        specialized Array._endMutation()(v12);
      }
      v10 += v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(a3);
    return (_QWORD *)v18;
  }
  return result;
}

void sub_100349888(void (*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];
  unint64_t v38;

  v4 = v3;
  v5 = a3;
  v38 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    v10 = sub_100167280();
    v11 = Set.Iterator.init(_cocoa:)(v8, v9, v10);
    v5 = v37[1];
    v35 = v37[2];
    v12 = v37[3];
    v13 = v37[4];
    v14 = v37[5];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v35 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain(a3);
    v12 = v16;
    v13 = 0;
  }
  v34 = (unint64_t)(v12 + 64) >> 6;
  while (v5 < 0)
  {
    v23 = __CocoaSet.Iterator.next()(v11);
    if (!v23)
      goto LABEL_42;
    v24 = v23;
    v36 = v23;
    v25 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    swift_unknownObjectRetain(v24);
    swift_dynamicCast(v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v25, 7);
    v26 = (id)v37[0];
    swift_unknownObjectRelease(v24, v27);
    v22 = v13;
    v20 = v14;
    if (!v26)
      goto LABEL_42;
LABEL_31:
    v37[0] = v26;
    a1(&v36, v37);

    if (v4)
    {
      sub_1001452E0(v5);
      swift_bridgeObjectRelease(v38);
      return;
    }
    v30 = v36;
    if (v36)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v32 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v31 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v32 >= v31 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
      v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
      v11 = specialized Array._endMutation()(v19);
    }
    v13 = v22;
    v14 = v20;
  }
  if (v14)
  {
    v20 = (v14 - 1) & v14;
    v21 = __clz(__rbit64(v14)) | (v13 << 6);
    v22 = v13;
LABEL_30:
    v26 = *(id *)(*(_QWORD *)(v5 + 48) + 8 * v21);
    if (!v26)
      goto LABEL_42;
    goto LABEL_31;
  }
  v22 = v13 + 1;
  if (!__OFADD__(v13, 1))
  {
    if (v22 >= v34)
      goto LABEL_42;
    v28 = *(_QWORD *)(v35 + 8 * v22);
    if (!v28)
    {
      v29 = v13 + 2;
      if (v13 + 2 >= v34)
        goto LABEL_42;
      v28 = *(_QWORD *)(v35 + 8 * v29);
      if (v28)
        goto LABEL_28;
      v29 = v13 + 3;
      if (v13 + 3 >= v34)
        goto LABEL_42;
      v28 = *(_QWORD *)(v35 + 8 * v29);
      if (v28)
        goto LABEL_28;
      v29 = v13 + 4;
      if (v13 + 4 >= v34)
        goto LABEL_42;
      v28 = *(_QWORD *)(v35 + 8 * v29);
      if (v28)
      {
LABEL_28:
        v22 = v29;
      }
      else
      {
        v22 = v13 + 5;
        if (v13 + 5 >= v34)
          goto LABEL_42;
        v28 = *(_QWORD *)(v35 + 8 * v22);
        if (!v28)
        {
          v33 = v13 + 6;
          while (v34 != v33)
          {
            v28 = *(_QWORD *)(v35 + 8 * v33++);
            if (v28)
            {
              v22 = v33 - 1;
              goto LABEL_29;
            }
          }
LABEL_42:
          sub_1001452E0(v5);
          return;
        }
      }
    }
LABEL_29:
    v20 = (v28 - 1) & v28;
    v21 = __clz(__rbit64(v28)) + (v22 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

_QWORD *sub_100349BF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD v23[2];
  uint64_t v24;

  v3 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
    return _swiftEmptyArrayStorage;
  v23[0] = a1;
  v23[1] = v1;
  v8 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v9 = *(_QWORD *)(v4 + 72);
  swift_bridgeObjectRetain(a1);
  v10 = _swiftEmptyArrayStorage;
  v24 = v3;
  do
  {
    sub_100145220(v8, (uint64_t)v6, type metadata accessor for VisibleTablesQuery.Comparator);
    if (swift_getEnumCaseMultiPayload(v6, v3) == 3)
    {
      v11 = v6[1];
      v12 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0)
        v12 = *v6 & 0xFFFFFFFFFFFFLL;
      if (v12)
      {
        v13 = (void *)objc_opt_self(ICSearchQueryOperation);
        v14 = String._bridgeToObjectiveC()();
        v15 = objc_msgSend(v13, "prefixMatchingQueryStringForSearchString:", v14, swift_bridgeObjectRelease(v11).n128_f64[0]);

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_10016ACE0(0, v10[2] + 1, 1, v10);
        v20 = v10[2];
        v19 = v10[3];
        if (v20 >= v19 >> 1)
          v10 = sub_10016ACE0((_QWORD *)(v19 > 1), v20 + 1, 1, v10);
        v10[2] = v20 + 1;
        v21 = &v10[2 * v20];
        v21[4] = v16;
        v21[5] = v18;
        v3 = v24;
      }
      else
      {
        swift_bridgeObjectRelease(v6[1]);
      }
    }
    else
    {
      sub_100145264((uint64_t)v6, type metadata accessor for VisibleTablesQuery.Comparator);
    }
    v8 += v9;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease(v23[0]);
  return v10;
}

_QWORD *sub_100349E0C(void (*a1)(char *, __n128), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100349E30(a1, a2, a3, a4, &qword_1005D55E0, (void (*)(BOOL, unint64_t, uint64_t))sub_1001373E0);
}

_QWORD *sub_100349E30(void (*a1)(char *, __n128), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(BOOL, unint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v21)(BOOL, unint64_t, uint64_t);
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, __n128);
  uint64_t v25;
  char v26;
  _QWORD *v27;

  v8 = v6;
  v24 = a1;
  v25 = a2;
  v23 = sub_100012E18(a5);
  v10 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a3 + 16);
  v27 = _swiftEmptyArrayStorage;
  a6(0, v13, 0);
  v14 = v27;
  v22 = v13;
  if (v13)
  {
    v21 = a6;
    v15 = swift_bridgeObjectRetain(a3);
    v16 = 0;
    while (1)
    {
      v26 = *(_BYTE *)(a3 + v16 + 32);
      v24(&v26, v15);
      if (v8)
        break;
      v8 = 0;
      v17 = a3;
      v27 = v14;
      v19 = v14[2];
      v18 = v14[3];
      if (v19 >= v18 >> 1)
      {
        v21(v18 > 1, v19 + 1, 1);
        v14 = v27;
      }
      ++v16;
      v14[2] = v19 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))((unint64_t)v14+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v19, v12, v23);
      a3 = v17;
      if (v22 == v16)
        goto LABEL_9;
    }
    swift_release(v14);
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    swift_bridgeObjectRetain(a3);
LABEL_9:
    swift_bridgeObjectRelease(a3);
  }
  return v14;
}

uint64_t sub_100349FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  id v16;
  id *v17;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005DA0F0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_opt_self(ICAttachment);
  v7 = swift_dynamicCastObjCClass(v1, v6);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = qword_1005CEB28;
    swift_unknownObjectRetain(v1);
    if (v9 != -1)
      swift_once(&qword_1005CEB28, sub_10022B070);
    v10 = sub_10012A0B0(v2, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
    v16 = v8;
    v17 = &v16;
    v11 = swift_unknownObjectRetain(v1);
    v12 = Predicate.evaluate(_:)(&v17, v2, v11);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_unknownObjectRelease(v1, v13);

  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t sub_10034A264(uint64_t a1)
{
  uint64_t v1;
  uint64_t ObjectType;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  char *v12;
  _BYTE v13[24];
  uint64_t v14;

  ObjectType = swift_getObjectType(v1);
  sub_100012CE8(a1, (uint64_t)v13, &qword_1005CF190);
  if (!v14)
  {
    sub_100012DDC((uint64_t)v13, &qword_1005CF190);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v12, v13, (char *)&type metadata for Any + 8, ObjectType, 6) & 1) == 0)
  {
LABEL_11:
    v10 = 0;
    return v10 & 1;
  }
  v4 = v12;
  if ((static TableID.== infix(_:_:)(&v12[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_id], v1 + OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_id) & 1) == 0)
  {

    goto LABEL_11;
  }
  v5 = *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_title];
  v6 = *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_title + 8];
  v7 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_title);
  v8 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_title + 8);
  if (v5 == v7 && v6 == v8)
  {

    v10 = 1;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0);

  }
  return v10 & 1;
}

_QWORD *sub_10034A458(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  _BYTE v32[16];
  uint64_t v33;

  v33 = a4;
  v6 = sub_100349E30((void (*)(char *, __n128))sub_10034A864, 0, a1, (uint64_t)v32, &qword_1005D0E40, (void (*)(BOOL, unint64_t, uint64_t))sub_1001373FC);
  v31 = v6;
  v7 = sub_100012E18(&qword_1005D3D90);
  v8 = sub_100012E18(&qword_1005DA440);
  v9 = sub_100012E18(&qword_1005D0E40);
  v10 = sub_100016638(&qword_1005DA468, &qword_1005D3D90, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = sub_100016638(&qword_1005DA448, &qword_1005DA440, (uint64_t)&protocol conformance descriptor for [A]);
  v12 = sub_100016638((unint64_t *)&unk_1005DA450, &qword_1005D0E40, (uint64_t)&protocol conformance descriptor for SortDescriptor<A>);
  v13 = (_QWORD *)Sequence.sorted<A, B>(using:)(&v31, v7, v8, v9, v10, v11, v12);
  swift_bridgeObjectRelease(v6);
  if ((a3 & 1) == 0)
  {
    v14 = sub_10036F130(a2, (unint64_t)v13);
    v16 = v15;
    v18 = v17;
    v20 = v19;
    v21 = swift_bridgeObjectRelease(v13);
    if ((v20 & 1) != 0)
    {
      v23 = type metadata accessor for __ContiguousArrayStorageBase(0, v21);
      v24 = swift_unknownObjectRetain_n(v14, 2);
      v25 = (_QWORD *)swift_dynamicCastClass(v24, v23);
      if (!v25)
      {
        swift_unknownObjectRelease(v14, v26);
        v25 = _swiftEmptyArrayStorage;
      }
      v27 = v25[2];
      swift_release(v25);
      if (__OFSUB__(v20 >> 1, v18))
      {
        __break(1u);
      }
      else
      {
        v28 = v14;
        if (v27 == (v20 >> 1) - v18)
        {
          v13 = (_QWORD *)swift_dynamicCastClass(v14, v23);
          if (!v13)
          {
            swift_unknownObjectRelease(v14, v22);
            v13 = _swiftEmptyArrayStorage;
          }
          goto LABEL_10;
        }
      }
      swift_unknownObjectRelease(v28, v29);
    }
    v13 = sub_10016C084(v14, v16, v18, v20);
LABEL_10:
    swift_unknownObjectRelease(v14, v22);
  }
  return v13;
}

_QWORD *sub_10034A664(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;

  v13 = sub_100012E18(&qword_1005D0E40);
  v15 = sub_1001DBF08((void (*)(char *, char *))sub_10034A864, 0, a5, v13, (uint64_t)&type metadata for Never, a7, (uint64_t)&protocol witness table for Never, v14);
  v39 = v15;
  v16 = sub_100012E18(&qword_1005DA440);
  v17 = *(_QWORD *)(a6 + 8);
  v18 = sub_100016638(&qword_1005DA448, &qword_1005DA440, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = sub_100016638((unint64_t *)&unk_1005DA450, &qword_1005D0E40, (uint64_t)&protocol conformance descriptor for SortDescriptor<A>);
  v20 = (_QWORD *)Sequence.sorted<A, B>(using:)(&v39, a4, v16, v13, v17, v18, v19);
  swift_bridgeObjectRelease(v15);
  if ((a3 & 1) != 0)
    return v20;
  v21 = sub_10036F130(a2, (unint64_t)v20);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  v28 = swift_bridgeObjectRelease(v20);
  if ((v27 & 1) == 0)
  {
LABEL_3:
    v20 = sub_10016C084(v21, v23, v25, v27);
LABEL_10:
    swift_unknownObjectRelease(v21, v29);
    return v20;
  }
  v30 = type metadata accessor for __ContiguousArrayStorageBase(0, v28);
  v31 = swift_unknownObjectRetain_n(v21, 2);
  v32 = (_QWORD *)swift_dynamicCastClass(v31, v30);
  if (!v32)
  {
    swift_unknownObjectRelease(v21, v33);
    v32 = _swiftEmptyArrayStorage;
  }
  v34 = v32[2];
  swift_release(v32);
  if (__OFSUB__(v27 >> 1, v25))
  {
    __break(1u);
    goto LABEL_13;
  }
  v35 = v21;
  if (v34 != (v27 >> 1) - v25)
  {
LABEL_13:
    swift_unknownObjectRelease(v35, v36);
    goto LABEL_3;
  }
  v20 = (_QWORD *)swift_dynamicCastClass(v21, v30);
  swift_unknownObjectRelease(v21, v37);
  if (!v20)
  {
    v20 = _swiftEmptyArrayStorage;
    goto LABEL_10;
  }
  return v20;
}

uint64_t sub_10034A864(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v13;

  v2 = type metadata accessor for String.StandardComparator(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v13 - v7;
  v9 = *a1;
  KeyPath = swift_getKeyPath(&unk_1004648C0, v10);
  static String.StandardComparator.localizedStandard.getter();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  SortDescriptor.init<A>(_:comparator:order:)(KeyPath, v6, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t VisibleTablesQuery.entities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch(sub_10034A968, 0, 0);
}

uint64_t sub_10034A968()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  AppDependency.wrappedValue.getter(v0 + 2);
  v1 = v0[2];
  v0[5] = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D01A8 + dword_1005D01A8);
  v2 = (_QWORD *)swift_task_alloc(unk_1005D01AC);
  v0[6] = v2;
  *v2 = v0;
  v2[1] = sub_100132748;
  return v4(v0[3], v1);
}

uint64_t VisibleTablesQuery.suggestedEntities()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[126] = a2;
  v2[125] = a1;
  v3 = type metadata accessor for Logger(0);
  v2[127] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[128] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[129] = swift_task_alloc(v5);
  v2[130] = swift_task_alloc(v5);
  v2[131] = swift_task_alloc(v5);
  v2[132] = swift_task_alloc(v5);
  v6 = sub_100012E18((uint64_t *)&unk_1005DA0F0);
  v2[133] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[134] = v7;
  v2[135] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10034AA98, 0, 0);
}

uint64_t sub_10034AA98()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Class isa;
  id v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;

  AppDependency.wrappedValue.getter(v0 + 122);
  v1 = (void *)v0[122];
  v2 = objc_msgSend(v1, "modernManagedObjectContext");
  v0[136] = v2;

  v3 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  v4 = (void *)static NSObject<>.ic_fetchRequest()();
  v0[137] = v4;
  v5 = sub_100012E18(&qword_1005CF6F0);
  v6 = swift_allocObject(v5, 56, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100454060;
  *(_QWORD *)(v6 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v3), "predicateForVisibleAttachmentsInContext:", v2);
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  v7 = sub_100012E18((uint64_t *)&unk_1005D5630);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100451C20;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICAttachmentUTTypeTable);
  v11 = v10;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_1001797EC();
  *(_QWORD *)(v8 + 32) = v9;
  *(_QWORD *)(v8 + 40) = v11;
  *(_QWORD *)(v6 + 40) = NSPredicate.init(format:_:)(0x2049545565707974, 0xED00004025203D3DLL, v8);
  if (qword_1005CEB28 != -1)
    swift_once(&qword_1005CEB28, sub_10022B070);
  v12 = v0[135];
  v13 = v0[134];
  v14 = v0[133];
  v15 = sub_10012A0B0(v14, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15, v14);
  result = NSPredicate.init<A>(_:)(v12, v3);
  if (result)
  {
    v17 = v0[126];
    v18 = v0[125];
    *(_QWORD *)(v6 + 48) = result;
    specialized Array._endMutation()(result);
    v19 = v6;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v19);
    v21 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

    objc_msgSend(v4, "setPredicate:", v21);
    objc_msgSend(v4, "setFetchLimit:", 25);
    swift_retain(v18);
    swift_retain(v17);
    AppDependency.wrappedValue.getter(v0 + 87);
    Logger.init(subsystem:category:)(v0[87], v0[88], v0[89], v0[90]);
    swift_release(v18);
    swift_release(v17);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "VisibleTablesQuery: suggested entities", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }
    v26 = v0[132];
    v27 = v0[128];
    v28 = v0[127];

    v29 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v0[138] = v29;
    v29(v26, v28);
    v30 = swift_allocObject(&unk_10056A758, 32, 7);
    v0[139] = v30;
    *(_QWORD *)(v30 + 16) = v2;
    *(_QWORD *)(v30 + 24) = v4;
    v31 = v2;
    v32 = v4;
    swift_retain(v30);
    v33 = sub_10001537C(&qword_1005D3D90);
    swift_asyncLet_begin(v0 + 2, 0, v33, &unk_1005DA108, v30, v0 + 121);
    return swift_asyncLet_get_throwing(v0 + 2, v0 + 121, sub_10034AE80, v0 + 82);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10034AE80()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1120) = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 16, v1 + 968, sub_10034B698, v1 + 928);
  else
    return swift_task_switch(sub_10034AEB4, 0, 0);
}

uint64_t sub_10034AEB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t (*v31)(uint64_t, uint64_t);
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 1008);
  v2 = *(_QWORD *)(v0 + 1000);
  v3 = sub_10034A458((uint64_t)&off_100557230, 25, 0, *(_QWORD *)(v0 + 968));
  v4 = sub_100349504((uint64_t)v3);
  *(_QWORD *)(v0 + 1128) = v4;
  swift_bridgeObjectRelease(v3);
  swift_retain(v2);
  swift_retain(v1);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 792));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 792), *(_QWORD *)(v0 + 800), *(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 816));
  swift_release(v2);
  swift_release(v1);
  swift_bridgeObjectRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    *(_QWORD *)(v0 + 992) = *(_QWORD *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 992, v0 + 1000, v8 + 4);
    swift_bridgeObjectRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "VisibleTablesQuery: found %ld suggested attachment(s)", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
  }

  v9 = *(_QWORD *)(v0 + 1008);
  v10 = *(_QWORD *)(v0 + 1000);
  (*(void (**)(_QWORD, _QWORD))(v0 + 1104))(*(_QWORD *)(v0 + 1048), *(_QWORD *)(v0 + 1016));
  swift_retain(v10);
  swift_retain(v9);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 760));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 760), *(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 784));
  swift_release(v10);
  swift_release(v9);
  v11 = swift_bridgeObjectRetain_n(v4, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(void (**)(uint64_t, uint64_t))(v0 + 1104);
  v16 = *(_QWORD *)(v0 + 1040);
  v17 = *(_QWORD *)(v0 + 1016);
  if (v14)
  {
    v30 = *(void (**)(uint64_t, uint64_t))(v0 + 1104);
    v29 = *(_QWORD *)(v0 + 1016);
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v32 = v19;
    *(_DWORD *)v18 = 136315138;
    v20 = type metadata accessor for TableID(0);
    swift_bridgeObjectRetain(v4);
    v22 = Array.description.getter(v21, v20);
    v28 = v16;
    v24 = v23;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v0 + 984) = sub_1003A4190(v22, v24, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 984, v0 + 992, v18 + 4);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "VisibleTablesQuery: matching attachment IDs: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v30(v28, v29);
  }
  else
  {
    swift_bridgeObjectRelease_n(v4, 2);

    v15(v16, v17);
  }
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 920));
  v25 = *(_QWORD *)(v0 + 920);
  *(_QWORD *)(v0 + 1136) = v25;
  v31 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D01A8 + dword_1005D01A8);
  v26 = (_QWORD *)swift_task_alloc(unk_1005D01AC);
  *(_QWORD *)(v0 + 1144) = v26;
  *v26 = v0;
  v26[1] = sub_10034B274;
  return v31(v4, v25);
}

uint64_t sub_10034B274(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1144);
  *(_QWORD *)(*v2 + 1152) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {

    return swift_task_switch(sub_10034B3F0, 0, 0);
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 1128);

    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v4 + 1160) = a1;
    return swift_asyncLet_finish(v4 + 16, v4 + 968, sub_10034B338, v4 + 880);
  }
}

uint64_t sub_10034B338()
{
  return swift_task_switch(sub_10034B34C, 0, 0);
}

uint64_t sub_10034B34C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 1112);
  v2 = *(void **)(v0 + 1096);
  v3 = *(_QWORD *)(v0 + 1080);
  v4 = *(_QWORD *)(v0 + 1056);
  v5 = *(_QWORD *)(v0 + 1048);
  v6 = *(_QWORD *)(v0 + 1040);
  v7 = *(_QWORD *)(v0 + 1032);

  swift_release_n(v1, 2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 1160));
}

uint64_t sub_10034B3F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1128));
  return swift_asyncLet_finish(v0 + 16, v0 + 968, sub_10034B444, v0 + 832);
}

uint64_t sub_10034B444()
{
  return swift_task_switch(sub_10034B458, 0, 0);
}

uint64_t sub_10034B458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  NSObject *log;
  os_log_t loga;

  v1 = *(_QWORD *)(v0 + 1152);
  v2 = *(_QWORD *)(v0 + 1008);
  v3 = *(_QWORD *)(v0 + 1000);
  swift_release(*(_QWORD *)(v0 + 1112));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 728));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 752));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    log = v5;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 872) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, log, v7, "VisibleTablesQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    v12 = log;
  }
  else
  {
    swift_errorRelease(v1);
    v12 = v5;
  }
  v13 = *(_QWORD *)(v0 + 1112);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1104);
  v15 = *(void **)(v0 + 1096);
  v16 = *(void **)(v0 + 1088);
  v17 = *(_QWORD *)(v0 + 1080);
  v18 = *(_QWORD *)(v0 + 1056);
  v23 = *(_QWORD *)(v0 + 1048);
  loga = *(os_log_t *)(v0 + 1040);
  v19 = *(_QWORD *)(v0 + 1032);
  v20 = *(_QWORD *)(v0 + 1016);

  v21 = v14(v19, v20);
  swift_willThrow(v21);

  swift_release(v13);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v23);
  swift_task_dealloc(loga);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034B698()
{
  return swift_task_switch(sub_10034B6AC, 0, 0);
}

uint64_t sub_10034B6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  NSObject *log;
  os_log_t loga;

  v1 = *(_QWORD *)(v0 + 1120);
  v2 = *(_QWORD *)(v0 + 1008);
  v3 = *(_QWORD *)(v0 + 1000);
  swift_release(*(_QWORD *)(v0 + 1112));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 728));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 736), *(_QWORD *)(v0 + 744), *(_QWORD *)(v0 + 752));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    log = v5;
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 872) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v0 + 880, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, log, v7, "VisibleTablesQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    v12 = log;
  }
  else
  {
    swift_errorRelease(v1);
    v12 = v5;
  }
  v13 = *(_QWORD *)(v0 + 1112);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1104);
  v15 = *(void **)(v0 + 1096);
  v16 = *(void **)(v0 + 1088);
  v17 = *(_QWORD *)(v0 + 1080);
  v18 = *(_QWORD *)(v0 + 1056);
  v23 = *(_QWORD *)(v0 + 1048);
  loga = *(os_log_t *)(v0 + 1040);
  v19 = *(_QWORD *)(v0 + 1032);
  v20 = *(_QWORD *)(v0 + 1016);

  v21 = v14(v19, v20);
  swift_willThrow(v21);

  swift_release(v13);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v23);
  swift_task_dealloc(loga);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034B8EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_10034B908, 0, 0);
}

uint64_t sub_10034B908()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_10056A8A0, 32, 7);
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v2;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[6] = v7;
  v8 = sub_100012E18(&qword_1005D3D90);
  *v7 = v0;
  v7[1] = sub_1001E43FC;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_10035345C, v3, v8);
}

void sub_10034B9AC(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  void *v16;
  objc_class *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD v35[2];
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  objc_super v42;
  unint64_t v43;

  v5 = type metadata accessor for TableID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  v10 = NSManagedObjectContext.fetch<A>(_:)(a1, v9);
  if (!v2)
  {
    v11 = v10;
    v43 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v10 >> 62)
    {
      if (v10 < 0)
        v34 = v10;
      else
        v34 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v12 = _CocoaArrayWrapper.endIndex.getter(v34);
      if (v12)
        goto LABEL_4;
    }
    else
    {
      v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v10);
      if (v12)
      {
LABEL_4:
        if (v12 < 1)
        {
          __break(1u);
          return;
        }
        v35[1] = 0;
        v36 = a2;
        v13 = 0;
        v14 = v11 & 0xC000000000000001;
        v40 = v6;
        v41 = v11;
        v38 = v12;
        v39 = v9;
        v37 = v11 & 0xC000000000000001;
        do
        {
          if (v14)
            v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v11);
          else
            v15 = *(id *)(v11 + 8 * v13 + 32);
          v16 = v15;
          if ((objc_msgSend(v15, "isVisibleTable") & 1) != 0)
          {
            v17 = (objc_class *)type metadata accessor for TableSearchResult(0);
            v18 = (char *)objc_allocWithZone(v17);
            ICTableObject<>.tableEntityIdentifier.getter(v9);
            v19 = v8;
            v20 = v8;
            v21 = v5;
            (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v18[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_id], v20, v5);
            v22 = objc_msgSend(v16, "title");
            if (v22)
            {
              v23 = v22;
              v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
              v26 = v25;

            }
            else
            {
              v24 = 0;
              v26 = 0xE000000000000000;
            }
            v27 = (uint64_t *)&v18[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_title];
            *v27 = v24;
            v27[1] = v26;

            v42.receiver = v18;
            v42.super_class = v17;
            v28 = objc_msgSendSuper2(&v42, "init");

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
            v31 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
            v30 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x18);
            v5 = v21;
            if (v31 >= v30 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
            v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v28);
            specialized Array._endMutation()(v32);
            v6 = v40;
            v11 = v41;
            v8 = v19;
            v12 = v38;
            v9 = v39;
            v14 = v37;
          }
          else
          {

          }
          ++v13;
        }
        while (v12 != v13);
        swift_bridgeObjectRelease(v11);
        v33 = (_QWORD *)v43;
        a2 = v36;
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease(v11);
    v33 = _swiftEmptyArrayStorage;
LABEL_24:
    swift_bridgeObjectRelease(v11);
    *a2 = v33;
  }
}

uint64_t sub_10034BC6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch(sub_10034A968, 0, 0);
}

uint64_t sub_10034BC88(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *v1;
  v4 = v1[1];
  v5 = (_QWORD *)swift_task_alloc(dword_1005DA0EC);
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = v2;
  v5[1] = sub_10013B218;
  return VisibleTablesQuery.suggestedEntities()(v3, v4);
}

uint64_t sub_10034BCDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100159974();
  *v5 = v2;
  v5[1] = sub_100130768;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t VisibleTablesQuery.entities(matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_10034BD64, 0, 0);
}

uint64_t sub_10034BD64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[2];
  v1 = v0[3];
  v3 = sub_100012E18(&qword_1005DA118);
  v4 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
  v0[6] = v9;
  *(_OWORD *)(v9 + 16) = xmmword_100451C20;
  v10 = (_QWORD *)(v9 + v8);
  *v10 = swift_getKeyPath(&unk_100464588, v11);
  v10[1] = v2;
  v10[2] = v1;
  swift_storeEnumTagMultiPayload(v10, v4, 4);
  v12 = dword_1005DA184;
  swift_bridgeObjectRetain(v1);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[7] = v13;
  *v13 = v0;
  v13[1] = sub_10022E1D8;
  return VisibleTablesQuery.entities(matching:mode:sortedBy:limit:)(v9, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 1, v0[4], v0[5]);
}

uint64_t static VisibleTablesQuery.ComparatorKeyPath.title.getter(uint64_t a1, uint64_t a2)
{
  return swift_getKeyPath(&unk_100464588, a2);
}

uint64_t VisibleTablesQuery.entities(matching:mode:sortedBy:limit:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_QWORD *)(v7 + 1216) = a7;
  *(_QWORD *)(v7 + 1208) = a6;
  *(_BYTE *)(v7 + 1545) = a5;
  *(_QWORD *)(v7 + 1200) = a4;
  *(_QWORD *)(v7 + 1192) = a3;
  *(_BYTE *)(v7 + 1544) = a2;
  *(_QWORD *)(v7 + 1184) = a1;
  v8 = type metadata accessor for Logger(0);
  *(_QWORD *)(v7 + 1224) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 1232) = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 1240) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 1248) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 1256) = swift_task_alloc(v10);
  *(_QWORD *)(v7 + 1264) = swift_task_alloc(v10);
  v11 = sub_100012E18((uint64_t *)&unk_1005DA0F0);
  *(_QWORD *)(v7 + 1272) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v7 + 1280) = v12;
  *(_QWORD *)(v7 + 1288) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TableID(0);
  *(_QWORD *)(v7 + 1296) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v7 + 1304) = v14;
  *(_QWORD *)(v7 + 1312) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D1080) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 1320) = swift_task_alloc(v15);
  *(_QWORD *)(v7 + 1328) = swift_task_alloc(v15);
  return swift_task_switch(sub_10034BF94, 0, 0);
}

void sub_10034BF94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _UNKNOWN **v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int64_t v24;
  void **v25;
  uint64_t v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  Class isa;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char v66;
  uint64_t v67;
  id v68;
  Class v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  void *v91;
  void *v92;
  _QWORD *v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  void *v103;
  uint64_t v104;
  unint64_t v105;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 1328);
  v3 = *(_QWORD *)(v0 + 1320);
  v100 = *(_QWORD *)(v0 + 1192);
  v102 = (_QWORD *)(v0 + 696);
  v4 = *(_QWORD *)(v0 + 1184);
  v5 = *(_BYTE *)(v0 + 1544) & 1;
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1096));
  v6 = *(void **)(v0 + 1096);
  *(_QWORD *)(v0 + 1336) = objc_msgSend(v6, "modernManagedObjectContext");

  v7 = enum case for ManagedEntityContextType.modern(_:);
  v8 = type metadata accessor for ManagedEntityContextType(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v10(v2, v7, v8);
  v11 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v9 + 56);
  v11(v2, 0, 1, v8);
  sub_100012CE8(v2, v3, &qword_1005D1080);
  swift_bridgeObjectRetain(v4);
  *(_QWORD *)(v1 + 1344) = sub_100350A28(v12, v5, v3, 0);
  sub_100012DDC(v2, &qword_1005D1080);
  v10(v2, v7, v8);
  v11(v2, 0, 1, v8);
  sub_100012CE8(v2, v3, &qword_1005D1080);
  swift_bridgeObjectRetain(v4);
  *(_QWORD *)(v1 + 1352) = sub_100350A28(v13, v5, v3, 1);
  sub_100012DDC(v2, &qword_1005D1080);
  if (*(_QWORD *)(v100 + 16))
  {
    v14 = *(void **)(v1 + 1192);
    v15 = sub_100012E18(&qword_1005DA190);
    v16 = sub_100016638(&qword_1005DA198, &qword_1005DA190, (uint64_t)&protocol conformance descriptor for LazyMapSequence<A, B>);
    v17 = (_UNKNOWN **)swift_allocObject(&unk_10056A780, 72, 7);
    v17[2] = v14;
    v17[3] = sub_10015920C;
    v17[4] = 0;
    v17[5] = sub_100234A8C;
    v17[6] = 0;
    v17[7] = sub_100234A9C;
    v17[8] = 0;
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v15 = sub_100012E18(&qword_1005DA1B8);
    v16 = sub_100016638(&qword_1005DA1C0, &qword_1005DA1B8, (uint64_t)&protocol conformance descriptor for [A]);
    v17 = &off_100557258;
  }
  v18 = (_QWORD *)v1;
  v19 = *(_QWORD *)(v1 + 1184);
  *(_QWORD *)(v1 + 720) = v15;
  *(_QWORD *)(v1 + 728) = v16;
  *(_QWORD *)(v1 + 696) = v17;
  sub_10012D19C(v102, v15);
  v20 = sub_1000163BC(0, &qword_1005D39A0, NSSortDescriptor_ptr);
  *(_QWORD *)(v1 + 1360) = v20;
  *(_QWORD *)(v1 + 1368) = sub_1001DBF08((void (*)(char *, char *))sub_10034F4C8, 0, v15, v20, (uint64_t)&type metadata for Never, v16, (uint64_t)&protocol witness table for Never, v21);
  v22 = sub_100349BF4(v19);
  v23 = v22;
  v24 = v22[2];
  if (v24)
  {
    sub_100137028(0, v24, 0);
    v25 = (void **)(v23 + 5);
    do
    {
      v26 = (uint64_t)*(v25 - 1);
      v27 = *v25;
      v104 = 40;
      v105 = 0xE100000000000000;
      swift_bridgeObjectRetain(v27);
      v28._countAndFlagsBits = v26;
      v28._object = v27;
      String.append(_:)(v28);
      v29._countAndFlagsBits = 41;
      v29._object = (void *)0xE100000000000000;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v27);
      v31 = _swiftEmptyArrayStorage[2];
      v30 = _swiftEmptyArrayStorage[3];
      if (v31 >= v30 >> 1)
        sub_100137028(v30 > 1, v31 + 1, 1);
      _swiftEmptyArrayStorage[2] = v31 + 1;
      v32 = &_swiftEmptyArrayStorage[2 * v31];
      v32[4] = 40;
      v32[5] = 0xE100000000000000;
      v25 += 2;
      --v24;
    }
    while (v24);
    v33 = *(_BYTE *)(v1 + 1544);
    swift_bridgeObjectRelease(v23);
    *(_QWORD *)(v1 + 1160) = _swiftEmptyArrayStorage;
    v104 = 32;
    v105 = 0xE100000000000000;
    if ((v33 & 1) != 0)
      v34 = 31868;
    else
      v34 = 9766;
    v35 = 0xE200000000000000;
    String.append(_:)(*(Swift::String *)&v34);
    swift_bridgeObjectRelease(0xE200000000000000);
    v36._countAndFlagsBits = 32;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    v37 = sub_100012E18(&qword_1005D39A8);
    v38 = sub_100016638((unint64_t *)&qword_1005D39B0, &qword_1005D39A8, (uint64_t)&protocol conformance descriptor for [A]);
    v39 = BidirectionalCollection<>.joined(separator:)(v104, v105, v37, v38);
    v41 = v40;
    swift_bridgeObjectRelease(v105);
    swift_release(_swiftEmptyArrayStorage);
    *(_QWORD *)(v1 + 1376) = v41;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8C40, ICSearchQueryOperation_ptr);
    v42 = (_QWORD *)swift_task_alloc(async function pointer to static ICSearchQueryOperation.searchResults(queryString:rankingQueries:)[1]);
    *(_QWORD *)(v1 + 1384) = v42;
    *v42 = v1;
    v42[1] = sub_10034C95C;
    static ICSearchQueryOperation.searchResults(queryString:rankingQueries:)(v39, v41, _swiftEmptyArrayStorage);
  }
  else
  {
    swift_bridgeObjectRelease(v22);
    *(_QWORD *)(v1 + 1472) = 0;
    v43 = *(_QWORD *)(v1 + 1184);
    v44 = *(_QWORD *)(v43 + 16);
    if (v44)
    {
      v45 = sub_100349BF4(v43);
      v46 = v45[2];
      swift_bridgeObjectRelease(v45);
      v47 = v46 < v44;
    }
    else
    {
      v47 = 1;
    }
    *(_BYTE *)(v1 + 1546) = v47;
    v48 = *(_QWORD *)(v1 + 1368);
    v49 = *(_QWORD *)(v1 + 1336);
    v50 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
    v51 = (void *)static NSObject<>.ic_fetchRequest()();
    *(_QWORD *)(v1 + 1480) = v51;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v51, "setSortDescriptors:", isa, swift_bridgeObjectRelease(v48).n128_f64[0]);

    v53 = sub_100012E18(&qword_1005CF6F0);
    v54 = swift_allocObject(v53, 64, 7);
    *(_OWORD *)(v54 + 16) = xmmword_100451BE0;
    *(_QWORD *)(v54 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v50), "predicateForVisibleAttachmentsInContext:", v49);
    sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
    v55 = sub_100012E18((uint64_t *)&unk_1005D5630);
    v56 = swift_allocObject(v55, 72, 7);
    *(_OWORD *)(v56 + 16) = xmmword_100451C20;
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICAttachmentUTTypeTable);
    v59 = v58;
    *(_QWORD *)(v56 + 56) = &type metadata for String;
    *(_QWORD *)(v56 + 64) = sub_1001797EC();
    *(_QWORD *)(v56 + 32) = v57;
    *(_QWORD *)(v56 + 40) = v59;
    *(_QWORD *)(v54 + 40) = NSPredicate.init(format:_:)(0x2049545565707974, 0xED00004025203D3DLL, v56);
    if (qword_1005CEB28 != -1)
      swift_once(&qword_1005CEB28, sub_10022B070);
    v60 = *(_QWORD *)(v1 + 1288);
    v61 = *(_QWORD *)(v1 + 1280);
    v62 = *(_QWORD *)(v1 + 1272);
    v63 = sub_10012A0B0(v62, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v60, v63, v62);
    v64 = NSPredicate.init<A>(_:)(v60, v50);
    if (v64)
    {
      v65 = *(void **)(v1 + 1344);
      v66 = *(_BYTE *)(v1 + 1545);
      *(_QWORD *)(v54 + 48) = v64;
      *(_QWORD *)(v54 + 56) = v65;
      v104 = v54;
      specialized Array._endMutation()(v64);
      v67 = v54;
      v68 = v65;
      v69 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v67);
      v70 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v69);

      objc_msgSend(v51, "setPredicate:", v70);
      if ((v66 & 1) == 0)
        objc_msgSend(v51, "setFetchLimit:", *(_QWORD *)(v1 + 1200));
      v71 = *(_QWORD *)(v1 + 1216);
      v72 = *(_QWORD *)(v1 + 1208);
      v73 = *(_QWORD *)(v1 + 1184);
      swift_retain(v72);
      swift_retain(v71);
      AppDependency.wrappedValue.getter((_QWORD *)(v1 + 808));
      Logger.init(subsystem:category:)(*(_QWORD *)(v1 + 808), *(_QWORD *)(v1 + 816), *(_QWORD *)(v1 + 824), *(_QWORD *)(v1 + 832));
      swift_release(v72);
      swift_release(v71);
      v74 = swift_bridgeObjectRetain_n(v73, 2);
      v75 = Logger.logObject.getter(v74);
      v76 = static os_log_type_t.info.getter();
      v77 = os_log_type_enabled(v75, v76);
      v78 = *(_QWORD *)(v1 + 1264);
      v79 = *(_QWORD *)(v1 + 1232);
      v80 = *(_QWORD *)(v1 + 1224);
      v81 = *(_QWORD *)(v1 + 1184);
      if (v77)
      {
        v98 = v1 + 1144;
        v101 = *(_QWORD *)(v1 + 1264);
        v82 = (uint8_t *)swift_slowAlloc(12, -1);
        v103 = v51;
        v83 = swift_slowAlloc(32, -1);
        v104 = v83;
        *(_DWORD *)v82 = 136315138;
        v99 = v79;
        v84 = type metadata accessor for VisibleTablesQuery.Comparator(0);
        swift_bridgeObjectRetain(v81);
        v86 = Array.description.getter(v85, v84);
        v88 = v87;
        swift_bridgeObjectRelease(v81);
        v18[143] = sub_1003A4190(v86, v88, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v98, v18 + 144, v82 + 4);
        swift_bridgeObjectRelease(v88);
        swift_bridgeObjectRelease_n(v81, 2);
        _os_log_impl((void *)&_mh_execute_header, v75, v76, "VisibleTablesQuery: performing with filters %s", v82, 0xCu);
        swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
        v89 = v83;
        v51 = v103;
        swift_slowDealloc(v89, -1, -1);
        swift_slowDealloc(v82, -1, -1);

        v90 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
        v90(v101, v80);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 1184), 2);

        v90 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
        v90(v78, v80);
      }
      v18[186] = v90;
      v91 = (void *)v18[168];
      v92 = (void *)v18[167];
      v93 = (_QWORD *)swift_allocObject(&unk_10056A7A8, 40, 7);
      v18[187] = v93;
      v93[2] = v92;
      v93[3] = v51;
      v93[4] = v91;
      v94 = v92;
      v95 = v91;
      v96 = v51;
      swift_retain(v93);
      v97 = sub_10001537C(&qword_1005D3D90);
      swift_asyncLet_begin(v18 + 2, 0, v97, &unk_1005DA1A8, v93, v18 + 140);
      swift_asyncLet_get_throwing(v18 + 2, v18 + 140, sub_10034E06C, v18 + 124);
    }
    else
    {
      swift_bridgeObjectRelease(0);
      __break(1u);
    }
  }
}

uint64_t sub_10034C95C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1384);
  v3[174] = a1;
  v3[175] = v1;
  swift_task_dealloc(v4);
  v5 = v3[172];
  if (v1)
  {
    v6 = v3[171];
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v6);
    v7 = sub_10034E9A0;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
    v7 = sub_10034C9E4;
  }
  return swift_task_switch(v7, 0, 0);
}

void sub_10034C9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  id v33;
  Class v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  void *v56;
  void *v57;
  _QWORD *v58;
  id v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;

  v1 = *(_QWORD *)(v0 + 1392);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v6 = *(_QWORD *)(v0 + 1392);
    else
      v6 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1392));
    v7 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v7)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    v2 = type metadata accessor for MainActor(0);
    *(_QWORD *)(v0 + 1408) = v2;
    *(_QWORD *)(v0 + 1416) = static MainActor.shared.getter(v2);
    v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor, v3);
    swift_task_switch(sub_10034CFE0, v4, v5);
    return;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1392));
  *(_QWORD *)(v0 + 1472) = 0;
  v8 = *(_QWORD *)(v0 + 1184);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = sub_100349BF4(v8);
    v11 = v10[2];
    swift_bridgeObjectRelease(v10);
    v12 = v11 < v9;
  }
  else
  {
    v12 = 1;
  }
  *(_BYTE *)(v0 + 1546) = v12;
  v13 = *(_QWORD *)(v0 + 1368);
  v14 = *(_QWORD *)(v0 + 1336);
  v15 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  v16 = (void *)static NSObject<>.ic_fetchRequest()();
  *(_QWORD *)(v0 + 1480) = v16;
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setSortDescriptors:", isa, swift_bridgeObjectRelease(v13).n128_f64[0]);

  v18 = sub_100012E18(&qword_1005CF6F0);
  v19 = swift_allocObject(v18, 64, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100451BE0;
  *(_QWORD *)(v19 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "predicateForVisibleAttachmentsInContext:", v14);
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  v20 = sub_100012E18((uint64_t *)&unk_1005D5630);
  v21 = swift_allocObject(v20, 72, 7);
  *(_OWORD *)(v21 + 16) = xmmword_100451C20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICAttachmentUTTypeTable);
  v24 = v23;
  *(_QWORD *)(v21 + 56) = &type metadata for String;
  *(_QWORD *)(v21 + 64) = sub_1001797EC();
  *(_QWORD *)(v21 + 32) = v22;
  *(_QWORD *)(v21 + 40) = v24;
  *(_QWORD *)(v19 + 40) = NSPredicate.init(format:_:)(0x2049545565707974, 0xED00004025203D3DLL, v21);
  if (qword_1005CEB28 != -1)
    swift_once(&qword_1005CEB28, sub_10022B070);
  v25 = *(_QWORD *)(v0 + 1288);
  v26 = *(_QWORD *)(v0 + 1280);
  v27 = *(_QWORD *)(v0 + 1272);
  v28 = sub_10012A0B0(v27, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v28, v27);
  v29 = NSPredicate.init<A>(_:)(v25, v15);
  if (v29)
  {
    v30 = *(void **)(v0 + 1344);
    v31 = *(_BYTE *)(v0 + 1545);
    *(_QWORD *)(v19 + 48) = v29;
    *(_QWORD *)(v19 + 56) = v30;
    v66 = v19;
    specialized Array._endMutation()(v29);
    v32 = v19;
    v33 = v30;
    v34 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v32);
    v35 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v34);

    objc_msgSend(v16, "setPredicate:", v35);
    if ((v31 & 1) == 0)
      objc_msgSend(v16, "setFetchLimit:", *(_QWORD *)(v0 + 1200));
    v36 = *(_QWORD *)(v0 + 1216);
    v37 = *(_QWORD *)(v0 + 1208);
    v38 = *(_QWORD *)(v0 + 1184);
    swift_retain(v37);
    swift_retain(v36);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 808));
    Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 808), *(_QWORD *)(v0 + 816), *(_QWORD *)(v0 + 824), *(_QWORD *)(v0 + 832));
    swift_release(v37);
    swift_release(v36);
    v39 = swift_bridgeObjectRetain_n(v38, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.info.getter();
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 1264);
    v44 = *(_QWORD *)(v0 + 1232);
    v45 = *(_QWORD *)(v0 + 1224);
    v46 = *(_QWORD *)(v0 + 1184);
    if (v42)
    {
      v64 = *(_QWORD *)(v0 + 1264);
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v65 = v16;
      v66 = swift_slowAlloc(32, -1);
      v48 = v66;
      *(_DWORD *)v47 = 136315138;
      v63 = v44;
      v49 = type metadata accessor for VisibleTablesQuery.Comparator(0);
      swift_bridgeObjectRetain(v46);
      v51 = Array.description.getter(v50, v49);
      v53 = v52;
      swift_bridgeObjectRelease(v46);
      *(_QWORD *)(v0 + 1144) = sub_1003A4190(v51, v53, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1144, v0 + 1152, v47 + 4);
      swift_bridgeObjectRelease(v53);
      swift_bridgeObjectRelease_n(v46, 2);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "VisibleTablesQuery: performing with filters %s", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      v54 = v48;
      v16 = v65;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v47, -1, -1);

      v55 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
      v55(v64, v45);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1184), 2);

      v55 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v55(v43, v45);
    }
    *(_QWORD *)(v0 + 1488) = v55;
    v56 = *(void **)(v0 + 1344);
    v57 = *(void **)(v0 + 1336);
    v58 = (_QWORD *)swift_allocObject(&unk_10056A7A8, 40, 7);
    *(_QWORD *)(v0 + 1496) = v58;
    v58[2] = v57;
    v58[3] = v16;
    v58[4] = v56;
    v59 = v57;
    v60 = v56;
    v61 = v16;
    swift_retain(v58);
    v62 = sub_10001537C(&qword_1005D3D90);
    swift_asyncLet_begin(v0 + 16, 0, v62, &unk_1005DA1A8, v58, v0 + 1120);
    swift_asyncLet_get_throwing(v0 + 16, v0 + 1120, sub_10034E06C, v0 + 992);
  }
  else
  {
    swift_bridgeObjectRelease(0);
    __break(1u);
  }
}

void sub_10034CFE0()
{
  _QWORD *v0;
  void *v1;
  id v2;
  Class isa;
  uint64_t v4;
  uint64_t v5;
  id v6;
  Class v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (void *)v0[167];
  swift_release(v0[177]);
  v2 = objc_msgSend((id)objc_opt_self(ICSearchIndexer), "sharedIndexer");
  sub_1000163BC(0, (unint64_t *)&unk_1005D39C0, CSSearchableItem_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v4 = sub_100012E18(&qword_1005CF6F0);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100456F30;
  *(_QWORD *)(v5 + 32) = v1;
  v31 = v5;
  specialized Array._endMutation()(v5);
  sub_1000163BC(0, (unint64_t *)&unk_1005D39D0, NSManagedObjectContext_ptr);
  v6 = v1;
  v7 = Array._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v2, "objectsForSearchableItems:inContexts:", isa, v7, swift_bridgeObjectRelease(v31).n128_f64[0]);

  v9 = sub_100012E18((uint64_t *)&unk_1005D39E0);
  v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  if (!((unint64_t)v10 >> 62))
  {
    v11 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v10);
    if (v11)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease(v10);
    v0[178] = _swiftEmptyArrayStorage;
    v30 = v0[174];
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v30);
    swift_task_switch(sub_10034D384, 0, 0);
    return;
  }
  if (v10 < 0)
    v29 = v10;
  else
    v29 = v10 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v10);
  v11 = _CocoaArrayWrapper.endIndex.getter(v29);
  if (!v11)
    goto LABEL_27;
LABEL_3:
  if (v11 >= 1)
  {
    v12 = 0;
    v13 = v0 + 144;
    do
    {
      if ((v10 & 0xC000000000000001) != 0)
      {
        v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v10);
      }
      else
      {
        v14 = *(_QWORD *)(v10 + 8 * v12 + 32);
        swift_unknownObjectRetain(v14);
      }
      *v13 = &OBJC_PROTOCOL___ICTableObject;
      v15 = swift_dynamicCastObjCProtocolConditional(v14, 1, v13);
      if (!v15)
        goto LABEL_5;
      v17 = (void *)v15;
      ObjectType = swift_getObjectType(v14);
      v19 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
      if (!swift_dynamicCastMetatype(ObjectType, v19))
        v17 = 0;
      if (v17)
      {
        v20 = swift_getObjectType(v17);
        swift_unknownObjectRetain(v14);
        if ((sub_100349FD0() & 1) != 0
          && (v21 = objc_opt_self(ICAttachment),
              (v22 = (void *)swift_dynamicCastObjCClass(v17, v21)) != 0)
          && (objc_msgSend(v22, "isVisibleTable") & 1) != 0
          && !objc_msgSend(v17, "isDeletedOrInTrash"))
        {
          v23 = objc_allocWithZone((Class)type metadata accessor for TableSearchResult(0));
          v24 = sub_100351F34(v17, v23, v20);
          v25 = swift_unknownObjectRelease_n(v14, 2);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v25);
          v27 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
          v26 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v27 >= v26 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
          v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v24);
          specialized Array._endMutation()(v28);
        }
        else
        {
          swift_unknownObjectRelease_n(v14, 2);
        }
      }
      else
      {
LABEL_5:
        swift_unknownObjectRelease(v14, v16);
      }
      ++v12;
    }
    while (v11 != v12);
    goto LABEL_27;
  }
  __break(1u);
}

void sub_10034D384(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  id v32;
  Class v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8_t *v53;
  void (*v54)(uint64_t, uint64_t);
  void *v55;
  void *v56;
  _QWORD *v57;
  id v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;

  if ((static EntityQueryComparatorMode.== infix(_:_:)(*(_BYTE *)(v1 + 1544) & 1, 0, a1) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 1408);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 1368));
    *(_QWORD *)(v1 + 1432) = static MainActor.shared.getter(v3);
    v5 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor, v4);
    swift_task_switch(sub_10034D950, v5, v6);
  }
  else
  {
    v7 = *(_QWORD *)(v1 + 1424);
    *(_QWORD *)(v1 + 1472) = v7;
    v8 = *(_QWORD *)(v1 + 1184);
    v9 = *(_QWORD *)(v8 + 16);
    if (v9)
    {
      v10 = sub_100349BF4(v8);
      v11 = v10[2];
      swift_bridgeObjectRelease(v10);
      v12 = v11 < v9;
    }
    else
    {
      v12 = 1;
    }
    *(_BYTE *)(v1 + 1546) = v12;
    v13 = *(_QWORD *)(v1 + 1368);
    v14 = *(_QWORD *)(v1 + 1336);
    v15 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
    v16 = (void *)static NSObject<>.ic_fetchRequest()();
    *(_QWORD *)(v1 + 1480) = v16;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v16, "setSortDescriptors:", isa, swift_bridgeObjectRelease(v13).n128_f64[0]);

    v18 = sub_100012E18(&qword_1005CF6F0);
    v19 = swift_allocObject(v18, 64, 7);
    *(_OWORD *)(v19 + 16) = xmmword_100451BE0;
    *(_QWORD *)(v19 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v15), "predicateForVisibleAttachmentsInContext:", v14);
    sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
    v20 = sub_100012E18((uint64_t *)&unk_1005D5630);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100451C20;
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(ICAttachmentUTTypeTable);
    v24 = v23;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_1001797EC();
    *(_QWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v21 + 40) = v24;
    *(_QWORD *)(v19 + 40) = NSPredicate.init(format:_:)(0x2049545565707974, 0xED00004025203D3DLL, v21);
    if (qword_1005CEB28 != -1)
      swift_once(&qword_1005CEB28, sub_10022B070);
    v25 = *(_QWORD *)(v1 + 1288);
    v26 = *(_QWORD *)(v1 + 1280);
    v27 = *(_QWORD *)(v1 + 1272);
    v28 = sub_10012A0B0(v27, (uint64_t)static ICAttachment.hasValidEntityIdentifier);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v25, v28, v27);
    v29 = NSPredicate.init<A>(_:)(v25, v15);
    if (v29)
    {
      v30 = *(void **)(v1 + 1344);
      v31 = *(_BYTE *)(v1 + 1545);
      *(_QWORD *)(v19 + 48) = v29;
      *(_QWORD *)(v19 + 56) = v30;
      v65 = v19;
      specialized Array._endMutation()(v29);
      v32 = v30;
      v33 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v19);
      v34 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v33);

      objc_msgSend(v16, "setPredicate:", v34);
      if ((v31 & 1) == 0)
        objc_msgSend(v16, "setFetchLimit:", *(_QWORD *)(v1 + 1200));
      v35 = *(_QWORD *)(v1 + 1216);
      v36 = *(_QWORD *)(v1 + 1208);
      v37 = *(_QWORD *)(v1 + 1184);
      swift_retain(v36);
      swift_retain(v35);
      AppDependency.wrappedValue.getter((_QWORD *)(v1 + 808));
      Logger.init(subsystem:category:)(*(_QWORD *)(v1 + 808), *(_QWORD *)(v1 + 816), *(_QWORD *)(v1 + 824), *(_QWORD *)(v1 + 832));
      swift_release(v36);
      swift_release(v35);
      v38 = swift_bridgeObjectRetain_n(v37, 2);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.info.getter();
      v41 = os_log_type_enabled(v39, v40);
      v42 = *(_QWORD *)(v1 + 1264);
      v43 = *(_QWORD *)(v1 + 1232);
      v44 = *(_QWORD *)(v1 + 1224);
      v45 = *(_QWORD *)(v1 + 1184);
      if (v41)
      {
        v63 = *(_QWORD *)(v1 + 1264);
        v64 = v16;
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v65 = v47;
        *(_DWORD *)v46 = 136315138;
        v62 = v43;
        v48 = type metadata accessor for VisibleTablesQuery.Comparator(0);
        swift_bridgeObjectRetain(v45);
        v50 = Array.description.getter(v49, v48);
        v52 = v51;
        swift_bridgeObjectRelease(v45);
        *(_QWORD *)(v1 + 1144) = sub_1003A4190(v50, v52, &v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 1144, v1 + 1152, v46 + 4);
        swift_bridgeObjectRelease(v52);
        swift_bridgeObjectRelease_n(v45, 2);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "VisibleTablesQuery: performing with filters %s", v46, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        v53 = v46;
        v16 = v64;
        swift_slowDealloc(v53, -1, -1);

        v54 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
        v54(v63, v44);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v1 + 1184), 2);

        v54 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
        v54(v42, v44);
      }
      *(_QWORD *)(v1 + 1488) = v54;
      v55 = *(void **)(v1 + 1344);
      v56 = *(void **)(v1 + 1336);
      v57 = (_QWORD *)swift_allocObject(&unk_10056A7A8, 40, 7);
      *(_QWORD *)(v1 + 1496) = v57;
      v57[2] = v56;
      v57[3] = v16;
      v57[4] = v55;
      v58 = v56;
      v59 = v55;
      v60 = v16;
      swift_retain(v57);
      v61 = sub_10001537C(&qword_1005D3D90);
      swift_asyncLet_begin(v1 + 16, 0, v61, &unk_1005DA1A8, v57, v1 + 1120);
      swift_asyncLet_get_throwing(v1 + 16, v1 + 1120, sub_10034E06C, v1 + 992);
    }
    else
    {
      swift_bridgeObjectRelease(v7);
      __break(1u);
    }
  }
}

void sub_10034D950()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  id v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;

  v1 = *(_QWORD *)(v0 + 1424);
  swift_release(*(_QWORD *)(v0 + 1432));
  v2 = *(_QWORD *)(v0 + 1424);
  if (v1 >> 62)
  {
    if (v2 < 0)
      v26 = *(_QWORD *)(v0 + 1424);
    else
      v26 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v26);
    if (!v3)
      goto LABEL_20;
  }
  else
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v2);
    if (!v3)
      goto LABEL_20;
  }
  if (v3 < 1)
  {
    __break(1u);
    goto LABEL_37;
  }
  v4 = 0;
  v5 = v0 + 840;
  v6 = (_QWORD *)(v0 + 904);
  v47 = v0;
  v48 = v1 & 0xC000000000000001;
  v46 = *(_QWORD *)(v0 + 1424) + 32;
  v7 = &qword_1005CF190;
  do
  {
    if (v48)
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(_QWORD *)(v0 + 1424));
    else
      v10 = *(id *)(v46 + 8 * v4);
    v11 = v10;
    *(_QWORD *)(v0 + 864) = type metadata accessor for TableSearchResult(0);
    *(_QWORD *)(v0 + 840) = v11;
    sub_100012CE8(v5, (uint64_t)v6, v7);
    v12 = *(_QWORD *)(v0 + 928);
    if (v12)
    {
      v13 = sub_10012D19C(v6, *(_QWORD *)(v0 + 928));
      v14 = v6;
      v15 = v5;
      v16 = v7;
      v17 = *(_QWORD *)(v12 - 8);
      v18 = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(uint64_t, _QWORD *, uint64_t))(v17 + 16))(v18, v13, v12);
      v19 = v11;
      v20 = _bridgeAnythingToObjectiveC<A>(_:)(v18, v12);
      v21 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v7 = v16;
      v5 = v15;
      v6 = v14;
      v0 = v47;
      v21(v18, v12);
      swift_task_dealloc(v18);
      sub_1000153C0(v6);
    }
    else
    {
      v22 = v11;
      v20 = 0;
    }
    v23 = objc_msgSend(*(id *)(v0 + 1352), "evaluateWithObject:", v20);
    swift_unknownObjectRelease(v20, v24);
    v25 = sub_100012DDC(v5, v7);
    if (v23)
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v25);
      v8 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v11);
      specialized ContiguousArray._endMutation()(v9);
    }
    else
    {

    }
    ++v4;
  }
  while (v3 != v4);
LABEL_20:
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1424));
  v27 = *(_QWORD *)(v0 + 1200);
  v28 = *(_BYTE *)(v0 + 1545) & 1;
  v29 = *(_QWORD *)(v0 + 720);
  v30 = *(_QWORD *)(v0 + 728);
  v31 = sub_10012D19C((_QWORD *)(v0 + 696), v29);
  *(_QWORD *)(v0 + 1168) = _swiftEmptyArrayStorage;
  v32 = sub_100012E18(&qword_1005D3D90);
  v33 = sub_100016638(&qword_1005D3D98, &qword_1005D3D90, (uint64_t)&protocol conformance descriptor for [A]);
  v34 = (uint64_t)sub_10034A664((uint64_t)v31, v27, v28, v32, v29, v33, v30);
  swift_release(_swiftEmptyArrayStorage);
  if (!((unint64_t)v34 >> 62))
  {
    v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v35)
      goto LABEL_22;
LABEL_35:
    v45 = *(_QWORD *)(v0 + 1424);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v45);
    *(_QWORD *)(v0 + 1440) = _swiftEmptyArrayStorage;
    swift_task_switch(sub_10034DD94, 0, 0);
    return;
  }
  if (v34 < 0)
    v44 = v34;
  else
    v44 = v34 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v34);
  v35 = _CocoaArrayWrapper.endIndex.getter(v44);
  swift_bridgeObjectRelease(v34);
  if (!v35)
    goto LABEL_35;
LABEL_22:
  sub_10013731C(0, v35 & ~(v35 >> 63), 0);
  if ((v35 & 0x8000000000000000) == 0)
  {
    v36 = 0;
    v37 = *(_QWORD *)(v0 + 1304);
    do
    {
      if ((v34 & 0xC000000000000001) != 0)
        v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v34);
      else
        v38 = *(id *)(v34 + 8 * v36 + 32);
      v39 = v38;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v37 + 16))(*(_QWORD *)(v0 + 1312), (uint64_t)v38 + OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_id, *(_QWORD *)(v0 + 1296));

      v41 = _swiftEmptyArrayStorage[2];
      v40 = _swiftEmptyArrayStorage[3];
      if (v41 >= v40 >> 1)
        sub_10013731C(v40 > 1, v41 + 1, 1);
      v42 = *(_QWORD *)(v0 + 1312);
      v43 = *(_QWORD *)(v0 + 1296);
      ++v36;
      _swiftEmptyArrayStorage[2] = v41 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80))+ *(_QWORD *)(v37 + 72) * v41, v42, v43);
    }
    while (v35 != v36);
    goto LABEL_35;
  }
LABEL_37:
  __break(1u);
}

uint64_t sub_10034DD94()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  AppDependency.wrappedValue.getter(v0 + 147);
  v1 = v0[147];
  v0[181] = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D01A8 + dword_1005D01A8);
  v2 = (_QWORD *)swift_task_alloc(unk_1005D01AC);
  v0[182] = v2;
  *v2 = v0;
  v2[1] = sub_10034DE0C;
  return v4(v0[180], v1);
}

uint64_t sub_10034DE0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  uint64_t (*v6)();
  uint64_t v7;

  v3 = (_QWORD *)*v2;
  v3[121] = v2;
  v3[122] = a1;
  v3[123] = v1;
  v4 = v3[182];
  v3[183] = v1;
  swift_task_dealloc(v4);
  v5 = (void *)v3[181];
  if (v1)
  {

    v6 = sub_10034DF7C;
  }
  else
  {
    v7 = v3[180];

    swift_bridgeObjectRelease(v7);
    v6 = sub_10034DE94;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10034DE94()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(void **)(v0 + 1352);
  v2 = *(void **)(v0 + 1344);

  v12 = *(_QWORD *)(v0 + 976);
  v3 = *(_QWORD *)(v0 + 1328);
  v4 = *(_QWORD *)(v0 + 1320);
  v5 = *(_QWORD *)(v0 + 1312);
  v6 = *(_QWORD *)(v0 + 1288);
  v7 = *(_QWORD *)(v0 + 1264);
  v8 = *(_QWORD *)(v0 + 1256);
  v9 = *(_QWORD *)(v0 + 1248);
  v10 = *(_QWORD *)(v0 + 1240);
  sub_1000153C0((_QWORD *)(v0 + 696));
  sub_100012C50(0, 0);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v12);
}

uint64_t sub_10034DF7C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1440));
  v1 = *(void **)(v0 + 1352);
  v2 = *(void **)(v0 + 1344);
  v3 = *(_QWORD *)(v0 + 1328);
  v4 = *(_QWORD *)(v0 + 1320);
  v5 = *(_QWORD *)(v0 + 1312);
  v6 = *(_QWORD *)(v0 + 1288);
  v7 = *(_QWORD *)(v0 + 1264);
  v8 = *(_QWORD *)(v0 + 1256);
  v10 = *(_QWORD *)(v0 + 1248);
  v11 = *(_QWORD *)(v0 + 1240);

  sub_1000153C0((_QWORD *)(v0 + 696));
  sub_100012C50(0, 0);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034E06C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1504) = v0;
  if (!v0)
    return swift_task_switch(sub_10034E0EC, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 1472));
  return swift_asyncLet_finish(v1 + 16, v1 + 1120, sub_10034EA88, v1 + 736);
}

uint64_t sub_10034E0EC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t);
  uint64_t v37;

  v1 = *(_BYTE *)(v0 + 1546);
  v2 = *(_QWORD *)(v0 + 1472);
  v3 = *(_QWORD *)(v0 + 1216);
  v4 = *(_QWORD *)(v0 + 1208);
  v5 = *(_QWORD *)(v0 + 1200);
  v6 = *(_BYTE *)(v0 + 1544) & 1;
  v7 = *(_BYTE *)(v0 + 1545) & 1;
  v8 = *(_QWORD *)(v0 + 1120);
  v9 = swift_bridgeObjectRetain(v8);
  v10 = sub_10034F7B8(v1, v8, v6, v2, (_QWORD *)(v0 + 696), v5, v7, v9);
  *(_QWORD *)(v0 + 1512) = v10;
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v2);
  swift_retain(v4);
  swift_retain(v3);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 776));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 776), *(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 792), *(_QWORD *)(v0 + 800));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRetain(v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v14 = 134217984;
    *(_QWORD *)(v0 + 1136) = *(_QWORD *)(v10 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1136, v0 + 1144, v14 + 4);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "VisibleTablesQuery: found %ld matching tables(s)", v14, 0xCu);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v10);
  }

  v15 = *(_QWORD *)(v0 + 1216);
  v16 = *(_QWORD *)(v0 + 1208);
  (*(void (**)(_QWORD, _QWORD))(v0 + 1488))(*(_QWORD *)(v0 + 1256), *(_QWORD *)(v0 + 1224));
  swift_retain(v16);
  swift_retain(v15);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 936));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 936), *(_QWORD *)(v0 + 944), *(_QWORD *)(v0 + 952), *(_QWORD *)(v0 + 960));
  swift_release(v16);
  swift_release(v15);
  v17 = swift_bridgeObjectRetain_n(v10, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(void (**)(uint64_t, uint64_t))(v0 + 1488);
  if (v20)
  {
    v22 = *(_QWORD *)(v0 + 1296);
    v34 = *(_QWORD *)(v0 + 1224);
    v35 = *(_QWORD *)(v0 + 1248);
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v37 = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(v10);
    v26 = Array.description.getter(v25, v22);
    v28 = v27;
    swift_bridgeObjectRelease(v10);
    *(_QWORD *)(v0 + 1128) = sub_1003A4190(v26, v28, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1128, v0 + 1136, v23 + 4);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease_n(v10, 2);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "VisibleTablesQuery: matching note IDs: %s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v21(v35, v34);
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 1248);
    v30 = *(_QWORD *)(v0 + 1224);
    swift_bridgeObjectRelease_n(v10, 2);

    v21(v29, v30);
  }
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1104));
  v31 = *(_QWORD *)(v0 + 1104);
  *(_QWORD *)(v0 + 1520) = v31;
  v36 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D01A8 + dword_1005D01A8);
  v32 = (_QWORD *)swift_task_alloc(unk_1005D01AC);
  *(_QWORD *)(v0 + 1528) = v32;
  *v32 = v0;
  v32[1] = sub_10034E4D4;
  return v36(v10, v31);
}

uint64_t sub_10034E4D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  v3 = *v2;
  *(_QWORD *)(v3 + 1032) = v2;
  *(_QWORD *)(v3 + 1040) = a1;
  *(_QWORD *)(v3 + 1048) = v1;
  v4 = *(_QWORD *)(v3 + 1528);
  *(_QWORD *)(v3 + 1536) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {

    return swift_task_switch(sub_10034E6A8, 0, 0);
  }
  else
  {
    v6 = v3 + 16;
    v7 = v3 + 1120;
    v8 = v3 + 1056;
    v9 = *(void **)(v3 + 1520);
    v10 = *(_QWORD *)(v3 + 1512);

    swift_bridgeObjectRelease(v10);
    return swift_asyncLet_finish(v6, v7, sub_10034E590, v8);
  }
}

uint64_t sub_10034E590()
{
  return swift_task_switch(sub_10034E5A4, 0, 0);
}

uint64_t sub_10034E5A4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 1496);
  v2 = *(void **)(v0 + 1480);
  v3 = *(void **)(v0 + 1352);
  v4 = *(void **)(v0 + 1344);

  swift_release(v1);
  v5 = *(_QWORD *)(v0 + 1496);
  v6 = *(_QWORD *)(v0 + 1328);
  v7 = *(_QWORD *)(v0 + 1320);
  v8 = *(_QWORD *)(v0 + 1312);
  v9 = *(_QWORD *)(v0 + 1288);
  v10 = *(_QWORD *)(v0 + 1264);
  v11 = *(_QWORD *)(v0 + 1256);
  v12 = *(_QWORD *)(v0 + 1248);
  v14 = *(_QWORD *)(v0 + 1240);
  v15 = *(_QWORD *)(v0 + 1040);
  sub_1000153C0((_QWORD *)(v0 + 696));
  sub_100012C50((uint64_t)&unk_1005DA1A8, v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v15);
}

uint64_t sub_10034E6A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1512));
  return swift_asyncLet_finish(v0 + 16, v0 + 1120, sub_10034E6FC, v0 + 656);
}

uint64_t sub_10034E6FC()
{
  return swift_task_switch(sub_10034E710, 0, 0);
}

uint64_t sub_10034E710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 1536);
  v2 = *(_QWORD *)(v0 + 1216);
  v3 = *(_QWORD *)(v0 + 1208);
  swift_release(*(_QWORD *)(v0 + 1496));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 872));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 1112) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1112, v0 + 1120, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "VisibleTablesQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1488);
  v13 = *(void **)(v0 + 1480);
  v14 = *(_QWORD *)(v0 + 1240);
  v15 = *(_QWORD *)(v0 + 1224);

  v16 = v12(v14, v15);
  swift_willThrow(v16);

  v17 = *(_QWORD *)(v0 + 1496);
  v18 = *(void **)(v0 + 1352);
  v19 = *(void **)(v0 + 1344);
  v20 = *(_QWORD *)(v0 + 1328);
  v21 = *(_QWORD *)(v0 + 1320);
  v22 = *(_QWORD *)(v0 + 1312);
  v23 = *(_QWORD *)(v0 + 1288);
  v24 = *(_QWORD *)(v0 + 1264);
  v25 = *(_QWORD *)(v0 + 1256);
  v27 = *(_QWORD *)(v0 + 1248);
  v28 = *(_QWORD *)(v0 + 1240);

  sub_1000153C0((_QWORD *)(v0 + 696));
  sub_100012C50((uint64_t)&unk_1005DA1A8, v17);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034E9A0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 1352);
  v2 = *(void **)(v0 + 1344);
  v3 = *(_QWORD *)(v0 + 1328);
  v4 = *(_QWORD *)(v0 + 1320);
  v5 = *(_QWORD *)(v0 + 1312);
  v6 = *(_QWORD *)(v0 + 1288);
  v7 = *(_QWORD *)(v0 + 1264);
  v8 = *(_QWORD *)(v0 + 1256);
  v10 = *(_QWORD *)(v0 + 1248);
  v11 = *(_QWORD *)(v0 + 1240);

  sub_1000153C0((_QWORD *)(v0 + 696));
  sub_100012C50(0, 0);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034EA88()
{
  return swift_task_switch(sub_10034EA9C, 0, 0);
}

uint64_t sub_10034EA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 1504);
  v2 = *(_QWORD *)(v0 + 1216);
  v3 = *(_QWORD *)(v0 + 1208);
  swift_release(*(_QWORD *)(v0 + 1496));
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 872));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 872), *(_QWORD *)(v0 + 880), *(_QWORD *)(v0 + 888), *(_QWORD *)(v0 + 896));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 1112) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1112, v0 + 1120, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "VisibleTablesQuery: error fetching notes: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
  }
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 1488);
  v13 = *(void **)(v0 + 1480);
  v14 = *(_QWORD *)(v0 + 1240);
  v15 = *(_QWORD *)(v0 + 1224);

  v16 = v12(v14, v15);
  swift_willThrow(v16);

  v17 = *(_QWORD *)(v0 + 1496);
  v18 = *(void **)(v0 + 1352);
  v19 = *(void **)(v0 + 1344);
  v20 = *(_QWORD *)(v0 + 1328);
  v21 = *(_QWORD *)(v0 + 1320);
  v22 = *(_QWORD *)(v0 + 1312);
  v23 = *(_QWORD *)(v0 + 1288);
  v24 = *(_QWORD *)(v0 + 1264);
  v25 = *(_QWORD *)(v0 + 1256);
  v27 = *(_QWORD *)(v0 + 1248);
  v28 = *(_QWORD *)(v0 + 1240);

  sub_1000153C0((_QWORD *)(v0 + 696));
  sub_100012C50((uint64_t)&unk_1005DA1A8, v17);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10034ED2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 40) = *v3;
  return swift_task_switch(sub_10034ED50, 0, 0);
}

uint64_t sub_10034ED50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[3];
  v1 = v0[4];
  v3 = sub_100012E18(&qword_1005DA118);
  v4 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
  v0[7] = v9;
  *(_OWORD *)(v9 + 16) = xmmword_100451C20;
  v10 = (_QWORD *)(v9 + v8);
  *v10 = swift_getKeyPath(&unk_100464588, v11);
  v10[1] = v2;
  v10[2] = v1;
  swift_storeEnumTagMultiPayload(v10, v4, 4);
  v12 = dword_1005DA184;
  swift_bridgeObjectRetain(v1);
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[8] = v13;
  *v13 = v0;
  v13[1] = sub_100231D38;
  return VisibleTablesQuery.entities(matching:mode:sortedBy:limit:)(v9, 0, (uint64_t)_swiftEmptyArrayStorage, 0, 1, v0[5], v0[6]);
}

uint64_t sub_10034EE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100012E18(&qword_1005DA1C8);
  sub_10012B334(v0, static VisibleTablesQuery.sortingOptions);
  sub_10012A0B0(v0, (uint64_t)static VisibleTablesQuery.sortingOptions);
  v1 = type metadata accessor for TableEntity(0);
  v2 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  return EntityQuerySortingOptions.init(content:)(sub_10034EED8, 0, v1, v2);
}

uint64_t sub_10034EED8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v20;

  v0 = sub_100012E18((uint64_t *)&unk_1005DA420);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v20 - v5;
  KeyPath = swift_getKeyPath(&unk_100464898, v7);
  v9 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  v10 = sub_100016638(&qword_1005D3F48, (uint64_t *)&unk_1005CEEB0, (uint64_t)&protocol conformance descriptor for EntityProperty<A>);
  EntityQuerySortableByProperty.init<A>(_:)(KeyPath, v9, v10);
  v11 = type metadata accessor for TableEntity(0);
  static EntityQuerySortingOptionsBuilder.buildExpression(_:)(v4);
  v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v13 = sub_100012E18((uint64_t *)&unk_1005DA430);
  v14 = *(unsigned __int8 *)(v1 + 80);
  v15 = (v14 + 32) & ~v14;
  v16 = swift_allocObject(v13, v15 + *(_QWORD *)(v1 + 72), v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_100451C20;
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))(v16 + v15, v6, v0);
  v17 = static EntityQuerySortingOptionsBuilder.buildBlock(_:)(v16, v11, v9);
  v18 = swift_bridgeObjectRelease(v16);
  ((void (*)(char *, uint64_t, __n128))v12)(v6, v0, v18);
  return v17;
}

uint64_t VisibleTablesQuery.sortingOptions.unsafeMutableAddressor()
{
  return sub_1001E412C(&qword_1005CED20, &qword_1005DA1C8, (uint64_t)static VisibleTablesQuery.sortingOptions, (uint64_t)sub_10034EE4C);
}

uint64_t static VisibleTablesQuery.sortingOptions.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4194(&qword_1005CED20, &qword_1005DA1C8, (uint64_t)static VisibleTablesQuery.sortingOptions, (uint64_t)sub_10034EE4C, a1);
}

uint64_t sub_10034F0B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v0 = sub_100012E18((uint64_t *)&unk_1005DA1D0);
  sub_10012B334(v0, static VisibleTablesQuery.properties);
  sub_10012A0B0(v0, (uint64_t)static VisibleTablesQuery.properties);
  v1 = type metadata accessor for TableEntity(0);
  v2 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  v3 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  return EntityQueryProperties.init(properties:)(sub_10034F15C, 0, v1, v2, v3);
}

uint64_t sub_10034F15C()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012E18(&qword_1005DA400);
  KeyPath = swift_getKeyPath(&unk_100464898, v0);
  v2 = EntityQueryProperty.__allocating_init<>(_:comparators:)(KeyPath, sub_10034F278, 0);
  v3 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  v4 = static EntityQueryPropertiesBuilder.buildExpression(_:)(v2, v3);
  swift_release(v2);
  v5 = sub_100012E18(&qword_1005CF6F0);
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100456F30;
  *(_QWORD *)(v6 + 32) = v4;
  v11 = v6;
  specialized Array._endMutation()(v6);
  v7 = type metadata accessor for TableEntity(0);
  v8 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  swift_retain(v4);
  v9 = static EntityQueryPropertiesBuilder.buildBlock(_:)(v11, v7, v8, v3);
  swift_bridgeObjectRelease(v11);
  swift_release(v4);
  return v9;
}

uint64_t sub_10034F278()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v18;

  v0 = sub_100012E18(&qword_1005DA408);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005DA410);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = ContainsComparator.init<>(mappingTransform:)(sub_10034F424, 0);
  v6 = type metadata accessor for TableEntity(0);
  v7 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  static EntityQueryComparatorsBuilder.buildExpression(_:)(v5, v6, v6, v7, v7);
  swift_release(v5);
  v8 = sub_100012E18(&qword_1005DA418);
  v9 = *(unsigned __int8 *)(v1 + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject(v8, v10 + *(_QWORD *)(v1 + 72), v9 | 7);
  *(_OWORD *)(v11 + 16) = xmmword_100451C20;
  (*(void (**)(uint64_t, char *, uint64_t))(v1 + 16))(v11 + v10, v3, v0);
  v12 = sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v13 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  v14 = sub_1001B2FAC();
  v15 = static EntityQueryComparatorsBuilder.buildBlock(_:)(v11, v6, v6, v12, &type metadata for String, v13, v7, v7, v14);
  v16 = swift_bridgeObjectRelease(v11);
  (*(void (**)(char *, uint64_t, __n128))(v1 + 8))(v3, v0, v16);
  return v15;
}

double sub_10034F424@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  double result;

  *a3 = swift_getKeyPath(&unk_100464588, a2);
  a3[1] = a1;
  a3[2] = a2;
  v6 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  swift_storeEnumTagMultiPayload(a3, v6, 4);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a2).n128_u64[0];
  return result;
}

uint64_t VisibleTablesQuery.properties.unsafeMutableAddressor()
{
  return sub_1001E412C(&qword_1005CED28, (uint64_t *)&unk_1005DA1D0, (uint64_t)static VisibleTablesQuery.properties, (uint64_t)sub_10034F0B4);
}

uint64_t static VisibleTablesQuery.properties.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4194(&qword_1005CED28, (uint64_t *)&unk_1005DA1D0, (uint64_t)static VisibleTablesQuery.properties, (uint64_t)sub_10034F0B4, a1);
}

uint64_t sub_10034F4C8@<X0>(unsigned __int8 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v4 = type metadata accessor for String.StandardComparator(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v19 - v9;
  v11 = sub_100012E18((uint64_t *)&unk_1005D5600);
  __chkstk_darwin(v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  sub_1000163BC(0, &qword_1005D39A0, NSSortDescriptor_ptr);
  KeyPath = swift_getKeyPath(&unk_1004648E0, v15);
  static String.StandardComparator.localizedStandard.getter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  SortDescriptor.init<A>(_:comparator:order:)(KeyPath, v8, v14);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  v17 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  result = NSSortDescriptor.init<A>(_:)(v13, v17);
  *a2 = result;
  return result;
}

uint64_t sub_10034F63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_10034F658, 0, 0);
}

uint64_t sub_10034F658()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = (void *)v0[4];
  v1 = (void *)v0[5];
  v3 = (void *)v0[3];
  v4 = (_QWORD *)swift_allocObject(&unk_10056A850, 40, 7);
  v0[6] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v6 = v3;
  v7 = v2;
  v8 = v1;
  v9 = (_QWORD *)swift_task_alloc(v5);
  v0[7] = v9;
  v10 = sub_100012E18(&qword_1005D3D90);
  *v9 = v0;
  v9[1] = sub_1002326D0;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_1003533C0, v4, v10);
}

void sub_10034F710(uint64_t a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;

  v7 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  v8 = NSManagedObjectContext.fetch<A>(_:)(a1, v7);
  if (!v3)
  {
    v9 = v8;
    v10 = a2;
    v11 = sub_100351BA8(v9, v10);
    swift_bridgeObjectRelease(v9);

    *a3 = v11;
  }
}

uint64_t sub_10034F7B8(char a1, uint64_t a2, char a3, uint64_t a4, _QWORD *a5, uint64_t a6, char a7, __n128 a8)
{
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v13 = a3 & 1;
  if ((a1 & 1) != 0)
  {
    a8 = swift_bridgeObjectRetain(a2);
    v14 = (_QWORD *)a2;
  }
  else
  {
    v14 = _swiftEmptyArrayStorage;
  }
  if ((static EntityQueryComparatorMode.== infix(_:_:)(v13, 1, a8) & 1) != 0 && a4)
  {
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    sub_1001D9B04(a2);
    v15 = sub_10020C4F0(a4);
    swift_bridgeObjectRelease(a4);
    v14 = sub_10016C090(v15);
    swift_bridgeObjectRelease(v15);
  }
  v16 = a5[3];
  v17 = a5[4];
  v18 = sub_10012D19C(a5, v16);
  v19 = sub_100012E18(&qword_1005D3D90);
  v20 = sub_100016638(&qword_1005D3D98, &qword_1005D3D90, (uint64_t)&protocol conformance descriptor for [A]);
  v21 = sub_10034A664((uint64_t)v18, a6, a7 & 1, v19, v16, v20, v17);
  swift_bridgeObjectRelease(v14);
  v22 = sub_100349504((uint64_t)v21);
  swift_bridgeObjectRelease(v21);
  return v22;
}

uint64_t sub_10034F924@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4A30(&qword_1005CED28, (uint64_t *)&unk_1005DA1D0, (uint64_t)static VisibleTablesQuery.properties, (uint64_t)sub_10034F0B4, a1);
}

uint64_t sub_10034F948@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4A30(&qword_1005CED20, &qword_1005DA1C8, (uint64_t)static VisibleTablesQuery.sortingOptions, (uint64_t)sub_10034EE4C, a1);
}

uint64_t sub_10034F96C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  _QWORD *v15;

  *(_QWORD *)(v7 + 16) = a1;
  v12 = *v6;
  v11 = v6[1];
  v13 = a3 & 1;
  v14 = a6 & 1;
  v15 = (_QWORD *)swift_task_alloc(dword_1005DA184);
  *(_QWORD *)(v7 + 24) = v15;
  *v15 = v7;
  v15[1] = sub_100136FB0;
  return VisibleTablesQuery.entities(matching:mode:sortedBy:limit:)(a2, v13, a4, a5, v14, v12, v11);
}

void sub_10034FA00(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, "title");
  if (v3)
  {
    v4 = v3;
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_10034FA64(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD v25[24];

  v3 = v2;
  v6 = type metadata accessor for ICQueryType(0);
  v25[6] = *(_QWORD *)(v6 - 8);
  v25[7] = v6;
  __chkstk_darwin(v6);
  v25[5] = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FolderEntity(0);
  __chkstk_darwin(v8);
  v25[3] = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005D1080);
  v11 = __chkstk_darwin(v10);
  v25[2] = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v25[1] = (char *)v25 - v14;
  v15 = __chkstk_darwin(v13);
  v25[4] = (char *)v25 - v16;
  __chkstk_darwin(v15);
  v17 = sub_100012E18(&qword_1005DA460);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (uint64_t)&v20[*(int *)(v18 + 48)];
  v22 = *(int *)(v18 + 64);
  sub_100145220(v3, (uint64_t)v20, type metadata accessor for VisibleTablesQuery.Comparator);
  v25[8] = a1;
  v25[9] = v21;
  sub_100012CE8(a1, v21, &qword_1005D1080);
  v20[v22] = a2;
  v23 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  v24 = (char *)&loc_10034FC38 + *((int *)qword_1003509F8 + swift_getEnumCaseMultiPayload(v20, v23));
  __asm { BR              X10 }
}

uint64_t sub_10034FC48()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v1) != 1)
  {
    v5 = *(_QWORD *)(v4 - 200);
    if ((v0 & 1) != 0)
    {
      v6 = *(_QWORD *)(v4 - 248);
      sub_1002353B8(v2, v6);
      sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
      v7 = sub_100012E18((uint64_t *)&unk_1005D5630);
      v8 = swift_allocObject(v7, 72, 7);
      *(_OWORD *)(v8 + 16) = xmmword_100451C20;
      v9 = FolderID.managedIdentifier.getter();
      v11 = v10;
      *(_QWORD *)(v8 + 56) = &type metadata for String;
      *(_QWORD *)(v8 + 64) = sub_1001797EC();
      *(_QWORD *)(v8 + 32) = v9;
      *(_QWORD *)(v8 + 40) = v11;
      v12 = 0xD00000000000001DLL;
      v13 = "folderManagedIdentifier == %@";
LABEL_11:
      v14 = NSPredicate.init(format:_:)(v12, (unint64_t)(v13 - 32) | 0x8000000000000000, v8);
      sub_100145264(v6, type metadata accessor for FolderEntity);
      goto LABEL_5;
    }
    v16 = type metadata accessor for ManagedEntityContextType(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) != 1)
    {
      v18 = *(_QWORD *)(v4 - 264);
      sub_100012CE8(v5, v18, &qword_1005D1080);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v17 + 88))(v18, v16) == enum case for ManagedEntityContextType.html(_:))
      {
        v6 = *(_QWORD *)(v4 - 248);
        sub_1002353B8(v2, v6);
        sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
        v19 = sub_100012E18((uint64_t *)&unk_1005D5630);
        v8 = swift_allocObject(v19, 72, 7);
        *(_OWORD *)(v8 + 16) = xmmword_100451C20;
        v20 = FolderID.managedIdentifier.getter();
        v22 = v21;
        *(_QWORD *)(v8 + 56) = &type metadata for String;
        *(_QWORD *)(v8 + 64) = sub_1001797EC();
        *(_QWORD *)(v8 + 32) = v20;
        *(_QWORD *)(v8 + 40) = v22;
        v12 = 0xD00000000000001ELL;
        v13 = "store.externalIdentifier == %@";
        goto LABEL_11;
      }
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v16);
    }
    v6 = *(_QWORD *)(v4 - 248);
    sub_1002353B8(v2, v6);
    sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
    v23 = sub_100012E18((uint64_t *)&unk_1005D5630);
    v8 = swift_allocObject(v23, 72, 7);
    *(_OWORD *)(v8 + 16) = xmmword_100451C20;
    v24 = FolderID.managedIdentifier.getter();
    v26 = v25;
    *(_QWORD *)(v8 + 56) = &type metadata for String;
    *(_QWORD *)(v8 + 64) = sub_1001797EC();
    *(_QWORD *)(v8 + 32) = v24;
    *(_QWORD *)(v8 + 40) = v26;
    v12 = 0xD000000000000017;
    v13 = "folder.identifier == %@";
    goto LABEL_11;
  }
  v14 = 0;
  v5 = *(_QWORD *)(v4 - 200);
LABEL_5:
  sub_100012DDC(v5, &qword_1005D1080);
  return v14;
}

id sub_100350A28(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, char *, uint64_t);
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  id v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  _QWORD *v61;
  NSArray v62;
  void *v63;
  id v64;
  void *v65;
  id v66;
  id v67;
  uint64_t v68;
  char *v70;
  uint64_t v71;
  uint64_t *v72;
  int v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  unint64_t v82;

  v75 = a4;
  v73 = a2;
  v74 = a1;
  v81 = type metadata accessor for ICQueryType(0);
  v5 = *(_QWORD *)(v81 - 8);
  v6 = __chkstk_darwin(v81);
  v72 = (uint64_t *)((char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = __chkstk_darwin(v6);
  v80 = (char *)&v70 - v9;
  __chkstk_darwin(v8);
  v79 = (char *)&v70 - v10;
  v78 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  v71 = *(_QWORD *)(v78 - 8);
  v11 = __chkstk_darwin(v78);
  v13 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v70 - v14;
  v16 = type metadata accessor for ManagedEntityContextType(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v70 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100012E18((uint64_t *)&unk_1005D4060);
  __chkstk_darwin(v19);
  v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100012E18(&qword_1005D1080);
  v23 = __chkstk_darwin(v22);
  v77 = (uint64_t)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v26 = (char *)&v70 - v25;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))((char *)&v70 - v25, enum case for ManagedEntityContextType.html(_:), v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v26, 0, 1, v16);
  v27 = (uint64_t)&v21[*(int *)(v19 + 48)];
  v76 = (char *)a3;
  sub_100012CE8(a3, (uint64_t)v21, &qword_1005D1080);
  sub_100012CE8((uint64_t)v26, v27, &qword_1005D1080);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  if (v28((uint64_t)v21, 1, v16) == 1)
  {
    sub_100012DDC((uint64_t)v26, &qword_1005D1080);
    if (v28(v27, 1, v16) == 1)
    {
      v29 = sub_100012DDC((uint64_t)v21, &qword_1005D1080);
LABEL_26:
      __chkstk_darwin(v29);
      v46 = (uint64_t)v76;
      *(&v70 - 2) = v76;
      *((_BYTE *)&v70 - 8) = v75 & 1;
      v60 = v74;
      v61 = sub_100349750((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))sub_100353418, (uint64_t)(&v70 - 4), v74, type metadata accessor for VisibleTablesQuery.Comparator);
      sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
      v62.super.isa = Array._bridgeToObjectiveC()().super.isa;
      v63 = (void *)objc_opt_self(NSCompoundPredicate);
      if ((v73 & 1) != 0)
        v64 = objc_msgSend(v63, "orPredicateWithSubpredicates:", v62.super.isa);
      else
        v64 = objc_msgSend(v63, "andPredicateWithSubpredicates:", v62.super.isa);
      v67 = v64;
      v68 = v60;
      goto LABEL_35;
    }
    goto LABEL_6;
  }
  v30 = v77;
  sub_100012CE8((uint64_t)v21, v77, &qword_1005D1080);
  if (v28(v27, 1, v16) == 1)
  {
    sub_100012DDC((uint64_t)v26, &qword_1005D1080);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v30, v16);
LABEL_6:
    sub_100012DDC((uint64_t)v21, (uint64_t *)&unk_1005D4060);
    goto LABEL_7;
  }
  v56 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v70, v27, v16);
  v57 = sub_100019C6C(&qword_1005D5610, (uint64_t (*)(uint64_t))&type metadata accessor for ManagedEntityContextType, (uint64_t)&protocol conformance descriptor for ManagedEntityContextType);
  v58 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v56, v16, v57);
  v59 = *(void (**)(char *, uint64_t))(v17 + 8);
  v59(v56, v16);
  sub_100012DDC((uint64_t)v26, &qword_1005D1080);
  v59((char *)v30, v16);
  v29 = sub_100012DDC((uint64_t)v21, &qword_1005D1080);
  if ((v58 & 1) != 0)
    goto LABEL_26;
LABEL_7:
  v31 = (char *)_swiftEmptyArrayStorage;
  v82 = (unint64_t)_swiftEmptyArrayStorage;
  v32 = v74;
  v33 = *(_QWORD *)(v74 + 16);
  if (v33)
  {
    v34 = v74 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
    v77 = *(_QWORD *)(v71 + 72);
    swift_bridgeObjectRetain(v74);
    do
    {
      sub_100145220(v34, (uint64_t)v15, type metadata accessor for VisibleTablesQuery.Comparator);
      sub_100145220((uint64_t)v15, (uint64_t)v13, type metadata accessor for VisibleTablesQuery.Comparator);
      if (swift_getEnumCaseMultiPayload(v13, v78) == 1)
      {
        v36 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
        v37 = v79;
        v38 = v81;
        v36(v79, v13, v81);
        (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v80, v37, v38);
        if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0)
          v31 = (char *)sub_10016ACCC(0, *((_QWORD *)v31 + 2) + 1, 1, (unint64_t)v31);
        v40 = *((_QWORD *)v31 + 2);
        v39 = *((_QWORD *)v31 + 3);
        if (v40 >= v39 >> 1)
          v31 = (char *)sub_10016ACCC(v39 > 1, v40 + 1, 1, (unint64_t)v31);
        *((_QWORD *)v31 + 2) = v40 + 1;
        v35 = v81;
        v36(&v31[((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v40], v80, v81);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v79, v35);
      }
      else
      {
        sub_100145264((uint64_t)v13, type metadata accessor for VisibleTablesQuery.Comparator);
        sub_10034FA64((uint64_t)v76, v75 & 1);
        if (v41)
        {
          v42 = v41;
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
          v44 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v43 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v44 >= v43 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
          specialized Array._endMutation()(v45);

        }
      }
      sub_100145264((uint64_t)v15, type metadata accessor for VisibleTablesQuery.Comparator);
      v34 += v77;
      --v33;
    }
    while (v33);
    v32 = v74;
    swift_bridgeObjectRelease(v74);
  }
  v46 = (uint64_t)v76;
  if (*((_QWORD *)v31 + 2))
  {
    v47 = swift_allocObject(&unk_10056A878, 24, 7);
    *(_QWORD *)(v47 + 16) = v31;
    v48 = v72;
    *v72 = v47;
    v49 = v81;
    v50 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v5 + 104))(v48, enum case for ICQueryType.and(_:), v81);
    v51 = ICQueryType.predicate.getter(v50);
    v52 = (*(uint64_t (**)(uint64_t *, uint64_t))(v5 + 8))(v48, v49);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v52);
    v54 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v53 = *(_QWORD *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v54 >= v53 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
    v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v51);
    specialized Array._endMutation()(v55);
  }
  else
  {
    swift_bridgeObjectRelease(v31);
  }
  v61 = (_QWORD *)v82;
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  swift_bridgeObjectRetain(v61);
  v62.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v61);
  v65 = (void *)objc_opt_self(NSCompoundPredicate);
  if ((v73 & 1) != 0)
    v66 = objc_msgSend(v65, "orPredicateWithSubpredicates:", v62.super.isa);
  else
    v66 = objc_msgSend(v65, "andPredicateWithSubpredicates:", v62.super.isa);
  v67 = v66;
  v68 = v32;
LABEL_35:
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v61);

  sub_100012DDC(v46, &qword_1005D1080);
  return v67;
}

void VisibleTablesQuery.Comparator.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t (*v9)(_QWORD);
  char *v10;
  _QWORD v11[22];

  v1 = type metadata accessor for ICQueryType(0);
  v11[0] = *(_QWORD *)(v1 - 8);
  v11[1] = v1;
  __chkstk_darwin(v1);
  v2 = type metadata accessor for FolderEntity(0);
  v3 = __chkstk_darwin(v2);
  __chkstk_darwin(v3);
  v4 = sub_100012E18(&qword_1005D1EB0);
  v5 = __chkstk_darwin(v4);
  __chkstk_darwin(v5);
  v6 = type metadata accessor for VisibleTablesQuery.Comparator(0);
  __chkstk_darwin(v6);
  v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100145220(v0, (uint64_t)v8, v9);
  v10 = (char *)sub_100351350 + 4 * word_100464530[swift_getEnumCaseMultiPayload(v8, v6)];
  __asm { BR              X10 }
}

uint64_t sub_100351350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;

  sub_100235370(v5, v3);
  sub_100012CE8(v3, v6, &qword_1005D1EB0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v6, 1, v0) == 1)
  {
    v8 = (void *)0xE300000000000000;
    v9 = 7104878;
  }
  else
  {
    sub_1002353B8(v6, v1);
    sub_100145220(v1, v4, type metadata accessor for FolderEntity);
    v9 = String.init<A>(describing:)(v4, v0);
    v8 = v11;
    sub_100145264(v1, type metadata accessor for FolderEntity);
  }
  strcpy((char *)(v7 - 128), "containedIn(");
  *(_BYTE *)(v7 - 115) = 0;
  *(_WORD *)(v7 - 114) = -5120;
  v12._countAndFlagsBits = v9;
  v12._object = v8;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v8);
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  v14 = *(_QWORD *)(v7 - 128);
  sub_100012DDC(v3, &qword_1005D1EB0);
  return v14;
}

uint64_t sub_100351A20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100351A4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v4 = swift_task_alloc(dword_1005DA104);
  v5 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v4;
  *(_QWORD *)v4 = v2;
  *(_QWORD *)(v4 + 8) = sub_100130768;
  *(_OWORD *)(v4 + 24) = v5;
  *(_QWORD *)(v4 + 16) = a1;
  return swift_task_switch(sub_10034B908, 0, 0);
}

uint64_t type metadata accessor for VisibleTablesQuery.Comparator(uint64_t a1)
{
  return sub_100010414(a1, qword_1005DA3B8, (uint64_t)&nominal type descriptor for VisibleTablesQuery.Comparator);
}

void sub_100351AC8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10034FA00(a1, a2);
}

uint64_t sub_100351ADC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100351B1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_1005DA1A4);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100145358;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_10034F658, 0, 0);
}

uint64_t type metadata accessor for TableSearchResult(uint64_t a1)
{
  return sub_100010414(a1, qword_1005DA2B8, (uint64_t)&nominal type descriptor for TableSearchResult);
}

_QWORD *sub_100351BA8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char **v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  id v23;
  unsigned __int8 v24;
  uint64_t v25;
  objc_class *v26;
  id v27;
  id v28;
  char *v29;
  char *v30;
  id v31;
  void *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  objc_super v52;
  _QWORD v53[3];
  uint64_t v54;
  _QWORD v55[4];
  unint64_t v56;

  v3 = v2;
  v50 = a2;
  v5 = type metadata accessor for TableID(0);
  v46 = *(_QWORD *)(v5 - 8);
  v47 = v5;
  __chkstk_darwin(v5);
  v45 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = (unint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_25;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v43))
  {
    v44 = v3;
    v8 = a1 & 0xC000000000000001;
    v3 = 4;
    v9 = &selRef_predicateWithFormat_argumentArray_;
    v48 = a1 & 0xC000000000000001;
    v49 = v7;
    while (1)
    {
      v10 = v8 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      v11 = v10;
      v12 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      if (objc_msgSend(v10, v9[473]))
      {
        v13 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
        v55[3] = v13;
        v55[0] = v11;
        sub_100012CE8((uint64_t)v55, (uint64_t)v53, &qword_1005CF190);
        v14 = v54;
        if (v54)
        {
          v15 = sub_10012D19C(v53, v54);
          v51 = v13;
          v16 = a1;
          v17 = *(_QWORD *)(v14 - 8);
          __chkstk_darwin(v15);
          v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v17 + 16))(v19);
          v20 = v11;
          v21 = _bridgeAnythingToObjectiveC<A>(_:)(v19, v14);
          v22 = *(void (**)(char *, uint64_t))(v17 + 8);
          a1 = v16;
          v22(v19, v14);
          v13 = v51;
          sub_1000153C0(v53);
        }
        else
        {
          v23 = v11;
          v21 = 0;
        }
        v24 = objc_msgSend(v50, "evaluateWithObject:", v21, v44);
        swift_unknownObjectRelease(v21, v25);
        sub_100012DDC((uint64_t)v55, &qword_1005CF190);
        if ((v24 & 1) != 0)
        {
          v26 = (objc_class *)type metadata accessor for TableSearchResult(0);
          v27 = objc_allocWithZone(v26);
          v28 = v11;
          v29 = (char *)v27;
          v30 = v45;
          ICTableObject<>.tableEntityIdentifier.getter(v13);
          (*(void (**)(char *, char *, uint64_t))(v46 + 32))(&v29[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_id], v30, v47);
          v31 = objc_msgSend(v28, "title");
          if (v31)
          {
            v32 = v31;
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
            v35 = v34;

          }
          else
          {
            v33 = 0;
            v35 = 0xE000000000000000;
          }
          v36 = (uint64_t *)&v29[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_title];
          *v36 = v33;
          v36[1] = v35;

          v52.receiver = v29;
          v52.super_class = v26;
          v37 = objc_msgSendSuper2(&v52, "init");

          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v38);
          v40 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v39 = *(_QWORD *)((v56 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v40 >= v39 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
          v41 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v37);
          specialized Array._endMutation()(v41);
        }
        else
        {

        }
        v8 = v48;
        v7 = v49;
        v9 = &selRef_predicateWithFormat_argumentArray_;
      }
      else
      {

      }
      ++v3;
      if (v12 == v7)
      {
        swift_bridgeObjectRelease(a1);
        return (_QWORD *)v56;
      }
    }
    __break(1u);
LABEL_25:
    if (a1 < 0)
      v43 = a1;
    else
      v43 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

id sub_100351F34(void *a1, void *a2, uint64_t a3)
{
  objc_class *ObjectType;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  objc_super v19;

  ObjectType = (objc_class *)swift_getObjectType(a2);
  v7 = type metadata accessor for TableID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2;
  ICTableObject<>.tableEntityIdentifier.getter(a3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v11[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_id], v10, v7);
  v12 = objc_msgSend(a1, "title");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

  }
  else
  {
    v14 = 0;
    v16 = 0xE000000000000000;
  }
  v17 = (uint64_t *)&v11[OBJC_IVAR____TtC11MobileNotesP33_3A26B74EEED685164DF9267FE58E345F17TableSearchResult_title];
  *v17 = v14;
  v17[1] = v16;

  v19.receiver = v11;
  v19.super_class = ObjectType;
  return objc_msgSendSuper2(&v19, "init");
}

unint64_t sub_100352058()
{
  unint64_t result;

  result = qword_1005DA1F8;
  if (!qword_1005DA1F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleTablesQuery, &type metadata for VisibleTablesQuery);
    atomic_store(result, (unint64_t *)&qword_1005DA1F8);
  }
  return result;
}

unint64_t sub_1003520A0()
{
  unint64_t result;

  result = qword_1005DA200;
  if (!qword_1005DA200)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleTablesQuery, &type metadata for VisibleTablesQuery);
    atomic_store(result, (unint64_t *)&qword_1005DA200);
  }
  return result;
}

uint64_t sub_1003520E4()
{
  return sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
}

unint64_t sub_100352114()
{
  unint64_t result;

  result = qword_1005DA220;
  if (!qword_1005DA220)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleTablesQuery, &type metadata for VisibleTablesQuery);
    atomic_store(result, (unint64_t *)&qword_1005DA220);
  }
  return result;
}

uint64_t sub_100352158()
{
  return sub_100019C6C(&qword_1005D10E8, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
}

unint64_t sub_100352188()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DA230;
  if (!qword_1005DA230)
  {
    v1 = sub_10001537C(&qword_1005D28E0);
    sub_100019C6C(&qword_1005D10E8, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005DA230);
  }
  return result;
}

uint64_t sub_100352204()
{
  return type metadata accessor for TableSearchResult(0);
}

uint64_t sub_10035220C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for TableID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_1004647C8;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisibleTablesQuery()
{
  return &type metadata for VisibleTablesQuery;
}

uint64_t type metadata accessor for VisibleTablesQuery.ComparatorKeyPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VisibleTablesQuery.ComparatorKeyPath);
}

uint64_t initializeBufferWithCopyOfBuffer for VisibleTablesQuery.Comparator(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    v5 = (char *)&loc_1003522F4 + 4 * byte_100464548[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  v6 = *a2;
  *a1 = *a2;
  v7 = v6 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

double destroy for VisibleTablesQuery.Comparator(_QWORD *a1, uint64_t a2)
{
  double result;
  _QWORD *v4;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v5 = (int *)type metadata accessor for FolderEntity(0);
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, int *))(*((_QWORD *)v5 - 1) + 48))(a1, 1, v5))
      {
        v6 = type metadata accessor for FolderID(0);
        (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
        v7 = (char *)a1 + v5[5];
        v8 = type metadata accessor for URL(0);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
        swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + v5[6] + 8));
        v9 = *(_QWORD *)((char *)a1 + v5[7] + 8);
        goto LABEL_11;
      }
      return result;
    case 1u:
      v10 = type metadata accessor for ICQueryType(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
      return result;
    case 2u:
      v9 = *a1;
      goto LABEL_11;
    case 3u:
      v9 = a1[1];
      goto LABEL_11;
    case 4u:
      swift_release(*a1);
      v9 = a1[2];
LABEL_11:
      *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
      return result;
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
      sub_1000153C0(a1);
      v4 = a1 + 5;
      goto LABEL_3;
    case 0xBu:
      sub_1000153C0(a1);
      sub_1000153C0(a1 + 5);
      v4 = a1 + 9;
LABEL_3:
      sub_1000153C0(v4);
      break;
    default:
      return result;
  }
  return result;
}

void initializeWithCopy for VisibleTablesQuery.Comparator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;

  v3 = (char *)sub_10035289C + 4 * byte_100464560[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }
}

char *sub_10035289C()
{
  char *v0;
  uint64_t v1;
  char *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v20;

  v3 = (int *)type metadata accessor for FolderEntity(0);
  v4 = *((_QWORD *)v3 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v4 + 48))(v2, 1, v3))
  {
    v5 = sub_100012E18(&qword_1005D1EB0);
    memcpy(v0, v2, *(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  }
  else
  {
    v6 = type metadata accessor for FolderID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(v0, v2, v6);
    v7 = v3[5];
    v8 = &v0[v7];
    v9 = &v2[v7];
    v10 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = v3[6];
    v12 = &v0[v11];
    v13 = &v2[v11];
    v14 = *((_QWORD *)v13 + 1);
    *(_QWORD *)v12 = *(_QWORD *)v13;
    *((_QWORD *)v12 + 1) = v14;
    v15 = v3[7];
    v16 = &v0[v15];
    v17 = &v2[v15];
    v18 = *((_QWORD *)v17 + 1);
    *(_QWORD *)v16 = *(_QWORD *)v17;
    *((_QWORD *)v16 + 1) = v18;
    v0[v3[8]] = v2[v3[8]];
    v0[v3[9]] = v2[v3[9]];
    v19 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v4 + 56);
    swift_bridgeObjectRetain(v14);
    v20 = swift_bridgeObjectRetain(v18);
    v19(v0, 0, 1, v3, v20);
  }
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  return v0;
}

uint64_t assignWithCopy for VisibleTablesQuery.Comparator(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v5;

  if (result != a2)
  {
    sub_100145264(result, type metadata accessor for VisibleTablesQuery.Comparator);
    v5 = (char *)&loc_100352CEC + 4 * byte_10046456C[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }
  return result;
}

char *assignWithTake for VisibleTablesQuery.Comparator(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  if (a1 != a2)
  {
    sub_100145264((uint64_t)a1, type metadata accessor for VisibleTablesQuery.Comparator);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v10 = type metadata accessor for ICQueryType(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(a1, a2, v10);
      v11 = a1;
      v12 = a3;
      v13 = 1;
LABEL_10:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = (int *)type metadata accessor for FolderEntity(0);
      v8 = *((_QWORD *)v7 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_100012E18(&qword_1005D1EB0);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v14 = type metadata accessor for FolderID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a1, a2, v14);
        v15 = v7[5];
        v16 = &a1[v15];
        v17 = &a2[v15];
        v18 = type metadata accessor for URL(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
        *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
        *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
        a1[v7[8]] = a2[v7[8]];
        a1[v7[9]] = a2[v7[9]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v8 + 56))(a1, 0, 1, v7);
      }
      v11 = a1;
      v12 = a3;
      v13 = 0;
      goto LABEL_10;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

void sub_1003532BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[12];

  sub_10023689C(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for ICQueryType(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v6[3] = &unk_1004647C8;
      v6[4] = &unk_100464840;
      v6[5] = &unk_100464858;
      v6[6] = &unk_100464858;
      v6[7] = &unk_100464858;
      v6[8] = &unk_100464858;
      v6[9] = &unk_100464858;
      v6[10] = &unk_100464858;
      v6[11] = &unk_100464870;
      swift_initEnumMetadataMultiPayload(a1, 256, 12, v6);
    }
  }
}

uint64_t sub_10035337C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  type metadata accessor for TableEntity(0);
  result = EntityProperty.projectedValue.getter();
  *a1 = result;
  return result;
}

void sub_1003533C0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10034F710(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

void sub_1003533DC(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10034FA00(a1, a2);
}

uint64_t sub_1003533F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100353418(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  sub_10034FA64(*(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24));
  *a1 = v3;
}

void sub_10035345C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10034B9AC(*(_QWORD *)(v1 + 24), a1);
}

id sub_100353478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  NSURL *v13;
  void *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  void *v24;

  v23 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ChecklistItemEntity(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a3;
  AppDependency.wrappedValue.getter(&v24);
  v12 = v24;
  IntentParameter.wrappedValue.getter(v11);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &v11[*(int *)(v9 + 20)], v5);
  sub_100145264((uint64_t)v11, type metadata accessor for ChecklistItemEntity);
  URL._bridgeToObjectiveC()(v13);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v16 = objc_msgSend(v12, "managedObjectIDForURIRepresentation:", v15);

  if (!v16)
  {
    v17 = swift_allocObject(&unk_10056AA90, 24, 7);
    *(_QWORD *)(v17 + 16) = 0;
    swift_retain(a1);
    v18 = v23;
    swift_retain(v23);
    v19 = v22;
    swift_retain(v22);
    sub_100353F04(v17, 230);
    swift_release(v17);
    swift_release(v19);
    swift_release(v18);
    v20 = swift_release(a1);
    swift_willThrow(v20);
  }
  return v16;
}

uint64_t OpenChecklistItemIntent.target.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for ChecklistItemEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100145220(a1, (uint64_t)v4, type metadata accessor for ChecklistItemEntity);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100145264(a1, type metadata accessor for ChecklistItemEntity);
}

void *OpenChecklistItemIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenChecklistItemIntent.persistentIdentifier;
}

unint64_t static OpenChecklistItemIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1003536FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static OpenChecklistItemIntent.title);
  sub_10012A0B0(v10, (uint64_t)static OpenChecklistItemIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x800000010048A730);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t OpenChecklistItemIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CED30 != -1)
    swift_once(&qword_1005CED30, sub_1003536FC);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static OpenChecklistItemIntent.title);
}

uint64_t static OpenChecklistItemIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CED30 != -1)
    swift_once(&qword_1005CED30, sub_1003536FC);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static OpenChecklistItemIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *OpenChecklistItemIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenChecklistItemIntent.openAppWhenRun;
}

uint64_t static OpenChecklistItemIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003ALL, 0x800000010048A6D0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static OpenChecklistItemIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005DA478);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005DA480);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100185A18();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(26, 1, &type metadata for OpenChecklistItemIntent, v6);
  v7._countAndFlagsBits = 0x74206C6165766552;
  v7._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100464918, v8);
  v10 = sub_100012E18(&qword_1005DA488);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x696C6B6365686320;
  v11._object = (void *)0xEF6D657469207473;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for OpenChecklistItemIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenChecklistItemIntent, v6);
}

uint64_t sub_100353CD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for ChecklistItemEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100145220(a1, (uint64_t)v4, type metadata accessor for ChecklistItemEntity);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100145264(a1, type metadata accessor for ChecklistItemEntity);
}

uint64_t sub_100353D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005DA478);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005DA480);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(26, 1, a1, a2);
  v10._countAndFlagsBits = 0x74206C6165766552;
  v10._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_100464918, v11);
  v13 = sub_100012E18(&qword_1005DA488);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x696C6B6365686320;
  v14._object = (void *)0xEF6D657469207473;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_100353EDC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes23OpenChecklistItemIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

id sub_100353F04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  void **v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  void *v41;
  unint64_t v42;
  char v43[80];
  uint64_t v44;

  v4 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ChecklistItemID(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ChecklistItemEntity(0);
  __chkstk_darwin(v10);
  v12 = (void **)((char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = *(void **)(a1 + 16);
  v14 = (void **)(a1 + 16);
  v13 = v15;
  if (v15)
  {
    v16 = v13;
  }
  else
  {
    v44 = a2;
    v17 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v17, v43);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v19;
    v41 = 0;
    v42 = 0xE000000000000000;
    _StringGuts.grow(_:)(41);
    v20._object = (void *)0x800000010048A710;
    v20._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v20);
    v21._object = (void *)0x8000000100464AA0;
    v21._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v21);
    v22._countAndFlagsBits = 0x6174206874697720;
    v22._object = (void *)0xED00002074656772;
    String.append(_:)(v22);
    IntentParameter.wrappedValue.getter(v12);
    sub_100145220((uint64_t)v12, (uint64_t)v9, type metadata accessor for ChecklistItemID);
    sub_100145264((uint64_t)v12, type metadata accessor for ChecklistItemEntity);
    ChecklistItemID.uriRepresentation.getter((uint64_t)v6);
    v23 = type metadata accessor for URL(0);
    v24 = *(_QWORD *)(v23 - 8);
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48))(v6, 1, v23);
    if ((_DWORD)v25 == 1)
    {
      sub_10013B118((uint64_t)v6);
      v26 = 0;
      v27 = (void *)0xE000000000000000;
    }
    else
    {
      v26 = URL.absoluteString.getter(v25);
      v27 = v28;
      (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v23);
    }
    type metadata accessor for ICError(0);
    v30 = v29;
    v31._countAndFlagsBits = v26;
    v31._object = v27;
    String.append(_:)(v31);
    swift_bridgeObjectRelease(v27);
    sub_100145264((uint64_t)v9, type metadata accessor for ChecklistItemID);
    v32._countAndFlagsBits = 46;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    v33 = v41;
    v34 = v42;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v33;
    *(_QWORD *)(inited + 56) = v34;
    v35 = sub_100174AD0(inited);
    v36 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    _BridgedStoredNSError.init(_:userInfo:)(&v41, &v44, v35, v30, v36);
    v37 = v41;
    swift_beginAccess(v14, &v41, 1, 0);
    v38 = *v14;
    *v14 = v37;
    v16 = v37;

    v13 = 0;
  }
  v39 = v13;
  return v16;
}

uint64_t _s11MobileNotes23OpenChecklistItemIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD v52[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18(&qword_1005CF198);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CF1A0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xEE006D6574492074);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Reveal Checklist Item intent", 48, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100478670);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for checklist item", 40, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for ChecklistItemEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v35 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v36 = sub_100019C6C((unint64_t *)&unk_1005CEE80, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
  v37 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v50 = 0xD000000000000024;
  v51 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v38 = type metadata accessor for AppDependencyManager(0);
  v39 = static AppDependencyManager.shared.getter(v38);
  AppDependency.__allocating_init(key:manager:)(v52, v39);
  sub_100012E18(&qword_1005CEE50);
  v50 = 0xD000000000000021;
  v51 = 0x8000000100476B70;
  v40 = AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v41 = static AppDependencyManager.shared.getter(v40);
  AppDependency.__allocating_init(key:manager:)(v52, v41);
  return v37;
}

uint64_t sub_100354700@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_10035472C()
{
  unint64_t result;

  result = qword_1005DA490;
  if (!qword_1005DA490)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenChecklistItemIntent, &type metadata for OpenChecklistItemIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA490);
  }
  return result;
}

uint64_t sub_100354770()
{
  return sub_100019C6C(&qword_1005D8700, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
}

unint64_t sub_1003547A4()
{
  unint64_t result;

  result = qword_1005DA498;
  if (!qword_1005DA498)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenChecklistItemIntent, &type metadata for OpenChecklistItemIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA498);
  }
  return result;
}

unint64_t sub_1003547EC()
{
  unint64_t result;

  result = qword_1005DA4A0;
  if (!qword_1005DA4A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenChecklistItemIntent, &type metadata for OpenChecklistItemIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA4A0);
  }
  return result;
}

uint64_t sub_100354830(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of OpenChecklistItemIntent.perform()>>, 1);
}

uint64_t sub_100354840(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static OpenChecklistItemIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for OpenChecklistItemIntent()
{
  return &type metadata for OpenChecklistItemIntent;
}

uint64_t sub_100354860()
{
  return sub_100016638(&qword_1005DA4B0, &qword_1005DA4B8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_10035488C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

char *sub_1003548B0(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  void *v26;
  char *v27;
  id v28;
  char *v29;
  objc_class *ObjectType;
  id v32;
  uint64_t v33;
  uint64_t v34;
  objc_super v35;

  v4 = v3;
  v33 = a3;
  v34 = a2;
  v32 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v3);
  v5 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&ObjectType - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&ObjectType - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&ObjectType - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes27TagAssignmentCollectionView_tagAssignmentDataSource] = 0;
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v9);
  UICollectionLayoutListConfiguration.init(appearance:)(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for UICollectionLayoutListConfiguration.FooterMode.supplementary(_:), v5);
  UICollectionLayoutListConfiguration.footerMode.setter(v8);
  sub_100354CA4();
  v17 = (void *)static UICollectionViewCompositionalLayout.list(using:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v35.receiver = v4;
  v35.super_class = ObjectType;
  v18 = objc_msgSendSuper2(&v35, "initWithFrame:collectionViewLayout:", v17, 0.0, 0.0, 0.0, 0.0);

  v19 = objc_allocWithZone((Class)type metadata accessor for TagAssignmentDataSource(0));
  v20 = v32;
  v21 = v32;
  v22 = v33;
  swift_retain(v33);
  v23 = (char *)v18;
  v24 = sub_1002A8C38(v23, v20, v34, v22);

  swift_release(v22);
  v25 = *(void **)&v23[OBJC_IVAR____TtC11MobileNotes27TagAssignmentCollectionView_tagAssignmentDataSource];
  *(_QWORD *)&v23[OBJC_IVAR____TtC11MobileNotes27TagAssignmentCollectionView_tagAssignmentDataSource] = v24;

  v26 = (void *)objc_opt_self(UIColor);
  v27 = v23;
  v28 = objc_msgSend(v26, "ICGroupedBackgroundColor");
  objc_msgSend(v27, "setBackgroundColor:", v28);

  v29 = v27;
  objc_msgSend(v29, "setShowsVerticalScrollIndicator:", 0);

  swift_release(v22);
  return v29;
}

void sub_100354BB4(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    v6 = objc_msgSend(Strong, "collectionViewLayout");

    objc_msgSend(v6, "invalidateLayout");
  }
  if (a2)
    a2();
}

uint64_t type metadata accessor for TagAssignmentCollectionView()
{
  return objc_opt_self(_TtC11MobileNotes27TagAssignmentCollectionView);
}

unint64_t sub_100354CA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D5060;
  if (!qword_1005D5060)
  {
    v1 = objc_opt_self(UICollectionViewCompositionalLayout);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D5060);
  }
  return result;
}

void *DeleteNotesIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static DeleteNotesIntent.persistentIdentifier;
}

unint64_t static DeleteNotesIntent.persistentIdentifier.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_100354D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static DeleteNotesIntent.title);
  sub_10012A0B0(v10, (uint64_t)static DeleteNotesIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x4E206574656C6544, 0xEC0000007365746FLL);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t DeleteNotesIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CED38 != -1)
    swift_once(&qword_1005CED38, sub_100354D0C);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static DeleteNotesIntent.title);
}

uint64_t static DeleteNotesIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CED38 != -1)
    swift_once(&qword_1005CED38, sub_100354D0C);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static DeleteNotesIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static DeleteNotesIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0x6E206574656C6544, 0xED00002E7365746FLL);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static DeleteNotesIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005DA4F8);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18((uint64_t *)&unk_1005DA500);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B29C4();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for DeleteNotesIntent, v6);
  v7._countAndFlagsBits = 0x74206574656C6544;
  v7._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100464B00, v8);
  v10 = sub_100012E18(&qword_1005DA510);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x7365746F6E20;
  v11._object = (void *)0xE600000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for DeleteNotesIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for DeleteNotesIntent, v6);
}

uint64_t sub_1003552D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005DA4F8);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18((uint64_t *)&unk_1005DA500);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, a1, a2);
  v10._countAndFlagsBits = 0x74206574656C6544;
  v10._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_100464B00, v11);
  v13 = sub_100012E18(&qword_1005DA510);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x7365746F6E20;
  v14._object = (void *)0xE600000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_100355440(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = (_QWORD *)swift_task_alloc(dword_1005DA51C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100130768;
  return DeleteNotesIntent.perform()(a1, v4, v5, v6);
}

uint64_t DeleteNotesIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for MainActor(0);
  v4[9] = static MainActor.shared.getter(v5);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor, v6);
  v4[10] = v7;
  v4[11] = v8;
  return swift_task_switch(sub_10035551C, v7, v8);
}

uint64_t sub_10035551C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v0[2] = &type metadata for DeleteNotesIntent;
  v2 = v0[7];
  v1 = v0[8];
  v3 = v0[6];
  v4 = sub_100012E18((uint64_t *)&unk_1005D9000);
  String.init<A>(describing:)(v0 + 2, v4);
  v6 = v5;
  v7 = objc_allocWithZone((Class)ICNAEventReporter);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithSubTrackerName:", v8, swift_bridgeObjectRelease(v6).n128_f64[0]);
  v0[12] = v9;

  IntentParameter.wrappedValue.getter(v0 + 3);
  v10 = v0[3];
  swift_retain(v3);
  swift_retain(v2);
  swift_retain(v1);
  sub_1002B0FB0(v10);
  v12 = v11;
  swift_bridgeObjectRelease(v10);
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v28 = v12;
    else
      v28 = v12 & 0xFFFFFFFFFFFFFF8;
    v29 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    swift_bridgeObjectRetain(v12);
    v30 = _bridgeCocoaArray<A>(_:)(v28, v29);
    swift_bridgeObjectRelease_n(v12, 2);
    v12 = v30;
  }
  else
  {
    v13 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v15 = dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v14);
    v16 = sub_1000163BC(0, (unint64_t *)&qword_1005D6460, NSManagedObject_ptr);
    if (swift_dynamicCastMetatype(v15, v16) || (v24 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10)) == 0)
    {
LABEL_3:
      swift_bridgeObjectRelease(v12);
    }
    else
    {
      v25 = (uint64_t *)(v13 + 32);
      while (1)
      {
        v26 = *v25;
        v27 = objc_opt_self(NSManagedObject);
        if (!swift_dynamicCastObjCClass(v26, v27))
          break;
        ++v25;
        if (!--v24)
          goto LABEL_3;
      }
      swift_bridgeObjectRelease(v12);
      v12 = v13 | 1;
    }
  }
  v0[13] = v12;
  v18 = v0[7];
  v17 = v0[8];
  v19 = v0[6];
  v20 = (_QWORD *)swift_task_alloc(48);
  v0[14] = v20;
  v20[2] = v19;
  v20[3] = v18;
  v20[4] = v17;
  v20[5] = v9;
  v21 = (_QWORD *)swift_task_alloc(48);
  v0[15] = v21;
  v21[2] = v19;
  v21[3] = v18;
  v21[4] = v17;
  v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D9078 + dword_1005D9078);
  v22 = (_QWORD *)swift_task_alloc(unk_1005D907C);
  v0[16] = v22;
  *v22 = v0;
  v22[1] = sub_1003557C0;
  return v31((uint64_t)&unk_1005DA528, (uint64_t)v20, (uint64_t)&unk_1005DA538, (uint64_t)v21, v12);
}

uint64_t sub_1003557C0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 128);
  *(_QWORD *)(*v2 + 136) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *(_QWORD *)(v4 + 88);
    v8 = sub_1003558E8;
  }
  else
  {
    v10 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 120);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + 104));
    *(_BYTE *)(v4 + 144) = a1 & 1;
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    v6 = *(_QWORD *)(v4 + 80);
    v7 = *(_QWORD *)(v4 + 88);
    v8 = sub_100355854;
  }
  return swift_task_switch(v8, v6, v7);
}

uint64_t sub_100355854()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v1 = *(unsigned __int8 *)(v0 + 144);
  swift_release(*(_QWORD *)(v0 + 72));
  v3 = *(void **)(v0 + 96);
  if (v1 == 1)
  {
    static IntentResult.result<>()(v2);
  }
  else
  {
    v4 = sub_10013F4E8();
    v5 = swift_allocError(&type metadata for AppIntentsError, v4, 0, 0);
    *v6 = 9;
    swift_willThrow(v5);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003558E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(void **)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(v3);

  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100355948@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes06DeleteB6IntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_100355970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;

  v6[16] = a2;
  v6[17] = a6;
  v6[15] = a1;
  v7 = type metadata accessor for MainActor(0);
  v6[18] = v7;
  v6[19] = static MainActor.shared.getter(v7);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v7, &protocol witness table for MainActor, v8);
  v6[20] = v9;
  v6[21] = v10;
  return swift_task_switch(sub_1003559E4, v9, v10);
}

uint64_t sub_1003559E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  Class isa;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v0[17];
  v1 = v0[18];
  v3 = (void *)objc_opt_self(ICDeleteDecisionController);
  v0[22] = v3;
  sub_100012E18(&qword_1005DA590);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, "deleteHTMLNotesIfNeeded:eventReporter:", isa, v2);

  v0[23] = static MainActor.shared.getter(v5);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor, v6);
  v0[24] = v7;
  v0[25] = v8;
  return swift_task_switch(sub_100355A9C, v7, v8);
}

uint64_t sub_100355A9C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  Class isa;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0 + 2;
  v2 = (void *)v0[22];
  v3 = v0[17];
  sub_1000163BC(0, (unint64_t *)&qword_1005D39F0, ICNote_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v0[26] = isa;
  v0[2] = v0;
  v0[3] = sub_1003249D4;
  v5 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v6 = v0 + 10;
  v6[1] = 0x40000000;
  v6[2] = sub_1001D8384;
  v6[3] = &unk_10056AC38;
  v6[4] = v5;
  objc_msgSend(v2, "deleteModernNotesIfNeeded:eventReporter:completion:", isa, v3, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_100355B6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;

  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  v4 = type metadata accessor for ConfirmationActionName(0);
  v3[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[9] = v5;
  v3[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3[11] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[12] = v7;
  v3[13] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  v3[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  v3[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for LocalizedStringResource(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[16] = swift_task_alloc(v10);
  v3[17] = swift_task_alloc(v10);
  v11 = type metadata accessor for IntentDialog(0);
  v3[18] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[19] = v12;
  v3[20] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012E18((uint64_t *)&unk_1005DA580);
  v3[21] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[22] = v14;
  v3[23] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for MainActor(0);
  v3[24] = static MainActor.shared.getter(v15);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, &protocol witness table for MainActor, v16);
  v3[25] = v17;
  v3[26] = v18;
  return swift_task_switch(sub_100355CF0, v17, v18);
}

uint64_t sub_100355CF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 88);
  v9 = *(_QWORD *)(v0 + 96);
  v10 = *(_QWORD *)(v0 + 56);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 40);
  v21 = v2;
  *(_QWORD *)(v0 + 32) = v10;
  v11 = String.LocalizationValue.init(stringLiteral:)(0x100000000000001DLL, 0x800000010048A860);
  static Locale.current.getter(v11);
  v12 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
  v13(v7, enum case for LocalizedStringResource.BundleDescription.main(_:), v8);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v4, 0, 0, v6, v7, "Link confirmation dialog title", 30, 2);
  v14 = String.LocalizationValue.init(stringLiteral:)(0x100000000000004DLL, 0x800000010048A880);
  static Locale.current.getter(v14);
  v13(v7, v12, v8);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v4, 0, 0, v6, v7, "Link confirmation dialog supporting text", 40, 2);
  IntentDialog.init(full:supporting:)(v3, v5);
  static IntentResult.result<>(dialog:)(v1);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v1, v21);
  static ConfirmationActionName.continue.getter(v15);
  v16 = (_QWORD *)swift_task_alloc(async function pointer to AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)[1]);
  *(_QWORD *)(v0 + 216) = v16;
  v17 = sub_1001B29C4();
  v18 = sub_100016638(&qword_1005D9090, (uint64_t *)&unk_1005DA580, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
  *v16 = v0;
  v16[1] = sub_100355EF0;
  return AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 80), 1, &type metadata for DeleteNotesIntent, *(_QWORD *)(v0 + 168), v17, v18);
}

uint64_t sub_100355EF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  v5 = *(_QWORD *)(*v1 + 176);
  v4 = *(_QWORD *)(*v1 + 184);
  v6 = *(_QWORD *)(*v1 + 168);
  v8 = *(_QWORD *)(*v1 + 72);
  v7 = *(_QWORD *)(*v1 + 80);
  v9 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v10 = sub_10035603C;
  else
    v10 = sub_100355F9C;
  return swift_task_switch(v10, *(_QWORD *)(v2 + 200), *(_QWORD *)(v2 + 208));
}

uint64_t sub_100355F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10035603C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(_QWORD *)(v0 + 80);
  swift_release(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _s11MobileNotes06DeleteB6IntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD v51[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v47 = *(_QWORD *)(v0 - 8);
  v48 = v0;
  __chkstk_darwin(v0);
  v46 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v45 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v44 = (char *)&v36 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v43 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v39 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizedStringResource(0);
  v40 = *(_QWORD *)(v17 - 8);
  v41 = v17;
  __chkstk_darwin(v17);
  v37 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012E18(&qword_1005CEE50);
  v49 = 0xD000000000000021;
  v50 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v51, &v49, &type metadata for String, &protocol witness table for String);
  v19 = type metadata accessor for AppDependencyManager(0);
  v20 = static AppDependencyManager.shared.getter(v19);
  v42 = AppDependency.__allocating_init(key:manager:)(v51, v20);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v49 = 0xD000000000000024;
  v50 = 0x8000000100476B40;
  v21 = AnyHashable.init<A>(_:)(v51, &v49, &type metadata for String, &protocol witness table for String);
  v22 = static AppDependencyManager.shared.getter(v21);
  v38 = AppDependency.__allocating_init(key:manager:)(v51, v22);
  sub_100012E18(&qword_1005CEE58);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x7365746F4ELL, 0xE500000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 104);
  v25(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v8);
  v26 = v37;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, v13, v10, "Parameter title for Delete Notes intent", 39, 2);
  v27 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001004786D0);
  static Locale.current.getter(v27);
  v25(v10, v24, v8);
  v28 = v43;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, v13, v10, "Parameter description for notes", 31, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, v41);
  v51[0] = 0;
  v29 = type metadata accessor for IntentDialog(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v31 = v44;
  v30(v44, 1, 1, v29);
  v32 = v45;
  v30(v45, 1, 1, v29);
  v33 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v47 + 104))(v46, enum case for InputConnectionBehavior.default(_:), v48);
  v34 = sub_100356690();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v26, v28, v51, v31, v32, v33, v34);
  return v42;
}

uint64_t sub_100356540@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_100356568(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v6 = v2[2];
  v7 = v2[3];
  v9 = v2[4];
  v8 = v2[5];
  v10 = (_QWORD *)swift_task_alloc(dword_1005DA524);
  *(_QWORD *)(v3 + 16) = v10;
  *v10 = v3;
  v10[1] = sub_100130768;
  return sub_100355970(a1, a2, v6, v7, v9, v8);
}

uint64_t sub_1003565E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1005DA534);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100145358;
  return sub_100355B6C(v2, v3, v4);
}

unint64_t sub_100356648()
{
  unint64_t result;

  result = qword_1005DA548;
  if (!qword_1005DA548)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteNotesIntent, &type metadata for DeleteNotesIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA548);
  }
  return result;
}

unint64_t sub_100356690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D0B70;
  if (!qword_1005D0B70)
  {
    v1 = type metadata accessor for NoteEntity(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteEntity, v1);
    atomic_store(result, (unint64_t *)&qword_1005D0B70);
  }
  return result;
}

unint64_t sub_1003566E0()
{
  unint64_t result;

  result = qword_1005DA558;
  if (!qword_1005DA558)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteNotesIntent, &type metadata for DeleteNotesIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA558);
  }
  return result;
}

unint64_t sub_100356728()
{
  unint64_t result;

  result = qword_1005DA560;
  if (!qword_1005DA560)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteNotesIntent, &type metadata for DeleteNotesIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA560);
  }
  return result;
}

uint64_t sub_10035676C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of DeleteNotesIntent.perform()>>, 1);
}

uint64_t sub_10035677C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static DeleteNotesIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for DeleteNotesIntent()
{
  return &type metadata for DeleteNotesIntent;
}

uint64_t sub_10035679C()
{
  return sub_100016638(&qword_1005DA570, &qword_1005DA578, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

id sub_100356920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  objc_class *ObjectType;
  NSString v13;
  NSString v14;
  NSString v15;
  id v16;
  objc_super v18;

  ObjectType = (objc_class *)swift_getObjectType(v7);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  if (!a4)
  {
    v14 = 0;
    if (a6)
      goto LABEL_3;
LABEL_5:
    v15 = 0;
    goto LABEL_6;
  }
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  if (!a6)
    goto LABEL_5;
LABEL_3:
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a6);
LABEL_6:
  v18.receiver = v7;
  v18.super_class = ObjectType;
  v16 = objc_msgSendSuper2(&v18, "initWithTitle:detailText:symbolName:contentLayout:", v13, v14, v15, a7);

  return v16;
}

BOOL static NSOperatingSystemVersion.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a1 == a4 && a2 == a5 && a3 == a6;
}

BOOL static NSOperatingSystemVersion.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL4 v6;

  v6 = a2 < a5;
  if (a2 == a5)
    v6 = a3 < a6;
  if (a1 == a4)
    return v6;
  else
    return a1 < a4;
}

unint64_t sub_100356C08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DA598;
  if (!qword_1005DA598)
  {
    type metadata accessor for OperatingSystemVersion(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSOperatingSystemVersion, v1);
    atomic_store(result, (unint64_t *)&qword_1005DA598);
  }
  return result;
}

BOOL sub_100356C50(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    v5 = a1[2] < a2[2];
  if (*a1 == *a2)
    return v5;
  else
    return *a1 < *a2;
}

BOOL sub_100356C88(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 == v2;
  v5 = v3 < v2;
  if (v4)
    v5 = a2[2] < a1[2];
  if (*a2 == *a1)
    v6 = v5;
  else
    v6 = *a2 < *a1;
  return !v6;
}

BOOL sub_100356CC4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;
  _BOOL4 v6;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v2 == v3;
  v5 = v2 < v3;
  if (v4)
    v5 = a1[2] < a2[2];
  if (*a1 == *a2)
    v6 = v5;
  else
    v6 = *a1 < *a2;
  return !v6;
}

BOOL sub_100356D00(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL4 v5;

  v2 = a1[1];
  v3 = a2[1];
  v4 = v3 == v2;
  v5 = v3 < v2;
  if (v4)
    v5 = a2[2] < a1[2];
  if (*a2 == *a1)
    return v5;
  else
    return *a2 < *a1;
}

BOOL sub_100356D38(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t type metadata accessor for SystemPaperWelcomeViewController()
{
  return objc_opt_self(_TtC11MobileNotes32SystemPaperWelcomeViewController);
}

BOOL sub_100356D88()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v10, v2);
    swift_unknownObjectRelease(v2, v3);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_1001CBB70((uint64_t)v10, (uint64_t)v11);
  if (!v12)
  {
    sub_1000160C8((uint64_t)v11);
    return 1;
  }
  v4 = sub_100012E18(&qword_1005DA5C8);
  if ((swift_dynamicCast(&v9, v11, (char *)&type metadata for Any + 8, v4, 6) & 1) == 0)
    return 1;
  if (v9[2] != 3)
  {
    swift_bridgeObjectRelease(v9);
    return 1;
  }
  v6 = v9[4];
  v5 = v9[5];
  v7 = v9[6];
  swift_bridgeObjectRelease(v9);
  if (v6 != 15)
    return v6 < 15;
  if (v5)
    return v5 >> 63;
  return v7 >> 63;
}

id sub_100356ED8()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *v8;
  NSString v9;
  id v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  void *v14;
  id v15;
  id v16;
  NSString v17;
  NSString v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;

  if (!sub_100356D88())
    return 0;
  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v24._countAndFlagsBits = 0xD00000000000001BLL;
  v24._object = (void *)0x800000010048A970;
  v2._object = (void *)0x800000010048A950;
  v2._countAndFlagsBits = 0xD000000000000014;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v24)._object;

  v5 = objc_msgSend(v0, "mainBundle");
  v25._countAndFlagsBits = 0xD000000000000016;
  v6._countAndFlagsBits = 0xD0000000000000AALL;
  v25._object = (void *)0x800000010048AA40;
  v6._object = (void *)0x800000010048A990;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v25)._object;

  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v9);

  v11 = objc_msgSend(v0, "mainBundle");
  v26._countAndFlagsBits = 0xD000000000000040;
  v26._object = (void *)0x800000010048AA60;
  v12._countAndFlagsBits = 0x7261745320746547;
  v12._object = (void *)0xEB00000000646574;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v26)._object;

  v15 = objc_allocWithZone((Class)type metadata accessor for SystemPaperWelcomeViewController());
  v16 = v10;
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v15, "initWithTitle:detailText:icon:contentLayout:", v17, v18, v16, 2, swift_bridgeObjectRelease(v8).n128_f64[0]);

  v20 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  objc_msgSend(v20, "addTarget:action:forControlEvents:", v19, "dismiss:", 64);
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "setTitle:forState:", v21, 0, swift_bridgeObjectRelease(v14).n128_f64[0]);

  v22 = objc_msgSend(v19, "buttonTray");
  objc_msgSend(v22, "addButton:", v20);

  objc_msgSend(v19, "setModalPresentationStyle:", 2);
  return v19;
}

uint64_t sub_100357208@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64x2_t v22;
  int16x8_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(__int8 *, uint64_t, uint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64x2_t v31;
  int16x8_t v32;
  uint64_t v33;
  __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  void (*v38)(__int8 *, uint64_t);
  uint64x2_t v40;
  uint64x2_t v41;
  __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned __int32 v49;

  v44 = a1;
  v1 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v40.i8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for Locale(0);
  __chkstk_darwin(v5);
  v7 = &v40.i8[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v8);
  v10 = &v40.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v11);
  v13 = &v40.i8[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_100012E18(&qword_1005DA628);
  v43 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v42 = &v40.i8[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  v18 = &v40.i8[-v17];
  v45 = sub_1001E9784();
  v46 = v19;
  v47 = v20;
  v48 = v21 & 1;
  v22 = (uint64x2_t)vdupq_n_s64(v21);
  v41 = (uint64x2_t)xmmword_100451C00;
  v40 = (uint64x2_t)xmmword_100451C10;
  v23 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v22, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v23.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v23), (int8x8_t)0x1000100010001);
  v49 = vmovn_s16(v23).u32[0];
  v24 = String.LocalizationValue.init(stringLiteral:)(0x4E2064656E6E6950, 0xEC0000007365746FLL);
  static Locale.current.getter(v24);
  v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v26 = *(void (**)(__int8 *, uint64_t, uint64_t))(v2 + 104);
  v26(v4, enum case for LocalizedStringResource.BundleDescription.main(_:), v1);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v10, 0, 0, v7, v4, "Pinned notes list in app shortcut", 33, 2);
  v27 = sub_1001E9D2C();
  AppShortcutOptionsCollection.init(_:title:systemImageName:)(&v45, v13, 0x6C6C69662E6E6970, 0xE800000000000000, &type metadata for VisibleNotesQuery, v27);
  v45 = sub_1001E9508();
  v46 = v28;
  v47 = v29;
  v48 = v30 & 1;
  v31 = (uint64x2_t)vdupq_n_s64(v30);
  v32 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v31, v40), (int32x4_t)vshlq_u64(v31, v41));
  *(int8x8_t *)v32.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v32), (int8x8_t)0x1000100010001);
  v49 = vmovn_s16(v32).u32[0];
  v33 = String.LocalizationValue.init(stringLiteral:)(0x4E20746E65636552, 0xEC0000007365746FLL);
  static Locale.current.getter(v33);
  v26(v4, v25, v1);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v10, 0, 0, v7, v4, "Recent notes list app shortcut", 30, 2);
  v34 = v42;
  AppShortcutOptionsCollection.init(_:title:systemImageName:)(&v45, v13, 0x7865742E65746F6ELL, 0xE900000000000074, &type metadata for VisibleNotesQuery, v27);
  v35 = type metadata accessor for NoteEntity(0);
  v36 = sub_100358020();
  v37 = sub_100358068();
  static AppShortcutOptionsCollectionSpecificationBuilder.buildBlock<A, B>(_:_:)(v18, v34, v35, v14, v14, v36, v37, v37);
  v38 = *(void (**)(__int8 *, uint64_t))(v43 + 8);
  v38(v34, v14);
  return ((uint64_t (*)(__int8 *, uint64_t))v38)(v18, v14);
}

uint64_t sub_1003575D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = enum case for ShortcutTileColor.yellow(_:);
  v3 = type metadata accessor for ShortcutTileColor(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

ValueMetadata *type metadata accessor for NotesAppShortcuts()
{
  return &type metadata for NotesAppShortcuts;
}

uint64_t sub_100357624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  Swift::String v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  Swift::String v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  Swift::String v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t OpaqueTypeConformance2;
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  unint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void (*v96)(char *, uint64_t);
  uint64_t v97;
  unsigned int v98;
  void (*v99)(char *);
  __int128 v100;
  char *v101;
  char *v102;
  uint64_t v103[7];
  _QWORD v104[3];

  v0 = sub_100012E18(&qword_1005DA5D0);
  __chkstk_darwin(v0);
  v91 = (char *)&v84 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100012E18(&qword_1005DA5D8);
  __chkstk_darwin(v89);
  v88 = (char *)&v84 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005DA5E0);
  __chkstk_darwin(v3);
  v90 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005DA5E8);
  __chkstk_darwin(v5);
  v92 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100012E18(&qword_1005DA5F0);
  __chkstk_darwin(v87);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v9 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v102 = (char *)&v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v101 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for AppShortcut(0);
  v19 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10018030C(v103);
  v22 = sub_100012E18(&qword_1005DA5F8);
  v23 = *(_QWORD *)(sub_100012E18(&qword_1005DA600) - 8);
  v24 = swift_allocObject(v22, ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))+ *(_QWORD *)(v23 + 72), *(unsigned __int8 *)(v23 + 80) | 7);
  v100 = xmmword_100451C20;
  *(_OWORD *)(v24 + 16) = xmmword_100451C20;
  v25 = sub_10017C638();
  AppShortcutPhrase.init(stringLiteral:)(0xD000000000000011, 0x800000010048AAB0, &type metadata for CreateNoteIntent, v25);
  v94 = v15;
  v26 = String.LocalizationValue.init(stringLiteral:)(0x65746F4E2077654ELL, 0xE800000000000000);
  v27 = v101;
  static Locale.current.getter(v26);
  v98 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v99 = *(void (**)(char *))(v9 + 104);
  v28 = v102;
  v29 = v97;
  v99(v102);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v15, 0, 0, v27, v28, "Create a new note app shortcut action", 37, 2);
  v85 = v21;
  v84 = v18;
  AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)(v103, v24, v18, 0xD000000000000011, 0x800000010048AB00, &type metadata for CreateNoteIntent, v25);
  v93 = static AppShortcutsBuilder.buildExpression(_:)(v21);
  v96 = *(void (**)(char *, uint64_t))(v19 + 8);
  v96(v21, v95);
  v104[0] = _s11MobileNotes14OpenNoteIntentVACycfC_0();
  v104[1] = v30;
  v104[2] = v31;
  v32 = sub_100012E18(&qword_1005DA608);
  v33 = *(_QWORD *)(sub_100012E18(&qword_1005DA610) - 8);
  v86 = swift_allocObject(v32, ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72), *(unsigned __int8 *)(v33 + 80) | 7);
  *(_OWORD *)(v86 + 16) = v100;
  v34 = sub_100019838();
  AppShortcutPhrase.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1, &type metadata for OpenNoteIntent, v34);
  v35._countAndFlagsBits = 0x656874206E65704FLL;
  v35._object = (void *)0xEE002065746F6E20;
  v36 = v87;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v35);
  KeyPath = swift_getKeyPath(&unk_100464DB8, v37);
  v39 = sub_100012E18(&qword_1005DA618);
  AppShortcutPhrase.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v36, v39);
  swift_release(KeyPath);
  v40._countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  AppShortcutPhrase.StringInterpolation.appendLiteral(_:)(v40);
  AppShortcutPhrase.init(stringInterpolation:)(v8, &type metadata for OpenNoteIntent, v34);
  v41 = v94;
  v42 = String.LocalizationValue.init(stringLiteral:)(0x746F4E206E65704FLL, 0xE900000000000065);
  v43 = v101;
  static Locale.current.getter(v42);
  v44 = v102;
  ((void (*)(char *, _QWORD, uint64_t))v99)(v102, v98, v29);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v41, 0, 0, v43, v44, "Open note app shortcut action", 29, 2);
  v87 = swift_getKeyPath(&unk_100464DB8, v45);
  v46 = type metadata accessor for NoteEntity(0);
  v47 = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v48 = sub_100358020();
  v49 = v88;
  AppShortcutParameterPresentationSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(5, 1, &type metadata for OpenNoteIntent, v46, v47, v39, v34, v48);
  v50._countAndFlagsBits = 0x206E65704FLL;
  v50._object = (void *)0xE500000000000000;
  v51 = v89;
  AppShortcutParameterPresentationSummaryString.StringInterpolation.appendLiteral(_:)(v50);
  v53 = swift_getKeyPath(&unk_100464DB8, v52);
  AppShortcutParameterPresentationSummaryString.StringInterpolation.appendInterpolation(_:)(v53, v51);
  swift_release(v53);
  v54._countAndFlagsBits = 0;
  v54._object = (void *)0xE000000000000000;
  AppShortcutParameterPresentationSummaryString.StringInterpolation.appendLiteral(_:)(v54);
  v55 = v91;
  AppShortcutParameterPresentationSummaryString.init(stringInterpolation:)(v49, &type metadata for OpenNoteIntent, v46, v47, v39, v34, v48);
  v56 = v90;
  AppShortcutParameterPresentationSummary.init(_:table:)(v55, 0, 0, 256, &type metadata for OpenNoteIntent, v46, v47, v39, v34, v48);
  v57 = sub_100012E18(&qword_1005DA620);
  v58 = sub_10001537C(&qword_1005DA628);
  v59 = sub_100358068();
  v103[0] = v46;
  v103[1] = v58;
  v103[2] = v58;
  v103[3] = v48;
  v103[4] = v59;
  v103[5] = v59;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v103, &opaque type descriptor for <<opaque return type of static AppShortcutOptionsCollectionSpecificationBuilder.buildBlock<A, B>(_:_:)>>, 1);
  v61 = v92;
  AppShortcutParameterPresentation.init<A>(for:summary:optionsCollections:)(v87, v56, sub_100357208, 0, v39, v57, v34, OpaqueTypeConformance2);
  v83 = v48;
  v62 = v85;
  v63 = v84;
  AppShortcut.init<A, B, C, D>(intent:phrases:shortTitle:systemImageName:parameterPresentation:)(v104, v86, v84, 0x7865742E65746F6ELL, 0xE900000000000074, v61, &type metadata for OpenNoteIntent, v46, v47, v39, v34, v83);
  v92 = (char *)static AppShortcutsBuilder.buildExpression(_:)(v62);
  v64 = v95;
  v96(v62, v95);
  v65 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitorConfiguration), "configurationForDefaultMainDisplayMonitor");
  v66 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitor), "monitorWithConfiguration:", v65);

  v67 = type metadata accessor for ShowQuickNoteIntent.LayoutMonitorBox();
  v68 = swift_allocObject(v67, 24, 7);
  *(_QWORD *)(v68 + 16) = v66;
  v103[0] = v68;
  v69 = sub_100012E18(&qword_1005DA638);
  v70 = *(_QWORD *)(sub_100012E18(&qword_1005DA640) - 8);
  v71 = swift_allocObject(v69, ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(_QWORD *)(v70 + 72), *(unsigned __int8 *)(v70 + 80) | 7);
  *(_OWORD *)(v71 + 16) = v100;
  v72 = sub_1001B282C();
  AppShortcutPhrase.init(stringLiteral:)(0x69755120776F6853, 0xEF65746F4E206B63, &type metadata for ShowQuickNoteIntent, v72);
  v73 = v94;
  v74 = String.LocalizationValue.init(stringLiteral:)(0x6F4E206B63697551, 0xEA00000000006574);
  v75 = v101;
  static Locale.current.getter(v74);
  v76 = v102;
  ((void (*)(char *, _QWORD, uint64_t))v99)(v102, v98, v97);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v73, 0, 0, v75, v76, "Quick note app shortcut action", 30, 2);
  AppShortcut.init<A>(intent:phrases:shortTitle:systemImageName:)(v103, v71, v63, 0x746F6E6B63697571, 0xE900000000000065, &type metadata for ShowQuickNoteIntent, v72);
  v77 = static AppShortcutsBuilder.buildExpression(_:)(v62);
  v96(v62, v64);
  v78 = sub_100012E18(&qword_1005DA648);
  v79 = swift_allocObject(v78, 56, 7);
  *(_OWORD *)(v79 + 16) = xmmword_100456A10;
  v80 = v92;
  *(_QWORD *)(v79 + 32) = v93;
  *(_QWORD *)(v79 + 40) = v80;
  *(_QWORD *)(v79 + 48) = v77;
  v81 = static AppShortcutsBuilder.buildBlock(_:)();
  swift_bridgeObjectRelease(v79);
  return v81;
}

unint64_t sub_100358020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D0A80;
  if (!qword_1005D0A80)
  {
    v1 = type metadata accessor for NoteEntity(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NoteEntity, v1);
    atomic_store(result, (unint64_t *)&qword_1005D0A80);
  }
  return result;
}

unint64_t sub_100358068()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DA630;
  if (!qword_1005DA630)
  {
    v1 = sub_10001537C(&qword_1005DA628);
    result = swift_getWitnessTable(&protocol conformance descriptor for AppShortcutOptionsCollection<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1005DA630);
  }
  return result;
}

objc_class *sub_1003580B4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::OpaquePointer preferredElementSize;
  objc_class *v7;
  Swift::String v8;
  Class isa;
  Swift::OpaquePointer v10;
  id v11;
  Swift::String v12;
  UIMenu v13;
  void *v14;
  id v15;
  UIImage_optional v17;
  UIImage_optional v18;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize._rawValue = (void *)swift_allocObject(v5, 88, 7);
    *((_OWORD *)preferredElementSize._rawValue + 1) = xmmword_100464DE0;
    *((_QWORD *)preferredElementSize._rawValue + 4) = sub_100358578();
    *((_QWORD *)preferredElementSize._rawValue + 5) = sub_100358598();
    *((_QWORD *)preferredElementSize._rawValue + 6) = sub_1003586C0();
    *((_QWORD *)preferredElementSize._rawValue + 7) = sub_1003586E0();
    *((_QWORD *)preferredElementSize._rawValue + 8) = sub_100358700();
    *((_QWORD *)preferredElementSize._rawValue + 9) = sub_100358720();
    v7 = sub_100358740();
    *((_QWORD *)preferredElementSize._rawValue + 10) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v17.value.super.isa = 0;
    v17.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v17, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize._rawValue, preferredElementSize).super.super.isa;
    v10._rawValue = (void *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)v10._rawValue + 1) = xmmword_100451BF0;
    v11 = sub_10035841C();
    *((_QWORD *)v10._rawValue + 4) = v11;
    *((_QWORD *)v10._rawValue + 5) = isa;
    specialized Array._endMutation()(v11);
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v18.value.super.isa = 0;
    v18.is_nil = 0;
    v13.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v18, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v10._rawValue, v10).super.super.isa;
    v14 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v13;
    v3 = v13.super.super.isa;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_100358248()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  id v39;

  v1 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  if (v1)
  {
    v2 = objc_opt_self(ICDateFilterTypeSelection);
    v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
    if (v3)
    {
      v1 = objc_msgSend(v3, "selectionType");
      v4 = 0;
      goto LABEL_6;
    }
    v1 = 0;
  }
  v4 = 1;
LABEL_6:
  v5 = (void *)sub_10035841C();
  objc_msgSend(v5, "setState:", v4);

  v6 = sub_100358578();
  v7 = v6;
  v8 = v4 ^ 1;
  if (v1)
    v9 = 0;
  else
    v9 = v8;
  objc_msgSend(v6, "setState:", v9);

  v10 = sub_100358598();
  v11 = v10;
  if (v1 == (id)1)
    v12 = v8;
  else
    v12 = 0;
  objc_msgSend(v10, "setState:", v12);

  v13 = sub_1003586C0();
  v14 = v13;
  if (v1 == (id)2)
    v15 = v8;
  else
    v15 = 0;
  objc_msgSend(v13, "setState:", v15);

  v16 = sub_1003586E0();
  v17 = v16;
  if (v1 == (id)3)
    v18 = v8;
  else
    v18 = 0;
  objc_msgSend(v16, "setState:", v18);

  v19 = sub_100358700();
  v20 = v19;
  if (v1 == (id)4)
    v21 = v8;
  else
    v21 = 0;
  objc_msgSend(v19, "setState:", v21);

  v22 = sub_100358720();
  v23 = v22;
  if (v1 == (id)5)
    v24 = v8;
  else
    v24 = 0;
  objc_msgSend(v22, "setState:", v24);

  v25 = sub_100358968();
  v26 = v25;
  if (v1 == (id)7)
    v27 = v8;
  else
    v27 = 0;
  objc_msgSend(v25, "setState:", v27);

  v28 = sub_100358988();
  v29 = v28;
  if (v1 == (id)6)
    v30 = v8;
  else
    v30 = 0;
  objc_msgSend(v28, "setState:", v30);

  v31 = sub_1003589A8();
  v32 = v31;
  if (v1 == (id)8)
    v33 = v8;
  else
    v33 = 0;
  objc_msgSend(v31, "setState:", v33);

  v34 = sub_1003589C8();
  v35 = v34;
  if (v1 == (id)9)
    v36 = v8;
  else
    v36 = 0;
  objc_msgSend(v34, "setState:", v36);

  v37 = sub_1003589E8();
  v39 = v37;
  if (v1 == (id)10)
    v38 = v8;
  else
    v38 = 0;
  objc_msgSend(v37, "setState:", v38);

}

id sub_10035841C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionOff;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionOff];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionOff];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056AF90, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003598D4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_100358578()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionToday, 0, (uint64_t)&unk_10056AF68, (uint64_t)sub_1003598CC);
}

id sub_100358598()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionYesterday, 1, (uint64_t)&unk_10056AF40, (uint64_t)sub_1003598C4);
}

id sub_1003585B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;

  v5 = *a1;
  v6 = *(void **)&v4[*a1];
  if (v6)
  {
    v7 = *(id *)&v4[*a1];
  }
  else
  {
    v11 = v4;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v12 = (id)ICLocalizedStringFromICDateFilterSelectionType(a2);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = swift_allocObject(a3, 24, 7);
    *(_QWORD *)(v16 + 16) = v4;
    v17 = v4;
    v18 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v13, v15, 0, 0, 0, 0, 0, 0, 0, 0, 0, a4, v16);
    v19 = *(void **)&v4[v5];
    *(_QWORD *)&v11[v5] = v18;
    v7 = v18;

    v6 = 0;
  }
  v20 = v6;
  return v7;
}

id sub_1003586C0()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastSevenDays, 2, (uint64_t)&unk_10056AF18, (uint64_t)sub_1003598BC);
}

id sub_1003586E0()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastThirtyDays, 3, (uint64_t)&unk_10056AEF0, (uint64_t)sub_1003598B4);
}

id sub_100358700()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastThreeMonths, 4, (uint64_t)&unk_10056AEC8, (uint64_t)sub_1003598AC);
}

id sub_100358720()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastTwelveMonths, 5, (uint64_t)&unk_10056AEA0, (uint64_t)sub_1003598A4);
}

objc_class *sub_100358740()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t children;
  id v13;
  uint64_t v14;
  UIMenuElementSize preferredElementSize;
  Swift::String v16;
  UIMenu v17;
  void *v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  UIImage_optional v23;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___customMenu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___customMenu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___customMenu);
  }
  else
  {
    v4 = v0;
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = sub_100012E18(&qword_1005CF6F0);
    children = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(children + 16) = xmmword_100462730;
    *(_QWORD *)(children + 32) = sub_100358968();
    *(_QWORD *)(children + 40) = sub_100358988();
    *(_QWORD *)(children + 48) = sub_1003589A8();
    *(_QWORD *)(children + 56) = sub_1003589C8();
    v13 = sub_1003589E8();
    *(_QWORD *)(children + 64) = v13;
    specialized Array._endMutation()(v13);
    if ((unint64_t)children >> 62)
    {
      if (children < 0)
        v21 = children;
      else
        v21 = children & 0xFFFFFFFFFFFFFF8;
      v22 = sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
      swift_bridgeObjectRetain(children);
      preferredElementSize = _bridgeCocoaArray<A>(_:)(v21, v22);
      swift_bridgeObjectRelease(children);
    }
    else
    {
      swift_bridgeObjectRetain(children);
      dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v14);
      sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
      preferredElementSize = children;
    }
    swift_bridgeObjectRelease(children);
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v16._countAndFlagsBits = v8;
    v16._object = v10;
    v23.value.super.isa = 0;
    v23.is_nil = 0;
    v17.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v16, (Swift::String_optional)0, v23, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, (Swift::OpaquePointer)children).super.super.isa;
    v18 = *(void **)(v4 + v1);
    *(UIMenu *)(v4 + v1) = v17;
    v3 = v17.super.super.isa;

    v2 = 0;
  }
  v19 = v2;
  return v3;
}

id sub_100358968()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionRelativeRange, 7, (uint64_t)&unk_10056AE78, (uint64_t)sub_10035989C);
}

id sub_100358988()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionSpecificRange, 6, (uint64_t)&unk_10056AE50, (uint64_t)sub_100359894);
}

id sub_1003589A8()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionSpecificDate, 8, (uint64_t)&unk_10056AE28, (uint64_t)sub_10035988C);
}

id sub_1003589C8()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionBeforeDate, 9, (uint64_t)&unk_10056AE00, (uint64_t)sub_100359884);
}

id sub_1003589E8()
{
  return sub_1003585B8(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionAfterDate, 10, (uint64_t)&unk_10056ADD8, (uint64_t)sub_10035987C);
}

uint64_t sub_100358A08()
{
  return sub_1000163BC(0, &qword_1005DA6E8, ICDateFilterTypeSelection_ptr);
}

void sub_100358A30(uint64_t a1, char *a2)
{
  void *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  sub_100358248();
  v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    v5 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v6 = swift_retain(v5);
    v4(v6);
    sub_100012C50((uint64_t)v4, v5);
  }
}

uint64_t sub_100358AB4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 0);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100358B84(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 1);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100358C54(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 2);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100358D24(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 3);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100358DF4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 4);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100358EC4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 5);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100358F94(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 7);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100359064(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 6);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100359134(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 8);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_100359204(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 9);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_1003592D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x220))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithSelectionType:", 10);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100358248();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

id sub_1003593A4(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_super v10;

  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menu] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionToday] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionYesterday] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastSevenDays] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastThirtyDays] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastThreeMonths] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastTwelveMonths] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___customMenu] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionRelativeRange] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionSpecificRange] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionSpecificDate] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionBeforeDate] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionAfterDate] = 0;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for FolderComposerFilterCellDate();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id sub_1003594CC(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionToday] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionYesterday] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastSevenDays] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastThirtyDays] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastThreeMonths] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastTwelveMonths] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___customMenu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionRelativeRange] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionSpecificRange] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionSpecificDate] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionBeforeDate] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionAfterDate] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellDate();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

void sub_1003595E4()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionYesterday));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastSevenDays));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastThirtyDays));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastThreeMonths));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionLastTwelveMonths));

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionRelativeRange));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionSpecificRange));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionSpecificDate));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionBeforeDate));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellDate____lazy_storage___menuActionAfterDate));
}

id sub_1003596D0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellDate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellDate()
{
  return objc_opt_self(_TtC11MobileNotes28FolderComposerFilterCellDate);
}

objc_class *sub_100359818()
{
  return sub_1003580B4();
}

void sub_100359838()
{
  sub_100358248();
}

uint64_t sub_100359858()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10035987C(uint64_t a1)
{
  uint64_t v1;

  return sub_1003592D4(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_100359884(uint64_t a1)
{
  uint64_t v1;

  return sub_100359204(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_10035988C(uint64_t a1)
{
  uint64_t v1;

  return sub_100359134(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_100359894(uint64_t a1)
{
  uint64_t v1;

  return sub_100359064(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_10035989C(uint64_t a1)
{
  uint64_t v1;

  return sub_100358F94(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1003598A4(uint64_t a1)
{
  uint64_t v1;

  return sub_100358EC4(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1003598AC(uint64_t a1)
{
  uint64_t v1;

  return sub_100358DF4(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1003598B4(uint64_t a1)
{
  uint64_t v1;

  return sub_100358D24(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1003598BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100358C54(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1003598C4(uint64_t a1)
{
  uint64_t v1;

  return sub_100358B84(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1003598CC(uint64_t a1)
{
  uint64_t v1;

  return sub_100358AB4(a1, *(_QWORD **)(v1 + 16));
}

void sub_1003598D4(uint64_t a1)
{
  uint64_t v1;

  sub_100358A30(a1, *(char **)(v1 + 16));
}

double CreateTableIntent.init()@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  sub_10035B8D4((uint64_t *)v5);
  v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  result = *(double *)&v6;
  v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

void *CreateTableIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static CreateTableIntent.persistentIdentifier;
}

unint64_t static CreateTableIntent.persistentIdentifier.getter()
{
  return 0xD000000000000015;
}

uint64_t sub_10035996C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static CreateTableIntent.title);
  sub_10012A0B0(v10, (uint64_t)static CreateTableIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x6C62615420646441, 0xE900000000000065);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t CreateTableIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CED40 != -1)
    swift_once(&qword_1005CED40, sub_10035996C);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static CreateTableIntent.title);
}

uint64_t static CreateTableIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CED40 != -1)
    swift_once(&qword_1005CED40, sub_10035996C);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static CreateTableIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static CreateTableIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000019, 0x800000010048AE30);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static CreateTableIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005DA6F0);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005DA6F8);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B271C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(27, 2, &type metadata for CreateTableIntent, v6);
  v7._countAndFlagsBits = 0x6174206120646441;
  v7._object = (void *)0xEF206F7420656C62;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100464E20, v8);
  v10 = sub_100012E18(&qword_1005DA700);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x736E6920646E6120;
  v11._object = (void *)0xEC00000020747265;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_100464E48, v12);
  v14 = sub_100012E18(&qword_1005DA708);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for CreateTableIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for CreateTableIntent, v6);
}

uint64_t CreateTableIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for TableEntity(0);
  v2[12] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v4);
  v2[14] = swift_task_alloc(v4);
  v2[15] = swift_task_alloc(v4);
  v2[16] = swift_task_alloc(v4);
  v5 = type metadata accessor for NoteID(0);
  v2[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[18] = v6;
  v2[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NoteEntity(0);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10035A044, 0, 0);
}

uint64_t sub_10035A044()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  v2 = v0[19];
  v1 = (_QWORD *)v0[20];
  v3 = v0[17];
  v4 = v0[18];
  AppDependency.wrappedValue.getter(v0 + 5);
  v5 = (void *)v0[5];
  v0[21] = objc_msgSend(v5, "modernManagedObjectContext");

  IntentParameter.wrappedValue.getter(v1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_100145264((uint64_t)v1, type metadata accessor for NoteEntity);
  AppDependency.wrappedValue.getter(v0 + 6);
  v6 = v0[6];
  v0[22] = v6;
  v9 = (char *)&dword_1005D7890 + dword_1005D7890;
  v7 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v0[23] = v7;
  *v7 = v0;
  v7[1] = sub_10035A14C;
  return ((uint64_t (*)(_QWORD, uint64_t))v9)(v0[19], v6);
}

uint64_t sub_10035A14C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)(*(_QWORD *)v1 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_10035A1CC, 0, 0);
}

uint64_t sub_10035A1CC()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = (void *)v0[24];
  v2 = (void *)v0[21];
  v3 = (__int128 *)v0[11];
  v4 = swift_allocObject(&unk_10056AFD0, 96, 7);
  v0[25] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[3];
  *(_OWORD *)(v4 + 64) = v3[2];
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v6;
  v8 = v1;
  v9 = v2;
  sub_1001FA7A0(v3);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(_:)[1]);
  v0[26] = v10;
  v11 = sub_100012E18(&qword_1005D1230);
  *v10 = v0;
  v10[1] = sub_10035A29C;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 7, sub_10035C244, v4, v11);
}

uint64_t sub_10035A29C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 208);
  *(_QWORD *)(*v1 + 216) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 200));
  if (v0)
    v4 = sub_1001F9738;
  else
    v4 = sub_10035A308;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10035A308()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(void **)(v0 + 56);
  *(_QWORD *)(v0 + 224) = v1;
  if (v1)
  {
    v2 = dword_1005D108C;
    v3 = *(id *)(v0 + 168);
    v4 = v1;
    v5 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 232) = v5;
    *v5 = v0;
    v5[1] = sub_10035A474;
    return TableEntity.init(for:in:)(*(_QWORD *)(v0 + 128), (uint64_t)v4, *(_QWORD *)(v0 + 168));
  }
  else
  {
    v7 = *(void **)(v0 + 192);
    v8 = *(void **)(v0 + 168);
    type metadata accessor for ICError(0);
    v10 = v9;
    *(_QWORD *)(v0 + 72) = 227;
    v11 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v13 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 64), v0 + 72, v11, v10, v12);
    swift_willThrow(v13);

    v14 = *(_QWORD *)(v0 + 152);
    v16 = *(_QWORD *)(v0 + 120);
    v15 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10035A474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1001F97BC;
  else
    v3 = sub_10035A4D8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10035A4D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v14 = *(void **)(v0 + 224);
  v15 = *(void **)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 160);
  v19 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v16 = *(void **)(v0 + 192);
  v17 = v3;
  v13 = *(_QWORD *)(v0 + 96);
  sub_100145220(v2, v1, type metadata accessor for TableEntity);
  v5 = _s11MobileNotes15OpenTableIntentVACycfC_0();
  v7 = v6;
  v9 = v8;
  sub_100145220(v1, v4, type metadata accessor for TableEntity);
  sub_100145220(v4, v3, type metadata accessor for TableEntity);
  IntentParameter.wrappedValue.setter(v3);
  sub_100145264(v4, type metadata accessor for TableEntity);
  sub_100145264(v1, type metadata accessor for TableEntity);
  *(_QWORD *)(v0 + 16) = v5;
  *(_QWORD *)(v0 + 24) = v7;
  *(_QWORD *)(v0 + 32) = v9;
  v10 = sub_100019C6C(&qword_1005D10E8, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  v11 = sub_100185B88();
  static IntentResult.result<A, B>(value:opensIntent:)(v2, v0 + 16, v13, &type metadata for OpenTableIntent, v10, v11);

  sub_100145264(v2, type metadata accessor for TableEntity);
  swift_release(v5);
  swift_release(v7);
  swift_release(v9);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10035A678(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  Swift::Int v64;
  Swift::Int v65;
  char *v66;
  char *v67;
  void (**v68)(uint64_t, _QWORD, uint64_t);
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  id v79;
  char *v80;
  id v81;
  Class isa;
  id v83;
  id v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  Class v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  void *v102;
  id v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void *v111;
  id v112;
  id v113;
  NSString v114;
  uint64_t v115;
  id v116;
  id v117;
  id v118;
  id v119;
  void *v120;
  unsigned __int8 v121;
  id v122;
  id v123;
  id v124;
  id v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  Swift::Int v131;
  void (*v132)(uint64_t, uint64_t, uint64_t, uint64_t);
  void *v133;
  id v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  id v141;
  char *v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  void (**v146)(uint64_t, _QWORD, uint64_t);
  uint64_t v147;
  char *v148;
  _QWORD *v149;
  char *v150;
  void (**v151)(_QWORD, _QWORD);
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  _QWORD *v161;
  _QWORD v162[2];
  id v163;
  uint64_t v164;
  uint64_t v165;
  char v166[8];
  _QWORD v167[2];
  char v168;

  v149 = a4;
  v7 = type metadata accessor for DataFrame.Row(0);
  v155 = *(_QWORD *)(v7 - 8);
  v156 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for DataFrame.Rows(0);
  v143 = *(_QWORD *)(v158 - 8);
  __chkstk_darwin(v158);
  v157 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = (_QWORD *)type metadata accessor for UUID(0);
  v151 = (void (**)(_QWORD, _QWORD))*(v161 - 1);
  __chkstk_darwin(v161);
  v150 = (char *)&v130 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for DataFrame(0);
  v154 = *(_QWORD *)(v153 - 8);
  v12 = __chkstk_darwin(v153);
  v159 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v142 = (char *)&v130 - v14;
  v15 = type metadata accessor for CSVType(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v144 = (char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for CSVReadingOptions(0);
  v146 = *(void (***)(uint64_t, _QWORD, uint64_t))(v147 - 8);
  v18 = __chkstk_darwin(v147);
  v145 = (uint64_t)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v148 = (char *)&v130 - v20;
  v21 = type metadata accessor for String.Encoding(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100012E18(&qword_1005DA760);
  v26 = __chkstk_darwin(v25);
  v27 = __chkstk_darwin(v26);
  v28 = __chkstk_darwin(v27);
  __chkstk_darwin(v28);
  if (!a1)
    goto LABEL_6;
  v137 = v32;
  v136 = v31;
  v138 = v30;
  v139 = a3;
  v140 = (uint64_t)&v130 - v29;
  v33 = a1;
  v34 = objc_msgSend(a2, "objectWithID:", v33);
  v35 = objc_opt_self(ICNote);
  v36 = (void *)swift_dynamicCastObjCClass(v34, v35);
  if (!v36)
  {

LABEL_6:
    type metadata accessor for ICError(0);
    v44 = v43;
    v162[0] = 227;
    v45 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v46 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v47 = _BridgedStoredNSError.init(_:userInfo:)(&v163, v162, v45, v44, v46);
    swift_willThrow(v47);
    return;
  }
  v141 = v34;
  v37 = v36;
  if ((objc_msgSend(v36, "isPasswordProtectedAndLocked") & 1) != 0)
  {
    v38 = sub_10013F4E8();
    v39 = swift_allocError(&type metadata for AppIntentsError, v38, 0, 0);
    v41 = v33;
    v42 = 11;
LABEL_13:
    *v40 = v42;
    swift_willThrow(v39);

LABEL_14:
    return;
  }
  if (!objc_msgSend(v37, "isEditable"))
  {
    v60 = sub_10013F4E8();
    v39 = swift_allocError(&type metadata for AppIntentsError, v60, 0, 0);
    v41 = v33;
    v42 = 12;
    goto LABEL_13;
  }
  v135 = v33;
  v134 = v37;
  if (!objc_msgSend(v37, "canAddAttachment"))
  {
    v61 = sub_10013F4E8();
    v62 = swift_allocError(&type metadata for AppIntentsError, v61, 0, 0);
    *v63 = 21;
    swift_willThrow(v62);

    goto LABEL_14;
  }
  v133 = a2;
  v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56);
  v49 = v153;
  v48(v140, 1, 1, v153);
  v50 = IntentParameter.wrappedValue.getter(&v163);
  v51 = v164;
  if (v164)
  {
    v132 = v48;
    v52 = v163;
    static String.Encoding.utf8.getter(v50);
    v53 = String.data(using:allowLossyConversion:)(v24, 0, v52, v51);
    v55 = v54;
    v56 = swift_bridgeObjectRelease(v51);
    (*(void (**)(char *, uint64_t, __n128))(v22 + 8))(v24, v21, v56);
    if (v55 >> 60 == 15)
    {
      v57 = 2;
      v58 = 2;
      v59 = v141;
      v49 = v153;
      goto LABEL_23;
    }
    v64 = sub_10035B4D0();
    v131 = sub_10035C404((uint64_t)&off_100557378);
    swift_arrayDestroy(&unk_100557398, 4, &type metadata for String);
    v65 = sub_10035C404((uint64_t)&off_1005573D8);
    swift_arrayDestroy(&unk_1005573F8, 4, &type metadata for String);
    v66 = v144;
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v144, enum case for CSVType.double(_:), v15);
    v67 = v148;
    CSVReadingOptions.init(hasHeaderRow:nilEncodings:trueEncodings:falseEncodings:floatingPointType:ignoresEmptyLines:usesQuoting:usesEscaping:delimiter:escapeCharacter:)(0, v64, v131, v65, v66, 1, 1, 1, 44, 0xE100000000000000, 92, 0xE100000000000000);
    v68 = v146;
    v69 = v145;
    v70 = v147;
    ((void (**)(uint64_t, char *, uint64_t))v146)[2](v145, v67, v147);
    sub_10013DCA0(v53, v55);
    v71 = sub_10035B734((uint64_t)_swiftEmptyArrayStorage);
    v72 = v137;
    v73 = v152;
    DataFrame.init(csvData:columns:rows:types:options:)(v53, v55, 0, 0, 0, 1, v71, v69);
    if (v73)
    {

      sub_1001672D8(v53, v55);
      ((void (*)(char *, uint64_t))v68[1])(v67, v70);
      sub_100012DDC(v140, &qword_1005DA760);
      return;
    }
    v145 = v53;
    v152 = 0;
    v74 = v140;
    sub_100012DDC(v140, &qword_1005DA760);
    v49 = v153;
    v132(v72, 0, 1, v153);
    sub_10014BD1C(v72, v74, &qword_1005DA760);
    v75 = v74;
    v76 = v136;
    sub_100012CE8(v75, v136, &qword_1005DA760);
    v77 = v154;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v76, 1, v49) != 1)
    {
      v127 = v142;
      v128 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v77 + 32))(v142, v76, v49);
      v58 = DataFrame.shape.getter(v128);
      DataFrame.shape.getter(v58);
      v57 = v129;
      sub_1001672D8(v145, v55);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v127, v49);
      ((void (*)(char *, uint64_t))v68[1])(v148, v70);
      goto LABEL_22;
    }
    ((void (*)(char *, uint64_t))v68[1])(v67, v70);
    sub_1001672D8(v145, v55);
    sub_100012DDC(v76, &qword_1005DA760);
  }
  v57 = 2;
  v58 = 2;
LABEL_22:
  v59 = v141;
LABEL_23:
  v78 = v134;
  v79 = objc_msgSend(v134, "currentReplicaID");
  v80 = v150;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v79);

  v81 = objc_allocWithZone((Class)ICTableVersionedDocument);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v83 = objc_msgSend(v81, "initWithColumnCount:rowCount:replicaID:", v57, v58, isa);

  ((void (**)(char *, _QWORD *))v151)[1](v80, v161);
  v84 = objc_msgSend(v78, "addAttachmentWithUTI:", ICAttachmentUTTypeTable);
  v85 = objc_msgSend(v83, "serialize");
  v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
  v88 = v87;

  v89 = Data._bridgeToObjectiveC()().super.isa;
  sub_10013DD30(v86, v88);
  objc_msgSend(v84, "setMergeableData:", v89);

  v90 = objc_msgSend(v84, "attachmentModel");
  v91 = objc_opt_self(ICAttachmentTableModel);
  v161 = (_QWORD *)swift_dynamicCastObjCClass(v90, v91);
  if (v161)
  {
    v151 = (void (**)(_QWORD, _QWORD))v90;
    v92 = v140;
    v93 = v138;
    sub_100012CE8(v140, v138, &qword_1005DA760);
    v94 = v154;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v93, 1, v49) != 1)
    {
      v95 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 32))(v159, v93, v49);
      v96 = v157;
      v97 = DataFrame.rows.getter(v95);
      v98 = DataFrame.Rows.count.getter(v97);
      v150 = *(char **)(v143 + 8);
      v99 = ((uint64_t (*)(char *, uint64_t))v150)(v96, v158);
      if ((v98 & 0x8000000000000000) == 0)
      {
        v146 = (void (**)(uint64_t, _QWORD, uint64_t))v84;
        v147 = (uint64_t)v83;
        if (!v98)
        {
          v103 = v151;
LABEL_41:
          objc_msgSend(v161, "writeMergeableData");

          (*(void (**)(char *, uint64_t))(v154 + 8))(v159, v153);
          v59 = v141;
          v92 = v140;
          v83 = (id)v147;
          v84 = v146;
          goto LABEL_42;
        }
        v100 = 0;
        v101 = (char *)&type metadata for Any + 8;
        v102 = &type metadata for String;
        v148 = (char *)v98;
        v160 = v9;
        while (v100 != (char *)v98)
        {
          v104 = v157;
          DataFrame.rows.getter(v99);
          DataFrame.Rows.subscript.getter(v100);
          v105 = ((uint64_t (*)(char *, uint64_t))v150)(v104, v158);
          v106 = DataFrame.Row.count.getter(v105);
          if (v106 < 0)
            goto LABEL_50;
          v107 = v106;
          if (v106)
          {
            v108 = 0;
            do
            {
              DataFrame.Row.subscript.getter(&v163, v108);
              if (v165)
              {
                if ((swift_dynamicCast(v162, &v163, v101, v102, 6) & 1) != 0)
                {
                  v109 = v101;
                  v110 = v162[1];
                  v111 = v102;
                  v112 = objc_msgSend(v161, "table");
                  v113 = objc_allocWithZone((Class)NSAttributedString);
                  v114 = String._bridgeToObjectiveC()();
                  v115 = v110;
                  v101 = v109;
                  v116 = objc_msgSend(v113, "initWithString:", v114, swift_bridgeObjectRelease(v115).n128_f64[0]);

                  objc_msgSend(v112, "setAttributedString:columnIndex:rowIndex:", v116, v108, v100);
                  v102 = v111;
                  v9 = v160;

                }
              }
              else
              {
                sub_100012DDC((uint64_t)&v163, &qword_1005CF190);
              }
              ++v108;
            }
            while (v107 != v108);
          }
          ++v100;
          v99 = (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v9, v156);
          v98 = (uint64_t)v148;
          v103 = v151;
          if (v100 == v148)
            goto LABEL_41;
        }
        __break(1u);
LABEL_50:
        __break(1u);
      }
      __break(1u);
    }

    sub_100012DDC(v93, &qword_1005DA760);
  }
  else
  {

    v92 = v140;
  }
LABEL_42:
  v117 = objc_allocWithZone((Class)ICAttachmentInsertionController);
  v118 = objc_msgSend(v117, "initWithNote:", v134);
  sub_10014BD1C(v139 + 24, (uint64_t)v166, &qword_1005D4588);
  sub_10014BD1C((uint64_t)v166, (uint64_t)v167, &qword_1005D4588);
  if (v168 == 1)
    v119 = objc_msgSend(v118, "addAttachment:", v84);
  else
    v119 = objc_msgSend(v118, "addAttachment:atTextRange:", v84, v167[0], v167[1]);
  v120 = v133;

  v163 = 0;
  v121 = objc_msgSend(v120, "save:", &v163);
  v122 = v163;
  if ((v121 & 1) != 0)
  {
    v123 = v163;
    v124 = objc_msgSend(v84, "objectID");

    sub_100012DDC(v92, &qword_1005DA760);
    *v149 = v124;
  }
  else
  {
    v125 = v163;
    _convertNSErrorToError(_:)(v122);

    swift_willThrow(v126);
    sub_100012DDC(v92, &qword_1005DA760);
  }
}

Swift::Int sub_10035B4D0()
{
  Swift::Int v0;

  v0 = sub_10035C404((uint64_t)&off_1005572B8);
  swift_arrayDestroy(&unk_1005572D8, 10, &type metadata for String);
  return v0;
}

uint64_t sub_10035B51C(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;

  v4 = v1[1];
  *(_OWORD *)(v2 + 16) = *v1;
  *(_OWORD *)(v2 + 32) = v4;
  v5 = v1[3];
  *(_OWORD *)(v2 + 48) = v1[2];
  *(_OWORD *)(v2 + 64) = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_1005DA714);
  *(_QWORD *)(v2 + 80) = v6;
  *v6 = v2;
  v6[1] = sub_1001F9DFC;
  return CreateTableIntent.perform()(a1);
}

unint64_t sub_10035B58C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_10035B5F0(a1, a2, v5);
}

unint64_t sub_10035B5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v17;
  uint64_t v18;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  i = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * i);
    v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      i = (i + 1) & v13;
      if (((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
      {
        v14 = (_QWORD *)(v9 + 16 * i);
        v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0)
        {
          for (i = (i + 1) & v13; ((*(_QWORD *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v13)
          {
            v17 = (_QWORD *)(v9 + 16 * i);
            v18 = v17[1];
            if (*v17 == a1 && v18 == a2)
              break;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
              break;
          }
        }
      }
    }
  }
  return i;
}

unint64_t sub_10035B734(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = sub_100012E18(&qword_1005DA768);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }
  sub_100012E18((uint64_t *)&unk_1005DA770);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (char *)v5 + *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v28 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100012CE8(v13, (uint64_t)v5, &qword_1005DA768);
    v15 = *v5;
    v16 = v5[1];
    result = sub_10035B58C(*v5, v16);
    if ((v18 & 1) != 0)
      break;
    v19 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v20 = (uint64_t *)(v8[6] + 16 * result);
    *v20 = v15;
    v20[1] = v16;
    v21 = v8[7];
    v22 = type metadata accessor for CSVType(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32))(v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v19, v10, v22);
    v23 = v8[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (v24)
      goto LABEL_12;
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v26 = v28;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10035B8D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t, uint64_t);
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64x2_t v61;
  int16x8_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t result;
  uint64_t *v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  void (*v86)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void (*v88)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  unsigned __int32 v100;

  v78 = a1;
  v1 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v1);
  v77 = (char *)&v73 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for InputConnectionBehavior(0);
  v91 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v90 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v5 = __chkstk_darwin(v4);
  v76 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v85 = (char *)&v73 - v7;
  v8 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v8);
  v84 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v10);
  v83 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Locale(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for LocalizedStringResource(0);
  v23 = *(_QWORD *)(v22 - 8);
  v82 = v22;
  __chkstk_darwin(v22);
  v81 = (char *)&v73 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100012E18(&qword_1005CEF08);
  v25 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v79 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v80 = v12;
  v27(v15, enum case for LocalizedStringResource.BundleDescription.main(_:), v12);
  v73 = v27;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter title for Add Table intent", 36, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x8000000100478720);
  static Locale.current.getter(v28);
  v27(v15, v26, v12);
  v29 = v83;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter description for name", 30, 2);
  v88 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
  v88(v29, 0, 1, v22);
  v30 = type metadata accessor for String.IntentInputOptions(0);
  v96 = 0;
  v97 = 0;
  v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v31 = v84;
  v74(v84, 1, 1, v30);
  v32 = type metadata accessor for IntentDialog(0);
  v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v87 = v32;
  v33 = v85;
  v86(v85, 1, 1, v32);
  v92 = enum case for InputConnectionBehavior.default(_:);
  v34 = v90;
  v91 = *(_QWORD *)(v91 + 104);
  v35 = v93;
  ((void (*)(char *))v91)(v90);
  v36 = v81;
  v75 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v81, v29, &v96, v31, v33, v34);
  v37 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100478760);
  static Locale.current.getter(v37);
  v38 = v79;
  v39 = v80;
  v40 = v73;
  v73(v15, v79, v80);
  v41 = v36;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter title for Add Table intent", 36, 2);
  v42 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x8000000100478780);
  static Locale.current.getter(v42);
  v40(v15, v38, v39);
  v43 = v83;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter description for comma separated value string", 54, 2);
  v88(v43, 0, 1, v82);
  v96 = 0;
  v97 = 0;
  v44 = v84;
  v74(v84, 1, 1, v30);
  v45 = v85;
  v86(v85, 1, 1, v87);
  v46 = v90;
  ((void (*)(char *, _QWORD, uint64_t))v91)(v90, v92, v35);
  v89 = IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v41, v43, &v96, v44, v45, v46);
  v84 = (char *)sub_100012E18((uint64_t *)&unk_1005CEE90);
  v47 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v47);
  v48 = v79;
  v49 = v80;
  v40(v15, v79, v80);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter title for Add Table intent", 36, 2);
  v50 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000026, 0x8000000100478800);
  static Locale.current.getter(v50);
  v40(v15, v48, v49);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter description for note", 30, 2);
  v88(v43, 0, 1, v82);
  v51 = type metadata accessor for NoteEntity(0);
  v52 = v77;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v77, 1, 1, v51);
  v53 = v45;
  v54 = v45;
  v56 = v86;
  v55 = v87;
  v86(v54, 1, 1, v87);
  v57 = v76;
  v56(v76, 1, 1, v55);
  v96 = sub_1001E8EEC();
  v97 = v58;
  v98 = v59;
  v99 = v60 & 1;
  v61 = (uint64x2_t)vdupq_n_s64(v60);
  v62 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v61, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v61, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v62.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v62), (int8x8_t)0x1000100010001);
  v100 = vmovn_s16(v62).u32[0];
  ((void (*)(char *, _QWORD, uint64_t))v91)(v46, v92, v93);
  v63 = sub_100127D40();
  v64 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v81, v43, v52, v53, v57, v46, &v96, &type metadata for VisibleNotesQuery, v63);
  sub_100012E18(&qword_1005CEE50);
  v94 = 0xD000000000000021;
  v95 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(&v96, &v94, &type metadata for String, &protocol witness table for String);
  v65 = type metadata accessor for AppDependencyManager(0);
  v66 = static AppDependencyManager.shared.getter(v65);
  v67 = AppDependency.__allocating_init(key:manager:)(&v96, v66);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v94 = 0xD000000000000024;
  v95 = 0x8000000100476B40;
  v68 = AnyHashable.init<A>(_:)(&v96, &v94, &type metadata for String, &protocol witness table for String);
  v69 = static AppDependencyManager.shared.getter(v68);
  result = AppDependency.__allocating_init(key:manager:)(&v96, v69);
  v71 = v78;
  v72 = v89;
  *v78 = v75;
  v71[1] = v72;
  v71[3] = 0;
  v71[4] = 0;
  v71[2] = v64;
  *((_BYTE *)v71 + 40) = 1;
  v71[6] = v67;
  v71[7] = result;
  return result;
}

uint64_t sub_10035C1A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10035C1C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10035C1F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

void sub_10035C244(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10035A678(*(void **)(v1 + 16), *(void **)(v1 + 24), v1 + 32, a1);
}

unint64_t sub_10035C264()
{
  unint64_t result;

  result = qword_1005DA718;
  if (!qword_1005DA718)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CreateTableIntent, &type metadata for CreateTableIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA718);
  }
  return result;
}

unint64_t sub_10035C2B0()
{
  unint64_t result;

  result = qword_1005DA720;
  if (!qword_1005DA720)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CreateTableIntent, &type metadata for CreateTableIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA720);
  }
  return result;
}

unint64_t sub_10035C2F8()
{
  unint64_t result;

  result = qword_1005DA728;
  if (!qword_1005DA728)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CreateTableIntent, &type metadata for CreateTableIntent);
    atomic_store(result, (unint64_t *)&qword_1005DA728);
  }
  return result;
}

uint64_t sub_10035C33C(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of CreateTableIntent.perform()>>, 1)+ 8);
}

uint64_t sub_10035C360(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static CreateTableIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for CreateTableIntent()
{
  return &type metadata for CreateTableIntent;
}

uint64_t sub_10035C380()
{
  return sub_100016638(&qword_1005DA738, &qword_1005DA740, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_10035C3AC()
{
  return sub_100016638(&qword_1005DA748, &qword_1005DA750, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10035C3D8()
{
  return sub_100016638(&qword_1005DA758, &qword_1005DA750, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

Swift::Int sub_10035C404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100012E18(&qword_1005D89E0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = (uint64_t *)(v6 + 16 * v4);
      v9 = *v7;
      v8 = v7[1];
      Hasher.init(_seed:)(v28, *(_QWORD *)(v3 + 40));
      swift_bridgeObjectRetain(v8);
      String.hash(into:)(v28, v9, v8);
      result = Hasher._finalize()();
      v11 = -1 << *(_BYTE *)(v3 + 32);
      v12 = result & ~v11;
      v13 = v12 >> 6;
      v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
      v15 = 1 << v12;
      if (((1 << v12) & v14) != 0)
      {
        v16 = *(_QWORD *)(v3 + 48);
        v17 = (_QWORD *)(v16 + 16 * v12);
        v18 = v17[1];
        v19 = *v17 == v9 && v18 == v8;
        if (v19 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, v9, v8, 0), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v8);
          goto LABEL_4;
        }
        v20 = ~v11;
        while (1)
        {
          v12 = (v12 + 1) & v20;
          v13 = v12 >> 6;
          v14 = *(_QWORD *)(v5 + 8 * (v12 >> 6));
          v15 = 1 << v12;
          if ((v14 & (1 << v12)) == 0)
            break;
          v21 = (_QWORD *)(v16 + 16 * v12);
          v22 = v21[1];
          if (*v21 != v9 || v22 != v8)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, v9, v8, 0);
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v13) = v15 | v14;
      v24 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v12);
      *v24 = v9;
      v24[1] = v8;
      v25 = *(_QWORD *)(v3 + 16);
      v26 = __OFADD__(v25, 1);
      v27 = v25 + 1;
      if (v26)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v27;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_10035C5A0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100465158, a1);
  v5 = swift_getKeyPath(&unk_100465180, v4);
  static Published.subscript.getter(&v7);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10035C61C(void **a1, void **a2)
{
  void *v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v9;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100465158, a2);
  v6 = swift_getKeyPath(&unk_100465180, v5);
  v9 = v2;
  v7 = v2;
  return static Published.subscript.setter(&v9, v3, KeyPath, v6);
}

unint64_t sub_10035C68C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v4;

  result = sub_10035F7B4(*a1);
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_10035C774(void *a1)
{
  _BYTE *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_sheetController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_preferredCompactContentWidth] = 0x4081C00000000000;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_additionalSafeAreaTopInset] = 0x4038000000000000;
  v1[OBJC_IVAR___ICActivityStreamNavigationController_isCapturingActivityStreamSummaryEvent] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_object] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_selection] = 0;
  v2 = OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations;
  *(_QWORD *)&v1[v2] = sub_10013AFA8((uint64_t)_swiftEmptyArrayStorage);
  v3 = &v1[OBJC_IVAR___ICActivityStreamNavigationController_timeOfLastViewModeChange];
  v4 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___unfilteredHeaderView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___filteredHeaderView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_halfHeightRatio] = 0x400599999999999ALL;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001004796E0, "MobileNotes/ActivityStreamNavigationController.swift", 52, 2, 61, 0);
  __break(1u);
}

void sub_10035C8E0(char a1)
{
  char *v1;
  char *v2;
  objc_class *ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Class isa;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD v35[3];
  objc_super v36;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v2);
  v5 = type metadata accessor for Logger(0);
  __chkstk_darwin(v5);
  v6 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v6);
  v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  v36.receiver = v2;
  v36.super_class = ObjectType;
  v9 = objc_msgSendSuper2(&v36, "viewWillAppear:", a1 & 1);
  v10 = OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController;
  if (!*(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController])
  {
    v11 = *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_coordinator];
    v12 = objc_allocWithZone((Class)type metadata accessor for ActivityStreamViewController(0));
    swift_unknownObjectRetain(v11);
    v14 = sub_10013B248(v13);
    v15 = sub_100012E18(&qword_1005CF6F0);
    v16 = swift_allocObject(v15, 40, 7);
    *(_OWORD *)(v16 + 16) = xmmword_100456F30;
    *(_QWORD *)(v16 + 32) = v14;
    v35[0] = v16;
    specialized Array._endMutation()(v16);
    v17 = v35[0];
    sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
    v18 = v14;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v2, "setViewControllers:", isa, swift_bridgeObjectRelease(v17).n128_f64[0]);

    v20 = *(void **)&v2[v10];
    *(_QWORD *)&v2[v10] = v18;

  }
  Date.init()(v9);
  v21 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 0, 1, v21);
  v22 = (uint64_t)&v2[OBJC_IVAR___ICActivityStreamNavigationController_timeOfLastViewModeChange];
  swift_beginAccess(&v2[OBJC_IVAR___ICActivityStreamNavigationController_timeOfLastViewModeChange], v35, 33, 0);
  sub_1001CE964((uint64_t)v8, v22);
  swift_endAccess(v35);
  v23 = *(void **)&v2[v10];
  if (v23)
  {
    v24 = *(void **)&v2[OBJC_IVAR___ICActivityStreamNavigationController_object];
    v25 = v24;
    v26 = v23;
    sub_10013C038(v24);

    v28 = *(void **)&v2[v10];
    if (v28)
    {
      v29 = *(void **)&v2[OBJC_IVAR___ICActivityStreamNavigationController_selection];
      KeyPath = swift_getKeyPath(&unk_100465158, v27);
      v32 = swift_getKeyPath(&unk_100465180, v31);
      v35[0] = v29;
      v33 = v29;
      static Published.subscript.setter(v35, v28, KeyPath, v32);
    }
  }
  sub_10035CCE0();
}

void sub_10035CCE0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned int v10;
  void *v11;
  char *v12;
  id v13;
  double v14;
  double v15;
  id v16;
  void *v17;
  double v18;
  double v19;
  char *v20;
  double v21;
  double v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unsigned __int8 v30;
  uint64_t v31;
  id v32;
  void *v33;
  char *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  id v39;
  void *v40;
  double v41;
  double v42;
  id v43;
  void *v44;
  double v45;
  double v46;
  double v47;
  id v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  void *v53;
  id v54;
  double v55;
  char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  void *v72;
  id v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void **aBlock;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  void *v82;
  void (*v83)();
  uint64_t v84;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision");
  v11 = *(void **)&v0[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController];
  if (v10)
  {
    if (!v11)
      goto LABEL_8;
    v12 = v11;
    v13 = objc_msgSend(v0, "navigationBar");
    objc_msgSend(v13, "bounds");
    v15 = v14;

  }
  else
  {
    if (!v11)
      goto LABEL_8;
    v12 = v11;
    v16 = objc_msgSend(v0, "view");
    if (!v16)
    {
      __break(1u);
      goto LABEL_27;
    }
    v17 = v16;
    objc_msgSend(v16, "safeAreaInsets");
    v19 = v18;

    v20 = sub_100016B1C();
    objc_msgSend(v20, "frame");
    v22 = v21;

    v15 = v19 + v22;
  }
  *(double *)&v12[OBJC_IVAR___ICActivityStreamViewController_topInset] = v15;
  sub_10013BA10();

LABEL_8:
  v74 = v7;
  v75 = v5;
  v23 = v6;
  v76 = v3;
  v77 = v2;
  v24 = objc_msgSend(v1, "splitViewController");
  if (v24)
  {
    v25 = v24;
    v26 = objc_opt_self(ICTrailingSidebarSplitViewController);
    v27 = swift_dynamicCastObjCClass(v25, v26);
    if (v27)
    {
      v28 = (void *)v27;
      v29 = sub_100016B1C();
      v30 = objc_msgSend(v28, "shouldRenderAsOverlay");
      v31 = OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_isCloseButtonHidden;
      v29[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_isCloseButtonHidden] = v30;
      v32 = sub_100006FF8();
      objc_msgSend(v32, "setHidden:", v29[v31]);

      v25 = v32;
    }

  }
  v33 = *(void **)&v1[OBJC_IVAR___ICActivityStreamNavigationController_sheetController];
  if (!v33)
  {
    v72 = *(void **)&v1[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController];
    if (!v72)
      return;
    v78 = v72;
    sub_10013BB8C();
LABEL_24:

    return;
  }
  v78 = v33;
  v34 = sub_100016B1C();
  v35 = OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_isCloseButtonHidden;
  v34[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_isCloseButtonHidden] = 0;
  v36 = sub_100006FF8();
  objc_msgSend(v36, "setHidden:", v34[v35]);

  v37 = OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController;
  v38 = *(void **)&v1[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController];
  if (!v38)
    goto LABEL_24;
  v39 = objc_msgSend(v38, "view");
  if (!v39)
    goto LABEL_24;
  v40 = v39;
  objc_msgSend(v78, "_currentPresentedViewFrame");
  v42 = v41;
  v43 = objc_msgSend(v1, "view");
  if (!v43)
  {
LABEL_27:
    __break(1u);
    return;
  }
  v44 = v43;
  objc_msgSend(v43, "safeAreaInsets");
  v46 = v45;

  v47 = v42 - v46;
  v48 = sub_100016C14();
  objc_msgSend(v48, "frame");
  v50 = v49;

  v51 = v47 - v50;
  v52 = v23;
  if (v51 > 20.0)
  {
    v53 = *(void **)&v1[v37];
    if (v53)
    {
      v54 = v53;
      sub_10013BB8C();

    }
  }
  objc_msgSend(v40, "alpha");
  v56 = v75;
  if (v51 <= 20.0 == (v55 != 0.0))
  {
    v73 = (id)objc_opt_self(UIView);
    v57 = swift_allocObject(&unk_10056B388, 25, 7);
    *(_QWORD *)(v57 + 16) = v1;
    *(_BYTE *)(v57 + 24) = v51 <= 20.0;
    v83 = sub_10035FC10;
    v84 = v57;
    aBlock = _NSConcreteStackBlock;
    v80 = 1107296256;
    v81 = sub_100206734;
    v82 = &unk_10056B3A0;
    v58 = _Block_copy(&aBlock);
    v59 = v84;
    v60 = v1;
    swift_release(v59);
    objc_msgSend(v73, "animateWithDuration:animations:", v58, 0.25);
    _Block_release(v58);
  }
  v61 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v62 = (void *)static OS_dispatch_queue.main.getter(v61);
  v63 = swift_allocObject(&unk_10056B3D8, 24, 7);
  *(_QWORD *)(v63 + 16) = v1;
  v83 = sub_10035FC1C;
  v84 = v63;
  aBlock = _NSConcreteStackBlock;
  v80 = 1107296256;
  v81 = sub_100206734;
  v82 = &unk_10056B3F0;
  v64 = _Block_copy(&aBlock);
  v65 = v84;
  v66 = v1;
  swift_release(v65);
  static DispatchQoS.unspecified.getter(v67);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v68 = sub_100225940();
  v69 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v70 = sub_1002DECD4();
  v71 = v77;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v69, v70, v77, v68);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v56, v64);
  _Block_release(v64);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v56, v71);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v9, v52);
}

void sub_10035D2D0()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  id v10;
  id v11;
  char v12[24];

  v1 = *(void **)&v0[OBJC_IVAR___ICActivityStreamNavigationController_object];
  if (v1)
  {
    v2 = *(void **)&v0[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController];
    if (v2)
    {
      v3 = v1;
      v10 = v2;
      v4 = objc_msgSend(v0, "view");
      if (v4)
      {
        v5 = v4;
        v11 = objc_msgSend(v4, "ic_viewControllerManager");

        if (v11)
        {
          if ((objc_msgSend(v11, "isSplitViewExpandingOrCollapsing") & 1) != 0)
          {

          }
          else
          {
            v6 = objc_msgSend(v10, "eventReporter");
            objc_msgSend(v6, "startActivityStreamSummaryEventForObject:", v3);

            v7 = sub_10013AFA8((uint64_t)_swiftEmptyArrayStorage);
            v8 = (unint64_t *)&v0[OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations];
            swift_beginAccess(&v0[OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations], v12, 1, 0);
            v9 = *v8;
            *v8 = v7;
            swift_bridgeObjectRelease(v9);
            v0[OBJC_IVAR___ICActivityStreamNavigationController_isCapturingActivityStreamSummaryEvent] = 1;
          }
        }
        else
        {

        }
      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_10035D510()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  _BYTE v26[24];

  v1 = *(void **)(v0 + OBJC_IVAR___ICActivityStreamNavigationController_object);
  if (v1)
  {
    v2 = v0;
    v3 = *(void **)(v0 + OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController);
    if (v3)
    {
      v4 = OBJC_IVAR___ICActivityStreamNavigationController_isCapturingActivityStreamSummaryEvent;
      if (*(_BYTE *)(v2 + OBJC_IVAR___ICActivityStreamNavigationController_isCapturingActivityStreamSummaryEvent) == 1)
      {
        v5 = v1;
        v6 = v3;
        v7 = objc_msgSend(v6, "eventReporter");
        if (v7)
        {
          v8 = v7;
          sub_10035EC0C();
          v9 = (uint64_t *)(v2 + OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations);
          swift_beginAccess(v2 + OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations, v26, 32, 0);
          v10 = *v9;
          v11 = 0.0;
          v12 = 0.0;
          if (*(_QWORD *)(*v9 + 16))
          {
            v13 = sub_1002493C8(2);
            if ((v14 & 1) != 0)
              v12 = *(double *)(*(_QWORD *)(v10 + 56) + 8 * v13);
          }
          swift_endAccess(v26);
          sub_10035EC0C();
          swift_beginAccess(v9, v26, 32, 0);
          v15 = *v9;
          if (*(_QWORD *)(*v9 + 16))
          {
            v16 = sub_1002493C8(3);
            if ((v17 & 1) != 0)
              v11 = *(double *)(*(_QWORD *)(v15 + 56) + 8 * v16);
          }
          swift_endAccess(v26);
          sub_10035EC0C();
          swift_beginAccess(v9, v26, 32, 0);
          v18 = *v9;
          v19 = 0.0;
          v20 = 0.0;
          if (*(_QWORD *)(*v9 + 16))
          {
            v21 = sub_1002493C8(5);
            if ((v22 & 1) != 0)
              v20 = *(double *)(*(_QWORD *)(v18 + 56) + 8 * v21);
          }
          swift_endAccess(v26);
          sub_10035EC0C();
          swift_beginAccess(v9, v26, 32, 0);
          v23 = *v9;
          if (*(_QWORD *)(*v9 + 16))
          {
            v24 = sub_1002493C8(1);
            if ((v25 & 1) != 0)
              v19 = *(double *)(*(_QWORD *)(v23 + 56) + 8 * v24);
          }
          swift_endAccess(v26);
          objc_msgSend(v8, "submitActivityStreamSummaryEventForObject:halfHeightViewDuration:fullHeightViewDuration:sideBarViewDuration:minimizedViewDuration:", v5, v12, v11, v20, v19);

        }
        *(_BYTE *)(v2 + v4) = 0;
      }
    }
  }
}

void sub_10035D800(void *a1, double a2, double a3)
{
  void *v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void **v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void *v18;
  id (*v19)(uint64_t);
  uint64_t v20;
  objc_super v21;

  v21.receiver = v3;
  v21.super_class = (Class)swift_getObjectType(v3);
  objc_msgSendSuper2(&v21, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v7 = swift_allocObject(&unk_10056B2E8, 24, 7);
  *(_QWORD *)(v7 + 16) = v3;
  v19 = sub_10035FC50;
  v20 = v7;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_10015AC08;
  v18 = &unk_10056B300;
  v8 = _Block_copy(&v15);
  v9 = v20;
  v10 = v3;
  swift_release(v9);
  v11 = swift_allocObject(&unk_10056B338, 24, 7);
  *(_QWORD *)(v11 + 16) = v10;
  v19 = sub_10035FBD4;
  v20 = v11;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_10015AC08;
  v18 = &unk_10056B350;
  v12 = _Block_copy(&v15);
  v13 = v20;
  v14 = v10;
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v8, v12, swift_release(v13).n128_f64[0]);
  _Block_release(v12);
  _Block_release(v8);
}

id sub_10035D958(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  id result;

  v3 = *(void **)(a2 + OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController);
  if (v3)
  {
    v4 = v3;
    sub_10013BA10();

  }
  result = *(id *)(a2 + OBJC_IVAR___ICActivityStreamNavigationController_sheetController);
  if (result)
    return objc_msgSend(result, "invalidateDetents");
  return result;
}

void sub_10035DA24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  id v6;
  id v7;
  void *v8;
  _BYTE v9[24];

  v3 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    v6 = sub_100016C14();
    ActivityStreamDockView.update()();

    v7 = sub_100016C14();
    objc_msgSend(v7, "layoutIfNeeded");

    v8 = *(void **)&v5[OBJC_IVAR___ICActivityStreamNavigationController_sheetController];
    if (v8)
      objc_msgSend(v8, "invalidateDetents");
    sub_10035DAC4();

  }
}

void sub_10035DAC4()
{
  _BYTE *v0;
  void *v1;
  _BYTE *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  Class isa;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  unsigned int v22;
  double v23;
  double v24;
  id v25;
  void *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v1 = *(void **)&v0[OBJC_IVAR___ICActivityStreamNavigationController_sheetController];
  if (v1)
  {
    v2 = v0;
    v3 = sub_100012E18(&qword_1005CF6F0);
    v4 = swift_allocObject(v3, 40, 7);
    *(_OWORD *)(v4 + 16) = xmmword_100456F30;
    v5 = (void *)objc_opt_self(UISheetPresentationControllerDetent);
    v6 = v1;
    v7 = objc_msgSend(v5, "largeDetent");
    *(_QWORD *)(v4 + 32) = v7;
    v34 = v4;
    specialized Array._endMutation()(v7);
    v8 = v4;
    if (v2[OBJC_IVAR___ICActivityStreamNavigationController_hasInteractiveSizing] != 1)
    {
      v13 = 0;
      v9 = -1;
      goto LABEL_12;
    }
    v9 = (uint64_t)sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent, (uint64_t)&unk_10056B1F8, (uint64_t)sub_10035F814, (uint64_t)&unk_10056B210);
    if (v4 >> 62)
      goto LABEL_31;
LABEL_4:
    sub_10026CA5C(0, 0, v9);
    v10 = objc_msgSend(v2, "view");
    if (v10)
    {
      v11 = v10;
      v12 = objc_msgSend(v10, "ic_hasCompactHeight");

      if ((v12 & 1) != 0)
      {
        v9 = 0;
        goto LABEL_11;
      }
      v8 = (uint64_t)sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent, (uint64_t)&unk_10056B1A8, (uint64_t)sub_10035F7E8, (uint64_t)&unk_10056B1C0);
      v14 = v34;
      if (v34 >> 62)
      {
        while (1)
        {
          v32 = v14 < 0 ? v14 : v14 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v14);
          v33 = _CocoaArrayWrapper.endIndex.getter(v32);
          swift_bridgeObjectRelease(v14);
          if (v33 < 1)
            break;
LABEL_10:
          v9 = 1;
          sub_10026CA5C(1, 1, v8);
LABEL_11:
          v8 = v34;
          v13 = 1;
LABEL_12:
          sub_1000163BC(0, (unint64_t *)&unk_1005D6450, UISheetPresentationControllerDetent_ptr);
          swift_bridgeObjectRetain(v8);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v8);
          objc_msgSend(v6, "setDetents:", isa);

          v16 = OBJC_IVAR___ICActivityStreamNavigationController_indexOfCurrentDetent;
          v17 = *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_indexOfCurrentDetent];
          if (v17 < 0)
            goto LABEL_17;
          if ((unint64_t)v8 >> 62)
          {
            if (v8 < 0)
              v29 = v8;
            else
              v29 = v8 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v8);
            v30 = _CocoaArrayWrapper.endIndex.getter(v29);
            swift_bridgeObjectRelease(v8);
            v19 = v30 - 1;
            if (!__OFSUB__(v30, 1))
            {
LABEL_15:
              if (v19 < v17 || objc_msgSend(v6, "_indexOfCurrentDetent") != *(id *)&v2[v16])
              {
LABEL_17:
                objc_msgSend(v6, "_setIndexOfCurrentDetent:", v13);
                sub_10035EC0C();
                *(_QWORD *)&v2[v16] = v13;
              }
              objc_msgSend(v6, "_setIndexOfLastUndimmedDetent:", v9);
              v20 = objc_msgSend(v2, "view");
              if (!v20)
                goto LABEL_41;
              v21 = v20;
              v22 = objc_msgSend(v20, "ic_hasCompactHeight");

              if (v22)
              {
                v23 = *(double *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_preferredCompactContentWidth];
                v24 = 0.0;
              }
              else
              {
                v25 = objc_msgSend(v2, "view");
                if (!v25)
                  goto LABEL_43;
                v26 = v25;
                objc_msgSend(v25, "intrinsicContentSize");
                v23 = v27;
                v24 = v28;

              }
              objc_msgSend(v2, "setPreferredContentSize:", v23, v24);
              swift_bridgeObjectRelease(v8);

              return;
            }
          }
          else
          {
            v18 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
            v19 = v18 - 1;
            if (!__OFSUB__(v18, 1))
              goto LABEL_15;
          }
          __break(1u);
LABEL_31:
          if (v8 < 0)
            v31 = v8;
          else
            v31 = v8 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v8);
          v14 = _CocoaArrayWrapper.endIndex.getter(v31);
          swift_bridgeObjectRelease(v8);
          if ((v14 & 0x8000000000000000) == 0)
            goto LABEL_4;
          __break(1u);
        }
      }
      else if (*(uint64_t *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10) >= 1)
      {
        goto LABEL_10;
      }
      __break(1u);
LABEL_41:
      __break(1u);
    }
    __break(1u);
LABEL_43:
    __break(1u);
  }
}

double sub_10035DFB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  char v7;
  _BYTE v9[24];

  sub_10035EC0C();
  v3 = (uint64_t *)(v1 + OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations);
  swift_beginAccess(v3, v9, 32, 0);
  v4 = *v3;
  v5 = 0.0;
  if (*(_QWORD *)(v4 + 16))
  {
    v6 = sub_1002493C8(a1);
    if ((v7 & 1) != 0)
      v5 = *(double *)(*(_QWORD *)(v4 + 56) + 8 * v6);
  }
  swift_endAccess(v9);
  return v5;
}

void sub_10035E034(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  unint64_t v9;
  id v10;
  double v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  char v19;
  id v20;
  void *v21;
  unsigned int v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  id v28;
  id v29;
  char v30;
  id v31;
  id v32;

  v2 = v1;
  if (objc_msgSend(a1, "state") == (id)3)
  {
    v3 = OBJC_IVAR___ICActivityStreamNavigationController_sheetController;
    v4 = *(void **)&v1[OBJC_IVAR___ICActivityStreamNavigationController_sheetController];
    if (v4)
    {
      v5 = objc_msgSend(v4, "detents");
      v6 = sub_1000163BC(0, (unint64_t *)&unk_1005D6450, UISheetPresentationControllerDetent_ptr);
      v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

      v8 = *(void **)&v2[v3];
      if (!v8)
      {
        swift_bridgeObjectRelease(v7);
        return;
      }
      v9 = (unint64_t)objc_msgSend(v8, "_indexOfCurrentDetent");
      if ((v7 & 0xC000000000000001) == 0)
      {
        if ((v9 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v9 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v10 = *(id *)(v7 + 8 * v9 + 32);
          goto LABEL_8;
        }
        __break(1u);
        goto LABEL_42;
      }
      v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
LABEL_8:
      v32 = v10;
      *(_QWORD *)&v11 = swift_bridgeObjectRelease(v7).n128_u64[0];
      v12 = *(void **)&v2[v3];
      if (v12)
      {
        v13 = objc_msgSend(v12, "detents", v11);
        v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v6);

        v14 = *(void **)&v2[v3];
        if (v14)
        {
          v9 = (unint64_t)objc_msgSend(v14, "_indexOfCurrentDetent");
          if ((v7 & 0xC000000000000001) == 0)
          {
            if ((v9 & 0x8000000000000000) != 0)
            {
              __break(1u);
            }
            else if (v9 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
            {
              v15 = *(id *)(v7 + 8 * v9 + 32);
              goto LABEL_14;
            }
            __break(1u);
            goto LABEL_45;
          }
LABEL_42:
          v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
LABEL_14:
          v16 = v15;
          swift_bridgeObjectRelease(v7);
          v17 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent, (uint64_t)&unk_10056B1F8, (uint64_t)sub_10035F814, (uint64_t)&unk_10056B210);
          if (v16)
          {
            v18 = v16;
            v19 = static NSObject.== infix(_:_:)(v18);

            if ((v19 & 1) != 0)
            {
              v20 = objc_msgSend(v2, "view");
              if (v20)
              {
                v21 = v20;
                v22 = objc_msgSend(v20, "ic_hasCompactHeight");

                if (!v22)
                {
                  v31 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent, (uint64_t)&unk_10056B1A8, (uint64_t)sub_10035F7E8, (uint64_t)&unk_10056B1C0);
                  goto LABEL_36;
                }
LABEL_32:
                v31 = objc_msgSend((id)objc_opt_self(UISheetPresentationControllerDetent), "largeDetent");
LABEL_36:
                v28 = v32;
                v32 = v31;
                goto LABEL_37;
              }
              goto LABEL_48;
            }
LABEL_24:
            v23 = *(void **)&v2[v3];
            if (v23)
            {
              v24 = objc_msgSend(v23, "detents");
              v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v24, v6);

              v25 = *(void **)&v2[v3];
              if (v25)
              {
                v9 = (unint64_t)objc_msgSend(v25, "_indexOfCurrentDetent");
                if ((v7 & 0xC000000000000001) == 0)
                {
                  if ((v9 & 0x8000000000000000) != 0)
                  {
                    __break(1u);
                  }
                  else if (v9 < *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10))
                  {
                    v26 = *(id *)(v7 + 8 * v9 + 32);
                    goto LABEL_30;
                  }
                  __break(1u);
LABEL_48:
                  __break(1u);
                  return;
                }
LABEL_45:
                v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v7);
LABEL_30:
                v27 = v26;
                swift_bridgeObjectRelease(v7);
                v28 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent, (uint64_t)&unk_10056B1A8, (uint64_t)sub_10035F7E8, (uint64_t)&unk_10056B1C0);
                if (v27)
                {
                  v29 = v27;
                  v30 = static NSObject.== infix(_:_:)(v29);

                  if ((v30 & 1) == 0)
                  {
LABEL_38:
                    sub_10035E560((uint64_t)v32);

                    return;
                  }
                  goto LABEL_32;
                }
LABEL_37:

                goto LABEL_38;
              }
              swift_bridgeObjectRelease(v7);
            }
            v28 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent, (uint64_t)&unk_10056B1A8, (uint64_t)sub_10035F7E8, (uint64_t)&unk_10056B1C0);
            goto LABEL_37;
          }
LABEL_23:

          goto LABEL_24;
        }
        swift_bridgeObjectRelease(v7);
      }
      v17 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent, (uint64_t)&unk_10056B1F8, (uint64_t)sub_10035F814, (uint64_t)&unk_10056B210);
      goto LABEL_23;
    }
  }
}

id sub_10035E460(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  id v18;
  _QWORD v20[5];
  uint64_t v21;

  v5 = *a1;
  v6 = *(void **)&v4[*a1];
  if (v6)
  {
    v7 = *(id *)&v4[*a1];
  }
  else
  {
    v11 = (void *)objc_opt_self(UISheetPresentationControllerDetent);
    v12 = swift_allocObject(a2, 24, 7);
    *(_QWORD *)(v12 + 16) = v4;
    v20[4] = a3;
    v21 = v12;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1107296256;
    v20[2] = sub_10035F1B4;
    v20[3] = a4;
    v13 = _Block_copy(v20);
    v14 = v21;
    v15 = v4;
    swift_release(v14);
    v16 = objc_msgSend(v11, "_detentWithContainerViewBlock:", v13);
    _Block_release(v13);
    v17 = *(void **)&v4[v5];
    *(_QWORD *)&v4[v5] = v16;
    v7 = v16;

    v6 = 0;
  }
  v18 = v6;
  return v7;
}

void sub_10035E560(uint64_t a1)
{
  char *v1;
  void *v2;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  void *v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  id v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  char *v19;
  id v20;
  void **aBlock;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD *v26;

  v2 = *(void **)&v1[OBJC_IVAR___ICActivityStreamNavigationController_sheetController];
  if (v2)
  {
    v20 = v2;
    v4 = objc_msgSend(v20, "detents");
    v5 = sub_1000163BC(0, (unint64_t *)&unk_1005D6450, UISheetPresentationControllerDetent_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    sub_1003DA4F4(a1, v6);
    v8 = v7;
    LOBYTE(a1) = v9;
    swift_bridgeObjectRelease(v6);
    if ((a1 & 1) != 0)
    {

    }
    else
    {
      sub_10035EC0C();
      *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_indexOfCurrentDetent] = v8;
      v10 = (void *)objc_opt_self(UIView);
      v11 = (_QWORD *)swift_allocObject(&unk_10056B248, 40, 7);
      v11[2] = v20;
      v11[3] = v8;
      v11[4] = v1;
      v25 = sub_10035FBB8;
      v26 = v11;
      aBlock = _NSConcreteStackBlock;
      v22 = 1107296256;
      v23 = sub_100206734;
      v24 = &unk_10056B260;
      v12 = _Block_copy(&aBlock);
      v13 = v26;
      v14 = v20;
      v15 = v1;
      swift_release(v13);
      v16 = swift_allocObject(&unk_10056B298, 24, 7);
      *(_QWORD *)(v16 + 16) = v15;
      v25 = sub_10035FBC4;
      v26 = (_QWORD *)v16;
      aBlock = _NSConcreteStackBlock;
      v22 = 1107296256;
      v23 = sub_100343CD8;
      v24 = &unk_10056B2B0;
      v17 = _Block_copy(&aBlock);
      v18 = v26;
      v19 = v15;
      swift_release(v18);
      objc_msgSend(v10, "animateWithDuration:animations:completion:", v12, v17, 0.3);
      _Block_release(v17);
      _Block_release(v12);

    }
  }
}

unint64_t sub_10035E814()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unint64_t result;
  id v9;
  void *v10;
  id v11;
  id v12;
  char v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  char v21;

  v1 = OBJC_IVAR___ICActivityStreamNavigationController_sheetController;
  v2 = *(void **)(v0 + OBJC_IVAR___ICActivityStreamNavigationController_sheetController);
  if (!v2)
    return 5;
  v3 = v0;
  if (*(_BYTE *)(v0 + OBJC_IVAR___ICActivityStreamNavigationController_hasInteractiveSizing) != 1)
    return 4;
  v4 = objc_msgSend(v2, "detents");
  v5 = sub_1000163BC(0, (unint64_t *)&unk_1005D6450, UISheetPresentationControllerDetent_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v7 = *(void **)(v3 + v1);
  if (!v7)
  {
    swift_bridgeObjectRelease(v6);
    v11 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent, (uint64_t)&unk_10056B1F8, (uint64_t)sub_10035F814, (uint64_t)&unk_10056B210);
    goto LABEL_14;
  }
  result = (unint64_t)objc_msgSend(v7, "_indexOfCurrentDetent");
  if ((v6 & 0xC000000000000001) == 0)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (result < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v9 = *(id *)(v6 + 8 * result + 32);
      goto LABEL_8;
    }
    __break(1u);
    goto LABEL_31;
  }
  v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v6);
LABEL_8:
  v10 = v9;
  swift_bridgeObjectRelease(v6);
  v11 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent, (uint64_t)&unk_10056B1F8, (uint64_t)sub_10035F814, (uint64_t)&unk_10056B210);
  if (!v10)
  {
LABEL_14:

    goto LABEL_15;
  }
  v12 = v10;
  v13 = static NSObject.== infix(_:_:)();

  if ((v13 & 1) != 0)
    return 1;
LABEL_15:
  v14 = *(void **)(v3 + v1);
  if (!v14)
  {
LABEL_25:
    v19 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent, (uint64_t)&unk_10056B1A8, (uint64_t)sub_10035F7E8, (uint64_t)&unk_10056B1C0);
    goto LABEL_26;
  }
  v15 = objc_msgSend(v14, "detents");
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v5);

  v16 = *(void **)(v3 + v1);
  if (!v16)
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_25;
  }
  result = (unint64_t)objc_msgSend(v16, "_indexOfCurrentDetent");
  if ((v6 & 0xC000000000000001) != 0)
  {
LABEL_31:
    v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v6);
LABEL_21:
    v18 = v17;
    swift_bridgeObjectRelease(v6);
    v19 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent, (uint64_t)&unk_10056B1A8, (uint64_t)sub_10035F7E8, (uint64_t)&unk_10056B1C0);
    if (v18)
    {
      v20 = v18;
      v21 = static NSObject.== infix(_:_:)();

      if ((v21 & 1) != 0)
        return 2;
      return 3;
    }
LABEL_26:

    return 3;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v17 = *(id *)(v6 + 8 * result + 32);
    goto LABEL_21;
  }
  __break(1u);
  return result;
}

void sub_10035EADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  switch(a1)
  {
    case 0:
      objc_msgSend(*(id *)(v1 + OBJC_IVAR___ICActivityStreamNavigationController_coordinator), "hideActivityStreamWithCompletion:", 0);
      return;
    case 1:
      v2 = &OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent;
      v3 = &unk_10056B1F8;
      v4 = sub_10035F814;
      v5 = &unk_10056B210;
      goto LABEL_5;
    case 2:
      v2 = &OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent;
      v3 = &unk_10056B1A8;
      v4 = sub_10035F7E8;
      v5 = &unk_10056B1C0;
LABEL_5:
      v6 = sub_10035E460(v2, (uint64_t)v3, (uint64_t)v4, (uint64_t)v5);
      goto LABEL_7;
    case 3:
      v6 = objc_msgSend((id)objc_opt_self(UISheetPresentationControllerDetent), "largeDetent");
LABEL_7:
      v7 = v6;
      sub_10035E560((uint64_t)v6);

      break;
    default:
      return;
  }
}

void sub_10035EC0C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char v21;
  Swift::UInt v22;
  double v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  char v30[24];

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v27 - v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(v1, "view");
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(v12, "window");

    if (v14)
    {
      v15 = (uint64_t)&v1[OBJC_IVAR___ICActivityStreamNavigationController_timeOfLastViewModeChange];
      swift_beginAccess(&v1[OBJC_IVAR___ICActivityStreamNavigationController_timeOfLastViewModeChange], v30, 0, 0);
      sub_1001CE8D4(v15, (uint64_t)v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_1002BC9C8((uint64_t)v7);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
        v16 = sub_10035E814();
        v17 = &v1[OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations];
        swift_beginAccess(&v1[OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations], v29, 32, 0);
        v18 = *(_QWORD *)v17;
        v19 = 0.0;
        if (*(_QWORD *)(*(_QWORD *)v17 + 16))
        {
          v20 = sub_1002493C8(v16);
          if ((v21 & 1) != 0)
            v19 = *(double *)(*(_QWORD *)(v18 + 56) + 8 * v20);
        }
        swift_endAccess(v29);
        v22 = sub_10035E814();
        v23 = v19 + fabs(Date.timeIntervalSinceNow.getter());
        swift_beginAccess(v17, v29, 33, 0);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v17);
        v28 = *(_QWORD *)v17;
        *(_QWORD *)v17 = 0x8000000000000000;
        sub_10024F1D4(v22, isUniquelyReferenced_nonNull_native, v23);
        v25 = *(_QWORD *)v17;
        *(_QWORD *)v17 = v28;
        swift_bridgeObjectRelease(v25);
        v26 = swift_endAccess(v29);
        Date.init()(v26);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v5, 0, 1, v8);
        swift_beginAccess(v15, v29, 33, 0);
        sub_1001CE964((uint64_t)v5, v15);
        swift_endAccess(v29);
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10035EEF8(void *a1, uint64_t a2, char *a3)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;

  objc_msgSend(a1, "_setIndexOfCurrentDetent:", a2);
  v4 = objc_msgSend(a3, "view");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "window");

    if (v6)
    {
      objc_msgSend(v6, "layoutIfNeeded");

    }
    v7 = *(void **)&a3[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController];
    if (v7)
    {
      v8 = v7;
      sub_10013BA10();

    }
  }
  else
  {
    __break(1u);
  }
}

void sub_10035EFC4(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a2 + OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController);
  if (v2)
  {
    v3 = v2;
    sub_10013BA10();

  }
}

void sub_10035F018(uint64_t a1, char a2)
{
  void *v4;
  id v5;
  void *v6;
  double v7;
  id v8;
  void *v9;
  double v10;
  char *v11;
  double v12;
  char *v13;

  v4 = *(void **)(a1 + OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController);
  if (v4)
  {
    v5 = objc_msgSend(v4, "view");
    if (!v5)
    {
      __break(1u);
      return;
    }
    v6 = v5;
    v7 = 1.0;
    if ((a2 & 1) != 0)
      v7 = 0.0;
    objc_msgSend(v5, "setAlpha:", v7);

  }
  v8 = sub_100016C14();
  v9 = v8;
  if ((a2 & 1) == 0 || (v10 = 1.0, !*(_QWORD *)(a1 + OBJC_IVAR___ICActivityStreamNavigationController_selection)))
    v10 = 0.0;
  objc_msgSend(v8, "setAlpha:", v10);

  v11 = sub_100016B1C();
  if ((a2 & 1) == 0 || (v12 = 0.0, !*(_QWORD *)(a1 + OBJC_IVAR___ICActivityStreamNavigationController_selection)))
    v12 = 1.0;
  v13 = v11;
  objc_msgSend(v11, "setAlpha:", v12);

}

void sub_10035F100(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController);
  if (v1)
  {
    v2 = v1;
    sub_10013BA10();

  }
}

double sub_10035F154(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  double v4;
  double v5;

  if (*(_QWORD *)(a2 + OBJC_IVAR___ICActivityStreamNavigationController_selection))
    v2 = sub_100016C14();
  else
    v2 = sub_100016B1C();
  v3 = v2;
  objc_msgSend(v2, "frame");
  v5 = v4;

  return v5;
}

double sub_10035F1B4(uint64_t a1, void *a2)
{
  uint64_t v3;
  double (*v4)(void);
  id v5;
  double v6;

  v4 = *(double (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = v4();
  swift_release(v3);

  return v6;
}

void sub_10035F458(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  char v19;
  id v20;
  char v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  id v27;
  id v28;

  v3 = v2;
  v6 = OBJC_IVAR___ICActivityStreamNavigationController_indexOfCurrentDetent;
  v7 = *(_QWORD *)(v2 + OBJC_IVAR___ICActivityStreamNavigationController_indexOfCurrentDetent);
  sub_10035EC0C();
  *(_QWORD *)(v2 + v6) = a2;
  v8 = *(void **)(v2 + OBJC_IVAR___ICActivityStreamNavigationController_object);
  if (!v8)
    return;
  if ((uint64_t)v7 <= a2)
    v9 = 1;
  else
    v9 = 2;
  v28 = v8;
  v10 = objc_msgSend(a1, "detents");
  v11 = sub_1000163BC(0, (unint64_t *)&unk_1005D6450, UISheetPresentationControllerDetent_ptr);
  v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v11);

  if ((v12 & 0xC000000000000001) != 0)
  {
    v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v12);
    goto LABEL_9;
  }
  if ((v7 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v7 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_25:
    __break(1u);
    return;
  }
  v13 = *(id *)(v12 + 8 * v7 + 32);
LABEL_9:
  v14 = v13;
  swift_bridgeObjectRelease(v12);
  sub_1000163BC(0, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
  v15 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent, (uint64_t)&unk_10056B1F8, (uint64_t)sub_10035F814, (uint64_t)&unk_10056B210);
  v16 = static NSObject.== infix(_:_:)(v14);

  if ((v16 & 1) != 0)
  {
    v17 = 1;
  }
  else
  {
    v18 = sub_10035E460(&OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent, (uint64_t)&unk_10056B1A8, (uint64_t)sub_10035F7E8, (uint64_t)&unk_10056B1C0);
    v19 = static NSObject.== infix(_:_:)(v14);

    if ((v19 & 1) != 0)
    {
      v17 = 3;
    }
    else
    {
      v20 = objc_msgSend((id)objc_opt_self(UISheetPresentationControllerDetent), "largeDetent");
      v21 = static NSObject.== infix(_:_:)(v14);

      if ((v21 & 1) != 0)
        v17 = 2;
      else
        v17 = 0;
    }
  }
  v22 = OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController;
  v23 = *(void **)(v3 + OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController);
  if (v23)
  {
    v24 = objc_msgSend(v23, "eventReporter");
    if (v24)
    {
      v25 = v24;
      objc_msgSend(v24, "submitCollabActivityBrowseEventForObject:contextPath:clickContext:mode:isCurrentUserMentioned:hasRecentUpdates:", v28, 0, v9, v17, 0, 0);

    }
    v26 = *(void **)(v3 + v22);
    if (v26)
    {
      v27 = v26;
      sub_10013BA10();

    }
  }

}

ValueMetadata *type metadata accessor for ActivityStreamNavigationController.ViewModes()
{
  return &type metadata for ActivityStreamNavigationController.ViewModes;
}

unint64_t sub_10035F770()
{
  unint64_t result;

  result = qword_1005DA910;
  if (!qword_1005DA910)
  {
    result = swift_getWitnessTable(&unk_10046512C, &type metadata for ActivityStreamNavigationController.ViewModes);
    atomic_store(result, (unint64_t *)&qword_1005DA910);
  }
  return result;
}

unint64_t sub_10035F7B4(unint64_t result)
{
  if (result > 5)
    return 0;
  return result;
}

uint64_t sub_10035F7C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

CGFloat sub_10035F7E8(void *a1)
{
  CGRect v2;

  objc_msgSend(a1, "bounds");
  return CGRectGetHeight(v2) / 2.7;
}

double sub_10035F814(uint64_t a1)
{
  uint64_t v1;

  return sub_10035F154(a1, *(_QWORD *)(v1 + 16));
}

void sub_10035F81C(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  _BYTE v24[24];

  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v3);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a1)
  {
    v6 = objc_opt_self(UISheetPresentationController);
    v7 = swift_dynamicCastObjCClass(a1, v6);
    if (v7)
    {
      v8 = (void *)v7;
      v9 = *(void **)&v1[OBJC_IVAR___ICActivityStreamNavigationController_sheetController];
      *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_sheetController] = v7;
      v10 = a1;

      sub_10035DAC4();
      v11 = objc_msgSend(v8, "_indexOfCurrentDetent");
      sub_10035EC0C();
      *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_indexOfCurrentDetent] = v11;
      Date.init()(v12);
      v13 = type metadata accessor for Date(0);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v5, 0, 1, v13);
      v14 = (uint64_t)&v1[OBJC_IVAR___ICActivityStreamNavigationController_timeOfLastViewModeChange];
      swift_beginAccess(&v1[OBJC_IVAR___ICActivityStreamNavigationController_timeOfLastViewModeChange], v24, 33, 0);
      sub_1001CE964((uint64_t)v5, v14);
      objc_msgSend(v8, "setPrefersScrollingExpandsWhenScrolledToEdge:", 0, swift_endAccess(v24).n128_f64[0]);
      objc_msgSend(v8, "setPrefersGrabberVisible:", v1[OBJC_IVAR___ICActivityStreamNavigationController_hasInteractiveSizing]);
      objc_msgSend(v8, "setWidthFollowsPreferredContentSizeWhenEdgeAttached:", 1);
      objc_msgSend(v8, "setPrefersEdgeAttachedInCompactHeight:", 1);
      v15 = objc_msgSend(v1, "view");
      if (v15)
      {
        v16 = v15;
        v17 = objc_msgSend(v15, "ic_hasCompactHeight");

        if (v17 && *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_selection])
        {
          v18 = *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamNavigationController_coordinator];
          v19 = objc_opt_self(ICViewControllerManager);
          v20 = (void *)swift_dynamicCastObjCClass(v18, v19);
          if (v20)
          {
            v21 = objc_msgSend(v20, "noteEditorViewController", swift_unknownObjectRetain(v18).n128_f64[0]);
            objc_msgSend(v21, "hideActivityStreamToolbarAnimated:", 1);
            swift_unknownObjectRelease(v18, v22);

          }
        }

      }
      else
      {
        __break(1u);
      }
    }
  }
}

void sub_10035FA68()
{
  char *v0;
  id v1;
  void *v2;
  unsigned int v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;

  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "ic_hasCompactHeight");

    if (v3)
    {
      v4 = *(void **)&v0[OBJC_IVAR___ICActivityStreamNavigationController_object];
      if (v4)
      {
        v5 = *(void **)&v0[OBJC_IVAR___ICActivityStreamNavigationController_selection];
        if (v5)
        {
          v6 = *(_QWORD *)&v0[OBJC_IVAR___ICActivityStreamNavigationController_coordinator];
          v7 = objc_opt_self(ICViewControllerManager);
          v8 = swift_dynamicCastObjCClass(v6, v7);
          if (v8)
          {
            v9 = (void *)v8;
            v10 = v4;
            v11 = v5;
            swift_unknownObjectRetain(v6);
            v13 = objc_msgSend(v9, "noteEditorViewController");
            objc_msgSend(v13, "showActivityStreamToolbarForObject:selection:animated:", v10, v11, 1);

            swift_unknownObjectRelease(v6, v12);
          }
        }
      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10035FB8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_10035FBB8()
{
  uint64_t v0;

  sub_10035EEF8(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(char **)(v0 + 32));
}

void sub_10035FBC4(uint64_t a1)
{
  uint64_t v1;

  sub_10035EFC4(a1, *(_QWORD *)(v1 + 16));
}

id sub_10035FBD4(uint64_t a1)
{
  uint64_t v1;

  return sub_10035D958(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10035FBEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_10035FC10()
{
  uint64_t v0;

  sub_10035F018(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_10035FC1C()
{
  uint64_t v0;

  sub_10035F100(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10035FC24()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10035FC48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10035DA24(a1, a2, v2);
}

_QWORD *sub_10035FCA0(uint64_t a1)
{
  int64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100137028(0, v1, 0);
    v3 = (_QWORD *)(a1 + 32);
    do
    {
      v4 = v3[3];
      v5 = v3[4];
      sub_10012D19C(v3, v4);
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
      v8 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_100137028(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v10 = _swiftEmptyArrayStorage[2];
      v9 = _swiftEmptyArrayStorage[3];
      if (v10 >= v9 >> 1)
        sub_100137028(v9 > 1, v10 + 1, 1);
      _swiftEmptyArrayStorage[2] = v10 + 1;
      v11 = &_swiftEmptyArrayStorage[2 * v10];
      v11[4] = v6;
      v11[5] = v8;
      v3 += 5;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10035FDBC(void (*a1)(char *, char *), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t result;
  Swift::Int v29;
  void (*v30)(_BYTE *, _QWORD);
  void (*v31)(char *);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, char *);
  uint64_t v48;
  char *v49;
  Swift::Int v50;
  uint64_t v51;
  _BYTE v52[32];
  uint64_t v53;

  v39 = a5;
  v40 = a8;
  v47 = a1;
  v48 = a2;
  v38 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin(a1);
  v49 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 8));
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v16 = __chkstk_darwin(AssociatedTypeWitness);
  v18 = (char *)&v38 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a6);
  v41 = *(_QWORD *)(v21 - 8);
  v42 = v21;
  __chkstk_darwin(v21);
  v23 = (char *)&v38 - v22;
  v24 = dispatch thunk of Collection.count.getter(a3, a6);
  if (!v24)
    return static Array._allocateUninitialized(_:)(0, a4);
  v45 = AssociatedTypeWitness;
  v25 = v8;
  v26 = a4;
  v27 = v24;
  v53 = ContiguousArray.init()(v26);
  v43 = type metadata accessor for ContiguousArray(0, v26);
  ContiguousArray.reserveCapacity(_:)(v27);
  v46 = v25;
  result = dispatch thunk of Collection.startIndex.getter(a3, a6);
  if ((v27 & 0x8000000000000000) == 0)
  {
    v29 = v27;
    v44 = v20;
    while (v29)
    {
      v50 = v29;
      v30 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read(v52, v23, a3, a6);
      v31 = *(void (**)(char *))(v15 + 16);
      v32 = v15;
      v33 = v45;
      v31(v18);
      v30(v52, 0);
      v34 = v23;
      v35 = v18;
      v36 = v44;
      v37 = v51;
      v47(v35, v49);
      if (v37)
      {
        (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
        swift_release(v53);
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v38 + 32))(v40, v49, v39);
      }
      v51 = 0;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v33);
      ContiguousArray.append(_:)(v36, v43);
      result = dispatch thunk of Collection.formIndex(after:)(v34, a3, a6);
      v29 = v50 - 1;
      v15 = v32;
      v18 = v35;
      v23 = v34;
      if (v50 == 1)
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v34, v42);
        return v53;
      }
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static ICArchiveExporterConfiguration.default.getter@<X0>(uint64_t a1@<X8>)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t IsAlexandriaDemoModeEnabled;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t result;

  if (qword_1005CED18 != -1)
    swift_once(&qword_1005CED18, sub_100345FC4);
  v2 = static ICArchiveCreator.default;
  v4 = qword_100601D88;
  v3 = unk_100601D90;
  v6 = qword_100601D98;
  v5 = qword_100601DA0;
  swift_bridgeObjectRetain(qword_100601DA0);
  swift_bridgeObjectRetain(*((_QWORD *)&v2 + 1));
  swift_bridgeObjectRetain(v3);
  IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v7);
  v9 = IsAlexandriaDemoModeEnabled;
  v10 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
  v11 = v10;
  result = ICInternalSettingsIsAlexandriaDemoModeEnabled(v10);
  *(_OWORD *)a1 = v2;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = v9;
  *(_BYTE *)(a1 + 49) = v11;
  *(_BYTE *)(a1 + 50) = result;
  *(_WORD *)(a1 + 51) = 0;
  return result;
}

uint64_t sub_10036016C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100360210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;

  if (*(_QWORD *)(a1 + 16) == 1)
  {
    v1 = sub_100012E18(&qword_1005D0D98);
    ICObjectReferences.title.getter(v1);
    if (v2)
    {
      v3 = v2;
      v4 = String._bridgeToObjectiveC()();
      v5 = objc_msgSend(v4, "ic_sanitizedFilenameString", swift_bridgeObjectRelease(v3).n128_f64[0]);

      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

      v9 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0)
        v9 = v6 & 0xFFFFFFFFFFFFLL;
      if (v9)
        return v6;
      swift_bridgeObjectRelease(v8);
    }
  }
  v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "localizedStringForKey:value:table:", v12, 0, 0);

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  return v14;
}

uint64_t sub_100360364()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005DA918);
  sub_10012A0B0(v0, (uint64_t)qword_1005DA918);
  return static Logger.archiving.getter();
}

uint64_t sub_1003603AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  sub_10012B334(v4, qword_1005DA930);
  sub_10012A0B0(v4, (uint64_t)qword_1005DA930);
  if (qword_1005CED48 != -1)
    swift_once(&qword_1005CED48, sub_100360364);
  v5 = sub_10012A0B0(v0, (uint64_t)qword_1005DA918);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

uint64_t ICArchiveExporter.objectProvider.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 16));
}

uint64_t ICArchiveExporter.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1003604A8(v1 + 24, a1);
}

uint64_t sub_1003604A8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for ICArchiveExporterConfiguration(a2, a1);
  return a2;
}

uint64_t ICArchiveExporter.fileManager.getter()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + 80));
}

uint64_t ICArchiveExporter.__allocating_init(objectProvider:configuration:fileManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  swift_allocObject(v4, 152, 7);
  v9 = sub_10036F13C(a1, a2, a3, a4);
  swift_unknownObjectRelease(a1, v10);
  swift_unknownObjectRelease(a3, v11);
  return v9;
}

uint64_t ICArchiveExporter.init(objectProvider:configuration:fileManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_10036F13C(a1, a2, a3, a4);
  swift_unknownObjectRelease(a1, v7);
  swift_unknownObjectRelease(a3, v8);
  return v6;
}

double sub_1003605BC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  double result;
  _BYTE v6[24];
  _QWORD aBlock[3];
  void *ObjectType;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v2 = swift_allocObject(&unk_10056B670, 24, 7);
  swift_weakInit(v2 + 16, v0);
  v9 = sub_10036FA40;
  v10 = v2;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10036016C;
  ObjectType = &unk_10056B688;
  v3 = _Block_copy(aBlock);
  v4 = objc_msgSend(v1, "addObserverForName:object:queue:usingBlock:", UIApplicationDidReceiveMemoryWarningNotification, 0, 0, v3, swift_release(v10).n128_f64[0]);
  _Block_release(v3);

  ObjectType = (void *)swift_getObjectType(v4);
  aBlock[0] = v4;
  swift_beginAccess(v0 + 120, v6, 33, 0);
  sub_100164108((uint64_t)aBlock, v0 + 120, &qword_1005CF190);
  *(_QWORD *)&result = swift_endAccess(v6).n128_u64[0];
  return result;
}

double sub_100360700()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  double result;
  _BYTE v10[24];
  _QWORD aBlock[3];
  void *ObjectType;
  uint64_t (*v13)(uint64_t);
  _QWORD *v14;

  v1 = v0;
  v2 = (uint64_t)(v0 + 15);
  v3 = *v0;
  v4 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v5 = swift_allocObject(&unk_10056B6C0, 24, 7);
  swift_weakInit(v5 + 16, v1);
  v6 = (_QWORD *)swift_allocObject(&unk_10056B6E8, 40, 7);
  v6[2] = *(_QWORD *)(v3 + 80);
  v6[3] = *(_QWORD *)(v3 + 88);
  v6[4] = v5;
  v13 = sub_10036FA90;
  v14 = v6;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10036016C;
  ObjectType = &unk_10056B700;
  v7 = _Block_copy(aBlock);
  v8 = objc_msgSend(v4, "addObserverForName:object:queue:usingBlock:", UIApplicationDidReceiveMemoryWarningNotification, 0, 0, v7, swift_release(v14).n128_f64[0]);
  _Block_release(v7);

  ObjectType = (void *)swift_getObjectType(v8);
  aBlock[0] = v8;
  swift_beginAccess(v2, v10, 33, 0);
  sub_100164108((uint64_t)aBlock, v2, &qword_1005CF190);
  *(_QWORD *)&result = swift_endAccess(v10).n128_u64[0];
  return result;
}

_QWORD *ICArchiveExporter.deinit()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1003608C0();
  swift_unknownObjectRelease(v0[2], v1);
  sub_1001F3EFC(v0[3], v0[4], v0[5], v0[6], v0[7], v0[8]);
  swift_unknownObjectRelease(v0[10], v2);
  sub_100012DDC((uint64_t)(v0 + 15), &qword_1005CF190);
  return v0;
}

void sub_1003608C0()
{
  uint64_t v0;
  id v1;
  _BYTE v2[32];
  _BYTE v3[24];

  swift_beginAccess(v0 + 120, v3, 0, 0);
  sub_100012CE8(v0 + 120, (uint64_t)v2, &qword_1005CF190);
  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  sub_10021E28C((uint64_t)v2, v1);

  sub_100012DDC((uint64_t)v2, &qword_1005CF190);
}

uint64_t ICArchiveExporter.__deallocating_deinit()
{
  uint64_t v0;

  ICArchiveExporter.deinit();
  return swift_deallocClassInstance(v0, 152, 7);
}

void ICArchiveExporter.createArchive(for:at:progress:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t ObjectType;
  uint64_t v15;

  v5 = v3;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ICArchiveExporter.createArchive(for:progress:)(a1, a3, (uint64_t)v12);
  if (!v4)
  {
    v13 = *(_QWORD *)(v5 + 88);
    ObjectType = swift_getObjectType(*(_QWORD *)(v5 + 80));
    dispatch thunk of ICFileManaging.removeItem(at:)(a2, ObjectType, v13);
    dispatch thunk of ICFileManaging.copyItem(at:to:)(v12, a2, ObjectType, v13);
    ICArchiveExporter.removeArchive(at:)((uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

void sub_100360AB8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  _BYTE v21[16];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;

  v20[0] = a3;
  v6 = sub_100012E18(&qword_1005CEFD0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocBox(v7, v10);
  v13 = v12;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  v27 = 0;
  v22 = v13;
  v23 = v3;
  v24 = a1;
  v25 = a2;
  v26 = &v27;
  v16 = type metadata accessor for ICModernObjectProvider(0);
  v17 = sub_100019C6C(&qword_1005DAA00, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
  v18 = v20[1];
  dispatch thunk of ICObjectProviding.performAndWait(task:)(sub_10036F658, v21, v16, v17);
  if (v18)
    goto LABEL_4;
  v19 = v20[0];
  sub_100012CE8(v13, (uint64_t)v9, &qword_1005CEFD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v19, v9, v14);
LABEL_4:
    sub_1003612B8(v11, (uint64_t)&v27, v3);
    swift_release(v11);
    return;
  }
  __break(1u);
}

void ICArchiveExporter.createArchive(for:progress:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;

  v20 = a2;
  v19 = a3;
  v5 = *v3;
  v6 = sub_100012E18(&qword_1005CEFD0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocBox(v7, v10);
  v13 = v12;
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  v28 = 0;
  v23 = v13;
  v24 = v3;
  v16 = v21;
  v25 = a1;
  v26 = v20;
  v27 = &v28;
  dispatch thunk of ICObjectProviding.performAndWait(task:)(sub_10036F1AC, v22, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88));
  if (v16)
    goto LABEL_4;
  v17 = v19;
  sub_100012CE8(v13, (uint64_t)v9, &qword_1005CEFD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v17, v9, v14);
LABEL_4:
    sub_10036188C(v11, (uint64_t)&v28, (uint64_t)v3);
    swift_release(v11);
    return;
  }
  __break(1u);
}

uint64_t sub_100360DA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  void (*v23)(char *, uint64_t, __n128);
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  if (qword_1005CED48 != -1)
    swift_once(&qword_1005CED48, sub_100360364);
  v11 = type metadata accessor for Logger(0);
  sub_10012A0B0(v11, (uint64_t)qword_1005DA918);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v32 = a1;
  v13 = v12(v10, a1, v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v31 = v1;
    v17 = (uint8_t *)v16;
    v30 = swift_slowAlloc(32, -1);
    v35 = v30;
    *(_DWORD *)v17 = 136315138;
    v29 = v17 + 4;
    v18 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
    v21 = v20;
    v33 = sub_1003A4190(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v29);
    v22 = swift_bridgeObjectRelease(v21);
    v23 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
    v23(v10, v4, v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Removing archive… {url: %s}", v17, 0xCu);
    v24 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v25 = v17;
    v2 = v31;
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
    ((void (*)(char *, uint64_t))v23)(v10, v4);
  }

  v26 = *(_QWORD *)(v2 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 80));
  URL.deletingLastPathComponent()();
  dispatch thunk of ICFileManaging.removeItem(at:)(v8, ObjectType, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v8, v4);
}

uint64_t ICArchiveExporter.removeArchive(at:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  void (*v23)(char *, uint64_t, __n128);
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t ObjectType;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v29 - v9;
  if (qword_1005CED48 != -1)
    swift_once(&qword_1005CED48, sub_100360364);
  v11 = type metadata accessor for Logger(0);
  sub_10012A0B0(v11, (uint64_t)qword_1005DA918);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v32 = a1;
  v13 = v12(v10, a1, v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(12, -1);
    v31 = v1;
    v17 = (uint8_t *)v16;
    v30 = swift_slowAlloc(32, -1);
    v35 = v30;
    *(_DWORD *)v17 = 136315138;
    v29 = v17 + 4;
    v18 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v4, v18);
    v21 = v20;
    v33 = sub_1003A4190(v19, v20, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v29);
    v22 = swift_bridgeObjectRelease(v21);
    v23 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
    v23(v10, v4, v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Removing archive… {url: %s}", v17, 0xCu);
    v24 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    v25 = v17;
    v2 = v31;
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, __n128))(v5 + 8);
    ((void (*)(char *, uint64_t))v23)(v10, v4);
  }

  v26 = *(_QWORD *)(v2 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 80));
  URL.deletingLastPathComponent()();
  dispatch thunk of ICFileManaging.removeItem(at:)(v8, ObjectType, v26);
  return ((uint64_t (*)(char *, uint64_t))v23)(v8, v4);
}

void sub_1003612B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  void (*v47)(char *, uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56[3];
  uint64_t v57;
  _BYTE v58[24];

  v49 = a3;
  v50 = a2;
  v54 = (uint8_t *)type metadata accessor for Logger(0);
  v52 = *((_QWORD *)v54 - 1);
  __chkstk_darwin(v54);
  v51 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005CEFD0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v48 - v9;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v48 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v48 - v19;
  v53 = a1;
  v21 = swift_projectBox(a1);
  swift_beginAccess(v21, v58, 0, 0);
  sub_100012CE8(v21, (uint64_t)v10, &qword_1005CEFD0);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v22(v10, 1, v11) == 1)
  {
    sub_100012DDC((uint64_t)v10, &qword_1005CEFD0);
LABEL_5:
    v50 = v12;
    v23 = v53;
    v24 = (uint64_t)v54;
    v25 = v51;
    v26 = v52;
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v27 = sub_10012A0B0(v24, (uint64_t)qword_1005DA918);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v27, v24);
    v28 = swift_retain_n(v23, 2);
    v29 = Logger.logObject.getter(v28);
    LODWORD(v49) = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v49))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v57 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_beginAccess(v21, v56, 0, 0);
      sub_100012CE8(v21, (uint64_t)v8, &qword_1005CEFD0);
      if (v22(v8, 1, v11) == 1)
      {
        swift_release(v53);
        __break(1u);
      }
      else
      {
        v32 = v50;
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v18, v8, v11);
        v33 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v34 = dispatch thunk of CustomStringConvertible.description.getter(v11, v33);
        v36 = v35;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v11);
        v55 = sub_1003A4190(v34, v36, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v30 + 4);
        swift_release_n(v53, 2);
        swift_bridgeObjectRelease(v36);
        _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v49, "Created archive {url: %s}", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        (*(void (**)(char *, uint8_t *))(v52 + 8))(v51, v54);
      }
    }
    else
    {

      swift_release_n(v23, 2);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v24);
    }
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v10, v11);
  if ((*(_BYTE *)v50 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    goto LABEL_5;
  }
  sub_100360DA0((uint64_t)v20);
  if (qword_1005CED48 != -1)
    swift_once(&qword_1005CED48, sub_100360364);
  sub_10012A0B0((uint64_t)v54, (uint64_t)qword_1005DA918);
  v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v15, v20, v11);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v56[0] = v41;
    *(_DWORD *)v40 = 136315138;
    v54 = v40 + 4;
    v42 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v11, v42);
    v45 = v44;
    v57 = sub_1003A4190(v43, v44, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v54);
    v46 = swift_bridgeObjectRelease(v45);
    v47 = *(void (**)(char *, uint64_t, __n128))(v12 + 8);
    v47(v15, v11, v46);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to create archive — removing temporary files {url: %s}", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    v47 = *(void (**)(char *, uint64_t, __n128))(v12 + 8);
    ((void (*)(char *, uint64_t))v47)(v15, v11);
  }
  ((void (*)(char *, uint64_t))v47)(v20, v11);
}

void sub_10036188C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  void (*v47)(char *, uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56[3];
  uint64_t v57;
  _BYTE v58[24];

  v49 = a3;
  v50 = a2;
  v54 = (uint8_t *)type metadata accessor for Logger(0);
  v52 = *((_QWORD *)v54 - 1);
  __chkstk_darwin(v54);
  v51 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005CEFD0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v48 - v9;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v48 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v48 - v19;
  v53 = a1;
  v21 = swift_projectBox(a1);
  swift_beginAccess(v21, v58, 0, 0);
  sub_100012CE8(v21, (uint64_t)v10, &qword_1005CEFD0);
  v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v22(v10, 1, v11) == 1)
  {
    sub_100012DDC((uint64_t)v10, &qword_1005CEFD0);
LABEL_5:
    v50 = v12;
    v23 = v53;
    v24 = (uint64_t)v54;
    v25 = v51;
    v26 = v52;
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v27 = sub_10012A0B0(v24, (uint64_t)qword_1005DA918);
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v25, v27, v24);
    v28 = swift_retain_n(v23, 2);
    v29 = Logger.logObject.getter(v28);
    LODWORD(v49) = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, (os_log_type_t)v49))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v57 = v31;
      *(_DWORD *)v30 = 136315138;
      swift_beginAccess(v21, v56, 0, 0);
      sub_100012CE8(v21, (uint64_t)v8, &qword_1005CEFD0);
      if (v22(v8, 1, v11) == 1)
      {
        swift_release(v53);
        __break(1u);
      }
      else
      {
        v32 = v50;
        (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v15, v8, v11);
        v33 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v34 = dispatch thunk of CustomStringConvertible.description.getter(v11, v33);
        v36 = v35;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v11);
        v55 = sub_1003A4190(v34, v36, &v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v30 + 4);
        swift_release_n(v53, 2);
        swift_bridgeObjectRelease(v36);
        _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v49, "Created archive {url: %s}", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        (*(void (**)(char *, uint8_t *))(v52 + 8))(v51, v54);
      }
    }
    else
    {

      swift_release_n(v23, 2);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v24);
    }
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v20, v10, v11);
  if ((*(_BYTE *)v50 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    goto LABEL_5;
  }
  ICArchiveExporter.removeArchive(at:)((uint64_t)v20);
  if (qword_1005CED48 != -1)
    swift_once(&qword_1005CED48, sub_100360364);
  sub_10012A0B0((uint64_t)v54, (uint64_t)qword_1005DA918);
  v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v18, v20, v11);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v56[0] = v41;
    *(_DWORD *)v40 = 136315138;
    v54 = v40 + 4;
    v42 = sub_100019C6C(&qword_1005D4DB0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v11, v42);
    v45 = v44;
    v57 = sub_1003A4190(v43, v44, v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v54);
    v46 = swift_bridgeObjectRelease(v45);
    v47 = *(void (**)(char *, uint64_t, __n128))(v12 + 8);
    v47(v18, v11, v46);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to create archive — removing temporary files {url: %s}", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

    v47 = *(void (**)(char *, uint64_t, __n128))(v12 + 8);
    ((void (*)(char *, uint64_t))v47)(v18, v11);
  }
  ((void (*)(char *, uint64_t))v47)(v20, v11);
}

uint64_t sub_100361E60(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, _BYTE *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t ObjectType;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void (**v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  NSURL *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_signpost_type_t v66;
  uint64_t v67;
  uint64_t v68;
  void (**v69)(char *, uint64_t, uint64_t);
  char *v70;
  uint8_t *v71;
  os_signpost_id_t v72;
  char *v73;
  void (**v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void (*v80)(char *, unint64_t, uint64_t, __n128);
  __n128 v81;
  uint64_t v82;
  BOOL v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint8_t *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  NSObject *v96;
  char *v97;
  uint64_t v98;
  os_signpost_type_t v99;
  uint64_t v100;
  char *v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  os_signpost_type_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  __n128 v114;
  uint64_t v115;
  int v116;
  const char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint8_t *v121;
  os_signpost_id_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  __n128 v129;
  uint64_t v130;
  int v131;
  const char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint8_t *v136;
  os_signpost_id_t v137;
  __n128 v138;
  uint64_t v139;
  char *v140;
  void (*v141)(char *, uint64_t);
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  _BYTE *v156;
  char *v157;
  void (**v158)(char *, uint64_t, uint64_t);
  uint64_t v159;
  void *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;

  v165 = a1;
  v156 = a5;
  v160 = a4;
  v153 = type metadata accessor for OSSignpostError(0);
  v155 = *(_QWORD *)(v153 - 8);
  v7 = __chkstk_darwin(v153);
  v149 = (char *)&v139 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v148 = (char *)&v139 - v10;
  __chkstk_darwin(v9);
  v151 = (char *)&v139 - v11;
  v162 = sub_100012E18(&qword_1005D0D98);
  v167 = *(_QWORD *)(v162 - 8);
  __chkstk_darwin(v162);
  v154 = (char *)&v139 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OSSignposter(0);
  v158 = *(void (***)(char *, uint64_t, uint64_t))(v13 - 8);
  v159 = v13;
  __chkstk_darwin(v13);
  v157 = (char *)&v139 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v163 = type metadata accessor for OSSignpostID(0);
  v161 = *(_QWORD *)(v163 - 8);
  v15 = __chkstk_darwin(v163);
  v152 = (char *)&v139 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v150 = (char *)&v139 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v139 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v139 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v139 - v25;
  v27 = sub_100012E18(&qword_1005CEFD0);
  v28 = __chkstk_darwin(v27);
  v30 = (char *)&v139 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v28);
  v33 = (char *)&v139 - v32;
  v34 = __chkstk_darwin(v31);
  v36 = (char *)&v139 - v35;
  __chkstk_darwin(v34);
  v38 = (char *)&v139 - v37;
  v164 = a2;
  v39 = v166;
  result = sub_100363550(a3, (uint64_t)&v139 - v37);
  if (!v39)
  {
    v144 = v33;
    v143 = v30;
    v146 = a3;
    v142 = v21;
    v145 = v24;
    v166 = 0;
    v147 = v26;
    v41 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v41 - 8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v38, 0, 1, v41);
    v43 = v165;
    sub_100164108((uint64_t)v38, v165, &qword_1005CEFD0);
    v44 = *(_QWORD *)(v164 + 80);
    v45 = *(_QWORD *)(v164 + 88);
    sub_100012CE8(v43, (uint64_t)v36, &qword_1005CEFD0);
    v46 = *(char **)(v42 + 48);
    v47 = v41;
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))v46)(v36, 1, v41);
    if ((_DWORD)result == 1)
    {
      __break(1u);
LABEL_45:
      __break(1u);
    }
    else
    {
      ObjectType = swift_getObjectType(v44);
      v49 = v166;
      dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v36, 1, ObjectType, v45);
      v50 = v49;
      v51 = v162;
      if (v49)
        return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v36, v41);
      v141 = *(void (**)(char *, uint64_t))(v42 + 8);
      v141(v36, v41);
      if (qword_1005CED50 != -1)
        goto LABEL_43;
      while (1)
      {
        v166 = v50;
        v52 = v159;
        v53 = sub_10012A0B0(v159, (uint64_t)qword_1005DA930);
        v54 = v157;
        v55 = v158;
        v158[2](v157, v53, v52);
        v56 = v43;
        v57 = (uint64_t)v144;
        sub_100012CE8(v56, (uint64_t)v144, &qword_1005CEFD0);
        v140 = v46;
        result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v46)(v57, 1, v47);
        if ((_DWORD)result == 1)
          goto LABEL_45;
        v59 = v47;
        URL._bridgeToObjectiveC()(v58);
        v61 = v60;
        v62 = OSSignposter.logHandle.getter(v60);
        OSSignpostID.init(log:object:)(v62, v61);
        ((void (*)(char *, uint64_t))v55[1])(v54, v52);
        v63 = v57;
        v43 = v59;
        v64 = ((uint64_t (*)(uint64_t, uint64_t))v141)(v63, v59);
        v159 = v53;
        v65 = OSSignposter.logHandle.getter(v64);
        v66 = static os_signpost_type_t.begin.getter();
        if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
        {
          v67 = v161;
          v68 = v163;
          v69 = *(void (***)(char *, uint64_t, uint64_t))(v161 + 16);
          v70 = v145;
          ((void (*)(char *, char *, uint64_t))v69)(v145, v147, v163);
          v71 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v71 = 0;
          v72 = OSSignpostID.rawValue.getter(v71);
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v65, v66, v72, "Create Archive", "", v71, 2u);
          swift_slowDealloc(v71, -1, -1);

          v73 = v70;
          (*(void (**)(char *, uint64_t))(v67 + 8))(v70, v68);
          v74 = v69;
        }
        else
        {

          v74 = *(void (***)(char *, uint64_t, uint64_t))(v161 + 16);
          v73 = v145;
        }
        v158 = v74;
        ((void (*)(char *, char *, uint64_t))v74)(v73, v147, v163);
        v75 = type metadata accessor for OSSignpostIntervalState(0);
        swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
        v76 = OSSignpostIntervalState.init(id:isOpen:)(v73, 1);
        v77 = v146;
        v47 = *(_QWORD *)(v146 + 16);
        if (!v47)
          break;
        v78 = v146 + ((*(unsigned __int8 *)(v167 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80));
        v79 = *(_QWORD *)(v167 + 72);
        v80 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v167 + 16);
        v81 = swift_bridgeObjectRetain(v146);
        v46 = 0;
        v50 = v154;
        while (1)
        {
          v80(v50, v78, v51, v81);
          v82 = ICObjectReferences.recursiveNoteCount.getter(v51);
          v83 = __OFADD__(v46, v82);
          v46 += v82;
          if (v83)
            break;
          (*(void (**)(char *, uint64_t))(v167 + 8))(v50, v51);
          v78 += v79;
          if (!--v47)
          {
            v77 = v146;
            swift_bridgeObjectRelease(v146);
            goto LABEL_16;
          }
        }
        __break(1u);
LABEL_43:
        swift_once(&qword_1005CED50, sub_1003603AC);
      }
      v46 = 0;
LABEL_16:
      v84 = v160;
      if (qword_1005CED48 != -1)
        swift_once(&qword_1005CED48, sub_100360364);
      v85 = type metadata accessor for Logger(0);
      v86 = sub_10012A0B0(v85, (uint64_t)qword_1005DA918);
      v87 = Logger.logObject.getter(v86);
      v88 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v87, v88))
      {
        v89 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v89 = 134217984;
        v77 = v146;
        v168 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, &v169, v89 + 4);
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Exporting notes… {noteCount: %ld}", v89, 0xCu);
        v90 = v89;
        v84 = v160;
        swift_slowDealloc(v90, -1, -1);
      }

      objc_msgSend(v84, "setTotalUnitCount:", v46);
      v91 = (uint64_t)v143;
      sub_100012CE8(v165, (uint64_t)v143, &qword_1005CEFD0);
      result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v140)(v91, 1, v43);
      v92 = v166;
      if ((_DWORD)result != 1)
      {
        sub_100363B50(v91, v77, v84);
        v93 = v161;
        v94 = v156;
        if (v92)
        {
          v95 = ((uint64_t (*)(uint64_t, uint64_t))v141)(v91, v43);
          v96 = OSSignposter.logHandle.getter(v95);
          v97 = v142;
          v98 = OSSignpostIntervalState.signpostID.getter();
          v99 = static os_signpost_type_t.end.getter(v98);
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            v100 = swift_retain(v76);
            v101 = v151;
            checkForErrorAndConsumeState(state:)(v100);
            v102 = swift_release(v76);
            v103 = v155;
            v104 = v153;
            v105 = (*(uint64_t (**)(char *, uint64_t, __n128))(v155 + 88))(v101, v153, v102);
            v157 = (char *)v76;
            if (v105 == enum case for OSSignpostError.doubleEnd(_:))
            {
              v117 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v103 + 8))(v101, v104);
              v117 = "";
            }
            v118 = v142;
            v119 = v145;
            v120 = v163;
            ((void (*)(char *, char *, uint64_t))v158)(v145, v142, v163);
            v121 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v121 = 0;
            v122 = OSSignpostID.rawValue.getter(v121);
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v96, v99, v122, "Create Archive", v117, v121, 2u);
            swift_slowDealloc(v121, -1, -1);

            v123 = *(void (**)(char *, uint64_t))(v93 + 8);
            v123(v118, v120);
            v123(v119, v120);
            v76 = (uint64_t)v157;
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        v141((char *)v91, v43);
        NSProgress.throwIfCancelled()();
        if (v107)
        {
          v96 = OSSignposter.logHandle.getter(v106);
          v97 = v152;
          v108 = OSSignpostIntervalState.signpostID.getter();
          v109 = static os_signpost_type_t.end.getter(v108);
          v110 = OS_os_log.signpostsEnabled.getter();
          v111 = v155;
          if ((v110 & 1) != 0)
          {
            v112 = swift_retain(v76);
            v113 = v149;
            checkForErrorAndConsumeState(state:)(v112);
            v114 = swift_release(v76);
            v115 = v153;
            v116 = (*(uint64_t (**)(char *, uint64_t, __n128))(v111 + 88))(v113, v153, v114);
            v166 = v107;
            if (v116 == enum case for OSSignpostError.doubleEnd(_:))
            {
              v132 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v111 + 8))(v113, v115);
              v132 = "";
            }
            v133 = v152;
LABEL_39:
            v134 = v145;
            v135 = v163;
            ((void (*)(char *, char *, uint64_t))v158)(v145, v133, v163);
            v136 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v136 = 0;
            v137 = OSSignpostID.rawValue.getter(v136);
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v96, v109, v137, "Create Archive", v132, v136, 2u);
            swift_slowDealloc(v136, -1, -1);

            v123 = *(void (**)(char *, uint64_t))(v93 + 8);
            v123(v133, v135);
            v123(v134, v135);
            goto LABEL_40;
          }
        }
        else
        {
          *v94 = 1;
          v96 = OSSignposter.logHandle.getter(v106);
          v97 = v150;
          v124 = OSSignpostIntervalState.signpostID.getter();
          v109 = static os_signpost_type_t.end.getter(v124);
          v125 = OS_os_log.signpostsEnabled.getter();
          v126 = v155;
          if ((v125 & 1) != 0)
          {
            v127 = swift_retain(v76);
            v128 = v148;
            checkForErrorAndConsumeState(state:)(v127);
            v129 = swift_release(v76);
            v130 = v153;
            v131 = (*(uint64_t (**)(char *, uint64_t, __n128))(v126 + 88))(v128, v153, v129);
            v166 = 0;
            if (v131 == enum case for OSSignpostError.doubleEnd(_:))
            {
              v132 = "[Error] Interval already ended";
            }
            else
            {
              (*(void (**)(char *, uint64_t))(v126 + 8))(v128, v130);
              v132 = "";
            }
            v133 = v150;
            goto LABEL_39;
          }
        }
LABEL_36:

        v123 = *(void (**)(char *, uint64_t))(v93 + 8);
        v123(v97, v163);
LABEL_40:
        v138 = swift_release(v76);
        return ((uint64_t (*)(char *, uint64_t, __n128))v123)(v147, v163, v138);
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003629B0(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  uint64_t ObjectType;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  NSURL *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  NSObject *v60;
  os_signpost_type_t v61;
  char v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  char *v65;
  uint8_t *v66;
  os_signpost_id_t v67;
  uint64_t v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t AssociatedTypeWitness;
  uint64_t v77;
  uint64_t v78;
  uint64_t WitnessTable;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  char *v88;
  _QWORD *v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  uint64_t v97;
  os_signpost_type_t v98;
  uint64_t v99;
  char *v100;
  __n128 v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  NSObject *v106;
  char *v107;
  uint64_t v108;
  os_signpost_type_t v109;
  uint64_t v110;
  char *v111;
  __n128 v112;
  uint64_t v113;
  const char *v114;
  void (*v115)(char *, uint64_t);
  char *v116;
  char *v117;
  uint8_t *v118;
  os_signpost_id_t v119;
  __n128 v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  __n128 v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  char *v127;
  char *v128;
  uint8_t *v129;
  os_signpost_id_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t (*v133)(uint64_t, uint64_t, uint64_t);
  char *v134;
  void (*v135)(char *, uint64_t);
  char *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  _BYTE *v148;
  char *v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD v159[3];
  uint64_t v160;
  uint64_t v161;

  v157 = a1;
  v147 = a4;
  v148 = a5;
  v146 = *a2;
  v145 = type metadata accessor for OSSignpostError(0);
  v150 = *(_QWORD *)(v145 - 8);
  v7 = __chkstk_darwin(v145);
  v142 = (char *)&v132 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v143 = (char *)&v132 - v10;
  __chkstk_darwin(v9);
  v141 = (char *)&v132 - v11;
  v154 = type metadata accessor for OSSignposter(0);
  v152 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v151 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for OSSignpostID(0);
  v153 = *(_QWORD *)(v155 - 8);
  v13 = __chkstk_darwin(v155);
  v144 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v149 = (char *)&v132 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v132 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v132 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v132 - v23;
  v25 = sub_100012E18(&qword_1005CEFD0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v132 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v132 - v30;
  v32 = __chkstk_darwin(v29);
  v34 = (char *)&v132 - v33;
  __chkstk_darwin(v32);
  v36 = (char *)&v132 - v35;
  v156 = a2;
  v37 = v158;
  result = sub_1003637BC(a3, (uint64_t)&v132 - v35);
  if (v37)
    return result;
  v137 = v31;
  v136 = v28;
  v139 = a3;
  v134 = v19;
  v158 = 0;
  v138 = v22;
  v140 = v24;
  v39 = type metadata accessor for URL(0);
  v40 = *(_QWORD *)(v39 - 8);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v36, 0, 1, v39);
  v41 = v157;
  sub_100164108((uint64_t)v36, v157, &qword_1005CEFD0);
  v42 = v156[10];
  v43 = v156[11];
  sub_100012CE8(v41, (uint64_t)v34, &qword_1005CEFD0);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v40 + 48);
  result = v44(v34, 1, v39);
  if ((_DWORD)result == 1)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
    return result;
  }
  ObjectType = swift_getObjectType(v42);
  v46 = v158;
  dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v34, 1, ObjectType, v43);
  v47 = v154;
  if (v46)
    return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v34, v39);
  v48 = v41;
  v135 = *(void (**)(char *, uint64_t))(v40 + 8);
  v135(v34, v39);
  if (qword_1005CED50 != -1)
    swift_once(&qword_1005CED50, sub_1003603AC);
  v158 = 0;
  v49 = sub_10012A0B0(v47, (uint64_t)qword_1005DA930);
  v51 = v151;
  v50 = v152;
  (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v49, v47);
  v52 = v137;
  sub_100012CE8(v48, (uint64_t)v137, &qword_1005CEFD0);
  result = v44(v52, 1, v39);
  if ((_DWORD)result == 1)
    goto LABEL_40;
  URL._bridgeToObjectiveC()(v53);
  v55 = v54;
  v56 = v51;
  v57 = OSSignposter.logHandle.getter(v54);
  v58 = v140;
  OSSignpostID.init(log:object:)(v57, v55);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v56, v47);
  v154 = v39;
  v59 = ((uint64_t (*)(char *, uint64_t))v135)(v52, v39);
  v151 = (char *)v49;
  v60 = OSSignposter.logHandle.getter(v59);
  v61 = static os_signpost_type_t.begin.getter();
  v62 = OS_os_log.signpostsEnabled.getter();
  v133 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v44;
  if ((v62 & 1) != 0)
  {
    v63 = v153;
    v64 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
    v65 = v138;
    v64(v138, v58, v155);
    v66 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v66 = 0;
    v67 = OSSignpostID.rawValue.getter(v66);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v60, v61, v67, "Create Archive", "", v66, 2u);
    v68 = v155;
    swift_slowDealloc(v66, -1, -1);

    v69 = v65;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v65, v68);
    v70 = v64;
    v71 = v58;
    v72 = v139;
  }
  else
  {

    v70 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
    v71 = v58;
    v69 = v138;
    v72 = v139;
    v68 = v155;
  }
  v137 = (char *)v70;
  v70(v69, v71, v68);
  v73 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
  v152 = OSSignpostIntervalState.init(id:isOpen:)(v69, 1);
  v159[0] = 0;
  v159[1] = v72;
  __chkstk_darwin(v152);
  v74 = *(_QWORD *)(v146 + 80);
  v75 = *(_QWORD *)(v146 + 88);
  *(&v132 - 2) = v74;
  *(&v132 - 1) = v75;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v75);
  swift_getAssociatedConformanceWitness(v75, v74, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v77 = type metadata accessor for ICObjectReferences(255);
  v78 = type metadata accessor for Array(0, v77);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v78);
  v80 = v158;
  Sequence.reduce<A>(_:_:)(&v160, v159, sub_10036FBC8, &v132 - 4, v78, &type metadata for Int, WitnessTable);
  v81 = v160;
  v82 = (uint64_t)v136;
  if (qword_1005CED48 != -1)
    swift_once(&qword_1005CED48, sub_100360364);
  v83 = type metadata accessor for Logger(0);
  v84 = sub_10012A0B0(v83, (uint64_t)qword_1005DA918);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.debug.getter();
  v87 = os_log_type_enabled(v85, v86);
  v88 = v149;
  v89 = v147;
  if (v87)
  {
    v90 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v90 = 134217984;
    v160 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, &v161, v90 + 4);
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Exporting notes… {noteCount: %ld}", v90, 0xCu);
    swift_slowDealloc(v90, -1, -1);
  }

  objc_msgSend(v89, "setTotalUnitCount:", v81);
  sub_100012CE8(v157, v82, &qword_1005CEFD0);
  result = v133(v82, 1, v154);
  v91 = v155;
  v92 = v150;
  v93 = v148;
  if ((_DWORD)result == 1)
    goto LABEL_41;
  sub_100364B44(v82, v139, v89);
  v94 = v152;
  if (!v80)
  {
    v135((char *)v82, v154);
    NSProgress.throwIfCancelled()();
    v158 = v105;
    if (v105)
    {
      v106 = OSSignposter.logHandle.getter(v104);
      v107 = v144;
      v108 = OSSignpostIntervalState.signpostID.getter();
      v109 = static os_signpost_type_t.end.getter(v108);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v110 = swift_retain(v94);
        v111 = v142;
        checkForErrorAndConsumeState(state:)(v110);
        v112 = swift_release(v94);
        v113 = v145;
        if ((*(unsigned int (**)(char *, uint64_t, __n128))(v92 + 88))(v111, v145, v112) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v114 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v92 + 8))(v111, v113);
          v114 = "";
        }
        v127 = v144;
LABEL_36:
        v128 = v138;
        ((void (*)(char *, char *, uint64_t))v137)(v138, v127, v91);
        v129 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v129 = 0;
        v130 = OSSignpostID.rawValue.getter(v129);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v106, v109, v130, "Create Archive", v114, v129, 2u);
        v91 = v155;
        swift_slowDealloc(v129, -1, -1);

        v126 = *(void (**)(char *, uint64_t))(v153 + 8);
        v126(v127, v91);
        v126(v128, v91);
        goto LABEL_37;
      }
    }
    else
    {
      *v93 = 1;
      v106 = OSSignposter.logHandle.getter(v104);
      v107 = v134;
      v121 = OSSignpostIntervalState.signpostID.getter();
      v109 = static os_signpost_type_t.end.getter(v121);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v122 = swift_retain(v94);
        v123 = v141;
        checkForErrorAndConsumeState(state:)(v122);
        v124 = swift_release(v94);
        v125 = v145;
        if ((*(unsigned int (**)(char *, uint64_t, __n128))(v92 + 88))(v123, v145, v124) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v114 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v92 + 8))(v123, v125);
          v114 = "";
        }
        v127 = v134;
        goto LABEL_36;
      }
    }

    v126 = *(void (**)(char *, uint64_t))(v153 + 8);
    v126(v107, v91);
LABEL_37:
    v131 = swift_release(v94);
    return ((uint64_t (*)(char *, uint64_t, __n128))v126)(v140, v91, v131);
  }
  v95 = ((uint64_t (*)(uint64_t, uint64_t))v135)(v82, v154);
  v96 = OSSignposter.logHandle.getter(v95);
  v97 = OSSignpostIntervalState.signpostID.getter();
  v98 = static os_signpost_type_t.end.getter(v97);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    swift_retain(v94);
    v99 = v94;
    v100 = v143;
    checkForErrorAndConsumeState(state:)(v99);
    v101 = swift_release(v99);
    v102 = v145;
    if ((*(unsigned int (**)(char *, uint64_t, __n128))(v92 + 88))(v100, v145, v101) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v103 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v92 + 8))(v100, v102);
      v103 = "";
    }
    v116 = v138;
    ((void (*)(char *, char *, uint64_t))v137)(v138, v88, v91);
    v117 = v88;
    v118 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v118 = 0;
    v119 = OSSignpostID.rawValue.getter(v118);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v96, v98, v119, "Create Archive", v103, v118, 2u);
    v91 = v155;
    swift_slowDealloc(v118, -1, -1);

    v115 = *(void (**)(char *, uint64_t))(v153 + 8);
    v115(v117, v91);
    v115(v116, v91);
    v94 = v152;
  }
  else
  {

    v115 = *(void (**)(char *, uint64_t))(v153 + 8);
    v115(v88, v91);
  }
  v120 = swift_release(v94);
  return ((uint64_t (*)(char *, uint64_t, __n128))v115)(v140, v91, v120);
}

uint64_t sub_100363550@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v40 = a1;
  v42 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v45 - 8);
  v9 = __chkstk_darwin(v45);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v39 - v13;
  __chkstk_darwin(v12);
  v41 = (char *)&v39 - v15;
  v16 = *(_QWORD *)(v2 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v2 + 80));
  result = dispatch thunk of ICFileManaging.url(for:)(13, ObjectType, v16);
  if (!v3)
  {
    URL.appendingPathComponent(_:isDirectory:)(0x7365766968637241, 0xE800000000000000, 1);
    v19 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    v20 = v19(v11, v45);
    v21 = UUID.init()(v20);
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v25 = v41;
    URL.appendingPathComponent(_:isDirectory:)(v22, v24, 1);
    v26 = swift_bridgeObjectRelease(v24);
    v27 = v45;
    ((void (*)(char *, uint64_t, __n128))v19)(v14, v45, v26);
    sub_100360210(v40);
    v29 = v28;
    v30 = String._bridgeToObjectiveC()();
    v31 = objc_msgSend(v30, "ic_sanitizedFilenameString");

    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    v43 = v32;
    v44 = v34;
    v35._countAndFlagsBits = 46;
    v35._object = (void *)0xE100000000000000;
    String.append(_:)(v35);
    v36._countAndFlagsBits = 0x6372617365746F6ELL;
    v36._object = (void *)0xEC00000065766968;
    String.append(_:)(v36);
    swift_bridgeObjectRelease(v29);
    v37 = v44;
    URL.appendingPathComponent(_:isDirectory:)(v43, v44, 1);
    v38 = swift_bridgeObjectRelease(v37);
    return ((uint64_t (*)(char *, uint64_t, __n128))v19)(v25, v27, v38);
  }
  return result;
}

uint64_t sub_1003637BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t ObjectType;
  uint64_t result;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __n128 v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedTypeWitness;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  Swift::String v39;
  Swift::String v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a2;
  v43 = *v2;
  v44 = a1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v49 - 8);
  v9 = __chkstk_darwin(v49);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v43 - v13;
  __chkstk_darwin(v12);
  v45 = (char *)&v43 - v15;
  v16 = v2[11];
  ObjectType = swift_getObjectType(v2[10]);
  result = dispatch thunk of ICFileManaging.url(for:)(13, ObjectType, v16);
  if (!v3)
  {
    URL.appendingPathComponent(_:isDirectory:)(0x7365766968637241, 0xE800000000000000, 1);
    v19 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    v20 = v19(v11, v49);
    v21 = UUID.init()(v20);
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v25 = v45;
    URL.appendingPathComponent(_:isDirectory:)(v22, v24, 1);
    v26 = swift_bridgeObjectRelease(v24);
    v27 = v14;
    v28 = v49;
    ((void (*)(char *, uint64_t, __n128))v19)(v27, v49, v26);
    sub_1000163BC(0, &qword_1005DAA28, ICArchive_ptr);
    v30 = *(_QWORD *)(v43 + 80);
    v29 = *(_QWORD *)(v43 + 88);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v29);
    swift_getAssociatedConformanceWitness(v29, v30, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
    static ICArchive.archiveTitle<A>(for:)(v44);
    v33 = v32;
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v34, "ic_sanitizedFilenameString");

    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
    v38 = v37;

    v47 = v36;
    v48 = v38;
    v39._countAndFlagsBits = 46;
    v39._object = (void *)0xE100000000000000;
    String.append(_:)(v39);
    v40._countAndFlagsBits = 0x6372617365746F6ELL;
    v40._object = (void *)0xEC00000065766968;
    String.append(_:)(v40);
    swift_bridgeObjectRelease(v33);
    v41 = v48;
    URL.appendingPathComponent(_:isDirectory:)(v47, v48, 1);
    v42 = swift_bridgeObjectRelease(v41);
    return ((uint64_t (*)(char *, uint64_t, __n128))v19)(v25, v28, v42);
  }
  return result;
}

uint64_t sub_100363A9C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t result;

  v7 = *a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v9 = type metadata accessor for ICObjectReferences(0);
  result = ICObjectReferences.recursiveNoteCount.getter(v9);
  if (__OFADD__(v7, result))
    __break(1u);
  else
    *a4 = v7 + result;
  return result;
}

void sub_100363B50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, char *, uint64_t);
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t, __n128);
  char *v48;
  int64_t v49;
  _QWORD *v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  __n128 v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  int64_t v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t ObjectType;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int *v131;
  char *v132;
  uint64_t v133;
  int *v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  void (*v146)(char *, unint64_t, uint64_t, __n128);
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  uint64_t v157;
  __int128 v158;
  uint64_t v159;
  char v160[8];

  v5 = v4;
  v135 = a3;
  v130 = type metadata accessor for URL(0);
  v129 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v9 = (char *)&v129 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ICArchiveModel(0);
  __chkstk_darwin(v10);
  v12 = (int *)((char *)&v129 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100012E18(&qword_1005DAA08);
  v152 = *(_QWORD *)(v13 - 8);
  v153 = v13;
  v14 = __chkstk_darwin(v13);
  v151 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v150 = (char *)&v129 - v16;
  v141 = sub_100012E18(&qword_1005D0D98);
  v17 = *(_QWORD *)(v141 - 8);
  v18 = __chkstk_darwin(v141);
  v142 = (char *)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v149 = (char *)&v129 - v21;
  v22 = __chkstk_darwin(v20);
  v148 = (char *)&v129 - v23;
  __chkstk_darwin(v22);
  v139 = (char *)&v129 - v24;
  if ((*(_BYTE *)(v3 + 96) & 1) != 0)
  {
    __break(1u);
LABEL_95:
    swift_once(&qword_1005CECD0, sub_100334524);
    goto LABEL_84;
  }
  v131 = (int *)v10;
  v134 = v12;
  *(_BYTE *)(v3 + 96) = 1;
  *(_QWORD *)&v158 = _swiftEmptyArrayStorage;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = swift_bridgeObjectRetain(a2);
  v138 = v3;
  v137 = a2;
  v133 = a1;
  v132 = v9;
  v154 = v17;
  v136 = v25;
  if (v25)
  {
    v143 = v4;
    v27 = *(_QWORD *)(v17 + 72);
    v140 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v28 = a2 + v140;
    v146 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v17 + 16);
    LODWORD(v145) = enum case for ICObjectReferences.Types.account<A>(_:);
    v144 = _swiftEmptyArrayStorage;
    v29 = v141;
    v30 = v139;
    v147 = v27;
    v31 = v150;
    v146(v139, v28, v141, v26);
    while (1)
    {
      ICObjectReferences.type.getter(v29);
      v35 = v151;
      v34 = v152;
      v36 = v29;
      v37 = v153;
      (*(void (**)(char *, _QWORD, uint64_t))(v152 + 104))(v151, v145, v153);
      v38 = sub_10036F698();
      v39 = dispatch thunk of static Equatable.== infix(_:_:)(v31, v35, v37, v38);
      v40 = *(void (**)(char *, uint64_t))(v34 + 8);
      v40(v35, v37);
      v40(v31, v37);
      if ((v39 & 1) != 0)
      {
        v17 = v154;
        (*(void (**)(char *, uint64_t))(v154 + 8))(v30, v36);
        v29 = v36;
        v33 = v147;
      }
      else
      {
        v41 = *(void (**)(char *, char *, uint64_t))(v154 + 32);
        v41(v148, v30, v36);
        v42 = v144;
        if ((swift_isUniquelyReferenced_nonNull_native(v144) & 1) == 0)
        {
          sub_100137354(0, v42[2] + 1, 1);
          v30 = v139;
        }
        v43 = (_QWORD *)v158;
        v45 = *(_QWORD *)(v158 + 16);
        v44 = *(_QWORD *)(v158 + 24);
        if (v45 >= v44 >> 1)
        {
          sub_100137354(v44 > 1, v45 + 1, 1);
          v30 = v139;
          v43 = (_QWORD *)v158;
        }
        v43[2] = v45 + 1;
        v144 = v43;
        v33 = v147;
        v46 = (unint64_t)v43 + v140 + v45 * v147;
        v29 = v141;
        v41((char *)v46, v148, v141);
        v17 = v154;
      }
      v28 += v33;
      if (!--v25)
        break;
      v146(v30, v28, v29, v32);
    }
    v47 = (void (*)(char *, unint64_t, uint64_t, __n128))v158;
    v3 = v138;
    a2 = v137;
    v5 = v143;
  }
  else
  {
    v47 = (void (*)(char *, unint64_t, uint64_t, __n128))_swiftEmptyArrayStorage;
    v29 = v141;
  }
  swift_bridgeObjectRelease(a2);
  v48 = *(char **)(v3 + 16);
  v49 = *((_QWORD *)v47 + 2);
  v148 = v48;
  if (v49)
  {
    *(_QWORD *)&v155 = _swiftEmptyArrayStorage;
    swift_retain(v48);
    sub_100137338(0, v49, 0);
    v50 = (_QWORD *)v155;
    v51 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
    v146 = v47;
    v52 = (char *)v47 + v51;
    v53 = *(_QWORD *)(v17 + 72);
    v147 = sub_100019C6C(&qword_1005DAA00, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    while (1)
    {
      dispatch thunk of ICObjectProviding.object(for:)(v52, *(_QWORD *)v48, v147);
      if (v5)
        break;
      *(_QWORD *)&v155 = v50;
      v55 = v50[2];
      v54 = v50[3];
      if (v55 >= v54 >> 1)
      {
        sub_100137338(v54 > 1, v55 + 1, 1);
        v50 = (_QWORD *)v155;
      }
      v50[2] = v55 + 1;
      sub_1001CBB70((uint64_t)&v158, (uint64_t)&v50[4 * v55 + 4]);
      v52 += v53;
      --v49;
      v48 = v148;
      if (!v49)
      {
        swift_release(v148);
        swift_release(v146);
        goto LABEL_24;
      }
    }
    swift_release(v48);
    swift_release(v146);
    swift_release(v50);
    goto LABEL_87;
  }
  swift_release(v47);
  v50 = _swiftEmptyArrayStorage;
LABEL_24:
  v56 = v50[2];
  if (v56)
  {
    v57 = (uint64_t)(v50 + 4);
    swift_bridgeObjectRetain(v50);
    v58 = _swiftEmptyArrayStorage;
    v147 = (uint64_t)&type metadata for Any + 8;
    do
    {
      sub_100012CE8(v57, (uint64_t)v160, &qword_1005CF190);
      sub_100012CE8((uint64_t)v160, (uint64_t)&v158, &qword_1005CF190);
      if (v159)
      {
        v59 = sub_100012E18(&qword_1005D1920);
        if ((swift_dynamicCast(&v155, &v158, v147, v59, 6) & 1) == 0)
        {
          v157 = 0;
          v155 = 0u;
          v156 = 0u;
        }
      }
      else
      {
        sub_100012DDC((uint64_t)&v158, &qword_1005CF190);
        v155 = 0u;
        v156 = 0u;
        v157 = 0;
      }
      sub_100012DDC((uint64_t)v160, &qword_1005CF190);
      if (*((_QWORD *)&v156 + 1))
      {
        sub_10013B100(&v155, (uint64_t)&v158);
        sub_10013B100(&v158, (uint64_t)&v155);
        if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
          v58 = sub_10016B86C(0, v58[2] + 1, 1, v58);
        v61 = v58[2];
        v60 = v58[3];
        if (v61 >= v60 >> 1)
          v58 = sub_10016B86C((_QWORD *)(v60 > 1), v61 + 1, 1, v58);
        v58[2] = v61 + 1;
        sub_10013B100(&v155, (uint64_t)&v58[5 * v61 + 4]);
      }
      else
      {
        sub_100012DDC((uint64_t)&v155, &qword_1005DAA18);
      }
      v57 += 32;
      --v56;
    }
    while (v56);
    swift_bridgeObjectRelease_n(v50, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v50);
    v58 = _swiftEmptyArrayStorage;
  }
  *(_QWORD *)&v158 = _swiftEmptyArrayStorage;
  v62 = v58[2];
  v63 = v154;
  if (v62)
  {
    v64 = v58 + 4;
    swift_bridgeObjectRetain(v58);
    do
    {
      v65 = v64[3];
      v66 = v64[4];
      sub_10012D19C(v64, v65);
      v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 24))(v65, v66);
      sub_1001D9188(v67);
      v64 += 5;
      --v62;
    }
    while (v62);
    swift_bridgeObjectRelease(v58);
  }
  swift_bridgeObjectRelease(v58);
  v141 = v158;
  v68 = _swiftEmptyArrayStorage;
  *(_QWORD *)&v158 = _swiftEmptyArrayStorage;
  v70 = swift_bridgeObjectRetain(v137);
  if (v136)
  {
    v143 = v5;
    v71 = *(_QWORD *)(v63 + 72);
    v144 = (_QWORD *)((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
    v72 = (char *)v144 + v69;
    v147 = *(_QWORD *)(v63 + 16);
    LODWORD(v146) = enum case for ICObjectReferences.Types.folder<A>(_:);
    v73 = v136;
    v145 = v71;
    ((void (*)(char *, char *, uint64_t, __n128))v147)(v149, (char *)v144 + v69, v29, v70);
    while (1)
    {
      v77 = v150;
      ICObjectReferences.type.getter(v29);
      v78 = v152;
      v79 = v153;
      v80 = v29;
      v81 = v151;
      (*(void (**)(char *, _QWORD, uint64_t))(v152 + 104))(v151, v146, v153);
      v82 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      v83 = sub_100167280();
      LOBYTE(v82) = static ICObjectReferences.Types.== infix(_:_:)(v77, v81, v82, v83);
      v84 = *(void (**)(char *, uint64_t))(v78 + 8);
      v84(v81, v79);
      v84(v77, v79);
      if ((v82 & 1) != 0)
      {
        v85 = *(void (**)(char *, char *, uint64_t))(v63 + 32);
        v85(v142, v149, v80);
        v86 = v158;
        v29 = v80;
        if ((swift_isUniquelyReferenced_nonNull_native(v158) & 1) == 0)
        {
          sub_100137354(0, *(_QWORD *)(v86 + 16) + 1, 1);
          v86 = v158;
        }
        v76 = v145;
        v88 = *(_QWORD *)(v86 + 16);
        v87 = *(_QWORD *)(v86 + 24);
        if (v88 >= v87 >> 1)
        {
          sub_100137354(v87 > 1, v88 + 1, 1);
          v86 = v158;
        }
        *(_QWORD *)(v86 + 16) = v88 + 1;
        v85((char *)v144 + v86 + v88 * v76, v142, v80);
        v63 = v154;
        v74 = v149;
      }
      else
      {
        v74 = v149;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v149, v80);
        v29 = v80;
        v76 = v145;
      }
      v72 += v76;
      if (!--v73)
        break;
      ((void (*)(char *, char *, uint64_t, __n128))v147)(v74, v72, v29, v75);
    }
    v68 = (_QWORD *)v158;
    v69 = v137;
    v5 = v143;
  }
  swift_bridgeObjectRelease(v69);
  v89 = v68[2];
  if (v89)
  {
    *(_QWORD *)&v155 = _swiftEmptyArrayStorage;
    swift_retain(v148);
    sub_100137338(0, v89, 0);
    v90 = (_QWORD *)v155;
    v91 = (char *)v68 + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
    v92 = *(_QWORD *)(v63 + 72);
    v93 = sub_100019C6C(&qword_1005DAA00, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    while (1)
    {
      dispatch thunk of ICObjectProviding.object(for:)(v91, *(_QWORD *)v148, v93);
      if (v5)
        break;
      v143 = 0;
      *(_QWORD *)&v155 = v90;
      v95 = v90[2];
      v94 = v90[3];
      if (v95 >= v94 >> 1)
      {
        sub_100137338(v94 > 1, v95 + 1, 1);
        v90 = (_QWORD *)v155;
      }
      v90[2] = v95 + 1;
      sub_1001CBB70((uint64_t)&v158, (uint64_t)&v90[4 * v95 + 4]);
      v91 += v92;
      --v89;
      v5 = v143;
      if (!v89)
      {
        swift_release(v148);
        swift_release(v68);
        goto LABEL_65;
      }
    }
    swift_bridgeObjectRelease(v141);
    swift_release(v68);
    swift_release(v90);
    swift_release(v148);
LABEL_87:
    v118 = v138;
    goto LABEL_88;
  }
  v143 = v5;
  swift_release(v68);
  v90 = _swiftEmptyArrayStorage;
LABEL_65:
  v96 = v90[2];
  if (v96)
  {
    v97 = (uint64_t)(v90 + 4);
    swift_bridgeObjectRetain(v90);
    v98 = _swiftEmptyArrayStorage;
    do
    {
      sub_100012CE8(v97, (uint64_t)v160, &qword_1005CF190);
      sub_100012CE8((uint64_t)v160, (uint64_t)&v158, &qword_1005CF190);
      if (v159)
      {
        v99 = sub_100012E18(&qword_1005D1920);
        if ((swift_dynamicCast(&v155, &v158, (char *)&type metadata for Any + 8, v99, 6) & 1) == 0)
        {
          v157 = 0;
          v155 = 0u;
          v156 = 0u;
        }
      }
      else
      {
        sub_100012DDC((uint64_t)&v158, &qword_1005CF190);
        v155 = 0u;
        v156 = 0u;
        v157 = 0;
      }
      sub_100012DDC((uint64_t)v160, &qword_1005CF190);
      if (*((_QWORD *)&v156 + 1))
      {
        sub_10013B100(&v155, (uint64_t)&v158);
        sub_10013B100(&v158, (uint64_t)&v155);
        if ((swift_isUniquelyReferenced_nonNull_native(v98) & 1) == 0)
          v98 = sub_10016B86C(0, v98[2] + 1, 1, v98);
        v101 = v98[2];
        v100 = v98[3];
        if (v101 >= v100 >> 1)
          v98 = sub_10016B86C((_QWORD *)(v100 > 1), v101 + 1, 1, v98);
        v98[2] = v101 + 1;
        sub_10013B100(&v155, (uint64_t)&v98[5 * v101 + 4]);
      }
      else
      {
        sub_100012DDC((uint64_t)&v155, &qword_1005DAA18);
      }
      v97 += 32;
      --v96;
    }
    while (v96);
    swift_bridgeObjectRelease_n(v90, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v90);
    v98 = _swiftEmptyArrayStorage;
  }
  v102 = v143;
  v103 = sub_10035FCA0((uint64_t)v98);
  v153 = v102;
  swift_bridgeObjectRelease(v98);
  v104 = *(_QWORD *)(v138 + 32);
  v105 = *(_QWORD *)(v138 + 40);
  v106 = *(_QWORD *)(v138 + 48);
  v107 = *(_QWORD *)(v138 + 56);
  v108 = *(_QWORD *)(v138 + 64);
  v152 = *(_QWORD *)(v138 + 24);
  sub_1001F410C(v152, v104, v105, v106, v107, v108);
  v109 = v141;
  v151 = (char *)sub_10020C3C4(v141);
  swift_bridgeObjectRelease(v109);
  if (!v103[2])
  {
    swift_bridgeObjectRelease(v103);
    v103 = 0;
  }
  v12 = v131;
  a2 = (uint64_t)v134;
  v111 = (char *)v134 + v131[6];
  Date.init()(v110);
  v112 = type metadata accessor for Date(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56))(v111, 0, 1, v112);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 1;
  v113 = (_QWORD *)(a2 + v12[7]);
  *v113 = v152;
  v113[1] = v104;
  v113[2] = v105;
  v113[3] = v106;
  v113[4] = v107;
  v113[5] = v108;
  *(_QWORD *)(a2 + v12[8]) = v151;
  *(_QWORD *)(a2 + v12[9]) = v103;
  if (qword_1005CECD0 != -1)
    goto LABEL_95;
LABEL_84:
  v114 = sub_100019C6C(&qword_1005DAA20, type metadata accessor for ICArchiveModel, (uint64_t)&unk_100467738);
  v115 = v153;
  v116 = dispatch thunk of JSONEncoder.encode<A>(_:)(a2, v12, v114);
  v118 = v138;
  v119 = v133;
  v120 = v132;
  if (v115)
  {
    sub_10036F6E4(a2);
LABEL_88:
    *(_BYTE *)(v118 + 96) = 0;
    return;
  }
  v121 = v116;
  v122 = v117;
  v123 = *(_QWORD *)(v138 + 88);
  ObjectType = swift_getObjectType(*(_QWORD *)(v138 + 80));
  URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v120, v121, v122, ObjectType, v123);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v120, v130);
  v125 = v136;
  if (v136)
  {
    v126 = v137 + ((*(unsigned __int8 *)(v154 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v154 + 80));
    v127 = *(_QWORD *)(v154 + 72);
    swift_bridgeObjectRetain(v137);
    do
    {
      v128 = v125;
      sub_100365910(v126, v119, v135);
      v126 += v127;
      --v125;
    }
    while (v128 != 1);
    swift_bridgeObjectRelease(v137);
  }
  sub_10036F6E4((uint64_t)v134);
  sub_10013DD30(v121, v122);
  *(_BYTE *)(v138 + 96) = 0;
}

void sub_100364B44(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  int *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t ObjectType;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t WitnessTable;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  _BYTE v114[24];

  v5 = (int *)v4;
  v9 = *v3;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for ICArchiveModel(0);
  v14 = __chkstk_darwin(v102);
  if ((v3[12] & 1) != 0)
  {
    __break(1u);
LABEL_51:
    swift_once(&qword_1005CECD0, sub_100334524);
    goto LABEL_47;
  }
  v100 = v13;
  v98 = v11;
  v99 = v10;
  v101 = a1;
  v97 = a3;
  v103 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = &v91;
  *((_BYTE *)v3 + 96) = 1;
  *(_QWORD *)&v112 = a2;
  __chkstk_darwin(v14);
  v16 = a2;
  v17 = *(_QWORD **)(v9 + 80);
  v18 = *(_QWORD **)(v9 + 88);
  *(&v91 - 2) = v17;
  *(&v91 - 1) = v18;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v18);
  swift_getAssociatedConformanceWitness(v18, v17, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v20 = type metadata accessor for ICObjectReferences(255);
  v21 = type metadata accessor for Array(0, v20);
  v105 = v16;
  swift_bridgeObjectRetain(v16);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v21);
  v22 = _ArrayProtocol.filter(_:)(sub_10036F7D8, &v91 - 4, v21);
  v106 = v4;
  *(_QWORD *)&v112 = v22;
  v108 = v3;
  v23 = v3[2];
  v24 = (_QWORD *)swift_allocObject(&unk_10056B648, 40, 7);
  v24[2] = v17;
  v24[3] = v18;
  v24[4] = v23;
  swift_unknownObjectRetain(v23);
  v107 = &v91;
  __chkstk_darwin(v25);
  *(&v91 - 4) = v17;
  *(&v91 - 3) = v18;
  *(&v91 - 2) = sub_10036F8A0;
  *(&v91 - 1) = v24;
  v26 = sub_100012E18(&qword_1005CF190);
  v27 = sub_100012E18(&qword_1005D7A90);
  v28 = v26;
  v29 = swift_getWitnessTable(&protocol conformance descriptor for [A], v21);
  v30 = v106;
  v31 = sub_10035FDBC((void (*)(char *, char *))sub_10036F7F4, (uint64_t)(&v91 - 6), v21, v28, v27, v29, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v109);
  if (v30)
  {
    v32 = v112;
    swift_release(v24);
    swift_bridgeObjectRelease(v32);
LABEL_26:
    v56 = v108;
LABEL_27:
    *((_BYTE *)v56 + 96) = 0;
    return;
  }
  v91 = 0;
  v92 = v29;
  v93 = v27;
  v94 = v28;
  v95 = v23;
  v96 = v21;
  v33 = v112;
  v106 = v31;
  swift_release(v24);
  swift_bridgeObjectRelease(v33);
  v34 = *(_QWORD *)(v106 + 16);
  if (v34)
  {
    v35 = v106 + 32;
    swift_bridgeObjectRetain(v106);
    v36 = _swiftEmptyArrayStorage;
    v37 = v17;
    v38 = v18;
    do
    {
      sub_100012CE8(v35, (uint64_t)v114, &qword_1005CF190);
      sub_100012CE8((uint64_t)v114, (uint64_t)&v112, &qword_1005CF190);
      if (v113)
      {
        v39 = sub_100012E18(&qword_1005D1920);
        if ((swift_dynamicCast(&v109, &v112, (char *)&type metadata for Any + 8, v39, 6) & 1) == 0)
        {
          v111 = 0;
          v109 = 0u;
          v110 = 0u;
        }
      }
      else
      {
        sub_100012DDC((uint64_t)&v112, &qword_1005CF190);
        v109 = 0u;
        v110 = 0u;
        v111 = 0;
      }
      sub_100012DDC((uint64_t)v114, &qword_1005CF190);
      if (*((_QWORD *)&v110 + 1))
      {
        sub_10013B100(&v109, (uint64_t)&v112);
        sub_10013B100(&v112, (uint64_t)&v109);
        if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
          v36 = sub_10016B86C(0, v36[2] + 1, 1, v36);
        v41 = v36[2];
        v40 = v36[3];
        if (v41 >= v40 >> 1)
          v36 = sub_10016B86C((_QWORD *)(v40 > 1), v41 + 1, 1, v36);
        v36[2] = v41 + 1;
        sub_10013B100(&v109, (uint64_t)&v36[5 * v41 + 4]);
      }
      else
      {
        sub_100012DDC((uint64_t)&v109, &qword_1005DAA18);
      }
      v35 += 32;
      --v34;
    }
    while (v34);
    swift_bridgeObjectRelease_n(v106, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v106);
    v36 = _swiftEmptyArrayStorage;
    v37 = v17;
    v38 = v18;
  }
  *(_QWORD *)&v112 = _swiftEmptyArrayStorage;
  v42 = v36[2];
  v43 = v95;
  if (v42)
  {
    v44 = v36 + 4;
    swift_bridgeObjectRetain(v36);
    do
    {
      v45 = v44[3];
      v46 = v44[4];
      sub_10012D19C(v44, v45);
      v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 24))(v45, v46);
      sub_1001D9188(v47);
      v44 += 5;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease(v36);
  }
  swift_bridgeObjectRelease(v36);
  v48 = v112;
  *(_QWORD *)&v112 = v105;
  v49 = __chkstk_darwin(v105);
  *(&v91 - 2) = v37;
  *(&v91 - 1) = v38;
  swift_bridgeObjectRetain(v49);
  v50 = v96;
  v51 = v91;
  *(_QWORD *)&v112 = _ArrayProtocol.filter(_:)(sub_10036F808, &v91 - 4, v96);
  v52 = (_QWORD *)swift_allocObject(&unk_10056B620, 40, 7);
  v52[2] = v37;
  v52[3] = v38;
  v52[4] = v43;
  swift_unknownObjectRetain(v43);
  __chkstk_darwin(v53);
  *(&v91 - 4) = v37;
  *(&v91 - 3) = v38;
  *(&v91 - 2) = sub_10036F8A0;
  *(&v91 - 1) = v52;
  v54 = sub_10035FDBC((void (*)(char *, char *))sub_10036F7F4, (uint64_t)(&v91 - 6), v50, v94, v93, v92, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v109);
  v107 = v51;
  if (v51)
  {
    v55 = v112;
    swift_release(v52);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v55);
    goto LABEL_26;
  }
  v57 = v54;
  v106 = v48;
  v58 = v112;
  swift_release(v52);
  swift_bridgeObjectRelease(v58);
  v59 = *(_QWORD *)(v57 + 16);
  if (v59)
  {
    v60 = v57 + 32;
    WitnessTable = v57;
    swift_bridgeObjectRetain(v57);
    v61 = _swiftEmptyArrayStorage;
    do
    {
      sub_100012CE8(v60, (uint64_t)v114, &qword_1005CF190);
      sub_100012CE8((uint64_t)v114, (uint64_t)&v112, &qword_1005CF190);
      if (v113)
      {
        v62 = sub_100012E18(&qword_1005D1920);
        if ((swift_dynamicCast(&v109, &v112, (char *)&type metadata for Any + 8, v62, 6) & 1) == 0)
        {
          v111 = 0;
          v109 = 0u;
          v110 = 0u;
        }
      }
      else
      {
        sub_100012DDC((uint64_t)&v112, &qword_1005CF190);
        v109 = 0u;
        v110 = 0u;
        v111 = 0;
      }
      sub_100012DDC((uint64_t)v114, &qword_1005CF190);
      if (*((_QWORD *)&v110 + 1))
      {
        sub_10013B100(&v109, (uint64_t)&v112);
        sub_10013B100(&v112, (uint64_t)&v109);
        if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
          v61 = sub_10016B86C(0, v61[2] + 1, 1, v61);
        v64 = v61[2];
        v63 = v61[3];
        if (v64 >= v63 >> 1)
          v61 = sub_10016B86C((_QWORD *)(v63 > 1), v64 + 1, 1, v61);
        v61[2] = v64 + 1;
        sub_10013B100(&v109, (uint64_t)&v61[5 * v64 + 4]);
      }
      else
      {
        sub_100012DDC((uint64_t)&v109, &qword_1005DAA18);
      }
      v60 += 32;
      --v59;
    }
    while (v59);
    swift_bridgeObjectRelease_n(WitnessTable, 2);
  }
  else
  {
    swift_bridgeObjectRelease(v57);
    v61 = _swiftEmptyArrayStorage;
  }
  v65 = v107;
  v66 = sub_10035FCA0((uint64_t)v61);
  v107 = v65;
  swift_bridgeObjectRelease(v61);
  v67 = v108[4];
  v69 = v108[5];
  v68 = v108[6];
  v70 = v108[7];
  v71 = v108[8];
  WitnessTable = v108[3];
  sub_1001F410C(WitnessTable, v67, v69, v68, v70, v71);
  v72 = v106;
  v95 = sub_10020C3C4(v106);
  swift_bridgeObjectRelease(v72);
  if (!v66[2])
  {
    swift_bridgeObjectRelease(v66);
    v66 = 0;
  }
  v5 = (int *)v102;
  a1 = v103;
  v74 = v103 + *(int *)(v102 + 24);
  Date.init()(v73);
  v75 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v74, 0, 1, v75);
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 1;
  v76 = (_QWORD *)(a1 + v5[7]);
  *v76 = WitnessTable;
  v76[1] = v67;
  v76[2] = v69;
  v76[3] = v68;
  v76[4] = v70;
  v76[5] = v71;
  *(_QWORD *)(a1 + v5[8]) = v95;
  *(_QWORD *)(a1 + v5[9]) = v66;
  if (qword_1005CECD0 != -1)
    goto LABEL_51;
LABEL_47:
  v77 = sub_100019C6C(&qword_1005DAA20, type metadata accessor for ICArchiveModel, (uint64_t)&unk_100467738);
  v78 = v107;
  v79 = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, v5, v77);
  v56 = v108;
  if (v78)
  {
    sub_10036F6E4(a1);
    goto LABEL_27;
  }
  v81 = v79;
  v82 = v80;
  v83 = v108[11];
  ObjectType = swift_getObjectType(v108[10]);
  v85 = v100;
  v86 = v101;
  URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v85, v81, v82, ObjectType, v83);
  v87 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v85, v99);
  *(_QWORD *)&v112 = v105;
  __chkstk_darwin(v87);
  v88 = v108;
  *(&v91 - 4) = v108;
  *(&v91 - 3) = (_QWORD *)v86;
  *(&v91 - 2) = v97;
  v89 = v96;
  v90 = swift_getWitnessTable(&protocol conformance descriptor for [A], v96);
  Sequence.forEach(_:)(sub_10036F720, &v91 - 6, v89, v90);
  sub_10036F6E4(v103);
  sub_10013DD30(v81, v82);
  *((_BYTE *)v88 + 96) = 0;
}

BOOL sub_100365648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t WitnessTable;
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v7 = type metadata accessor for ICObjectReferences.Types(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  v14 = type metadata accessor for ICObjectReferences(0);
  ICObjectReferences.type.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for ICObjectReferences.Types.account<A>(_:), v7);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for ICObjectReferences<A>.Types, v7);
  v16 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v11, v7, WitnessTable);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v17(v13, v7);
  return (v16 & 1) == 0;
}

uint64_t sub_1003657B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v7 = type metadata accessor for ICObjectReferences.Types(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v18 - v12;
  v14 = type metadata accessor for ICObjectReferences(0);
  ICObjectReferences.type.getter(v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for ICObjectReferences.Types.folder<A>(_:), v7);
  v15 = static ICObjectReferences.Types.== infix(_:_:)(v13, v11, AssociatedTypeWitness, AssociatedConformanceWitness);
  v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, v7);
  v16(v13, v7);
  return v15 & 1;
}

uint64_t sub_100365910(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  NSString v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_signpost_type_t v75;
  uint64_t v76;
  char *v77;
  void (*v78)(char *, char *, uint64_t);
  uint64_t v79;
  uint8_t *v80;
  os_signpost_id_t v81;
  void (*v82)(char *, uint64_t);
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, char *, uint64_t);
  NSObject *v98;
  char *v99;
  uint64_t v100;
  os_signpost_type_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  __n128 v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(char *, char *, uint64_t);
  NSObject *v118;
  char *v119;
  uint64_t v120;
  os_signpost_type_t v121;
  uint64_t v122;
  char *v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  void (*v142)(char *, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  __n128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint8_t *v156;
  os_signpost_id_t v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  char *v174;
  uint64_t *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  os_log_type_t v180;
  _BOOL4 v181;
  uint8_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  __n128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  __n128 v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  NSObject *v202;
  os_log_type_t v203;
  _BOOL4 v204;
  uint8_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  __n128 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  NSObject *v215;
  os_log_type_t v216;
  _BOOL4 v217;
  uint8_t *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  __n128 v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint8_t *v231;
  os_signpost_id_t v232;
  __n128 v233;
  uint64_t result;
  _QWORD v235[7];
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v241;
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  uint64_t v247;
  void *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  char *v253;
  char *v254;
  char *v255;
  char *v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  char v268[8];
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  uint64_t v272;
  char v273;
  id v274;
  char v275;
  char v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;

  v248 = a3;
  v247 = a2;
  v259 = type metadata accessor for OSSignpostError(0);
  v258 = *(_QWORD *)(v259 - 8);
  v4 = __chkstk_darwin(v259);
  v239 = (char *)v235 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v235[2] = (char *)v235 - v7;
  v8 = __chkstk_darwin(v6);
  v243 = (char *)v235 - v9;
  v10 = __chkstk_darwin(v8);
  v238 = (char *)v235 - v11;
  v12 = __chkstk_darwin(v10);
  v235[1] = (char *)v235 - v13;
  v14 = __chkstk_darwin(v12);
  v242 = (char *)v235 - v15;
  v16 = __chkstk_darwin(v14);
  v241 = (char *)v235 - v17;
  v18 = __chkstk_darwin(v16);
  v235[3] = (char *)v235 - v19;
  v20 = __chkstk_darwin(v18);
  v250 = (char *)v235 - v21;
  v22 = __chkstk_darwin(v20);
  v249 = (char *)v235 - v23;
  v24 = __chkstk_darwin(v22);
  v236 = (char *)v235 - v25;
  v26 = __chkstk_darwin(v24);
  v235[6] = (char *)v235 - v27;
  __chkstk_darwin(v26);
  v254 = (char *)v235 - v28;
  v29 = sub_100012E18(&qword_1005D0D98);
  v260 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v261 = (char *)v235 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for OSSignposter(0);
  v32 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v34 = (char *)v235 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v278 = type metadata accessor for OSSignpostID(0);
  v267 = *(_QWORD *)(v278 - 8);
  v35 = __chkstk_darwin(v278);
  v246 = (char *)v235 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v235[5] = (char *)v235 - v38;
  v39 = __chkstk_darwin(v37);
  v253 = (char *)v235 - v40;
  v41 = __chkstk_darwin(v39);
  v245 = (char *)v235 - v42;
  v43 = __chkstk_darwin(v41);
  v235[4] = (char *)v235 - v44;
  v45 = __chkstk_darwin(v43);
  v252 = (char *)v235 - v46;
  v47 = __chkstk_darwin(v45);
  v251 = (char *)v235 - v48;
  v49 = __chkstk_darwin(v47);
  v237 = (char *)v235 - v50;
  v51 = __chkstk_darwin(v49);
  v255 = (char *)v235 - v52;
  v53 = __chkstk_darwin(v51);
  v256 = (char *)v235 - v54;
  v55 = __chkstk_darwin(v53);
  v244 = (char *)v235 - v56;
  v57 = __chkstk_darwin(v55);
  v240 = (char *)v235 - v58;
  v59 = __chkstk_darwin(v57);
  v257 = (char *)v235 - v60;
  v61 = __chkstk_darwin(v59);
  v266 = (char *)v235 - v62;
  __chkstk_darwin(v61);
  v64 = (char *)v235 - v63;
  if (qword_1005CED50 != -1)
    swift_once(&qword_1005CED50, sub_1003603AC);
  v65 = sub_10012A0B0(v31, (uint64_t)qword_1005DA930);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v34, v65, v31);
  v264 = a1;
  v265 = v29;
  ICObjectReferences.identifier.getter(v29);
  v66 = v274;
  v67 = objc_msgSend(v274, "description");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
  v69 = v68;

  v70 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v69);
  v72 = OSSignposter.logHandle.getter(v71);
  OSSignpostID.init(log:object:)(v72, v70);
  v73 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  v263 = v65;
  v74 = OSSignposter.logHandle.getter(v73);
  v75 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v77 = v266;
    v76 = v267;
    v78 = *(void (**)(char *, char *, uint64_t))(v267 + 16);
    v79 = v278;
    v78(v266, v64, v278);
    v80 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v80 = 0;
    v81 = OSSignpostID.rawValue.getter(v80);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v74, v75, v81, "Export Object", "", v80, 2u);
    swift_slowDealloc(v80, -1, -1);

    v82 = *(void (**)(char *, uint64_t))(v76 + 8);
    v83 = v78;
    v82(v77, v79);
  }
  else
  {

    v77 = v266;
    v83 = *(void (**)(char *, char *, uint64_t))(v267 + 16);
  }
  v83(v77, v64, v278);
  v84 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v84, *(unsigned int *)(v84 + 48), *(unsigned __int16 *)(v84 + 52));
  v85 = OSSignpostIntervalState.init(id:isOpen:)(v77, 1);
  v86 = v260;
  v87 = v261;
  v89 = v264;
  v88 = v265;
  (*(void (**)(char *, uint64_t, uint64_t))(v260 + 16))(v261, v264, v265);
  v90 = (*(uint64_t (**)(char *, uint64_t))(v86 + 88))(v87, v88);
  v91 = v64;
  if (v90 == enum case for ICObjectReferences.account<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v86 + 96))(v87, v88);
    swift_release(*(_QWORD *)v87);
    v92 = v89;
    v93 = type metadata accessor for ICModernObjectProvider(0);
    v94 = sub_100019C6C(&qword_1005DAA00, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    v95 = v262;
    v96 = dispatch thunk of ICObjectProviding.object(for:)(v92, v93, v94);
    if (v95)
    {
      v97 = v83;
      v98 = OSSignposter.logHandle.getter(v96);
      v99 = v257;
      v100 = OSSignpostIntervalState.signpostID.getter();
      v101 = static os_signpost_type_t.end.getter(v100);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v102 = v278;
        v265 = v95;
        v103 = swift_retain(v85);
        v104 = v254;
        checkForErrorAndConsumeState(state:)(v103);
        v264 = v85;
        v105 = v85;
        v106 = v104;
        v107 = swift_release(v105);
        v108 = v258;
        v109 = v104;
        v110 = v259;
        v111 = v91;
        if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v109, v259, v107) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v112 = "[Error] Interval already ended";
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v108 + 8))(v106, v110);
          v112 = "";
        }
        v154 = v257;
        v155 = v266;
        v97(v266, v257, v102);
        v156 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v156 = 0;
        v157 = OSSignpostID.rawValue.getter(v156);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v98, v101, v157, "Export Object", v112, v156, 2u);
        swift_slowDealloc(v156, -1, -1);

        v142 = *(void (**)(char *, uint64_t))(v267 + 8);
        v142(v154, v102);
        v142(v155, v102);
        v91 = v111;
        v85 = v264;
      }
      else
      {

        v142 = *(void (**)(char *, uint64_t))(v267 + 8);
        v142(v99, v278);
      }
      goto LABEL_103;
    }
    if (v269)
    {
      v139 = sub_100012E18(&qword_1005D1920);
      v140 = swift_dynamicCast(&v270, v268, (char *)&type metadata for Any + 8, v139, 6);
      v119 = v256;
      if ((v140 & 1) != 0)
      {
        if (*((_QWORD *)&v271 + 1))
        {
          sub_10013B100(&v270, (uint64_t)&v274);
          v141 = ICObjectReferences.children.getter(v265);
          sub_100369B90(&v274, v141, v247, (uint64_t)v248);
          goto LABEL_67;
        }
      }
      else
      {
        v272 = 0;
        v270 = 0u;
        v271 = 0u;
      }
    }
    else
    {
      sub_100012DDC((uint64_t)v268, &qword_1005CF190);
      v270 = 0u;
      v271 = 0u;
      v272 = 0;
      v119 = v256;
    }
    v117 = v83;
    sub_100012DDC((uint64_t)&v270, &qword_1005DAA18);
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v158 = type metadata accessor for Logger(0);
    v159 = sub_10012A0B0(v158, (uint64_t)qword_1005DA918);
    v160 = Logger.logObject.getter(v159);
    v161 = static os_log_type_t.fault.getter(v160);
    if (os_log_type_enabled(v160, v161))
    {
      v162 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v162 = 0;
      _os_log_impl((void *)&_mh_execute_header, v160, v161, "Account to be exported does not exist anymore — skipping", v162, 2u);
      swift_slowDealloc(v162, -1, -1);
    }

    v118 = OSSignposter.logHandle.getter(v163);
    v164 = OSSignpostIntervalState.signpostID.getter();
    v121 = static os_signpost_type_t.end.getter(v164);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      goto LABEL_94;
    v264 = (uint64_t)v91;
    v265 = 0;
    v165 = swift_retain(v85);
    v166 = v249;
    checkForErrorAndConsumeState(state:)(v165);
    v167 = swift_release(v85);
    v168 = v258;
    v169 = v259;
    if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v166, v259, v167) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v127 = v85;
      v128 = "[Error] Interval already ended";
    }
    else
    {
      v176 = v166;
      v127 = v85;
      (*(void (**)(char *, uint64_t))(v168 + 8))(v176, v169);
      v128 = "";
    }
    v173 = v266;
    v174 = v266;
    v175 = &v280;
LABEL_101:
    v229 = (char *)*(v175 - 32);
LABEL_102:
    v230 = v278;
    v117(v174, v229, v278);
    v231 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v231 = 0;
    v232 = OSSignpostID.rawValue.getter(v231);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v118, v121, v232, "Export Object", v128, v231, 2u);
    swift_slowDealloc(v231, -1, -1);

    v142 = *(void (**)(char *, uint64_t))(v267 + 8);
    v142(v229, v230);
    v142(v173, v230);
    v85 = v127;
    v91 = (char *)v264;
    goto LABEL_103;
  }
  if (v90 == enum case for ICObjectReferences.folder<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v86 + 96))(v87, v88);
    swift_release(*(_QWORD *)v87);
    v113 = type metadata accessor for ICModernObjectProvider(0);
    v114 = sub_100019C6C(&qword_1005DAA00, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    v115 = v262;
    v116 = dispatch thunk of ICObjectProviding.object(for:)(v89, v113, v114);
    if (v115)
    {
      v117 = v83;
      v118 = OSSignposter.logHandle.getter(v116);
      v119 = v255;
      v120 = OSSignpostIntervalState.signpostID.getter();
      v121 = static os_signpost_type_t.end.getter(v120);
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
        goto LABEL_94;
      v264 = (uint64_t)v91;
      v265 = v115;
      v122 = swift_retain(v85);
      v123 = v250;
      checkForErrorAndConsumeState(state:)(v122);
      v124 = swift_release(v85);
      v125 = v258;
      v126 = v259;
      if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v123, v259, v124) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v127 = v85;
        v128 = "[Error] Interval already ended";
      }
      else
      {
        v172 = v123;
        v127 = v85;
        (*(void (**)(char *, uint64_t))(v125 + 8))(v172, v126);
        v128 = "";
      }
      v173 = v266;
      v174 = v266;
      v175 = &v279;
      goto LABEL_101;
    }
    if (v269)
    {
      v153 = sub_100012E18(&qword_1005D1920);
      if ((swift_dynamicCast(&v270, v268, (char *)&type metadata for Any + 8, v153, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v271 + 1))
        {
          sub_10013B100(&v270, (uint64_t)&v274);
          v141 = ICObjectReferences.children.getter(v265);
          sub_10036A358(&v274, v141, v247, (uint64_t)v248);
          goto LABEL_67;
        }
      }
      else
      {
        v272 = 0;
        v270 = 0u;
        v271 = 0u;
      }
    }
    else
    {
      sub_100012DDC((uint64_t)v268, &qword_1005CF190);
      v270 = 0u;
      v271 = 0u;
      v272 = 0;
    }
    v117 = v83;
    sub_100012DDC((uint64_t)&v270, &qword_1005DAA18);
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v177 = type metadata accessor for Logger(0);
    v178 = sub_10012A0B0(v177, (uint64_t)qword_1005DA918);
    v179 = Logger.logObject.getter(v178);
    v180 = static os_log_type_t.fault.getter(v179);
    v181 = os_log_type_enabled(v179, v180);
    v119 = v251;
    if (v181)
    {
      v182 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v182 = 0;
      _os_log_impl((void *)&_mh_execute_header, v179, v180, "Folder to be exported does not exist anymore — skipping", v182, 2u);
      swift_slowDealloc(v182, -1, -1);
    }

    v118 = OSSignposter.logHandle.getter(v183);
    v184 = OSSignpostIntervalState.signpostID.getter();
    v121 = static os_signpost_type_t.end.getter(v184);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      goto LABEL_94;
    v264 = (uint64_t)v91;
    v265 = 0;
    v185 = swift_retain(v85);
    v186 = v241;
    checkForErrorAndConsumeState(state:)(v185);
    v187 = swift_release(v85);
    v188 = v258;
    v189 = v259;
    if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v186, v259, v187) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v127 = v85;
      v128 = "[Error] Interval already ended";
    }
    else
    {
      v199 = v186;
      v127 = v85;
      (*(void (**)(char *, uint64_t))(v188 + 8))(v199, v189);
      v128 = "";
    }
    v173 = v266;
    v174 = v266;
    v175 = (uint64_t *)&v275;
    goto LABEL_101;
  }
  if (v90 == enum case for ICObjectReferences.note<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v86 + 96))(v87, v88);
    swift_release(*(_QWORD *)v87);
    v129 = type metadata accessor for ICModernObjectProvider(0);
    v130 = sub_100019C6C(&qword_1005DAA00, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    v131 = v262;
    v132 = dispatch thunk of ICObjectProviding.object(for:)(v89, v129, v130);
    if (v131)
    {
      v117 = v83;
      v118 = OSSignposter.logHandle.getter(v132);
      v119 = v252;
      v133 = OSSignpostIntervalState.signpostID.getter();
      v121 = static os_signpost_type_t.end.getter(v133);
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
        goto LABEL_94;
      v264 = (uint64_t)v91;
      v265 = v131;
      v134 = swift_retain(v85);
      v135 = v242;
      checkForErrorAndConsumeState(state:)(v134);
      v136 = swift_release(v85);
      v137 = v258;
      v138 = v259;
      if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v135, v259, v136) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v127 = v85;
        v128 = "[Error] Interval already ended";
      }
      else
      {
        v197 = v135;
        v127 = v85;
        (*(void (**)(char *, uint64_t))(v137 + 8))(v197, v138);
        v128 = "";
      }
      v173 = v266;
      v174 = v266;
      v175 = (uint64_t *)&v276;
      goto LABEL_101;
    }
    if (v269)
    {
      v170 = sub_100012E18(&qword_1005D1920);
      if ((swift_dynamicCast(&v270, v268, (char *)&type metadata for Any + 8, v170, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v271 + 1))
        {
          sub_10013B100(&v270, (uint64_t)&v274);
          v141 = ICObjectReferences.children.getter(v265);
          sub_10036AB10(&v274, v141, v247, v248);
          goto LABEL_67;
        }
      }
      else
      {
        v272 = 0;
        v270 = 0u;
        v271 = 0u;
      }
    }
    else
    {
      sub_100012DDC((uint64_t)v268, &qword_1005CF190);
      v270 = 0u;
      v271 = 0u;
      v272 = 0;
    }
    v117 = v83;
    sub_100012DDC((uint64_t)&v270, &qword_1005DAA18);
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v200 = type metadata accessor for Logger(0);
    v201 = sub_10012A0B0(v200, (uint64_t)qword_1005DA918);
    v202 = Logger.logObject.getter(v201);
    v203 = static os_log_type_t.fault.getter(v202);
    v204 = os_log_type_enabled(v202, v203);
    v119 = v245;
    if (v204)
    {
      v205 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v205 = 0;
      _os_log_impl((void *)&_mh_execute_header, v202, v203, "Note to be exported does not exist anymore — skipping", v205, 2u);
      swift_slowDealloc(v205, -1, -1);
    }

    v118 = OSSignposter.logHandle.getter(v206);
    v207 = OSSignpostIntervalState.signpostID.getter();
    v121 = static os_signpost_type_t.end.getter(v207);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      goto LABEL_94;
    v264 = (uint64_t)v91;
    v265 = 0;
    v208 = swift_retain(v85);
    v209 = v238;
    checkForErrorAndConsumeState(state:)(v208);
    v210 = swift_release(v85);
    v211 = v258;
    v212 = v259;
    if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v209, v259, v210) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v127 = v85;
      v128 = "[Error] Interval already ended";
    }
    else
    {
      v226 = v209;
      v127 = v85;
      (*(void (**)(char *, uint64_t))(v211 + 8))(v226, v212);
      v128 = "";
    }
    v173 = v266;
    v174 = v266;
    v175 = &v272;
    goto LABEL_101;
  }
  if (v90 == enum case for ICObjectReferences.attachment<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v86 + 96))(v87, v88);
    swift_release(*(_QWORD *)v87);
    v143 = type metadata accessor for ICModernObjectProvider(0);
    v144 = sub_100019C6C(&qword_1005DAA00, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
    v145 = v262;
    v146 = dispatch thunk of ICObjectProviding.object(for:)(v89, v143, v144);
    if (v145)
    {
      v117 = v83;
      v118 = OSSignposter.logHandle.getter(v146);
      v119 = v253;
      v147 = OSSignpostIntervalState.signpostID.getter();
      v121 = static os_signpost_type_t.end.getter(v147);
      if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
        goto LABEL_94;
      v264 = (uint64_t)v91;
      v265 = v145;
      v148 = swift_retain(v85);
      v149 = v243;
      checkForErrorAndConsumeState(state:)(v148);
      v150 = swift_release(v85);
      v151 = v258;
      v152 = v259;
      if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v149, v259, v150) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v127 = v85;
        v128 = "[Error] Interval already ended";
      }
      else
      {
        v198 = v149;
        v127 = v85;
        (*(void (**)(char *, uint64_t))(v151 + 8))(v198, v152);
        v128 = "";
      }
      v173 = v266;
      v174 = v266;
      v175 = &v277;
      goto LABEL_101;
    }
    if (v269)
    {
      v171 = sub_100012E18(&qword_1005D1920);
      if ((swift_dynamicCast(&v270, v268, (char *)&type metadata for Any + 8, v171, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v271 + 1))
        {
          sub_10013B100(&v270, (uint64_t)&v274);
          v141 = ICObjectReferences.children.getter(v265);
          sub_10036B6A0(&v274, v141, v247, v248);
LABEL_67:
          v117 = v83;
          sub_1000153C0(&v274);
          swift_bridgeObjectRelease(v141);
          v118 = OSSignposter.logHandle.getter(v190);
          v119 = v244;
          v191 = OSSignpostIntervalState.signpostID.getter();
          v121 = static os_signpost_type_t.end.getter(v191);
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            v264 = (uint64_t)v91;
            v265 = 0;
            v192 = swift_retain(v85);
            v193 = v236;
            checkForErrorAndConsumeState(state:)(v192);
            v194 = swift_release(v85);
            v195 = v258;
            v196 = v259;
            if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v193, v259, v194) == enum case for OSSignpostError.doubleEnd(_:))
            {
              v127 = v85;
              v128 = "[Error] Interval already ended";
            }
            else
            {
              v228 = v193;
              v127 = v85;
              (*(void (**)(char *, uint64_t))(v195 + 8))(v228, v196);
              v128 = "";
            }
            v229 = v244;
            v173 = v266;
            v174 = v266;
            goto LABEL_102;
          }
LABEL_94:

          v142 = *(void (**)(char *, uint64_t))(v267 + 8);
          v142(v119, v278);
LABEL_103:
          v233 = swift_release(v85);
          return ((uint64_t (*)(char *, uint64_t, __n128))v142)(v91, v278, v233);
        }
      }
      else
      {
        v272 = 0;
        v270 = 0u;
        v271 = 0u;
      }
    }
    else
    {
      sub_100012DDC((uint64_t)v268, &qword_1005CF190);
      v270 = 0u;
      v271 = 0u;
      v272 = 0;
    }
    v117 = v83;
    sub_100012DDC((uint64_t)&v270, &qword_1005DAA18);
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v213 = type metadata accessor for Logger(0);
    v214 = sub_10012A0B0(v213, (uint64_t)qword_1005DA918);
    v215 = Logger.logObject.getter(v214);
    v216 = static os_log_type_t.fault.getter(v215);
    v217 = os_log_type_enabled(v215, v216);
    v119 = v246;
    if (v217)
    {
      v218 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v218 = 0;
      _os_log_impl((void *)&_mh_execute_header, v215, v216, "Object to be exported does not exist anymore — skipping", v218, 2u);
      swift_slowDealloc(v218, -1, -1);
    }

    v118 = OSSignposter.logHandle.getter(v219);
    v220 = OSSignpostIntervalState.signpostID.getter();
    v121 = static os_signpost_type_t.end.getter(v220);
    if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
      goto LABEL_94;
    v264 = (uint64_t)v91;
    v265 = 0;
    v221 = swift_retain(v85);
    v222 = v239;
    checkForErrorAndConsumeState(state:)(v221);
    v223 = swift_release(v85);
    v224 = v258;
    v225 = v259;
    if ((*(unsigned int (**)(char *, uint64_t, __n128))(v258 + 88))(v222, v259, v223) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v127 = v85;
      v128 = "[Error] Interval already ended";
    }
    else
    {
      v227 = v222;
      v127 = v85;
      (*(void (**)(char *, uint64_t))(v224 + 8))(v227, v225);
      v128 = "";
    }
    v173 = v266;
    v174 = v266;
    v175 = (uint64_t *)&v273;
    goto LABEL_101;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v88, v88);
  __break(1u);
  return result;
}

uint64_t sub_100367418(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t AssociatedTypeWitness;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (**v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  void (**v72)(char *, uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t v74;
  uint64_t v75;
  NSString v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_signpost_type_t v81;
  char v82;
  uint64_t v83;
  void (*v84)(_QWORD);
  char *v85;
  void (*v86)(_QWORD);
  uint8_t *v87;
  os_signpost_id_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  char *v102;
  uint64_t v103;
  os_signpost_type_t v104;
  char *v105;
  void (*v106)(char *, char *, void (*)(_QWORD));
  uint64_t v107;
  char *v108;
  __n128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  os_signpost_type_t v118;
  void (*v119)(char *, char *, void (*)(_QWORD));
  uint64_t v120;
  char *v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  __n128 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  char *v149;
  char *v150;
  uint8_t *v151;
  os_signpost_id_t v152;
  void (*v153)(char *, void (*)(_QWORD));
  uint64_t v154;
  uint64_t v155;
  NSObject *v156;
  os_log_type_t v157;
  uint8_t *v158;
  uint64_t v159;
  uint64_t v160;
  os_signpost_type_t v161;
  uint64_t v162;
  char *v163;
  __n128 v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  char *v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint8_t *v176;
  os_signpost_id_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  uint8_t *v183;
  uint64_t v184;
  NSObject *v185;
  char *v186;
  uint64_t v187;
  os_signpost_type_t v188;
  uint64_t v189;
  char *v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  __n128 v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  __int128 *v206;
  uint64_t v207;
  uint64_t v208;
  NSObject *v209;
  os_log_type_t v210;
  uint8_t *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  __n128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  NSObject *v221;
  os_log_type_t v222;
  uint8_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  __n128 v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  uint8_t *v235;
  os_signpost_id_t v236;
  uint8_t *v237;
  os_signpost_id_t v238;
  __n128 v239;
  uint64_t result;
  _QWORD v241[6];
  char *v242;
  char *v243;
  char *v244;
  char *v245;
  char *v246;
  char *v247;
  char *v248;
  char *v249;
  char *v250;
  char *v251;
  char *v252;
  uint64_t v253;
  void *v254;
  char *v255;
  char *v256;
  char *v257;
  char *v258;
  char *v259;
  char *v260;
  char *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  void (*v270)(_QWORD);
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char v277[8];
  uint64_t v278;
  __int128 v279;
  __int128 v280;
  uint64_t v281;
  uint64_t v282;
  char v283;
  void (**v284)(char *, uint64_t, uint64_t);

  v254 = a3;
  v253 = a2;
  v275 = a1;
  v4 = *v3;
  v265 = type metadata accessor for OSSignpostError(0);
  v264 = *(_QWORD *)(v265 - 8);
  v5 = __chkstk_darwin(v265);
  v241[1] = (char *)v241 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v249 = (char *)v241 - v8;
  v9 = __chkstk_darwin(v7);
  v241[0] = (char *)v241 - v10;
  v11 = __chkstk_darwin(v9);
  v248 = (char *)v241 - v12;
  v13 = __chkstk_darwin(v11);
  v241[2] = (char *)v241 - v14;
  v15 = __chkstk_darwin(v13);
  v256 = (char *)v241 - v16;
  v17 = __chkstk_darwin(v15);
  v241[5] = (char *)v241 - v18;
  v19 = __chkstk_darwin(v17);
  v260 = (char *)v241 - v20;
  v21 = __chkstk_darwin(v19);
  v242 = (char *)v241 - v22;
  v23 = __chkstk_darwin(v21);
  v245 = (char *)v241 - v24;
  v25 = __chkstk_darwin(v23);
  v244 = (char *)v241 - v26;
  v27 = __chkstk_darwin(v25);
  v247 = (char *)v241 - v28;
  __chkstk_darwin(v27);
  v255 = (char *)v241 - v29;
  v30 = *(_QWORD *)(v4 + 80);
  v31 = *(_QWORD *)(v4 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v31);
  v274 = v31;
  swift_getAssociatedConformanceWitness(v31, v30, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v33 = type metadata accessor for ICObjectReferences(0);
  v272 = *(_QWORD *)(v33 - 8);
  v34 = __chkstk_darwin(v33);
  v273 = (char *)v241 - v35;
  v268 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(v34);
  v37 = (char *)v241 - v36;
  v38 = type metadata accessor for OSSignposter(0);
  v284 = *(void (***)(char *, uint64_t, uint64_t))(v38 - 8);
  __chkstk_darwin(v38);
  v40 = (char *)v241 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v270 = (void (*)(_QWORD))type metadata accessor for OSSignpostID(0);
  v276 = *((_QWORD *)v270 - 1);
  v41 = __chkstk_darwin(v270);
  v241[4] = (char *)v241 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v41);
  v259 = (char *)v241 - v44;
  v45 = __chkstk_darwin(v43);
  v241[3] = (char *)v241 - v46;
  v47 = __chkstk_darwin(v45);
  v258 = (char *)v241 - v48;
  v49 = __chkstk_darwin(v47);
  v243 = (char *)v241 - v50;
  v51 = __chkstk_darwin(v49);
  v262 = (char *)v241 - v52;
  v53 = __chkstk_darwin(v51);
  v246 = (char *)v241 - v54;
  v55 = __chkstk_darwin(v53);
  v263 = (char *)v241 - v56;
  v57 = __chkstk_darwin(v55);
  v250 = (char *)v241 - v58;
  v59 = __chkstk_darwin(v57);
  v252 = (char *)v241 - v60;
  v61 = __chkstk_darwin(v59);
  v251 = (char *)v241 - v62;
  v63 = __chkstk_darwin(v61);
  v257 = (char *)v241 - v64;
  v65 = __chkstk_darwin(v63);
  v261 = (char *)v241 - v66;
  v67 = __chkstk_darwin(v65);
  v269 = (char *)v241 - v68;
  __chkstk_darwin(v67);
  v70 = (void (**)(char *, uint64_t, uint64_t))((char *)v241 - v69);
  if (qword_1005CED50 != -1)
    swift_once(&qword_1005CED50, sub_1003603AC);
  v71 = sub_10012A0B0(v38, (uint64_t)qword_1005DA930);
  v72 = v284;
  v284[2](v40, v71, v38);
  v271 = v33;
  ICObjectReferences.identifier.getter(v33);
  v266 = v30;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v274, v30, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: CustomStringConvertible);
  dispatch thunk of CustomStringConvertible.description.getter(AssociatedTypeWitness, AssociatedConformanceWitness);
  v75 = v74;
  (*(void (**)(char *, uint64_t))(v268 + 8))(v37, AssociatedTypeWitness);
  v76 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v75);
  v78 = OSSignposter.logHandle.getter(v77);
  OSSignpostID.init(log:object:)(v78, v76);
  v79 = ((uint64_t (*)(char *, uint64_t))v72[1])(v40, v38);
  v268 = v71;
  v80 = OSSignposter.logHandle.getter(v79);
  v81 = static os_signpost_type_t.begin.getter();
  v82 = OS_os_log.signpostsEnabled.getter();
  v284 = v70;
  if ((v82 & 1) != 0)
  {
    v83 = v276;
    v84 = *(void (**)(_QWORD))(v276 + 16);
    v85 = v269;
    v86 = v270;
    ((void (*)(char *, _QWORD, void (*)(_QWORD)))v84)(v269, v284, v270);
    v87 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v87 = 0;
    v88 = OSSignpostID.rawValue.getter(v87);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v80, v81, v88, "Export Object", "", v87, 2u);
    swift_slowDealloc(v87, -1, -1);

    (*(void (**)(char *, void (*)(_QWORD)))(v83 + 8))(v85, v86);
  }
  else
  {

    v84 = *(void (**)(_QWORD))(v276 + 16);
    v86 = v270;
    v85 = v269;
  }
  v90 = v272;
  v89 = v273;
  v270 = v84;
  ((void (*)(char *, _QWORD, void (*)(_QWORD)))v84)(v85, v284, v86);
  v91 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v91, *(unsigned int *)(v91 + 48), *(unsigned __int16 *)(v91 + 52));
  v92 = OSSignpostIntervalState.init(id:isOpen:)(v85, 1);
  v93 = v275;
  v94 = v271;
  (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v89, v275, v271);
  v95 = (*(uint64_t (**)(char *, uint64_t))(v90 + 88))(v89, v94);
  v96 = v274;
  v97 = v90;
  v98 = v266;
  if (v95 == enum case for ICObjectReferences.account<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v97 + 96))(v89, v94);
    swift_release(*(_QWORD *)v89);
    v99 = v267;
    v100 = dispatch thunk of ICObjectProviding.object(for:)(v93, v98, v96);
    if (v99)
    {
      v101 = OSSignposter.logHandle.getter(v100);
      v102 = v263;
      v103 = OSSignpostIntervalState.signpostID.getter();
      v104 = static os_signpost_type_t.end.getter(v103);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v105 = v85;
        v106 = (void (*)(char *, char *, void (*)(_QWORD)))v270;
        v275 = v99;
        v107 = swift_retain(v92);
        v108 = v260;
        checkForErrorAndConsumeState(state:)(v107);
        v109 = swift_release(v92);
        v110 = v264;
        v111 = v265;
        if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v108, v265, v109) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v112 = v92;
          v113 = "[Error] Interval already ended";
        }
        else
        {
          v147 = v110;
          v112 = v92;
          (*(void (**)(char *, uint64_t))(v147 + 8))(v108, v111);
          v113 = "";
        }
        v148 = v105;
        v149 = v105;
        v150 = v263;
        v106(v149, v263, v86);
        v151 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v151 = 0;
        v152 = OSSignpostID.rawValue.getter(v151);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, v104, v152, "Export Object", v113, v151, 2u);
        swift_slowDealloc(v151, -1, -1);

        v153 = *(void (**)(char *, void (*)(_QWORD)))(v276 + 8);
        v153(v150, v86);
LABEL_58:
        v178 = v148;
LABEL_105:
        v153(v178, v86);
        v92 = v112;
        goto LABEL_106;
      }
      goto LABEL_45;
    }
    if (v278)
    {
      v135 = sub_100012E18(&qword_1005D1920);
      if ((swift_dynamicCast(&v279, v277, (char *)&type metadata for Any + 8, v135, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v280 + 1))
        {
          sub_10013B100(&v279, (uint64_t)&v282);
          v136 = ICObjectReferences.children.getter(v271);
          sub_100369F44(&v282, v136, v253, (uint64_t)v254);
          goto LABEL_68;
        }
      }
      else
      {
        v281 = 0;
        v279 = 0u;
        v280 = 0u;
      }
    }
    else
    {
      sub_100012DDC((uint64_t)v277, &qword_1005CF190);
      v279 = 0u;
      v280 = 0u;
      v281 = 0;
    }
    sub_100012DDC((uint64_t)&v279, &qword_1005DAA18);
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v154 = type metadata accessor for Logger(0);
    v155 = sub_10012A0B0(v154, (uint64_t)qword_1005DA918);
    v156 = Logger.logObject.getter(v155);
    v157 = static os_log_type_t.fault.getter(v156);
    if (os_log_type_enabled(v156, v157))
    {
      v158 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v158 = 0;
      _os_log_impl((void *)&_mh_execute_header, v156, v157, "Account to be exported does not exist anymore — skipping", v158, 2u);
      swift_slowDealloc(v158, -1, -1);
    }

    v101 = OSSignposter.logHandle.getter(v159);
    v102 = v261;
    v160 = OSSignpostIntervalState.signpostID.getter();
    v161 = static os_signpost_type_t.end.getter(v160);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v275 = 0;
      v162 = swift_retain(v92);
      v163 = v255;
      checkForErrorAndConsumeState(state:)(v162);
      v164 = swift_release(v92);
      v165 = v264;
      v166 = v265;
      if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v163, v265, v164) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v112 = v92;
        v167 = "[Error] Interval already ended";
      }
      else
      {
        v173 = v165;
        v112 = v92;
        (*(void (**)(char *, uint64_t))(v173 + 8))(v163, v166);
        v167 = "";
      }
      v148 = v85;
      v174 = v85;
      v175 = v261;
      v270(v174);
      v176 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v176 = 0;
      v177 = OSSignpostID.rawValue.getter(v176);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, v161, v177, "Export Object", v167, v176, 2u);
      swift_slowDealloc(v176, -1, -1);

      v153 = *(void (**)(char *, void (*)(_QWORD)))(v276 + 8);
      v153(v175, v86);
      goto LABEL_58;
    }
    goto LABEL_45;
  }
  if (v95 == enum case for ICObjectReferences.folder<A>(_:))
  {
    v114 = v273;
    (*(void (**)(char *, uint64_t))(v272 + 96))(v273, v94);
    swift_release(*(_QWORD *)v114);
    v115 = v267;
    v116 = dispatch thunk of ICObjectProviding.object(for:)(v93, v98, v96);
    if (v115)
    {
      v101 = OSSignposter.logHandle.getter(v116);
      v102 = v262;
      v117 = OSSignpostIntervalState.signpostID.getter();
      v118 = static os_signpost_type_t.end.getter(v117);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v119 = (void (*)(char *, char *, void (*)(_QWORD)))v270;
        v275 = v115;
        v120 = swift_retain(v92);
        v121 = v256;
        checkForErrorAndConsumeState(state:)(v120);
        v122 = swift_release(v92);
        v123 = v264;
        v124 = v265;
        if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v121, v265, v122) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v112 = v92;
          v125 = "[Error] Interval already ended";
        }
        else
        {
          v170 = v123;
          v112 = v92;
          (*(void (**)(char *, uint64_t))(v170 + 8))(v121, v124);
          v125 = "";
        }
        v171 = v85;
        v172 = v262;
LABEL_103:
        v119(v171, v172, v86);
        v237 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v237 = 0;
        v238 = OSSignpostID.rawValue.getter(v237);
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v101, v118, v238, "Export Object", v125, v237, 2u);
        swift_slowDealloc(v237, -1, -1);

        v153 = *(void (**)(char *, void (*)(_QWORD)))(v276 + 8);
        v153(v172, v86);
        goto LABEL_104;
      }
      goto LABEL_45;
    }
    if (v278)
    {
      v146 = sub_100012E18(&qword_1005D1920);
      if ((swift_dynamicCast(&v279, v277, (char *)&type metadata for Any + 8, v146, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v280 + 1))
        {
          sub_10013B100(&v279, (uint64_t)&v282);
          v136 = ICObjectReferences.children.getter(v271);
          sub_10036A704(&v282, v136, v253, (uint64_t)v254);
          goto LABEL_68;
        }
      }
      else
      {
        v281 = 0;
        v279 = 0u;
        v280 = 0u;
      }
    }
    else
    {
      sub_100012DDC((uint64_t)v277, &qword_1005CF190);
      v279 = 0u;
      v280 = 0u;
      v281 = 0;
    }
    sub_100012DDC((uint64_t)&v279, &qword_1005DAA18);
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v179 = type metadata accessor for Logger(0);
    v180 = sub_10012A0B0(v179, (uint64_t)qword_1005DA918);
    v181 = Logger.logObject.getter(v180);
    v182 = static os_log_type_t.fault.getter(v181);
    if (os_log_type_enabled(v181, v182))
    {
      v183 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v183 = 0;
      _os_log_impl((void *)&_mh_execute_header, v181, v182, "Folder to be exported does not exist anymore — skipping", v183, 2u);
      swift_slowDealloc(v183, -1, -1);
    }

    v185 = OSSignposter.logHandle.getter(v184);
    v186 = v257;
    v187 = OSSignpostIntervalState.signpostID.getter();
    v188 = static os_signpost_type_t.end.getter(v187);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v275 = 0;
      v189 = swift_retain(v92);
      v190 = v247;
      checkForErrorAndConsumeState(state:)(v189);
      v191 = swift_release(v92);
      v192 = v264;
      v193 = v265;
      if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v190, v265, v191) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v112 = v92;
        v194 = "[Error] Interval already ended";
      }
      else
      {
        v204 = v192;
        v112 = v92;
        (*(void (**)(char *, uint64_t))(v204 + 8))(v190, v193);
        v194 = "";
      }
      v205 = v85;
      v206 = (__int128 *)&v283;
      goto LABEL_102;
    }
LABEL_95:

    v153 = *(void (**)(char *, void (*)(_QWORD)))(v276 + 8);
    v153(v186, v86);
    goto LABEL_106;
  }
  if (v95 == enum case for ICObjectReferences.note<A>(_:))
  {
    v126 = v273;
    (*(void (**)(char *, uint64_t))(v272 + 96))(v273, v94);
    swift_release(*(_QWORD *)v126);
    v127 = v267;
    v128 = dispatch thunk of ICObjectProviding.object(for:)(v93, v98, v96);
    if (v127)
    {
      v101 = OSSignposter.logHandle.getter(v128);
      v102 = v258;
      v129 = OSSignpostIntervalState.signpostID.getter();
      v118 = static os_signpost_type_t.end.getter(v129);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v119 = (void (*)(char *, char *, void (*)(_QWORD)))v270;
        v275 = v127;
        v130 = swift_retain(v92);
        v131 = v248;
        checkForErrorAndConsumeState(state:)(v130);
        v132 = swift_release(v92);
        v133 = v264;
        v134 = v265;
        if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v131, v265, v132) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v112 = v92;
          v125 = "[Error] Interval already ended";
        }
        else
        {
          v202 = v133;
          v112 = v92;
          (*(void (**)(char *, uint64_t))(v202 + 8))(v131, v134);
          v125 = "";
        }
        v171 = v85;
        v172 = v258;
        goto LABEL_103;
      }
LABEL_45:

      v153 = *(void (**)(char *, void (*)(_QWORD)))(v276 + 8);
      v153(v102, v86);
LABEL_106:
      v239 = swift_release(v92);
      return ((uint64_t (*)(void (**)(char *, uint64_t, uint64_t), void (*)(_QWORD), __n128))v153)(v284, v86, v239);
    }
    if (v278)
    {
      v168 = sub_100012E18(&qword_1005D1920);
      if ((swift_dynamicCast(&v279, v277, (char *)&type metadata for Any + 8, v168, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v280 + 1))
        {
          sub_10013B100(&v279, (uint64_t)&v282);
          v136 = ICObjectReferences.children.getter(v271);
          sub_10036B0A4(&v282, v136, v253, v254);
          goto LABEL_68;
        }
      }
      else
      {
        v281 = 0;
        v279 = 0u;
        v280 = 0u;
      }
    }
    else
    {
      sub_100012DDC((uint64_t)v277, &qword_1005CF190);
      v279 = 0u;
      v280 = 0u;
      v281 = 0;
    }
    sub_100012DDC((uint64_t)&v279, &qword_1005DAA18);
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v207 = type metadata accessor for Logger(0);
    v208 = sub_10012A0B0(v207, (uint64_t)qword_1005DA918);
    v209 = Logger.logObject.getter(v208);
    v210 = static os_log_type_t.fault.getter(v209);
    if (os_log_type_enabled(v209, v210))
    {
      v211 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v211 = 0;
      _os_log_impl((void *)&_mh_execute_header, v209, v210, "Note to be exported does not exist anymore — skipping", v211, 2u);
      swift_slowDealloc(v211, -1, -1);
    }

    v185 = OSSignposter.logHandle.getter(v212);
    v186 = v251;
    v213 = OSSignpostIntervalState.signpostID.getter();
    v188 = static os_signpost_type_t.end.getter(v213);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v275 = 0;
      v214 = swift_retain(v92);
      v215 = v244;
      checkForErrorAndConsumeState(state:)(v214);
      v216 = swift_release(v92);
      v217 = v264;
      v218 = v265;
      if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v215, v265, v216) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v112 = v92;
        v194 = "[Error] Interval already ended";
      }
      else
      {
        v231 = v217;
        v112 = v92;
        (*(void (**)(char *, uint64_t))(v231 + 8))(v215, v218);
        v194 = "";
      }
      v205 = v85;
      v206 = (__int128 *)((char *)&v279 + 8);
      goto LABEL_102;
    }
    goto LABEL_95;
  }
  if (v95 == enum case for ICObjectReferences.attachment<A>(_:))
  {
    v137 = v273;
    (*(void (**)(char *, uint64_t))(v272 + 96))(v273, v94);
    swift_release(*(_QWORD *)v137);
    v138 = v267;
    v139 = dispatch thunk of ICObjectProviding.object(for:)(v93, v98, v96);
    if (v138)
    {
      v101 = OSSignposter.logHandle.getter(v139);
      v102 = v259;
      v140 = OSSignpostIntervalState.signpostID.getter();
      v118 = static os_signpost_type_t.end.getter(v140);
      if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
      {
        v119 = (void (*)(char *, char *, void (*)(_QWORD)))v270;
        v275 = v138;
        v141 = swift_retain(v92);
        v142 = v249;
        checkForErrorAndConsumeState(state:)(v141);
        v143 = swift_release(v92);
        v144 = v264;
        v145 = v265;
        if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v142, v265, v143) == enum case for OSSignpostError.doubleEnd(_:))
        {
          v112 = v92;
          v125 = "[Error] Interval already ended";
        }
        else
        {
          v203 = v144;
          v112 = v92;
          (*(void (**)(char *, uint64_t))(v203 + 8))(v142, v145);
          v125 = "";
        }
        v171 = v85;
        v172 = v259;
        goto LABEL_103;
      }
      goto LABEL_45;
    }
    if (v278)
    {
      v169 = sub_100012E18(&qword_1005D1920);
      if ((swift_dynamicCast(&v279, v277, (char *)&type metadata for Any + 8, v169, 6) & 1) != 0)
      {
        if (*((_QWORD *)&v280 + 1))
        {
          sub_10013B100(&v279, (uint64_t)&v282);
          v136 = ICObjectReferences.children.getter(v271);
          sub_10036CBB4(&v282, v136, v253, v254);
LABEL_68:
          sub_1000153C0(&v282);
          swift_bridgeObjectRelease(v136);
          v185 = OSSignposter.logHandle.getter(v195);
          v186 = v250;
          v196 = OSSignpostIntervalState.signpostID.getter();
          v188 = static os_signpost_type_t.end.getter(v196);
          if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
          {
            v275 = 0;
            v197 = swift_retain(v92);
            v198 = v242;
            checkForErrorAndConsumeState(state:)(v197);
            v199 = swift_release(v92);
            v200 = v264;
            v201 = v265;
            if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v198, v265, v199) == enum case for OSSignpostError.doubleEnd(_:))
            {
              v112 = v92;
              v194 = "[Error] Interval already ended";
            }
            else
            {
              v233 = v200;
              v112 = v92;
              (*(void (**)(char *, uint64_t))(v233 + 8))(v198, v201);
              v194 = "";
            }
            v205 = v85;
            v206 = &v279;
LABEL_102:
            v234 = (char *)*((_QWORD *)v206 - 32);
            ((void (*)(char *, char *, void (*)(_QWORD)))v270)(v205, v234, v86);
            v235 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v235 = 0;
            v236 = OSSignpostID.rawValue.getter(v235);
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v185, v188, v236, "Export Object", v194, v235, 2u);
            swift_slowDealloc(v235, -1, -1);

            v153 = *(void (**)(char *, void (*)(_QWORD)))(v276 + 8);
            v153(v234, v86);
LABEL_104:
            v178 = v85;
            goto LABEL_105;
          }
          goto LABEL_95;
        }
      }
      else
      {
        v281 = 0;
        v279 = 0u;
        v280 = 0u;
      }
    }
    else
    {
      sub_100012DDC((uint64_t)v277, &qword_1005CF190);
      v279 = 0u;
      v280 = 0u;
      v281 = 0;
    }
    sub_100012DDC((uint64_t)&v279, &qword_1005DAA18);
    if (qword_1005CED48 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v219 = type metadata accessor for Logger(0);
    v220 = sub_10012A0B0(v219, (uint64_t)qword_1005DA918);
    v221 = Logger.logObject.getter(v220);
    v222 = static os_log_type_t.fault.getter(v221);
    if (os_log_type_enabled(v221, v222))
    {
      v223 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v223 = 0;
      _os_log_impl((void *)&_mh_execute_header, v221, v222, "Object to be exported does not exist anymore — skipping", v223, 2u);
      swift_slowDealloc(v223, -1, -1);
    }

    v185 = OSSignposter.logHandle.getter(v224);
    v186 = v252;
    v225 = OSSignpostIntervalState.signpostID.getter();
    v188 = static os_signpost_type_t.end.getter(v225);
    if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
    {
      v275 = 0;
      v226 = swift_retain(v92);
      v227 = v245;
      checkForErrorAndConsumeState(state:)(v226);
      v228 = swift_release(v92);
      v229 = v264;
      v230 = v265;
      if ((*(unsigned int (**)(char *, uint64_t, __n128))(v264 + 88))(v227, v265, v228) == enum case for OSSignpostError.doubleEnd(_:))
      {
        v112 = v92;
        v194 = "[Error] Interval already ended";
      }
      else
      {
        v232 = v229;
        v112 = v92;
        (*(void (**)(char *, uint64_t))(v232 + 8))(v227, v230);
        v194 = "";
      }
      v205 = v85;
      v206 = &v280;
      goto LABEL_102;
    }
    goto LABEL_95;
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v94, v94);
  __break(1u);
  return result;
}

uint64_t sub_1003690E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  void (*v30)(char *, uint64_t, __n128);
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  Swift::String v39;
  void *object;
  uint64_t v41;
  void *v42;
  NSString v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  Swift::String v63;
  unint64_t v64;
  char *v65;
  NSString v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __n128 v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  id v100[2];
  uint64_t v101;

  v96 = a5;
  v79 = a6;
  v10 = type metadata accessor for URL(0);
  v84 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v89 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v78 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v78 - v16;
  v92 = a1;
  v93 = a2;
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v18, "ic_sanitizedFilenameString");

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v90 = a3;
  URL.appendingPathComponent(_:isDirectory:)(v20, v22, 1);
  swift_bridgeObjectRelease(v22);
  v91 = a4;
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v23, "ic_sanitizedFilenameString");

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = v84;
  URL.appendingPathExtension(_:)(v25, v27);
  v29 = swift_bridgeObjectRelease(v27);
  v30 = *(void (**)(char *, uint64_t, __n128))(v28 + 8);
  v88 = v15;
  v30(v15, v10, v29);
  v32 = *(_QWORD *)(v94 + 80);
  v31 = *(_QWORD *)(v94 + 88);
  ObjectType = swift_getObjectType(v32);
  v86 = v31;
  v87 = v32;
  v34 = v95;
  v85 = ObjectType;
  dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v17, 0, ObjectType, v31);
  if (!v34)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v79, v17, v10);
  ((void (*)(char *, uint64_t))v30)(v17, v10);
  v101 = v34;
  swift_errorRetain(v34);
  v35 = sub_100012E18(&qword_1005D7A90);
  v36 = sub_1000163BC(0, (unint64_t *)&unk_1005D6A80, NSError_ptr);
  if ((swift_dynamicCast(v100, &v101, v35, v36, 0) & 1) == 0)
    return swift_errorRelease(v101);
  v37 = v100[0];
  if (objc_msgSend(v100[0], "code") != (id)516)
  {

    return swift_errorRelease(v101);
  }
  v78 = v37;
  v80 = v36;
  v82 = (void (*)(char *, uint64_t))v30;
  swift_errorRelease(v34);
  v83 = ICAttachmentNameMaxLength;
  v38 = 2;
  v81 = v35;
  while (1)
  {
    v97 = (id)v38;
    v98 = 32;
    v99 = 0xE100000000000000;
    v94 = v38;
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v39._object;
    String.append(_:)(v39);
    swift_bridgeObjectRelease(object);
    v41 = v98;
    v42 = (void *)v99;
    v43 = String._bridgeToObjectiveC()();
    v44 = objc_msgSend(v43, "ic_sanitizedFilenameString");

    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

    v48 = String.count.getter(v41, v42);
    v49 = __OFSUB__(v83, v48);
    result = v83 - v48;
    if (v49)
      break;
    v51 = sub_10036F0A8(result, v45, v47);
    v53 = v52;
    v54 = v10;
    v56 = v55;
    v95 = 0;
    v58 = v57;
    swift_bridgeObjectRelease(v47);
    v59 = v56;
    v10 = v54;
    v60 = static String._fromSubstring(_:)(v51, v53, v59, v58);
    v62 = v61;
    swift_bridgeObjectRelease(v58);
    v98 = v60;
    v99 = v62;
    swift_bridgeObjectRetain(v62);
    v63._countAndFlagsBits = v41;
    v63._object = v42;
    String.append(_:)(v63);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v42);
    v64 = v99;
    v65 = v88;
    URL.appendingPathComponent(_:isDirectory:)(v98, v99, 1);
    swift_bridgeObjectRelease(v64);
    v66 = String._bridgeToObjectiveC()();
    v67 = objc_msgSend(v66, "ic_sanitizedFilenameString");

    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v70 = v69;

    v71 = v89;
    URL.appendingPathExtension(_:)(v68, v70);
    v72 = swift_bridgeObjectRelease(v70);
    v73 = v82;
    ((void (*)(char *, uint64_t, __n128))v82)(v65, v10, v72);
    v74 = v95;
    dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v71, 0, v85, v86);
    if (!v74)
    {

      (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v79, v71, v10);
      return swift_errorRelease(v101);
    }
    v73(v71, v10);
    v98 = v74;
    swift_errorRetain(v74);
    if (!swift_dynamicCast(&v97, &v98, v81, v80, 0)
      || (v75 = v97, v76 = objc_msgSend(v97, "code"), v75, v76 != (id)516))
    {

      swift_errorRelease(v98);
      return swift_errorRelease(v101);
    }
    result = swift_errorRelease(v74);
    v77 = v94;
    if (__OFADD__(v94, 1))
      goto LABEL_18;
    swift_errorRelease(v98);
    v38 = v77 + 1;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_100369638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  void (*v30)(char *, uint64_t, __n128);
  uint64_t v31;
  uint64_t v32;
  uint64_t ObjectType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  Swift::String v39;
  void *object;
  uint64_t v41;
  void *v42;
  NSString v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  Swift::String v63;
  unint64_t v64;
  char *v65;
  NSString v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  __n128 v72;
  void (*v73)(char *, uint64_t);
  uint64_t v74;
  id v75;
  id v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  id v100[2];
  uint64_t v101;

  v96 = a5;
  v79 = a6;
  v10 = type metadata accessor for URL(0);
  v84 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v89 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v78 - v14;
  __chkstk_darwin(v13);
  v17 = (char *)&v78 - v16;
  v92 = a1;
  v93 = a2;
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v18, "ic_sanitizedFilenameString");

  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  v90 = a3;
  URL.appendingPathComponent(_:isDirectory:)(v20, v22, 1);
  swift_bridgeObjectRelease(v22);
  v91 = a4;
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v23, "ic_sanitizedFilenameString");

  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = v84;
  URL.appendingPathExtension(_:)(v25, v27);
  v29 = swift_bridgeObjectRelease(v27);
  v30 = *(void (**)(char *, uint64_t, __n128))(v28 + 8);
  v88 = v15;
  v30(v15, v10, v29);
  v32 = *(_QWORD *)(v94 + 80);
  v31 = *(_QWORD *)(v94 + 88);
  ObjectType = swift_getObjectType(v32);
  v86 = v31;
  v87 = v32;
  v34 = v95;
  v85 = ObjectType;
  dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v17, 0, ObjectType, v31);
  if (!v34)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v28 + 32))(v79, v17, v10);
  ((void (*)(char *, uint64_t))v30)(v17, v10);
  v101 = v34;
  swift_errorRetain(v34);
  v35 = sub_100012E18(&qword_1005D7A90);
  v36 = sub_1000163BC(0, (unint64_t *)&unk_1005D6A80, NSError_ptr);
  if (!swift_dynamicCast(v100, &v101, v35, v36, 0))
    return swift_errorRelease(v101);
  v37 = v100[0];
  if (objc_msgSend(v100[0], "code") != (id)516)
  {

    return swift_errorRelease(v101);
  }
  v78 = v37;
  v80 = v36;
  v82 = (void (*)(char *, uint64_t))v30;
  swift_errorRelease(v34);
  v83 = ICAttachmentNameMaxLength;
  v38 = 2;
  v81 = v35;
  while (1)
  {
    v97 = (id)v38;
    v98 = 32;
    v99 = 0xE100000000000000;
    v94 = v38;
    v39._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v39._object;
    String.append(_:)(v39);
    swift_bridgeObjectRelease(object);
    v41 = v98;
    v42 = (void *)v99;
    v43 = String._bridgeToObjectiveC()();
    v44 = objc_msgSend(v43, "ic_sanitizedFilenameString");

    v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v47 = v46;

    v48 = String.count.getter(v41, v42);
    v49 = __OFSUB__(v83, v48);
    result = v83 - v48;
    if (v49)
      break;
    v51 = sub_10036F0A8(result, v45, v47);
    v53 = v52;
    v54 = v10;
    v56 = v55;
    v95 = 0;
    v58 = v57;
    swift_bridgeObjectRelease(v47);
    v59 = v56;
    v10 = v54;
    v60 = static String._fromSubstring(_:)(v51, v53, v59, v58);
    v62 = v61;
    swift_bridgeObjectRelease(v58);
    v98 = v60;
    v99 = v62;
    swift_bridgeObjectRetain(v62);
    v63._countAndFlagsBits = v41;
    v63._object = v42;
    String.append(_:)(v63);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v42);
    v64 = v99;
    v65 = v88;
    URL.appendingPathComponent(_:isDirectory:)(v98, v99, 1);
    swift_bridgeObjectRelease(v64);
    v66 = String._bridgeToObjectiveC()();
    v67 = objc_msgSend(v66, "ic_sanitizedFilenameString");

    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v70 = v69;

    v71 = v89;
    URL.appendingPathExtension(_:)(v68, v70);
    v72 = swift_bridgeObjectRelease(v70);
    v73 = v82;
    ((void (*)(char *, uint64_t, __n128))v82)(v65, v10, v72);
    v74 = v95;
    dispatch thunk of ICFileManaging.createDirectory(at:withIntermediateDirectories:)(v71, 0, v85, v86);
    if (!v74)
    {

      (*(void (**)(uint64_t, char *, uint64_t))(v84 + 32))(v79, v71, v10);
      return swift_errorRelease(v101);
    }
    v73(v71, v10);
    v98 = v74;
    swift_errorRetain(v74);
    if (!swift_dynamicCast(&v97, &v98, v81, v80, 0)
      || (v75 = v97, v76 = objc_msgSend(v97, "code"), v75, v76 != (id)516))
    {

      swift_errorRelease(v98);
      return swift_errorRelease(v101);
    }
    result = swift_errorRelease(v74);
    v77 = v94;
    if (__OFADD__(v94, 1))
      goto LABEL_18;
    swift_errorRelease(v98);
    v38 = v77 + 1;
  }
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

void sub_100369B90(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t ObjectType;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _OWORD v55[2];
  _OWORD v56[2];
  uint64_t v57;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  NSProgress.throwIfCancelled()();
  if (!v15)
  {
    v52 = 0;
    v53 = v12;
    v54 = v14;
    v49 = a2;
    v50 = v9;
    v48 = a4;
    v51 = v8;
    v16 = a1[3];
    v17 = a1[4];
    sub_10012D19C(a1, v16);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    if (v19)
    {
      v20 = v18;
      v21 = v19;
    }
    else
    {
      v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v22, "localizedStringForKey:value:table:", v23, 0, 0);

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v21 = v25;

    }
    v27 = v53;
    v26 = (uint64_t)v54;
    v28 = v52;
    v29 = v57;
    sub_1003690E0(v20, v21, a3, 0x746E756F636361, 0xE700000000000000, (uint64_t)v54);
    if (v28)
    {
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      swift_bridgeObjectRelease(v21);
      v30 = *(_QWORD *)(v29 + 88);
      v53 = *(char **)(v29 + 80);
      v54 = (char *)v30;
      URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
      v31 = a1[3];
      v32 = a1[4];
      sub_10012D19C(a1, v31);
      v33 = *(_OWORD *)(v29 + 40);
      v55[0] = *(_OWORD *)(v29 + 24);
      v55[1] = v33;
      v56[0] = *(_OWORD *)(v29 + 56);
      *(_QWORD *)((char *)v56 + 13) = *(_QWORD *)(v29 + 69);
      v34 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v32 + 80))(v55, v31, v32);
      v36 = v35;
      ObjectType = swift_getObjectType(v53);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v27, v34, v36, ObjectType, v54);
      v38 = v51;
      v39 = *(void (**)(char *, uint64_t))(v50 + 8);
      v39(v27, v51);
      sub_10013DD30(v34, v36);
      v40 = v49;
      v41 = *(_QWORD *)(v49 + 16);
      if (v41)
      {
        v42 = *(_QWORD *)(sub_100012E18(&qword_1005D0D98) - 8);
        v43 = v40 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
        v44 = *(_QWORD *)(v42 + 72);
        v45 = swift_bridgeObjectRetain(v40);
        v46 = v48;
        do
        {
          sub_100365910(v43, v26, v46, v45);
          v43 += v44;
          --v41;
        }
        while (v41);
        swift_bridgeObjectRelease(v40);
        v38 = v51;
      }
      v39((char *)v26, v38);
    }
  }
}

void sub_100369F44(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t ObjectType;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  uint64_t v47;
  uint64_t v48;
  uint64_t WitnessTable;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  _OWORD v60[2];
  _OWORD v61[2];
  uint64_t v62;

  v5 = v4;
  v58 = a2;
  v59 = (uint64_t *)a3;
  v8 = *v5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v50 - v14;
  NSProgress.throwIfCancelled()();
  if (!v16)
  {
    v55 = v10;
    v56 = 0;
    v53 = v9;
    v54 = v13;
    v51 = v8;
    v52 = a4;
    v57 = v15;
    v17 = a1[3];
    v18 = a1[4];
    sub_10012D19C(a1, v17);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
    v21 = a1;
    if (v20)
    {
      v22 = v19;
      v23 = v20;
    }
    else
    {
      v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v25 = String._bridgeToObjectiveC()();
      v26 = objc_msgSend(v24, "localizedStringForKey:value:table:", v25, 0, 0);

      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v23 = v27;

    }
    v28 = v56;
    v29 = v55;
    v30 = v5;
    sub_100369638(v22, v23, (uint64_t)v59, 0x746E756F636361, 0xE700000000000000, (uint64_t)v57);
    swift_bridgeObjectRelease(v23);
    if (!v28)
    {
      v31 = v5[10];
      v59 = (uint64_t *)v5[11];
      v32 = v54;
      URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
      v33 = v21[3];
      v34 = v21[4];
      sub_10012D19C(v21, v33);
      v35 = *(_OWORD *)(v30 + 5);
      v60[0] = *(_OWORD *)(v30 + 3);
      v60[1] = v35;
      v61[0] = *(_OWORD *)(v30 + 7);
      *(_QWORD *)((char *)v61 + 13) = *(_QWORD *)((char *)v30 + 69);
      v36 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v34 + 80))(v60, v33, v34);
      v38 = v37;
      ObjectType = swift_getObjectType(v31);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v32, v36, v38, ObjectType, v59);
      v40 = *(void (**)(char *, uint64_t))(v29 + 8);
      v41 = v53;
      v40(v32, v53);
      v42 = sub_10013DD30(v36, v38);
      v59 = &v50;
      v62 = v58;
      __chkstk_darwin(v42);
      v43 = (uint64_t)v57;
      *(&v50 - 4) = (uint64_t)v30;
      *(&v50 - 3) = v43;
      *(&v50 - 2) = v52;
      v45 = *(_QWORD *)(v51 + 80);
      v44 = *(_QWORD *)(v51 + 88);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v44);
      swift_getAssociatedConformanceWitness(v44, v45, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
      v47 = type metadata accessor for ICObjectReferences(255);
      v48 = type metadata accessor for Array(0, v47);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v48);
      Sequence.forEach(_:)(sub_10036F720, &v50 - 6, v48, WitnessTable);
      v40((char *)v43, v41);
    }
  }
}

void sub_10036A358(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t ObjectType;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  _OWORD v55[2];
  _OWORD v56[2];
  uint64_t v57;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  NSProgress.throwIfCancelled()();
  if (!v15)
  {
    v52 = 0;
    v53 = v12;
    v54 = v14;
    v49 = a2;
    v50 = v9;
    v48 = a4;
    v51 = v8;
    v16 = a1[3];
    v17 = a1[4];
    sub_10012D19C(a1, v16);
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
    if (v19)
    {
      v20 = v18;
      v21 = v19;
    }
    else
    {
      v22 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v23 = String._bridgeToObjectiveC()();
      v24 = objc_msgSend(v22, "localizedStringForKey:value:table:", v23, 0, 0);

      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v21 = v25;

    }
    v27 = v53;
    v26 = (uint64_t)v54;
    v28 = v52;
    v29 = v57;
    sub_1003690E0(v20, v21, a3, 0x7265646C6F66, 0xE600000000000000, (uint64_t)v54);
    if (v28)
    {
      swift_bridgeObjectRelease(v21);
    }
    else
    {
      swift_bridgeObjectRelease(v21);
      v30 = *(_QWORD *)(v29 + 88);
      v53 = *(char **)(v29 + 80);
      v54 = (char *)v30;
      URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
      v31 = a1[3];
      v32 = a1[4];
      sub_10012D19C(a1, v31);
      v33 = *(_OWORD *)(v29 + 40);
      v55[0] = *(_OWORD *)(v29 + 24);
      v55[1] = v33;
      v56[0] = *(_OWORD *)(v29 + 56);
      *(_QWORD *)((char *)v56 + 13) = *(_QWORD *)(v29 + 69);
      v34 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v32 + 80))(v55, v31, v32);
      v36 = v35;
      ObjectType = swift_getObjectType(v53);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v27, v34, v36, ObjectType, v54);
      v38 = v51;
      v39 = *(void (**)(char *, uint64_t))(v50 + 8);
      v39(v27, v51);
      sub_10013DD30(v34, v36);
      v40 = v49;
      v41 = *(_QWORD *)(v49 + 16);
      if (v41)
      {
        v42 = *(_QWORD *)(sub_100012E18(&qword_1005D0D98) - 8);
        v43 = v40 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
        v44 = *(_QWORD *)(v42 + 72);
        v45 = swift_bridgeObjectRetain(v40);
        v46 = v48;
        do
        {
          sub_100365910(v43, v26, v46, v45);
          v43 += v44;
          --v41;
        }
        while (v41);
        swift_bridgeObjectRelease(v40);
        v38 = v51;
      }
      v39((char *)v26, v38);
    }
  }
}

void sub_10036A704(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t ObjectType;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t AssociatedTypeWitness;
  uint64_t v47;
  uint64_t v48;
  uint64_t WitnessTable;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  _OWORD v60[2];
  _OWORD v61[2];
  uint64_t v62;

  v5 = v4;
  v58 = a2;
  v59 = (uint64_t *)a3;
  v8 = *v5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v50 - v14;
  NSProgress.throwIfCancelled()();
  if (!v16)
  {
    v55 = v10;
    v56 = 0;
    v53 = v9;
    v54 = v13;
    v51 = v8;
    v52 = a4;
    v57 = v15;
    v17 = a1[3];
    v18 = a1[4];
    sub_10012D19C(a1, v17);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 16))(v17, v18);
    v21 = a1;
    if (v20)
    {
      v22 = v19;
      v23 = v20;
    }
    else
    {
      v24 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v25 = String._bridgeToObjectiveC()();
      v26 = objc_msgSend(v24, "localizedStringForKey:value:table:", v25, 0, 0);

      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v23 = v27;

    }
    v28 = v56;
    v29 = v55;
    v30 = v5;
    sub_100369638(v22, v23, (uint64_t)v59, 0x7265646C6F66, 0xE600000000000000, (uint64_t)v57);
    swift_bridgeObjectRelease(v23);
    if (!v28)
    {
      v31 = v5[10];
      v59 = (uint64_t *)v5[11];
      v32 = v54;
      URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
      v33 = v21[3];
      v34 = v21[4];
      sub_10012D19C(v21, v33);
      v35 = *(_OWORD *)(v30 + 5);
      v60[0] = *(_OWORD *)(v30 + 3);
      v60[1] = v35;
      v61[0] = *(_OWORD *)(v30 + 7);
      *(_QWORD *)((char *)v61 + 13) = *(_QWORD *)((char *)v30 + 69);
      v36 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v34 + 80))(v60, v33, v34);
      v38 = v37;
      ObjectType = swift_getObjectType(v31);
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v32, v36, v38, ObjectType, v59);
      v40 = *(void (**)(char *, uint64_t))(v29 + 8);
      v41 = v53;
      v40(v32, v53);
      v42 = sub_10013DD30(v36, v38);
      v59 = &v50;
      v62 = v58;
      __chkstk_darwin(v42);
      v43 = (uint64_t)v57;
      *(&v50 - 4) = (uint64_t)v30;
      *(&v50 - 3) = v43;
      *(&v50 - 2) = v52;
      v45 = *(_QWORD *)(v51 + 80);
      v44 = *(_QWORD *)(v51 + 88);
      AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v44);
      swift_getAssociatedConformanceWitness(v44, v45, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
      v47 = type metadata accessor for ICObjectReferences(255);
      v48 = type metadata accessor for Array(0, v47);
      WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v48);
      Sequence.forEach(_:)(sub_10036F720, &v50 - 6, v48, WitnessTable);
      v40((char *)v43, v41);
    }
  }
}

void sub_10036AB10(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  objc_class *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t KeyPath;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  Class v26;
  _QWORD *v27;
  uint64_t v28;
  BOOL v29;
  NSProgress v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  NSString v42;
  id v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t ObjectType;
  uint64_t v56;
  Class v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  __n128 v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Class isa;
  char *v73;
  _OWORD v74[2];
  _OWORD v75[2];

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (objc_class *)((char *)&v66 - v13);
  NSProgress.throwIfCancelled()();
  if (v16)
    return;
  v71 = a3;
  isa = v14;
  v17 = a4;
  v18 = v73;
  v69 = v9;
  v70 = v8;
  __chkstk_darwin(v15);
  *(&v66 - 2) = type metadata accessor for ICModernObjectProvider(0);
  *(&v66 - 1) = sub_100019C6C(&qword_1005DAA00, (uint64_t (*)(uint64_t))&type metadata accessor for ICModernObjectProvider, (uint64_t)&protocol conformance descriptor for ICModernObjectProvider);
  KeyPath = swift_getKeyPath(&unk_1004652B0, &v66 - 2);
  swift_retain(KeyPath);
  v68 = a2;
  v20 = sub_10036E8F0(a2, KeyPath);
  swift_release_n(KeyPath, 2);
  v21 = v20[2];
  if (v21)
  {
    v22 = 0;
    v23 = v20 + 4;
    v24 = v12;
    v25 = v18;
    v26 = isa;
    v27 = a1;
    while (1)
    {
      v28 = *v23++;
      v29 = __OFADD__(v22, v28);
      v22 += v28;
      if (v29)
        break;
      if (!--v21)
        goto LABEL_8;
    }
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return;
  }
  v22 = 0;
  v24 = v12;
  v25 = v18;
  v26 = isa;
  v27 = a1;
LABEL_8:
  swift_bridgeObjectRelease(v20);
  if (__OFADD__(v22, 1))
    goto LABEL_24;
  v73 = v24;
  v30.super.isa = NSProgress.addingChild(totalUnitCount:pendingUnitCount:)(v22 + 1, 1).super.isa;
  v31 = v27[3];
  v32 = v27[4];
  sub_10012D19C(v27, v31);
  (*(void (**)(uint64_t, uint64_t))(v32 + 16))(v31, v32);
  if (v33)
  {
    v34 = v33;
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v35, "ic_sanitizedFilenameString", swift_bridgeObjectRelease(v34).n128_f64[0]);

    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    v40 = HIBYTE(v39) & 0xF;
    if ((v39 & 0x2000000000000000) == 0)
      v40 = v37 & 0xFFFFFFFFFFFFLL;
    if (v40)
      goto LABEL_15;
    swift_bridgeObjectRelease(v39);
  }
  v41 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v41, "localizedStringForKey:value:table:", v42, 0, 0);

  v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
  v39 = v44;
  swift_bridgeObjectRelease(0);

LABEL_15:
  sub_1003690E0(v37, v39, v71, 1702129518, 0xE400000000000000, (uint64_t)v26);
  v67 = v17;
  isa = v30.super.isa;
  swift_bridgeObjectRelease(v39);
  v45 = v73;
  URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
  v46 = *((_QWORD *)v25 + 10);
  v71 = *((_QWORD *)v25 + 11);
  v47 = v27[3];
  v48 = v27;
  v49 = v45;
  v50 = v48[4];
  sub_10012D19C(v48, v47);
  v51 = *(_OWORD *)(v25 + 40);
  v74[0] = *(_OWORD *)(v25 + 24);
  v74[1] = v51;
  v75[0] = *(_OWORD *)(v25 + 56);
  *(_QWORD *)((char *)v75 + 13) = *(_QWORD *)(v25 + 69);
  v52 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v50 + 80))(v74, v47, v50);
  v54 = v53;
  ObjectType = swift_getObjectType(v46);
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v49, v52, v54, ObjectType, v71);
  v56 = v70;
  sub_10013DD30(v52, v54);
  v57 = isa;
  v58 = (char *)-[objc_class completedUnitCount](isa, "completedUnitCount");
  if (__OFADD__(v58, 1))
    goto LABEL_25;
  -[objc_class setCompletedUnitCount:](v57, "setCompletedUnitCount:", v58 + 1);
  v59 = v68;
  v60 = *(_QWORD *)(v68 + 16);
  if (v60)
  {
    v61 = *(_QWORD *)(sub_100012E18(&qword_1005D0D98) - 8);
    v62 = v59 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    v63 = *(_QWORD *)(v61 + 72);
    v64 = swift_bridgeObjectRetain(v59);
    do
    {
      sub_100365910(v62, v26, isa, v64);
      v62 += v63;
      --v60;
    }
    while (v60);
    swift_bridgeObjectRelease(v68);
    v56 = v70;
  }
  sub_10036E158((char)objc_msgSend(v67, "completedUnitCount"));

  v65 = *(void (**)(char *, uint64_t))(v69 + 8);
  v65(v73, v56);
  v65((char *)v26, v56);
}

void sub_10036B0A4(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t AssociatedTypeWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  NSString v45;
  id v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t ObjectType;
  Class v57;
  char *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Class isa;
  id v70;
  _QWORD *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[2];
  _OWORD v77[2];
  uint64_t v78;

  v5 = v4;
  v74 = a3;
  v75 = a2;
  v8 = *v5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v66 - v14;
  NSProgress.throwIfCancelled()();
  if (v17)
    return;
  v70 = a4;
  v71 = v5;
  v72 = v13;
  v73 = v15;
  v67 = v10;
  v68 = v9;
  v78 = v75;
  __chkstk_darwin(v16);
  v18 = *(_QWORD *)(v8 + 80);
  v19 = *(_QWORD *)(v8 + 88);
  *(&v66 - 2) = v18;
  *(&v66 - 1) = v19;
  KeyPath = swift_getKeyPath(&unk_1004652B0, &v66 - 2);
  v21 = __chkstk_darwin(KeyPath);
  *(&v66 - 4) = v18;
  *(&v66 - 3) = v19;
  *(&v66 - 2) = v21;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v19);
  swift_getAssociatedConformanceWitness(v19, v18, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v23 = type metadata accessor for ICObjectReferences(255);
  v24 = type metadata accessor for Array(0, v23);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v24);
  v27 = sub_10035FDBC((void (*)(char *, char *))sub_10036F7B0, (uint64_t)(&v66 - 6), v24, (uint64_t)&type metadata for Int, (uint64_t)&type metadata for Never, WitnessTable, (uint64_t)&protocol witness table for Never, v26);
  swift_release(KeyPath);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v29 = 0;
    v30 = (uint64_t *)(v27 + 32);
    v31 = v72;
    while (1)
    {
      v32 = *v30++;
      v33 = __OFADD__(v29, v32);
      v29 += v32;
      if (v33)
        break;
      if (!--v28)
        goto LABEL_8;
    }
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v29 = 0;
  v31 = v72;
LABEL_8:
  swift_bridgeObjectRelease(v27);
  if (__OFADD__(v29, 1))
    goto LABEL_19;
  isa = NSProgress.addingChild(totalUnitCount:pendingUnitCount:)(v29 + 1, 1).super.isa;
  v34 = a1[3];
  v35 = a1[4];
  sub_10012D19C(a1, v34);
  (*(void (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
  if (v36)
  {
    v37 = v36;
    v38 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v38, "ic_sanitizedFilenameString", swift_bridgeObjectRelease(v37).n128_f64[0]);

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v42 = v41;

    v43 = HIBYTE(v42) & 0xF;
    if ((v42 & 0x2000000000000000) == 0)
      v43 = v40 & 0xFFFFFFFFFFFFLL;
    if (v43)
      goto LABEL_15;
    swift_bridgeObjectRelease(v42);
  }
  v44 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v44, "localizedStringForKey:value:table:", v45, 0, 0);

  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v42 = v47;
  swift_bridgeObjectRelease(0);

LABEL_15:
  v48 = v71;
  sub_100369638(v40, v42, v74, 1702129518, 0xE400000000000000, (uint64_t)v73);
  v66 = v24;
  swift_bridgeObjectRelease(v42);
  URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
  v49 = v48[10];
  v74 = v48[11];
  v50 = a1[3];
  v51 = a1[4];
  sub_10012D19C(a1, v50);
  v52 = *(_OWORD *)(v48 + 5);
  v76[0] = *(_OWORD *)(v48 + 3);
  v76[1] = v52;
  v77[0] = *(_OWORD *)(v48 + 7);
  *(_QWORD *)((char *)v77 + 13) = *(_QWORD *)((char *)v48 + 69);
  v53 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v51 + 80))(v76, v50, v51);
  v55 = v54;
  ObjectType = swift_getObjectType(v49);
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v31, v53, v55, ObjectType, v74);
  v57 = isa;
  sub_10013DD30(v53, v55);
  v58 = (char *)-[objc_class completedUnitCount](v57, "completedUnitCount");
  v59 = v68;
  if (__OFADD__(v58, 1))
  {
LABEL_20:
    __break(1u);
    return;
  }
  v60 = -[objc_class setCompletedUnitCount:](v57, "setCompletedUnitCount:", v58 + 1);
  v78 = v75;
  __chkstk_darwin(v60);
  v61 = (uint64_t)v73;
  *(&v66 - 4) = (uint64_t)v71;
  *(&v66 - 3) = v61;
  *(&v66 - 2) = (uint64_t)v57;
  v62 = v66;
  v63 = swift_getWitnessTable(&protocol conformance descriptor for [A], v66);
  Sequence.forEach(_:)(sub_10036F720, &v66 - 6, v62, v63);
  v64 = v72;
  sub_10036E274((char)objc_msgSend(v70, "completedUnitCount"));

  v65 = *(void (**)(char *, uint64_t))(v67 + 8);
  v65(v64, v59);
  v65((char *)v61, v59);
}

void sub_10036B6A0(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t (*__ptr32 *v34)();
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  char *v46;
  uint64_t (*__ptr32 *v47)();
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t ObjectType;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t (*__ptr32 *v63)();
  uint64_t v64;
  NSString v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  unint64_t v83;
  void (*v84)(char *, uint64_t);
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t (*__ptr32 *v109)();
  char *v110;
  uint64_t (*__ptr32 *v111)();
  uint64_t v112;
  uint64_t (*__ptr32 *v113)();
  uint64_t v114;
  NSObject *v115;
  uint64_t v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t (*__ptr32 *v131)();
  uint64_t v132;
  uint64_t (*__ptr32 *v133)();
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  __int128 v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  void (*v154)(char *, uint64_t);
  unint64_t v155;
  unint64_t v156;
  unint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  void (*v167)(char *, uint64_t);
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  uint64_t v171;
  os_log_type_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  double v179;
  uint64_t v180;
  id v181;
  char *v182;
  __n128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  __n128 v188;
  void (*v189)(char *, uint64_t, __n128);
  __n128 v190;
  void (*v191)(char *, uint64_t, __n128);
  uint64_t v192;
  char *v193;
  char *v194;
  char *v195;
  __int128 v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  char *v201;
  char *v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t (*__ptr32 *v213)();
  char v214[8];
  uint64_t v215;
  uint64_t v216;
  char v217[8];
  _QWORD v218[3];
  char v219[8];
  uint64_t v220;
  _QWORD v221[3];
  char v222[8];
  _QWORD v223[3];
  char v224[8];
  _OWORD v225[2];
  _BYTE v226[21];
  uint64_t v227;

  v208 = a3;
  v205 = a2;
  v212 = a1;
  v5 = sub_100012E18(&qword_1005CEFD0);
  v6 = __chkstk_darwin(v5);
  v209 = (char *)&v192 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v204 = (char *)&v192 - v8;
  v207 = type metadata accessor for URL(0);
  v211 = *(_QWORD *)(v207 - 8);
  v9 = __chkstk_darwin(v207);
  v203 = (char *)&v192 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v192 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v192 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v192 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v192 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v192 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v192 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v192 - v30;
  __chkstk_darwin(v29);
  v33 = (char *)&v192 - v32;
  NSProgress.throwIfCancelled()();
  v213 = v34;
  if (v34)
    return;
  v193 = v25;
  v194 = v28;
  v195 = v22;
  *(_QWORD *)&v196 = v19;
  v200 = v16;
  v201 = v13;
  v202 = v31;
  v206 = v33;
  v197 = a4;
  v35 = v212;
  v36 = v212[3];
  v37 = v212[4];
  sub_10012D19C(v212, v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
  if (v39)
  {
    v40 = v38;
    v41 = v39;
  }
  else
  {
    v42 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v43 = String._bridgeToObjectiveC()();
    v44 = objc_msgSend(v42, "localizedStringForKey:value:table:", v43, 0, 0);

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    v41 = v45;

  }
  v46 = v202;
  v47 = v213;
  v48 = v210;
  sub_1003690E0(v40, v41, v208, 0x656D686361747461, 0xEA0000000000746ELL, (uint64_t)v206);
  if (v47)
  {
    v213 = v47;
    swift_bridgeObjectRelease(v41);
    return;
  }
  swift_bridgeObjectRelease(v41);
  URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
  v49 = *(_QWORD *)(v48 + 80);
  v208 = *(_QWORD *)(v48 + 88);
  v50 = v35[3];
  v51 = v35[4];
  sub_10012D19C(v35, v50);
  v52 = *(_OWORD *)(v48 + 40);
  v225[0] = *(_OWORD *)(v48 + 24);
  v225[1] = v52;
  *(_OWORD *)v226 = *(_OWORD *)(v48 + 56);
  *(_QWORD *)&v226[13] = *(_QWORD *)(v48 + 69);
  v53 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v51 + 80))(v225, v50, v51);
  v55 = v54;
  ObjectType = swift_getObjectType(v49);
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v46, v53, v55, ObjectType, v208);
  v213 = 0;
  v198 = ObjectType;
  v199 = v49;
  sub_10013DD30(v53, v55);
  v57 = sub_1000163BC(0, &qword_1005DAA28, ICArchive_ptr);
  v58 = v212;
  v59 = v212[3];
  v60 = v212[4];
  v61 = sub_10012D19C(v212, v59);
  sub_100334674((uint64_t)v61, v57, v59, v60);
  v63 = &off_100451000;
  if (v62)
  {
    v64 = v62;
    v65 = String._bridgeToObjectiveC()();
    v66 = objc_msgSend(v65, "ic_sanitizedFilenameString", swift_bridgeObjectRelease(v64).n128_f64[0]);

    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
    v69 = v68;

    v70 = v58[3];
    v71 = v58[4];
    sub_10012D19C(v58, v70);
    v72 = (uint64_t)v204;
    (*(void (**)(uint64_t, uint64_t))(v71 + 40))(v70, v71);
    v73 = v211;
    v74 = v207;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v211 + 48))(v72, 1, v207) == 1)
    {
      sub_100012DDC(v72, &qword_1005CEFD0);
      v75 = v58[3];
      v76 = v58[4];
      sub_10012D19C(v58, v75);
      v77 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 48))(v75, v76);
      if (v78 >> 60 == 15)
      {
        swift_bridgeObjectRelease(v69);
        v79 = v207;
        v80 = v211;
LABEL_25:
        v63 = &off_100451000;
        goto LABEL_26;
      }
      v86 = v77;
      v87 = v78;
      v88 = v203;
      URL.appendingPathComponent(_:isDirectory:)(v67, v69, 0);
      swift_bridgeObjectRelease(v69);
      v89 = (unint64_t)v213;
      dispatch thunk of ICFileManaging.createFile(at:contents:)(v88, v86, v87, v198, v208);
      v85 = v89;
      v79 = v207;
      if (!v89)
      {
        v213 = 0;
        v80 = v211;
        (*(void (**)(char *, uint64_t))(v211 + 8))(v88, v207);
        sub_1001672D8(v86, v87);
        goto LABEL_25;
      }
      (*(void (**)(char *, uint64_t))(v211 + 8))(v88, v207);
      sub_1001672D8(v86, v87);
      v213 = 0;
    }
    else
    {
      v81 = v194;
      (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v194, v72, v74);
      v82 = v193;
      URL.appendingPathComponent(_:isDirectory:)(v67, v69, 0);
      swift_bridgeObjectRelease(v69);
      v83 = (unint64_t)v213;
      dispatch thunk of ICFileManaging.copyItem(at:to:)(v81, v82, v198, v208);
      if (!v83)
      {
        v213 = 0;
        v101 = *(void (**)(char *, uint64_t))(v73 + 8);
        v101(v82, v74);
        v101(v81, v74);
        v79 = v74;
        v80 = v73;
        goto LABEL_25;
      }
      v84 = *(void (**)(char *, uint64_t))(v73 + 8);
      v84(v82, v74);
      v84(v81, v74);
      v85 = v83;
      v213 = 0;
      v79 = v74;
    }
    v63 = &off_100451000;
    if (qword_1005CED48 != -1)
LABEL_86:
      swift_once(&qword_1005CED48, sub_100360364);
    v90 = type metadata accessor for Logger(0);
    sub_10012A0B0(v90, (uint64_t)qword_1005DA918);
    swift_errorRetain(v85);
    v91 = swift_errorRetain(v85);
    v92 = Logger.logObject.getter(v91);
    v94 = static os_log_type_t.error.getter(v92, v93);
    if (os_log_type_enabled(v92, v94))
    {
      v95 = (uint8_t *)swift_slowAlloc(12, -1);
      v96 = swift_slowAlloc(32, -1);
      v227 = v96;
      *(_DWORD *)v95 = *((_QWORD *)v63 + 289);
      swift_getErrorValue(v85, v217, v214);
      v97 = Error.localizedDescription.getter(v215, v216);
      v99 = v98;
      v220 = sub_1003A4190(v97, v98, &v227);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221, v95 + 4);
      swift_bridgeObjectRelease(v99);
      swift_errorRelease(v85);
      swift_errorRelease(v85);
      _os_log_impl((void *)&_mh_execute_header, v92, v94, "Cannot export attachment media file — skipping {error: %s}", v95, 0xCu);
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      v100 = v96;
      v79 = v207;
      swift_slowDealloc(v100, -1, -1);
      swift_slowDealloc(v95, -1, -1);

      swift_errorRelease(v85);
    }
    else
    {
      swift_errorRelease(v85);
      swift_errorRelease(v85);
      swift_errorRelease(v85);

    }
  }
  else
  {
    v79 = v207;
  }
  v80 = v211;
LABEL_26:
  v102 = v212[3];
  v103 = v212[4];
  sub_10012D19C(v212, v102);
  v104 = (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 64))(v102, v103);
  if (v105 >> 60 != 15)
  {
    v106 = v104;
    v107 = v105;
    v108 = v195;
    URL.appendingPathComponent(_:isDirectory:)(0x2E77656976657250, 0xEB00000000676E70, 0);
    v109 = v213;
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v108, v106, v107, v198, v208);
    v213 = v109;
    if (v109)
    {
      v110 = v108;
      v111 = v63;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v110, v79);
      if (qword_1005CED48 != -1)
        swift_once(&qword_1005CED48, sub_100360364);
      v112 = type metadata accessor for Logger(0);
      sub_10012A0B0(v112, (uint64_t)qword_1005DA918);
      v113 = v213;
      swift_errorRetain(v213);
      v114 = swift_errorRetain(v113);
      v115 = Logger.logObject.getter(v114);
      v117 = static os_log_type_t.error.getter(v115, v116);
      if (os_log_type_enabled(v115, v117))
      {
        v118 = (uint8_t *)swift_slowAlloc(12, -1);
        v119 = swift_slowAlloc(32, -1);
        v227 = v119;
        *(_DWORD *)v118 = *((_QWORD *)v111 + 289);
        v204 = (char *)(v118 + 4);
        swift_getErrorValue(v113, v219, v218);
        v120 = Error.localizedDescription.getter(v218[1], v218[2]);
        v122 = v121;
        v220 = sub_1003A4190(v120, v121, &v227);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221, v204);
        swift_bridgeObjectRelease(v122);
        swift_errorRelease(v113);
        swift_errorRelease(v113);
        _os_log_impl((void *)&_mh_execute_header, v115, v117, "Cannot export attachment preview image file — skipping {error: %s}", v118, 0xCu);
        swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
        v123 = v119;
        v79 = v207;
        swift_slowDealloc(v123, -1, -1);
        swift_slowDealloc(v118, -1, -1);
        sub_1001672D8(v106, v107);

        v63 = &off_100451000;
        swift_errorRelease(v113);
        v213 = 0;
        v80 = v211;
      }
      else
      {
        sub_1001672D8(v106, v107);
        swift_errorRelease(v113);
        swift_errorRelease(v113);
        swift_errorRelease(v113);

        v213 = 0;
        v80 = v211;
        v63 = v111;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v80 + 8))(v108, v79);
      sub_1001672D8(v106, v107);
    }
  }
  v124 = v212[3];
  v125 = v212[4];
  sub_10012D19C(v212, v124);
  v126 = (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 72))(v124, v125);
  if (v127 >> 60 != 15)
  {
    v128 = v126;
    v129 = v127;
    v130 = v196;
    URL.appendingPathComponent(_:isDirectory:)(0x2E77656976657250, 0xEB00000000666470, 0);
    v131 = v213;
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v130, v128, v129, v198, v208);
    v213 = v131;
    if (v131)
    {
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v130, v79);
      if (qword_1005CED48 != -1)
        swift_once(&qword_1005CED48, sub_100360364);
      v132 = type metadata accessor for Logger(0);
      sub_10012A0B0(v132, (uint64_t)qword_1005DA918);
      v133 = v213;
      swift_errorRetain(v213);
      v134 = swift_errorRetain(v133);
      v135 = Logger.logObject.getter(v134);
      v137 = static os_log_type_t.error.getter(v135, v136);
      if (os_log_type_enabled(v135, v137))
      {
        v138 = (uint8_t *)swift_slowAlloc(12, -1);
        v139 = swift_slowAlloc(32, -1);
        v227 = v139;
        *(_DWORD *)v138 = 136315138;
        v204 = (char *)(v138 + 4);
        swift_getErrorValue(v133, v222, v221);
        v140 = Error.localizedDescription.getter(v221[1], v221[2]);
        v142 = v141;
        v220 = sub_1003A4190(v140, v141, &v227);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v220, v221, v204);
        swift_bridgeObjectRelease(v142);
        swift_errorRelease(v133);
        swift_errorRelease(v133);
        _os_log_impl((void *)&_mh_execute_header, v135, v137, "Cannot export attachment fallback PDF file — skipping {error: %s}", v138, 0xCu);
        swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
        v143 = v139;
        v79 = v207;
        swift_slowDealloc(v143, -1, -1);
        swift_slowDealloc(v138, -1, -1);
        sub_1001672D8(v128, v129);

        v63 = &off_100451000;
        swift_errorRelease(v133);
        v213 = 0;
        v80 = v211;
      }
      else
      {
        sub_1001672D8(v128, v129);
        swift_errorRelease(v133);
        swift_errorRelease(v133);
        swift_errorRelease(v133);

        v213 = 0;
        v80 = v211;
        v63 = &off_100451000;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v130, v79);
      sub_1001672D8(v128, v129);
    }
  }
  v144 = v212[3];
  v145 = v212[4];
  sub_10012D19C(v212, v144);
  v146 = (*(uint64_t (**)(uint64_t, uint64_t))(v145 + 56))(v144, v145);
  v148 = 0;
  v149 = *(_QWORD *)(v146 + 56);
  v203 = (char *)(v146 + 56);
  v212 = (_QWORD *)v146;
  v150 = 1 << *(_BYTE *)(v146 + 32);
  v151 = -1;
  if (v150 < 64)
    v151 = ~(-1 << v150);
  v85 = v151 & v149;
  v204 = (char *)((unint64_t)(v150 + 63) >> 6);
  *(_QWORD *)&v147 = *((_QWORD *)v63 + 289);
  v196 = v147;
  v195 = (char *)&type metadata for Any + 8;
  v152 = v209;
  v153 = v200;
  v63 = v213;
  while (1)
  {
    if (v85)
    {
      v155 = __clz(__rbit64(v85));
      v85 &= v85 - 1;
      v156 = v155 | (v148 << 6);
      goto LABEL_62;
    }
    if (__OFADD__(v148++, 1))
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }
    if (v148 >= (uint64_t)v204)
      goto LABEL_74;
    v158 = *(_QWORD *)&v203[8 * v148];
    if (!v158)
      break;
LABEL_61:
    v85 = (v158 - 1) & v158;
    v156 = __clz(__rbit64(v158)) + (v148 << 6);
LABEL_62:
    (*(void (**)(char *, unint64_t, uint64_t))(v80 + 16))(v152, v212[6] + *(_QWORD *)(v80 + 72) * v156, v79);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v152, 0, 1, v79);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v152, 1, v79) == 1)
      goto LABEL_75;
    v213 = (uint64_t (*__ptr32 *)())v85;
    v160 = v148;
    v161 = (*(uint64_t (**)(char *, char *, uint64_t))(v80 + 32))(v153, v152, v79);
    v162 = URL.lastPathComponent.getter(v161);
    v164 = v163;
    v165 = v79;
    v166 = v201;
    URL.appendingPathComponent(_:isDirectory:)(v162, v163, 0);
    swift_bridgeObjectRelease(v164);
    dispatch thunk of ICFileManaging.copyItem(at:to:)(v153, v166, v198, v208);
    if (v63)
    {
      v167 = *(void (**)(char *, uint64_t))(v80 + 8);
      v167(v166, v165);
      v79 = v165;
      if (qword_1005CED48 != -1)
        swift_once(&qword_1005CED48, sub_100360364);
      v168 = type metadata accessor for Logger(0);
      sub_10012A0B0(v168, (uint64_t)qword_1005DA918);
      swift_errorRetain(v63);
      v169 = swift_errorRetain(v63);
      v170 = Logger.logObject.getter(v169);
      v172 = static os_log_type_t.error.getter(v170, v171);
      v148 = v160;
      if (os_log_type_enabled(v170, v172))
      {
        v173 = swift_slowAlloc(12, -1);
        v174 = swift_slowAlloc(32, -1);
        v227 = v174;
        *(_DWORD *)v173 = v196;
        swift_getErrorValue(v63, v224, v223);
        v175 = Error.localizedDescription.getter(v223[1], v223[2]);
        v177 = v176;
        *(_QWORD *)(v173 + 4) = sub_1003A4190(v175, v176, &v227);
        swift_bridgeObjectRelease(v177);
        swift_errorRelease(v63);
        swift_errorRelease(v63);
        _os_log_impl((void *)&_mh_execute_header, v170, v172, "Cannot export attachment asset file — skipping {error: %s}", (uint8_t *)v173, 0xCu);
        swift_arrayDestroy(v174, 1, v195);
        swift_slowDealloc(v174, -1, -1);
        v178 = v173;
        v79 = v207;
        swift_slowDealloc(v178, -1, -1);

      }
      else
      {

        swift_errorRelease(v63);
        swift_errorRelease(v63);
      }
      swift_errorRelease(v63);
      v153 = v200;
      v167(v200, v79);
      v63 = 0;
      v80 = v211;
      v152 = v209;
    }
    else
    {
      v154 = *(void (**)(char *, uint64_t))(v80 + 8);
      v154(v166, v165);
      v154(v153, v165);
      v152 = v209;
      v79 = v165;
      v148 = v160;
    }
    v85 = (unint64_t)v213;
  }
  v159 = v148 + 1;
  if (v148 + 1 >= (uint64_t)v204)
    goto LABEL_74;
  v158 = *(_QWORD *)&v203[8 * v159];
  if (v158)
    goto LABEL_60;
  v159 = v148 + 2;
  if (v148 + 2 >= (uint64_t)v204)
    goto LABEL_74;
  v158 = *(_QWORD *)&v203[8 * v159];
  if (v158)
    goto LABEL_60;
  v159 = v148 + 3;
  if (v148 + 3 >= (uint64_t)v204)
    goto LABEL_74;
  v158 = *(_QWORD *)&v203[8 * v159];
  if (v158)
  {
LABEL_60:
    v148 = v159;
    goto LABEL_61;
  }
  v159 = v148 + 4;
  if (v148 + 4 < (uint64_t)v204)
  {
    v158 = *(_QWORD *)&v203[8 * v159];
    if (!v158)
    {
      while (1)
      {
        v148 = v159 + 1;
        if (__OFADD__(v159, 1))
          break;
        if (v148 >= (uint64_t)v204)
          goto LABEL_74;
        v158 = *(_QWORD *)&v203[8 * v148];
        ++v159;
        if (v158)
          goto LABEL_61;
      }
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
    goto LABEL_60;
  }
LABEL_74:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v152, 1, 1, v79);
LABEL_75:
  *(_QWORD *)&v179 = swift_release(v212).n128_u64[0];
  v180 = v205;
  v181 = v197;
  v182 = (char *)objc_msgSend(v197, "completedUnitCount", v179);
  if (__OFADD__(v182, 1))
    goto LABEL_84;
  objc_msgSend(v181, "setCompletedUnitCount:", v182 + 1);
  v184 = *(_QWORD *)(v180 + 16);
  if (v184)
  {
    v185 = *(_QWORD *)(sub_100012E18(&qword_1005D0D98) - 8);
    v186 = v180 + ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80));
    v187 = *(_QWORD *)(v185 + 72);
    v188 = swift_bridgeObjectRetain(v180);
    while (1)
    {
      sub_100365910(v186, v206, v181, v188);
      if (v63)
        break;
      v186 += v187;
      if (!--v184)
      {
        v183 = swift_bridgeObjectRelease(v180);
        goto LABEL_81;
      }
    }
    v213 = v63;
    v190 = swift_bridgeObjectRelease(v180);
    v191 = *(void (**)(char *, uint64_t, __n128))(v80 + 8);
    v191(v202, v79, v190);
    ((void (*)(char *, uint64_t))v191)(v206, v79);
  }
  else
  {
LABEL_81:
    v189 = *(void (**)(char *, uint64_t, __n128))(v80 + 8);
    v189(v202, v79, v183);
    ((void (*)(char *, uint64_t))v189)(v206, v79);
  }
}

void sub_10036CBB4(_QWORD *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char **v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSString v44;
  id v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t ObjectType;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  NSString v67;
  id v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  void (*v100)(char *, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  uint64_t v131;
  os_log_type_t v132;
  uint8_t *v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  int64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  void (*v151)(char *, uint64_t);
  unint64_t v152;
  _QWORD *v153;
  unint64_t v154;
  unint64_t v156;
  int64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  void (*v165)(char *, uint64_t);
  uint64_t v166;
  uint64_t v167;
  NSObject *v168;
  uint64_t v169;
  os_log_type_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  uint64_t v176;
  double v177;
  void *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  id v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t AssociatedTypeWitness;
  uint64_t v187;
  uint64_t v188;
  uint64_t WitnessTable;
  void (*v190)(char *, uint64_t);
  char *v191;
  char *v192;
  __int128 v193;
  char *v194;
  int64_t v195;
  void *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  _QWORD *v210;
  char **v211;
  char v212[8];
  uint64_t v213;
  uint64_t v214;
  char v215[8];
  _QWORD v216[3];
  char v217[8];
  uint64_t v218;
  _QWORD v219[3];
  char v220[8];
  _QWORD v221[3];
  char v222[8];
  _OWORD v223[2];
  _BYTE v224[21];
  uint64_t v225;

  v207 = a3;
  v201 = a2;
  v210 = a1;
  v202 = *v4;
  v6 = sub_100012E18(&qword_1005CEFD0);
  v7 = __chkstk_darwin(v6);
  v204 = (char *)&v191 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v200 = (char *)&v191 - v9;
  v205 = type metadata accessor for URL(0);
  v208 = *(_QWORD *)(v205 - 8);
  v10 = __chkstk_darwin(v205);
  v206 = (char *)&v191 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v203 = (char *)&v191 - v13;
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v191 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v191 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v191 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v191 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v191 - v27;
  v29 = __chkstk_darwin(v26);
  v31 = (char *)&v191 - v30;
  __chkstk_darwin(v29);
  v33 = (char **)((char *)&v191 - v32);
  NSProgress.throwIfCancelled()();
  if (v34)
    return;
  v192 = v25;
  *(_QWORD *)&v193 = v28;
  v191 = v22;
  v194 = v19;
  v195 = (int64_t)v16;
  v198 = 0;
  v199 = v31;
  v196 = a4;
  v211 = v33;
  v35 = v210;
  v36 = v210[3];
  v37 = v210[4];
  sub_10012D19C(v210, v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
  if (v39)
  {
    v40 = v38;
    v41 = v39;
    v42 = v198;
  }
  else
  {
    v42 = v198;
    v43 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v44 = String._bridgeToObjectiveC()();
    v45 = objc_msgSend(v43, "localizedStringForKey:value:table:", v44, 0, 0);

    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
    v41 = v46;

  }
  v47 = v209;
  v48 = v199;
  sub_100369638(v40, v41, v207, 0x656D686361747461, 0xEA0000000000746ELL, (uint64_t)v211);
  if (v42)
  {
    swift_bridgeObjectRelease(v41);
    return;
  }
  swift_bridgeObjectRelease(v41);
  URL.appendingPathComponent(_:isDirectory:)(0x6F736A2E6F666E69, 0xE90000000000006ELL, 0);
  v49 = *((_QWORD *)v47 + 10);
  v207 = *((_QWORD *)v47 + 11);
  v50 = v35[3];
  v51 = v35[4];
  sub_10012D19C(v35, v50);
  v52 = *(_OWORD *)(v47 + 40);
  v223[0] = *(_OWORD *)(v47 + 24);
  v223[1] = v52;
  *(_OWORD *)v224 = *(_OWORD *)(v47 + 56);
  *(_QWORD *)&v224[13] = *(_QWORD *)(v47 + 69);
  v53 = (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v51 + 80))(v223, v50, v51);
  v55 = v54;
  ObjectType = swift_getObjectType(v49);
  v57 = v207;
  dispatch thunk of ICFileManaging.createFile(at:contents:)(v48, v53, v55, ObjectType, v207);
  v58 = v49;
  v59 = 0;
  v198 = v58;
  sub_10013DD30(v53, v55);
  v60 = sub_1000163BC(0, &qword_1005DAA28, ICArchive_ptr);
  v61 = v210;
  v62 = v210[3];
  v63 = v210[4];
  v64 = sub_10012D19C(v210, v62);
  sub_100334674((uint64_t)v64, v60, v62, v63);
  v197 = ObjectType;
  if (!v65)
  {
    v82 = v208;
    goto LABEL_19;
  }
  v66 = v65;
  v67 = String._bridgeToObjectiveC()();
  v68 = objc_msgSend(v67, "ic_sanitizedFilenameString", swift_bridgeObjectRelease(v66).n128_f64[0]);

  v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
  v70 = v61;
  v72 = v71;

  v73 = v70[3];
  v74 = v70[4];
  sub_10012D19C(v70, v73);
  v75 = (uint64_t)v200;
  (*(void (**)(uint64_t, uint64_t))(v74 + 40))(v73, v74);
  v76 = v208;
  v77 = v205;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v208 + 48))(v75, 1, v205) != 1)
  {
    v83 = (char *)v193;
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v76 + 32))(v193, v75, v77);
    v84 = v192;
    URL.appendingPathComponent(_:isDirectory:)(v69, v72, 0);
    swift_bridgeObjectRelease(v72);
    ObjectType = v197;
    dispatch thunk of ICFileManaging.copyItem(at:to:)(v83, v84, v197, v57);
    v59 = 0;
    v99 = v84;
    v82 = v76;
    v100 = *(void (**)(char *, uint64_t))(v76 + 8);
    v100(v99, v77);
    v100(v83, v77);
LABEL_18:
    v61 = v210;
    goto LABEL_19;
  }
  sub_100012DDC(v75, &qword_1005CEFD0);
  v78 = v70[3];
  v79 = v70[4];
  sub_10012D19C(v70, v78);
  v80 = (*(uint64_t (**)(uint64_t, uint64_t))(v79 + 48))(v78, v79);
  if (v81 >> 60 != 15)
  {
    v85 = v80;
    v86 = v81;
    v87 = v191;
    URL.appendingPathComponent(_:isDirectory:)(v69, v72, 0);
    swift_bridgeObjectRelease(v72);
    ObjectType = v197;
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v87, v85, v86, v197, v207);
    v82 = v208;
    (*(void (**)(char *, uint64_t))(v208 + 8))(v87, v205);
    sub_1001672D8(v85, v86);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease(v72);
  v82 = v208;
  v61 = v210;
  ObjectType = v197;
LABEL_19:
  v101 = v61[3];
  v102 = v61[4];
  sub_10012D19C(v61, v101);
  v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 64))(v101, v102);
  if (v104 >> 60 != 15)
  {
    v105 = v103;
    v106 = v104;
    v107 = v194;
    URL.appendingPathComponent(_:isDirectory:)(0x2E77656976657250, 0xEB00000000676E70, 0);
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v107, v105, v106, ObjectType, v207);
    if (v59)
    {
      (*(void (**)(char *, uint64_t))(v82 + 8))(v107, v205);
      if (qword_1005CED48 != -1)
        swift_once(&qword_1005CED48, sub_100360364);
      v108 = type metadata accessor for Logger(0);
      sub_10012A0B0(v108, (uint64_t)qword_1005DA918);
      swift_errorRetain(v59);
      v109 = swift_errorRetain(v59);
      v110 = Logger.logObject.getter(v109);
      v112 = static os_log_type_t.error.getter(v110, v111);
      if (os_log_type_enabled(v110, v112))
      {
        v113 = (uint8_t *)swift_slowAlloc(12, -1);
        v114 = swift_slowAlloc(32, -1);
        v225 = v114;
        *(_DWORD *)v113 = 136315138;
        v200 = (char *)(v113 + 4);
        swift_getErrorValue(v59, v217, v216);
        v115 = Error.localizedDescription.getter(v216[1], v216[2]);
        v117 = v116;
        v218 = sub_1003A4190(v115, v116, &v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v200);
        swift_bridgeObjectRelease(v117);
        swift_errorRelease(v59);
        swift_errorRelease(v59);
        _os_log_impl((void *)&_mh_execute_header, v110, v112, "Cannot export attachment preview image file — skipping {error: %s}", v113, 0xCu);
        swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
        v118 = v114;
        ObjectType = v197;
        swift_slowDealloc(v118, -1, -1);
        v119 = v113;
        v61 = v210;
        swift_slowDealloc(v119, -1, -1);
        sub_1001672D8(v105, v106);

        swift_errorRelease(v59);
      }
      else
      {
        sub_1001672D8(v105, v106);
        swift_errorRelease(v59);
        swift_errorRelease(v59);
        swift_errorRelease(v59);

      }
      v59 = 0;
      v82 = v208;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v82 + 8))(v107, v205);
      sub_1001672D8(v105, v106);
    }
  }
  v120 = v61[3];
  v121 = v61[4];
  sub_10012D19C(v61, v120);
  v122 = (*(uint64_t (**)(uint64_t, uint64_t))(v121 + 72))(v120, v121);
  if (v123 >> 60 == 15)
  {
    v124 = v82;
  }
  else
  {
    v125 = v122;
    v126 = v123;
    v127 = v195;
    URL.appendingPathComponent(_:isDirectory:)(0x2E77656976657250, 0xEB00000000666470, 0);
    dispatch thunk of ICFileManaging.createFile(at:contents:)(v127, v125, v126, ObjectType, v207);
    if (v59)
    {
      (*(void (**)(int64_t, uint64_t))(v82 + 8))(v127, v205);
      if (qword_1005CED48 != -1)
        swift_once(&qword_1005CED48, sub_100360364);
      v128 = type metadata accessor for Logger(0);
      sub_10012A0B0(v128, (uint64_t)qword_1005DA918);
      swift_errorRetain(v59);
      v129 = swift_errorRetain(v59);
      v130 = Logger.logObject.getter(v129);
      v132 = static os_log_type_t.error.getter(v130, v131);
      if (os_log_type_enabled(v130, v132))
      {
        v133 = (uint8_t *)swift_slowAlloc(12, -1);
        v134 = swift_slowAlloc(32, -1);
        v225 = v134;
        *(_DWORD *)v133 = 136315138;
        v200 = (char *)(v133 + 4);
        swift_getErrorValue(v59, v220, v219);
        v135 = Error.localizedDescription.getter(v219[1], v219[2]);
        v137 = v136;
        v218 = sub_1003A4190(v135, v136, &v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v200);
        swift_bridgeObjectRelease(v137);
        swift_errorRelease(v59);
        swift_errorRelease(v59);
        _os_log_impl((void *)&_mh_execute_header, v130, v132, "Cannot export attachment fallback PDF file — skipping {error: %s}", v133, 0xCu);
        swift_arrayDestroy(v134, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v134, -1, -1);
        v138 = v133;
        v61 = v210;
        swift_slowDealloc(v138, -1, -1);
        sub_1001672D8(v125, v126);

        swift_errorRelease(v59);
      }
      else
      {
        sub_1001672D8(v125, v126);
        swift_errorRelease(v59);
        swift_errorRelease(v59);
        swift_errorRelease(v59);

      }
      v59 = 0;
      v124 = v208;
    }
    else
    {
      v124 = v82;
      (*(void (**)(int64_t, uint64_t))(v82 + 8))(v127, v205);
      sub_1001672D8(v125, v126);
    }
  }
  v139 = v61[3];
  v140 = v61[4];
  sub_10012D19C(v61, v139);
  v141 = (*(uint64_t (**)(uint64_t, uint64_t))(v140 + 56))(v139, v140);
  v143 = 0;
  v144 = *(_QWORD *)(v141 + 56);
  v194 = (char *)(v141 + 56);
  v200 = (char *)v141;
  v145 = 1 << *(_BYTE *)(v141 + 32);
  v146 = -1;
  if (v145 < 64)
    v146 = ~(-1 << v145);
  v147 = v146 & v144;
  v195 = (unint64_t)(v145 + 63) >> 6;
  *(_QWORD *)&v142 = 136315138;
  v193 = v142;
  v192 = (char *)&type metadata for Any + 8;
  v148 = (uint64_t)v204;
  v149 = v203;
  ObjectType = v59;
  v59 = v205;
  while (1)
  {
    if (v147)
    {
      v152 = __clz(__rbit64(v147));
      v153 = (_QWORD *)((v147 - 1) & v147);
      v154 = v152 | (v143 << 6);
      goto LABEL_56;
    }
    if (__OFADD__(v143++, 1))
    {
      __break(1u);
      goto LABEL_74;
    }
    if (v143 >= v195)
      goto LABEL_69;
    v156 = *(_QWORD *)&v194[8 * v143];
    if (!v156)
      break;
LABEL_55:
    v153 = (_QWORD *)((v156 - 1) & v156);
    v154 = __clz(__rbit64(v156)) + (v143 << 6);
LABEL_56:
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v124 + 16))(v148, *((_QWORD *)v200 + 6) + *(_QWORD *)(v124 + 72) * v154, v59);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v124 + 56))(v148, 0, 1, v59);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v124 + 48))(v148, 1, v59) == 1)
    {
      *(_QWORD *)&v177 = swift_release(v200).n128_u64[0];
      v178 = v196;
      v179 = v202;
      v148 = v201;
      v180 = (uint64_t)v211;
      goto LABEL_70;
    }
    v210 = v153;
    v158 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 32))(v149, v148, v59);
    v159 = v59;
    v160 = v149;
    v161 = URL.lastPathComponent.getter(v158);
    v163 = v162;
    v164 = v206;
    URL.appendingPathComponent(_:isDirectory:)(v161, v162, 0);
    swift_bridgeObjectRelease(v163);
    dispatch thunk of ICFileManaging.copyItem(at:to:)(v160, v164, v197, v207);
    if (ObjectType)
    {
      v165 = *(void (**)(char *, uint64_t))(v124 + 8);
      v165(v164, v159);
      v59 = v159;
      if (qword_1005CED48 != -1)
        swift_once(&qword_1005CED48, sub_100360364);
      v166 = type metadata accessor for Logger(0);
      sub_10012A0B0(v166, (uint64_t)qword_1005DA918);
      swift_errorRetain(ObjectType);
      v167 = swift_errorRetain(ObjectType);
      v168 = Logger.logObject.getter(v167);
      v170 = static os_log_type_t.error.getter(v168, v169);
      if (os_log_type_enabled(v168, v170))
      {
        v171 = swift_slowAlloc(12, -1);
        v172 = swift_slowAlloc(32, -1);
        v225 = v172;
        *(_DWORD *)v171 = v193;
        swift_getErrorValue(ObjectType, v222, v221);
        v173 = Error.localizedDescription.getter(v221[1], v221[2]);
        v175 = v174;
        *(_QWORD *)(v171 + 4) = sub_1003A4190(v173, v174, &v225);
        swift_bridgeObjectRelease(v175);
        swift_errorRelease(ObjectType);
        swift_errorRelease(ObjectType);
        _os_log_impl((void *)&_mh_execute_header, v168, v170, "Cannot export attachment asset file — skipping {error: %s}", (uint8_t *)v171, 0xCu);
        swift_arrayDestroy(v172, 1, v192);
        swift_slowDealloc(v172, -1, -1);
        v176 = v171;
        v59 = v205;
        swift_slowDealloc(v176, -1, -1);

      }
      else
      {

        swift_errorRelease(ObjectType);
        swift_errorRelease(ObjectType);
      }
      swift_errorRelease(ObjectType);
      v149 = v203;
      v165(v203, v59);
      ObjectType = 0;
      v124 = v208;
      v148 = (uint64_t)v204;
    }
    else
    {
      v150 = v164;
      v151 = *(void (**)(char *, uint64_t))(v124 + 8);
      v151(v150, v159);
      v151(v160, v159);
      v149 = v160;
      v59 = v159;
    }
    v147 = (unint64_t)v210;
  }
  v157 = v143 + 1;
  if (v143 + 1 >= v195)
    goto LABEL_69;
  v156 = *(_QWORD *)&v194[8 * v157];
  if (v156)
    goto LABEL_54;
  v157 = v143 + 2;
  if (v143 + 2 >= v195)
    goto LABEL_69;
  v156 = *(_QWORD *)&v194[8 * v157];
  if (v156)
  {
LABEL_54:
    v143 = v157;
    goto LABEL_55;
  }
  v157 = v143 + 3;
  if (v143 + 3 < v195)
  {
    v156 = *(_QWORD *)&v194[8 * v157];
    if (!v156)
    {
      while (1)
      {
        v143 = v157 + 1;
        if (__OFADD__(v157, 1))
          break;
        if (v143 >= v195)
          goto LABEL_69;
        v156 = *(_QWORD *)&v194[8 * v143];
        ++v157;
        if (v156)
          goto LABEL_55;
      }
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
      swift_once(&qword_1005CED48, sub_100360364);
      v88 = type metadata accessor for Logger(0);
      sub_10012A0B0(v88, (uint64_t)qword_1005DA918);
      swift_errorRetain(v148);
      v89 = swift_errorRetain(v148);
      v90 = Logger.logObject.getter(v89);
      v92 = static os_log_type_t.error.getter(v90, v91);
      if (os_log_type_enabled(v90, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc(12, -1);
        v94 = swift_slowAlloc(32, -1);
        v225 = v94;
        *(_DWORD *)v93 = 136315138;
        swift_getErrorValue(v148, v215, v212);
        v95 = Error.localizedDescription.getter(v213, v214);
        v97 = v96;
        v218 = sub_1003A4190(v95, v96, &v225);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v93 + 4);
        swift_bridgeObjectRelease(v97);
        swift_errorRelease(v148);
        swift_errorRelease(v148);
        _os_log_impl((void *)&_mh_execute_header, v90, v92, "Cannot export attachment media file — skipping {error: %s}", v93, 0xCu);
        swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
        v98 = v94;
        ObjectType = v197;
        swift_slowDealloc(v98, -1, -1);
        swift_slowDealloc(v93, -1, -1);

        swift_errorRelease(v148);
      }
      else
      {
        swift_errorRelease(v148);
        swift_errorRelease(v148);
        swift_errorRelease(v148);

      }
      v82 = v208;
      goto LABEL_18;
    }
    goto LABEL_54;
  }
LABEL_69:
  v178 = v196;
  v179 = v202;
  v148 = v201;
  v180 = (uint64_t)v211;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v124 + 56))(v204, 1, 1, v59);
  *(_QWORD *)&v177 = swift_release(v200).n128_u64[0];
LABEL_70:
  v181 = (char *)objc_msgSend(v178, "completedUnitCount", v177);
  if (__OFADD__(v181, 1))
    goto LABEL_75;
  v182 = objc_msgSend(v178, "setCompletedUnitCount:", v181 + 1);
  v211 = &v191;
  v225 = v148;
  __chkstk_darwin(v182);
  *(&v191 - 4) = v209;
  *(&v191 - 3) = (char *)v180;
  *(&v191 - 2) = (char *)v178;
  v185 = v179 + 80;
  v184 = *(_QWORD *)(v179 + 80);
  v183 = *(_QWORD *)(v185 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v183);
  swift_getAssociatedConformanceWitness(v183, v184, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v187 = type metadata accessor for ICObjectReferences(255);
  v188 = type metadata accessor for Array(0, v187);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v188);
  Sequence.forEach(_:)(sub_10036F720, &v191 - 6, v188, WitnessTable);
  v190 = *(void (**)(char *, uint64_t))(v124 + 8);
  v190(v199, v59);
  v190((char *)v180, v59);
}

uint64_t sub_10036E0C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t result;

  v4 = *(_QWORD *)(a2 + a1 - 16);
  v5 = *(_QWORD *)(a2 + a1 - 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
  swift_getAssociatedConformanceWitness(v5, v4, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
  v7 = type metadata accessor for ICObjectReferences(0);
  result = ICObjectReferences.recursiveAttachmentCount.getter(v7);
  *a3 = result;
  return result;
}

void sub_10036E158(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void *v10;

  v2 = v1;
  if ((*(_BYTE *)(v1 + 112) & 1) != 0 || (a1 & 0x1F) == 0)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = qword_1005CED48;
    swift_retain(*(_QWORD *)(v2 + 16));
    if (v4 != -1)
      swift_once(&qword_1005CED48, sub_100360364);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10012A0B0(v5, (uint64_t)qword_1005DA918);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Resetting context…", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = (void *)ICModernObjectProvider.context.getter();
    objc_msgSend(v10, "reset");
    swift_release(v3);

    *(_BYTE *)(v2 + 112) = 0;
  }
}

void sub_10036E274(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;

  v2 = v1;
  if ((*(_BYTE *)(v1 + 112) & 1) != 0 || (a1 & 0x1F) == 0)
  {
    v3 = *(_QWORD *)(v1 + 16);
    v4 = type metadata accessor for ICModernObjectProvider(0);
    if (swift_dynamicCastClass(v3, v4))
    {
      v5 = qword_1005CED48;
      swift_unknownObjectRetain(v3);
      if (v5 != -1)
        swift_once(&qword_1005CED48, sub_100360364);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10012A0B0(v6, (uint64_t)qword_1005DA918);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v10 = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Resetting context…", v10, 2u);
        swift_slowDealloc(v10, -1, -1);
      }

      v11 = (void *)ICModernObjectProvider.context.getter();
      objc_msgSend(v11, "reset");
      swift_unknownObjectRelease(v3, v12);

    }
    *(_BYTE *)(v2 + 112) = 0;
  }
}

uint64_t sub_10036E3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    *(_BYTE *)(result + 112) = 1;
    return swift_release(result);
  }
  return result;
}

uint64_t ICArchiveExporterConfiguration.creator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100012CE8(v1, a1, qword_1005DA948);
}

uint64_t ICArchiveExporterConfiguration.creator.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_100164108(a1, v1, qword_1005DA948);
}

uint64_t ICArchiveExporterConfiguration.exportsActivities.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t ICArchiveExporterConfiguration.exportsActivities.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 48) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.exportsActivities.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveExporterConfiguration.exportsAttributions.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t ICArchiveExporterConfiguration.exportsAttributions.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 49) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.exportsAttributions.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveExporterConfiguration.exportsViewDates.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 50);
}

uint64_t ICArchiveExporterConfiguration.exportsViewDates.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 50) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.exportsViewDates.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveExporterConfiguration.exportsInternalProperties.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 51);
}

uint64_t ICArchiveExporterConfiguration.exportsInternalProperties.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 51) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.exportsInternalProperties.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t ICArchiveExporterConfiguration.forPagesHandoff.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 52);
}

uint64_t ICArchiveExporterConfiguration.forPagesHandoff.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 52) = result;
  return result;
}

uint64_t (*ICArchiveExporterConfiguration.forPagesHandoff.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

void sub_10036E4E0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t IsAlexandriaDemoModeEnabled;
  char v13;
  uint64_t v14;
  uint64_t ObjectType;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  __int16 v24;

  v1 = (void *)objc_opt_self(ICNoteContext);
  v2 = v0;
  v3 = objc_msgSend(v1, "sharedContext");
  if (v3
    && (v4 = v3,
        v5 = objc_msgSend(v3, "snapshotManagedObjectContext"),
        v4,
        v5))
  {
    ObjectType = swift_getObjectType(v2);

    if (qword_1005CED18 != -1)
      swift_once(&qword_1005CED18, sub_100345FC4);
    v6 = static ICArchiveCreator.default;
    v8 = qword_100601D88;
    v7 = unk_100601D90;
    v9 = qword_100601D98;
    v10 = qword_100601DA0;
    swift_bridgeObjectRetain(qword_100601DA0);
    swift_bridgeObjectRetain(*((_QWORD *)&v6 + 1));
    swift_bridgeObjectRetain(v7);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v11);
    v13 = IsAlexandriaDemoModeEnabled;
    v14 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    v16 = v6;
    v17 = v8;
    v18 = v7;
    v19 = v9;
    v20 = v10;
    v21 = v13;
    v22 = v14;
    v23 = ICInternalSettingsIsAlexandriaDemoModeEnabled(v14);
    v24 = 0;
    sub_10036F92C(v5, (uint64_t)&v16);

    swift_deallocPartialClassInstance(v2, ObjectType, 16, 7);
  }
  else
  {
    __break(1u);
  }
}

_QWORD *sub_10036E8F0(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10013723C(0, v2, 0);
    v5 = *(_QWORD *)(sub_100012E18(&qword_1005D0D98) - 8);
    v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    do
    {
      swift_getAtKeyPath(v6, a2);
      v9 = _swiftEmptyArrayStorage[2];
      v8 = _swiftEmptyArrayStorage[3];
      if (v9 >= v8 >> 1)
        sub_10013723C(v8 > 1, v9 + 1, 1);
      _swiftEmptyArrayStorage[2] = v9 + 1;
      _swiftEmptyArrayStorage[v9 + 4] = v11;
      v6 += v7;
      --v2;
    }
    while (v2);
  }
  return _swiftEmptyArrayStorage;
}

char *sub_10036E9F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;

  v3 = v2;
  v31 = a2;
  v30 = sub_100012E18(&qword_1005DAA30);
  __chkstk_darwin(v30);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D0D98);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v35 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v29 = (char *)&v28 - v11;
  if ((unint64_t)a1 >> 62)
    goto LABEL_21;
  v12 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v12; v12 = _CocoaArrayWrapper.endIndex.getter(v26))
  {
    v36 = v3;
    v34 = a1 & 0xC000000000000001;
    v13 = (char *)_swiftEmptyArrayStorage;
    v3 = 4;
    v32 = v12;
    v33 = a1;
    while (1)
    {
      v14 = v34 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3 - 4, a1) : *(id *)(a1 + 8 * v3);
      v15 = v14;
      v16 = v3 - 3;
      if (__OFADD__(v3 - 4, 1))
        break;
      v17 = objc_msgSend(v14, "managedObjectContext");
      if (v17)
      {
        v18 = v17;
        __chkstk_darwin(v17);
        v19 = v30;
        v20 = v31;
        *(&v28 - 2) = (uint64_t)v15;
        *(&v28 - 1) = v20;
        v21 = v36;
        NSManagedObjectContext.performAndWait<A>(_:)(sub_10036F8D8, &v28 - 4, v19);
        v36 = v21;

      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);

      }
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_100012DDC((uint64_t)v6, &qword_1005DAA30);
      }
      else
      {
        v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v23 = v29;
        v22(v29, v6, v7);
        v22(v35, v23, v7);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          v13 = (char *)sub_10016B98C(0, *((_QWORD *)v13 + 2) + 1, 1, (unint64_t)v13);
        v25 = *((_QWORD *)v13 + 2);
        v24 = *((_QWORD *)v13 + 3);
        if (v25 >= v24 >> 1)
          v13 = (char *)sub_10016B98C(v24 > 1, v25 + 1, 1, (unint64_t)v13);
        *((_QWORD *)v13 + 2) = v25 + 1;
        v22(&v13[((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v25], v35, v7);
      }
      ++v3;
      a1 = v33;
      if (v16 == v32)
      {
        swift_bridgeObjectRelease(v33);
        return v13;
      }
    }
    __break(1u);
LABEL_21:
    if (a1 < 0)
      v26 = a1;
    else
      v26 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
  swift_bridgeObjectRelease(a1);
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_10036ED14(uint64_t a1, unint64_t a2)
{
  return sub_10036ED3C(a1, a2, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
}

uint64_t sub_10036ED28(uint64_t a1, unint64_t a2)
{
  return sub_10036ED3C(a1, a2, &qword_1005D8540, CKShareParticipant_ptr);
}

uint64_t sub_10036ED3C(uint64_t result, unint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = a4;
    v7 = a3;
    v4 = a2;
    v5 = result;
    v8 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v9 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v4 < 0)
    v19 = v4;
  else
    v19 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v4);
  v9 = _CocoaArrayWrapper.endIndex.getter(v19);
  result = swift_bridgeObjectRelease(v4);
LABEL_4:
  if (v9 >= v5)
    v10 = v5;
  else
    v10 = v9;
  if (v9 < 0)
    v10 = v5;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  if (v8)
  {
    if (v4 < 0)
      v13 = v4;
    else
      v13 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease(v4);
    if (v14 < 0)
      goto LABEL_37;
    swift_bridgeObjectRetain(v4);
    v12 = _CocoaArrayWrapper.endIndex.getter(v13);
    result = swift_bridgeObjectRelease(v4);
  }
  else
  {
    v12 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12 < v11)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }
  if ((v4 & 0xC000000000000001) != 0 && v11)
  {
    sub_1000163BC(0, v7, v6);
    v15 = 0;
    do
    {
      v16 = v15 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v15);
      v15 = v16;
    }
    while (v11 != v16);
  }
  if (v8)
  {
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v17 = _CocoaArrayWrapper.subscript.getter(0, v11, v18);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
  }
  return v17;
}

uint64_t sub_10036EEF0(uint64_t a1, unint64_t a2)
{
  return sub_10036EEFC(a1, a2, (void (*)(_QWORD))type metadata accessor for NoteSearchResult);
}

uint64_t sub_10036EEFC(uint64_t result, unint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD);
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = a3;
    v3 = a2;
    v4 = result;
    v6 = a2 >> 62;
    if (!(a2 >> 62))
    {
      v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_4;
    }
  }
  if (v3 < 0)
    v17 = v3;
  else
    v17 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v7 = _CocoaArrayWrapper.endIndex.getter(v17);
  result = swift_bridgeObjectRelease(v3);
LABEL_4:
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  if (v7 < 0)
    v8 = v4;
  if (v4)
    v9 = v8;
  else
    v9 = 0;
  if (v6)
  {
    if (v3 < 0)
      v11 = v3;
    else
      v11 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    result = swift_bridgeObjectRelease(v3);
    if (v12 < 0)
      goto LABEL_37;
    swift_bridgeObjectRetain(v3);
    v10 = _CocoaArrayWrapper.endIndex.getter(v11);
    result = swift_bridgeObjectRelease(v3);
  }
  else
  {
    v10 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v10 < v9)
  {
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }
  if ((v3 & 0xC000000000000001) != 0 && v9)
  {
    v5(0);
    v13 = 0;
    do
    {
      v14 = v13 + 1;
      _ArrayBuffer._typeCheckSlowPath(_:)(v13);
      v13 = v14;
    }
    while (v9 != v14);
  }
  if (v6)
  {
    if (v3 < 0)
      v16 = v3;
    else
      v16 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v15 = _CocoaArrayWrapper.subscript.getter(0, v9, v16);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v15 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
  }
  return v15;
}

uint64_t sub_10036F09C(uint64_t a1, unint64_t a2)
{
  return sub_10036EEFC(a1, a2, (void (*)(_QWORD))type metadata accessor for AttachmentSearchResult);
}

uint64_t sub_10036F0A8(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

uint64_t sub_10036F130(uint64_t a1, unint64_t a2)
{
  return sub_10036EEFC(a1, a2, (void (*)(_QWORD))type metadata accessor for TableSearchResult);
}

uint64_t sub_10036F13C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v6;

  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
  *(_BYTE *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 32;
  *(_BYTE *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 40) = v6;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v4 + 69) = *(_QWORD *)(a2 + 45);
  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRetain(a3);
  sub_100360700();
  return v4;
}

uint64_t sub_10036F1AC()
{
  return sub_10036F674((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003629B0);
}

uint64_t sub_10036F1CC(uint64_t a1)
{
  _QWORD v2[7];

  v2[0] = "\b";
  v2[1] = &unk_100465210;
  v2[2] = &unk_100465228;
  v2[3] = &unk_100465240;
  v2[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v2[5] = &unk_100465240;
  v2[6] = &unk_100465258;
  return swift_initClassMetadata2(a1, 0, 7, v2, a1 + 96);
}

uint64_t type metadata accessor for ICArchiveExporter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ICArchiveExporter);
}

uint64_t destroy for ICArchiveExporterConfiguration(_QWORD *a1)
{
  uint64_t result;

  result = a1[1];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[3]);
    return swift_bridgeObjectRelease(a1[5]);
  }
  return result;
}

uint64_t initializeWithCopy for ICArchiveExporterConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    v6 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  return a1;
}

uint64_t assignWithCopy for ICArchiveExporterConfiguration(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 1);
  if (v4 == 1)
  {
    if (v5 == 1)
    {
      v6 = *a2;
      v7 = a2[2];
      *(_OWORD *)(a1 + 16) = a2[1];
      *(_OWORD *)(a1 + 32) = v7;
      *(_OWORD *)a1 = v6;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v10 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v10;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      v11 = *((_QWORD *)a2 + 3);
      *(_QWORD *)(a1 + 24) = v11;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
      v12 = *((_QWORD *)a2 + 5);
      *(_QWORD *)(a1 + 40) = v12;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v12);
    }
  }
  else if (v5 == 1)
  {
    sub_10036F464((_QWORD *)a1);
    v9 = a2[1];
    v8 = a2[2];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v9;
    *(_OWORD *)(a1 + 32) = v8;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v13 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v13;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    v14 = *((_QWORD *)a2 + 3);
    v15 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v14;
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease(v15);
    *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
    v16 = *((_QWORD *)a2 + 5);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v16;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRelease(v17);
  }
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 49) = *((_BYTE *)a2 + 49);
  *(_BYTE *)(a1 + 50) = *((_BYTE *)a2 + 50);
  *(_BYTE *)(a1 + 51) = *((_BYTE *)a2 + 51);
  *(_BYTE *)(a1 + 52) = *((_BYTE *)a2 + 52);
  return a1;
}

_QWORD *sub_10036F464(_QWORD *a1)
{
  destroy for ICArchiveCreator(a1);
  return a1;
}

__n128 initializeWithTake for ICArchiveExporterConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 45) = *(_QWORD *)(a2 + 45);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ICArchiveExporterConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5 != 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease(v4);
      v7 = *(_QWORD *)(a2 + 24);
      v8 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 24) = v7;
      swift_bridgeObjectRelease(v8);
      v9 = *(_QWORD *)(a2 + 40);
      v10 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v9;
      swift_bridgeObjectRelease(v10);
      goto LABEL_6;
    }
    sub_10036F464((_QWORD *)a1);
  }
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
LABEL_6:
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 49) = *(_BYTE *)(a2 + 49);
  *(_BYTE *)(a1 + 50) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(a1 + 51) = *(_BYTE *)(a2 + 51);
  *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
  return a1;
}

uint64_t getEnumTagSinglePayload for ICArchiveExporterConfiguration(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 53))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for ICArchiveExporterConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 53) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 53) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveExporterConfiguration()
{
  return &type metadata for ICArchiveExporterConfiguration;
}

uint64_t type metadata accessor for ICArchiveExporterObjCBridge()
{
  return objc_opt_self(ICArchiveExporter);
}

uint64_t sub_10036F658()
{
  return sub_10036F674((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100361E60);
}

uint64_t sub_10036F674(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

unint64_t sub_10036F698()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DAA10;
  if (!qword_1005DAA10)
  {
    v1 = sub_10001537C(&qword_1005DAA08);
    result = swift_getWitnessTable(&protocol conformance descriptor for ICObjectReferences<A>.Types, v1);
    atomic_store(result, (unint64_t *)&qword_1005DAA10);
  }
  return result;
}

uint64_t sub_10036F6E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ICArchiveModel(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10036F720(uint64_t a1)
{
  return sub_10036F854(a1);
}

uint64_t sub_10036F734(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;

  v1 = *a1;
  v2 = a1[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  return swift_getAssociatedConformanceWitness(v2, v1, AssociatedTypeWitness, &protocol requirements base descriptor for ICObjectProviding, &associated conformance descriptor for ICObjectProviding.ICObjectProviding.Identifier: Hashable);
}

uint64_t sub_10036F798()
{
  return 16;
}

__n128 sub_10036F7A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_10036F7B0(uint64_t a1)
{
  uint64_t v1;

  return swift_getAtKeyPath(a1, *(_QWORD *)(v1 + 32));
}

BOOL sub_10036F7D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100365648(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10036F7F4(uint64_t a1, _QWORD *a2)
{
  return sub_10036F824(a1, a2);
}

uint64_t sub_10036F808(uint64_t a1)
{
  uint64_t v1;

  return sub_1003657B8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_10036F824(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v2 + 32))();
  if (v3)
    *a2 = v3;
  return result;
}

uint64_t sub_10036F854(uint64_t a1)
{
  uint64_t v1;

  return sub_100367418(a1, *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10036F87C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 32), a2);
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_10036F8A0(uint64_t a1)
{
  return sub_10036F8B4(a1);
}

uint64_t sub_10036F8B4(uint64_t a1)
{
  uint64_t v1;

  return dispatch thunk of ICObjectProviding.object(for:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10036F8D8()
{
  uint64_t v0;

  return ICObjectReferences<>.init(object:recursivelyIncludeChildren:forPagesHandoff:)(*(id *)(v0 + 16), 1, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) + OBJC_IVAR___ICArchiveExporter_exporter) + 76));
}

id sub_10036F92C(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  objc_class *v10;
  char *v11;
  objc_super v13;

  v4 = type metadata accessor for ICModernObjectProvider(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = ICModernObjectProvider.init(context:)(a1);
  v6 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v7 = sub_100012E18(&qword_1005DAA38);
  v8 = swift_allocObject(v7, 152, 7);
  *(_OWORD *)(v8 + 120) = 0u;
  *(_OWORD *)(v8 + 136) = 0u;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)a2;
  *(_BYTE *)(v8 + 96) = 0;
  *(_QWORD *)(v8 + 104) = 32;
  *(_BYTE *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 16) = v5;
  *(_OWORD *)(v8 + 40) = v9;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 69) = *(_QWORD *)(a2 + 45);
  *(_QWORD *)(v8 + 80) = v6;
  *(_QWORD *)(v8 + 88) = &protocol witness table for NSFileManager;
  sub_1003605BC();
  v10 = (objc_class *)type metadata accessor for ICArchiveExporterObjCBridge();
  v11 = (char *)objc_allocWithZone(v10);
  *(_QWORD *)&v11[OBJC_IVAR___ICArchiveExporter_exporter] = v8;
  v13.receiver = v11;
  v13.super_class = v10;
  return objc_msgSendSuper2(&v13, "init");
}

uint64_t sub_10036FA40(uint64_t a1)
{
  uint64_t v1;

  return sub_10036E3AC(a1, v1);
}

uint64_t sub_10036FA48()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10036FA6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10036FA90(uint64_t a1)
{
  uint64_t v1;

  return sub_10036E3AC(a1, *(_QWORD *)(v1 + 32));
}

void sub_10036FA9C()
{
  id v0;
  void *v1;
  id v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t IsAlexandriaDemoModeEnabled;
  char v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  __int16 v20;

  v0 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v0
    && (v1 = v0,
        v2 = objc_msgSend(v0, "snapshotManagedObjectContext"),
        v1,
        v2))
  {
    if (qword_1005CED18 != -1)
      swift_once(&qword_1005CED18, sub_100345FC4);
    v3 = static ICArchiveCreator.default;
    v5 = qword_100601D88;
    v4 = unk_100601D90;
    v7 = qword_100601D98;
    v6 = qword_100601DA0;
    swift_bridgeObjectRetain(qword_100601DA0);
    swift_bridgeObjectRetain(*((_QWORD *)&v3 + 1));
    swift_bridgeObjectRetain(v4);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v8);
    v10 = IsAlexandriaDemoModeEnabled;
    v11 = ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    v12 = v3;
    v13 = v5;
    v14 = v4;
    v15 = v7;
    v16 = v6;
    v17 = v10;
    v18 = v11;
    v19 = ICInternalSettingsIsAlexandriaDemoModeEnabled(v11);
    v20 = 256;
    sub_10036F92C(v2, (uint64_t)&v12);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10036FBC8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100363A9C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t destroy for CollaborationParticipantView(uint64_t a1)
{

  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 24));

  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for CollaborationParticipantView(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  __int128 v10;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v10 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v10;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(void **)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  v7 = v3;
  swift_retain(v10);
  swift_retain(v4);
  v8 = v5;
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for CollaborationParticipantView(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  swift_retain(v8);
  swift_release(v7);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = *(void **)(a2 + 32);
  v12 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  v13 = v11;

  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v15;
  swift_retain(v15);
  swift_release(v14);
  return a1;
}

uint64_t assignWithTake for CollaborationParticipantView(uint64_t a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = a2[1];
  swift_release(v5);

  v6 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = a2[2];
  swift_release(v6);
  return a1;
}

ValueMetadata *type metadata accessor for CollaborationParticipantView()
{
  return &type metadata for CollaborationParticipantView;
}

uint64_t sub_10036FDB8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100507E60, 1);
}

uint64_t sub_10036FDC8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  double v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v24;

  v3 = sub_100012E18(&qword_1005DAA40);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005DAA48);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v5 = static VerticalAlignment.center.getter(v7);
  *((_QWORD *)v5 + 1) = 0;
  v5[16] = 0;
  v10 = sub_100012E18(&qword_1005DAA50);
  v11 = sub_10036FF40(v1, (uint64_t)&v5[*(int *)(v10 + 44)]);
  v12 = static Edge.Set.vertical.getter(v11);
  v13 = objc_msgSend((id)objc_opt_self(ICDeviceSupport), "deviceIsMac");
  v14 = 2.0;
  if (v13)
    v14 = 8.0;
  v15 = EdgeInsets.init(_all:)(v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  sub_100012CE8((uint64_t)v5, (uint64_t)v9, &qword_1005DAA40);
  v22 = &v9[*(int *)(v6 + 36)];
  *v22 = v12;
  *((double *)v22 + 1) = v15;
  *((_QWORD *)v22 + 2) = v17;
  *((_QWORD *)v22 + 3) = v19;
  *((_QWORD *)v22 + 4) = v21;
  v22[40] = 0;
  sub_100012DDC((uint64_t)v5, &qword_1005DAA40);
  return sub_10014BD1C((uint64_t)v9, a1, &qword_1005DAA48);
}

uint64_t sub_10036FF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  void *v74;
  id v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  double v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _OWORD *v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  _OWORD *v119;
  __int128 v120;
  id v121;
  id v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t KeyPath;
  char *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, char *, uint64_t);
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(char *, uint64_t);
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  uint64_t v219;
  _OWORD v220[3];
  uint64_t v221;
  unsigned __int8 v222;
  uint64_t v223;
  unsigned __int8 v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unsigned __int8 v228;
  uint64_t v229;
  unsigned __int8 v230;
  uint64_t v231;
  uint64_t v232;
  _OWORD v233[7];
  __int128 v234;
  _QWORD v235[2];

  v170 = a1;
  v209 = a2;
  v2 = type metadata accessor for Image.Scale(0);
  v206 = *(_QWORD *)(v2 - 8);
  v207 = v2;
  __chkstk_darwin(v2);
  v205 = (char *)&v170 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for IconOnlyLabelStyle(0);
  v201 = *(_QWORD *)(v4 - 8);
  v202 = v4;
  __chkstk_darwin(v4);
  v200 = (char *)&v170 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AnchorView(0);
  v191 = *(_QWORD *)(v6 - 8);
  v192 = v6;
  __chkstk_darwin(v6);
  v190 = (char *)&v170 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005DAA58);
  v188 = *(_QWORD *)(v8 - 8);
  v189 = v8;
  __chkstk_darwin(v8);
  v187 = (char *)&v170 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_100012E18(&qword_1005DAA60);
  __chkstk_darwin(v194);
  v195 = (uint64_t *)((char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = sub_100012E18(&qword_1005DAA68);
  v198 = *(_QWORD *)(v11 - 8);
  v199 = v11;
  __chkstk_darwin(v11);
  v197 = (char *)&v170 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v193 = sub_100012E18(&qword_1005DAA70);
  v13 = __chkstk_darwin(v193);
  v208 = (uint64_t)&v170 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v196 = (char *)&v170 - v16;
  __chkstk_darwin(v15);
  v204 = (uint64_t)&v170 - v17;
  v18 = sub_100012E18(&qword_1005DAA78);
  __chkstk_darwin(v18);
  v20 = (char *)&v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v171 = sub_100012E18(&qword_1005DAA80);
  __chkstk_darwin(v171);
  v180 = (uint64_t)&v170 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = sub_100012E18(&qword_1005DAA88);
  v22 = __chkstk_darwin(v178);
  v203 = (uint64_t)&v170 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v179 = (uint64_t)&v170 - v25;
  __chkstk_darwin(v24);
  v217 = (uint64_t)&v170 - v26;
  v27 = type metadata accessor for AvatarThumbnailView(0);
  v176 = *(_QWORD *)(v27 - 8);
  v177 = v27;
  __chkstk_darwin(v27);
  v29 = (char *)&v170 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100012E18(&qword_1005DAA90);
  v216 = *(_QWORD *)(v213 - 8);
  v30 = __chkstk_darwin(v213);
  v212 = (char *)&v170 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v215 = (char *)&v170 - v32;
  v33 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v33);
  v35 = (double *)((char *)&v170 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_100012E18(&qword_1005DAA98);
  __chkstk_darwin(v36);
  v38 = (char *)&v170 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100012E18(&qword_1005DAAA0);
  v40 = __chkstk_darwin(v39);
  v211 = (uint64_t)&v170 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v40);
  v44 = (char *)&v170 - v43;
  v45 = __chkstk_darwin(v42);
  v214 = (uint64_t)&v170 - v46;
  v47 = static ActivityStream.Layout.colorBarWidth.getter(v45) * 0.5;
  v48 = (char *)v35 + *(int *)(v33 + 20);
  v49 = enum case for RoundedCornerStyle.continuous(_:);
  v50 = type metadata accessor for RoundedCornerStyle(0);
  v51 = v49;
  v52 = v170;
  v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 104))(v48, v51, v50);
  *v35 = v47;
  v35[1] = v47;
  if (*(_QWORD *)(v52 + 8))
  {
    v54 = *(_QWORD *)(v52 + 8);
    v210 = v54;
  }
  else
  {
    v54 = static Color.quaternary.getter(v53);
    v210 = 0;
  }
  sub_10014B2E4((uint64_t)v35, (uint64_t)v38);
  *(_QWORD *)&v38[*(int *)(v36 + 52)] = v54;
  *(_WORD *)&v38[*(int *)(v36 + 56)] = 256;
  swift_retain(v210);
  v55 = sub_10014B328((uint64_t)v35);
  v56 = static ActivityStream.Layout.colorBarWidth.getter(v55);
  v57 = ((uint64_t (*)(void))static ActivityStream.Layout.avatarSize.getter)();
  v59 = v58;
  v60 = static Alignment.center.getter(v57);
  _FrameLayout.init(width:height:alignment:)(v220, *(_QWORD *)&v56, 0, v59, 0, v60, v61);
  sub_100012CE8((uint64_t)v38, (uint64_t)v44, &qword_1005DAA98);
  v62 = &v44[*(int *)(v39 + 36)];
  v63 = v220[1];
  *(_OWORD *)v62 = v220[0];
  *((_OWORD *)v62 + 1) = v63;
  *((_OWORD *)v62 + 2) = v220[2];
  sub_100012DDC((uint64_t)v38, &qword_1005DAA98);
  v64 = sub_10014BD1C((uint64_t)v44, v214, &qword_1005DAAA0);
  v65 = static ActivityStream.Layout.colorBarSpacing.getter(v64);
  v67 = v66;
  v68 = static Alignment.center.getter(v65);
  _FrameLayout.init(width:height:alignment:)(&v221, v67, 0, 0, 1, v68, v69);
  v186 = v221;
  v185 = v222;
  v184 = v223;
  v183 = v224;
  v181 = v226;
  v182 = v225;
  v70 = sub_100012E18(&qword_1005CF6F0);
  v71 = swift_allocObject(v70, 40, 7);
  *(_OWORD *)(v71 + 16) = xmmword_100456F30;
  v72 = *(void **)v52;
  *(_QWORD *)(v71 + 32) = *(_QWORD *)v52;
  *(_QWORD *)&v233[0] = v71;
  specialized Array._endMutation()(v71);
  v73 = *(_QWORD *)&v233[0];
  v74 = (void *)objc_opt_self(ICThumbnailService);
  v75 = v72;
  v76 = AvatarThumbnailView.init(thumbnailService:participants:)(objc_msgSend(v74, "sharedThumbnailService"), v73);
  v77 = static ActivityStream.Layout.avatarSize.getter(v76);
  v79 = v78;
  v80 = sub_100019C6C(&qword_1005DAAA8, (uint64_t (*)(uint64_t))&type metadata accessor for AvatarThumbnailView, (uint64_t)&protocol conformance descriptor for AvatarThumbnailView);
  v81 = v212;
  v82 = v177;
  View.ic_frame(size:)(v177, v80, v77, v79);
  (*(void (**)(char *, uint64_t))(v176 + 8))(v29, v82);
  v83 = (*(uint64_t (**)(char *, char *, uint64_t))(v216 + 32))(v215, v81, v213);
  v84 = static ActivityStream.Layout.avatarSpacing.getter(v83);
  v86 = v85;
  v87 = static Alignment.center.getter(v84);
  v89 = _FrameLayout.init(width:height:alignment:)(&v227, v86, 0, 0, 1, v87, v88);
  v177 = v227;
  LODWORD(v176) = v228;
  v175 = v229;
  v174 = v230;
  v172 = v232;
  v173 = v231;
  *(_QWORD *)v20 = static HorizontalAlignment.leading.getter(v89);
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 1;
  v90 = sub_100012E18(&qword_1005DAAB0);
  v91 = sub_100370D44((void **)v52, (uint64_t)&v20[*(int *)(v90 + 44)]);
  LOBYTE(v86) = static Edge.Set.vertical.getter(v91);
  v92 = EdgeInsets.init(_all:)(-2.0);
  v94 = v93;
  v96 = v95;
  v98 = v97;
  v99 = v180;
  sub_100012CE8((uint64_t)v20, v180, &qword_1005DAA78);
  v100 = v99 + *(int *)(v171 + 36);
  *(_BYTE *)v100 = v86;
  *(double *)(v100 + 8) = v92;
  *(_QWORD *)(v100 + 16) = v94;
  *(_QWORD *)(v100 + 24) = v96;
  *(_QWORD *)(v100 + 32) = v98;
  *(_BYTE *)(v100 + 40) = 0;
  v101 = sub_100012DDC((uint64_t)v20, &qword_1005DAA78);
  static ActivityStream.Layout.avatarSize.getter(v101);
  v103 = v102;
  v105 = static Alignment.center.getter(v104);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v233, 0, 1, 0, 1, 0, 1, v103, 0, 0, 1, 0, 1, v105, v106);
  v107 = v179;
  sub_100012CE8(v99, v179, &qword_1005DAA80);
  v108 = (_OWORD *)(v107 + *(int *)(v178 + 36));
  v109 = v233[5];
  v108[4] = v233[4];
  v108[5] = v109;
  v108[6] = v233[6];
  v110 = v233[1];
  *v108 = v233[0];
  v108[1] = v110;
  v111 = v233[3];
  v108[2] = v233[2];
  v108[3] = v111;
  sub_100012DDC(v99, &qword_1005DAA80);
  sub_10014BD1C(v107, v217, &qword_1005DAA88);
  v112 = objc_msgSend((id)objc_opt_self(ICDeviceSupport), "deviceIsMac");
  if ((_DWORD)v112)
    v113 = 0x4028000000000000;
  else
    v113 = 0x4010000000000000;
  v114 = static VerticalAlignment.center.getter(v112);
  v115 = (uint64_t)v195;
  *v195 = v114;
  *(_QWORD *)(v115 + 8) = v113;
  *(_BYTE *)(v115 + 16) = 0;
  v116 = v115 + *(int *)(sub_100012E18(&qword_1005DAAB8) + 44);
  v117 = *(_QWORD *)(v52 + 24);
  v234 = *(_OWORD *)(v52 + 32);
  v118 = (void *)v234;
  sub_10014BD1C((uint64_t)&v234 + 8, (uint64_t)v235, &qword_1005DAAC0);
  v119 = (_OWORD *)swift_allocObject(&unk_10056B7E0, 64, 7);
  v120 = *(_OWORD *)(v52 + 16);
  v119[1] = *(_OWORD *)v52;
  v119[2] = v120;
  v119[3] = *(_OWORD *)(v52 + 32);
  swift_retain(v210);
  v121 = v75;
  swift_retain(v117);
  v122 = v118;
  sub_10014BD60(v235);
  v123 = sub_100012E18(&qword_1005DAAC8);
  v124 = sub_10037129C();
  v125 = v187;
  Button.init(action:label:)(sub_100371294, v119, sub_100370FEC, 0, v123, v124);
  v218 = v234;
  sub_100012E18(&qword_1005DAAD8);
  State.wrappedValue.getter(&v219);
  v126 = v190;
  v127 = AnchorView.init(view:)(v219);
  v128 = static Alignment.center.getter(v127);
  v130 = v129;
  v131 = v116 + *(int *)(sub_100012E18(&qword_1005DAAE0) + 36);
  v133 = v191;
  v132 = v192;
  (*(void (**)(uint64_t, char *, uint64_t))(v191 + 16))(v131, v126, v192);
  v134 = (uint64_t *)(v131 + *(int *)(sub_100012E18(&qword_1005DAAE8) + 36));
  *v134 = v128;
  v134[1] = v130;
  v136 = v188;
  v135 = v189;
  (*(void (**)(uint64_t, char *, uint64_t))(v188 + 16))(v116, v125, v189);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v126, v132);
  v137 = (*(uint64_t (**)(char *, uint64_t))(v136 + 8))(v125, v135);
  v138 = v200;
  IconOnlyLabelStyle.init()(v137);
  v139 = sub_100016638(&qword_1005DAAF0, &qword_1005DAA60, (uint64_t)&protocol conformance descriptor for HStack<A>);
  v140 = sub_100019C6C(&qword_1005D09C8, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  v141 = v197;
  v142 = v202;
  View.labelStyle<A>(_:)(v138, v194, v202, v139, v140);
  (*(void (**)(char *, uint64_t))(v201 + 8))(v138, v142);
  sub_100012DDC(v115, &qword_1005DAA60);
  v144 = v205;
  v143 = v206;
  v145 = v207;
  (*(void (**)(char *, _QWORD, uint64_t))(v206 + 104))(v205, enum case for Image.Scale.large(_:), v207);
  KeyPath = swift_getKeyPath(&unk_100465380, v146);
  v148 = v196;
  v149 = (uint64_t *)&v196[*(int *)(v193 + 36)];
  v150 = sub_100012E18(&qword_1005D09D8);
  (*(void (**)(char *, char *, uint64_t))(v143 + 16))((char *)v149 + *(int *)(v150 + 28), v144, v145);
  *v149 = KeyPath;
  v152 = v198;
  v151 = v199;
  (*(void (**)(char *, char *, uint64_t))(v198 + 16))(v148, v141, v199);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v144, v145);
  (*(void (**)(char *, uint64_t))(v152 + 8))(v141, v151);
  v153 = (uint64_t)v148;
  v154 = v204;
  sub_10014BD1C(v153, v204, &qword_1005DAA70);
  v155 = v211;
  sub_100012CE8(v214, v211, &qword_1005DAAA0);
  v156 = *(void (**)(char *, char *, uint64_t))(v216 + 16);
  v157 = v212;
  v158 = v213;
  v156(v212, v215, v213);
  v159 = v203;
  sub_100012CE8(v217, v203, &qword_1005DAA88);
  v160 = v208;
  sub_100012CE8(v154, v208, &qword_1005DAA70);
  v161 = v209;
  sub_100012CE8(v155, v209, &qword_1005DAAA0);
  v162 = (int *)sub_100012E18(&qword_1005DAAF8);
  v163 = v161 + v162[12];
  *(_QWORD *)v163 = 0;
  *(_BYTE *)(v163 + 8) = 1;
  *(_QWORD *)(v163 + 16) = v186;
  *(_BYTE *)(v163 + 24) = v185;
  *(_QWORD *)(v163 + 32) = v184;
  *(_BYTE *)(v163 + 40) = v183;
  v164 = v181;
  *(_QWORD *)(v163 + 48) = v182;
  *(_QWORD *)(v163 + 56) = v164;
  v156((char *)(v161 + v162[16]), v157, v158);
  v165 = v161 + v162[20];
  *(_QWORD *)v165 = 0;
  *(_BYTE *)(v165 + 8) = 1;
  *(_QWORD *)(v165 + 16) = v177;
  *(_BYTE *)(v165 + 24) = v176;
  *(_QWORD *)(v165 + 32) = v175;
  *(_BYTE *)(v165 + 40) = v174;
  v166 = v172;
  *(_QWORD *)(v165 + 48) = v173;
  *(_QWORD *)(v165 + 56) = v166;
  sub_100012CE8(v159, v161 + v162[24], &qword_1005DAA88);
  v167 = v161 + v162[28];
  *(_QWORD *)v167 = 0;
  *(_BYTE *)(v167 + 8) = 1;
  sub_100012CE8(v160, v161 + v162[32], &qword_1005DAA70);
  sub_100012DDC(v154, &qword_1005DAA70);
  sub_100012DDC(v217, &qword_1005DAA88);
  v168 = *(void (**)(char *, uint64_t))(v216 + 8);
  v168(v215, v158);
  sub_100012DDC(v214, &qword_1005DAAA0);
  sub_100012DDC(v160, &qword_1005DAA70);
  sub_100012DDC(v159, &qword_1005DAA88);
  v168(v157, v158);
  return sub_100012DDC(v211, &qword_1005DAAA0);
}

uint64_t sub_100370D44@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v41 = a2;
  v3 = sub_100012E18(&qword_1005DAB00);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *a1;
  v7 = objc_msgSend(v6, "ic_participantName");
  if (!v7)
  {
    v7 = objc_msgSend(v6, "ic_emailAddress");
    if (!v7)
    {
      v7 = objc_msgSend(v6, "ic_phoneNumber");
      if (!v7)
        v7 = objc_msgSend((id)objc_opt_self(NSString), "ic_ellipsisCharacterString");
    }
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v42 = v8;
  v43 = v10;
  v11 = sub_1001452E8();
  v12 = Text.init<A>(_:)(&v42, &type metadata for String, v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = static ActivityStream.Layout.primaryFont.getter();
  v20 = Text.font(_:)(v19, v12, v14, v18, v16);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  swift_release(v19);
  v27 = v24 & 1;
  sub_10014BCF0(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  v29 = static Color.primary.getter(v28);
  v30 = Text.foregroundColor(_:)(v29, v20, v22, v27, v26);
  v32 = v31;
  LOBYTE(v18) = v33;
  v35 = v34;
  swift_release(v29);
  LOBYTE(v18) = v18 & 1;
  sub_10014BCF0(v20, v22, v27);
  swift_bridgeObjectRelease(v26);
  v42 = v30;
  v43 = v32;
  v44 = v18;
  v45 = v35;
  View.hyphenationFactor(_:)(&type metadata for Text, &protocol witness table for Text, 0.1);
  sub_10014BCF0(v30, v32, v18);
  v36 = swift_bridgeObjectRelease(v35);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, __n128))(v39 + 32))(v41, v5, v40, v36);
}

void sub_100370F8C(uint64_t a1)
{
  void (*v1)(void *);
  void *v2;
  void *v3;

  v1 = *(void (**)(void *))(a1 + 16);
  sub_100012E18(&qword_1005DAAD8);
  State.wrappedValue.getter(&v3);
  v2 = v3;
  v1(v3);

}

uint64_t sub_100370FEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v24;
  char v25;
  _OWORD v26[7];

  v2 = sub_100012E18(&qword_1005D0A20);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005DAAC8);
  __chkstk_darwin(v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v9, "localizedStringForKey:value:table:", v10, 0, 0);

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)&v26[0] = v12;
  *((_QWORD *)&v26[0] + 1) = v14;
  v15 = sub_1001452E8();
  v16 = Label<>.init<A>(_:systemImage:)(v26, 0x7269632E6F666E69, 0xEB00000000656C63, &type metadata for String, v15);
  v17 = static Alignment.center.getter(v16);
  v25 = 1;
  v24 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v26, 0x403E000000000000, 0, 0, 1, 0, 1, 0, 1, 0, v24, 0, v25, v17, v18);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v8, v5, v2);
  v19 = &v8[*(int *)(v6 + 36)];
  v20 = v26[5];
  *((_OWORD *)v19 + 4) = v26[4];
  *((_OWORD *)v19 + 5) = v20;
  *((_OWORD *)v19 + 6) = v26[6];
  v21 = v26[1];
  *(_OWORD *)v19 = v26[0];
  *((_OWORD *)v19 + 1) = v21;
  v22 = v26[3];
  *((_OWORD *)v19 + 2) = v26[2];
  *((_OWORD *)v19 + 3) = v22;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return sub_10014BD1C((uint64_t)v8, a1, &qword_1005DAAC8);
}

uint64_t sub_100371218@<X0>(uint64_t a1@<X8>)
{
  return sub_10036FDC8(a1);
}

uint64_t sub_100371250()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100371294()
{
  uint64_t v0;

  sub_100370F8C(v0 + 16);
}

unint64_t sub_10037129C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DAAD0;
  if (!qword_1005DAAD0)
  {
    v1 = sub_10001537C(&qword_1005DAAC8);
    sub_100016638(&qword_1005D0A30, &qword_1005D0A20, (uint64_t)&protocol conformance descriptor for Label<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005DAAD0);
  }
  return result;
}

unint64_t sub_10037132C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DAB08;
  if (!qword_1005DAB08)
  {
    v1 = sub_10001537C(&qword_1005DAA48);
    sub_100016638((unint64_t *)&unk_1005DAB10, &qword_1005DAA40, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005DAB08);
  }
  return result;
}

void sub_1003713B4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  Swift::String v26;
  void *object;
  id v28;
  uint64_t v29;
  unint64_t v30;
  __objc2_prot *v31;

  v2 = type metadata accessor for ManagedEntityContextType(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for AccountID.Authority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v28 - v11);
  v13 = objc_opt_self(ICAccount);
  v14 = swift_dynamicCastObjCClass(a1, v13);
  if (v14)
  {
    v15 = v14;
    v16 = a1;
    AccountID.Authority.init(_:)(v15);
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 16))(v10, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ManagedEntityContextType.modern(_:), v2);
    AccountID.init(authority:contextType:)(v10, v5);
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v12, v6);
  }
  else
  {
    v31 = &OBJC_PROTOCOL___ICLegacyAccount;
    v17 = swift_dynamicCastObjCProtocolConditional(a1, 1, &v31);
    if (v17)
    {
      v18 = (void *)v17;
      v19 = a1;
      if ((objc_msgSend(v18, "isLocalAccount") & 1) != 0)
      {
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v12, enum case for AccountID.Authority.local(_:), v6);
        (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ManagedEntityContextType.html(_:), v2);
        AccountID.init(authority:contextType:)(v12, v5);

      }
      else
      {
        v20 = objc_msgSend((id)objc_opt_self(ICLegacyAccountUtilities), "emailAddressForAccount:", v18);
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
        v28 = v19;
        v23 = v22;

        *v12 = v21;
        v12[1] = v23;
        (*(void (**)(uint64_t *, _QWORD, uint64_t))(v7 + 104))(v12, enum case for AccountID.Authority.synced(_:), v6);
        (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for ManagedEntityContextType.html(_:), v2);
        AccountID.init(authority:contextType:)(v12, v5);

      }
    }
    else
    {
      v29 = 0;
      v30 = 0xE000000000000000;
      _StringGuts.grow(_:)(62);
      v24._object = (void *)0x8000000100484BC0;
      v24._countAndFlagsBits = 0xD00000000000003CLL;
      String.append(_:)(v24);
      v25 = sub_100012E18(&qword_1005DAC08);
      v26._countAndFlagsBits = _typeName(_:qualified:)(v25, 0);
      object = v26._object;
      String.append(_:)(v26);
      swift_bridgeObjectRelease(object);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v29, v30, "MobileNotes/AccountEntity.swift", 31, 2, 70, 0);
      __break(1u);
    }
  }
}

uint64_t VisibleAccountsQuery.entities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch(sub_1003716E4, 0, 0);
}

uint64_t sub_1003716E4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  AppDependency.wrappedValue.getter(v0 + 2);
  v1 = v0[2];
  v0[5] = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D01A0 + dword_1005D01A0);
  v2 = (_QWORD *)swift_task_alloc(unk_1005D01A4);
  v0[6] = v2;
  *v2 = v0;
  v2[1] = sub_100132748;
  return v4(v0[3], v1);
}

uint64_t VisibleAccountsQuery.suggestedEntities()(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)(v3 + 2032) = a3;
  *(_QWORD *)(v3 + 1808) = a2;
  *(_QWORD *)(v3 + 1800) = a1;
  v4 = type metadata accessor for AccountEntity(0);
  *(_QWORD *)(v3 + 1816) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 1824) = v5;
  *(_QWORD *)(v3 + 1832) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 1840) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 1848) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 1856) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1864) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1872) = swift_task_alloc(v8);
  *(_QWORD *)(v3 + 1880) = swift_task_alloc(v8);
  v9 = type metadata accessor for ManagedEntityContextType(0);
  *(_QWORD *)(v3 + 1888) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 1896) = v10;
  *(_QWORD *)(v3 + 1904) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10037183C, 0, 0);
}

uint64_t sub_10037183C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(v0 + 1904);
  v2 = *(_QWORD *)(v0 + 1896);
  v3 = *(_QWORD *)(v0 + 1888);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1464));
  v4 = *(void **)(v0 + 1464);
  *(_QWORD *)(v0 + 1912) = objc_msgSend(v4, "modernManagedObjectContext");

  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1608));
  v5 = *(void **)(v0 + 1608);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ManagedEntityContextType.html(_:), v3);
  *(_QWORD *)(v0 + 1920) = ICUnifiedNoteContext.managedObjectContext(for:)(v1);
  v6 = *(_QWORD *)(v0 + 1808);
  v7 = *(_QWORD *)(v0 + 1800);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1896) + 8))(*(_QWORD *)(v0 + 1904), *(_QWORD *)(v0 + 1888));

  swift_retain(v7);
  swift_retain(v6);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1368));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), *(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1392));
  swift_release(v7);
  swift_release(v6);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "VisibleAccountsQuery: fetching suggested results", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v12 = *(_QWORD *)(v0 + 1880);
  v13 = *(_QWORD *)(v0 + 1848);
  v14 = *(_QWORD *)(v0 + 1840);
  v15 = *(_BYTE *)(v0 + 2032);
  v16 = *(_QWORD *)(v0 + 1808);

  v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v0 + 1928) = v17;
  v17(v12, v14);
  sub_100374E60(v16, v15);
  *(_QWORD *)(v0 + 1936) = v18;
  v19 = (_QWORD *)swift_task_alloc(async function pointer to ICCoreDataIndexer.reloadSnapshot()[1]);
  *(_QWORD *)(v0 + 1944) = v19;
  *v19 = v0;
  v19[1] = sub_100371AE0;
  return ICCoreDataIndexer.reloadSnapshot()();
}

uint64_t sub_100371AE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1944);
  v7 = *(_QWORD **)v1;
  v7[244] = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1005DAB34);
  v7[245] = v4;
  *v4 = v7;
  v4[1] = sub_100371B64;
  v5 = v7[226];
  v4[13] = a1;
  v4[14] = v5;
  return swift_task_switch(sub_100374F44, 0, 0);
}

uint64_t sub_100371B64(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1960);
  *(_QWORD *)(v3 + 1968) = a1;
  *(_QWORD *)(v3 + 1976) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100371BC4, 0, 0);
}

uint64_t sub_100371BC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;

  v1 = v0[247];
  v2 = v0[246];
  v3 = (void *)v0[240];
  v4 = (void *)v0[239];
  v5 = (_QWORD *)swift_allocObject(&unk_10056B848, 40, 7);
  v0[248] = v5;
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v1;
  v6 = v4;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  swift_retain(v5);
  v7 = sub_10001537C(&qword_1005DAB48);
  swift_asyncLet_begin(v0 + 82, 0, v7, &unk_1005DAB40, v5, v0 + 195);
  v8 = (_QWORD *)swift_allocObject(&unk_10056B870, 40, 7);
  v0[249] = v8;
  v8[2] = v3;
  v8[3] = v2;
  v8[4] = v1;
  v9 = v3;
  swift_retain(v8);
  swift_asyncLet_begin(v0 + 2, 0, v7, &unk_1005DAB58, v8, v0 + 189);
  return swift_asyncLet_get_throwing(v0 + 82, v0 + 195, sub_100371D04, v0 + 162);
}

uint64_t sub_100371D04()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v1[250] = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 2, v1 + 189, sub_100372630, v1 + 214);
  v3 = v1[195];
  v1[251] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_asyncLet_get_throwing(v1 + 2, v1 + 189, sub_100371D8C, v1 + 202);
}

uint64_t sub_100371D8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 2016) = v0;
  if (v0)
    v2 = sub_100372768;
  else
    v2 = sub_100371DB4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100371DB4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v68;
  uint8_t *v69;
  os_log_type_t v70;
  NSObject *v71;
  uint64_t v72;
  uint8_t *v73;
  NSObject *log;
  os_log_t loga;
  os_log_type_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;

  v1 = (_QWORD *)(v0 + 1400);
  v2 = *(_QWORD *)(v0 + 1808);
  v3 = *(_QWORD *)(v0 + 1800);
  v4 = *(_QWORD *)(v0 + 1512);
  v80 = *(_QWORD **)(v0 + 2008);
  swift_bridgeObjectRetain(v4);
  sub_1001D9D38(v5);
  v6 = v80;
  *(_QWORD *)(v0 + 2024) = v80;
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1432));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1432), *(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1456));
  swift_release(v3);
  swift_release(v2);
  swift_bridgeObjectRetain(v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    *(_QWORD *)(v0 + 1752) = v6[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1752, v0 + 1760, v10 + 4);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "VisibleAccountsQuery: found %ld account(s)", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }
  v11 = v0 + 1512;

  v12 = *(_QWORD *)(v0 + 1808);
  v13 = *(_QWORD *)(v0 + 1800);
  (*(void (**)(_QWORD, _QWORD))(v0 + 1928))(*(_QWORD *)(v0 + 1872), *(_QWORD *)(v0 + 1840));
  swift_retain(v13);
  swift_retain(v12);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1336));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1360));
  swift_release(v13);
  swift_release(v12);
  v14 = swift_bridgeObjectRetain_n(v6, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  v78 = v6;
  if (os_log_type_enabled(v15, v16))
  {
    v70 = v16;
    log = v15;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v68 = swift_slowAlloc(32, -1);
    v79 = v68;
    v73 = v17;
    *(_DWORD *)v17 = 136315138;
    v18 = v6[2];
    v19 = _swiftEmptyArrayStorage;
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 1824);
      v80 = _swiftEmptyArrayStorage;
      sub_100137028(0, v18, 0);
      v21 = (uint64_t)v6 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
      v22 = *(_QWORD *)(v20 + 72);
      v19 = _swiftEmptyArrayStorage;
      do
      {
        v23 = *(_QWORD *)(v0 + 1832);
        v24 = sub_10012AF28(v21, v23);
        v25 = AccountID.description.getter(v24);
        v27 = v26;
        sub_10012AF6C(v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_100137028(0, v19[2] + 1, 1);
          v19 = v80;
        }
        v29 = v19[2];
        v28 = v19[3];
        if (v29 >= v28 >> 1)
        {
          sub_100137028(v28 > 1, v29 + 1, 1);
          v19 = v80;
        }
        v19[2] = v29 + 1;
        v30 = &v19[2 * v29];
        v30[4] = v25;
        v30[5] = v27;
        v21 += v22;
        --v18;
      }
      while (v18);
    }
    v34 = *(void (**)(uint64_t, uint64_t))(v0 + 1928);
    v35 = *(_QWORD *)(v0 + 1864);
    v36 = *(_QWORD *)(v0 + 1840);
    v37 = Array.description.getter(v19, &type metadata for String);
    v39 = v38;
    swift_bridgeObjectRelease(v19);
    *(_QWORD *)(v0 + 1704) = sub_1003A4190(v37, v39, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1704, v0 + 1712, v73 + 4);
    swift_bridgeObjectRelease(v39);
    v6 = v78;
    swift_bridgeObjectRelease_n(v78, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v70, "VisibleAccountsQuery: account IDs: %s", v73, 0xCu);
    swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v73, -1, -1);

    v34(v35, v36);
    v1 = (_QWORD *)(v0 + 1400);
    v11 = v0 + 1512;
  }
  else
  {
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 1928);
    v32 = *(_QWORD *)(v0 + 1864);
    v33 = *(_QWORD *)(v0 + 1840);
    swift_bridgeObjectRelease_n(v6, 2);

    v31(v32, v33);
  }
  v40 = *(_QWORD *)(v0 + 1808);
  v41 = *(_QWORD *)(v0 + 1800);
  swift_retain(v41);
  swift_retain(v40);
  AppDependency.wrappedValue.getter(v1);
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1400), *(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1424));
  swift_release(v41);
  swift_release(v40);
  v42 = swift_bridgeObjectRetain_n(v6, 2);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v76 = v44;
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    loga = (os_log_t)swift_slowAlloc(32, -1);
    v79 = (uint64_t)loga;
    *(_DWORD *)v45 = 136642819;
    v46 = v6[2];
    v47 = _swiftEmptyArrayStorage;
    if (v46)
    {
      v69 = v45;
      v71 = v43;
      v77 = v11;
      v48 = *(_QWORD *)(v0 + 1824);
      v49 = *(_QWORD *)(v0 + 1816);
      v80 = _swiftEmptyArrayStorage;
      sub_100137028(0, v46, 0);
      v50 = (uint64_t)v6 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
      v51 = *(_QWORD *)(v48 + 72);
      v47 = v80;
      do
      {
        v52 = *(_QWORD *)(v0 + 1832);
        sub_10012AF28(v50, v52);
        v53 = (uint64_t *)(v52 + *(int *)(v49 + 24));
        v54 = *v53;
        v55 = v53[1];
        swift_bridgeObjectRetain(v55);
        sub_10012AF6C(v52);
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          sub_100137028(0, v47[2] + 1, 1);
          v47 = v80;
        }
        v57 = v47[2];
        v56 = v47[3];
        if (v57 >= v56 >> 1)
        {
          sub_100137028(v56 > 1, v57 + 1, 1);
          v47 = v80;
        }
        v47[2] = v57 + 1;
        v58 = &v47[2 * v57];
        v58[4] = v54;
        v58[5] = v55;
        v50 += v51;
        --v46;
      }
      while (v46);
      v11 = v77;
      v45 = v69;
      v43 = v71;
    }
    v62 = *(void (**)(uint64_t, uint64_t))(v0 + 1928);
    v72 = *(_QWORD *)(v0 + 1856);
    v63 = *(_QWORD *)(v0 + 1840);
    v64 = Array.description.getter(v47, &type metadata for String);
    v66 = v65;
    swift_bridgeObjectRelease(v47);
    *(_QWORD *)(v0 + 1656) = sub_1003A4190(v64, v66, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1656, v0 + 1664, v45 + 4);
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease_n(v78, 2);
    _os_log_impl((void *)&_mh_execute_header, v43, v76, "VisibleAccountsQuery: account titles: %{sensitive}s", v45, 0xCu);
    swift_arrayDestroy(loga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(loga, -1, -1);
    swift_slowDealloc(v45, -1, -1);

    v62(v72, v63);
  }
  else
  {
    v59 = *(void (**)(uint64_t, uint64_t))(v0 + 1928);
    v60 = *(_QWORD *)(v0 + 1856);
    v61 = *(_QWORD *)(v0 + 1840);
    swift_bridgeObjectRelease_n(v6, 2);

    v59(v60, v61);
  }
  return swift_asyncLet_finish(v0 + 16, v11, sub_1003724DC, v0 + 1472);
}

uint64_t sub_1003724DC()
{
  return swift_task_switch(sub_1003724F0, 0, 0);
}

uint64_t sub_1003724F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1992));
  return swift_asyncLet_finish(v0 + 656, v0 + 1560, sub_100372544, v0 + 1520);
}

uint64_t sub_100372544()
{
  return swift_task_switch(sub_100372558, 0, 0);
}

uint64_t sub_100372558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1992);
  v2 = *(_QWORD *)(v0 + 1984);
  v3 = *(void **)(v0 + 1952);
  v4 = *(void **)(v0 + 1936);
  v5 = *(void **)(v0 + 1920);
  v6 = *(_QWORD *)(v0 + 1904);
  v7 = *(_QWORD *)(v0 + 1880);
  v8 = *(_QWORD *)(v0 + 1872);
  v9 = *(_QWORD *)(v0 + 1864);
  v11 = *(_QWORD *)(v0 + 1856);
  v12 = *(_QWORD *)(v0 + 1832);

  swift_release_n(v2, 2);
  swift_release(v1);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2024));
}

uint64_t sub_100372630()
{
  return swift_task_switch(sub_100372644, 0, 0);
}

uint64_t sub_100372644()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1992));
  return swift_asyncLet_finish(v0 + 656, v0 + 1560, sub_100372698, v0 + 1760);
}

uint64_t sub_100372698()
{
  return swift_task_switch(sub_1003726AC, 0, 0);
}

uint64_t sub_1003726AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 1992);
  v2 = *(_QWORD *)(v0 + 1984);
  v3 = *(void **)(v0 + 1952);
  v4 = *(void **)(v0 + 1936);
  v5 = *(void **)(v0 + 1920);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1880);
  v7 = *(_QWORD *)(v0 + 1872);
  v8 = *(_QWORD *)(v0 + 1864);
  v9 = *(_QWORD *)(v0 + 1856);
  v10 = *(_QWORD *)(v0 + 1832);
  swift_task_dealloc(*(_QWORD *)(v0 + 1904));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100372768()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2008));
  return swift_asyncLet_finish(v0 + 16, v0 + 1512, sub_1003727BC, v0 + 1664);
}

uint64_t sub_1003727BC()
{
  return swift_task_switch(sub_1003727D0, 0, 0);
}

uint64_t sub_1003727D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1992));
  return swift_asyncLet_finish(v0 + 656, v0 + 1560, sub_100372824, v0 + 1568);
}

uint64_t sub_100372824()
{
  return swift_task_switch(sub_100372838, 0, 0);
}

uint64_t sub_100372838()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 1992);
  v2 = *(_QWORD *)(v0 + 1984);
  v3 = *(void **)(v0 + 1952);
  v4 = *(void **)(v0 + 1936);
  v5 = *(void **)(v0 + 1920);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1880);
  v7 = *(_QWORD *)(v0 + 1872);
  v8 = *(_QWORD *)(v0 + 1864);
  v9 = *(_QWORD *)(v0 + 1856);
  v10 = *(_QWORD *)(v0 + 1832);
  swift_task_dealloc(*(_QWORD *)(v0 + 1904));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003728F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100372910, 0, 0);
}

uint64_t sub_100372910()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = v0[4];
  v2 = v0[5];
  v3 = (void *)v0[3];
  v4 = (_QWORD *)swift_allocObject(&unk_10056B9C0, 40, 7);
  v0[6] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v5 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  v6 = v3;
  v7 = (_QWORD *)swift_task_alloc(v5);
  v0[7] = v7;
  v8 = sub_100012E18(&qword_1005DAB48);
  *v7 = v0;
  v7[1] = sub_10023284C;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_1003768D4, v4, v8);
}

void sub_1003729D0(uint64_t a1@<X0>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a2;
  sub_1003743D0(a1, v6);
  v8 = v7;

  if (!v3)
    *a3 = v8;
}

uint64_t sub_100372A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_100372A48, 0, 0);
}

uint64_t sub_100372A48()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;

  v1 = v0[4];
  v2 = v0[5];
  v3 = (void *)v0[3];
  v4 = (_QWORD *)swift_allocObject(&unk_10056B998, 40, 7);
  v0[6] = v4;
  v4[2] = v1;
  v4[3] = v2;
  v4[4] = v3;
  v5 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  v6 = v3;
  v7 = (_QWORD *)swift_task_alloc(v5);
  v0[7] = v7;
  v8 = sub_100012E18(&qword_1005DAB48);
  *v7 = v0;
  v7[1] = sub_1002326D0;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_100376880, v4, v8);
}

void sub_100372B08(uint64_t a1@<X1>, void *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v6 = a2;
  sub_1003743D0(a1, v6);
  v8 = v7;

  if (!v3)
    *a3 = v8;
}

void sub_100372B64(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;

  v4 = objc_msgSend(a1, "objectWithID:", a2);
  v5 = objc_opt_self(ICFolder);
  v6 = (void *)swift_dynamicCastObjCClassUnconditional(v4, v5, 0, 0, 0);
  v7 = objc_msgSend(v6, "parent");

  if (v7)
  {

    v8 = 0;
  }
  else
  {
    v9 = objc_msgSend(v6, "account");
    v8 = objc_msgSend(v9, "objectID");

  }
  *a3 = v8;
}

void sub_100372C48(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  __objc2_prot *v12;

  v4 = objc_msgSend(a1, "objectWithID:", a2);
  v12 = &OBJC_PROTOCOL___ICLegacyFolder;
  v5 = (void *)swift_dynamicCastObjCProtocolUnconditional(v4, 1, &v12, 0, 0, 0);
  v6 = objc_msgSend(v5, "parentFolder");
  swift_unknownObjectRelease(v6, v7);
  if (v6 || (v9 = objc_msgSend(v5, "account")) == 0)
  {

    v8 = 0;
  }
  else
  {
    v10 = v9;
    v8 = objc_msgSend(v9, "objectID");

    swift_unknownObjectRelease(v10, v11);
  }
  *a3 = v8;
}

uint64_t sub_100372D34@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  result = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  return result;
}

uint64_t sub_100372D60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch(sub_1003716E4, 0, 0);
}

uint64_t sub_100372D7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 16);
  v6 = (_QWORD *)swift_task_alloc(dword_1005DAB2C);
  *(_QWORD *)(v2 + 24) = v6;
  *v6 = v2;
  v6[1] = sub_10013B218;
  return VisibleAccountsQuery.suggestedEntities()(v3, v4, v5);
}

uint64_t sub_100372DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100273B50();
  *v5 = v2;
  v5[1] = sub_100130768;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t VisibleAccountsQuery.entities(matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(v5 + 2112) = a5;
  *(_QWORD *)(v5 + 1864) = a4;
  *(_QWORD *)(v5 + 1856) = a3;
  *(_QWORD *)(v5 + 1848) = a2;
  *(_QWORD *)(v5 + 1840) = a1;
  v6 = type metadata accessor for AccountEntity(0);
  *(_QWORD *)(v5 + 1872) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 1880) = v7;
  *(_QWORD *)(v5 + 1888) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccountID(0);
  *(_QWORD *)(v5 + 1896) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 1904) = v9;
  *(_QWORD *)(v5 + 1912) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 1920) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 1928) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 1936) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 1944) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 1952) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 1960) = swift_task_alloc(v12);
  v13 = type metadata accessor for ManagedEntityContextType(0);
  *(_QWORD *)(v5 + 1968) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v5 + 1976) = v14;
  *(_QWORD *)(v5 + 1984) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100372F5C, 0, 0);
}

uint64_t sub_100372F5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 1984);
  v2 = *(_QWORD *)(v0 + 1976);
  v3 = *(_QWORD *)(v0 + 1968);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1576));
  v4 = *(void **)(v0 + 1576);
  *(_QWORD *)(v0 + 1992) = objc_msgSend(v4, "modernManagedObjectContext");

  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1720));
  v5 = *(void **)(v0 + 1720);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ManagedEntityContextType.html(_:), v3);
  *(_QWORD *)(v0 + 2000) = ICUnifiedNoteContext.managedObjectContext(for:)(v1);
  v6 = *(_QWORD *)(v0 + 1864);
  v7 = *(_QWORD *)(v0 + 1856);
  v8 = *(_QWORD *)(v0 + 1848);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1976) + 8))(*(_QWORD *)(v0 + 1984), *(_QWORD *)(v0 + 1968));

  swift_retain(v7);
  swift_retain(v6);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1336));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1360));
  swift_release(v7);
  swift_release(v6);
  v9 = swift_bridgeObjectRetain_n(v8, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 1960);
  v14 = *(_QWORD *)(v0 + 1928);
  v15 = *(_QWORD *)(v0 + 1920);
  v16 = *(_QWORD *)(v0 + 1848);
  if (v12)
  {
    v23 = *(_QWORD *)(v0 + 1840);
    v25 = *(_QWORD *)(v0 + 1960);
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = v15;
    v18 = swift_slowAlloc(32, -1);
    v26 = v18;
    *(_DWORD *)v17 = 136642819;
    swift_bridgeObjectRetain(v16);
    *(_QWORD *)(v0 + 1832) = sub_1003A4190(v23, v16, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1832, v0 + 1840, v17 + 4);
    swift_bridgeObjectRelease_n(v16, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "VisibleAccountsQuery: performing with query string '%{sensitive}s'", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v25, v24);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1848), 2);

    v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v13, v15);
  }
  *(_QWORD *)(v0 + 2008) = v19;
  sub_100374E60(*(_QWORD *)(v0 + 1864), *(_BYTE *)(v0 + 2112));
  *(_QWORD *)(v0 + 2016) = v20;
  v21 = (_QWORD *)swift_task_alloc(async function pointer to ICCoreDataIndexer.reloadSnapshot()[1]);
  *(_QWORD *)(v0 + 2024) = v21;
  *v21 = v0;
  v21[1] = sub_1003732E4;
  return ICCoreDataIndexer.reloadSnapshot()();
}

uint64_t sub_1003732E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v7;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2024);
  v7 = *(_QWORD **)v1;
  v7[254] = a1;
  swift_task_dealloc(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1005DAB34);
  v7[255] = v4;
  *v4 = v7;
  v4[1] = sub_100373368;
  v5 = v7[233];
  v4[13] = a1;
  v4[14] = v5;
  return swift_task_switch(sub_100374F44, 0, 0);
}

uint64_t sub_100373368(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 2040);
  *(_QWORD *)(v3 + 2048) = a1;
  *(_QWORD *)(v3 + 2056) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1003733C8, 0, 0);
}

uint64_t sub_1003733C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v13;

  v1 = *(_QWORD *)(v0 + 2056);
  v2 = *(_QWORD *)(v0 + 2048);
  v13 = *(void **)(v0 + 2000);
  v3 = *(void **)(v0 + 1992);
  v4 = *(_BYTE *)(v0 + 2112);
  v5 = *(_QWORD *)(v0 + 1864);
  v6 = *(_QWORD *)(v0 + 1856);
  v7 = swift_allocObject(&unk_10056B898, 64, 7);
  *(_QWORD *)(v0 + 2064) = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v5;
  *(_BYTE *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v2;
  *(_QWORD *)(v7 + 48) = v1;
  *(_QWORD *)(v7 + 56) = v3;
  swift_retain(v6);
  swift_retain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  v8 = v3;
  swift_retain(v7);
  v9 = sub_10001537C(&qword_1005DAB78);
  swift_asyncLet_begin(v0 + 656, 0, v9, &unk_1005DAB70, v7, v0 + 1672);
  v10 = swift_allocObject(&unk_10056B8C0, 64, 7);
  *(_QWORD *)(v0 + 2072) = v10;
  *(_QWORD *)(v10 + 16) = v6;
  *(_QWORD *)(v10 + 24) = v5;
  *(_BYTE *)(v10 + 32) = v4;
  *(_QWORD *)(v10 + 40) = v2;
  *(_QWORD *)(v10 + 48) = v1;
  *(_QWORD *)(v10 + 56) = v13;
  swift_retain(v6);
  swift_retain(v5);
  v11 = v13;
  swift_retain(v10);
  swift_asyncLet_begin(v0 + 16, 0, v9, &unk_1005DAB88, v10, v0 + 1624);
  return swift_asyncLet_get_throwing(v0 + 656, v0 + 1672, sub_10037354C, v0 + 1296);
}

uint64_t sub_10037354C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v1[260] = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 2, v1 + 203, sub_100373FB8, v1 + 216);
  v3 = v1[209];
  v1[261] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_asyncLet_get_throwing(v1 + 2, v1 + 203, sub_1003735D4, v1 + 210);
}

uint64_t sub_1003735D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 2096) = v0;
  if (v0)
    v2 = sub_100374104;
  else
    v2 = sub_1003735FC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003735FC()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  int64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  int64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  NSObject *v77;
  uint64_t v78;
  uint8_t *v79;
  NSObject *log;
  os_log_t loga;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  uint64_t *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint8_t *v88;
  uint64_t v89;
  _QWORD *v90;

  v1 = (uint64_t *)(v0 + 1528);
  v87 = v0 + 1824;
  v2 = *(_QWORD *)(v0 + 2088);
  v3 = *(_QWORD *)(v0 + 1848);
  v4 = *(_QWORD *)(v0 + 1840);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1624));
  v6 = sub_10014158C(v5, v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  v8 = sub_100374800(v7, v4, v3);
  swift_bridgeObjectRelease(v3);
  *(_QWORD *)(v0 + 1528) = v8;
  if (*(_QWORD *)(v8 + 16) >= 2uLL
    && (v9 = *(_QWORD *)(v0 + 1848),
        v10 = *(_QWORD *)(v0 + 1840),
        swift_bridgeObjectRetain(v9),
        v6 = sub_100374B30(v6, v10, v9),
        swift_bridgeObjectRelease(v9),
        *(_QWORD *)(v6 + 16) == 1))
  {
    swift_bridgeObjectRelease(v8);
    *v1 = v6;
  }
  else
  {
    swift_bridgeObjectRelease(v6);
    v6 = v8;
  }
  v11 = *(_QWORD *)(v0 + 1864);
  v12 = *(_QWORD *)(v0 + 1856);
  swift_retain(v12);
  swift_retain(v11);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1432));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1432), *(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1456));
  swift_release(v12);
  swift_release(v11);
  swift_bridgeObjectRetain(v6);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v16 = 134349056;
    *(_QWORD *)(v0 + 1824) = *(_QWORD *)(v6 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v87, v0 + 1832, v16 + 4);
    swift_bridgeObjectRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "VisibleAccountsQuery: found %{public}ld matching account(s)", v16, 0xCu);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }
  v17 = v0 + 1624;

  v18 = *(_QWORD *)(v0 + 1864);
  v19 = *(_QWORD *)(v0 + 1856);
  (*(void (**)(_QWORD, _QWORD))(v0 + 2008))(*(_QWORD *)(v0 + 1952), *(_QWORD *)(v0 + 1920));
  swift_retain(v19);
  swift_retain(v18);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1400));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1400), *(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1424));
  swift_release(v19);
  swift_release(v18);
  v20 = *(_QWORD *)(v0 + 1528);
  v21 = swift_bridgeObjectRetain_n(v20, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v76 = v23;
    log = v22;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v74 = swift_slowAlloc(32, -1);
    v89 = v74;
    v79 = v24;
    *(_DWORD *)v24 = 136446210;
    v25 = *(_QWORD *)(v20 + 16);
    v26 = _swiftEmptyArrayStorage;
    if (v25)
    {
      v27 = *(_QWORD *)(v0 + 1904);
      v28 = *(_QWORD *)(v0 + 1880);
      v90 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v20);
      sub_10013738C(0, v25, 0);
      v29 = v20 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
      v30 = *(_QWORD *)(v28 + 72);
      v26 = _swiftEmptyArrayStorage;
      do
      {
        v31 = *(_QWORD *)(v0 + 1912);
        v32 = *(_QWORD *)(v0 + 1896);
        v33 = *(_QWORD *)(v0 + 1888);
        sub_10012AF28(v29, v33);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v31, v33, v32);
        sub_10012AF6C(v33);
        if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
        {
          sub_10013738C(0, v26[2] + 1, 1);
          v26 = v90;
        }
        v35 = v26[2];
        v34 = v26[3];
        if (v35 >= v34 >> 1)
        {
          sub_10013738C(v34 > 1, v35 + 1, 1);
          v26 = v90;
        }
        v36 = *(_QWORD *)(v0 + 1912);
        v37 = *(_QWORD *)(v0 + 1896);
        v26[2] = v35 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))((unint64_t)v26+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(_QWORD *)(v27 + 72) * v35, v36, v37);
        v90 = v26;
        v29 += v30;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease(v20);
      v1 = (uint64_t *)(v0 + 1528);
    }
    v41 = *(void (**)(uint64_t, uint64_t))(v0 + 2008);
    v84 = *(_QWORD *)(v0 + 1944);
    v42 = *(_QWORD *)(v0 + 1920);
    v43 = Array.description.getter(v26, *(_QWORD *)(v0 + 1896));
    v45 = v44;
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(v0 + 1816) = sub_1003A4190(v43, v45, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1816, v87, v79 + 4);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease_n(v20, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v76, "VisibleAccountsQuery: matching account IDs: %{public}s", v79, 0xCu);
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v79, -1, -1);

    v41(v84, v42);
    v17 = v0 + 1624;
  }
  else
  {
    v38 = *(void (**)(uint64_t, uint64_t))(v0 + 2008);
    v39 = *(_QWORD *)(v0 + 1944);
    v40 = *(_QWORD *)(v0 + 1920);
    swift_bridgeObjectRelease_n(v20, 2);

    v38(v39, v40);
  }
  v46 = *(_QWORD *)(v0 + 1864);
  v47 = *(_QWORD *)(v0 + 1856);
  swift_retain(v47);
  swift_retain(v46);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1368));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), *(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1392));
  swift_release(v47);
  swift_release(v46);
  v48 = *(_QWORD *)(v0 + 1528);
  v49 = swift_bridgeObjectRetain_n(v48, 2);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v50, v51))
  {
    v86 = v51;
    v85 = v1;
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    loga = (os_log_t)swift_slowAlloc(32, -1);
    v88 = v52;
    v89 = (uint64_t)loga;
    *(_DWORD *)v52 = 136642819;
    v53 = *(_QWORD *)(v48 + 16);
    v54 = _swiftEmptyArrayStorage;
    if (v53)
    {
      v77 = v50;
      v82 = v17;
      v55 = *(_QWORD *)(v0 + 1880);
      v56 = *(_QWORD *)(v0 + 1872);
      v90 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v48);
      sub_100137028(0, v53, 0);
      v75 = v48;
      v57 = v48 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
      v58 = *(_QWORD *)(v55 + 72);
      v54 = v90;
      do
      {
        v59 = *(_QWORD *)(v0 + 1888);
        sub_10012AF28(v57, v59);
        v60 = (uint64_t *)(v59 + *(int *)(v56 + 24));
        v62 = *v60;
        v61 = v60[1];
        swift_bridgeObjectRetain(v61);
        sub_10012AF6C(v59);
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_100137028(0, v54[2] + 1, 1);
          v54 = v90;
        }
        v64 = v54[2];
        v63 = v54[3];
        if (v64 >= v63 >> 1)
        {
          sub_100137028(v63 > 1, v64 + 1, 1);
          v54 = v90;
        }
        v54[2] = v64 + 1;
        v65 = &v54[2 * v64];
        v65[4] = v62;
        v65[5] = v61;
        v57 += v58;
        --v53;
      }
      while (v53);
      v48 = v75;
      swift_bridgeObjectRelease(v75);
      v17 = v82;
      v50 = v77;
    }
    v83 = *(void (**)(uint64_t, uint64_t))(v0 + 2008);
    v78 = *(_QWORD *)(v0 + 1936);
    v69 = *(_QWORD *)(v0 + 1920);
    v70 = Array.description.getter(v54, &type metadata for String);
    v72 = v71;
    swift_bridgeObjectRelease(v54);
    *(_QWORD *)(v0 + 1768) = sub_1003A4190(v70, v72, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1768, v0 + 1776, v88 + 4);
    swift_bridgeObjectRelease(v72);
    swift_bridgeObjectRelease_n(v48, 2);
    _os_log_impl((void *)&_mh_execute_header, v50, v86, "VisibleAccountsQuery: matching account titles: %{sensitive}s", v88, 0xCu);
    swift_arrayDestroy(loga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(loga, -1, -1);
    swift_slowDealloc(v88, -1, -1);

    v83(v78, v69);
    v1 = v85;
  }
  else
  {
    v66 = *(void (**)(uint64_t, uint64_t))(v0 + 2008);
    v67 = *(_QWORD *)(v0 + 1936);
    v68 = *(_QWORD *)(v0 + 1920);
    swift_bridgeObjectRelease_n(v48, 2);

    v66(v67, v68);
  }
  swift_beginAccess(v1, v0 + 1464, 0, 0);
  *(_QWORD *)(v0 + 2104) = *(_QWORD *)(v0 + 1528);
  return swift_asyncLet_finish(v0 + 16, v17, sub_100373E54, v0 + 1488);
}

uint64_t sub_100373E54()
{
  return swift_task_switch(sub_100373E68, 0, 0);
}

uint64_t sub_100373E68()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2072));
  return swift_asyncLet_finish(v0 + 656, v0 + 1672, sub_100373EBC, v0 + 1536);
}

uint64_t sub_100373EBC()
{
  return swift_task_switch(sub_100373ED0, 0, 0);
}

uint64_t sub_100373ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 2072);
  v2 = *(_QWORD *)(v0 + 2064);
  v3 = *(void **)(v0 + 2032);
  v4 = *(void **)(v0 + 2016);
  v5 = *(void **)(v0 + 2000);
  v6 = *(_QWORD *)(v0 + 1984);
  v7 = *(_QWORD *)(v0 + 1960);
  v8 = *(_QWORD *)(v0 + 1952);
  v9 = *(_QWORD *)(v0 + 1944);
  v11 = *(_QWORD *)(v0 + 1936);
  v12 = *(_QWORD *)(v0 + 1912);
  v13 = *(_QWORD *)(v0 + 1888);

  swift_release_n(v2, 2);
  swift_release(v1);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2104));
}

uint64_t sub_100373FB8()
{
  return swift_task_switch(sub_100373FCC, 0, 0);
}

uint64_t sub_100373FCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2072));
  return swift_asyncLet_finish(v0 + 656, v0 + 1672, sub_100374020, v0 + 1776);
}

uint64_t sub_100374020()
{
  return swift_task_switch(sub_100374034, 0, 0);
}

uint64_t sub_100374034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 2072);
  v2 = *(_QWORD *)(v0 + 2064);
  v3 = *(void **)(v0 + 2032);
  v4 = *(void **)(v0 + 2016);
  v5 = *(void **)(v0 + 2000);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1960);
  v7 = *(_QWORD *)(v0 + 1952);
  v8 = *(_QWORD *)(v0 + 1944);
  v9 = *(_QWORD *)(v0 + 1936);
  v10 = *(_QWORD *)(v0 + 1912);
  v11 = *(_QWORD *)(v0 + 1888);
  swift_task_dealloc(*(_QWORD *)(v0 + 1984));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100374104()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2088));
  return swift_asyncLet_finish(v0 + 16, v0 + 1624, sub_100374158, v0 + 1584);
}

uint64_t sub_100374158()
{
  return swift_task_switch(sub_10037416C, 0, 0);
}

uint64_t sub_10037416C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2072));
  return swift_asyncLet_finish(v0 + 656, v0 + 1672, sub_1003741C0, v0 + 1632);
}

uint64_t sub_1003741C0()
{
  return swift_task_switch(sub_1003741D4, 0, 0);
}

uint64_t sub_1003741D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 2072);
  v2 = *(_QWORD *)(v0 + 2064);
  v3 = *(void **)(v0 + 2032);
  v4 = *(void **)(v0 + 2016);
  v5 = *(void **)(v0 + 2000);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1960);
  v7 = *(_QWORD *)(v0 + 1952);
  v8 = *(_QWORD *)(v0 + 1944);
  v9 = *(_QWORD *)(v0 + 1936);
  v10 = *(_QWORD *)(v0 + 1912);
  v11 = *(_QWORD *)(v0 + 1888);
  swift_task_dealloc(*(_QWORD *)(v0 + 1984));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003742A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;

  *(_QWORD *)(v7 + 16) = a1;
  v10 = (_QWORD *)swift_task_alloc(dword_1005DABFC);
  *(_QWORD *)(v7 + 24) = v10;
  *v10 = v7;
  v10[1] = sub_100140CAC;
  return sub_100375ED0(a5, a7);
}

uint64_t sub_1003742FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;

  *(_QWORD *)(v7 + 16) = a1;
  v10 = (_QWORD *)swift_task_alloc(dword_1005DABFC);
  *(_QWORD *)(v7 + 24) = v10;
  *v10 = v7;
  v10[1] = sub_100140BD8;
  return sub_100375ED0(a6, a7);
}

uint64_t sub_100374354(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(_BYTE *)(v3 + 16);
  v10 = (_QWORD *)swift_task_alloc(dword_1005DAB64);
  *(_QWORD *)(v4 + 24) = v10;
  *v10 = v4;
  v10[1] = sub_100136FB0;
  return VisibleAccountsQuery.entities(matching:)(a2, a3, v7, v8, v9);
}

void sub_1003743D0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  char *v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  id v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  void (*v46)(id *, _QWORD);
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  id v61[4];
  __objc2_prot *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;

  v56 = a2;
  v3 = type metadata accessor for AccountEntity(0);
  v54 = *(_QWORD *)(v3 - 8);
  v55 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    v7 = __CocoaSet.count.getter(v6);
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
  }
  if (v7)
  {
    v60 = _swiftEmptyArrayStorage;
    sub_100137370(0, v7 & ~(v7 >> 63), 0);
    if (v57)
    {
      if (a1 < 0)
        v8 = a1;
      else
        v8 = a1 & 0xFFFFFFFFFFFFFF8;
      v9 = __CocoaSet.startIndex.getter(v8);
      v11 = 1;
    }
    else
    {
      v9 = sub_100242B90(a1);
      v11 = v12 & 1;
    }
    v63 = v9;
    v64 = v10;
    v65 = v11;
    if ((v7 & 0x8000000000000000) == 0)
    {
      v13 = a1 & 0xFFFFFFFFFFFFFF8;
      if (a1 < 0)
        v13 = a1;
      v52 = v13;
      v53 = a1;
      while (v7)
      {
        v20 = v63;
        v19 = v64;
        v21 = v65;
        sub_100242FF0(v63, v64, v65, a1);
        v23 = v22;
        v61[0] = 0;
        v24 = objc_msgSend(v56, "existingObjectWithID:error:", v22, v61);
        v25 = v61[0];
        if (!v24)
        {
          v48 = v61[0];
          v49 = _convertNSErrorToError(_:)(v25);

          v51[1] = v49;
          swift_willThrow(v50);

          sub_1001EDA28(v20, v19, v21);
          swift_release(v60);
          return;
        }
        v26 = v24;
        v58 = v7;
        v59 = v19;
        v62 = &OBJC_PROTOCOL___ICAccountObject;
        v27 = (void *)swift_dynamicCastObjCProtocolUnconditional(v24, 1, &v62, 0, 0, 0);
        v28 = v25;
        v29 = v5;
        sub_1003713B4(v27);
        v30 = objc_msgSend(v27, "localizedName");
        if (v30)
        {
          v31 = v30;
          v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
          v34 = v33;

        }
        else
        {
          v32 = 0;
          v34 = 0xE000000000000000;
        }
        v35 = (uint64_t *)&v29[*(int *)(v55 + 24)];
        *v35 = v32;
        v35[1] = v34;
        v36 = objc_msgSend(v27, "objectID");
        v37 = objc_msgSend(v36, "URIRepresentation");

        v5 = v29;
        static URL._unconditionallyBridgeFromObjectiveC(_:)(v37);

        v38 = v60;
        if ((swift_isUniquelyReferenced_nonNull_native(v60) & 1) == 0)
        {
          sub_100137370(0, v38[2] + 1, 1);
          v38 = v60;
        }
        a1 = v53;
        v39 = v59;
        v41 = v38[2];
        v40 = v38[3];
        if (v41 >= v40 >> 1)
        {
          sub_100137370(v40 > 1, v41 + 1, 1);
          v38 = v60;
        }
        v38[2] = v41 + 1;
        sub_100272A90((uint64_t)v5, (uint64_t)v38+ ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))+ *(_QWORD *)(v54 + 72) * v41);
        if (v57)
        {
          if ((v21 & 1) == 0)
            goto LABEL_40;
          v42 = __CocoaSet.Index.handleBitPattern.getter(v20, v39);
          v43 = v58;
          if (v42)
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v42);
          else
            isUniquelyReferenced_nonNull_native = 1;
          v45 = sub_100012E18(&qword_1005DAC00);
          v46 = (void (*)(id *, _QWORD))Set.Index._asCocoa.modify(v61, v45);
          __CocoaSet.formIndex(after:isUnique:)(v47, isUniquelyReferenced_nonNull_native, v52);
          v46(v61, 0);
          v7 = v43 - 1;
          if (!v7)
          {
LABEL_36:
            sub_1001EDA28(v63, v64, v65);
            return;
          }
        }
        else
        {
          v14 = sub_1003CCBC0(v20, v39, v21, a1);
          v16 = v15;
          v18 = v17;
          sub_1001EDA28(v20, v39, v21);
          v63 = v14;
          v64 = v16;
          v65 = v18 & 1;
          v7 = v58 - 1;
          if (v58 == 1)
            goto LABEL_36;
        }
      }
      __break(1u);
    }
    __break(1u);
LABEL_40:
    __break(1u);
  }
}

uint64_t sub_100374800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  _QWORD *v44;

  v41 = a2;
  v42 = a3;
  v40 = type metadata accessor for AccountEntity(0);
  v4 = *(_QWORD *)(v40 - 8);
  v5 = __chkstk_darwin(v40);
  v36 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v34 - v8;
  result = __chkstk_darwin(v7);
  v12 = (char *)&v34 - v11;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 56);
  v38 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v37 = _swiftEmptyArrayStorage;
  v44 = _swiftEmptyArrayStorage;
  v17 = v16 & v14;
  v39 = (unint64_t)(v15 + 63) >> 6;
  if ((v16 & v14) == 0)
    goto LABEL_7;
LABEL_4:
  v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v18 | (v13 << 6); ; i = __clz(__rbit64(v26)) + (v13 << 6))
  {
    v20 = *(_QWORD *)(v4 + 72);
    sub_10012AF28(*(_QWORD *)(a1 + 48) + v20 * i, (uint64_t)v9);
    sub_100272A90((uint64_t)v9, (uint64_t)v12);
    v21 = &v12[*(int *)(v40 + 24)];
    v23 = *(_QWORD *)v21;
    v22 = *((_QWORD *)v21 + 1);
    v43[2] = v23;
    v43[3] = v22;
    v43[0] = v41;
    v43[1] = v42;
    v24 = sub_1001452E8();
    if ((StringProtocol.localizedStandardContains<A>(_:)(v43, &type metadata for String, &type metadata for String, v24, v24) & 1) != 0)
    {
      sub_100272A90((uint64_t)v12, v36);
      v28 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
        sub_100137370(0, v28[2] + 1, 1);
      v29 = v44;
      v31 = v44[2];
      v30 = v44[3];
      v32 = (_QWORD *)(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        v37 = (_QWORD *)(v31 + 1);
        v35 = v31;
        sub_100137370(v30 > 1, v31 + 1, 1);
        v32 = v37;
        v31 = v35;
        v29 = v44;
      }
      v29[2] = v32;
      v33 = *(unsigned __int8 *)(v4 + 80);
      v37 = v29;
      result = sub_100272A90(v36, (uint64_t)v29 + ((v33 + 32) & ~v33) + v31 * v20);
      if (v17)
        goto LABEL_4;
    }
    else
    {
      result = sub_10012AF6C((uint64_t)v12);
      if (v17)
        goto LABEL_4;
    }
LABEL_7:
    v25 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v25 >= v39)
      goto LABEL_29;
    v26 = *(_QWORD *)(v38 + 8 * v25);
    ++v13;
    if (!v26)
    {
      v13 = v25 + 1;
      if (v25 + 1 >= v39)
        goto LABEL_29;
      v26 = *(_QWORD *)(v38 + 8 * v13);
      if (!v26)
      {
        v13 = v25 + 2;
        if (v25 + 2 >= v39)
          goto LABEL_29;
        v26 = *(_QWORD *)(v38 + 8 * v13);
        if (!v26)
        {
          v13 = v25 + 3;
          if (v25 + 3 >= v39)
            goto LABEL_29;
          v26 = *(_QWORD *)(v38 + 8 * v13);
          if (!v26)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v26 - 1) & v26;
  }
  v27 = v25 + 4;
  if (v27 >= v39)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v37;
  }
  v26 = *(_QWORD *)(v38 + 8 * v27);
  if (v26)
  {
    v13 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v13 >= v39)
      goto LABEL_29;
    v26 = *(_QWORD *)(v38 + 8 * v13);
    ++v27;
    if (v26)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_100374B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  _QWORD *v44;

  v41 = a2;
  v42 = a3;
  v40 = type metadata accessor for AccountEntity(0);
  v4 = *(_QWORD *)(v40 - 8);
  v5 = __chkstk_darwin(v40);
  v36 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v34 - v8;
  result = __chkstk_darwin(v7);
  v12 = (char *)&v34 - v11;
  v13 = 0;
  v14 = *(_QWORD *)(a1 + 56);
  v38 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v37 = _swiftEmptyArrayStorage;
  v44 = _swiftEmptyArrayStorage;
  v17 = v16 & v14;
  v39 = (unint64_t)(v15 + 63) >> 6;
  if ((v16 & v14) == 0)
    goto LABEL_7;
LABEL_4:
  v18 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v18 | (v13 << 6); ; i = __clz(__rbit64(v26)) + (v13 << 6))
  {
    v20 = *(_QWORD *)(v4 + 72);
    sub_10012AF28(*(_QWORD *)(a1 + 48) + v20 * i, (uint64_t)v9);
    sub_100272A90((uint64_t)v9, (uint64_t)v12);
    v21 = &v12[*(int *)(v40 + 24)];
    v23 = *(_QWORD *)v21;
    v22 = *((_QWORD *)v21 + 1);
    v43[2] = v23;
    v43[3] = v22;
    v43[0] = v41;
    v43[1] = v42;
    v24 = sub_1001452E8();
    if (StringProtocol.localizedStandardCompare<A>(_:)(v43, &type metadata for String, &type metadata for String, v24, v24))
    {
      result = sub_10012AF6C((uint64_t)v12);
      if (v17)
        goto LABEL_4;
    }
    else
    {
      sub_100272A90((uint64_t)v12, v36);
      v28 = v37;
      if ((swift_isUniquelyReferenced_nonNull_native(v37) & 1) == 0)
        sub_100137370(0, v28[2] + 1, 1);
      v29 = v44;
      v31 = v44[2];
      v30 = v44[3];
      v32 = (_QWORD *)(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        v37 = (_QWORD *)(v31 + 1);
        v35 = v31;
        sub_100137370(v30 > 1, v31 + 1, 1);
        v32 = v37;
        v31 = v35;
        v29 = v44;
      }
      v29[2] = v32;
      v33 = *(unsigned __int8 *)(v4 + 80);
      v37 = v29;
      result = sub_100272A90(v36, (uint64_t)v29 + ((v33 + 32) & ~v33) + v31 * v20);
      if (v17)
        goto LABEL_4;
    }
LABEL_7:
    v25 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v25 >= v39)
      goto LABEL_29;
    v26 = *(_QWORD *)(v38 + 8 * v25);
    ++v13;
    if (!v26)
    {
      v13 = v25 + 1;
      if (v25 + 1 >= v39)
        goto LABEL_29;
      v26 = *(_QWORD *)(v38 + 8 * v13);
      if (!v26)
      {
        v13 = v25 + 2;
        if (v25 + 2 >= v39)
          goto LABEL_29;
        v26 = *(_QWORD *)(v38 + 8 * v13);
        if (!v26)
        {
          v13 = v25 + 3;
          if (v25 + 3 >= v39)
            goto LABEL_29;
          v26 = *(_QWORD *)(v38 + 8 * v13);
          if (!v26)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v26 - 1) & v26;
  }
  v27 = v25 + 4;
  if (v27 >= v39)
  {
LABEL_29:
    swift_release(a1);
    return (uint64_t)v37;
  }
  v26 = *(_QWORD *)(v38 + 8 * v27);
  if (v26)
  {
    v13 = v27;
    goto LABEL_22;
  }
  while (1)
  {
    v13 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v13 >= v39)
      goto LABEL_29;
    v26 = *(_QWORD *)(v38 + 8 * v13);
    ++v27;
    if (v26)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

void sub_100374E60(uint64_t a1, char a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  void *v7;

  AppDependency.wrappedValue.getter(&v7);
  v3 = v7;
  sub_1000163BC(0, &qword_1005D04C0, ICUnifiedNoteContext_ptr);
  v4 = static ICUnifiedNoteContext.$prefersViewContext.getter();
  v6 = 0;
  swift_task_localValuePush(v4, &v6, &type metadata for Bool);
  sub_100141ECC(v3, 0, 0, a2, 0, &v7);
  swift_task_localValuePop(v5);

  swift_release(v4);
}

uint64_t sub_100374F2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = a2;
  return swift_task_switch(sub_100374F44, 0, 0);
}

uint64_t sub_100374F44()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  char **v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  __n128 v22;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;

  v1 = (_QWORD *)(v0 + 56);
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_100127DC8((uint64_t)_swiftEmptyArrayStorage);
      v2 = v36;
    }
    else
    {
      v2 = &_swiftEmptySetSingleton;
    }
    *v1 = v2;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      v3 = v0 + 56;
      sub_100127DC8((uint64_t)_swiftEmptyArrayStorage);
      v4 = v37;
    }
    else
    {
      v3 = v0 + 56;
      v4 = &_swiftEmptySetSingleton;
    }
  }
  else
  {
    v2 = &_swiftEmptySetSingleton;
    v3 = v0 + 56;
    *v1 = &_swiftEmptySetSingleton;
    v4 = &_swiftEmptySetSingleton;
  }
  v5 = *(void **)(v0 + 104);
  *(_QWORD *)(v0 + 48) = v4;
  v6 = objc_msgSend(v5, "itemIdentifiers");
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, (char *)&type metadata for Any + 8);
  *(_QWORD *)(v0 + 120) = v7;

  v8 = *(_QWORD *)(v7 + 16);
  *(_QWORD *)(v0 + 128) = v8;
  if (v8)
  {
    v9 = 0;
    v10 = v0 + 48;
    v11 = (unint64_t *)&qword_1005D2500;
    v12 = &selRef_filteredSections;
    v13 = v3;
    while (1)
    {
      *(_QWORD *)(v0 + 136) = v9;
      sub_100128424(*(_QWORD *)(v0 + 120) + 32 * v9 + 32, v0 + 16);
      v15 = sub_1000163BC(0, v11, NSManagedObjectID_ptr);
      if ((swift_dynamicCast(v0 + 64, v0 + 16, (char *)&type metadata for Any + 8, v15, 6) & 1) == 0)
        goto LABEL_7;
      v16 = *(void **)(v0 + 64);
      *(_QWORD *)(v0 + 144) = v16;
      if (objc_msgSend(v16, v12[320]))
        break;
      if (objc_msgSend(v16, "ic_isModernFolderType"))
      {
        AppDependency.wrappedValue.getter((_QWORD *)(v0 + 88));
        v24 = *(void **)(v0 + 88);
        v25 = objc_msgSend(v24, "modernManagedObjectContext");
        *(_QWORD *)(v0 + 152) = v25;

        v26 = swift_allocObject(&unk_10056BA10, 32, 7);
        *(_QWORD *)(v0 + 160) = v26;
        *(_QWORD *)(v26 + 16) = v25;
        *(_QWORD *)(v26 + 24) = v16;
        v27 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
        v25;
        v28 = v16;
        v29 = (_QWORD *)swift_task_alloc(v27);
        *(_QWORD *)(v0 + 168) = v29;
        v30 = sub_100012E18(&qword_1005D1230);
        *v29 = v0;
        v29[1] = sub_100375360;
        return NSManagedObjectContext.perform<A>(_:)(v0 + 96, sub_100376908, v26, v30);
      }
      if (objc_msgSend(v16, "ic_isLegacyAccountType"))
      {
        v14 = v16;
        goto LABEL_6;
      }
      if (objc_msgSend(v16, "ic_isLegacyFolderType"))
      {
        v17 = v11;
        v18 = v10;
        v19 = v13;
        AppDependency.wrappedValue.getter((_QWORD *)(v0 + 72));
        v20 = *(void **)(v0 + 72);
        v21 = objc_msgSend(v20, "htmlManagedObjectContext");
        *(_QWORD *)(v0 + 176) = v21;

        if (v21)
        {
          v31 = swift_allocObject(&unk_10056B9E8, 32, 7);
          *(_QWORD *)(v0 + 184) = v31;
          *(_QWORD *)(v31 + 16) = v21;
          *(_QWORD *)(v31 + 24) = v16;
          v32 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
          v33 = v16;
          v21;
          v34 = (_QWORD *)swift_task_alloc(v32);
          *(_QWORD *)(v0 + 192) = v34;
          v35 = sub_100012E18(&qword_1005D1230);
          *v34 = v0;
          v34[1] = sub_10037572C;
          return NSManagedObjectContext.perform<A>(_:)(v0 + 80, sub_1003768F0, v31, v35);
        }

        v13 = v19;
        v10 = v18;
        v11 = v17;
        v12 = &selRef_filteredSections;
      }
      else
      {

      }
LABEL_7:
      v9 = *(_QWORD *)(v0 + 136) + 1;
      if (v9 == *(_QWORD *)(v0 + 128))
      {
        v22 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
        v4 = *(void **)(v0 + 48);
        v2 = *(void **)(v0 + 56);
        return (*(uint64_t (**)(void *, void *, __n128))(v0 + 8))(v2, v4, v22);
      }
    }
    v14 = v16;
LABEL_6:
    sub_100302C94((Swift::Int *)&v38, v14);

    goto LABEL_7;
  }
  v22 = swift_bridgeObjectRelease(v7);
  return (*(uint64_t (**)(void *, void *, __n128))(v0 + 8))(v2, v4, v22);
}

uint64_t sub_100375360()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_release(v1);
  return swift_task_switch(sub_1003753BC, 0, 0);
}

uint64_t sub_1003753BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  id v31;

  v2 = v0 + 96;
  v1 = *(void **)(v0 + 96);
  v4 = *(void **)(v0 + 144);
  v3 = *(void **)(v0 + 152);
  if (v1)
  {
    sub_100302C94((Swift::Int *)&v31, v1);

  }
  else
  {

  }
  v5 = v0 + 56;
  v6 = *(_QWORD *)(v0 + 136) + 1;
  if (v6 == *(_QWORD *)(v0 + 128))
  {
LABEL_5:
    v7 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
    return (*(uint64_t (**)(_QWORD, _QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 48), v7);
  }
  v9 = v0 + 16;
  v10 = v0 + 48;
  while (1)
  {
    *(_QWORD *)(v0 + 136) = v6;
    sub_100128424(*(_QWORD *)(v0 + 120) + 32 * v6 + 32, v9);
    v12 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    if ((swift_dynamicCast(v0 + 64, v9, (char *)&type metadata for Any + 8, v12, 6) & 1) == 0)
      goto LABEL_9;
    v13 = *(void **)(v0 + 64);
    *(_QWORD *)(v0 + 144) = v13;
    if (!objc_msgSend(v13, "ic_isModernAccountType"))
      break;
    v11 = v13;
LABEL_8:
    sub_100302C94((Swift::Int *)&v31, v11);

LABEL_9:
    v6 = *(_QWORD *)(v0 + 136) + 1;
    if (v6 == *(_QWORD *)(v0 + 128))
      goto LABEL_5;
  }
  if (objc_msgSend(v13, "ic_isModernFolderType"))
  {
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 88));
    v19 = *(void **)(v0 + 88);
    v20 = objc_msgSend(v19, "modernManagedObjectContext");
    *(_QWORD *)(v0 + 152) = v20;

    v21 = swift_allocObject(&unk_10056BA10, 32, 7);
    *(_QWORD *)(v0 + 160) = v21;
    *(_QWORD *)(v21 + 16) = v20;
    *(_QWORD *)(v21 + 24) = v13;
    v22 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v20;
    v23 = v13;
    v24 = (_QWORD *)swift_task_alloc(v22);
    *(_QWORD *)(v0 + 168) = v24;
    v25 = sub_100012E18(&qword_1005D1230);
    *v24 = v0;
    v24[1] = sub_100375360;
    return NSManagedObjectContext.perform<A>(_:)(v2, sub_100376908, v21, v25);
  }
  if (objc_msgSend(v13, "ic_isLegacyAccountType"))
  {
    v11 = v13;
    goto LABEL_8;
  }
  if (!objc_msgSend(v13, "ic_isLegacyFolderType"))
  {

    goto LABEL_9;
  }
  v14 = v10;
  v15 = v2;
  v16 = v5;
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 72));
  v17 = *(void **)(v0 + 72);
  v18 = objc_msgSend(v17, "htmlManagedObjectContext");
  *(_QWORD *)(v0 + 176) = v18;

  if (!v18)
  {

    v5 = v16;
    v2 = v15;
    v10 = v14;
    goto LABEL_9;
  }
  v26 = swift_allocObject(&unk_10056B9E8, 32, 7);
  *(_QWORD *)(v0 + 184) = v26;
  *(_QWORD *)(v26 + 16) = v18;
  *(_QWORD *)(v26 + 24) = v13;
  v27 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v28 = v13;
  v18;
  v29 = (_QWORD *)swift_task_alloc(v27);
  *(_QWORD *)(v0 + 192) = v29;
  v30 = sub_100012E18(&qword_1005D1230);
  *v29 = v0;
  v29[1] = sub_10037572C;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 80, sub_1003768F0, v26, v30);
}

uint64_t sub_10037572C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  swift_release(v1);
  return swift_task_switch(sub_100375788, 0, 0);
}

uint64_t sub_100375788()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  __n128 v6;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  id v26;

  v1 = *(void **)(v0 + 80);
  v2 = v0 + 48;
  v3 = *(void **)(v0 + 176);
  v4 = *(void **)(v0 + 144);
  if (v1)
  {
    sub_100302C94((Swift::Int *)&v26, v1);

  }
  else
  {

  }
  v5 = *(_QWORD *)(v0 + 136) + 1;
  if (v5 == *(_QWORD *)(v0 + 128))
  {
LABEL_5:
    v6 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
    return (*(uint64_t (**)(_QWORD, _QWORD, __n128))(v0 + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 48), v6);
  }
  while (1)
  {
    *(_QWORD *)(v0 + 136) = v5;
    sub_100128424(*(_QWORD *)(v0 + 120) + 32 * v5 + 32, v0 + 16);
    v9 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    if ((swift_dynamicCast(v0 + 64, v0 + 16, (char *)&type metadata for Any + 8, v9, 6) & 1) == 0)
      goto LABEL_9;
    v10 = *(void **)(v0 + 64);
    *(_QWORD *)(v0 + 144) = v10;
    if (!objc_msgSend(v10, "ic_isModernAccountType"))
      break;
    v8 = v10;
LABEL_8:
    sub_100302C94((Swift::Int *)&v26, v8);

LABEL_9:
    v5 = *(_QWORD *)(v0 + 136) + 1;
    if (v5 == *(_QWORD *)(v0 + 128))
      goto LABEL_5;
  }
  if (objc_msgSend(v10, "ic_isModernFolderType"))
  {
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 88));
    v14 = *(void **)(v0 + 88);
    v15 = objc_msgSend(v14, "modernManagedObjectContext");
    *(_QWORD *)(v0 + 152) = v15;

    v16 = swift_allocObject(&unk_10056BA10, 32, 7);
    *(_QWORD *)(v0 + 160) = v16;
    *(_QWORD *)(v16 + 16) = v15;
    *(_QWORD *)(v16 + 24) = v10;
    v17 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v15;
    v18 = v10;
    v19 = (_QWORD *)swift_task_alloc(v17);
    *(_QWORD *)(v0 + 168) = v19;
    v20 = sub_100012E18(&qword_1005D1230);
    *v19 = v0;
    v19[1] = sub_100375360;
    return NSManagedObjectContext.perform<A>(_:)(v0 + 96, sub_100376908, v16, v20);
  }
  if (objc_msgSend(v10, "ic_isLegacyAccountType"))
  {
    v8 = v10;
    goto LABEL_8;
  }
  if (!objc_msgSend(v10, "ic_isLegacyFolderType"))
  {

    goto LABEL_9;
  }
  v11 = v2;
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 72));
  v12 = *(void **)(v0 + 72);
  v13 = objc_msgSend(v12, "htmlManagedObjectContext");
  *(_QWORD *)(v0 + 176) = v13;

  if (!v13)
  {

    v2 = v11;
    goto LABEL_9;
  }
  v21 = swift_allocObject(&unk_10056B9E8, 32, 7);
  *(_QWORD *)(v0 + 184) = v21;
  *(_QWORD *)(v21 + 16) = v13;
  *(_QWORD *)(v21 + 24) = v10;
  v22 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v23 = v10;
  v13;
  v24 = (_QWORD *)swift_task_alloc(v22);
  *(_QWORD *)(v0 + 192) = v24;
  v25 = sub_100012E18(&qword_1005D1230);
  *v24 = v0;
  v24[1] = sub_10037572C;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 80, sub_1003768F0, v21, v25);
}

uint64_t sub_100375ADC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_1005DAB3C);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100145358;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_100372910, 0, 0);
}

uint64_t sub_100375B58()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100375B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = swift_task_alloc(dword_1005DAB54);
  v6 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100130768;
  *(_QWORD *)(v5 + 40) = v4;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_100372A48, 0, 0);
}

uint64_t sub_100375C08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = (_QWORD *)swift_task_alloc(dword_1005DAB6C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100145358;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1005DABFC);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_100140CAC;
  return sub_100375ED0(v4, v5);
}

uint64_t sub_100375C90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = (_QWORD *)swift_task_alloc(dword_1005DAB84);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100145358;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1005DABFC);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_100140BD8;
  return sub_100375ED0(v5, v4);
}

unint64_t sub_100375D14()
{
  unint64_t result;

  result = qword_1005DAB90;
  if (!qword_1005DAB90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleAccountsQuery, &type metadata for VisibleAccountsQuery);
    atomic_store(result, (unint64_t *)&qword_1005DAB90);
  }
  return result;
}

unint64_t sub_100375D5C()
{
  unint64_t result;

  result = qword_1005DAB98[0];
  if (!qword_1005DAB98[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleAccountsQuery, &type metadata for VisibleAccountsQuery);
    atomic_store(result, qword_1005DAB98);
  }
  return result;
}

uint64_t sub_100375DA0()
{
  return sub_100019C6C((unint64_t *)&unk_1005CEE40, type metadata accessor for AccountEntity, (uint64_t)&protocol conformance descriptor for AccountEntity);
}

unint64_t sub_100375DD0()
{
  unint64_t result;

  result = qword_1005DABB8;
  if (!qword_1005DABB8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleAccountsQuery, &type metadata for VisibleAccountsQuery);
    atomic_store(result, (unint64_t *)&qword_1005DABB8);
  }
  return result;
}

uint64_t sub_100375E14()
{
  return sub_100019C6C(&qword_1005DABC0, type metadata accessor for AccountEntity, (uint64_t)&protocol conformance descriptor for AccountEntity);
}

unint64_t sub_100375E44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DABC8[0];
  if (!qword_1005DABC8[0])
  {
    v1 = sub_10001537C(&qword_1005DAB48);
    sub_100019C6C(&qword_1005DABC0, type metadata accessor for AccountEntity, (uint64_t)&protocol conformance descriptor for AccountEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, qword_1005DABC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for VisibleAccountsQuery()
{
  return &type metadata for VisibleAccountsQuery;
}

uint64_t sub_100375ED0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[9] = a1;
  v2[10] = a2;
  v3 = type metadata accessor for AccountEntity(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v5);
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  return swift_task_switch(sub_100375F64, 0, 0);
}

void sub_100375F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD *v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 72);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 72);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    v5 = sub_100167280();
    Set.Iterator.init(_cocoa:)(v3, v4, v5);
    v6 = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v7 = v1 + 56;
    v9 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v1);
    v8 = 0;
  }
  *(_QWORD *)(v0 + 144) = v6;
  *(_QWORD *)(v0 + 152) = v7;
  *(_QWORD *)(v0 + 176) = v8;
  *(_QWORD *)(v0 + 184) = v10;
  *(_QWORD *)(v0 + 160) = v9;
  *(_QWORD *)(v0 + 168) = &_swiftEmptySetSingleton;
  if (v6 < 0)
  {
    v18 = __CocoaSet.Iterator.next()(v6);
    if (v18)
    {
      v19 = v18;
      *(_QWORD *)(v0 + 64) = v18;
      v20 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      swift_unknownObjectRetain(v19);
      swift_dynamicCast(v0 + 56, v0 + 64, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
      v17 = *(id *)(v0 + 56);
      swift_unknownObjectRelease(v19, v21);
      v16 = v8;
      v14 = v10;
LABEL_16:
      *(_QWORD *)(v0 + 200) = v16;
      *(_QWORD *)(v0 + 208) = v14;
      *(_QWORD *)(v0 + 192) = v17;
      if (v17)
      {
        v22 = *(void **)(v0 + 80);
        v23 = swift_allocObject(&unk_10056B970, 32, 7);
        *(_QWORD *)(v0 + 216) = v23;
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = v17;
        v24 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
        v25 = v17;
        v26 = v22;
        v27 = v25;
        v28 = v26;
        v29 = v27;
        v30 = v28;
        v31 = (_QWORD *)swift_task_alloc(v24);
        *(_QWORD *)(v0 + 224) = v31;
        *v31 = v0;
        v31[1] = sub_1003762BC;
        NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 120), sub_10013B0D0, v23, *(_QWORD *)(v0 + 88));
        return;
      }
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  if (v10)
  {
    v14 = (v10 - 1) & v10;
    v15 = __clz(__rbit64(v10)) | (v8 << 6);
    v16 = v8;
LABEL_13:
    v17 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
    goto LABEL_16;
  }
  v32 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    v33 = (unint64_t)(v9 + 64) >> 6;
    if (v32 < v33)
    {
      v34 = *(_QWORD *)(v7 + 8 * v32);
      v16 = v8 + 1;
      if (v34)
      {
LABEL_21:
        v14 = (v34 - 1) & v34;
        v15 = __clz(__rbit64(v34)) + (v16 << 6);
        goto LABEL_13;
      }
      v16 = v8 + 2;
      if (v8 + 2 < v33)
      {
        v34 = *(_QWORD *)(v7 + 8 * v16);
        if (v34)
          goto LABEL_21;
        v16 = v8 + 3;
        if (v8 + 3 < v33)
        {
          v34 = *(_QWORD *)(v7 + 8 * v16);
          if (v34)
            goto LABEL_21;
          v16 = v8 + 4;
          if (v8 + 4 < v33)
          {
            v34 = *(_QWORD *)(v7 + 8 * v16);
            if (v34)
              goto LABEL_21;
            v16 = v8 + 5;
            if (v8 + 5 < v33)
            {
              v34 = *(_QWORD *)(v7 + 8 * v16);
              if (v34)
                goto LABEL_21;
              v35 = v8 + 6;
              while (v33 != v35)
              {
                v34 = *(_QWORD *)(v7 + 8 * v35++);
                if (v34)
                {
                  v16 = v35 - 1;
                  goto LABEL_21;
                }
              }
            }
          }
        }
      }
    }
LABEL_34:
    v36 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 120);
    v37 = *(_QWORD *)(v0 + 128);
    v40 = *(_QWORD *)(v0 + 104);
    v39 = *(_QWORD *)(v0 + 112);
    sub_1001452E0(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    (*(void (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
    return;
  }
  __break(1u);
}

uint64_t sub_1003762BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100144994;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 216));
    v4 = sub_100376328;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_100376328()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  _QWORD *v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[9];

  v1 = *(void **)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(void **)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);

  sub_100272A90(v5, v3);
  sub_100272A90(v3, v4);
  Hasher.init(_seed:)(v69, *(_QWORD *)(v2 + 40));
  v8 = type metadata accessor for AccountID(0);
  v9 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
  swift_bridgeObjectRetain(v2);
  dispatch thunk of Hashable.hash(into:)(v69, v8, v9);
  v10 = v4 + *(int *)(v6 + 20);
  v11 = type metadata accessor for URL(0);
  v12 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(v69, v11, v12);
  v13 = (_QWORD *)(v4 + *(int *)(v6 + 24));
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(v69, v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v2 + 32);
  v18 = v16 & ~v17;
  v19 = v2 + 56;
  if (((*(_QWORD *)(v2 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
  {
    v20 = ~v17;
    v21 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72);
    while (1)
    {
      v23 = *(_QWORD *)(v0 + 136);
      v24 = *(_QWORD *)(v0 + 104);
      sub_10012AF28(*(_QWORD *)(v21 + 48) + v18 * v22, v24);
      if ((static AccountID.== infix(_:_:)(v24, v23) & 1) != 0
        && (static URL.== infix(_:_:)(*(_QWORD *)(v0 + 104) + *(int *)(*(_QWORD *)(v0 + 88) + 20), v10) & 1) != 0)
      {
        v25 = *(_QWORD *)(v0 + 104);
        v26 = (_QWORD *)(v25 + *(int *)(*(_QWORD *)(v0 + 88) + 24));
        v27 = v26[1];
        v28 = v13[1];
        if (*v26 == *v13 && v27 == v28)
          goto LABEL_12;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v26, v27, *v13, v28, 0) & 1) != 0)
          break;
      }
      sub_10012AF6C(*(_QWORD *)(v0 + 104));
      v18 = (v18 + 1) & v20;
      if (((*(_QWORD *)(v19 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
        goto LABEL_13;
    }
    v25 = *(_QWORD *)(v0 + 104);
LABEL_12:
    v30 = *(_QWORD *)(v0 + 168);
    v31 = *(_QWORD *)(v0 + 136);
    sub_10012AF6C(v25);
    swift_bridgeObjectRelease(v30);
    sub_10012AF6C(v31);
    v32 = *(_QWORD *)(v0 + 168);
  }
  else
  {
LABEL_13:
    v33 = *(_QWORD *)(v0 + 168);
    v34 = *(_QWORD *)(v0 + 136);
    v35 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease(v33);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v33);
    sub_10012AF28(v34, v35);
    v69[0] = v33;
    sub_100307788(v35, v18, isUniquelyReferenced_nonNull_native);
    v32 = v69[0];
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10012AF6C(v34);
  }

  v38 = *(_QWORD *)(v0 + 200);
  v39 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 176) = v38;
  *(_QWORD *)(v0 + 184) = v39;
  *(_QWORD *)(v0 + 168) = v32;
  v40 = *(_QWORD *)(v0 + 144);
  if (v40 < 0)
  {
    v45 = __CocoaSet.Iterator.next()(v37);
    if (v45)
    {
      v46 = v45;
      *(_QWORD *)(v0 + 64) = v45;
      v47 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      swift_unknownObjectRetain(v46);
      swift_dynamicCast(v0 + 56, v0 + 64, (char *)&type metadata for Swift.AnyObject + 8, v47, 7);
      v44 = *(id *)(v0 + 56);
      swift_unknownObjectRelease(v46, v48);
      v43 = v38;
      v41 = v39;
LABEL_20:
      *(_QWORD *)(v0 + 200) = v43;
      *(_QWORD *)(v0 + 208) = v41;
      *(_QWORD *)(v0 + 192) = v44;
      if (v44)
      {
        v49 = *(void **)(v0 + 80);
        v50 = swift_allocObject(&unk_10056B970, 32, 7);
        *(_QWORD *)(v0 + 216) = v50;
        *(_QWORD *)(v50 + 16) = v49;
        *(_QWORD *)(v50 + 24) = v44;
        v51 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
        v52 = v44;
        v53 = v49;
        v54 = v52;
        v55 = v53;
        v56 = v54;
        v57 = v55;
        v58 = (_QWORD *)swift_task_alloc(v51);
        *(_QWORD *)(v0 + 224) = v58;
        *v58 = v0;
        v58[1] = sub_1003762BC;
        NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 120), sub_10013B0D0, v50, *(_QWORD *)(v0 + 88));
        return;
      }
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  if (v39)
  {
    v41 = (v39 - 1) & v39;
    v42 = __clz(__rbit64(v39)) | (v38 << 6);
    v43 = v38;
LABEL_17:
    v44 = *(id *)(*(_QWORD *)(v40 + 48) + 8 * v42);
    goto LABEL_20;
  }
  v59 = v38 + 1;
  if (!__OFADD__(v38, 1))
  {
    v60 = (unint64_t)(*(_QWORD *)(v0 + 160) + 64) >> 6;
    if (v59 < v60)
    {
      v61 = *(_QWORD *)(v0 + 152);
      v62 = *(_QWORD *)(v61 + 8 * v59);
      v43 = v38 + 1;
      if (v62)
      {
LABEL_25:
        v41 = (v62 - 1) & v62;
        v42 = __clz(__rbit64(v62)) + (v43 << 6);
        goto LABEL_17;
      }
      v43 = v38 + 2;
      if (v38 + 2 < v60)
      {
        v62 = *(_QWORD *)(v61 + 8 * v43);
        if (v62)
          goto LABEL_25;
        v43 = v38 + 3;
        if (v38 + 3 < v60)
        {
          v62 = *(_QWORD *)(v61 + 8 * v43);
          if (v62)
            goto LABEL_25;
          v43 = v38 + 4;
          if (v38 + 4 < v60)
          {
            v62 = *(_QWORD *)(v61 + 8 * v43);
            if (v62)
              goto LABEL_25;
            v43 = v38 + 5;
            if (v38 + 5 < v60)
            {
              v62 = *(_QWORD *)(v61 + 8 * v43);
              if (v62)
                goto LABEL_25;
              v63 = v38 + 6;
              while (v60 != v63)
              {
                v62 = *(_QWORD *)(v61 + 8 * v63++);
                if (v62)
                {
                  v43 = v63 - 1;
                  goto LABEL_25;
                }
              }
            }
          }
        }
      }
    }
LABEL_38:
    v64 = *(_QWORD *)(v0 + 136);
    v66 = *(_QWORD *)(v0 + 120);
    v65 = *(_QWORD *)(v0 + 128);
    v68 = *(_QWORD *)(v0 + 104);
    v67 = *(_QWORD *)(v0 + 112);
    sub_1001452E0(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    (*(void (**)(uint64_t))(v0 + 8))(v32);
    return;
  }
  __break(1u);
}

uint64_t sub_100376850()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100376880(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100372B08(*(_QWORD *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_1003768A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_1003768D4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1003729D0(*(_QWORD *)(v1 + 16), *(void **)(v1 + 32), a1);
}

void sub_1003768F0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100372C48(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_100376908(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100372B64(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

id sub_100376928()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell____lazy_storage___textField;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell____lazy_storage___textField);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell____lazy_storage___textField);
  }
  else
  {
    v4 = sub_100376A60(v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

double sub_100376988(void *a1)
{
  uint64_t v1;
  id v3;
  double result;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = objc_msgSend(a1, "markedTextRange");

  if (!v3)
  {
    v5 = *(void (**)(uint64_t, uint64_t))(v1
                                                 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell_textDidChange);
    if (v5)
    {
      v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell_textDidChange + 8);
      swift_retain(v6);
      v7 = objc_msgSend(a1, "text");
      if (v7)
      {
        v8 = v7;
        v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        v11 = v10;

      }
      else
      {
        v9 = 0;
        v11 = 0;
      }
      v5(v9, v11);
      sub_100012C50((uint64_t)v5, v6);
      *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
    }
  }
  return result;
}

id sub_100376A60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v16;

  v2 = type metadata accessor for UIListContentConfiguration.TextProperties(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UIListContentConfiguration(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone((Class)UITextField), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v11 = static UIListContentConfiguration.cell()();
  UIListContentConfiguration.textProperties.getter(v11);
  v12 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = (void *)UIListContentConfiguration.TextProperties.color.getter(v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  objc_msgSend(v10, "setTextColor:", v13);
  objc_msgSend(v10, "setClearButtonMode:", 1);
  objc_msgSend(v10, "setAdjustsFontForContentSizeCategory:", 1);
  v14 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", UIFontTextStyleBody);
  objc_msgSend(v10, "setFont:", v14);

  objc_msgSend(v10, "addTarget:action:forControlEvents:", a1, "textFieldDidChange:", 0x20000);
  objc_msgSend(v10, "addTarget:action:forControlEvents:", a1, "resignFirstResponder", 0x80000);

  return v10;
}

void sub_100376C38()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for UIListContentConfiguration(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100376928();
  v7 = objc_msgSend(v6, "superview");

  if (!v7)
  {
    v9 = static UIListContentConfiguration.cell()(v8);
    v10 = UIListContentConfiguration.directionalLayoutMargins.getter(v9);
    v12 = v11;
    v14 = v13;
    v15 = objc_msgSend(v1, "contentView");
    v16 = sub_100376928();
    objc_msgSend(v15, "addSubview:", v16);

    v17 = sub_100376928();
    objc_msgSend(v17, "ic_addAnchorsToFillSuperviewWithLeadingPadding:trailingPadding:verticalPadding:usesSafeAreaLayoutGuideHorizontally:usesSafeAreaLayoutGuideVertically:", 0, 0, v12, v14, v10);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

id sub_100376F50()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SmartFolderComposerTextFieldCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SmartFolderComposerTextFieldCell()
{
  return objc_opt_self(_TtC11MobileNotes32SmartFolderComposerTextFieldCell);
}

uint64_t sub_100376FDC()
{
  return 5;
}

objc_class *sub_100376FE4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::OpaquePointer preferredElementSize;
  id v7;
  Swift::String v8;
  Class isa;
  Swift::OpaquePointer v10;
  id v11;
  Swift::String v12;
  UIMenu v13;
  void *v14;
  id v15;
  UIImage_optional v17;
  UIImage_optional v18;

  v1 = OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize._rawValue = (void *)swift_allocObject(v5, 64, 7);
    *((_OWORD *)preferredElementSize._rawValue + 1) = xmmword_100451BE0;
    *((_QWORD *)preferredElementSize._rawValue + 4) = sub_100377524();
    *((_QWORD *)preferredElementSize._rawValue + 5) = sub_100377738();
    *((_QWORD *)preferredElementSize._rawValue + 6) = sub_100377958();
    v7 = sub_100377B74();
    *((_QWORD *)preferredElementSize._rawValue + 7) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v17.value.super.isa = 0;
    v17.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v17, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize._rawValue, preferredElementSize).super.super.isa;
    v10._rawValue = (void *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)v10._rawValue + 1) = xmmword_100451BF0;
    v11 = sub_100377344();
    *((_QWORD *)v10._rawValue + 4) = v11;
    *((_QWORD *)v10._rawValue + 5) = isa;
    specialized Array._endMutation()(v11);
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v18.value.super.isa = 0;
    v18.is_nil = 0;
    v13.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v18, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v10._rawValue, v10).super.super.isa;
    v14 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v13;
    v3 = v13.super.super.isa;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_100377160()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BOOL8 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BOOL8 v24;
  id v25;

  v1 = (void *)sub_100377344();
  v2 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  v5 = 1;
  if (v3)
  {
    v4 = objc_opt_self(ICChecklistsFilterTypeSelection);
    if (swift_dynamicCastObjCClass(v3, v4))
      v5 = 0;
  }
  objc_msgSend(v1, "setState:", v5);

  v6 = sub_100377524();
  v7 = *(_QWORD *)(v0 + v2);
  v10 = 0;
  if (v7)
  {
    v8 = objc_opt_self(ICChecklistsFilterTypeSelection);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      if (!objc_msgSend(v9, "selectionType"))
        v10 = 1;
    }
  }
  objc_msgSend(v6, "setState:", v10);

  v11 = sub_100377738();
  v12 = *(_QWORD *)(v0 + v2);
  v15 = 0;
  if (v12)
  {
    v13 = objc_opt_self(ICChecklistsFilterTypeSelection);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      if (objc_msgSend(v14, "selectionType") == (id)1)
        v15 = 1;
    }
  }
  objc_msgSend(v11, "setState:", v15);

  v16 = sub_100377958();
  v17 = *(_QWORD *)(v0 + v2);
  v20 = 0;
  if (v17)
  {
    v18 = objc_opt_self(ICChecklistsFilterTypeSelection);
    v19 = (void *)swift_dynamicCastObjCClass(v17, v18);
    if (v19)
    {
      if (objc_msgSend(v19, "selectionType") == (id)2)
        v20 = 1;
    }
  }
  objc_msgSend(v16, "setState:", v20);

  v25 = sub_100377B74();
  v21 = *(_QWORD *)(v0 + v2);
  v24 = 0;
  if (v21)
  {
    v22 = objc_opt_self(ICChecklistsFilterTypeSelection);
    v23 = (void *)swift_dynamicCastObjCClass(v21, v22);
    if (v23)
    {
      if (objc_msgSend(v23, "selectionType") == (id)3)
        v24 = 1;
    }
  }
  objc_msgSend(v25, "setState:", v24);

}

id sub_100377344()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionOff;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionOff];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionOff];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056BBB8, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003780C0, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_1003774A0(uint64_t a1, char *a2)
{
  void *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  sub_100377160();
  v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    v5 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v6 = swift_retain(v5);
    v4(v6);
    sub_100012C50((uint64_t)v4, v5);
  }
}

id sub_100377524()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionAny;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionAny];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionAny];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056BB90, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003780B8, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_100377680(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICChecklistsFilterTypeSelection), "initWithSelectionType:", 0);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100377160();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_100377738()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionIncomplete;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionIncomplete];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionIncomplete];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056BB68, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003780B0, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_1003778A0(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICChecklistsFilterTypeSelection), "initWithSelectionType:", 1);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100377160();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_100377958()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionComplete;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionComplete];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionComplete];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056BB40, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003780A8, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_100377ABC(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICChecklistsFilterTypeSelection), "initWithSelectionType:", 2);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100377160();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_100377B74()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionNone;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionNone];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionNone];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056BB18, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003780A0, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_100377CE4(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICChecklistsFilterTypeSelection), "initWithSelectionType:", 3);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_100377160();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_100377E50(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionAny] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionIncomplete] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionComplete] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionNone] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellChecklists();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

void sub_100377F08()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionOff));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionAny));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionIncomplete));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionComplete));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes34FolderComposerFilterCellChecklists____lazy_storage___menuActionNone));
}

id sub_100377F74()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellChecklists();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellChecklists()
{
  return objc_opt_self(_TtC11MobileNotes34FolderComposerFilterCellChecklists);
}

objc_class *sub_10037803C()
{
  return sub_100376FE4();
}

void sub_10037805C()
{
  sub_100377160();
}

uint64_t sub_10037807C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003780A0(uint64_t a1)
{
  uint64_t v1;

  return sub_100377CE4(a1, *(char **)(v1 + 16));
}

uint64_t sub_1003780A8(uint64_t a1)
{
  uint64_t v1;

  return sub_100377ABC(a1, *(char **)(v1 + 16));
}

uint64_t sub_1003780B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1003778A0(a1, *(char **)(v1 + 16));
}

uint64_t sub_1003780B8(uint64_t a1)
{
  uint64_t v1;

  return sub_100377680(a1, *(char **)(v1 + 16));
}

void sub_1003780C0(uint64_t a1)
{
  uint64_t v1;

  sub_1003774A0(a1, *(char **)(v1 + 16));
}

id EmojiImageGenerator.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "init");
}

unint64_t sub_1003781D4(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v13;
  _QWORD v14[2];

  v2 = HIBYTE(a2) & 0xF;
  v3 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    v7 = sub_100378500(0xFuLL, a1, a2);
    if ((a2 & 0x1000000000000000) != 0)
    {
      v11 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v7 & 0xFFFFFFFFFFFF0000, a1, a2);
    }
    else
    {
      v8 = v7 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v14[0] = a1;
        v14[1] = a2 & 0xFFFFFFFFFFFFFFLL;
        v9 = v14;
        v10 = v2;
      }
      else
      {
        if ((a1 & 0x1000000000000000) != 0)
        {
          v9 = (_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
        }
        else
        {
          v9 = (_QWORD *)_StringObject.sharedUTF8.getter(a1, a2);
          v3 = v13;
        }
        v10 = v3;
      }
      v11 = _decodeScalar(_:startingAt:)(v9, v10, v8);
    }
  }
  else
  {
    v11 = 0;
  }
  LOBYTE(v14[0]) = v4 == 0;
  return v11 | ((unint64_t)(v4 == 0) << 32);
}

unint64_t sub_1003782B0(unint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t i;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v5 = 11;
  v6 = v5 | (v4 << 16);
  v7 = sub_10037859C(0xFuLL, a1, a2);
  result = sub_10037859C(v6, a1, a2);
  v9 = result >> 14;
  if (v7 >> 14 >= result >> 14)
  {
    if (v9 >= v7 >> 14)
      return 0;
    v11 = 0;
    while (1)
    {
      if (__OFSUB__(v11--, 1))
        goto LABEL_41;
      if ((a2 & 0x1000000000000000) == 0)
        break;
      result = String.UnicodeScalarView._foreignIndex(before:)(v7, a1, a2);
      v7 = result;
LABEL_22:
      if (v9 >= v7 >> 14)
        return v11;
    }
    v17 = v7 >> 16;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v22 = a1;
      v23 = a2 & 0xFFFFFFFFFFFFFFLL;
      if ((*((_BYTE *)&v22 + v17 - 1) & 0xC0) == 0x80)
      {
        v18 = 0;
        do
          v20 = *((_BYTE *)&v22 + v17 + v18-- - 2) & 0xC0;
        while (v20 == 128);
        goto LABEL_35;
      }
    }
    else
    {
      result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
      if ((a1 & 0x1000000000000000) == 0)
        result = _StringObject.sharedUTF8.getter(a1, a2);
      if ((*(_BYTE *)(v17 + result - 1) & 0xC0) == 0x80)
      {
        v18 = 0;
        do
          v19 = *(_BYTE *)(result + v17 - 2 + v18--) & 0xC0;
        while (v19 == 128);
LABEL_35:
        v21 = 1 - v18;
LABEL_37:
        v7 = (v7 - (v21 << 16)) & 0xFFFFFFFFFFFF0000 | 5;
        goto LABEL_22;
      }
    }
    v21 = 1;
    goto LABEL_37;
  }
  for (i = 0; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    if ((a2 & 0x1000000000000000) != 0)
    {
      result = String.UnicodeScalarView._foreignIndex(after:)(v7, a1, a2);
      v7 = result;
    }
    else
    {
      v12 = v7 >> 16;
      if ((a2 & 0x2000000000000000) != 0)
      {
        v22 = a1;
        v23 = a2 & 0xFFFFFFFFFFFFFFLL;
        v13 = *((unsigned __int8 *)&v22 + v12);
      }
      else
      {
        result = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a1 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a1, a2);
        v13 = *(unsigned __int8 *)(result + v12);
      }
      v14 = (char)v13;
      v15 = __clz(v13 ^ 0xFF) - 24;
      if (v14 >= 0)
        LOBYTE(v15) = 1;
      v7 = ((v12 + v15) << 16) | 5;
    }
    if (v9 <= v7 >> 14)
      return v11;
  }
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

unint64_t sub_100378500(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_10037882C(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1003786A4(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_10037859C(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 1) == 0 || (result & 0xC) == 4 << v5)
    goto LABEL_9;
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
  {
    __break(1u);
LABEL_9:
    result = sub_100378638(result, a2, a3);
    if ((result & 1) == 0)
      return result & 0xC | sub_1003786A4(result, a2, a3) & 0xFFFFFFFFFFFFFFF3 | 1;
  }
  return result;
}

unint64_t sub_100378638(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_1003787B4(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 < result >> 16)
    __break(1u);
  return result;
}

unint64_t sub_1003786A4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  _QWORD v13[4];

  if ((result & 0xC000) != 0 || result < 0x10000)
  {
    result &= 0xFFFFFFFFFFFF0000;
  }
  else
  {
    v5 = result >> 16;
    if ((a3 & 0x1000000000000000) == 0)
    {
      v13[2] = v3;
      v13[3] = v4;
      if ((a3 & 0x2000000000000000) != 0)
      {
        v13[0] = a2;
        v13[1] = a3 & 0xFFFFFFFFFFFFFFLL;
        if (v5 != (HIBYTE(a3) & 0xF) && (*((_BYTE *)v13 + v5) & 0xC0) == 0x80)
        {
          do
          {
            v7 = v5 - 1;
            v11 = *((_BYTE *)&v12 + v5-- + 7) & 0xC0;
          }
          while (v11 == 128);
          return v7 << 16;
        }
        goto LABEL_14;
      }
      if ((a2 & 0x1000000000000000) != 0)
      {
        v6 = (a3 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if (v5 == (a2 & 0xFFFFFFFFFFFFLL))
          goto LABEL_14;
      }
      else
      {
        v12 = result >> 16;
        v6 = _StringObject.sharedUTF8.getter(a2, a3);
        v5 = v12;
        if (v12 == v10)
          goto LABEL_14;
      }
      if ((*(_BYTE *)(v6 + v5) & 0xC0) == 0x80)
      {
        do
        {
          v7 = v5 - 1;
          v8 = *(_BYTE *)(v6 - 1 + v5--) & 0xC0;
        }
        while (v8 == 128);
        return v7 << 16;
      }
LABEL_14:
      v7 = v5;
      return v7 << 16;
    }
    v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v9 = a2 & 0xFFFFFFFFFFFFLL;
    if (v5 != v9)
      return _StringGuts.foreignScalarAlign(_:)();
  }
  return result;
}

uint64_t sub_1003787B4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

unint64_t sub_10037882C(unint64_t result, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;

  v5 = (a2 >> 59) & 1;
  if ((a3 & 0x1000000000000000) == 0)
    LOBYTE(v5) = 1;
  if ((result & 0xC) == 4 << v5)
    result = sub_1003787B4(result, a2, a3);
  v6 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v6 = a2 & 0xFFFFFFFFFFFFLL;
  if (v6 <= result >> 16)
    __break(1u);
  return result;
}

_QWORD *sub_100378898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v5;
  void *v7;
  uint64_t i;
  Swift::String v9;
  Swift::String v10;
  void *object;
  Swift::String v12;
  NSString v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  result = _swiftEmptyArrayStorage;
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(a1);
    v7 = (void *)objc_opt_self(UIImage);
    for (i = 0; i != v5; ++i)
    {
      swift_bridgeObjectRetain(a3);
      v9._countAndFlagsBits = 45;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v10._object;
      String.append(_:)(v10);
      swift_bridgeObjectRelease(object);
      v12._countAndFlagsBits = 30832;
      v12._object = (void *)0xE200000000000000;
      String.append(_:)(v12);
      v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(a3);
      v14 = objc_msgSend(v7, "imageNamed:", v13);

      if (v14)
      {
        v15 = objc_msgSend(v14, "CGImage");
        if (v15)
        {
          v16 = v15;
          v17 = objc_msgSend(objc_allocWithZone((Class)NSEmojiImageStrike), "initWithImage:alignmentInset:", v16, 1.0, 2.0);

          if (v17)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v18);
            v20 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
            v19 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v20 >= v19 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
            v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v17);
            specialized Array._endMutation()(v21);
          }
        }
        else
        {

        }
      }
    }
    swift_bridgeObjectRelease(a1);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

id _s11MobileNotes19EmojiImageGeneratorC08generatecD5Asset_11descriptionSo07NSEmojidG0CSgSS_SStF_0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSString v20;
  NSString v21;
  Class isa;
  id v23;
  uint64_t v25;
  unint64_t v26;

  swift_bridgeObjectRetain(a2);
  v7 = sub_1003781D4(a1, a2);
  if ((v7 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v8 = v7;
  v9 = sub_1003782B0(a1, a2);
  swift_bridgeObjectRelease(a2);
  if (v9 != 1)
    return 0;
  v10 = sub_100012E18((uint64_t *)&unk_1005D5630);
  v11 = swift_allocObject(v10, 72, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100451C20;
  *(_QWORD *)(v11 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v11 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v11 + 32) = v8;
  v12 = String.init(format:_:)(22565, 0xE200000000000000, v11);
  v14 = v13;
  v15 = (uint64_t)sub_100378898((uint64_t)&off_100557478, v12, v13);
  v16 = v15;
  if ((unint64_t)v15 >> 62)
  {
    if (v15 < 0)
      v25 = v15;
    else
      v25 = v15 & 0xFFFFFFFFFFFFFF8;
    v26 = sub_100378CB4();
    swift_bridgeObjectRetain(a4);
    v18 = _bridgeCocoaArray<A>(_:)(v25, v26);
  }
  else
  {
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v16);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v17);
    sub_100378CB4();
    v18 = v16;
  }
  swift_bridgeObjectRelease(v16);
  v19 = objc_allocWithZone((Class)NSEmojiImageAsset);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  sub_100378CB4();
  isa = Array._bridgeToObjectiveC()().super.isa;
  v23 = objc_msgSend(v19, "initWithContentIdentifier:shortDescription:strikeImages:", v20, v21, isa, swift_bridgeObjectRelease(v18).n128_f64[0]);

  return v23;
}

uint64_t type metadata accessor for EmojiImageGenerator()
{
  return objc_opt_self(ICEmojiImageGenerator);
}

unint64_t sub_100378CB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DACC8;
  if (!qword_1005DACC8)
  {
    v1 = objc_opt_self(CTEmojiImageStrike);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005DACC8);
  }
  return result;
}

ValueMetadata *_s18RequestRequirementVMa()
{
  return &_s18RequestRequirementVN;
}

ValueMetadata *_s19NoteEditRequirementVMa()
{
  return &_s19NoteEditRequirementVN;
}

ValueMetadata *_s20NoteCountRequirementVMa()
{
  return &_s20NoteCountRequirementVN;
}

ValueMetadata *_s17LaunchRequirementVMa()
{
  return &_s17LaunchRequirementVN;
}

ValueMetadata *_s17CohortRequirementVMa()
{
  return &_s17CohortRequirementVN;
}

unint64_t sub_100378D40(uint64_t a1)
{
  unint64_t result;

  result = sub_100378D64();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100378D64()
{
  unint64_t result;

  result = qword_1005DAD08;
  if (!qword_1005DAD08)
  {
    result = swift_getWitnessTable(&unk_100465654, &_s17CohortRequirementVN);
    atomic_store(result, (unint64_t *)&qword_1005DAD08);
  }
  return result;
}

uint64_t sub_100378DA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  unint64_t v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;

  v45 = a4;
  v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v42 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v42 - v19;
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v42 - v22;
  if (!a2 && !a3 && !v45)
    return 1;
  static Date.now.getter(v21);
  if (*(_QWORD *)(a1 + 16) < a2)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
    return 0;
  }
  v44 = *(_QWORD *)(a1 + 16);
  result = sub_1003790F0(a2, a1);
  v28 = result;
  if (v26 == v27 >> 1)
  {
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v30 = v12;
    v31 = 1;
  }
  else
  {
    if (v26 >= (uint64_t)(v27 >> 1))
    {
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, v25 + *(_QWORD *)(v14 + 72) * v26, v13);
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
    v30 = v12;
    v31 = 0;
  }
  v43 = v29;
  v29(v30, v31, 1, v13);
  swift_bridgeObjectRetain(a1);
  swift_unknownObjectRelease(v28, v32);
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v33(v12, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v23, v13);
    v34 = (uint64_t)v12;
LABEL_24:
    sub_1002BC9C8(v34);
    return 0;
  }
  v35 = v12;
  v36 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v36(v20, v35, v13);
  v37 = Date.numberOfDays(from:)(v20);
  if ((a3 & 0x8000000000000000) != 0 || v37 > a3)
  {
    v40 = *(void (**)(char *, uint64_t))(v14 + 8);
    v40(v20, v13);
    v40(v23, v13);
    return 0;
  }
  if (!v44)
  {
    v43(v10, 1, 1, v13);
    goto LABEL_23;
  }
  (*(void (**)(char *, unint64_t, uint64_t))(v14 + 16))(v10, a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), v13);
  v43(v10, 0, 1, v13);
  if (v33(v10, 1, v13) == 1)
  {
LABEL_23:
    v41 = *(void (**)(char *, uint64_t))(v14 + 8);
    v41(v20, v13);
    v41(v23, v13);
    v34 = (uint64_t)v10;
    goto LABEL_24;
  }
  v36(v17, v10, v13);
  v38 = Date.numberOfDays(from:)(v17);
  v39 = *(void (**)(char *, uint64_t))(v14 + 8);
  v39(v17, v13);
  v39(v20, v13);
  v39(v23, v13);
  result = 1;
  if (v45 >= 1 && v38 < v45)
    return 0;
  return result;
}

uint64_t sub_1003790F0(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for Date(0);
    return a2;
  }
  return result;
}

unint64_t sub_100379154(uint64_t a1)
{
  unint64_t result;

  result = sub_100379178();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100379178()
{
  unint64_t result;

  result = qword_1005DAD48;
  if (!qword_1005DAD48)
  {
    result = swift_getWitnessTable(&unk_100465698, &_s17LaunchRequirementVN);
    atomic_store(result, (unint64_t *)&qword_1005DAD48);
  }
  return result;
}

unint64_t sub_1003791BC(uint64_t a1)
{
  unint64_t result;

  result = sub_1003791E0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003791E0()
{
  unint64_t result;

  result = qword_1005DAD88;
  if (!qword_1005DAD88)
  {
    result = swift_getWitnessTable(&unk_1004656DC, &_s20NoteCountRequirementVN);
    atomic_store(result, (unint64_t *)&qword_1005DAD88);
  }
  return result;
}

BOOL sub_100379224(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v24 - v9;
  v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v24 - v15;
  if (a2 == 0.0)
    return 1;
  sub_1001CE8D4(a1, (uint64_t)&v24 - v15);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v19 = v18(v16, 1, v4);
  sub_1002BC9C8((uint64_t)v16);
  if (v19 == 1)
    return 0;
  v20 = _s19NoteEditRequirementV5DatesVMa(0);
  sub_1001CE8D4(a1 + *(int *)(v20 + 20), (uint64_t)v14);
  if (v18(v14, 1, v4) == 1)
  {
    sub_1002BC9C8((uint64_t)v14);
    return 0;
  }
  else
  {
    v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v10, v14, v4);
    static Date.now.getter(v21);
    v22 = Date.timeIntervalSince(_:)(v10);
    v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v8, v4);
    v23(v10, v4);
    return v22 >= a2;
  }
}

unint64_t sub_1003793F0(uint64_t a1)
{
  unint64_t result;

  result = sub_100379414();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100379414()
{
  unint64_t result;

  result = qword_1005DADC8;
  if (!qword_1005DADC8)
  {
    result = swift_getWitnessTable(&unk_100465720, &_s19NoteEditRequirementVN);
    atomic_store(result, (unint64_t *)&qword_1005DADC8);
  }
  return result;
}

BOOL sub_100379458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v19 - v12;
  if (!a2)
    return 1;
  sub_1001CE8D4(a1, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_1002BC9C8((uint64_t)v6);
    return 1;
  }
  v15 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
  static Date.now.getter(v15);
  v16 = Date.numberOfDays(from:)(v13);
  v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  v17(v13, v7);
  return a2 < 1 || v16 >= a2;
}

unint64_t sub_1003795B0(uint64_t a1)
{
  unint64_t result;

  result = sub_1003795D4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003795D4()
{
  unint64_t result;

  result = qword_1005DAE08;
  if (!qword_1005DAE08)
  {
    result = swift_getWitnessTable(&unk_100465764, &_s18RequestRequirementVN);
    atomic_store(result, (unint64_t *)&qword_1005DAE08);
  }
  return result;
}

uint64_t _s19NoteEditRequirementV5DatesVMa(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DAE68;
  if (!qword_1005DAE68)
    return swift_getSingletonMetadata(a1, &_s19NoteEditRequirementV5DatesVMn);
  return result;
}

void (*sub_100379654(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6))(_QWORD *a1)
{
  uint64_t v10;
  uint64_t v11;
  void (*result)(_QWORD *);

  v10 = type metadata accessor for Date(0);
  *a1 = v10;
  v11 = *(_QWORD *)(v10 - 8);
  a1[1] = v11;
  result = (void (*)(_QWORD *))malloc(*(_QWORD *)(v11 + 64));
  a1[2] = (uint64_t)result;
  if (a2 < a5 || (uint64_t)(a6 >> 1) <= a2)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void))(v11 + 16))();
    return sub_1003796F8;
  }
  return result;
}

void sub_1003796F8(_QWORD *a1)
{
  void *v1;

  v1 = (void *)a1[2];
  (*(void (**)(void *, _QWORD))(a1[1] + 8))(v1, *a1);
  free(v1);
}

uint64_t *sub_100379728(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int (*v9)(uint64_t *, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    if (v9(a2, 1, v7))
    {
      v10 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v12 = *(int *)(a3 + 20);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    if (v9((uint64_t *)v14, 1, v7))
    {
      v15 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v13, v14, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v13, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100379874(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v7 = a1 + *(int *)(a2 + 20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v7, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v7, v4);
  return result;
}

char *sub_100379918(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    v13 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_100379A38(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    v17 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

char *sub_100379BE8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(char *, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    v9 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v10 = *(int *)(a3 + 20);
  v11 = &a1[v10];
  v12 = &a2[v10];
  if (v8(v12, 1, v6))
  {
    v13 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v12, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  return a1;
}

char *sub_100379D08(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = v8(&a1[v12], 1, v6);
  v16 = v8(v14, 1, v6);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v13, v14, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_12;
  }
  if (v16)
  {
LABEL_12:
    v17 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v13, v14, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v13, 0, 1, v6);
  return a1;
}

uint64_t sub_100379EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100379EC4);
}

uint64_t sub_100379EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100379F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100379F10);
}

uint64_t sub_100379F10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

void sub_100379F54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100019C18(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_100379FBC(void *a1, uint64_t a2)
{
  return sub_100379FE4(a1, a2, (unint64_t *)&qword_1005D3D00, NSObject_ptr);
}

uint64_t sub_100379FD0(void *a1, uint64_t a2)
{
  return sub_100379FE4(a1, a2, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
}

uint64_t sub_100379FE4(void *a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  id v5;
  char v6;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  id v19;

  if ((a2 & 0xC000000000000001) != 0)
  {
    v5 = a1;
    v6 = __CocoaSet.contains(_:)();

    return v6 & 1;
  }
  if (!*(_QWORD *)(a2 + 16)
    || (v10 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a2 + 40)),
        v11 = -1 << *(_BYTE *)(a2 + 32),
        v12 = v10 & ~v11,
        v13 = a2 + 56,
        ((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0))
  {
LABEL_11:
    v16 = 0;
    return v16 & 1;
  }
  sub_1000163BC(0, a3, a4);
  v14 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v12);
  v15 = static NSObject.== infix(_:_:)(v14);

  if ((v15 & 1) == 0)
  {
    v17 = ~v11;
    v18 = (v12 + 1) & v17;
    if (((*(_QWORD *)(v13 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0)
    {
      do
      {
        v19 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v18);
        v16 = static NSObject.== infix(_:_:)(v19);

        if ((v16 & 1) != 0)
          break;
        v18 = (v18 + 1) & v17;
      }
      while (((*(_QWORD *)(v13 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
      return v16 & 1;
    }
    goto LABEL_11;
  }
  v16 = 1;
  return v16 & 1;
}

uint64_t sub_10037A140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t RealtimeCollaborationPaperKitController.description.getter()
{
  Swift::String v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;

  _StringGuts.grow(_:)(52);
  v0._object = (void *)0x80000001004857E0;
  v0._countAndFlagsBits = 0xD000000000000031;
  String.append(_:)(v0);
  v1 = type metadata accessor for EditNoteActivity(0);
  v2 = sub_100019C6C(&qword_1005D22C8, (uint64_t (*)(uint64_t))&type metadata accessor for EditNoteActivity, (uint64_t)&protocol conformance descriptor for EditNoteActivity);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 41;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0;
}

uint64_t RealtimeCollaborationPaperKitController.__allocating_init(activity:messageController:cloudConfiguration:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  RealtimeCollaborationPaperKitController.init(activity:messageController:cloudConfiguration:)(a1, a2, a3);
  return v7;
}

uint64_t sub_10037A3A0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005DAEA0);
  v1 = sub_10012A0B0(v0, (uint64_t)qword_1005DAEA0);
  return static Logger.realtimeCollaboration.getter(v1);
}

uint64_t RealtimeCollaborationPaperKitController.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activity;
  v4 = type metadata accessor for EditNoteActivity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t RealtimeCollaborationPaperKitController.messageController.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0
                                + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_messageController));
}

id RealtimeCollaborationPaperKitController.cloudConfiguration.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_cloudConfiguration));
}

id RealtimeCollaborationPaperKitController.note.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_note);
}

uint64_t *RealtimeCollaborationPaperKitController.init(activity:messageController:cloudConfiguration:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  _QWORD *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t inited;
  uint64_t v48;
  uint64_t v49;
  Swift::String v50;
  uint64_t v51;
  void *object;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _BYTE v69[88];
  uint64_t v70;

  v4 = v3;
  v8 = *v4;
  v9 = sub_100012E18(&qword_1005D84C0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = a3;
  v66 = a2;
  v64 = v8;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100128868((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v13 = &_swiftEmptySetSingleton;
  }
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activeParticipants) = (uint64_t)v13;
  v14 = &unk_100601000;
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation) = 0;
  v15 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (!v15
    || (v16 = v15,
        v17 = objc_msgSend(v15, "managedObjectContext"),
        v16,
        !v17))
  {
    type metadata accessor for ICError(0);
    v38 = v37;
    v70 = 225;
    v39 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v40 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v41 = _BridgedStoredNSError.init(_:userInfo:)(&v67, &v70, v39, v38, v40);
    swift_willThrow(v41);
    swift_release(v66);

    v42 = type metadata accessor for EditNoteActivity(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 8))(a1, v42);
LABEL_8:
    swift_bridgeObjectRelease(*(uint64_t *)((char *)v4
                                         + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activeParticipants));
    swift_release(*(uint64_t *)((char *)v4 + v14[459]));
    swift_deallocPartialClassInstance(v4, v64, *(unsigned int *)(*v4 + 48), *(unsigned __int16 *)(*v4 + 52));
    return v4;
  }
  v62 = v10;
  EditNoteActivity.noteID.getter(v18);
  v20 = v19;
  v21 = v17;
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v23 = objc_msgSend((id)objc_opt_self(ICNote), "noteWithIdentifier:context:", v22, v21);

  v63 = v21;
  if (!v23)
  {
    type metadata accessor for ICError(0);
    v45 = v44;
    v70 = 232;
    v46 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v46, v69);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v48;
    v67 = 0;
    v68 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v49 = swift_bridgeObjectRelease(v68);
    v67 = 0xD000000000000020;
    v68 = 0x800000010048B4F0;
    v50._countAndFlagsBits = EditNoteActivity.noteID.getter(v49);
    v51 = a1;
    object = v50._object;
    String.append(_:)(v50);
    swift_bridgeObjectRelease(object);
    v53 = v67;
    v54 = v68;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v53;
    *(_QWORD *)(inited + 56) = v54;
    v55 = sub_1001356D4(inited);
    v56 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v57 = _BridgedStoredNSError.init(_:userInfo:)(&v67, &v70, v55, v45, v56);
    swift_willThrow(v57);

    swift_release(v66);
    v58 = type metadata accessor for EditNoteActivity(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 8))(v51, v58);
    v14 = (_QWORD *)&unk_100601000;
    goto LABEL_8;
  }
  v24 = (uint64_t)v4 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activity;
  v25 = type metadata accessor for EditNoteActivity(0);
  v64 = *(_QWORD *)(v25 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16))(v24, a1, v25);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_note) = (uint64_t)v23;
  v26 = v66;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_messageController) = v66;
  v27 = type metadata accessor for CollaborationParticipantDataSource(0);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v61 = a1;
  v28 = v23;
  v60 = v28;
  swift_retain(v26);
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_participantDataSource) = (uint64_t)sub_1003CA678(v28);
  v29 = v65;
  *(uint64_t *)((char *)v4 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_cloudConfiguration) = (uint64_t)v65;
  v30 = *(uint64_t *)((char *)v4
                   + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_participantDataSource);
  swift_beginAccess(v30 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource__cleanedUpParticipants, &v67, 33, 0);
  v31 = v29;
  swift_retain(v30);
  v32 = sub_100012E18(&qword_1005D84C8);
  Published.projectedValue.getter(v32);
  swift_endAccess(&v67);
  swift_release(v30);
  v33 = swift_allocObject(&unk_10056BD40, 24, 7);
  swift_weakInit(v33 + 16, v4);
  v34 = sub_100016638((unint64_t *)&unk_1005D84D0, &qword_1005D84C0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
  v35 = Publisher<>.sink(receiveValue:)(sub_10037B6D4, v33, v9, v34);

  swift_release(v26);
  swift_release(v33);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v61, v25);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v12, v9);
  v36 = *(uint64_t *)((char *)v4
                   + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation);
  *(uint64_t *)((char *)v4
             + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation) = v35;
  swift_release(v36);
  return v4;
}

uint64_t sub_10037A9E4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    swift_bridgeObjectRetain(v2);
    v7 = sub_10020C50C(v6);
    swift_bridgeObjectRelease(v2);
    v8 = *(_QWORD *)(v5 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activeParticipants);
    *(_QWORD *)(v5 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activeParticipants) = v7;
    swift_release(v5);
    return swift_bridgeObjectRelease(v8);
  }
  return result;
}

uint64_t RealtimeCollaborationPaperKitController.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation) = 0;
  swift_release(v2);
  v3 = v0 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activity;
  v4 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_messageController));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activeParticipants));
  swift_release(*(_QWORD *)(v0 + v1));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_participantDataSource));

  return v0;
}

uint64_t RealtimeCollaborationPaperKitController.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation);
  *(_QWORD *)(v0
            + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_collaboratorDataSourceObservation) = 0;
  swift_release(v2);
  v3 = v0 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activity;
  v4 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_messageController));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activeParticipants));
  swift_release(*(_QWORD *)(v0 + v1));
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_participantDataSource));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t RealtimeCollaborationPaperKitController.messages.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _BYTE v13[16];

  v1 = sub_100012E18(&qword_1005CF1D0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v13[-v6];
  v8 = *(_QWORD *)(*(_QWORD *)(v0
                             + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_messageController)
                 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitInbox);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v2 + 104))(&v13[-v6], enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v1);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v2 + 16))(v5, v7, v1);
  v9 = sub_100012E18(&qword_1005CF1D8);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  swift_retain(v8);
  v10 = sub_1001257D4((uint64_t)v5);
  os_unfair_lock_lock((os_unfair_lock_t)(v8 + 24));
  sub_10037B638((_QWORD *)(v8 + 16), v10);
  os_unfair_lock_unlock((os_unfair_lock_t)(v8 + 24));
  v11 = swift_release(v8);
  (*(void (**)(_BYTE *, uint64_t, __n128))(v2 + 8))(v7, v1, v11);
  return v10;
}

uint64_t RealtimeCollaborationPaperKitController.send(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  _QWORD v13[2];

  v5 = sub_100012E18((uint64_t *)&unk_1005DB330);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(*(_QWORD *)(v2
                             + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_messageController)
                 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitOutbox);
  v13[0] = a1;
  v13[1] = a2;
  swift_retain(v9);
  sub_10013DCA0(a1, a2);
  v10 = sub_100012E18(&qword_1005CF7B8);
  AsyncStream.Continuation.yield(_:)(v13, v10);
  v11 = swift_release(v9);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v11);
}

void RealtimeCollaborationPaperKitController.send(thumbnail:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_100012E18((uint64_t *)&unk_1005DB330);
  __chkstk_darwin(v3);
  __asm { BR              X10 }
}

void sub_10037AEB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;

  v7 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_cloudConfiguration), "fastSyncMaximumThumbnailMessageSizeBytes");
  if ((uint64_t)v7 < BYTE6(v4))
  {
    if (qword_1005CED58 != -1)
      swift_once(&qword_1005CED58, sub_10037A3A0);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10012A0B0(v11, (uint64_t)qword_1005DAEA0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      *(_DWORD *)v15 = 134218240;
      *(_QWORD *)(v6 - 96) = BYTE6(v4);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v6 - 88, v15 + 4);
      *(_WORD *)(v15 + 12) = 2048;
      *(_QWORD *)(v6 - 96) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 96, v6 - 88, v15 + 14);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Dropping PaperKit thumbnail (%ld bytes) because it exceeds the maximum size (%ld bytes)", (uint8_t *)v15, 0x16u);
      swift_slowDealloc(v15, -1, -1);
    }

  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v0
                               + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_messageController)
                   + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitOutbox);
    *(_QWORD *)(v6 - 96) = v3;
    *(_QWORD *)(v6 - 88) = v4;
    swift_retain(v8);
    sub_10013DCA0(v3, v4);
    v9 = sub_100012E18(&qword_1005CF7B8);
    AsyncStream.Continuation.yield(_:)(v6 - 96, v9);
    v10 = swift_release(v8);
    (*(void (**)(uint64_t, uint64_t, __n128))(v5 + 8))(v2, v1, v10);
  }
}

void sub_10037B128(uint64_t a1, uint64_t a2)
{
  RealtimeCollaborationPaperKitController.send(thumbnail:)(a1, a2);
}

uint64_t sub_10037B13C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = RealtimeCollaborationPaperKitController.messages.getter();
  *a1 = result;
  return result;
}

uint64_t RealtimeCollaborationPaperKitController.localParticipantID.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  id v6;
  Class isa;
  id v8;
  uint64_t v9;
  uint64_t v11;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_note);
  v6 = objc_msgSend(v5, "currentReplicaID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v6);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v8 = objc_msgSend(v5, "userIDForReplicaID:", isa);

  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  return v9;
}

CGColorRef __swiftcall RealtimeCollaborationPaperKitController.color(for:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  CGColorRef result;
  CGColor *v7;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_note);
  v3 = objc_msgSend(v2, "collaborationColorManager");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "highlightColorForUserID:note:", v4, v2);

  if (v5)
  {
    v7 = (CGColor *)objc_msgSend(v5, "CGColor");

    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::String __swiftcall RealtimeCollaborationPaperKitController.name(for:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  id v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::String result;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_note);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "participantForUserID:", v3);

  if (v4)
  {
    v5 = objc_msgSend(v4, "ic_activityStreamDisplayName");

    v4 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v7 = v6;

  }
  else
  {
    v7 = 0xE000000000000000;
  }
  v8 = (uint64_t)v4;
  v9 = (void *)v7;
  result._object = v9;
  result._countAndFlagsBits = v8;
  return result;
}

uint64_t RealtimeCollaborationPaperKitController.avatarImage(for:size:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v5 + 48) = v4;
  *(double *)(v5 + 32) = a3;
  *(double *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v5 + 56) = static MainActor.shared.getter(v6);
  v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor, v7);
  *(_QWORD *)(v5 + 64) = v8;
  *(_QWORD *)(v5 + 72) = v9;
  return swift_task_switch(sub_10037B420, v8, v9);
}

uint64_t sub_10037B420()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 48);
  type metadata accessor for CollaboratorStatusView(0);
  v2 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_note);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "participantForUserID:", v3);
  *(_QWORD *)(v0 + 80) = v4;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to static CollaboratorStatusView.fetchAvatarImage(for:size:)[1]);
  *(_QWORD *)(v0 + 88) = v5;
  *v5 = v0;
  v5[1] = sub_10037B4D4;
  return static CollaboratorStatusView.fetchAvatarImage(for:size:)(v4, *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_10037B4D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v4 = *(void **)(*v1 + 80);
  v3 = *(_QWORD *)(*v1 + 88);
  *(_QWORD *)(*v1 + 96) = a1;
  swift_task_dealloc(v3);

  return swift_task_switch(sub_10037B530, *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_10037B530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(v0 + 96);
  result = swift_release(*(_QWORD *)(v0 + 56));
  if (v1)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
  __break(1u);
  return result;
}

Swift::Bool __swiftcall RealtimeCollaborationPaperKitController.participantIsPresent(_:)(Swift::String a1)
{
  uint64_t v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  char v6;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_note);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "participantForUserID:", v3);

  if (v4)
  {
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotes39RealtimeCollaborationPaperKitController_activeParticipants);
    swift_bridgeObjectRetain(v5);
    v6 = sub_100379FE4(v4, v5, &qword_1005D8540, CKShareParticipant_ptr);

    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  return v6 & 1;
}

uint64_t sub_10037B618()
{
  return RealtimeCollaborationPaperKitController.description.getter();
}

uint64_t sub_10037B638(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = swift_retain(a2);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v4);
  v6 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v5 = *(_QWORD *)((*a1 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v6 >= v5 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5 > 1, v6 + 1, 1);
  v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, a2);
  return specialized Array._endMutation()(v7);
}

uint64_t sub_10037B6B0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10037B6D4(uint64_t *a1)
{
  uint64_t v1;

  return sub_10037A9E4(a1, v1);
}

uint64_t sub_10037B6DC()
{
  return sub_100016638((unint64_t *)&unk_1005DAEC0, &qword_1005CF1D8, (uint64_t)&protocol conformance descriptor for AsyncBufferedQueue<A>);
}

uint64_t sub_10037B708()
{
  return type metadata accessor for RealtimeCollaborationPaperKitController(0);
}

uint64_t type metadata accessor for RealtimeCollaborationPaperKitController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DAEF8;
  if (!qword_1005DAEF8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RealtimeCollaborationPaperKitController);
  return result;
}

uint64_t sub_10037B74C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  result = type metadata accessor for EditNoteActivity(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = "\b";
    v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t RealtimeCollaborationMessageController.__allocating_init(messenger:cloudConfiguration:cloudDatabase:activity:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v12;

  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v12 = (_QWORD *)swift_task_alloc(dword_1005DB004);
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_100141D68;
  return RealtimeCollaborationMessageController.init(messenger:cloudConfiguration:cloudDatabase:activity:context:)(a1, a2, a3, a4, a5);
}

uint64_t RealtimeCollaborationMessageController.numNonFatalErrorsEncounteredDuringSession.getter()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(_QWORD *)(v1 + 16);
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t sub_10037B8C0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005DAFB0);
  v1 = sub_10012A0B0(v0, (uint64_t)qword_1005DAFB0);
  return static Logger.realtimeCollaboration.getter(v1);
}

uint64_t sub_10037B908()
{
  uint64_t v0;

  v0 = sub_100012E18(&qword_1005D6E60);
  sub_10012B334(v0, qword_1005DAFC8);
  sub_10012A0B0(v0, (uint64_t)qword_1005DAFC8);
  return static Logger.verboseRealtimeCollaboration.getter();
}

uint64_t sub_10037B954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OSSignposter(0);
  sub_10012B334(v4, qword_1005DAFE0);
  sub_10012A0B0(v4, (uint64_t)qword_1005DAFE0);
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v5 = sub_10012A0B0(v0, (uint64_t)qword_1005DAFB0);
  (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v5, v0);
  return OSSignposter.init(logger:)(v3);
}

uint64_t RealtimeCollaborationMessageController.activity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_activity;
  v4 = type metadata accessor for EditNoteActivity(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

id RealtimeCollaborationMessageController.context.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_context);
}

uint64_t RealtimeCollaborationMessageController.messenger.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_messenger));
}

id RealtimeCollaborationMessageController.cloudConfiguration.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration));
}

id RealtimeCollaborationMessageController.cloudDatabase.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudDatabase);
}

uint64_t RealtimeCollaborationMessageController.cloudKitRecords.getter()
{
  return sub_10037BAD8(&OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudKitRecords);
}

uint64_t RealtimeCollaborationMessageController.selectionMessages.getter()
{
  return sub_10037BAD8(&OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_selectionMessages);
}

uint64_t sub_10037BAD8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)(v1 + *a1);
  v3 = *v2;
  v4 = v2[1];
  swift_retain(*v2);
  swift_retain(v4);
  return v3;
}

uint64_t RealtimeCollaborationMessageController.paperKitInbox.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0
                                + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitInbox));
}

uint64_t RealtimeCollaborationMessageController.paperKitOutbox.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0
                                + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitOutbox));
}

uint64_t RealtimeCollaborationMessageController.init(messenger:cloudConfiguration:cloudDatabase:activity:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6[33] = a5;
  v6[34] = v5;
  v6[31] = a3;
  v6[32] = a4;
  v6[29] = a1;
  v6[30] = a2;
  v6[35] = *v5;
  v7 = sub_100012E18(&qword_1005D4680);
  v6[36] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CF1D0);
  v6[37] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v6[38] = v9;
  v6[39] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18((uint64_t *)&unk_1005DB010);
  v6[40] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v6[41] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[42] = swift_task_alloc(v12);
  v6[43] = swift_task_alloc(v12);
  v13 = sub_100012E18(&qword_1005CF1A8);
  v6[44] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[45] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[46] = swift_task_alloc(v15);
  v6[47] = swift_task_alloc(v15);
  return swift_task_switch(sub_10037BC44, 0, 0);
}

uint64_t sub_10037BC44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  id v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  unsigned int v54;

  v1 = v0[46];
  v2 = v0[47];
  v3 = v0[44];
  v4 = v0[45];
  v43 = v0[43];
  v44 = v0[42];
  v53 = v0[41];
  v42 = v0[40];
  v45 = v0[38];
  v46 = v0[39];
  v5 = v0[34];
  v51 = v0[32];
  v52 = (void *)v0[33];
  v49 = (void *)v0[30];
  v50 = (void *)v0[31];
  v47 = v0[37];
  v48 = v0[29];
  v6 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudKitRecords;
  v0[48] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudKitRecords;
  v41 = (uint64_t *)(v5 + v6);
  v54 = enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:);
  (*(void (**)(uint64_t))(v4 + 104))(v2);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v1, v2, v3);
  v8 = sub_100012E18((uint64_t *)&unk_1005CF1B0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = sub_100125BF0(v1);
  v7(v1, v2, v3);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = sub_100125BF0(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  *v41 = v9;
  v41[1] = v10;
  v11 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_selectionMessages;
  v0[49] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_selectionMessages;
  v12 = (uint64_t *)(v5 + v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v53 + 104))(v43, v54, v42);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
  v13(v44, v43, v42);
  v14 = sub_100012E18((uint64_t *)&unk_1005CF1C0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = sub_1001259E4(v44);
  v13(v44, v43, v42);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v16 = sub_1001259E4(v44);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v43, v42);
  *v12 = v15;
  v12[1] = v16;
  v17 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitInbox;
  v0[50] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitInbox;
  v18 = sub_100012E18((uint64_t *)&unk_1005DB020);
  v19 = swift_allocObject(v18, 28, 7);
  *(_DWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 16) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v5 + v17) = v19;
  v20 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitOutbox;
  v0[51] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitOutbox;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 104))(v46, v54, v47);
  v21 = sub_100012E18(&qword_1005CF1D8);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(_QWORD *)(v5 + v20) = sub_1001257D4(v46);
  v22 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_subtasks;
  v0[52] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_subtasks;
  *(_QWORD *)(v5 + v22) = _swiftEmptyArrayStorage;
  v23 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  v0[53] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  v24 = sub_100012E18(&qword_1005CF1E0);
  v25 = swift_allocObject(v24, 28, 7);
  *(_DWORD *)(v25 + 24) = 0;
  *(_QWORD *)(v25 + 16) = 0;
  *(_QWORD *)(v5 + v23) = v25;
  v26 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_messenger;
  v0[54] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_messenger;
  *(_QWORD *)(v5 + v26) = v48;
  v27 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration;
  v0[55] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration;
  *(_QWORD *)(v5 + v27) = v49;
  v28 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudDatabase;
  v0[56] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudDatabase;
  *(_QWORD *)(v5 + v28) = v50;
  v29 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_activity;
  v0[57] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_activity;
  v30 = v5 + v29;
  v31 = type metadata accessor for EditNoteActivity(0);
  v0[58] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v0[59] = v32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v30, v51, v31);
  v33 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_context;
  v0[60] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_context;
  *(_QWORD *)(v5 + v33) = v52;
  v34 = async function pointer to EditNoteActivity.withNote<A>(in:_:)[1];
  swift_retain(v48);
  v35 = v49;
  v36 = v50;
  v37 = v52;
  v38 = (_QWORD *)swift_task_alloc(v34);
  v0[61] = v38;
  v39 = sub_100012E18(&qword_1005DB040);
  *v38 = v0;
  v38[1] = sub_10037C004;
  return EditNoteActivity.withNote<A>(in:_:)(v0 + 22, v0[33], sub_10037C8F4, 0, v39);
}

uint64_t sub_10037C004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 496) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10037C74C;
  else
    v3 = sub_10037C068;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10037C068()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t inited;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  void *object;
  Swift::String v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  Swift::String v46;
  uint64_t v47;
  Swift::String v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  id v85;
  void *v86;
  void *v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  uint64_t v94;

  v2 = *(void **)(v0 + 176);
  v1 = *(void **)(v0 + 184);
  v3 = *(void **)(v0 + 192);
  if (!v2)
  {
    v90 = *(_QWORD *)(v0 + 472);
    v93 = *(_QWORD *)(v0 + 464);
    v27 = *(_QWORD *)(v0 + 256);
    v82 = *(void **)(v0 + 248);
    v86 = *(void **)(v0 + 264);
    v75 = *(_QWORD *)(v0 + 232);
    v79 = *(void **)(v0 + 240);
    type metadata accessor for ICError(0);
    v29 = v28;
    *(_QWORD *)(v0 + 200) = 232;
    v30 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v30, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v32;
    _StringGuts.grow(_:)(39);
    v33 = swift_bridgeObjectRelease(0xE000000000000000);
    v34._countAndFlagsBits = EditNoteActivity.noteID.getter(v33);
    object = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(object);
    v36._object = (void *)0x800000010048B580;
    v36._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v36);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0x2065746F4ELL;
    *(_QWORD *)(inited + 56) = 0xE500000000000000;
    v37 = sub_1001356D4(inited);
    v38 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v39 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 208), v0 + 200, v37, v29, v38);
    swift_willThrow(v39);
    swift_release(v75);

LABEL_10:
    v53 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v53(v27, v93);
    v54 = *(_QWORD *)(v0 + 480);
    v55 = *(_QWORD *)(v0 + 440);
    v56 = *(_QWORD *)(v0 + 448);
    v57 = *(_QWORD *)(v0 + 432);
    v73 = *(_QWORD *)(v0 + 424);
    v58 = *(_QWORD *)(v0 + 400);
    v67 = *(_QWORD *)(v0 + 408);
    v69 = *(_QWORD *)(v0 + 416);
    v77 = *(_QWORD *)(v0 + 376);
    v81 = *(_QWORD *)(v0 + 368);
    v84 = *(_QWORD *)(v0 + 344);
    v88 = *(_QWORD *)(v0 + 336);
    v94 = *(_QWORD *)(v0 + 312);
    v59 = *(_QWORD *)(v0 + 272);
    v71 = *(_QWORD *)(v0 + 280);
    v60 = (uint64_t *)(v59 + *(_QWORD *)(v0 + 392));
    v61 = (uint64_t *)(v59 + *(_QWORD *)(v0 + 384));
    v91 = *(_QWORD *)(v0 + 288);
    v53(v59 + *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464));

    swift_release(*(_QWORD *)(v59 + v57));
    v62 = *v61;
    swift_release(v61[1]);
    swift_release(v62);
    v63 = *v60;
    swift_release(v60[1]);
    swift_release(v63);
    swift_release(*(_QWORD *)(v59 + v58));
    swift_release(*(_QWORD *)(v59 + v67));
    swift_bridgeObjectRelease(*(_QWORD *)(v59 + v69));
    swift_release(*(_QWORD *)(v59 + v73));
    swift_deallocPartialClassInstance(v59, v71, *(unsigned int *)(*(_QWORD *)v59 + 48), *(unsigned __int16 *)(*(_QWORD *)v59 + 52));
    swift_task_dealloc(v77);
    swift_task_dealloc(v81);
    swift_task_dealloc(v84);
    swift_task_dealloc(v88);
    swift_task_dealloc(v94);
    swift_task_dealloc(v91);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (!v3)
  {
    v90 = *(_QWORD *)(v0 + 472);
    v93 = *(_QWORD *)(v0 + 464);
    v27 = *(_QWORD *)(v0 + 256);
    v83 = *(void **)(v0 + 248);
    v87 = *(void **)(v0 + 264);
    v76 = *(_QWORD *)(v0 + 232);
    v80 = *(void **)(v0 + 240);
    type metadata accessor for ICError(0);
    v41 = v40;
    *(_QWORD *)(v0 + 224) = 232;
    v42 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    v43 = swift_initStackObject(v42, v0 + 96);
    *(_OWORD *)(v43 + 16) = xmmword_100451C20;
    *(_QWORD *)(v43 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(v43 + 40) = v44;
    v45 = v2;
    _StringGuts.grow(_:)(53);
    v46._countAndFlagsBits = 0xD000000000000033;
    v46._object = (void *)0x800000010048B5B0;
    String.append(_:)(v46);
    v48._countAndFlagsBits = EditNoteActivity.noteID.getter(v47);
    v49 = v48._object;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(v49);
    *(_QWORD *)(v43 + 72) = &type metadata for String;
    *(_QWORD *)(v43 + 48) = 0;
    *(_QWORD *)(v43 + 56) = 0xE000000000000000;
    v50 = sub_1001356D4(v43);
    v51 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v52 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 216), v0 + 224, v50, v41, v51);
    swift_willThrow(v52);

    swift_release(v76);
    goto LABEL_10;
  }
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 272);
  *(_QWORD *)(v5 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_encryptionParentRecordID) = v2;
  v6 = sub_100012E18(&qword_1005DB050);
  v7 = swift_allocObject(v6, 28, 7);
  *(_DWORD *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 16) = v1;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_share) = v7;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitTemplateRecord) = v3;
  v92 = v1;
  v89 = v2;
  v85 = v3;
  sub_10037C9A4();
  v9 = v8;
  sub_10037CAFC();
  v11 = v10;
  v12 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
  v13 = swift_allocObject(&unk_10056BDD8, 24, 7);
  swift_weakInit(v13 + 16, v5);
  v14 = (_QWORD *)swift_allocObject(&unk_10056BE00, 40, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v13;
  v15 = sub_1002EDE48(v4, (uint64_t)&unk_1005DB070, (uint64_t)v14);
  sub_1001D901C(v11);
  v16 = v9;
  swift_retain(v15);
  if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
    v16 = sub_10016B2BC(0, v9[2] + 1, 1, v9);
  v18 = v16[2];
  v17 = v16[3];
  if (v18 >= v17 >> 1)
    v16 = sub_10016B2BC((_QWORD *)(v17 > 1), v18 + 1, 1, v16);
  v64 = *(_QWORD *)(v0 + 472);
  v65 = *(_QWORD *)(v0 + 464);
  v66 = *(_QWORD *)(v0 + 376);
  v68 = *(_QWORD *)(v0 + 368);
  v70 = *(_QWORD *)(v0 + 344);
  v72 = *(_QWORD *)(v0 + 336);
  v74 = *(_QWORD *)(v0 + 312);
  v78 = *(_QWORD *)(v0 + 288);
  v20 = *(void **)(v0 + 264);
  v19 = *(_QWORD *)(v0 + 272);
  v21 = *(void **)(v0 + 248);
  v22 = *(_QWORD *)(v0 + 256);
  v24 = *(_QWORD *)(v0 + 232);
  v23 = *(void **)(v0 + 240);
  v16[2] = v18 + 1;
  v16[v18 + 4] = v15;

  swift_release(v24);
  swift_release(v15);
  (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v22, v65);
  v25 = *(_QWORD *)(v19 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_subtasks);
  *(_QWORD *)(v19 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_subtasks) = v16;
  swift_bridgeObjectRelease(v25);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v78);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 272));
}

uint64_t sub_10037C74C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 472);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(void **)(v0 + 240);
  v4 = *(void **)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 232);

  swift_release(v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v3, v1);
  v8 = *(_QWORD *)(v0 + 480);
  v9 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 448);
  v11 = *(_QWORD *)(v0 + 432);
  v22 = *(_QWORD *)(v0 + 424);
  v12 = *(_QWORD *)(v0 + 400);
  v19 = *(_QWORD *)(v0 + 408);
  v20 = *(_QWORD *)(v0 + 416);
  v23 = *(_QWORD *)(v0 + 376);
  v24 = *(_QWORD *)(v0 + 368);
  v25 = *(_QWORD *)(v0 + 344);
  v26 = *(_QWORD *)(v0 + 336);
  v28 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 272);
  v21 = *(_QWORD *)(v0 + 280);
  v14 = (_QWORD *)(v13 + *(_QWORD *)(v0 + 392));
  v15 = (_QWORD *)(v13 + *(_QWORD *)(v0 + 384));
  v27 = *(_QWORD *)(v0 + 288);
  v7(v13 + *(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464));

  swift_release(*(_QWORD *)(v13 + v11));
  v16 = v15[1];
  swift_release(*v15);
  swift_release(v16);
  v17 = v14[1];
  swift_release(*v14);
  swift_release(v17);
  swift_release(*(_QWORD *)(v13 + v12));
  swift_release(*(_QWORD *)(v13 + v19));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v20));
  swift_release(*(_QWORD *)(v13 + v22));
  swift_deallocPartialClassInstance(v13, v21, *(unsigned int *)(*(_QWORD *)v13 + 48), *(unsigned __int16 *)(*(_QWORD *)v13 + 52));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10037C8F4(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;

  *a2 = objc_msgSend(a1, "recordID");
  a2[1] = objc_msgSend(a1, "serverShareCheckingParent");
  v4 = objc_msgSend(a1, "serverRecord");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "ic_copyWithUserFields:", 0);

  }
  else
  {
    v6 = 0;
  }
  a2[2] = v6;
}

double sub_10037C9A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v1 = sub_100012E18(&qword_1005D4680);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter(v2);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 0, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_10056BEA0, 40, 7);
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v0;
  swift_retain(v0);
  v8 = sub_1002EDE48((uint64_t)v4, (uint64_t)&unk_1005DB2C8, (uint64_t)v7);
  static TaskPriority.userInitiated.getter(v8);
  v6(v4, 0, 1, v5);
  v9 = (_QWORD *)swift_allocObject(&unk_10056BEC8, 40, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v0;
  swift_retain(v0);
  v10 = sub_1002EDE48((uint64_t)v4, (uint64_t)&unk_1005DB2D8, (uint64_t)v9);
  v11 = sub_100012E18(&qword_1005D1998);
  v12 = swift_allocObject(v11, 48, 7);
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v12 + 16) = xmmword_100454E90;
  *(_QWORD *)(v12 + 32) = v8;
  *(_QWORD *)(v12 + 40) = v10;
  return result;
}

double sub_10037CAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, _QWORD, uint64_t, uint64_t);
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double result;
  uint64_t v16;

  v1 = sub_100012E18(&qword_1005D4680);
  v2 = __chkstk_darwin(v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter(v2);
  v5 = type metadata accessor for TaskPriority(0);
  v6 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 0, 1, v5);
  v7 = (_QWORD *)swift_allocObject(&unk_10056BE28, 40, 7);
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v0;
  swift_retain(v0);
  v8 = sub_1002EDE48((uint64_t)v4, (uint64_t)&unk_1005DB1C0, (uint64_t)v7);
  static TaskPriority.userInitiated.getter(v8);
  v6(v4, 0, 1, v5);
  v9 = (_QWORD *)swift_allocObject(&unk_10056BE50, 40, 7);
  v9[2] = 0;
  v9[3] = 0;
  v9[4] = v0;
  swift_retain(v0);
  v10 = sub_1002EDE48((uint64_t)v4, (uint64_t)&unk_1005DB1D0, (uint64_t)v9);
  static TaskPriority.userInitiated.getter(v10);
  v6(v4, 0, 1, v5);
  v11 = (_QWORD *)swift_allocObject(&unk_10056BE78, 40, 7);
  v11[2] = 0;
  v11[3] = 0;
  v11[4] = v0;
  swift_retain(v0);
  v12 = sub_1002EDE48((uint64_t)v4, (uint64_t)&unk_1005DB1E0, (uint64_t)v11);
  v13 = sub_100012E18(&qword_1005D1998);
  v14 = swift_allocObject(v13, 56, 7);
  *(_QWORD *)&result = 3;
  *(_OWORD *)(v14 + 16) = xmmword_100456A10;
  *(_QWORD *)(v14 + 32) = v8;
  *(_QWORD *)(v14 + 40) = v10;
  *(_QWORD *)(v14 + 48) = v12;
  return result;
}

Swift::Void __swiftcall RealtimeCollaborationMessageController.finish()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0;
  sub_100012E18(&qword_1005CF798);
  AsyncStream.Continuation.finish()();
  AsyncStream.Continuation.finish()();
  sub_100012E18(&qword_1005CF780);
  AsyncStream.Continuation.finish()();
  AsyncStream.Continuation.finish()();
  sub_10037CE3C(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitInbox));
  sub_100012E18(&qword_1005CF7B8);
  AsyncStream.Continuation.finish()();
  v2 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_subtasks;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_subtasks);
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_subtasks));
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(v3 + 8 * v5++ + 32);
      swift_retain(v6);
      Task.cancel()();
      swift_release(v6);
    }
    while (v4 != v5);
    swift_bridgeObjectRelease(v3);
    v3 = *(_QWORD *)(v1 + v2);
  }
  *(_QWORD *)(v1 + v2) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v3);
}

void sub_10037CE3C(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = _swiftEmptyArrayStorage;
  os_unfair_lock_unlock(v2);
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v3);
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease_n(v3, 2);
    return;
  }
  if (v3 < 0)
    v7 = v3;
  else
    v7 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v4 = _CocoaArrayWrapper.endIndex.getter(v7);
  if (!v4)
    goto LABEL_13;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else
      {
        v6 = *(_QWORD *)(v3 + 8 * v5 + 32);
        swift_retain(v6);
      }
      ++v5;
      sub_100012E18(&qword_1005CF7B8);
      AsyncStream.Continuation.finish()();
      swift_release(v6);
    }
    while (v4 != v5);
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t sub_10037CF54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[21] = a4;
  v5 = type metadata accessor for Notification(0);
  v4[22] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[23] = v6;
  v4[24] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(qword_1005D2FB8);
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(0);
  v4[26] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[27] = v9;
  v4[28] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10037D000, 0, 0);
}

uint64_t sub_10037D000()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[21] + 16;
  v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  NSNotificationCenter.notifications(named:object:)(ICNotesCloudContextDidFetchShareNotification, 0);

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  swift_beginAccess(v1, v0 + 11, 0, 0);
  v3 = sub_100019C6C((unint64_t *)&qword_1005DB1A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator);
  v0[29] = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[30] = v4;
  *v4 = v0;
  v4[1] = sub_10037D0FC;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[25], v0[26], v3);
}

uint64_t sub_10037D0FC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 240));
  if (v0)
  {
    v2[33] = v0;
    v3 = sub_10037D650;
  }
  else
  {
    v2[31] = ICNotesCloudContextDidFetchShareNotificationShareKey;
    v2[32] = 0;
    v3 = sub_10037D170;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_10037D170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  os_unfair_lock_s *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[2];

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 216) + 8))(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 208));
LABEL_22:
    v43 = *(_QWORD *)(v0 + 192);
    v44 = *(_QWORD *)(v0 + 200);
    swift_task_dealloc(*(_QWORD *)(v0 + 224));
    swift_task_dealloc(v44);
    swift_task_dealloc(v43);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v4 = *(_QWORD *)(v0 + 168) + 16;
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 192), v1, v2);
  Strong = swift_weakLoadStrong(v4);
  if (!Strong)
  {
    v14 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 224);
    v15 = *(_QWORD *)(v0 + 208);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    goto LABEL_22;
  }
  v6 = Strong;
  v7 = (_OWORD *)(v0 + 56);
  v8 = Notification.userInfo.getter(Strong);
  if (!v8)
  {
    *v7 = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
LABEL_15:
    sub_100012DDC(v0 + 56, &qword_1005CF190);
    goto LABEL_16;
  }
  v9 = v8;
  *(_QWORD *)(v0 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v0 + 248));
  *(_QWORD *)(v0 + 120) = v10;
  AnyHashable.init<A>(_:)((_QWORD *)(v0 + 16), v0 + 112, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v9 + 16) && (v11 = sub_100248ECC(v0 + 16), (v12 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(v9 + 56) + 32 * v11, v0 + 56);
  }
  else
  {
    *v7 = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
  }
  swift_bridgeObjectRelease(v9);
  sub_10018550C(v0 + 16);
  if (!*(_QWORD *)(v0 + 80))
    goto LABEL_15;
  v16 = sub_1000163BC(0, &qword_1005D2390, CKShare_ptr);
  if ((swift_dynamicCast(v0 + 160, v0 + 56, (char *)&type metadata for Any + 8, v16, 6) & 1) == 0)
  {
LABEL_16:
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10012A0B0(v23, (uint64_t)qword_1005DAFB0);
    v25 = static os_log_type_t.fault.getter(v24);
    v26 = v25;
    v27 = Logger.logObject.getter(v25);
    v28 = v26;
    v29 = os_log_type_enabled(v27, v26);
    v31 = *(_QWORD *)(v0 + 216);
    v30 = *(_QWORD *)(v0 + 224);
    v32 = *(_QWORD *)(v0 + 208);
    v34 = *(_QWORD *)(v0 + 184);
    v33 = *(_QWORD *)(v0 + 192);
    v35 = *(_QWORD *)(v0 + 176);
    if (v29)
    {
      v51 = *(_QWORD *)(v0 + 176);
      v36 = swift_slowAlloc(32, -1);
      v50 = v34;
      v37 = swift_slowAlloc(64, -1);
      v52[0] = v37;
      *(_DWORD *)v36 = 136315650;
      v38 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v49 = v33;
      v40 = v39;
      *(_QWORD *)(v0 + 144) = sub_1003A4190(v38, v39, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v36 + 4);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v36 + 12) = 2048;
      *(_QWORD *)(v0 + 128) = 137;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v36 + 14);
      *(_WORD *)(v36 + 22) = 2080;
      *(_QWORD *)(v0 + 136) = sub_1003A4190(0xD000000000000049, 0x800000010048B750, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v36 + 24);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed assertion at %s:%lu: %s", (uint8_t *)v36, 0x20u);
      swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      v41 = swift_release(v6);
      (*(void (**)(uint64_t, uint64_t, __n128))(v50 + 8))(v49, v51, v41);
    }
    else
    {

      v42 = swift_release(v6);
      (*(void (**)(uint64_t, uint64_t, __n128))(v34 + 8))(v33, v35, v42);
    }
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    goto LABEL_22;
  }
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(void **)(v0 + 160);
  v19 = *(_QWORD *)(v6 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_share);
  v20 = swift_task_alloc(32);
  *(_QWORD *)(v20 + 16) = v18;
  v21 = (void **)(v19 + 16);
  v22 = (os_unfair_lock_s *)(v19 + 24);
  os_unfair_lock_lock(v22);
  sub_10037D718(v21, *(void **)(v20 + 16));
  if (v17)
  {
    os_unfair_lock_unlock(v22);
  }
  else
  {
    v46 = *(_QWORD *)(v0 + 184);
    v45 = *(_QWORD *)(v0 + 192);
    v47 = *(_QWORD *)(v0 + 176);
    os_unfair_lock_unlock(v22);
    swift_task_dealloc(v20);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);

    swift_release(v6);
    v48 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 272) = v48;
    *v48 = v0;
    v48[1] = sub_10037D6B0;
    dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 232));
  }
}

uint64_t sub_10037D650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 264);
  v1 = sub_100012E18(&qword_1005D7A90);
  v2 = swift_dynamicCast(v1, v0 + 152, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_10037D6B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 272));
  if (v0)
  {
    *(_QWORD *)(v2 + 264) = v0;
    v3 = sub_10037D650;
  }
  else
  {
    *(_QWORD *)(v2 + 256) = 0;
    v3 = sub_10037D170;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_10037D718(void **a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  if (v4)
    v5 = objc_msgSend(v4, "recordID");
  else
    v5 = 0;
  v6 = objc_msgSend(a2, "recordID");
  v7 = v6;
  if (!v5)
  {
    if (v6)
    {

      return;
    }
LABEL_10:
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v10 = type metadata accessor for Logger(0);
    sub_10012A0B0(v10, (uint64_t)qword_1005DAFB0);
    v11 = a2;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v24 = v21;
      *(_DWORD *)v14 = 136315138;
      v15 = objc_msgSend(v11, "ic_loggingDescription");
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      v22 = sub_1003A4190(v16, v18, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 4);

      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Did receive new share: %s", v14, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    v19 = *a1;
    v20 = v11;

    *a1 = v11;
    return;
  }
  if (!v6)
  {

    return;
  }
  sub_1000163BC(0, &qword_1005DB1B0, CKRecordID_ptr);
  v8 = v5;
  v9 = static NSObject.== infix(_:_:)(v8);

  if ((v9 & 1) != 0)
    goto LABEL_10;
}

uint64_t sub_10037D9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[3] = a4;
  v5 = sub_100012E18(&qword_1005DB3A8);
  v4[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005DB268);
  v4[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[6] = v7;
  v4[7] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GroupSessionMessenger.MessageContext(0);
  v4[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[9] = v9;
  v4[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005DB3B0);
  v4[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[12] = v11;
  v4[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005DB3B8);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012E18(&qword_1005DB3C0);
  v4[15] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[16] = v14;
  v4[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100012E18(&qword_1005DB3C8);
  v4[18] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[19] = v16;
  v4[20] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MessageChunking.UnsafeAppendingAccumulator(0);
  v4[21] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[22] = v18;
  v4[23] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10037DB2C, 0, 0);
}

uint64_t sub_10037DB2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[16];
  v1 = v0[17];
  v3 = v0[15];
  v4 = v0[11];
  MessageChunking.UnsafeAppendingAccumulator.init()();
  v5 = sub_100016638(&qword_1005DB3D0, &qword_1005DB3B0, (uint64_t)&protocol conformance descriptor for MessageChunking.Message<A>);
  v6 = sub_100016638(&qword_1005DB3D8, &qword_1005DB3B0, (uint64_t)&protocol conformance descriptor for MessageChunking.Message<A>);
  GroupSessionMessenger.messages<A>(of:)(v4, v4, v5, v6);
  GroupSessionMessenger.Messages.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[24] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  v7 = sub_100016638(&qword_1005DB3E0, &qword_1005DB3C8, (uint64_t)&protocol conformance descriptor for GroupSessionMessenger.Messages<A>.Iterator);
  v0[25] = v7;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[26] = v8;
  *v8 = v0;
  v8[1] = sub_10037DC6C;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[14], v0[18], v7);
}

uint64_t sub_10037DC6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 208));
  if (v0)
  {
    *(_QWORD *)(v2 + 224) = v0;
    v3 = (void (*)())sub_1003945BC;
  }
  else
  {
    *(_QWORD *)(v2 + 216) = 0;
    v3 = sub_10037DCD4;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_10037DCD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = sub_100012E18(&qword_1005DB3E8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10012A0B0(v3, (uint64_t)qword_1005DAFB0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Note subscriber task finished", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = v1 + *(int *)(v2 + 48);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 104), v1, *(_QWORD *)(v0 + 88));
  v12.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, v11, v9);
  if ((static Task<>.isCancelled.getter(v12) & 1) != 0)
  {
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 96);
    v16 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
LABEL_9:
    v19 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 112);
    v24 = *(_QWORD *)(v0 + 80);
    v25 = *(_QWORD *)(v0 + 56);
    v26 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(v19, *(_QWORD *)(v0 + 168));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 104);
  v29 = *(_QWORD *)(v0 + 40);
  v30 = sub_100016638(&qword_1005DB290, &qword_1005DB268, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  v31 = sub_100016638(&qword_1005DB298, &qword_1005DB268, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  MessageChunking.UnsafeAppendingAccumulator.process<A>(incoming:)(v28, v29, v30, v31);
  if (v27)
  {
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v32 = type metadata accessor for Logger(0);
    sub_10012A0B0(v32, (uint64_t)qword_1005DAFB0);
    swift_errorRetain(v27);
    v33 = swift_errorRetain(v27);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.error.getter(v34, v35);
    if (os_log_type_enabled(v34, v36))
    {
      v37 = swift_slowAlloc(12, -1);
      v38 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138412290;
      swift_errorRetain(v27);
      v39 = _swift_stdlib_bridgeErrorToNSError(v27);
      *(_QWORD *)(v37 + 4) = v39;
      *v38 = v39;
      swift_errorRelease(v27);
      swift_errorRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Error processing incoming CloudKit message: %@", (uint8_t *)v37, 0xCu);
      v40 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v38, 1, v40);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      swift_errorRelease(v27);
      swift_errorRelease(v27);
    }
    v47 = *(_QWORD *)(v0 + 192);
    v48 = *(_QWORD *)(v0 + 24);

    v49 = *(_QWORD *)(v48 + v47);
    os_unfair_lock_lock((os_unfair_lock_t)(v49 + 24));
    v50 = *(_QWORD *)(v49 + 16);
    v51 = __OFADD__(v50, 1);
    v52 = v50 + 1;
    if (!v51)
    {
      v54 = *(_QWORD *)(v0 + 96);
      v53 = *(_QWORD *)(v0 + 104);
      v56 = *(_QWORD *)(v0 + 80);
      v55 = *(_QWORD *)(v0 + 88);
      v57 = *(_QWORD *)(v0 + 64);
      v58 = *(_QWORD *)(v0 + 72);
      *(_QWORD *)(v49 + 16) = v52;
      os_unfair_lock_unlock((os_unfair_lock_t)(v49 + 24));
      swift_errorRelease(v27);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
      goto LABEL_20;
    }
    __break(1u);
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 40);
    v42 = *(_QWORD *)(v0 + 48);
    v43 = *(_QWORD *)(v0 + 32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v41) == 1)
    {
      v45 = *(_QWORD *)(v0 + 96);
      v44 = *(_QWORD *)(v0 + 104);
      v46 = *(_QWORD *)(v0 + 88);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      sub_100012DDC(v43, &qword_1005DB3A8);
LABEL_20:
      v59 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
      *(_QWORD *)(v0 + 248) = v59;
      *v59 = v0;
      v59[1] = sub_10037E320;
      dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 200));
      return;
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v42 + 32))(*(_QWORD *)(v0 + 56), v43, v41);
    v60 = (_QWORD *)swift_task_alloc(dword_1005DB3F4);
    *(_QWORD *)(v0 + 232) = v60;
    *v60 = v0;
    v60[1] = sub_10037E214;
    sub_10037E5BC(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  }
}

uint64_t sub_10037E214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10037E388;
  else
    v3 = sub_10037E278;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10037E278()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[12];
  v1 = v0[13];
  v4 = v0[10];
  v3 = v0[11];
  v5 = v0[8];
  v6 = v0[9];
  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[31] = v7;
  *v7 = v0;
  v7[1] = sub_10037E320;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[14], v0[18], v0[25]);
}

uint64_t sub_10037E320()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 248));
  if (v0)
  {
    *(_QWORD *)(v2 + 224) = v0;
    v3 = sub_1003945BC;
  }
  else
  {
    *(_QWORD *)(v2 + 216) = 0;
    v3 = sub_10037DCD4;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_10037E388()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  v1 = v0[30];
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v2 = type metadata accessor for Logger(0);
  sub_10012A0B0(v2, (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.error.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v7 + 4) = v9;
    *v8 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Error processing incoming CloudKit message: %@", (uint8_t *)v7, 0xCu);
    v10 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v11 = v0[24];
  v12 = v0[3];

  v13 = *(_QWORD *)(v12 + v11);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    v18 = v0[12];
    v17 = v0[13];
    v20 = v0[10];
    v19 = v0[11];
    v21 = v0[8];
    v22 = v0[9];
    *(_QWORD *)(v13 + 16) = v16;
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    v0[31] = v23;
    *v23 = v0;
    v23[1] = sub_10037E320;
    dispatch thunk of AsyncIteratorProtocol.next()(v0[14], v0[18], v0[25]);
  }
}

uint64_t sub_10037E5BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v3[52] = a2;
  v3[53] = v2;
  v3[51] = a1;
  v4 = sub_100012E18((uint64_t *)&unk_1005DB330);
  v3[54] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[55] = v5;
  v3[56] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[57] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[58] = v7;
  v3[59] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005D6C48);
  v3[60] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[61] = v9;
  v3[62] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005D6E60);
  v3[63] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[64] = swift_task_alloc(v11);
  v3[65] = swift_task_alloc(v11);
  v3[66] = swift_task_alloc(v11);
  v12 = type metadata accessor for FastSync.PaperKitMessage(0);
  v3[67] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[68] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[69] = swift_task_alloc(v14);
  v3[70] = swift_task_alloc(v14);
  v3[71] = swift_task_alloc(v14);
  v3[72] = swift_task_alloc(v14);
  v15 = sub_100012E18(&qword_1005DB340);
  v3[73] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[74] = v16;
  v3[75] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FastSync.SelectionMessage(0);
  v3[76] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[77] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[78] = swift_task_alloc(v19);
  v3[79] = swift_task_alloc(v19);
  v3[80] = swift_task_alloc(v19);
  v3[81] = swift_task_alloc(v19);
  v20 = type metadata accessor for Participant(0);
  v3[82] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[83] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[84] = swift_task_alloc(v22);
  v3[85] = swift_task_alloc(v22);
  v3[86] = swift_task_alloc(v22);
  v3[87] = swift_task_alloc(v22);
  v23 = type metadata accessor for FastSync.NoteContentMessage(0);
  v3[88] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[89] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[90] = swift_task_alloc(v25);
  v3[91] = swift_task_alloc(v25);
  v26 = sub_100012E18(&qword_1005DB3F8);
  v3[92] = v26;
  v27 = (*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[93] = swift_task_alloc(v27);
  v3[94] = swift_task_alloc(v27);
  v28 = sub_100012E18(&qword_1005DB268);
  v3[95] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v3[96] = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[97] = swift_task_alloc(v30);
  v3[98] = swift_task_alloc(v30);
  v31 = type metadata accessor for FastSync.MessageVersion(0);
  v3[99] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v3[100] = v32;
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[101] = swift_task_alloc(v33);
  v3[102] = swift_task_alloc(v33);
  return swift_task_switch(sub_10037E8BC, 0, 0);
}

uint64_t sub_10037E8BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, _QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_log_type_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  Swift::String v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  id v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v1 = *(_QWORD *)(v0 + 816);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 800);
  v4 = *(_QWORD *)(v0 + 792);
  v5 = FastSync.MessageContainer.version.getter(*(_QWORD *)(v0 + 760));
  static FastSync.MessageVersion.current.getter(v5);
  v6 = sub_100019C6C(&qword_1005DB350, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.MessageVersion, (uint64_t)&protocol conformance descriptor for FastSync.MessageVersion);
  v7 = dispatch thunk of static Comparable.< infix(_:_:)(v2, v1, v4, v6);
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v8(v2, v4);
  v8(v1, v4);
  if ((v7 & 1) != 0)
  {
    if (qword_1005CED60 != -1)
      goto LABEL_33;
    goto LABEL_3;
  }
  v25 = *(_QWORD *)(v0 + 760);
  v26 = *(_QWORD *)(v0 + 752);
  v27 = *(_QWORD *)(v0 + 744);
  v28 = *(_QWORD *)(v0 + 736);
  v29 = *(_QWORD *)(v0 + 408);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 768) + 16);
  *(_QWORD *)(v0 + 824) = v30;
  v30(v27, v29, v25);
  v31 = sub_100016638((unint64_t *)&unk_1005DB400, &qword_1005DB268, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  *(_QWORD *)(v0 + 832) = v31;
  dispatch thunk of Collection.startIndex.getter(v25, v31);
  *(_QWORD *)(v27 + *(int *)(v28 + 36)) = *(_QWORD *)(v0 + 344);
  sub_10014BD1C(v27, v26, &qword_1005DB3F8);
  v32 = *(int *)(v28 + 36);
  *(_DWORD *)(v0 + 60) = v32;
  *(_QWORD *)(v0 + 840) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration;
  *(_QWORD *)(v0 + 848) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitInbox;
  *(_QWORD *)(v0 + 856) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  *(_QWORD *)(v0 + 864) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_selectionMessages;
  *(_QWORD *)(v0 + 872) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudKitRecords;
  v33 = *(_QWORD *)(v26 + v32);
  dispatch thunk of Collection.endIndex.getter(v25);
  if (v33 == *(_QWORD *)(v0 + 376))
  {
LABEL_6:
    sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
    goto LABEL_9;
  }
  v130 = v0 + 16;
  v134 = v0 + 112;
  v125 = v0 + 248;
  v127 = (__int128 *)(v0 + 160);
  v121 = (_QWORD *)(v0 + 352);
  v123 = (_QWORD *)(v0 + 208);
  v119 = v0 + 64;
  while (1)
  {
    v45 = *(_QWORD *)(v0 + 832);
    v46 = *(_QWORD *)(v0 + 776);
    v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
    v138 = *(_QWORD *)(v0 + 768);
    v47 = *(_QWORD *)(v0 + 760);
    v48 = *(_QWORD *)(v0 + 752);
    v49 = v48 + *(int *)(v0 + 60);
    v8 = (void (*)(uint64_t, uint64_t))(v0 + 248);
    v50 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v125, v49, v47, v45);
    sub_100012CE8(v51, v130, &qword_1005DB360);
    v50(v125, 0);
    v136(v46, v48, v47);
    dispatch thunk of Collection.formIndex(after:)(v49, v47, v45);
    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v46, v47);
    sub_10014BD1C(v130, v134, &qword_1005DB360);
    sub_100012CE8(v134, (uint64_t)v127, &qword_1005DB360);
    if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      break;
    v62 = *(_QWORD *)(v0 + 728);
    v63 = *(_QWORD *)(v0 + 704);
    sub_10013B100(v127, (uint64_t)v123);
    v64 = sub_100012E18(&qword_1005DB368);
    if ((swift_dynamicCast(v62, v123, v64, v63, 0) & 1) != 0)
    {
      v90 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
      GroupSessionMessenger.MessageContext.source.getter(v90);
      v91 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 880) = v91;
      *v91 = v0;
      v91[1] = sub_10037F520;
      v92 = *(_QWORD *)(v0 + 696);
      return sub_10038EFCC(v92, 3);
    }
    if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v123, v64, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
    {
      v93 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
      GroupSessionMessenger.MessageContext.source.getter(v93);
      v94 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 936) = v94;
      *v94 = v0;
      v94[1] = sub_1003815A8;
      return sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
    }
    if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v123, v64, *(_QWORD *)(v0 + 536), 0))
    {
      v95 = *(_QWORD *)(v0 + 840);
      v96 = *(_QWORD *)(v0 + 576);
      v97 = *(_QWORD *)(v0 + 568);
      v98 = *(_QWORD *)(v0 + 536);
      v99 = *(_QWORD *)(v0 + 424);
      v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
      *(_QWORD *)(v0 + 952) = v100;
      v100(v97, v96, v98);
      v101 = objc_msgSend(*(id *)(v99 + v95), "fastSyncPaperKitEnablePCSEncryption");
      if ((v101 & 1) != 0)
      {
        GroupSessionMessenger.MessageContext.source.getter(v101);
        v102 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 960) = v102;
        *v102 = v0;
        v102[1] = sub_100382B08;
        v92 = *(_QWORD *)(v0 + 680);
      }
      else
      {
        v103 = *(_QWORD *)(v0 + 576);
        v104 = *(_QWORD *)(v0 + 568);
        v105 = *(_QWORD *)(v0 + 560);
        v106 = *(_QWORD *)(v0 + 544);
        v107 = *(_QWORD *)(v0 + 536);
        v108 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
        *(_QWORD *)(v0 + 976) = v108;
        v108(v104, v107);
        v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v105, v103, v107);
        GroupSessionMessenger.MessageContext.source.getter(v109);
        v110 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 984) = v110;
        *v110 = v0;
        v110[1] = sub_100382B90;
        v92 = *(_QWORD *)(v0 + 672);
      }
      return sub_10038EFCC(v92, 3);
    }
    v65 = sub_100012CE8(v134, v119, &qword_1005DB360);
    v66 = static Logger.realtimeCollaboration.getter(v65);
    v67 = static os_log_type_t.fault.getter(v66);
    v68 = v67;
    v69 = Logger.logObject.getter(v67);
    v70 = v68;
    v71 = os_log_type_enabled(v69, v68);
    v73 = *(_QWORD *)(v0 + 464);
    v72 = *(_QWORD *)(v0 + 472);
    v74 = *(_QWORD *)(v0 + 456);
    if (v71)
    {
      v75 = swift_slowAlloc(32, -1);
      v76 = swift_slowAlloc(64, -1);
      v139 = v76;
      *(_DWORD *)v75 = 136315650;
      v77 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v79 = v78;
      *(_QWORD *)(v75 + 4) = sub_1003A4190(v77, v78, &v139);
      swift_bridgeObjectRelease(v79);
      *(_WORD *)(v75 + 12) = 2048;
      *(_QWORD *)(v75 + 14) = 228;
      *(_WORD *)(v75 + 22) = 2080;
      *(_QWORD *)(v0 + 328) = 0;
      *(_QWORD *)(v0 + 336) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v80 = *(_QWORD *)(v0 + 336);
      *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
      *(_QWORD *)(v0 + 288) = v80;
      v81._countAndFlagsBits = 0xD00000000000001DLL;
      v81._object = (void *)0x800000010048B7D0;
      String.append(_:)(v81);
      v82 = sub_100012E18(&qword_1005DB360);
      _print_unlocked<A, B>(_:_:)(v119, v0 + 280, v82, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v83 = *(_QWORD *)(v0 + 288);
      *(_QWORD *)(v75 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v83, &v139);
      swift_bridgeObjectRelease(v83);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Failed assertion at %s:%lu: %s", (uint8_t *)v75, 0x20u);
      swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);
    }

    sub_100012DDC(v119, &qword_1005DB360);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
    sub_100012DDC(v134, &qword_1005DB360);
    sub_1000153C0(v123);
LABEL_12:
    v44 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
    dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
    if (v44 == *(_QWORD *)(v0 + 376))
      goto LABEL_6;
  }
  v52 = *(_QWORD *)v127;
  *v121 = *(_QWORD *)v127;
  v53 = sub_100012E18(&qword_1005D7A90);
  swift_willThrowTypedImpl(v121, v53, &protocol self-conformance witness table for Error);
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v52);
  v54 = swift_errorRetain(v52);
  v55 = Logger.logObject.getter(v54);
  v57 = static os_log_type_t.error.getter(v55, v56);
  if (os_log_type_enabled(v55, v57))
  {
    v58 = swift_slowAlloc(12, -1);
    v59 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v58 = 138412290;
    swift_errorRetain(v52);
    v60 = _swift_stdlib_bridgeErrorToNSError(v52);
    *(_QWORD *)(v58 + 4) = v60;
    *v59 = v60;
    swift_errorRelease(v52);
    swift_errorRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v55, v57, "Error processing incoming fast sync message: %@", (uint8_t *)v58, 0xCu);
    v61 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v59, 1, v61);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    swift_errorRelease(v52);
    swift_errorRelease(v52);
  }
  v84 = *(_QWORD *)(v0 + 856);
  v85 = *(_QWORD *)(v0 + 424);

  v86 = *(_QWORD *)(v85 + v84);
  os_unfair_lock_lock((os_unfair_lock_t)(v86 + 24));
  v87 = *(_QWORD *)(v86 + 16);
  v88 = __OFADD__(v87, 1);
  v89 = v87 + 1;
  if (!v88)
  {
    *(_QWORD *)(v86 + 16) = v89;
    os_unfair_lock_unlock((os_unfair_lock_t)(v86 + 24));
    swift_errorRelease(v52);
    sub_100012DDC(v134, &qword_1005DB360);
    goto LABEL_12;
  }
  __break(1u);
LABEL_33:
  swift_once(&qword_1005CED60, sub_10037B8C0);
LABEL_3:
  v9 = *(_QWORD *)(v0 + 784);
  v10 = *(_QWORD *)(v0 + 768);
  v11 = *(_QWORD *)(v0 + 760);
  v12 = *(_QWORD *)(v0 + 408);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = *(_QWORD *)(v0 + 816);
    v17 = *(_QWORD *)(v0 + 792);
    v18 = *(_QWORD *)(v0 + 784);
    v128 = *(_QWORD *)(v0 + 768);
    v19 = *(_QWORD *)(v0 + 760);
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v132 = swift_slowAlloc(32, -1);
    v139 = v132;
    *(_DWORD *)v20 = 136315138;
    FastSync.MessageContainer.version.getter(v19);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v18, v19);
    v21 = sub_100019C6C(&qword_1005DB388, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.MessageVersion, (uint64_t)&protocol conformance descriptor for FastSync.MessageVersion);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v17, v21);
    v24 = v23;
    v8(v16, v17);
    *(_QWORD *)(v0 + 400) = sub_1003A4190(v22, v24, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v20 + 4);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Skipping unsupported message container with version: %s", v20, 0xCu);
    swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v132, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 768) + 8))(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 760));
  }

LABEL_9:
  v34 = *(_QWORD *)(v0 + 808);
  v35 = *(_QWORD *)(v0 + 784);
  v36 = *(_QWORD *)(v0 + 776);
  v37 = *(_QWORD *)(v0 + 752);
  v38 = *(_QWORD *)(v0 + 744);
  v39 = *(_QWORD *)(v0 + 728);
  v40 = *(_QWORD *)(v0 + 720);
  v41 = *(_QWORD *)(v0 + 696);
  v42 = *(_QWORD *)(v0 + 688);
  v111 = *(_QWORD *)(v0 + 680);
  v112 = *(_QWORD *)(v0 + 672);
  v113 = *(_QWORD *)(v0 + 648);
  v114 = *(_QWORD *)(v0 + 640);
  v115 = *(_QWORD *)(v0 + 632);
  v116 = *(_QWORD *)(v0 + 624);
  v117 = *(_QWORD *)(v0 + 600);
  v118 = *(_QWORD *)(v0 + 576);
  v120 = *(_QWORD *)(v0 + 568);
  v122 = *(_QWORD *)(v0 + 560);
  v124 = *(_QWORD *)(v0 + 552);
  v126 = *(_QWORD *)(v0 + 528);
  v129 = *(_QWORD *)(v0 + 520);
  v131 = *(_QWORD *)(v0 + 512);
  v133 = *(_QWORD *)(v0 + 496);
  v135 = *(_QWORD *)(v0 + 472);
  v137 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 816));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  swift_task_dealloc(v133);
  swift_task_dealloc(v135);
  swift_task_dealloc(v137);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10037F520()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 880);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 696);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 888) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_10037F6A4;
  else
    v6 = sub_10037F5A8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10037F5A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = FastSync.NoteContentMessage.recordBatchData.getter();
  v3 = v2;
  v0[112] = v1;
  v0[113] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_1005DB37C);
  v0[114] = v4;
  *v4 = v0;
  v4[1] = sub_10037F618;
  return sub_10038F7A4(v1, v3);
}

uint64_t sub_10037F618(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 912);
  v5 = *(_QWORD *)(*v2 + 904);
  v6 = *(_QWORD *)(*v2 + 896);
  *(_QWORD *)(v3 + 920) = a1;
  *(_QWORD *)(v3 + 928) = v1;
  swift_task_dealloc(v4);
  sub_10013DD30(v6, v5);
  if (v1)
    v7 = sub_100380C64;
  else
    v7 = sub_10037FFE8;
  return swift_task_switch(v7, 0, 0);
}

void sub_10037F6A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_meth_list **p_inst_meths;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v96 = v0 + 16;
  v1 = v0 + 112;
  v92 = v0 + 248;
  v82 = (_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 8))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 704));
  v101 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 888);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v99 = v0 + 112;
  v90 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error processing incoming fast sync message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 856);
  v13 = *(_QWORD *)(v0 + 424);

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v2);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v18 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
        v50 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 784);
        v52 = *(_QWORD *)(v0 + 776);
        v53 = *(_QWORD *)(v0 + 752);
        v54 = *(_QWORD *)(v0 + 744);
        v55 = *(_QWORD *)(v0 + 728);
        v56 = *(_QWORD *)(v0 + 720);
        v57 = *(_QWORD *)(v0 + 696);
        v58 = *(_QWORD *)(v0 + 688);
        v80 = *(_QWORD *)(v0 + 680);
        v81 = *(_QWORD *)(v0 + 672);
        v83 = *(_QWORD *)(v0 + 648);
        v84 = *(_QWORD *)(v0 + 640);
        v85 = *(_QWORD *)(v0 + 632);
        v86 = *(_QWORD *)(v0 + 624);
        v87 = *(_QWORD *)(v0 + 600);
        v88 = *(_QWORD *)(v0 + 576);
        v89 = *(_QWORD *)(v0 + 568);
        v91 = *(_QWORD *)(v0 + 560);
        v93 = *(_QWORD *)(v0 + 552);
        v95 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 520);
        v98 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 496);
        v102 = *(_QWORD *)(v0 + 472);
        v105 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v91);
        swift_task_dealloc(v93);
        swift_task_dealloc(v95);
        swift_task_dealloc(v97);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v102);
        swift_task_dealloc(v105);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v19 = *(_QWORD *)(v0 + 832);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v21 = *(_QWORD *)(v0 + 776);
      v103 = *(_QWORD *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 760);
      v23 = *(_QWORD *)(v0 + 752);
      v24 = v23 + *(int *)(v0 + 60);
      v25 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v92, v24, v22, v19);
      sub_100012CE8(v26, v96, &qword_1005DB360);
      v25(v92, 0);
      v20(v21, v23, v22);
      dispatch thunk of Collection.formIndex(after:)(v24, v22, v19);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v21, v22);
      v1 = v0 + 112;
      sub_10014BD1C(v96, v99, &qword_1005DB360);
      v94 = (__int128 *)(v0 + 160);
      sub_100012CE8(v99, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v2 = *(_QWORD *)v94;
        *v82 = *(_QWORD *)v94;
        v49 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v82, v49, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v27 = *(_QWORD *)(v0 + 728);
      v28 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v94, (uint64_t)v101);
      v29 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v27, v101, v29, v28, 0) & 1) != 0)
      {
        v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v59);
        v60 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v60;
        *v60 = v0;
        v60[1] = sub_10037F520;
        v61 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v101, v29, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v63;
        *v63 = v0;
        v63[1] = sub_1003815A8;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v101, v29, *(_QWORD *)(v0 + 536), 0))
        break;
      v30 = sub_100012CE8(v99, v90, &qword_1005DB360);
      v31 = static Logger.realtimeCollaboration.getter(v30);
      v32 = static os_log_type_t.fault.getter(v31);
      v33 = v32;
      v34 = Logger.logObject.getter(v32);
      v35 = v33;
      v36 = os_log_type_enabled(v34, v33);
      v38 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 472);
      v39 = *(_QWORD *)(v0 + 456);
      if (v36)
      {
        v104 = *(_QWORD *)(v0 + 472);
        v40 = swift_slowAlloc(32, -1);
        v41 = swift_slowAlloc(64, -1);
        v106 = v41;
        *(_DWORD *)v40 = 136315650;
        v42 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v44 = v43;
        *(_QWORD *)(v40 + 4) = sub_1003A4190(v42, v43, &v106);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v40 + 12) = 2048;
        *(_QWORD *)(v40 + 14) = 228;
        *(_WORD *)(v40 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v45 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v45;
        v46._countAndFlagsBits = 0xD00000000000001DLL;
        v46._object = (void *)0x800000010048B7D0;
        String.append(_:)(v46);
        v47 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v90, v0 + 280, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v48 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v40 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v48, &v106);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed assertion at %s:%lu: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v104, v39);
      }
      else
      {

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v101);
    }
    v64 = *(_QWORD *)(v0 + 840);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 568);
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v69;
    v69(v66, v65, v67);
    v70 = objc_msgSend(*(id *)(v68 + v64), "fastSyncPaperKitEnablePCSEncryption");
    if ((v70 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v70);
      v71 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v71;
      *v71 = v0;
      v71[1] = sub_100382B08;
      v61 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 568);
      v74 = *(_QWORD *)(v0 + 560);
      v75 = *(_QWORD *)(v0 + 544);
      v76 = *(_QWORD *)(v0 + 536);
      v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      *(_QWORD *)(v0 + 976) = v77;
      v77(v73, v76);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v72, v76);
      GroupSessionMessenger.MessageContext.source.getter(v78);
      v79 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v79;
      *v79 = v0;
      v79[1] = sub_100382B90;
      v61 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v61, 3);
  }
}

void sub_10037FFE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __objc2_meth_list **p_inst_meths;
  uint64_t *v7;
  id i;
  void *v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  __objc2_meth_list **v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  NSObject *v65;
  os_log_type_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  id v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142[2];

  v1 = *(_QWORD *)(v0 + 920);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v24 = *(_QWORD *)(v0 + 920);
    else
      v24 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 920));
    v2 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (v2)
    {
LABEL_3:
      v3 = v2 - 1;
      if (v2 < 1)
        goto LABEL_45;
      v4 = 0;
      v5 = v1 & 0xC000000000000001;
      v122 = *(_QWORD *)(v141 + 920) + 32;
      p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
      v7 = qword_1005DAFB0;
      if ((v1 & 0xC000000000000001) == 0)
        goto LABEL_6;
      while (1)
      {
        for (i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(_QWORD *)(v141 + 920));
              ;
              i = *(id *)(v122 + 8 * v4))
        {
          v9 = i;
          if (p_inst_meths[428] != (__objc2_meth_list *)-1)
            swift_once(&qword_1005CED60, sub_10037B8C0);
          sub_10012A0B0(*(_QWORD *)(v141 + 456), (uint64_t)v7);
          v10 = v9;
          v11 = Logger.logObject.getter(v10);
          v12 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v11, v12))
          {
            v130 = swift_slowAlloc(12, -1);
            v136 = swift_slowAlloc(32, -1);
            v142[0] = v136;
            *(_DWORD *)v130 = 136315138;
            v132 = v11;
            v13 = p_inst_meths;
            v14 = objc_msgSend(v10, "ic_loggingDescription");
            v15 = v4;
            v16 = v5;
            v17 = v3;
            v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
            v19 = v7;
            v21 = v20;

            p_inst_meths = v13;
            v22 = v18;
            v3 = v17;
            v5 = v16;
            v4 = v15;
            *(_QWORD *)(v130 + 4) = sub_1003A4190(v22, v21, v142);
            v23 = v21;
            v7 = v19;
            swift_bridgeObjectRelease(v23);

            _os_log_impl((void *)&_mh_execute_header, v132, v12, "Received CloudKit record: %s", (uint8_t *)v130, 0xCu);
            swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v136, -1, -1);
            swift_slowDealloc(v130, -1, -1);

            if (v3 == v15)
              goto LABEL_19;
          }
          else
          {

            if (v3 == v4)
              goto LABEL_19;
          }
          ++v4;
          if (v5)
            break;
LABEL_6:
          ;
        }
      }
    }
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 920));
    if (v2)
      goto LABEL_3;
  }
LABEL_19:
  v25 = *(_QWORD *)(v141 + 920);
  v137 = *(_QWORD *)(v141 + 720);
  v127 = *(_QWORD *)(v141 + 712);
  v133 = *(_QWORD *)(v141 + 704);
  v26 = *(_QWORD *)(v141 + 600);
  v27 = *(_QWORD *)(v141 + 592);
  v28 = *(_QWORD *)(v141 + 584);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(v141 + 392) = v25;
  swift_bridgeObjectRetain(v25);
  v29 = sub_100012E18(&qword_1005CF798);
  AsyncStream.Continuation.yield(_:)(v141 + 392, v29);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v137, v133);
  v128 = v141 + 112;
  sub_100012DDC(v141 + 112, &qword_1005DB360);
  swift_bridgeObjectRelease(v25);
  v125 = (_QWORD *)(v141 + 208);
  sub_1000153C0((_QWORD *)(v141 + 208));
  v30 = *(_QWORD *)(*(_QWORD *)(v141 + 752) + *(int *)(v141 + 60));
  dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v141 + 760));
  if (v30 == *(_QWORD *)(v141 + 376))
  {
LABEL_20:
    sub_100012DDC(*(_QWORD *)(v141 + 752), &qword_1005DB3F8);
    v31 = *(_QWORD *)(v141 + 808);
    v32 = *(_QWORD *)(v141 + 784);
    v33 = *(_QWORD *)(v141 + 776);
    v34 = *(_QWORD *)(v141 + 752);
    v35 = *(_QWORD *)(v141 + 744);
    v36 = *(_QWORD *)(v141 + 728);
    v37 = *(_QWORD *)(v141 + 720);
    v38 = *(_QWORD *)(v141 + 696);
    v39 = *(_QWORD *)(v141 + 688);
    v107 = *(_QWORD *)(v141 + 680);
    v108 = *(_QWORD *)(v141 + 672);
    v109 = *(_QWORD *)(v141 + 648);
    v110 = *(_QWORD *)(v141 + 640);
    v111 = *(_QWORD *)(v141 + 632);
    v112 = *(_QWORD *)(v141 + 624);
    v113 = *(_QWORD *)(v141 + 600);
    v114 = *(_QWORD *)(v141 + 576);
    v116 = *(_QWORD *)(v141 + 568);
    v118 = *(_QWORD *)(v141 + 560);
    v120 = *(_QWORD *)(v141 + 552);
    v123 = *(_QWORD *)(v141 + 528);
    v126 = *(_QWORD *)(v141 + 520);
    v129 = *(_QWORD *)(v141 + 512);
    v131 = *(_QWORD *)(v141 + 496);
    v134 = *(_QWORD *)(v141 + 472);
    v138 = *(_QWORD *)(v141 + 448);
    swift_task_dealloc(*(_QWORD *)(v141 + 816));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v138);
    (*(void (**)(void))(v141 + 8))();
    return;
  }
  v121 = v141 + 248;
  v124 = v141 + 16;
  v119 = (__int128 *)(v141 + 160);
  v115 = (_QWORD *)(v141 + 352);
  v117 = v141 + 64;
  while (1)
  {
    v41 = *(_QWORD *)(v141 + 832);
    v42 = *(_QWORD *)(v141 + 776);
    v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(v141 + 824);
    v139 = *(_QWORD *)(v141 + 768);
    v43 = *(_QWORD *)(v141 + 760);
    v44 = *(_QWORD *)(v141 + 752);
    v45 = v44 + *(int *)(v141 + 60);
    v46 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v121, v45, v43, v41);
    sub_100012CE8(v47, v124, &qword_1005DB360);
    v46(v121, 0);
    v135(v42, v44, v43);
    dispatch thunk of Collection.formIndex(after:)(v45, v43, v41);
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v42, v43);
    sub_10014BD1C(v124, v128, &qword_1005DB360);
    sub_100012CE8(v128, (uint64_t)v119, &qword_1005DB360);
    if ((*(_BYTE *)(v141 + 200) & 1) != 0)
      break;
    v58 = *(_QWORD *)(v141 + 728);
    v59 = *(_QWORD *)(v141 + 704);
    sub_10013B100(v119, (uint64_t)v125);
    v60 = sub_100012E18(&qword_1005DB368);
    if ((swift_dynamicCast(v58, v125, v60, v59, 0) & 1) != 0)
    {
      v86 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v141 + 712) + 32))(*(_QWORD *)(v141 + 720), *(_QWORD *)(v141 + 728), *(_QWORD *)(v141 + 704));
      GroupSessionMessenger.MessageContext.source.getter(v86);
      v87 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v141 + 880) = v87;
      *v87 = v141;
      v87[1] = sub_10037F520;
      v88 = *(_QWORD *)(v141 + 696);
LABEL_43:
      sub_10038EFCC(v88, 3);
      return;
    }
    if ((swift_dynamicCast(*(_QWORD *)(v141 + 648), v125, v60, *(_QWORD *)(v141 + 608), 0) & 1) != 0)
    {
      v89 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v141 + 616) + 32))(*(_QWORD *)(v141 + 640), *(_QWORD *)(v141 + 648), *(_QWORD *)(v141 + 608));
      GroupSessionMessenger.MessageContext.source.getter(v89);
      v90 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v141 + 936) = v90;
      *v90 = v141;
      v90[1] = sub_1003815A8;
      sub_10038EFCC(*(_QWORD *)(v141 + 688), 2);
      return;
    }
    if (swift_dynamicCast(*(_QWORD *)(v141 + 576), v125, v60, *(_QWORD *)(v141 + 536), 0))
    {
      v91 = *(_QWORD *)(v141 + 840);
      v92 = *(_QWORD *)(v141 + 576);
      v93 = *(_QWORD *)(v141 + 568);
      v94 = *(_QWORD *)(v141 + 536);
      v95 = *(_QWORD *)(v141 + 424);
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 + 544) + 16);
      *(_QWORD *)(v141 + 952) = v96;
      v96(v93, v92, v94);
      v97 = objc_msgSend(*(id *)(v95 + v91), "fastSyncPaperKitEnablePCSEncryption");
      if ((v97 & 1) != 0)
      {
        GroupSessionMessenger.MessageContext.source.getter(v97);
        v98 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v141 + 960) = v98;
        *v98 = v141;
        v98[1] = sub_100382B08;
        v88 = *(_QWORD *)(v141 + 680);
      }
      else
      {
        v99 = *(_QWORD *)(v141 + 576);
        v100 = *(_QWORD *)(v141 + 568);
        v101 = *(_QWORD *)(v141 + 560);
        v102 = *(_QWORD *)(v141 + 544);
        v103 = *(_QWORD *)(v141 + 536);
        v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
        *(_QWORD *)(v141 + 976) = v104;
        v104(v100, v103);
        v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v101, v99, v103);
        GroupSessionMessenger.MessageContext.source.getter(v105);
        v106 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v141 + 984) = v106;
        *v106 = v141;
        v106[1] = sub_100382B90;
        v88 = *(_QWORD *)(v141 + 672);
      }
      goto LABEL_43;
    }
    v61 = sub_100012CE8(v128, v117, &qword_1005DB360);
    v62 = static Logger.realtimeCollaboration.getter(v61);
    v63 = static os_log_type_t.fault.getter(v62);
    v64 = v63;
    v65 = Logger.logObject.getter(v63);
    v66 = v64;
    v67 = os_log_type_enabled(v65, v64);
    v69 = *(_QWORD *)(v141 + 464);
    v68 = *(_QWORD *)(v141 + 472);
    v70 = *(_QWORD *)(v141 + 456);
    if (v67)
    {
      v71 = swift_slowAlloc(32, -1);
      v140 = v68;
      v72 = swift_slowAlloc(64, -1);
      v142[0] = v72;
      *(_DWORD *)v71 = 136315650;
      v73 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v75 = v74;
      *(_QWORD *)(v71 + 4) = sub_1003A4190(v73, v74, v142);
      swift_bridgeObjectRelease(v75);
      *(_WORD *)(v71 + 12) = 2048;
      *(_QWORD *)(v71 + 14) = 228;
      *(_WORD *)(v71 + 22) = 2080;
      *(_QWORD *)(v141 + 328) = 0;
      *(_QWORD *)(v141 + 336) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v76 = *(_QWORD *)(v141 + 336);
      *(_QWORD *)(v141 + 280) = *(_QWORD *)(v141 + 328);
      *(_QWORD *)(v141 + 288) = v76;
      v77._countAndFlagsBits = 0xD00000000000001DLL;
      v77._object = (void *)0x800000010048B7D0;
      String.append(_:)(v77);
      v78 = sub_100012E18(&qword_1005DB360);
      _print_unlocked<A, B>(_:_:)(v117, v141 + 280, v78, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v79 = *(_QWORD *)(v141 + 288);
      *(_QWORD *)(v71 + 24) = sub_1003A4190(*(_QWORD *)(v141 + 280), v79, v142);
      swift_bridgeObjectRelease(v79);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed assertion at %s:%lu: %s", (uint8_t *)v71, 0x20u);
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v71, -1, -1);

      sub_100012DDC(v117, &qword_1005DB360);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v140, v70);
    }
    else
    {

      sub_100012DDC(v117, &qword_1005DB360);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    }
    sub_100012DDC(v128, &qword_1005DB360);
    sub_1000153C0(v125);
LABEL_24:
    v40 = *(_QWORD *)(*(_QWORD *)(v141 + 752) + *(int *)(v141 + 60));
    dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v141 + 760));
    if (v40 == *(_QWORD *)(v141 + 376))
      goto LABEL_20;
  }
  v48 = *(_QWORD *)v119;
  *v115 = *(_QWORD *)v119;
  v49 = sub_100012E18(&qword_1005D7A90);
  swift_willThrowTypedImpl(v115, v49, &protocol self-conformance witness table for Error);
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v141 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v48);
  v50 = swift_errorRetain(v48);
  v51 = Logger.logObject.getter(v50);
  v53 = static os_log_type_t.error.getter(v51, v52);
  if (os_log_type_enabled(v51, v53))
  {
    v54 = swift_slowAlloc(12, -1);
    v55 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v54 = 138412290;
    swift_errorRetain(v48);
    v56 = _swift_stdlib_bridgeErrorToNSError(v48);
    *(_QWORD *)(v54 + 4) = v56;
    *v55 = v56;
    swift_errorRelease(v48);
    swift_errorRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v51, v53, "Error processing incoming fast sync message: %@", (uint8_t *)v54, 0xCu);
    v57 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v55, 1, v57);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    swift_errorRelease(v48);
    swift_errorRelease(v48);
  }
  v80 = *(_QWORD *)(v141 + 856);
  v81 = *(_QWORD *)(v141 + 424);

  v82 = *(_QWORD *)(v81 + v80);
  os_unfair_lock_lock((os_unfair_lock_t)(v82 + 24));
  v83 = *(_QWORD *)(v82 + 16);
  v84 = __OFADD__(v83, 1);
  v85 = v83 + 1;
  if (!v84)
  {
    *(_QWORD *)(v82 + 16) = v85;
    os_unfair_lock_unlock((os_unfair_lock_t)(v82 + 24));
    swift_errorRelease(v48);
    sub_100012DDC(v128, &qword_1005DB360);
    goto LABEL_24;
  }
  __break(1u);
LABEL_45:
  __break(1u);
}

void sub_100380C64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_meth_list **p_inst_meths;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v96 = v0 + 16;
  v1 = v0 + 112;
  v92 = v0 + 248;
  v82 = (_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 8))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 704));
  v101 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 928);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v99 = v0 + 112;
  v90 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error processing incoming fast sync message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 856);
  v13 = *(_QWORD *)(v0 + 424);

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v2);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v18 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
        v50 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 784);
        v52 = *(_QWORD *)(v0 + 776);
        v53 = *(_QWORD *)(v0 + 752);
        v54 = *(_QWORD *)(v0 + 744);
        v55 = *(_QWORD *)(v0 + 728);
        v56 = *(_QWORD *)(v0 + 720);
        v57 = *(_QWORD *)(v0 + 696);
        v58 = *(_QWORD *)(v0 + 688);
        v80 = *(_QWORD *)(v0 + 680);
        v81 = *(_QWORD *)(v0 + 672);
        v83 = *(_QWORD *)(v0 + 648);
        v84 = *(_QWORD *)(v0 + 640);
        v85 = *(_QWORD *)(v0 + 632);
        v86 = *(_QWORD *)(v0 + 624);
        v87 = *(_QWORD *)(v0 + 600);
        v88 = *(_QWORD *)(v0 + 576);
        v89 = *(_QWORD *)(v0 + 568);
        v91 = *(_QWORD *)(v0 + 560);
        v93 = *(_QWORD *)(v0 + 552);
        v95 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 520);
        v98 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 496);
        v102 = *(_QWORD *)(v0 + 472);
        v105 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v91);
        swift_task_dealloc(v93);
        swift_task_dealloc(v95);
        swift_task_dealloc(v97);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v102);
        swift_task_dealloc(v105);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v19 = *(_QWORD *)(v0 + 832);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v21 = *(_QWORD *)(v0 + 776);
      v103 = *(_QWORD *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 760);
      v23 = *(_QWORD *)(v0 + 752);
      v24 = v23 + *(int *)(v0 + 60);
      v25 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v92, v24, v22, v19);
      sub_100012CE8(v26, v96, &qword_1005DB360);
      v25(v92, 0);
      v20(v21, v23, v22);
      dispatch thunk of Collection.formIndex(after:)(v24, v22, v19);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v21, v22);
      v1 = v0 + 112;
      sub_10014BD1C(v96, v99, &qword_1005DB360);
      v94 = (__int128 *)(v0 + 160);
      sub_100012CE8(v99, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v2 = *(_QWORD *)v94;
        *v82 = *(_QWORD *)v94;
        v49 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v82, v49, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v27 = *(_QWORD *)(v0 + 728);
      v28 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v94, (uint64_t)v101);
      v29 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v27, v101, v29, v28, 0) & 1) != 0)
      {
        v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v59);
        v60 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v60;
        *v60 = v0;
        v60[1] = sub_10037F520;
        v61 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v101, v29, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v63;
        *v63 = v0;
        v63[1] = sub_1003815A8;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v101, v29, *(_QWORD *)(v0 + 536), 0))
        break;
      v30 = sub_100012CE8(v99, v90, &qword_1005DB360);
      v31 = static Logger.realtimeCollaboration.getter(v30);
      v32 = static os_log_type_t.fault.getter(v31);
      v33 = v32;
      v34 = Logger.logObject.getter(v32);
      v35 = v33;
      v36 = os_log_type_enabled(v34, v33);
      v38 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 472);
      v39 = *(_QWORD *)(v0 + 456);
      if (v36)
      {
        v104 = *(_QWORD *)(v0 + 472);
        v40 = swift_slowAlloc(32, -1);
        v41 = swift_slowAlloc(64, -1);
        v106 = v41;
        *(_DWORD *)v40 = 136315650;
        v42 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v44 = v43;
        *(_QWORD *)(v40 + 4) = sub_1003A4190(v42, v43, &v106);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v40 + 12) = 2048;
        *(_QWORD *)(v40 + 14) = 228;
        *(_WORD *)(v40 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v45 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v45;
        v46._countAndFlagsBits = 0xD00000000000001DLL;
        v46._object = (void *)0x800000010048B7D0;
        String.append(_:)(v46);
        v47 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v90, v0 + 280, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v48 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v40 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v48, &v106);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed assertion at %s:%lu: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v104, v39);
      }
      else
      {

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v101);
    }
    v64 = *(_QWORD *)(v0 + 840);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 568);
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v69;
    v69(v66, v65, v67);
    v70 = objc_msgSend(*(id *)(v68 + v64), "fastSyncPaperKitEnablePCSEncryption");
    if ((v70 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v70);
      v71 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v71;
      *v71 = v0;
      v71[1] = sub_100382B08;
      v61 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 568);
      v74 = *(_QWORD *)(v0 + 560);
      v75 = *(_QWORD *)(v0 + 544);
      v76 = *(_QWORD *)(v0 + 536);
      v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      *(_QWORD *)(v0 + 976) = v77;
      v77(v73, v76);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v72, v76);
      GroupSessionMessenger.MessageContext.source.getter(v78);
      v79 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v79;
      *v79 = v0;
      v79[1] = sub_100382B90;
      v61 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v61, 3);
  }
}

uint64_t sub_1003815A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 936);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 688);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 944) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_1003821C4;
  else
    v6 = sub_100381630;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100381630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  NSObject *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  id v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v1 = v0 + 112;
  v125 = (_QWORD *)(v0 + 208);
  if (qword_1005CED68 != -1)
LABEL_33:
    swift_once(&qword_1005CED68, sub_10037B908);
  v2 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = sub_10012A0B0(*(_QWORD *)(v0 + 504), (uint64_t)qword_1005DAFC8);
  sub_100012CE8(v5, v2, &qword_1005D6E60);
  v127 = v1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4) == 1)
  {
    v6 = *(_QWORD *)(v0 + 616);
    sub_100012DDC(*(_QWORD *)(v0 + 528), &qword_1005D6E60);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  }
  else
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 616) + 16);
    v8 = v7(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 608));
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter();
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 632);
    v13 = *(_QWORD *)(v0 + 616);
    v14 = *(_QWORD *)(v0 + 608);
    if (v11)
    {
      v15 = swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v133 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_100019C6C(&qword_1005D6E40, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.SelectionMessage, (uint64_t)&protocol conformance descriptor for FastSync.SelectionMessage);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
      v20 = v19;
      *(_QWORD *)(v15 + 4) = sub_1003A4190(v18, v19, &v133);
      v21 = swift_bridgeObjectRelease(v20);
      (*(void (**)(uint64_t, uint64_t, __n128))(v13 + 8))(v12, v14, v21);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received selection message: %s", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 456));
  }
  v22 = *(_QWORD *)(v0 + 640);
  v23 = *(_QWORD *)(v0 + 624);
  v24 = *(_QWORD *)(v0 + 616);
  v25 = *(_QWORD *)(v0 + 608);
  v27 = *(_QWORD *)(v0 + 488);
  v26 = *(_QWORD *)(v0 + 496);
  v28 = *(_QWORD *)(v0 + 480);
  v7(v23, v22, v25);
  v29 = sub_100012E18(&qword_1005CF780);
  AsyncStream.Continuation.yield(_:)(v23, v29);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v25);
  sub_100012DDC(v127, &qword_1005DB360);
  sub_1000153C0(v125);
  v30 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
  dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
  if (v30 != *(_QWORD *)(v0 + 376))
  {
    v121 = v0 + 248;
    v123 = v0 + 16;
    v117 = (_QWORD *)(v0 + 352);
    v119 = (__int128 *)(v0 + 160);
    v115 = v0 + 64;
    do
    {
      v42 = *(_QWORD *)(v0 + 832);
      v43 = *(_QWORD *)(v0 + 776);
      v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v132 = *(_QWORD *)(v0 + 768);
      v44 = *(_QWORD *)(v0 + 760);
      v45 = *(_QWORD *)(v0 + 752);
      v46 = v45 + *(int *)(v0 + 60);
      v47 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v121, v46, v44, v42);
      v1 = v0 + 16;
      sub_100012CE8(v48, v123, &qword_1005DB360);
      v47(v121, 0);
      v130(v43, v45, v44);
      dispatch thunk of Collection.formIndex(after:)(v46, v44, v42);
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v43, v44);
      sub_10014BD1C(v123, v127, &qword_1005DB360);
      sub_100012CE8(v127, (uint64_t)v119, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v49 = *(_QWORD *)v119;
        *v117 = *(_QWORD *)v119;
        v50 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v117, v50, &protocol self-conformance witness table for Error);
        if (qword_1005CED60 != -1)
          swift_once(&qword_1005CED60, sub_10037B8C0);
        sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
        swift_errorRetain(v49);
        v51 = swift_errorRetain(v49);
        v52 = Logger.logObject.getter(v51);
        v54 = static os_log_type_t.error.getter(v52, v53);
        if (os_log_type_enabled(v52, v54))
        {
          v55 = swift_slowAlloc(12, -1);
          v56 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v55 = 138412290;
          swift_errorRetain(v49);
          v57 = _swift_stdlib_bridgeErrorToNSError(v49);
          *(_QWORD *)(v55 + 4) = v57;
          *v56 = v57;
          swift_errorRelease(v49);
          swift_errorRelease(v49);
          _os_log_impl((void *)&_mh_execute_header, v52, v54, "Error processing incoming fast sync message: %@", (uint8_t *)v55, 0xCu);
          v58 = sub_100012E18(&qword_1005D3A30);
          swift_arrayDestroy(v56, 1, v58);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v55, -1, -1);
        }
        else
        {
          swift_errorRelease(v49);
          swift_errorRelease(v49);
        }
        v80 = *(_QWORD *)(v0 + 856);
        v81 = *(_QWORD *)(v0 + 424);

        v82 = *(_QWORD *)(v81 + v80);
        os_unfair_lock_lock((os_unfair_lock_t)(v82 + 24));
        v83 = *(_QWORD *)(v82 + 16);
        v84 = __OFADD__(v83, 1);
        v85 = v83 + 1;
        if (v84)
        {
          __break(1u);
          goto LABEL_33;
        }
        *(_QWORD *)(v82 + 16) = v85;
        os_unfair_lock_unlock((os_unfair_lock_t)(v82 + 24));
        swift_errorRelease(v49);
        sub_100012DDC(v127, &qword_1005DB360);
      }
      else
      {
        v59 = *(_QWORD *)(v0 + 728);
        v60 = *(_QWORD *)(v0 + 704);
        sub_10013B100(v119, (uint64_t)v125);
        v61 = sub_100012E18(&qword_1005DB368);
        if ((swift_dynamicCast(v59, v125, v61, v60, 0) & 1) != 0)
        {
          v86 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
          GroupSessionMessenger.MessageContext.source.getter(v86);
          v87 = (_QWORD *)swift_task_alloc(dword_1005DB374);
          *(_QWORD *)(v0 + 880) = v87;
          *v87 = v0;
          v87[1] = sub_10037F520;
          v88 = *(_QWORD *)(v0 + 696);
          return sub_10038EFCC(v88, 3);
        }
        if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v125, v61, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
        {
          v89 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
          GroupSessionMessenger.MessageContext.source.getter(v89);
          v90 = (_QWORD *)swift_task_alloc(dword_1005DB374);
          *(_QWORD *)(v0 + 936) = v90;
          *v90 = v0;
          v90[1] = sub_1003815A8;
          return sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        }
        if ((swift_dynamicCast(*(_QWORD *)(v0 + 576), v125, v61, *(_QWORD *)(v0 + 536), 0) & 1) != 0)
        {
          v91 = *(_QWORD *)(v0 + 840);
          v92 = *(_QWORD *)(v0 + 576);
          v93 = *(_QWORD *)(v0 + 568);
          v94 = *(_QWORD *)(v0 + 536);
          v95 = *(_QWORD *)(v0 + 424);
          v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
          *(_QWORD *)(v0 + 952) = v96;
          v96(v93, v92, v94);
          v97 = objc_msgSend(*(id *)(v95 + v91), "fastSyncPaperKitEnablePCSEncryption");
          if ((v97 & 1) != 0)
          {
            GroupSessionMessenger.MessageContext.source.getter(v97);
            v98 = (_QWORD *)swift_task_alloc(dword_1005DB374);
            *(_QWORD *)(v0 + 960) = v98;
            *v98 = v0;
            v98[1] = sub_100382B08;
            v88 = *(_QWORD *)(v0 + 680);
          }
          else
          {
            v99 = *(_QWORD *)(v0 + 576);
            v100 = *(_QWORD *)(v0 + 568);
            v101 = *(_QWORD *)(v0 + 560);
            v102 = *(_QWORD *)(v0 + 544);
            v103 = *(_QWORD *)(v0 + 536);
            v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
            *(_QWORD *)(v0 + 976) = v104;
            v104(v100, v103);
            v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v101, v99, v103);
            GroupSessionMessenger.MessageContext.source.getter(v105);
            v106 = (_QWORD *)swift_task_alloc(dword_1005DB374);
            *(_QWORD *)(v0 + 984) = v106;
            *v106 = v0;
            v106[1] = sub_100382B90;
            v88 = *(_QWORD *)(v0 + 672);
          }
          return sub_10038EFCC(v88, 3);
        }
        v62 = sub_100012CE8(v127, v115, &qword_1005DB360);
        v63 = static Logger.realtimeCollaboration.getter(v62);
        v64 = static os_log_type_t.fault.getter(v63);
        v65 = v64;
        v66 = Logger.logObject.getter(v64);
        v67 = os_log_type_enabled(v66, v65);
        v68 = *(_QWORD *)(v0 + 464);
        v69 = *(_QWORD *)(v0 + 472);
        v70 = *(_QWORD *)(v0 + 456);
        if (v67)
        {
          v71 = swift_slowAlloc(32, -1);
          v72 = swift_slowAlloc(64, -1);
          v133 = v72;
          *(_DWORD *)v71 = 136315650;
          v73 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
          v75 = v74;
          *(_QWORD *)(v71 + 4) = sub_1003A4190(v73, v74, &v133);
          swift_bridgeObjectRelease(v75);
          *(_WORD *)(v71 + 12) = 2048;
          *(_QWORD *)(v71 + 14) = 228;
          *(_WORD *)(v71 + 22) = 2080;
          *(_QWORD *)(v0 + 328) = 0;
          *(_QWORD *)(v0 + 336) = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          v76 = *(_QWORD *)(v0 + 336);
          *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
          *(_QWORD *)(v0 + 288) = v76;
          v77._countAndFlagsBits = 0xD00000000000001DLL;
          v77._object = (void *)0x800000010048B7D0;
          String.append(_:)(v77);
          v78 = sub_100012E18(&qword_1005DB360);
          _print_unlocked<A, B>(_:_:)(v115, v0 + 280, v78, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          v79 = *(_QWORD *)(v0 + 288);
          *(_QWORD *)(v71 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v79, &v133);
          swift_bridgeObjectRelease(v79);
          _os_log_impl((void *)&_mh_execute_header, v66, v65, "Failed assertion at %s:%lu: %s", (uint8_t *)v71, 0x20u);
          swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1, -1);
          swift_slowDealloc(v71, -1, -1);
        }

        sub_100012DDC(v115, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
        sub_100012DDC(v127, &qword_1005DB360);
        sub_1000153C0(v125);
      }
      v41 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
    }
    while (v41 != *(_QWORD *)(v0 + 376));
  }
  sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
  v31 = *(_QWORD *)(v0 + 808);
  v32 = *(_QWORD *)(v0 + 784);
  v33 = *(_QWORD *)(v0 + 776);
  v34 = *(_QWORD *)(v0 + 752);
  v35 = *(_QWORD *)(v0 + 744);
  v36 = *(_QWORD *)(v0 + 728);
  v37 = *(_QWORD *)(v0 + 720);
  v38 = *(_QWORD *)(v0 + 696);
  v39 = *(_QWORD *)(v0 + 688);
  v107 = *(_QWORD *)(v0 + 680);
  v108 = *(_QWORD *)(v0 + 672);
  v109 = *(_QWORD *)(v0 + 648);
  v110 = *(_QWORD *)(v0 + 640);
  v111 = *(_QWORD *)(v0 + 632);
  v112 = *(_QWORD *)(v0 + 624);
  v113 = *(_QWORD *)(v0 + 600);
  v114 = *(_QWORD *)(v0 + 576);
  v116 = *(_QWORD *)(v0 + 568);
  v118 = *(_QWORD *)(v0 + 560);
  v120 = *(_QWORD *)(v0 + 552);
  v122 = *(_QWORD *)(v0 + 528);
  v124 = *(_QWORD *)(v0 + 520);
  v126 = *(_QWORD *)(v0 + 512);
  v128 = *(_QWORD *)(v0 + 496);
  v129 = *(_QWORD *)(v0 + 472);
  v131 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 816));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003821C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_meth_list **p_inst_meths;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v96 = v0 + 16;
  v1 = v0 + 112;
  v92 = v0 + 248;
  v82 = (_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 8))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 608));
  v101 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 944);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v99 = v0 + 112;
  v90 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error processing incoming fast sync message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 856);
  v13 = *(_QWORD *)(v0 + 424);

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v2);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v18 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
        v50 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 784);
        v52 = *(_QWORD *)(v0 + 776);
        v53 = *(_QWORD *)(v0 + 752);
        v54 = *(_QWORD *)(v0 + 744);
        v55 = *(_QWORD *)(v0 + 728);
        v56 = *(_QWORD *)(v0 + 720);
        v57 = *(_QWORD *)(v0 + 696);
        v58 = *(_QWORD *)(v0 + 688);
        v80 = *(_QWORD *)(v0 + 680);
        v81 = *(_QWORD *)(v0 + 672);
        v83 = *(_QWORD *)(v0 + 648);
        v84 = *(_QWORD *)(v0 + 640);
        v85 = *(_QWORD *)(v0 + 632);
        v86 = *(_QWORD *)(v0 + 624);
        v87 = *(_QWORD *)(v0 + 600);
        v88 = *(_QWORD *)(v0 + 576);
        v89 = *(_QWORD *)(v0 + 568);
        v91 = *(_QWORD *)(v0 + 560);
        v93 = *(_QWORD *)(v0 + 552);
        v95 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 520);
        v98 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 496);
        v102 = *(_QWORD *)(v0 + 472);
        v105 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v91);
        swift_task_dealloc(v93);
        swift_task_dealloc(v95);
        swift_task_dealloc(v97);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v102);
        swift_task_dealloc(v105);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v19 = *(_QWORD *)(v0 + 832);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v21 = *(_QWORD *)(v0 + 776);
      v103 = *(_QWORD *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 760);
      v23 = *(_QWORD *)(v0 + 752);
      v24 = v23 + *(int *)(v0 + 60);
      v25 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v92, v24, v22, v19);
      sub_100012CE8(v26, v96, &qword_1005DB360);
      v25(v92, 0);
      v20(v21, v23, v22);
      dispatch thunk of Collection.formIndex(after:)(v24, v22, v19);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v21, v22);
      v1 = v0 + 112;
      sub_10014BD1C(v96, v99, &qword_1005DB360);
      v94 = (__int128 *)(v0 + 160);
      sub_100012CE8(v99, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v2 = *(_QWORD *)v94;
        *v82 = *(_QWORD *)v94;
        v49 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v82, v49, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v27 = *(_QWORD *)(v0 + 728);
      v28 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v94, (uint64_t)v101);
      v29 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v27, v101, v29, v28, 0) & 1) != 0)
      {
        v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v59);
        v60 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v60;
        *v60 = v0;
        v60[1] = sub_10037F520;
        v61 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v101, v29, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v63;
        *v63 = v0;
        v63[1] = sub_1003815A8;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v101, v29, *(_QWORD *)(v0 + 536), 0))
        break;
      v30 = sub_100012CE8(v99, v90, &qword_1005DB360);
      v31 = static Logger.realtimeCollaboration.getter(v30);
      v32 = static os_log_type_t.fault.getter(v31);
      v33 = v32;
      v34 = Logger.logObject.getter(v32);
      v35 = v33;
      v36 = os_log_type_enabled(v34, v33);
      v38 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 472);
      v39 = *(_QWORD *)(v0 + 456);
      if (v36)
      {
        v104 = *(_QWORD *)(v0 + 472);
        v40 = swift_slowAlloc(32, -1);
        v41 = swift_slowAlloc(64, -1);
        v106 = v41;
        *(_DWORD *)v40 = 136315650;
        v42 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v44 = v43;
        *(_QWORD *)(v40 + 4) = sub_1003A4190(v42, v43, &v106);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v40 + 12) = 2048;
        *(_QWORD *)(v40 + 14) = 228;
        *(_WORD *)(v40 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v45 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v45;
        v46._countAndFlagsBits = 0xD00000000000001DLL;
        v46._object = (void *)0x800000010048B7D0;
        String.append(_:)(v46);
        v47 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v90, v0 + 280, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v48 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v40 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v48, &v106);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed assertion at %s:%lu: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v104, v39);
      }
      else
      {

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v101);
    }
    v64 = *(_QWORD *)(v0 + 840);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 568);
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v69;
    v69(v66, v65, v67);
    v70 = objc_msgSend(*(id *)(v68 + v64), "fastSyncPaperKitEnablePCSEncryption");
    if ((v70 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v70);
      v71 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v71;
      *v71 = v0;
      v71[1] = sub_100382B08;
      v61 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 568);
      v74 = *(_QWORD *)(v0 + 560);
      v75 = *(_QWORD *)(v0 + 544);
      v76 = *(_QWORD *)(v0 + 536);
      v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      *(_QWORD *)(v0 + 976) = v77;
      v77(v73, v76);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v72, v76);
      GroupSessionMessenger.MessageContext.source.getter(v78);
      v79 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v79;
      *v79 = v0;
      v79[1] = sub_100382B90;
      v61 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v61, 3);
  }
}

uint64_t sub_100382B08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 960);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 680);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 968) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_100382D14;
  else
    v6 = sub_100382C18;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100382B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 984);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 672);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 992) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_100385B28;
  else
    v6 = sub_100384E20;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100382C18(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = FastSync.PaperKitMessage.data.getter(a1);
  v4 = v3;
  v1[125] = v2;
  v1[126] = v3;
  v5 = (_QWORD *)swift_task_alloc(dword_1005DB37C);
  v1[127] = v5;
  *v5 = v1;
  v5[1] = sub_100382C88;
  return sub_10038F7A4(v2, v4);
}

uint64_t sub_100382C88(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1016);
  v5 = *(_QWORD *)(*v2 + 1008);
  v6 = *(_QWORD *)(*v2 + 1000);
  *(_QWORD *)(v3 + 1024) = a1;
  *(_QWORD *)(v3 + 1032) = v1;
  swift_task_dealloc(v4);
  sub_10013DD30(v6, v5);
  if (v1)
    v7 = sub_1003844C8;
  else
    v7 = sub_10038366C;
  return swift_task_switch(v7, 0, 0);
}

void sub_100382D14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  __objc2_meth_list **p_inst_meths;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v99 = v0 + 16;
  v1 = v0 + 112;
  v95 = v0 + 248;
  v85 = (_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 8);
  v4(*(_QWORD *)(v0 + 568), v3);
  v4(v2, v3);
  v104 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v5 = *(_QWORD *)(v0 + 968);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v102 = v0 + 112;
  v93 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.error.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v5);
    v13 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v11 + 4) = v13;
    *v12 = v13;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Error processing incoming fast sync message: %@", (uint8_t *)v11, 0xCu);
    v14 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }
  v15 = *(_QWORD *)(v0 + 856);
  v16 = *(_QWORD *)(v0 + 424);

  v17 = *(_QWORD *)(v16 + v15);
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v17 + 16) = v20;
    os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));
    swift_errorRelease(v5);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v21 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
        v53 = *(_QWORD *)(v0 + 808);
        v54 = *(_QWORD *)(v0 + 784);
        v55 = *(_QWORD *)(v0 + 776);
        v56 = *(_QWORD *)(v0 + 752);
        v57 = *(_QWORD *)(v0 + 744);
        v58 = *(_QWORD *)(v0 + 728);
        v59 = *(_QWORD *)(v0 + 720);
        v60 = *(_QWORD *)(v0 + 696);
        v61 = *(_QWORD *)(v0 + 688);
        v83 = *(_QWORD *)(v0 + 680);
        v84 = *(_QWORD *)(v0 + 672);
        v86 = *(_QWORD *)(v0 + 648);
        v87 = *(_QWORD *)(v0 + 640);
        v88 = *(_QWORD *)(v0 + 632);
        v89 = *(_QWORD *)(v0 + 624);
        v90 = *(_QWORD *)(v0 + 600);
        v91 = *(_QWORD *)(v0 + 576);
        v92 = *(_QWORD *)(v0 + 568);
        v94 = *(_QWORD *)(v0 + 560);
        v96 = *(_QWORD *)(v0 + 552);
        v98 = *(_QWORD *)(v0 + 528);
        v100 = *(_QWORD *)(v0 + 520);
        v101 = *(_QWORD *)(v0 + 512);
        v103 = *(_QWORD *)(v0 + 496);
        v105 = *(_QWORD *)(v0 + 472);
        v108 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v59);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v90);
        swift_task_dealloc(v91);
        swift_task_dealloc(v92);
        swift_task_dealloc(v94);
        swift_task_dealloc(v96);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v101);
        swift_task_dealloc(v103);
        swift_task_dealloc(v105);
        swift_task_dealloc(v108);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v22 = *(_QWORD *)(v0 + 832);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v24 = *(_QWORD *)(v0 + 776);
      v106 = *(_QWORD *)(v0 + 768);
      v25 = *(_QWORD *)(v0 + 760);
      v26 = *(_QWORD *)(v0 + 752);
      v27 = v26 + *(int *)(v0 + 60);
      v28 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v95, v27, v25, v22);
      sub_100012CE8(v29, v99, &qword_1005DB360);
      v28(v95, 0);
      v23(v24, v26, v25);
      dispatch thunk of Collection.formIndex(after:)(v27, v25, v22);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v24, v25);
      v1 = v0 + 112;
      sub_10014BD1C(v99, v102, &qword_1005DB360);
      v97 = (__int128 *)(v0 + 160);
      sub_100012CE8(v102, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v5 = *(_QWORD *)v97;
        *v85 = *(_QWORD *)v97;
        v52 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v85, v52, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v30 = *(_QWORD *)(v0 + 728);
      v31 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v97, (uint64_t)v104);
      v32 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v30, v104, v32, v31, 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v63;
        *v63 = v0;
        v63[1] = sub_10037F520;
        v64 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v104, v32, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v65 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v65);
        v66 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v66;
        *v66 = v0;
        v66[1] = sub_1003815A8;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v104, v32, *(_QWORD *)(v0 + 536), 0))
        break;
      v33 = sub_100012CE8(v102, v93, &qword_1005DB360);
      v34 = static Logger.realtimeCollaboration.getter(v33);
      v35 = static os_log_type_t.fault.getter(v34);
      v36 = v35;
      v37 = Logger.logObject.getter(v35);
      v38 = v36;
      v39 = os_log_type_enabled(v37, v36);
      v41 = *(_QWORD *)(v0 + 464);
      v40 = *(_QWORD *)(v0 + 472);
      v42 = *(_QWORD *)(v0 + 456);
      if (v39)
      {
        v107 = *(_QWORD *)(v0 + 472);
        v43 = swift_slowAlloc(32, -1);
        v44 = swift_slowAlloc(64, -1);
        v109 = v44;
        *(_DWORD *)v43 = 136315650;
        v45 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v47 = v46;
        *(_QWORD *)(v43 + 4) = sub_1003A4190(v45, v46, &v109);
        swift_bridgeObjectRelease(v47);
        *(_WORD *)(v43 + 12) = 2048;
        *(_QWORD *)(v43 + 14) = 228;
        *(_WORD *)(v43 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v48 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v48;
        v49._countAndFlagsBits = 0xD00000000000001DLL;
        v49._object = (void *)0x800000010048B7D0;
        String.append(_:)(v49);
        v50 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v93, v0 + 280, v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v51 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v43 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v51, &v109);
        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed assertion at %s:%lu: %s", (uint8_t *)v43, 0x20u);
        swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        sub_100012DDC(v93, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v107, v42);
      }
      else
      {

        sub_100012DDC(v93, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v104);
    }
    v67 = *(_QWORD *)(v0 + 840);
    v68 = *(_QWORD *)(v0 + 576);
    v69 = *(_QWORD *)(v0 + 568);
    v70 = *(_QWORD *)(v0 + 536);
    v71 = *(_QWORD *)(v0 + 424);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v72;
    v72(v69, v68, v70);
    v73 = objc_msgSend(*(id *)(v71 + v67), "fastSyncPaperKitEnablePCSEncryption");
    if ((v73 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v73);
      v74 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v74;
      *v74 = v0;
      v74[1] = sub_100382B08;
      v64 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v75 = *(_QWORD *)(v0 + 576);
      v76 = *(_QWORD *)(v0 + 568);
      v77 = *(_QWORD *)(v0 + 560);
      v78 = *(_QWORD *)(v0 + 544);
      v79 = *(_QWORD *)(v0 + 536);
      v80 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      *(_QWORD *)(v0 + 976) = v80;
      v80(v76, v79);
      v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v77, v75, v79);
      GroupSessionMessenger.MessageContext.source.getter(v81);
      v82 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v82;
      *v82 = v0;
      v82[1] = sub_100382B90;
      v64 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v64, 3);
  }
}

uint64_t sub_10038366C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  NSObject *v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  Swift::String v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  id v102;
  _QWORD *v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  __int128 *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t *);
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v2 = (uint64_t *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 1024);
  if ((unint64_t)v3 >> 62)
  {
LABEL_48:
    if (v3 < 0)
      v120 = v3;
    else
      v120 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v120);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1024));
  }
  v5 = (_QWORD *)(v0 + 368);
  v141 = (uint64_t)v2;
  if (!v4)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1024));
    goto LABEL_13;
  }
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_53;
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v0 + 1024);
    v7 = *(id *)(v6 + 32);
    while (1)
    {
      v8 = objc_msgSend(v7, "encryptedValues", swift_bridgeObjectRelease(v6).n128_f64[0]);

      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(v8, "objectForKeyedSubscript:", v9);

      swift_unknownObjectRelease(v8, v11);
      if (v10)
      {
        *v5 = v10;
        v12 = sub_100012E18(&qword_1005DB380);
        if ((swift_dynamicCast(v0 + 312, v5, v12, &type metadata for Data, 6) & 1) != 0)
          break;
      }
LABEL_13:
      if (qword_1005CED60 != -1)
        swift_once(&qword_1005CED60, sub_10037B8C0);
      v17 = *(_QWORD *)(v0 + 1024);
      sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
      swift_bridgeObjectRetain(v17);
      v19 = Logger.logObject.getter(v18);
      v21 = static os_log_type_t.error.getter(v19, v20);
      v22 = os_log_type_enabled(v19, v21);
      v23 = *(_QWORD *)(v0 + 1024);
      if (v22)
      {
        v145 = v5;
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v148 = v25;
        *(_DWORD *)v24 = 136315138;
        v26 = sub_1000163BC(0, &qword_1005DB250, CKRecord_ptr);
        swift_bridgeObjectRetain(v23);
        v5 = (_QWORD *)Array.description.getter(v27, v26);
        v29 = v28;
        swift_bridgeObjectRelease(v23);
        *(_QWORD *)(v0 + 360) = sub_1003A4190((uint64_t)v5, v29, &v148);
        v2 = (uint64_t *)v141;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v145, v24 + 4);
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease_n(v23, 2);
        _os_log_impl((void *)&_mh_execute_header, v19, v21, "Incoming PaperKit message is not in a valid format: %s", v24, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1024), 2);
      }

      v30 = *(_QWORD *)(*(_QWORD *)(v0 + 424) + *(_QWORD *)(v0 + 856));
      os_unfair_lock_lock((os_unfair_lock_t)(v30 + 24));
      v31 = *(_QWORD *)(v30 + 16);
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (!v32)
      {
        v34 = *(_QWORD *)(v0 + 576);
        v35 = *(_QWORD *)(v0 + 568);
        v36 = *(_QWORD *)(v0 + 544);
        v37 = *(_QWORD *)(v0 + 536);
        *(_QWORD *)(v30 + 16) = v33;
        os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 24));
        v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v38(v35, v37);
        sub_100012DDC((uint64_t)v2, &qword_1005DB360);
        v38(v34, v37);
        goto LABEL_20;
      }
      __break(1u);
LABEL_53:
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 1024));
      v6 = *(_QWORD *)(v0 + 1024);
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1024));
    v5 = *(_QWORD **)(v0 + 312);
    v1 = *(uint64_t **)(v0 + 320);
    if (qword_1005CED68 != -1)
      goto LABEL_55;
  }
  else
  {
    __break(1u);
LABEL_55:
    swift_once(&qword_1005CED68, sub_10037B908);
  }
  v13 = *(_QWORD *)(v0 + 520);
  v14 = *(_QWORD *)(v0 + 456);
  v15 = *(_QWORD *)(v0 + 464);
  v16 = sub_10012A0B0(*(_QWORD *)(v0 + 504), (uint64_t)qword_1005DAFC8);
  sub_100012CE8(v16, v13, &qword_1005D6E60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100012DDC(*(_QWORD *)(v0 + 520), &qword_1005D6E60);
  }
  else
  {
    v104 = sub_10013DCA0((uint64_t)v5, (unint64_t)v1);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v105, v106))
    {
      *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
      __asm { BR              X10 }
    }

    sub_10013DD30((uint64_t)v5, (unint64_t)v1);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 8))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 456));
  }
  v115 = *(_QWORD *)(v0 + 576);
  v116 = *(_QWORD *)(v0 + 568);
  v117 = *(_QWORD *)(v0 + 544);
  v118 = *(_QWORD *)(v0 + 536);
  sub_10038FDF4((uint64_t)v5, (unint64_t)v1, *(_QWORD *)(*(_QWORD *)(v0 + 424) + *(_QWORD *)(v0 + 848)));
  v119 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
  v119(v116, v118);
  sub_100012DDC((uint64_t)v2, &qword_1005DB360);
  sub_10013DD30((uint64_t)v5, (unint64_t)v1);
  v119(v115, v118);
LABEL_20:
  v136 = v0 + 248;
  v138 = v0 + 16;
  v132 = (_QWORD *)(v0 + 208);
  v134 = (__int128 *)(v0 + 160);
  v130 = (_QWORD *)(v0 + 352);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v128 = v0 + 64;
  while (1)
  {
    while (1)
    {
      v39 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v39 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
        v81 = *(_QWORD *)(v0 + 808);
        v82 = *(_QWORD *)(v0 + 784);
        v83 = *(_QWORD *)(v0 + 776);
        v84 = *(_QWORD *)(v0 + 752);
        v85 = *(_QWORD *)(v0 + 744);
        v86 = *(_QWORD *)(v0 + 728);
        v87 = *(_QWORD *)(v0 + 720);
        v88 = *(_QWORD *)(v0 + 696);
        v89 = *(_QWORD *)(v0 + 688);
        v121 = *(_QWORD *)(v0 + 680);
        v122 = *(_QWORD *)(v0 + 672);
        v123 = *(_QWORD *)(v0 + 648);
        v124 = *(_QWORD *)(v0 + 640);
        v125 = *(_QWORD *)(v0 + 632);
        v126 = *(_QWORD *)(v0 + 624);
        v127 = *(_QWORD *)(v0 + 600);
        v129 = *(_QWORD *)(v0 + 576);
        v131 = *(_QWORD *)(v0 + 568);
        v133 = *(_QWORD *)(v0 + 560);
        v135 = *(_QWORD *)(v0 + 552);
        v137 = *(_QWORD *)(v0 + 528);
        v139 = *(_QWORD *)(v0 + 520);
        v140 = *(_QWORD *)(v0 + 512);
        v142 = *(_QWORD *)(v0 + 496);
        v144 = *(_QWORD *)(v0 + 472);
        v147 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v81);
        swift_task_dealloc(v82);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v121);
        swift_task_dealloc(v122);
        swift_task_dealloc(v123);
        swift_task_dealloc(v124);
        swift_task_dealloc(v125);
        swift_task_dealloc(v126);
        swift_task_dealloc(v127);
        swift_task_dealloc(v129);
        swift_task_dealloc(v131);
        swift_task_dealloc(v133);
        swift_task_dealloc(v135);
        swift_task_dealloc(v137);
        swift_task_dealloc(v139);
        swift_task_dealloc(v140);
        swift_task_dealloc(v142);
        swift_task_dealloc(v144);
        swift_task_dealloc(v147);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v40 = *(_QWORD *)(v0 + 832);
      v41 = *(_QWORD *)(v0 + 776);
      v143 = *(void (**)(uint64_t, uint64_t, uint64_t *))(v0 + 824);
      v146 = *(_QWORD *)(v0 + 768);
      v1 = *(uint64_t **)(v0 + 760);
      v42 = *(_QWORD *)(v0 + 752);
      v43 = v42 + *(int *)(v0 + 60);
      v44 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v136, v43, v1, v40);
      sub_100012CE8(v45, v138, &qword_1005DB360);
      v44(v136, 0);
      v2 = &qword_1005DB360;
      v143(v41, v42, v1);
      dispatch thunk of Collection.formIndex(after:)(v43, v1, v40);
      (*(void (**)(uint64_t, uint64_t *))(v146 + 8))(v41, v1);
      sub_10014BD1C(v138, v141, &qword_1005DB360);
      sub_100012CE8(v141, (uint64_t)v134, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) == 0)
        break;
      v46 = *(_QWORD *)v134;
      *v130 = *(_QWORD *)v134;
      v47 = sub_100012E18(&qword_1005D7A90);
      swift_willThrowTypedImpl(v130, v47, &protocol self-conformance witness table for Error);
      if (qword_1005CED60 != -1)
        swift_once(&qword_1005CED60, sub_10037B8C0);
      sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
      swift_errorRetain(v46);
      v48 = swift_errorRetain(v46);
      v49 = Logger.logObject.getter(v48);
      v51 = static os_log_type_t.error.getter(v49, v50);
      if (os_log_type_enabled(v49, v51))
      {
        v52 = swift_slowAlloc(12, -1);
        v1 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v52 = 138412290;
        swift_errorRetain(v46);
        v53 = _swift_stdlib_bridgeErrorToNSError(v46);
        *(_QWORD *)(v52 + 4) = v53;
        *v1 = v53;
        swift_errorRelease(v46);
        swift_errorRelease(v46);
        _os_log_impl((void *)&_mh_execute_header, v49, v51, "Error processing incoming fast sync message: %@", (uint8_t *)v52, 0xCu);
        v54 = sub_100012E18(&qword_1005D3A30);
        swift_arrayDestroy(v1, 1, v54);
        swift_slowDealloc(v1, -1, -1);
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {
        swift_errorRelease(v46);
        swift_errorRelease(v46);
      }
      v76 = *(_QWORD *)(v0 + 856);
      v77 = *(_QWORD *)(v0 + 424);

      v78 = *(_QWORD *)(v77 + v76);
      v3 = v78 + 24;
      os_unfair_lock_lock((os_unfair_lock_t)(v78 + 24));
      v79 = *(_QWORD *)(v78 + 16);
      v32 = __OFADD__(v79, 1);
      v80 = v79 + 1;
      if (v32)
      {
        __break(1u);
        goto LABEL_48;
      }
      *(_QWORD *)(v78 + 16) = v80;
      os_unfair_lock_unlock((os_unfair_lock_t)(v78 + 24));
      swift_errorRelease(v46);
      sub_100012DDC(v141, &qword_1005DB360);
    }
    v55 = *(_QWORD *)(v0 + 728);
    v56 = *(_QWORD *)(v0 + 704);
    sub_10013B100(v134, (uint64_t)v132);
    v57 = sub_100012E18(&qword_1005DB368);
    if ((swift_dynamicCast(v55, v132, v57, v56, 0) & 1) != 0)
    {
      v91 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
      GroupSessionMessenger.MessageContext.source.getter(v91);
      v92 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 880) = v92;
      *v92 = v0;
      v92[1] = sub_10037F520;
      v93 = *(_QWORD *)(v0 + 696);
      return sub_10038EFCC(v93, 3);
    }
    if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v132, v57, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
    {
      v94 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
      GroupSessionMessenger.MessageContext.source.getter(v94);
      v95 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 936) = v95;
      *v95 = v0;
      v95[1] = sub_1003815A8;
      return sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
    }
    if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v132, v57, *(_QWORD *)(v0 + 536), 0))
      break;
    v58 = sub_100012CE8(v141, v128, &qword_1005DB360);
    v59 = static Logger.realtimeCollaboration.getter(v58);
    v60 = static os_log_type_t.fault.getter(v59);
    v61 = v60;
    v62 = Logger.logObject.getter(v60);
    v63 = os_log_type_enabled(v62, v61);
    v64 = *(_QWORD *)(v0 + 464);
    v65 = *(_QWORD *)(v0 + 472);
    v66 = *(_QWORD *)(v0 + 456);
    if (v63)
    {
      v67 = swift_slowAlloc(32, -1);
      v68 = swift_slowAlloc(64, -1);
      v148 = v68;
      *(_DWORD *)v67 = 136315650;
      v69 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v71 = v70;
      *(_QWORD *)(v67 + 4) = sub_1003A4190(v69, v70, &v148);
      swift_bridgeObjectRelease(v71);
      *(_WORD *)(v67 + 12) = 2048;
      *(_QWORD *)(v67 + 14) = 228;
      *(_WORD *)(v67 + 22) = 2080;
      *(_QWORD *)(v0 + 328) = 0;
      *(_QWORD *)(v0 + 336) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v72 = *(_QWORD *)(v0 + 336);
      *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
      *(_QWORD *)(v0 + 288) = v72;
      v73._countAndFlagsBits = 0xD00000000000001DLL;
      v73._object = (void *)0x800000010048B7D0;
      String.append(_:)(v73);
      v74 = sub_100012E18(&qword_1005DB360);
      _print_unlocked<A, B>(_:_:)(v128, v0 + 280, v74, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v75 = *(_QWORD *)(v0 + 288);
      *(_QWORD *)(v67 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v75, &v148);
      swift_bridgeObjectRelease(v75);
      _os_log_impl((void *)&_mh_execute_header, v62, v61, "Failed assertion at %s:%lu: %s", (uint8_t *)v67, 0x20u);
      swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);
    }

    sub_100012DDC(v128, &qword_1005DB360);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v66);
    sub_100012DDC(v141, &qword_1005DB360);
    sub_1000153C0(v132);
  }
  v96 = *(_QWORD *)(v0 + 840);
  v97 = *(_QWORD *)(v0 + 576);
  v98 = *(_QWORD *)(v0 + 568);
  v99 = *(_QWORD *)(v0 + 536);
  v100 = *(_QWORD *)(v0 + 424);
  v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
  *(_QWORD *)(v0 + 952) = v101;
  v101(v98, v97, v99);
  v102 = objc_msgSend(*(id *)(v100 + v96), "fastSyncPaperKitEnablePCSEncryption");
  if ((v102 & 1) != 0)
  {
    GroupSessionMessenger.MessageContext.source.getter(v102);
    v103 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v0 + 960) = v103;
    *v103 = v0;
    v103[1] = sub_100382B08;
    v93 = *(_QWORD *)(v0 + 680);
  }
  else
  {
    v107 = *(_QWORD *)(v0 + 576);
    v108 = *(_QWORD *)(v0 + 568);
    v109 = *(_QWORD *)(v0 + 560);
    v110 = *(_QWORD *)(v0 + 544);
    v111 = *(_QWORD *)(v0 + 536);
    v112 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    *(_QWORD *)(v0 + 976) = v112;
    v112(v108, v111);
    v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(v109, v107, v111);
    GroupSessionMessenger.MessageContext.source.getter(v113);
    v114 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v0 + 984) = v114;
    *v114 = v0;
    v114[1] = sub_100382B90;
    v93 = *(_QWORD *)(v0 + 672);
  }
  return sub_10038EFCC(v93, 3);
}

void sub_1003844C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  __objc2_meth_list **p_inst_meths;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v99 = v0 + 16;
  v1 = v0 + 112;
  v95 = v0 + 248;
  v85 = (_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 8);
  v4(*(_QWORD *)(v0 + 568), v3);
  v4(v2, v3);
  v104 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v5 = *(_QWORD *)(v0 + 1032);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v102 = v0 + 112;
  v93 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.error.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v5);
    v13 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v11 + 4) = v13;
    *v12 = v13;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Error processing incoming fast sync message: %@", (uint8_t *)v11, 0xCu);
    v14 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }
  v15 = *(_QWORD *)(v0 + 856);
  v16 = *(_QWORD *)(v0 + 424);

  v17 = *(_QWORD *)(v16 + v15);
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v17 + 16) = v20;
    os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));
    swift_errorRelease(v5);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v21 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
        v53 = *(_QWORD *)(v0 + 808);
        v54 = *(_QWORD *)(v0 + 784);
        v55 = *(_QWORD *)(v0 + 776);
        v56 = *(_QWORD *)(v0 + 752);
        v57 = *(_QWORD *)(v0 + 744);
        v58 = *(_QWORD *)(v0 + 728);
        v59 = *(_QWORD *)(v0 + 720);
        v60 = *(_QWORD *)(v0 + 696);
        v61 = *(_QWORD *)(v0 + 688);
        v83 = *(_QWORD *)(v0 + 680);
        v84 = *(_QWORD *)(v0 + 672);
        v86 = *(_QWORD *)(v0 + 648);
        v87 = *(_QWORD *)(v0 + 640);
        v88 = *(_QWORD *)(v0 + 632);
        v89 = *(_QWORD *)(v0 + 624);
        v90 = *(_QWORD *)(v0 + 600);
        v91 = *(_QWORD *)(v0 + 576);
        v92 = *(_QWORD *)(v0 + 568);
        v94 = *(_QWORD *)(v0 + 560);
        v96 = *(_QWORD *)(v0 + 552);
        v98 = *(_QWORD *)(v0 + 528);
        v100 = *(_QWORD *)(v0 + 520);
        v101 = *(_QWORD *)(v0 + 512);
        v103 = *(_QWORD *)(v0 + 496);
        v105 = *(_QWORD *)(v0 + 472);
        v108 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v59);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v90);
        swift_task_dealloc(v91);
        swift_task_dealloc(v92);
        swift_task_dealloc(v94);
        swift_task_dealloc(v96);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v101);
        swift_task_dealloc(v103);
        swift_task_dealloc(v105);
        swift_task_dealloc(v108);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v22 = *(_QWORD *)(v0 + 832);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v24 = *(_QWORD *)(v0 + 776);
      v106 = *(_QWORD *)(v0 + 768);
      v25 = *(_QWORD *)(v0 + 760);
      v26 = *(_QWORD *)(v0 + 752);
      v27 = v26 + *(int *)(v0 + 60);
      v28 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v95, v27, v25, v22);
      sub_100012CE8(v29, v99, &qword_1005DB360);
      v28(v95, 0);
      v23(v24, v26, v25);
      dispatch thunk of Collection.formIndex(after:)(v27, v25, v22);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v24, v25);
      v1 = v0 + 112;
      sub_10014BD1C(v99, v102, &qword_1005DB360);
      v97 = (__int128 *)(v0 + 160);
      sub_100012CE8(v102, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v5 = *(_QWORD *)v97;
        *v85 = *(_QWORD *)v97;
        v52 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v85, v52, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v30 = *(_QWORD *)(v0 + 728);
      v31 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v97, (uint64_t)v104);
      v32 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v30, v104, v32, v31, 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v63;
        *v63 = v0;
        v63[1] = sub_10037F520;
        v64 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v104, v32, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v65 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v65);
        v66 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v66;
        *v66 = v0;
        v66[1] = sub_1003815A8;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v104, v32, *(_QWORD *)(v0 + 536), 0))
        break;
      v33 = sub_100012CE8(v102, v93, &qword_1005DB360);
      v34 = static Logger.realtimeCollaboration.getter(v33);
      v35 = static os_log_type_t.fault.getter(v34);
      v36 = v35;
      v37 = Logger.logObject.getter(v35);
      v38 = v36;
      v39 = os_log_type_enabled(v37, v36);
      v41 = *(_QWORD *)(v0 + 464);
      v40 = *(_QWORD *)(v0 + 472);
      v42 = *(_QWORD *)(v0 + 456);
      if (v39)
      {
        v107 = *(_QWORD *)(v0 + 472);
        v43 = swift_slowAlloc(32, -1);
        v44 = swift_slowAlloc(64, -1);
        v109 = v44;
        *(_DWORD *)v43 = 136315650;
        v45 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v47 = v46;
        *(_QWORD *)(v43 + 4) = sub_1003A4190(v45, v46, &v109);
        swift_bridgeObjectRelease(v47);
        *(_WORD *)(v43 + 12) = 2048;
        *(_QWORD *)(v43 + 14) = 228;
        *(_WORD *)(v43 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v48 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v48;
        v49._countAndFlagsBits = 0xD00000000000001DLL;
        v49._object = (void *)0x800000010048B7D0;
        String.append(_:)(v49);
        v50 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v93, v0 + 280, v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v51 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v43 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v51, &v109);
        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed assertion at %s:%lu: %s", (uint8_t *)v43, 0x20u);
        swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        sub_100012DDC(v93, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v107, v42);
      }
      else
      {

        sub_100012DDC(v93, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v104);
    }
    v67 = *(_QWORD *)(v0 + 840);
    v68 = *(_QWORD *)(v0 + 576);
    v69 = *(_QWORD *)(v0 + 568);
    v70 = *(_QWORD *)(v0 + 536);
    v71 = *(_QWORD *)(v0 + 424);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v72;
    v72(v69, v68, v70);
    v73 = objc_msgSend(*(id *)(v71 + v67), "fastSyncPaperKitEnablePCSEncryption");
    if ((v73 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v73);
      v74 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v74;
      *v74 = v0;
      v74[1] = sub_100382B08;
      v64 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v75 = *(_QWORD *)(v0 + 576);
      v76 = *(_QWORD *)(v0 + 568);
      v77 = *(_QWORD *)(v0 + 560);
      v78 = *(_QWORD *)(v0 + 544);
      v79 = *(_QWORD *)(v0 + 536);
      v80 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      *(_QWORD *)(v0 + 976) = v80;
      v80(v76, v79);
      v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v77, v75, v79);
      GroupSessionMessenger.MessageContext.source.getter(v81);
      v82 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v82;
      *v82 = v0;
      v82[1] = sub_100382B90;
      v64 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v64, 3);
  }
}

uint64_t sub_100384E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  NSObject *v67;
  os_log_type_t v68;
  BOOL v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  Swift::String v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  id v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t);
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  void (*v134)(uint64_t, uint64_t, uint64_t);
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;

  if (qword_1005CED68 != -1)
    swift_once(&qword_1005CED68, sub_10037B908);
  v0 = *(_QWORD *)(v137 + 512);
  v1 = *(_QWORD *)(v137 + 456);
  v2 = *(_QWORD *)(v137 + 464);
  v3 = sub_10012A0B0(*(_QWORD *)(v137 + 504), (uint64_t)qword_1005DAFC8);
  sub_100012CE8(v3, v0, &qword_1005D6E60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0, 1, v1) == 1)
  {
    v4 = sub_100012DDC(*(_QWORD *)(v137 + 512), &qword_1005D6E60);
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v137 + 952))(*(_QWORD *)(v137 + 552), *(_QWORD *)(v137 + 560), *(_QWORD *)(v137 + 536));
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
      ((void (*)(void))FastSync.PaperKitMessage.data.getter)();
      __asm { BR              X10 }
    }
    (*(void (**)(_QWORD, _QWORD))(v137 + 976))(*(_QWORD *)(v137 + 552), *(_QWORD *)(v137 + 536));
    v9 = *(_QWORD *)(v137 + 512);
    v10 = *(_QWORD *)(v137 + 456);
    v11 = *(_QWORD *)(v137 + 464);

    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v137 + 424) + *(_QWORD *)(v137 + 848));
  v13 = FastSync.PaperKitMessage.data.getter(v4);
  v15 = v14;
  os_unfair_lock_lock((os_unfair_lock_t)(v12 + 24));
  v16 = *(_QWORD *)(v12 + 16);
  swift_bridgeObjectRetain(v16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v12 + 24));
  if ((unint64_t)v16 >> 62)
  {
    if (v16 < 0)
      v26 = v16;
    else
      v26 = v16 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v16);
    v17 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v16);
    if (v17)
      goto LABEL_10;
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17)
    {
LABEL_10:
      if (v17 < 1)
      {
LABEL_45:
        __break(1u);
        JUMPOUT(0x100385B14);
      }
      v18 = 0;
      v132 = v16 & 0xC000000000000001;
      v19 = v16;
      do
      {
        if (v132)
        {
          v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v16);
        }
        else
        {
          v20 = *(_QWORD *)(v16 + 8 * v18 + 32);
          swift_retain(v20);
        }
        v21 = *(_QWORD *)(v137 + 440);
        v22 = *(_QWORD *)(v137 + 448);
        v23 = *(_QWORD *)(v137 + 432);
        ++v18;
        *(_QWORD *)(v137 + 296) = v13;
        *(_QWORD *)(v137 + 304) = v15;
        sub_10013DCA0(v13, v15);
        v24 = sub_100012E18(&qword_1005CF7B8);
        AsyncStream.Continuation.yield(_:)(v137 + 296, v24);
        v25 = swift_release(v20);
        (*(void (**)(uint64_t, uint64_t, __n128))(v21 + 8))(v22, v23, v25);
        v16 = v19;
      }
      while (v17 != v18);
    }
  }
  v27 = *(void (**)(uint64_t, uint64_t))(v137 + 976);
  v28 = *(_QWORD *)(v137 + 560);
  v29 = *(_QWORD *)(v137 + 536);
  swift_bridgeObjectRelease(v16);
  sub_10013DD30(v13, v15);
  v27(v28, v29);
  v130 = v137 + 112;
  sub_100012DDC(v137 + 112, &qword_1005DB360);
  sub_1000153C0((_QWORD *)(v137 + 208));
  v30 = *(_QWORD *)(*(_QWORD *)(v137 + 752) + *(int *)(v137 + 60));
  dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v137 + 760));
  if (v30 == *(_QWORD *)(v137 + 376))
  {
LABEL_21:
    sub_100012DDC(*(_QWORD *)(v137 + 752), &qword_1005DB3F8);
    v31 = *(_QWORD *)(v137 + 808);
    v32 = *(_QWORD *)(v137 + 784);
    v33 = *(_QWORD *)(v137 + 776);
    v34 = *(_QWORD *)(v137 + 752);
    v35 = *(_QWORD *)(v137 + 744);
    v36 = *(_QWORD *)(v137 + 728);
    v37 = *(_QWORD *)(v137 + 720);
    v38 = *(_QWORD *)(v137 + 696);
    v39 = *(_QWORD *)(v137 + 688);
    v110 = *(_QWORD *)(v137 + 680);
    v111 = *(_QWORD *)(v137 + 672);
    v112 = *(_QWORD *)(v137 + 648);
    v113 = *(_QWORD *)(v137 + 640);
    v114 = *(_QWORD *)(v137 + 632);
    v115 = *(_QWORD *)(v137 + 624);
    v116 = *(_QWORD *)(v137 + 600);
    v117 = *(_QWORD *)(v137 + 576);
    v119 = *(_QWORD *)(v137 + 568);
    v121 = *(_QWORD *)(v137 + 560);
    v123 = *(_QWORD *)(v137 + 552);
    v125 = *(_QWORD *)(v137 + 528);
    v127 = *(_QWORD *)(v137 + 520);
    v129 = *(_QWORD *)(v137 + 512);
    v131 = *(_QWORD *)(v137 + 496);
    v133 = *(_QWORD *)(v137 + 472);
    v135 = *(_QWORD *)(v137 + 448);
    swift_task_dealloc(*(_QWORD *)(v137 + 816));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v125);
    swift_task_dealloc(v127);
    swift_task_dealloc(v129);
    swift_task_dealloc(v131);
    swift_task_dealloc(v133);
    swift_task_dealloc(v135);
    return (*(uint64_t (**)(void))(v137 + 8))();
  }
  v126 = v137 + 248;
  v128 = v137 + 16;
  v124 = (__int128 *)(v137 + 160);
  v120 = (_QWORD *)(v137 + 352);
  v122 = v137 + 208;
  v118 = v137 + 64;
  while (1)
  {
    v42 = *(_QWORD *)(v137 + 832);
    v43 = *(_QWORD *)(v137 + 776);
    v134 = *(void (**)(uint64_t, uint64_t, uint64_t))(v137 + 824);
    v136 = *(_QWORD *)(v137 + 768);
    v44 = *(_QWORD *)(v137 + 760);
    v45 = *(_QWORD *)(v137 + 752);
    v46 = v45 + *(int *)(v137 + 60);
    v47 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v126, v46, v44, v42);
    sub_100012CE8(v48, v128, &qword_1005DB360);
    v47(v126, 0);
    v134(v43, v45, v44);
    dispatch thunk of Collection.formIndex(after:)(v46, v44, v42);
    (*(void (**)(uint64_t, uint64_t))(v136 + 8))(v43, v44);
    sub_10014BD1C(v128, v130, &qword_1005DB360);
    sub_100012CE8(v130, (uint64_t)v124, &qword_1005DB360);
    if ((*(_BYTE *)(v137 + 200) & 1) == 0)
      break;
    v49 = *(_QWORD *)v124;
    *v120 = *(_QWORD *)v124;
    v50 = sub_100012E18(&qword_1005D7A90);
    swift_willThrowTypedImpl(v120, v50, &protocol self-conformance witness table for Error);
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    sub_10012A0B0(*(_QWORD *)(v137 + 456), (uint64_t)qword_1005DAFB0);
    swift_errorRetain(v49);
    v51 = swift_errorRetain(v49);
    v52 = Logger.logObject.getter(v51);
    v54 = static os_log_type_t.error.getter(v52, v53);
    if (os_log_type_enabled(v52, v54))
    {
      v55 = swift_slowAlloc(12, -1);
      v56 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v55 = 138412290;
      swift_errorRetain(v49);
      v57 = _swift_stdlib_bridgeErrorToNSError(v49);
      *(_QWORD *)(v55 + 4) = v57;
      *v56 = v57;
      swift_errorRelease(v49);
      swift_errorRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v52, v54, "Error processing incoming fast sync message: %@", (uint8_t *)v55, 0xCu);
      v58 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v56, 1, v58);
      swift_slowDealloc(v56, -1, -1);
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      swift_errorRelease(v49);
      swift_errorRelease(v49);
    }
    v83 = *(_QWORD *)(v137 + 856);
    v84 = *(_QWORD *)(v137 + 424);

    v85 = *(_QWORD *)(v84 + v83);
    os_unfair_lock_lock((os_unfair_lock_t)(v85 + 24));
    v86 = *(_QWORD *)(v85 + 16);
    v87 = __OFADD__(v86, 1);
    v88 = v86 + 1;
    if (v87)
    {
      __break(1u);
      goto LABEL_45;
    }
    *(_QWORD *)(v85 + 16) = v88;
    os_unfair_lock_unlock((os_unfair_lock_t)(v85 + 24));
    swift_errorRelease(v49);
    sub_100012DDC(v130, &qword_1005DB360);
LABEL_24:
    v41 = *(_QWORD *)(*(_QWORD *)(v137 + 752) + *(int *)(v137 + 60));
    dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v137 + 760));
    if (v41 == *(_QWORD *)(v137 + 376))
      goto LABEL_21;
  }
  v59 = *(_QWORD *)(v137 + 728);
  v60 = *(_QWORD *)(v137 + 704);
  v61 = (_QWORD *)(v137 + 208);
  sub_10013B100(v124, v122);
  v62 = sub_100012E18(&qword_1005DB368);
  if ((swift_dynamicCast(v59, v122, v62, v60, 0) & 1) != 0)
  {
    v89 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v137 + 712) + 32))(*(_QWORD *)(v137 + 720), *(_QWORD *)(v137 + 728), *(_QWORD *)(v137 + 704));
    GroupSessionMessenger.MessageContext.source.getter(v89);
    v90 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v137 + 880) = v90;
    *v90 = v137;
    v90[1] = sub_10037F520;
    v91 = *(_QWORD *)(v137 + 696);
    return sub_10038EFCC(v91, 3);
  }
  if ((swift_dynamicCast(*(_QWORD *)(v137 + 648), v122, v62, *(_QWORD *)(v137 + 608), 0) & 1) != 0)
  {
    v92 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v137 + 616) + 32))(*(_QWORD *)(v137 + 640), *(_QWORD *)(v137 + 648), *(_QWORD *)(v137 + 608));
    GroupSessionMessenger.MessageContext.source.getter(v92);
    v93 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v137 + 936) = v93;
    *v93 = v137;
    v93[1] = sub_1003815A8;
    return sub_10038EFCC(*(_QWORD *)(v137 + 688), 2);
  }
  if (!swift_dynamicCast(*(_QWORD *)(v137 + 576), v122, v62, *(_QWORD *)(v137 + 536), 0))
  {
    v63 = sub_100012CE8(v130, v118, &qword_1005DB360);
    v64 = static Logger.realtimeCollaboration.getter(v63);
    v65 = static os_log_type_t.fault.getter(v64);
    v66 = v65;
    v67 = Logger.logObject.getter(v65);
    v68 = v66;
    v69 = os_log_type_enabled(v67, v66);
    v71 = *(_QWORD *)(v137 + 464);
    v70 = *(_QWORD *)(v137 + 472);
    v72 = *(_QWORD *)(v137 + 456);
    if (v69)
    {
      v73 = swift_slowAlloc(32, -1);
      v74 = swift_slowAlloc(64, -1);
      v138 = v74;
      *(_DWORD *)v73 = 136315650;
      v75 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v77 = v76;
      *(_QWORD *)(v73 + 4) = sub_1003A4190(v75, v76, &v138);
      swift_bridgeObjectRelease(v77);
      *(_WORD *)(v73 + 12) = 2048;
      *(_QWORD *)(v73 + 14) = 228;
      *(_WORD *)(v73 + 22) = 2080;
      *(_QWORD *)(v137 + 328) = 0;
      *(_QWORD *)(v137 + 336) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v78 = *(_QWORD *)(v137 + 336);
      *(_QWORD *)(v137 + 280) = *(_QWORD *)(v137 + 328);
      *(_QWORD *)(v137 + 288) = v78;
      v79._countAndFlagsBits = 0xD00000000000001DLL;
      v79._object = (void *)0x800000010048B7D0;
      String.append(_:)(v79);
      v80 = sub_100012E18(&qword_1005DB360);
      _print_unlocked<A, B>(_:_:)(v118, v137 + 280, v80, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v81 = *(_QWORD *)(v137 + 288);
      *(_QWORD *)(v73 + 24) = sub_1003A4190(*(_QWORD *)(v137 + 280), v81, &v138);
      swift_bridgeObjectRelease(v81);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Failed assertion at %s:%lu: %s", (uint8_t *)v73, 0x20u);
      swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      v82 = v73;
      v61 = (_QWORD *)(v137 + 208);
      swift_slowDealloc(v82, -1, -1);
    }

    sub_100012DDC(v118, &qword_1005DB360);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
    sub_100012DDC(v137 + 112, &qword_1005DB360);
    sub_1000153C0(v61);
    goto LABEL_24;
  }
  v94 = *(_QWORD *)(v137 + 840);
  v95 = *(_QWORD *)(v137 + 576);
  v96 = *(_QWORD *)(v137 + 568);
  v97 = *(_QWORD *)(v137 + 536);
  v98 = *(_QWORD *)(v137 + 424);
  v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 + 544) + 16);
  *(_QWORD *)(v137 + 952) = v99;
  v99(v96, v95, v97);
  v100 = objc_msgSend(*(id *)(v98 + v94), "fastSyncPaperKitEnablePCSEncryption");
  if ((v100 & 1) != 0)
  {
    GroupSessionMessenger.MessageContext.source.getter(v100);
    v101 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v137 + 960) = v101;
    *v101 = v137;
    v101[1] = sub_100382B08;
    v91 = *(_QWORD *)(v137 + 680);
  }
  else
  {
    v102 = *(_QWORD *)(v137 + 576);
    v103 = *(_QWORD *)(v137 + 568);
    v104 = *(_QWORD *)(v137 + 560);
    v105 = *(_QWORD *)(v137 + 544);
    v106 = *(_QWORD *)(v137 + 536);
    v107 = *(void (**)(uint64_t, uint64_t))(v105 + 8);
    *(_QWORD *)(v137 + 976) = v107;
    v107(v103, v106);
    v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 32))(v104, v102, v106);
    GroupSessionMessenger.MessageContext.source.getter(v108);
    v109 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v137 + 984) = v109;
    *v109 = v137;
    v109[1] = sub_100382B90;
    v91 = *(_QWORD *)(v137 + 672);
  }
  return sub_10038EFCC(v91, 3);
}

void sub_100385B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_meth_list **p_inst_meths;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v96 = v0 + 16;
  v1 = v0 + 112;
  v92 = v0 + 248;
  v82 = (_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(v0 + 976))(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 536));
  v101 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 992);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v99 = v0 + 112;
  v90 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error processing incoming fast sync message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 856);
  v13 = *(_QWORD *)(v0 + 424);

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v2);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v18 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB3F8);
        v50 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 784);
        v52 = *(_QWORD *)(v0 + 776);
        v53 = *(_QWORD *)(v0 + 752);
        v54 = *(_QWORD *)(v0 + 744);
        v55 = *(_QWORD *)(v0 + 728);
        v56 = *(_QWORD *)(v0 + 720);
        v57 = *(_QWORD *)(v0 + 696);
        v58 = *(_QWORD *)(v0 + 688);
        v80 = *(_QWORD *)(v0 + 680);
        v81 = *(_QWORD *)(v0 + 672);
        v83 = *(_QWORD *)(v0 + 648);
        v84 = *(_QWORD *)(v0 + 640);
        v85 = *(_QWORD *)(v0 + 632);
        v86 = *(_QWORD *)(v0 + 624);
        v87 = *(_QWORD *)(v0 + 600);
        v88 = *(_QWORD *)(v0 + 576);
        v89 = *(_QWORD *)(v0 + 568);
        v91 = *(_QWORD *)(v0 + 560);
        v93 = *(_QWORD *)(v0 + 552);
        v95 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 520);
        v98 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 496);
        v102 = *(_QWORD *)(v0 + 472);
        v105 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v91);
        swift_task_dealloc(v93);
        swift_task_dealloc(v95);
        swift_task_dealloc(v97);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v102);
        swift_task_dealloc(v105);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v19 = *(_QWORD *)(v0 + 832);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v21 = *(_QWORD *)(v0 + 776);
      v103 = *(_QWORD *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 760);
      v23 = *(_QWORD *)(v0 + 752);
      v24 = v23 + *(int *)(v0 + 60);
      v25 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v92, v24, v22, v19);
      sub_100012CE8(v26, v96, &qword_1005DB360);
      v25(v92, 0);
      v20(v21, v23, v22);
      dispatch thunk of Collection.formIndex(after:)(v24, v22, v19);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v21, v22);
      v1 = v0 + 112;
      sub_10014BD1C(v96, v99, &qword_1005DB360);
      v94 = (__int128 *)(v0 + 160);
      sub_100012CE8(v99, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v2 = *(_QWORD *)v94;
        *v82 = *(_QWORD *)v94;
        v49 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v82, v49, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v27 = *(_QWORD *)(v0 + 728);
      v28 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v94, (uint64_t)v101);
      v29 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v27, v101, v29, v28, 0) & 1) != 0)
      {
        v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v59);
        v60 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v60;
        *v60 = v0;
        v60[1] = sub_10037F520;
        v61 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v101, v29, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v63;
        *v63 = v0;
        v63[1] = sub_1003815A8;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v101, v29, *(_QWORD *)(v0 + 536), 0))
        break;
      v30 = sub_100012CE8(v99, v90, &qword_1005DB360);
      v31 = static Logger.realtimeCollaboration.getter(v30);
      v32 = static os_log_type_t.fault.getter(v31);
      v33 = v32;
      v34 = Logger.logObject.getter(v32);
      v35 = v33;
      v36 = os_log_type_enabled(v34, v33);
      v38 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 472);
      v39 = *(_QWORD *)(v0 + 456);
      if (v36)
      {
        v104 = *(_QWORD *)(v0 + 472);
        v40 = swift_slowAlloc(32, -1);
        v41 = swift_slowAlloc(64, -1);
        v106 = v41;
        *(_DWORD *)v40 = 136315650;
        v42 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v44 = v43;
        *(_QWORD *)(v40 + 4) = sub_1003A4190(v42, v43, &v106);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v40 + 12) = 2048;
        *(_QWORD *)(v40 + 14) = 228;
        *(_WORD *)(v40 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v45 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v45;
        v46._countAndFlagsBits = 0xD00000000000001DLL;
        v46._object = (void *)0x800000010048B7D0;
        String.append(_:)(v46);
        v47 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v90, v0 + 280, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v48 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v40 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v48, &v106);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed assertion at %s:%lu: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v104, v39);
      }
      else
      {

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v101);
    }
    v64 = *(_QWORD *)(v0 + 840);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 568);
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v69;
    v69(v66, v65, v67);
    v70 = objc_msgSend(*(id *)(v68 + v64), "fastSyncPaperKitEnablePCSEncryption");
    if ((v70 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v70);
      v71 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v71;
      *v71 = v0;
      v71[1] = sub_100382B08;
      v61 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 568);
      v74 = *(_QWORD *)(v0 + 560);
      v75 = *(_QWORD *)(v0 + 544);
      v76 = *(_QWORD *)(v0 + 536);
      v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      *(_QWORD *)(v0 + 976) = v77;
      v77(v73, v76);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v72, v76);
      GroupSessionMessenger.MessageContext.source.getter(v78);
      v79 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v79;
      *v79 = v0;
      v79[1] = sub_100382B90;
      v61 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v61, 3);
  }
}

uint64_t sub_100386468(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v3[52] = a2;
  v3[53] = v2;
  v3[51] = a1;
  v4 = sub_100012E18((uint64_t *)&unk_1005DB330);
  v3[54] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[55] = v5;
  v3[56] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v3[57] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[58] = v7;
  v3[59] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005D6C48);
  v3[60] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[61] = v9;
  v3[62] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005D6E60);
  v3[63] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[64] = swift_task_alloc(v11);
  v3[65] = swift_task_alloc(v11);
  v3[66] = swift_task_alloc(v11);
  v12 = type metadata accessor for FastSync.PaperKitMessage(0);
  v3[67] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[68] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[69] = swift_task_alloc(v14);
  v3[70] = swift_task_alloc(v14);
  v3[71] = swift_task_alloc(v14);
  v3[72] = swift_task_alloc(v14);
  v15 = sub_100012E18(&qword_1005DB340);
  v3[73] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[74] = v16;
  v3[75] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for FastSync.SelectionMessage(0);
  v3[76] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[77] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[78] = swift_task_alloc(v19);
  v3[79] = swift_task_alloc(v19);
  v3[80] = swift_task_alloc(v19);
  v3[81] = swift_task_alloc(v19);
  v20 = type metadata accessor for Participant(0);
  v3[82] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[83] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[84] = swift_task_alloc(v22);
  v3[85] = swift_task_alloc(v22);
  v3[86] = swift_task_alloc(v22);
  v3[87] = swift_task_alloc(v22);
  v23 = type metadata accessor for FastSync.NoteContentMessage(0);
  v3[88] = v23;
  v24 = *(_QWORD *)(v23 - 8);
  v3[89] = v24;
  v25 = (*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[90] = swift_task_alloc(v25);
  v3[91] = swift_task_alloc(v25);
  v26 = sub_100012E18(&qword_1005DB348);
  v3[92] = v26;
  v27 = (*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[93] = swift_task_alloc(v27);
  v3[94] = swift_task_alloc(v27);
  v28 = sub_100012E18((uint64_t *)&unk_1005DB1F0);
  v3[95] = v28;
  v29 = *(_QWORD *)(v28 - 8);
  v3[96] = v29;
  v30 = (*(_QWORD *)(v29 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[97] = swift_task_alloc(v30);
  v3[98] = swift_task_alloc(v30);
  v31 = type metadata accessor for FastSync.MessageVersion(0);
  v3[99] = v31;
  v32 = *(_QWORD *)(v31 - 8);
  v3[100] = v32;
  v33 = (*(_QWORD *)(v32 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[101] = swift_task_alloc(v33);
  v3[102] = swift_task_alloc(v33);
  return swift_task_switch(sub_100386768, 0, 0);
}

uint64_t sub_100386768()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, _QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  os_log_type_t v68;
  NSObject *v69;
  os_log_type_t v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  Swift::String v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  id v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void (*v136)(uint64_t, uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v1 = *(_QWORD *)(v0 + 816);
  v2 = *(_QWORD *)(v0 + 808);
  v3 = *(_QWORD *)(v0 + 800);
  v4 = *(_QWORD *)(v0 + 792);
  v5 = FastSync.MessageContainer.version.getter(*(_QWORD *)(v0 + 760));
  static FastSync.MessageVersion.current.getter(v5);
  v6 = sub_100019C6C(&qword_1005DB350, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.MessageVersion, (uint64_t)&protocol conformance descriptor for FastSync.MessageVersion);
  v7 = dispatch thunk of static Comparable.< infix(_:_:)(v2, v1, v4, v6);
  v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v8(v2, v4);
  v8(v1, v4);
  if ((v7 & 1) != 0)
  {
    if (qword_1005CED60 != -1)
      goto LABEL_33;
    goto LABEL_3;
  }
  v25 = *(_QWORD *)(v0 + 760);
  v26 = *(_QWORD *)(v0 + 752);
  v27 = *(_QWORD *)(v0 + 744);
  v28 = *(_QWORD *)(v0 + 736);
  v29 = *(_QWORD *)(v0 + 408);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 768) + 16);
  *(_QWORD *)(v0 + 824) = v30;
  v30(v27, v29, v25);
  v31 = sub_100016638(&qword_1005DB358, (uint64_t *)&unk_1005DB1F0, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  *(_QWORD *)(v0 + 832) = v31;
  dispatch thunk of Collection.startIndex.getter(v25, v31);
  *(_QWORD *)(v27 + *(int *)(v28 + 36)) = *(_QWORD *)(v0 + 344);
  sub_10014BD1C(v27, v26, &qword_1005DB348);
  v32 = *(int *)(v28 + 36);
  *(_DWORD *)(v0 + 60) = v32;
  *(_QWORD *)(v0 + 840) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration;
  *(_QWORD *)(v0 + 848) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitInbox;
  *(_QWORD *)(v0 + 856) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  *(_QWORD *)(v0 + 864) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_selectionMessages;
  *(_QWORD *)(v0 + 872) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudKitRecords;
  v33 = *(_QWORD *)(v26 + v32);
  dispatch thunk of Collection.endIndex.getter(v25);
  if (v33 == *(_QWORD *)(v0 + 376))
  {
LABEL_6:
    sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
    goto LABEL_9;
  }
  v130 = v0 + 16;
  v134 = v0 + 112;
  v125 = v0 + 248;
  v127 = (__int128 *)(v0 + 160);
  v121 = (_QWORD *)(v0 + 352);
  v123 = (_QWORD *)(v0 + 208);
  v119 = v0 + 64;
  while (1)
  {
    v45 = *(_QWORD *)(v0 + 832);
    v46 = *(_QWORD *)(v0 + 776);
    v136 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
    v138 = *(_QWORD *)(v0 + 768);
    v47 = *(_QWORD *)(v0 + 760);
    v48 = *(_QWORD *)(v0 + 752);
    v49 = v48 + *(int *)(v0 + 60);
    v8 = (void (*)(uint64_t, uint64_t))(v0 + 248);
    v50 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v125, v49, v47, v45);
    sub_100012CE8(v51, v130, &qword_1005DB360);
    v50(v125, 0);
    v136(v46, v48, v47);
    dispatch thunk of Collection.formIndex(after:)(v49, v47, v45);
    (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v46, v47);
    sub_10014BD1C(v130, v134, &qword_1005DB360);
    sub_100012CE8(v134, (uint64_t)v127, &qword_1005DB360);
    if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      break;
    v62 = *(_QWORD *)(v0 + 728);
    v63 = *(_QWORD *)(v0 + 704);
    sub_10013B100(v127, (uint64_t)v123);
    v64 = sub_100012E18(&qword_1005DB368);
    if ((swift_dynamicCast(v62, v123, v64, v63, 0) & 1) != 0)
    {
      v90 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
      GroupSessionMessenger.MessageContext.source.getter(v90);
      v91 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 880) = v91;
      *v91 = v0;
      v91[1] = sub_1003873CC;
      v92 = *(_QWORD *)(v0 + 696);
      return sub_10038EFCC(v92, 3);
    }
    if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v123, v64, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
    {
      v93 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
      GroupSessionMessenger.MessageContext.source.getter(v93);
      v94 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 936) = v94;
      *v94 = v0;
      v94[1] = sub_100389454;
      return sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
    }
    if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v123, v64, *(_QWORD *)(v0 + 536), 0))
    {
      v95 = *(_QWORD *)(v0 + 840);
      v96 = *(_QWORD *)(v0 + 576);
      v97 = *(_QWORD *)(v0 + 568);
      v98 = *(_QWORD *)(v0 + 536);
      v99 = *(_QWORD *)(v0 + 424);
      v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
      *(_QWORD *)(v0 + 952) = v100;
      v100(v97, v96, v98);
      v101 = objc_msgSend(*(id *)(v99 + v95), "fastSyncPaperKitEnablePCSEncryption");
      if ((v101 & 1) != 0)
      {
        GroupSessionMessenger.MessageContext.source.getter(v101);
        v102 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 960) = v102;
        *v102 = v0;
        v102[1] = sub_10038A9B4;
        v92 = *(_QWORD *)(v0 + 680);
      }
      else
      {
        v103 = *(_QWORD *)(v0 + 576);
        v104 = *(_QWORD *)(v0 + 568);
        v105 = *(_QWORD *)(v0 + 560);
        v106 = *(_QWORD *)(v0 + 544);
        v107 = *(_QWORD *)(v0 + 536);
        v108 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
        *(_QWORD *)(v0 + 976) = v108;
        v108(v104, v107);
        v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v105, v103, v107);
        GroupSessionMessenger.MessageContext.source.getter(v109);
        v110 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 984) = v110;
        *v110 = v0;
        v110[1] = sub_10038AA3C;
        v92 = *(_QWORD *)(v0 + 672);
      }
      return sub_10038EFCC(v92, 3);
    }
    v65 = sub_100012CE8(v134, v119, &qword_1005DB360);
    v66 = static Logger.realtimeCollaboration.getter(v65);
    v67 = static os_log_type_t.fault.getter(v66);
    v68 = v67;
    v69 = Logger.logObject.getter(v67);
    v70 = v68;
    v71 = os_log_type_enabled(v69, v68);
    v73 = *(_QWORD *)(v0 + 464);
    v72 = *(_QWORD *)(v0 + 472);
    v74 = *(_QWORD *)(v0 + 456);
    if (v71)
    {
      v75 = swift_slowAlloc(32, -1);
      v76 = swift_slowAlloc(64, -1);
      v139 = v76;
      *(_DWORD *)v75 = 136315650;
      v77 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v79 = v78;
      *(_QWORD *)(v75 + 4) = sub_1003A4190(v77, v78, &v139);
      swift_bridgeObjectRelease(v79);
      *(_WORD *)(v75 + 12) = 2048;
      *(_QWORD *)(v75 + 14) = 228;
      *(_WORD *)(v75 + 22) = 2080;
      *(_QWORD *)(v0 + 328) = 0;
      *(_QWORD *)(v0 + 336) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v80 = *(_QWORD *)(v0 + 336);
      *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
      *(_QWORD *)(v0 + 288) = v80;
      v81._countAndFlagsBits = 0xD00000000000001DLL;
      v81._object = (void *)0x800000010048B7D0;
      String.append(_:)(v81);
      v82 = sub_100012E18(&qword_1005DB360);
      _print_unlocked<A, B>(_:_:)(v119, v0 + 280, v82, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v83 = *(_QWORD *)(v0 + 288);
      *(_QWORD *)(v75 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v83, &v139);
      swift_bridgeObjectRelease(v83);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Failed assertion at %s:%lu: %s", (uint8_t *)v75, 0x20u);
      swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);
    }

    sub_100012DDC(v119, &qword_1005DB360);
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
    sub_100012DDC(v134, &qword_1005DB360);
    sub_1000153C0(v123);
LABEL_12:
    v44 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
    dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
    if (v44 == *(_QWORD *)(v0 + 376))
      goto LABEL_6;
  }
  v52 = *(_QWORD *)v127;
  *v121 = *(_QWORD *)v127;
  v53 = sub_100012E18(&qword_1005D7A90);
  swift_willThrowTypedImpl(v121, v53, &protocol self-conformance witness table for Error);
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v52);
  v54 = swift_errorRetain(v52);
  v55 = Logger.logObject.getter(v54);
  v57 = static os_log_type_t.error.getter(v55, v56);
  if (os_log_type_enabled(v55, v57))
  {
    v58 = swift_slowAlloc(12, -1);
    v59 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v58 = 138412290;
    swift_errorRetain(v52);
    v60 = _swift_stdlib_bridgeErrorToNSError(v52);
    *(_QWORD *)(v58 + 4) = v60;
    *v59 = v60;
    swift_errorRelease(v52);
    swift_errorRelease(v52);
    _os_log_impl((void *)&_mh_execute_header, v55, v57, "Error processing incoming fast sync message: %@", (uint8_t *)v58, 0xCu);
    v61 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v59, 1, v61);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    swift_errorRelease(v52);
    swift_errorRelease(v52);
  }
  v84 = *(_QWORD *)(v0 + 856);
  v85 = *(_QWORD *)(v0 + 424);

  v86 = *(_QWORD *)(v85 + v84);
  os_unfair_lock_lock((os_unfair_lock_t)(v86 + 24));
  v87 = *(_QWORD *)(v86 + 16);
  v88 = __OFADD__(v87, 1);
  v89 = v87 + 1;
  if (!v88)
  {
    *(_QWORD *)(v86 + 16) = v89;
    os_unfair_lock_unlock((os_unfair_lock_t)(v86 + 24));
    swift_errorRelease(v52);
    sub_100012DDC(v134, &qword_1005DB360);
    goto LABEL_12;
  }
  __break(1u);
LABEL_33:
  swift_once(&qword_1005CED60, sub_10037B8C0);
LABEL_3:
  v9 = *(_QWORD *)(v0 + 784);
  v10 = *(_QWORD *)(v0 + 768);
  v11 = *(_QWORD *)(v0 + 760);
  v12 = *(_QWORD *)(v0 + 408);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = *(_QWORD *)(v0 + 816);
    v17 = *(_QWORD *)(v0 + 792);
    v18 = *(_QWORD *)(v0 + 784);
    v128 = *(_QWORD *)(v0 + 768);
    v19 = *(_QWORD *)(v0 + 760);
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v132 = swift_slowAlloc(32, -1);
    v139 = v132;
    *(_DWORD *)v20 = 136315138;
    FastSync.MessageContainer.version.getter(v19);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v18, v19);
    v21 = sub_100019C6C(&qword_1005DB388, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.MessageVersion, (uint64_t)&protocol conformance descriptor for FastSync.MessageVersion);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v17, v21);
    v24 = v23;
    v8(v16, v17);
    *(_QWORD *)(v0 + 400) = sub_1003A4190(v22, v24, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v20 + 4);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Skipping unsupported message container with version: %s", v20, 0xCu);
    swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v132, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 768) + 8))(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 760));
  }

LABEL_9:
  v34 = *(_QWORD *)(v0 + 808);
  v35 = *(_QWORD *)(v0 + 784);
  v36 = *(_QWORD *)(v0 + 776);
  v37 = *(_QWORD *)(v0 + 752);
  v38 = *(_QWORD *)(v0 + 744);
  v39 = *(_QWORD *)(v0 + 728);
  v40 = *(_QWORD *)(v0 + 720);
  v41 = *(_QWORD *)(v0 + 696);
  v42 = *(_QWORD *)(v0 + 688);
  v111 = *(_QWORD *)(v0 + 680);
  v112 = *(_QWORD *)(v0 + 672);
  v113 = *(_QWORD *)(v0 + 648);
  v114 = *(_QWORD *)(v0 + 640);
  v115 = *(_QWORD *)(v0 + 632);
  v116 = *(_QWORD *)(v0 + 624);
  v117 = *(_QWORD *)(v0 + 600);
  v118 = *(_QWORD *)(v0 + 576);
  v120 = *(_QWORD *)(v0 + 568);
  v122 = *(_QWORD *)(v0 + 560);
  v124 = *(_QWORD *)(v0 + 552);
  v126 = *(_QWORD *)(v0 + 528);
  v129 = *(_QWORD *)(v0 + 520);
  v131 = *(_QWORD *)(v0 + 512);
  v133 = *(_QWORD *)(v0 + 496);
  v135 = *(_QWORD *)(v0 + 472);
  v137 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 816));
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  swift_task_dealloc(v133);
  swift_task_dealloc(v135);
  swift_task_dealloc(v137);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

