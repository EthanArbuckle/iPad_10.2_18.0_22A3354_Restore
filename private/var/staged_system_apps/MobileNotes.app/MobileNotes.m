uint64_t sub_100004F84(uint64_t a1, char a2, uint64_t (*a3)(), uint64_t a4)
{
  char *v4;
  char *v6;
  void *Strong;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  NSObject *v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void **aBlock;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  void *v28;
  uint64_t (*v29)();
  uint64_t v30;

  v6 = &v4[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_delegate];
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v4[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_delegate]);
  if (Strong)
  {
    v8 = Strong;
    objc_msgSend(Strong, "willAdoptModelForSelectionStateController:isNavigating:", v4, 0);
    swift_unknownObjectRelease(v8, v9);
  }
  v10 = *(void **)&v4[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateAccessQueue];
  v11 = swift_allocObject(&unk_100563820, 24, 7);
  *(_QWORD *)(v11 + 16) = v4;
  v12 = swift_allocObject(&unk_100563848, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_1000176B4;
  *(_QWORD *)(v12 + 24) = v11;
  v29 = sub_100194900;
  v30 = v12;
  aBlock = _NSConcreteStackBlock;
  v26 = 1107296256;
  v27 = sub_100016618;
  v28 = &unk_100563860;
  v13 = _Block_copy(&aBlock);
  v14 = v30;
  v15 = v10;
  v16 = v4;
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v15, v13);

  _Block_release(v13);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v12, "", 113, 245, 40, 1);
  result = swift_release(v12);
  if ((v14 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v18 = swift_unknownObjectWeakLoadStrong(v6);
    if (v18)
    {
      v19 = (void *)v18;
      if (a3)
      {
        v29 = a3;
        v30 = a4;
        aBlock = _NSConcreteStackBlock;
        v26 = 1107296256;
        v27 = sub_100206734;
        v28 = &unk_100563888;
        a3 = (uint64_t (*)())_Block_copy(&aBlock);
        v20 = v30;
        swift_retain(a4);
        swift_release(v20);
      }
      objc_msgSend(v19, "selectionStateController:didAdoptModelFromArchive:systemPaperAlert:completion:", v16, a1, a2 & 1, a3);
      swift_unknownObjectRelease(v19, v21);
      _Block_release(a3);
    }
    return swift_release(v11);
  }
  return result;
}

void sub_100005684(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v27[16];
  _QWORD *v28;
  _QWORD v29[9];
  char v30;
  uint64_t v31;
  _BYTE v32[32];
  void *v33;

  v5 = a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue, v32, 0, 0);
  v7 = *(void **)v5;
  v6 = *(_QWORD *)(v5 + 8);
  v8 = *(void **)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 40);
  v13 = *(_QWORD *)(v5 + 48);
  v12 = *(_QWORD *)(v5 + 56);
  v14 = *(_QWORD *)(v5 + 64);
  v15 = *(_BYTE *)(v5 + 72);
  v16 = *(_QWORD *)(v5 + 80);
  v29[0] = v7;
  v29[1] = v6;
  v29[2] = v8;
  v29[3] = v9;
  v29[4] = v10;
  v29[5] = v11;
  v29[6] = v13;
  v29[7] = v12;
  v29[8] = v14;
  v30 = v15;
  v31 = v16;
  v28 = v29;
  v17 = v8;
  v18 = v7;
  sub_100166B74(v9, v10);
  sub_100166B74(v11, v13);
  v19 = type metadata accessor for ICSelectionStateModel(0);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v16);
  OS_dispatch_queue.sync<A>(execute:)(&v33, a2, v27, v19);

  sub_100012C50(v9, v10);
  sub_100012C50(v11, v13);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v12);
  v20 = v33;
  v21 = sub_100018628();

  if (v21)
  {
    v22 = objc_opt_self(*a3);
    v23 = swift_dynamicCastObjCClass(v21, v22);
    if (v23)
    {
      *a4 = v23;
    }
    else
    {
      swift_unknownObjectRelease(v21, v24);
      *a4 = 0;
    }
  }
  else
  {
    *a4 = 0;
  }
}

uint64_t sub_100005814(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  NSObject *v19;
  id v20;
  uint64_t v21;
  uint64_t result;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  dispatch_block_t block;
  dispatch_block_t blocka;
  _QWORD aBlock[5];
  uint64_t v30;
  char v31;
  char v32[24];

  v1 = a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue, v32, 0, 0);
  v2 = *(void **)v1;
  block = *(dispatch_block_t *)(v1 + 8);
  v4 = *(void **)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(_QWORD *)(v1 + 40);
  v23 = *(void **)v1;
  v24 = v6;
  v8 = *(_QWORD *)(v1 + 48);
  v7 = *(_QWORD *)(v1 + 56);
  v25 = v8;
  v9 = *(_QWORD *)(v1 + 64);
  v10 = *(_BYTE *)(v1 + 72);
  v11 = *(_QWORD *)(v1 + 80);
  v31 = v10;
  v12 = swift_allocObject(&unk_1005638C0, 104, 7);
  *(_QWORD *)(v12 + 16) = v2;
  *(_QWORD *)(v12 + 24) = block;
  *(_QWORD *)(v12 + 32) = v4;
  *(_QWORD *)(v12 + 40) = v3;
  v13 = v4;
  *(_QWORD *)(v12 + 48) = v5;
  *(_QWORD *)(v12 + 56) = v6;
  *(_QWORD *)(v12 + 64) = v8;
  *(_QWORD *)(v12 + 72) = v7;
  *(_QWORD *)(v12 + 80) = v9;
  *(_BYTE *)(v12 + 88) = v31;
  *(_QWORD *)(v12 + 96) = v11;
  v14 = v11;
  v15 = swift_allocObject(&unk_1005638E8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_1000194AC;
  *(_QWORD *)(v15 + 24) = v12;
  aBlock[4] = sub_100194900;
  v30 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016618;
  aBlock[3] = &unk_100563900;
  v16 = _Block_copy(aBlock);
  v26 = v30;
  blocka = v16;
  v17 = v13;
  v18 = v23;
  sub_100166B74(v3, v5);
  sub_100166B74(v24, v8);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v14);
  v19 = v18;
  v20 = v17;
  sub_100166B74(v3, v5);
  sub_100166B74(v24, v8);
  swift_bridgeObjectRetain(v7);
  v21 = v14;
  swift_bridgeObjectRetain(v14);
  swift_retain(v15);
  swift_release(v26);
  dispatch_sync(v19, blocka);
  _Block_release(blocka);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v15, "", 112, 786, 26, 1);

  swift_release(v12);
  swift_release(v15);
  sub_100012C50(v3, v5);
  sub_100012C50(v24, v25);
  swift_bridgeObjectRelease(v21);
  result = swift_bridgeObjectRelease(v7);
  if ((v14 & 1) != 0)
    __break(1u);
  return result;
}

void sub_100005A68(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  char v25[16];
  _QWORD *v26;
  _QWORD v27[9];
  char v28;
  uint64_t v29;
  char v30[32];
  char *v31;

  v5 = a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue, v30, 0, 0);
  v7 = *(void **)v5;
  v6 = *(_QWORD *)(v5 + 8);
  v8 = *(void **)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 40);
  v13 = *(_QWORD *)(v5 + 48);
  v12 = *(_QWORD *)(v5 + 56);
  v14 = *(_QWORD *)(v5 + 64);
  v15 = *(_BYTE *)(v5 + 72);
  v16 = *(_QWORD *)(v5 + 80);
  v27[0] = v7;
  v27[1] = v6;
  v27[2] = v8;
  v27[3] = v9;
  v27[4] = v10;
  v27[5] = v11;
  v27[6] = v13;
  v27[7] = v12;
  v27[8] = v14;
  v28 = v15;
  v29 = v16;
  v26 = v27;
  v17 = v8;
  v18 = v7;
  sub_100166B74(v9, v10);
  sub_100166B74(v11, v13);
  v19 = type metadata accessor for ICSelectionStateModel(0);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v16);
  OS_dispatch_queue.sync<A>(execute:)(&v31, a2, v25, v19);

  sub_100012C50(v9, v10);
  sub_100012C50(v11, v13);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v12);
  v20 = v31;
  v21 = *(void **)&v31[*a3];
  *a4 = v21;
  v22 = v21;

}

_QWORD *sub_1000063EC(uint64_t a1, void *a2)
{
  id v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD v22[4];
  id v23;

  v3 = a2;
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = WeakRetained;
  if (WeakRetained)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "legacyViewContext"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ic_existingObjectWithID:", v3));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "accountIdentifier"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "modernViewContext"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount accountWithIdentifier:context:](ICAccount, "accountWithIdentifier:context:", v9, v10));

    v13 = objc_opt_class(NoteAccountObject, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[ICMigrationController legacyAccountForPrimaryICloudAccount](ICMigrationController, "legacyAccountForPrimaryICloudAccount"));
    v15 = ICCheckedDynamicCast(v13, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "accountIdentifier"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "accountIdentifier"));
    v19 = objc_msgSend(v17, "isEqualToString:", v18);

    if (v19 && (objc_msgSend(v11, "didChooseToMigrate") & 1) == 0)
    {
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      v22[2] = sub_10004B3C0;
      v22[3] = &unk_100550D58;
      objc_copyWeak(&v23, v4);
      v20 = objc_retainBlock(v22);
      objc_destroyWeak(&v23);
    }
    else
    {
      v20 = 0;
    }

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

Swift::Int sub_100006988(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    result = swift_retain(v4);
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v12)
          goto LABEL_36;
        v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_36;
          v20 = v9[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_36;
            v20 = v9[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v12)
                    goto LABEL_36;
                  v20 = v9[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

id sub_100006C74()
{
  id v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  UIAccessibilityTraits v7;
  id v8;
  unint64_t v9;
  UIAccessibilityTraits v10;

  v0 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
  objc_msgSend(v0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  v5 = v4;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v0, "setText:", v6);

  objc_msgSend(v0, "setAdjustsFontForContentSizeCategory:", 1);
  v7 = UIAccessibilityTraitHeader;
  v8 = v0;
  v9 = (unint64_t)objc_msgSend(v8, "accessibilityTraits");
  if ((v7 & ~v9) != 0)
    v10 = v7;
  else
    v10 = 0;
  objc_msgSend(v8, "setAccessibilityTraits:", v10 | v9);

  return v8;
}

id sub_100006FF8()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___closeButton;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___closeButton];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___closeButton];
  }
  else
  {
    v4 = sub_10012D80C(v0);
    v5 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_100007538(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;

  v2 = ICAccessibilityAccessibilityLargerTextSizesEnabled();
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "updateTextAndStatus");
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "configurationState"));
    objc_msgSend(v3, "updateAccessoriesUsingState:", v4);

  }
}

void sub_100007800(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 72));
  _Unwind_Resume(a1);
}

uint64_t sub_10000782C(void *a1, uint64_t a2)
{
  void *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;

  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100127F34((uint64_t)_swiftEmptyArrayStorage);
    v4 = v11;
  }
  else
  {
    v4 = &_swiftEmptySetSingleton;
  }
  v13 = v4;
  result = sub_10000A89C(a2);
  v6 = result;
  if (!((unint64_t)result >> 62))
  {
    v7 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_5;
LABEL_17:
    swift_bridgeObjectRelease(v6);
    return (uint64_t)v4;
  }
  if (result >= 0)
    result &= 0xFFFFFFFFFFFFFF8uLL;
  result = _CocoaArrayWrapper.endIndex.getter(result);
  v7 = result;
  if (!result)
    goto LABEL_17;
LABEL_5:
  if (v7 >= 1)
  {
    v8 = 0;
    do
    {
      if ((v6 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
      else
        v9 = *(id *)(v6 + 8 * v8 + 32);
      ++v8;
      v10 = v9;
      sub_1000165BC((Swift::Int *)&v12, v10);

      objc_msgSend(a1, "addInteraction:", v10);
    }
    while (v7 != v8);
    swift_bridgeObjectRelease(v6);
    return (uint64_t)v13;
  }
  __break(1u);
  return result;
}

id sub_10000797C(uint64_t a1, char a2)
{
  _BYTE *v2;
  objc_class *ObjectType;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  objc_super v29;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_sheetController] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_preferredCompactContentWidth] = 0x4081C00000000000;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_additionalSafeAreaTopInset] = 0x4038000000000000;
  v2[OBJC_IVAR___ICActivityStreamNavigationController_isCapturingActivityStreamSummaryEvent] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_object] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_selection] = 0;
  v6 = OBJC_IVAR___ICActivityStreamNavigationController_viewModeDurations;
  *(_QWORD *)&v2[v6] = sub_10013AFA8((uint64_t)_swiftEmptyArrayStorage);
  v7 = &v2[OBJC_IVAR___ICActivityStreamNavigationController_timeOfLastViewModeChange];
  v8 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___unfilteredHeaderView] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___filteredHeaderView] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___dockedDetent] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_halfHeightRatio] = 0x400599999999999ALL;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___halfHeightDetent] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_coordinator] = a1;
  v2[OBJC_IVAR___ICActivityStreamNavigationController_hasInteractiveSizing] = a2;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamNavigationController_indexOfCurrentDetent] = -1;
  v29.receiver = v2;
  v29.super_class = ObjectType;
  *(_QWORD *)&v9 = swift_unknownObjectRetain(a1).n128_u64[0];
  v10 = objc_msgSendSuper2(&v29, "initWithNibName:bundle:", 0, 0, v9);
  v11 = (void *)objc_opt_self(UIDevice);
  v12 = v10;
  if (objc_msgSend(v11, "ic_isVision", v29.receiver, v29.super_class))
    v13 = -2;
  else
    v13 = 7;
  objc_msgSend(v12, "setModalPresentationStyle:", v13);
  v14 = objc_msgSend(v12, "popoverPresentationController");
  if (v14)
  {
    v15 = v14;
    objc_msgSend(v14, "setDelegate:", v12);

  }
  if ((objc_msgSend(v11, "ic_isVision") & 1) == 0)
  {
    v16 = objc_msgSend(objc_allocWithZone((Class)UINavigationBarAppearance), "init");
    objc_msgSend(v16, "configureWithOpaqueBackground");
    v17 = (void *)objc_opt_self(UIColor);
    v18 = v16;
    v19 = objc_msgSend(v17, "clearColor");
    objc_msgSend(v18, "setShadowColor:", v19);

    v20 = objc_msgSend(v12, "navigationBar");
    objc_msgSend(v20, "setPrefersLargeTitles:", 0);

    v21 = objc_msgSend(v12, "navigationBar");
    objc_msgSend(v21, "setStandardAppearance:", v18);

    v22 = objc_msgSend(v12, "navigationBar");
    objc_msgSend(v22, "setCompactAppearance:", v18);

  }
  sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
  v23 = static UITraitCollection.traitsAffectingSizeAndColor.getter();
  v24 = swift_allocObject(&unk_10056B428, 24, 7);
  swift_unknownObjectWeakInit(v24 + 16, v12);
  v25 = UIViewController.registerForTraitChanges<A>(_:handler:)(v23, sub_10035FC48, v24, ObjectType);

  swift_unknownObjectRelease(a1, v26);
  swift_unknownObjectRelease(v25, v27);
  swift_bridgeObjectRelease(v23);
  swift_release(v24);
  return v12;
}

void sub_1000080F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

char *sub_100009C80(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  id (*v38)();
  id (*v39)();
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v66[2];
  uint64_t v67;
  uint64_t v68;
  id v69;
  objc_class *ObjectType;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _BYTE v74[24];
  objc_super v75;
  _QWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;

  v2 = v1;
  v69 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v73 = type metadata accessor for NSNotificationCenter.Publisher(0);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v72 = (char *)v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v6 = (char *)v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_unknownObjectWeakInit(&v2[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_delegate], 0);
  v67 = OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateAccessQueue;
  v66[1] = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v13 = v2;
  static DispatchQoS.unspecified.getter(v13);
  v76 = _swiftEmptyArrayStorage;
  v14 = sub_100019C6C((unint64_t *)&qword_1005D6870, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_100012E18((uint64_t *)&unk_1005CEF40);
  v16 = sub_100016638((unint64_t *)&qword_1005D6880, (uint64_t *)&unk_1005CEF40, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v15, v16, v7, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v68);
  v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000044, 0x80000001004851E0, v12, v9, v6, 0);
  *(_QWORD *)&v2[v67] = v17;
  v18 = &v13[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue];
  sub_1000194EC(0, 0, 0, 0, (uint64_t)&v76);
  v19 = v80;
  v20 = v81;
  v21 = v82;
  v22 = v83;
  v23 = v77;
  v24 = v78;
  v25 = v79;
  *(_QWORD *)v18 = v76;
  *(_OWORD *)(v18 + 8) = v23;
  *(_OWORD *)(v18 + 24) = v24;
  *(_OWORD *)(v18 + 40) = v25;
  *((_QWORD *)v18 + 7) = v19;
  *((_QWORD *)v18 + 8) = v20;
  v18[72] = v21;
  *((_QWORD *)v18 + 10) = v22;
  *(_QWORD *)&v13[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_observers] = _swiftEmptyArrayStorage;
  static Logger.ui.getter(v26);
  v27 = &v13[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_utilityConfiguration];
  *(_OWORD *)v27 = 0u;
  *((_OWORD *)v27 + 1) = 0u;
  *((_OWORD *)v27 + 2) = 0u;
  *((_OWORD *)v27 + 3) = 0u;
  *((_OWORD *)v27 + 4) = 0u;
  v28 = v69;
  *(_QWORD *)&v13[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_persistenceConfiguration] = v69;
  v29 = v28;

  v75.receiver = v13;
  v75.super_class = ObjectType;
  v30 = objc_msgSendSuper2(&v75, "init");
  v31 = swift_allocObject(&unk_100563B40, 24, 7);
  *(_QWORD *)(v31 + 16) = v30;
  v32 = swift_allocObject(&unk_100563B68, 24, 7);
  *(_QWORD *)(v32 + 16) = v30;
  v33 = (char *)v30;
  v69 = objc_msgSend(v29, "modernBackgroundContext");
  v34 = objc_msgSend(v29, "legacyBackgroundContext");
  v35 = objc_msgSend(v29, "makeModernBackgroundContext");
  if (v35)
  {
    v36 = v35;
    v37 = swift_allocObject(&unk_100563BE0, 24, 7);
    *(_QWORD *)(v37 + 16) = v36;
    v38 = sub_10028664C;
  }
  else
  {
    v38 = 0;
    v37 = 0;
  }
  v39 = (id (*)())objc_msgSend(v29, "makeLegacyBackgroundContext");
  if (v39)
  {
    v40 = swift_allocObject(&unk_100563BB8, 24, 7);
    *(_QWORD *)(v40 + 16) = v39;
    v39 = sub_10028664C;
  }
  else
  {
    v40 = 0;
  }
  ObjectType = (objc_class *)v29;
  v41 = (uint64_t *)&v33[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_utilityConfiguration];
  swift_beginAccess(&v33[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_utilityConfiguration], &v76, 1, 0);
  v42 = *v41;
  v43 = v41[1];
  v44 = v41[2];
  v45 = v41[3];
  v46 = (void *)v41[4];
  v47 = (void *)v41[5];
  v48 = v41[6];
  v49 = v41[7];
  v50 = v41[8];
  v51 = v41[9];
  *v41 = (uint64_t)sub_1002864EC;
  v41[1] = v31;
  v41[2] = (uint64_t)sub_100286510;
  v41[3] = v32;
  v41[4] = (uint64_t)v69;
  v41[5] = (uint64_t)v34;
  v41[6] = (uint64_t)v38;
  v41[7] = v37;
  v41[8] = (uint64_t)v39;
  v41[9] = v40;
  sub_100016678(v42, v43, v44, v45, v46, v47, v48, v49, v50, v51);
  v69 = (id)objc_opt_self(NSNotificationCenter);
  v52 = objc_msgSend(v69, "defaultCenter");
  if (qword_1005CEC60 != -1)
    swift_once(&qword_1005CEC60, sub_100016408);
  v53 = v72;
  NSNotificationCenter.publisher(for:object:)(static NSNotificationName.TagCollectionViewWillRenameTag, 0);

  v54 = swift_allocObject(&unk_100563B90, 24, 7);
  swift_unknownObjectWeakInit(v54 + 16, v33);
  v55 = sub_100019C6C((unint64_t *)&qword_1005D8FC0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Publisher, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Publisher);
  v56 = v73;
  v57 = Publisher<>.sink(receiveValue:)(sub_100286558, v54, v73, v55);
  swift_release(v54);
  v58 = *(void (**)(char *, uint64_t))(v71 + 8);
  v58(v53, v56);
  v59 = &v33[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_observers];
  swift_beginAccess(&v33[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_observers], v74, 33, 0);
  v60 = sub_100012E18(&qword_1005D6890);
  v61 = sub_100016638(&qword_1005D6898, &qword_1005D6890, (uint64_t)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v59, v60, v61);
  swift_endAccess(v74);
  swift_release(v57);
  v62 = objc_msgSend(v69, "defaultCenter");
  if (qword_1005CEC68 != -1)
    swift_once(&qword_1005CEC68, sub_10001643C);
  NSNotificationCenter.publisher(for:object:)(static NSNotificationName.TagCollectionViewDidRenameTag, 0);

  v63 = swift_allocObject(&unk_100563B90, 24, 7);
  swift_unknownObjectWeakInit(v63 + 16, v33);
  v64 = Publisher<>.sink(receiveValue:)(sub_100286578, v63, v56, v55);
  swift_release(v63);
  v58(v53, v56);
  swift_beginAccess(v59, v74, 33, 0);
  AnyCancellable.store<A>(in:)(v59, v60, v61);
  swift_endAccess(v74);
  swift_release(v64);

  return v33;
}

void sub_10000A508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10000A830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10000A89C(uint64_t a1)
{
  uint64_t v2;
  objc_class *v3;
  id v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  id v44;
  unint64_t v45;
  void *v46;
  uint64_t v47;
  id v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  void *v58;
  uint64_t v59;
  id v60;
  unint64_t v61;
  void *v62;
  uint64_t v63;
  id v64;
  unint64_t v65;
  void *v66;
  uint64_t v67;
  id v68;
  unint64_t v69;
  void *v70;
  uint64_t v71;
  id v72;
  unint64_t v73;
  void *v74;
  uint64_t v75;
  id v76;
  unint64_t v77;
  id v78;
  void *v79;
  uint64_t v80;
  id v81;
  unint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v88;
  id v89;
  id v90;
  id v91;
  id v92;
  id v93;
  id v94;
  id v95;
  id v96;
  id v97;
  id v98;
  id v99;
  id v100;
  id v101;
  id v102;
  id v103;
  id v104;
  uint64_t v105;

  v2 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16, a1);
  v3 = (objc_class *)type metadata accessor for UIAppIntentInteraction(0);
  v4 = objc_allocWithZone(v3);
  v5 = sub_1001855C8();
  v6 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for ApplyFormattingIntent, &unk_1005D2000, v2, &type metadata for ApplyFormattingIntent, v5);
  v7 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v7 + 16, a1);
  v8 = objc_allocWithZone(v3);
  v9 = sub_10001737C();
  v94 = v6;
  v10 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for ChangeFolderViewSettingIntent, &unk_1005D2018, v7, &type metadata for ChangeFolderViewSettingIntent, v9);
  v11 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, a1);
  v12 = objc_allocWithZone(v3);
  v13 = sub_100019748();
  v93 = v10;
  v14 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for DeleteTagsIntent, &unk_1005D2030, v11, &type metadata for DeleteTagsIntent, v13);
  v15 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, a1);
  v16 = objc_allocWithZone(v3);
  v17 = sub_100175250();
  v92 = v14;
  v18 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for LockNoteIntent, &unk_1005D2048, v15, &type metadata for LockNoteIntent, v17);
  v19 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, a1);
  v20 = objc_allocWithZone(v3);
  v21 = sub_100019B6C();
  v91 = v18;
  v22 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for MoveNotesToFolderIntent, &unk_1005D2060, v19, &type metadata for MoveNotesToFolderIntent, v21);
  v23 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v23 + 16, a1);
  v24 = objc_allocWithZone(v3);
  v25 = sub_100019A7C();
  v104 = v22;
  v26 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenNotesViewIntent, &unk_1005D2078, v23, &type metadata for OpenNotesViewIntent, v25);
  v27 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v27 + 16, a1);
  v28 = objc_allocWithZone(v3);
  v29 = sub_100185864();
  v103 = v26;
  v30 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenTopLevelFolderIntent, &unk_1005D2090, v27, &type metadata for OpenTopLevelFolderIntent, v29);
  v31 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v31 + 16, a1);
  v32 = objc_allocWithZone(v3);
  v33 = sub_1000191E4();
  v102 = v30;
  v34 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenAccountIntent, &unk_1005D20A8, v31, &type metadata for OpenAccountIntent, v33);
  v35 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v35 + 16, a1);
  v36 = objc_allocWithZone(v3);
  v37 = sub_100185970();
  v99 = v34;
  v38 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenAttachmentIntent, &unk_1005D20C0, v35, &type metadata for OpenAttachmentIntent, v37);
  v39 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v39 + 16, a1);
  v40 = objc_allocWithZone(v3);
  v41 = sub_100185A18();
  v101 = v38;
  v42 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenChecklistItemIntent, &unk_1005D20D8, v39, &type metadata for OpenChecklistItemIntent, v41);
  v43 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v43 + 16, a1);
  v44 = objc_allocWithZone(v3);
  v45 = sub_1000192D4();
  v100 = v42;
  v46 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenFolderIntent, &unk_1005D20F0, v43, &type metadata for OpenFolderIntent, v45);
  v47 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v47 + 16, a1);
  v48 = objc_allocWithZone(v3);
  v49 = sub_100019838();
  v98 = v46;
  v50 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenNoteIntent, &unk_1005D2108, v47, &type metadata for OpenNoteIntent, v49);
  v51 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v51 + 16, a1);
  v52 = objc_allocWithZone(v3);
  v53 = sub_100185B88();
  v97 = v50;
  v54 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenTableIntent, &unk_1005D2120, v51, &type metadata for OpenTableIntent, v53);
  v55 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v55 + 16, a1);
  v56 = objc_allocWithZone(v3);
  v57 = sub_100019928();
  v96 = v54;
  v58 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for OpenTagIntent, &unk_1005D2138, v55, &type metadata for OpenTagIntent, v57);
  v59 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v59 + 16, a1);
  v60 = objc_allocWithZone(v3);
  v61 = sub_100185C94();
  v95 = v58;
  v62 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for ChangeTagSelectionIntent, &unk_1005D2150, v59, &type metadata for ChangeTagSelectionIntent, v61);
  v63 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v63 + 16, a1);
  v64 = objc_allocWithZone(v3);
  v65 = sub_100185D3C();
  v90 = v62;
  v66 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for RemoveLockFromNoteIntent, &unk_1005D2168, v63, &type metadata for RemoveLockFromNoteIntent, v65);
  v67 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v67 + 16, a1);
  v68 = objc_allocWithZone(v3);
  v69 = sub_100185DE4();
  v89 = v66;
  v70 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for ScanDocumentIntent, &unk_1005D2180, v67, &type metadata for ScanDocumentIntent, v69);
  v71 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v71 + 16, a1);
  v72 = objc_allocWithZone(v3);
  v73 = sub_100168B40();
  v88 = v70;
  v74 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for ShowNotesAppSearchResultsIntent, &unk_1005D2198, v71, &type metadata for ShowNotesAppSearchResultsIntent, v73);
  v75 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v75 + 16, a1);
  v76 = objc_allocWithZone(v3);
  v77 = sub_100179F54();
  v78 = v74;
  v79 = (void *)UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for StartRecordingIntent, &unk_1005D21B0, v75, &type metadata for StartRecordingIntent, v77);
  v80 = swift_allocObject(&unk_10055BBE8, 24, 7);
  swift_unknownObjectWeakInit(v80 + 16, a1);
  v81 = objc_allocWithZone(v3);
  v82 = sub_100185F54();
  v83 = v79;
  v84 = UIAppIntentInteraction.init<A>(intent:perform:)(&type metadata for TakePhotoIntent, &unk_1005D21C8, v80, &type metadata for TakePhotoIntent, v82);
  v85 = sub_100012E18(&qword_1005CF6F0);
  v86 = swift_allocObject(v85, 192, 7);
  *(_OWORD *)(v86 + 16) = xmmword_100457820;
  *(_QWORD *)(v86 + 32) = v94;
  *(_QWORD *)(v86 + 40) = v93;
  *(_QWORD *)(v86 + 48) = v92;
  *(_QWORD *)(v86 + 56) = v91;
  *(_QWORD *)(v86 + 64) = v104;
  *(_QWORD *)(v86 + 72) = v103;
  *(_QWORD *)(v86 + 80) = v102;
  *(_QWORD *)(v86 + 88) = v99;
  *(_QWORD *)(v86 + 96) = v101;
  *(_QWORD *)(v86 + 104) = v100;
  *(_QWORD *)(v86 + 112) = v98;
  *(_QWORD *)(v86 + 120) = v97;
  *(_QWORD *)(v86 + 128) = v96;
  *(_QWORD *)(v86 + 136) = v95;
  *(_QWORD *)(v86 + 144) = v90;
  *(_QWORD *)(v86 + 152) = v89;
  *(_QWORD *)(v86 + 160) = v88;
  *(_QWORD *)(v86 + 168) = v78;
  *(_QWORD *)(v86 + 176) = v83;
  *(_QWORD *)(v86 + 184) = v84;
  v105 = v86;
  specialized Array._endMutation()(v86);

  return v105;
}

void sub_10000B73C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 128));
  _Unwind_Resume(a1);
}

id sub_10000B774(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "snapshot"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionIdentifiers"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", a2));

    if (objc_msgSend(v7, "hasGroupInset"))
      v12 = 2;
    else
      v12 = 3;
    v13 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSectionConfiguration), "initWithAppearanceStyle:layoutEnvironment:", v12, v5);
    v14 = objc_opt_class(ICFolderListSectionIdentifier);
    v15 = ICDynamicCast(v14, v11);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    objc_msgSend(v13, "setStylesFirstItemAsHeader:", objc_msgSend(v16, "hasHeader"));
    if (objc_msgSend(v16, "sectionType") == (id)8)
    {
      objc_msgSend(v13, "setSeparatorStyle:", 0);
    }
    else
    {
      objc_msgSend(v13, "setSeparatorStyle:", objc_msgSend(v7, "hasGroupInset"));
      if (objc_msgSend(*(id *)(a1 + 32), "hasSwipeActions"))
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "leadingSwipeActionsConfigurationProvider"));
        objc_msgSend(v13, "setLeadingSwipeActionsConfigurationProvider:", v18);

        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "trailingSwipeActionsConfigurationProvider"));
        objc_msgSend(v13, "setTrailingSwipeActionsConfigurationProvider:", v19);

      }
    }
    v17 = objc_msgSend(objc_alloc((Class)_UICollectionViewListLayoutSection), "initWithConfiguration:layoutEnvironment:", v13, v5);
    if (+[UIDevice ic_isVision](UIDevice, "ic_isVision")
      && (objc_msgSend(v7, "shouldShowMoveHeader") & 1) == 0)
    {
      objc_msgSend(v17, "contentInsets");
      objc_msgSend(v17, "setContentInsets:");
    }

  }
  else
  {
    v17 = 0;
  }

  return v17;
}

ICViewControllerManager *__cdecl sub_10000C39C(id a1, UIWindow *a2)
{
  UIWindow *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  v2 = a2;
  v4 = objc_opt_class(ICWindow, v3);
  v5 = ICDynamicCast(v4, v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "screen"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "displayIdentity"));
    if ((objc_msgSend(v8, "expectsSecureRendering") & 1) != 0)
      v9 = 0;
    else
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "viewControllerManager"));

  }
  else
  {
    v9 = 0;
  }

  return (ICViewControllerManager *)v9;
}

void sub_10000D0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id *location, id *a14)
{
  id *v14;
  id *v15;
  uint64_t v16;

  objc_destroyWeak(v14);
  objc_destroyWeak(v15);
  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak((id *)(v16 - 112));
  _Unwind_Resume(a1);
}

void sub_10000D7E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_10000D910(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = objc_msgSend(a2, "mutableCopy");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UITraitCollection traitCollectionWithPreferredContentSizeCategory:](UITraitCollection, "traitCollectionWithPreferredContentSizeCategory:", UIContentSizeCategoryMedium));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIFont preferredFontForTextStyle:compatibleWithTraitCollection:](UIFont, "preferredFontForTextStyle:compatibleWithTraitCollection:", *(_QWORD *)(a1 + 32), v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_fontWithSingleLineA"));

  objc_msgSend(v3, "setObject:forKeyedSubscript:", v6, NSFontAttributeName);
  v7 = objc_msgSend(v3, "copy");

  return v7;
}

void sub_10000DFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *a12, id *location, id *a14, id *a15, id *a16, id *a17, id *a18)
{
  uint64_t v18;

  objc_destroyWeak(location);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a16);
  objc_destroyWeak(a17);
  objc_destroyWeak(a18);
  objc_destroyWeak((id *)(v18 - 120));
  objc_destroyWeak((id *)(v18 - 112));
  _Unwind_Resume(a1);
}

void sub_10000E0AC()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  Class isa;
  id v33;
  void *v34;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  id v46;
  void *v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  char *v61;
  id v62;
  id v63;
  uint64_t v64;
  Class v65;
  id v66;
  id v67;
  char *v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  id v73;
  char *v74;
  uint64_t v75;
  objc_super v76;

  v1 = v0;
  v76.receiver = v0;
  v76.super_class = (Class)swift_getObjectType(v0);
  objc_msgSendSuper2(&v76, "viewDidLoad");
  v2 = objc_msgSend(v0, "view");
  if (!v2)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v3 = v2;
  v4 = objc_msgSend((id)objc_opt_self(UIColor), "ICBackgroundColor");
  objc_msgSend(v3, "setBackgroundColor:", v4);

  if (objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision"))
    objc_msgSend(v1, "setAdditionalSafeAreaInsets:", 24.0, 0.0, 0.0, 0.0);
  v5 = objc_msgSend(v1, "view");
  if (!v5)
    goto LABEL_16;
  v6 = v5;
  v7 = sub_100016B1C();
  objc_msgSend(v6, "addSubview:", v7);

  v75 = sub_100012E18(&qword_1005CF6F0);
  v8 = swift_allocObject(v75, 56, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100454060;
  v9 = sub_100016B1C();
  v10 = objc_msgSend(v9, "topAnchor");

  v11 = objc_msgSend(v1, "view");
  if (!v11)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v12 = v11;
  v13 = objc_msgSend(v11, "safeAreaLayoutGuide");

  v14 = objc_msgSend(v13, "topAnchor");
  v15 = objc_msgSend(v10, "constraintEqualToAnchor:", v14);

  *(_QWORD *)(v8 + 32) = v15;
  v16 = sub_100016B1C();
  v17 = objc_msgSend(v16, "leadingAnchor");

  v18 = objc_msgSend(v1, "view");
  if (!v18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v19 = v18;
  v20 = objc_msgSend(v18, "safeAreaLayoutGuide");

  v21 = objc_msgSend(v20, "leadingAnchor");
  v22 = objc_msgSend(v17, "constraintEqualToAnchor:", v21);

  *(_QWORD *)(v8 + 40) = v22;
  v23 = sub_100016B1C();
  v24 = objc_msgSend(v23, "trailingAnchor");

  v25 = objc_msgSend(v1, "view");
  if (!v25)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v26 = v25;
  v27 = (void *)objc_opt_self(NSLayoutConstraint);
  v28 = objc_msgSend(v26, "safeAreaLayoutGuide");

  v29 = objc_msgSend(v28, "trailingAnchor");
  v30 = objc_msgSend(v24, "constraintEqualToAnchor:", v29);

  *(_QWORD *)(v8 + 48) = v30;
  specialized Array._endMutation()(v31);
  sub_1000163BC(0, (unint64_t *)&qword_1005D8F60, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v27, "activateConstraints:", isa);

  if (*((_BYTE *)v1 + OBJC_IVAR___ICActivityStreamNavigationController_hasInteractiveSizing) != 1)
  {
LABEL_14:
    v66 = sub_100016C14();
    v67 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v1, "handleTap:");
    objc_msgSend(v66, "addGestureRecognizer:", v67);

    v68 = sub_100016B1C();
    v69 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v1, "handleTap:");
    objc_msgSend(v68, "addGestureRecognizer:", v69);

    v70 = (void *)objc_opt_self(NSNotificationCenter);
    v71 = objc_msgSend(v70, "defaultCenter");
    objc_msgSend(v71, "addObserver:selector:name:object:", v1, "willEnterForeground", UIApplicationWillEnterForegroundNotification, 0);

    v72 = objc_msgSend(v70, "defaultCenter");
    objc_msgSend(v72, "addObserver:selector:name:object:", v1, "analyticsSessionWillEnd", ICNASessionWillEndNotification, 0);

    v73 = sub_100016C14();
    objc_msgSend(v73, "layoutIfNeeded");

    v74 = sub_100016B1C();
    objc_msgSend(v74, "layoutIfNeeded");

    return;
  }
  v33 = objc_msgSend(v1, "view");
  if (!v33)
    goto LABEL_20;
  v34 = v33;
  v35 = sub_100016C14();
  objc_msgSend(v34, "addSubview:", v35);

  v36 = swift_allocObject(v75, 72, 7);
  *(_OWORD *)(v36 + 16) = xmmword_100462730;
  v37 = sub_100016C14();
  v38 = objc_msgSend(v37, "topAnchor");

  v39 = objc_msgSend(v1, "view");
  if (!v39)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v40 = v39;
  v41 = objc_msgSend(v39, "safeAreaLayoutGuide");

  v42 = objc_msgSend(v41, "topAnchor");
  v43 = objc_msgSend(v38, "constraintEqualToAnchor:", v42);

  *(_QWORD *)(v36 + 32) = v43;
  v44 = sub_100016C14();
  v45 = objc_msgSend(v44, "leadingAnchor");

  v46 = objc_msgSend(v1, "view");
  if (!v46)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v47 = v46;
  v48 = objc_msgSend(v46, "safeAreaLayoutGuide");

  v49 = objc_msgSend(v48, "leadingAnchor");
  v50 = objc_msgSend(v45, "constraintEqualToAnchor:", v49);

  *(_QWORD *)(v36 + 40) = v50;
  v51 = sub_100016C14();
  v52 = objc_msgSend(v51, "trailingAnchor");

  v53 = objc_msgSend(v1, "view");
  if (v53)
  {
    v54 = v53;
    v55 = objc_msgSend(v53, "safeAreaLayoutGuide");

    v56 = objc_msgSend(v55, "trailingAnchor");
    v57 = objc_msgSend(v52, "constraintEqualToAnchor:", v56);

    *(_QWORD *)(v36 + 48) = v57;
    v58 = sub_100016C14();
    v59 = objc_msgSend(v58, "heightAnchor");

    v60 = objc_msgSend(v59, "constraintGreaterThanOrEqualToConstant:", 64.0);
    *(_QWORD *)(v36 + 56) = v60;
    v61 = sub_100016B1C();
    v62 = objc_msgSend(v61, "heightAnchor");

    v63 = objc_msgSend(v62, "constraintGreaterThanOrEqualToConstant:", 56.0);
    *(_QWORD *)(v36 + 64) = v63;
    specialized Array._endMutation()(v64);
    v65 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v36);
    objc_msgSend(v27, "activateConstraints:", v65);

    goto LABEL_14;
  }
LABEL_23:
  __break(1u);
}

void sub_10000E948(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[16];
  _QWORD *v24;
  _QWORD v25[9];
  char v26;
  uint64_t v27;
  _BYTE v28[24];
  _QWORD v29[5];
  void *v30;

  v2 = a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue, v28, 0, 0);
  v3 = *(_QWORD *)(v2 + 8);
  v5 = *(void **)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v11 = *(_QWORD *)(v2 + 64);
  v12 = *(_BYTE *)(v2 + 72);
  v13 = *(_QWORD *)(v2 + 80);
  v25[0] = *(_QWORD *)v2;
  v4 = (void *)v25[0];
  v25[1] = v3;
  v25[2] = v5;
  v25[3] = v6;
  v25[4] = v8;
  v25[5] = v7;
  v25[6] = v10;
  v25[7] = v9;
  v25[8] = v11;
  v26 = v12;
  v27 = v13;
  v24 = v25;
  v14 = v5;
  v15 = v4;
  sub_100166B74(v6, v8);
  sub_100166B74(v7, v10);
  v16 = type metadata accessor for ICSelectionStateModel(0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v13);
  OS_dispatch_queue.sync<A>(execute:)(&v30, sub_100019380, v23, v16);

  sub_100012C50(v6, v8);
  sub_100012C50(v7, v10);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v9);
  v17 = v30;
  v18 = (void *)sub_100018D60();

  if (v18)
  {
    v19 = objc_msgSend(v18, "copy");

    _bridgeAnyObjectToAny(_:)(v29, v19);
    swift_unknownObjectRelease(v19, v20);
    v21 = sub_1000163BC(0, &qword_1005D67D0, ICTagSelection_ptr);
    if ((swift_dynamicCast(a2, v29, (char *)&type metadata for Any + 8, v21, 6) & 1) == 0)
      *a2 = 0;
  }
  else
  {
    *a2 = 0;
  }
}

void sub_10000FF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id location)
{
  id *v30;

  objc_destroyWeak(v30);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100010148@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  id result;
  _OWORD v8[5];
  uint64_t v9;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_OWORD *)(v4 + 48);
  v8[2] = *(_OWORD *)(v4 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(v4 + 64);
  v9 = *(_QWORD *)(v4 + 80);
  v6 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v6;
  result = sub_1000101A0((uint64_t)v8);
  if (!v2)
    *a1 = result;
  return result;
}

id sub_1000101A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  _BYTE v6[16];
  uint64_t v7;
  char v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v5 = v2 & 0xFFFFFFFFFFFFFF8;
    else
      v5 = *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(*(_QWORD *)(a1 + 56));
    v3 = _CocoaArrayWrapper.endIndex.getter(v5);
    sub_1001948C4(&v9);
    if (!v3)
      return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ICSelectionStateModel(0)), "init");
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ICSelectionStateModel(0)), "init");
  }
  sub_10014BD1C(a1 + 64, (uint64_t)v6, &qword_1005D6790);
  result = (id)sub_10014BD1C((uint64_t)v6, (uint64_t)&v7, &qword_1005D6790);
  if ((v8 & 1) != 0)
    return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ICSelectionStateModel(0)), "init");
  if (v3 < 0)
  {
    __break(1u);
    return (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v2);
  }
  result = (id)v7;
  if (v7 < 0 || v7 >= v3)
    return objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ICSelectionStateModel(0)), "init");
  if ((v2 & 0xC000000000000001) != 0)
    return (id)specialized _ArrayBuffer._getElementSlowPath(_:)(result, v2);
  if ((unint64_t)v7 < *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    return *(id *)(v2 + 8 * v7 + 32);
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ICSelectionStateModel(uint64_t a1)
{
  return sub_100010414(a1, (uint64_t *)&unk_1005D1268, (uint64_t)&nominal type descriptor for ICSelectionStateModel);
}

id sub_1000102E8()
{
  _BYTE *v0;
  objc_class *ObjectType;
  char *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  objc_super v9;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = &v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_objectSelection];
  v3 = type metadata accessor for ICSelectionStateModel.ObjectSelection(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = &v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_containerSelection];
  v5 = type metadata accessor for ICSelectionStateModel.ContainerSelection(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_selectionReason] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_currentFirstVisibleObjectIDURLForContainerObjectIDURL] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_currentActivityStreamSelection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_currentActivityStreamViewMode] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_currentSelectedSearchResult] = 0;
  v6 = &v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_focusedNoteObjectIDURL];
  v7 = type metadata accessor for URL(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_currentFirstVisibleObjectIDForContainerObjectID] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_focusedNoteObjectID] = 0;
  v9.receiver = v0;
  v9.super_class = ObjectType;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t sub_100010414(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t type metadata accessor for ICSelectionStateModel.ContainerSelection(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D1410, (uint64_t)&nominal type descriptor for ICSelectionStateModel.ContainerSelection);
}

uint64_t type metadata accessor for ICSelectionStateModel.ObjectSelection(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D14C0, (uint64_t)&nominal type descriptor for ICSelectionStateModel.ObjectSelection);
}

char *sub_100010470(uint64_t a1, char a2)
{
  _BYTE *v2;
  objc_class *ObjectType;
  id v6;
  id v7;
  char *v8;
  id v9;
  id v10;
  double v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  double v18;
  double v19;
  unsigned int v20;
  double v21;
  unsigned int v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  unsigned int v65;
  double v66;
  id v67;
  id v68;
  id v69;
  unsigned int v70;
  double v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  uint64_t v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  Class isa;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  id v92;
  id v93;
  uint64_t v94;
  objc_super v95;

  ObjectType = (objc_class *)swift_getObjectType(v2);
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_horizontalMargin] = 0x4030000000000000;
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_verticalMargin] = 0x4024000000000000;
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_closeButtonTopMargin] = 0x4018000000000000;
  v2[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_isCloseButtonHidden] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___label] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___closeButton] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_coordinator] = a1;
  v95.receiver = v2;
  v95.super_class = ObjectType;
  swift_unknownObjectRetain(a1);
  v6 = objc_msgSendSuper2(&v95, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v7 = sub_1000183D4();
  objc_msgSend(v6, "addSubview:", v7);

  v8 = (char *)v6;
  v9 = sub_100006FF8();
  objc_msgSend(v8, "addSubview:", v9);

  v10 = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  objc_msgSend(v8, "addLayoutGuide:", v10);
  v11 = *(double *)&v8[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_closeButtonTopMargin];
  v94 = a1;
  if ((a2 & 1) != 0)
  {
    v12 = v10;
  }
  else
  {
    v13 = objc_opt_self(ICViewControllerManager);
    v14 = (void *)swift_dynamicCastObjCClass(a1, v13);
    v12 = v10;
    if (v14)
    {
      v15 = objc_msgSend(v14, "noteEditorViewController");
      v16 = objc_msgSend(v15, "navigationController");

      if (v16)
      {
        v17 = objc_msgSend(v16, "navigationBar");

        objc_msgSend(v17, "bounds");
        v19 = v18;

        v20 = objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision");
        v21 = 44.0;
        if (v20)
          v21 = 30.0;
        v11 = (v19 - v21) * 0.5;
      }
    }
  }
  v92 = (id)objc_opt_self(UIDevice);
  v22 = objc_msgSend(v92, "ic_isVision");
  v23 = sub_100006FF8();
  v24 = v23;
  if (v22)
  {
    v25 = objc_msgSend(v23, "centerYAnchor");

    v26 = sub_1000183D4();
    v27 = objc_msgSend(v26, "centerYAnchor");

    v28 = objc_msgSend(v25, "constraintEqualToAnchor:", v27);
  }
  else
  {
    v25 = objc_msgSend(v23, "topAnchor");

    v27 = objc_msgSend(v8, "topAnchor");
    v28 = objc_msgSend(v25, "constraintEqualToAnchor:constant:", v27, v11);
  }
  v93 = v28;

  v29 = sub_100012E18(&qword_1005CF6F0);
  v30 = swift_allocObject(v29, 112, 7);
  *(_OWORD *)(v30 + 16) = xmmword_100453E50;
  v31 = v12;
  v32 = objc_msgSend(v12, "topAnchor");
  v33 = objc_msgSend(v8, "topAnchor");
  v34 = objc_msgSend(v32, "constraintEqualToAnchor:", v33);

  *(_QWORD *)(v30 + 32) = v34;
  v35 = objc_msgSend(v31, "bottomAnchor");
  v36 = objc_msgSend(v8, "safeAreaLayoutGuide");
  v37 = objc_msgSend(v36, "bottomAnchor");

  v38 = objc_msgSend(v35, "constraintEqualToAnchor:", v37);
  *(_QWORD *)(v30 + 40) = v38;
  v39 = sub_1000183D4();
  v40 = objc_msgSend(v39, "topAnchor");

  v41 = objc_msgSend(v31, "topAnchor");
  v42 = OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_verticalMargin;
  v43 = objc_msgSend(v40, "constraintEqualToAnchor:constant:", v41, *(double *)&v8[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_verticalMargin]);

  *(_QWORD *)(v30 + 48) = v43;
  v44 = sub_1000183D4();
  v45 = objc_msgSend(v44, "bottomAnchor");

  v46 = objc_msgSend(v31, "bottomAnchor");
  v47 = objc_msgSend(v45, "constraintEqualToAnchor:constant:", v46, -*(double *)&v8[v42]);

  *(_QWORD *)(v30 + 56) = v47;
  v48 = sub_1000183D4();
  v49 = objc_msgSend(v48, "centerYAnchor");

  v50 = objc_msgSend(v31, "centerYAnchor");
  v51 = objc_msgSend(v49, "constraintEqualToAnchor:", v50);

  *(_QWORD *)(v30 + 64) = v51;
  v52 = sub_1000183D4();
  v53 = objc_msgSend(v52, "leadingAnchor");

  v54 = objc_msgSend(v8, "leadingAnchor");
  v55 = OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_horizontalMargin;
  v56 = objc_msgSend(v53, "constraintEqualToAnchor:constant:", v54, *(double *)&v8[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_horizontalMargin]);

  *(_QWORD *)(v30 + 72) = v56;
  v57 = sub_1000183D4();
  v58 = objc_msgSend(v57, "trailingAnchor");

  v59 = sub_100006FF8();
  v60 = objc_msgSend(v59, "leadingAnchor");

  v61 = objc_msgSend(v58, "constraintEqualToAnchor:constant:", v60, -*(double *)&v8[v55]);
  *(_QWORD *)(v30 + 80) = v61;
  v62 = sub_100006FF8();
  v63 = objc_msgSend(v62, "trailingAnchor");

  v64 = objc_msgSend(v8, "trailingAnchor");
  v65 = objc_msgSend(v92, "ic_isVision");
  v66 = 6.0;
  if (v65)
    v66 = 12.0;
  v67 = objc_msgSend(v63, "constraintEqualToAnchor:constant:", v64, -v66);

  *(_QWORD *)(v30 + 88) = v67;
  v68 = sub_100006FF8();
  v69 = objc_msgSend(v68, "widthAnchor");

  v70 = objc_msgSend(v92, "ic_isVision");
  v71 = 44.0;
  if (v70)
    v71 = 30.0;
  v72 = objc_msgSend(v69, "constraintEqualToConstant:", v71);

  *(_QWORD *)(v30 + 96) = v72;
  v73 = sub_100006FF8();
  v74 = objc_msgSend(v73, "heightAnchor");

  v75 = sub_100006FF8();
  v76 = objc_msgSend(v75, "widthAnchor");

  v77 = objc_msgSend(v74, "constraintEqualToAnchor:", v76);
  *(_QWORD *)(v30 + 104) = v77;
  specialized Array._endMutation()(v78);
  v79 = v93;
  v80 = swift_bridgeObjectRetain(v30);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v80);
  v82 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v81 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v82 >= v81 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v81 > 1, v82 + 1, 1);
  v83 = (void *)objc_opt_self(NSLayoutConstraint);
  v84 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v82, v79);
  specialized Array._endMutation()(v84);
  swift_bridgeObjectRelease(v30);
  sub_1000163BC(0, (unint64_t *)&qword_1005D8F60, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v30);
  objc_msgSend(v83, "activateConstraints:", isa);

  sub_10012D270();
  sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
  v86 = static UITraitCollection.traitsAffectingSizeAndColor.getter();
  v87 = UIView.registerForTraitChanges(_:action:)(v86, "updateUI");
  swift_unknownObjectRelease(v87, v88);
  swift_bridgeObjectRelease(v86);
  v89 = sub_100006FF8();
  objc_msgSend(v89, "setHidden:", v8[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_isCloseButtonHidden]);

  swift_unknownObjectRelease(v94, v90);
  return v8;
}

void sub_100011550(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  id v15;
  void *v16;
  char *v17;
  void *v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD v24[5];
  _QWORD v25[6];
  _QWORD v26[6];
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;

  v27 = 0;
  v28 = &v27;
  v29 = 0x3032000000;
  v30 = sub_100095AB8;
  v31 = sub_100095AC8;
  v32 = 0;
  if ((objc_msgSend(*(id *)(a1 + 32), "showsNoteCount") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));

    v4 = *(void **)(a1 + 32);
    if (v2)
    {
      v5 = objc_msgSend((id)objc_opt_class(v4, v3), "modernWorkerContext");
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_1000117CC;
      v26[3] = &unk_100550298;
      v26[4] = *(_QWORD *)(a1 + 32);
      v26[5] = &v27;
      objc_msgSend(v6, "performBlockAndWait:", v26);
LABEL_8:

      goto LABEL_9;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "noteCollection"));

    v10 = *(void **)(a1 + 32);
    if (v8)
    {
      v11 = objc_msgSend((id)objc_opt_class(v10, v9), "legacyWorkerContext");
      v6 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_100095C74;
      v25[3] = &unk_100550298;
      v25[4] = *(_QWORD *)(a1 + 32);
      v25[5] = &v27;
      objc_msgSend(v6, "performBlockAndWait:", v25);
      goto LABEL_8;
    }
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "virtualSmartFolder"));

    if (!v12)
      goto LABEL_9;
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "virtualSmartFolder"));
    v15 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v14), "modernWorkerContext");
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = (char *)objc_msgSend(v13, "visibleNoteCountInContext:", v16);

    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "virtualSmartFolder"));
    v20 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v19), "modernWorkerContext");
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v22 = objc_msgSend(v18, "visibleInvitationCountInContext:", v21);

    v23 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", &v17[(_QWORD)v22]));
    v7 = (void *)v28[5];
    v28[5] = v23;
  }
  else
  {
    v7 = (void *)v28[5];
    v28[5] = 0;
  }

LABEL_9:
  objc_msgSend(*(id *)(a1 + 32), "setNoteCount:", v28[5]);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_100007538;
  v24[3] = &unk_100550110;
  v24[4] = *(_QWORD *)(a1 + 32);
  performBlockOnMainThread(v24);
  _Block_object_dispose(&v27, 8);

}

void sub_1000117AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void sub_1000117CC(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "modernWorkerContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectID"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_existingObjectWithID:", v6));

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v10, "visibleNotesCount")));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_100012968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id *location, id *a13, id *a14, id *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id *a25,uint64_t a26,id *a27,id *a28,id *a29,id *a30,id *a31,id *a32,id *a33,id *a34,id *a35,id *a36,id *a37,id *a38,id *a39)
{
  id *v39;
  id *v40;
  id *v41;
  id *v42;
  uint64_t v43;

  objc_destroyWeak(v41);
  objc_destroyWeak(v42);
  objc_destroyWeak(v40);
  objc_destroyWeak(v39);
  objc_destroyWeak(location);
  objc_destroyWeak(a13);
  objc_destroyWeak(a14);
  objc_destroyWeak(a15);
  objc_destroyWeak(a31);
  objc_destroyWeak(a30);
  objc_destroyWeak(a25);
  objc_destroyWeak(a27);
  objc_destroyWeak(a28);
  objc_destroyWeak(a29);
  objc_destroyWeak(a32);
  objc_destroyWeak(a33);
  objc_destroyWeak(a34);
  objc_destroyWeak(a35);
  objc_destroyWeak(a36);
  objc_destroyWeak(a37);
  objc_destroyWeak(a38);
  objc_destroyWeak((id *)(v43 - 176));
  objc_destroyWeak(a39);
  objc_destroyWeak((id *)(v43 - 120));
  objc_destroyWeak((id *)(v43 - 112));
  _Unwind_Resume(a1);
}

void sub_100012AF4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _BYTE v25[16];
  _QWORD *v26;
  _QWORD v27[9];
  char v28;
  uint64_t v29;
  _BYTE v30[32];
  void *v31;

  v5 = a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue, v30, 0, 0);
  v7 = *(void **)v5;
  v6 = *(_QWORD *)(v5 + 8);
  v8 = *(void **)(v5 + 16);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 40);
  v13 = *(_QWORD *)(v5 + 48);
  v12 = *(_QWORD *)(v5 + 56);
  v14 = *(_QWORD *)(v5 + 64);
  v15 = *(_BYTE *)(v5 + 72);
  v16 = *(_QWORD *)(v5 + 80);
  v27[0] = v7;
  v27[1] = v6;
  v27[2] = v8;
  v27[3] = v9;
  v27[4] = v10;
  v27[5] = v11;
  v27[6] = v13;
  v27[7] = v12;
  v27[8] = v14;
  v28 = v15;
  v29 = v16;
  v26 = v27;
  v17 = v8;
  v18 = v7;
  sub_100166B74(v9, v10);
  sub_100166B74(v11, v13);
  v19 = type metadata accessor for ICSelectionStateModel(0);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v16);
  OS_dispatch_queue.sync<A>(execute:)(&v31, a2, v25, v19);

  sub_100012C50(v9, v10);
  sub_100012C50(v11, v13);
  swift_bridgeObjectRelease(v16);
  v20 = swift_bridgeObjectRelease(v12);
  v21 = v31;
  v22 = a3(v20);

  *a4 = v22;
}

uint64_t sub_100012C50(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

id sub_100012C60(char *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  void *v6;
  char *v7;
  id v8;
  uint64_t v9;
  _QWORD v11[5];
  id v12;

  v6 = *(void **)&a1[OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateAccessQueue];
  v11[2] = a1;
  v7 = a1;
  v8 = v6;
  v9 = sub_100012E18(a3);
  OS_dispatch_queue.sync<A>(execute:)(&v12, a4, v11, v9);

  return v12;
}

uint64_t sub_100012CE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100012E18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100012DDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100012E18(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100012E18(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

BOOL sub_100013628(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = a2;
  v6 = objc_opt_class(ICFolderListSectionIdentifier, v5);
  v7 = ICDynamicCast(v6, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  LOBYTE(v4) = objc_msgSend(v8, "sectionType") == (id)8;
  return (char)v4;
}

void sub_1000136E8(uint64_t a1)
{
  int v2;
  void *v3;
  id v4;

  v2 = ICAccessibilityAccessibilityLargerTextSizesEnabled();
  v3 = *(void **)(a1 + 32);
  if (v2)
  {
    objc_msgSend(v3, "updateTextAndStatus");
  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "configurationState"));
    objc_msgSend(v3, "updateAccessoriesUsingState:", v4);

  }
}

void sub_100013934(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  char isKindOfClass;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[5];
  _QWORD v18[6];
  _QWORD v19[6];
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;

  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = sub_100095AB8;
  v24 = sub_100095AC8;
  v25 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));
  v4 = objc_opt_class(ICFolder, v3);
  isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  v7 = *(void **)(a1 + 32);
  if ((isKindOfClass & 1) != 0)
  {
    v8 = objc_msgSend((id)objc_opt_class(v7, v6), "modernWorkerContext");
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100095AD0;
    v19[3] = &unk_100550298;
    v19[4] = *(_QWORD *)(a1 + 32);
    v19[5] = &v20;
    objc_msgSend(v9, "performBlockAndWait:", v19);
LABEL_5:

    goto LABEL_6;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "noteCollection"));
  v12 = objc_opt_class(NoteStoreObject, v11);
  v13 = objc_opt_isKindOfClass(v10, v12);

  if ((v13 & 1) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NoteContext sharedContext](NoteContext, "sharedContext"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "managedObjectContext"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_100095B84;
    v18[3] = &unk_100550298;
    v18[4] = *(_QWORD *)(a1 + 32);
    v18[5] = &v20;
    objc_msgSend(v14, "performBlockAndWait:", v18);

    goto LABEL_5;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "virtualSmartFolder"));

  if (v15)
  {
    v16 = (void *)v21[5];
    v21[5] = 0;

  }
LABEL_6:
  objc_msgSend(*(id *)(a1 + 32), "setSubfoldersCount:", v21[5]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000136E8;
  v17[3] = &unk_100550110;
  v17[4] = *(_QWORD *)(a1 + 32);
  performBlockOnMainThread(v17);
  _Block_object_dispose(&v20, 8);

}

void sub_100013B2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100014884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

int main(int argc, const char **argv, const char **envp)
{
  void *v5;
  ICUIApplicationShimDelegate *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  unsigned int v12;
  dispatch_queue_global_t global_queue;
  NSObject *v14;
  void *v15;
  uint64_t v16;
  objc_class *v17;
  NSString *v18;
  NSString *v19;
  int v20;

  v5 = objc_autoreleasePoolPush();
  v6 = objc_opt_new(ICUIApplicationShimDelegate);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICUIApplicationShim sharedInstance](ICUIApplicationShim, "sharedInstance"));
  objc_msgSend(v7, "setDelegate:", v6);

  +[NSTextAttachment registerTextAttachmentClass:forFileType:](NSTextAttachment, "registerTextAttachmentClass:forFileType:", objc_opt_class(ICInlineDrawingTextAttachment, v8), PKAppleDrawingTypeIdentifier);
  +[NSTextAttachment registerTextAttachmentClass:forFileType:](NSTextAttachment, "registerTextAttachmentClass:forFileType:", objc_opt_class(ICSystemPaperTextAttachment, v9), PKApplePaperTypeIdentifier);
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  if (objc_msgSend(v10, "BOOLForKey:", kICInternalSettingsShowICloudIMAPAccountDefaultKey))
  {

LABEL_4:
    +[ICNoteContext setLegacyNotesDisabled:](ICNoteContext, "setLegacyNotesDisabled:", 0);
    goto LABEL_5;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v12 = objc_msgSend(v11, "BOOLForKey:", kICInternalSettingsShowLocalHTMLNotesDefaultKey);

  if (v12)
    goto LABEL_4;
LABEL_5:
  global_queue = dispatch_get_global_queue(2, 0);
  v14 = objc_claimAutoreleasedReturnValue(global_queue);
  dispatch_async(v14, &stru_100554038);

  v15 = (void *)objc_claimAutoreleasedReturnValue(+[ICModelAvailabilityManager sharedInstance](ICModelAvailabilityManager, "sharedInstance"));
  objc_msgSend(v15, "determineASRAvailability:", &stru_100554078);

  v17 = (objc_class *)objc_opt_class(ICAppDelegate, v16);
  v18 = NSStringFromClass(v17);
  v19 = (NSString *)objc_claimAutoreleasedReturnValue(v18);
  objc_autoreleasePoolPop(v5);
  v20 = UIApplicationMain(argc, (char **)argv, 0, v19);

  return v20;
}

uint64_t sub_100014C58(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014C60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014C68(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014C70(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014C78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014C80(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014C88(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014C90(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014C98(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CB0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CB8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CC0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CC8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CD0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CD8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CE8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CF0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014CF8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D00(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D08(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D40(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D50(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D58(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D68(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D70(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D80(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D88(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D90(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014D98(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DB0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DB8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DC0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DC8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DD0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DD8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DE0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DE8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DF0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014DF8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E00(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E08(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E10(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E20(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E30(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E38(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E40(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E48(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E50(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E58(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E60(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E68(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E70(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E78(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E80(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E88(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E90(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014E98(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014EA0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014EA8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014EB0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100014EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014ED8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014F98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014FB8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100014FF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015008(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015038(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015048(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015058(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015088(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015098(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000150A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000150B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000150C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000150D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000150E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000150F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015108(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015128(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015138(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015148(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015158(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015168(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015178(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000151A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000151B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000151C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000151D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000151E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000151F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015238(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015258(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015278(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015288(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000152A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000152B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000152C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000152D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000152E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000152F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015308(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015338(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015348(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015358(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015368(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001537C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_1000153C0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000153E0(id a1)
{

}

void sub_100015400(id a1)
{
  id v1;
  id v2;
  void *v3;
  id v4;

  v1 = +[ICAccount localizedLocalAccountName](ICAccount, "localizedLocalAccountName");
  v2 = +[AccountUtilities sharedAccountUtilities](AccountUtilities, "sharedAccountUtilities");
  +[UIImage ic_cacheSystemImages](UIImage, "ic_cacheSystemImages");
  +[UIPencilInteraction prefersPencilOnlyDrawing](UIPencilInteraction, "prefersPencilOnlyDrawing");
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccountUtilities sharedInstance](ICAccountUtilities, "sharedInstance"));
  objc_msgSend(v3, "performBlockInPersonaContext:forAccountIdentifier:", &stru_100554058, 0);

  +[UIDevice ic_isLiveTextAvailable](UIDevice, "ic_isLiveTextAvailable");
  v4 = (id)objc_claimAutoreleasedReturnValue(+[PKGenerationModelAvailabilityController sharedInstance](PKGenerationModelAvailabilityController, "sharedInstance"));
  objc_msgSend(v4, "queryGenerationModelAvailabilityStatus");

}

void sub_1000154B8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "propertiesToUpdate", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 32), "willChangeValueForKey:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

uint64_t sub_1000155AC(uint64_t a1)
{
  uint64_t result;

  if (objc_msgSend(*(id *)(a1 + 32), "ic_isViewVisible"))
    objc_msgSend(*(id *)(a1 + 32), "updateToolbarAnimated:", 0);
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000155F8(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  objc_msgSend(v1, "setShouldShowAllowNotificationsView:", 0);

}

void sub_100015640(uint64_t a1, uint64_t a2)
{
  void *v3;
  id *v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  if (a2 == 1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004BA18;
    v7[3] = &unk_100550DD0;
    v4 = &v8;
    objc_copyWeak(&v8, (id *)(a1 + 32));
    objc_msgSend(v3, "checkIfHasSharedNotesOrFolders:", v7);

  }
  else
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000155F8;
    v5[3] = &unk_10054FF58;
    v4 = &v6;
    objc_copyWeak(&v6, (id *)(a1 + 32));
    performBlockOnMainThread(v5);
  }
  objc_destroyWeak(v4);
}

void sub_10001572C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100015744(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "propertiesToUpdate", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 32), "didChangeValueForKey:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6));
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

id sub_100015838(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v2 = UISplitViewControllerAutomaticDimension;
  if (*(_BYTE *)(a1 + 48))
  {
    objc_msgSend(*(id *)(a1 + 32), "primaryColumnWidth");
    v4 = v3;
    if (objc_msgSend(*(id *)(a1 + 32), "style") == (id)2)
    {
      objc_msgSend(*(id *)(a1 + 32), "supplementaryColumnWidth");
      v2 = v5;
    }
    v6 = objc_msgSend(*(id *)(a1 + 32), "style");
    v7 = *(void **)(a1 + 32);
    if (v6 == (id)2)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "viewControllerManager"));
      if (objc_msgSend(v8, "canTilePrimaryContent"))
        v9 = 1;
      else
        v9 = 3;

    }
    else if (objc_msgSend(v7, "style") == (id)1)
    {
      v9 = (uint64_t)objc_msgSend(*(id *)(a1 + 40), "splitBehavior");
    }
    else
    {
      v9 = 0;
    }
  }
  else
  {
    v9 = 0;
    v4 = UISplitViewControllerAutomaticDimension;
  }
  objc_msgSend(*(id *)(a1 + 32), "setPreferredPrimaryColumnWidth:", v4);
  objc_msgSend(*(id *)(a1 + 32), "setMinimumPrimaryColumnWidth:", v4);
  objc_msgSend(*(id *)(a1 + 32), "setMaximumPrimaryColumnWidth:", v4);
  if (objc_msgSend(*(id *)(a1 + 32), "style") == (id)2)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPreferredSupplementaryColumnWidth:", v2);
    objc_msgSend(*(id *)(a1 + 32), "setMinimumSupplementaryColumnWidth:", v2);
    objc_msgSend(*(id *)(a1 + 32), "setMaximumSupplementaryColumnWidth:", v2);
  }
  return objc_msgSend(*(id *)(a1 + 32), "setPreferredSplitBehavior:", v9);
}

id sub_100015968(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateNoteSelectionAnimated:", 0);
}

void sub_100015974(id a1)
{
  id v1;

  v1 = +[AVURLAsset audiovisualTypes](AVURLAsset, "audiovisualTypes");
}

void sub_100015998(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "workerManagedObjectContext"));
  v2 = (void *)qword_1005DDE40;
  qword_1005DDE40 = v1;

}

id sub_1000159E0(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(*(id *)(a1 + 32), "setAccessories:", v2);

  return objc_msgSend(*(id *)(a1 + 32), "layoutIfNeeded");
}

id sub_100015A1C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateScopeButtonTitles");
}

void sub_100015A24(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.notes.update-counts", v4);
  v3 = (void *)qword_1005DDE30;
  qword_1005DDE30 = (uint64_t)v2;

}

uint64_t sub_100015A74(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(a1 + 40));
  return result;
}

void sub_100015A90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = objc_msgSend(a2, "authorizationStatus");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v3));
  objc_msgSend(*(id *)(a1 + 32), "setUserNotificationsAllowed:", v4);

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100015A74;
  v5[3] = &unk_100551830;
  v6 = *(id *)(a1 + 40);
  v7 = v3;
  performBlockOnMainThread(v5);

}

void sub_100015B38(id a1)
{
  ICNACloudOperationEventReporter *v1;
  void *v2;

  v1 = objc_alloc_init(ICNACloudOperationEventReporter);
  v2 = (void *)qword_1005DDDB0;
  qword_1005DDDB0 = (uint64_t)v1;

}

void sub_100015B60(id a1)
{
  objc_msgSend((id)objc_opt_class(ICPagesHandoffManager), "updatePagesInstallationStatus");
  +[ICLocalAuthentication refreshBiometricsContext](ICLocalAuthentication, "refreshBiometricsContext");
  +[ICLocalAuthentication refreshHasPasscode](ICLocalAuthentication, "refreshHasPasscode");
}

BOOL sub_100015B98(id a1, ICViewControllerManager *a2, unint64_t a3, BOOL *a4)
{
  return -[ICViewControllerManager isWelcomeScreenVisible](a2, "isWelcomeScreenVisible", a3, a4);
}

NSManagedObjectContext *__cdecl sub_100015BA0(id a1)
{
  void *v1;
  void *v2;
  void *v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NotesApp sharedNotesApp](NotesApp, "sharedNotesApp"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "backgroundNoteContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectContext"));

  return (NSManagedObjectContext *)v3;
}

NSManagedObjectContext *__cdecl sub_100015BF8(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "workerManagedObjectContext"));

  return (NSManagedObjectContext *)v2;
}

void sub_100015C38(id a1)
{
  uint64_t v1;
  void *v2;
  ICAppDelegate *v3;

  v3 = [ICAppDelegate alloc];
  v1 = objc_claimAutoreleasedReturnValue(-[ICAppDelegate sharedInstanceInit](v3, "sharedInstanceInit"));
  v2 = (void *)qword_1005DDD28;
  qword_1005DDD28 = v1;

}

void sub_100015C7C(id a1)
{
  NotesApp *v1;
  void *v2;

  v1 = objc_alloc_init(NotesApp);
  v2 = (void *)qword_1005DDFB8;
  qword_1005DDFB8 = (uint64_t)v1;

}

void sub_100015CA4(id *a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  id v7;
  void ***v8;
  void *v9;
  void *v10;
  void *v11;
  _BOOL8 v12;
  id v13;
  void *v14;
  void *v15;
  void **v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  id v21;
  id v22;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
  v5 = objc_msgSend(v4, "isRunningPPT");

  if (!v5)
  {
    v16 = _NSConcreteStackBlock;
    v17 = 3221225472;
    v18 = sub_100028F10;
    v19 = &unk_10054FEA8;
    v6 = a1[5];
    v7 = a1[4];
    v20 = v6;
    v21 = v7;
    v22 = a1[6];
    v8 = objc_retainBlock(&v16);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "selectedNoteBrowseContainerItemID"));
    if (v9)
    {

    }
    else if ((objc_msgSend(a1[4], "hasCompactWidth") & 1) == 0)
    {
      if ((objc_msgSend(a1[4], "isTagSelected") & 1) != 0)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "selectedContainerIdentifiers"));
      }
      else
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "firstRelevantItemIdentifier"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet ic_setFromNonNilObject:](NSSet, "ic_setFromNonNilObject:", v11));

      }
      v12 = objc_msgSend(a1[5], "currentNoteContainerViewMode") == 0;
      v13 = a1[4];
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "rootNoteBrowseViewController"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
      objc_msgSend(v13, "setCurrentNoteBrowseViewController:animated:ensurePresented:containerIdentifiers:excludingIdentifiers:ensureSelectedNote:keepEditorShowing:dataIndexedBlock:dataRenderedBlock:", v14, 0, 1, v10, v15, v12, 0, 0, v8, v16, v17, v18, v19, v20, v21);

      goto LABEL_7;
    }
    ((void (*)(void ***))v8[2])(v8);
LABEL_7:

    goto LABEL_8;
  }
  objc_msgSend(a1[4], "setIsApplyingStateRestoreArchive:", 0);
LABEL_8:

}

id sub_100015E74(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "didUpdateModelForSelectionStateController:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "setupViewsFromWindowStateArchive:systemPaperShowModernAccountAlert:completion:", *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 64), *(_QWORD *)(a1 + 56));
}

void sub_100015EBC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_100015EEC(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_100015F0C()
{
  uint64_t v0;

  return v0;
}

void sub_100015F18(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 2u);
}

void sub_100015F34(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_100015F40(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x16u);
}

void sub_100015F4C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100015F5C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_100015F6C(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_100015F94(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100015FB4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_100015FC8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 2u);
}

void sub_100015FD4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  NSObject *v9;

  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

void sub_100016000(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, a5, 0x20u);
}

void sub_10001603C(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100016048(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100016058(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void sub_100016068(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  NSObject *v4;
  uint8_t *v5;

  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

void sub_100016094(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 8u);
}

void sub_1000160A4(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

_OWORD *sub_1000160B8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000160C8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18(&qword_1005CF190);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100016108(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18(&qword_1005D5038);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

Swift::Int sub_100016148(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::Int v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_100012E18(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  result = swift_retain(v4);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_36;
      v20 = *(_QWORD *)(v9 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_36;
        v20 = *(_QWORD *)(v9 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(_QWORD *)(v7 + 40);
    v23 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_1000163BC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void type metadata accessor for Name(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8E0, (uint64_t)&unk_100557F20);
}

NSString sub_100016408()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.TagCollectionViewWillRenameTag = (uint64_t)result;
  return result;
}

NSString sub_10001643C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  static NSNotificationName.TagCollectionViewDidRenameTag = (uint64_t)result;
  return result;
}

void sub_100016578(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_1000165BC(Swift::Int *a1, void *a2)
{
  return sub_10030335C(a1, a2, (uint64_t (*)(_QWORD))&type metadata accessor for UIAppIntentInteraction, &qword_1005CF6D8);
}

uint64_t sub_1000165D0()
{
  uint64_t v0;

  return sub_1000165F8(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000165D8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000165F8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100016618(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_100016638(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001537C(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100016678(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (result)
  {
    swift_release(a2);
    swift_release(a4);

    sub_100012C50(a7, a8);
    return sub_100012C50(a9, a10);
  }
  return result;
}

uint64_t sub_1000166F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE v8[32];
  _BYTE v9[32];
  _BYTE v10[32];
  _QWORD v11[3];

  v2 = type metadata accessor for EditNoteActivity(319);
  if (v3 <= 0x3F)
  {
    sub_1002D9F54(319, (unint64_t *)&qword_1005D2288, &qword_1005D2210);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      v6 = *(_QWORD *)(v2 - 8) + 64;
      swift_getTupleTypeLayout3(v10, v6, *(_QWORD *)(v4 - 8) + 64, (char *)&value witness table for Builtin.UnknownObject + 64);
      v11[0] = v10;
      swift_getTupleTypeLayout2(v9, v6, (char *)&value witness table for Builtin.UnknownObject + 64);
      v11[1] = v9;
      swift_getTupleTypeLayout2(v8, v6, (char *)&value witness table for Builtin.UnknownObject + 64);
      v11[2] = v8;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v11);
      return 0;
    }
  }
  return v2;
}

uint64_t type metadata accessor for FastSyncEditorActivityChangeHandler(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D7D50, (uint64_t)&nominal type descriptor for FastSyncEditorActivityChangeHandler);
}

void sub_100016800(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[17];

  v4[0] = "\b";
  v4[1] = &unk_100465070;
  v4[2] = &unk_100465088;
  v4[3] = &unk_100465088;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = &unk_100465070;
  v4[7] = &unk_100465088;
  v4[8] = &unk_100465088;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100019C18(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = &unk_100465088;
    v4[13] = &unk_100465088;
    v4[14] = &unk_100465088;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[16] = &unk_100465088;
    swift_updateClassMetadata2(a1, 256, 17, v4, a1 + 80);
  }
}

uint64_t type metadata accessor for ActivityStreamNavigationController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DA830;
  if (!qword_1005DA830)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityStreamNavigationController);
  return result;
}

uint64_t sub_1000168FC()
{
  return type metadata accessor for ActivityStreamNavigationController(0);
}

void sub_10001694C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;

  v2 = v1;
  v3 = OBJC_IVAR___ICActivityStreamNavigationController_selection;
  v4 = *(void **)(v1 + OBJC_IVAR___ICActivityStreamNavigationController_selection);
  *(_QWORD *)(v2 + OBJC_IVAR___ICActivityStreamNavigationController_selection) = a1;
  v5 = a1;

  v6 = sub_100016C14();
  v7 = *(void **)(v2 + v3);
  v8 = v7;
  ActivityStreamDockView.selection.setter(v7);

  v10 = *(void **)(v2 + OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController);
  if (v10)
  {
    v11 = *(void **)(v2 + v3);
    KeyPath = swift_getKeyPath(&unk_100465158, v9);
    v14 = swift_getKeyPath(&unk_100465180, v13);
    v16 = v11;
    v15 = v11;
    static Published.subscript.setter(&v16, v10, KeyPath, v14);
  }
}

void sub_100016A64()
{
  char *v0;
  char *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v1 = v0;
  v2 = sub_100016C14();
  v3 = OBJC_IVAR___ICActivityStreamNavigationController_object;
  v4 = *(void **)&v1[OBJC_IVAR___ICActivityStreamNavigationController_object];
  v5 = v4;
  ActivityStreamDockView.object.setter(v4);

  if (objc_msgSend(v1, "ic_isViewVisible"))
  {
    v6 = *(void **)&v1[OBJC_IVAR___ICActivityStreamNavigationController_activityStreamViewController];
    if (v6)
    {
      v7 = *(void **)&v1[v3];
      v8 = v7;
      v9 = v6;
      sub_10013C038(v7);

    }
    sub_10035D510();
    sub_10035D2D0();
  }
}

char *sub_100016B1C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  void *v11;
  id v12;

  v1 = OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___unfilteredHeaderView;
  v2 = *(void **)(v0 + OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___unfilteredHeaderView);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___unfilteredHeaderView);
  }
  else
  {
    v4 = v0;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR___ICActivityStreamNavigationController_coordinator);
    v6 = *(_BYTE *)(v4 + OBJC_IVAR___ICActivityStreamNavigationController_hasInteractiveSizing);
    objc_allocWithZone((Class)type metadata accessor for ActivityStreamHeaderView());
    swift_unknownObjectRetain(v5);
    v8 = sub_100010470(v7, v6);
    objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v9 = (void *)objc_opt_self(UIColor);
    v3 = v8;
    v10 = objc_msgSend(v9, "ICBackgroundColor");
    objc_msgSend(v3, "setBackgroundColor:", v10);

    v11 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;

    v2 = 0;
  }
  v12 = v2;
  return v3;
}

id sub_100016C14()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;

  v1 = OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___filteredHeaderView;
  v2 = *(void **)(v0 + OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___filteredHeaderView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICActivityStreamNavigationController____lazy_storage___filteredHeaderView);
  }
  else
  {
    v4 = v0;
    v5 = *(_QWORD *)(v0 + OBJC_IVAR___ICActivityStreamNavigationController_coordinator);
    v6 = objc_allocWithZone((Class)type metadata accessor for ActivityStreamDockView(0));
    v7 = swift_unknownObjectRetain(v5);
    v8 = (void *)ActivityStreamDockView.init(coordinator:isDisplayedInCard:)(v7, 1);
    objc_msgSend(v8, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v9 = (void *)objc_opt_self(UIColor);
    v10 = v8;
    v11 = objc_msgSend(v9, "ICBackgroundColor");
    objc_msgSend(v10, "setBackgroundColor:", v11);

    objc_msgSend(v10, "setAlpha:", 0.0);
    v12 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v10;
    v3 = v10;

    v2 = 0;
  }
  v13 = v2;
  return v3;
}

void sub_100016E7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  id v21;
  char v22[24];

  v3 = v1 + OBJC_IVAR____TtC11MobileNotes33ICAppIntentsInteractionController_window;
  Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC11MobileNotes33ICAppIntentsInteractionController_window);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v6, "removeObserver:name:object:", v1, ICWindowRootViewControllerDidChangeNotification, v5);

    v7 = objc_msgSend(v5, "rootViewController");
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(v7, "view");
      if (!v9)
      {
        __break(1u);
        goto LABEL_13;
      }
      v10 = v9;
      sub_1001810AC(v9);

    }
  }
  v11 = swift_unknownObjectWeakAssign(v3, a1);
  v12 = (void *)swift_unknownObjectWeakLoadStrong(v11);
  if (!v12)
    return;
  v13 = v12;
  v14 = objc_msgSend(v12, "rootViewController");
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "view");
    if (v16)
    {
      v17 = v16;
      v18 = sub_10000782C(v17, (uint64_t)v17);

      v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MobileNotes33ICAppIntentsInteractionController_interactions);
      swift_beginAccess(v1 + OBJC_IVAR____TtC11MobileNotes33ICAppIntentsInteractionController_interactions, v22, 1, 0);
      v20 = *v19;
      *v19 = v18;

      swift_bridgeObjectRelease(v20);
      goto LABEL_10;
    }
LABEL_13:
    __break(1u);
    return;
  }
LABEL_10:
  v21 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v21, "addObserver:selector:name:object:", v1, "rootViewControllerDidChange:", ICWindowRootViewControllerDidChangeNotification, v13);

}

void sub_1000170F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD v21[2];
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;

  v1 = v0;
  Notification.object.getter(&v23);
  if (!*((_QWORD *)&v24 + 1))
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  sub_1000160B8(&v23, v22);
  v2 = sub_1000163BC(0, &qword_1005D1FE8, ICWindow_ptr);
  v3 = swift_dynamicCast(v21, v22, (char *)&type metadata for Any + 8, v2, 7);
  v4 = (void *)v21[0];
  v5 = Notification.userInfo.getter(v3);
  if (!v5)
  {
    v23 = 0u;
    v24 = 0u;
LABEL_12:
    sub_1000160C8((uint64_t)&v23);
    goto LABEL_13;
  }
  v6 = v5;
  v21[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(ICWindowPreviousRootViewControllerKey);
  v21[1] = v7;
  AnyHashable.init<A>(_:)(v22, v21, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v6 + 16) && (v8 = sub_100248ECC((uint64_t)v22), (v9 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(v6 + 56) + 32 * v8, (uint64_t)&v23);
  }
  else
  {
    v23 = 0u;
    v24 = 0u;
  }
  swift_bridgeObjectRelease(v6);
  sub_10018550C((uint64_t)v22);
  if (!*((_QWORD *)&v24 + 1))
    goto LABEL_12;
  v10 = sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
  if ((swift_dynamicCast(v22, &v23, (char *)&type metadata for Any + 8, v10, 6) & 1) == 0)
  {
LABEL_13:
    v11 = 0;
    goto LABEL_14;
  }
  v11 = *(id *)&v22[0];
  v12 = objc_msgSend(v11, "view");
  if (!v12)
  {
LABEL_21:
    __break(1u);
    return;
  }
  v13 = v12;
  sub_1001810AC(v12);

LABEL_14:
  v14 = objc_msgSend(v4, "rootViewController");
  if (v14)
  {
    v15 = v14;
    v16 = objc_msgSend(v14, "view");
    if (v16)
    {
      v17 = v16;
      v18 = sub_10000782C(v17, (uint64_t)v17);

      v19 = (uint64_t *)(v1 + OBJC_IVAR____TtC11MobileNotes33ICAppIntentsInteractionController_interactions);
      swift_beginAccess(v19, v22, 1, 0);
      v20 = *v19;
      *v19 = v18;

      swift_bridgeObjectRelease(v20);
      return;
    }
    goto LABEL_20;
  }

}

unint64_t sub_100017338()
{
  unint64_t result;

  result = qword_1005D1E00;
  if (!qword_1005D1E00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChangeFolderViewSettingIntent, &type metadata for ChangeFolderViewSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1005D1E00);
  }
  return result;
}

unint64_t sub_10001737C()
{
  unint64_t result;

  result = qword_1005D2020;
  if (!qword_1005D2020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChangeFolderViewSettingIntent, &type metadata for ChangeFolderViewSettingIntent);
    atomic_store(result, &qword_1005D2020);
  }
  return result;
}

unint64_t sub_1000173C0()
{
  unint64_t result;

  result = qword_1005D1E08;
  if (!qword_1005D1E08)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChangeFolderViewSettingIntent, &type metadata for ChangeFolderViewSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1005D1E08);
  }
  return result;
}

unint64_t static ChangeFolderViewSettingIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_100017428(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = &unk_10045F908;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = &unk_10045F920;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for ICSelectionStateController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D6770;
  if (!qword_1005D6770)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ICSelectionStateController);
  return result;
}

uint64_t sub_10001750C()
{
  return type metadata accessor for ICSelectionStateController(0);
}

void sub_100017560(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100005684(*(_QWORD *)(v1 + 16), (uint64_t)sub_100019380, NSManagedObjectID_ptr, a1);
}

void sub_10001759C(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100012AF4(*(_QWORD *)(v1 + 16), (uint64_t)sub_100019380, (uint64_t (*)(uint64_t))sub_100018628, a1);
}

void sub_1000175D8(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100005684(*(_QWORD *)(v1 + 16), (uint64_t)sub_100019380, ICVirtualSmartFolderItemIdentifier_ptr, a1);
}

void sub_100017614(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100012AF4(*(_QWORD *)(v1 + 16), (uint64_t)sub_100019380, (uint64_t (*)(uint64_t))sub_1000187EC, a1);
}

void sub_100017650(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100005A68(*(_QWORD *)(v1 + 16), (uint64_t)sub_100019380, &OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_currentActivityStreamSelection, a1);
}

void sub_10001768C(uint64_t *a1@<X8>)
{
  uint64_t v1;

  sub_100012AF4(*(_QWORD *)(v1 + 16), (uint64_t)sub_100019380, (uint64_t (*)(uint64_t))sub_1000189CC, a1);
}

uint64_t sub_1000176B4()
{
  uint64_t v0;

  return sub_100005814(*(_QWORD *)(v0 + 16));
}

void sub_100017788(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10000E948(*(_QWORD *)(v1 + 16), a1);
}

void sub_100017874(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10001788C(*(_QWORD *)(v1 + 16), a1);
}

void sub_10001788C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v20[16];
  _QWORD *v21;
  _QWORD v22[9];
  char v23;
  uint64_t v24;
  char v25[24];
  char *v26;

  v2 = a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue;
  swift_beginAccess(a1 + OBJC_IVAR____TtC11MobileNotes26ICSelectionStateController_selectionStateQueue, v25, 0, 0);
  v3 = *(_QWORD *)(v2 + 8);
  v5 = *(void **)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 40);
  v10 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v2 + 56);
  v11 = *(_QWORD *)(v2 + 64);
  v12 = *(_BYTE *)(v2 + 72);
  v13 = *(_QWORD *)(v2 + 80);
  v22[0] = *(_QWORD *)v2;
  v4 = (void *)v22[0];
  v22[1] = v3;
  v22[2] = v5;
  v22[3] = v6;
  v22[4] = v8;
  v22[5] = v7;
  v22[6] = v10;
  v22[7] = v9;
  v22[8] = v11;
  v23 = v12;
  v24 = v13;
  v21 = v22;
  v14 = v5;
  v15 = v4;
  sub_100166B74(v6, v8);
  sub_100166B74(v7, v10);
  v16 = type metadata accessor for ICSelectionStateModel(0);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v13);
  OS_dispatch_queue.sync<A>(execute:)(&v26, sub_100019380, v20, v16);

  sub_100012C50(v6, v8);
  sub_100012C50(v7, v10);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(v9);
  v17 = v26;
  v18 = *(_QWORD *)&v26[OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_currentFirstVisibleObjectIDURLForContainerObjectIDURL];
  *a2 = v18;
  swift_bridgeObjectRetain(v18);

}

void sub_1000179EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[7];

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    v10[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v10[2] = &unk_100461820;
    v10[3] = &unk_100461838;
    sub_10001843C(319);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_1002D9F54(319, &qword_1005D7CC0, &qword_1005CF138);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        sub_1002D9F54(319, &qword_1005D7CC8, &qword_1005CF140);
        if (v9 <= 0x3F)
        {
          v10[6] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 7, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t type metadata accessor for FastSyncPresenceController(uint64_t a1)
{
  return sub_100010414(a1, (uint64_t *)&unk_1005D7CA8, (uint64_t)&nominal type descriptor for FastSyncPresenceController);
}

uint64_t sub_100017AFC()
{
  return type metadata accessor for FastSyncPresenceController(0);
}

id sub_100017B04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char *v4;
  char *v5;
  objc_class *ObjectType;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  id v22;
  objc_super v24;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[OBJC_IVAR___ICFastSyncPresenceController_cloudConfiguration] = 0;
  v11 = &v5[OBJC_IVAR___ICFastSyncPresenceController_controllerPool];
  v12 = type metadata accessor for FastSyncControllerPool(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = &v5[OBJC_IVAR___ICFastSyncPresenceController_editorActivityChanges];
  v14 = sub_100012E18(&qword_1005CF138);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  v15 = &v5[OBJC_IVAR___ICFastSyncPresenceController_noteActivityShareChanges];
  v16 = sub_100012E18(&qword_1005CF140);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  v17 = &v5[OBJC_IVAR___ICFastSyncPresenceController_logger];
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v17, a1, v18);
  *(_QWORD *)&v5[OBJC_IVAR___ICFastSyncPresenceController_noteContext] = a4;
  v20 = &v5[OBJC_IVAR___ICFastSyncPresenceController_verboseLoggingCategory];
  *(_QWORD *)v20 = a2;
  *((_QWORD *)v20 + 1) = a3;
  v24.receiver = v5;
  v24.super_class = ObjectType;
  v21 = a4;
  v22 = objc_msgSendSuper2(&v24, "init");
  sub_100017FEC();

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
  return v22;
}

uint64_t _s11MobileNotes26FastSyncPresenceControllerC5setUpyyFZ_0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v0 = sub_100012E18(&qword_1005D4680);
  __chkstk_darwin(v0);
  v2 = (char *)&v31 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v10)
  {
    v11 = v10;
    static Logger.fastSyncPresence.getter();
    v12 = objc_allocWithZone((Class)type metadata accessor for FastSyncPresenceController(0));
    v13 = v11;
    v14 = sub_100017B04((uint64_t)v9, 0xD000000000000010, 0x8000000100486B00, v13);

    v15 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v2, 1, 1, v15);
    v16 = (_QWORD *)swift_allocObject(&unk_1005660A0, 40, 7);
    v16[2] = 0;
    v16[3] = 0;
    v16[4] = v14;
    v17 = v14;
    v18 = sub_1002D0324((uint64_t)v2, (uint64_t)&unk_1005D7DC8, (uint64_t)v16);
    sub_100012DDC((uint64_t)v2, &qword_1005D4680);
    v19 = qword_1005D7C38;
    qword_1005D7C38 = v18;

    return swift_release(v19);
  }
  else
  {
    v21 = static Logger.fastSyncPresence.getter();
    v22 = static os_log_type_t.fault.getter(v21);
    v23 = v22;
    v24 = Logger.logObject.getter(v22);
    v25 = v23;
    if (os_log_type_enabled(v24, v23))
    {
      v26 = swift_slowAlloc(32, -1);
      v27 = swift_slowAlloc(64, -1);
      v32 = v27;
      *(_DWORD *)v26 = 136315650;
      v28 = StaticString.description.getter("MobileNotes/FastSyncPresenceController.swift", 44, 2);
      v30 = v29;
      v31 = sub_1003A4190(v28, v29, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v26 + 4);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v26 + 12) = 2048;
      v31 = 71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v26 + 14);
      *(_WORD *)(v26 + 22) = 2080;
      v31 = sub_1003A4190(0xD00000000000004CLL, 0x8000000100486AB0, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v26 + 24);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed assertion at %s:%lu: %s", (uint8_t *)v26, 0x20u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
}

double sub_100017FEC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  double result;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void *v49;
  _QWORD v50[3];
  char v51[24];

  v1 = sub_100012E18(&qword_1005D7D90);
  __chkstk_darwin(v1);
  v3 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v48 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v48);
  v47 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005D7D88);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v42 - v10;
  v49 = v0;
  v12 = (uint64_t)&v0[OBJC_IVAR___ICFastSyncPresenceController_editorActivityChanges];
  swift_beginAccess(&v0[OBJC_IVAR___ICFastSyncPresenceController_editorActivityChanges], v51, 0, 0);
  sub_100012CE8(v12, (uint64_t)v11, &qword_1005D7D88);
  v13 = sub_100012E18(&qword_1005CF138);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v11, 1, v13);
  sub_100012DDC((uint64_t)v11, &qword_1005D7D88);
  if (v15 == 1)
  {
    v17 = sub_100012E18(&qword_1005D7D98);
    v18 = swift_allocObject(v17, 56, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100456A10;
    v19 = (void *)ICNoteEditorNoteWillAppearNotification;
    v20 = (void *)ICNoteEditorNoteWillDisappearNotification;
    *(_QWORD *)(v18 + 32) = ICNoteEditorNoteWillAppearNotification;
    *(_QWORD *)(v18 + 40) = v20;
    v45 = v14;
    v46 = v3;
    v43 = (id)ICNoteEditorNoteDidDisappearNotification;
    v44 = v9;
    *(_QWORD *)(v18 + 48) = ICNoteEditorNoteDidDisappearNotification;
    v50[0] = v18;
    v21 = v48;
    v22 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v47, (uint64_t)v49 + OBJC_IVAR___ICFastSyncPresenceController_logger, v48);
    v23 = *(unsigned __int8 *)(v4 + 80);
    v24 = (v23 + 16) & ~v23;
    v25 = swift_allocObject(&unk_100566050, v24 + v5, v23 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v25 + v24, v22, v21);
    v26 = type metadata accessor for FastSyncEditorActivityChangeHandler(0);
    v27 = v19;
    v28 = v20;
    v29 = v43;
    v30 = sub_100012E18(&qword_1005D7DA0);
    v31 = sub_100016638(&qword_1005D7DA8, &qword_1005D7DA0, (uint64_t)&protocol conformance descriptor for [A]);
    v32 = (uint64_t)v44;
    NotificationSource.init<A>(observing:object:transform:)(v50, 0, sub_1002DA058, v25, v26, v30, v31);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v32, 0, 1, v13);
    swift_beginAccess(v12, v50, 33, 0);
    sub_100164108(v32, v12, &qword_1005D7D88);
    swift_endAccess(v50);
    v33 = (void *)ICCloudSyncingObjectDidUpdateShareNotification;
    v34 = swift_allocObject(&unk_100566078, 24, 7);
    v35 = v49;
    *(_QWORD *)(v34 + 16) = v49;
    v36 = v33;
    v37 = v35;
    v38 = sub_100012E18(&qword_1005D7DB0);
    v39 = (uint64_t)v46;
    NotificationSource.init(observing:object:transform:)(v36, 0, sub_1002DA0A4, v34, v38);
    v40 = sub_100012E18(&qword_1005CF140);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
    v41 = (uint64_t)&v37[OBJC_IVAR___ICFastSyncPresenceController_noteActivityShareChanges];
    swift_beginAccess(&v37[OBJC_IVAR___ICFastSyncPresenceController_noteActivityShareChanges], v50, 33, 0);
    sub_100164108(v39, v41, &qword_1005D7D90);
    *(_QWORD *)&result = swift_endAccess(v50).n128_u64[0];
  }
  return result;
}

uint64_t type metadata accessor for ActivityStreamHeaderView()
{
  return objc_opt_self(_TtC11MobileNotes24ActivityStreamHeaderView);
}

id sub_1000183D4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___label;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___label);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___label);
  }
  else
  {
    v4 = sub_100006C74();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_100018430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002B5730);
}

void sub_10001843C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D7CB8)
  {
    v2 = type metadata accessor for FastSyncControllerPool(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D7CB8);
  }
}

uint64_t sub_100018490(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 7, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for FastSyncControllerPool(uint64_t a1)
{
  return sub_100010414(a1, qword_1005D73D8, (uint64_t)&nominal type descriptor for FastSyncControllerPool);
}

void sub_100018530(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[10];

  sub_100018C7C(319, &qword_1005D1278, type metadata accessor for ICSelectionStateModel.ObjectSelection);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100018C7C(319, &qword_1005D1280, type metadata accessor for ICSelectionStateModel.ContainerSelection);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_1004559A8;
      v8[3] = &unk_1004559C0;
      v8[4] = &unk_1004559C0;
      v8[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[6] = &unk_1004559C0;
      sub_100018C7C(319, (unint64_t *)&qword_1005D2CD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        v8[8] = &unk_1004559C0;
        v8[9] = &unk_1004559C0;
        swift_updateClassMetadata2(a1, 256, 10, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_100018628()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _BYTE v15[24];

  v1 = sub_100012E18(&qword_1005D1500);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for ICSelectionStateModel.ContainerSelection(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v15[-v9 - 8];
  v11 = v0 + OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_containerSelection;
  swift_beginAccess(v11, v15, 0, 0);
  sub_100012CE8(v11, (uint64_t)v3, &qword_1005D1500);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    sub_10013B170((uint64_t)v3, (uint64_t)v10, type metadata accessor for ICSelectionStateModel.ContainerSelection);
    sub_10013B170((uint64_t)v10, (uint64_t)v8, type metadata accessor for ICSelectionStateModel.ContainerSelection);
    v12 = (char *)&loc_100018784 + 4 * byte_100455902[swift_getEnumCaseMultiPayload(v8, v4)];
    __asm { BR              X10 }
  }
  sub_100012DDC((uint64_t)v3, &qword_1005D1500);
  return 0;
}

void sub_1000187B8()
{
  uint64_t v0;

  JUMPOUT(0x100018798);
}

void sub_1000187C4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
  sub_100012E18(&qword_1005D1398);
  JUMPOUT(0x10001872CLL);
}

uint64_t sub_1000187EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _BYTE v15[24];

  v1 = sub_100012E18(&qword_1005D1508);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for ICSelectionStateModel.ObjectSelection(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v15[-v9 - 8];
  v11 = v0 + OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_objectSelection;
  swift_beginAccess(v11, v15, 0, 0);
  sub_100012CE8(v11, (uint64_t)v3, &qword_1005D1508);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    sub_10013B170((uint64_t)v3, (uint64_t)v10, type metadata accessor for ICSelectionStateModel.ObjectSelection);
    sub_10013B170((uint64_t)v10, (uint64_t)v8, type metadata accessor for ICSelectionStateModel.ObjectSelection);
    v12 = (char *)&loc_100018948 + 4 * byte_10045590E[swift_getEnumCaseMultiPayload(v8, v4)];
    __asm { BR              X10 }
  }
  sub_100012DDC((uint64_t)v3, &qword_1005D1508);
  return 0;
}

void sub_1000189C0()
{
  uint64_t v0;

  JUMPOUT(0x1000189A0);
}

uint64_t sub_1000189CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _BYTE v15[24];

  v1 = sub_100012E18(&qword_1005D1508);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for ICSelectionStateModel.ObjectSelection(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v15[-v9 - 8];
  v11 = v0 + OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_objectSelection;
  swift_beginAccess(v11, v15, 0, 0);
  sub_100012CE8(v11, (uint64_t)v3, &qword_1005D1508);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    sub_10013B170((uint64_t)v3, (uint64_t)v10, type metadata accessor for ICSelectionStateModel.ObjectSelection);
    sub_10013B170((uint64_t)v10, (uint64_t)v8, type metadata accessor for ICSelectionStateModel.ObjectSelection);
    v12 = (char *)&loc_100018B28 + 4 * byte_100455908[swift_getEnumCaseMultiPayload(v8, v4)];
    __asm { BR              X10 }
  }
  sub_100012DDC((uint64_t)v3, &qword_1005D1508);
  return 0;
}

void sub_100018BA0()
{
  void **v0;
  void *v1;

  v1 = *v0;

  JUMPOUT(0x100018B80);
}

void sub_100018BB4()
{
  uint64_t v0;

  JUMPOUT(0x100018B80);
}

void sub_100018BC0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[32];
  _QWORD v7[6];

  v7[0] = &unk_100455A78;
  sub_100018C7C(319, (unint64_t *)&qword_1005D2CD0, (uint64_t (*)(uint64_t))&type metadata accessor for URL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v6, &unk_100455A90, *(_QWORD *)(v2 - 8) + 64);
    v7[1] = v6;
    v4 = type metadata accessor for URL(319);
    if (v5 <= 0x3F)
    {
      v7[2] = *(_QWORD *)(v4 - 8) + 64;
      v7[3] = &unk_100455AA8;
      v7[4] = &unk_100455AA8;
      v7[5] = &unk_100455AA8;
      swift_initEnumMetadataMultiPayload(a1, 256, 6, v7);
    }
  }
}

void sub_100018C7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100018CC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  _BYTE v5[32];
  _QWORD v6[6];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v5, v4, v4);
    v6[0] = v5;
    v6[1] = v4;
    v6[2] = v4;
    v6[3] = &unk_100455AD0;
    v6[4] = &unk_100455AA8;
    v6[5] = &unk_100455AA8;
    swift_initEnumMetadataMultiPayload(a1, 256, 6, v6);
    return 0;
  }
  return result;
}

uint64_t sub_100018D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _BYTE v15[24];

  v1 = sub_100012E18(&qword_1005D1500);
  __chkstk_darwin(v1);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = type metadata accessor for ICSelectionStateModel.ContainerSelection(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6);
  v10 = &v15[-v9 - 8];
  v11 = v0 + OBJC_IVAR____TtC11MobileNotes21ICSelectionStateModel_containerSelection;
  swift_beginAccess(v11, v15, 0, 0);
  sub_100012CE8(v11, (uint64_t)v3, &qword_1005D1500);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) != 1)
  {
    sub_10013B170((uint64_t)v3, (uint64_t)v10, type metadata accessor for ICSelectionStateModel.ContainerSelection);
    sub_10013B170((uint64_t)v10, (uint64_t)v8, type metadata accessor for ICSelectionStateModel.ContainerSelection);
    v12 = (char *)&loc_100018EBC + 4 * byte_1004558FC[swift_getEnumCaseMultiPayload(v8, v4)];
    __asm { BR              X10 }
  }
  sub_100012DDC((uint64_t)v3, &qword_1005D1500);
  return 0;
}

void sub_100018EF0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 8));
  sub_100012E18(&qword_1005D1398);
  JUMPOUT(0x100018E64);
}

void sub_100018F18()
{
  uint64_t v0;

  JUMPOUT(0x100018ED0);
}

Swift::Void __swiftcall ICAppIntentsManager.registerDependencies()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_dependencyManager);
  v10 = 0xD000000000000021;
  v11 = 0x8000000100476B70;
  swift_retain(v2);
  AnyHashable.init<A>(_:)(v12, &v10, &type metadata for String, &protocol witness table for String);
  v3 = sub_1000163BC(0, &qword_1005D04C0, ICUnifiedNoteContext_ptr);
  AppDependencyManager.add<A>(key:dependency:)(v12, &unk_1005D9D60, 0, v3);
  swift_release(v2);
  sub_100016108((uint64_t)v12);
  v4 = v1 + OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_loggingConfiguration;
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_loggingConfiguration);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC11MobileNotes19ICAppIntentsManager_loggingConfiguration + 8);
  v8 = *(_QWORD *)(v4 + 16);
  v7 = *(_QWORD *)(v4 + 24);
  v9 = (_QWORD *)swift_allocObject(&unk_10056A090, 48, 7);
  v9[2] = v6;
  v9[3] = v5;
  v9[4] = v8;
  v9[5] = v7;
  v10 = 0xD000000000000024;
  v11 = 0x8000000100476B40;
  swift_retain(v2);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  AnyHashable.init<A>(_:)(v12, &v10, &type metadata for String, &protocol witness table for String);
  AppDependencyManager.add<A>(key:dependency:)(v12, &unk_1005D9D70, v9, &type metadata for LoggingConfiguration);
  swift_release(v2);
  sub_100016108((uint64_t)v12);
  swift_release(v9);
}

unint64_t sub_1000191A0()
{
  unint64_t result;

  result = qword_1005CFCF0;
  if (!qword_1005CFCF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenAccountIntent, &type metadata for OpenAccountIntent);
    atomic_store(result, (unint64_t *)&qword_1005CFCF0);
  }
  return result;
}

unint64_t sub_1000191E4()
{
  unint64_t result;

  result = qword_1005D20B0;
  if (!qword_1005D20B0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenAccountIntent, &type metadata for OpenAccountIntent);
    atomic_store(result, &qword_1005D20B0);
  }
  return result;
}

unint64_t sub_100019228()
{
  unint64_t result;

  result = qword_1005CFCF8;
  if (!qword_1005CFCF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenAccountIntent, &type metadata for OpenAccountIntent);
    atomic_store(result, (unint64_t *)&qword_1005CFCF8);
  }
  return result;
}

unint64_t static OpenAccountIntent.persistentIdentifier.getter()
{
  return 0xD000000000000015;
}

unint64_t sub_100019290()
{
  unint64_t result;

  result = qword_1005D4860;
  if (!qword_1005D4860)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenFolderIntent, &type metadata for OpenFolderIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4860);
  }
  return result;
}

unint64_t sub_1000192D4()
{
  unint64_t result;

  result = qword_1005D20F8;
  if (!qword_1005D20F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenFolderIntent, &type metadata for OpenFolderIntent);
    atomic_store(result, &qword_1005D20F8);
  }
  return result;
}

unint64_t sub_100019318()
{
  unint64_t result;

  result = qword_1005D4868;
  if (!qword_1005D4868)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenFolderIntent, &type metadata for OpenFolderIntent);
    atomic_store(result, (unint64_t *)&qword_1005D4868);
  }
  return result;
}

unint64_t static OpenFolderIntent.persistentIdentifier.getter()
{
  return 0xD000000000000014;
}

id sub_100019380@<X0>(_QWORD *a1@<X8>)
{
  return sub_100010148(a1);
}

void sub_100019394(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  _BYTE v8[16];
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *(_QWORD *)(a1 + 56);
  v9 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v6 = v2 & 0xFFFFFFFFFFFFFF8;
    else
      v6 = v2;
    swift_bridgeObjectRetain(v2);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    sub_1001948C4(&v9);
    if (!v3)
      return;
  }
  else
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return;
  }
  sub_10014BD1C(a1 + 64, (uint64_t)v8, &qword_1005D6790);
  v4 = sub_10014BD1C((uint64_t)v8, (uint64_t)&v10, &qword_1005D6790);
  if (v11 == 1)
    return;
  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  v4 = v10;
  if ((v10 & 0x8000000000000000) == 0 && v10 < v3)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      if ((v2 & 0xC000000000000001) == 0)
      {
        if ((unint64_t)v10 >= *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v5 = *(id *)(v2 + 8 * v10 + 32);
        goto LABEL_11;
      }
LABEL_19:
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v2);
LABEL_11:
      v7 = v5;
      ((void (*)(id *))v3)(&v7);

    }
  }
}

void sub_1000194AC()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  _OWORD v3[5];
  uint64_t v4;

  v1 = *(_OWORD *)(v0 + 64);
  v3[2] = *(_OWORD *)(v0 + 48);
  v3[3] = v1;
  v3[4] = *(_OWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 96);
  v2 = *(_OWORD *)(v0 + 32);
  v3[0] = *(_OWORD *)(v0 + 16);
  v3[1] = v2;
  sub_100019394((uint64_t)v3);
}

double sub_1000194EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v25 = a3;
  v26 = a4;
  v23 = a1;
  v24 = a2;
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v22);
  v27 = _swiftEmptyArrayStorage;
  v16 = sub_100019C6C((unint64_t *)&qword_1005D6870, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_100012E18((uint64_t *)&unk_1005CEF40);
  v18 = sub_100016638((unint64_t *)&qword_1005D6880, (uint64_t *)&unk_1005CEF40, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v17, v18, v10, v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v6);
  *(_QWORD *)a5 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000030, 0x8000000100477290, v15, v12, v9, 0);
  *(_QWORD *)&result = 50;
  *(_OWORD *)(a5 + 8) = xmmword_10045F8B0;
  *(_QWORD *)(a5 + 56) = _swiftEmptyArrayStorage;
  *(_QWORD *)(a5 + 64) = 0;
  *(_BYTE *)(a5 + 72) = 1;
  *(_QWORD *)(a5 + 80) = _swiftEmptyArrayStorage;
  v20 = v24;
  *(_QWORD *)(a5 + 24) = v23;
  *(_QWORD *)(a5 + 32) = v20;
  v21 = v26;
  *(_QWORD *)(a5 + 40) = v25;
  *(_QWORD *)(a5 + 48) = v21;
  return result;
}

unint64_t sub_100019704()
{
  unint64_t result;

  result = qword_1005D7798;
  if (!qword_1005D7798)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteTagsIntent, &type metadata for DeleteTagsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D7798);
  }
  return result;
}

unint64_t sub_100019748()
{
  unint64_t result;

  result = qword_1005D2038;
  if (!qword_1005D2038)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteTagsIntent, &type metadata for DeleteTagsIntent);
    atomic_store(result, &qword_1005D2038);
  }
  return result;
}

unint64_t sub_10001978C()
{
  unint64_t result;

  result = qword_1005D77A0;
  if (!qword_1005D77A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteTagsIntent, &type metadata for DeleteTagsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D77A0);
  }
  return result;
}

unint64_t static DeleteTagsIntent.persistentIdentifier.getter()
{
  return 0xD000000000000014;
}

unint64_t sub_1000197F4()
{
  unint64_t result;

  result = qword_1005DB800;
  if (!qword_1005DB800)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNoteIntent, &type metadata for OpenNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005DB800);
  }
  return result;
}

unint64_t sub_100019838()
{
  unint64_t result;

  result = qword_1005D1F20;
  if (!qword_1005D1F20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNoteIntent, &type metadata for OpenNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005D1F20);
  }
  return result;
}

unint64_t sub_10001987C()
{
  unint64_t result;

  result = qword_1005DB808;
  if (!qword_1005DB808)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNoteIntent, &type metadata for OpenNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005DB808);
  }
  return result;
}

unint64_t static OpenNoteIntent.persistentIdentifier.getter()
{
  return 0xD000000000000012;
}

unint64_t sub_1000198E4()
{
  unint64_t result;

  result = qword_1005DB700;
  if (!qword_1005DB700)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTagIntent, &type metadata for OpenTagIntent);
    atomic_store(result, (unint64_t *)&qword_1005DB700);
  }
  return result;
}

unint64_t sub_100019928()
{
  unint64_t result;

  result = qword_1005D2140;
  if (!qword_1005D2140)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTagIntent, &type metadata for OpenTagIntent);
    atomic_store(result, &qword_1005D2140);
  }
  return result;
}

unint64_t sub_10001996C()
{
  unint64_t result;

  result = qword_1005DB708;
  if (!qword_1005DB708)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTagIntent, &type metadata for OpenTagIntent);
    atomic_store(result, (unint64_t *)&qword_1005DB708);
  }
  return result;
}

unint64_t static OpenTagIntent.persistentIdentifier.getter()
{
  return 0xD000000000000011;
}

unint64_t sub_1000199D4()
{
  unint64_t result;

  result = qword_1005D78A0;
  if (!qword_1005D78A0)
  {
    result = swift_getWitnessTable(&unk_100454788, &type metadata for NotesFeature);
    atomic_store(result, (unint64_t *)&qword_1005D78A0);
  }
  return result;
}

uint64_t sub_100019A18()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

const char *sub_100019A24()
{
  return "Notes";
}

unint64_t sub_100019A38()
{
  unint64_t result;

  result = qword_1005D5B10;
  if (!qword_1005D5B10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNotesViewIntent, &type metadata for OpenNotesViewIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5B10);
  }
  return result;
}

unint64_t sub_100019A7C()
{
  unint64_t result;

  result = qword_1005D2080;
  if (!qword_1005D2080)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNotesViewIntent, &type metadata for OpenNotesViewIntent);
    atomic_store(result, &qword_1005D2080);
  }
  return result;
}

unint64_t sub_100019AC0()
{
  unint64_t result;

  result = qword_1005D5B18;
  if (!qword_1005D5B18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNotesViewIntent, &type metadata for OpenNotesViewIntent);
    atomic_store(result, (unint64_t *)&qword_1005D5B18);
  }
  return result;
}

unint64_t static OpenNotesViewIntent.persistentIdentifier.getter()
{
  return 0xD000000000000019;
}

unint64_t sub_100019B28()
{
  unint64_t result;

  result = qword_1005D7320;
  if (!qword_1005D7320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MoveNotesToFolderIntent, &type metadata for MoveNotesToFolderIntent);
    atomic_store(result, (unint64_t *)&qword_1005D7320);
  }
  return result;
}

unint64_t sub_100019B6C()
{
  unint64_t result;

  result = qword_1005D72F0;
  if (!qword_1005D72F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MoveNotesToFolderIntent, &type metadata for MoveNotesToFolderIntent);
    atomic_store(result, (unint64_t *)&qword_1005D72F0);
  }
  return result;
}

unint64_t sub_100019BB0()
{
  unint64_t result;

  result = qword_1005D7328;
  if (!qword_1005D7328)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MoveNotesToFolderIntent, &type metadata for MoveNotesToFolderIntent);
    atomic_store(result, (unint64_t *)&qword_1005D7328);
  }
  return result;
}

unint64_t static MoveNotesToFolderIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

void sub_100019C18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005DA840)
  {
    v2 = type metadata accessor for Date(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005DA840);
  }
}

uint64_t sub_100019C6C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10001AB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001ABE0(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a1, a3, "%s", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_10001AC50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Defaults set to launch to folder list", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10001B650(void *a1, NSObject *a2)
{
  _DWORD v3[2];

  v3[0] = 67109120;
  v3[1] = objc_msgSend(a1, "isSystemPaper");
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Apply State Restore - stateRestoreArchive.isSystemPaper: %d", (uint8_t *)v3, 8u);
  sub_100015EC8();
}

void sub_10001D078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,id location,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void sub_10001D464()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100015ED0();
  sub_10001603C((void *)&_mh_execute_header, v0, v1, "Couldn't resolve noteContainer for containerObjectID %@ in enforcedNoteContainerViewModeForContainerObjectID.", v2);
  sub_100015EC8();
}

void sub_10001D6D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10001EF30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001F1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001F730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100020468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100021600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100021B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000221A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Cloud context received application did finish launching notification", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100022FD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Search indexing disabled for PPT test", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100023684()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Registered for remote notifications with device token: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100024678(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", a2 == 0);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, BOOL, id))(v4 + 16))(v4, a2 == 0, v5);

  }
}

uint64_t sub_100024C00(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICThumbnailService sharedThumbnailService](ICThumbnailService, "sharedThumbnailService"));
  v5 = *(_QWORD *)(a1 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100024CA8;
  v8[3] = &unk_10054F8E0;
  v9 = v3;
  v6 = v3;
  objc_msgSend(v4, "thumbnailWithConfiguration:completion:", v5, v8);

  return 0;
}

void sub_100024CA8(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = a2;
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "image"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ic_PNGData"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "error"));

    (*(void (**)(uint64_t, void *, void *))(v2 + 16))(v2, v4, v5);
  }
}

id sub_100024D40(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", a2);
}

void sub_100024D78(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BOOL8 v16;
  id WeakRetained;
  id v18;

  v18 = a2;
  v6 = a4;
  objc_msgSend(v18, "setDisplayGenericTitle:", 1);
  if (objc_msgSend(v6, "isCollapsible"))
    v7 = *(_QWORD *)(a1 + 40) == 0;
  else
    v7 = 0;
  objc_msgSend(v18, "setDisplayDisclosure:", v7);
  v9 = objc_opt_class(ICFolderListSectionIdentifier, v8);
  v10 = ICDynamicCast(v9, v6);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v18, "setFolderListSectionIdentifier:", v11);

  v13 = objc_opt_class(ICNoteSectionIdentifier, v12);
  v14 = ICDynamicCast(v13, v6);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  objc_msgSend(v18, "setNoteSectionIdentifier:", v15);

  if ((objc_msgSend(v18, "ic_inSidebar") & 1) != 0)
  {
    v16 = 1;
  }
  else if (+[UIDevice ic_isVision](UIDevice, "ic_isVision"))
  {
    v16 = *(_QWORD *)(a1 + 40) == 0;
  }
  else
  {
    v16 = 0;
  }
  objc_msgSend(v18, "setUsesSidebarHeaderConfiguration:", v16);
  if (+[UIDevice ic_isVision](UIDevice, "ic_isVision") && *(_QWORD *)(a1 + 40))
    objc_msgSend(v18, "setHorizontalInsetsOverride:", 0.0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(v18, "setStyleForCalculator:", objc_msgSend(WeakRetained, "shouldStyleForCalculator"));

}

void sub_100024ECC(id *a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id WeakRetained;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;

  v18 = a2;
  v6 = a4;
  v8 = objc_opt_class(NSManagedObjectID, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    if (objc_msgSend(v6, "ic_isEntityOfClass:", objc_opt_class(ICNoteContainer, v9)))
    {
      WeakRetained = objc_loadWeakRetained(a1 + 4);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "modernViewContext"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectWithID:", v6));
      objc_msgSend(v18, "setNoteContainer:", v13);
LABEL_6:

      goto LABEL_7;
    }
    if (objc_msgSend(v6, "ic_isEntityOfClass:", objc_opt_class(NoteCollectionObject, v10)))
    {
      WeakRetained = objc_loadWeakRetained(a1 + 4);
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "legacyViewContext"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectWithID:", v6));
      objc_msgSend(v18, "setNoteCollection:", v13);
      goto LABEL_6;
    }
  }
LABEL_7:
  v14 = objc_loadWeakRetained(a1 + 5);
  objc_msgSend(v18, "setPresentingViewController:", v14);

  objc_msgSend(v18, "setHasGroupInset:", 1);
  objc_msgSend(v18, "setHasDisclosureIndicator:", 1);
  v15 = objc_loadWeakRetained(a1 + 4);
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "unsupportedFolderInfoButtonTapHandler"));
  objc_msgSend(v18, "setUnsupportedFolderInfoButtonTapHandler:", v16);

  v17 = objc_loadWeakRetained(a1 + 6);
  objc_msgSend(v18, "setAccessibilityCustomActionsDelegate:", v17);

}

void sub_100025064(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  id v20;
  id v21;

  v21 = a2;
  v6 = a4;
  v8 = objc_opt_class(NSManagedObjectID, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v11 = objc_opt_class(NSManagedObjectID, v10);
    v12 = ICCheckedDynamicCast(v11, v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "emptyConfigurationForNoteWithObjectID:", v13));

    v15 = objc_loadWeakRetained((id *)(a1 + 32));
    if (v15)
    {
      v16 = objc_loadWeakRetained((id *)(a1 + 32));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "collectionView"));
      objc_msgSend(v14, "setStyleForCalculator:", objc_msgSend(v17, "ic_behavior") == (id)1);

    }
    else
    {
      objc_msgSend(v14, "setStyleForCalculator:", 0);
    }

    v18 = objc_loadWeakRetained((id *)(a1 + 32));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "collectionView"));
    objc_msgSend(v21, "setConfiguration:synchronously:", v14, objc_msgSend(v19, "ic_shouldOptimizeForScrolling") ^ 1);

    v20 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v21, "setAccessibilityCustomActionsDelegate:", v20);

  }
}

void sub_1000251C8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id WeakRetained;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;

  v18 = a2;
  v6 = a4;
  v8 = objc_opt_class(NSManagedObjectID, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v11 = objc_opt_class(NSManagedObjectID, v10);
    v12 = ICCheckedDynamicCast(v11, v6);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "emptyConfigurationForNoteWithObjectID:", v13));

    v15 = objc_loadWeakRetained((id *)(a1 + 32));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "collectionView"));
    objc_msgSend(v18, "setConfiguration:synchronously:", v14, objc_msgSend(v16, "ic_shouldOptimizeForScrolling") ^ 1);

    v17 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v18, "setAccessibilityCustomActionsDelegate:", v17);

  }
}

void sub_1000252CC(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  id WeakRetained;
  void *v12;
  void *v13;
  id v14;
  id v15;

  v15 = a2;
  v6 = a4;
  v8 = objc_opt_class(NSManagedObjectID, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    v9 = v6;
    if (objc_msgSend(v9, "ic_isEntityOfClass:", objc_opt_class(ICFolder, v10)))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "modernViewContext"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectWithID:", v9));

      objc_msgSend(v15, "setFolder:", v13);
      v14 = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(v15, "setAccessibilityCustomActionsDelegate:", v14);

    }
  }

}

void sub_1000253BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend(v7, "setAllowsExclusion:", 1);
  objc_msgSend(v7, "setHasGroupInset:", 0);
  objc_msgSend(v7, "setHasHorizontalScrolling:", 1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000254A8;
  v10[3] = &unk_10054FA60;
  objc_copyWeak(&v11, (id *)(a1 + 32));
  objc_msgSend(v7, "setSelectionDidChange:", v10);
  objc_destroyWeak(&v11);

}

void sub_100025494(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000254A8(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  void (**v23)(_QWORD, _QWORD);
  id v24;

  v24 = a2;
  v3 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionViewDiffableDataSource"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "snapshot"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemIdentifiers"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ic_objectPassingTest:", &stru_10054FA38));

  if (v8)
  {
    v9 = objc_loadWeakRetained(v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "collectionViewDiffableDataSource"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "indexPathForItemIdentifier:", v8));

    v13 = objc_opt_class(ICTagDetailCell, v12);
    v14 = objc_loadWeakRetained(v3);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "collectionView"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "cellForItemAtIndexPath:", v11));
    v17 = ICDynamicCast(v13, v16);
    v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "tagSelection"));
    objc_msgSend(v24, "setTagOperator:", objc_msgSend(v19, "tagOperator"));

    objc_msgSend(v18, "updateForTagSelection:animated:", v24, 1);
  }
  v20 = objc_loadWeakRetained(v3);
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "tagSelectionDidChangeHandler"));

  if (v21)
  {
    v22 = objc_loadWeakRetained(v3);
    v23 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "tagSelectionDidChangeHandler"));
    ((void (**)(_QWORD, id))v23)[2](v23, v24);

  }
}

BOOL sub_100025668(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(ICTagDetailItemIdentifier, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

void sub_1000256B0(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  id v12;
  void **v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  void *v16;
  id v17;
  uint64_t *v18;
  id v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  _QWORD v26[4];
  id v27;
  id v28;
  id location;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend(v7, "setMaxNumberOfLines:", 0);
  objc_msgSend(v7, "setAccessibilityContainerType:", 4);
  objc_initWeak(&location, v7);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1000258D8;
  v26[3] = &unk_10054FAB0;
  objc_copyWeak(&v27, &location);
  a1 += 4;
  objc_copyWeak(&v28, a1);
  objc_msgSend(v7, "setSelectionOperatorChangeHandler:", v26);
  WeakRetained = objc_loadWeakRetained(a1);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "modernBackgroundContext"));

  v20 = 0;
  v21 = &v20;
  v22 = 0x3032000000;
  v23 = sub_100025A60;
  v24 = sub_100025A70;
  v25 = 0;
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_100025A78;
  v16 = &unk_10054FAD8;
  v18 = &v20;
  objc_copyWeak(&v19, a1);
  v12 = v11;
  v17 = v12;
  objc_msgSend(v12, "performBlockAndWait:", &v13);
  objc_msgSend(v7, "updateForTagSelection:animated:", v21[5], 0, v13, v14, v15, v16);

  objc_destroyWeak(&v19);
  _Block_object_dispose(&v20, 8);

  objc_destroyWeak(&v28);
  objc_destroyWeak(&v27);
  objc_destroyWeak(&location);

}

void sub_100025890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  id *v16;
  id *v17;
  id *v18;
  uint64_t v19;

  objc_destroyWeak(v18);
  _Block_object_dispose(&a16, 8);
  objc_destroyWeak(v17);
  objc_destroyWeak(v16);
  objc_destroyWeak((id *)(v19 - 104));
  _Unwind_Resume(a1);
}

void sub_1000258D8(uint64_t a1, uint64_t a2)
{
  id *v4;
  id WeakRetained;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id *v10;
  id v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  void (**v16)(_QWORD, _QWORD);
  id v17;
  void *v18;
  id v19;

  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tagSelection"));
  objc_msgSend(v6, "setTagOperator:", a2);

  v7 = objc_loadWeakRetained(v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "tagSelection"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[ICQuery queryForNotesMatchingTagSelection:](ICQuery, "queryForNotesMatchingTagSelection:", v8));
  v10 = (id *)(a1 + 40);
  v11 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v11, "setNoteQuery:", v9);

  v12 = objc_loadWeakRetained(v4);
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "tagSelection"));
  objc_msgSend(v12, "updateForTagSelection:animated:", v13, 0);

  v14 = objc_loadWeakRetained(v10);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "tagSelectionDidChangeHandler"));

  if (v15)
  {
    v19 = objc_loadWeakRetained(v10);
    v16 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "tagSelectionDidChangeHandler"));
    v17 = objc_loadWeakRetained(v4);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "tagSelection"));
    ((void (**)(_QWORD, void *))v16)[2](v16, v18);

  }
}

uint64_t sub_100025A60(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100025A70(uint64_t a1)
{

}

void sub_100025A78(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteQuery"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "tagSelectionWithManagedObjectContext:", *(_QWORD *)(a1 + 32)));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100025AE0(id a1, ICToolbarSummaryView *a2, NSString *a3, NSIndexPath *a4)
{
  -[ICToolbarSummaryView setShowingAsFooter:](a2, "setShowingAsFooter:", 1, a4);
}

id sub_100025AEC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  id WeakRetained;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v11 = objc_opt_class(ICFolderListSectionIdentifier, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0
    || (v13 = objc_opt_class(ICNoteSectionIdentifier, v12), (objc_opt_isKindOfClass(v9, v13) & 1) != 0))
  {
    v15 = *(void **)(a1 + 32);
    goto LABEL_4;
  }
  v18 = objc_opt_class(ICTagContainerItemIdentifier, v14);
  if ((objc_opt_isKindOfClass(v9, v18) & 1) != 0)
  {
    v15 = *(void **)(a1 + 40);
    goto LABEL_4;
  }
  v20 = objc_opt_class(ICTagDetailItemIdentifier, v19);
  if ((objc_opt_isKindOfClass(v9, v20) & 1) == 0)
  {
    v22 = objc_opt_class(NSManagedObjectID, v21);
    if ((objc_opt_isKindOfClass(v9, v22) & 1) == 0)
      goto LABEL_22;
    v23 = v9;
    if (objc_msgSend(v23, "ic_isContainerType"))
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
      v25 = objc_msgSend(WeakRetained, "noteContainerViewMode") == 0;
      v26 = 64;
      v27 = 56;
    }
    else
    {
      if (!objc_msgSend(v23, "ic_isNoteType"))
      {
        if (objc_msgSend(v23, "ic_isLegacyNoteType"))
        {
          v16 = *(id *)(a1 + 72);
          goto LABEL_21;
        }
        if (!objc_msgSend(v23, "ic_isInvitationType"))
        {
          v16 = 0;
          goto LABEL_21;
        }
      }
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
      v25 = objc_msgSend(WeakRetained, "noteContainerViewMode") == 0;
      v26 = 80;
      v27 = 72;
    }
    if (v25)
      v26 = v27;
    v16 = *(id *)(a1 + v26);

LABEL_21:
    if (v16)
      goto LABEL_5;
LABEL_22:
    v17 = 0;
    goto LABEL_23;
  }
  v15 = *(void **)(a1 + 48);
LABEL_4:
  v16 = v15;
  if (!v16)
    goto LABEL_22;
LABEL_5:
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dequeueConfiguredReusableCellWithRegistration:forIndexPath:item:", v16, v8, v9));

LABEL_23:
  return v17;
}

id sub_100025CC0(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  _BOOL4 v11;
  id v12;
  id *v13;
  id v14;
  void *v15;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (objc_msgSend(v8, "isEqualToString:", UICollectionElementKindSectionHeader))
  {
    WeakRetained = objc_loadWeakRetained(a1 + 6);
    if (objc_msgSend(WeakRetained, "isTrashFolder"))
      v11 = objc_msgSend(v9, "length") == (id)1;
    else
      v11 = 0;

    if ((objc_msgSend(v8, "isEqualToString:", UICollectionElementKindSectionFooter) & 1) != 0)
    {
      v12 = objc_msgSend(v9, "length");
      if (!v11)
        goto LABEL_9;
    }
    else if (!v11)
    {
      goto LABEL_14;
    }
    v13 = a1 + 4;
    goto LABEL_13;
  }
  if (!objc_msgSend(v8, "isEqualToString:", UICollectionElementKindSectionFooter))
  {
LABEL_14:
    v15 = 0;
    goto LABEL_15;
  }
  v12 = objc_msgSend(v9, "length");
LABEL_9:
  if (v12 != (id)1)
    goto LABEL_14;
  v13 = a1 + 5;
LABEL_13:
  v14 = *v13;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath:", v14, v9));

LABEL_15:
  return v15;
}

uint64_t sub_100025DF4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char isKindOfClass;
  id WeakRetained;
  void *v8;
  uint64_t v9;

  v3 = a2;
  v5 = objc_opt_class(ICNoteSectionIdentifier, v4);
  isKindOfClass = objc_opt_isKindOfClass(v3, v5);

  if ((isKindOfClass & 1) == 0)
    return 1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  v9 = objc_msgSend(v8, "isEditing") ^ 1;

  return v9;
}

uint64_t sub_100025E7C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  char isKindOfClass;
  id WeakRetained;
  void *v8;
  uint64_t v9;

  v3 = a2;
  v5 = objc_opt_class(ICNoteSectionIdentifier, v4);
  isKindOfClass = objc_opt_isKindOfClass(v3, v5);

  if ((isKindOfClass & 1) == 0)
    return 1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  v9 = objc_msgSend(v8, "isEditing") ^ 1;

  return v9;
}

void sub_100025F04(uint64_t a1, void *a2)
{
  void *v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void (**v11)(_QWORD, _QWORD);
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICExpansionState sharedExpansionState](ICExpansionState, "sharedExpansionState"));
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "indexer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "expansionStateContext"));
  objc_msgSend(v3, "expandItemIdentifier:context:", v12, v7);

  v8 = objc_loadWeakRetained(v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "willExpandItemHandler"));

  if (v9)
  {
    v10 = objc_loadWeakRetained(v4);
    v11 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "willExpandItemHandler"));
    ((void (**)(_QWORD, id))v11)[2](v11, v12);

  }
}

void sub_100025FF0(uint64_t a1, void *a2)
{
  void *v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void (**v11)(_QWORD, _QWORD);
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICExpansionState sharedExpansionState](ICExpansionState, "sharedExpansionState"));
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "indexer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "expansionStateContext"));
  objc_msgSend(v3, "collapseItemIdentifier:context:", v12, v7);

  v8 = objc_loadWeakRetained(v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "willCollapseItemHandler"));

  if (v9)
  {
    v10 = objc_loadWeakRetained(v4);
    v11 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "willCollapseItemHandler"));
    ((void (**)(_QWORD, id))v11)[2](v11, v12);

  }
}

void sub_1000260DC(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "window"));

  if (v3)
  {
    v5 = objc_loadWeakRetained((id *)(a1 + 40));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "lockedNotesMigratorDidMigrateNoteDelayer"));
    objc_msgSend(v4, "requestFire");

  }
}

void sub_100026164(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "window"));

  if (v3)
  {
    v4 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v4, "reloadDataAnimated:", 1);

  }
}

void sub_1000268C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000268E4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  __int128 v15;

  v11 = a2;
  v6 = objc_opt_class(NSManagedObjectID);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "object"));
  v8 = ICDynamicCast(v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (v9
    && objc_msgSend(v9, "ic_isModernNoteType")
    && (objc_msgSend(*(id *)(a1 + 32), "containsObject:", v9) & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v9);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100026A14;
    v12[3] = &unk_10054FC70;
    v13 = *(id *)(a1 + 40);
    v14 = v11;
    v15 = *(_OWORD *)(a1 + 48);
    objc_msgSend(v10, "performBlockAndWait:", v12);

    *a4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  }

}

void sub_100026A14(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "object"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_existingObjectWithID:", v3));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "indexer"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v4, "dateHeadersAreStaleForNote:", v5);

}

void sub_100027B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100027B3C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100027B4C(uint64_t a1)
{

}

void sub_100027B54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_existingObjectWithID:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

id sub_1000283CC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  double v17;
  double v18;
  void *v19;
  double v20;
  double v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "layoutAttributesForItemAtIndexPath:", v3));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v5, "frame");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "superview"));
  objc_msgSend(v6, "convertRect:toView:", v16, v8, v10, v12, v14);
  v18 = v17;

  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v19, "adjustedContentInset");
  v21 = v20;

  if (v18 >= v21)
  {
    v23 = objc_opt_class(NSManagedObjectID);
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "collectionViewDiffableDataSource"));
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "itemIdentifierForIndexPath:", v3));
    v27 = ICDynamicCast(v23, v26);
    v22 = (void *)objc_claimAutoreleasedReturnValue(v27);

  }
  else
  {
    v22 = 0;
  }

  return v22;
}

void sub_100028A38(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  BOOL v11;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "QuickNote");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_100403A84();

  }
  else
  {
    performBlockOnMainThreadAndWait(&stru_10054FD88);
  }
  v8 = *(void **)(a1 + 32);
  if (v8)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_100028B9C;
    v9[3] = &unk_10054FDB0;
    v10 = v8;
    v11 = v6 == 0;
    performBlockOnMainThreadAndWait(v9);

  }
}

void sub_100028B24(id a1)
{
  void *v1;
  unsigned int v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ICQuickNoteSessionManager sharedManager](ICQuickNoteSessionManager, "sharedManager"));
  v2 = objc_msgSend(v1, "isQuickNoteSessionActive");

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[ICQuickNoteSessionManager sharedManager](ICQuickNoteSessionManager, "sharedManager"));
    objc_msgSend(v3, "endSession");

  }
}

uint64_t sub_100028B9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

NSString *__cdecl sub_100028BB0(id a1, id a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = a2;
  v3 = objc_opt_class(NSManagedObjectID);
  v4 = ICDynamicCast(v3, v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URIRepresentation"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "absoluteString"));

  return (NSString *)v7;
}

NSURL *__cdecl sub_100028C24(id a1, NSManagedObjectID *a2)
{
  return -[NSManagedObjectID URIRepresentation](a2, "URIRepresentation");
}

void sub_100028C2C(uint64_t a1)
{
  unsigned __int8 v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  float v8;
  double v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  float v18;
  double v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;

  v2 = objc_msgSend(*(id *)(a1 + 32), "isPrimaryContentVisible");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
  v4 = v3;
  if ((v2 & 1) != 0)
    objc_msgSend(v3, "showColumn:", 0);
  else
    objc_msgSend(v3, "hideColumn:", 0);

  if (objc_msgSend(*(id *)(a1 + 32), "isTrailingContentVisible"))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "trailingSidebarViewController"));
    objc_msgSend(v5, "setSidebarHidden:", 0);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewPrimaryColumnWidth"));
    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewPrimaryColumnWidth"));
      objc_msgSend(v7, "floatValue");
      v9 = v8;

      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
      objc_msgSend(v10, "setPreferredPrimaryColumnWidth:", v9);

      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
      objc_msgSend(v11, "setMinimumPrimaryColumnWidth:", v9);

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
      objc_msgSend(v12, "setMaximumPrimaryColumnWidth:", v9);

    }
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewSupplementaryColumnWidth"));
    if (v13)
    {
      v14 = (void *)v13;
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
      v16 = objc_msgSend(v15, "style");

      if (v16 == (id)2)
      {
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewSupplementaryColumnWidth"));
        objc_msgSend(v17, "floatValue");
        v19 = v18;

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
        objc_msgSend(v20, "setPreferredSupplementaryColumnWidth:", v19);

        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
        objc_msgSend(v21, "setMinimumSupplementaryColumnWidth:", v19);

        v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
        objc_msgSend(v22, "setMaximumSupplementaryColumnWidth:", v19);

      }
    }
  }
  if (objc_msgSend(*(id *)(a1 + 40), "noteContainerViewMode") == (id)1)
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedNoteObjectID"));
    if (v23)
    {

LABEL_24:
      v29 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
      objc_msgSend(v29, "hideColumn:", 1);
      goto LABEL_25;
    }
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedInvitationObjectID"));

    if (v24)
      goto LABEL_24;
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "supplementaryNavigationController"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "viewControllers"));
  if (!objc_msgSend(v26, "count"))
    goto LABEL_20;
  if (objc_msgSend(*(id *)(a1 + 32), "isSupplementaryContentVisible"))
  {

LABEL_17:
    v29 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
    objc_msgSend(v29, "showColumn:", 1);
LABEL_25:

    return;
  }
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedNoteObjectID"));
  if (v27)
  {

LABEL_20:
    goto LABEL_21;
  }
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedInvitationObjectID"));

  if (!v28)
    goto LABEL_17;
LABEL_21:
  if (objc_msgSend(*(id *)(a1 + 32), "isSupplementaryContentVisible")
    && (objc_msgSend(*(id *)(a1 + 32), "isPrimaryContentVisible") & 1) == 0)
  {
    goto LABEL_24;
  }
}

void sub_100028F10(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentSearchTerm"));
  if (objc_msgSend(*(id *)(a1 + 40), "selectionStateTrackingEnabled"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectionStateController"));
    v3 = objc_msgSend(v2, "activityStreamViewMode");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "activityStreamSelection"));

  }
  else
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "currentActivityStreamViewMode");
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentActivityStreamSelection"));
  }
  if (v12)
  {
    objc_msgSend(*(id *)(a1 + 40), "ensureSearchVisibleWhenApplyingArchive");
    v5 = objc_msgSend(*(id *)(a1 + 40), "hasCompactWidth");
    v6 = *(void **)(a1 + 40);
    if ((v5 & 1) != 0)
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "folderListViewController"));
    else
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "rootNoteBrowseViewController"));
    v8 = v7;
    objc_msgSend(v7, "startSearchWithSearchQuery:searchTokens:searchScope:becomeFirstResponder:", v12, 0, 0, 1);

  }
  if (v3)
  {
    objc_msgSend(*(id *)(a1 + 40), "setActivityStreamSelection:", v4);
    v9 = *(void **)(a1 + 40);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "selectedModernNote"));
    objc_msgSend(v9, "presentActivityStreamForObject:viewMode:animated:", v10, v3, 0);

  }
  v11 = *(_QWORD *)(a1 + 48);
  if (v11)
    (*(void (**)(void))(v11 + 16))();
  objc_msgSend(*(id *)(a1 + 40), "setIsApplyingStateRestoreArchive:", 0);

}

void sub_100029680(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 104));
  _Unwind_Resume(a1);
}

BOOL sub_10002969C(id a1, id a2, BOOL *a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v3 = a2;
  v4 = objc_opt_class(NSManagedObjectID);
  v5 = ICDynamicCast(v4, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if ((objc_msgSend(v6, "ic_isModernFolderType") & 1) != 0)
  {
    v7 = 1;
  }
  else
  {
    v8 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
    v9 = ICDynamicCast(v8, v3);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v7 = v10 != 0;

  }
  return v7;
}

BOOL sub_100029720(id a1, id a2, BOOL *a3)
{
  return +[ICTagCoreDataIndexer isTagItemIdentifier:](ICTagCoreDataIndexer, "isTagItemIdentifier:", a2);
}

void sub_100029730(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;

  v2 = (id *)(a1 + 56);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  LOBYTE(v5) = 0;
  objc_msgSend(WeakRetained, "showContainerWithIdentifiers:excludingIdentifiers:usingRootViewController:deferUntilDataLoaded:dismissOverlayContent:keepEditorShowing:animated:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1, 0, 0, *(_QWORD *)(a1 + 48), v5);

  v4 = objc_loadWeakRetained(v2);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100029804;
  v6[3] = &unk_10054FF58;
  objc_copyWeak(&v7, v2);
  objc_msgSend(v4, "updateSplitViewForCurrentViewModeWithCompletion:", v6);

  objc_destroyWeak(&v7);
}

void sub_1000297F0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100029804(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "dismissPrimaryOverlayContent");

}

uint64_t sub_100029830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000298DC(uint64_t a1)
{
  uint64_t v2;
  os_log_t v3;
  os_log_t v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  _QWORD v11[4];
  id v12;
  id v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  _BYTE v22[24];

  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = sub_100027B3C;
  v20 = sub_100027B4C;
  v21 = (id)objc_claimAutoreleasedReturnValue(+[ICNote noteWithIdentifier:context:](ICNote, "noteWithIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v2 = v17[5];
  v3 = os_log_create("com.apple.notes", "UI");
  v4 = v3;
  if (v2)
  {
    v5 = v3;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v17[5], "ic_loggingIdentifier"));
      sub_100403B14(v6, (uint64_t)v22, v5);
    }

    v7 = *(void **)(a1 + 48);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v17[5], "objectID"));
    objc_msgSend(v7, "showRecentUpdatesForNoteWithObjectID:suppressSidebar:", v8, 1);
  }
  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_100403AE8();

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_100029AEC;
    v11[3] = &unk_10054FFF8;
    v15 = &v16;
    v12 = *(id *)(a1 + 32);
    v9 = *(id *)(a1 + 40);
    v10 = *(_QWORD *)(a1 + 48);
    v13 = v9;
    v14 = v10;
    objc_msgSend(v8, "syncWithReason:uploadUnsyncedChanges:completionHandler:", CFSTR("ShowNoteWithIdentifier"), 0, v11);

  }
  _Block_object_dispose(&v16, 8);

}

void sub_100029AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100029AEC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100029B98;
  v8[3] = &unk_10054FFD0;
  v4 = *(_QWORD *)(a1 + 56);
  v9 = v3;
  v13 = v4;
  v10 = *(id *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v11 = v5;
  v12 = v6;
  v7 = v3;
  performBlockOnMainThread(v8);

}

void sub_100029B98(_QWORD *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;

  if (a1[4])
  {
    v2 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_100403C48();
  }
  else
  {
    v3 = objc_claimAutoreleasedReturnValue(+[ICNote noteWithIdentifier:context:](ICNote, "noteWithIdentifier:context:", a1[5], a1[6]));
    v4 = *(_QWORD *)(a1[8] + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

    v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8) + 40);
    v7 = os_log_create("com.apple.notes", "UI");
    v2 = v7;
    if (v6)
    {
      v8 = v7;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        sub_100403BC8((uint64_t)(a1 + 8), v8);

      v9 = (void *)a1[7];
      v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[8] + 8) + 40), "objectID"));
      objc_msgSend(v9, "showRecentUpdatesForNoteWithObjectID:suppressSidebar:", v2, 1);
    }
    else if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      sub_100403B5C(a1 + 5, v2, v10);
    }
  }

}

void sub_100029DAC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t);
  void (*v32)(uint64_t);
  id v33;
  uint64_t v34;
  _BYTE v35[24];

  v28 = 0;
  v29 = &v28;
  v30 = 0x3032000000;
  v31 = sub_100027B3C;
  v32 = sub_100027B4C;
  v33 = (id)objc_claimAutoreleasedReturnValue(+[ICInlineAttachment attachmentWithIdentifier:context:](ICInlineAttachment, "attachmentWithIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = sub_100027B3C;
  v26 = sub_100027B4C;
  v27 = (id)objc_claimAutoreleasedReturnValue(+[ICNote noteWithIdentifier:context:](ICNote, "noteWithIdentifier:context:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40)));
  if (v29[5] && v23[5])
  {
    v2 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v29[5], "ic_loggingIdentifier"));
      sub_100403D18(v3, (uint64_t)v35, v2);
    }

    v4 = objc_alloc((Class)ICActivityStreamSelection);
    v34 = v29[5];
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v34, 1));
    v6 = objc_msgSend(v4, "initWithMentions:", v5);

    v7 = *(void **)(a1 + 56);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v29[5], "note"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectID"));
    objc_msgSend(v7, "showAttributionHighlightsForNoteWithObjectID:selection:", v9, v6);

  }
  else
  {
    v10 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v29[5], "ic_loggingIdentifier"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v23[5], "ic_loggingIdentifier"));
      sub_100403CB8(v11, v12, (uint64_t)v35, v10);
    }

    v6 = (id)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_10002A0F4;
    v15[3] = &unk_100550070;
    v20 = &v22;
    v16 = *(id *)(a1 + 48);
    v17 = *(id *)(a1 + 40);
    v21 = &v28;
    v13 = *(id *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 56);
    v18 = v13;
    v19 = v14;
    objc_msgSend(v6, "syncWithReason:uploadUnsyncedChanges:completionHandler:", CFSTR("ShowInlineAttachmentWithIdentifier"), 0, v15);

    v8 = v16;
  }

  _Block_object_dispose(&v22, 8);
  _Block_object_dispose(&v28, 8);

}

void sub_10002A0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a20, 8);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

void sub_10002A0F4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_10002A1BC;
  v10[3] = &unk_100550048;
  v4 = *(_QWORD *)(a1 + 64);
  v11 = v3;
  v16 = v4;
  v12 = *(id *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 72);
  v13 = v5;
  v17 = v6;
  v7 = *(id *)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  v14 = v7;
  v15 = v8;
  v9 = v3;
  performBlockOnMainThread(v10);

}

void sub_10002A1BC(_QWORD *a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  id v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  NSObject *v28;
  void *v29;
  uint64_t v30;

  if (!a1[4])
  {
    v7 = a1 + 9;
    v8 = *(_QWORD *)(a1[9] + 8);
    v9 = *(void **)(v8 + 40);
    if (v9)
    {
      v10 = v9;
      v11 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v10;
    }
    else
    {
      v12 = objc_claimAutoreleasedReturnValue(+[ICNote noteWithIdentifier:context:](ICNote, "noteWithIdentifier:context:", a1[5], a1[6]));
      v13 = *(_QWORD *)(a1[9] + 8);
      v11 = *(void **)(v13 + 40);
      *(_QWORD *)(v13 + 40) = v12;
    }

    v14 = *(_QWORD *)(a1[10] + 8);
    v15 = *(void **)(v14 + 40);
    if (v15)
    {
      v16 = v15;
      v17 = *(void **)(v14 + 40);
      *(_QWORD *)(v14 + 40) = v16;
    }
    else
    {
      v18 = objc_claimAutoreleasedReturnValue(+[ICInlineAttachment attachmentWithIdentifier:context:](ICInlineAttachment, "attachmentWithIdentifier:context:", a1[7], a1[6]));
      v19 = *(_QWORD *)(a1[10] + 8);
      v17 = *(void **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = v18;
    }

    if (*(_QWORD *)(*(_QWORD *)(a1[10] + 8) + 40))
    {
      v20 = os_log_create("com.apple.notes", "UI");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        sub_100403E4C((uint64_t)(a1 + 9), (uint64_t)(a1 + 10), v20);

      v21 = objc_alloc((Class)ICActivityStreamSelection);
      v30 = *(_QWORD *)(*(_QWORD *)(a1[10] + 8) + 40);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v30, 1));
      v5 = objc_msgSend(v21, "initWithMentions:", v22);

      v23 = (void *)a1[8];
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[10] + 8) + 40), "note"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectID"));
      objc_msgSend(v23, "showAttributionHighlightsForNoteWithObjectID:selection:", v25, v5);

      goto LABEL_17;
    }
    v26 = *(_QWORD *)(*(_QWORD *)(*v7 + 8) + 40);
    v27 = os_log_create("com.apple.notes", "UI");
    v5 = v27;
    if (!v26)
    {
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
        sub_100403D60();
      goto LABEL_17;
    }
    v28 = v27;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      sub_100403DCC((uint64_t)(a1 + 9), v28);

    v29 = (void *)a1[8];
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[9] + 8) + 40), "objectID"));
    v6 = v29;
LABEL_6:
    objc_msgSend(v6, "showObjectWithObjectID:", v5);
LABEL_17:

    return;
  }
  v2 = os_log_create("com.apple.notes", "UI");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_100403F00();

  v3 = *(void **)(*(_QWORD *)(a1[9] + 8) + 40);
  if (v3)
  {
    v4 = (void *)a1[8];
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    v6 = v4;
    goto LABEL_6;
  }
}

void sub_10002B24C(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(objc_alloc((Class)ICAttachmentPresenter), "initWithViewControllerManager:attachments:startingAtIndex:delegate:displayShowInNote:editable:presentingViewController:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 80), *(unsigned __int8 *)(a1 + 81), *(_QWORD *)(a1 + 56));
  objc_msgSend(*(id *)(a1 + 32), "setCurrentAttachmentPresenter:", v2);
  objc_msgSend(v2, "presentAttachmentWithSelectedSubAttachment:", *(_QWORD *)(a1 + 64));

}

uint64_t sub_10002B2B8(uint64_t a1)
{
  NSObject *v2;

  v2 = os_log_create("com.apple.notes", "UI");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100403FB4();

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10002BC2C(uint64_t a1)
{
  uint64_t v2;
  ICActivityStreamNavigationController *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  char v7;
  ICActivityStreamNavigationController *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  void *v27;
  void *v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  double v35;
  double v36;
  void *v37;
  double v38;
  double v39;
  void *v40;
  unsigned int v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  unsigned int v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void **v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  void *v54;
  ICActivityStreamNavigationController *v55;
  _QWORD v56[5];

  v2 = *(_QWORD *)(a1 + 48);
  if (v2 == 5)
  {
    v3 = (ICActivityStreamNavigationController *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityStreamNavigationController"));
  }
  else
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedActivityStreamNavigationController"));
    if (v4
      && (v5 = (void *)v4,
          v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedActivityStreamNavigationController")),
          v7 = (v2 != 4) ^ objc_msgSend(v6, "hasInteractiveSizing"),
          v6,
          v5,
          (v7 & 1) == 0))
    {
      v3 = (ICActivityStreamNavigationController *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedActivityStreamNavigationController"));
    }
    else
    {
      v3 = -[ICActivityStreamNavigationController initWithCoordinator:hasInteractiveSizing:]([ICActivityStreamNavigationController alloc], "initWithCoordinator:hasInteractiveSizing:", *(_QWORD *)(a1 + 32), v2 != 4);
    }
  }
  v8 = v3;
  -[ICActivityStreamNavigationController setObject:](v3, "setObject:", *(_QWORD *)(a1 + 40));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedModernNote"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectID"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v12 = objc_msgSend(v10, "isEqual:", v11);

  if (v12)
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityStreamSelection"));
    -[ICActivityStreamNavigationController setSelection:](v8, "setSelection:", v13);

  }
  if (*(_QWORD *)(a1 + 48) != 5)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(-[ICActivityStreamNavigationController presentingViewController](v8, "presentingViewController"));

    if (!v18)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "view"));
      v21 = (void *)objc_claimAutoreleasedReturnValue(-[ICActivityStreamNavigationController popoverPresentationController](v8, "popoverPresentationController"));
      objc_msgSend(v21, "setSourceView:", v20);

      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedActivityStreamPresentingViewController"));
      objc_msgSend(v22, "presentViewController:animated:completion:", v8, *(unsigned __int8 *)(a1 + 56), 0);

    }
    -[ICActivityStreamNavigationController moveToViewMode:](v8, "moveToViewMode:", *(_QWORD *)(a1 + 48));
    if ((objc_msgSend(*(id *)(a1 + 32), "showsPresentedActivityStreamAsModal") & 1) != 0)
      goto LABEL_29;
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    objc_msgSend(v17, "hideActivityStreamToolbarAnimated:", *(unsigned __int8 *)(a1 + 56));
    goto LABEL_17;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "behavior") == (id)3)
  {
LABEL_11:
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
    v15 = objc_msgSend(v14, "shouldRenderAsOverlay");

    v16 = *(void **)(a1 + 32);
    if (!v15)
    {
      objc_msgSend(v16, "updateTrailingColumnWidth");
      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarViewController"));
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "view"));
      objc_msgSend(v29, "frame");
      v31 = v30;
      v33 = v32;

      v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
      objc_msgSend(v34, "nonDisplacedColumnWidth");
      v36 = v31 - v35;

      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarViewController"));
      objc_msgSend(v37, "preferredSidebarWidth");
      v39 = v36 - v38;

      v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
      v41 = objc_msgSend(v40, "requiresNotificationForSecondaryColumnSize:", v39, v33);

      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarViewController"));
      objc_msgSend(v42, "setSidebarHidden:", 0);

      v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "transitionCoordinator"));

      if (objc_msgSend(*(id *)(a1 + 32), "behavior") != (id)3)
      {
        v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
        v46 = objc_msgSend(v45, "shouldDisplaceColumn");

        if (v46)
        {
          v56[0] = _NSConcreteStackBlock;
          v56[1] = 3221225472;
          v56[2] = sub_10002C0E4;
          v56[3] = &unk_1005500E8;
          v56[4] = *(_QWORD *)(a1 + 32);
          objc_msgSend(v44, "animateAlongsideTransition:completion:", v56, 0);
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
          v48 = v47;
          v49 = 1;
        }
        else
        {
          v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
          v48 = v47;
          v49 = 0;
        }
        objc_msgSend(v47, "setIsDisplacingColumn:", v49);

      }
      v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
      objc_msgSend(v50, "hideActivityStreamToolbarAnimated:", *(unsigned __int8 *)(a1 + 56));

      if (v41)
        objc_msgSend(*(id *)(a1 + 32), "sendNotificationForNoteEditorSizeChange:transitionCoordinator:", v44, v39, v33);

      goto LABEL_29;
    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "trailingSidebarViewController"));
    objc_msgSend(v17, "setSidebarHidden:", 0);
LABEL_17:

LABEL_29:
    v51 = _NSConcreteStackBlock;
    v52 = 3221225472;
    v53 = sub_10002C140;
    v54 = &unk_100550110;
    v55 = v8;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, &v51);
    objc_msgSend(*(id *)(a1 + 32), "updateIgnoreTextViewTaps", v51, v52, v53, v54);

    goto LABEL_30;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
  v24 = objc_msgSend(v23, "displayMode");

  if (v24 == (id)1)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
    v26 = objc_msgSend(v25, "displayMode");

    if (v26 == (id)6)
    {
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
      objc_msgSend(v27, "hideColumn:", 0);

    }
    goto LABEL_11;
  }
LABEL_30:

}

void sub_10002C0E4(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
  objc_msgSend(v3, "hideColumn:", objc_msgSend(v2, "preferredDisplacedColumn"));

}

void sub_10002C140(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityStreamViewController"));
  objc_msgSend(v1, "updateContentLayout");

}

uint64_t sub_10002C458(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "updateIgnoreTextViewTaps");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10002C494(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
  objc_msgSend(v3, "showColumn:", objc_msgSend(v2, "preferredDisplacedColumn"));

}

id sub_10002C92C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showAttributionHighlightsForNoteWithObjectID:selection:suppressSidebar:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
}

void sub_10002C940(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  _QWORD *v20;
  unsigned int v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned __int8 v25;
  void *v26;
  id v27;
  unsigned __int8 v28;
  void *v29;
  id v30;
  unint64_t v31;
  id v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  double v37;
  double v38;
  void *v39;
  double v40;
  void *v41;
  void *v42;
  double v43;
  double v44;
  void *v45;
  double v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[5];
  id v52;
  _QWORD v53[4];
  _QWORD *v54;
  _QWORD v55[5];
  id v56;
  id v57;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", *(_QWORD *)(a1 + 40)));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarViewController"));
  v5 = objc_msgSend(v4, "isSidebarHidden");

  v6 = *(void **)(a1 + 32);
  if (!v5)
  {
    if (objc_msgSend(v6, "isTrailingContentVisible"))
    {
      objc_msgSend(*(id *)(a1 + 32), "setActivityStreamSelection:", *(_QWORD *)(a1 + 48));
      v13 = 4;
LABEL_37:
      v30 = objc_msgSend(objc_alloc((Class)ICActivityStreamDigest), "initWithObject:", v3);
      v31 = (unint64_t)objc_msgSend(v30, "hasRecentUpdates");
      v32 = objc_msgSend(v30, "isCurrentUserMentionedInRecentSummary");
      v33 = *(void **)(a1 + 48);
      if (v33)
      {
        v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "filter"));
        v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "recentUpdatesFilter"));
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "fromDate"));
        objc_msgSend(v36, "timeIntervalSince1970");
        v38 = v37;
        v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "fromDate"));
        objc_msgSend(v39, "timeIntervalSince1970");
        if (v38 >= v40)
        {
          v50 = v13;
          v41 = v3;
          v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "toDate"));
          objc_msgSend(v42, "timeIntervalSince1970");
          v44 = v43;
          v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "toDate"));
          objc_msgSend(v45, "timeIntervalSince1970");
          v31 = v44 <= v46;

          v3 = v41;
          v13 = v50;
        }
        else
        {
          v31 = 0;
        }

        v32 = objc_msgSend(v30, "isCurrentUserMentionedInFilter:", v35);
      }
      v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
      objc_msgSend(v47, "submitCollabActivityBrowseEventForObject:contextPath:clickContext:mode:isCurrentUserMentioned:hasRecentUpdates:", v3, 0, 5, v13, v32, v31);

      goto LABEL_43;
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
    if ((objc_msgSend(v15, "shouldRenderAsOverlay") & 1) != 0 || *(_BYTE *)(a1 + 56))
    {

    }
    else
    {
      v25 = objc_msgSend(*(id *)(a1 + 32), "showsPresentedActivityStreamAsModal");

      if ((v25 & 1) == 0)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
        v27 = objc_msgSend(v26, "displayMode");

        if (v27 == (id)1)
        {
          objc_msgSend(*(id *)(a1 + 32), "showActivityStreamForObjectWithObjectID:", *(_QWORD *)(a1 + 40));
          v13 = 0;
        }
        else
        {
          v13 = 4;
        }
        v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarViewController"));
        v51[0] = _NSConcreteStackBlock;
        v51[1] = 3221225472;
        v51[2] = sub_10002CEA8;
        v51[3] = &unk_10054FE80;
        v51[4] = *(_QWORD *)(a1 + 32);
        v52 = *(id *)(a1 + 48);
        objc_msgSend(v49, "ic_performBlockAfterActiveTransition:", v51);

        v29 = v52;
LABEL_36:

        if (!v13)
          goto LABEL_43;
        goto LABEL_37;
      }
    }
    if (objc_msgSend(*(id *)(a1 + 32), "behavior") == (id)3 && !*(_BYTE *)(a1 + 56))
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
      objc_msgSend(v16, "hideColumn:", 1);

    }
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
    v18 = objc_msgSend(v17, "displayMode");

    if (v18 == (id)3)
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarViewController"));
      objc_msgSend(v19, "setSidebarHidden:", 1);

      v13 = 4;
    }
    else
    {
      v13 = 0;
    }
    v55[0] = _NSConcreteStackBlock;
    v55[1] = 3221225472;
    v55[2] = sub_10002CE58;
    v55[3] = &unk_100550020;
    v55[4] = *(_QWORD *)(a1 + 32);
    v56 = v3;
    v57 = *(id *)(a1 + 48);
    v20 = objc_retainBlock(v55);
    v21 = objc_msgSend(*(id *)(a1 + 32), "showsPresentedActivityStreamAsModal");
    v22 = *(void **)(a1 + 32);
    if (v21)
    {
      v53[0] = _NSConcreteStackBlock;
      v53[1] = 3221225472;
      v53[2] = sub_10002CE9C;
      v53[3] = &unk_10054FFA8;
      v54 = v20;
      objc_msgSend(v22, "hidePresentedActivityStreamNavigationControllerWithCompletion:", v53);

    }
    else
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "activityStreamToolbar"));
      if (v24)
      {

      }
      else
      {
        v28 = objc_msgSend(*(id *)(a1 + 32), "showsPresentedActivityStreamAsModal");

        if ((v28 & 1) == 0)
        {
          v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarViewController"));
          objc_msgSend(v48, "ic_performBlockAfterActiveTransition:", v20);

          goto LABEL_35;
        }
      }
      ((void (*)(_QWORD *))v20[2])(v20);
    }
LABEL_35:

    v29 = v56;
    goto LABEL_36;
  }
  objc_msgSend(v6, "showActivityStreamForObjectWithObjectID:", *(_QWORD *)(a1 + 40));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedActivityStreamNavigationController"));
  v8 = objc_msgSend(v7, "viewMode");

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedActivityStreamNavigationController"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "view"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "window"));

  v12 = 3;
  if (v8 != (id)2)
    v12 = 0;
  if (v8 == (id)3)
    v12 = 2;
  if (v11)
    v13 = v12;
  else
    v13 = 0;
  objc_msgSend(*(id *)(a1 + 32), "setActivityStreamSelection:", *(_QWORD *)(a1 + 48));
  if (*(_BYTE *)(a1 + 56) || *(_QWORD *)(a1 + 48) && v8 == (id)3)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedActivityStreamNavigationController"));
    objc_msgSend(v14, "moveToViewMode:", 1);

  }
  if (v13)
    goto LABEL_37;
LABEL_43:

}

id sub_10002CE58(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
  objc_msgSend(v2, "showActivityStreamToolbarForObject:selection:animated:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 1);

  return objc_msgSend(*(id *)(a1 + 32), "setActivityStreamSelection:", *(_QWORD *)(a1 + 48));
}

uint64_t sub_10002CE9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10002CEA8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setActivityStreamSelection:", *(_QWORD *)(a1 + 40));
}

id sub_10002D760(id a1, NSManagedObjectID *a2)
{
  return -[NSManagedObjectID URIRepresentation](a2, "URIRepresentation");
}

id sub_10002D768(id a1, id a2)
{
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = a2;
  v3 = objc_opt_class(ICTagAllTagsItemIdentifier);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICTagAllTagsItemIdentifier archiveIdentifier](ICTagAllTagsItemIdentifier, "archiveIdentifier"));
  }
  else
  {
    v5 = objc_opt_class(NSManagedObjectID);
    v6 = ICDynamicCast(v5, v2);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (objc_msgSend(v7, "ic_isHashtagType"))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URIRepresentation"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "absoluteString"));

    }
    else
    {
      v4 = 0;
    }

  }
  return v4;
}

void sub_10002DBB0(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  id v5;

  if (*(_BYTE *)(a1 + 40) && !*(_BYTE *)(a1 + 41))
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    objc_msgSend(v5, "showInkPicker:", 0);

    return;
  }
  if (*(_BYTE *)(a1 + 42))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    objc_msgSend(v3, "addTodoListAtEndOfNote");

    return;
  }
  if (*(_BYTE *)(a1 + 43))
  {
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    v4 = v1;
    v2 = 1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 44))
      return;
    v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    v4 = v1;
    v2 = 4;
  }
  objc_msgSend(v1, "showInsertUIWithPreferredSourceType:", v2);

}

void sub_10002E01C(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = a2;
  v3 = os_log_create("com.apple.notes", "UI");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    sub_10040408C();

  if (v2)
  {
    v4 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10040400C(v2, v4);

  }
}

void sub_10002E470(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10002E48C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", v3));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_10002E518(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", v3));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_10002E5A4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedInvitationObjectID"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", v3));

  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_10002E630(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", *(_QWORD *)(a1 + 40)));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "titleForNavigationBar"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10002E69C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", *(_QWORD *)(a1 + 40)));

  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "titleForTableViewCell"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10002F244(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  _QWORD *v13;
  id v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[5];
  id v19;
  id v20;

  v3 = a2;
  if (!*(_BYTE *)(a1 + 48))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folderListViewController"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dataSource"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "firstRelevantItemIdentifier"));

    v7 = objc_opt_class(NSManagedObjectID);
    isKindOfClass = objc_opt_isKindOfClass(v6, v7);
    v9 = *(void **)(a1 + 32);
    if ((isKindOfClass & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet ic_setFromNonNilObject:](NSSet, "ic_setFromNonNilObject:", v6));
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
      objc_msgSend(v9, "selectContainerWithIdentifiers:excludingIdentifiers:usingRootViewController:deferUntilDataLoaded:dismissOverlayContent:animated:", v10, v11, 1, 0, 1, 0);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "validateState");
    }

  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_10002F404;
  v18[3] = &unk_1005502E8;
  v18[4] = *(_QWORD *)(a1 + 32);
  v12 = v3;
  v19 = v12;
  v20 = *(id *)(a1 + 40);
  v13 = objc_retainBlock(v18);
  v14 = objc_msgSend(*(id *)(a1 + 32), "behavior");
  v15 = *(void **)(a1 + 32);
  if (v14 == (id)3)
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "window"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "rootViewController"));
    objc_msgSend(v17, "dismissViewControllerAnimated:completion:", 1, v13);

  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "startupPresenter"));
    objc_msgSend(v16, "dismissWithCompletionBlock:", v13);
  }

}

uint64_t sub_10002F404(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "setStartupPresenter:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setWelcomeScreenVisible:", 0);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_10002F460(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 0, 0);
}

void sub_10002FA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10002FA64(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    objc_msgSend(WeakRetained, "setActivityStreamSelection:", 0);
    if (!WeakRetained[4])
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "trailingSidebarSplitViewController"));
      v3 = objc_msgSend(v2, "isCollapsed");

      if ((v3 & 1) == 0)
      {
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteEditorViewController"));
        objc_msgSend(v4, "setNote:", 0);

        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "legacyNoteEditorViewController"));
        objc_msgSend(v5, "displayNote:", 0);

      }
    }
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selectedModernNote"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "activityStreamNavigationController"));
    objc_msgSend(v7, "setObject:", v6);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "windowScene"));
    objc_msgSend(WeakRetained, "updateSceneTitle:", v9);

  }
}

void sub_1000302A4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarViewController"));
  objc_msgSend(v1, "setSidebarHidden:", 1);

}

void sub_100030DF0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;

  if (objc_msgSend(*(id *)(a1 + 32), "selectionStateTrackingEnabled") && *(_BYTE *)(a1 + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
    v3 = v2;
    if (v2)
    {
      v11 = v2;
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mostRecentRegularWidthSelectedNoteObjectID"));
      v5 = v4;
      if (v4)
      {
        v11 = v4;
      }
      else
      {
        v6 = objc_opt_class(NSManagedObjectID);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentNoteBrowseViewController"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dataSource"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "firstRelevantItemIdentifier"));
        v10 = ICDynamicCast(v6, v9);
        v11 = (id)objc_claimAutoreleasedReturnValue(v10);

      }
    }

    if (objc_msgSend(*(id *)(a1 + 32), "objectAlreadyLoadedInEditorWithObjectID:", v11))
    {
      if ((objc_msgSend(*(id *)(a1 + 32), "isNoteEditorVisible") & 1) == 0)
        objc_msgSend(*(id *)(a1 + 32), "setNoteEditorAnimated:ensurePresented:startEditing:showLegacy:showLatestUpdatesIfAvailable:", 0, 1, 0, objc_msgSend(*(id *)(a1 + 32), "isInHTMLEditorMode"), 0);
    }
    else if (objc_msgSend(v11, "ic_isNoteType"))
    {
      objc_msgSend(*(id *)(a1 + 32), "selectNoteWithObjectID:scrollState:startEditing:animated:ensurePresented:", v11, 0, 0, 0, 1);
    }
    else if (objc_msgSend(v11, "ic_isInvitationType"))
    {
      objc_msgSend(*(id *)(a1 + 32), "selectInvitationWithObjectID:animated:", v11, 0);
    }

  }
}

void sub_1000312A0(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.notes.printControllerQueue", v4);
  v3 = (void *)qword_1005DDCE0;
  qword_1005DDCE0 = (uint64_t)v2;

}

void sub_1000312F0(uint64_t a1)
{
  void *v2;
  ICPrintPageRenderer *v3;
  ICPrintPageRenderer *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSString *v9;
  void *v10;
  void *v11;
  void *v12;
  dispatch_semaphore_t v13;
  id v14;
  NSObject *v15;
  id v16;
  _QWORD v17[4];
  id v18;
  dispatch_semaphore_t v19;
  id v20;
  uint64_t v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIPrintInteractionController sharedPrintController](UIPrintInteractionController, "sharedPrintController"));
  objc_msgSend(v2, "setPrintFormatter:", *(_QWORD *)(a1 + 32));
  v3 = objc_alloc_init(ICPrintPageRenderer);
  v4 = v3;
  if (*(_BYTE *)(a1 + 56))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor blackColor](UIColor, "blackColor"));
    -[ICPrintPageRenderer setBackgroundColor:](v4, "setBackgroundColor:", v5);

  }
  else
  {
    -[ICPrintPageRenderer setBackgroundColor:](v3, "setBackgroundColor:", 0);
  }
  -[ICPrintPageRenderer addPrintFormatter:startingAtPageAtIndex:](v4, "addPrintFormatter:startingAtPageAtIndex:", *(_QWORD *)(a1 + 32), 0);
  objc_msgSend(v2, "setPrintPageRenderer:", v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "UUIDString"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@.pdf"), v7));

  v9 = NSTemporaryDirectory();
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "stringByAppendingPathComponent:", v8));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v11));
  v13 = dispatch_semaphore_create(0);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1000314E4;
  v17[3] = &unk_1005503D0;
  v18 = v12;
  v21 = *(_QWORD *)(a1 + 48);
  v14 = *(id *)(a1 + 40);
  v19 = v13;
  v20 = v14;
  v15 = v13;
  v16 = v12;
  objc_msgSend(v2, "savePDFToURL:showProgress:completionHandler:", v16, 0, v17);
  dispatch_semaphore_wait(v15, 0xFFFFFFFFFFFFFFFFLL);

}

void sub_1000314E4(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  _QWORD block[4];
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  char v17;

  v7 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000315D8;
  block[3] = &unk_1005503A8;
  v17 = a3;
  v11 = a4;
  v12 = *(id *)(a1 + 32);
  v13 = v7;
  v16 = *(_QWORD *)(a1 + 56);
  v15 = *(id *)(a1 + 48);
  v14 = *(id *)(a1 + 40);
  v8 = v7;
  v9 = v11;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

intptr_t sub_1000315D8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  double v8;
  uint64_t v9;

  if (*(_BYTE *)(a1 + 80) && !*(_QWORD *)(a1 + 32))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", *(_QWORD *)(a1 + 40)));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "printFormatter"));
    v7 = objc_msgSend(v6, "pageCount");
    v8 = *(double *)(a1 + 72);

    v9 = *(_QWORD *)(a1 + 64);
    if (v9)
      (*(void (**)(uint64_t, void *, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))(v9 + 16))(v9, v5, (uint64_t)(v8 * (double)(uint64_t)v7), CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);

  }
  else
  {
    v2 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10040416C(a1, v2, v3);

    v4 = *(_QWORD *)(a1 + 64);
    if (v4)
      (*(void (**)(uint64_t, _QWORD, uint64_t, CGFloat, CGFloat, CGFloat, CGFloat))(v4 + 16))(v4, 0, 0x7FFFFFFFFFFFFFFFLL, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
  }
  objc_msgSend(*(id *)(a1 + 48), "setPrintFormatter:", 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_1000322C8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
  objc_msgSend(v1, "setDisplayModeButtonVisibility:", 0);

}

void sub_100032334(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionStateController"));
  objc_msgSend(v2, "navigationControllerDidTransitionWithNewContainerItemID:newTagSelection:forgetObjectSelection:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));

}

uint64_t sub_10003237C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100032450(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = objc_opt_class(ICNoteContainer);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectWithID:", *(_QWORD *)(a1 + 40)));
  v4 = ICDynamicCast(v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v5, "enforcedNoteContainerViewMode");

}

void sub_1000324DC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = objc_opt_class(NoteCollectionObject);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectWithID:", *(_QWORD *)(a1 + 40)));
  v4 = ICDynamicCast(v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v5, "enforcedNoteContainerViewMode");

}

id sub_1000328B4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v5 = objc_opt_class(NSURL, v4);
  v6 = ICDynamicCast(v5, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectIDFromURL:", v7));
  return v8;
}

id sub_100032920(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICTagAllTagsItemIdentifier archiveIdentifier](ICTagAllTagsItemIdentifier, "archiveIdentifier"));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  if (v5)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(+[ICTagAllTagsItemIdentifier sharedItemIdentifier](ICTagAllTagsItemIdentifier, "sharedItemIdentifier"));
  }
  else
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", v3));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "managedObjectIDFromURL:", v8));

    if (objc_msgSend(v9, "ic_isHashtagType"))
      v6 = v9;
    else
      v6 = 0;

  }
  return v6;
}

void sub_1000329F0(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  ICNoteBrowseViewController *v13;
  ICNoteBrowseViewController *v14;
  _BOOL8 v15;
  void *v16;
  void *v17;
  void *v18;
  ICNoteBrowseViewController *v19;
  void *v20;
  _QWORD v21[4];
  id v22;
  id v23;
  ICNoteBrowseViewController *v24;
  id v25;
  id location;

  v5 = a2;
  if ((objc_msgSend(*(id *)(a1 + 32), "selectionStateTrackingEnabled") & 1) == 0
    && objc_msgSend(v5, "ic_isModernAccountType"))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectWithID:", v5));

    if ((objc_msgSend(v7, "hasAnyCustomFoldersIncludingSystem:", 0) & 1) == 0)
    {
      v8 = *(void **)(a1 + 40);
      if (v8 && objc_msgSend(v8, "ic_isModernNoteType"))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectWithID:", *(_QWORD *)(a1 + 40)));

        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "folder"));
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectID"));

        v5 = v11;
      }
      else
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "defaultFolder"));
        v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectID"));
      }

      v5 = (id)v12;
    }

  }
  if (objc_msgSend(v5, "ic_isContainerType"))
  {
    v13 = (ICNoteBrowseViewController *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootNoteBrowseViewController"));
    if (a3)
    {
      v14 = -[ICNoteBrowseViewController initWithViewMode:viewControllerManager:]([ICNoteBrowseViewController alloc], "initWithViewMode:viewControllerManager:", objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode"), *(_QWORD *)(a1 + 32));

      v13 = v14;
    }
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v13);
    if ((char *)objc_msgSend(*(id *)(a1 + 56), "count") - 1 == a3)
    {
      if (*(_QWORD *)(a1 + 40))
      {
        v15 = 1;
LABEL_18:
        objc_initWeak(&location, *(id *)(a1 + 32));
        v16 = *(void **)(a1 + 32);
        v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet ic_setFromNonNilObject:](NSSet, "ic_setFromNonNilObject:", v5));
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_100032CF8;
        v21[3] = &unk_1005504B0;
        v22 = *(id *)(a1 + 64);
        v23 = v5;
        objc_copyWeak(&v25, &location);
        v19 = v13;
        v24 = v19;
        objc_msgSend(v16, "setCurrentNoteBrowseViewController:animated:ensurePresented:containerIdentifiers:excludingIdentifiers:ensureSelectedNote:keepEditorShowing:dataIndexedBlock:dataRenderedBlock:", v19, 0, 0, v17, v18, v15, 0, 0, v21);

        objc_destroyWeak(&v25);
        objc_destroyWeak(&location);

        goto LABEL_19;
      }
      if (!objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode"))
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
        v15 = (objc_msgSend(v20, "isCollapsed") & 1) == 0 && *(_QWORD *)(a1 + 72) != 1;

        goto LABEL_18;
      }
    }
    v15 = 0;
    goto LABEL_18;
  }
LABEL_19:

}

void sub_100032CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100032CF8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  void *v13;
  id v14;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "URIRepresentation"));
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", v3));

  v4 = v14;
  if (v14)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "managedObjectIDFromURL:", v14));

    if (v6)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "dataSource"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "collectionViewDiffableDataSource"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "indexPathForItemIdentifier:", v6));

      if (v9)
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "collectionView"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "indexPathsForVisibleItems"));
        v12 = objc_msgSend(v11, "containsObject:", v9);

        if ((v12 & 1) == 0)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "collectionView"));
          objc_msgSend(v13, "scrollToItemAtIndexPath:atScrollPosition:animated:", v9, 1, 0);

        }
      }

    }
    v4 = v14;
  }

}

void sub_100032E1C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updatePrimaryContainerViewAppearance");

}

void sub_100032E48(uint64_t a1)
{
  ICViewAttachmentsActivity *v2;
  void *v3;
  void *v4;
  ICViewAttachmentsActivity *v5;

  v2 = [ICViewAttachmentsActivity alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
  v5 = -[ICViewAttachmentsActivity initWithPresentingViewController:eventReporter:](v2, "initWithPresentingViewController:eventReporter:", v3, v4);

  -[ICViewAttachmentsActivity performActivityUserInitiated:completion:](v5, "performActivityUserInitiated:completion:", 0, 0);
}

BOOL sub_100033064(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v4 = a2;
  v5 = objc_opt_class(NSManagedObjectID);
  v6 = ICDynamicCast(v5, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if ((objc_msgSend(v7, "ic_isContainerType") & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v9 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
    v10 = ICDynamicCast(v9, v4);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v8 = v11 != 0;

  }
  return v8;
}

void sub_1000336F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_100033724(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  unsigned int v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  void *v45;

  v3 = a2;
  v45 = v3;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
    goto LABEL_52;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
  v6 = v5;
  if (v5)
    v7 = v5;
  else
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedInvitationObjectID"));
  v8 = v7;

  if (!objc_msgSend(*(id *)(a1 + 32), "selectionStateTrackingEnabled"))
  {
    v11 = objc_msgSend(*(id *)(a1 + 32), "isSelectionAppropriateForObjectID:", v8);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedSearchResult"));
    if (v12 || v11)
    {
      v9 = v8;
    }
    else
    {
      v13 = objc_opt_class(NSManagedObjectID);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "firstRelevantItemIdentifier"));
      v15 = ICDynamicCast(v13, v14);
      v9 = (id)objc_claimAutoreleasedReturnValue(v15);

    }
    if (v9)
      goto LABEL_16;
    goto LABEL_42;
  }
  if (v8)
  {
    v9 = v8;
    goto LABEL_8;
  }
  if (!objc_msgSend(*(id *)(a1 + 32), "isAutomaticallySelectingNotes"))
  {
LABEL_42:
    if (objc_msgSend(*(id *)(a1 + 40), "ic_isModernContainerType"))
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
      objc_msgSend(v37, "setNote:", 0);

      v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
      objc_msgSend(v38, "setInvitation:", 0);

      v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
      v4 = (void *)v39;
    }
    if (!objc_msgSend(*(id *)(a1 + 40), "ic_isLegacyContainerType"))
    {
      v24 = 0;
      v9 = 0;
      goto LABEL_48;
    }
    v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyNoteEditorViewController"));
    objc_msgSend(v40, "displayNote:", 0);

    v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyNoteEditorViewController"));
    v24 = 0;
    v9 = 0;
    goto LABEL_46;
  }
  v25 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  if (objc_msgSend(v25, "applicationState"))
  {
    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionStateController"));
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "mostRecentSelectedObjectID"));

    if (v27)
    {
      v28 = *(void **)(a1 + 32);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "selectionStateController"));
      v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "mostRecentSelectedObjectID"));
      LODWORD(v28) = objc_msgSend(v28, "isSelectionAppropriateForObjectID:", v30);

      if ((_DWORD)v28)
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionStateController"));
        v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "mostRecentSelectedObjectID"));

        if (v9)
          goto LABEL_8;
      }
    }
  }
  else
  {

  }
  v34 = objc_opt_class(NSManagedObjectID);
  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "firstRelevantItemIdentifier"));
  v36 = ICDynamicCast(v34, v35);
  v9 = (id)objc_claimAutoreleasedReturnValue(v36);

  if (!v9)
    goto LABEL_42;
LABEL_8:
  if ((objc_msgSend(v9, "isEqual:", v8) & 1) == 0)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionStateController"));
    objc_msgSend(v10, "pushAutoselectedObjectWithObjectID:", v9);

LABEL_10:
LABEL_54:
    v3 = v45;
    goto LABEL_55;
  }
LABEL_16:
  if (objc_msgSend(*(id *)(a1 + 32), "selectionStateTrackingEnabled")
    && objc_msgSend(*(id *)(a1 + 32), "objectAlreadyLoadedInEditorWithObjectID:", v9)
    && objc_msgSend(*(id *)(a1 + 32), "isNoteEditorTopViewController"))
  {
    v16 = *(_QWORD *)(a1 + 48);
    if (v16)
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v45);
    goto LABEL_10;
  }
  if (objc_msgSend(v9, "ic_isModernNoteType"))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "ic_existingObjectWithID:", v9));

    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    objc_msgSend(v19, "setNote:", v18);

    if ((objc_msgSend(*(id *)(a1 + 32), "selectionStateTrackingEnabled") & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "setSelectedNoteObjectID:", v9);
LABEL_27:
    v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
LABEL_28:
    v23 = v22;

    v24 = 1;
    v4 = (void *)v18;
LABEL_46:

    v4 = (void *)v23;
    goto LABEL_48;
  }
  if (objc_msgSend(v9, "ic_isInvitationType"))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "ic_existingObjectWithID:", v9));

    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    objc_msgSend(v21, "setInvitation:", v18);

    if ((objc_msgSend(*(id *)(a1 + 32), "selectionStateTrackingEnabled") & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "setSelectedInvitationObjectID:", v9);
    goto LABEL_27;
  }
  if (objc_msgSend(v9, "ic_isLegacyNoteType"))
  {
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "ic_existingObjectWithID:", v9));

    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyNoteEditorViewController"));
    objc_msgSend(v33, "displayNote:", v18);

    if ((objc_msgSend(*(id *)(a1 + 32), "selectionStateTrackingEnabled") & 1) == 0)
      objc_msgSend(*(id *)(a1 + 32), "setSelectedNoteObjectID:", v9);
    v22 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyNoteEditorViewController"));
    goto LABEL_28;
  }
  v24 = 1;
LABEL_48:
  v41 = *(void **)(a1 + 32);
  if (objc_msgSend(v41, "selectionStateTrackingEnabled"))
    v42 = v24 & objc_msgSend(*(id *)(a1 + 32), "isApplyingStateRestoreArchive");
  else
    v42 = 0;
  v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyNoteEditorViewController"));
  objc_msgSend(v41, "setNoteEditorAnimated:ensurePresented:startEditing:showLegacy:showLatestUpdatesIfAvailable:", 0, v42, 0, v4 == v43, 1);

  v3 = v45;
LABEL_52:
  v44 = *(_QWORD *)(a1 + 48);
  if (v44)
  {
    (*(void (**)(uint64_t, void *))(v44 + 16))(v44, v45);
    goto LABEL_54;
  }
LABEL_55:

}

void sub_100033C54(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_existingObjectWithID:", *(_QWORD *)(a1 + 40)));

  objc_msgSend(*(id *)(a1 + 48), "setNoteContainer:dataIndexedBlock:dataRenderedBlock:", v3, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

void sub_100033CB0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_existingObjectWithID:", *(_QWORD *)(a1 + 40)));

  objc_msgSend(*(id *)(a1 + 48), "setNoteCollection:dataIndexedBlock:dataRenderedBlock:", v3, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
}

uint64_t sub_10003402C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  void *v12;
  void *v13;

  v5 = a2;
  v6 = objc_opt_class(ICNoteBrowseViewController);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    v7 = v5;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "noteContainer"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectID"));
    if ((objc_msgSend(v10, "isEqual:", v8) & 1) != 0)
    {
      v11 = 1;
    }
    else
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "noteCollection"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectID"));
      v11 = objc_msgSend(v13, "isEqual:", v8);

    }
  }
  else
  {
    v11 = 0;
  }

  return v11 ^ 1;
}

void sub_1000341C8(uint64_t a1, void *a2, uint64_t a3)
{
  ICNoteBrowseViewController *v5;
  ICNoteBrowseViewController *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  ICNoteBrowseViewController *v11;
  void *v12;
  id v13;

  v13 = a2;
  if (a3)
    v5 = -[ICNoteBrowseViewController initWithViewMode:viewControllerManager:]([ICNoteBrowseViewController alloc], "initWithViewMode:viewControllerManager:", objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode"), *(_QWORD *)(a1 + 32));
  else
    v5 = (ICNoteBrowseViewController *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootNoteBrowseViewController"));
  v6 = v5;
  v7 = objc_opt_class(ICFolder);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingManagedObjectWithObjectID:", v13));
  v9 = ICDynamicCast(v7, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  -[ICNoteBrowseViewController setNoteContainer:dataIndexedBlock:dataRenderedBlock:](v6, "setNoteContainer:dataIndexedBlock:dataRenderedBlock:", v10, 0, 0);
  v11 = (ICNoteBrowseViewController *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootNoteBrowseViewController"));

  if (v6 != v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteBrowseNavigationController"));
    objc_msgSend(v12, "pushViewController:animated:", v6, 0);

  }
}

void sub_100034434(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  if (objc_msgSend(*(id *)(a1 + 32), "isAutomaticallySelectingNotes"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));

    if (!v2)
    {
      LOWORD(v3) = 256;
      objc_msgSend(*(id *)(a1 + 32), "selectNoteWithObjectID:scrollState:startEditing:showInkPicker:dismissOverlayContent:showLatestUpdatesIfAvailable:animated:ensurePresented:", *(_QWORD *)(a1 + 40), 0, 0, 0, 0, 1, v3);
    }
  }
}

id sub_1000344A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  unsigned int v11;
  id v12;
  void *v13;
  void *v14;
  unsigned int v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  id v52;
  unsigned int v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  unsigned int v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  unsigned int v62;
  int v63;
  unsigned __int8 v64;
  void *v65;
  id v66;
  void *v68;
  void *v69;
  unsigned int v70;
  unint64_t v71;
  _QWORD v72[5];
  const __CFString *v73;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  v5 = objc_msgSend(v4, "ic_isNoteType");

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  v8 = objc_msgSend(v6, "isSelectionAppropriateForObjectID:", v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "changedValues"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allKeys"));

  if ((objc_msgSend(v10, "containsObject:", CFSTR("markedForDeletion")) & 1) != 0)
    v11 = 1;
  else
    v11 = objc_msgSend(v10, "containsObject:", CFSTR("deletedFlag"));
  v12 = v3;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "changedValues"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "allKeys"));
  v15 = objc_msgSend(v14, "containsObject:", CFSTR("folder"));

  if (!v15)
  {
    v46 = 0;
    goto LABEL_26;
  }
  v71 = __PAIR64__(v5, v11);
  v73 = CFSTR("folder");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v73, 1));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "committedValuesForKeys:", v16));

  v18 = objc_opt_class(ICFolder);
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("folder")));
  v20 = ICDynamicCast(v18, v19);
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);

  v22 = objc_opt_class(ICFolder);
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "changedValues"));
  v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "objectForKeyedSubscript:", CFSTR("folder")));
  v25 = ICDynamicCast(v22, v24);
  v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
  v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectID"));
  if (objc_msgSend(v27, "isEqual:", v28) && v21)
  {

    if (v26)
    {
      if (objc_msgSend(v21, "isTrashFolder")
        && (objc_msgSend(v26, "isTrashFolder") & 1) == 0
        && objc_msgSend(*(id *)(a1 + 32), "isNoteBeingRecovered"))
      {
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "folder"));
        v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectID"));
        v31 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v32 = *(void **)(v31 + 40);
        *(_QWORD *)(v31 + 40) = v30;

        if (objc_msgSend(v12, "isSystemPaper")
          && +[ICAccount hidesSystemPaperNotesInCustomFolders](ICAccount, "hidesSystemPaperNotesInCustomFolders"))
        {
          v33 = objc_claimAutoreleasedReturnValue(+[ICAccount globalVirtualSystemPaperFolder](ICAccount, "globalVirtualSystemPaperFolder"));
          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v35 = *(void **)(v34 + 40);
          *(_QWORD *)(v34 + 40) = v33;

        }
        v11 = v71;
        v5 = HIDWORD(v71);
        if (objc_msgSend(v12, "isMathNote")
          && +[ICAccount hidesMathNotesInCustomFolders](ICAccount, "hidesMathNotesInCustomFolders"))
        {
          v36 = objc_claimAutoreleasedReturnValue(+[ICAccount globalVirtualMathNotesFolder](ICAccount, "globalVirtualMathNotesFolder"));
          v37 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v38 = *(void **)(v37 + 40);
          *(_QWORD *)(v37 + 40) = v36;

        }
        if (objc_msgSend(v12, "isCallNote")
          && +[ICAccount hidesCallNotesInCustomFolders](ICAccount, "hidesCallNotesInCustomFolders"))
        {
          v39 = objc_claimAutoreleasedReturnValue(+[ICAccount globalVirtualCallNotesFolder](ICAccount, "globalVirtualCallNotesFolder"));
          v40 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v41 = *(void **)(v40 + 40);
          *(_QWORD *)(v40 + 40) = v39;

        }
        v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overrideContainerIdentifier"));

        if (v42)
        {
          v43 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "overrideContainerIdentifier"));
          v44 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v45 = *(void **)(v44 + 40);
          *(_QWORD *)(v44 + 40) = v43;

        }
      }
      else
      {
        v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectID"));
        v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "objectID"));
        v70 = objc_msgSend(v68, "isEqual:", v69);

        v8 &= v70;
        v11 = v71;
        v5 = HIDWORD(v71);
      }
      if ((objc_msgSend(v21, "isTrashFolder") & 1) != 0)
        v47 = 0;
      else
        v47 = objc_msgSend(v26, "isTrashFolder");
      goto LABEL_25;
    }
  }
  else
  {

  }
  v47 = 0;
  v11 = v71;
  v5 = HIDWORD(v71);
LABEL_25:

  v46 = v47;
LABEL_26:
  v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "changedValues"));
  v49 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "allKeys"));
  if ((objc_msgSend(v49, "containsObject:", CFSTR("title")) & 1) != 0)
  {
    v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
    v51 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectID"));
    HIDWORD(v71) = v46;
    v52 = v12;
    v53 = v11;
    v54 = a1;
    v55 = v10;
    v56 = v8;
    v57 = v5;
    v58 = (void *)v51;
    LODWORD(v71) = objc_msgSend(v50, "isEqual:", v51);

    v5 = v57;
    v8 = v56;
    v10 = v55;
    a1 = v54;
    v11 = v53;
    v12 = v52;
    v46 = HIDWORD(v71);

    if ((_DWORD)v71)
    {
      v72[0] = _NSConcreteStackBlock;
      v72[1] = 3221225472;
      v72[2] = sub_100034A58;
      v72[3] = &unk_100550110;
      v72[4] = *(_QWORD *)(a1 + 32);
      performBlockOnMainThread(v72);
    }
  }
  else
  {

  }
  v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedSearchResult", v71));

  if (v59)
  {
    v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
    v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectID"));
    v62 = objc_msgSend(v60, "isEqual:", v61);
    v63 = v62 ^ 1 | v46;
    if (((v63 | v11) & 1) != 0)
      v64 = v62 | v63 ^ 1;
    else
      v64 = objc_msgSend(v12, "isDeleted");
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v64;

  }
  if ((v5 & (v8 ^ 1 | v11 | v46)) != 0)
    v65 = v12;
  else
    v65 = 0;
  v66 = v65;

  return v66;
}

void sub_100034A58(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "window"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "windowScene"));
  objc_msgSend(v1, "updateSceneTitle:", v2);

}

id sub_100034AAC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  unsigned __int8 v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  BOOL v12;
  uint64_t v14;
  _QWORD v15[4];
  id v16;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteBrowseContainerItemID"));
  if (v2
    && (v3 = (void *)v2,
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteBrowseContainerItemID")),
        v5 = objc_msgSend(v4, "isEqual:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)),
        v4,
        v3,
        (v5 & 1) == 0))
  {
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet ic_setFromNonNilObject:](NSSet, "ic_setFromNonNilObject:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)));
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootNoteBrowseViewController"));
    v12 = objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode") == 0;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472;
    v15[2] = sub_100034C58;
    v15[3] = &unk_10054FF58;
    objc_copyWeak(&v16, (id *)(a1 + 48));
    BYTE1(v14) = v12;
    LOBYTE(v14) = 1;
    objc_msgSend(v8, "selectContainerWithIdentifiers:excludingIdentifiers:noteBrowseViewController:usingRootViewController:deferUntilDataLoaded:dismissOverlayContent:animated:ensurePresented:ensureSelectedNote:keepEditorShowing:dataIndexedBlock:dataRenderedBlock:", v9, v10, v11, 1, 0, &__kCFBooleanFalse, v14, 0, &__kCFBooleanTrue, 0, v15);

    objc_destroyWeak(&v16);
  }
  else
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteEditorViewController"));
    objc_msgSend(v7, "startEditing");

  }
  return objc_msgSend(*(id *)(a1 + 32), "setIsRecoveredNoteBeingPresented:", 0);
}

void sub_100034C44(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100034C58(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteEditorViewController"));
  objc_msgSend(v1, "startEditing");

}

BOOL sub_100034C9C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _BOOL8 v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "changedValues"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary ic_dictionaryFromNonNilDictionary:](NSMutableDictionary, "ic_dictionaryFromNonNilDictionary:", v4));

  objc_msgSend(v5, "removeObjectForKey:", CFSTR("serverShareData"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
  if (objc_msgSend(v6, "isEqual:", v7))
    v8 = objc_msgSend(v5, "count") != 0;
  else
    v8 = 0;

  return v8;
}

void sub_100034DB0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folderListViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "dataSource"));

  objc_msgSend(*(id *)(a1 + 32), "setIsSelectingNextRelevantNoteBrowseContainer:", 1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteBrowseContainerItemID"));

  v7 = *(void **)(a1 + 32);
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "selectedNoteBrowseContainerItemID"));
    v14 = v8;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v14, 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "nextRelevantItemIdentifierAfter:", v9));

    if (objc_msgSend(*(id *)(a1 + 32), "selectionStateTrackingEnabled"))
    {
      if (!v10)
      {
LABEL_8:

        goto LABEL_9;
      }
      v11 = objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v10));
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "setSelectedNoteBrowseContainerItemID:", v10);
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedContainerIdentifiers"));

      v4 = v5;
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "excludedContainerIdentifiers"));
    }

    v4 = (void *)v11;
    goto LABEL_8;
  }
  v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "selectedContainerIdentifiers"));

  v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "excludedContainerIdentifiers"));
  v5 = (void *)v13;
  v4 = (void *)v12;
LABEL_9:
  objc_msgSend(*(id *)(a1 + 32), "setIsSelectingNextRelevantNoteBrowseContainer:", 0);
  objc_msgSend(*(id *)(a1 + 32), "selectContainerWithIdentifiers:excludingIdentifiers:usingRootViewController:deferUntilDataLoaded:dismissOverlayContent:animated:", v4, v5, 1, 0, 0, 1);

}

void sub_100035124(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;

  if ((objc_msgSend(a1[4], "isAutomaticallySelectingNotes") & 1) != 0
    || (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "compactNavigationController")),
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "topViewController")),
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "rootNoteBrowseViewController")),
        v4,
        v3,
        v2,
        v3 == v4))
  {
    v5 = a1[4];
    v8 = objc_msgSend(a1[5], "copy");
    v6 = objc_msgSend(a1[6], "copy");
    LOBYTE(v7) = 1;
    objc_msgSend(v5, "showContainerWithIdentifiers:excludingIdentifiers:usingRootViewController:deferUntilDataLoaded:dismissOverlayContent:keepEditorShowing:animated:", v8, v6, 1, 0, 0, 0, v7);

  }
}

void sub_10003547C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100035498(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_existingObjectWithID:", *(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "folder"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "isTrashFolder");

}

void sub_1000354F4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", *(_QWORD *)(a1 + 40)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootNoteBrowseViewController"));
  LOWORD(v5) = 0;
  objc_msgSend(v2, "selectContainerWithIdentifiers:excludingIdentifiers:noteBrowseViewController:usingRootViewController:deferUntilDataLoaded:dismissOverlayContent:animated:ensurePresented:ensureSelectedNote:keepEditorShowing:dataIndexedBlock:dataRenderedBlock:", v6, v3, v4, 1, 0, v5, &__kCFBooleanFalse, &__kCFBooleanTrue, 0, 0);

}

void sub_10003571C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100035734(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_existingObjectWithID:", *(_QWORD *)(a1 + 40)));
  if (objc_msgSend(v3, "isSmartFolder"))
    v2 = v3;
  else
    v2 = 0;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v2);

}

void sub_100035898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000358B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "smartFolderQuery"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100035A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100035A78(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = objc_msgSend(objc_alloc((Class)ICQueryResultsController), "initWithManagedObjectContext:query:", a1[4], a1[5]);
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "performFetch"));
  v3 = *(_QWORD *)(a1[6] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100035D18(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  uint64_t v7;
  id v8;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = objc_opt_class(ICSearchResult);
    v3 = ICDynamicCast(v2, *(_QWORD *)(a1 + 32));
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    objc_msgSend(*(id *)(a1 + 40), "showSearchResult:animated:", v4, 1);
    if (!v4)
    {
      v5 = objc_msgSend(*(id *)(a1 + 40), "selectionStateTrackingEnabled");
      v6 = *(void **)(a1 + 40);
      if ((v5 & 1) != 0)
      {
        v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "previousSelectedNoteObjectID"));
        LOWORD(v7) = 256;
        objc_msgSend(v6, "selectNoteWithObjectID:scrollState:startEditing:showInkPicker:dismissOverlayContent:showLatestUpdatesIfAvailable:animated:ensurePresented:", v8, 0, 0, 0, 0, 1, v7);

        return;
      }
      objc_msgSend(*(id *)(a1 + 40), "setSelectedNoteObjectID:", 0);
    }

  }
  else
  {
    LOWORD(v7) = 256;
    objc_msgSend(*(id *)(a1 + 40), "selectNoteWithObjectID:scrollState:startEditing:showInkPicker:dismissOverlayContent:showLatestUpdatesIfAvailable:animated:ensurePresented:", *(_QWORD *)(a1 + 32), 0, 0, 0, 0, 1, v7);
  }
  if (!*(_QWORD *)(a1 + 32))
    objc_msgSend(*(id *)(a1 + 40), "validateState");
}

void sub_100036024(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("ICSplitViewControllerWillBeginDisplayModeChange"), v2);

}

void sub_10003606C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("ICSplitViewControllerDidEndDisplayModeChange"), v2);

}

void sub_1000362B0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
  objc_msgSend(v2, "postNotificationName:object:userInfo:", CFSTR("ICSplitViewControllerWillBeginAnimatedTransitionToStateRequest"), v3, *(_QWORD *)(a1 + 48));

}

void sub_100036300(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
  objc_msgSend(v1, "postNotificationName:object:", CFSTR("ICSplitViewControllerDidEndAnimatedTransitionToStateRequest"), v2);

}

void sub_1000365D4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
  if ((objc_msgSend(v5, "isCollapsed") & 1) != 0)
  {

  }
  else
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "behavior");

    if (v2 != (id)3)
    {
      if ((objc_msgSend(*(id *)(a1 + 32), "isSplitViewExpandingOrCollapsing") & 1) == 0)
      {
        if (objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode"))
          v3 = 2;
        else
          v3 = 1;
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
        objc_msgSend(v4, "ic_showColumn:animated:", v3, *(unsigned __int8 *)(a1 + 40));

      }
      if (*(_BYTE *)(a1 + 41))
        objc_msgSend(*(id *)(a1 + 32), "dismissPrimaryOverlayContent");
    }
  }
}

void sub_100036B1C(uint64_t a1)
{
  id v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectWithID:", *(_QWORD *)(a1 + 40)));
  v2 = objc_msgSend(*(id *)(a1 + 48), "addHashtagToNoteBodyIfMissing:", v3);

}

void sub_10003712C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if ((objc_msgSend(*(id *)(a1 + 32), "isAutomaticallySelectingNotes") & 1) != 0
    || (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "compactNavigationController")),
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "topViewController")),
        v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "rootNoteBrowseViewController")),
        v4,
        v3,
        v2,
        v3 == v4))
  {
    objc_msgSend(*(id *)(a1 + 32), "showTagSelection:", *(_QWORD *)(a1 + 40));
  }
}

id sub_100037330(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showTagSelection:", *(_QWORD *)(a1 + 40));
}

id sub_1000373D0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "validateState");
}

void sub_1000374F0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  _BOOL4 v6;
  uint8_t v7[16];
  uint8_t buf[16];

  objc_msgSend(*(id *)(a1 + 32), "validateState");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_windowHostingScene"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "session"));

  v5 = os_log_create("com.apple.notes", "UI");
  v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Refreshing Window scene after account change", buf, 2u);
    }

    v5 = objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    -[NSObject requestSceneSessionRefresh:](v5, "requestSceneSessionRefresh:", v4);
  }
  else if (v6)
  {
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "No scene session available so not refreshing window scene after account change", v7, 2u);
  }

}

void sub_1000378D4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionStateController"));
  objc_msgSend(v1, "willDismissSearch");

}

void sub_100037904(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folderListViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  objc_msgSend(v3, "scrollToContainerWithObjectID:", v2);

}

void sub_100038230(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10003824C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", *(_QWORD *)(a1 + 40)));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "folder"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));

  v5 = objc_msgSend(v4, "hasAnyCustomFoldersIncludingSystem:", 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "folder"));
  v7 = v6;
  if (v5)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "account"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectID"));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  else
  {
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectID"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;
  }

}

void sub_100038334(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", *(_QWORD *)(a1 + 40)));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "store"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  v5 = objc_msgSend(v4, "hasAnyCustomFolders");

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "store"));
  v7 = v6;
  if (v5)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "account"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectID"));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  else
  {
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectID"));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;
  }

}

void sub_100038414(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[ICAccount defaultAccountInContext:](ICAccount, "defaultAccountInContext:", *(_QWORD *)(a1 + 32)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "defaultFolder"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectID"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100038A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100038A9C(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectWithID:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)));
  if (objc_msgSend(v7, "isSmartFolder"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "account"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "defaultFolder"));
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
}

void sub_100039354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100039370(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectID"));
  BYTE1(v4) = 1;
  LOBYTE(v4) = *(_BYTE *)(a1 + 58);
  objc_msgSend(WeakRetained, "selectNoteWithObjectID:scrollState:startEditing:showInkPicker:dismissOverlayContent:showLatestUpdatesIfAvailable:animated:ensurePresented:", v2, 0, *(unsigned __int8 *)(a1 + 56), *(unsigned __int8 *)(a1 + 57), 1, 1, v4);

  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
    (*(void (**)(void))(v3 + 16))();

}

void sub_10003950C(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  _QWORD *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  void *v11;
  BOOL v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  void *v21;
  unsigned __int8 v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  void *v32;
  _QWORD v33[5];
  _QWORD v34[5];
  char v35;
  _QWORD v36[4];
  id v37;
  _QWORD v38[4];
  id v39;
  id location;
  uint64_t v41;
  uint64_t v42;

  if (objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode") == (id)1
    && *(_BYTE *)(a1 + 48)
    && +[ICFeatureFlags uniquelyiPadFluidTransitionsEnabled](_TtC11MobileNotes14ICFeatureFlags, "uniquelyiPadFluidTransitionsEnabled")&& (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentNoteBrowseViewController")), v3 = objc_msgSend(v2, "ic_isViewVisible"), v2, v3))
  {
    objc_initWeak(&location, *(id *)(a1 + 32));
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472;
    v38[2] = sub_100039A74;
    v38[3] = &unk_1005507B0;
    objc_copyWeak(&v39, &location);
    v4 = objc_retainBlock(v38);
    v5 = objc_alloc_init((Class)UIZoomTransitionOptions);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472;
    v36[2] = sub_100039B9C;
    v36[3] = &unk_1005507D8;
    objc_copyWeak(&v37, &location);
    objc_msgSend(v5, "setInteractiveDismissShouldBegin:", v36);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIViewControllerTransition zoomWithOptions:sourceViewProvider:](UIViewControllerTransition, "zoomWithOptions:sourceViewProvider:", v5, v4));
    objc_msgSend(*(id *)(a1 + 40), "setPreferredTransition:", v6);

    objc_destroyWeak(&v37);
    objc_destroyWeak(&v39);
    objc_destroyWeak(&location);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setPreferredTransition:", 0);
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
  if ((objc_msgSend(v7, "isCollapsed") & 1) != 0)
  {

LABEL_9:
    if (*(_BYTE *)(a1 + 48))
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "compactNavigationController"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "viewControllers"));
      v10 = objc_msgSend(v9, "containsObject:", *(_QWORD *)(a1 + 40));

      if ((v10 & 1) == 0)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "compactNavigationController"));
        objc_msgSend(v11, "pushViewController:animated:", *(_QWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 49));
LABEL_12:

        goto LABEL_25;
      }
    }
    goto LABEL_25;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "hasCompactWidth"))
  {
    v12 = objc_msgSend(*(id *)(a1 + 32), "behavior") == (id)3;

    if (v12)
      goto LABEL_9;
  }
  else
  {

  }
  if (objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode") == (id)1)
    {
      if (*(_BYTE *)(a1 + 48))
      {
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryNavigationController"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "viewControllers"));
        v15 = objc_msgSend(v14, "containsObject:", *(_QWORD *)(a1 + 40));

        if ((v15 & 1) == 0)
        {
          if (*(_BYTE *)(a1 + 49))
            v16 = objc_msgSend(*(id *)(a1 + 32), "isNoteEditorVisible") ^ 1;
          else
            v16 = 0;
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryNavigationController"));
          objc_msgSend(v11, "pushViewController:animated:", *(_QWORD *)(a1 + 40), v16);
          goto LABEL_12;
        }
      }
    }
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryNavigationController"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "viewControllers"));
    v42 = *(_QWORD *)(a1 + 40);
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v42, 1));
    v20 = objc_msgSend(v18, "isEqualToArray:", v19);

    if ((v20 & 1) == 0)
    {
      v41 = *(_QWORD *)(a1 + 40);
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v41, 1));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "secondaryNavigationController"));
      objc_msgSend(v32, "setViewControllers:", v11);

      goto LABEL_12;
    }
  }
LABEL_25:
  if (*(_BYTE *)(a1 + 50))
  {
    v21 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
    v22 = objc_msgSend(v21, "shouldShowMigrationScreen");

    if ((v22 & 1) == 0)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472;
      v34[2] = sub_100039C5C;
      v34[3] = &unk_100550360;
      v35 = *(_BYTE *)(a1 + 51);
      v34[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v23, "ic_performBlockAfterActiveTransition:", v34);

    }
  }
  v24 = objc_opt_class(ICNote);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
  v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ic_existingObjectWithID:", v26));
  v28 = ICDynamicCast(v24, v27);
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

  if (v29 && *(_BYTE *)(a1 + 52) && objc_msgSend(v29, "isSharedViaICloud"))
  {
    v30 = objc_msgSend(objc_alloc((Class)ICActivityStreamDigest), "initWithObject:", v29);
    if (objc_msgSend(v30, "hasUnseenHighlights"))
    {
      objc_msgSend(v29, "markActivitySummaryViewed");
      v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472;
      v33[2] = sub_100039CB0;
      v33[3] = &unk_100550110;
      v33[4] = *(_QWORD *)(a1 + 32);
      objc_msgSend(v31, "ic_performBlockAfterActiveTransition:", v33);

    }
  }

}

void sub_100039A30(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 112));
  _Unwind_Resume(a1);
}

id sub_100039A74(uint64_t a1)
{
  id WeakRetained;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ((objc_msgSend(WeakRetained, "isSearchActive") & 1) != 0)
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selectedSearchResult"));
  else
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "selectedNoteObjectID"));
  v3 = (void *)v2;
  if ((objc_msgSend(WeakRetained, "isSearchActive") & 1) != 0)
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchController"));
  else
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "currentNoteBrowseViewController"));
  v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "collectionView"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "cellForItemIdentifier:", v3));
  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
    objc_msgSend(v8, "layoutIfNeeded");

    v9 = ICProtocolCast(&OBJC_PROTOCOL___ICContextMenuInteractionPreviewProviding, v7);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "contextMenuInteractionPreview"));
    v12 = (void *)v11;
    if (v11)
      v13 = (void *)v11;
    else
      v13 = v7;
    v14 = v13;

  }
  else
  {
    v14 = v6;
  }

  return v14;
}

uint64_t sub_100039B9C(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = (uint64_t)objc_msgSend(v3, "willBegin");

  if ((_DWORD)v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteEditorViewController"));
    if ((objc_msgSend(v6, "isInkPickerShowing") & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteEditorViewController"));
      if ((objc_msgSend(v7, "userWantsToSeeDateLabel") & 1) != 0)
      {
        v5 = 1;
      }
      else
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteEditorViewController"));
        v5 = (uint64_t)objc_msgSend(v8, "isPasswordEntryShowing");

      }
    }

  }
  return v5;
}

void sub_100039C5C(uint64_t a1)
{
  int v1;
  void *v2;
  id v3;
  id v4;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = *(void **)(a1 + 32);
  if (v1)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "legacyNoteEditorViewController"));
    objc_msgSend(v3, "setEditing:animated:", 1, 1);

  }
  else
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "noteEditorViewController"));
    objc_msgSend(v4, "startEditing");

  }
}

void sub_100039CB0(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "selectedNoteObjectID"));
  objc_msgSend(v1, "showRecentUpdatesForNoteWithObjectID:suppressSidebar:", v2, 1);

}

uint64_t sub_100039E08(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICTagAllTagsItemIdentifier archiveIdentifier](ICTagAllTagsItemIdentifier, "archiveIdentifier"));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  if ((v5 & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectIDFromURL:", v3));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "existingManagedObjectWithObjectID:", v7));
    v9 = v8;
    if (v8 && (objc_msgSend(v8, "isDeleted") & 1) == 0)
    {
      v10 = objc_opt_class(ICCloudSyncingObject);
      v11 = ICDynamicCast(v10, v9);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      if ((objc_msgSend(v12, "markedForDeletion") & 1) != 0)
      {
        v6 = 1;
      }
      else
      {
        v13 = objc_opt_class(NoteObject);
        v14 = ICDynamicCast(v13, v9);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        v6 = (uint64_t)objc_msgSend(v15, "isMarkedForDeletion");

      }
    }
    else
    {
      v6 = 1;
    }

  }
  return v6;
}

NSString *__cdecl sub_10003A7C4(id a1, id a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = a2;
  v3 = objc_opt_class(NSManagedObjectID);
  v4 = ICDynamicCast(v3, v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "URIRepresentation"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "absoluteString"));

  return (NSString *)v7;
}

NSURL *__cdecl sub_10003A838(id a1, NSManagedObjectID *a2)
{
  return -[NSManagedObjectID URIRepresentation](a2, "URIRepresentation");
}

id sub_10003A988(uint64_t a1)
{
  return +[ICShareNotifier clearNotificationForRecordID:](ICShareNotifier, "clearNotificationForRecordID:", *(_QWORD *)(a1 + 32));
}

void sub_10003ABD0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_existingObjectWithID:", *(_QWORD *)(a1 + 40)));

  if (v4 && objc_msgSend(v4, "isEmpty"))
  {
    +[ICNote deleteEmptyNote:](ICNote, "deleteEmptyNote:", v4);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "managedObjectContext"));
    objc_msgSend(v3, "ic_save");

  }
}

void sub_10003AC58(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_existingObjectWithID:", *(_QWORD *)(a1 + 40)));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "content"));
  if ((objc_msgSend(v3, "ic_containsNonWhitespaceCharacters") & 1) != 0)
    goto LABEL_5;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "attachments"));
  v5 = objc_msgSend(v4, "count");

  v6 = v9;
  if (v9 && !v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NotesApp sharedNotesApp](NotesApp, "sharedNotesApp"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "noteContext"));
    objc_msgSend(v8, "deleteNote:", v9);

    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
    objc_msgSend(v3, "ic_save");
LABEL_5:

    v6 = v9;
  }

}

void sub_10003BF40(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchController"));
  if ((objc_msgSend(v5, "isFirstResponder") & 1) != 0
    || (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchBar")),
        v3 = objc_msgSend(v2, "isFirstResponder"),
        v2,
        v3))
  {
    objc_msgSend(v5, "cancelSearch");
  }
  else
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentSearchBarViewController"));
    objc_msgSend(v4, "startSearchBecomeFirstResponder:", 1);

  }
}

void sub_10003C610(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  int v5;
  void *v6;
  id v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
  objc_msgSend(v2, "showColumn:", 1);

  v3 = objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode");
  if (v3 != (id)1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "trailingSidebarSplitViewController"));
    if (!objc_msgSend(v2, "isCollapsed"))
      goto LABEL_9;
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeEditorController"));
  if (objc_msgSend(v4, "ic_isViewVisible"))
  {
    v5 = *(unsigned __int8 *)(a1 + 40);

    if (v3 != (id)1)
    if (!v5)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activeEditorController"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "navigationController"));
      v7 = objc_msgSend(v6, "popViewControllerAnimated:", 1);

LABEL_9:
    }
  }
  else
  {

    if (v3 != (id)1)
      goto LABEL_9;
  }
  v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentNoteBrowseViewController"));
  objc_msgSend(v8, "becomeFirstResponder");

}

uint64_t sub_10003C718(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10003D21C(uint64_t a1, void *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v7 = a2;
  v3 = objc_opt_class(NSManagedObject);
  if ((objc_opt_isKindOfClass(v7, v3) & 1) != 0)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectID"));
    LOWORD(v6) = 257;
    objc_msgSend(v4, "selectNoteWithObjectID:scrollState:startEditing:showInkPicker:dismissOverlayContent:showLatestUpdatesIfAvailable:animated:ensurePresented:", v5, 0, 0, 0, 1, 1, v6);

  }
}

void sub_10003E0BC(uint64_t a1)
{
  uint64_t v2;
  id v3;

  if (*(_BYTE *)(a1 + 64))
    objc_msgSend(*(id *)(a1 + 32), "shareButtonPressedWithSender:", *(_QWORD *)(a1 + 40));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentWithIdentifier:context:](ICAttachment, "attachmentWithIdentifier:context:", v2, *(_QWORD *)(a1 + 56)));
    objc_msgSend(*(id *)(a1 + 32), "presentAttachment:", v3);

  }
}

void sub_10003E130(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  uint64_t v12;
  char v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities attachmentForTranscriptionDonationURL:managedObjectContext:](ICAppURLUtilities, "attachmentForTranscriptionDonationURL:managedObjectContext:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  if ((objc_msgSend(v2, "isAudio") & 1) != 0)
  {
    if (v2)
    {
      v3 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](NSArray, "arrayWithObject:", v2));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "noteEditorViewController"));
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_window"));
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "noteEditorViewController"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "presentingViewController"));
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_10003E2C4;
      v10[3] = &unk_100550908;
      v8 = v2;
      v9 = *(_QWORD *)(a1 + 48);
      v11 = v8;
      v12 = v9;
      v13 = *(_BYTE *)(a1 + 56);
      +[ICDocCamPDFGenerator generatePDFsIfNecessaryForGalleryAttachments:displayWindow:presentingViewController:completionHandler:](ICDocCamPDFGenerator, "generatePDFsIfNecessaryForGalleryAttachments:displayWindow:presentingViewController:completionHandler:", v3, v5, v7, v10);

    }
    else
    {
      v3 = os_log_create("com.apple.notes", "UI");
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        sub_100404540();
    }
  }
  else
  {
    v3 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10040456C();
  }

}

void sub_10003E2C4(uint64_t a1, char a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  id v12;

  if ((a2 & 1) != 0)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "media"));
    v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mediaURL"));

    v4 = objc_opt_class(ICAttachmentAudioModel);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachmentModel"));
    v6 = ICDynamicCast(v4, v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "audioDocument"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "transcriptAsPlainText"));

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "creationDate"));
    objc_msgSend(*(id *)(a1 + 40), "showAudioDonationDialog:mediaURL:transcript:date:", *(unsigned __int8 *)(a1 + 48), v12, v9, v10);

  }
  else
  {
    v11 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_100404598();

  }
}

void sub_10003E3EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  if (a2 == 2)
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    objc_msgSend(v8, "openURL:options:completionHandler:", *(_QWORD *)(a1 + 48), &__NSDictionary0__struct, 0);
  }
  else if (a2 == 1)
  {
    v8 = (id)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedStringForKey:value:table:", CFSTR("Note Unavailable"), &stru_1005704B8, 0));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("This could be because the note was deleted, exists on a different device or account, or is not shared with you."), &stru_1005704B8, 0));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mainSplitViewController"));
    +[UIAlertController ic_showAlertWithTitle:message:viewController:](UIAlertController, "ic_showAlertWithTitle:message:viewController:", v4, v6, v7);

  }
  else
  {
    if (a2)
      return;
    v3 = *(_QWORD *)(a1 + 40);
    v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    objc_msgSend(v8, "setNoteViewEventSourceObjectID:", v3);
  }

}

id sub_10003E7C4(uint64_t a1)
{
  return +[ICViewControllerManager createDonationOf:transcript:date:isFeedbackPositive:completionHandler:](ICViewControllerManager, "createDonationOf:transcript:date:isFeedbackPositive:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), &stru_100550950);
}

void sub_10003F1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10003F204(uint64_t a1, uint64_t a2, void *a3)
{
  id *v3;
  id v4;
  void *v5;
  id WeakRetained;

  v3 = (id *)(a1 + 32);
  v4 = a3;
  WeakRetained = objc_loadWeakRetained(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "eventReporter"));
  objc_msgSend(v5, "submitNoteActionMenuEventForNoteEditorWithUsageType:activityType:", 3, v4);

}

void sub_10003FCD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10003FCE8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", *(_QWORD *)(a1 + 40)));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v3, "isEmpty");
}

void sub_10003FD48(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", *(_QWORD *)(a1 + 40)));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "content"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v3, "length") == 0;

}

void sub_10004015C(id *a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  _BOOL4 v13;
  void *v14;
  unsigned int v15;
  id v16;
  void *v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  char v34;
  void *v35;
  void *v36;
  unsigned __int8 v37;
  void *v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  void *v44;
  id v45;
  void *v46;
  id v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  void *v50;
  id v51;
  unsigned __int8 v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  unsigned __int8 v61;
  unsigned __int8 v62;
  unsigned int v63;
  unsigned int v64;
  void *v65;
  id v66;
  void *v67;
  void *v68;
  void *v69;
  id v70;

  v70 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "containerSelectionOptions"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tagSelection"));
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tagSelection"));
    if (objc_msgSend(v3, "isNonEmpty"))
    {
      if ((objc_msgSend(v70, "forceApply") & 1) != 0)
      {
        v4 = 1;
      }
      else
      {
        v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "tagSelection"));
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tagSelection"));
        v4 = objc_msgSend(v5, "isEqual:", v6) ^ 1;

      }
    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v4 = 0;
  }

  v7 = a1[4];
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "selectedNoteBrowseContainerItemID"));
  v9 = objc_msgSend(v7, "selectedContainerEqualTo:", v8);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "selectedNoteBrowseContainerItemID"));
  if (v10)
    v11 = objc_msgSend(v70, "forceApply") | v9 ^ 1;
  else
    v11 = 0;

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "currentSelectedSearchResult"));
  if (v12)
  {
    v13 = 0;
  }
  else
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "currentSelectedSearchResult"));
    v13 = v14 != 0;

  }
  v15 = objc_msgSend(v70, "usingRootViewController");
  if (v4)
  {
    v16 = a1[6];
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "tagSelection"));
    objc_msgSend(v16, "showTagSelection:", v17);
LABEL_44:

    goto LABEL_45;
  }
  if ((v11 | v13) == 1)
  {
    v18 = v15;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "selectedNoteBrowseContainerItemID"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet ic_setFromNonNilObject:](NSSet, "ic_setFromNonNilObject:", v19));

    v20 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "selectedNoteBrowseContainerItemID"));
    v22 = ICDynamicCast(v20, v21);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

    v69 = v23;
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "type"));
    v25 = (void *)ICVirtualSmartFolderItemIdentifierTypeRecentlyDeletedMathNotes;

    if (v24 == v25)
      v26 = 0;
    else
      v26 = v18;
    v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "dismissOverlayContent"));
    v28 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "selectedNoteBrowseContainerItemID"));
    v30 = ICDynamicCast(v28, v29);
    v31 = (void *)objc_claimAutoreleasedReturnValue(v30);

    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "type"));
    v33 = (void *)ICVirtualSmartFolderItemIdentifierTypeMathNotes;

    if (v32 == v33)
    {

      v27 = &__kCFBooleanTrue;
    }
    else
    {
      if (v27)
        v34 = 1;
      else
        v34 = v9;
      if ((v34 & 1) != 0 || !v13)
      {
        v35 = v70;
        if (!v27)
        {
          v58 = a1[6];
          v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
          v59 = objc_msgSend(v70, "deferUntilDataLoaded");
          v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keepEditorShowing"));
          objc_msgSend(v58, "showContainerWithIdentifiers:excludingIdentifiers:usingRootViewController:deferUntilDataLoaded:keepEditorShowing:animated:", v17, v27, v26, v59, v41, objc_msgSend(v70, "animated"));
LABEL_43:

          goto LABEL_44;
        }
LABEL_31:
        v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "completionBlocks"));

        if (v36)
        {
          v37 = objc_msgSend(v70, "ensurePresented");
          v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "ensureSelectedNote"));

          v67 = v31;
          v68 = v27;
          if (v38)
          {
            v62 = v37;
            v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "ensureSelectedNote"));
            v61 = objc_msgSend(v39, "BOOLValue");

          }
          else if (objc_msgSend(a1[6], "hasCompactWidth")
                 && (objc_msgSend(a1[4], "objectSelectionHasChangedComparedToModel:", a1[5]) & 1) != 0)
          {
            v61 = 1;
            v62 = 0;
          }
          else
          {
            v62 = v37;
            v45 = a1[6];
            v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "selectedNoteBrowseContainerItemID"));
            v47 = objc_msgSend(v45, "enforcedNoteContainerViewModeForContainerItemID:", v46);

            v48 = objc_msgSend(a1[6], "isAutomaticallySelectingNotes");
            if (v47 == (id)1)
              v49 = 0;
            else
              v49 = v48;
            v61 = v49;
          }
          v66 = a1[6];
          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
          v65 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "noteBrowseViewController"));
          v64 = objc_msgSend(v70, "usingRootViewController");
          v63 = objc_msgSend(v70, "deferUntilDataLoaded");
          v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "dismissOverlayContent"));
          v51 = objc_msgSend(v50, "BOOLValue");
          v52 = objc_msgSend(v70, "animated");
          v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keepEditorShowing"));
          v54 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "completionBlocks"));
          v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "dataIndexedBlock"));
          v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "completionBlocks"));
          v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "dataRenderedBlock"));
          BYTE2(v60) = v61;
          BYTE1(v60) = v62;
          LOBYTE(v60) = v52;
          objc_msgSend(v66, "showContainerWithIdentifiers:excludingIdentifiers:noteBrowseViewController:usingRootViewController:deferUntilDataLoaded:dismissOverlayContent:animated:ensurePresented:ensureSelectedNote:keepEditorShowing:dataIndexedBlock:dataRenderedBlock:", v17, v41, v65, v64, v63, v51, v60, v53, v55, v57);

          v31 = v67;
          v27 = v68;
        }
        else
        {
          v40 = a1[6];
          v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](NSSet, "set"));
          v42 = objc_msgSend(v70, "deferUntilDataLoaded");
          v43 = objc_msgSend(v27, "BOOLValue");
          v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "keepEditorShowing"));
          LOBYTE(v60) = objc_msgSend(v70, "animated");
          objc_msgSend(v40, "showContainerWithIdentifiers:excludingIdentifiers:usingRootViewController:deferUntilDataLoaded:dismissOverlayContent:keepEditorShowing:animated:", v17, v41, v26, v42, v43, v44, v60);

        }
        goto LABEL_43;
      }
      v27 = &__kCFBooleanFalse;
    }
    v35 = v70;
    goto LABEL_31;
  }
LABEL_45:

}

void sub_1000407B8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  unsigned __int8 v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  unsigned int v27;
  id v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;

  v44 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedObjectID"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectSelectionOptions"));
  if (objc_msgSend(*(id *)(a1 + 40), "isAutomaticallySelectingNotes")
    && !objc_msgSend(*(id *)(a1 + 40), "isNoteEditorVisible")
    || !objc_msgSend(*(id *)(a1 + 40), "objectAlreadyLoadedInEditorWithObjectID:", v44))
  {
    goto LABEL_7;
  }
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentAttachmentPresenter"));
  if (v3
    || objc_msgSend(*(id *)(a1 + 32), "objectSelectionHasChangedComparedToModel:", *(_QWORD *)(a1 + 48)))
  {

    goto LABEL_7;
  }
  v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentSelectedSearchResult"));

  if (v29)
  {
LABEL_7:
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "selectedNoteObjectID"));

    if (v4)
    {
      v5 = *(void **)(a1 + 40);
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "selectedNoteObjectID"));
      objc_msgSend(v5, "deleteEmptyNoteIfNeeded:", v6);

    }
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));

    if (v7)
    {
      v8 = *(void **)(a1 + 40);
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedNoteObjectID"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "scrollState"));
      v11 = objc_msgSend(v2, "startEditing");
      v12 = objc_msgSend(v2, "showInkPicker");
      v13 = objc_msgSend(v2, "dismissOverlayContent");
      v14 = objc_msgSend(v2, "showLatestUpdatesIfAvailable");
      v15 = objc_msgSend(v2, "animated");
      BYTE1(v43) = objc_msgSend(v2, "ensurePresented");
      LOBYTE(v43) = v15;
      objc_msgSend(v8, "showNoteWithObjectID:scrollState:startEditing:showInkPicker:dismissOverlayContent:showLatestUpdatesIfAvailable:animated:ensurePresented:", v9, v10, v11, v12, v13, v14, v43);

    }
    else
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedInvitationObjectID"));

      v17 = *(void **)(a1 + 40);
      if (v16)
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectedInvitationObjectID"));
        objc_msgSend(v17, "showInvitationWithObjectID:animated:", v9, objc_msgSend(v2, "animated"));
      }
      else
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "trailingSidebarSplitViewController"));
        v19 = objc_msgSend(v18, "isCollapsed");

        v20 = *(void **)(a1 + 40);
        if ((v19 & 1) != 0)
        {
          v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "activeEditorController"));
          if (!v21)
            goto LABEL_22;
          v22 = (void *)v21;
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "compactNavigationController"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "viewControllers"));
          v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "lastObject"));
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activeEditorController"));
          v27 = objc_msgSend(v25, "isEqual:", v26);

          if (!v27)
            goto LABEL_22;
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "compactNavigationController"));
          v28 = objc_msgSend(v9, "popViewControllerAnimated:", 1);
        }
        else
        {
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "noteEditorViewController"));
          objc_msgSend(v31, "setNote:", 0);

          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "legacyNoteEditorViewController"));
          objc_msgSend(v32, "displayNote:", 0);

          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "mainSplitViewController"));
          objc_msgSend(v9, "showColumn:", 1);
        }
      }
    }

LABEL_22:
    v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedModernNote"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activityStreamNavigationController"));
    objc_msgSend(v34, "setObject:", v33);

    v35 = *(void **)(a1 + 40);
    v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "window"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "windowScene"));
    objc_msgSend(v35, "updateSceneTitle:", v37);

    v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityStreamSelection"));
    objc_msgSend(*(id *)(a1 + 40), "setActivityStreamSelection:", v38);

    v39 = objc_msgSend(*(id *)(a1 + 32), "activityStreamViewMode");
    v40 = *(void **)(a1 + 40);
    if (v39)
    {
      v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedModernNote"));
      objc_msgSend(v40, "presentActivityStreamForObject:viewMode:animated:", v41, objc_msgSend(*(id *)(a1 + 32), "activityStreamViewMode"), 0);

    }
    else
    {
      objc_msgSend(*(id *)(a1 + 40), "hideActivityStreamWithCompletion:", 0);
    }
    goto LABEL_25;
  }
  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentSelectedSearchResult"));

  if (v30)
    objc_msgSend(*(id *)(a1 + 40), "dismissOverlayContent");
LABEL_25:
  v42 = *(_QWORD *)(a1 + 56);
  if (v42)
    (*(void (**)(void))(v42 + 16))();

}

void sub_100040CD8(id *a1)
{
  void *v2;
  _BOOL4 v3;
  _BOOL4 v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;

  if (objc_msgSend(a1[4], "isSearchActive")
    && (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "currentSelectedSearchResult")),
        v2,
        !v2))
  {
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "selectedObjectID"));
    if (v20)
    {
      v3 = 0;
    }
    else
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "selectedObjectID"));
      v3 = v21 != 0;

    }
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "selectedObjectID"));
    if (v22)
    {
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "selectedObjectID"));
      v4 = v23 == 0;

    }
    else
    {
      v4 = 0;
    }

  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "currentSelectedSearchResult"));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "noteEditorViewController"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "currentSelectedSearchResult"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "highlightPatternRegexFinder"));
    objc_msgSend(v6, "highlightSearchMatchesForRegexFinder:", v8);

  }
  else if (!v3 && !v4)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v10 = objc_msgSend(v9, "applicationState");

    if (!v10)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "currentNoteBrowseViewController"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "navigationItem"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "searchController"));
      v14 = objc_msgSend(v13, "isActive");

      if (v14)
      {
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "currentNoteBrowseViewController"));
        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "navigationItem"));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "searchController"));
        objc_msgSend(v17, "setActive:", 0);

      }
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "noteEditorViewController"));
      objc_msgSend(v18, "highlightSearchMatchesForRegexFinder:", 0);

      objc_msgSend(a1[4], "setIsSearchActiveWithQuery:", 0);
    }
  }
  objc_msgSend(a1[4], "setIsSelectedNoteTogglingLock:", 0);
  v19 = a1[4];
  v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "mainSplitViewController"));
  objc_msgSend(v19, "updateNoteEditorBezelsIfNeededWithDisplayMode:force:", objc_msgSend(v24, "displayMode"), 0);

}

id sub_100040F14(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "didUpdateModelForSelectionStateController:", *(_QWORD *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "adoptContainerFromSelectionStateController:oldModel:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  return _objc_msgSend(*(id *)(a1 + 32), "adoptObjectFromSelectionStateController:oldModel:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

void sub_10004115C(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned int v6;
  void *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  uint8_t v11[16];

  objc_msgSend(a1[4], "didUpdateModelForSelectionStateController:", a1[5]);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "noteEditorViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "note"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "selectedNoteObjectID"));
  v6 = objc_msgSend(v4, "isEqual:", v5);

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "noteEditorViewController"));
    objc_msgSend(v7, "loadViewIfNeeded");

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "scrollStateForNote:", v3));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "noteEditorViewController"));
    objc_msgSend(v9, "applyScrollStateFromArchive:", v8);

  }
  else
  {
    v10 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Restore Quicknote UI editor state skipping because Note ID doesn't match", v11, 2u);
    }

  }
}

void sub_100041310(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "behavior") == (id)3)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteEditorViewController"));
    objc_msgSend(v4, "updateBarButtons");

  }
  else
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentSelectedSearchResult"));

    if (v2)
      objc_msgSend(*(id *)(a1 + 32), "dismissOverlayContent");
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentAttachmentPresenter"));

    if (v3)
      objc_msgSend(*(id *)(a1 + 32), "dismissAnyPresentedViewControllerAnimated:completion:", 1, 0);
  }
}

Class sub_1000418D4()
{
  Class Class;

  sub_100041914();
  Class = objc_getClass("FBSOpenApplicationService");
  qword_1005DDD08 = (uint64_t)Class;
  if (!Class)
    sub_1004045C4();
  off_1005CC5A0 = (uint64_t (*)())sub_100041954;
  return Class;
}

void *sub_100041914()
{
  void *result;

  result = (void *)qword_1005DDD10;
  if (!qword_1005DDD10)
  {
    result = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    qword_1005DDD10 = (uint64_t)result;
    if (!result)
      sub_1004045EC();
  }
  return result;
}

id sub_100041954()
{
  return (id)qword_1005DDD08;
}

id sub_100041960()
{
  void *v0;
  id *v1;

  v0 = sub_100041914();
  v1 = (id *)dlsym(v0, "FBSOpenApplicationOptionKeyUnlockDevice");
  if (!v1)
    sub_100404614();
  objc_storeStrong((id *)&qword_1005DDCF0, *v1);
  off_1005CC5A8 = (uint64_t (*)())sub_1000419B8;
  return (id)qword_1005DDCF0;
}

id sub_1000419B8()
{
  return (id)qword_1005DDCF0;
}

id sub_1000419C4()
{
  void *v0;
  id *v1;

  v0 = sub_100041914();
  v1 = (id *)dlsym(v0, "FBSOpenApplicationOptionKeyPromptUnlockDevice");
  if (!v1)
    sub_10040463C();
  objc_storeStrong((id *)&qword_1005DDCF8, *v1);
  off_1005CC5B0 = (uint64_t (*)())sub_100041A1C;
  return (id)qword_1005DDCF8;
}

id sub_100041A1C()
{
  return (id)qword_1005DDCF8;
}

id sub_100041A28()
{
  void *v0;
  id *v1;

  v0 = sub_100041914();
  v1 = (id *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  if (!v1)
    sub_100404664();
  objc_storeStrong((id *)&qword_1005DDD00, *v1);
  off_1005CC5B8 = (uint64_t (*)())sub_100041A80;
  return (id)qword_1005DDD00;
}

id sub_100041A80()
{
  return (id)qword_1005DDD00;
}

Class sub_100041A8C()
{
  Class Class;

  sub_100041914();
  Class = objc_getClass("FBSOpenApplicationOptions");
  qword_1005DDD18 = (uint64_t)Class;
  if (!Class)
    sub_10040468C();
  off_1005CC5C0 = (uint64_t (*)())sub_100041ACC;
  return Class;
}

id sub_100041ACC()
{
  return (id)qword_1005DDD18;
}

uint64_t sub_100041AF0(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40);
}

uint64_t sub_1000420B0(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;

  v5 = a2;
  v6 = a3;
  v7 = objc_opt_class(NSString);
  v8 = ICDynamicCast(v7, v5);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = objc_msgSend(v9, "isEqualToString:", *(_QWORD *)(a1 + 32));

  if ((v10 & 1) != 0)
  {
    v11 = -1;
  }
  else
  {
    v12 = objc_opt_class(NSString);
    v13 = ICDynamicCast(v12, v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = objc_msgSend(v14, "isEqualToString:", *(_QWORD *)(a1 + 32));

    if ((v15 & 1) != 0)
      v11 = 1;
    else
      v11 = (uint64_t)objc_msgSend(v5, "compare:", v6);
  }

  return v11;
}

id sub_100042200(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD v8[5];
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000422B8;
  v8[3] = &unk_100550A48;
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v3;
  v5 = v3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction ic_actionWithTitle:subtitle:imageName:handler:](UIAction, "ic_actionWithTitle:subtitle:imageName:handler:", v4, 0, 0, v8));

  return v6;
}

void sub_1000422B8(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  id v3;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "noteContainer"));
  objc_msgSend(v1, "promptToAddFolderToAccount:allowsSmartFolder:noteContainer:completionHandler:", v2, 1, v3, 0);

}

void sub_100042484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000424A0(_QWORD *a1, void *a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;

  v3 = (void *)a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a2;
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "smartFolderQuery"));
  objc_msgSend(v3, "createFolderInAccount:noteContainer:smartFolderQuery:folderTitle:completionHandler:", v4, v5, v7, v6, a1[7]);

}

void sub_100042518(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  objc_msgSend(WeakRetained, "setFilterSelection:", v5);
  if (v5 && (objc_msgSend(v5, "isEmpty") & 1) == 0)
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICQuery queryForNotesMatchingFilterSelection:](ICQuery, "queryForNotesMatchingFilterSelection:", v5));
  else
    v7 = 0;
  objc_msgSend(WeakRetained, "createFolderInAccount:noteContainer:smartFolderQuery:folderTitle:completionHandler:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v7, v8, *(_QWORD *)(a1 + 48));

}

id sub_100042A64(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_icaxAnnounceCreatedFolder:", *(_QWORD *)(a1 + 40));
}

void sub_100042DBC(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v7 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("Name"), &stru_1005704B8, 0));
  objc_msgSend(v7, "setPlaceholder:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewController"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "view"));
  objc_msgSend(v7, "setAutocapitalizationType:", ICLocalizedCapitalizationStyleForView());

  objc_msgSend(v7, "setClearButtonMode:", 1);
  objc_msgSend(v7, "addTarget:action:forControlEvents:", *(_QWORD *)(a1 + 32), "editTitleTextFieldChanged:", 0x20000);

}

uint64_t sub_100042E98(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_100042EB0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textFields"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "text"));
  v4 = objc_msgSend(v3, "copy");

  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v4);

}

void sub_100042F34(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textFields"));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "firstObject"));

  objc_msgSend(v2, "becomeFirstResponder");
}

void sub_100044100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100044160(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100044170(uint64_t a1)
{

}

void sub_100044178(uint64_t a1)
{
  NSString *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[ICAccount allActiveAccountsInContext:](ICAccount, "allActiveAccountsInContext:", *(_QWORD *)(a1 + 32)));
  v2 = NSStringFromSelector("identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "valueForKey:", v3));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_1000448EC(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Fix Corrupt Database took too long when moving to the background", v2, 2u);
  }

}

id sub_10004495C(uint64_t a1)
{
  return +[ICRadarUtilities promptUserToFileBugWithAlertMessage:bugTitle:bugDescription:](ICRadarUtilities, "promptUserToFileBugWithAlertMessage:bugTitle:bugDescription:", CFSTR("Notes detected database corruption, please file radar"), CFSTR("Notes Database Corruption Detected"), *(_QWORD *)(a1 + 32));
}

void sub_100044B3C(uint64_t a1)
{
  int v2;
  NSObject *v3;
  _BOOL4 v4;
  void *v5;

  v2 = *(unsigned __int8 *)(a1 + 40);
  v3 = os_log_create("com.apple.notes", "Cloud");
  v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG);
  if (v2)
  {
    if (v4)
      sub_1004048C8();

  }
  else
  {
    if (v4)
      sub_100404840();

    objc_msgSend(*(id *)(a1 + 32), "setShouldResumeSyncOnForeground:", 1);
    objc_msgSend(*(id *)(a1 + 32), "cancelEverythingWithCompletionHandler:", 0);
    v3 = objc_claimAutoreleasedReturnValue(+[ICBackgroundTaskScheduler sharedScheduler](ICBackgroundTaskScheduler, "sharedScheduler"));
    -[NSObject scheduleTask:completion:](v3, "scheduleTask:completion:", objc_opt_class(ICCloudSyncBackgroundTask), &stru_100550B98);
  }

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v5, "endBackgroundTask:", qword_1005DDD20);

  qword_1005DDD20 = UIBackgroundTaskInvalid;
}

void sub_100044C44(id a1, BOOL a2, NSError *a3)
{
  NSError *v4;
  NSObject *v5;

  v4 = a3;
  v5 = os_log_create("com.apple.notes", "Cloud");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_100404950(a2, (uint64_t)v4, v5);

}

void sub_100044CB0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;

  v2 = os_log_create("com.apple.notes", "Cloud");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1004049EC();

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v3, "save");

  objc_msgSend(*(id *)(a1 + 32), "setSyncOnlyIfReachable:", *(unsigned __int8 *)(a1 + 40));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v4, "endBackgroundTask:", qword_1005DDD20);

  qword_1005DDD20 = UIBackgroundTaskInvalid;
}

id sub_100044E48(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100044E9C;
  v3[3] = &unk_100550BE8;
  v3[4] = v1;
  return objc_msgSend(v1, "updateCloudContextStateWithCompletion:", v3);
}

uint64_t sub_100044E9C(uint64_t a1, char a2)
{
  _QWORD v3[5];
  char v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100044EF4;
  v3[3] = &unk_100550360;
  v4 = a2;
  v3[4] = *(_QWORD *)(a1 + 32);
  return performBlockOnMainThread(v3);
}

id sub_100044EF4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 40) && objc_msgSend(*(id *)(a1 + 32), "shouldResumeSyncOnForeground"))
    objc_msgSend(*(id *)(a1 + 32), "syncWithReason:completionHandler:", CFSTR("ResumeSyncAfterBackgroundTaskExpiry"), 0);
  return objc_msgSend(*(id *)(a1 + 32), "setShouldResumeSyncOnForeground:", 0);
}

void sub_100044FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100044FE0(uint64_t a1)
{
  void *v2;
  unint64_t v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = (unint64_t)objc_msgSend(v2, "applicationState");

  if (v3 <= 2)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0x101u >> (8 * v3);
}

void sub_100045594(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  if (objc_msgSend(*(id *)(a1 + 32), "contextPathEnum"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
    objc_msgSend(v2, "popContextPathData");

  }
  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, 1, v4);

  }
}

void sub_100045628(uint64_t a1)
{
  id v2;

  if (objc_msgSend(*(id *)(a1 + 32), "contextPathEnum"))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
    objc_msgSend(v2, "popContextPathData");

  }
}

void sub_100045680(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

void sub_100045888(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "toolbar"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "standardAppearance"));
  objc_msgSend(v4, "configureWithDefaultBackground");

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "toolbar"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "compactAppearance"));
  objc_msgSend(v6, "configureWithDefaultBackground");

}

void sub_100045C30(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  const __CFString *v14;
  unsigned int v15;
  unsigned int v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  void *v34;
  void *v35;
  id v36;

  v36 = a2;
  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (!WeakRetained || !objc_msgSend(v36, "ic_isModernFolderType"))
    goto LABEL_19;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "modernViewContext"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ic_existingObjectWithID:", v36));

  LODWORD(v7) = objc_msgSend(v8, "isSmartFolder");
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v10 = v9;
  if (!(_DWORD)v7)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("Unsupported Folder"), &stru_1005704B8, 0));

    if (+[UIDevice ic_isiPad](UIDevice, "ic_isiPad"))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
      v13 = v12;
      v14 = CFSTR("This folder uses unsupported features. To view or edit it, upgrade to the latest version of iPadOS.");
      goto LABEL_15;
    }
    v16 = +[UIDevice ic_isVision](UIDevice, "ic_isVision");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    if (v16)
      v14 = CFSTR("This folder uses unsupported features. To view or edit it, upgrade to the latest version of visionOS.");
    else
      v14 = CFSTR("This folder uses unsupported features. To view or edit it, upgrade to the latest version of iOS.");
LABEL_14:
    v12 = v13;
    goto LABEL_15;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("Unsupported Smart Folder"), &stru_1005704B8, 0));

  if (!+[UIDevice ic_isiPad](UIDevice, "ic_isiPad"))
  {
    v15 = +[UIDevice ic_isVision](UIDevice, "ic_isVision");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    if (v15)
      v14 = CFSTR("This smart folder uses unsupported features. To view or edit it, upgrade to the latest version of visionOS.");
    else
      v14 = CFSTR("This smart folder uses unsupported features. To view or edit it, upgrade to the latest version of iOS.");
    goto LABEL_14;
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v13 = v12;
  v14 = CFSTR("This smart folder uses unsupported features. To view or edit it, upgrade to the latest version of iPadOS.");
LABEL_15:
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localizedStringForKey:value:table:", v14, &stru_1005704B8, 0));

  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewControllerManager"));
  v19 = objc_msgSend(v18, "hasCompactWidth");

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v11, v17, v19));
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1005704B8, 0));
  v23 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v22, 0, 0));

  objc_msgSend(v20, "addAction:", v23);
  if (+[UIDevice ic_isVision](UIDevice, "ic_isVision"))
    v24 = -2;
  else
    v24 = 7;
  objc_msgSend(v20, "setModalPresentationStyle:", v24);
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "popoverPresentationController"));
  objc_msgSend(v25, "setSourceView:", v5);

  objc_msgSend(v5, "bounds");
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "popoverPresentationController"));
  objc_msgSend(v34, "setSourceRect:", v27, v29, v31, v33);

  v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "popoverPresentationController"));
  objc_msgSend(v35, "setPermittedArrowDirections:", 12);

  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", v20, 1, 0);
LABEL_19:

}

void sub_1000473F0(id a1, UIAction *a2)
{
  +[UIApplication ic_openBluetoothSettings](UIApplication, "ic_openBluetoothSettings");
}

void sub_100047BCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id *a9, id *a10, id *location)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak(location);
  objc_destroyWeak(a10);
  objc_destroyWeak(a9);
  objc_destroyWeak((id *)(v12 - 232));
  _Unwind_Resume(a1);
}

void sub_100047C14(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  void *v4;
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "startupNavigationController"));
  objc_msgSend(v3, "upgradeAction");

  v5 = objc_loadWeakRetained(v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "startupNavigationController"));
  objc_msgSend(v4, "dismiss");

}

void sub_100047C88(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "startupNavigationController"));
  objc_msgSend(v1, "continueAction");

}

void sub_100047CCC(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "startupNavigationController"));
  objc_msgSend(v1, "dismiss");

}

void sub_100047D10(id *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void **v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  id v17;
  _QWORD v18[4];
  id v19;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Upgrade Notes"), &stru_1005704B8, 0));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("To enable these features, your notes will be upgraded. To sync notes with other devices, they must be running OS X v10.11 or iOS 9 or later."), &stru_1005704B8, 0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, v5, 1));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localizedStringForKey:value:table:", CFSTR("Not Now"), &stru_1005704B8, 0));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100047F40;
  v18[3] = &unk_100550B10;
  v19 = a1[5];
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v8, 1, v18));

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedStringForKey:value:table:", CFSTR("Upgrade Notes"), &stru_1005704B8, 0));
  v13 = _NSConcreteStackBlock;
  v14 = 3221225472;
  v15 = sub_100047F4C;
  v16 = &unk_100550B10;
  v17 = a1[6];
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v11, 0, &v13));

  objc_msgSend(v6, "addAction:", v12, v13, v14, v15, v16);
  objc_msgSend(v6, "addAction:", v9);
  objc_msgSend(a1[4], "presentViewController:animated:completion:", v6, 1, 0);

}

uint64_t sub_100047F40(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100047F4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100047F58(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  id v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "startupNavigationController"));
  objc_msgSend(v3, "upgradeAction");

  v4 = objc_loadWeakRetained(v1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "startupNavigationController"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100048030;
  v6[3] = &unk_10054FF58;
  objc_copyWeak(&v7, v1);
  objc_msgSend(v5, "dismissWithCompletionBlock:", v6);

  objc_destroyWeak(&v7);
}

void sub_10004801C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100048030(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id WeakRetained;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  if (!+[ICStartupController shouldBypassICloudAlert](ICStartupController, "shouldBypassICloudAlert"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "localizedStringForKey:value:table:", CFSTR("Turn On iCloud"), &stru_1005704B8, 0));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("To access your notes from all your devices, turn on iCloud for Notes."), &stru_1005704B8, 0));
    v16 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, v5, 1));

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "localizedStringForKey:value:table:", CFSTR("Not Now"), &stru_1005704B8, 0));
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v7, 1, 0));

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", CFSTR("Go to Settings"), &stru_1005704B8, 0));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 0, &stru_100550CE8));

    objc_msgSend(v16, "addAction:", v11);
    objc_msgSend(v16, "addAction:", v8);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "startupNavigationController"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "presentingWindow"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "rootViewController"));
    objc_msgSend(v15, "presentViewController:animated:completion:", v16, 1, 0);

  }
}

void sub_100048254(id a1, UIAlertAction *a2)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=APPLE_ACCOUNT")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
  objc_msgSend(v2, "openWelcomeScreenWhenLoggingInToUnmigratedICloudAccount");

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  objc_msgSend(v3, "openSensitiveURL:withOptions:", v4, 0);

}

int64_t sub_1000489C4(id a1, ICSEFolderListItem *a2, ICSEFolderListItem *a3)
{
  ICSEFolderListItem *v4;
  unint64_t v5;
  unint64_t v6;

  v4 = a3;
  v5 = -[ICSEFolderListItem folderListItemAccountType](a2, "folderListItemAccountType");
  v6 = -[ICSEFolderListItem folderListItemAccountType](v4, "folderListItemAccountType");

  return v5 > v6;
}

void sub_10004990C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *i;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *j;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  id obj;
  uint64_t v23;
  id v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  _BYTE v35[128];

  v2 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("needsTranscription == YES")));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  v21 = (void *)v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentsMatchingPredicate:context:](ICAttachment, "attachmentsMatchingPredicate:context:", v2, v3));

  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = v4;
  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v24; i = (char *)i + 1)
      {
        if (*(_QWORD *)v31 != v23)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)i);
        v7 = objc_alloc_init((Class)NSMutableDictionary);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subAttachments"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "allObjects"));

        if (v9)
        {
          v25 = v6;
          v28 = 0u;
          v29 = 0u;
          v26 = 0u;
          v27 = 0u;
          v10 = v9;
          v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
          if (v11)
          {
            v12 = v11;
            v13 = *(_QWORD *)v27;
            do
            {
              for (j = 0; j != v12; j = (char *)j + 1)
              {
                if (*(_QWORD *)v27 != v13)
                  objc_enumerationMutation(v10);
                v15 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)j);
                v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "media"));
                v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "mediaURL"));

                if (v17)
                {
                  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectID"));
                  objc_msgSend(v7, "setObject:forKeyedSubscript:", v17, v18);

                }
              }
              v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
            }
            while (v12);
          }

          v6 = v25;
        }
        v19 = (void *)objc_claimAutoreleasedReturnValue(+[ICBackgroundTranscriptionHelper sharedInstance](ICBackgroundTranscriptionHelper, "sharedInstance"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectID"));
        objc_msgSend(v19, "addRetranscriptionTaskToQueue:attachmentIdentifier:", v7, v20);

      }
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v35, 16);
    }
    while (v24);
  }

}

void sub_100049C2C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  +[ICHashtag regenerateStandardizedContentForAllHashtagsInContext:hasChanges:](ICHashtag, "regenerateStandardizedContentForAllHashtagsInContext:hasChanges:", v1, 0);

}

void sub_10004A04C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v2, "ic_deselectAllItemsAnimated:", 1);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v3, "deselectAllTagsAnimated:", 1);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteSearchViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "collectionView"));
  objc_msgSend(v5, "ic_deselectAllItemsAnimated:", 1);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dataSource"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "collectionViewDiffableDataSource"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICTagContainerItemIdentifier sharedItemIdentifier](ICTagContainerItemIdentifier, "sharedItemIdentifier"));
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "indexPathForItemIdentifier:", v8));

  if (v11)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "collectionViewLayout"));
    objc_msgSend(v10, "invalidateLayout");

  }
}

uint64_t sub_10004A160(uint64_t a1, void *a2)
{
  uint64_t result;

  result = (uint64_t)objc_msgSend(a2, "isCancelled");
  if ((result & 1) == 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return result;
}

void sub_10004A5D4(uint64_t a1)
{
  uint64_t v1;
  id v2;

  if (*(_BYTE *)(a1 + 40))
    v1 = 3;
  else
    v1 = 0;
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folderDataSource"));
  objc_msgSend(v2, "setAutoExpandMode:", v1);

}

id sub_10004B0B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateContainerSelection");
}

void sub_10004B2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004B2EC(uint64_t a1, uint64_t a2, void *a3)
{
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  id v8;

  v8 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    if (!objc_msgSend(v8, "_splitViewControllerContext")
      || (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "traitCollection")),
          v6 = objc_msgSend(v5, "_splitViewControllerContext"),
          v5,
          !v6))
    {
      objc_msgSend(WeakRetained, "updateAppearanceStyle");
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "folderDataSource"));
      objc_msgSend(v7, "reloadDataAnimated:", 0);

    }
    objc_msgSend(WeakRetained, "updateContainerSelection");
  }

}

void sub_10004B390(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateToolbarAnimated:", 1);

}

void sub_10004B3C0(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewControllerManager"));
  objc_msgSend(v1, "showStartupWithForceWelcomeScreen:completion:", 1, 0);

}

void sub_10004B40C(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewControllerManager"));
    if ((objc_msgSend(v5, "hasCompactWidth") & 1) != 0)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "transitionCoordinator"));
      if (v6)
      {

LABEL_7:
        goto LABEL_8;
      }
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "navigationController"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "topViewController"));

      if (v4 != v8)
        goto LABEL_8;
    }
    else
    {

    }
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "viewControllerManager"));
    objc_msgSend(v5, "selectTagSelection:", v9);
    goto LABEL_7;
  }
LABEL_8:

}

void sub_10004B4DC(uint64_t a1)
{
  void *v2;
  void *v3;
  id WeakRetained;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setBool:forKey:", 1, CFSTR("DidDismissAllowNotificationsView"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  objc_msgSend(v3, "setShouldShowAllowNotificationsView:", 0);

}

void sub_10004B550(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10004B5C8;
  block[3] = &unk_10054FF58;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_10004B5C8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateContainerSelection");

}

void sub_10004B7A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10004B7B8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10004B7C8(uint64_t a1)
{

}

void sub_10004B7D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernViewContext"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectWithID:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10004B828(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyViewContext"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectWithID:", *(_QWORD *)(a1 + 40)));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10004BA18(uint64_t a1, int a2)
{
  id *v3;
  id *v4;
  _QWORD v5[4];
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = (id *)(a1 + 32);
  if (a2)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10004BAF0;
    v7[3] = &unk_10054FF58;
    v4 = &v8;
    objc_copyWeak(&v8, v3);
    performBlockOnMainThread(v7);
  }
  else
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10004BB6C;
    v5[3] = &unk_10054FF58;
    v4 = &v6;
    objc_copyWeak(&v6, v3);
    performBlockOnMainThread(v5);
  }
  objc_destroyWeak(v4);
}

void sub_10004BAD8(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10004BAF0(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  id WeakRetained;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = objc_msgSend(v2, "BOOLForKey:", CFSTR("DidDismissAllowNotificationsView"));

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  objc_msgSend(v4, "setShouldShowAllowNotificationsView:", v3 ^ 1);

}

void sub_10004BB6C(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
  objc_msgSend(v1, "setShouldShowAllowNotificationsView:", 0);

}

id sub_10004BC04(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "checkIfShouldShowOrHideAllowNotificationsView");
}

BOOL sub_10004BCFC(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a2;
  v5 = objc_opt_class(ICFolderListSectionIdentifier);
  v6 = ICDynamicCast(v5, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  LOBYTE(v4) = objc_msgSend(v7, "sectionType") == (id)8;
  return (char)v4;
}

id sub_10004BEB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "scrollToRecentlyCreatedFolderIfNeeded");
}

void sub_10004CDA8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10004CE3C;
  v4[3] = &unk_100550E40;
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  objc_msgSend(v2, "deleteSharesForObjects:completionHandler:", v3, v4);

}

void sub_10004CE3C(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10004CED0;
  v4[3] = &unk_100550160;
  v5 = a2;
  v6 = *(id *)(a1 + 32);
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

uint64_t sub_10004CED0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = a1 + 32;
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = os_log_create("com.apple.notes", "Move");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_100404AB8(v2, v3, v4, v5, v6, v7, v8, v9);

    result = *(_QWORD *)(a1 + 40);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  }
  else
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  }
  return result;
}

uint64_t sub_10004CF70(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_10004D10C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10004D184;
  v2[3] = &unk_100550E40;
  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  +[ICDeleteDecisionController deleteSharesInFolder:completion:](ICDeleteDecisionController, "deleteSharesInFolder:completion:", v1, v2);

}

void sub_10004D184(uint64_t a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10004D218;
  v4[3] = &unk_100550160;
  v5 = a2;
  v6 = *(id *)(a1 + 32);
  v3 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v4);

}

uint64_t sub_10004D218(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = a1 + 32;
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = os_log_create("com.apple.notes", "Move");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_100404B24(v2, v3, v4, v5, v6, v7, v8, v9);

    result = *(_QWORD *)(a1 + 40);
    if (result)
      return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  }
  else
  {
    result = *(_QWORD *)(a1 + 40);
    if (result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  }
  return result;
}

uint64_t sub_10004D2B8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

void sub_10004D4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

NSManagedObjectID *__cdecl sub_10004D4D8(id a1, NSManagedObject *a2)
{
  return -[NSManagedObject objectID](a2, "objectID");
}

void sub_10004D4E0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id WeakRetained;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v23;
  _QWORD v24[4];
  id v25;
  _QWORD v26[5];
  id v27;
  id v28;

  v3 = a2;
  v4 = objc_opt_class(NSManagedObjectID);
  v5 = ICDynamicCast(v4, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
  v8 = ICDynamicCast(v7, v3);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (objc_msgSend(v6, "ic_isModernContainerType"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "moveViewController"));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "modernViewContext"));
  }
  else
  {
    if (!objc_msgSend(v6, "ic_isLegacyContainerType"))
    {
      if (!v9)
      {
        if (v3)
          +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "__objc_no", "-[ICMoveDecisionController performDecisionWithCompletion:]_block_invoke_2", 1, 0, CFSTR("Destination object ID doesn't belong to a known managed object context"));
        goto LABEL_6;
      }
      v14 = v9;
LABEL_10:
      v19 = objc_loadWeakRetained((id *)(a1 + 48));
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "presentingViewController"));
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472;
      v26[2] = sub_10004D768;
      v26[3] = &unk_10054FEA8;
      v21 = *(void **)(a1 + 40);
      v26[4] = *(_QWORD *)(a1 + 32);
      v27 = v14;
      v28 = v21;
      v22 = v14;
      objc_msgSend(v20, "dismissViewControllerAnimated:completion:", 1, v26);

      goto LABEL_11;
    }
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "moveViewController"));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "legacyViewContext"));
  }
  v13 = (void *)v12;

  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectWithID:", v6));
  if (v14)
    goto LABEL_10;
LABEL_6:
  v15 = objc_loadWeakRetained((id *)(a1 + 48));
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "presentingViewController"));

  if (v16)
  {
    v17 = objc_loadWeakRetained((id *)(a1 + 48));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "presentingViewController"));
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_10004D778;
    v24[3] = &unk_10054FFA8;
    v25 = *(id *)(a1 + 40);
    objc_msgSend(v18, "dismissViewControllerAnimated:completion:", 1, v24);

  }
  else
  {
    v23 = *(_QWORD *)(a1 + 40);
    if (v23)
      (*(void (**)(uint64_t, void *))(v23 + 16))(v23, &__NSArray0__struct);
  }
LABEL_11:

}

id sub_10004D768(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "moveSourceObjectsToDestination:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

uint64_t sub_10004D778(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, &__NSArray0__struct);
  return result;
}

uint64_t sub_10004DF60(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, &__NSArray0__struct);
  return result;
}

uint64_t sub_10004DF7C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, &__NSArray0__struct);
  return result;
}

uint64_t sub_10004DF98(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, &__NSArray0__struct);
  return result;
}

uint64_t sub_10004DFB4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, &__NSArray0__struct);
  return result;
}

uint64_t sub_10004DFD0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, &__NSArray0__struct);
  return result;
}

void sub_10004DFEC(uint64_t a1)
{
  ICCloudSyncingObjectMoveAction *v2;
  void *v3;
  ICCloudSyncingObjectMoveAction *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;

  v2 = [ICCloudSyncingObjectMoveAction alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceFolder"));
  v4 = -[ICCloudSyncingObjectMoveAction initWithFolder:toParentObject:isCopy:](v2, "initWithFolder:toParentObject:isCopy:", v3, *(_QWORD *)(a1 + 40), 0);

  v5 = *(_QWORD *)(a1 + 40);
  v6 = objc_opt_class(ICCloudSyncingObject);
  v7 = ICClassAndProtocolCast(v5, v6, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceFolder"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "noteContainerAccount"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder undoablyMoveFolder:toNoteContainer:toAccount:moveAction:noteMovedBlock:](ICFolder, "undoablyMoveFolder:toNoteContainer:toAccount:moveAction:noteMovedBlock:", v9, v8, v10, v4, 0));

    objc_msgSend(*(id *)(a1 + 32), "announceMoveToDestination:delay:", *(_QWORD *)(a1 + 40), 2.5);
    v12 = *(_QWORD *)(a1 + 48);
    if (v12)
    {
      v15 = v11;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v15, 1));
      (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);

    }
  }
  else
  {
    +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "__objc_no", "-[ICMoveDecisionController moveSourceObjectsToDestination:completionHandler:]_block_invoke_6", 1, 0, CFSTR("Trying to move folder to unknown destination"));
    v14 = *(_QWORD *)(a1 + 48);
    if (v14)
      (*(void (**)(uint64_t, void *))(v14 + 16))(v14, &__NSArray0__struct);
  }

}

void sub_10004E1B0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  id v27;
  _QWORD v28[5];
  id v29;
  id v30;
  _QWORD v31[5];
  id v32;
  id v33;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "moveDecision"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "modernSourceObjects"));
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    v5 = ICProtocolCast(&OBJC_PROTOCOL___ICNoteContainer, *(_QWORD *)(a1 + 40));
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
    v8 = ICDynamicCast(v7, *(_QWORD *)(a1 + 40));
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)v9;
    if (v6)
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceObjects"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472;
      v31[2] = sub_10004E4C4;
      v31[3] = &unk_100550ED0;
      v14 = *(void **)(a1 + 40);
      v31[4] = *(_QWORD *)(a1 + 32);
      v32 = v14;
      v33 = *(id *)(a1 + 48);
      objc_msgSend(v11, "undoablyMoveNotes:toNoteContainer:actionName:workerContext:completionHandler:", v12, v6, 0, v13, v31);

      v15 = v32;
    }
    else
    {
      if (!v9)
      {
        +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "__objc_no", "-[ICMoveDecisionController moveSourceObjectsToDestination:completionHandler:]_block_invoke_7", 1, 0, CFSTR("Trying to move notes to unknown destination"));
        v26 = *(_QWORD *)(a1 + 48);
        if (v26)
          (*(void (**)(uint64_t, void *))(v26 + 16))(v26, &__NSArray0__struct);
        goto LABEL_10;
      }
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceObjects"));
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_10004E514;
      v28[3] = &unk_100550ED0;
      v25 = *(void **)(a1 + 40);
      v28[4] = *(_QWORD *)(a1 + 32);
      v29 = v25;
      v30 = *(id *)(a1 + 48);
      objc_msgSend(v22, "undoablyMoveNotes:toVirtualSmartFolder:actionName:workerContext:completionHandler:", v23, v10, 0, v24, v28);

      v15 = v29;
    }

LABEL_10:
    return;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "moveDecision"));
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "htmlSourceObjects"));
  v18 = objc_msgSend(v17, "count");

  if (v18)
  {
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[ICLegacyImportManager sharedLegacyImportManager](ICLegacyImportManager, "sharedLegacyImportManager"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceObjects"));
    objc_msgSend(v19, "moveLegacyNotes:toFolder:", v20, *(_QWORD *)(a1 + 40));

    objc_msgSend(*(id *)(a1 + 32), "announceMoveToDestination:delay:", *(_QWORD *)(a1 + 40), 2.5);
    v21 = *(_QWORD *)(a1 + 48);
    if (v21)
    {
      v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sourceObjects"));
      (*(void (**)(uint64_t, id))(v21 + 16))(v21, v27);

    }
  }
}

void sub_10004E4C4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "announceMoveToDestination:delay:", *(_QWORD *)(a1 + 40), 2.5);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

void sub_10004E514(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  objc_msgSend(*(id *)(a1 + 32), "announceMoveToDestination:delay:", *(_QWORD *)(a1 + 40), 2.5);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

}

uint64_t sub_10004E564(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, &__NSArray0__struct);
  return result;
}

uint64_t sub_10004E590(uint64_t a1, int a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, void *))(result + 16))(result, &__NSArray0__struct);
  return result;
}

void sub_10004E75C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10004E778(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = objc_opt_class(ICFolder);
  v3 = ICDynamicCast(v2, *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedTitle"));
  v6 = v5;
  if (v5)
  {
    v7 = v5;
  }
  else
  {
    v8 = objc_opt_class(ICAccount);
    v9 = ICDynamicCast(v8, *(_QWORD *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localizedName"));
    v12 = v11;
    if (v11)
    {
      v7 = v11;
    }
    else
    {
      v13 = ICProtocolCast(&OBJC_PROTOCOL___ICLegacyAccount, *(_QWORD *)(a1 + 32));
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "name"));
      v16 = v15;
      if (v15)
      {
        v7 = v15;
      }
      else
      {
        v17 = ICProtocolCast(&OBJC_PROTOCOL___ICLegacyFolder, *(_QWORD *)(a1 + 32));
        v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "name"));
        v20 = v19;
        if (v19)
        {
          v7 = v19;
        }
        else
        {
          v21 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
          v22 = ICDynamicCast(v21, *(_QWORD *)(a1 + 32));
          v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
          v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "title"));

        }
      }

    }
  }

  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "localizedStringForKey:value:table:", CFSTR("Moved a note to %@"), &stru_1005704B8, 0));

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v25, v7));
  ICAccessibilityPostAnnouncementNotification(WeakRetained, v26);

}

void sub_10004EDD8(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

void sub_10004F7B4(id a1)
{
  id v1;

  v1 = +[CUIShapeEffectStack sharedCIContext](CUIShapeEffectStack, "sharedCIContext");
}

void sub_100050560(uint64_t a1)
{
  void *v1;
  double v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailImageView"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layer"));
  LODWORD(v2) = 1.0;
  objc_msgSend(v1, "setOpacity:", v2);

}

void sub_1000507AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_BYTE *sub_1000507D4(_BYTE *result, void *a2)
{
  if (result[32])
    return _objc_msgSend(a2, "setUserInterfaceStyle:", 1);
  return result;
}

void sub_1000507EC(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;
  id v9[2];

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000508A8;
  v6[3] = &unk_100550F60;
  objc_copyWeak(v9, (id *)(a1 + 40));
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 32);
  v7 = v4;
  v8 = v5;
  v9[1] = *(id *)(a1 + 48);
  performBlockOnMainThread(v6);

  objc_destroyWeak(v9);
}

void sub_100050894(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000508A8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  void *v13;
  id v14;
  double v15;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "associatedObjectIdentifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteIdentifier"));
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  if (WeakRetained && v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "thumbnailImageView"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "image"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "image"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "thumbnailImageView"));
    objc_msgSend(v9, "setImage:", v8);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_enclosingScrollView"));
    v11 = objc_msgSend(v10, "ic_shouldOptimizeForScrolling");
    v12 = *(id *)(a1 + 56);
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v14 = objc_msgSend(v13, "applicationState");

    if ((v11 & 1) != 0 || (objc_msgSend(*(id *)(a1 + 32), "fetchDuration"), v15 >= 0.3) && !v7 && v12 == v14)
      objc_msgSend(WeakRetained, "animateThumbnailImageView");

  }
}

void sub_1000511D0(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "noteEditorViewController"));

  if (*(_BYTE *)(a1 + 56))
  {
    objc_msgSend(v5, "hideActivityStreamToolbarAnimated:", 0);
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "selectedModernNote"));
    objc_msgSend(v5, "showActivityStreamToolbarForObject:selection:animated:", v4, *(_QWORD *)(a1 + 40), 0);

  }
  if (*(_BYTE *)(a1 + 57))
    objc_msgSend(*(id *)(a1 + 48), "showColumn:", 0);

}

id sub_10005128C(_QWORD *a1)
{
  void *v2;
  unsigned int v3;
  void *v4;
  id result;
  unsigned int v6;
  void *v7;

  v2 = (void *)a1[4];
  if (v2)
  {
    v3 = objc_msgSend(v2, "BOOLValue");
    v4 = (void *)a1[5];
    if (v3)
      objc_msgSend(v4, "showColumn:", 0);
    else
      objc_msgSend(v4, "hideColumn:", 0);
  }
  result = (id)a1[6];
  if (result)
  {
    v6 = objc_msgSend(result, "BOOLValue");
    v7 = (void *)a1[5];
    if (v6)
      return objc_msgSend(v7, "showColumn:", 1);
    else
      return objc_msgSend(v7, "hideColumn:", 1);
  }
  return result;
}

uint64_t sub_100051304(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005162C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  void *v15;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "isActive");

  if (v3)
  {
    v4 = os_log_create("com.apple.notes", "SearchIndexer");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      sub_100404C24(v4, v5, v6, v7, v8, v9, v10, v11);

    v12 = objc_loadWeakRetained(v1);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "searchDataSource"));
    objc_msgSend(v13, "cancelSearchQuery");

    v14 = objc_loadWeakRetained(v1);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "searchController"));
    objc_msgSend(v14, "updateSearchResultsForSearchController:", v15);

  }
}

void sub_100051FF8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "representedObject"));
  v4 = objc_opt_class(ICSearchToken);
  v5 = ICDynamicCast(v4, v7);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (a2)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v6);

}

_UISearchSuggestionItem_dci *__cdecl sub_10005223C(id a1, ICSearchSuggestion *a2)
{
  return (_UISearchSuggestionItem_dci *)-[ICSearchSuggestion dciSuggestion](a2, "dciSuggestion");
}

void sub_100052C00(uint64_t a1)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchController"));
  v3 = objc_msgSend(v2, "isActive");

  if ((v3 & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchController"));
    objc_msgSend(v4, "setActive:", 1);

  }
  if (*(_BYTE *)(a1 + 40))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100052CB4;
    v5[3] = &unk_100550110;
    v5[4] = *(_QWORD *)(a1 + 32);
    dispatchMainAfterDelay(v5, 0.1);
  }
}

void sub_100052CB4(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchBar"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchField"));
  objc_msgSend(v1, "becomeFirstResponder");

}

id sub_100052FEC(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "indexOfSectionIdentifier:", v3) == (id)0x7FFFFFFFFFFFFFFFLL)
    v4 = 0;
  else
    v4 = objc_msgSend(*(id *)(a1 + 32), "numberOfItemsInSection:", v3);

  return v4;
}

BOOL sub_100053504(id a1, UISearchToken *a2, unint64_t a3, BOOL *a4)
{
  UISearchToken *v4;
  void *v5;
  uint64_t v6;
  char isKindOfClass;
  void *v8;
  void *v9;
  BOOL v10;

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[UISearchToken representedObject](v4, "representedObject"));
  v6 = objc_opt_class(ICSearchToken);
  isKindOfClass = objc_opt_isKindOfClass(v5, v6);

  if ((isKindOfClass & 1) != 0)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[UISearchToken representedObject](v4, "representedObject"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "csToken"));
    v10 = v9 == 0;

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

UISearchToken *__cdecl sub_100053594(id a1, _CSSuggestionToken *a2)
{
  _CSSuggestionToken *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = a2;
  v3 = objc_msgSend(objc_alloc((Class)ICSearchToken), "initWithCSSuggestionToken:", v2);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICSearchSuggestion iconImageForToken:](ICSearchSuggestion, "iconImageForToken:", v3));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UISearchToken tokenWithIcon:text:](UISearchToken, "tokenWithIcon:text:", v4, v5));

  objc_msgSend(v6, "setRepresentedObject:", v3);
  return (UISearchToken *)v6;
}

void sub_100054220(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "date"));
  objc_msgSend(v6, "setModificationDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "creationDate"));
  v4 = objc_msgSend(v3, "ic_isLaterThanDate:", v2);

  if (v4)
    objc_msgSend(v6, "setCreationDate:", v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "managedObjectContext"));
  objc_msgSend(v5, "ic_save");

}

void sub_1000542C8(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "date"));
  objc_msgSend(v6, "setCreationDate:", v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "modificationDate"));
  v4 = objc_msgSend(v3, "ic_isEarlierThanDate:", v2);

  if (v4)
    objc_msgSend(v6, "setModificationDate:", v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "managedObjectContext"));
  objc_msgSend(v5, "ic_save");

}

void sub_100054370(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
  objc_msgSend(v4, "setCreationDate:", v1);

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](NSDate, "distantPast"));
  objc_msgSend(v4, "setModificationDate:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "managedObjectContext"));
  objc_msgSend(v3, "ic_save");

}

void sub_10005457C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

void sub_100055380(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  objc_msgSend(v2, "setNoteContainerViewMode:", objc_msgSend(*(id *)(a1 + 32), "targetNoteViewMode"));

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, 1, v4);

  }
}

void sub_100055F84(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  NSObject *v33;
  void *v34;
  unsigned __int8 v35;
  NSObject *v36;
  NSObject *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  id v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  void *v69;
  void *v70;
  void *context;
  id obj;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  id v81;
  _QWORD v82[2];
  uint8_t v83[128];
  uint8_t buf[4];
  id v85;
  _QWORD v86[2];

  context = objc_autoreleasePoolPush();
  v2 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("NoteAttachment"));
  v3 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("note.store == nil")));
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("note.store.account == nil")));
  v69 = (void *)v3;
  v86[0] = v3;
  v86[1] = v68;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v86, 2));
  v5 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v4));

  v67 = (void *)v5;
  objc_msgSend(v2, "setPredicate:", v5);
  v70 = v2;
  v6 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v2);
  objc_msgSend(v6, "setResultType:", 1);
  v7 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    sub_100405034(v7, v8, v9, v10, v11, v12, v13, v14);

  v15 = *(void **)(a1 + 32);
  v81 = 0;
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "executeRequest:error:", v6, &v81));
  v17 = v81;
  v66 = v6;
  if (v17)
  {
    v18 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      sub_100404FCC((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24);
LABEL_6:

    goto LABEL_7;
  }
  v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "result"));
  v63 = objc_msgSend(v62, "count");

  if (v63)
  {
    v18 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v85 = v63;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Successfully deleted %ld orphaned HTML attachments", buf, 0xCu);
    }
    goto LABEL_6;
  }
LABEL_7:
  v73 = a1;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "result"));
  v25 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v77, v83, 16);
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v78;
    do
    {
      v28 = 0;
      do
      {
        if (*(_QWORD *)v78 != v27)
          objc_enumerationMutation(obj);
        v29 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)v28);
        v30 = objc_autoreleasePoolPush();
        v76 = v17;
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NoteAttachmentObject attachmentDirectoryURLForAttachmentObjectID:error:](NoteAttachmentObject, "attachmentDirectoryURLForAttachmentObjectID:error:", v29, &v76));
        v32 = v76;

        if (v32)
        {
          v33 = os_log_create("com.apple.notes", "LaunchTask");
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v85 = v32;
            _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Error getting file directory URL for attachment: %@", buf, 0xCu);
          }

        }
        if (v31)
        {
          v34 = *(void **)(v73 + 40);
          v75 = v32;
          v35 = objc_msgSend(v34, "removeItemAtURL:error:", v31, &v75);
          v17 = v75;

          v36 = os_log_create("com.apple.notes", "LaunchTask");
          v37 = v36;
          if ((v35 & 1) != 0)
          {
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v85 = v31;
              _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Successfully deleted attachment file: %@", buf, 0xCu);
            }
          }
          else if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v85 = v17;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Error removing attachment file: %@", buf, 0xCu);
          }
        }
        else
        {
          v37 = os_log_create("com.apple.notes", "LaunchTask");
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            v85 = v29;
            _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Failed to get attachment folder URL for object ID: %@", buf, 0xCu);
          }
          v17 = v32;
        }

        objc_autoreleasePoolPop(v30);
        v28 = (char *)v28 + 1;
      }
      while (v26 != v28);
      v26 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v77, v83, 16);
    }
    while (v26);
  }

  objc_autoreleasePoolPop(context);
  v38 = objc_msgSend(objc_alloc((Class)NSFetchRequest), "initWithEntityName:", CFSTR("Note"));
  v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("store == nil")));
  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("store.account == nil")));
  v82[0] = v39;
  v82[1] = v40;
  v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v82, 2));
  v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v41));

  objc_msgSend(v38, "setPredicate:", v42);
  v43 = objc_msgSend(objc_alloc((Class)NSBatchDeleteRequest), "initWithFetchRequest:", v38);
  objc_msgSend(v43, "setResultType:", 2);
  v44 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
    sub_100404F98(v44, v45, v46, v47, v48, v49, v50, v51);

  v52 = *(void **)(v73 + 32);
  v74 = v17;
  v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "executeRequest:error:", v43, &v74));
  v54 = v74;

  if (v54)
  {
    v55 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
      sub_100404F30((uint64_t)v54, v55, v56, v57, v58, v59, v60, v61);
  }
  else
  {
    v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "result"));
    v65 = objc_msgSend(v64, "unsignedIntegerValue");

    if (!v65)
      goto LABEL_33;
    v55 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      v85 = v65;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_INFO, "Successfully deleted %ld orphaned HTML notes", buf, 0xCu);
    }
  }

LABEL_33:
  objc_msgSend(*(id *)(v73 + 32), "ic_saveWithLogDescription:", CFSTR("Deleting orphaned HTML notes and attachments"));

}

void sub_100057150(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

void sub_1000579A4(id a1, UIMutableTraits *a2)
{
  -[UIMutableTraits setUserInterfaceStyle:](a2, "setUserInterfaceStyle:", 1);
}

void sub_1000579B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _BOOL8 v5;
  id v6;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = a4 == 0;
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, _BOOL8, id))(v4 + 16))(v4, v5, v6);

  }
}

void sub_10005826C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_10005828C(id a1, ICSearchQueryOperation *a2)
{
  return -[ICSearchQueryOperation isCancelled](a2, "isCancelled") ^ 1;
}

void sub_1000582A8(uint64_t a1, void *a2, unsigned int a3)
{
  id v5;
  id WeakRetained;
  const __CFString *v7;
  void *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  unint64_t i;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned __int8 v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  id v32;
  id v33;
  void *v34;
  void *v35;
  void *v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  void *v41;
  uint64_t v42;
  id v43;
  char v44;
  void *v45;
  id v46;
  uint64_t v47;
  id v48;
  id v49;
  unsigned int v50;
  id v51;
  id v52;
  void *v53;
  void *v54;
  char *v55;
  void *v56;
  unint64_t v57;
  void *v58;
  void *v59;
  id v60;
  _QWORD v61[4];
  id v62;
  id v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  _QWORD block[4];
  id v75;
  id v76;
  id v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t, uint64_t);
  void (*v84)(uint64_t);
  id v85;
  _QWORD v86[5];
  id v87;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  v7 = CFSTR("Top Hit Query");
  v50 = a3;
  if (a3)
    v7 = CFSTR("Primary Query");
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("queryOperation foundItemsHandler start for %@"), v7));
  +[ICSearchProfiler logProfilingWithMessage:searchQueryOperation:](ICSearchProfiler, "logProfilingWithMessage:searchQueryOperation:", v8, WeakRetained);

  v54 = WeakRetained;
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))() && objc_msgSend(v5, "count"))
  {
    v53 = v5;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "searchTokens"));
    v48 = +[ICSearchToken suggestionTypeOfFirstItemInTokens:](ICSearchToken, "suggestionTypeOfFirstItemInTokens:", v9);

    +[ICSearchProfiler logProfilingWithMessage:searchQueryOperation:](ICSearchProfiler, "logProfilingWithMessage:searchQueryOperation:", CFSTR("queryOperation foundItemsHandler start obtaining background context"), WeakRetained);
    v45 = (void *)objc_claimAutoreleasedReturnValue(+[ICSearchIndexer sharedIndexer](ICSearchIndexer, "sharedIndexer"));
    v51 = objc_msgSend(v45, "newContextsForAllDataSources");
    +[ICSearchProfiler logProfilingWithMessage:searchQueryOperation:](ICSearchProfiler, "logProfilingWithMessage:searchQueryOperation:", CFSTR("queryOperation foundItemsHandler finish obtaining background context"), WeakRetained);
    v86[0] = 0;
    v86[1] = v86;
    v86[2] = 0x3032000000;
    v86[3] = sub_100058AC0;
    v86[4] = sub_100058AD0;
    v87 = objc_alloc_init((Class)NSMutableArray);
    v52 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", 12);
    v57 = 0;
    v47 = a1;
    do
    {
      if (v57 >= (unint64_t)objc_msgSend(v53, "count")
        || !(*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
      {
        break;
      }
      v10 = (char *)objc_msgSend(v53, "count");
      v11 = 12;
      if (!v57)
        v11 = 2;
      v12 = v57 + v11 - 1;
      v13 = v10 - 1;
      if (v12 < (unint64_t)(v10 - 1))
        v13 = (char *)v12;
      v55 = v13;
      v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:"));
      v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "objectsAtIndexes:", v14));

      v59 = (void *)v15;
      v16 = (void *)objc_claimAutoreleasedReturnValue(+[ICSearchQueryOperation searchableItemsFromSortableItems:](ICSearchQueryOperation, "searchableItemsFromSortableItems:", v15));
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("queryOperation foundItemsHandler start obtaining objects for batch starting from index %lu to index %lu"), v57, v55));
      +[ICSearchProfiler logProfilingWithMessage:searchQueryOperation:](ICSearchProfiler, "logProfilingWithMessage:searchQueryOperation:", v17, v54);

      v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v45, "objectsDictionaryForSearchableItems:inContexts:", v16, v51));
      v80 = 0;
      v81 = &v80;
      v82 = 0x3032000000;
      v83 = sub_100058AC0;
      v84 = sub_100058AD0;
      v85 = 0;
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100058AD8;
      block[3] = &unk_1005511F8;
      v78 = v86;
      v60 = v54;
      v75 = v60;
      v49 = v45;
      v76 = v49;
      v79 = &v80;
      v46 = v16;
      v77 = v46;
      dispatch_sync((dispatch_queue_t)&_dispatch_main_q, block);
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("queryOperation foundItemsHandler finish obtaining objects for batch starting from index %lu to index %lu"), v57, v55));
      +[ICSearchProfiler logProfilingWithMessage:searchQueryOperation:](ICSearchProfiler, "logProfilingWithMessage:searchQueryOperation:", v18, v60);

      for (i = 0;
            i < (unint64_t)objc_msgSend(v59, "count")
         && ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))() & 1) != 0;
            ++i)
      {
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "objectAtIndexedSubscript:", i));
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "searchableItem"));
        v22 = v21;
        if (!*(_QWORD *)(a1 + 32)
          || (v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "attributeSet")),
              v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "domainIdentifier")),
              v25 = objc_msgSend(v24, "isEqualToString:", *(_QWORD *)(a1 + 32)),
              v24,
              v23,
              (v25 & 1) != 0))
        {
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "uniqueIdentifier"));
          v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v58, "objectForKeyedSubscript:", v26));

          v28 = (void *)v81[5];
          v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "uniqueIdentifier"));
          v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "objectForKeyedSubscript:", v29));

          if (v27 && v30)
          {
            v70 = 0;
            v71 = &v70;
            v72 = 0x2020000000;
            v73 = 0;
            v66 = 0;
            v67 = &v66;
            v68 = 0x2020000000;
            v69 = 0;
            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "managedObjectContext"));
            v61[0] = _NSConcreteStackBlock;
            v61[1] = 3221225472;
            v61[2] = sub_100058C90;
            v61[3] = &unk_100551220;
            v64 = &v70;
            v32 = v27;
            v62 = v32;
            v65 = &v66;
            v33 = v60;
            v63 = v33;
            objc_msgSend(v31, "performBlockAndWait:", v61);

            if (!*((_BYTE *)v71 + 24))
            {
              v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "attachmentUniqueIdentifiers"));
              v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "firstObject"));

              if (v35)
              {
                v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "objectForManagedObjectIDURI:inContexts:", v35, v51));
                v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectID"));

              }
              else
              {
                v56 = 0;
              }
              v37 = objc_alloc((Class)ICSearchResultConfiguration);
              v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "searchString"));
              v39 = objc_msgSend(v37, "initWithSearchString:searchSuggestionType:isTopHit:foundAttachmentObjectID:sortableSearchableItem:", v38, v48, v50, v56, v20);

              v40 = objc_msgSend(objc_alloc((Class)ICSearchResult), "initWithMainContextObject:currentContextObject:configuration:", v30, v32, v39);
              objc_msgSend(v40, "setMathNote:", *((unsigned __int8 *)v67 + 24));
              objc_msgSend(v52, "addObject:", v40);

              a1 = v47;
            }

            _Block_object_dispose(&v66, 8);
            _Block_object_dispose(&v70, 8);
          }

        }
      }
      v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("queryOperation foundItemsHandler finish creating search results for batch starting from index %lu to index %lu"), v57, v55));
      +[ICSearchProfiler logProfilingWithMessage:searchQueryOperation:](ICSearchProfiler, "logProfilingWithMessage:searchQueryOperation:", v41, v60);

      if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 40) + 16))())
      {
        v42 = *(_QWORD *)(a1 + 48);
        v43 = objc_msgSend(v52, "copy");
        (*(void (**)(uint64_t, id))(v42 + 16))(v42, v43);

        objc_msgSend(v52, "removeAllObjects");
      }
      v44 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      v57 = (unint64_t)(v55 + 1);

      _Block_object_dispose(&v80, 8);
    }
    while ((v44 & 1) != 0);

    _Block_object_dispose(v86, 8);
    v5 = v53;
  }
  else if (!objc_msgSend(v5, "count"))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }

}

void sub_100058A3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 168), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100058AC0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100058AD0(uint64_t a1)
{

}

void sub_100058AD8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  if (!objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "count"))
  {
    +[ICSearchProfiler logProfilingWithMessage:searchQueryOperation:](ICSearchProfiler, "logProfilingWithMessage:searchQueryOperation:", CFSTR("queryOperation foundItemsHandler start obtaining main context"), *(_QWORD *)(a1 + 32));
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataSources", 0));
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v15;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v15 != v5)
            objc_enumerationMutation(v2);
          v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)i);
          if ((objc_opt_respondsToSelector(v7, "mainThreadContext") & 1) != 0)
          {
            v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
            v9 = v7;
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "mainThreadContext"));
            objc_msgSend(v8, "addObject:", v10);

          }
        }
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v4);
    }

    +[ICSearchProfiler logProfilingWithMessage:searchQueryOperation:](ICSearchProfiler, "logProfilingWithMessage:searchQueryOperation:", CFSTR("queryOperation foundItemsHandler finish obtaining main context"), *(_QWORD *)(a1 + 32));
  }
  v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectsDictionaryForSearchableItems:inContexts:", *(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

}

void sub_100058C90(uint64_t a1)
{
  id *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;

  v2 = (id *)(a1 + 32);
  *(_BYTE *)(*((_QWORD *)v2[2] + 1) + 24) = objc_msgSend(*(id *)(a1 + 32), "isHiddenFromSearch");
  v3 = objc_opt_class(ICNote);
  v4 = ICDynamicCast(v3, *v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *(_BYTE *)(*((_QWORD *)v2[3] + 1) + 24) = objc_msgSend(v5, "isMathNote");

  if (*(_BYTE *)(*((_QWORD *)v2[2] + 1) + 24))
  {
    v6 = os_log_create("com.apple.notes", "SearchIndexer");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_100405218(a1, v2, v6);

  }
}

uint64_t sub_10005B8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t result;
  uint64_t *v11;
  char *v12;

  v12 = &a9;
  if (!a1)
    return 1;
  v9 = a1;
  result = 1;
  do
  {
    result = v9 - result + 32 * result;
    v11 = (uint64_t *)v12;
    v12 += 8;
    v9 = *v11;
  }
  while (v9);
  return result;
}

void sub_10005BE54(uint64_t a1)
{
  void *v1;
  NSObject *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint8_t v23[4];
  uint64_t v24;
  _BYTE v25[128];

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchPasswordProtectedNotesInSharedFolders"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "ic_objectsPassingTest:", &stru_1005512A0));
  v2 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10040533C(v1, v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = v1;
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v20;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v20 != v6)
          objc_enumerationMutation(obj);
        v8 = *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)v7);
        v9 = os_log_create("com.apple.notes", "LaunchTask");
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          sub_1004052C8(v23, v8, &v24, v9);

        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "account"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "defaultFolder"));
        objc_msgSend(v8, "setFolder:", v11);

        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
        objc_msgSend(v8, "setFolderModificationDate:", v12);

        objc_msgSend(v8, "updateChangeCountWithReason:", CFSTR("Moved to default folder"));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectID"));
        objc_msgSend(v3, "addObject:", v13);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
    }
    while (v5);
  }

  v14 = objc_msgSend(v3, "copy");
  objc_msgSend(*(id *)(a1 + 32), "setMovedNoteObjectIDs:", v14);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  objc_msgSend(v15, "ic_save");

}

BOOL sub_10005C0F0(id a1, ICNote *a2, unint64_t a3, BOOL *a4)
{
  return -[ICNote isOwnedByCurrentUser](a2, "isOwnedByCurrentUser", a3, a4);
}

void sub_10005C4DC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  uint8_t v17[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t v22[4];
  uint64_t v23;
  _BYTE v24[128];
  _QWORD v25[2];

  v2 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1004054E0(v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder predicateForVisibleObjects](ICFolder, "predicateForVisibleObjects"));
  v25[0] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("serverShareData != nil")));
  v25[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v25, 2));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder ic_objectsMatchingPredicate:context:](ICFolder, "ic_objectsMatchingPredicate:context:", v6, *(_QWORD *)(a1 + 32)));

  v8 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    sub_100405458(v7, v8);

  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v9 = v7;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v19;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v19 != v12)
          objc_enumerationMutation(v9);
        v14 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v13);
        v15 = os_log_create("com.apple.notes", "Cloud");
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          sub_1004053E4(v22, v14, &v23, v15);

        objc_msgSend(v14, "resetToIntrinsicNotesVersionAndPropagateToChildObjects");
        v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v11);
  }

  v16 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Completed fixing minimum supported version for shared folders", v17, 2u);
  }

}

BOOL sub_10005CC4C(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  _BOOL8 v13;

  v1 = a1;
  v2 = objc_opt_class(NoteObject);
  v3 = ICCheckedDynamicCast(v2, v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    v5 = objc_opt_class(NoteStoreObject);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "store"));
    v7 = ICCheckedDynamicCast(v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    if (v8)
    {
      v9 = objc_opt_class(NoteAccountObject);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "account"));
      v11 = ICCheckedDynamicCast(v9, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

      if (v12)
        v13 = objc_msgSend(v12, "accountType") == (id)2;
      else
        v13 = 0;

    }
    else
    {
      v13 = 0;
    }

  }
  else
  {
    v13 = 0;
  }

  return v13;
}

uint64_t sub_10005CD54(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  v1 = a1;
  v2 = objc_opt_class(NoteObject);
  v3 = ICCheckedDynamicCast(v2, v1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

  if (v4)
  {
    v5 = objc_opt_class(NoteStoreObject);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "store"));
    v7 = ICCheckedDynamicCast(v5, v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "externalIdentifier"));
      v10 = objc_msgSend(v9, "isEqualToString:", kLocalStoreIdentifier) ^ 1;

    }
    else
    {
      v10 = 0;
    }

  }
  else
  {
    v10 = 0;
  }

  return v10;
}

id sub_10005CE24(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;

  v3 = a1;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[XMLStringSimplifier simplifiedStringFromString:isXML:](XMLStringSimplifier, "simplifiedStringFromString:isXML:", v3, a2 ^ 1u));
  v5 = v4;
  if (!v4)
    v4 = v3;
  v6 = sub_10005CE94(v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  return v7;
}

id sub_10005CE94(void *a1)
{
  id v1;
  void *v2;
  _BYTE v4[20];

  v1 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "dataUsingEncoding:", 4)));
  CCDigest(8, objc_msgSend(v1, "bytes"), objc_msgSend(v1, "length"), v4);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v4, 20));

  return v2;
}

void sub_10005CF3C(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  id v10;
  void ***v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  id v17;
  const __CFString *v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void **v24;
  uint64_t v25;
  void (*v26)(uint64_t, void *, void *);
  void *v27;
  id v28;

  v3 = a2;
  v4 = a1;
  v5 = objc_alloc_init((Class)NSMutableDictionary);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentHash"));

  if (v7)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "contentHash"));
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v8, CFSTR("sha1"));

    objc_msgSend(v6, "addObject:", CFSTR("sha1"));
    v9 = 0;
  }
  else
  {
    v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "noteID"));
    v24 = _NSConcreteStackBlock;
    v25 = 3221225472;
    v26 = sub_10005D1EC;
    v27 = &unk_1005512C8;
    v10 = v5;
    v28 = v10;
    v11 = objc_retainBlock(&v24);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "modificationDate"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate ic_modificationDateForNoteBeingEdited](NSDate, "ic_modificationDateForNoteBeingEdited"));
    v14 = objc_msgSend(v12, "isEqual:", v13);

    if (v14)
    {
      v15 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));

      v12 = (void *)v15;
    }
    v16 = v23;
    ((void (*)(void ***, void *, const __CFString *))v11[2])(v11, v12, CFSTR("m"));
    v17 = objc_msgSend(v23, "length");
    v9 = v17 != 0;
    if (v17)
    {
      v18 = CFSTR("uuid");
      objc_msgSend(v10, "setObject:forKeyedSubscript:", v23, CFSTR("uuid"));
    }
    else
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "creationDate"));
      v18 = CFSTR("c");
      ((void (*)(void ***, void *, const __CFString *))v11[2])(v11, v19, CFSTR("c"));

    }
    objc_msgSend(v6, "addObject:", v18, v23, v24, v25, v26, v27);

  }
  if (objc_msgSend(v3, "isEditing"))
    objc_msgSend(v5, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("e"));
  objc_msgSend(v4, "setUserInfo:", v5);
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localizeForLanguage:", 0));
  objc_msgSend(v4, "setTitle:", v21);

  v22 = objc_msgSend(v6, "copy");
  objc_msgSend(v4, "setRequiredUserInfoKeys:", v22);

  objc_msgSend(v4, "_setEligibleForPrediction:", v9);
}

void sub_10005D1EC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;

  v5 = a3;
  objc_msgSend(a2, "timeIntervalSinceReferenceDate");
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:"));
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v6, v5);

}

id sub_10005D25C(void *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  double v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  const __CFString *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  double v37;
  void *v38;
  double v39;
  void *v40;
  void *v41;
  void *v42;
  int v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  void *v49;
  id v50;
  void *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  id v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _QWORD v61[4];
  id v62;
  uint64_t v63;
  _QWORD v64[2];
  void *v65;
  _BYTE v66[128];

  v5 = a1;
  v6 = a2;
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3221225472;
  v61[2] = sub_10005D834;
  v61[3] = &unk_1005512F0;
  v63 = a3;
  v7 = v5;
  v62 = v7;
  v8 = objc_retainBlock(v61);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("sha1")));

  if (!v10)
  {
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "objectForKeyedSubscript:", CFSTR("m")));

    if (!v25)
    {
      ((void (*)(_QWORD *, const __CFString *, uint64_t))v8[2])(v8, CFSTR("missing modification date"), 201);
      v32 = 0;
      goto LABEL_38;
    }
    v54 = v8;
    objc_msgSend(v25, "doubleValue");
    v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", floor(v26)));
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("modificationDate >= %@"), v27));
    v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectForKeyedSubscript:", CFSTR("uuid")));

    v56 = v7;
    if (objc_msgSend(v30, "length"))
    {
      v51 = v27;
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("guid == %@"), v30));
    }
    else
    {
      v36 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "userInfo"));
      v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "objectForKeyedSubscript:", CFSTR("c")));

      if (!v32)
      {
        ((void (*)(_QWORD *, const __CFString *, uint64_t))v8[2])(v8, CFSTR("missing uuid and creation date"), 201);
        v42 = 0;
        v43 = 0;
LABEL_35:

        if (!v43)
        {
          v25 = 0;
          v7 = v56;
          goto LABEL_38;
        }
        v7 = v56;
        goto LABEL_20;
      }
      v51 = v27;
      objc_msgSend(v32, "doubleValue");
      v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", floor(v37)));
      objc_msgSend(v32, "doubleValue");
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", floor(v39 + 1.0)));
      v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("creationDate >= %@ && creationDate < %@"), v38, v40));

    }
    v64[0] = v31;
    v64[1] = v28;
    v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v64, 2));
    v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v41));

    v43 = 1;
    v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleNotesMatchingPredicate:sorted:", v42, 1));
    if ((unint64_t)objc_msgSend(v32, "count") < 2)
    {
      v8 = v54;
    }
    else
    {
      v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v56, "title"));
      v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("title == %@"), v44));
      v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "filteredArrayUsingPredicate:", v45));

      if (objc_msgSend(v46, "count"))
      {
        v47 = v46;

        v32 = v47;
      }
      v8 = v54;

      v43 = 1;
    }
    v27 = v51;
    goto LABEL_35;
  }
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "title"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("title == %@"), v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allVisibleNotesMatchingPredicate:sorted:", v12, 1));
  if (v13)
  {
    v49 = v11;
    v50 = v6;
    v53 = v8;
    v55 = v7;
    v52 = v9;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("sha1")));
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v15 = v13;
    v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v57, v66, 16);
    if (v16)
    {
      v17 = v16;
      v18 = *(_QWORD *)v58;
LABEL_5:
      v19 = 0;
      while (1)
      {
        if (*(_QWORD *)v58 != v18)
          objc_enumerationMutation(v15);
        v20 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v19);
        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "content"));
        v22 = sub_10005CE24(v21, (int)objc_msgSend(v20, "isPlainText"));
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

        if ((objc_msgSend(v23, "isEqual:", v14) & 1) != 0)
          break;

        if (v17 == (id)++v19)
        {
          v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v57, v66, 16);
          if (v17)
            goto LABEL_5;
          goto LABEL_11;
        }
      }
      v65 = v20;
      v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v65, 1));

      if (v32)
        goto LABEL_17;
    }
    else
    {
LABEL_11:

    }
    v32 = &__NSArray0__struct;
LABEL_17:

    v6 = v50;
    v9 = v52;
    v8 = v53;
    v7 = v55;
    v11 = v49;
  }
  else
  {
    v32 = 0;
  }

LABEL_20:
  if (objc_msgSend(v32, "count"))
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "lastObject"));
  }
  else
  {
    if (v32)
    {
      v33 = CFSTR("No note matching criteria");
      v34 = v8;
      v35 = 200;
    }
    else
    {
      v33 = CFSTR("Error while fetching");
      v34 = v8;
      v35 = 201;
    }
    ((void (*)(_QWORD *, const __CFString *, uint64_t))v8[2])(v34, v33, v35);
    v25 = 0;
  }
LABEL_38:

  return v25;
}

void sub_10005D834(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  __CFString *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;

  if (*(_QWORD *)(a1 + 40))
  {
    v5 = NotesErrorDomain;
    v14 = NotesErrorFailureReasonKey;
    v6 = *(void **)(a1 + 32);
    v7 = a2;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userInfo"));
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "description"));
    v10 = (void *)v9;
    v11 = &stru_1005704B8;
    if (v7)
      v11 = v7;
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Can't find note with userInfo: %@, %@"), v9, v11));

    v15 = v12;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
    **(_QWORD **)(a1 + 40) = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v5, a3, v13));

  }
}

id sub_10005D9F0(uint64_t a1)
{
  +[ICNoteContext markOldTrashedNotesForDeletionInContext:](ICNoteContext, "markOldTrashedNotesForDeletionInContext:", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

NSURL *__cdecl sub_10005DD28(id a1, NSString *a2)
{
  return +[NSURL URLWithString:](NSURL, "URLWithString:", a2);
}

NSString *__cdecl sub_10005DDD4(id a1, NSURL *a2)
{
  return -[NSURL absoluteString](a2, "absoluteString");
}

void sub_10005F91C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

id sub_10005FB30(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 32) != a2)
    +[ICFolderCustomNoteSortType setQuerySortType:](ICFolderCustomNoteSortType, "setQuerySortType:", a2);
  return objc_msgSend(*(id *)(a1 + 40), "performActivityWithCompletion:", *(_QWORD *)(a1 + 48));
}

void sub_100060390(uint64_t a1)
{
  void *v2;
  void *v3;
  ICServerSideUpdateTaskController *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  NSObject *v18;
  void *v19;
  _QWORD v20[5];
  _QWORD v21[5];
  id v22;
  _QWORD v23[4];
  id v24;
  uint64_t v25;
  _QWORD v26[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "workerManagedObjectContext"));

  v4 = -[ICServerSideUpdateTaskController initWithWorkerContext:]([ICServerSideUpdateTaskController alloc], "initWithWorkerContext:", v3);
  objc_msgSend(*(id *)(a1 + 32), "setServerSideUpgradeTaskController:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverSideUpgradeTaskController"));
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_10006068C;
  v26[3] = &unk_100550110;
  v26[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v5, "runServerSideTasksIfNeeded:", v26);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudContextDelegate"));
  objc_msgSend(v6, "fixGallerySubAttachmentsIfNecessary");

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachmentPreviewGenerator sharedGenerator](ICAttachmentPreviewGenerator, "sharedGenerator"));
  objc_msgSend(v7, "generatePreviewsIfNeeded");

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachmentPreviewGenerator sharedGenerator](ICAttachmentPreviewGenerator, "sharedGenerator"));
  objc_msgSend(v8, "generateMissingOrOutdatedAttachmentMetaDataIfNeededInContext:", v3);

  +[ICQuickNoteSessionSettings disableNotesOnLockScreenIfNecessary](ICQuickNoteSessionSettings, "disableNotesOnLockScreenIfNecessary");
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100060698;
  v23[3] = &unk_100551468;
  v9 = (id)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v10 = *(_QWORD *)(a1 + 32);
  v24 = v9;
  v25 = v10;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_1000607C8;
  v21[3] = &unk_100551468;
  v21[4] = v10;
  v11 = v9;
  v22 = v11;
  +[ICDatabaseVacuum startDatabaseVacuumPolicyWithPreVacuumHandler:postVacuumHandler:](ICDatabaseVacuum, "startDatabaseVacuumPolicyWithPreVacuumHandler:postVacuumHandler:", v23, v21);
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[ICDrawingPencilKitConverter sharedConverter](ICDrawingPencilKitConverter, "sharedConverter"));
  objc_msgSend(v12, "convertAllDrawingsIfNeeded");

  objc_msgSend(*(id *)(a1 + 32), "cleanUpTemporaryFiles");
  v13 = objc_alloc((Class)ICParticipantUpdater);
  v14 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "workerManagedObjectContext"));
  v16 = objc_msgSend(v13, "initWithManagedObjectContext:", v15);

  objc_msgSend(v16, "updateWithCompletion:", 0);
  v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  LODWORD(v15) = objc_msgSend(v17, "BOOLForKey:", kICInternalSettingsLogStateOnLaunchDefaultsKey);

  if ((_DWORD)v15)
  {
    v18 = os_log_create("com.apple.notes", "Application");
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      sub_1004055A0(v18);

  }
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[ICApplicationTestingHelper sharedHelper](ICApplicationTestingHelper, "sharedHelper"));
  objc_msgSend(v19, "didFinishPostLaunchTasks");

  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100060860;
  v20[3] = &unk_100550110;
  v20[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v20);

}

id sub_10006068C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setServerSideUpgradeTaskController:", 0);
}

void sub_100060698(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "UUIDString"));
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Database Vacuum %@"), v4));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "beginBackgroundTaskWithName:expirationHandler:", v7, &stru_100551440)));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "backgroundTasks"));
  objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v3);

}

void sub_100060758(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = os_log_create("com.apple.notes", "Application");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Database vacuum took too long when moving to the background", v2, 2u);
  }

}

void sub_1000607C8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v6 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundTasks"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v6));

  if (v4)
  {
    objc_msgSend(*(id *)(a1 + 40), "endBackgroundTask:", objc_msgSend(v4, "unsignedIntegerValue"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "backgroundTasks"));
    objc_msgSend(v5, "removeObjectForKey:", v6);

  }
}

void sub_100060860(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "connectedScenes"));

  v3 = objc_msgSend(v6, "ic_objectOfClass:", objc_opt_class(UIWindowScene));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  objc_msgSend(*(id *)(a1 + 32), "setUpAppStoreRatingObserverWithWindowScene:", v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("ICAppDelegateDidRunDelayedLaunchTasks"), *(_QWORD *)(a1 + 32));

}

void sub_1000609E8(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  _QWORD v26[3];

  v2 = objc_alloc((Class)ICNASnapshotBackgroundTask);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "analyticsController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICNASnapshotReporter sharedReporter](ICNASnapshotReporter, "sharedReporter"));
  v6 = objc_msgSend(v2, "initWithAnalyticsController:eventReporter:snapshotReporter:", v3, v4, v5);
  v26[0] = v6;
  v7 = objc_alloc((Class)ICPaperSearchIndexerBackgroundTask);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v9 = objc_msgSend(v7, "initWithNoteContext:", v8);
  v26[1] = v9;
  v10 = objc_alloc((Class)ICCloudSyncBackgroundTask);
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  v12 = objc_msgSend(v10, "initWithCloudContext:", v11);
  v26[2] = v12;
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v26, 3));

  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v14 = v13;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v22;
    do
    {
      v18 = 0;
      do
      {
        if (*(_QWORD *)v22 != v17)
          objc_enumerationMutation(v14);
        v19 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)v18);
        v20 = (void *)objc_claimAutoreleasedReturnValue(+[ICBackgroundTaskScheduler sharedScheduler](ICBackgroundTaskScheduler, "sharedScheduler", (_QWORD)v21));
        objc_msgSend(v20, "registerTask:", v19);

        v18 = (char *)v18 + 1;
      }
      while (v16 != v18);
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v16);
  }

}

void sub_100060C0C(uint64_t a1)
{
  _BYTE *WeakRetained;
  _BYTE *v2;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained && !WeakRetained[19])
  {
    v2 = WeakRetained;
    objc_msgSend(WeakRetained, "runDelayedLaunchTasks");
    WeakRetained = v2;
  }

}

id sub_100060C4C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "handleDarwinNotificationName:");
}

void sub_100060C54(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  unsigned __int8 v3;
  void *v4;
  unsigned int v5;
  id *v6;
  id v7;
  _QWORD v8[4];
  id v9;
  _QWORD v10[4];
  id v11;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_msgSend(WeakRetained, "requestedAuthorizationToShowUserNotifications");

  if ((v3 & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudConfiguration sharedConfiguration](ICCloudConfiguration, "sharedConfiguration"));
    v5 = objc_msgSend(v4, "requestUserNotificationAuthorizationAtLaunch");

    if (v5)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      v10[2] = sub_100060D88;
      v10[3] = &unk_10054FF58;
      v6 = &v11;
      objc_copyWeak(&v11, v1);
      performBlockOnMainThread(v10);
    }
    else
    {
      v7 = objc_loadWeakRetained(v1);
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472;
      v8[2] = sub_100060DEC;
      v8[3] = &unk_100550DD0;
      v6 = &v9;
      objc_copyWeak(&v9, v1);
      objc_msgSend(v7, "checkIfHasSharedNotesOrFolders:", v8);

    }
    objc_destroyWeak(v6);
  }
}

void sub_100060D70(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100060D88(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;

  v2 = os_log_create("com.apple.notes", "Notifications");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100405630();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "requestAuthorizationToShowUserNotificationsIfNecessary");

}

void sub_100060DEC(uint64_t a1, int a2)
{
  _QWORD v2[4];
  id v3;

  if (a2)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100060E74;
    v2[3] = &unk_10054FF58;
    objc_copyWeak(&v3, (id *)(a1 + 32));
    performBlockOnMainThread(v2);
    objc_destroyWeak(&v3);
  }
}

void sub_100060E60(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100060E74(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;

  v2 = os_log_create("com.apple.notes", "Notifications");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10040565C();

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "requestAuthorizationToShowUserNotificationsIfNecessary");

}

void sub_1000612FC(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = os_log_create("com.apple.notes", "Application");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Timed out waiting for removeAllCloudSyncingObjectActivityEventsForUnsharedObjectsInContext in background", v2, 2u);
  }

}

void sub_100061B48(id a1)
{
  NSObject *v1;
  void *v2;
  uint8_t v3[16];

  v1 = os_log_create("com.apple.notes", "SearchIndexer");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Took too long to finish indexing when moving to the background", v3, 2u);
  }

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICSearchIndexer sharedIndexer](ICSearchIndexer, "sharedIndexer"));
  objc_msgSend(v2, "cancelIndexingOperationsWithCompletionHandler:", 0);

}

void sub_100061BD8(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = os_log_create("com.apple.notes", "Application");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Took too long to save when moving to the background", v2, 2u);
  }

}

id sub_100061C48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endBackgroundTask:", *(_QWORD *)(a1 + 40));
}

id sub_100061C54(uint64_t a1)
{
  NSObject *v2;

  v2 = os_log_create("com.apple.notes", "Crypto");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100405688();

  return objc_msgSend(*(id *)(a1 + 32), "lockAllNotes");
}

void sub_100061DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_100061DD0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "windows"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "ic_containsObjectPassingTest:", &stru_100551550);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v2, "ic_containsObjectPassingTest:", &stru_100551570);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v2, "ic_containsObjectPassingTest:", &stru_100551590);

}

BOOL sub_100061E58(id a1, UIWindow *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  void *v5;
  BOOL v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[UIWindow ic_viewControllerManager](a2, "ic_viewControllerManager", a3, a4));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentAttachmentPresenter"));
  v6 = v5 != 0;

  return v6;
}

BOOL sub_100061E9C(id a1, UIWindow *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  BOOL v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[UIWindow ic_viewControllerManager](a2, "ic_viewControllerManager", a3, a4));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "currentAttachmentPresenter"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "galleryAttachmentEditorController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "extractedDocumentController"));
  v8 = v7 != 0;

  return v8;
}

BOOL sub_100061F08(id a1, UIWindow *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char isKindOfClass;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[UIWindow ic_viewControllerManager](a2, "ic_viewControllerManager", a3, a4));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "window"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_topmostPresentedViewController"));
  v7 = objc_opt_class(UIActivityViewController);
  isKindOfClass = objc_opt_isKindOfClass(v6, v7);

  return isKindOfClass & 1;
}

id sub_100062118(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "endBackgroundTask:", objc_msgSend(*(id *)(a1 + 32), "delayedLockProtectedNotesTask"));

  return objc_msgSend(*(id *)(a1 + 32), "setDelayedLockProtectedNotesTask:", UIBackgroundTaskInvalid);
}

NSArray *__cdecl sub_100062310(id a1, NSArray *a2)
{
  NSArray *v2;
  id v3;
  NSArray *v4;
  void *v5;
  void *v6;
  void *v8;

  v2 = a2;
  v3 = -[NSArray indexOfObjectPassingTest:](v2, "indexOfObjectPassingTest:", &stru_100551638);
  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v4 = v2;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](v2, "objectAtIndexedSubscript:", v3));
    v8 = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
    v4 = (NSArray *)objc_claimAutoreleasedReturnValue(-[NSArray arrayByExcludingObjectsInArray:](v2, "arrayByExcludingObjectsInArray:", v6));

  }
  return v4;
}

BOOL sub_1000623E8(id a1, UIMenuElement *a2, unint64_t a3, BOOL *a4)
{
  UIMenuElement *v5;
  uint64_t v6;
  BOOL v7;

  v5 = a2;
  v6 = objc_opt_class(UIKeyCommand);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0 && -[UIMenuElement action](v5, "action") == "findAndReplace:")
  {
    v7 = 1;
    *a4 = 1;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_100062750(uint64_t a1, void *a2)
{
  id v3;

  v3 = a2;
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_10006286C(id a1)
{
  NSObject *v1;
  void *v2;

  v1 = os_log_create("com.apple.notes", "Application");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEBUG))
    sub_1004057BC();

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v2, "registerForRemoteNotifications");

}

void sub_100062C24(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  NSObject *v12;
  void *v13;
  void *v14;
  _QWORD v15[4];
  id v16;

  v2 = objc_opt_class(NSUUID);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  v4 = ICDynamicCast(v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (!v5)
    +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "uuid", "-[ICAppDelegate mentionNotificationWillSend:]_block_invoke", 1, 0, CFSTR("Notification did not contain a mention UUID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "backgroundTasks"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", v5));

  if (v7)
    +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "self.backgroundTasks[uuid] == ((void *)0)", "-[ICAppDelegate mentionNotificationWillSend:]_block_invoke", 1, 0, CFSTR("A mention notification (%@) was sent while previous one inflight"), v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("MentionNotificationTask-%@"), v5));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100062E20;
  v15[3] = &unk_100550110;
  v10 = v5;
  v16 = v10;
  v11 = objc_msgSend(v8, "beginBackgroundTaskWithName:expirationHandler:", v9, v15);

  v12 = os_log_create("com.apple.notes", "Mentions");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    sub_100405840();

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", v11));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "backgroundTasks"));
  objc_msgSend(v14, "setObject:forKeyedSubscript:", v13, v10);

}

void sub_100062E20(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;

  v2 = os_log_create("com.apple.notes", "Mentions");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    sub_1004058A0(a1, v2, v3);

}

void sub_100062EF0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;

  v2 = objc_opt_class(NSUUID);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "object"));
  v4 = ICDynamicCast(v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (!v5)
    +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "uuid", "-[ICAppDelegate mentionNotificationDidSend:]_block_invoke", 1, 0, CFSTR("Notification did not contain a mention UUID"));
  v6 = objc_opt_class(NSNumber);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "backgroundTasks"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v5));
  v9 = ICDynamicCast(v6, v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (v10)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    objc_msgSend(v11, "endBackgroundTask:", objc_msgSend(v10, "unsignedIntegerValue"));

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "backgroundTasks"));
    objc_msgSend(v12, "removeObjectForKey:", v5);

    v13 = os_log_create("com.apple.notes", "Mentions");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      sub_100405970();
  }
  else
  {
    v13 = os_log_create("com.apple.notes", "Mentions");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      sub_10040590C();
  }

}

void sub_1000631E0(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = os_log_create("com.apple.notes", "Application");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Timed out waiting for database-locking operation to finish", v2, 2u);
  }

}

void sub_1000635D0(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  int v4;
  void *v5;

  v2 = os_log_create("com.apple.notes", "Application");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
    v4 = 138412290;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Timed out waiting for context %@ to save in background", (uint8_t *)&v4, 0xCu);

  }
}

BOOL sub_100063ACC(id a1, ICAttachment *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  void *v5;
  BOOL v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[ICAttachment note](a2, "note", a3, a4));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "account"));
  v6 = v5 == 0;

  return v6;
}

void sub_100063D64(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  uint64_t v6;

  v3 = a2;
  v4 = os_log_create("com.apple.notes", "Analytics");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_100405AD8(a1, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount cloudKitAccountInContext:](ICAccount, "cloudKitAccountInContext:", v3));
  if (*(uint64_t *)(a1 + 40) >= 1)
  {
    v6 = 0;
    do
    {
      objc_msgSend(*(id *)(a1 + 32), "submitChangePasswordEventForModernAccount:isReset:", v5, *(unsigned __int8 *)(a1 + 48));
      ++v6;
    }
    while (v6 < *(_QWORD *)(a1 + 40));
  }
  +[ICInstrumentationUtilities clearRecentPasswordChangeCountAsReset:](ICInstrumentationUtilities, "clearRecentPasswordChangeCountAsReset:", *(unsigned __int8 *)(a1 + 48));

}

void sub_100063EB8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *i;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  unint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t locked;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  id obj;
  uint64_t v23;
  id v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint8_t buf[4];
  void *v31;
  __int16 v32;
  void *v33;
  _BYTE v34[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v20 = objc_msgSend(v4, "beginBackgroundTaskWithName:expirationHandler:", CFSTR("Submit Password Change Mode Event"), &stru_100551728);

  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v21 = v3;
  obj = (id)objc_claimAutoreleasedReturnValue(+[ICAccount allActiveAccountsInContext:](ICAccount, "allActiveAccountsInContext:", v3));
  v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
  if (v24)
  {
    v23 = *(_QWORD *)v27;
    do
    {
      for (i = 0; i != v24; i = (char *)i + 1)
      {
        if (*(_QWORD *)v27 != v23)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICInstrumentationUtilities recentPasswordModesForAccount:](ICInstrumentationUtilities, "recentPasswordModesForAccount:", v6));
        v8 = objc_alloc_init((Class)ICInstrumentationUtilitiesRecentPasswordMode);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accountData"));
        objc_msgSend(v8, "setLockedNotesMode:", objc_msgSend(v9, "lockedNotesMode"));

        v25 = v8;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "arrayByAddingObject:", v8));

        if ((unint64_t)objc_msgSend(v10, "count") >= 2)
        {
          v11 = 1;
          do
          {
            v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v11 - 1));
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", v11));
            v14 = os_log_create("com.apple.notes", "Analytics");
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              locked = NSStringFromAccountDataLockedNotesMode(objc_msgSend(v12, "lockedNotesMode"));
              v16 = (void *)objc_claimAutoreleasedReturnValue(locked);
              v17 = NSStringFromAccountDataLockedNotesMode(objc_msgSend(v13, "lockedNotesMode"));
              v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
              *(_DWORD *)buf = 138412546;
              v31 = v16;
              v32 = 2112;
              v33 = v18;
              _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Instrumenting password mode change from mode %@ to mode %@", buf, 0x16u);

            }
            objc_msgSend(*(id *)(a1 + 32), "submitChangePasswordModeEventForAccount:contextPath:fromMode:toMode:", v6, objc_msgSend(v12, "contextPath"), objc_msgSend(v12, "lockedNotesMode"), objc_msgSend(v13, "lockedNotesMode"));

            ++v11;
          }
          while (v11 < (unint64_t)objc_msgSend(v10, "count"));
        }
        +[ICInstrumentationUtilities clearRecentPasswordModesForAccount:](ICInstrumentationUtilities, "clearRecentPasswordModesForAccount:", v6);

      }
      v24 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v26, v34, 16);
    }
    while (v24);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v19, "endBackgroundTask:", v20);

}

void sub_1000641F8(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = os_log_create("com.apple.notes", "Application");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Timed out waiting for sumbit password change to finish", v2, 2u);
  }

}

id sub_100064310(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "window"));
  v5 = *(void **)(a1 + 32);

  if (v4 == v5)
  {
    v7 = objc_opt_class(ICNoteEditorViewController);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activeEditorController"));
    v9 = ICDynamicCast(v7, v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

    v6 = objc_msgSend(v10, "isShowingAudioInspector");
  }
  else
  {
    v6 = 0;
  }

  return v6;
}

id sub_10006466C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v5[5];

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000646DC;
  v5[3] = &unk_100550BE8;
  v5[4] = v3;
  return objc_msgSend(v3, "checkIfHasSharedNotesOrFolders:", v5);
}

uint64_t sub_1000646DC(uint64_t result, int a2)
{
  _QWORD v2[5];

  if (a2)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472;
    v2[2] = sub_100064734;
    v2[3] = &unk_100550110;
    v2[4] = *(_QWORD *)(result + 32);
    return performBlockOnMainThread(v2);
  }
  return result;
}

id sub_100064734(uint64_t a1)
{
  NSObject *v2;

  v2 = os_log_create("com.apple.notes", "Notifications");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100405B4C();

  return objc_msgSend(*(id *)(a1 + 32), "requestAuthorizationToShowUserNotificationsIfNecessary");
}

void sub_1000647A4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  ICDebugSpinner *v10;
  uint64_t v11;
  ICDebugSpinner *v12;
  _QWORD v13[4];
  ICDebugSpinner *v14;
  uint64_t v15;
  uint8_t buf;
  _BYTE v17[15];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManagers"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v19;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)v6);
        v8 = os_log_create("com.apple.notes", "UI");
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          sub_100405B78(&buf, v17, v8);

        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "noteEditorViewController"));
        objc_msgSend(v9, "setNote:", 0);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v4);
  }

  v10 = objc_alloc_init(ICDebugSpinner);
  -[ICDebugSpinner show](v10, "show");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10006497C;
  v13[3] = &unk_10054FE80;
  v11 = *(_QWORD *)(a1 + 32);
  v14 = v10;
  v15 = v11;
  v12 = v10;
  +[ICDebugUtilities startFreshWithCompletionHandler:](ICDebugUtilities, "startFreshWithCompletionHandler:", v13);

}

id sub_10006497C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "hide");
  return objc_msgSend(*(id *)(a1 + 40), "showStartupWithCompletionBlock:", 0);
}

void sub_100064EC8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100064EE4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "requestAuthorizationToShowUserNotificationsIfNecessary");

}

void sub_100064FC4(uint64_t a1)
{
  unsigned __int8 v2;
  _QWORD v3[4];
  id v4;
  unsigned __int8 v5;

  v2 = +[ICCloudSyncingObject hasAnySharedObjectInContext:](ICCloudSyncingObject, "hasAnySharedObjectInContext:", *(_QWORD *)(a1 + 32));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100065048;
  v3[3] = &unk_10054FDB0;
  v4 = *(id *)(a1 + 40);
  v5 = v2;
  performBlockOnMainThread(v3);

}

uint64_t sub_100065048(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(unsigned __int8 *)(a1 + 40));
  return result;
}

uint64_t sub_1000655F0(uint64_t a1, uint64_t a2)
{
  _QWORD v3[6];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100065644;
  v3[3] = &unk_100551510;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = a2;
  return performBlockOnMainThread(v3);
}

_QWORD *sub_100065644(_QWORD *result)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[5];

  v1 = result[5];
  if (v1 != 1)
  {
    if (v1)
    {
      return +[ICCloudNotificationsController registerForUserNotificationsWithCompletionHandler:](ICCloudNotificationsController, "registerForUserNotificationsWithCompletionHandler:", 0);
    }
    else
    {
      v2 = (void *)result[4];
      v3[0] = _NSConcreteStackBlock;
      v3[1] = 3221225472;
      v3[2] = sub_1000656C0;
      v3[3] = &unk_100550110;
      v3[4] = v2;
      return objc_msgSend(v2, "showAllowNotificationsWarmingSheet:", v3);
    }
  }
  return result;
}

id sub_1000656C0(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100065720;
  v2[3] = &unk_100550110;
  v2[4] = *(_QWORD *)(a1 + 32);
  return +[ICCloudNotificationsController registerForUserNotificationsWithCompletionHandler:](ICCloudNotificationsController, "registerForUserNotificationsWithCompletionHandler:", v2);
}

uint64_t sub_100065720(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100065774;
  v2[3] = &unk_100550110;
  v2[4] = *(_QWORD *)(a1 + 32);
  return performBlockOnMainThread(v2);
}

id sub_100065774(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "dismissAllowNotificationsWarmingSheet");
  return objc_msgSend(*(id *)(a1 + 32), "setUserNotificationsAllowed:", 0);
}

void sub_100065F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100065F50(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100065F60(uint64_t a1)
{

}

uint64_t sub_100065F68(uint64_t a1)
{
  void *v2;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v2, "removeObserver:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100065FC4(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD);
  void *v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tagSelection"));
    v3 = objc_msgSend(v2, "tagOperator");

    WeakRetained = v8;
    if (v3 != (id)2)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagSelection"));
      objc_msgSend(v4, "setTagOperator:", 2);

      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagSelectionDidChange"));
      WeakRetained = v8;
      if (v5)
      {
        v6 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagSelectionDidChange"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagSelection"));
        ((void (**)(_QWORD, void *))v6)[2](v6, v7);

        WeakRetained = v8;
      }
    }
  }

}

void sub_10006608C(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void (**v6)(_QWORD, _QWORD);
  void *v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v8 = WeakRetained;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tagSelection"));
    v3 = objc_msgSend(v2, "tagOperator");

    WeakRetained = v8;
    if (v3 != (id)1)
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagSelection"));
      objc_msgSend(v4, "setTagOperator:", 1);

      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagSelectionDidChange"));
      WeakRetained = v8;
      if (v5)
      {
        v6 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagSelectionDidChange"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "tagSelection"));
        ((void (**)(_QWORD, void *))v6)[2](v6, v7);

        WeakRetained = v8;
      }
    }
  }

}

void sub_10006620C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void (**v5)(id, void *);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "upgradeButtonTapHandler"));

  if (v2)
  {
    v5 = (void (**)(id, void *))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "upgradeButtonTapHandler"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folderListSectionIdentifier"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountObjectID"));
    v5[2](v5, v4);

  }
}

id sub_100066314(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = objc_msgSend(a2, "mutableCopy");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), NSFontAttributeName);
  v4 = objc_msgSend(v3, "copy");

  return v4;
}

void sub_100066C74(id a1)
{
  ICRecentlyDeletedHeaderView *v1;
  void *v2;

  v1 = -[ICRecentlyDeletedHeaderView initWithFrame:]([ICRecentlyDeletedHeaderView alloc], "initWithFrame:", CGRectZero.origin.x, CGRectZero.origin.y, CGRectZero.size.width, CGRectZero.size.height);
  v2 = (void *)qword_1005DDD50;
  qword_1005DDD50 = (uint64_t)v1;

}

ICHashtag *__cdecl sub_1000673B0(id a1, NSManagedObjectID *a2)
{
  NSManagedObjectID *v2;
  void *v3;
  void *v4;
  void *v5;

  v2 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_existingObjectWithID:", v2));

  return (ICHashtag *)v5;
}

void sub_10006741C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

void sub_1000675F8(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Update Migration States took too long when moving to the background", v2, 2u);
  }

}

id sub_100067668()
{
  ICDonateDynamicAppVocabularyLaunchTask *v0;
  ICImportAndDeleteCallRecordingsLaunchTask *v1;
  ICUpdateAccountReferenceInAttachmentsAndMediaLaunchTask *v2;
  ICGenerateWidgetSnippetForFirstTimeLaunchTask *v3;
  ICFixMissingMediaLaunchTask *v4;
  ICFixMissingPaperBundlesLaunchTask *v5;
  ICRefetchNoteRecordsLaunchTask *v6;
  ICRemoveTemporaryPaperKitBundlesLaunchTask *v7;
  ICRetranscribeAudioAttachmentsIfNeededLaunchTask *v8;
  ICRetranscribeAfterVersionIncrementLaunchTask *v9;
  id v11;
  ICUpdatePaperDocumentScansSectionLaunchTask *v12;
  ICUpdateInlineDrawingsSectionLaunchTask *v13;
  ICUpdateDerivedChecklistAttributesLaunchTask *v14;
  ICDeleteOrphanedAccountDirectoriesFromAppDataContainerLaunchTask *v15;
  ICDeleteCoherenceContextsFromGroupContainerLaunchTask *v16;
  ICDedupeHashtagsLaunchTask *v17;
  ICRefreshHashtagStandardizedContentLaunchTask *v18;
  ICRunMiniDeviceSnapshotLaunchTask *v19;
  ICReindexEverythingIfNecessaryTask *v20;
  ICReindexEverythingAfterBackupRestoreTask *v21;
  ICCheckCoreSpotlightClientStateLaunchTask *v22;
  ICMigrateSearchIndexingLaunchTask *v23;
  ICFixMinimumSupportedVersionForSharedFoldersLaunchTask *v24;
  ICFixPasswordProtectedNotesInSharedFoldersLaunchTask *v25;
  ICFixAttachmentMediaInconsistencyLaunchTask *v26;
  ICResetReplicaIDsAfterBackupRestoreLaunchTask *v27;
  ICDeleteOrphanedHTMLNotesLaunchTask *v28;
  ICDeleteMigratedHTMLAccountsLaunchTask *v29;
  ICDeleteGalleryAttachmentPNGPreviewImagesLaunchTask *v30;
  ICPutDeletedNotesInTrashLaunchTask *v31;
  ICRegenerateGalleryAttachmentNoteTitlesLaunchTask *v32;
  ICFixTombstonesWithoutAccountsLaunchTask *v33;
  ICFixNotesWithoutFoldersLaunchTask *v34;
  ICExcludeFromBackupFileAttributesLaunchTask *v35;
  ICUpdateMigrationStatesLaunchTask *v36;
  ICFixHiddenICloudAccountLaunchTask *v37;
  ICFixCorruptDatabaseLaunchTask *v38;
  ICNoteContextLaunchTask *v39;
  ICRegisterStateHandlersLaunchTask *v40;
  _QWORD v41[39];

  v40 = objc_alloc_init(ICRegisterStateHandlersLaunchTask);
  v41[0] = v40;
  v39 = objc_alloc_init(ICNoteContextLaunchTask);
  v41[1] = v39;
  v38 = objc_alloc_init(ICFixCorruptDatabaseLaunchTask);
  v41[2] = v38;
  v37 = objc_alloc_init(ICFixHiddenICloudAccountLaunchTask);
  v41[3] = v37;
  v36 = objc_alloc_init(ICUpdateMigrationStatesLaunchTask);
  v41[4] = v36;
  v35 = objc_alloc_init(ICExcludeFromBackupFileAttributesLaunchTask);
  v41[5] = v35;
  v34 = objc_alloc_init(ICFixNotesWithoutFoldersLaunchTask);
  v41[6] = v34;
  v33 = objc_alloc_init(ICFixTombstonesWithoutAccountsLaunchTask);
  v41[7] = v33;
  v32 = objc_alloc_init(ICRegenerateGalleryAttachmentNoteTitlesLaunchTask);
  v41[8] = v32;
  v31 = objc_alloc_init(ICPutDeletedNotesInTrashLaunchTask);
  v41[9] = v31;
  v30 = objc_alloc_init(ICDeleteGalleryAttachmentPNGPreviewImagesLaunchTask);
  v41[10] = v30;
  v29 = objc_alloc_init(ICDeleteMigratedHTMLAccountsLaunchTask);
  v41[11] = v29;
  v28 = objc_alloc_init(ICDeleteOrphanedHTMLNotesLaunchTask);
  v41[12] = v28;
  v27 = objc_alloc_init(ICResetReplicaIDsAfterBackupRestoreLaunchTask);
  v41[13] = v27;
  v26 = objc_alloc_init(ICFixAttachmentMediaInconsistencyLaunchTask);
  v41[14] = v26;
  v25 = objc_alloc_init(ICFixPasswordProtectedNotesInSharedFoldersLaunchTask);
  v41[15] = v25;
  v24 = objc_alloc_init(ICFixMinimumSupportedVersionForSharedFoldersLaunchTask);
  v41[16] = v24;
  v23 = objc_alloc_init(ICMigrateSearchIndexingLaunchTask);
  v41[17] = v23;
  v22 = objc_alloc_init(ICCheckCoreSpotlightClientStateLaunchTask);
  v41[18] = v22;
  v21 = objc_alloc_init(ICReindexEverythingAfterBackupRestoreTask);
  v41[19] = v21;
  v20 = objc_alloc_init(ICReindexEverythingIfNecessaryTask);
  v41[20] = v20;
  v19 = objc_alloc_init(ICRunMiniDeviceSnapshotLaunchTask);
  v41[21] = v19;
  v18 = objc_alloc_init(ICRefreshHashtagStandardizedContentLaunchTask);
  v41[22] = v18;
  v17 = objc_alloc_init(ICDedupeHashtagsLaunchTask);
  v41[23] = v17;
  v16 = objc_alloc_init(ICDeleteCoherenceContextsFromGroupContainerLaunchTask);
  v41[24] = v16;
  v15 = objc_alloc_init(ICDeleteOrphanedAccountDirectoriesFromAppDataContainerLaunchTask);
  v41[25] = v15;
  v14 = objc_alloc_init(ICUpdateDerivedChecklistAttributesLaunchTask);
  v41[26] = v14;
  v13 = objc_alloc_init(ICUpdateInlineDrawingsSectionLaunchTask);
  v41[27] = v13;
  v12 = objc_alloc_init(ICUpdatePaperDocumentScansSectionLaunchTask);
  v41[28] = v12;
  v0 = objc_alloc_init(ICDonateDynamicAppVocabularyLaunchTask);
  v41[29] = v0;
  v1 = objc_alloc_init(ICImportAndDeleteCallRecordingsLaunchTask);
  v41[30] = v1;
  v2 = objc_alloc_init(ICUpdateAccountReferenceInAttachmentsAndMediaLaunchTask);
  v41[31] = v2;
  v3 = objc_alloc_init(ICGenerateWidgetSnippetForFirstTimeLaunchTask);
  v41[32] = v3;
  v4 = objc_alloc_init(ICFixMissingMediaLaunchTask);
  v41[33] = v4;
  v5 = objc_alloc_init(ICFixMissingPaperBundlesLaunchTask);
  v41[34] = v5;
  v6 = -[ICRefetchNoteRecordsLaunchTask initWithIdentifier:modifiedAfterDateString:]([ICRefetchNoteRecordsLaunchTask alloc], "initWithIdentifier:modifiedAfterDateString:", CFSTR("Fall2024"), CFSTR("2024-06-01T00:00:00+0000"));
  v41[35] = v6;
  v7 = objc_alloc_init(ICRemoveTemporaryPaperKitBundlesLaunchTask);
  v41[36] = v7;
  v8 = objc_alloc_init(ICRetranscribeAudioAttachmentsIfNeededLaunchTask);
  v41[37] = v8;
  v9 = objc_alloc_init(ICRetranscribeAfterVersionIncrementLaunchTask);
  v41[38] = v9;
  v11 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v41, 39));

  return v11;
}

void sub_100067B98(uint64_t a1)
{
  void *v2;
  void *v3;
  char v4;
  void *i;
  void *v6;
  NSObject *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *j;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  id obj;
  uint64_t v19;
  id v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[16];
  _BYTE v30[128];
  _BYTE v31[16];
  _BYTE v32[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == %@"), CFSTR("typeUTI"), ICAttachmentUTTypeGallery));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentsMatchingPredicate:context:](ICAttachment, "attachmentsMatchingPredicate:context:", v2, *(_QWORD *)(a1 + 32)));
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  obj = v3;
  v20 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v25, v32, 16);
  if (!v20)
    goto LABEL_25;
  v16 = a1;
  v17 = v2;
  v4 = 0;
  v19 = *(_QWORD *)v26;
  do
  {
    for (i = 0; i != v20; i = (char *)i + 1)
    {
      if (*(_QWORD *)v26 != v19)
        objc_enumerationMutation(obj);
      v6 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
      if (objc_msgSend(v6, "hasAnyPNGPreviewImageFiles"))
      {
        v7 = os_log_create("com.apple.notes", "LaunchTask");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          sub_100405DF4((uint64_t)v31, (uint64_t)v6);

        objc_msgSend(v6, "deleteAttachmentPreviewImages");
        objc_msgSend(v6, "purgeAttachmentPreviewImages");
        v4 = 1;
      }
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subAttachments"));
      v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
      if (v9)
      {
        v10 = v9;
        v11 = *(_QWORD *)v22;
        do
        {
          for (j = 0; j != v10; j = (char *)j + 1)
          {
            if (*(_QWORD *)v22 != v11)
              objc_enumerationMutation(v8);
            v13 = *(void **)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)j);
            if (objc_msgSend(v13, "hasAnyPNGPreviewImageFiles"))
            {
              v14 = os_log_create("com.apple.notes", "LaunchTask");
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                sub_100405DF4((uint64_t)v29, (uint64_t)v13);

              objc_msgSend(v13, "deleteAttachmentPreviewImages");
              objc_msgSend(v13, "purgeAttachmentPreviewImages");
              v4 = 1;
            }
          }
          v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v21, v30, 16);
        }
        while (v10);
      }

    }
    v20 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v32, 16);
  }
  while (v20);
  v2 = v17;
  if ((v4 & 1) != 0)
  {
    objc_msgSend(*(id *)(v16 + 32), "ic_save");
  }
  else
  {
LABEL_25:
    v15 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      sub_100405DB4(v15);

  }
}

void sub_10006839C(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationAccountObjectID"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount ic_existingObjectWithID:context:](ICAccount, "ic_existingObjectWithID:context:", v2, *(_QWORD *)(a1 + 40)));

  if ((objc_msgSend(v3, "isValidObject") & 1) == 0)
  {
    v4 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cancelling legacy import operation because the destination account does not exist", v5, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "cancel");
  }

}

void sub_100068620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100068644(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100068654(uint64_t a1)
{

}

void sub_10006865C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;

  v1 = a1 + 40;
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "legacyAccountObjectID"));
  v9 = 0;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "existingObjectWithID:error:", v3, &v9));
  v5 = v9;
  v6 = *(_QWORD *)(*(_QWORD *)(v1 + 8) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v4;

  if (v5)
  {
    v8 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_100405E84((id *)v1);

  }
}

void sub_100068954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006897C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allVisibleNoteObjectIDsForAccountWithObjectID:", v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_100068CF8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD v6[5];
  id v7;
  id v8;
  id v9;
  id v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "snapshotManagedObjectContext"));

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_100068DD0;
  v6[3] = &unk_1005519C8;
  v4 = *(void **)(a1 + 40);
  v6[4] = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v9 = *(id *)(a1 + 48);
  v10 = *(id *)(a1 + 56);
  v5 = v3;
  objc_msgSend(v5, "performBlockAndWait:", v6);

}

void sub_100068DD0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  unsigned __int8 v12;
  id v13;
  NSObject *v14;
  id obj;
  void *v16;
  uint64_t v17;
  id v18;
  _QWORD v19[4];
  id v20;
  _QWORD v21[4];
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);
  void (*v36)(uint64_t);
  id v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  _BYTE v42[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationAccountObjectID"));
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount ic_existingObjectWithID:context:](ICAccount, "ic_existingObjectWithID:context:", v2, *(_QWORD *)(a1 + 40)));

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  obj = *(id *)(a1 + 48);
  v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
  if (v3)
  {
    v17 = *(_QWORD *)v39;
    do
    {
      v4 = 0;
      do
      {
        if (*(_QWORD *)v39 != v17)
          objc_enumerationMutation(obj);
        v5 = *(_QWORD *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)v4);
        v32 = 0;
        v33 = &v32;
        v34 = 0x3032000000;
        v35 = sub_100068644;
        v36 = sub_100068654;
        v37 = 0;
        v26 = 0;
        v27 = &v26;
        v28 = 0x3032000000;
        v29 = sub_100068644;
        v30 = sub_100068654;
        v31 = 0;
        v6 = *(void **)(a1 + 56);
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        v21[2] = sub_1000690F8;
        v21[3] = &unk_1005519A0;
        v24 = &v32;
        v22 = v6;
        v23 = v5;
        v25 = &v26;
        objc_msgSend(v22, "performBlockAndWait:", v21);
        if (v33[5])
        {
          v7 = objc_autoreleasePoolPush();
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "importLegacyFolder:toAccount:", v27[5], v16));
          v9 = objc_msgSend(*(id *)(a1 + 32), "importLegacyNote:deviceMigrationIdentifier:toFolder:", v33[5], *(_QWORD *)(a1 + 64), v8);

          objc_autoreleasePoolPop(v7);
        }
        v10 = *(void **)(a1 + 56);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_1000691C8;
        v19[3] = &unk_100550110;
        v20 = v10;
        objc_msgSend(v20, "performBlockAndWait:", v19);

        _Block_object_dispose(&v26, 8);
        _Block_object_dispose(&v32, 8);

        v4 = (char *)v4 + 1;
      }
      while (v3 != v4);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v38, v42, 16);
    }
    while (v3);
  }

  v11 = *(void **)(a1 + 40);
  v18 = 0;
  v12 = objc_msgSend(v11, "save:", &v18);
  v13 = v18;
  if ((v12 & 1) == 0)
  {
    v14 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      sub_100405F88();

    objc_msgSend(*(id *)(a1 + 32), "cancel");
  }

}

void sub_1000690C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_1000690F8(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = (void *)a1[4];
  v3 = a1[5];
  v12 = 0;
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "existingObjectWithID:error:", v3, &v12));
  v5 = v12;
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v4;

  if (v5)
  {
    v8 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      sub_100405FE8();

  }
  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(a1[6] + 8) + 40), "folder"));
  v10 = *(_QWORD *)(a1[7] + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

}

id sub_1000691C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reset");
}

void sub_100069240(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  _UNKNOWN **v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = CFSTR("MigrationBatchSize");
  v4 = &off_10057C2C8;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1));
  objc_msgSend(v1, "registerDefaults:", v2);

}

void sub_100069E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  _Block_object_dispose(&a57, 8);
  _Block_object_dispose((const void *)(v62 - 224), 8);
  _Block_object_dispose(&a62, 8);
  _Block_object_dispose((const void *)(v62 - 176), 8);
  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x240], 8);
  _Unwind_Resume(a1);
}

void sub_100069F38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "htmlString"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

id sub_100069F90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id result;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "creationDate"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modificationDate"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "title"));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  result = objc_msgSend(*(id *)(a1 + 32), "isPlainText");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10006A020(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[128];

  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "attachments", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v10;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v10 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(a1 + 40);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * (_QWORD)v6), "objectID"));
        objc_msgSend(v7, "addObject:", v8);

        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v9, v13, 16);
    }
    while (v4);
  }

}

void sub_10006A134(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v3 = *(_QWORD *)(a1 + 40);
  v13 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "existingObjectWithID:error:", v3, &v13));
  v5 = v13;

  if (v5)
  {
    v6 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1004060DC();

  }
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

  v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fileURL"));
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v12 = *(void **)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;

}

void sub_10006A9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_10006AA44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "htmlString"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modificationDate"));
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

}

void sub_10006AC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006AC4C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folders"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectsPassingTest:", &stru_100551AA8));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "allObjects"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

BOOL sub_10006ACB8(id a1, id a2, BOOL *a3)
{
  uint64_t v3;
  void *v4;
  char v5;

  v3 = ICProtocolCast(&OBJC_PROTOCOL___ICLegacyFolder, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = objc_msgSend(v4, "isTrashFolder") ^ 1;

  return v5;
}

void sub_10006ACF4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unint64_t v7;
  void *v8;
  id v9;
  void *v10;
  unsigned __int8 v11;
  id v12;
  NSObject *v13;
  id v14;

  v2 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1004064B4(v2, v3, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationAccountObjectID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount ic_existingObjectWithID:context:](ICAccount, "ic_existingObjectWithID:context:", v5, *(_QWORD *)(a1 + 40)));

  if (v6)
  {
    if (objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count"))
    {
      v7 = 0;
      do
      {
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "objectAtIndexedSubscript:", v7));
        v9 = objc_msgSend(*(id *)(a1 + 32), "importLegacyFolder:toAccount:", v8, v6);

        ++v7;
      }
      while ((unint64_t)objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), "count") > v7);
    }
    v10 = *(void **)(a1 + 40);
    v14 = 0;
    v11 = objc_msgSend(v10, "save:", &v14);
    v12 = v14;
    if ((v11 & 1) == 0)
    {
      v13 = os_log_create("com.apple.notes", "Migration");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        sub_100406454();

    }
  }

}

void sub_10006B3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose((const void *)(v34 - 232), 8);
  _Block_object_dispose((const void *)(v34 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_10006B43C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "account"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "defaultFolder"));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "isEqual:", v3);

}

void sub_10006B4A8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "name"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "name"));
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parentFolder"));
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v11 = *(void **)(v10 + 40);
  *(_QWORD *)(v10 + 40) = v9;

  if ((objc_msgSend(*(id *)(a1 + 40), "renameFolders") & 1) != 0)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "name"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40)));
    v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ic_md5"));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

  }
  else
  {
    v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "ic_md5"));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
    v12 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;
  }

  v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "parentFolder"));
  if (v20)
  {
    v21 = (void *)v20;
    do
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "name"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "ic_md5"));
      v24 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), v23, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40)));
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      v26 = *(void **)(v25 + 40);
      *(_QWORD *)(v25 + 40) = v24;

      v27 = objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "parentFolder"));
      v21 = (void *)v27;
    }
    while (v27);
  }
}

void sub_10006B738(uint64_t a1)
{
  id *v1;
  void *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  NSObject *v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  id v10;
  id v11;

  v1 = (id *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v11 = *v1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v10 = 0;
  v4 = objc_msgSend(v2, "obtainPermanentIDsForObjects:error:", v3, &v10);
  v5 = v10;

  if ((v4 & 1) == 0)
  {
    v6 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_100406694(v1, (uint64_t)v5);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "objectID"));
  v8 = objc_msgSend(v7, "isTemporaryID");

  if (v8)
  {
    v9 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10040660C(v1, v9);

  }
}

void sub_10006B9A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  char isKindOfClass;
  void *v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;

  v7 = a2;
  if (!v7)
    goto LABEL_10;
  v20 = v7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fileWrapper"));

  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "fileWrapper"));
    v10 = objc_opt_class(ICLegacyAttachmentFileWrapper);
    isKindOfClass = objc_opt_isKindOfClass(v9, v10);

    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "fileWrapper"));
    v13 = v12;
    if ((isKindOfClass & 1) != 0)
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "attachmentIdentifier"));
      goto LABEL_7;
    }
    v15 = objc_opt_class(ICRemoteFileWrapper);
    v16 = objc_opt_isKindOfClass(v13, v15);

    if ((v16 & 1) != 0)
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "fileWrapper"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "remoteURL"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "absoluteString"));

LABEL_7:
      if (v14)
      {
LABEL_9:
        objc_msgSend(*(id *)(a1 + 32), "replaceCharactersInRange:withString:", a3, a4, v14);

        v7 = v20;
        goto LABEL_10;
      }
    }
  }
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "fileWrapper"));
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "regularFileContents"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "ic_md5"));

  v7 = v20;
  if (v14)
    goto LABEL_9;
LABEL_10:

}

void sub_10006BBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006BBD8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "guid"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == %@"), CFSTR("guid"), v2));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v5 = (id)objc_claimAutoreleasedReturnValue(+[NoteContext allVisibleNotesMatchingPredicate:context:](NoteContext, "allVisibleNotesMatchingPredicate:context:", v3, v4));

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (unint64_t)objc_msgSend(v5, "count") > 1;
}

void sub_10006BD8C(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

uint64_t sub_10006BDB4(_QWORD *a1, uint64_t a2)
{
  return objc_opt_class(*a1, a2);
}

NSDictionary *__cdecl sub_10006BDE0(id a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "dictionaryRepresentation"));

  return (NSDictionary *)v2;
}

id sub_10006BF6C()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1005DDD60;
  v7 = qword_1005DDD60;
  if (!qword_1005DDD60)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10006F0B4;
    v3[3] = &unk_100550C10;
    v3[4] = &v4;
    sub_10006F0B4((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10006C00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL sub_10006C100(id a1, CKRecordID *a2, BOOL *a3)
{
  return -[CKRecordID ic_isOwnedByCurrentUser](a2, "ic_isOwnedByCurrentUser", a3);
}

void sub_10006C1F0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10006C214(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  id *v8;
  id v9;
  void *v10;
  id *v11;
  void *v12;
  id v13;
  id *v14;
  _Unwind_Exception *v15;
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;

  v5 = a2;
  v6 = a3;
  if (!v6)
  {
    if (v5)
    {
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      v20[2] = sub_10006C470;
      v20[3] = &unk_100550338;
      v8 = &v22;
      objc_copyWeak(&v22, (id *)(a1 + 40));
      v21 = v5;
      performBlockOnMainThread(v20);

    }
    else
    {
      if (objc_msgSend(*(id *)(a1 + 32), "hasExceededQuota"))
      {
        v9 = objc_msgSend(sub_10006BF6C(), "shared");
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        v23 = 0;
        v24 = &v23;
        v25 = 0x2020000000;
        v11 = (id *)qword_1005DDD78;
        v26 = qword_1005DDD78;
        if (!qword_1005DDD78)
        {
          v12 = (void *)sub_10006F108();
          v11 = (id *)dlsym(v12, "ICQUIInAppMessageReasonUploadFailure");
          v24[3] = (uint64_t)v11;
          qword_1005DDD78 = (uint64_t)v11;
        }
        _Block_object_dispose(&v23, 8);
        if (!v11)
        {
          v15 = (_Unwind_Exception *)sub_100406714();
          _Block_object_dispose(&v23, 8);
          _Unwind_Resume(v15);
        }
        v13 = *v11;
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        v18[2] = sub_10006C4AC;
        v18[3] = &unk_100551BA0;
        objc_copyWeak(&v19, (id *)(a1 + 40));
        objc_msgSend(v10, "fetchMessageForReason:withCompletion:", v13, v18);

        v14 = &v19;
        goto LABEL_14;
      }
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_10006C5E4;
      v16[3] = &unk_10054FF58;
      v8 = &v17;
      objc_copyWeak(&v17, (id *)(a1 + 40));
      performBlockOnMainThread(v16);
    }
    v14 = v8;
LABEL_14:
    objc_destroyWeak(v14);
    goto LABEL_15;
  }
  v7 = os_log_create("com.apple.notes", "UI");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_100406734();

LABEL_15:
}

void sub_10006C470(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setSyncMessage:", v1);

}

void sub_10006C4AC(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_100406734();

  }
  else
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_10006C5A8;
    v8[3] = &unk_100550338;
    objc_copyWeak(&v10, (id *)(a1 + 32));
    v9 = v5;
    performBlockOnMainThread(v8);

    objc_destroyWeak(&v10);
  }

}

void sub_10006C594(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10006C5A8(uint64_t a1)
{
  uint64_t v1;
  id WeakRetained;

  v1 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setSyncMessage:", v1);

}

void sub_10006C5E4(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setSyncMessage:", 0);

}

void sub_10006C7B4(uint64_t a1)
{
  uint64_t *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  NSObject *v21;
  id v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[128];

  v2 = (uint64_t *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount accountWithIdentifier:context:](ICAccount, "accountWithIdentifier:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allChildObjects"));
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v24;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v24 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v9, "isDeletable"))
        {
          objc_msgSend(*(id *)(a1 + 48), "deleteCloudObjectIfFullyPushed:", v9);
        }
        else
        {
          objc_msgSend(v9, "clearServerRecords");
          objc_msgSend(v9, "setInCloud:", 0);
          objc_msgSend(v9, "updateChangeCountWithReason:", CFSTR("User deleted record zone"));
        }
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v23, v27, 16);
    }
    while (v6);
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "defaultFolder"));

  if (!v10)
  {
    v11 = os_log_create("com.apple.notes", "Cloud");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_100406818(a1 + 32, v11, v12, v13, v14, v15, v16, v17);

  }
  if (objc_msgSend(*(id *)(a1 + 40), "hasChanges"))
  {
    v18 = *(void **)(a1 + 40);
    v22 = 0;
    v19 = objc_msgSend(v18, "save:", &v22);
    v20 = v22;
    if ((v19 & 1) == 0)
    {
      v21 = os_log_create("com.apple.notes", "Cloud");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        sub_100406794(v2, (uint64_t)v20, v21);

    }
  }

}

void sub_10006C9D0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];
  _BYTE v25[128];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount accountWithIdentifier:context:](ICAccount, "accountWithIdentifier:context:", v1, v2));

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deviceMigrationStates"));
  v5 = objc_msgSend(v4, "copy");

  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v21;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v21 != v8)
          objc_enumerationMutation(v5);
        objc_msgSend(*(id *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v9), "deleteFromLocalDatabase");
        v9 = (char *)v9 + 1;
      }
      while (v7 != v9);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v7);
  }

  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "legacyTombstones", 0));
  v11 = objc_msgSend(v10, "copy");

  v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
  if (v12)
  {
    v13 = v12;
    v14 = *(_QWORD *)v17;
    do
    {
      v15 = 0;
      do
      {
        if (*(_QWORD *)v17 != v14)
          objc_enumerationMutation(v11);
        objc_msgSend(*(id *)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v15), "deleteFromLocalDatabase");
        v15 = (char *)v15 + 1;
      }
      while (v13 != v15);
      v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v16, v24, 16);
    }
    while (v13);
  }

  +[ICNoteContext setLegacyNotesDisabled:](ICNoteContext, "setLegacyNotesDisabled:", 0);
  objc_msgSend(v3, "setNeedsToBeFetchedFromCloud:", 1);

}

void sub_10006CE6C(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  unsigned __int8 v20;
  NSObject *v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t v31[4];
  uint64_t v32;
  uint8_t buf[4];
  void *v34;
  _BYTE v35[128];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount accountWithIdentifier:context:](ICAccount, "accountWithIdentifier:context:", v2, v3));

  v5 = *(void **)(a1 + 48);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext notesZoneID](ICCloudContext, "notesZoneID"));
  LODWORD(v5) = objc_msgSend(v5, "isEqual:", v6);

  if ((_DWORD)v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allChildObjects", v4));
  }
  else
  {
    v8 = *(void **)(a1 + 48);
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext metadataZoneID](ICCloudContext, "metadataZoneID", v4));
    LODWORD(v8) = objc_msgSend(v8, "isEqual:", v9);

    if ((_DWORD)v8)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "deviceMigrationStates"));
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "allObjects"));
      objc_msgSend(v7, "addObjectsFromArray:", v11);

      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "legacyTombstones"));
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "allObjects"));
      objc_msgSend(v7, "addObjectsFromArray:", v13);

    }
    else
    {
      v7 = 0;
    }
  }
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v14 = v7;
  v15 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
  if (v15)
  {
    v16 = v15;
    v17 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v16; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v17)
          objc_enumerationMutation(v14);
        v19 = *(void **)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        if (objc_msgSend(v19, "isSharedViaICloud")
          && (objc_msgSend(v19, "isOwnedByCurrentUser") & 1) == 0)
        {
          v24 = os_log_create("com.apple.notes", "Cloud");
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "shortLoggingDescription"));
            *(_DWORD *)buf = 138412290;
            v34 = v25;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Deleting shared-to-me record (%@) after zone reset", buf, 0xCu);

          }
          objc_msgSend(v19, "markForDeletion");
          objc_msgSend(v19, "deleteFromLocalDatabase");
        }
        else
        {
          objc_msgSend(v19, "setInCloud:", 0);
          objc_msgSend(v19, "setServerShare:", 0);
          objc_msgSend(v19, "clearServerRecords");
          v20 = objc_msgSend(v19, "markedForDeletion");
          v21 = os_log_create("com.apple.notes", "Cloud");
          v22 = v21;
          if ((v20 & 1) != 0)
          {
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "shortLoggingDescription"));
              *(_DWORD *)buf = 138412290;
              v34 = v23;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Not re-uploading deleted record (%@) after zone reset", buf, 0xCu);

            }
          }
          else
          {
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              sub_1004069B0(v31, v19, &v32, v22);

            if (objc_msgSend(v19, "wantsUserSpecificRecord"))
              objc_msgSend(v19, "updateUserSpecificChangeCountWithReason:", CFSTR("Did not find record zone"));
            objc_msgSend(v19, "updateChangeCountWithReason:", CFSTR("Did not find record zone"));
          }
        }
      }
      v16 = objc_msgSend(v14, "countByEnumeratingWithState:objects:count:", &v27, v35, 16);
    }
    while (v16);
  }

}

void sub_10006D3DC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  const char *v7;
  const char *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  NSObject *v14;
  _BOOL4 v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  const char *v21;
  const char *v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint8_t buf[4];
  void *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  _BYTE v39[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ownerName"));
  v3 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("zoneOwnerName == %@"), v2));

  v26 = (void *)v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudSyncingObject ic_objectsMatchingPredicate:context:](ICCloudSyncingObject, "ic_objectsMatchingPredicate:context:", v3, *(_QWORD *)(a1 + 40)));
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
  if (v5)
  {
    v6 = v5;
    v7 = "com.apple.notes";
    v8 = "Cloud";
    v28 = *(_QWORD *)v30;
    do
    {
      v9 = 0;
      v27 = v6;
      do
      {
        if (*(_QWORD *)v30 != v28)
          objc_enumerationMutation(v4);
        v10 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "recordID"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "zoneID"));
        v13 = objc_msgSend(v12, "isEqual:", *(_QWORD *)(a1 + 32));

        v14 = os_log_create(v7, v8);
        v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (v13)
        {
          if (v15)
          {
            v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "shortLoggingDescription"));
            v17 = *(void **)(a1 + 48);
            *(_DWORD *)buf = 138412546;
            v34 = v16;
            v35 = 2112;
            v36 = v17;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Deleting shared %@ for accountID %@", buf, 0x16u);

          }
          objc_msgSend(v10, "deleteFromLocalDatabase");
        }
        else
        {
          if (v15)
          {
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "shortLoggingDescription"));
            v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "recordID"));
            v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "zoneID"));
            v21 = v8;
            v22 = v7;
            v23 = v4;
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "ic_loggingDescription"));
            v25 = *(_QWORD *)(a1 + 48);
            *(_DWORD *)buf = 138412802;
            v34 = v18;
            v35 = 2112;
            v36 = v24;
            v37 = 2112;
            v38 = v25;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Not deleting shared %@ in wrong zone %@ for account ID %@", buf, 0x20u);

            v4 = v23;
            v7 = v22;
            v8 = v21;
            v6 = v27;

          }
        }
        v9 = (char *)v9 + 1;
      }
      while (v6 != v9);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v29, v39, 16);
    }
    while (v6);
  }
  objc_msgSend(*(id *)(a1 + 40), "ic_save");

}

void sub_10006D7B8(void **a1)
{
  void **v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 v8;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  void *v14;
  NSObject *v15;
  int v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;

  v2 = a1 + 4;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount accountWithIdentifier:context:](ICAccount, "accountWithIdentifier:context:", a1[4], a1[5]));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "recordID"));
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userRecordName"));

    if (v5)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userRecordName"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordName"));
      v8 = objc_msgSend(v6, "isEqualToString:", v7);

      if ((v8 & 1) != 0)
      {
LABEL_14:
        objc_msgSend(v3, "objectWasFetchedFromCloudWithRecord:accountID:", a1[6], a1[4]);
        goto LABEL_15;
      }
      v9 = os_log_create("com.apple.notes", "Cloud");
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordName"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userRecordName"));
        v12 = *v2;
        v16 = 138412802;
        v17 = v10;
        v18 = 2112;
        v19 = v11;
        v20 = 2112;
        v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "The cloud context fetched a user record ID (%@) different from our CloudKit account's user record ID (%@) for account ID %@", (uint8_t *)&v16, 0x20u);

      }
    }
    else
    {
      v15 = os_log_create("com.apple.notes", "Cloud");
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        sub_100406A24(v4);

      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "recordName"));
      objc_msgSend(v3, "setUserRecordName:", v9);
    }

    goto LABEL_14;
  }
  v13 = os_log_create("com.apple.notes", "Cloud");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *v2;
    v16 = 138412290;
    v17 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Cloud context fetched the user record, but we don't have a CloudKit account (account ID %@). Why not?", (uint8_t *)&v16, 0xCu);
  }

LABEL_15:
  objc_msgSend(a1[5], "ic_saveWithLogDescription:", CFSTR("Fetching user record"));

}

void sub_10006DC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10006DC20(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10006DC30(uint64_t a1)
{

}

void sub_10006DC38(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount allCloudKitAccountsInContext:](ICAccount, "allCloudKitAccountsInContext:", *(_QWORD *)(a1 + 32)));
  if (objc_msgSend(v2, "count"))
  {
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v3 = v2;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    if (v4)
    {
      v5 = v4;
      v6 = *(_QWORD *)v11;
      do
      {
        v7 = 0;
        do
        {
          if (*(_QWORD *)v11 != v6)
            objc_enumerationMutation(v3);
          v8 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)v7), "identifier", (_QWORD)v10));
          objc_msgSend(v8, "ic_addNonNilObject:", v9);

          v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
      }
      while (v5);
    }

  }
}

void sub_10006E0E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10006E104(uint64_t a1)
{
  id result;

  result = +[ICAccount isCloudKitAccountAvailable](ICAccount, "isCloudKitAccountAvailable");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_10006E138(id a1, CKRecord *a2, NSError *a3)
{
  CKRecord *v4;
  NSError *v5;
  void *v6;
  _BOOL4 v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  os_log_t v12;
  int v13;
  CKRecord *v14;

  v4 = a2;
  v5 = a3;
  v6 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", ICCloudSyncingObjectRecordKeyCryptoSalt));
  if (v6)
  {
    v7 = 1;
  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(-[CKRecord objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", ICCloudSyncingObjectRecordKeyCryptoIterationCount));
    v7 = v8 != 0;

  }
  v9 = os_log_create("com.apple.notes", "Cloud");
  v10 = v9;
  if (v5)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_100406B9C();

LABEL_11:
    v11 = os_log_create("com.apple.notes", "Cloud");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device has been upgraded and the user created a password-protected note on a different device. Deleting server records and change tokens, and performing a full sync.", (uint8_t *)&v13, 2u);
    }

    v12 = (os_log_t)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
    -[NSObject cancelEverythingWithCompletionHandler:](v12, "cancelEverythingWithCompletionHandler:", &stru_100551C28);
    goto LABEL_14;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v13 = 138412290;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Fetched user record when checking for re-sync: %@", (uint8_t *)&v13, 0xCu);
  }

  if (v7)
    goto LABEL_11;
  v12 = os_log_create("com.apple.notes", "Cloud");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    sub_100406B70();
LABEL_14:

}

void sub_10006E324(id a1)
{
  void *v1;
  void *v2;
  id v3;
  _QWORD v4[4];
  id v5;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "snapshotManagedObjectContext"));

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10006E3B4;
  v4[3] = &unk_100550110;
  v5 = v2;
  v3 = v2;
  objc_msgSend(v3, "performBlock:", v4);

}

void sub_10006E3B4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint8_t v6[16];

  v2 = os_log_create("com.apple.notes", "Cloud");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "clearing server records", v6, 2u);
  }

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  objc_msgSend(v3, "enumerateAllCloudObjectsInContext:batchSize:saveAfterBatch:usingBlock:", *(_QWORD *)(a1 + 32), 10, 1, &stru_100551C68);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  objc_msgSend(v4, "deleteAllServerChangeTokens");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  objc_msgSend(v5, "syncWithReason:completionHandler:", CFSTR("FixingPasswordProtectedNotes"), 0);

}

void sub_10006E49C(id a1, ICCloudObject *a2, BOOL *a3)
{
  ICCloudObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = a2;
  v4 = objc_opt_class(ICCloudSyncingObject);
  v5 = ICCheckedDynamicCast(v4, v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  objc_msgSend(v6, "clearServerRecords");
}

void sub_10006E7A0(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  id v15;

  v5 = a3;
  v6 = os_log_create("com.apple.notes", "Cloud");
  v7 = v6;
  if (v5)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 32);
      v10 = 138412802;
      v11 = v8;
      v12 = 1024;
      v13 = a2;
      v14 = 2112;
      v15 = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Error updating account bag for %@ authenticated=%d: %@", (uint8_t *)&v10, 0x1Cu);
    }
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    sub_100406C54(a1, v7, v9);
  }

}

void sub_10006EA34(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id obj;
  _QWORD v14[4];
  id v15;
  void *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == %@"), CFSTR("typeUTI"), ICAttachmentUTTypeGallery));
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentsMatchingPredicate:context:](ICAttachment, "attachmentsMatchingPredicate:context:"));
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v18;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v18 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v5);
        v7 = objc_autoreleasePoolPush();
        v8 = objc_opt_class(ICAttachmentGalleryModel);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "attachmentModel"));
        v10 = ICCheckedDynamicCast(v8, v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        v14[2] = sub_10006EC2C;
        v14[3] = &unk_100551CB8;
        v15 = *(id *)(a1 + 32);
        v16 = v6;
        objc_msgSend(v11, "enumerateSubAttachmentsWithBlock:", v14);

        objc_autoreleasePoolPop(v7);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    }
    while (v3);
  }

  objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

void sub_10006EC2C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id *v8;
  void *v9;
  NSObject *v10;
  _BOOL4 v11;

  v5 = a2;
  v6 = a3;
  if (v5
    || (v5 = (id)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentWithIdentifier:includeDeleted:context:](ICAttachment, "attachmentWithIdentifier:includeDeleted:context:", v6, 1, *(_QWORD *)(a1 + 32)))) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "parentAttachment"));
    v9 = *(void **)(a1 + 40);
    v8 = (id *)(a1 + 40);

    v10 = os_log_create("com.apple.notes", "Cloud");
    v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG);
    if (v7 == v9)
    {
      if (v11)
        sub_100406D18(v5, v10);

    }
    else
    {
      if (v11)
        sub_100406DA0(v5, v8);

      objc_msgSend(v5, "setNeedsToBeFetchedFromCloud:", 1);
    }

  }
}

id sub_10006EEA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateCloudContextState");
}

id sub_10006EEA8(uint64_t a1)
{
  NSObject *v2;

  v2 = os_log_create("com.apple.notes", "Cloud");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100406E60();

  return objc_msgSend(*(id *)(a1 + 32), "updateCloudContextState");
}

Class sub_10006F0B4(uint64_t a1)
{
  Class result;

  sub_10006F108();
  result = objc_getClass("ICQInAppMessaging");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1005DDD60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_100406E8C();
    return (Class)sub_10006F108();
  }
  return result;
}

uint64_t sub_10006F108()
{
  uint64_t v0;
  char *v1;
  char *v3;
  __int128 v4;
  uint64_t v5;

  v3 = 0;
  if (!qword_1005DDD68)
  {
    v4 = off_100551CD8;
    v5 = 0;
    qword_1005DDD68 = _sl_dlopen(&v4, &v3);
  }
  v0 = qword_1005DDD68;
  v1 = v3;
  if (!qword_1005DDD68)
  {
    v1 = (char *)abort_report_np("%s", v3);
    goto LABEL_7;
  }
  if (v3)
LABEL_7:
    free(v1);
  return v0;
}

void sub_10006F864(id a1)
{
  dispatch_queue_attr_t v1;
  dispatch_queue_t v2;
  void *v3;
  NSObject *v4;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v4 = objc_claimAutoreleasedReturnValue(v1);
  v2 = dispatch_queue_create("com.apple.notes.activevacuum", v4);
  v3 = (void *)qword_1005DDD80;
  qword_1005DDD80 = (uint64_t)v2;

}

void sub_10006F98C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  ICDatabaseVacuum *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "activeVacuum"));

  if (!v2)
  {
    v3 = os_log_create("com.apple.notes", "Vacuum");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_100406EB0();

    v4 = objc_alloc_init(ICDatabaseVacuum);
    objc_msgSend(*(id *)(a1 + 48), "setActiveVacuum:", v4);

  }
  v5 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "activeVacuum"));
  objc_msgSend(v6, "setPreVacuumHandler:", v5);

  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "activeVacuum"));
  objc_msgSend(v8, "setPostVacuumHandler:", v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "activeVacuum"));
  objc_msgSend(v9, "startDatabaseVacuumPolicy");

}

void sub_10006FBC8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  NSObject *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _QWORD v19[5];
  id v20;

  v2 = os_log_create("com.apple.notes", "Vacuum");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100406FD0();

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "lastVacuumDate");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dateByAddingTimeInterval:", 86400.0));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  v7 = objc_msgSend(v5, "ic_isEarlierThanDate:", v6);

  if (v7)
  {
    v8 = os_log_create("com.apple.notes", "Vacuum");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_100406FA4();

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dateByAddingTimeInterval:", 10.0));

    v5 = (void *)v10;
  }
  v11 = os_log_create("com.apple.notes", "Vacuum");
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    sub_100406F40((uint64_t)v5, v11, v12, v13, v14, v15, v16, v17);

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_10006FD78;
  v19[3] = &unk_10054FE80;
  v19[4] = *(_QWORD *)(a1 + 32);
  v20 = v5;
  v18 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v19);

}

void sub_10006FD78(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timer"));

  if (v2)
  {
    v3 = os_log_create("com.apple.notes", "Vacuum");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_100406FFC();

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timer"));
    objc_msgSend(v4, "invalidate");

  }
  v5 = objc_msgSend(objc_alloc((Class)NSTimer), "initWithFireDate:interval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32), "timerFired:", 0, 1, 86400.0);
  objc_msgSend(*(id *)(a1 + 32), "setTimer:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timer"));
  objc_msgSend(v6, "addTimer:forMode:", v7, NSDefaultRunLoopMode);

}

void sub_10006FED4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "timer"));
  objc_msgSend(v1, "invalidate");

}

id sub_10006FFA8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "vacuum");
}

void sub_100070104(uint64_t a1)
{
  void *v1;
  _QWORD v2[5];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100070170;
  v2[3] = &unk_10054FE80;
  v1 = *(void **)(a1 + 40);
  v2[4] = *(_QWORD *)(a1 + 32);
  v3 = v1;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v2);

}

void sub_100070170(uint64_t a1)
{
  void *v2;
  void (**v3)(id, _QWORD);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "postVacuumHandler"));

  if (v2)
  {
    v3 = (void (**)(id, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "postVacuumHandler"));
    v3[2](v3, *(_QWORD *)(a1 + 40));

  }
}

void sub_10007034C(uint64_t a1)
{
  unsigned int v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void (**v12)(_QWORD, _QWORD);

  v2 = objc_msgSend(*(id *)(a1 + 32), "ic_save");
  v3 = os_log_create("com.apple.notes", "Vacuum");
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      sub_1004070E4(a1, v4, v5, v6, v7, v8, v9, v10);
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    sub_10040714C(a1, v4);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "postVacuumHandler"));
  if (v11)
  {
    v12 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "postVacuumHandler"));
    v12[2](v12, *(_QWORD *)(a1 + 56));

  }
}

void sub_100070608(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  +[ICAttachment enumerateAttachmentsInContext:batchSize:visibleOnly:saveAfterBatch:usingBlock:](ICAttachment, "enumerateAttachmentsInContext:batchSize:visibleOnly:saveAfterBatch:usingBlock:", v2, 100, 0, 1, &stru_100551D58);

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  +[ICInlineAttachment enumerateInlineAttachmentsInContext:typeUTI:tokenContentIdentifier:batchSize:visibleOnly:saveAfterBatch:usingBlock:](ICInlineAttachment, "enumerateInlineAttachmentsInContext:typeUTI:tokenContentIdentifier:batchSize:visibleOnly:saveAfterBatch:usingBlock:", v3, 0, 0, 100, 0, 1, &stru_100551D98);

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  +[ICMedia enumerateMediaInContext:batchSize:saveAfterBatch:usingBlock:](ICMedia, "enumerateMediaInContext:batchSize:saveAfterBatch:usingBlock:", v4, 100, 1, &stru_100551DD8);

}

void sub_1000706F0(id a1, ICAttachment *a2, BOOL *a3)
{
  ICAttachment *v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(-[ICAttachment note](v3, "note"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  -[ICAttachment setAccount:](v3, "setAccount:", v4);

}

void sub_100070748(id a1, ICInlineAttachment *a2, BOOL *a3)
{
  ICInlineAttachment *v3;
  void *v4;
  id v5;

  v3 = a2;
  v5 = (id)objc_claimAutoreleasedReturnValue(-[ICInlineAttachment note](v3, "note"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
  -[ICInlineAttachment setAccount:](v3, "setAccount:", v4);

}

void sub_1000707A0(id a1, ICMedia *a2, BOOL *a3)
{
  ICMedia *v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(-[ICMedia attachment](v3, "attachment"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "note"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "account"));
  -[ICMedia setAccount:](v3, "setAccount:", v5);

}

uint64_t sub_100070810(uint64_t a1)
{
  NSObject *v2;

  if (a1 == -1)
  {
    v2 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
      sub_1004071C0(v2);

    return 1;
  }
  else if (a1)
  {
    return 2;
  }
  else
  {
    return 1;
  }
}

uint64_t sub_100070E08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_100070E18(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setDidPerformAction:", 1);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

uint64_t sub_100070E4C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setDidPerformAction:", 1);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

__CFString *sub_1000716B8()
{
  if (ICIsSandboxModeEnabled())
    return CFSTR("com.apple.mobilenotesdebug.appremoval");
  else
    return CFSTR("com.apple.mobilenotes.appremoval");
}

void sub_100071724(id a1)
{
  ICAppRemovalServiceClient *v1;
  void *v2;

  v1 = objc_alloc_init(ICAppRemovalServiceClient);
  v2 = (void *)qword_1005DDDA0;
  qword_1005DDDA0 = (uint64_t)v1;

}

void sub_10007190C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  int v6;
  id v7;

  v3 = a2;
  v4 = os_log_create("com.apple.notes", "Application");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Error reaching App Removal service: %@", (uint8_t *)&v6, 0xCu);
  }

  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);

}

void sub_1000719E0(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;

  v3 = a2;
  objc_msgSend(*(id *)(a1 + 32), "suspendConnectionIfNeeded");
  if (v3)
  {
    v4 = os_log_create("com.apple.notes", "Application");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100407200((uint64_t)v3, v4);

  }
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);

}

id sub_100071AD4(uint64_t a1)
{
  _QWORD *v2;
  id v3;
  __CFString *v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v2 = *(_QWORD **)(a1 + 32);
  if (!v2[1])
  {
    v3 = objc_alloc((Class)NSXPCConnection);
    v4 = sub_1000716B8();
    v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v6 = objc_msgSend(v3, "initWithServiceName:", v5);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 8);
    *(_QWORD *)(v7 + 8) = v6;

    v9 = _LSAppRemovalServiceXPCInterface();
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setRemoteObjectInterface:", v10);

LABEL_5:
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "resume");
    return objc_msgSend(*(id *)(a1 + 32), "setRequestCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "requestCount") + 1);
  }
  if (!objc_msgSend(v2, "requestCount"))
    goto LABEL_5;
  return objc_msgSend(*(id *)(a1 + 32), "setRequestCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "requestCount") + 1);
}

id sub_100071BF8(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "requestCount");
  if (result)
  {
    objc_msgSend(*(id *)(a1 + 32), "setRequestCount:", (char *)objc_msgSend(*(id *)(a1 + 32), "requestCount") - 1);
    result = objc_msgSend(*(id *)(a1 + 32), "requestCount");
    if (!result)
      return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "suspend");
  }
  return result;
}

void sub_100071EC8(uint64_t a1)
{
  ICDebugSpinner *v2;
  dispatch_queue_global_t global_queue;
  NSObject *v4;
  uint64_t v5;
  ICDebugSpinner *v6;
  _QWORD v7[4];
  ICDebugSpinner *v8;
  uint64_t v9;

  v2 = objc_alloc_init(ICDebugSpinner);
  -[ICDebugSpinner show](v2, "show");
  global_queue = dispatch_get_global_queue(2, 0);
  v4 = objc_claimAutoreleasedReturnValue(global_queue);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100071F74;
  v7[3] = &unk_10054FE80;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v2;
  v9 = v5;
  v6 = v2;
  dispatch_async(v4, v7);

}

void sub_100071F74(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  BOOL v5;
  id v6;
  os_log_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSString *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  double v18;
  void *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD block[4];
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  id v34;
  id v35;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICDatabaseStateHandler stateDictionary](ICDatabaseStateHandler, "stateDictionary"));
  v35 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v2, 200, 0, &v35));
  v4 = v35;
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
  {
    v14 = NSTemporaryDirectory();
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v15));

    v17 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend((id)v17, "timeIntervalSinceReferenceDate");
    v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("statedump-%ld"), (uint64_t)v18));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "URLByAppendingPathComponent:isDirectory:", v19, 0));

    v7 = (os_log_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "URLByAppendingPathExtension:", CFSTR("plist")));
    v34 = 0;
    LOBYTE(v17) = objc_msgSend(v3, "writeToURL:options:error:", v7, 0, &v34);
    v6 = v34;
    if ((v17 & 1) != 0)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000721BC;
      block[3] = &unk_100550020;
      v21 = *(id *)(a1 + 32);
      v22 = *(_QWORD *)(a1 + 40);
      v31 = v21;
      v32 = v22;
      v33 = v7;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

      v23 = v31;
    }
    else
    {
      v23 = os_log_create("com.apple.notes", "Internal");
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        sub_1004072DC((uint64_t)v6, v23, v24, v25, v26, v27, v28, v29);
    }

  }
  else
  {
    v6 = v4;
    v7 = os_log_create("com.apple.notes", "Internal");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_100407274((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);
  }

}

void sub_1000721BC(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[3];
  uint64_t v11;

  objc_msgSend(*(id *)(a1 + 32), "hide");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "presentingViewController"));

  if (v2)
  {
    v3 = objc_alloc((Class)UIActivityViewController);
    v11 = *(_QWORD *)(a1 + 48);
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
    v5 = objc_msgSend(v3, "initWithActivityItems:applicationActivities:", v4, 0);

    v10[0] = UIActivityTypeOpenInIBooks;
    v10[1] = ICActivityTypeShareToNote;
    v10[2] = UIActivityTypeSharePlay;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v10, 3));
    objc_msgSend(v5, "setExcludedActivityTypes:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "presentationSourceItem"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "popoverPresentationController"));
    objc_msgSend(v8, "setSourceItem:", v7);

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "presentingViewController"));
    objc_msgSend(v9, "presentViewController:animated:completion:", v5, 1, 0);

  }
}

void sub_10007232C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

id sub_10007292C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showAttachmentInspectorWithAttachment:", *(_QWORD *)(a1 + 40));
}

void sub_100072F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  _Block_object_dispose(&a53, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100072F9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100072FAC(uint64_t a1)
{

}

void sub_100072FB4(uint64_t a1)
{
  NSString *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v7 = (id)objc_claimAutoreleasedReturnValue(+[ICAccount allActiveAccountsInContext:](ICAccount, "allActiveAccountsInContext:", *(_QWORD *)(a1 + 32)));
  v2 = NSStringFromSelector("identifier");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "valueForKey:", v3));
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v6 = *(void **)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v4;

}

void sub_10007362C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100073648(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100073658(uint64_t a1)
{

}

intptr_t sub_100073660(uint64_t a1, void *a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  void *v6;

  if (!a3)
  {
    v4 = objc_msgSend(a2, "copy");
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100073D5C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  id v13;

  v3 = a2;
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordType"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:"));
  v5 = objc_alloc((Class)ICASCloudSyncableItemData);
  v6 = v5;
  if (v4)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "syncableDataType"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "count"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v8, "unsignedIntegerValue") + 1));
    v10 = objc_msgSend(v6, "initWithSyncableDataType:count:", v7, v9);

  }
  else
  {
    v10 = objc_msgSend(v5, "initWithSyncableDataType:count:", v13, &off_10057C2E0);
  }
  objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:", v10, v13);
  v11 = *(void **)(a1 + 40);
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordID"));

  objc_msgSend(v11, "addObject:", v12);
}

void sub_100074280(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordID"));
  objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, v4);

}

void sub_1000742D0(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  __CFString *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  __CFString *v23;
  id v24;

  v24 = a2;
  v5 = *(void **)(a1 + 32);
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v24));
  v8 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "recordType"));
  if (!v8)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "containsObject:", v24))
      v8 = (__CFString *)*(id *)(a1 + 48);
    else
      v8 = CFSTR("icna_record_type_unknown");
  }
  v9 = objc_msgSend(v6, "code");
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "domain"));

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%ld"), v10, v9));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@_%@"), v8, v11));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v12));
  v14 = objc_alloc((Class)ICASPartialCloudErrorItemData);
  if (v13)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "syncableDataType"));
    v22 = v10;
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "errorCode"));
    v23 = v8;
    v17 = a1;
    v18 = v7;
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "count"));
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", (char *)objc_msgSend(v19, "unsignedIntegerValue") + 1));
    v21 = objc_msgSend(v14, "initWithSyncableDataType:errorCode:count:errorString:", v15, v16, v20, v11);

    v7 = v18;
    a1 = v17;
    v8 = v23;

    v10 = v22;
  }
  else
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v9));
    v21 = objc_msgSend(v14, "initWithSyncableDataType:errorCode:count:errorString:", v8, v15, &off_10057C2E0, v11);
  }

  objc_msgSend(*(id *)(a1 + 56), "setObject:forKeyedSubscript:", v21, v12);
}

void sub_1000748CC(id a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = objc_alloc_init((Class)NSDateFormatter);
  v2 = (void *)qword_1005DDDC0;
  qword_1005DDDC0 = (uint64_t)v1;

  v3 = objc_msgSend(objc_alloc((Class)NSLocale), "initWithLocaleIdentifier:", CFSTR("en_US_POSIX"));
  objc_msgSend((id)qword_1005DDDC0, "setLocale:", v3);

  _objc_msgSend((id)qword_1005DDDC0, "setDateFormat:", CFSTR("yyyy-MM-dd'T'HH:mm:ssZ"));
}

void sub_100074C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100074C34(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  _QWORD v7[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modifiedAfterDate"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("modificationDate >= %@"), v2));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "relationshipKeyPathsForPrefetching"));
  v5 = objc_msgSend(*(id *)(a1 + 32), "batchSize");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100074D34;
  v7[3] = &unk_100551F00;
  v7[4] = *(_QWORD *)(a1 + 40);
  +[ICNote enumerateAllCloudObjectsInContext:predicate:sortDescriptors:relationshipKeyPathsForPrefetching:batchSize:saveAfterBatch:usingBlock:](ICNote, "enumerateAllCloudObjectsInContext:predicate:sortDescriptors:relationshipKeyPathsForPrefetching:batchSize:saveAfterBatch:usingBlock:", v3, v6, &__NSArray0__struct, v4, v5, 1, v7);

}

void sub_100074D34(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = a2;
  v4 = objc_opt_class(ICCloudSyncingObject);
  v5 = ICDynamicCast(v4, v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  objc_msgSend(v6, "setNeedsToBeFetchedFromCloud:", 1);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);

}

id sub_100075558(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount allAccountsInContext:](ICAccount, "allAccountsInContext:", *(_QWORD *)(a1 + 32), 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "setReplicaIDToBundleIdentifier:", 0);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  return objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

void sub_10007569C(id a1)
{
  ICQuickNoteSessionManager *v1;
  void *v2;

  v1 = objc_alloc_init(ICQuickNoteSessionManager);
  v2 = (void *)qword_1005DDDD0;
  qword_1005DDDD0 = (uint64_t)v1;

}

id sub_100077AEC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

id sub_100077CB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
}

id sub_100077CC0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  return objc_msgSend(*(id *)(a1 + 32), "setWindowScene:", 0);
}

void sub_100078094(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, 1, v2);

  }
}

id sub_1000782E4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  if (*(void **)(a1 + 32) != a2)
  {
    v3 = *(void **)(a1 + 40);
    v4 = a2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "folder"));
    objc_msgSend(v5, "setCustomNoteSortType:", v4);

    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "folder"));
    objc_msgSend(v6, "updateChangeCountWithReason:", CFSTR("Changed sort type"));

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "folder"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "managedObjectContext"));
    objc_msgSend(v8, "ic_save");

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "virtualSmartFolder"));
    objc_msgSend(v9, "setNoteSortType:", v4);

  }
  return objc_msgSend(*(id *)(a1 + 40), "performActivityWithCompletion:", *(_QWORD *)(a1 + 48));
}

void sub_100078924(uint64_t a1)
{
  uint64_t v2;
  void (**v3)(_QWORD, _QWORD);
  id v4;

  if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 56))
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sortType"));
  else
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folderNoteSortTypeByChangingOrder:"));
  v4 = (id)v2;
  v3 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "selectedSortTypeHandler"));
  ((void (**)(_QWORD, id))v3)[2](v3, v4);

}

void sub_100078AAC(id *a1)
{
  uint64_t v2;
  void (**v3)(_QWORD, _QWORD);
  id v4;

  if (objc_msgSend(a1[4], "direction") == a1[6])
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "sortType"));
  else
    v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "folderNoteSortTypeByChangingDirection"));
  v4 = (id)v2;
  v3 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "selectedSortTypeHandler"));
  ((void (**)(_QWORD, id))v3)[2](v3, v4);

}

void sub_100078ECC(uint64_t a1, int a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[4];
  id v5;
  id v6;

  if (a2)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100078F64;
    v4[3] = &unk_100551FA0;
    v2 = *(void **)(a1 + 40);
    v5 = *(id *)(a1 + 32);
    v6 = v2;
    objc_msgSend(v5, "authenticateIfNeededWithCompletion:", v4);

  }
  else
  {
    v3 = *(_QWORD *)(a1 + 40);
    if (v3)
      (*(void (**)(uint64_t, _QWORD))(v3 + 16))(v3, 0);
  }
}

uint64_t sub_100078F64(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((_DWORD)a2)
    objc_msgSend(*(id *)(a1 + 32), "deleteObjects");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_1000796BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_1000796E8(id a1, ICFolder *a2, unint64_t a3, BOOL *a4)
{
  return -[ICFolder isSmartFolder](a2, "isSmartFolder", a3, a4);
}

void sub_1000796F0(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  id v8;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v8 = WeakRetained;
  if (a2 == 2)
  {
    objc_msgSend(WeakRetained, "setDidAuthenticate:", 1);
    v5 = *(_QWORD *)(a1 + 32);
    if (v5)
    {
      v6 = *(void (**)(void))(v5 + 16);
LABEL_6:
      v6();
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (v7)
    {
      v6 = *(void (**)(void))(v7 + 16);
      goto LABEL_6;
    }
  }

}

void sub_10007989C(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100079908;
  v2[3] = &unk_100550110;
  v1 = *(void **)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  objc_msgSend(v1, "deleteModernFoldersIfNeeded:", v2);

}

id sub_100079908(uint64_t a1)
{
  if (!+[NSThread isMainThread](NSThread, "isMainThread"))
    +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "[NSThread isMainThread]", "-[ICDeleteDecisionController deleteObjects]_block_invoke_2", 1, 0, CFSTR("Unexpected call from background thread"));
  return objc_msgSend(*(id *)(a1 + 32), "endUndoGrouping");
}

void sub_10007A058(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectContext"));

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10007A11C;
  v6[3] = &unk_10054FE80;
  v5 = v3;
  v7 = v5;
  v8 = *(id *)(a1 + 32);
  objc_msgSend(v5, "performBlockAndWait:", v6);
  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(void))(v4 + 16))();

}

void sub_10007A11C(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "processPendingChanges");
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_objectsPassingTest:", &stru_100552028));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v2, "undoablyTrashOrDeleteNotes:", v3);

  objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

BOOL sub_10007A18C(id a1, ICNote *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  BOOL v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[ICNote managedObjectContext](a2, "managedObjectContext", a3, a4));
  v5 = v4 != 0;

  return v5;
}

void sub_10007A530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

void sub_10007A558(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD v5[5];

  v3 = a2;
  if (v3)
  {
    v4 = os_log_create("com.apple.notes", "Delete");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10040796C(a1, (uint64_t)v3, v4);

  }
  else
  {
    v4 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10007A644;
    v5[3] = &unk_100550110;
    v5[4] = *(_QWORD *)(a1 + 32);
    -[NSObject performBlockAndWait:](v4, "performBlockAndWait:", v5);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  --*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);

}

void sub_10007A644(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "parent"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedRootObject"));
  objc_msgSend(v2, "undoablyPersistDeleteEventForObject:fromParentObject:sharedRootObject:", v3, v4, v5);

  v6 = (id)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v6, "undoablyDeleteFolder:markNotesForDeletion:moveAction:actionName:", *(_QWORD *)(a1 + 32), 0, 0, 0);

}

uint64_t sub_10007A6F8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10007AC58(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "deleteDecision"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "modernNotes"));
  v3 = objc_msgSend(v2, "count");
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sender"));
  +[ICDeleteAlert showAlertForDeletingObjectsWithType:count:window:sender:completion:](ICDeleteAlert, "showAlertForDeletingObjectsWithType:count:window:sender:completion:", 14, v3, v4, v5, *(_QWORD *)(a1 + 40));

}

void sub_10007BD74(uint64_t a1, void *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = objc_msgSend(v6, "count") != 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, _BOOL8, void *))(v3 + 16))(v3, v4, v5);

  }
}

id sub_10007BF24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setTransitioning:", 0);
}

void sub_10007BFB0(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "activityStreamNavigationController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "activityStreamViewController"));
  objc_msgSend(v2, "updateContentLayout");

}

void sub_10007C0DC(id a1)
{
  void *v1;
  void *v2;
  const __CFString *v3;
  _UNKNOWN **v4;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v3 = CFSTR("ICNoteBrowseCollectionViewGalleryWideModeNumberOfColumnsKey");
  v4 = &off_10057C2F8;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1));
  objc_msgSend(v1, "registerDefaults:", v2);

}

id sub_10007C28C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id *v7;
  id WeakRetained;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v5 = a3;
  v6 = objc_opt_class(ICNoteSectionIdentifier);
  v7 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionIdentifierForIndex:", a2));
  v11 = ICDynamicCast(v6, v10);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  v13 = objc_loadWeakRetained(v7);
  if (v13 && (v14 = v13, v15 = objc_msgSend(v12, "sectionType"), v14, !v15))
  {
    v16 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", 0);
    objc_msgSend(v16, "setShowsSeparators:", 0);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor clearColor](UIColor, "clearColor"));
    objc_msgSend(v16, "setBackgroundColor:", v18);

    v17 = objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v16, v5));
  }
  else
  {
    v16 = objc_loadWeakRetained(v7);
    v17 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "notesSectionForSectionIndex:layoutEnvironment:", a2, v5));
  }
  v19 = (void *)v17;

  return v19;
}

id sub_10007CE2C(uint64_t a1)
{
  id v1;
  double leading;
  double bottom;
  double trailing;

  v1 = objc_msgSend(objc_alloc((Class)UIListSeparatorConfiguration), "initWithListAppearance:", *(_QWORD *)(a1 + 32));
  leading = NSDirectionalEdgeInsetsZero.leading;
  bottom = NSDirectionalEdgeInsetsZero.bottom;
  trailing = NSDirectionalEdgeInsetsZero.trailing;
  objc_msgSend(v1, "setTopSeparatorInsets:", NSDirectionalEdgeInsetsZero.top, leading, bottom, trailing);
  objc_msgSend(v1, "setBottomSeparatorInsets:", NSDirectionalEdgeInsetsZero.top, leading, bottom, trailing);
  return v1;
}

BOOL sub_10007D1EC(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a2;
  v5 = objc_opt_class(ICNoteSectionIdentifier);
  v6 = ICDynamicCast(v5, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  LOBYTE(v4) = objc_msgSend(v7, "sectionType") == 0;
  return (char)v4;
}

void sub_10007D524(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  id v13;
  uint8_t buf[4];
  void *v15;

  v2 = objc_alloc((Class)NSBatchUpdateRequest);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment entity](ICAttachment, "entity"));
  v4 = objc_msgSend(v2, "initWithEntity:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("typeUTI == %@"), ICAttachmentUTTypePaperDocumentScan));
  objc_msgSend(v4, "setPredicate:", v5);

  objc_msgSend(v4, "setPropertiesToUpdate:", &off_10057C788);
  objc_msgSend(v4, "setResultType:", 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  v13 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeRequest:error:", v4, &v13));
  v8 = v13;

  v9 = os_log_create("com.apple.notes", "LaunchTask");
  v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_100407A1C((uint64_t)v8, v10);
  }
  else
  {
    v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "result"));
      *(_DWORD *)buf = 138412290;
      v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Updated %@ paper document scan section types", buf, 0xCu);

    }
  }

}

BOOL sub_10007D7FC(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  return -[NSString hasPrefix:](a2, "hasPrefix:", CFSTR("PPTLaunch"), a4);
}

void sub_10007D80C(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URLContexts"));
  v3 = objc_msgSend(v2, "count");

  if (v3)
  {
    v4 = *(void **)(a1 + 40);
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URLContexts"));
    objc_msgSend(v4, "handleOpeningURLContexts:withScene:", v9, *(_QWORD *)(a1 + 48));
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortcutItem"));

    if (v5)
    {
      v6 = *(void **)(a1 + 56);
      v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortcutItem"));
      objc_msgSend(v6, "performActionForShortcutItem:", v9);
    }
    else
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitShareMetadata"));

      if (!v7)
        return;
      v8 = *(void **)(a1 + 40);
      v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudKitShareMetadata"));
      objc_msgSend(v8, "handleAcceptingCloudKitShareWithMetadata:withWindowScene:", v9, *(_QWORD *)(a1 + 48));
    }
  }

}

void sub_10007D908(uint64_t a1)
{
  _QWORD v1[4];
  id v2;

  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10007D968;
  v1[3] = &unk_100550110;
  v2 = *(id *)(a1 + 32);
  performBlockOnMainThread(v1);

}

void sub_10007D968(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[ICNAWindowSceneReportingManager sharedManager](ICNAWindowSceneReportingManager, "sharedManager"));
  objc_msgSend(v2, "windowSceneWillBegin:", *(_QWORD *)(a1 + 32));

}

void sub_10007DDA0(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = a2;
  v3 = os_log_create("com.apple.notes", "AudioTranscription");
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_100407ABC((uint64_t)v2, v4, v5, v6, v7, v8, v9, v10);
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    sub_100407A90();
  }

}

void sub_10007E810(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  id v23;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
  v3 = objc_msgSend(v2, "isEqual:", CFSTR("TUUserActivityCreateCallRecording"));

  if (v3)
  {
    v4 = objc_opt_class(NSUUID);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("uniqueProxyIdentifier")));
    v7 = ICDynamicCast(v4, v6);
    v23 = (id)objc_claimAutoreleasedReturnValue(v7);

    v8 = objc_opt_class(NSUUID);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("recordingRequestUUID")));
    v11 = ICDynamicCast(v8, v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

    if (v23)
    {
      if (v12)
        +[ICCallNoteCoordinator createNewCallNoteWithNoteID:recordingID:context:](ICCallNoteCoordinator, "createNewCallNoteWithNoteID:recordingID:context:", v23, v12, *(_QWORD *)(a1 + 40));
    }
  }
  else
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    v14 = objc_msgSend(v13, "isEqual:", CFSTR("TUUserActivityFinishedCallRecording"));

    if (!v14)
      return;
    v15 = objc_opt_class(NSUUID);
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("uniqueProxyIdentifier")));
    v18 = ICDynamicCast(v15, v17);
    v23 = (id)objc_claimAutoreleasedReturnValue(v18);

    v19 = objc_opt_class(NSUUID);
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userInfo"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectForKeyedSubscript:", CFSTR("recordingRequestUUID")));
    v22 = ICDynamicCast(v19, v21);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v22);

    if (v23 && v12)
      +[ICCallNoteCoordinator callRecordingEndedWithNoteID:recordingID:context:](ICCallNoteCoordinator, "callRecordingEndedWithNoteID:recordingID:context:", v23, v12, *(_QWORD *)(a1 + 40));
  }

}

void sub_10007F8F8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD block[4];
  id v8;
  id v9;
  id v10;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10007F9B4;
  block[3] = &unk_100550020;
  v8 = a2;
  v9 = a3;
  v10 = *(id *)(a1 + 32);
  v5 = v9;
  v6 = v8;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_10007F9B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "window"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rootViewController"));
  +[UIAlertController ic_showAlertWithTitle:message:viewController:](UIAlertController, "ic_showAlertWithTitle:message:viewController:", v1, v2, v3);

}

void sub_10007FA20(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  v3 = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10007FAB0;
  v5[3] = &unk_10054FE80;
  v6 = *(id *)(a1 + 32);
  v7 = v3;
  v4 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v5);

}

void sub_10007FAB0(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchController"));
  if (v2)
    objc_msgSend(v2, "cancelSearch");
  objc_msgSend(*(id *)(a1 + 32), "selectObjectWithObjectID:", *(_QWORD *)(a1 + 40));

}

void sub_10007FAFC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  id v9;
  id location;

  v3 = a2;
  objc_initWeak(&location, *(id *)(a1 + 32));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10007FBF8;
  v5[3] = &unk_1005521E0;
  v4 = *(void **)(a1 + 40);
  v6 = *(id *)(a1 + 48);
  objc_copyWeak(&v9, &location);
  v7 = *(id *)(a1 + 56);
  v8 = *(id *)(a1 + 64);
  objc_msgSend(v4, "showStartupWithForceWelcomeScreen:completion:", 1, v5);

  objc_destroyWeak(&v9);
  objc_destroyWeak(&location);

}

void sub_10007FBDC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_10007FBF8(uint64_t a1)
{
  id WeakRetained;

  if (+[ICAccount hasActiveCloudKitAccountInContext:](ICAccount, "hasActiveCloudKitAccountInContext:", *(_QWORD *)(a1 + 32)))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "windowScene:userDidAcceptCloudKitShareWithMetadata:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
}

void sub_1000808B8(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id WeakRetained;
  void *v10;
  id v11;

  v3 = a2;
  v4 = objc_opt_class(UIWindowScene);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "object"));

  v6 = ICDynamicCast(v4, v5);
  v11 = (id)objc_claimAutoreleasedReturnValue(v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "session"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "role"));
  LODWORD(v5) = objc_msgSend(v8, "isEqualToString:", _UIWindowSceneSessionTypeCoverSheet);

  if ((_DWORD)v5)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "icWindow"));
    objc_msgSend(v10, "makeKeyWindow");

  }
}

void sub_100080F44(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  const char *v14;
  _UNKNOWN **v15;
  void *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  const char *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  void *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint8_t buf[4];
  void *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  _BYTE v44[128];
  _QWORD v45[3];

  v2 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100407DF8(v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("folder.folderType != %d"), 1));
  v45[0] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("markedForDeletion == YES")));
  v45[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("needsInitialFetchFromCloud == NO")));
  v45[2] = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v45, 3));
  v7 = objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v6));

  v28 = (void *)v7;
  v29 = a1;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote notesMatchingPredicate:context:](ICNote, "notesMatchingPredicate:context:", v7, *(_QWORD *)(a1 + 32)));
  v9 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    sub_100407D70(v8, v9);

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v27 = v8;
  v10 = objc_msgSend(v8, "copy");
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v35;
    v14 = "com.apple.notes";
    v15 = ICNoteEditorBaseViewController_ptr;
    v30 = v10;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v35 != v13)
          objc_enumerationMutation(v10);
        v17 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v16);
        v18 = os_log_create(v14, "LaunchTask");
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "ic_loggingDescription"));
          v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "folder"));
          v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "account"));
          v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "trashFolder"));
          v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "identifier"));
          v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "folder"));
          v25 = v14;
          v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "account"));
          *(_DWORD *)buf = 138412802;
          v39 = v22;
          v40 = 2112;
          v41 = v23;
          v42 = 2112;
          v43 = v26;
          _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "Moving deleted note %@ to the trash %@ in account %@", buf, 0x20u);

          v14 = v25;
          v15 = ICNoteEditorBaseViewController_ptr;

          v10 = v30;
        }

        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "account"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "trashFolder"));
        objc_msgSend(v17, "setFolder:", v20);

        v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15[117], "now"));
        objc_msgSend(v17, "setFolderModificationDate:", v21);

        objc_msgSend(v17, "updateChangeCountWithReason:", CFSTR("Moved to trash"));
        v16 = (char *)v16 + 1;
      }
      while (v12 != v16);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v34, v44, 16);
    }
    while (v12);
  }

  objc_msgSend(*(id *)(v29 + 32), "ic_save");
}

void sub_1000817C8(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned __int8 v15;
  NSObject *v16;
  void *v17;
  void *v18;
  id obj;
  _QWORD v20[4];
  id v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint8_t v26[4];
  uint64_t v27;
  uint8_t buf[4];
  void *v29;
  _BYTE v30[128];

  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "accountsNeedingServerUpgrade"));
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v23;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v23 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v22 + 1) + 8 * (_QWORD)v5);
        v7 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ic_loggingIdentifier"));
          *(_DWORD *)buf = 138412290;
          v29 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Starting tasks for account: %@", buf, 0xCu);

        }
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "serverSideUpdateTaskLastAttemptedBuild"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentBuild"));
        v11 = objc_msgSend(v9, "isEqualToString:", v10);

        if ((v11 & 1) == 0)
        {
          objc_msgSend(v6, "setServerSideUpdateTaskFailureCount:", 0);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentBuild"));
          objc_msgSend(v6, "setServerSideUpdateTaskLastAttemptedBuild:", v12);

          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentVersion"));
          objc_msgSend(v6, "setServerSideUpdateTaskLastAttemptedVersion:", v13);

        }
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
        v15 = objc_msgSend(v14, "ic_saveWithLogDescription:", CFSTR("PreRunServerUpgradeTask"));

        if ((v15 & 1) == 0)
        {
          v16 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
            sub_100407E68(v26, v6, &v27, v16);

        }
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 40));
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "invernessClientForAccount:", v6));
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472;
        v20[2] = sub_100081ACC;
        v20[3] = &unk_100550110;
        v18 = *(void **)(a1 + 32);
        v21 = *(id *)(a1 + 40);
        objc_msgSend(v18, "runServerSideTaskWithClient:account:completion:", v17, v6, v20);

        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v22, v30, 16);
    }
    while (v3);
  }

}

void sub_100081ACC(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_100081AD4(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v2 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100407EDC(v2, v3, v4, v5, v6, v7, v8, v9);

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100081CEC(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "workerContext"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_100081E10;
  v16[3] = &unk_100552258;
  v17 = v7;
  v11 = a1[5];
  v12 = a1[4];
  v18 = v11;
  v19 = v12;
  v20 = v8;
  v21 = v9;
  v22 = a1[6];
  v23 = a1[7];
  v13 = v9;
  v14 = v8;
  v15 = v7;
  objc_msgSend(v10, "performBlock:", v16);

}

uint64_t (**sub_100081E10(uint64_t a1))(void)
{
  uint64_t *v2;
  uint64_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  const __CFString *v8;
  NSObject *v9;
  void *v10;
  uint64_t (**result)(void);
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  unsigned __int8 v24;
  void *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint8_t buf[4];
  void *v32;
  _BYTE v33[128];

  v2 = (uint64_t *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_1004081AC(a1, v2, v5);

    objc_msgSend(*(id *)(a1 + 40), "setServerSideUpdateTaskFailureCount:", (unsigned __int16)((unsigned __int16)objc_msgSend(*(id *)(a1 + 40), "serverSideUpdateTaskFailureCount") + 1));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "workerContext"));
    v7 = v6;
    v8 = CFSTR("ServerUpgradeTaskErrorSave");
    goto LABEL_5;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_1004080DC(a1, v5);

  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v12 = *(id *)(a1 + 64);
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v28;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v28 != v15)
          objc_enumerationMutation(v12);
        v17 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)v16);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "cloudContext", (_QWORD)v27));
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "workerContext"));
        objc_msgSend(v18, "ingestCloudKitRecord:forAccountID:forceMerge:context:", v17, v19, 1, v20);

        v16 = (char *)v16 + 1;
      }
      while (v14 != v16);
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v27, v33, 16);
    }
    while (v14);
  }

  objc_msgSend(*(id *)(a1 + 40), "setServerSideUpdateTaskContinuationToken:", *(_QWORD *)(a1 + 56));
  v21 = objc_msgSend(*(id *)(a1 + 56), "length");
  v22 = *(void **)(a1 + 48);
  if (!v21)
  {
    v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "currentBuild"));
    objc_msgSend(*(id *)(a1 + 40), "setServerSideUpdateTaskLastCompletedBuild:", v25);

    v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "currentVersion"));
    objc_msgSend(*(id *)(a1 + 40), "setServerSideUpdateTaskLastCompletedVersion:", v26);

    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "workerContext"));
    v7 = v6;
    v8 = CFSTR("ServerUpgradeTaskFinalSave");
LABEL_5:
    -[NSObject ic_saveWithLogDescription:](v6, "ic_saveWithLogDescription:", v8, (_QWORD)v27);
    goto LABEL_6;
  }
  v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "workerContext"));
  v24 = objc_msgSend(v23, "ic_saveWithLogDescription:", CFSTR("ServerUpgradeTaskIncrementalSave"));

  if ((v24 & 1) != 0)
    return (uint64_t (**)(void))objc_msgSend(*(id *)(a1 + 48), "runServerSideTaskWithClient:account:completion:", *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 80));
  v7 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    sub_100408044((id *)(a1 + 40), v7);

LABEL_6:
  v9 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingIdentifier"));
    *(_DWORD *)buf = 138412290;
    v32 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Finished tasks for account: %@", buf, 0xCu);

  }
  result = *(uint64_t (***)(void))(a1 + 80);
  if (result)
    return (uint64_t (**)(void))result[2]();
  return result;
}

void sub_100082244(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];

  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext", 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount allActiveCloudKitAccountsInContext:](ICAccount, "allActiveCloudKitAccountsInContext:", v2));

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v8, "setServerSideUpdateTaskLastAttemptedBuild:", 0);
        objc_msgSend(v8, "setServerSideUpdateTaskLastAttemptedVersion:", 0);
        objc_msgSend(v8, "setServerSideUpdateTaskLastCompletedBuild:", 0);
        objc_msgSend(v8, "setServerSideUpdateTaskLastCompletedVersion:", 0);
        objc_msgSend(v8, "setServerSideUpdateTaskContinuationToken:", 0);
        objc_msgSend(v8, "setServerSideUpdateTaskFailureCount:", 0);
      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  objc_msgSend(v9, "ic_saveWithLogDescription:", CFSTR("ResetServerUpgradeState"));

}

uint64_t sub_100082490(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  NSObject *v8;
  void *v9;
  const char *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  uint64_t v14;
  int v16;
  void *v17;

  v3 = a2;
  v4 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_100408260(v3, a1, v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "serverSideUpdateTaskLastCompletedBuild"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentBuild"));
  v7 = objc_msgSend(v5, "isEqualToString:", v6);

  if (v7)
  {
    v8 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_loggingIdentifier"));
      v16 = 138412290;
      v17 = v9;
      v10 = "Already ran tasks for account %@";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v10, (uint8_t *)&v16, 0xCu);

    }
  }
  else
  {
    if (objc_msgSend(v3, "serverSideUpdateTaskFailureCount") < *(unsigned __int16 *)(a1 + 40)
      || (v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "serverSideUpdateTaskLastAttemptedBuild")),
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentBuild")),
          v13 = objc_msgSend(v11, "isEqualToString:", v12),
          v12,
          v11,
          !v13))
    {
      v14 = 1;
      goto LABEL_13;
    }
    v8 = os_log_create("com.apple.notes", "ServerSideUpdateTask");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_loggingIdentifier"));
      v16 = 138412290;
      v17 = v9;
      v10 = "Reached failure limit for account %@";
      goto LABEL_10;
    }
  }

  v14 = 0;
LABEL_13:

  return v14;
}

void sub_1000829DC(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  id v13;
  uint8_t buf[4];
  void *v15;

  v2 = objc_alloc((Class)NSBatchUpdateRequest);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment entity](ICAttachment, "entity"));
  v4 = objc_msgSend(v2, "initWithEntity:", v3);

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("typeUTI == %@ || typeUTI == %@"), ICAttachmentUTTypeInlineDrawingV1, ICAttachmentUTTypeInlineDrawing));
  objc_msgSend(v4, "setPredicate:", v5);

  objc_msgSend(v4, "setPropertiesToUpdate:", &off_10057C7B0);
  objc_msgSend(v4, "setResultType:", 4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  v13 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "executeRequest:error:", v4, &v13));
  v8 = v13;

  v9 = os_log_create("com.apple.notes", "LaunchTask");
  v10 = v9;
  if (v8)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      sub_10040839C((uint64_t)v8, v10);
  }
  else
  {
    v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "result"));
      *(_DWORD *)buf = 138412290;
      v15 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Updated %@ drawing attachment section types", buf, 0xCu);

    }
  }

}

void sub_100082D80(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;

  v4 = a3;
  if (v4)
  {
    v5 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      sub_100408410(a1, (uint64_t)v4, v5);

  }
}

void sub_100082E98(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "syncMessage"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "actions"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "firstObject"));
  objc_msgSend(v3, "performAction");

}

void sub_100082F04(uint64_t a1)
{
  id *v1;
  void *v2;
  id v3;
  id WeakRetained;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "delegate"));
  v3 = objc_loadWeakRetained(v1);
  objc_msgSend(v2, "summaryViewLockNowPressed:", v3);

}

void sub_1000830EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100083110(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100083120(uint64_t a1)
{

}

uint64_t sub_100083128(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t v4;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "accessibilityLabel"));
  if (objc_msgSend(v3, "length"))
    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "addObject:", v3);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

  return v4;
}

void sub_100083304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100083328(uint64_t a1, void *a2)
{
  id v4;
  unint64_t v5;
  uint64_t v6;

  v4 = a2;
  v5 = (unint64_t)objc_msgSend(v4, "accessibilityTraits");
  if ((UIAccessibilityTraitButton & v5) != 0 || (UIAccessibilityTraitLink & v5) != 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  v6 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);

  return v6;
}

void sub_100083D9C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100083E78(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10008418C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000841AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000841BC(uint64_t a1)
{

}

void sub_1000841C4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  _BOOL4 v9;
  ICCloudSharingController *v10;
  uint64_t v11;
  void *v12;
  ICCloudSharingController *v13;
  id v14;
  uint64_t v15;
  ICCloudSharingController *v16;
  uint64_t v17;
  void *v18;
  void **v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, void *);
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  id v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "containerForAccountID:", v3));

  v5 = *(_QWORD *)(a1 + 40);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController serverShareCheckingParent:managedObjectContext:](ICCollaborationController, "serverShareCheckingParent:managedObjectContext:", v5, v6));

  v8 = os_log_create("com.apple.notes", "Collaboration");
  v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG);
  if (v7)
  {
    if (v9)
      sub_100408548((uint64_t)v7, (id *)(a1 + 40), v8);

    v10 = -[ICCloudSharingController initWithShare:container:]([ICCloudSharingController alloc], "initWithShare:container:", v7, v4);
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    objc_msgSend(*(id *)(a1 + 48), "trackCollaborationActionAddPeopleForObject:share:isInviting:", *(_QWORD *)(a1 + 40), v7, 1);
  }
  else
  {
    if (v9)
      sub_1004084C4((id *)(a1 + 40), v8);

    v13 = [ICCloudSharingController alloc];
    v19 = _NSConcreteStackBlock;
    v20 = 3221225472;
    v21 = sub_1000843CC;
    v22 = &unk_100552398;
    v23 = *(id *)(a1 + 32);
    v14 = *(id *)(a1 + 40);
    v15 = *(_QWORD *)(a1 + 48);
    v24 = v14;
    v25 = v15;
    v26 = v4;
    v16 = -[ICCloudSharingController initWithPreparationHandler:](v13, "initWithPreparationHandler:", &v19);
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), "setAvailablePermissions:", 15, v19, v20, v21, v22);

}

void sub_1000843CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;

  v4 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000844A0;
  v10[3] = &unk_100552370;
  v11 = *(id *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = *(void **)(a1 + 56);
  v12 = v6;
  v13 = v7;
  v15 = v4;
  v14 = v8;
  v9 = v4;
  objc_msgSend(v5, "performBlock:", v10);

}

void sub_1000844A0(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100084550;
  v5[3] = &unk_100552370;
  v2 = *(void **)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  v7 = v3;
  v8 = v4;
  v10 = *(id *)(a1 + 64);
  v9 = *(id *)(a1 + 56);
  objc_msgSend(v2, "performBlockInPersonaContext:", v5);

}

void sub_100084550(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;

  v2 = +[ICCollaborationController newShareForObject:](ICCollaborationController, "newShareForObject:", *(_QWORD *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100084640;
  v7[3] = &unk_100552348;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(id *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v8 = v5;
  v9 = v6;
  v10 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 64);
  v11 = *(id *)(a1 + 56);
  objc_msgSend(v3, "prepareShare:forObject:qualityOfService:completionHandler:", v2, v4, 25, v7);

}

void sub_100084640(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100084728;
  v8[3] = &unk_100552320;
  v9 = a2;
  v10 = a3;
  v5 = *(void **)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  v12 = *(id *)(a1 + 48);
  v14 = *(id *)(a1 + 64);
  v13 = *(id *)(a1 + 56);
  v6 = v10;
  v7 = v9;
  objc_msgSend(v5, "performBlockInPersonaContext:", v8);

}

uint64_t sub_100084728(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && !*(_QWORD *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "trackCollaborationActionFirstShareForObject:share:isInviting:", *(_QWORD *)(a1 + 56));
    v2 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend(*(id *)(a1 + 48), "setNewlyCreatedShare:", v2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
}

void sub_100084964(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  _QWORD v18[5];
  id v19;
  id v20;

  v2 = objc_opt_class(ICCloudSharingController);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSharingControllerForObject:", *(_QWORD *)(a1 + 40)));
  v4 = ICCheckedDynamicCast(v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100084B94;
  v18[3] = &unk_10054FEA8;
  v18[4] = *(_QWORD *)(a1 + 32);
  v19 = *(id *)(a1 + 48);
  v20 = *(id *)(a1 + 72);
  objc_msgSend(v5, "setDismissed:", v18);
  objc_msgSend(v5, "setDelegate:", *(_QWORD *)(a1 + 32));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "share"));
  objc_msgSend(v6, "updateRootRecordMapWithShare:", v7);

  if (+[UIDevice ic_isiPhone](UIDevice, "ic_isiPhone") && (v8 = *(_QWORD *)(a1 + 56)) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "popoverPresentationController"));
    objc_msgSend(v9, "setBarButtonItem:", v8);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "popoverPresentationController"));
    objc_msgSend(v10, "_setIgnoreBarButtonItemSiblings:", 1);

  }
  else
  {
    objc_msgSend(v5, "setModalPresentationStyle:", 2);
  }
  if ((objc_msgSend(*(id *)(a1 + 40), "isSharedRootObject") & 1) == 0)
  {
    v11 = objc_opt_class(ICFolder);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sharedRootObject"));
    v13 = ICDynamicCast(v11, v12);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "title"));
    objc_msgSend(v5, "_setRootFolderTitle:", v15);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "title"));
    objc_msgSend(v5, "_setFolderSubitemName:", v16);

    v17 = objc_alloc_init((Class)UIImage);
    objc_msgSend(v5, "_setHeaderSecondaryImage:", v17);

  }
  objc_msgSend(*(id *)(a1 + 64), "presentViewController:animated:completion:", v5, 1, *(_QWORD *)(a1 + 80));

}

uint64_t sub_100084B94(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newlyCreatedShare"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newlyCreatedShare"));
    objc_msgSend(v3, "ic_setNonNilObject:forNonNilKey:", v4, ICNotesCloudContextDidFetchShareNotificationShareKey);

    objc_msgSend(v3, "ic_setNonNilObject:forNonNilKey:", *(_QWORD *)(a1 + 40), ICNotesCloudContextDidFetchShareNotificationAccountIDKey);
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v6 = ICNotesCloudContextDidFetchShareNotification;
    v7 = *(_QWORD *)(a1 + 32);
    v8 = objc_msgSend(v3, "copy");
    objc_msgSend(v5, "postNotificationName:object:userInfo:", v6, v7, v8);

    objc_msgSend(*(id *)(a1 + 32), "setNewlyCreatedShare:", 0);
  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100084EA0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD block[4];
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100084F78;
  block[3] = &unk_1005523C0;
  v2 = *(id *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 48);
  v6 = v2;
  v7 = v3;
  v8 = v4;
  v11 = *(id *)(a1 + 72);
  v9 = *(id *)(a1 + 56);
  v10 = *(id *)(a1 + 64);
  v12 = *(id *)(a1 + 80);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100084F78(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100085040;
  v3[3] = &unk_1005523E8;
  v2 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  v4 = *(id *)(a1 + 48);
  v7 = *(id *)(a1 + 72);
  v5 = *(id *)(a1 + 56);
  v6 = *(id *)(a1 + 64);
  v8 = *(id *)(a1 + 80);
  objc_msgSend(v2, "performBlockInPersonaContext:", v3);

}

void sub_100085040(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void **v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  id v28;

  v2 = objc_opt_class(ICCloudSharingController);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cloudSharingControllerForObject:", *(_QWORD *)(a1 + 40)));
  v4 = ICCheckedDynamicCast(v2, v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v23 = _NSConcreteStackBlock;
  v24 = 3221225472;
  v25 = sub_100085318;
  v26 = &unk_100550160;
  v27 = *(_QWORD *)(a1 + 32);
  v28 = *(id *)(a1 + 64);
  objc_msgSend(v5, "setDismissed:", &v23);
  objc_msgSend(v5, "setDelegate:", *(_QWORD *)(a1 + 32), v23, v24, v25, v26, v27);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "share"));
  objc_msgSend(v6, "updateRootRecordMapWithShare:", v7);

  if (+[UIDevice ic_isiPhone](UIDevice, "ic_isiPhone") && (v8 = *(_QWORD *)(a1 + 48)) != 0)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "popoverPresentationController"));
    objc_msgSend(v9, "setBarButtonItem:", v8);

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "popoverPresentationController"));
    objc_msgSend(v10, "setPermittedArrowDirections:", 3);

    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "popoverPresentationController"));
    objc_msgSend(v11, "_setIgnoreBarButtonItemSiblings:", 1);

  }
  else
  {
    objc_msgSend(v5, "setModalPresentationStyle:", 2);
  }
  if (objc_msgSend(*(id *)(a1 + 40), "isSharedViaICloudFolder"))
  {
    v12 = objc_opt_class(ICFolder);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sharedRootObject"));
    v14 = ICDynamicCast(v12, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "title"));
    objc_msgSend(v5, "_setRootFolderTitle:", v16);

    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "title"));
    objc_msgSend(v5, "_setFolderSubitemName:", v17);

    v18 = objc_alloc_init((Class)UIImage);
    objc_msgSend(v5, "_setHeaderSecondaryImage:", v18);

  }
  objc_msgSend(*(id *)(a1 + 32), "populateParticipantDetailsForCloudSharingController:", v5);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "localizedStringForKey:value:table:", CFSTR("Hide Alerts"), &stru_1005704B8, 0));
  objc_msgSend(v5, "_setPrimaryAuxiliarySwitchTitle:", v20);

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "recordID"));
  objc_msgSend(v5, "_setPrimaryAuxiliarySwitchState:", +[ICShareNotifier shouldPreventNotificationsForRecordID:](ICShareNotifier, "shouldPreventNotificationsForRecordID:", v22));

  objc_msgSend(*(id *)(a1 + 56), "presentViewController:animated:completion:", v5, 1, *(_QWORD *)(a1 + 72));
}

uint64_t sub_100085318(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newlyCreatedShare"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "newlyCreatedShare"));
    objc_msgSend(v3, "ic_setNonNilObject:forNonNilKey:", v4, ICNotesCloudContextDidFetchShareNotificationShareKey);

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "account"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
    objc_msgSend(v3, "ic_setNonNilObject:forNonNilKey:", v7, ICNotesCloudContextDidFetchShareNotificationAccountIDKey);

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v9 = ICNotesCloudContextDidFetchShareNotification;
    v10 = *(_QWORD *)(a1 + 32);
    v11 = objc_msgSend(v3, "copy");
    objc_msgSend(v8, "postNotificationName:object:userInfo:", v9, v10, v11);

    objc_msgSend(*(id *)(a1 + 32), "setNewlyCreatedShare:", 0);
  }
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100085728(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_100085758(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const __CFString *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;

  v4 = objc_msgSend(a3, "code");
  if (v4 == (id)32)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "localizedStringForKey:value:table:", CFSTR("Invitations Not Sent"), &stru_1005704B8, 0));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v14 = *(void **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v10 = CFSTR("One or more accounts can’t accept this shared note.");
  }
  else
  {
    if (v4 != (id)29)
      return;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Maximum Invitations Reached"), &stru_1005704B8, 0));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
    v10 = CFSTR("You’ve invited the maximum number of people. Reduce the number of people you’re sharing with before adding more.");
  }
  v18 = v9;
  v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "localizedStringForKey:value:table:", v10, &stru_1005704B8, 0));
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v17 = *(void **)(v16 + 40);
  *(_QWORD *)(v16 + 40) = v15;

}

void sub_100085AD4(uint64_t a1, int a2)
{
  id v3;
  id v4;
  ICSendNoteActivityViewController *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  ICSendNoteActivityViewController *v11;
  _QWORD v12[4];
  ICSendNoteActivityViewController *v13;
  id v14;
  _QWORD *v15;
  _QWORD v16[5];
  id v17;
  id location;
  _QWORD v19[4];
  id v20;
  _QWORD *v21;
  _QWORD v22[5];
  id v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;

  if (a2)
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x3032000000;
    v27 = sub_1000841AC;
    v28 = sub_1000841BC;
    v3 = objc_alloc((Class)NSUserActivity);
    v29 = objc_msgSend(v3, "initWithActivityType:", ICNotesEditNoteUserActivityType);
    v4 = objc_msgSend(objc_alloc((Class)ICNoteUserActivityState), "initWithNote:", *(_QWORD *)(a1 + 32));
    ICNotesUpdateUserActivityForViewingNoteWithState(v25[5], v4);
    objc_msgSend((id)v25[5], "becomeCurrent");
    v5 = -[ICSendNoteActivityViewController initWithNote:presentingViewController:eventReporter:]([ICSendNoteActivityViewController alloc], "initWithNote:presentingViewController:eventReporter:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
    -[ICSendNoteActivityViewController setIsContentManaged:](v5, "setIsContentManaged:", objc_msgSend(v6, "isManaged"));

    v22[0] = 0;
    v22[1] = v22;
    v22[2] = 0x3032000000;
    v22[3] = sub_1000841AC;
    v22[4] = sub_1000841BC;
    v23 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_100085E10;
    v19[3] = &unk_100550660;
    v21 = v22;
    v20 = *(id *)(a1 + 32);
    objc_msgSend(v7, "performBlockAndWait:", v19);

    objc_initWeak(&location, v5);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100085E48;
    v16[3] = &unk_100552438;
    objc_copyWeak(&v17, &location);
    v16[4] = &v24;
    -[ICSendNoteActivityViewController setCompletionWithItemsHandler:](v5, "setCompletionWithItemsHandler:", v16);
    if (+[UIDevice ic_isVision](UIDevice, "ic_isVision"))
      v8 = -2;
    else
      v8 = 7;
    -[ICSendNoteActivityViewController setModalPresentationStyle:](v5, "setModalPresentationStyle:", v8);
    v9 = (void *)objc_claimAutoreleasedReturnValue(-[ICSendNoteActivityViewController popoverPresentationController](v5, "popoverPresentationController"));
    objc_msgSend(v9, "setSourceItem:", *(_QWORD *)(a1 + 56));
    objc_msgSend(v9, "setSourceView:", *(_QWORD *)(a1 + 64));
    objc_msgSend(v9, "setSourceRect:", *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104));
    objc_msgSend(v9, "setPermittedArrowDirections:", 3);
    objc_msgSend(v9, "_setIgnoreBarButtonItemSiblings:", 1);
    v10 = *(void **)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_100085F78;
    v12[3] = &unk_100552460;
    v15 = v22;
    v11 = v5;
    v13 = v11;
    v14 = *(id *)(a1 + 72);
    objc_msgSend(v10, "ic_replacePresentedViewControllerWithViewController:animated:completion:", v11, 1, v12);

    objc_destroyWeak(&v17);
    objc_destroyWeak(&location);

    _Block_object_dispose(v22, 8);
    _Block_object_dispose(&v24, 8);

  }
}

void sub_100085DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  id *v29;
  uint64_t v30;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose((const void *)(v30 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_100085E10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "serverShareCheckingParent"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100085E48(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id *v8;
  id v9;
  id v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  void *v15;
  id WeakRetained;

  v8 = (id *)(a1 + 40);
  v9 = a5;
  v10 = a2;
  WeakRetained = objc_loadWeakRetained(v8);
  if ((a3 & 1) == 0)
  {
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "note"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectID"));
    objc_msgSend(v11, "removeShareIfNeededWithOwnedObjectID:countParticipants:completionHandler:", v13, 1, 0);

  }
  objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), "invalidate");
  if ((objc_opt_respondsToSelector(WeakRetained, "isCollaborationSelected") & 1) != 0)
    v14 = objc_msgSend(WeakRetained, "isCollaborationSelected");
  else
    v14 = 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "note"));
  +[ICCollaborationController saveActivityType:isCollaborationSelected:error:completed:forNote:](ICCollaborationController, "saveActivityType:isCollaborationSelected:error:completed:forNote:", v10, v14, v9, a3, v15);

}

uint64_t sub_100085F78(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  +[ICCollaborationController trackShare:forNote:](ICCollaborationController, "trackShare:forNote:", v2, v3);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10008638C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  __int128 v6;
  id v7;
  _QWORD block[5];
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  __int128 v15;
  __int128 v16;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100086478;
  block[3] = &unk_1005524B0;
  v4 = *(void **)(a1 + 40);
  block[4] = *(_QWORD *)(a1 + 32);
  v9 = v4;
  v10 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 56);
  v5 = *(id *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 96);
  v15 = *(_OWORD *)(a1 + 80);
  v16 = v6;
  v12 = v5;
  v13 = v3;
  v14 = *(id *)(a1 + 72);
  v7 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_100086478(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "showFolderActivityViewControllerWithFolder:presentingViewController:sourceItem:sourceView:sourceRect:itemProvider:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96), *(double *)(a1 + 104), *(double *)(a1 + 112));
}

void sub_100086498(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = objc_alloc_init((Class)NSItemProvider);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
  objc_msgSend(v2, "registerShareForObject:itemProvider:generateThumbnails:", *(_QWORD *)(a1 + 32), v3, 1);

  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100086508(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  _QWORD v6[4];
  id v7;
  id v8;
  id v9;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000865C4;
  v6[3] = &unk_1005502E8;
  v7 = *(id *)(a1 + 32);
  v8 = v3;
  v9 = *(id *)(a1 + 40);
  v5 = v3;
  objc_msgSend(v4, "performBlock:", v6);

}

void sub_1000865C4(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[4];
  id v4;
  id v5;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10008665C;
  v3[3] = &unk_100552500;
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  +[ICDeleteDecisionController deleteSharesInFolder:completion:](ICDeleteDecisionController, "deleteSharesInFolder:completion:", v2, v3);

}

void sub_10008665C(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  _QWORD block[4];
  id v7;

  v3 = a2;
  if (v3)
  {
    v4 = os_log_create("com.apple.notes", "Collaboration");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100408684();

    v5 = *(_QWORD *)(a1 + 40);
    if (v5)
      (*(void (**)(void))(v5 + 16))();
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100086734;
    block[3] = &unk_10054FFA8;
    v7 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
}

uint64_t sub_100086734(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100086740(_QWORD *a1)
{
  void *v2;
  id v3;

  v3 = objc_alloc_init((Class)NSItemProvider);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
  objc_msgSend(v2, "registerShareForObject:itemProvider:generateThumbnails:sharePreparationHandler:", a1[4], v3, 1, a1[5]);

  (*(void (**)(void))(a1[6] + 16))();
}

void sub_100086B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100086B54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareTitle"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_100086B8C(uint64_t a1, uint64_t a2, char a3)
{
  void *v4;
  id v5;

  if ((a3 & 1) == 0)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectID"));
    objc_msgSend(v5, "removeShareIfNeededWithOwnedObjectID:countParticipants:completionHandler:", v4, 1, 0);

  }
}

void sub_100086DDC(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;

  v2 = os_log_create("com.apple.notes", "Collaboration");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1004086E4(a1, v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100086EB0;
  v5[3] = &unk_10054FFA8;
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(id *)(a1 + 40);
  objc_msgSend(v3, "fetchShareIfNecessaryForObject:completionHandler:", v4, v5);

}

void sub_100086EB0(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100086F18;
  block[3] = &unk_10054FFA8;
  v2 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

uint64_t sub_100086F18(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_100086F2C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v2[4];
  id v3;

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100086FA4;
  v2[3] = &unk_100550E40;
  v1 = *(_QWORD *)(a1 + 32);
  v3 = *(id *)(a1 + 40);
  +[ICDeleteDecisionController deleteSharesInFolder:completion:](ICDeleteDecisionController, "deleteSharesInFolder:completion:", v1, v2);

}

void sub_100086FA4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  _QWORD block[4];
  NSObject *v6;

  v3 = a2;
  if (v3)
  {
    v4 = os_log_create("com.apple.notes", "Collaboration");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_100408684();
  }
  else
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008705C;
    block[3] = &unk_10054FFA8;
    v6 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
    v4 = v6;
  }

}

uint64_t sub_10008705C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000878E0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v3 = v2;
  if (v2)
    v4 = v2;
  else
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folder"));
  v12 = v4;

  v5 = objc_opt_class(ICFolder);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sharedRootObject"));
  v7 = ICDynamicCast(v5, v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  if (v8)
  {
    v9 = *(void **)(a1 + 32);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "presentingViewController"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingBarButtonItem"));
    objc_msgSend(v9, "showCloudSharingControllerForFolder:presentingViewController:popoverBarButtonItem:presented:dismissed:", v8, v10, v11, 0, 0);

  }
}

void sub_100087D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_100087DA4(uint64_t a1)
{
  id v2;
  id WeakRetained;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  id v9;

  v2 = objc_alloc((Class)ICPaperStyleSheetCollectionViewController);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "note"));
  v5 = (int)objc_msgSend(v4, "paperStyleType");
  v6 = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = objc_msgSend(v2, "initWithInitialPaperStyleType:delegate:", v5, v6);

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ic_embedInNavigationControllerForModalPresentation"));
  v8 = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v8, "ic_replacePresentedViewControllerWithViewController:animated:completion:", v7, 1, 0);

}

id sub_1000884DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, BOOL, void *))(v4 + 16))(v4, a2 == 0, v5);

  }
  return objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", a2 == 0);
}

id sub_100088718()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1005DDDE8;
  v7 = qword_1005DDDE8;
  if (!qword_1005DDDE8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100088920;
    v3[3] = &unk_100550C10;
    v3[4] = &v4;
    sub_100088920((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000887B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_100088920(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1005DDDF0)
  {
    v5 = off_100552598;
    v6 = 0;
    qword_1005DDDF0 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1005DDDF0)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("LPLinkMetadata");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_100408840();
LABEL_8:
    free(v2);
  }
  qword_1005DDDE8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100089340(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "containsObject:", a2) ^ 1;
}

void sub_1000893D4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;

  v2 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_100408864();

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "workerManagedObjectContext"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICDeviceMigrationState deviceMigrationStatesByAccountIDInContext:](ICDeviceMigrationState, "deviceMigrationStatesByAccountIDInContext:", v4));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000894C0;
  v8[3] = &unk_100551510;
  v6 = *(_QWORD *)(a1 + 32);
  v9 = v5;
  v10 = v6;
  v7 = v5;
  performBlockOnMainThreadAndWait(v8);

}

id sub_1000894C0(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  NSObject *v11;
  id v12;
  NSObject *v13;
  void *v14;
  uint8_t v16;
  _BYTE v17[15];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  void *v23;
  _BYTE v24[128];

  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "allKeys"));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v7));
        v9 = objc_msgSend(v8, "shortValue");

        if (((_DWORD)v9 - 2) >= 5)
        {
          if (v9 >= 2)
          {
            if ((_DWORD)v9 == 7)
            {
              v13 = os_log_create("com.apple.notes", "Migration");
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
                sub_100408890(&v16, v17, v13);

            }
          }
          else
          {
            v11 = os_log_create("com.apple.notes", "Migration");
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
            {
              v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "stringFromMigrationState:", v9));
              *(_DWORD *)buf = 138412290;
              v23 = v14;
              _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Migration state is (%@). Starting migration controller", buf, 0xCu);

            }
            v12 = objc_msgSend(*(id *)(a1 + 40), "sharedController");
          }
        }
        else
        {
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "sharedController"));
          objc_msgSend(v10, "continueMigrationForICloudAccountID:", v7);

        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v18, v24, 16);
    }
    while (v4);
  }

  return +[ICMigrationController migrateLocalAccountIfNecessary](ICMigrationController, "migrateLocalAccountIfNecessary");
}

void sub_10008974C(id a1)
{
  ICMigrationController *v1;
  void *v2;

  v1 = objc_alloc_init(ICMigrationController);
  v2 = (void *)qword_1005DDDF8;
  qword_1005DDDF8 = (uint64_t)v1;

}

void sub_100089C44(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount localAccountInContext:](ICAccount, "localAccountInContext:", *(_QWORD *)(a1 + 32)));
  if (v1)
  {
    v2 = v1;
    +[ICMigrationUtilities updateLegacyAccountMigrationStateForModernAccount:](ICMigrationUtilities, "updateLegacyAccountMigrationStateForModernAccount:", v1);
    v1 = v2;
  }

}

void sub_10008AD0C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  v2 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1004089F8();

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10008ADB0;
  v4[3] = &unk_10054FE80;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  performBlockOnMainThreadAndWait(v4);

}

id sub_10008ADB0(uint64_t a1)
{
  id result;

  result = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "currentMigrationStateForAccountID:", *(_QWORD *)(a1 + 40));
  if (((_DWORD)result - 2) <= 2)
  {
    objc_msgSend(*(id *)(a1 + 32), "startRepeatingImportTimer");
    return _objc_msgSend(*(id *)(a1 + 32), "performFinalRefreshForICloudAccountID:", *(_QWORD *)(a1 + 40));
  }
  return result;
}

void sub_10008B198(uint64_t a1, int a2)
{
  NSObject *v4;
  NSObject *v5;
  uint8_t v6[16];

  v4 = os_log_create("com.apple.notes", "Migration");
  v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      sub_100408BA0();

    objc_msgSend(*(id *)(a1 + 32), "setDidMigrateLocalAccount:", 1);
    v5 = objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
    -[NSObject addOrDeleteLocalAccountIfNecessary](v5, "addOrDeleteLocalAccountIfNecessary");
  }
  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to import the local account", v6, 2u);
  }

}

void sub_10008B484(uint64_t a1, int a2)
{
  NSObject *v4;
  _BOOL4 v5;

  v4 = os_log_create("com.apple.notes", "Migration");
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (a2)
  {
    if (v5)
      sub_100408C24();

    objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "setCurrentMigrationState:forAccountID:", 6, *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "performFinalPushToCloudKitForAccountID:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (v5)
      sub_100408C50();

  }
}

void sub_10008B8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id *location, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a30);
  _Unwind_Resume(a1);
}

void sub_10008B910(id *a1)
{
  id WeakRetained;
  char v3;
  _QWORD v4[4];
  id v5;
  id v6;
  char v7;

  WeakRetained = objc_loadWeakRetained(a1 + 6);
  v3 = objc_msgSend(WeakRetained, "isCancelled") ^ 1;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10008B9B0;
  v4[3] = &unk_1005526A0;
  v6 = a1[5];
  v7 = v3;
  v5 = a1[4];
  performBlockOnMainThreadAndWait(v4);

}

void sub_10008B9B0(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  _BOOL4 v5;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, *(unsigned __int8 *)(a1 + 48));
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = os_log_create("com.apple.notes", "Migration");
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    if (v5)
      sub_100408D4C(a1);
  }
  else if (v5)
  {
    sub_100408CD4(a1);
  }

}

id sub_10008BB68(uint64_t a1)
{
  void *v2;
  _QWORD block[4];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v2, "waitUntilAllOperationsAreFinished");

  if (*(_QWORD *)(a1 + 40))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008BC1C;
    block[3] = &unk_10054FFA8;
    v5 = *(id *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

  }
  objc_msgSend(*(id *)(a1 + 32), "resetNotificationObservers");
  +[NSObject cancelPreviousPerformRequestsWithTarget:](NSObject, "cancelPreviousPerformRequestsWithTarget:", *(_QWORD *)(a1 + 32));
  return objc_msgSend(*(id *)(a1 + 32), "resetRetryCounts");
}

uint64_t sub_10008BC1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10008BC80(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "repeatingImportTimer"));

  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "repeatingImportTimer"));
    objc_msgSend(v3, "invalidate");

  }
  v4 = (id)objc_claimAutoreleasedReturnValue(+[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "startICloudImportOperationIfNecessary", 0, 1, 10.0));
  objc_msgSend(*(id *)(a1 + 32), "setRepeatingImportTimer:", v4);

}

void sub_10008C2DC(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  uint8_t buf[16];

  v4 = os_log_create("com.apple.notes", "Migration");
  v5 = v4;
  if (a2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Failed to perform final push to CloudKit during migration.", buf, 2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "retrySelector:accountID:", "performFinalPushToCloudKitForAccountID:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      sub_100408E7C();

    objc_msgSend(*(id *)(a1 + 32), "clearRetryCountForSelector:accountID:", "performFinalPushToCloudKitForAccountID:", *(_QWORD *)(a1 + 40));
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_10008C3EC;
    v7[3] = &unk_10054FE80;
    v6 = *(void **)(a1 + 40);
    v7[4] = *(_QWORD *)(a1 + 32);
    v8 = v6;
    performBlockOnMainThreadAndWait(v7);

  }
}

id sub_10008C3EC(uint64_t a1)
{
  return objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "setCurrentMigrationState:forAccountID:", 7, *(_QWORD *)(a1 + 40));
}

void sub_10008C6CC(id *a1)
{
  void *v2;
  unsigned __int8 v3;
  NSObject *v4;
  _BOOL4 v5;
  dispatch_queue_global_t global_queue;
  NSObject *v7;
  const char *v8;
  _QWORD block[4];
  NSObject *v10;
  id v11;
  id v12;
  uint8_t buf[16];

  if ((objc_msgSend(a1[4], "isValidObject") & 1) == 0)
  {
    v4 = os_log_create("com.apple.notes", "Migration");
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v8 = "Can't push migration state because CloudKit account isn't a valid object";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v8, buf, 2u);
    goto LABEL_14;
  }
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userRecordName"));

  if (!v2)
  {
    v4 = os_log_create("com.apple.notes", "Migration");
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v8 = "Can't push migration state because CloudKit account has no user record name";
    goto LABEL_13;
  }
  v3 = objc_msgSend(a1[5], "isValidObject");
  v4 = os_log_create("com.apple.notes", "Migration");
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if ((v3 & 1) == 0)
  {
    if (!v5)
      goto LABEL_14;
    *(_WORD *)buf = 0;
    v8 = "Can't push migration state because device migration state object is not valid";
    goto LABEL_13;
  }
  if (v5)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Pushing migration state", buf, 2u);
  }

  global_queue = dispatch_get_global_queue(2, 0);
  v7 = objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10008C8B0;
  block[3] = &unk_100550020;
  v10 = a1[4];
  v11 = a1[6];
  v12 = a1[5];
  dispatch_async(v7, block);

  v4 = v10;
LABEL_14:

}

void sub_10008C8B0(id *a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "managedObjectContext"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10008C95C;
  v3[3] = &unk_100550020;
  v4 = a1[5];
  v5 = a1[4];
  v6 = a1[6];
  objc_msgSend(v2, "performBlock:", v3);

}

void sub_10008C95C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[2];

  v1 = (void *)a1[4];
  v2 = a1[6];
  v4[0] = a1[5];
  v4[1] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v4, 2));
  objc_msgSend(v1, "pushCloudObjects:operationGroupName:completionHandler:", v3, CFSTR("SaveMigrationState"), &stru_1005526E8);

}

void sub_10008C9F0(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;
  NSObject *v4;
  uint8_t v5[16];

  v2 = a2;
  v3 = os_log_create("com.apple.notes", "Migration");
  v4 = v3;
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_100408EA8();
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished pushing migration state", v5, 2u);
  }

}

void sub_10008CA8C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  void *v8;
  _QWORD v9[4];
  id v10;
  id v11;
  id v12;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_100408F08();

  }
  else
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_10008CB98;
    v9[3] = &unk_10054FEA8;
    v10 = *(id *)(a1 + 32);
    v11 = v5;
    v12 = *(id *)(a1 + 40);
    objc_msgSend(v8, "performBlockAndWait:", v9);

  }
}

uint64_t sub_10008CB98(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  if ((objc_msgSend(*(id *)(a1 + 32), "isDeleted") & 1) == 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userRecordName"));
    if (v2)
    {
LABEL_5:

      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
    v3 = *(void **)(a1 + 40);
    if (v3)
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordID"));
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "recordName"));
      objc_msgSend(*(id *)(a1 + 32), "setUserRecordName:", v4);

      goto LABEL_5;
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_10008D1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008D1D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10008D1E4(uint64_t a1)
{

}

void sub_10008D1EC(uint64_t a1, int a2)
{
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  int v12;
  void *v13;

  v4 = a1 + 40;
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "ensureLegacyAccountIsValid:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = os_log_create("com.apple.notes", "Migration");
  v10 = v9;
  if (a2)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      sub_100408FB4(a1 + 40);

    objc_msgSend(*(id *)(a1 + 32), "disableLegacyAccount:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  }
  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 40), "objectIdentifier"));
      v12 = 138412290;
      v13 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Failed to copy notes from legacy account (%@) to iCloud account", (uint8_t *)&v12, 0xCu);

    }
  }
}

void sub_10008DB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008DB8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = *(_QWORD *)(a1 + 32);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "legacyAccountContext"));
  v3 = objc_claimAutoreleasedReturnValue(+[ICLegacyAccountUtilities legacyAccountForICloudACAccount:context:](ICLegacyAccountUtilities, "legacyAccountForICloudACAccount:context:", v2, v6));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10008DE88(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  NSObject *v7;

  v5 = a3;
  v6 = os_log_create("com.apple.notes", "Migration");
  v7 = v6;
  if (a2)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      sub_1004091A8(a1);
  }
  else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    sub_100409220(a1, (uint64_t)v5, v7);
  }

}

id sub_10008E8C8(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "handleDarwinNotificationName:");
}

id sub_10008E8D0()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1005DDE08;
  v7 = qword_1005DDE08;
  if (!qword_1005DDE08)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10008EEFC;
    v3[3] = &unk_100550C10;
    v3[4] = &v4;
    sub_10008EEFC((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10008E970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10008ED60(id a1)
{
  NSObject *v1;
  uint8_t v2[16];

  v1 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Migration took too long and our background task expired. This is not good.", v2, 2u);
  }

}

void sub_10008EDD0(uint64_t a1)
{
  NSObject *v2;
  void *v3;

  v2 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1004094E4();

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v3, "endBackgroundTask:", *(_QWORD *)(a1 + 32));

}

Class sub_10008EEFC(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1005DDE10)
  {
    v5 = off_1005527A0;
    v6 = 0;
    qword_1005DDE10 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1005DDE10)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("DADConnection");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_100409510();
LABEL_8:
    free(v2);
  }
  qword_1005DDE08 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10008EFF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

void sub_10008FE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10008FE80(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10008FE90(uint64_t a1)
{

}

void sub_10008FE98(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = objc_opt_class(ICNote);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteBrowseViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "modernViewContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectWithID:", *(_QWORD *)(a1 + 40)));
  v6 = ICCheckedDynamicCast(v2, v5);
  v10 = (id)objc_claimAutoreleasedReturnValue(v6);

  v7 = objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities appURLForNote:](ICAppURLUtilities, "appURLForNote:", v10));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_10008FF54(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v2 = objc_opt_class(NoteObject);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteBrowseViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "legacyViewContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectWithID:", *(_QWORD *)(a1 + 40)));
  v6 = ICCheckedDynamicCast(v2, v5);
  v10 = (id)objc_claimAutoreleasedReturnValue(v6);

  v7 = objc_claimAutoreleasedReturnValue(+[ICAppURLUtilities appURLForHTMLNote:](ICAppURLUtilities, "appURLForHTMLNote:", v10));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1000900A0(uint64_t a1)
{
  void *v2;
  _QWORD v3[4];
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100090128;
  v3[3] = &unk_10054FFA8;
  v4 = *(id *)(a1 + 32);
  objc_msgSend(v2, "cancelEverythingWithCompletionHandler:", v3);

}

void sub_100090128(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v2, "purgeEverything");

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "viewControllerManagers"));
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", &stru_1005527D8);

  +[ICCache purgeAllCaches](ICCache, "purgeAllCaches");
  +[ICLRUCache purgeAllCaches](ICLRUCache, "purgeAllCaches");
  v5 = *(void **)(a1 + 32);
  if (v5)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_100090248;
    v6[3] = &unk_10054FFA8;
    v7 = v5;
    performBlockOnMainThreadAndWait(v6);

  }
}

void sub_100090218(id a1, ICViewControllerManager *a2, unint64_t a3, BOOL *a4)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(-[ICViewControllerManager visibleViewsUndoManager](a2, "visibleViewsUndoManager", a3, a4));
  objc_msgSend(v4, "removeAllActions");

}

uint64_t sub_100090248(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100090364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009037C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v1, "deleteEverything");

}

void sub_1000903B0(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  id v10;
  __int128 v11;
  void *v12;

  v3 = *(void **)(a1 + 56);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext notesZoneID](ICCloudContext, "notesZoneID"));
  v12 = v5;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v12, 1));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "identifier"));

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000904E4;
  v8[3] = &unk_100552840;
  v11 = *(_OWORD *)(a1 + 48);
  v9 = *(id *)(a1 + 32);
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v3, "deleteZonesWithZoneIDs:accountID:completionHandler:", v6, v7, v8);

}

uint64_t (**sub_1000904E4(uint64_t a1))(void)
{
  id v2;
  unint64_t v3;
  uint64_t (**result)(void);
  void *v5;
  void *v6;

  v2 = *(id *)(a1 + 56);
  objc_sync_enter(v2);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  objc_sync_exit(v2);

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  result = (uint64_t (**)(void))objc_msgSend(*(id *)(a1 + 32), "count");
  if (v3 >= (unint64_t)result)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "viewControllerManagers"));
    objc_msgSend(v6, "enumerateObjectsUsingBlock:", &stru_100552818);

    +[ICCache purgeAllCaches](ICCache, "purgeAllCaches");
    +[ICLRUCache purgeAllCaches](ICLRUCache, "purgeAllCaches");
    result = *(uint64_t (***)(void))(a1 + 40);
    if (result)
      return (uint64_t (**)(void))result[2]();
  }
  return result;
}

void sub_1000905BC(id a1, ICViewControllerManager *a2, unint64_t a3, BOOL *a4)
{
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(-[ICViewControllerManager visibleViewsUndoManager](a2, "visibleViewsUndoManager", a3, a4));
  objc_msgSend(v4, "removeAllActions");

}

void sub_100090700(uint64_t a1)
{
  void *v2;
  id v3;
  __int128 v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  __int128 v9;

  v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000907BC;
  v5[3] = &unk_1005528E0;
  v6 = v2;
  v7 = *(id *)(a1 + 40);
  v8 = *(id *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 56);
  v3 = (id)v4;
  v9 = v4;
  objc_msgSend(v6, "cancelEverythingWithCompletionHandler:", v5);

}

void sub_1000907BC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  id v7;
  id v8;
  uint64_t v9;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100090878;
  v5[3] = &unk_1005528B8;
  v9 = *(_QWORD *)(a1 + 64);
  v6 = v2;
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  objc_msgSend(v6, "deleteRecordZonesWithZoneIDs:accountID:markZonesAsUserPurged:completionHandler:", v3, v4, 1, v5);

}

void sub_100090878(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  __int128 v8;
  _QWORD v9[4];
  __int128 v10;
  void *v11;

  if (a2)
    objc_msgSend(*(id *)(a1 + 56), "showAlertForError:title:", a2, CFSTR("Error deleting zone(s)"));
  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext notesZoneID](ICCloudContext, "notesZoneID"));
  v11 = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v6 = *(_QWORD *)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10009099C;
  v9[3] = &unk_100552890;
  v8 = *(_OWORD *)(a1 + 48);
  v7 = (id)v8;
  v10 = v8;
  objc_msgSend(v3, "fetchRecordZoneChangesForZoneIDs:accountID:reason:completionHandler:", v5, v6, CFSTR("DebugMenu-DeleteEverything"), v9);

}

void sub_10009099C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  _QWORD v8[4];
  id v9;

  v3 = a2;
  v4 = v3;
  v7 = v3;
  if (v3)
  {
    v5 = objc_msgSend(v3, "code");
    v4 = v7;
    if (v5 != (id)28)
    {
      objc_msgSend(*(id *)(a1 + 40), "showAlertForError:title:", v7, CFSTR("Error syncing after deleting zone(s)"));
      v4 = v7;
    }
  }
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_100090A4C;
    v8[3] = &unk_10054FFA8;
    v9 = v6;
    performBlockOnMainThreadAndWait(v8);

    v4 = v7;
  }

}

uint64_t sub_100090A4C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100090B50(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;

  v8 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 1));
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1005704B8, 0));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v2, 0, 0));
  objc_msgSend(v8, "addAction:", v3);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "delegate"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "window"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "rootViewController"));
  objc_msgSend(v7, "presentViewController:animated:completion:", v8, 1, 0);

}

void sub_100090ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100090EE4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  __int128 v29;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  +[ICMigrationController setCurrentMigrationState:forAccountID:](ICMigrationController, "setCurrentMigrationState:forAccountID:", 0, v4);
  objc_msgSend(v3, "setDidChooseToMigrate:", 0);
  objc_msgSend(v3, "setDidFinishMigration:", 0);
  objc_msgSend(v3, "setDidMigrateOnMac:", 0);
  objc_msgSend(v3, "updateChangeCountWithReason:", CFSTR("Reset migration"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccountUtilities sharedInstance](ICAccountUtilities, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountStore"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accountWithIdentifier:", v4));

  if (v7)
  {
    v8 = objc_msgSend(v3, "didChooseToMigrate");
    v9 = objc_msgSend(v3, "didFinishMigration");
    v10 = objc_msgSend(v3, "didMigrateOnMac");
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "accountStore"));
    +[ICMigrationUtilities saveDidChooseToMigrate:didFinishMigration:didMigrateOnMac:toACAccount:inStore:completionHandler:](ICMigrationUtilities, "saveDidChooseToMigrate:didFinishMigration:didMigrateOnMac:toACAccount:inStore:completionHandler:", v8, v9, v10, v7, v11, 0);

  }
  else
  {
    v12 = os_log_create("com.apple.notes", "Internal");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_100409574((uint64_t)v4, v12, v13, v14, v15, v16, v17, v18);

  }
  v19 = *(void **)(a1 + 72);
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "allZoneIDs"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_100091140;
  v23[3] = &unk_1005529E0;
  v24 = v4;
  v29 = *(_OWORD *)(a1 + 64);
  v25 = *(id *)(a1 + 32);
  v26 = *(id *)(a1 + 40);
  v27 = *(id *)(a1 + 48);
  v28 = *(id *)(a1 + 56);
  v22 = v4;
  objc_msgSend(v19, "deleteZonesWithZoneIDs:accountID:completionHandler:", v21, v22, v23);

}

void sub_100091140(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  __int128 v10;

  v2 = os_log_create("com.apple.notes", "Internal");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_1004095D8();

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100091260;
  v4[3] = &unk_1005529B8;
  v5 = *(id *)(a1 + 32);
  v10 = *(_OWORD *)(a1 + 72);
  v6 = *(id *)(a1 + 40);
  v7 = *(id *)(a1 + 48);
  v8 = *(id *)(a1 + 56);
  v9 = *(id *)(a1 + 64);
  objc_msgSend(v3, "syncWithReason:completionHandler:", CFSTR("DebugMenu-ResetMigration"), v4);

}

void sub_100091260(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned __int8 v5;
  NSObject *v6;
  NSObject *v7;
  id v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  id v15;
  _QWORD v16[4];
  NSObject *v17;
  uint64_t v18;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext errorsFromError:](ICCloudContext, "errorsFromError:", v3));
  v5 = objc_msgSend(v4, "ic_containsObjectPassingTest:", &stru_100552920);

  v6 = os_log_create("com.apple.notes", "Internal");
  v7 = v6;
  if (!v3 || (v5 & 1) != 0)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      sub_10040963C();
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      sub_1004096A0();

    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    v16[2] = sub_100091478;
    v16[3] = &unk_100551510;
    v18 = *(_QWORD *)(a1 + 80);
    v17 = v3;
    performBlockOnMainThreadAndWait(v16);
    v7 = v17;
  }

  v8 = *(id *)(a1 + 80);
  objc_sync_enter(v8);
  v9 = --*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  objc_sync_exit(v8);

  if (!v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10009148C;
    v11[3] = &unk_100552990;
    v12 = *(id *)(a1 + 48);
    v13 = *(id *)(a1 + 32);
    v14 = *(id *)(a1 + 56);
    v15 = *(id *)(a1 + 64);
    objc_msgSend(v10, "performBlockAndWait:", v11);

  }
}

BOOL sub_100091458(id a1, NSError *a2, unint64_t a3, BOOL *a4)
{
  return (id)-[NSError code](a2, "code", a3, a4) == (id)28;
}

id sub_100091478(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 40), "showAlertForError:title:", *(_QWORD *)(a1 + 32), CFSTR("Error syncing after deleting zones"));
}

void sub_10009148C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v2, "purgeEverything");

  +[ICMigrationController setDidMigrateLocalAccount:](ICMigrationController, "setDidMigrateLocalAccount:", 0);
  +[ICMigrationController setDidChooseToMigrateLocalAccount:](ICMigrationController, "setDidChooseToMigrateLocalAccount:", 0);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100091620;
  v10[3] = &unk_100552948;
  v3 = *(void **)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v3, "enumerateObjectsUsingBlock:", v10);
  performBlockOnMainThreadAndWait(&stru_100552968);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "managedObjectContext"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount localAccountInContext:](ICAccount, "localAccountInContext:", v5));

  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v7, "postNotificationName:object:", ICMigrationStateWillChangeNotification, 0);

    +[ICAccount deleteAccount:](ICAccount, "deleteAccount:", v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
    objc_msgSend(v8, "save");

    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v9, "postNotificationName:object:", ICMigrationStateDidChangeNotification, 0);

  }
  if (*(_QWORD *)(a1 + 48))
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();

}

void sub_100091620(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  NSObject *v11;

  v3 = a2;
  objc_msgSend(v3, "setDidChooseToMigrate:", 0);
  objc_msgSend(v3, "setDidFinishMigration:", 0);
  objc_msgSend(v3, "setDidMigrateOnMac:", 0);
  objc_msgSend(v3, "updateChangeCountWithReason:", CFSTR("Reset migration"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccountUtilities sharedInstance](ICAccountUtilities, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "accountStore"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "accountWithIdentifier:", *(_QWORD *)(a1 + 32)));

  if (v6)
  {
    v7 = objc_msgSend(v3, "didChooseToMigrate");
    v8 = objc_msgSend(v3, "didFinishMigration");
    v9 = objc_msgSend(v3, "didMigrateOnMac");
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "accountStore"));
    +[ICMigrationUtilities saveDidChooseToMigrate:didFinishMigration:didMigrateOnMac:toACAccount:inStore:completionHandler:](ICMigrationUtilities, "saveDidChooseToMigrate:didFinishMigration:didMigrateOnMac:toACAccount:inStore:completionHandler:", v7, v8, v9, v6, v10, 0);

  }
  else
  {
    v11 = os_log_create("com.apple.notes", "Internal");
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      sub_100409720();

  }
}

void sub_10009176C(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v1, "postNotificationName:object:", ICMigrationStateDidChangeNotification, 0);

}

void sub_100091860(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  objc_msgSend(v2, "enumerateAllCloudObjectsInContext:batchSize:saveAfterBatch:usingBlock:", *(_QWORD *)(a1 + 32), 10, 1, &stru_100552A28);

}

void sub_1000918B4(id a1, ICCloudObject *a2, BOOL *a3)
{
  ICCloudObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = a2;
  v4 = objc_opt_class(ICCloudSyncingObject);
  v5 = ICCheckedDynamicCast(v4, v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  if ((objc_msgSend(v6, "markedForDeletion") & 1) == 0)
    objc_msgSend(v6, "updateChangeCountWithReason:", CFSTR("Manually updated change count"));

}

void sub_10009195C(id a1, NSManagedObjectContext *a2)
{
  NSManagedObjectContext *v2;
  id v3;

  v2 = a2;
  v3 = (id)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
  objc_msgSend(v3, "enumerateAllCloudObjectsInContext:batchSize:saveAfterBatch:usingBlock:", v2, 10, 1, &stru_100552A88);

}

void sub_1000919BC(id a1, ICCloudObject *a2, BOOL *a3)
{
  ICCloudObject *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = a2;
  v4 = objc_opt_class(ICCloudSyncingObject);
  v5 = ICCheckedDynamicCast(v4, v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  objc_msgSend(v6, "setNeedsToBeFetchedFromCloud:", 1);
}

void sub_100091B38(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  id v24;
  uint8_t v25[128];
  uint8_t buf[4];
  void *v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFetchRequest fetchRequestWithEntityName:](NSFetchRequest, "fetchRequestWithEntityName:", ICNoteEntityName));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("account == nil")));
  objc_msgSend(v2, "setPredicate:", v3);

  v4 = *(void **)(a1 + 32);
  v24 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "executeFetchRequest:error:", v2, &v24));
  v6 = v24;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "Internal");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_100409784((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);

  }
  v14 = os_log_create("com.apple.notes", "Internal");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Deleting invalid notes: %@", buf, 0xCu);
  }

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v15 = v5;
  v16 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
  if (v16)
  {
    v17 = v16;
    v18 = *(_QWORD *)v21;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v21 != v18)
          objc_enumerationMutation(v15);
        objc_msgSend(*(id *)(a1 + 32), "deleteObject:", *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v19), (_QWORD)v20);
        v19 = (char *)v19 + 1;
      }
      while (v17 != v19);
      v17 = objc_msgSend(v15, "countByEnumeratingWithState:objects:count:", &v20, v25, 16);
    }
    while (v17);
  }

}

void sub_100091E5C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v13[4];

  v13[0] = 0;
  v13[1] = v13;
  v13[2] = 0x2020000000;
  v13[3] = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount allCloudKitAccountsInContext:](ICAccount, "allCloudKitAccountsInContext:", v2));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100091F78;
  v7[3] = &unk_100552AB0;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  v8 = v4;
  v11 = v13;
  v12 = v5;
  v6 = v3;
  v9 = v6;
  v10 = *(id *)(a1 + 40);
  objc_msgSend(v6, "enumerateObjectsUsingBlock:", v7);

  _Block_object_dispose(v13, 8);
}

void sub_100091F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100091F78(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *i;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  _QWORD v20[4];
  id v21;
  id v22;
  _QWORD v23[5];
  id v24;
  id v25;
  id v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[4];
  id v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  _BYTE v40[128];

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v34 = 0;
  v35 = &v34;
  v36 = 0x3032000000;
  v37 = sub_1000922E0;
  v38 = sub_1000922F0;
  v39 = 0;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1000922F8;
  v31[3] = &unk_100550660;
  v33 = &v34;
  v19 = v3;
  v32 = v19;
  objc_msgSend(v5, "performBlockAndWait:", v31);

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v7 = (id)v35[5];
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v8; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v9)
          objc_enumerationMutation(v7);
        v11 = *(_QWORD *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i);
        if ((objc_msgSend(v6, "containsObject:", v11) & 1) == 0)
        {
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 3221225472;
          v23[2] = sub_10009234C;
          v23[3] = &unk_100550098;
          v23[4] = v11;
          v24 = v4;
          v25 = *(id *)(a1 + 32);
          v26 = v6;
          objc_msgSend(v12, "performBlockAndWait:", v23);

        }
      }
      v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v27, v40, 16);
    }
    while (v8);
  }

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_100092694;
  v20[3] = &unk_10054FE80;
  v14 = v6;
  v21 = v14;
  v15 = v4;
  v22 = v15;
  objc_msgSend(v13, "performBlockAndWait:", v20);

  v16 = *(id *)(a1 + 64);
  objc_sync_enter(v16);
  ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  objc_sync_exit(v16);

  v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  if (v17 >= (unint64_t)objc_msgSend(*(id *)(a1 + 40), "count"))
  {
    v18 = *(_QWORD *)(a1 + 48);
    if (v18)
      (*(void (**)(void))(v18 + 16))();
  }

  _Block_object_dispose(&v34, 8);
}

void sub_1000922B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000922E0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000922F0(uint64_t a1)
{

}

void sub_1000922F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notes"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allObjects"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10009234C(id *a1)
{
  id *v1;
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *i;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  id v26;
  id v27;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _QWORD v34[2];

  v1 = a1 + 4;
  v26 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "legacyContentHashAtImport"));
  if (objc_msgSend(v26, "length"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "folder"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v1, "account"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trashFolder"));

    if (v2 != v4)
    {
      v5 = os_log_create("com.apple.notes", "Internal");
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        sub_1004097E8((uint64_t)a1, v1, v5);

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "textStorage"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "string"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ic_md5"));

      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "legacyContentHashAtImport"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("legacyContentHashAtImport == %@"), v9));
      v34[0] = v10;
      v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("SELF != %@"), a1[4]));
      v34[1] = v11;
      v12 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v34, 2));

      v27 = (id)v12;
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v12));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[6], "managedObjectContext"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote notesMatchingPredicate:context:](ICNote, "notesMatchingPredicate:context:", v13, v14));

      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v16 = v15;
      v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
      if (v17)
      {
        v18 = v17;
        v19 = *(_QWORD *)v30;
        do
        {
          for (i = 0; i != v18; i = (char *)i + 1)
          {
            if (*(_QWORD *)v30 != v19)
              objc_enumerationMutation(v16);
            v21 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
            v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "textStorage"));
            v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "string"));
            v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "ic_md5"));
            v25 = objc_msgSend(v24, "isEqualToString:", v8);

            if (v25)
              objc_msgSend(a1[7], "addObject:", v21);
          }
          v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v29, v33, 16);
        }
        while (v18);
      }

    }
  }
  else
  {

  }
}

void sub_100092694(uint64_t a1)
{
  id v1;
  id v2;
  __int128 v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  void *v25;
  _BYTE v26[128];

  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
  if (v2)
  {
    v4 = v2;
    v5 = *(_QWORD *)v19;
    *(_QWORD *)&v3 = 138412546;
    v16 = v3;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "folder", v16));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "account"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "trashFolder"));

        if (v8 != v10)
        {
          v11 = os_log_create("com.apple.notes", "Internal");
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            v12 = *(_QWORD *)(a1 + 40);
            v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "loggingDescription"));
            *(_DWORD *)buf = v16;
            v23 = v12;
            v24 = 2112;
            v25 = v13;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Deleting duplicate in account ID %@: %@", buf, 0x16u);

          }
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "account"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "trashFolder"));
          objc_msgSend(v7, "setFolder:", v15);

          objc_msgSend(v7, "updateChangeCountWithReason:", CFSTR("Deleted migrated duplicate"));
        }
      }
      v4 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v18, v26, 16);
    }
    while (v4);
  }

}

void sub_1000928E8(id a1)
{
  ICBrowseAttachmentsDragAndDropDelegate *v1;
  void *v2;

  v1 = objc_alloc_init(ICBrowseAttachmentsDragAndDropDelegate);
  v2 = (void *)qword_1005DDE18;
  qword_1005DDE18 = (uint64_t)v1;

}

id sub_100092D90(id a1, id a2)
{
  id v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char isKindOfClass;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = a2;
  v3 = objc_opt_class(ICNote);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v4 = v2;
  }
  else
  {
    v5 = objc_opt_class(ICSearchResult);
    if ((objc_opt_isKindOfClass(v2, v5) & 1) != 0
      && (v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "object")),
          v7 = objc_opt_class(ICNote),
          isKindOfClass = objc_opt_isKindOfClass(v6, v7),
          v6,
          (isKindOfClass & 1) != 0))
    {
      v9 = objc_opt_class(ICSearchResult);
      v10 = ICDynamicCast(v9, v2);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "object"));

    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

id sub_100092E64(id a1, id a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = a2;
  v4 = objc_opt_class(ICFolder, v3);
  v5 = ICDynamicCast(v4, v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return v6;
}

id sub_100092EAC(id a1, id a2)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v2 = a2;
  if (+[ICDeleteDecision isHTMLNote:](ICDeleteDecision, "isHTMLNote:", v2))
  {
    v3 = v2;
  }
  else
  {
    v4 = objc_opt_class(ICSearchResult);
    if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0
      && (v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "object")),
          v6 = +[ICDeleteDecision isHTMLNote:](ICDeleteDecision, "isHTMLNote:", v5),
          v5,
          v6))
    {
      v7 = objc_opt_class(ICSearchResult);
      v8 = ICDynamicCast(v7, v2);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "object"));

    }
    else
    {
      v3 = 0;
    }
  }

  return v3;
}

id sub_100092F74(id a1, id a2)
{
  id v2;
  void *v3;
  id v4;

  v2 = a2;
  if (+[ICDeleteDecision isHTMLFolder:](ICDeleteDecision, "isHTMLFolder:", v2))
    v3 = v2;
  else
    v3 = 0;
  v4 = v3;

  return v4;
}

const __CFString *sub_1000930B0(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xC)
    return CFSTR("ICDeleteDecisionAdditionalStepNone");
  else
    return off_100552C78[a1 - 1];
}

void sub_100093B84(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  id v7;

  v7 = a2;
  v3 = objc_opt_class(ICFolder);
  v4 = ICDynamicCast(v3, v7);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(v5, "markedForDeletion");

  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "removeObject:", v7);

}

void sub_100093BF4(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;

  v4 = a2;
  v3 = objc_opt_class(ICFolder);
  if ((objc_opt_isKindOfClass(v4, v3) & 1) != 0 && (objc_msgSend(v4, "isSharedViaICloud") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "addObject:", v4);

}

void sub_100093C58(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = objc_opt_class(ICFolder);
  v5 = ICDynamicCast(v4, v3);
  v8 = (id)objc_claimAutoreleasedReturnValue(v5);

  v6 = *(void **)(a1 + 32);
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICDeleteDecision decisionObjectsForFolder:](ICDeleteDecision, "decisionObjectsForFolder:", v8));
  objc_msgSend(v6, "addObjectsFromArray:", v7);

}

void sub_100093CE0(id *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  unsigned int v7;
  id *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  char isKindOfClass;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  id v33;

  v33 = a2;
  if ((objc_msgSend(v33, "isSharedViaICloud") & 1) == 0)
    objc_msgSend(a1[4], "setContainsUnsharedObjects:", 1);
  v3 = objc_opt_class(ICNote);
  v4 = ICDynamicCast(v3, v33);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "folder"));
  v7 = objc_msgSend(v6, "isTrashFolder");

  if (v7)
    objc_msgSend(a1[5], "addObject:", v33);
  if (objc_msgSend(v33, "isPasswordProtected"))
  {
    v8 = a1 + 6;
  }
  else if (objc_msgSend(v33, "isSharedViaICloud"))
  {
    if (objc_msgSend(v33, "isSharedRootObject"))
    {
      v10 = objc_msgSend(v33, "isOwnedByCurrentUser");
      v11 = objc_opt_class(ICNote);
      isKindOfClass = objc_opt_isKindOfClass(v33, v11);
      if (v10)
      {
        if ((isKindOfClass & 1) != 0)
        {
          v8 = a1 + 7;
        }
        else
        {
          v27 = objc_opt_class(ICFolder);
          v28 = objc_opt_isKindOfClass(v33, v27);
          v9 = v33;
          if ((v28 & 1) == 0)
            goto LABEL_8;
          v8 = a1 + 8;
        }
      }
      else if ((isKindOfClass & 1) != 0)
      {
        v8 = a1 + 9;
      }
      else
      {
        v29 = objc_opt_class(ICFolder);
        v30 = objc_opt_isKindOfClass(v33, v29);
        v9 = v33;
        if ((v30 & 1) == 0)
          goto LABEL_8;
        v8 = a1 + 10;
      }
    }
    else if (objc_msgSend(v33, "isSharedReadOnly"))
    {
      v8 = a1 + 11;
    }
    else
    {
      v22 = objc_opt_class(ICNote);
      if ((objc_opt_isKindOfClass(v33, v22) & 1) != 0)
      {
        v8 = a1 + 12;
      }
      else
      {
        v31 = objc_opt_class(ICFolder);
        v32 = objc_opt_isKindOfClass(v33, v31);
        v9 = v33;
        if ((v32 & 1) == 0)
          goto LABEL_8;
        v8 = a1 + 13;
      }
    }
  }
  else
  {
    v13 = objc_opt_class(ICFolder);
    v14 = ICDynamicCast(v13, v33);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    v16 = objc_msgSend(v15, "isSmartFolder");

    if (v16)
    {
      v8 = a1 + 14;
    }
    else
    {
      v17 = objc_opt_class(ICFolder);
      v18 = ICDynamicCast(v17, v33);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "visibleNotesIncludingChildFolders"));
      v21 = objc_msgSend(v20, "count");

      if (v21)
      {
        v8 = a1 + 15;
      }
      else
      {
        v23 = objc_opt_class(ICFolder);
        v24 = ICDynamicCast(v23, v33);
        v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        v26 = objc_msgSend(v25, "isTrashFolder");

        v9 = v33;
        if (!v26)
          goto LABEL_8;
        v8 = a1 + 16;
      }
    }
  }
  objc_msgSend(*v8, "addObject:", v33);
  v9 = v33;
LABEL_8:

}

BOOL sub_100093F40(id a1, ICFolder *a2, BOOL *a3)
{
  return -[ICFolder isDeletable](a2, "isDeletable", a3) ^ 1;
}

void sub_1000940C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000940E4(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v11 = a2;
  v3 = objc_opt_class(NoteStoreObject);
  v4 = ICDynamicCast(v3, v11);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = objc_msgSend(v5, "isDeleted");

  v7 = objc_opt_class(NoteObject);
  v8 = ICDynamicCast(v7, v11);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = v9;
  if (v9 && (objc_msgSend(v9, "isDeletedOrInTrash") & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "removeObject:", v11);

}

void sub_1000946E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100094708(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  _QWORD v3[4];
  id v4;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000947B0;
  v3[3] = &unk_10054FF58;
  objc_copyWeak(&v4, v1);
  objc_msgSend(WeakRetained, "dismissViewControllerAnimated:completion:", 1, v3);

  objc_destroyWeak(&v4);
}

void sub_10009479C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000947B0(uint64_t a1)
{
  void *v1;
  id v2;

  v2 = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "iCloudShareBarButtonItem"));
  objc_msgSend(v2, "createAndPresentCloudSharingControllerBySender:", v1);

}

id sub_1000949E8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setShowsActivityIndicator:", 1);
}

void sub_1000949F4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  _QWORD v15[4];
  id v16;
  uint64_t v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationUIController sharedInstance](ICCollaborationUIController, "sharedInstance"));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_windowScene"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "managedObjectContext"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_100094B1C;
  v15[3] = &unk_100552CE8;
  v7 = *(id *)(a1 + 40);
  v9 = *(void **)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v16 = v7;
  v17 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100094C70;
  v12[3] = &unk_100552D10;
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 48);
  v13 = v10;
  v14 = v11;
  objc_msgSend(v2, "fetchAndAcceptShareMetadataWithURL:windowScene:managedObjectContext:alertBlock:showObjectBlock:", v3, v4, v6, v15, v12);

}

void sub_100094B1C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v5 = a2;
  v6 = a3;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100094BDC;
  v10[3] = &unk_100550098;
  v11 = *(id *)(a1 + 32);
  v12 = v5;
  v7 = *(_QWORD *)(a1 + 40);
  v13 = v6;
  v14 = v7;
  v8 = v6;
  v9 = v5;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v10);

}

void sub_100094BDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;

  objc_msgSend(*(id *)(a1 + 32), "setShowsActivityIndicator:", 0);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "viewControllerManager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "window"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "rootViewController"));
  +[UIAlertController ic_showAlertWithTitle:message:viewController:](UIAlertController, "ic_showAlertWithTitle:message:viewController:", v2, v3, v5);

}

void sub_100094C70(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  _QWORD block[4];
  id v8;
  uint64_t v9;
  id v10;

  v3 = a2;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100094D08;
  block[3] = &unk_100550020;
  v4 = *(id *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v8 = v4;
  v9 = v5;
  v10 = v3;
  v6 = v3;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_100094D08(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "setShowsActivityIndicator:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewControllerManager"));
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchController"));

  if (v4)
    objc_msgSend(v4, "cancelSearch");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewControllerManager"));
  objc_msgSend(v3, "selectObjectWithObjectID:", *(_QWORD *)(a1 + 48));

}

id sub_100094E60(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isEditing");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", 0, 1);
  return result;
}

void sub_1000950A4(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

id sub_1000950C8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  void *v4;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = objc_msgSend(v2, "applicationState");

  if (v3)
  {
    v4 = 0;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "note"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "folder"));

  }
  return v4;
}

void sub_1000951E8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_10009520C(uint64_t a1, uint64_t a2)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (objc_msgSend(WeakRetained, "ic_isViewVisible")
    && objc_msgSend(WeakRetained, "isEditing"))
  {
    objc_msgSend(WeakRetained, "setCurrentTextStyle:", a2);
  }

}

void sub_100095304(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_100095328(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id WeakRetained;
  _QWORD v6[5];
  id v7;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000953B0;
  v6[3] = &unk_10054FE80;
  v6[4] = WeakRetained;
  v7 = v3;
  v4 = v3;
  performBlockOnMainThreadAndWait(v6);

}

void sub_1000953B0(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  if (objc_msgSend(*(id *)(a1 + 32), "ic_isViewVisible"))
  {
    if (objc_msgSend(*(id *)(a1 + 32), "isEditing"))
    {
      v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textView"));
      v3 = objc_msgSend(v2, "selectedRange");
      v5 = v4;

      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textStorage"));
      objc_msgSend(v6, "replaceCharactersInRange:withAttributedString:", v3, v5, *(_QWORD *)(a1 + 40));

      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
      objc_msgSend(v7, "updateModificationDateAndChangeCountAndSaveImmediately");

      v8 = objc_msgSend(*(id *)(a1 + 40), "length");
      v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textView"));
      objc_msgSend(v9, "setSelectedRange:", v3, v8);

    }
  }
}

id sub_100095970(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setRecentlyCreated:", 0);
}

uint64_t sub_100095AB8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100095AC8(uint64_t a1)
{

}

void sub_100095AD0(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "modernWorkerContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectID"));
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_existingObjectWithID:", v6));

  v7 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v10, "visibleNoteContainerChildrenCount")));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_100095B84(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NoteContext sharedContext](NoteContext, "sharedContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectContext"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteCollection"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectID"));
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_existingObjectWithID:", v5));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NoteContext sharedContext](NoteContext, "sharedContext"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "storesInCollection:", v11));
  v8 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v7, "count")));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

}

void sub_100095C74(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), a2), "legacyWorkerContext");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteCollection"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectID"));
  v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_existingObjectWithID:", v6));

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "predicateForNotes"));
  v9 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32), v8), "legacyWorkerContext");
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v11 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", +[NoteContext countOfVisibleNotesMatchingPredicate:context:](NoteContext, "countOfVisibleNotesMatchingPredicate:context:", v7, v10)));
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v13 = *(void **)(v12 + 40);
  *(_QWORD *)(v12 + 40) = v11;

}

void sub_10009633C(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)NoteContext), "initWithPrivateQueue");
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
  v2 = (void *)qword_1005DDE50;
  qword_1005DDE50 = v1;

}

void sub_100096384(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "unsupportedFolderButton"));
  objc_msgSend(WeakRetained, "onUnsupportedFolderInfoPressed:", v1);

}

NSCollectionLayoutSection *__cdecl sub_100096CAC(id a1, int64_t a2, NSCollectionLayoutEnvironment *a3)
{
  NSCollectionLayoutEnvironment *v3;
  id v4;
  void *v5;

  v3 = a3;
  v4 = objc_msgSend(objc_alloc((Class)UICollectionLayoutListConfiguration), "initWithAppearance:", 2);
  objc_msgSend(v4, "setHeaderMode:", 1);
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSCollectionLayoutSection sectionWithListConfiguration:layoutEnvironment:](NSCollectionLayoutSection, "sectionWithListConfiguration:layoutEnvironment:", v4, v3));

  return (NSCollectionLayoutSection *)v5;
}

uint64_t sub_100096F78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000971A8(_Unwind_Exception *a1)
{
  id *v1;
  id *v2;
  uint64_t v3;

  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v3 - 104));
  _Unwind_Resume(a1);
}

void sub_1000971E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  id to;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_copyWeak(&to, (id *)(a1 + 32));
  v10 = objc_loadWeakRetained(&to);
  v11 = objc_msgSend(v10, "shouldShowRecentItems");

  v12 = objc_loadWeakRetained(&to);
  v13 = v12;
  if (v11)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "recentItems"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", objc_msgSend(v8, "row")));
  }
  else
  {
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "filteredSections"));
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectAtIndexedSubscript:", objc_msgSend(v8, "section")));

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "items"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", objc_msgSend(v8, "row")));
    v13 = v17;
  }

  objc_msgSend(v7, "setItem:", v15);
  objc_destroyWeak(&to);

}

void sub_100097338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100097354(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend(a2, "dequeueConfiguredReusableCellWithRegistration:forIndexPath:item:", *(_QWORD *)(a1 + 32), a3, a4);
}

void sub_100097368(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  unsigned int v11;
  __CFString *v12;
  id v13;
  void *v14;
  void *v15;
  void **v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  id to;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_copyWeak(&to, (id *)(a1 + 32));
  v10 = objc_loadWeakRetained(&to);
  v11 = objc_msgSend(v10, "shouldShowRecentItems");

  if (v11)
  {
    v16 = _NSConcreteStackBlock;
    v17 = 3221225472;
    v18 = sub_1000974EC;
    v19 = &unk_10054FF58;
    objc_copyWeak(&v20, &to);
    objc_msgSend(v7, "setClearButtonHandler:", &v16);
    objc_destroyWeak(&v20);
    v12 = CFSTR("Recent");
  }
  else
  {
    v13 = objc_loadWeakRetained(&to);
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "filteredSections"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectAtIndexedSubscript:", objc_msgSend(v9, "section")));

    v12 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "title"));
    objc_msgSend(v7, "setClearButtonHandler:", 0);

  }
  objc_msgSend(v7, "setTitle:", v12, v16, v17, v18, v19);

  objc_destroyWeak(&to);
}

void sub_1000974C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000974EC(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "clearRecentItems");

}

id sub_100097518(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath:", *(_QWORD *)(a1 + 32));
}

NSString *__cdecl sub_1000976FC(id a1, ICDebuggingItem *a2)
{
  return -[ICDebuggingItem identifier](a2, "identifier");
}

NSString *__cdecl sub_100097704(id a1, ICDebuggingSection *a2)
{
  return -[ICDebuggingSection identifier](a2, "identifier");
}

void sub_10009770C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;

  v3 = a2;
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "items"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_map:", &stru_100552F68));
  objc_msgSend(*(id *)(a1 + 32), "appendItemsWithIdentifiers:intoSectionWithIdentifier:", v5, v6);

}

NSString *__cdecl sub_100097794(id a1, ICDebuggingItem *a2)
{
  return -[ICDebuggingItem identifier](a2, "identifier");
}

NSArray *__cdecl sub_100097A44(id a1, ICDebuggingSection *a2)
{
  return -[ICDebuggingSection items](a2, "items");
}

NSString *__cdecl sub_100097A4C(id a1, ICDebuggingItem *a2)
{
  return -[ICDebuggingItem identifier](a2, "identifier");
}

id sub_100097A54(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;

  v3 = objc_msgSend(*(id *)(a1 + 32), "indexOfObject:", a2);
  if (v3 == (id)0x7FFFFFFFFFFFFFFFLL)
    v4 = 0;
  else
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectAtIndexedSubscript:", v3));
  return v4;
}

BOOL sub_1000991F4(id a1, ICAccount *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  unsigned __int8 v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[ICAccount accountData](a2, "accountData", a3, a4));
  v5 = objc_msgSend(v4, "supportsV1Neo");

  return v5;
}

uint64_t sub_1000994D8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "title"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "lowercaseString"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "subtitle"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lowercaseString"));

  if ((objc_msgSend(v5, "containsString:", *(_QWORD *)(a1 + 32)) & 1) != 0)
    v8 = 1;
  else
    v8 = (uint64_t)objc_msgSend(v7, "containsString:", *(_QWORD *)(a1 + 32));

  return v8;
}

void sub_1000996D8(id a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
  objc_msgSend(v1, "dismissAllowNotificationsWarmingSheet");

}

void sub_100099E64(uint64_t a1)
{
  id v2;

  +[ICCloudThrottlingPolicy resetSavedPolicyState](ICCloudThrottlingPolicy, "resetSavedPolicyState");
  +[ICCloudConfiguration setDefaultConfigurationURL:](ICCloudConfiguration, "setDefaultConfigurationURL:", *(_QWORD *)(a1 + 32));
  v2 = (id)objc_claimAutoreleasedReturnValue(+[ICCloudConfiguration sharedConfiguration](ICCloudConfiguration, "sharedConfiguration"));
  objc_msgSend(v2, "loadConfigurationFromURL:", *(_QWORD *)(a1 + 32));

}

void sub_100099F4C(id a1)
{
  ICDebugSpinner *v1;
  ICDebugSpinner *v2;
  _QWORD v3[4];
  ICDebugSpinner *v4;

  v1 = objc_alloc_init(ICDebugSpinner);
  -[ICDebugSpinner show](v1, "show");
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100099FD8;
  v3[3] = &unk_100550110;
  v4 = v1;
  v2 = v1;
  +[ICDebugUtilities purgeEverythingWithCompletionHandler:](ICDebugUtilities, "purgeEverythingWithCompletionHandler:", v3);

}

id sub_100099FD8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hide");
}

void sub_10009A004(id a1)
{
  ICDebugSpinner *v1;
  ICDebugSpinner *v2;
  _QWORD v3[4];
  ICDebugSpinner *v4;

  v1 = objc_alloc_init(ICDebugSpinner);
  -[ICDebugSpinner show](v1, "show");
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10009A090;
  v3[3] = &unk_100550110;
  v4 = v1;
  v2 = v1;
  +[ICDebugUtilities deleteEverythingWithCompletionHandler:](ICDebugUtilities, "deleteEverythingWithCompletionHandler:", v3);

}

id sub_10009A090(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hide");
}

id sub_10009A2B8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "importTestDataFromDirectoryAtURL:", *(_QWORD *)(a1 + 40));
}

id sub_10009A6A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  void *i;

  v3 = (unint64_t)objc_msgSend(CFSTR("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXZY0123456789"), "length");
  for (i = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString stringWithCapacity:](NSMutableString, "stringWithCapacity:", 20));
        a2;
        --a2)
  {
    objc_msgSend(i, "appendFormat:", CFSTR("%C"), objc_msgSend(CFSTR("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXZY0123456789"), "characterAtIndex:", arc4random() % v3));
  }
  return i;
}

id sub_10009AABC()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  v1 = objc_msgSend(v0, "BOOLForKey:", CFSTR("DebuggingGreyParrotUI"));

  return v1;
}

void sub_10009ACA0(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009AD08;
  block[3] = &unk_100550110;
  v2 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

}

id sub_10009AD08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hide");
}

void sub_10009AD34(id a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  const __CFString *v11;
  void *v12;
  const __CFString *v13;
  void *v14;

  +[ICMigrationController setDidChooseToMigrateLocalAccount:](ICMigrationController, "setDidChooseToMigrateLocalAccount:", 0);
  +[ICMigrationController setDidMigrateLocalAccount:](ICMigrationController, "setDidMigrateLocalAccount:", 0);
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "managedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount localAccountInContext:](ICAccount, "localAccountInContext:", v2));

  if (v3)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v5 = ICMigrationStateWillChangeNotification;
    v13 = CFSTR("ICCurrentDeviceMigrationStateChangeWasForLocalAccountKey");
    v14 = &__kCFBooleanTrue;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v14, &v13, 1));
    objc_msgSend(v4, "postNotificationName:object:userInfo:", v5, 0, v6);

    +[ICAccount deleteAccount:](ICAccount, "deleteAccount:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
    objc_msgSend(v7, "save");

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    v9 = ICMigrationStateDidChangeNotification;
    v11 = CFSTR("ICCurrentDeviceMigrationStateChangeWasForLocalAccountKey");
    v12 = &__kCFBooleanTrue;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v12, &v11, 1));
    objc_msgSend(v8, "postNotificationName:object:userInfo:", v9, 0, v10);

  }
}

void sub_10009B0D8(id a1)
{
  ICDebugSpinner *v1;
  ICDebugSpinner *v2;
  _QWORD v3[4];
  ICDebugSpinner *v4;

  v1 = objc_alloc_init(ICDebugSpinner);
  -[ICDebugSpinner show](v1, "show");
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10009B164;
  v3[3] = &unk_100550110;
  v4 = v1;
  v2 = v1;
  +[ICDebugUtilities startFreshWithCompletionHandler:](ICDebugUtilities, "startFreshWithCompletionHandler:", v3);

}

id sub_10009B164(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "hide");
}

void sub_10009B234(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  BOOL v5;
  id v6;
  os_log_t v7;
  NSString *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  double v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  _QWORD block[4];
  NSObject *v19;
  NSObject *v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICDatabaseStateHandler stateDictionary](ICDatabaseStateHandler, "stateDictionary"));
  v24 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v2, 200, 0, &v24));
  v4 = v24;
  if (v3)
    v5 = v4 == 0;
  else
    v5 = 0;
  if (v5)
  {
    v8 = NSTemporaryDirectory();
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](NSURL, "fileURLWithPath:", v9));

    v11 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend((id)v11, "timeIntervalSinceReferenceDate");
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", CFSTR("statedump-%ld"), (uint64_t)v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URLByAppendingPathComponent:isDirectory:", v13, 0));

    v7 = (os_log_t)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "URLByAppendingPathExtension:", CFSTR("plist")));
    v23 = 0;
    LOBYTE(v11) = objc_msgSend(v3, "writeToURL:options:error:", v7, 0, &v23);
    v6 = v23;
    if ((v11 & 1) != 0)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_10009B490;
      block[3] = &unk_100550098;
      v19 = *(id *)(a1 + 32);
      v20 = v7;
      v15 = *(id *)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      v21 = v15;
      v22 = v16;
      dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);

      v17 = v19;
    }
    else
    {
      v17 = os_log_create("com.apple.notes", "Internal");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_1004098F8();
    }

  }
  else
  {
    v6 = v4;
    v7 = os_log_create("com.apple.notes", "Internal");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_100409898();
  }

}

void sub_10009B490(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[3];
  uint64_t v9;

  objc_msgSend(*(id *)(a1 + 32), "hide");
  v2 = objc_alloc((Class)UIActivityViewController);
  v9 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v9, 1));
  v4 = objc_msgSend(v2, "initWithActivityItems:applicationActivities:", v3, 0);

  v8[0] = UIActivityTypeOpenInIBooks;
  v8[1] = ICActivityTypeShareToNote;
  v8[2] = UIActivityTypeSharePlay;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v8, 3));
  objc_msgSend(v4, "setExcludedActivityTypes:", v5);

  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "popoverPresentationController"));
  objc_msgSend(v7, "setSourceView:", v6);

  objc_msgSend(*(id *)(a1 + 56), "presentViewController:animated:completion:", v4, 1, 0);
}

void sub_10009B874(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults"));
  objc_msgSend(v2, "setBool:forKey:", *(_BYTE *)(a1 + 32) == 0, ICViewControllerUseNonContiguousLayoutDefaultKey);

}

void sub_10009BA38(id a1, NSError *a2)
{
  NSError *v2;
  NSObject *v3;

  v2 = a2;
  if (v2)
  {
    v3 = os_log_create("com.apple.notes", "Internal");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_100409958();

  }
}

BOOL sub_10009BD60(id a1, ICAccount *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  unsigned __int8 v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[ICAccount accountData](a2, "accountData", a3, a4));
  v5 = objc_msgSend(v4, "supportsV1Neo");

  return v5;
}

void sub_10009C198(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  _QWORD v12[4];
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  __int16 v17;

  if (a2 == 2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICLockedNotesModeMigrator sharedMigrator](ICLockedNotesModeMigrator, "sharedMigrator"));
    v4 = *(__int16 *)(a1 + 64);
    v5 = *(void **)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_10009C2BC;
    v12[3] = &unk_1005531D0;
    v13 = v5;
    v7 = *(id *)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    v9 = *(void **)(a1 + 56);
    v14 = v7;
    v15 = v8;
    v16 = v9;
    v17 = *(_WORD *)(a1 + 64);
    objc_msgSend(v3, "migrateLockedNotesInAccount:toMode:window:completionHandler:", v13, v4, v6, v12);

  }
  else
  {
    v10 = *(void **)(a1 + 48);
    v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ic_subarrayFromIndex:", 1));
    objc_msgSend(v10, "migrateAccounts:toMode:", v11, *(__int16 *)(a1 + 64));

  }
}

void sub_10009C2BC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[5];
  id v5;
  __int16 v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICAuthenticationAlert switchedModeInfoAlertWithAccount:](ICAuthenticationAlert, "switchedModeInfoAlertWithAccount:", *(_QWORD *)(a1 + 32)));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10009C364;
  v4[3] = &unk_1005531A8;
  v3 = *(_QWORD *)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 48);
  v5 = *(id *)(a1 + 56);
  v6 = *(_WORD *)(a1 + 64);
  objc_msgSend(v2, "presentInWindow:completionHandler:", v3, v4);

}

void sub_10009C364(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_subarrayFromIndex:", 1));
  objc_msgSend(v2, "migrateAccounts:toMode:", v3, *(__int16 *)(a1 + 48));

}

void sub_10009C4EC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(+[ICPasswordUtilities sharedInstance](ICPasswordUtilities, "sharedInstance"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "window"));
  objc_msgSend(v4, "showChangePasswordDialogueFromDisplayWindow:account:completionHandler:", v3, *(_QWORD *)(a1 + 40), 0);

}

void sub_10009C790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10009C7A8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10009C7B8(uint64_t a1)
{

}

void sub_10009C7C0(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  objc_msgSend(v3, "setAutocapitalizationType:", 0);
  objc_msgSend(v3, "setAutocorrectionType:", 1);
  objc_msgSend(v3, "setSecureTextEntry:", 1);
  v4 = ICUnlocalizedString(CFSTR("Password"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setPlaceholder:", v5);

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v3;

}

void sub_10009C840(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  id v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICAuthenticationState sharedState](ICAuthenticationState, "sharedState"));
  v16 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cachedMainKeyForObject:", *(_QWORD *)(a1 + 32)));

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "cryptoStrategy"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "text"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "mainKeyForPassphrase:", v4));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICAuthenticationState sharedState](ICAuthenticationState, "sharedState"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
    objc_msgSend(v6, "setCachedMainKey:forIdentifier:", v5, v7);

    v8 = objc_msgSend(objc_alloc((Class)NSAttributedString), "initWithString:", CFSTR("Hello\tWorld"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addTableAttachmentWithText:", v8));
    objc_msgSend(v9, "saveMergeableDataIfNeeded");
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[ICAuthenticationState sharedState](ICAuthenticationState, "sharedState"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
    objc_msgSend(v10, "setCachedMainKey:forIdentifier:", v16, v11);

    v12 = (void *)objc_claimAutoreleasedReturnValue(+[ICAuthenticationState sharedState](ICAuthenticationState, "sharedState"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
    objc_msgSend(v12, "setCachedMainKey:forIdentifier:", 0, v13);

    v14 = objc_msgSend(objc_alloc((Class)ICAttachmentInsertionController), "initWithNote:", *(_QWORD *)(a1 + 32));
    v15 = objc_msgSend(v14, "addAttachment:", v9);

  }
}

void sub_10009CC30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10009CC48(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v3 = a2;
  objc_msgSend(v3, "setAutocapitalizationType:", 0);
  objc_msgSend(v3, "setAutocorrectionType:", 1);
  objc_msgSend(v3, "setSecureTextEntry:", 1);
  v4 = ICUnlocalizedString(CFSTR("Password"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  objc_msgSend(v3, "setPlaceholder:", v5);

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v3;

}

void sub_10009CCC8(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v9 = objc_alloc_init((Class)ICCryptoConvergenceControllerConfiguration);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "text"));
  objc_msgSend(v9, "setDivergedPassphrase:", v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICCryptoConvergenceController sharedController](ICCryptoConvergenceController, "sharedController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectID"));
  v5 = objc_msgSend(v3, "convergeAttachmentsInNoteWithID:configuration:", v4, v9);

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "managedObjectContext"));
    objc_msgSend(v7, "ic_saveWithLogDescription:", CFSTR("Converged attachments"));

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v8, "postNotificationName:object:", ICAuthenticationStateDidAuthenticateNotification, 0);

  }
}

void sub_10009CFD8(id a1)
{
  id v1;
  id v2;
  NSObject *v3;
  void *v4;
  int v5;
  void *v6;

  v1 = objc_msgSend(objc_alloc((Class)ICSearchQueryOperation), "initWithQueryString:rankingQueries:", CFSTR("*==*"), &__NSArray0__struct);
  v2 = +[ICSearchQueryOperation newOperationQueueWithName:](ICSearchQueryOperation, "newOperationQueueWithName:", CFSTR("com.apple.notes.log-search-index-queue"));
  objc_msgSend(v2, "addOperation:", v1);
  objc_msgSend(v2, "waitUntilAllOperationsAreFinished");
  v3 = os_log_create("com.apple.notes", "Internal");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "results"));
    v5 = 138412290;
    v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "All indexed items: %@", (uint8_t *)&v5, 0xCu);

  }
}

id sub_10009D190(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performSelectorOnMainThread:withObject:waitUntilDone:", "hide", 0, 0);
}

void sub_10009D364(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[ICFolder smartFolderWithQuery:titleComponents:account:](ICFolder, "smartFolderWithQuery:titleComponents:account:", *(_QWORD *)(a1 + 32), &off_10057C6C0, *(_QWORD *)(a1 + 40)));
  objc_msgSend(v2, "updateChangeCountWithReason:", CFSTR("Created partially supported Smart Folder"));
  objc_msgSend(*(id *)(a1 + 48), "ic_save");

}

void sub_10009D450(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICHashtag allVisibleHashtagsInContext:](ICHashtag, "allVisibleHashtagsInContext:", *(_QWORD *)(a1 + 32)));
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), "markForDeletion");
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }
  objc_msgSend(*(id *)(a1 + 32), "ic_save");

}

id sub_10009D694(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

id sub_10009D758(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

id sub_10009D81C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

void sub_10009D8E4(uint64_t a1)
{
  void *v1;
  _QWORD v2[4];
  id v3;

  v1 = *(void **)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10009D944;
  v2[3] = &unk_100550110;
  v3 = v1;
  objc_msgSend(v3, "performBlock:", v2);

}

id sub_10009D944(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_saveWithLogDescription:", CFSTR("Regenerate handwriting summaries debug menu item"));
}

id sub_10009D9F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

void sub_10009DF94(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppRemovalServiceClient sharedClient](ICAppRemovalServiceClient, "sharedClient"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10009E00C;
  v3[3] = &unk_1005532E0;
  v3[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "removeAppWithReply:", v3);

}

void sub_10009E00C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  if (!v3)
    exit(0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10009E094;
  v6[3] = &unk_10054FE80;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  dispatchMainAfterDelay(v6, 0.1);

}

void sub_10009E094(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localizedDescription"));
  v6 = (id)objc_claimAutoreleasedReturnValue(+[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", CFSTR("Error in App Removal"), v2, 1));

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_1005704B8, 0));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v4, 0, 0));
  objc_msgSend(v6, "addAction:", v5);

  objc_msgSend(*(id *)(a1 + 40), "presentViewController:animated:completion:", v6, 1, 0);
}

void sub_10009E578(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "allDrawings"));
  +[PKHandwritingDebugUtility presentHandwritingDebugViewFromViewController:allDrawings:tiledView:](PKHandwritingDebugUtility, "presentHandwritingDebugViewFromViewController:allDrawings:tiledView:", v2, v4, *(_QWORD *)(a1 + 40));

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v5 = *(_QWORD *)(a1 + 48);
  if (v5)
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v5 + 16))(v5, 1, v6);

  }
}

id sub_10009E7FC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "showDocumentCamera");
}

id sub_10009E868(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "showHandwritingDebug:", 1);
}

id sub_10009EDF0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id WeakRetained;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  __CFString *v11;
  void *v12;

  v5 = a3;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v7 = WeakRetained;
  if (WeakRetained)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "snapshot"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "sectionIdentifiers"));
    v11 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectAtIndexedSubscript:", a2));

    if (v11 == CFSTR("ICNoteSearchDataSourceAttachmentSectionIdentifier"))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "attachmentSectionForLayoutEnvironment:", v5));
    }
    else
    {
      if (v11 == CFSTR("ICNoteSearchDataSourceSuggestionsSectionIdentifier"))
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "notesListSectionForSectionIndex:layoutEnvironment:", a2, v5));
      }
      else
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "notesSectionForSectionIndex:layoutEnvironment:", a2, v5));
        if (+[UIDevice ic_isVision](UIDevice, "ic_isVision"))
        {
          objc_msgSend(v12, "contentInsets");
          objc_msgSend(v12, "setContentInsets:", 0.0);
        }
      }
      objc_msgSend(v7, "setHeaderOfSectionLayout:", v12);
    }

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_10009F5EC(uint64_t a1)
{
  double v1;
  double v2;
  double v3;
  double v4;
  id v5;

  v1 = *(double *)(a1 + 40);
  v2 = *(double *)(a1 + 48);
  v3 = *(double *)(a1 + 56);
  v4 = *(double *)(a1 + 64);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  objc_msgSend(v5, "setFrame:", v1, v2, v3, v4);

}

uint64_t sub_10009F644(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10009F838(uint64_t a1)
{
  void *v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "rootViewController"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "view"));
  objc_msgSend(v2, "setAlpha:", 1.0);

}

uint64_t sub_10009F894(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_10009F984(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t result;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  objc_msgSend(v2, "setHidden:", 1);

  objc_msgSend(*(id *)(a1 + 32), "setWindow:", 0);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "window"));
  objc_msgSend(v3, "setWindowScene:", 0);

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingWindow"));
  objc_msgSend(v4, "makeKeyAndVisible");

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_10009FCBC(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

id sub_1000A0038(uint64_t a1)
{
  +[ICDateHeadersUtilities setQueryDateHeadersType:](ICDateHeadersUtilities, "setQueryDateHeadersType:", *(unsigned int *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "performActivityWithCompletion:", *(_QWORD *)(a1 + 40));
}

id sub_1000A011C()
{
  void *v0;
  void *v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[NotesApp sharedNotesApp](NotesApp, "sharedNotesApp"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "noteContext"));

  return v1;
}

void sub_1000A0414(uint64_t a1)
{
  void *v2;
  void (**v3)(void);

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clearButtonHandler"));

  if (v2)
  {
    v3 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "clearButtonHandler"));
    v3[2]();

  }
}

void sub_1000A1BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location)
{
  id *v11;
  id *v12;
  id *v13;
  uint64_t v14;

  objc_destroyWeak(v11);
  objc_destroyWeak(v13);
  objc_destroyWeak(v12);
  objc_destroyWeak(location);
  objc_destroyWeak((id *)(v14 - 112));
  _Unwind_Resume(a1);
}

void sub_1000A1C58(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(*(id *)(a1 + 32), "copy:", WeakRetained);

}

void sub_1000A1C98(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "shareAttachment:", WeakRetained);

}

void sub_1000A1CC8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "showInNote:", WeakRetained);

}

void sub_1000A1CF8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "openAttachmentInspector:", WeakRetained);

}

void sub_1000A3130(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 80));
  _Unwind_Resume(a1);
}

void sub_1000A3168(id *a1, void *a2)
{
  id v3;
  _QWORD v4[4];
  id v5;
  id v6;
  id v7;
  id v8;

  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000A323C;
  v4[3] = &unk_1005504B0;
  v3 = a2;
  v5 = v3;
  v6 = a1[4];
  objc_copyWeak(&v8, a1 + 6);
  v7 = a1[5];
  performBlockOnMainThread(v4);

  objc_destroyWeak(&v8);
}

void sub_1000A3228(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000A323C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v4;
  id WeakRetained;
  uint8_t v6[16];
  uint8_t buf[16];

  if (*(_QWORD *)(a1 + 32) && (objc_msgSend(*(id *)(a1 + 40), "value") & 1) == 0)
  {
    v3 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Got device list response", buf, 2u);
    }

    v4 = *(_QWORD *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    objc_msgSend(WeakRetained, "setPrimaryAccountDevices:", v4);

    v2 = objc_loadWeakRetained((id *)(a1 + 56));
    -[NSObject stopIndicatorAnimationIfNecessaryForDeviceCheckIndicator:](v2, "stopIndicatorAnimationIfNecessaryForDeviceCheckIndicator:", *(_QWORD *)(a1 + 48));
  }
  else
  {
    v2 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Device list request was cancelled or failed", v6, 2u);
    }
  }

}

void sub_1000A3354(uint64_t a1)
{
  NSObject *WeakRetained;
  NSObject *v3;
  void *v4;
  NSObject *v5;
  uint8_t v6[16];
  uint8_t buf[16];

  if ((objc_msgSend(*(id *)(a1 + 32), "value") & 1) != 0)
  {
    WeakRetained = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(WeakRetained, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, WeakRetained, OS_LOG_TYPE_DEFAULT, "Migration state fetch request was cancelled", v6, 2u);
    }
    goto LABEL_13;
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v3 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Got migration state response.", buf, 2u);
  }

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject timeoutTimer](WeakRetained, "timeoutTimer"));
  if (v4)
  {

LABEL_12:
    -[NSObject stopIndicatorAnimationIfNecessaryForDeviceCheckIndicator:](WeakRetained, "stopIndicatorAnimationIfNecessaryForDeviceCheckIndicator:", *(_QWORD *)(a1 + 40));
    goto LABEL_13;
  }
  if ((-[NSObject userDidContinue](WeakRetained, "userDidContinue") & 1) == 0)
    goto LABEL_12;
  v5 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    sub_100409AC4(v5);

LABEL_13:
}

BOOL sub_1000A4340(id a1, ICCompatibilityControllerDevice *a2, unint64_t a3, BOOL *a4)
{
  return (unint64_t)-[ICCompatibilityControllerDevice notesVersion](a2, "notesVersion", a3, a4) >> 63;
}

void sub_1000A44B8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  NSObject *v14;
  id v15;
  id v16;
  void *v17;
  void *v18;
  void *v19;
  _QWORD v20[5];
  id v21;
  id v22;
  uint8_t buf[4];
  id v24;
  __int16 v25;
  id v26;
  __int16 v27;
  void *v28;

  v2 = ICKeyPathFromSelector("hasChecklist");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = ICKeyPathFromSelector("hasChecklistInProgress");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("%K == nil OR %K == nil"), v3, v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote ic_objectIDsMatchingPredicate:context:](ICNote, "ic_objectIDsMatchingPredicate:context:", v6, v7));

  v9 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134218498;
    v24 = objc_msgSend(v8, "count");
    v25 = 2112;
    v26 = v3;
    v27 = 2112;
    v28 = v5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Found %lu notes with no value for %@ or %@", buf, 0x20u);
  }

  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000A47F4;
  v20[3] = &unk_100553410;
  v20[4] = *(_QWORD *)(a1 + 32);
  v12 = v10;
  v21 = v12;
  v13 = v11;
  v22 = v13;
  objc_msgSend(v8, "enumerateObjectsUsingBlock:", v20);
  v14 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v15 = objc_msgSend(v12, "count");
    v16 = objc_msgSend(v13, "count");
    *(_DWORD *)buf = 134218240;
    v24 = v15;
    v25 = 2048;
    v26 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Found %lu notes with a checklist and %lu notes with a checklist in progress", buf, 0x16u);
  }

  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  objc_msgSend(v17, "reset");

  objc_msgSend(*(id *)(a1 + 32), "updateNotesWithObjectIDs:usingValue:forKey:", v12, 1, v3);
  v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v8));
  objc_msgSend(v18, "minusSet:", v12);
  objc_msgSend(*(id *)(a1 + 32), "updateNotesWithObjectIDs:usingValue:forKey:", v18, 0, v3);
  objc_msgSend(*(id *)(a1 + 32), "updateNotesWithObjectIDs:usingValue:forKey:", v13, 1, v5);
  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithArray:](NSMutableSet, "setWithArray:", v8));
  objc_msgSend(v19, "minusSet:", v13);
  objc_msgSend(*(id *)(a1 + 32), "updateNotesWithObjectIDs:usingValue:forKey:", v19, 0, v5);

}

void sub_1000A47F4(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  void *v12;
  id v13;

  v3 = (void *)a1[4];
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "workerContext"));
  v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_existingObjectWithID:", v4));

  objc_msgSend(v13, "updateDerivedAttributesIfNeeded");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "hasChecklist"));
  LODWORD(v4) = objc_msgSend(v6, "BOOLValue");

  if ((_DWORD)v4)
  {
    v7 = (void *)a1[5];
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectID"));
    objc_msgSend(v7, "addObject:", v8);

  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "hasChecklistInProgress"));
  v10 = objc_msgSend(v9, "BOOLValue");

  if (v10)
  {
    v11 = (void *)a1[6];
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectID"));
    objc_msgSend(v11, "addObject:", v12);

  }
}

void sub_1000A5CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000A5CE4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "didChooseToMigrate");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

id sub_1000A6294(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "ic_sceneDidDisconnect:", *(_QWORD *)(a1 + 40));
}

id sub_1000A62C4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  id WeakRetained;
  id v5;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v5 = objc_msgSend(WeakRetained, "isCellReorderableForIdentifier:", v3);

  return v5;
}

void sub_1000A6314(uint64_t a1, void *a2)
{
  id v3;
  _UNKNOWN **v4;
  CFIndex (__cdecl **v5)(CFArrayRef);
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *i;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  id obj;
  uint64_t v46;
  void *v47;
  id v48;
  void *v49;
  void *v50;
  void *v51;
  uint64_t v52;
  void *v53;
  id WeakRetained;
  void *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  void *v64;
  _BYTE v65[128];
  _BYTE v66[128];

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v47 = v3;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "sectionTransactions"));
  v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v66, 16);
  if (v48)
  {
    v46 = *(_QWORD *)v61;
    v4 = ICNoteEditorBaseViewController_ptr;
    v5 = &CFArrayGetCount_ptr;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v61 != v46)
          objc_enumerationMutation(obj);
        v52 = v6;
        v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v60 + 1) + 8 * v6), "finalSnapshot"));
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "difference"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "insertions"));
        v51 = v8;
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "removals"));
        v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "arrayByAddingObjectsFromArray:", v10));

        v12 = (void *)v7;
        v50 = (void *)v11;
        v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v11));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "ic_compactMap:", &stru_1005534A0));
        v56 = 0u;
        v57 = 0u;
        v58 = 0u;
        v59 = 0u;
        v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
        if (v14)
        {
          v16 = v14;
          v17 = *(_QWORD *)v57;
          v55 = v12;
          v53 = v13;
          do
          {
            for (i = 0; i != v16; i = (char *)i + 1)
            {
              if (*(_QWORD *)v57 != v17)
                objc_enumerationMutation(v13);
              v19 = *(void **)(*((_QWORD *)&v56 + 1) + 8 * (_QWORD)i);
              v20 = objc_opt_class(v4[134], v15);
              if ((objc_opt_isKindOfClass(v19, v20) & 1) != 0
                && objc_msgSend(v19, "ic_isEntityOfClass:", objc_opt_class(v5[441], v15))
                && objc_msgSend(v12, "containsItem:", v19))
              {
                v21 = objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
                v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v21, "snapshot"));
                v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "sectionIdentifierForSectionContainingItemIdentifier:", v19));

                v25 = objc_opt_class(ICNoteFolderSectionIdentifier, v24);
                LOBYTE(v21) = objc_opt_isKindOfClass(v23, v25);
                v26 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "parentOfChild:", v19));
                v27 = (id)v26;
                if ((v21 & 1) != 0)
                {
                  if (v26)
                  {
                    v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "childrenOfParent:", v26));
                    v29 = objc_msgSend(v28, "indexOfObject:", v19);

                  }
                  else
                  {
                    v29 = objc_msgSend(v12, "indexOfItem:", v19);
                  }
                  v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "parentOfChild:", v19));
                  v34 = objc_opt_class(v4[134], v33);
                  if ((objc_opt_isKindOfClass(v32, v34) & 1) == 0
                    || (v35 = objc_msgSend(v32, "ic_isModernFolderType"), !v32)
                    || (v35 & 1) == 0)
                  {
                    v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "noteContainerObjectID"));

                    v32 = (void *)v36;
                  }

                  v27 = v32;
                }
                else if (v26)
                {
                  v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "childrenOfParent:", v26));
                  v29 = objc_msgSend(v30, "indexOfObject:", v19);

                }
                else
                {
                  v27 = v23;
                  v29 = 0;
                }
                v37 = objc_opt_class(ICFolderListSectionIdentifier, v31);
                if ((objc_opt_isKindOfClass(v27, v37) & 1) != 0)
                  v38 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "accountObjectID"));
                else
                  v38 = v27;
                v39 = v38;
                v40 = objc_msgSend(WeakRetained, "actualChildIndexForSnapshotIndex:inDestinationObjectID:sectionSnapshot:", v29, v38, v55);
                v64 = v19;
                v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v64, 1));
                objc_msgSend(WeakRetained, "performDropOfFolderObjectIDs:atFolderObjectID:atIndex:", v41, v39, v40);

                v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "cellForItemIdentifier:", v19));
                v43 = ICProtocolCast(&OBJC_PROTOCOL___ICNoteBrowseCellUpdating, v42);
                v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
                if ((objc_opt_respondsToSelector(v44, "updateAccessories") & 1) != 0)
                  objc_msgSend(v44, "updateAccessories");

                v4 = ICNoteEditorBaseViewController_ptr;
                v5 = &CFArrayGetCount_ptr;
                v12 = v55;
                v13 = v53;
              }
            }
            v16 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v56, v65, 16);
          }
          while (v16);
        }

        v6 = v52 + 1;
      }
      while ((id)(v52 + 1) != v48);
      v48 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v60, v66, 16);
    }
    while (v48);
  }

}

id sub_1000A67F0(id a1, NSOrderedCollectionChange *a2)
{
  return -[NSOrderedCollectionChange object](a2, "object");
}

BOOL sub_1000A6930(id a1, UICellAccessory *a2, unint64_t a3, BOOL *a4)
{
  UICellAccessory *v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(UICellAccessoryOutlineDisclosure, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

id sub_1000A7468(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  if (objc_msgSend(v3, "ic_isModernType"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectWithID:", v3));

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_1000A74D0(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "cellForItemIdentifier:", a2);
}

BOOL sub_1000A7D00(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a2;
  v5 = objc_opt_class(ICNoteSectionIdentifier);
  v6 = ICDynamicCast(v5, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  LOBYTE(v4) = objc_msgSend(v7, "sectionType") == (id)3;
  return (char)v4;
}

void sub_1000A7D5C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "movableNoteObjectIDsIn:forDropIntoSection:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v14;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v14 != v5)
          objc_enumerationMutation(v2);
        v7 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v6);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectWithID:", v7));

        objc_msgSend(v9, "changePinStatusIfPossible");
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "eventReporter"));

        objc_msgSend(v11, "submitNotePinEventForModernNote:contextPath:", v9, 0);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    }
    while (v4);
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  objc_msgSend(v12, "ic_save");

}

id sub_1000A7ED8(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "modernManagedObjectContext"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectWithID:", v3));

  return v5;
}

UIViewController *__cdecl sub_1000A84AC(id a1)
{
  return 0;
}

id sub_1000A84B4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  _BOOL8 v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD v18[5];
  id v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[4];
  id v23;
  uint64_t v24;
  BOOL v25;
  _QWORD v26[4];
  id v27;
  uint64_t v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  if (*(_BYTE *)(a1 + 80))
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1000A8740;
    v26[3] = &unk_100550A48;
    v3 = *(id *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 40);
    v27 = v3;
    v28 = v4;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction ic_removeActionWithHandler:](UIAction, "ic_removeActionWithHandler:", v26));
    objc_msgSend(v2, "addObject:", v5);

  }
  if (*(_BYTE *)(a1 + 81))
  {
    v6 = *(_QWORD *)(a1 + 64) == *(_QWORD *)(a1 + 72);
    v7 = objc_msgSend(*(id *)(a1 + 48), "count");
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1000A8830;
    v22[3] = &unk_100553628;
    v8 = *(id *)(a1 + 56);
    v25 = v6;
    v9 = *(_QWORD *)(a1 + 40);
    v23 = v8;
    v24 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction ic_pinNoteActionPinned:numberOfElements:withHandler:](UIAction, "ic_pinNoteActionPinned:numberOfElements:withHandler:", v6, v7, v22));
    objc_msgSend(v2, "addObject:", v10);

  }
  if (*(_BYTE *)(a1 + 82))
  {
    v11 = objc_msgSend(*(id *)(a1 + 48), "count");
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000A892C;
    v20[3] = &unk_100550A48;
    v20[4] = *(_QWORD *)(a1 + 40);
    v21 = *(id *)(a1 + 56);
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction ic_moveActionWithWithNumberOfElements:handler:](UIAction, "ic_moveActionWithWithNumberOfElements:handler:", v11, v20));
    objc_msgSend(v2, "addObject:", v12);

  }
  if (*(_BYTE *)(a1 + 83))
  {
    v13 = objc_msgSend(*(id *)(a1 + 48), "count");
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000A893C;
    v18[3] = &unk_100550A48;
    v18[4] = *(_QWORD *)(a1 + 40);
    v19 = *(id *)(a1 + 56);
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[UIAction ic_deleteActionWithNumberOfElements:handler:](UIAction, "ic_deleteActionWithNumberOfElements:handler:", v13, v18));
    objc_msgSend(v2, "addObject:", v14);

  }
  v15 = objc_msgSend(v2, "copy");
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:image:identifier:options:children:](UIMenu, "menuWithTitle:image:identifier:options:children:", &stru_1005704B8, 0, 0, 1, v15));

  return v16;
}

void sub_1000A8740(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "performRemoveActionWithInvitation:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_1000A8830(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[4];
  char v5;

  v2 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000A88AC;
  v4[3] = &unk_100553600;
  v5 = *(_BYTE *)(a1 + 48);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_compactMap:", v4));
  objc_msgSend(*(id *)(a1 + 40), "performPinActionWithNotes:", v3);

}

id sub_1000A88AC(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;

  v3 = a2;
  v4 = objc_opt_class(ICNote);
  v5 = ICDynamicCast(v4, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (*(_BYTE *)(a1 + 32) || (objc_msgSend(v6, "isPinned") & 1) == 0)
    v7 = v6;
  else
    v7 = 0;
  v8 = v7;

  return v8;
}

id sub_1000A892C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performMoveActionWithNotes:completion:", *(_QWORD *)(a1 + 40), 0);
}

void sub_1000A893C(uint64_t a1)
{
  void *v1;
  id v2;

  v1 = *(void **)(a1 + 32);
  v2 = objc_msgSend(*(id *)(a1 + 40), "copy");
  objc_msgSend(v1, "performDeleteActionWithObjects:completion:", v2, 0);

}

ICFolderPreviewViewController *sub_1000A8DB8(_QWORD *a1)
{
  ICFolderPreviewViewController *v1;
  ICFolderPreviewViewController *v2;

  if (!a1[4])
  {
    if (a1[5])
    {
      v2 = -[ICFolderPreviewViewController initWithFolder:]([ICFolderPreviewViewController alloc], "initWithFolder:", a1[5]);
    }
    else
    {
      if (!a1[6])
      {
        if (a1[7])
        {
          v1 = (ICFolderPreviewViewController *)objc_msgSend(objc_alloc((Class)NotePreviewController), "initWithNote:", a1[7]);
          -[ICFolderPreviewViewController setupPreview](v1, "setupPreview");
          return v1;
        }
        goto LABEL_2;
      }
      v2 = -[ICNotePreviewViewController initWithNote:]([ICNotePreviewViewController alloc], "initWithNote:", a1[6]);
    }
    v1 = v2;
    return v1;
  }
LABEL_2:
  v1 = 0;
  return v1;
}

id sub_1000A8E50(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextMenuForInvitation:sourceView:", v4, *(_QWORD *)(a1 + 48)));
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 56);
    if (v6)
    {
      v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextMenuForFolder:sourceView:", v6, *(_QWORD *)(a1 + 48)));
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 64);
      if (v7)
      {
        v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextMenuForModernNote:sourceView:", v7, *(_QWORD *)(a1 + 48)));
      }
      else
      {
        v8 = *(_QWORD *)(a1 + 72);
        if (!v8)
        {
          v9 = 0;
          goto LABEL_10;
        }
        v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "contextMenuForLegacyNote:sourceView:", v8, *(_QWORD *)(a1 + 48)));
      }
    }
  }
  v9 = (void *)v5;
LABEL_10:

  return v9;
}

void sub_1000A9078(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned int v9;
  void *v10;
  char v11;
  id v12;

  v2 = *(void **)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "identifier"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cellForItemIdentifier:", v3));
  v12 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "indexPathForCell:", v4));

  objc_msgSend(*(id *)(a1 + 32), "ic_deselectAllItems");
  objc_msgSend(*(id *)(a1 + 32), "selectItemAtIndexPath:animated:scrollPosition:", v12, 1, 0);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  LOBYTE(v3) = objc_opt_respondsToSelector(v5, "collectionView:didSelectItemAtIndexPath:");

  if ((v3 & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v6, "collectionView:didSelectItemAtIndexPath:", *(_QWORD *)(a1 + 32), v12);

  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  if ((objc_opt_respondsToSelector(v7, "collectionView:canPerformPrimaryActionForItemAtIndexPath:") & 1) == 0)
    goto LABEL_7;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v9 = objc_msgSend(v8, "collectionView:canPerformPrimaryActionForItemAtIndexPath:", *(_QWORD *)(a1 + 32), v12);

  if (v9)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    v11 = objc_opt_respondsToSelector(v10, "collectionView:performPrimaryActionForItemAtIndexPath:");

    if ((v11 & 1) != 0)
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
      objc_msgSend(v7, "collectionView:performPrimaryActionForItemAtIndexPath:", *(_QWORD *)(a1 + 32), v12);
LABEL_7:

    }
  }

}

id sub_1000A9260(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;

  v3 = a2;
  if (objc_msgSend(v3, "ic_isModernNoteType"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectWithID:", v3));

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

BOOL sub_1000A92C8(id a1, ICNote *a2, unint64_t a3, BOOL *a4)
{
  return -[ICNote isSystemPaper](a2, "isSystemPaper", a3, a4);
}

void sub_1000A934C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "diffableDataSource"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "snapshot"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "itemIdentifiers"));
  v5 = objc_msgSend(v4, "containsObject:", *(_QWORD *)(a1 + 40));

  if (v5)
  {
    v8 = *(_QWORD *)(a1 + 40);
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v8, 1));
    objc_msgSend(v3, "reloadItemsWithIdentifiers:", v6);

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "diffableDataSource"));
    objc_msgSend(v7, "applySnapshot:animatingDifferences:", v3, 1);

  }
}

NSManagedObjectID *__cdecl sub_1000A9574(id a1, UIDragItem *a2)
{
  UIDragItem *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = a2;
  v3 = objc_opt_class(NSManagedObjectID);
  v4 = (void *)objc_claimAutoreleasedReturnValue(-[UIDragItem localObject](v2, "localObject"));

  v5 = ICDynamicCast(v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return (NSManagedObjectID *)v6;
}

id sub_1000A9D84(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  if (objc_msgSend(v3, "ic_isEntityOfClass:", objc_opt_class(ICNote)))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectWithID:", v3));

    LODWORD(v4) = *(unsigned __int8 *)(a1 + 40);
    if ((_DWORD)v4 == objc_msgSend(v5, "isPinned")
      || (objc_msgSend(v5, "isPinnable") & 1) == 0 && *(_BYTE *)(a1 + 40))
    {
      v6 = 0;
    }
    else
    {
      v6 = v3;
    }
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }

  return v7;
}

void sub_1000A9F10(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  ICMoveDecisionController *v11;
  void *v12;
  void *v13;
  ICMoveDecisionController *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id obj;
  _QWORD v19[4];
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  _BYTE v30[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", *(_QWORD *)(a1 + 40)));

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  obj = *(id *)(a1 + 48);
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v26;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v26 != v6)
          objc_enumerationMutation(obj);
        v8 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)v7);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernManagedObjectContext"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectWithID:", v8));

        v11 = [ICMoveDecisionController alloc];
        v29 = v10;
        v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v29, 1));
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
        v14 = -[ICMoveDecisionController initWithSourceObjects:presentingViewController:](v11, "initWithSourceObjects:presentingViewController:", v12, v13);

        -[ICMoveDecisionController setDestination:](v14, "setDestination:", v3);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_1000AA138;
        v19[3] = &unk_1005537A0;
        v24 = *(_QWORD *)(a1 + 56);
        v15 = v3;
        v16 = *(_QWORD *)(a1 + 32);
        v17 = *(void **)(a1 + 40);
        v20 = v15;
        v21 = v16;
        v22 = v8;
        v23 = v17;
        -[ICMoveDecisionController performDecisionWithCompletion:](v14, "performDecisionWithCompletion:", v19);

        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v25, v30, 16);
    }
    while (v5);
  }

}

void sub_1000AA138(uint64_t a1, void *a2)
{
  id v3;
  unint64_t v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned int v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[4];
  __int128 v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a2;
  v4 = *(_QWORD *)(a1 + 64);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "visibleSubFolders"));
  v6 = objc_msgSend(v5, "count");

  if (v4 < (unint64_t)v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "modernManagedObjectContext"));
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1000AA3D0;
    v26[3] = &unk_100553778;
    v27 = v3;
    v8 = *(id *)(a1 + 32);
    v9 = *(_QWORD *)(a1 + 64);
    v10 = *(_QWORD *)(a1 + 40);
    v28 = v8;
    v29 = v10;
    v30 = v9;
    objc_msgSend(v7, "performBlockAndWait:", v26);

    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    v24[2] = sub_1000AA460;
    v24[3] = &unk_10054FE80;
    v25 = *(_OWORD *)(a1 + 40);
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v24);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diffableDataSource"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "snapshot"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "sectionIdentifierForSectionContainingItemIdentifier:", *(_QWORD *)(a1 + 48)));

    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diffableDataSource"));
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "snapshotForSection:", v13));

    if (objc_msgSend(v15, "containsItem:", *(_QWORD *)(a1 + 56)))
      v16 = objc_msgSend(v15, "isExpanded:", *(_QWORD *)(a1 + 56));
    else
      v16 = 0;
    if ((objc_msgSend(*(id *)(a1 + 40), "isEditing") & 1) != 0
      || (v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diffableDataSource")),
          v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "snapshot")),
          v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "itemIdentifiers")),
          v20 = objc_msgSend(v19, "containsObject:", *(_QWORD *)(a1 + 48)) ^ 1 | v16,
          v19,
          v18,
          v17,
          v20 == 1))
    {
      objc_msgSend(*(id *)(a1 + 40), "reloadCellAfterDelayForObjectID:", *(_QWORD *)(a1 + 48));
    }
    else
    {
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diffableDataSource"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "snapshot"));
      v31 = *(_QWORD *)(a1 + 48);
      v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v31, 1));
      objc_msgSend(v22, "reconfigureItemsWithIdentifiers:", v23);

    }
  }

}

void sub_1000AA3D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;

  v2 = objc_opt_class(ICFolder);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "firstObject"));
  v4 = ICDynamicCast(v2, v3);
  v6 = (id)objc_claimAutoreleasedReturnValue(v4);

  objc_msgSend(*(id *)(a1 + 40), "undoablyMoveSubFolder:toIndex:", v6, *(_QWORD *)(a1 + 56));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "modernManagedObjectContext"));
  objc_msgSend(v5, "ic_save");

}

id sub_1000AA460(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "reExpandFolderWithObjectID:", *(_QWORD *)(a1 + 40));
}

id sub_1000AA668(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performReplyActionWithInvitation:", *(_QWORD *)(a1 + 40));
}

id sub_1000AA674(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performRemoveActionWithInvitation:", *(_QWORD *)(a1 + 40));
}

id sub_1000AABD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performCollaborationActionWithFolder:forceShareSheet:sourceView:sourceRect:completion:", *(_QWORD *)(a1 + 40), 1, *(_QWORD *)(a1 + 48), 0, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
}

id sub_1000AABF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performCollaborationActionWithFolder:forceShareSheet:sourceView:sourceRect:completion:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), 0, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
}

id sub_1000AAC20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performShowActivityStreamActionWithFolder:", *(_QWORD *)(a1 + 40));
}

id sub_1000AAC2C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performMoveActionWithFolder:completion:", *(_QWORD *)(a1 + 40), 0);
}

id sub_1000AAC3C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performEditSmartFolderActionWithFolder:", *(_QWORD *)(a1 + 40));
}

id sub_1000AAC48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performRenameActionWithFolder:", *(_QWORD *)(a1 + 40));
}

void sub_1000AAC54(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1));
  objc_msgSend(v1, "performDeleteActionWithObjects:completion:", v2, 0);

}

id sub_1000AACD8(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performImportArchiveActionWithNoteContainer:fromSourceView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1000AACE8(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)a1[4];
  v4 = a1[5];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
  objc_msgSend(v2, "performExportArchiveActionWithObjects:fromSourceView:", v3, a1[6]);

}

id sub_1000AB170(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performPinActionWithNote:", *(_QWORD *)(a1 + 40));
}

id sub_1000AB17C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performLockActionWithNote:", *(_QWORD *)(a1 + 40));
}

id sub_1000AB188(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performCollaborationActionWithNote:forceShareSheet:sourceView:sourceRect:completion:", *(_QWORD *)(a1 + 40), 1, *(_QWORD *)(a1 + 48), 0, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
}

id sub_1000AB1B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performCollaborationActionWithNote:forceShareSheet:sourceView:sourceRect:completion:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), 0, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
}

void sub_1000AB1D8(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  v2 = (void *)a1[4];
  v4 = a1[5];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
  objc_msgSend(v2, "performExportArchiveActionWithObjects:fromSourceView:", v3, a1[6]);

}

void sub_1000AB268(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1));
  objc_msgSend(v1, "performMoveActionWithNotes:completion:", v2, 0);

}

void sub_1000AB2EC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1));
  objc_msgSend(v1, "performDeleteActionWithObjects:completion:", v2, 0);

}

id sub_1000AB554(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "performSendActionWithNote:fromSourceView:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
}

void sub_1000AB564(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1));
  objc_msgSend(v1, "performMoveActionWithNotes:completion:", v2, 0);

}

void sub_1000AB5E8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v3, 1));
  objc_msgSend(v1, "performDeleteActionWithObjects:completion:", v2, 0);

}

id sub_1000AB780(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemIdentifierForIndexPath:", v3));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cellForItemIdentifier:", v7));
    v9 = objc_opt_class(ICSearchResult);
    if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "object"));
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectID"));

      v7 = (void *)v11;
    }
    v12 = objc_opt_class(NSManagedObjectID);
    if ((objc_opt_isKindOfClass(v7, v12) & 1) != 0)
    {
      v13 = v7;
      if (objc_msgSend(v13, "ic_isModernNoteType"))
      {
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modernManagedObjectContext"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectWithID:", v13));

        v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "leadingSwipeActionsConfigurationForModernNote:inCell:", v15, v8));
      }
      else
      {
        v16 = 0;
      }

    }
    else
    {
      v16 = 0;
    }

  }
  else
  {
    v16 = 0;
  }

  return v16;
}

id sub_1000AB8E4(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v5 = WeakRetained;
  if (WeakRetained)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "diffableDataSource"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemIdentifierForIndexPath:", v3));

    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "cellForItemIdentifier:", v7));
    v9 = objc_opt_class(ICSearchResult);
    if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0)
    {
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "object"));
      v11 = objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectID"));

      v7 = (void *)v11;
    }
    v12 = objc_opt_class(NSManagedObjectID);
    if ((objc_opt_isKindOfClass(v7, v12) & 1) == 0)
    {
      v16 = 0;
LABEL_20:

      goto LABEL_21;
    }
    v13 = v7;
    if (objc_msgSend(v13, "ic_isModernFolderType"))
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modernManagedObjectContext"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectWithID:", v13));

      if ((objc_msgSend(v15, "isUnsupported") & 1) != 0)
      {
        v16 = 0;
LABEL_18:

LABEL_19:
        goto LABEL_20;
      }
      v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trailingSwipeActionsConfigurationForModernFolder:inCell:", v15, v8));
    }
    else if (objc_msgSend(v13, "ic_isModernNoteType"))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modernManagedObjectContext"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectWithID:", v13));

      v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trailingSwipeActionsConfigurationForModernNote:inCell:", v15, v8));
    }
    else if (objc_msgSend(v13, "ic_isLegacyNoteType"))
    {
      v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "legacyManagedObjectContext"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectWithID:", v13));

      v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trailingSwipeActionsConfigurationForLegacyNote:inCell:", v15, v8));
    }
    else
    {
      if (!objc_msgSend(v13, "ic_isInvitationType"))
      {
        v16 = 0;
        goto LABEL_19;
      }
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "modernManagedObjectContext"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "objectWithID:", v13));

      v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trailingSwipeActionsConfigurationForInvitation:inCell:", v15, v8));
    }
    v16 = (void *)v18;
    goto LABEL_18;
  }
  v16 = 0;
LABEL_21:

  return v16;
}

void sub_1000ABCC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ABCF4(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  void (**v5)(id, uint64_t);

  v3 = (id *)(a1 + 40);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "performPinActionWithNote:", *(_QWORD *)(a1 + 32));

  v5[2](v5, 1);
}

void sub_1000ABF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ABF8C(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  objc_msgSend(WeakRetained, "performDeleteActionWithObjects:completion:", v6, v4);

}

void sub_1000AC03C(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  objc_msgSend(WeakRetained, "performMoveActionWithNotes:completion:", v6, v4);

}

void sub_1000AC3EC(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000AC428(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  objc_msgSend(WeakRetained, "performDeleteActionWithObjects:completion:", v6, v4);

}

void sub_1000AC4D8(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  objc_msgSend(WeakRetained, "performMoveActionWithNotes:completion:", v6, v4);

}

void sub_1000AC588(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;

  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "presentationSourceRectForCell:", *(_QWORD *)(a1 + 32));
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  v14 = objc_loadWeakRetained(v3);
  objc_msgSend(v14, "performCollaborationActionWithNote:forceShareSheet:sourceView:sourceRect:completion:", *(_QWORD *)(a1 + 40), 1, v14, v4, v7, v9, v11, v13);

}

void sub_1000AC954(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

void sub_1000AC994(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  void *v6;
  uint64_t v7;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  v7 = *(_QWORD *)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v7, 1));
  objc_msgSend(WeakRetained, "performDeleteActionWithObjects:completion:", v6, v4);

}

void sub_1000ACA44(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "performMoveActionWithFolder:completion:", *(_QWORD *)(a1 + 32), v4);

}

void sub_1000ACA9C(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;

  v3 = (id *)(a1 + 48);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "presentationSourceRectForCell:", *(_QWORD *)(a1 + 32));
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v13 = v12;

  v14 = objc_loadWeakRetained(v3);
  objc_msgSend(v14, "performCollaborationActionWithFolder:forceShareSheet:sourceView:sourceRect:completion:", *(_QWORD *)(a1 + 40), 1, v14, v4, v7, v9, v11, v13);

}

void sub_1000ACD64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id location)
{
  id *v22;
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000ACDA4(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "performRemoveActionWithInvitation:", *(_QWORD *)(a1 + 32));

  v4 = v5;
  if (v5)
  {
    (*((void (**)(id, uint64_t))v5 + 2))(v5, 1);
    v4 = v5;
  }

}

void sub_1000ACE04(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "performReplyActionWithInvitation:", *(_QWORD *)(a1 + 32));

  v4 = v5;
  if (v5)
  {
    (*((void (**)(id, uint64_t))v5 + 2))(v5, 1);
    v4 = v5;
  }

}

void sub_1000AD28C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[128];

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v8;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v8 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(a1 + 40), "togglePinnedForNote:", *(_QWORD *)(*((_QWORD *)&v7 + 1) + 8 * (_QWORD)v6), (_QWORD)v7);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v7, v11, 16);
    }
    while (v4);
  }

}

void sub_1000AD524(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_1000AD54C(uint64_t a1)
{
  id *v1;
  id WeakRetained;
  void *v3;
  _QWORD v4[4];
  id v5;

  v1 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "lockNoteActivity"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000AD600;
  v4[3] = &unk_1005509A0;
  objc_copyWeak(&v5, v1);
  objc_msgSend(v3, "performActivityWithCompletion:", v4);

  objc_destroyWeak(&v5);
}

void sub_1000AD5EC(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000AD600(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setLockNoteActivity:", 0);

}

void sub_1000AD630(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setLockNoteActivity:", 0);

}

uint64_t sub_1000AD88C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000AD8A0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000ADCF0(uint64_t a1, void *a2)
{
  id v3;
  ICFolderListSelectionValidator *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  ICFolderListSelectionValidator *v9;
  ICFolderListSelectionValidator *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  id (*v16)(uint64_t, void *);
  void *v17;
  ICFolderListSelectionValidator *v18;
  uint64_t v19;

  v3 = a2;
  v4 = [ICFolderListSelectionValidator alloc];
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "workerManagedObjectContext"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NoteContext sharedContext](NoteContext, "sharedContext"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "managedObjectContext"));
  v9 = -[ICFolderListSelectionValidator initWithModernContext:htmlContext:](v4, "initWithModernContext:htmlContext:", v6, v8);

  v14 = _NSConcreteStackBlock;
  v15 = 3221225472;
  v16 = sub_1000ADE3C;
  v17 = &unk_100553890;
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 32);
  v18 = v10;
  v19 = v11;
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_compactMap:", &v14));
  objc_msgSend(*(id *)(a1 + 32), "synchronouslyRemoveItemsWithIdentifiers:", v12, v14, v15, v16, v17);
  v13 = *(_QWORD *)(a1 + 40);
  if (v13)
    (*(void (**)(uint64_t, BOOL))(v13 + 16))(v13, objc_msgSend(v3, "count") != 0);

}

id sub_1000ADE3C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "viewControllerManager"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "selectedContainerIdentifiers"));
  LOBYTE(v4) = objc_msgSend(v4, "isSelectionAppropriateForObject:selectedContainerIdentifiers:", v3, v6);

  if ((v4 & 1) != 0)
    v7 = 0;
  else
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));

  return v7;
}

NSManagedObjectID *__cdecl sub_1000AE288(id a1, NSManagedObject *a2)
{
  return -[NSManagedObject objectID](a2, "objectID");
}

uint64_t sub_1000AE290(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((_DWORD)a2)
    objc_msgSend(*(id *)(a1 + 32), "synchronouslyRemoveItemsWithIdentifiers:", *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

uint64_t sub_1000AE2D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if ((_DWORD)a2)
    objc_msgSend(*(id *)(a1 + 32), "synchronouslyRemoveItemsWithIdentifiers:", *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

uint64_t sub_1000AE320(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "performUpdatesIfNeededAndWait");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a2);
  return result;
}

void sub_1000AE450(uint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a3;
  if ((_DWORD)a2)
  {
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
    objc_msgSend(v5, "reloadCellAfterDelayForObjectID:", v6);

  }
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, a2);

}

uint64_t sub_1000AE74C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000AF094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000AF0BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000AF0CC(uint64_t a1)
{

}

void sub_1000AF0D4(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  BOOL v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  id v16;

  v16 = a2;
  v4 = objc_msgSend(v16, "representedElementCategory");
  if (*(_QWORD *)(a1 + 32))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "indexPath"));
    v6 = v5 == *(void **)(a1 + 32);

  }
  else
  {
    v6 = 0;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "diffableDataSource"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "indexPath"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "itemIdentifierForIndexPath:", v8));

  v10 = objc_msgSend(v9, "conformsToProtocol:", &OBJC_PROTOCOL___ICSectionIdentifier);
  if (!v4 && !v6 && (v10 & 1) == 0)
  {
    switch(*(_QWORD *)(a1 + 64))
    {
      case 1:
        objc_msgSend(v16, "frame");
        v12 = v11;
        if (v11 > *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
          goto LABEL_15;
        break;
      case 2:
        objc_msgSend(v16, "frame");
        v12 = v13;
        if (v13 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
          goto LABEL_15;
        break;
      case 4:
        objc_msgSend(v16, "frame");
        v12 = v14;
        if (v14 > *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
          goto LABEL_15;
        break;
      case 8:
        objc_msgSend(v16, "frame");
        v12 = v15;
        if (v15 < *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
        {
LABEL_15:
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2);
          *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v12;
        }
        break;
      default:
        break;
    }
  }

}

uint64_t sub_1000AF414(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "performRenameActionWithFolder:", *(_QWORD *)(a1 + 40));
  return 1;
}

uint64_t sub_1000AF434(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "performShowActivityStreamActionWithFolder:", *(_QWORD *)(a1 + 40));
  return 1;
}

uint64_t sub_1000AF6A8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;

  v1 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
  objc_msgSend(v1, "performDeleteActionWithObjects:completion:", v2, 0);

  return 1;
}

uint64_t sub_1000AF730(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "performMoveActionWithFolder:completion:", *(_QWORD *)(a1 + 40), 0);
  return 1;
}

uint64_t sub_1000AF754(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "cellForItemIdentifier:", v3));

  objc_msgSend(*(id *)(a1 + 32), "performCollaborationActionWithFolder:forceShareSheet:sourceView:sourceRect:completion:", *(_QWORD *)(a1 + 40), 0, v4, 0, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
  return 1;
}

uint64_t sub_1000AF958(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "performLockActionWithNote:", *(_QWORD *)(a1 + 40));
  return 1;
}

uint64_t sub_1000AFC74(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;

  v1 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
  objc_msgSend(v1, "performDeleteActionWithObjects:completion:", v2, 0);

  return 1;
}

uint64_t sub_1000AFCFC(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;

  v1 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v4, 1));
  objc_msgSend(v1, "performMoveActionWithNotes:completion:", v2, 0);

  return 1;
}

uint64_t sub_1000AFD84(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "performPinActionWithNote:", *(_QWORD *)(a1 + 40));
  return 1;
}

uint64_t sub_1000AFDA4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "performCollaborationActionWithNote:forceShareSheet:sourceView:sourceRect:completion:", *(_QWORD *)(a1 + 40), 0, *(_QWORD *)(a1 + 48), 0, CGRectNull.origin.x, CGRectNull.origin.y, CGRectNull.size.width, CGRectNull.size.height);
  return 1;
}

void sub_1000B0C38(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  id v27;
  id v28;

  v3 = a1;
  v4 = a2;
  v5 = objc_autoreleasePoolPush();
  if ((objc_opt_respondsToSelector(v3, "shouldAttemptLaunchTask") & 1) != 0
    && !objc_msgSend(v3, "shouldAttemptLaunchTask"))
  {
    v13 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      sub_100409CA0((uint64_t)v3, v13, v20, v21, v22, v23, v24, v25);
    goto LABEL_12;
  }
  v6 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_100409C3C((uint64_t)v3, v6, v7, v8, v9, v10, v11, v12);

  if ((objc_opt_respondsToSelector(v3, "runLaunchTaskWithCompletionHandler:") & 1) != 0)
  {
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472;
    v26[2] = sub_1000B0E30;
    v26[3] = &unk_10054F8B8;
    v27 = v3;
    v28 = v4;
    objc_msgSend(v27, "runLaunchTaskWithCompletionHandler:", v26);

    objc_autoreleasePoolPop(v5);
    goto LABEL_16;
  }
  if ((objc_opt_respondsToSelector(v3, "runLaunchTask") & 1) != 0)
  {
    objc_msgSend(v3, "runLaunchTask");
    v13 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      sub_100409BD8((uint64_t)v3, v13, v14, v15, v16, v17, v18, v19);
LABEL_12:

    goto LABEL_14;
  }
  +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "__objc_no", "void _ICLaunchTaskRunWithCompletionHandler(__strong id<ICLaunchTask> _Nonnull, void (^__strong _Nonnull)(NSError * _Nullable __strong))", 1, 0, CFSTR("Launch task %@ does not implement either -runLaunchTaskWithCompletionHandler: or -runLaunchTask:"), v3);
LABEL_14:
  objc_autoreleasePoolPop(v5);
  if (v4)
    (*((void (**)(id, _QWORD))v4 + 2))(v4, 0);
LABEL_16:

}

void sub_1000B0E30(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2;
  v4 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    sub_100409D04(a1, v4, v5, v6, v7, v8, v9, v10);

  v11 = *(_QWORD *)(a1 + 40);
  if (v11)
    (*(void (**)(uint64_t, id))(v11 + 16))(v11, v3);

}

void sub_1000B1C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, a2, v4);

  }
}

void sub_1000B2148(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "addObserver:selector:name:object:", *(_QWORD *)(a1 + 32), "textChanged:", UITextFieldTextDidChangeNotification, v10);

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localizedStringForKey:value:table:", CFSTR("Name"), &stru_1005704B8, 0));
  objc_msgSend(v10, "setPlaceholder:", v5);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "view"));
  objc_msgSend(v10, "setAutocapitalizationType:", ICLocalizedCapitalizationStyleForView());

  objc_msgSend(v10, "setClearButtonMode:", 1);
  objc_msgSend(v10, "setReturnKeyType:", 9);
  objc_msgSend(v10, "setEnablesReturnKeyAutomatically:", 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folder"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedTitle"));
  objc_msgSend(v10, "setText:", v9);

  objc_msgSend(*(id *)(a1 + 32), "setTextField:", v10);
}

void sub_1000B2298(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 0);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, _QWORD, id))(v2 + 16))(v2, 0, v3);

  }
}

void sub_1000B2308(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  _QWORD v22[5];
  id v23;
  id v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textField"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "text"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_trimmedString"));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder stringByScrubbingStringForFolderName:](ICFolder, "stringByScrubbingStringForFolderName:", v4));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folder"));
  v24 = 0;
  v7 = objc_msgSend(v6, "isTitleValid:error:", v5, &v24);
  v8 = v24;

  if (!v7)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "userInfo"));
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", NSLocalizedDescriptionKey));
    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectForKeyedSubscript:", NSLocalizedRecoverySuggestionErrorKey));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_1000B2570;
    v22[3] = &unk_100550B38;
    v21 = *(void **)(a1 + 40);
    v22[4] = *(_QWORD *)(a1 + 32);
    v23 = v21;
    objc_msgSend(v18, "ic_showSingleButtonAlertWithTitle:message:handler:", v19, v20, v22);

    goto LABEL_5;
  }
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "folder"));
  objc_msgSend(v9, "undoablySetTitle:", v5);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ic_viewControllerManager"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "noteEditorViewController"));
  objc_msgSend(v12, "resetTextViewUndoManager");

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  v14 = *(void **)(a1 + 32);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "textField"));
  objc_msgSend(v13, "removeObserver:name:object:", v14, UITextFieldTextDidChangeNotification, v15);

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v16 = *(_QWORD *)(a1 + 40);
  if (v16)
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, void *))(v16 + 16))(v16, 1, v17);
LABEL_5:

  }
}

id sub_1000B2570(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1, v3);

  }
  return objc_msgSend(*(id *)(a1 + 32), "performActivityWithCompletion:", 0);
}

void sub_1000B25D8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "textField"));
  objc_msgSend(v1, "selectAll:", 0);

}

void sub_1000B27E0(id a1, NSString *a2)
{
  void *v2;
  uint64_t v3;
  NSString *v4;

  v2 = (void *)UIApp;
  v3 = qword_1005DDE58;
  v4 = a2;
  objc_msgSend(v2, "startedTest:", v3);
  objc_msgSend(UIApp, "failedTest:withFailure:", qword_1005DDE58, v4);

}

void sub_1000B3400(void *a1)
{
  void *v1;
  id v2;

  if (byte_1005DDE88 == 1)
  {
    v1 = (void *)UIApp;
    v2 = a1;
    objc_msgSend(v1, "finishedSubTest:forTest:", CFSTR("ICDelaySubTest"), v2);
    byte_1005DDE88 = 0;
    objc_msgSend(UIApp, "startedSubTest:forTest:", CFSTR("ICAnimationSubTest"), v2);

  }
}

void sub_1000B37DC(id a1)
{
  objc_msgSend(UIApp, "finishedTest:", qword_1005DDE58);
}

void sub_1000B3878(id a1)
{
  if (byte_1005DDE88 == 1)
  {
    objc_msgSend(UIApp, "finishedSubTest:forTest:", CFSTR("ICDelaySubTest"), qword_1005DDE58);
    byte_1005DDE88 = 0;
  }
  else
  {
    objc_msgSend(UIApp, "finishedSubTest:forTest:", CFSTR("ICAnimationSubTest"), qword_1005DDE58);
  }
  _objc_msgSend(UIApp, "finishedTest:extraResults:withTeardownBlock:", qword_1005DDE58, 0, qword_1005DDE68);
}

void sub_1000B3940(id a1)
{
  if (byte_1005DDE88 == 1)
  {
    objc_msgSend(UIApp, "finishedSubTest:forTest:", CFSTR("ICDelaySubTest"), qword_1005DDE58);
    byte_1005DDE88 = 0;
  }
  else
  {
    objc_msgSend(UIApp, "finishedSubTest:forTest:", CFSTR("ICAnimationSubTest"), qword_1005DDE58);
  }
  _objc_msgSend(UIApp, "finishedTest:extraResults:withTeardownBlock:", qword_1005DDE58, 0, qword_1005DDE68);
}

void sub_1000B3B20(id a1)
{
  _objc_msgSend(UIApp, "finishedTest:extraResults:withTeardownBlock:", qword_1005DDE58, 0, qword_1005DDE68);
}

void sub_1000B3B44(id a1)
{
  objc_msgSend(UIApp, "finishedSubTest:forTest:", CFSTR("ICNoteEditorTypingFinishedSubTest"), qword_1005DDE58);
  _objc_msgSend(UIApp, "finishedTest:extraResults:withTeardownBlock:", qword_1005DDE58, 0, qword_1005DDE68);
}

void sub_1000B3C90(id a1)
{
  objc_msgSend(UIApp, "finishedTest:", qword_1005DDE58);
}

void sub_1000B3DC0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if (v3 == (id)1)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mainSplitViewController"));
    objc_msgSend(v4, "hideColumn:", 0);

  }
}

id sub_1000B3E5C(uint64_t a1)
{
  byte_1005DDE71 = 0;
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  objc_msgSend(UIApp, "startedSubTest:forTest:", CFSTR("ICDelaySubTest"), qword_1005DDE58);
  byte_1005DDE88 = 1;
  return _objc_msgSend(*(id *)(a1 + 32), "showAccountsListAnimated:", 1);
}

void sub_1000B3EC8(void *a1, int a2)
{
  id v3;
  void *v4;
  _QWORD v5[4];
  id v6;

  v3 = a1;
  objc_msgSend(UIApp, "startedSubTest:forTest:", CFSTR("ICDelaySubTest"), v3);
  byte_1005DDE88 = 1;
  if (a2)
  {
    v4 = (void *)UIApp;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_1000B96F4;
    v5[3] = &unk_100550110;
    v6 = v3;
    objc_msgSend(v4, "installCACommitCompletionBlock:", v5);

  }
}

void sub_1000B3FF0(uint64_t a1)
{
  dispatch_time_t v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  v2 = dispatch_time(0, 4000000000);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B4088;
  v4[3] = &unk_10054FE80;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v4);

}

void sub_1000B4088(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICApplicationTestingHelper sharedHelper](ICApplicationTestingHelper, "sharedHelper"));
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B4114;
  v4[3] = &unk_10054FE80;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  objc_msgSend(v2, "waitForPostLaunchTasksThenPerformBlock:", v4);

}

void sub_1000B4114(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_folderListScrollView"));
  objc_msgSend(*(id *)(a1 + 32), "performScrollTestForScrollView:withOptions:", v2, *(_QWORD *)(a1 + 40));

}

void sub_1000B41D0(uint64_t a1)
{
  dispatch_time_t v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  v2 = dispatch_time(0, 2000000000);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B4268;
  v5[3] = &unk_10054FE80;
  v3 = *(id *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v5);

}

void sub_1000B4268(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICApplicationTestingHelper sharedHelper](ICApplicationTestingHelper, "sharedHelper"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B42F4;
  v5[3] = &unk_10054FE80;
  v3 = *(id *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v2, "waitForPostLaunchTasksThenPerformBlock:", v5);

}

id sub_1000B42F4(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  _QWORD v5[5];
  unsigned int v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("iterations")));
  v3 = objc_msgSend(v2, "intValue");

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B4394;
  v5[3] = &unk_100553AE8;
  v5[4] = *(_QWORD *)(a1 + 40);
  v6 = v3;
  return objc_msgSend(UIApp, "rotateIfNeeded:completion:", 1, v5);
}

id sub_1000B4394(uint64_t a1)
{
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  return _objc_msgSend(*(id *)(a1 + 32), "rotateToOrientation:iterationsRemaining:completion:", 4, *(unsigned int *)(a1 + 40), &stru_100553AC0);
}

void sub_1000B43DC(id a1)
{
  objc_msgSend(UIApp, "finishedTest:", qword_1005DDE58);
}

void sub_1000B4454(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  dispatch_time_t v4;
  _QWORD block[5];
  id v6;
  _QWORD v7[5];

  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B4548;
  v7[3] = &unk_100550110;
  v7[4] = *(_QWORD *)(a1 + 32);
  v2 = objc_retainBlock(v7);
  v3 = v2;
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = dispatch_time(0, 2000000000);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000B4714;
    block[3] = &unk_100550160;
    block[4] = *(_QWORD *)(a1 + 32);
    v6 = v3;
    dispatch_after(v4, (dispatch_queue_t)&_dispatch_main_q, block);

  }
  else
  {
    ((void (*)(_QWORD *))v2[2])(v2);
  }

}

void sub_1000B4548(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[5];

  v2 = dispatch_time(0, 2000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B45C0;
  block[3] = &unk_100550110;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1000B45C0(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICApplicationTestingHelper sharedHelper](ICApplicationTestingHelper, "sharedHelper"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B4638;
  v3[3] = &unk_100550110;
  v3[4] = *(_QWORD *)(a1 + 32);
  objc_msgSend(v2, "waitForPostLaunchTasksThenPerformBlock:", v3);

}

void sub_1000B4638(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  id v5;

  byte_1005DDE71 = 0;
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  objc_msgSend(UIApp, "startedSubTest:forTest:", CFSTR("ICDelaySubTest"), qword_1005DDE58);
  byte_1005DDE88 = 1;
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if (v3 == (id)1)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mainSplitViewController"));
    objc_msgSend(v4, "showColumn:", 1);

  }
}

void sub_1000B4714(uint64_t a1)
{
  dispatch_time_t v2;
  void *v3;
  _QWORD v4[5];
  id v5;

  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  v2 = dispatch_time(0, 2000000000);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1000B47AC;
  v4[3] = &unk_100550160;
  v3 = *(void **)(a1 + 40);
  v4[4] = *(_QWORD *)(a1 + 32);
  v5 = v3;
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v4);

}

uint64_t sub_1000B47AC(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void *v5;

  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  if (v3 == (id)1)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mainSplitViewController"));
    objc_msgSend(v5, "hideColumn:", 1);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000B4A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  uint64_t v5;
  dispatch_time_t v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 48);
  v2 = v1 - 1;
  if (v1 != 1)
  {
    v4 = os_log_create("com.apple.notes", "Test");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      sub_10040A0D8(v2, v4, v5);

    v6 = dispatch_time(0, (uint64_t)(*(double *)(a1 + 56) * 1000000000.0));
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1000B4B30;
    v9[3] = &unk_100553B10;
    v7 = *(void **)(a1 + 40);
    v9[4] = *(_QWORD *)(a1 + 32);
    v10 = v7;
    v8 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(a1 + 64);
    v12 = *(_QWORD *)(a1 + 72);
    v13 = v8;
    v14 = v2;
    dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, v9);

  }
}

id sub_1000B4B30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "performFlickScrollOnScrollView:duration:delta:delayBetweenScroll:iterations:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 72), *(double *)(a1 + 48), *(double *)(a1 + 64));
}

id sub_1000B4DA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
}

void sub_1000B4DA8(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_notesListScrollView"));
  objc_msgSend(v2, "performScrollTestForScrollView:withOptions:", v3, *(_QWORD *)(a1 + 40));

}

id sub_1000B4E90(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectFolderNamed:", CFSTR("Notes"));
}

void sub_1000B4EA0(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_notesListScrollView"));
  objc_msgSend(v2, "performScrollTestForScrollView:withOptions:", v3, *(_QWORD *)(a1 + 40));

}

void sub_1000B4F64(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B4FFC;
  v8[3] = &unk_100550110;
  v2 = *(void **)(a1 + 40);
  v9 = *(id *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B5004;
  v5[3] = &unk_10054FE80;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v9, "showNotesListWithAccountSelectionBlock:readyBlock:", v8, v5);

}

id sub_1000B4FFC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
}

void sub_1000B5004(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  void *v6;
  dispatch_time_t v7;
  id v8;
  int8x16_t v9;
  _QWORD block[4];
  int8x16_t v11;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("searchQuery")));
  v3 = (void *)v2;
  v4 = CFSTR("a");
  if (v2)
    v4 = (__CFString *)v2;
  v5 = v4;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_viewControllerManager"));
  objc_msgSend(v6, "startSearchWithSearchQueryString:becomeFirstResponder:", v5, 0);

  v7 = dispatch_time(0, 10000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B5104;
  block[3] = &unk_10054FE80;
  v9 = *(int8x16_t *)(a1 + 32);
  v8 = (id)v9.i64[0];
  v11 = vextq_s8(v9, v9, 8uLL);
  dispatch_after(v7, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000B5104(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchController"));

  v3 = objc_opt_class(UIScrollView);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "collectionView"));
  v5 = ICCheckedDynamicCast(v3, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  objc_msgSend(*(id *)(a1 + 32), "performScrollTestForScrollView:withOptions:", v6, *(_QWORD *)(a1 + 40));
}

id sub_1000B5238(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
}

id sub_1000B5240(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  _QWORD v5[5];
  unsigned int v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("iterations")));
  v3 = objc_msgSend(v2, "intValue");

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B52E0;
  v5[3] = &unk_100553AE8;
  v5[4] = *(_QWORD *)(a1 + 40);
  v6 = v3;
  return objc_msgSend(UIApp, "rotateIfNeeded:completion:", 1, v5);
}

id sub_1000B52E0(uint64_t a1)
{
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  return _objc_msgSend(*(id *)(a1 + 32), "rotateToOrientation:iterationsRemaining:completion:", 4, *(unsigned int *)(a1 + 40), &stru_100553B30);
}

void sub_1000B5328(id a1)
{
  objc_msgSend(UIApp, "finishedTest:", qword_1005DDE58);
}

id sub_1000B53A8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
}

void sub_1000B53B0(uint64_t a1)
{
  void *v2;
  int v3;
  void *v4;
  void *v5;
  id v6;
  id v7;

  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v3 = objc_msgSend(v2, "userInterfaceIdiom") != 0;

  sub_1000B3EC8((void *)qword_1005DDE58, v3);
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_notesListScrollView"));
  v7 = 0;
  LOBYTE(v3) = objc_msgSend(v4, "selectFirstNoteInScrollView:errorString:", v5, &v7);
  v6 = v7;

  if ((v3 & 1) == 0)
    objc_msgSend(UIApp, "failedTest:withFailure:", qword_1005DDE58, v6);

}

id sub_1000B54F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
}

void sub_1000B54FC(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  _QWORD *v5;
  void *v6;
  _QWORD v7[4];
  id v8;

  byte_1005DDE71 = 0;
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  sub_1000B3EC8((void *)qword_1005DDE58, 1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "showNewNoteWithApproach:sender:animated:", 2, 0, 1));

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000B55D4;
  v7[3] = &unk_100550110;
  v8 = v3;
  v4 = v3;
  v5 = objc_retainBlock(v7);
  v6 = (void *)qword_1005DDE68;
  qword_1005DDE68 = (uint64_t)v5;

}

void sub_1000B55D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = objc_opt_class(ICNote);
  v3 = ICCheckedDynamicCast(v2, *(_QWORD *)(a1 + 32));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  +[ICNote purgeNote:](ICNote, "purgeNote:", v4);

  v5 = (id)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v5, "saveImmediately");

}

uint64_t sub_1000B56F8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B5728(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[5];

  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_notesListScrollView"));
  v6 = objc_msgSend(v4, "selectFirstNoteInScrollView:errorString:", v5, a2);

  if ((_DWORD)v6 && *(_BYTE *)(a1 + 40))
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000B57D8;
    v8[3] = &unk_100550110;
    v8[4] = *(_QWORD *)(a1 + 32);
    dispatchMainAfterDelay(v8, 0.1);
  }
  return v6;
}

void sub_1000B57D8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
  objc_msgSend(v1, "setEditing:animated:", 1, 0);

}

void sub_1000B5810(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  dispatch_time_t v5;
  _QWORD v6[5];

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000B58D0;
  v6[3] = &unk_100550110;
  v6[4] = *(_QWORD *)(a1 + 32);
  v2 = objc_retainBlock(v6);
  v3 = v2;
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
    objc_msgSend(v4, "setEditing:animated:", 0, 0);

    v5 = dispatch_time(0, 2000000000);
    dispatch_after(v5, (dispatch_queue_t)&_dispatch_main_q, v3);
  }
  else
  {
    ((void (*)(_QWORD *))v2[2])(v2);
  }

}

void sub_1000B58D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  byte_1005DDE71 = 0;
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  sub_1000B3EC8((void *)qword_1005DDE58, 1);
  v2 = objc_opt_class(ICNote);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addNewNote"));
  v5 = ICDynamicCast(v2, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000B59CC;
  v10[3] = &unk_100550110;
  v11 = v6;
  v7 = v6;
  v8 = objc_retainBlock(v10);
  v9 = (void *)qword_1005DDE68;
  qword_1005DDE68 = (uint64_t)v8;

}

void sub_1000B59CC(uint64_t a1)
{
  id v1;

  +[ICNote purgeNote:](ICNote, "purgeNote:", *(_QWORD *)(a1 + 32));
  v1 = (id)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v1, "saveImmediately");

}

uint64_t sub_1000B5AE4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B5B00(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_notesListScrollView"));
  v6 = objc_msgSend(v4, "selectFirstNoteInScrollView:errorString:", v5, a2);

  if ((_DWORD)v6 && *(_BYTE *)(a1 + 40))
    objc_msgSend(*(id *)(a1 + 32), "bringUpKeyboard");
  return v6;
}

void sub_1000B5B6C(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "textView"));

  objc_msgSend(*(id *)(a1 + 32), "performScrollTestForScrollView:withOptions:", v3, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1000B5C54(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B5C70(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInTableView:errorString:", v4, a2);

  return v5;
}

void sub_1000B5CC4(uint64_t a1)
{
  _QWORD *v1;
  void *v2;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B5D54;
  v3[3] = &unk_100550110;
  v3[4] = *(_QWORD *)(a1 + 32);
  v1 = objc_retainBlock(v3);
  v2 = (void *)qword_1005DDE68;
  qword_1005DDE68 = (uint64_t)v1;

  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  sub_1000B3EC8((void *)qword_1005DDE58, 1);
}

void sub_1000B5D54(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
  objc_msgSend(v1, "dismissViewControllerAnimated:completion:", 1, 0);

}

uint64_t sub_1000B5E4C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B5E68(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

id sub_1000B5EBC(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  _QWORD v5[5];
  unsigned int v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("iterations")));
  v3 = objc_msgSend(v2, "intValue");

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B5F5C;
  v5[3] = &unk_100553AE8;
  v5[4] = *(_QWORD *)(a1 + 40);
  v6 = v3;
  return objc_msgSend(UIApp, "rotateIfNeeded:completion:", 1, v5);
}

id sub_1000B5F5C(uint64_t a1)
{
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  return _objc_msgSend(*(id *)(a1 + 32), "rotateToOrientation:iterationsRemaining:completion:", 4, *(unsigned int *)(a1 + 40), &stru_100553BA0);
}

void sub_1000B5FA4(id a1)
{
  objc_msgSend(UIApp, "finishedTest:", qword_1005DDE58);
}

uint64_t sub_1000B607C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectFolderNamed:", CFSTR("Tables"));
  return 1;
}

id sub_1000B60A0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

void sub_1000B60F4(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("iterations")));
  v3 = objc_msgSend(v2, "intValue");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("offset")));
  v5 = objc_msgSend(v4, "intValue");
  if (v5)
    v6 = v5;
  else
    v6 = 20;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_noteEditorViewController"));
  objc_msgSend(v7, "runTableHorizontalScrollPerformanceTest:iterations:offset:", qword_1005DDE58, v3, v6);

}

uint64_t sub_1000B6258(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectFolderNamed:", CFSTR("Tables"));
  return 1;
}

id sub_1000B627C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

void sub_1000B62D0(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("iterations")));
  v3 = objc_msgSend(v2, "intValue");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("offset")));
  v5 = objc_msgSend(v4, "intValue");
  if (v5)
    v6 = v5;
  else
    v6 = 20;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_noteEditorViewController"));
  objc_msgSend(v7, "runScrollPerformanceTest:iterations:offset:", qword_1005DDE58, v3, v6);

}

id sub_1000B63DC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
}

void sub_1000B63E4(uint64_t a1)
{
  dispatch_time_t v2;
  _QWORD block[5];

  v2 = dispatch_time(0, 3000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B645C;
  block[3] = &unk_100550110;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, block);
}

void sub_1000B645C(uint64_t a1)
{
  id v2;

  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  sub_1000B3EC8((void *)qword_1005DDE58, 1);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
  objc_msgSend(v2, "setNoteContainerViewMode:", 1);

}

id sub_1000B655C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectFolderNamed:", CFSTR("Notes"));
}

void sub_1000B656C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_notesGridScrollView"));
  objc_msgSend(*(id *)(a1 + 32), "performScrollTestForScrollView:withOptions:", v2, *(_QWORD *)(a1 + 40));

}

id sub_1000B66D8(uint64_t a1)
{
  byte_1005DDE71 = 0;
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectFolderNamed:", *(_QWORD *)(a1 + 40));
}

id sub_1000B66EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectFolderNamed:", *(_QWORD *)(a1 + 40));
}

void sub_1000B66F8(uint64_t a1)
{
  void *v2;
  void *v3;
  unsigned __int8 v4;
  id v5;
  id v6;

  byte_1005DDE71 = 0;
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  objc_msgSend(UIApp, "startedSubTest:forTest:", CFSTR("ICDelaySubTest"), qword_1005DDE58);
  byte_1005DDE88 = 1;
  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ic_notesListScrollView"));
  v6 = 0;
  v4 = objc_msgSend(v2, "selectFirstNoteInScrollView:errorString:", v3, &v6);
  v5 = v6;

  if ((v4 & 1) == 0)
    objc_msgSend(UIApp, "failedTest:withFailure:", qword_1005DDE58, v5);

}

uint64_t sub_1000B6880(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectFolderNamed:", CFSTR("Inline Sketches"));
  return 1;
}

id sub_1000B68A4(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

void sub_1000B68F8(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("iterations")));
  v3 = objc_msgSend(v2, "intValue");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("offset")));
  v5 = objc_msgSend(v4, "intValue");
  if (v5)
    v6 = v5;
  else
    v6 = 20;

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_noteEditorViewController"));
  objc_msgSend(v7, "runScrollPerformanceTest:iterations:offset:", qword_1005DDE58, v3, v6);

}

uint64_t sub_1000B6A30(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B6A4C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

id sub_1000B6AA0(uint64_t a1)
{
  _QWORD v2[5];
  _QWORD v3[4];
  uint64_t v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B6B30;
  v3[3] = &unk_100550110;
  v4 = *(_QWORD *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000B6B38;
  v2[3] = &unk_100550110;
  v2[4] = v4;
  return objc_msgSend(UIApp, "runTestForKeyboardBringupAndDismissalWithName:withShowKeyboardBlock:withHideKeyboardBlock:withExtraResultsBlock:withCleanupBlock:", qword_1005DDE58, v3, v2, 0, 0);
}

id sub_1000B6B30(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "bringUpKeyboard");
}

id sub_1000B6B38(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dismissKeyboard");
}

uint64_t sub_1000B6BD4(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B6BF0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

id sub_1000B6C44(uint64_t a1)
{
  _QWORD v2[5];
  _QWORD v3[4];
  uint64_t v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B6CD4;
  v3[3] = &unk_100550110;
  v4 = *(_QWORD *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000B6CDC;
  v2[3] = &unk_100550110;
  v2[4] = v4;
  return objc_msgSend(UIApp, "runTestForKeyboardRotationWithName:fromOrientation:withShowKeyboardBlock:withExtraResultsBlock:withCleanupBlock:", qword_1005DDE58, 1, v3, 0, v2);
}

id sub_1000B6CD4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "bringUpKeyboard");
}

id sub_1000B6CDC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dismissKeyboard");
}

uint64_t sub_1000B6D78(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B6D94(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

id sub_1000B6DE8(uint64_t a1)
{
  _QWORD v2[5];
  _QWORD v3[4];
  uint64_t v4;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B6E74;
  v3[3] = &unk_100550110;
  v4 = *(_QWORD *)(a1 + 32);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000B6E7C;
  v2[3] = &unk_100550110;
  v2[4] = v4;
  return objc_msgSend(UIApp, "runTestForKeyboardSplitAndMergeWithName:withShowKeyboardBlock:withExtraResultsBlock:withCleanupBlock:", qword_1005DDE58, v3, 0, v2);
}

id sub_1000B6E74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "bringUpKeyboard");
}

id sub_1000B6E7C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "dismissKeyboard");
}

uint64_t sub_1000B6F24(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B6F54(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  _QWORD v8[5];

  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_notesListScrollView"));
  v6 = objc_msgSend(v4, "selectFirstNoteInScrollView:errorString:", v5, a2);

  if ((_DWORD)v6)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000B6FFC;
    v8[3] = &unk_100550110;
    v8[4] = *(_QWORD *)(a1 + 32);
    dispatchMainAfterDelay(v8, 0.1);
  }
  return v6;
}

void sub_1000B6FFC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD *v8;
  void *v9;
  _QWORD v10[4];
  id v11;

  v2 = objc_opt_class(ICNote);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "addNewNote"));
  v5 = ICDynamicCast(v2, v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000B70CC;
  v10[3] = &unk_100550110;
  v11 = v6;
  v7 = v6;
  v8 = objc_retainBlock(v10);
  v9 = (void *)qword_1005DDE68;
  qword_1005DDE68 = (uint64_t)v8;

}

void sub_1000B70CC(uint64_t a1)
{
  id v1;

  +[ICNote purgeNote:](ICNote, "purgeNote:", *(_QWORD *)(a1 + 32));
  v1 = (id)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v1, "saveImmediately");

}

void sub_1000B7114(uint64_t a1)
{
  id v2;

  byte_1005DDE71 = 0;
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
  objc_msgSend(v2, "createTodoListItem:", 0);

}

void sub_1000B7174(id a1, NSString *a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  void *v4;
  id v5;
  NSString *v6;

  v2 = qword_1005DDE68;
  v3 = *(void (**)(uint64_t))(qword_1005DDE68 + 16);
  v6 = a2;
  v3(v2);
  v4 = (void *)qword_1005DDE68;
  qword_1005DDE68 = 0;

  sub_1000B27E0(v5, v6);
}

uint64_t sub_1000B7264(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B7294(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

void sub_1000B72E8(uint64_t a1)
{
  id v2;

  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  sub_1000B3EC8((void *)qword_1005DDE58, 1);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
  objc_msgSend(v2, "showInkPicker:", 0);

}

void sub_1000B73C4(uint64_t a1)
{
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD v5[4];
  id v6;
  uint64_t v7;
  _QWORD v8[4];
  id v9;

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000B745C;
  v8[3] = &unk_100550110;
  v2 = *(void **)(a1 + 40);
  v9 = *(id *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B7484;
  v5[3] = &unk_10054FE80;
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 32);
  v6 = v3;
  v7 = v4;
  objc_msgSend(v9, "showNotesListWithAccountSelectionBlock:readyBlock:", v8, v5);

}

id sub_1000B745C(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
}

void sub_1000B7484(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  __CFString *v4;
  __CFString *v5;
  id v6;

  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", CFSTR("searchQuery")));
  v3 = (void *)v2;
  v4 = CFSTR("a");
  if (v2)
    v4 = (__CFString *)v2;
  v5 = v4;

  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_viewControllerManager"));
  objc_msgSend(v6, "startSearchWithSearchQueryString:becomeFirstResponder:", v5, 0);

}

uint64_t sub_1000B75FC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

BOOL sub_1000B762C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  _QWORD *v15;
  void *v16;
  _QWORD v18[5];
  id v19;
  _QWORD v20[4];
  id v21;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "rootNoteBrowseViewController"));

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "noteContainer"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "noteContainerAccount"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "defaultFolder"));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICApplicationTestingHelper sharedHelper](ICApplicationTestingHelper, "sharedHelper"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "testNoteIdentifier"));

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "managedObjectContext"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote noteWithIdentifier:includeDeleted:context:](ICNote, "noteWithIdentifier:includeDeleted:context:", v8, 0, v10));

  v12 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "addNewNoteByCopyingNote:toFolder:", v11, v6));

  if (v13)
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_1000B7818;
    v20[3] = &unk_100550110;
    v14 = v13;
    v21 = v14;
    v15 = objc_retainBlock(v20);
    v16 = (void *)qword_1005DDE68;
    qword_1005DDE68 = (uint64_t)v15;

    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1000B7860;
    v18[3] = &unk_10054FE80;
    v18[4] = *(_QWORD *)(a1 + 32);
    v19 = v14;
    dispatchMainAfterDelay(v18, 0.1);

  }
  return v13 != 0;
}

void sub_1000B7818(uint64_t a1)
{
  id v1;

  +[ICNote purgeNote:](ICNote, "purgeNote:", *(_QWORD *)(a1 + 32));
  v1 = (id)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  objc_msgSend(v1, "saveImmediately");

}

uint64_t sub_1000B7860(uint64_t a1)
{
  void *v2;
  void *v3;
  _QWORD v5[5];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  objc_msgSend(v2, "selectNoteWithObjectID:scrollState:startEditing:animated:ensurePresented:", v3, 0, 0, 0, 1);

  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000B7914;
  v5[3] = &unk_100550110;
  v5[4] = *(_QWORD *)(a1 + 32);
  return dispatchMainAfterDelay(v5, 0.1);
}

id sub_1000B7914(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "bringUpKeyboard");
  return _objc_msgSend(*(id *)(a1 + 32), "goToBottomOfNoteInEditor");
}

void sub_1000B793C(uint64_t a1)
{
  NSBundle *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[5];
  id v18;
  void **v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  byte_1005DDE71 = 0;
  objc_msgSend(UIApp, "startedTest:", qword_1005DDE58);
  objc_msgSend(UIApp, "startedSubTest:forTest:", CFSTR("ICNoteEditorTypingSubTest"), qword_1005DDE58);
  v2 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(*(_QWORD *)(a1 + 32)));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "URLForResource:withExtension:", CFSTR("iostypingtest"), CFSTR("recap")));

  v24 = 0;
  v25 = &v24;
  v26 = 0x2050000000;
  v5 = (void *)qword_1005DDE90;
  v27 = qword_1005DDE90;
  if (!qword_1005DDE90)
  {
    v19 = _NSConcreteStackBlock;
    v20 = 3221225472;
    v21 = sub_1000B96FC;
    v22 = &unk_100550C10;
    v23 = &v24;
    sub_1000B96FC((uint64_t)&v19);
    v5 = (void *)v25[3];
  }
  v6 = objc_retainAutorelease(v5);
  _Block_object_dispose(&v24, 8);
  v18 = 0;
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "eventStreamWithFileURL:error:", v4, &v18));
  v8 = v18;
  v9 = v8;
  if (!v7 || v8)
  {
    v15 = (void *)UIApp;
    v16 = qword_1005DDE58;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "localizedDescription"));
    objc_msgSend(v15, "failedTest:withFailure:", v16, v14);
  }
  else
  {
    v24 = 0;
    v25 = &v24;
    v26 = 0x2050000000;
    v10 = (void *)qword_1005DDEA0;
    v27 = qword_1005DDEA0;
    if (!qword_1005DDEA0)
    {
      v19 = _NSConcreteStackBlock;
      v20 = 3221225472;
      v21 = sub_1000B97FC;
      v22 = &unk_100550C10;
      v23 = &v24;
      sub_1000B97FC((uint64_t)&v19);
      v10 = (void *)v25[3];
    }
    v11 = objc_retainAutorelease(v10);
    _Block_object_dispose(&v24, 8);
    v24 = 0;
    v25 = &v24;
    v26 = 0x2050000000;
    v12 = (void *)qword_1005DDEA8;
    v27 = qword_1005DDEA8;
    if (!qword_1005DDEA8)
    {
      v19 = _NSConcreteStackBlock;
      v20 = 3221225472;
      v21 = sub_1000B9850;
      v22 = &unk_100550C10;
      v23 = &v24;
      sub_1000B9850((uint64_t)&v19);
      v12 = (void *)v25[3];
    }
    v13 = objc_retainAutorelease(v12);
    _Block_object_dispose(&v24, 8);
    v14 = (void *)objc_opt_new(v13);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_1000B7C24;
    v17[3] = &unk_100550110;
    v17[4] = *(_QWORD *)(a1 + 32);
    objc_msgSend(v11, "playEventStream:options:completion:", v7, v14, v17);
  }

}

void sub_1000B7C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B7C24(uint64_t a1)
{
  objc_msgSend(UIApp, "finishedSubTest:forTest:", CFSTR("ICNoteEditorTypingSubTest"), qword_1005DDE58);
  byte_1005DDE72 = 1;
  objc_msgSend(UIApp, "startedSubTest:forTest:", CFSTR("ICNoteEditorTypingFinishedSubTest"), qword_1005DDE58);
  return objc_msgSend(*(id *)(a1 + 32), "textViewDidChange");
}

void sub_1000B7C8C(id a1, NSString *a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);
  void *v4;
  id v5;
  NSString *v6;

  v2 = qword_1005DDE68;
  v3 = *(void (**)(uint64_t))(qword_1005DDE68 + 16);
  v6 = a2;
  v3(v2);
  v4 = (void *)qword_1005DDE68;
  qword_1005DDE68 = 0;

  sub_1000B27E0(v5, v6);
}

uint64_t sub_1000B7DB0(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "showAccountsList");
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B7DE0(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

void sub_1000B7E34(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  id v4;

  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "window"));
  v2 = objc_alloc((Class)RPTResizeTestParameters);
  v3 = objc_msgSend(v2, "initWithTestName:window:completionHandler:", qword_1005DDE58, v1, 0);
  objc_msgSend(v3, "setMinimumWindowSize:", 300.0, 300.0);
  objc_msgSend(v3, "setMaximumWindowSize:", 600.0, 600.0);
  +[RPTTestRunner runTestWithParameters:](RPTTestRunner, "runTestWithParameters:", v3);

}

id sub_1000B809C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_selectFolderNamed:", CFSTR("Notes"));
}

void sub_1000B80AC(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _QWORD v10[3];
  _QWORD v11[3];

  v10[0] = CFSTR("iterations");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "scrollIterationsFromDefaults")));
  v11[0] = v4;
  v10[1] = CFSTR("offset");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "scrollOffsetFromDefaults")));
  v11[1] = v5;
  v10[2] = CFSTR("recapBased");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "scrollTestUseRecap")));
  v11[2] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 3));

  LODWORD(v5) = objc_msgSend(*(id *)(a1 + 32), "scrollTestUseFlick");
  v8 = *(void **)(a1 + 32);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ic_notesListScrollView"));
  if ((_DWORD)v5)
    objc_msgSend(v8, "performFlickScrollTestForScrollView:withOptions:", v9, v7);
  else
    objc_msgSend(v8, "performScrollTestForScrollView:withOptions:", v9, v7);

  notify_cancel(a2);
}

uint64_t sub_1000B82E8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "ic_selectLocalModernAccount");
  return 1;
}

id sub_1000B8304(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *(void **)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_notesListScrollView"));
  v5 = objc_msgSend(v3, "selectFirstNoteInScrollView:errorString:", v4, a2);

  return v5;
}

void sub_1000B8358(uint64_t a1, int a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  void *v11;
  _QWORD v12[3];
  _QWORD v13[3];

  v12[0] = CFSTR("iterations");
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "scrollIterationsFromDefaults")));
  v13[0] = v4;
  v12[1] = CFSTR("offset");
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", objc_msgSend(*(id *)(a1 + 32), "scrollOffsetFromDefaults")));
  v13[1] = v5;
  v12[2] = CFSTR("recapBased");
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", objc_msgSend(*(id *)(a1 + 32), "scrollTestUseRecap")));
  v13[2] = v6;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 3));

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_noteEditorViewController"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "textView"));

  v10 = objc_msgSend(*(id *)(a1 + 32), "scrollTestUseFlick");
  v11 = *(void **)(a1 + 32);
  if (v10)
    objc_msgSend(v11, "performFlickScrollTestForScrollView:withOptions:", v9, v7);
  else
    objc_msgSend(v11, "performScrollTestForScrollView:withOptions:", v9, v7);
  notify_cancel(a2);

}

uint64_t sub_1000B8658(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;

  v2 = os_log_create("com.apple.notes", "Test");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10040A174(a1, v2);

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000B86C4(uint64_t a1)
{
  NSObject *v2;
  uint64_t result;

  v2 = os_log_create("com.apple.notes", "Test");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10040A174(a1, v2);

  objc_msgSend(*(id *)(a1 + 40), "setDisabled:", 1);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000B8858(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000B8908(id *a1)
{
  dispatch_time_t v2;
  _QWORD v3[4];
  id v4;
  id v5;

  objc_msgSend(a1[4], "showAccountsList");
  v2 = dispatch_time(0, 500000000);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B89B0;
  v3[3] = &unk_100553C78;
  v4 = a1[5];
  v5 = a1[6];
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v3);

}

void sub_1000B89B0(uint64_t a1)
{
  uint64_t v2;
  dispatch_time_t v3;
  _QWORD block[4];
  id v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  v3 = dispatch_time(0, 3000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B8A4C;
  block[3] = &unk_10054FFA8;
  v5 = *(id *)(a1 + 40);
  dispatch_after(v3, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000B8A4C(uint64_t a1)
{
  id v2;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(+[ICApplicationTestingHelper sharedHelper](ICApplicationTestingHelper, "sharedHelper"));
    objc_msgSend(v2, "waitForPostLaunchTasksThenPerformBlock:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1000B8B30(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  dispatch_time_t v7;
  _QWORD block[4];
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
  objc_msgSend(v2, "setNoteContainerViewMode:", 1);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v4 = objc_msgSend(v3, "userInterfaceIdiom");

  if (v4 == (id)1)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ic_viewControllerManager"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "mainSplitViewController"));
    objc_msgSend(v6, "hideColumn:", 0);

  }
  v7 = dispatch_time(0, 2000000000);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000B8C34;
  block[3] = &unk_10054FFA8;
  v9 = *(id *)(a1 + 40);
  dispatch_after(v7, (dispatch_queue_t)&_dispatch_main_q, block);

}

void sub_1000B8C34(uint64_t a1)
{
  id v2;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(+[ICApplicationTestingHelper sharedHelper](ICApplicationTestingHelper, "sharedHelper"));
    objc_msgSend(v2, "waitForPostLaunchTasksThenPerformBlock:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1000B8D84(id *a1)
{
  dispatch_time_t v2;
  _QWORD v3[4];
  id v4;
  id v5;
  id v6;
  id v7;

  objc_msgSend(a1[4], "showAccountsList");
  v2 = dispatch_time(0, 500000000);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B8E54;
  v3[3] = &unk_100553CC8;
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, v3);

}

void sub_1000B8E54(uint64_t a1)
{
  uint64_t v2;
  char v3;
  id v4;
  uint64_t v5;
  dispatch_time_t v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;
  id v11;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_6;
  v11 = 0;
  v3 = (*(uint64_t (**)(uint64_t, id *))(v2 + 16))(v2, &v11);
  v4 = v11;
  if ((v3 & 1) != 0 || (v5 = *(_QWORD *)(a1 + 40)) == 0)
  {

LABEL_6:
    v6 = dispatch_time(0, 2000000000);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000B8F58;
    v7[3] = &unk_100553CA0;
    v8 = *(id *)(a1 + 48);
    v9 = *(id *)(a1 + 40);
    v10 = *(id *)(a1 + 56);
    dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, v7);

    v4 = v8;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, id))(v5 + 16))(v5, v4);
LABEL_7:

}

void sub_1000B8F58(uint64_t a1)
{
  uint64_t v2;
  char v3;
  id v4;
  uint64_t v5;
  dispatch_time_t v6;
  _QWORD v7[4];
  id v8;
  id v9;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_6;
  v9 = 0;
  v3 = (*(uint64_t (**)(uint64_t, id *))(v2 + 16))(v2, &v9);
  v4 = v9;
  if ((v3 & 1) != 0 || (v5 = *(_QWORD *)(a1 + 40)) == 0)
  {

LABEL_6:
    v6 = dispatch_time(0, 2000000000);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    v7[2] = sub_1000B9034;
    v7[3] = &unk_10054FFA8;
    v8 = *(id *)(a1 + 48);
    dispatch_after(v6, (dispatch_queue_t)&_dispatch_main_q, v7);
    v4 = v8;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t, id))(v5 + 16))(v5, v4);
LABEL_7:

}

void sub_1000B9034(uint64_t a1)
{
  id v2;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(+[ICApplicationTestingHelper sharedHelper](ICApplicationTestingHelper, "sharedHelper"));
    objc_msgSend(v2, "waitForPostLaunchTasksThenPerformBlock:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1000B94F8(id a1)
{
  id v1;
  void *v2;

  v1 = objc_msgSend(objc_alloc((Class)NSSet), "initWithObjects:", CFSTR("ICScrollAccountsList"), CFSTR("ICScrollAccountsListRecap"), CFSTR("ICScrollNotesList"), CFSTR("ICScrollEnglishNotesListRecap"), CFSTR("ICScrollNote"), CFSTR("ICScrollNoteRecap"), CFSTR("ICScrollTableHorizontally"), CFSTR("ICScrollTableVertically"), CFSTR("ICScrollNotesGrid"), CFSTR("ICScrollNotesGridRecap"), 0);
  v2 = (void *)qword_1005DDE78;
  qword_1005DDE78 = (uint64_t)v1;

}

void sub_1000B9654(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  _QWORD v3[5];
  id v4;
  uint64_t v5;
  int v6;

  v1 = 4;
  if (*(_QWORD *)(a1 + 48) != 1)
    v1 = 1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000B96DC;
  v3[3] = &unk_100553D38;
  v2 = *(void **)(a1 + 40);
  v3[4] = *(_QWORD *)(a1 + 32);
  v5 = v1;
  v6 = *(_DWORD *)(a1 + 56);
  v4 = v2;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);

}

id sub_1000B96DC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "rotateToOrientation:iterationsRemaining:completion:", *(_QWORD *)(a1 + 48), (*(_DWORD *)(a1 + 56) - 1), *(_QWORD *)(a1 + 40));
}

void sub_1000B96F4(uint64_t a1)
{
  sub_1000B3400(*(void **)(a1 + 32));
}

void sub_1000B96FC(uint64_t a1)
{
  sub_1000B9750();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = objc_getClass("RCPEventStream");
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1005DDE90 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    sub_10040A208();
    sub_1000B9750();
  }
}

void sub_1000B9750()
{
  char *v0;
  char *v1;
  __int128 v2;
  uint64_t v3;

  v1 = 0;
  if (!qword_1005DDE98)
  {
    v2 = off_100553D80;
    v3 = 0;
    qword_1005DDE98 = _sl_dlopen(&v2, &v1);
  }
  v0 = v1;
  if (!qword_1005DDE98)
  {
    v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }
  if (v1)
LABEL_7:
    free(v0);
}

Class sub_1000B97FC(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1000B9750();
  result = objc_getClass("RCPInlinePlayer");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1005DDEA0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_10040A22C();
    return (Class)sub_1000B9850(v3);
  }
  return result;
}

Class sub_1000B9850(uint64_t a1)
{
  Class result;
  uint64_t v3;

  sub_1000B9750();
  result = objc_getClass("RCPPlayerPlaybackOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    qword_1005DDEA8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  else
  {
    v3 = sub_10040A250();
    return (Class)sub_1000B98A4(v3);
  }
  return result;
}

id sub_1000B98A4(void *a1, const char *a2)
{
  uint64_t v2;

  return objc_msgSend(a1, "timeIntervalSinceDate:", *(_QWORD *)(v2 + 32));
}

void sub_1000B9DA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  id v10;

  v10 = a2;
  v5 = a3;
  if (v10)
  {
    objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", 0, 1);
    v6 = *(void **)(a1 + 40);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectID"));
    objc_msgSend(v6, "selectContainerWithIdentifier:usingRootViewController:deferUntilDataLoaded:animated:", v7, 1, 0, 0);

  }
  v8 = *(_QWORD *)(a1 + 56);
  if (v8)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "activityType"));
    (*(void (**)(uint64_t, BOOL, void *))(v8 + 16))(v8, v10 != 0, v9);

  }
}

void sub_1000BA334(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

void sub_1000BA54C(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount allActiveCloudKitAccountsInContext:](ICAccount, "allActiveCloudKitAccountsInContext:", *(_QWORD *)(a1 + 32)));
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        +[ICHashtag dedupeHashtagsInAccount:](ICHashtag, "dedupeHashtagsInAccount:", *(_QWORD *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5));
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

id sub_1000BB3A0(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

UIMenu *sub_1000BB3A8(uint64_t a1)
{
  return +[UIMenu menuWithTitle:image:identifier:options:children:](UIMenu, "menuWithTitle:image:identifier:options:children:", &stru_1005704B8, 0, 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_1000BB600(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v3, "browseAttachmentsCollectionView:didSelectAttachment:indexPath:", v2, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1000BB7B8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16;
  void *v17;
  void *v18;
  _BYTE v19[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "changesFromFetchedResultsController", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v19, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v13;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v13 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
        switch((unint64_t)objc_msgSend(v7, "type"))
        {
          case 1uLL:
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "theNewIndexPath"));
            v17 = v9;
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v17, 1));
            objc_msgSend(v8, "insertItemsAtIndexPaths:", v10);
            goto LABEL_11;
          case 2uLL:
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "indexPath"));
            v18 = v9;
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1));
            objc_msgSend(v8, "deleteItemsAtIndexPaths:", v10);
            goto LABEL_11;
          case 3uLL:
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "indexPath"));
            v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "theNewIndexPath"));
            objc_msgSend(v8, "moveItemAtIndexPath:toIndexPath:", v9, v10);
            goto LABEL_11;
          case 4uLL:
            v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
            v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "indexPath"));
            v16 = v9;
            v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v16, 1));
            objc_msgSend(v8, "reloadItemsAtIndexPaths:", v10);
LABEL_11:

            break;
          default:
            continue;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v19, 16);
    }
    while (v4);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "changesFromFetchedResultsController"));
  objc_msgSend(v11, "removeAllObjects");

}

id sub_1000BBA2C(uint64_t a1)
{
  id result;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "setPerformingBatchUpdatesFromFetchedResultsController:", 0);
  result = objc_msgSend(*(id *)(a1 + 32), "reloadDataAfterBatchUpdates");
  if ((_DWORD)result)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
    objc_msgSend(v3, "reloadData");

    return _objc_msgSend(*(id *)(a1 + 32), "setReloadDataAfterBatchUpdates:", 0);
  }
  return result;
}

void sub_1000BC280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000BC2AC(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = objc_msgSend(WeakRetained, "thumbnailLayout");
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "collectionView", 0));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "visibleCells"));

    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v12;
      do
      {
        v9 = 0;
        do
        {
          if (*(_QWORD *)v12 != v8)
            objc_enumerationMutation(v5);
          objc_msgSend(*(id *)(*((_QWORD *)&v11 + 1) + 8 * (_QWORD)v9), "setThumbnailLayout:", v3);
          v9 = (char *)v9 + 1;
        }
        while (v7 != v9);
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v11, v15, 16);
      }
      while (v7);
    }

    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "contextInteraction"));
    objc_msgSend(v10, "dismissMenu");

  }
}

void sub_1000BCDD8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v1, "ic_save");

}

void sub_1000BD7B4(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v1, "ic_save");

}

void sub_1000BEB40(uint64_t a1)
{
  objc_class *v2;
  NSString *v3;
  NSBundle *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;

  v2 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
  v3 = NSStringFromClass(v2);
  v12 = (id)objc_claimAutoreleasedReturnValue(v3);
  v4 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(*(_QWORD *)(a1 + 32)));
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "loadNibNamed:owner:options:", v12, *(_QWORD *)(a1 + 32), 0));

  v7 = objc_opt_class(ICNoteResultsGalleryCollectionViewCell);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "firstObject"));
  v9 = ICDynamicCast(v7, v8);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)qword_1005DDEB0;
  qword_1005DDEB0 = v10;

  objc_msgSend((id)qword_1005DDEB0, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
}

void sub_1000BF11C(id a1)
{
  ICCollaborationUIController *v1;
  void *v2;

  v1 = objc_alloc_init(ICCollaborationUIController);
  v2 = (void *)qword_1005DDEC8;
  qword_1005DDEC8 = (uint64_t)v1;

}

void sub_1000BF3C4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  os_log_t v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICCollaborationController sharedInstance](ICCollaborationController, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForShare:accountID:context:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)));

  if (v3 && (v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cloudAccount")), v4, v4))
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "URL"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "cloudAccount"));
    v7 = (os_log_t)objc_claimAutoreleasedReturnValue(+[ICInvitation makeInvitationIfNeededWithShareURL:account:context:](ICInvitation, "makeInvitationIfNeededWithShareURL:account:context:", v5, v6, *(_QWORD *)(a1 + 48)));

    -[NSObject setRootObject:](v7, "setRootObject:", v3);
    -[NSObject updateFromShare:](v7, "updateFromShare:", *(_QWORD *)(a1 + 32));
    v8 = os_log_create("com.apple.notes", "Collaboration");
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      sub_10040A63C((id *)(a1 + 32), v3, v8);

    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "associatedNoteParticipants", 0));
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v15;
      do
      {
        v13 = 0;
        do
        {
          if (*(_QWORD *)v15 != v12)
            objc_enumerationMutation(v9);
          objc_msgSend(*(id *)(a1 + 48), "deleteObject:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * (_QWORD)v13));
          v13 = (char *)v13 + 1;
        }
        while (v11 != v13);
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
      }
      while (v11);
    }

    objc_msgSend(*(id *)(a1 + 48), "ic_save");
  }
  else
  {
    v7 = os_log_create("com.apple.notes", "Collaboration");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10040A5A4((id *)(a1 + 32));

  }
}

ICAccount *__cdecl sub_1000BFCE0(ICCollaborationUIController *self, SEL a2)
{
  return self->_account;
}

void sub_1000C0318(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v8;

  v8 = a2;
  if (v8)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_viewControllerManager"));

    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectID"));
    objc_msgSend(v4, "selectContainerWithIdentifier:usingRootViewController:deferUntilDataLoaded:animated:", v5, 1, 1, 1);

  }
  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, void *))(v6 + 16))(v6, 1, v7);

  }
}

NSString *__cdecl sub_1000C05C4(id a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Archiving %lu of %lu Notes"), &stru_1005704B8, 0));
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v6, a2, a3));

  return (NSString *)v7;
}

void sub_1000C07CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v17 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C07F0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000C0800(uint64_t a1)
{

}

void sub_1000C0808(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id obj;

  v3 = (void *)a1[4];
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "archiveExporter"));
  v6 = a1[5];
  v7 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v7 + 40);
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "createArchiveForObjects:progress:error:", v6, v4, &obj));

  objc_storeStrong((id *)(v7 + 40), obj);
  v9 = *(_QWORD *)(a1[6] + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

}

uint64_t sub_1000C08A8(uint64_t a1, void *a2)
{
  uint64_t result;

  if ((objc_msgSend(a2, "isCancelled") & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "showResultForArchiveURL:andError:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));
  return result;
}

void sub_1000C0BDC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  unsigned __int8 v4;
  id v5;
  id v6;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "archiveExporter"));
  v3 = *(_QWORD *)(a1 + 40);
  v6 = 0;
  v4 = objc_msgSend(v2, "removeArchiveAt:error:", v3, &v6);
  v5 = v6;

  if ((v4 & 1) == 0)
    NSLog(CFSTR("Error removing archive: %@"), v5);

}

void sub_1000C1540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C1558(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000C1568(uint64_t a1)
{

}

uint64_t sub_1000C1570(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

void sub_1000C170C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "indexPathsForVisibleSupplementaryElementsOfKind:", UICollectionElementKindSectionHeader));

    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v4 = v3;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v16;
      do
      {
        for (i = 0; i != v6; i = (char *)i + 1)
        {
          if (*(_QWORD *)v16 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)i);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView", (_QWORD)v15));
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "supplementaryViewForElementKind:atIndexPath:", UICollectionElementKindSectionHeader, v9));

          v12 = objc_opt_class(ICSearchCollectionViewHeaderView);
          v13 = ICDynamicCast(v12, v11);
          v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          objc_msgSend(*(id *)(a1 + 32), "updateHeaderView:forIndexPath:usingSnapshot:", v14, v9, *(_QWORD *)(a1 + 40));

        }
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      }
      while (v6);
    }

  }
}

uint64_t sub_1000C1898(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "diffableDataSource"));
  objc_msgSend(v2, "applySnapshot:animatingDifferences:", *(_QWORD *)(a1 + 40), 1);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t sub_1000C18DC(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "diffableDataSource"));
  objc_msgSend(v2, "applySnapshotUsingReloadData:", *(_QWORD *)(a1 + 40));

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1000C1DE4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  id v6;
  _QWORD *v7;
  id v8;
  _QWORD *v9;
  id v10;
  void ***v11;
  uint64_t v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  void *v17;
  uint64_t v18;
  id v19;
  _QWORD v20[5];
  id v21;
  _QWORD v22[5];
  id v23;
  _QWORD v24[5];
  id v25;

  v3 = a2;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1000C1FA0;
  v24[3] = &unk_10054FE80;
  v24[4] = *(_QWORD *)(a1 + 32);
  v4 = v3;
  v25 = v4;
  v5 = objc_retainBlock(v24);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1000C2050;
  v22[3] = &unk_10054FE80;
  v22[4] = *(_QWORD *)(a1 + 32);
  v6 = v4;
  v23 = v6;
  v7 = objc_retainBlock(v22);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_1000C219C;
  v20[3] = &unk_10054FE80;
  v20[4] = *(_QWORD *)(a1 + 32);
  v8 = v6;
  v21 = v8;
  v9 = objc_retainBlock(v20);
  v14 = _NSConcreteStackBlock;
  v15 = 3221225472;
  v16 = sub_1000C2208;
  v17 = &unk_10054FE80;
  v18 = *(_QWORD *)(a1 + 32);
  v10 = v8;
  v19 = v10;
  v11 = objc_retainBlock(&v14);
  objc_msgSend(v10, "deleteAllItems", v14, v15, v16, v17, v18);
  v12 = *(_QWORD *)(a1 + 40);
  v13 = v5;
  if (!v12)
    goto LABEL_5;
  v13 = v5;
  if (v12 == 2)
    goto LABEL_5;
  if (v12 == 1)
  {
    ((void (*)(_QWORD *))v5[2])(v5);
    v13 = v7;
LABEL_5:
    ((void (*)(void))v13[2])();
    ((void (*)(_QWORD *))v9[2])(v9);
    ((void (*)(void ***))v11[2])(v11);
  }

}

void sub_1000C1FA0(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchResults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "topHitResults"));
  v4 = objc_msgSend(v3, "count");

  if (v4)
  {
    v5 = *(void **)(a1 + 32);
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchResults"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "topHitResults"));
    objc_msgSend(v5, "insertItems:intoSection:snapshot:", v6, CFSTR("ICNoteSearchDataSourceTopHitsSectionIdentifier"), *(_QWORD *)(a1 + 40));

  }
}

void sub_1000C2050(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  const __CFString *v10;

  if (objc_msgSend(*(id *)(a1 + 32), "integratesSuggestions")
    && (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "searchResults")),
        v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "suggestions")),
        v4 = objc_msgSend(v3, "count"),
        v3,
        v2,
        v4))
  {
    v5 = *(void **)(a1 + 32);
    v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "searchResults"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "suggestions"));
    objc_msgSend(v5, "insertItems:intoSection:snapshot:", v6, CFSTR("ICNoteSearchDataSourceSuggestionsSectionIdentifier"), *(_QWORD *)(a1 + 40));

  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "currentSnapshot"));
    v10 = CFSTR("ICNoteSearchDataSourceSuggestionsSectionIdentifier");
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
    objc_msgSend(v7, "deleteSectionsWithIdentifiers:", v8);

  }
}

void sub_1000C219C(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchResults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "noteResults"));
  objc_msgSend(v2, "insertItems:intoSection:snapshot:", v3, CFSTR("ICNoteSearchDataSourceNoteSectionIdentifier"), *(_QWORD *)(a1 + 40));

}

void sub_1000C2208(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "searchResults"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "attachmentResults"));
  objc_msgSend(v2, "insertItems:intoSection:snapshot:", v3, CFSTR("ICNoteSearchDataSourceAttachmentSectionIdentifier"), *(_QWORD *)(a1 + 40));

}

id sub_1000C32F0(uint64_t a1, char a2)
{
  id result;

  if ((a2 & 1) != 0)
    return _objc_msgSend(*(id *)(a1 + 32), "convertToSmartFolderWithCompletion:", *(_QWORD *)(a1 + 40));
  result = *(id *)(a1 + 40);
  if (result)
    return (id)(*((uint64_t (**)(id, _QWORD, _QWORD))result + 2))(result, 0, 0);
  return result;
}

uint64_t sub_1000C331C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(result + 16))(result, 0, 0);
  return result;
}

uint64_t sub_1000C3C6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, 0);
  return result;
}

uint64_t sub_1000C3C84(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_1000C3C9C(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  objc_msgSend(v2, "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);

}

void sub_1000C4554(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectID"));
  objc_msgSend(v2, "addObject:", v3);

}

void sub_1000C4640(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernViewContext"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "userInfo"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", ICThumbnailCacheObjectIDKey));
  v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectWithID:", v4));

  v5 = objc_opt_class(ICBaseAttachment);
  if ((objc_opt_isKindOfClass(v11, v5) & 1) != 0)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "note"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectID"));

    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  v8 = objc_opt_class(ICNote);
  if ((objc_opt_isKindOfClass(v11, v8) & 1) != 0)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectID"));
    if (v7)
    {
LABEL_6:
      v9 = *(void **)(a1 + 32);
      v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v7));
      objc_msgSend(v9, "updateCellsForManagedObjectIDs:updateTextAndStatus:updateThumbnails:", v10, 1, 1);

    }
  }
LABEL_7:

}

id sub_1000C48B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateNoteSelectionAnimated:", 0);
}

id sub_1000C4948(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updatePreparedCells");
  return _objc_msgSend(*(id *)(a1 + 32), "dismissContextMenu");
}

BOOL sub_1000C4B14(id a1, UIInteraction *a2, unint64_t a3, BOOL *a4)
{
  UIInteraction *v4;
  uint64_t v5;
  uint64_t v6;
  char isKindOfClass;

  v4 = a2;
  v6 = objc_opt_class(UIContextMenuInteraction, v5);
  isKindOfClass = objc_opt_isKindOfClass(v4, v6);

  return isKindOfClass & 1;
}

void sub_1000C4FD4(uint64_t a1)
{
  NSObject *v2;
  void *v3;

  v2 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10040A6F4(v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICMedia predicateForVisibleObjects](ICMedia, "predicateForVisibleObjects"));
  +[ICMedia ic_enumerateObjectsMatchingPredicate:sortDescriptors:relationshipKeyPathsForPrefetching:context:batchSize:saveAfterBatch:usingBlock:](ICMedia, "ic_enumerateObjectsMatchingPredicate:sortDescriptors:relationshipKeyPathsForPrefetching:context:batchSize:saveAfterBatch:usingBlock:", v3, 0, 0, *(_QWORD *)(a1 + 32), 10, 1, &stru_100553FF0);

}

void sub_1000C507C(id a1, ICMedia *a2, BOOL *a3)
{
  ICMedia *v3;
  NSObject *v4;

  v3 = a2;
  if ((-[ICMedia isUnsupported](v3, "isUnsupported") & 1) == 0
    && (-[ICMedia hasFile](v3, "hasFile") & 1) == 0)
  {
    v4 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      sub_10040A734(v3, v4);

    -[ICMedia setNeedsToBeFetchedFromCloud:](v3, "setNeedsToBeFetchedFromCloud:", 1);
    -[ICMedia clearServerRecords](v3, "clearServerRecords");
  }

}

void sub_1000C56A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000C56C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000C56D4(uint64_t a1)
{

}

void sub_1000C56DC(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id obj;
  uint64_t v11;

  v3 = (void *)a1[4];
  v11 = a1[5];
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v11, 1));
  v6 = *(_QWORD *)(a1[7] + 8);
  obj = *(id *)(v6 + 40);
  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "createArchiveForObjects:progress:error:", v5, v4, &obj));

  objc_storeStrong((id *)(v6 + 40), obj);
  v8 = *(_QWORD *)(a1[6] + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_1000C57C0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id obj;
  const __CFString *v14;
  void *v15;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    obj = *(id *)(v3 + 40);
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:", 0, 0, 0, &obj));
    objc_storeStrong((id *)(v3 + 40), obj);
    if (v4)
    {
      v5 = objc_msgSend(objc_alloc((Class)NSUserActivity), "initWithActivityType:", CFSTR("com.apple.Pages.NoteImport"));
      v14 = CFSTR("archive_bookmark");
      v15 = v4;
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v15, &v14, 1));
      objc_msgSend(v5, "setUserInfo:", v6);

      v7 = objc_alloc((Class)LSApplicationRecord);
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICPagesHandoffManager bundleIdentifierForPages](ICPagesHandoffManager, "bundleIdentifierForPages"));
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v12 = *(id *)(v9 + 40);
      v10 = objc_msgSend(v7, "initWithBundleIdentifier:allowPlaceholder:error:", v8, 0, &v12);
      objc_storeStrong((id *)(v9 + 40), v12);

      if (v10)
      {
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
        objc_msgSend(v11, "openUserActivity:usingApplicationRecord:configuration:completionHandler:", v5, v10, 0, 0);

      }
    }

  }
}

id sub_1000C5FCC(uint64_t a1)
{
  +[ICMedia enumerateMediaInContext:batchSize:saveAfterBatch:usingBlock:](ICMedia, "enumerateMediaInContext:batchSize:saveAfterBatch:usingBlock:", *(_QWORD *)(a1 + 32), 10, 0, &stru_100554098);
  return +[ICAttachmentPreviewImage enumerateAttachmentPreviewImagesInContext:batchSize:saveAfterBatch:usingBlock:](ICAttachmentPreviewImage, "enumerateAttachmentPreviewImagesInContext:batchSize:saveAfterBatch:usingBlock:", *(_QWORD *)(a1 + 32), 10, 0, &stru_1005540D8);
}

void sub_1000C6024(id a1, ICMedia *a2, BOOL *a3)
{
  -[ICMedia updateFlagToExcludeFromCloudBackup](a2, "updateFlagToExcludeFromCloudBackup", a3);
}

void sub_1000C602C(id a1, ICAttachmentPreviewImage *a2, BOOL *a3)
{
  -[ICAttachmentPreviewImage updateFlagToExcludeFromCloudBackup](a2, "updateFlagToExcludeFromCloudBackup", a3);
}

UIColor *__cdecl sub_1000C6300(id a1, UITraitCollection *a2)
{
  void *v2;

  if ((-[UITraitCollection ic_isDark](a2, "ic_isDark") & 1) != 0)
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondarySystemBackgroundColor](UIColor, "secondarySystemBackgroundColor"));
  else
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor whiteColor](UIColor, "whiteColor"));
  return (UIColor *)v2;
}

void sub_1000C6504(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  id v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v4 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000C657C;
  v7[3] = &unk_10054FE80;
  v5 = *(_QWORD *)(a1 + 32);
  v8 = v4;
  v9 = v5;
  v6 = v4;
  performBlockOnMainThreadAndWait(v7);

}

void sub_1000C657C(uint64_t a1)
{
  void *v2;
  uint64_t *v3;
  NSObject *v4;
  void (**v5)(_QWORD, _QWORD);
  void *v6;
  unsigned int v7;
  void *v8;
  void (**v9)(id, uint64_t);

  v3 = (uint64_t *)(a1 + 32);
  v2 = *(void **)(a1 + 32);
  if (v2 && objc_msgSend(v2, "code") == (id)7)
  {
    if (*v3)
    {
      v4 = os_log_create("com.apple.notes", "QuickNote");
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        sub_10040A930(v3, v4);

    }
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "launchBlock"));
    v5[2](v5, 2);

  }
  else
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICQuickNoteSessionManager sharedManager](ICQuickNoteSessionManager, "sharedManager"));
    v7 = objc_msgSend(v6, "isQuickNoteSessionActive");

    if (v7)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICQuickNoteSessionManager sharedManager](ICQuickNoteSessionManager, "sharedManager"));
      objc_msgSend(v8, "endSession");

    }
    v9 = (void (**)(id, uint64_t))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "launchBlock"));
    v9[2](v9, 1);

  }
}

Class sub_1000C694C()
{
  Class Class;

  sub_1000C698C();
  Class = objc_getClass("FBSOpenApplicationService");
  qword_1005DDEE8 = (uint64_t)Class;
  if (!Class)
    sub_1004045C4();
  off_1005CDE40 = (uint64_t (*)())sub_1000C69CC;
  return Class;
}

void *sub_1000C698C()
{
  void *result;

  result = (void *)qword_1005DDEF0;
  if (!qword_1005DDEF0)
  {
    result = dlopen("/System/Library/PrivateFrameworks/FrontBoardServices.framework/FrontBoardServices", 2);
    qword_1005DDEF0 = (uint64_t)result;
    if (!result)
      sub_1004045EC();
  }
  return result;
}

id sub_1000C69CC()
{
  return (id)qword_1005DDEE8;
}

id sub_1000C69D8()
{
  void *v0;
  id *v1;

  v0 = sub_1000C698C();
  v1 = (id *)dlsym(v0, "FBSOpenApplicationOptionKeyUnlockDevice");
  if (!v1)
    sub_100404614();
  objc_storeStrong((id *)&qword_1005DDED0, *v1);
  off_1005CDE48 = (uint64_t (*)())sub_1000C6A30;
  return (id)qword_1005DDED0;
}

id sub_1000C6A30()
{
  return (id)qword_1005DDED0;
}

id sub_1000C6A3C()
{
  void *v0;
  id *v1;

  v0 = sub_1000C698C();
  v1 = (id *)dlsym(v0, "FBSOpenApplicationOptionKeyPromptUnlockDevice");
  if (!v1)
    sub_10040463C();
  objc_storeStrong((id *)&qword_1005DDED8, *v1);
  off_1005CDE50 = (uint64_t (*)())sub_1000C6A94;
  return (id)qword_1005DDED8;
}

id sub_1000C6A94()
{
  return (id)qword_1005DDED8;
}

id sub_1000C6AA0()
{
  void *v0;
  id *v1;

  v0 = sub_1000C698C();
  v1 = (id *)dlsym(v0, "FBSOpenApplicationOptionKeyPayloadURL");
  if (!v1)
    sub_100404664();
  objc_storeStrong((id *)&qword_1005DDEE0, *v1);
  off_1005CDE58 = (uint64_t (*)())sub_1000C6AF8;
  return (id)qword_1005DDEE0;
}

id sub_1000C6AF8()
{
  return (id)qword_1005DDEE0;
}

Class sub_1000C6B04()
{
  Class Class;

  sub_1000C698C();
  Class = objc_getClass("FBSOpenApplicationOptions");
  qword_1005DDEF8 = (uint64_t)Class;
  if (!Class)
    sub_10040468C();
  off_1005CDE60 = (uint64_t (*)())sub_1000C6B44;
  return Class;
}

id sub_1000C6B44()
{
  return (id)qword_1005DDEF8;
}

void sub_1000C6C04(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  char v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  if (!v3)
    goto LABEL_17;
  v4 = v3;
  v5 = 0;
  v6 = *(_QWORD *)v13;
  do
  {
    for (i = 0; i != v4; i = (char *)i + 1)
    {
      if (*(_QWORD *)v13 != v6)
        objc_enumerationMutation(v2);
      v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
      if (objc_msgSend(v8, "ic_isNotesMigrated", (_QWORD)v12))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerContext"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount accountWithIdentifier:context:](ICAccount, "accountWithIdentifier:context:", v9, v10));

        if (v11
          && (!objc_msgSend(v11, "didChooseToMigrate")
           || !objc_msgSend(v11, "didFinishMigration")
           || (objc_msgSend(v11, "didMigrateOnMac") & 1) == 0))
        {
          v5 = 1;
          objc_msgSend(v11, "setDidChooseToMigrate:", 1);
          objc_msgSend(v11, "setDidFinishMigration:", 1);
          objc_msgSend(v11, "setDidMigrateOnMac:", 1);
        }

      }
    }
    v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
  }
  while (v4);

  if ((v5 & 1) != 0)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "workerContext"));
    objc_msgSend(v2, "ic_saveWithLogDescription:", CFSTR("Fixing hidden iCloud CloudKit account(s)"));
LABEL_17:

  }
}

id sub_1000C6FC0(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  objc_msgSend(v4, "updateAttachmentViewTypeAndPropagateToAttachments:", a2);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "managedObjectContext"));
  objc_msgSend(v6, "ic_save");

  return objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
}

void sub_1000C71C8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = os_log_create("com.apple.notes", "CoreData");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v4 = 138412290;
    v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Note context background task %@ ran out of time to finish in background", (uint8_t *)&v4, 0xCu);
  }

}

void sub_1000C7510(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, void *))(v2 + 16))(v2, 1, v3);

  }
  if (*(_BYTE *)(a1 + 48))
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
    objc_msgSend(v4, "submitAttachmentBrowserTapEvent");

  }
}

void sub_1000C77B4(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shareURL"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "absoluteString"));
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataUsingEncoding:", 4));

  v4 = *(_QWORD *)(a1 + 40);
  if (v4)
    (*(void (**)(uint64_t, id, _QWORD))(v4 + 16))(v4, v5, 0);

}

void sub_1000C7C8C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[5];
  id v8;
  _QWORD v9[4];
  uint64_t v10;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collaborationUIController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingBarButtonItem"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000C7D90;
  v9[3] = &unk_100550110;
  v6 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000C7DE8;
  v7[3] = &unk_100550160;
  v7[4] = v10;
  v8 = v6;
  objc_msgSend(v2, "showCloudSharingControllerForNote:presentingViewController:popoverBarButtonItem:presented:dismissed:", v3, v4, v5, v9, v7);

}

void sub_1000C7D90(uint64_t a1)
{
  id v2;

  if (objc_msgSend(*(id *)(a1 + 32), "contextPathEnum"))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
    objc_msgSend(v2, "popContextPathData");

  }
}

void sub_1000C7DE8(uint64_t a1)
{
  uint64_t v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v2 + 16))(v2, 1, v3);

  }
}

void sub_1000C84F4(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD v8[5];
  _QWORD v9[2];

  v2 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10040AA28(v2);

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment predicateForVisibleObjects](ICAttachment, "predicateForVisibleObjects"));
  v9[0] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment predicateForAllPaperKitBackedAttachments](ICAttachment, "predicateForAllPaperKitBackedAttachments"));
  v9[1] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v9, 2));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate andPredicateWithSubpredicates:](NSCompoundPredicate, "andPredicateWithSubpredicates:", v5));

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000C8654;
  v8[3] = &unk_1005541B8;
  v7 = *(_QWORD *)(a1 + 32);
  v8[4] = *(_QWORD *)(a1 + 40);
  +[ICAttachment ic_enumerateObjectsMatchingPredicate:sortDescriptors:relationshipKeyPathsForPrefetching:context:batchSize:saveAfterBatch:usingBlock:](ICAttachment, "ic_enumerateObjectsMatchingPredicate:sortDescriptors:relationshipKeyPathsForPrefetching:context:batchSize:saveAfterBatch:usingBlock:", v6, 0, 0, v7, 10, 1, v8);

}

void sub_1000C8654(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;

  v3 = a2;
  if ((objc_msgSend(v3, "isUnsupported") & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "paperBundleModel"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "paperBundleURL"));

    if (v5
      && ((objc_msgSend(*(id *)(a1 + 32), "paperBundleIsMissing:", v5) & 1) != 0
       || objc_msgSend(*(id *)(a1 + 32), "paperBundleIsEmpty:", v5)))
    {
      v6 = os_log_create("com.apple.notes", "LaunchTask");
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        sub_10040AA68(v3, v6);

      v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      objc_msgSend(v7, "removeItemAtURL:error:", v5, 0);

      objc_msgSend(v3, "setNeedsToBeFetchedFromCloud:", 1);
      objc_msgSend(v3, "clearServerRecords");
    }

  }
}

void sub_1000C8828(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithTextStyle:scale:](UIImageSymbolConfiguration, "configurationWithTextStyle:scale:", UIFontTextStyleBody, 3));
  v2 = (void *)qword_1005DDF08;
  qword_1005DDF08 = v1;

}

void sub_1000C88D8(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionImageConfiguration"));
  v1 = objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("circle.fill"), v3));
  v2 = (void *)qword_1005DDF18;
  qword_1005DDF18 = v1;

}

void sub_1000C89B0(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionImageConfiguration"));
  v1 = objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("checkmark.circle"), v3));
  v2 = (void *)qword_1005DDF28;
  qword_1005DDF28 = v1;

}

void sub_1000C8A88(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "selectionImageConfiguration"));
  v1 = objc_claimAutoreleasedReturnValue(+[UIImage systemImageNamed:withConfiguration:](UIImage, "systemImageNamed:withConfiguration:", CFSTR("circle"), v3));
  v2 = (void *)qword_1005DDF38;
  qword_1005DDF38 = v1;

}

void sub_1000C912C(id a1)
{
  ICApplicationTestingHelper *v1;
  void *v2;

  v1 = objc_alloc_init(ICApplicationTestingHelper);
  v2 = (void *)qword_1005DDF40;
  qword_1005DDF40 = (uint64_t)v1;

}

void sub_1000C92A0(uint64_t a1)
{
  dispatch_time_t v2;
  id v3;

  v2 = dispatch_time(0, 3000000000);
  dispatch_after(v2, (dispatch_queue_t)&_dispatch_main_q, *(dispatch_block_t *)(a1 + 40));
  v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v3, "removeObserver:name:object:", *(_QWORD *)(a1 + 32), CFSTR("NotesLaunchPostTasksCompleted"), 0);

}

BOOL sub_1000C9658(unint64_t a1, BOOL *a2)
{
  unint64_t v2;

  v2 = vcvtmd_u64_f64((double)NoteObjectMaximumImapSyncableSize * 0.98);
  if (a2)
    *a2 = vabdd_f64((double)a1, (double)v2) < 1000000.0;
  return v2 > a1;
}

void sub_1000C9940(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dimmingView"));
  objc_msgSend(v1, "setAlpha:", 1.0);

}

void sub_1000C9A40(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  id v10;

  objc_msgSend(*(id *)(a1 + 32), "frameOfPresentedViewInContainerView");
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentedView"));
  objc_msgSend(v10, "setFrame:", v3, v5, v7, v9);

}

void sub_1000C9B5C(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "dimmingView"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

id sub_1000C9E38(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 1.0);
}

id sub_1000C9E44(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "completeTransition:", 1);
}

id sub_1000C9E50(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "frame");
  return objc_msgSend(*(id *)(a1 + 32), "setFrame:");
}

id sub_1000C9E7C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "completeTransition:", 1);
}

void sub_1000CA5E0(uint64_t a1)
{
  void *v2;
  id v3;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
    objc_msgSend(*(id *)(a1 + 32), "setProgressIndicatorStartDate:", v2);

    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v3, "progressIndicatorTrackerStartAnimation");
  }
  else
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v3, "progressIndicatorTrackerStopAnimation");
  }

}

void sub_1000CA93C(void *a1)
{
  void *v1;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "statusBarManager"));
  objc_msgSend(v1, "statusBarFrame");

}

void sub_1000CDA98(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  double v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *j;
  void *v14;
  double v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[128];
  _BYTE v32[128];

  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v28;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v28 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v27 + 1) + 8 * (_QWORD)i), "layer"));
        LODWORD(v8) = 1.0;
        objc_msgSend(v7, "setOpacity:", v8);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v27, v32, 16);
    }
    while (v4);
  }

  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v9 = *(id *)(a1 + 40);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v24;
    do
    {
      for (j = 0; j != v11; j = (char *)j + 1)
      {
        if (*(_QWORD *)v24 != v12)
          objc_enumerationMutation(v9);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)j), "layer", (_QWORD)v23));
        LODWORD(v15) = 0;
        objc_msgSend(v14, "setOpacity:", v15);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    }
    while (v11);
  }

  if (objc_msgSend(*(id *)(a1 + 48), "isPresenting"))
  {
    if (*(_BYTE *)(a1 + 176))
      objc_msgSend(*(id *)(a1 + 56), "setFrame:", *(double *)(a1 + 72), *(double *)(a1 + 80), *(double *)(a1 + 88), *(double *)(a1 + 96));
    v16 = *(void **)(a1 + 64);
    if (v16)
    {
      v17 = *(double *)(a1 + 72);
      v18 = *(double *)(a1 + 80);
      v19 = *(double *)(a1 + 88);
      v20 = *(double *)(a1 + 96);
LABEL_24:
      objc_msgSend(v16, "setFrame:", v17, v18, v19, v20, (_QWORD)v23);
      v21 = *(double *)(a1 + 104);
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "layer"));
      objc_msgSend(v22, "setCornerRadius:", v21);

    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 176))
      objc_msgSend(*(id *)(a1 + 56), "setFrame:", *(double *)(a1 + 112), *(double *)(a1 + 120), *(double *)(a1 + 128), *(double *)(a1 + 136));
    v16 = *(void **)(a1 + 64);
    if (v16)
    {
      v17 = *(double *)(a1 + 144);
      v18 = *(double *)(a1 + 152);
      v19 = *(double *)(a1 + 160);
      v20 = *(double *)(a1 + 168);
      goto LABEL_24;
    }
  }
}

void sub_1000CDCC8(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  double v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *j;
  void *v14;
  double v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *k;
  void *v21;
  void *v22;
  void *v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  void *v29;
  _QWORD v30[4];
  id v31;
  _QWORD v32[4];
  id v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];
  _BYTE v48[128];

  objc_msgSend(*(id *)(a1 + 32), "completeTransition:", objc_msgSend(*(id *)(a1 + 32), "transitionWasCancelled") ^ 1);
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v2 = *(id *)(a1 + 40);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v43;
    do
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v43 != v5)
          objc_enumerationMutation(v2);
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)i), "layer"));
        LODWORD(v8) = 1.0;
        objc_msgSend(v7, "setOpacity:", v8);

      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
    }
    while (v4);
  }

  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v9 = *(id *)(a1 + 48);
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v39;
    do
    {
      for (j = 0; j != v11; j = (char *)j + 1)
      {
        if (*(_QWORD *)v39 != v12)
          objc_enumerationMutation(v9);
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)j), "layer"));
        LODWORD(v15) = 0;
        objc_msgSend(v14, "setOpacity:", v15);

      }
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v38, v47, 16);
    }
    while (v11);
  }

  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v16 = *(id *)(a1 + 56);
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v35;
    do
    {
      for (k = 0; k != v18; k = (char *)k + 1)
      {
        if (*(_QWORD *)v35 != v19)
          objc_enumerationMutation(v16);
        objc_msgSend(*(id *)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)k), "removeFromSuperview");
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v34, v46, 16);
    }
    while (v18);
  }

  v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "pageViewController"));
  v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "view"));
  objc_msgSend(v22, "setAlpha:", 1.0);

  if (objc_msgSend(*(id *)(a1 + 72), "isPresenting"))
  {
    if (*(_BYTE *)(a1 + 232))
      objc_msgSend(*(id *)(a1 + 80), "setFrame:", *(double *)(a1 + 128), *(double *)(a1 + 136), *(double *)(a1 + 144), *(double *)(a1 + 152));
    v23 = *(void **)(a1 + 88);
    if (v23)
    {
      v24 = *(double *)(a1 + 128);
      v25 = *(double *)(a1 + 136);
      v26 = *(double *)(a1 + 144);
      v27 = *(double *)(a1 + 152);
LABEL_31:
      objc_msgSend(v23, "setFrame:", v24, v25, v26, v27);
      v28 = *(double *)(a1 + 160);
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "layer"));
      objc_msgSend(v29, "setCornerRadius:", v28);

    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 232))
      objc_msgSend(*(id *)(a1 + 80), "setFrame:", *(double *)(a1 + 168), *(double *)(a1 + 176), *(double *)(a1 + 184), *(double *)(a1 + 192));
    v23 = *(void **)(a1 + 88);
    if (v23)
    {
      v24 = *(double *)(a1 + 200);
      v25 = *(double *)(a1 + 208);
      v26 = *(double *)(a1 + 216);
      v27 = *(double *)(a1 + 224);
      goto LABEL_31;
    }
  }
  objc_msgSend(*(id *)(a1 + 96), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(a1 + 104), "setAlpha:", 1.0);
  objc_msgSend(*(id *)(a1 + 112), "setAlpha:", 1.0);
  if (objc_msgSend(*(id *)(a1 + 120), "count"))
  {
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1000CE088;
    v32[3] = &unk_100550110;
    v33 = *(id *)(a1 + 120);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1000CE184;
    v30[3] = &unk_100550BE8;
    v31 = *(id *)(a1 + 120);
    +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v32, v30, 0.1);

  }
}

void sub_1000CE088(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  double v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v9;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v9 != v4)
          objc_enumerationMutation(v1);
        v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v5), "layer", (_QWORD)v8));
        LODWORD(v7) = 0;
        objc_msgSend(v6, "setOpacity:", v7);

        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v3);
  }

}

void sub_1000CE184(uint64_t a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE v10[128];

  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v1 = *(id *)(a1 + 32);
  v2 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v7;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v7 != v4)
          objc_enumerationMutation(v1);
        objc_msgSend(*(id *)(*((_QWORD *)&v6 + 1) + 8 * (_QWORD)v5), "removeFromSuperview", (_QWORD)v6);
        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v6, v10, 16);
    }
    while (v3);
  }

}

void sub_1000CE388(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_1000CE3BC(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "completeTransition:", objc_msgSend(*(id *)(a1 + 32), "transitionWasCancelled") ^ 1);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  objc_msgSend(v2, "setAlpha:", 0.0);

}

void sub_1000CE520(id a1)
{
  id v1;
  void *v2;

  if (!qword_1005DDF50)
  {
    v1 = objc_alloc_init((Class)ICAttachmentPreviewImageCache);
    v2 = (void *)qword_1005DDF50;
    qword_1005DDF50 = (uint64_t)v1;

  }
}

void sub_1000CE9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location)
{
  id *v24;

  objc_destroyWeak(v24);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000CEA20(uint64_t a1, void *a2)
{
  id WeakRetained;
  void *v4;
  void *v5;
  void *v6;
  unsigned int v7;
  id v8;
  _QWORD v9[4];
  id v10;
  id v11;

  v8 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v4 = WeakRetained;
  if (WeakRetained)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "attachment"));
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
    v7 = objc_msgSend(v6, "isEqualToString:", *(_QWORD *)(a1 + 32));

    if (v7)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      v9[2] = sub_1000CEB04;
      v9[3] = &unk_10054FE80;
      v10 = v4;
      v11 = v8;
      +[UIView performWithoutAnimation:](UIView, "performWithoutAnimation:", v9);

    }
  }

}

void sub_1000CEB04(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailView"));
  objc_msgSend(v2, "setImage:", *(_QWORD *)(a1 + 40));

}

id sub_1000CEB44(uint64_t a1, void *a2)
{
  id v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  void *v16;

  v3 = a2;
  objc_msgSend(v3, "size");
  if (v4 <= 0.0 || (objc_msgSend(v3, "size"), v5 <= 0.0))
  {
    v15 = v3;
  }
  else
  {
    v6 = *(double *)(a1 + 32);
    objc_msgSend(v3, "size");
    v7 = *(double *)(a1 + 40);
    v9 = v6 / v8;
    objc_msgSend(v3, "size");
    if (v9 >= v7 / v10)
      v11 = v9;
    else
      v11 = v7 / v10;
    objc_msgSend(v3, "size");
    v13 = ceil(v12 * v11);
    objc_msgSend(v3, "size");
    v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ic_scaledImageWithSize:scale:", v13, ceil(v14 * v11), 1.0));
  }
  v16 = v15;

  return v16;
}

void sub_1000CEF34(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  _QWORD v15[2];
  _QWORD v16[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("media != nil && markedForDeletion != media.markedForDeletion")));
  v16[0] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("markedForDeletion == NO && parentAttachment.markedForDeletion == YES")));
  v16[1] = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("parentAttachment == nil && note.markedForDeletion != markedForDeletion")));
  v16[2] = v4;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v16, 3));
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v5));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentsMatchingPredicate:context:](ICAttachment, "attachmentsMatchingPredicate:context:", v6, *(_QWORD *)(a1 + 32)));
  v8 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    sub_10040AC7C(v7);

  objc_msgSend(*(id *)(a1 + 40), "resolveInconsistencies:context:", v7, *(_QWORD *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("parentAttachment != nil && parentAttachment.markedForDeletion != markedForDeletion")));
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("parentAttachment == nil && note.markedForDeletion != markedForDeletion"), v9));
  v15[1] = v10;
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v15, 2));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSCompoundPredicate orPredicateWithSubpredicates:](NSCompoundPredicate, "orPredicateWithSubpredicates:", v11));

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[ICInlineAttachment attachmentsMatchingPredicate:context:](ICInlineAttachment, "attachmentsMatchingPredicate:context:", v12, *(_QWORD *)(a1 + 32)));
  v14 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    sub_10040AC0C(v13);

  objc_msgSend(*(id *)(a1 + 40), "resolveInconsistencies:context:", v13, *(_QWORD *)(a1 + 32));
}

void sub_1000CF758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000CF780(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  if (*(_QWORD *)(result + 32) == a2)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 1;
    *a5 = 1;
  }
  return result;
}

void sub_1000CF898(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char isKindOfClass;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;

  v3 = a2;
  v4 = objc_opt_class(ICBaseAttachment);
  v5 = ICDynamicCast(v4, v3);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = objc_opt_class(ICInlineAttachment);
  isKindOfClass = objc_opt_isKindOfClass(v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "parentAttachment"));

  if ((isKindOfClass & 1) == 0 || !v9)
  {
    v10 = *(void **)(a1 + 32);
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    objc_msgSend(v10, "ic_addNonNilObject:", v11);

    if (objc_msgSend(v3, "markedForDeletion"))
    {
      v12 = os_log_create("com.apple.notes", "LaunchTask");
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        sub_10040AD50(a1, v3, v12);

      objc_msgSend(v3, "unmarkForDeletion");
    }
  }

}

void sub_1000CFA90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  objc_msgSend(v4, "ic_addNonNilObject:", v5);

  if ((objc_msgSend(v3, "markedForDeletion") & 1) == 0)
  {
    v6 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingIdentifier"));
      v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shortLoggingDescription"));
      v9 = 138412546;
      v10 = v7;
      v11 = 2112;
      v12 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Resolving inconsistency of (%@) by deleting: %@", (uint8_t *)&v9, 0x16u);

    }
    objc_msgSend(v3, "markForDeletion");
  }

}

void sub_1000D2E08(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  _QWORD v6[4];
  id v7;
  uint64_t v8;

  v3 = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000D2E80;
  v6[3] = &unk_10054FE80;
  v4 = *(_QWORD *)(a1 + 32);
  v7 = v3;
  v8 = v4;
  v5 = v3;
  performBlockOnMainThread(v6);

}

void sub_1000D2E80(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  unsigned __int8 v16;
  void *v17;
  void *v18;
  double v19;
  double v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "configuration"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "uniqueKey"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "currentThumbnailConfigurationUniqueKey"));
  v5 = objc_msgSend(v3, "isEqual:", v4);

  if (!v5)
    return;
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "image"));
  if (v6)
  {
    v7 = (void *)v6;
    v8 = objc_msgSend(*(id *)(a1 + 40), "isThumbnailPresent");

    if (v8)
    {
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "image"));
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
      objc_msgSend(v10, "setImage:", v9);

      if (+[UIDevice ic_isVision](UIDevice, "ic_isVision"))
        v11 = objc_claimAutoreleasedReturnValue(+[UIColor ic_noteEditorBackgroundColor](UIColor, "ic_noteEditorBackgroundColor"));
      else
        v11 = objc_claimAutoreleasedReturnValue(+[UIColor secondarySystemGroupedBackgroundColor](UIColor, "secondarySystemGroupedBackgroundColor"));
      v17 = (void *)v11;
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
      objc_msgSend(v18, "setBackgroundColor:", v17);

      objc_msgSend(*(id *)(a1 + 40), "ic_hairlineWidth");
      v20 = v19;
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "layer"));
      objc_msgSend(v22, "setBorderWidth:", v20);

      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
      objc_msgSend(v23, "setHidden:", 0);

      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
      v25 = objc_msgSend(v24, "contentMode");
      v26 = objc_msgSend(*(id *)(a1 + 32), "preferredContentMode");

      if (v25 == v26)
        return;
      v27 = objc_msgSend(*(id *)(a1 + 32), "preferredContentMode");
      v28 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
      objc_msgSend(v28, "setContentMode:", v27);
LABEL_14:

      return;
    }
  }
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "image"));

  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
    objc_msgSend(v14, "setImage:", 0);

  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
  v16 = objc_msgSend(v15, "isHidden");

  if ((v16 & 1) == 0)
  {
    v28 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "thumbnailImageView"));
    objc_msgSend(v28, "setHidden:", 1);
    goto LABEL_14;
  }
}

void sub_1000D3274(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue(+[UIColor quaternaryLabelColor](UIColor, "quaternaryLabelColor")));
  v2 = objc_msgSend(v5, "CGColor");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "thumbnailImageView"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "layer"));
  objc_msgSend(v4, "setBorderColor:", v2);

}

void sub_1000D396C(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = objc_msgSend(objc_alloc((Class)NoteContext), "initWithPrivateQueue");
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
  v2 = (void *)qword_1005DDF68;
  qword_1005DDF68 = v1;

}

void sub_1000D39F4(id a1)
{
  uint64_t v1;
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v1 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "workerManagedObjectContext"));
  v2 = (void *)qword_1005DDF78;
  qword_1005DDF78 = v1;

}

void sub_1000D3A7C(id a1)
{
  dispatch_queue_attr_t v1;
  NSObject *v2;
  dispatch_queue_attr_t v3;
  dispatch_queue_t v4;
  void *v5;
  NSObject *attr;

  v1 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v2 = objc_claimAutoreleasedReturnValue(v1);
  v3 = dispatch_queue_attr_make_with_qos_class(v2, QOS_CLASS_USER_INITIATED, 0);
  attr = objc_claimAutoreleasedReturnValue(v3);

  v4 = dispatch_queue_create("com.apple.notes.load-data-queue", attr);
  v5 = (void *)qword_1005DDF88;
  qword_1005DDF88 = (uint64_t)v4;

}

void sub_1000D3E7C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D3F00(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

id sub_1000D3FE4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "loadDataWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_1000D408C(uint64_t a1)
{
  void *v1;
  void *v3;
  unsigned __int8 v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  _QWORD v10[5];
  id v11;
  id v12;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v4 = objc_msgSend(v3, "isModernNote");
  if ((v4 & 1) != 0
    || (v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "invitation"))) != 0)
  {
    v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "modernBackgroundContext");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if ((v4 & 1) != 0)
      goto LABEL_7;
  }
  else
  {
    v7 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "legacyBackgroundContext");
    v6 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }

LABEL_7:
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000D4188;
  v10[3] = &unk_10054FEA8;
  v8 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v6;
  v12 = v8;
  v9 = v6;
  objc_msgSend(v9, "performBlock:", v10);

}

uint64_t sub_1000D4188(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "loadDataWithContext:", *(_QWORD *)(a1 + 40));
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000D4C24(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D51B0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D5F28(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  ICNoteResultsCellConfiguration *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  id v17;

  v17 = a2;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v9 = objc_opt_class(ICSearchResult, v7);
    v10 = ICDynamicCast(v9, v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = -[ICNoteResultsCellConfiguration initWithSearchResult:]([ICNoteResultsCellConfiguration alloc], "initWithSearchResult:", v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewControllerManager"));
    if ((unint64_t)objc_msgSend(v13, "countOfAllVisibleAccounts") <= 1)
    {
      -[ICNoteResultsCellConfiguration setShowAccountName:](v12, "setShowAccountName:", 0);
    }
    else
    {
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountIdentifier"));
      -[ICNoteResultsCellConfiguration setShowAccountName:](v12, "setShowAccountName:", v14 == 0);

    }
    -[ICNoteResultsCellConfiguration setShowFolderName:](v12, "setShowFolderName:", 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
    objc_msgSend(v17, "setConfiguration:synchronously:", v12, objc_msgSend(v15, "ic_shouldOptimizeForScrolling") ^ 1);

    v16 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v17, "setAccessibilityCustomActionsDelegate:", v16);

  }
}

void sub_1000D6074(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  ICNoteResultsCellConfiguration *v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  id v22;

  v22 = a2;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v9 = objc_opt_class(ICSearchResult, v7);
    v10 = ICDynamicCast(v9, v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "object"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectID"));

    if (objc_msgSend(v13, "ic_isEntityOfClass:", objc_opt_class(ICNote, v14)))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "modernViewContext"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectWithID:", v13));

      v17 = -[ICNoteResultsCellConfiguration initWithNote:]([ICNoteResultsCellConfiguration alloc], "initWithNote:", v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewControllerManager"));
      if ((unint64_t)objc_msgSend(v18, "countOfAllVisibleAccounts") <= 1)
      {
        -[ICNoteResultsCellConfiguration setShowAccountName:](v17, "setShowAccountName:", 0);
      }
      else
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "accountIdentifier"));
        -[ICNoteResultsCellConfiguration setShowAccountName:](v17, "setShowAccountName:", v19 == 0);

      }
      -[ICNoteResultsCellConfiguration setShowFolderName:](v17, "setShowFolderName:", 1);
      v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionView"));
      objc_msgSend(v22, "setConfiguration:synchronously:", v17, objc_msgSend(v20, "ic_shouldOptimizeForScrolling") ^ 1);

      v21 = objc_loadWeakRetained((id *)(a1 + 40));
      objc_msgSend(v22, "setAccessibilityCustomActionsDelegate:", v21);

    }
  }

}

void sub_1000D622C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  uint64_t v7;
  id WeakRetained;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  v17 = a2;
  v6 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v9 = objc_opt_class(ICSearchResult, v7);
    v10 = ICDynamicCast(v9, v6);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "object"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectID"));

    if (objc_msgSend(v13, "ic_isEntityOfClass:", objc_opt_class(ICAttachment, v14)))
    {
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "modernViewContext"));
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectWithID:", v13));

      objc_msgSend(v17, "setHighlightSelection:", objc_msgSend(WeakRetained, "noteContainerViewMode") == 0);
      objc_msgSend(v17, "setAttachment:searchResult:", v16, v11);

    }
  }

}

void sub_1000D633C(id a1, UICollectionViewListCell *a2, NSIndexPath *a3, id a4)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  UICollectionViewListCell *v16;

  v16 = a2;
  v5 = a4;
  v6 = objc_opt_class(ICSearchSuggestion);
  v7 = ICDynamicCast(v6, v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(-[UICollectionViewListCell defaultContentConfiguration](v16, "defaultContentConfiguration"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "suggestionItemTitle"));
  objc_msgSend(v9, "setText:", v10);

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIImageSymbolConfiguration configurationWithTextStyle:](UIImageSymbolConfiguration, "configurationWithTextStyle:", UIFontTextStyleBody));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "imageProperties"));
  objc_msgSend(v12, "setPreferredSymbolConfiguration:", v11);

  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "iconImage"));
  objc_msgSend(v9, "setImage:", v13);

  -[UICollectionViewListCell setContentConfiguration:](v16, "setContentConfiguration:", v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue(-[UICollectionViewListCell defaultBackgroundConfiguration](v16, "defaultBackgroundConfiguration"));
  if (-[UICollectionViewListCell ic_behavior](v16, "ic_behavior") == (id)1)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor secondarySystemBackgroundColor](UIColor, "secondarySystemBackgroundColor"));
    objc_msgSend(v14, "setBackgroundColor:", v15);

  }
  -[UICollectionViewListCell setBackgroundConfiguration:](v16, "setBackgroundConfiguration:", v14);

}

void sub_1000D6498(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  id v10;

  v10 = a2;
  v6 = a4;
  v7 = objc_msgSend(v10, "ic_behavior");
  if (v7 == (id)1)
  {
    objc_msgSend(v10, "setStyleForCalculator:", 1);
  }
  else if (v7 == (id)3)
  {
    objc_msgSend(v10, "setHorizontalInsetsOverride:", 0.0);
  }
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "snapshot"));
  objc_msgSend(v9, "updateHeaderView:forIndexPath:", v10, v6);

}

id sub_1000D6540(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  id WeakRetained;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  if (WeakRetained)
  {
    v12 = objc_opt_class(ICSearchSuggestion, v10);
    if ((objc_opt_isKindOfClass(v9, v12) & 1) != 0)
    {
      v14 = a1[4];
      if (!v14)
        goto LABEL_11;
    }
    else
    {
      v16 = objc_opt_class(ICSearchResult, v13);
      if ((objc_opt_isKindOfClass(v9, v16) & 1) == 0)
        goto LABEL_11;
      v18 = objc_opt_class(ICSearchResult, v17);
      v19 = ICDynamicCast(v18, v9);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "object"));
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "objectID"));

      v14 = objc_msgSend(v22, "ic_isEntityOfClass:", objc_opt_class(ICAttachment, v23))
          ? a1[5]
          : 0;

      if (!v14)
      {
LABEL_11:
        v24 = objc_msgSend(WeakRetained, "noteContainerViewMode");
        v25 = 7;
        if (!v24)
          v25 = 6;
        v14 = a1[v25];
      }
    }
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "dequeueConfiguredReusableCellWithRegistration:forIndexPath:item:", v14, v8, v9));

    goto LABEL_15;
  }
  v15 = 0;
LABEL_15:

  return v15;
}

id sub_1000D66C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id *v5;
  id v6;
  id WeakRetained;
  void *v8;

  v5 = (id *)(a1 + 40);
  v6 = a4;
  WeakRetained = objc_loadWeakRetained(v5);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath:", *(_QWORD *)(a1 + 32), v6));

  return v8;
}

void sub_1000D69AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

BOOL sub_1000D69D0(id a1, ICSearchToken *a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  BOOL v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(-[ICSearchToken csToken](a2, "csToken", a3, a4));
  v5 = v4 == 0;

  return v5;
}

void sub_1000D6A04(uint64_t a1, void *a2)
{
  id *v3;
  id v4;
  id WeakRetained;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = (id *)(a1 + 40);
  v4 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(WeakRetained, "setDidUpdateForCurrentSearchUserInput:", 1);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "snapshot"));
  objc_msgSend(v7, "setBehavior:", v6);

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "snapshot"));
  objc_msgSend(v8, "updateWithResults:", v4);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000D6AE4;
  v10[3] = &unk_100550110;
  v10[4] = WeakRetained;
  performBlockOnMainThread(v10);
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
    (*(void (**)(void))(v9 + 16))();

}

void sub_1000D6AE4(uint64_t a1)
{
  void *v2;
  id v3;
  char *v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionViewDiffableDataSource"));
  v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "snapshot"));

  v3 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "numberOfItemsInSection:forSnapshot:", CFSTR("ICNoteSearchDataSourceTopHitsSectionIdentifier"), v9);
  v4 = (char *)objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "numberOfItemsInSection:forSnapshot:", CFSTR("ICNoteSearchDataSourceNoteSectionIdentifier"), v9);
  v5 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "numberOfItemsInSection:forSnapshot:", CFSTR("ICNoteSearchDataSourceAttachmentSectionIdentifier"), v9);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "searchController"));

  objc_msgSend(v7, "setNeedsUpdateContentUnavailableConfiguration");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "searchResultExposureReporter"));
  objc_msgSend(v8, "updateWithTopHitResultCount:nonTopHitResultCount:attachmentSectionCount:", v3, &v4[(_QWORD)v5], v5);

}

id sub_1000D6F9C(id a1, id a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;

  v2 = a2;
  v3 = objc_opt_class(ICSearchResult);
  v4 = ICDynamicCast(v3, v2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "object"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectID"));
  v8 = v7;
  if (v7)
    v9 = v7;
  else
    v9 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](NSNull, "null"));
  v10 = v9;

  return v10;
}

id sub_1000D7124(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  v3 = a2;
  v4 = objc_opt_class(ICSearchResult);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = objc_opt_class(ICSearchResult);
    v6 = ICDynamicCast(v5, v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionViewDiffableDataSource"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "indexPathForItemIdentifier:", v7));

    if (v9
      && (v10 = *(void **)(a1 + 40),
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "object")),
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectID")),
          LODWORD(v10) = objc_msgSend(v10, "containsObject:", v12),
          v12,
          v11,
          (_DWORD)v10))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "cellForItemAtIndexPath:", v9));

    }
    else
    {
      v14 = 0;
    }

  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1000D732C(uint64_t a1, void *a2)
{
  void *v3;
  unsigned int v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;

  v15 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectID"));
  v4 = objc_msgSend(v3, "ic_isNoteType");

  v5 = v15;
  if (v4)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "changedValues"));
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allKeys"));

    if ((objc_msgSend(v7, "containsObject:", CFSTR("markedForDeletion")) & 1) != 0)
      v8 = 1;
    else
      v8 = objc_msgSend(v7, "containsObject:", CFSTR("deletedFlag"));
    v9 = objc_opt_class(ICNote);
    v10 = ICDynamicCast(v9, v15);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    v12 = (void *)v11;
    if (v11)
    {
      LODWORD(v11) = objc_msgSend(v7, "containsObject:", CFSTR("folder"));
      if ((_DWORD)v11)
        LODWORD(v11) = objc_msgSend(v12, "isDeletedOrInTrash");
    }
    if (((v8 | v11) & 1) != 0 || objc_msgSend(v15, "isDeleted"))
    {
      v13 = *(void **)(a1 + 32);
      v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectID"));
      objc_msgSend(v13, "addObject:", v14);

    }
    v5 = v15;
  }

}

void sub_1000D74E4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  _QWORD v6[4];
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "itemIdentifiers"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000D759C;
  v6[3] = &unk_1005545E0;
  v7 = *(id *)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_objectsPassingTest:", v6));

  if (objc_msgSend(v5, "count"))
    objc_msgSend(v3, "deleteItemsWithIdentifiers:", v5);

}

id sub_1000D759C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;

  v3 = a2;
  v4 = objc_opt_class(ICSearchResult);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = objc_opt_class(ICSearchResult);
    v6 = ICDynamicCast(v5, v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "object"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectID"));
    v11 = objc_msgSend(v8, "containsObject:", v10);

  }
  else
  {
    v11 = 0;
  }

  return v11;
}

void sub_1000D77C0(uint64_t a1, void *a2)
{
  void *v2;
  void *v4;
  unsigned __int8 v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  _QWORD v26[4];
  id v27;
  id v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  uint64_t v36;
  id v37;

  v25 = a2;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = sub_1000D7B28;
  v34 = sub_1000D7B38;
  v35 = 0;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  v26[2] = sub_1000D7B40;
  v26[3] = &unk_1005502C0;
  v24 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "itemIdentifiers"));
  v27 = v24;
  v28 = *(id *)(a1 + 32);
  v29 = &v30;
  performBlockOnMainThreadAndWait(v26);
  if (v31[5])
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
    v5 = objc_msgSend(v4, "isPasswordProtected");
    if ((v5 & 1) != 0
      || (v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatedNote")),
          (objc_msgSend(v2, "isPasswordProtected") & 1) == 0))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v31[5], "configuration"));
      v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "foundAttachmentObjectID"));

      if ((v5 & 1) != 0)
      {
LABEL_7:

        v7 = objc_alloc((Class)ICSearchResultConfiguration);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v31[5], "configuration"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "searchString"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v31[5], "configuration"));
        v11 = objc_msgSend(v10, "searchSuggestionType");
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v31[5], "configuration"));
        v13 = objc_msgSend(v12, "isTopHit");
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v31[5], "configuration"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "sortableSearchableItem"));
        v16 = objc_msgSend(v7, "initWithSearchString:searchSuggestionType:isTopHit:foundAttachmentObjectID:sortableSearchableItem:", v9, v11, v13, v23, v15);

        v17 = objc_alloc((Class)ICSearchResult);
        v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatedNote"));
        v19 = objc_msgSend(v17, "initWithObject:configuration:", v18, v16);

        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updatedNote"));
        objc_msgSend(v19, "setMathNote:", objc_msgSend(v20, "isMathNote"));

        v37 = v19;
        v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v37, 1));
        objc_msgSend(v25, "insertItemsWithIdentifiers:afterItemWithIdentifier:", v21, v31[5]);

        v36 = v31[5];
        v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v36, 1));
        objc_msgSend(v25, "deleteItemsWithIdentifiers:", v22);

        goto LABEL_8;
      }
    }
    else
    {
      v23 = 0;
    }

    goto LABEL_7;
  }
LABEL_8:

  _Block_object_dispose(&v30, 8);
}

void sub_1000D7AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D7B28(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000D7B38(uint64_t a1)
{

}

void sub_1000D7B40(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  id obj;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];

  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v20;
    while (2)
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v20 != v4)
          objc_enumerationMutation(obj);
        v6 = *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i);
        v7 = objc_opt_class(ICSearchResult);
        v8 = ICDynamicCast(v7, v6);
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        v10 = v9;
        if (v9)
        {
          v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "object"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectID"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "note"));
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectID"));
          v15 = objc_msgSend(v12, "isEqual:", v14);

          if (v15)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
            v17 = *(void **)(v16 + 40);
            *(_QWORD *)(v16 + 40) = v10;

            goto LABEL_12;
          }
        }

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v19, v23, 16);
      if (v3)
        continue;
      break;
    }
  }
LABEL_12:

}

void sub_1000DA710(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  void *v5;
  id v6;
  void *v7;
  unsigned __int8 v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  unsigned int v13;
  id v14;

  if (!objc_msgSend(a2, "numberOfItems"))
  {
    v3 = (id *)(a1 + 32);
    WeakRetained = objc_loadWeakRetained(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "summaryView"));
    objc_msgSend(v5, "setHidden:", 1);

    v6 = objc_loadWeakRetained(v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "splitViewController"));
    v8 = objc_msgSend(v7, "isCollapsed");

    if ((v8 & 1) == 0)
    {
      v9 = objc_loadWeakRetained(v3);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "navigationController"));
      objc_msgSend(v10, "setToolbarHidden:animated:", 1, 0);

    }
    v11 = objc_loadWeakRetained(v3);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "navigationController"));
    v13 = objc_msgSend(v12, "isToolbarHidden");

    if (v13)
    {
      v14 = objc_loadWeakRetained(v3);
      objc_msgSend(v14, "setNeedsUpdateContentUnavailableConfiguration");

    }
  }
}

void sub_1000DAF7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000DAFB8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = objc_msgSend(v2, "applicationState");

  if (!v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteContainer"));

    if (v5)
    {
      v6 = objc_opt_class(ICFolder);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteContainer"));
      v8 = ICDynamicCast(v6, v7);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v8);

      v9 = objc_opt_class(ICAccount);
      v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteContainer"));
      v11 = ICDynamicCast(v9, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

      if (!v4)
      {
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultFolder"));
LABEL_9:
        v4 = (void *)v13;
      }
    }
    else
    {
      v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteCollection"));

      if (!v4)
        goto LABEL_11;
      v14 = objc_opt_class(NoteStoreObject);
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteCollection"));
      v16 = ICDynamicCast(v14, v15);
      v4 = (void *)objc_claimAutoreleasedReturnValue(v16);

      v17 = objc_opt_class(NoteAccountObject);
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteCollection"));
      v19 = ICDynamicCast(v17, v18);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v19);

      if (!v4)
      {
        v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "defaultStore"));
        goto LABEL_9;
      }
    }

    goto LABEL_11;
  }
  v4 = 0;
LABEL_11:

  return v4;
}

id sub_1000DB440(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateTagSelectionIfNeeded");
}

id sub_1000DB448(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateVisibleGalleryCellThumbnails");
}

uint64_t sub_1000DB934(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "indexer"));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

id sub_1000DB9B0(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
  objc_msgSend(v3, "setNoteContainer:", v2);

  return objc_msgSend(*(id *)(a1 + 32), "resetBarButtonItemsAnimated:", 0);
}

uint64_t sub_1000DBC00(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "indexer"));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000DBC7C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  if (objc_msgSend(*(id *)(a1 + 32), "noteContainerViewMode") == (id)1)
    v2 = 0;
  else
    v2 = *(_QWORD *)(a1 + 40);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
  objc_msgSend(v3, "setNoteCollection:", v2);

}

uint64_t sub_1000DBF14(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "indexer"));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000DBF90(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
  objc_msgSend(v2, "setNoteQuery:", v1);

}

uint64_t sub_1000DC250(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "indexer"));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000DC2CC(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
  objc_msgSend(v2, "setVirtualSmartFolder:", v1);

}

uint64_t sub_1000DC49C(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "updateContainerSelection");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000DC4D8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    v4 = (id)objc_claimAutoreleasedReturnValue(+[ICQuery queryForNotesMatchingTagSelection:](ICQuery, "queryForNotesMatchingTagSelection:", v2));
  else
    v4 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
  objc_msgSend(v3, "setNoteQuery:", v4);

  if (v2)
}

id sub_1000DC854(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isEditing");
  if ((result & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "updateNoteSelectionAnimated:", 1);
    return objc_msgSend(*(id *)(a1 + 32), "updateContainerSelection");
  }
  return result;
}

void sub_1000DC898(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(unsigned __int8 *)(a1 + 40);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v2, "setEditing:", v1);

}

void sub_1000DCB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DCB3C(uint64_t a1, int a2)
{
  id WeakRetained;
  void *v5;
  void *v6;
  char v7;
  _QWORD v8[5];
  char v9;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = WeakRetained;
  if (a2)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteDataSource"));
    v7 = *(_BYTE *)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1000DCC00;
    v8[3] = &unk_100550360;
    v8[4] = *(_QWORD *)(a1 + 32);
    v9 = v7;
    objc_msgSend(v6, "reloadDataAnimated:dataIndexedBlock:dataRenderedBlock:", v7 == 0, 0, v8);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setShouldAvoidEditingChanges:", 0);
  }
  objc_msgSend(v5, "setNeedsToConfirmDeletion:", 0);

}

id sub_1000DCC00(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setShouldAvoidEditingChanges:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", 0, *(_BYTE *)(a1 + 40) == 0);
}

void sub_1000DCCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DCD20(uint64_t a1, void *a2)
{
  void *v3;
  id WeakRetained;

  if (objc_msgSend(a2, "count"))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    objc_msgSend(WeakRetained, "setEditing:animated:", 0, 1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "noteDataSource"));
    objc_msgSend(v3, "reloadDataAnimated:", 1);

  }
}

id sub_1000DD830(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateSummaryView");
}

void sub_1000DDA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DDABC(uint64_t a1)
{
  id WeakRetained;
  _QWORD v2[5];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000DDB24;
  v2[3] = &unk_100550110;
  v2[4] = WeakRetained;
  objc_msgSend(WeakRetained, "ic_performBlockAfterActiveTransition:", v2);

}

void sub_1000DDB24(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v2, "setNeedsLayout");

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v3, "layoutIfNeeded");

}

void sub_1000DDB78(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if ((objc_msgSend(WeakRetained, "updateFolderSectionVisibility") & 1) != 0
    || objc_msgSend(WeakRetained, "updateTagSectionVisibility"))
  {
    objc_msgSend(WeakRetained, "reloadDataSourceAnimated:dataIndexedBlock:dataRenderedBlock:", 0, 0, 0);
  }

}

id sub_1000DDDC8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(void))(v2 + 16))();
  objc_msgSend(*(id *)(a1 + 32), "setShouldAvoidEditingChanges:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "setEditing:", 0);
}

void sub_1000DDFB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DDFD4(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "viewControllerManager"));
  objc_msgSend(v4, "selectTagSelection:", v3);

}

void sub_1000DE144(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  id v21;

  v21 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "ic_isViewVisible"))
    objc_msgSend(*(id *)(a1 + 32), "updateBarButtonItemsAnimated:", *(unsigned __int8 *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "updateNavigationTitle");
  if (objc_msgSend(*(id *)(a1 + 32), "ic_isViewVisible"))
    v3 = objc_msgSend(*(id *)(a1 + 32), "isTrashFolder");
  else
    v3 = 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v4, "setShouldShowRecentlyDeletedHeader:", v3);

  objc_msgSend(*(id *)(a1 + 32), "updateFocusedNoteIfNeeded");
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "virtualSmartFolder"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "type"));
  v7 = objc_msgSend(v6, "isEqual:", ICVirtualSmartFolderItemIdentifierTypeSharedWithYou);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v8, "setShouldShowCellParticipantsInfo:", v7);

  v9 = objc_opt_class(NSManagedObjectID);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "firstRelevantItemIdentifier"));
  v12 = ICDynamicCast(v9, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "emptyConfigurationForNoteWithObjectID:", v13));

  v16 = objc_msgSend(v15, "showFolderName");
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v17, "setShouldShowFolderName:", v16);

  v18 = objc_msgSend(v15, "showAccountName");
  v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v19, "setShouldShowAccountName:", v18);

  v20 = *(_QWORD *)(a1 + 40);
  if (v20)
    (*(void (**)(uint64_t, id))(v20 + 16))(v20, v21);

}

uint64_t sub_1000DE314(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "updateNoteSelection");
  objc_msgSend(*(id *)(a1 + 32), "updateContainerSelection");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000DE85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DE878(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000DE888(uint64_t a1)
{

}

void sub_1000DE890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "customNoteSortType"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000DEA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000DEA78(uint64_t a1)
{
  void *v2;
  id v3;

  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));
  if ((objc_msgSend(v3, "supportsDateHeaders") & 1) != 0)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v2, "dateHeadersType");

  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

}

id sub_1000DEB48(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 168);
  *(_QWORD *)(v2 + 168) = 0;

  return objc_msgSend(*(id *)(a1 + 32), "updateBarButtonItemsAnimated:", 1);
}

void sub_1000DECD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DECF0(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "showSharedFolderActions:", 0);

}

id sub_1000DEDD4(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = objc_opt_class(NSManagedObjectID);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    v5 = v3;
    if (objc_msgSend(v5, "ic_isEntityOfClass:", objc_opt_class(ICNote)))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernViewContext"));
    }
    else
    {
      if (!objc_msgSend(v5, "ic_isEntityOfClass:", objc_opt_class(NoteObject)))
      {
        v7 = 0;
        goto LABEL_9;
      }
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyViewContext"));
    }
    v8 = v6;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectWithID:", v5));

LABEL_9:
    goto LABEL_10;
  }
  v7 = 0;
LABEL_10:

  return v7;
}

void sub_1000DEEAC(uint64_t a1)
{
  _QWORD block[4];
  id v2;

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000DEF24;
  block[3] = &unk_10054FF58;
  objc_copyWeak(&v2, (id *)(a1 + 32));
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  objc_destroyWeak(&v2);
}

void sub_1000DEF24(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateNoteSelection");

}

BOOL sub_1000DF6D0(id a1, ICSearchIndexableNote *a2, unint64_t a3, BOOL *a4)
{
  return -[ICSearchIndexableNote isMovable](a2, "isMovable", a3, a4);
}

BOOL sub_1000DF6D8(id a1, ICSearchIndexableNote *a2, unint64_t a3, BOOL *a4)
{
  return -[ICSearchIndexableNote isDeletable](a2, "isDeletable", a3, a4);
}

id sub_1000DFC94(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v3 = a2;
  v4 = objc_opt_class(NSManagedObjectID);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "collectionViewDiffableDataSource"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "itemIdentifierForIndexPath:", v3));

  v8 = ICDynamicCast(v4, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  return v9;
}

id sub_1000DFD30(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = a2;
  if (objc_msgSend(v3, "ic_isEntityOfClass:", objc_opt_class(ICNote)))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "modernViewContext"));
  }
  else
  {
    if (!objc_msgSend(v3, "ic_isEntityOfClass:", objc_opt_class(NoteObject)))
    {
      v6 = 0;
      goto LABEL_7;
    }
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyViewContext"));
  }
  v5 = v4;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectWithID:", v3));

LABEL_7:
  return v6;
}

BOOL sub_1000E0434(id a1, ICSearchIndexableNote *a2, unint64_t a3, BOOL *a4)
{
  ICSearchIndexableNote *v4;
  unsigned int v5;

  v4 = a2;
  if (-[ICSearchIndexableNote isModernNote](v4, "isModernNote")
    && (-[ICSearchIndexableNote isPasswordProtected](v4, "isPasswordProtected") & 1) == 0)
  {
    v5 = -[ICSearchIndexableNote isSharedReadOnly](v4, "isSharedReadOnly") ^ 1;
  }
  else
  {
    LOBYTE(v5) = 0;
  }

  return v5;
}

id sub_1000E0528(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateBarButtonItemsAnimated:", 1);
}

void sub_1000E09B4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unsigned __int8 v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;

  v2 = objc_opt_class(ICFolder);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));
  v4 = ICDynamicCast(v2, v3);
  v17 = (id)objc_claimAutoreleasedReturnValue(v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "visibleNotesInFolder"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_compactMap:", &stru_100554838));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "selectedNoteObjectID"));
  v9 = objc_msgSend(v6, "containsObject:", v8);

  v10 = v17;
  if ((v9 & 1) == 0)
  {
    v11 = objc_opt_class(NSManagedObjectID);
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteDataSource"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "firstRelevantItemIdentifier"));
    v14 = ICDynamicCast(v11, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
      objc_msgSend(v16, "selectNoteWithObjectID:scrollState:startEditing:animated:ensurePresented:", v15, 0, 0, 0, 0);

    }
    v10 = v17;
  }

}

NSManagedObjectID *__cdecl sub_1000E0B08(id a1, ICNote *a2)
{
  return (NSManagedObjectID *)-[ICNote objectID](a2, "objectID");
}

void sub_1000E133C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19, id a20)
{
  id *v20;
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_1000E1380(id *a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v2 = a1 + 5;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v4 = objc_msgSend(WeakRetained, "noteContainerViewMode");

  if (v4 == (id)1)
  {
    v8 = objc_loadWeakRetained(v2);
    v5 = objc_loadWeakRetained(a1 + 6);
    v6 = objc_loadWeakRetained(a1 + 7);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "noteBrowseNavigationItemConfigurationNoteContainerActionMenu:actionBarButtonItem:", v5, v6));
    objc_msgSend(a1[4], "setMenu:", v7);

  }
}

void sub_1000E15F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19, id a20)
{
  id *v20;
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_1000E163C(id *a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v2 = a1 + 5;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v4 = objc_msgSend(WeakRetained, "noteContainerViewMode");

  if (v4 == (id)1)
  {
    v8 = objc_loadWeakRetained(v2);
    v5 = objc_loadWeakRetained(a1 + 6);
    v6 = objc_loadWeakRetained(a1 + 7);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "noteBrowseNavigationItemConfigurationQueryActionMenu:actionBarButtonItem:", v5, v6));
    objc_msgSend(a1[4], "setMenu:", v7);

  }
}

void sub_1000E1898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location, id a19, id a20)
{
  id *v20;
  id *v21;
  id *v22;

  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a19);
  objc_destroyWeak(&a20);
  _Unwind_Resume(a1);
}

void sub_1000E18DC(id *a1)
{
  id *v2;
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v2 = a1 + 5;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v4 = objc_msgSend(WeakRetained, "noteContainerViewMode");

  if (v4 == (id)1)
  {
    v8 = objc_loadWeakRetained(v2);
    v5 = objc_loadWeakRetained(a1 + 6);
    v6 = objc_loadWeakRetained(a1 + 7);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "noteBrowseNavigationItemConfigurationVirtualSmartFolderActionMenu:actionBarButtonItem:", v5, v6));
    objc_msgSend(a1[4], "setMenu:", v7);

  }
}

void sub_1000E1B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000E1BA0(id a1, ICSearchIndexableNote *a2)
{
  ICSearchIndexableNote *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = a2;
  v4 = objc_opt_class(ICNote, v3);
  v5 = ICDynamicCast(v4, v2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return v6;
}

void sub_1000E1BE8(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setEditing:animated:", 0, 1);

}

void sub_1000E1D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  id *v16;

  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E1D9C(uint64_t a1, int a2)
{
  void *v3;
  id v4;

  if (a2)
  {
    v4 = objc_loadWeakRetained((id *)(a1 + 40));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "allNotes"));
    objc_msgSend(v4, "deleteNotes:sender:", v3, *(_QWORD *)(a1 + 32));

  }
}

void sub_1000E21F8(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  +[ICNote enumerateNotesInContext:batchSize:visibleOnly:saveAfterBatch:usingBlock:](ICNote, "enumerateNotesInContext:batchSize:visibleOnly:saveAfterBatch:usingBlock:", v1, 10, 1, 1, &stru_100554908);

}

void sub_1000E2254(id a1, ICNote *a2, BOOL *a3)
{
  void *v3;
  id v4;
  ICNote *v5;

  v5 = a2;
  if (-[ICNote isPasswordProtected](v5, "isPasswordProtected"))
  {
    -[ICNote setWidgetSnippet:](v5, "setWidgetSnippet:", 0);
  }
  else
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(-[ICNote identifier](v5, "identifier"));
    v4 = objc_msgSend(v3, "length");

    if (v4)
      -[ICNote regenerateTitle:snippet:](v5, "regenerateTitle:snippet:", 1, 1);
  }

}

void sub_1000E2DB0(uint64_t a1, void *a2, unint64_t a3)
{
  void *v5;
  id v6;
  uint64_t v7;
  unsigned int v8;
  double v9;
  id v10;

  v5 = *(void **)(a1 + 32);
  v6 = a2;
  if ((unint64_t)objc_msgSend(v5, "count") <= a3)
    v7 = 0;
  else
    v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", a3));
  v10 = (id)v7;
  objc_msgSend(v6, "setNote:", v7);
  v8 = objc_msgSend(*(id *)(a1 + 40), "isCompact");
  v9 = 6.0;
  if (v8)
    v9 = 4.0;
  objc_msgSend(v6, "setCornerRadius:", v9);

}

id sub_1000E3D84(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "fixNotesWithNilFolderWithContext:", *(_QWORD *)(a1 + 40));
  return _objc_msgSend(*(id *)(a1 + 32), "fixNotesWithPlaceholderFoldersWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_1000E49F4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;

  v8 = a2;
  v5 = a3;
  if (v8 && !*(_BYTE *)(a1 + 40))
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "notesToDelete"));
    objc_msgSend(v6, "addObject:", v8);

  }
  if (v5)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "createdLegacyNotes"));
    objc_msgSend(v7, "addObject:", v5);

  }
}

intptr_t sub_1000E4C4C(uint64_t a1)
{
  void *v2;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v2, "waitUntilAllOperationsAreFinished");

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1000E4D08(uint64_t a1)
{
  void *v2;
  _QWORD v3[5];
  char v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "operationQueue"));
  objc_msgSend(v2, "waitUntilAllOperationsAreFinished");

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1000E4D90;
  v3[3] = &unk_100550360;
  v3[4] = *(_QWORD *)(a1 + 32);
  v4 = *(_BYTE *)(a1 + 40);
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, v3);
}

id sub_1000E4D90(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "finishAfterCopyingNotesCopyOnly:", *(unsigned __int8 *)(a1 + 40));
}

void sub_1000E5760(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  NSObject *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id obj;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[4];
  id v41;
  id v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[128];
  void *v48;
  _BYTE v49[128];
  void *v50;

  v32 = ICAttachmentUTTypeGallery;
  v2 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("typeUTI == %@ AND             subAttachments.@count > 1 AND userTitle != nil AND             SUBQUERY(subAttachments, $sa, $sa.ocrSummary != nil).@count > 0"), ICAttachmentUTTypeGallery));
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("modificationDate"), 0));
  v50 = v3;
  v4 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v50, 1));

  v33 = (void *)v4;
  v34 = (void *)v2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment ic_objectIDsMatchingPredicate:sortDescriptors:context:](ICAttachment, "ic_objectIDsMatchingPredicate:sortDescriptors:context:", v2, v4, *(_QWORD *)(a1 + 32)));
  v6 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    sub_10040B2B0(v5);

  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  obj = v5;
  v7 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
  if (v7)
  {
    v8 = v7;
    v9 = *(_QWORD *)v44;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v44 != v9)
          objc_enumerationMutation(obj);
        v11 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v10);
        v12 = objc_autoreleasePoolPush();
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectWithID:", v11));
        v14 = objc_opt_class(ICAttachmentGalleryModel);
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "attachmentModel"));
        v16 = ICDynamicCast(v14, v15);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);

        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472;
        v40[2] = sub_1000E5BDC;
        v40[3] = &unk_100551CB8;
        v41 = v13;
        v42 = *(id *)(a1 + 32);
        v18 = v13;
        objc_msgSend(v17, "enumerateSubAttachmentsWithBlock:", v40);

        objc_autoreleasePoolPop(v12);
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v43, v49, 16);
    }
    while (v8);
  }

  v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("SUBQUERY(attachments, $a, $a.typeUTI == %@ AND $a.userTitle == nil).@count > 0"), v32));
  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("modificationDate"), 0));
  v48 = v20;
  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v48, 1));

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote ic_objectIDsMatchingPredicate:sortDescriptors:context:](ICNote, "ic_objectIDsMatchingPredicate:sortDescriptors:context:", v19, v21, *(_QWORD *)(a1 + 32)));
  v23 = os_log_create("com.apple.notes", "LaunchTask");
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    sub_10040B240(v22);

  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v24 = v22;
  v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v36, v47, 16);
  if (v25)
  {
    v26 = v25;
    v27 = *(_QWORD *)v37;
    do
    {
      v28 = 0;
      do
      {
        if (*(_QWORD *)v37 != v27)
          objc_enumerationMutation(v24);
        v29 = *(_QWORD *)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)v28);
        v30 = objc_autoreleasePoolPush();
        v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectWithID:", v29));
        if (objc_msgSend(v31, "regenerateTitle:snippet:", 1, 1))
        {
          objc_msgSend(v31, "markShareDirtyIfNeededWithReason:", CFSTR("Regenerated gallery note title"));
          objc_msgSend(v31, "updateChangeCountWithReason:", CFSTR("Regenerated gallery note title"));
          objc_msgSend(*(id *)(a1 + 32), "ic_save");
        }
        objc_msgSend(*(id *)(a1 + 32), "ic_refreshObject:mergeChanges:", v31, 0);

        objc_autoreleasePoolPop(v30);
        v28 = (char *)v28 + 1;
      }
      while (v26 != v28);
      v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v36, v47, 16);
    }
    while (v26);
  }

}

void sub_1000E5BDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  unsigned int v12;
  NSObject *v13;

  v7 = a2;
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userTitle"));
  if (v8)
  {
    v9 = (void *)v8;
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ocrSummary"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userTitle"));
    v12 = objc_msgSend(v10, "containsString:", v11);

    if (v12)
    {
      v13 = os_log_create("com.apple.notes", "LaunchTask");
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        sub_10040B320((id *)(a1 + 32));

      objc_msgSend(*(id *)(a1 + 32), "setUserTitle:", 0);
      objc_msgSend(*(id *)(a1 + 40), "ic_save");
      objc_msgSend(*(id *)(a1 + 40), "ic_refreshObject:mergeChanges:", *(_QWORD *)(a1 + 32), 0);
      *a5 = 1;
    }
  }

}

id sub_1000E5D58(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "fixTombstonesWithNilAccountWithContext:", *(_QWORD *)(a1 + 40));
}

void sub_1000E70F8(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = *(_QWORD *)(a1 + 40);
  if (v1)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v1 + 16))(v1, 1, v2);

  }
}

void sub_1000E7518(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  id v9;
  _QWORD v10[4];
  id v11;
  int v12;

  v2 = objc_opt_class(ICFolder);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "noteContainer"));
  v4 = ICDynamicCast(v2, v3);
  v9 = (id)objc_claimAutoreleasedReturnValue(v4);

  if (v9)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "managedObjectContext"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1000E762C;
    v10[3] = &unk_100554980;
    v11 = v9;
    v12 = *(_DWORD *)(a1 + 48);
    objc_msgSend(v5, "performBlockAndWait:", v10);

    v6 = v11;
LABEL_5:

    goto LABEL_6;
  }
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "virtualSmartFolder"));

  if (v7)
  {
    v8 = *(unsigned int *)(a1 + 48);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "virtualSmartFolder"));
    objc_msgSend(v6, "setDateHeadersType:", v8);
    goto LABEL_5;
  }
LABEL_6:
  objc_msgSend(*(id *)(a1 + 32), "performActivityWithCompletion:", *(_QWORD *)(a1 + 40));

}

void sub_1000E762C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "applyDateHeadersType:", *(unsigned int *)(a1 + 40));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v2, "ic_save");

}

void sub_1000E7CCC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "alertTextField"));
  objc_msgSend(v2, "selectAll:", 0);

  objc_msgSend(*(id *)(a1 + 40), "activityDidFinish:", 1);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "activityType"));
    (*(void (**)(uint64_t, uint64_t, id))(v3 + 16))(v3, 1, v4);

  }
}

void sub_1000E7F14(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  id v22;
  id v23;
  NSObject *v24;
  _QWORD v25[4];
  id v26;
  id v27;
  id v28;
  _QWORD v29[4];
  id v30;

  v6 = a2;
  v7 = a4;
  if (v6)
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICAccount accountUtilities](ICAccount, "accountUtilities"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountId"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "temporaryDirectoryURLForAccountIdentifier:", v9));

    if (!v10)
      +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "((tempDirectoryURL) != nil)", "-[ICSharingExtensionItemExtractor extractMediaFileURLWithProvider:contentType:completion:]_block_invoke_2", 1, 0, CFSTR("Expected non-nil value for '%s'"), "tempDirectoryURL");
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v12 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "UUIDString"));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "URLByAppendingPathComponent:isDirectory:", v12, 1));

    v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    objc_msgSend(v14, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v13, 1, 0, 0);

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "lastPathComponent"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "URLByAppendingPathComponent:", v15));

    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
    LOBYTE(v12) = objc_msgSend(v17, "linkItemAtURL:toURL:error:", v6, v16, 0);

    if ((v12 & 1) == 0)
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](NSFileManager, "defaultManager"));
      v28 = 0;
      v19 = objc_msgSend(v18, "copyItemAtURL:toURL:error:", v6, v16, &v28);
      v20 = v28;

      if ((v19 & 1) == 0)
        +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "[[NSFileManager defaultManager] copyItemAtURL:url toURL:tempFileURL error:&copyError]", "-[ICSharingExtensionItemExtractor extractMediaFileURLWithProvider:contentType:completion:]_block_invoke_2", 1, 0, CFSTR("Extracting media file: Failed to create temporary file copy: %@"), v20);

    }
    v21 = objc_msgSend(objc_alloc((Class)ICAddAttachmentsManagerAttachmentInfo), "initWithFileURL:", v16);
    objc_msgSend(v21, "setUsesTemporaryFile:", 1);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_1000E8238;
    v25[3] = &unk_1005517E0;
    v22 = *(id *)(a1 + 48);
    v26 = v21;
    v27 = v22;
    v23 = v21;
    performBlockOnMainThread(v25);

  }
  else
  {
    v24 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      sub_10040B4C0(a1, (uint64_t)v7, v24);

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472;
    v29[2] = sub_1000E8228;
    v29[3] = &unk_10054FFA8;
    v30 = *(id *)(a1 + 48);
    performBlockOnMainThread(v29);
    v13 = v30;
  }

}

uint64_t sub_1000E8228(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1000E8238(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000E836C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD v7[4];
  id v8;
  id v9;
  id v10;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1000E8420;
  v7[3] = &unk_10054FEA8;
  v8 = a2;
  v9 = a3;
  v10 = *(id *)(a1 + 32);
  v5 = v9;
  v6 = v8;
  performBlockOnMainThreadAndWait(v7);

}

void sub_1000E8420(uint64_t a1)
{
  NSObject *v2;
  id v3;

  if (*(_QWORD *)(a1 + 32))
  {
    v3 = objc_msgSend(objc_alloc((Class)ICAddAttachmentsManagerAttachmentInfo), "initWithFileURL:", *(_QWORD *)(a1 + 32));
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();

  }
  else
  {
    v2 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      sub_10040B53C(a1, v2);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1000E85D4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  _QWORD v10[4];
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  char v17;

  v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000E86BC;
  v10[3] = &unk_1005549F8;
  v11 = a3;
  v16 = *(id *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v12 = v5;
  v13 = v6;
  v17 = *(_BYTE *)(a1 + 64);
  v14 = v7;
  v15 = *(id *)(a1 + 48);
  v8 = v5;
  v9 = v11;
  performBlockOnMainThreadAndWait(v10);

}

void sub_1000E86BC(uint64_t a1)
{
  uint64_t *v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  unsigned __int8 v21;
  id v22;
  void *v23;
  void *v24;
  void *v25;
  NSObject *v26;
  id v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];

  v2 = (uint64_t *)(a1 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    v3 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      sub_10040B6C0(v2, v3, v4);

LABEL_5:
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    return;
  }
  v5 = *(_QWORD *)(a1 + 40);
  if (!v5)
  {
    v12 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      sub_10040B5F0(v12);

    goto LABEL_5;
  }
  v6 = objc_opt_class(NSURL);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0 && objc_msgSend(*(id *)(a1 + 40), "isFileURL"))
  {
    v27 = objc_msgSend(objc_alloc((Class)ICAddAttachmentsManagerAttachmentInfo), "initWithFileURL:", *(_QWORD *)(a1 + 40));
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
LABEL_12:

    return;
  }
  v7 = *(_QWORD *)(a1 + 40);
  v8 = objc_opt_class(UIImage);
  if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
  {
    v9 = *(void **)(a1 + 48);
    v10 = *(unsigned __int8 *)(a1 + 80);
    v11 = *(id *)(a1 + 40);
    v27 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "getAttachmentInfoWithImage:useTempFile:", v11, v10));
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

    goto LABEL_12;
  }
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "registeredTypeIdentifiers"));
  v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
  if (v14)
  {
    v15 = v14;
    v16 = *(_QWORD *)v29;
LABEL_18:
    v17 = 0;
    while (1)
    {
      if (*(_QWORD *)v29 != v16)
        objc_enumerationMutation(v13);
      v18 = *(void **)(*((_QWORD *)&v28 + 1) + 8 * v17);
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[ICUTType typeWithIdentifier:](ICUTType, "typeWithIdentifier:", v18));
      v20 = (void *)objc_claimAutoreleasedReturnValue(+[ICUTType typeWithIdentifier:](ICUTType, "typeWithIdentifier:", *(_QWORD *)(a1 + 64)));
      v21 = objc_msgSend(v19, "conformsToType:", v20);

      if ((v21 & 1) != 0)
        break;
      if (v15 == (id)++v17)
      {
        v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        if (v15)
          goto LABEL_18;
        goto LABEL_24;
      }
    }
    v23 = (void *)objc_claimAutoreleasedReturnValue(+[ICUTType typeWithIdentifier:](ICUTType, "typeWithIdentifier:", v18));
    v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "preferredFilenameExtension"));

    v22 = v18;
    if (!v24)
      goto LABEL_27;
    v25 = (void *)objc_opt_new(ICAddAttachmentsManagerAttachmentInfo);
    objc_msgSend(v25, "setMediaUTI:", v22);
    objc_msgSend(v25, "setMediaData:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v25, "setMediaFilenameExtension:", v24);
    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();

  }
  else
  {
LABEL_24:

    v22 = 0;
LABEL_27:
    v26 = os_log_create("com.apple.notes", "SharingExtension");
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      sub_10040B630((id *)(a1 + 56), v26);

    (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
  }

}

void sub_1000E9430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  id *v15;

  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000E945C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "updateBarButtonItemsAnimated:", 1);
  objc_msgSend(WeakRetained, "updateBarsVisibilityAnimated:", 1);

}

id sub_1000E99C0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didDismissDeleteAlertController");
}

id sub_1000EA1F8(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "contentID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentID"));
  v5 = objc_msgSend(v3, "isEqualToString:", v4);

  return v5;
}

BOOL sub_1000EAC4C(id a1, id a2, unint64_t a3, BOOL *a4)
{
  void *v4;
  char v5;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "presentation", a3, a4));
  v5 = objc_msgSend(v4, "sourceIsManaged") ^ 1;

  return v5;
}

id sub_1000EB0E8(id a1, id a2)
{
  return objc_msgSend(a2, "contentID");
}

id sub_1000EB0F0(id a1, id a2)
{
  return objc_msgSend(a2, "contentID");
}

id sub_1000EB810(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;

  objc_msgSend(*(id *)(a1 + 32), "refreshAttachmentPresentations");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentLayer"));
  v3 = *(unsigned __int8 *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "attachments"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allObjects"));
  objc_msgSend(v2, "setContent:isPlainText:attachments:", v4, v3, v7);

  objc_msgSend(*(id *)(a1 + 32), "prepareForPresentation");
  objc_msgSend(*(id *)(a1 + 32), "setDelayingSetContent:", 0);
  return objc_msgSend(*(id *)(a1 + 32), "updateBarButtonItemsAnimated:", 0);
}

void sub_1000EC478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000EC4A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateForceLightContentIfNecessary");
}

id sub_1000EC4A8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  id v3;
  void *v4;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  v3 = objc_msgSend(v2, "applicationState");

  if (v3)
  {
    v4 = 0;
  }
  else
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "note"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "store"));

  }
  return v4;
}

id sub_1000ECAF0(uint64_t a1, void *a2)
{
  id result;

  result = objc_msgSend(a2, "isCancelled");
  if ((_DWORD)result)
    return objc_msgSend(*(id *)(a1 + 32), "updateForceLightContentIfNecessary");
  return result;
}

void sub_1000EDC30(uint64_t a1, double a2, double a3, double a4, double a5)
{
  void *v9;
  _QWORD v10[5];
  id v11;
  double v12;
  double v13;
  double v14;
  double v15;

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1000EDCBC;
  v10[3] = &unk_100553B10;
  v9 = *(void **)(a1 + 40);
  v10[4] = *(_QWORD *)(a1 + 32);
  v11 = v9;
  v12 = a2;
  v13 = a3;
  v14 = a4;
  v15 = a5;
  performBlockOnMainThread(v10);

}

void sub_1000EDCBC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  id v5;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentLayer"));
  objc_msgSend(v2, "resignFirstResponder");

  if (+[UIDevice ic_isVision](UIDevice, "ic_isVision"))
    v3 = -2;
  else
    v3 = 7;
  objc_msgSend(*(id *)(a1 + 40), "setModalPresentationStyle:", v3);
  objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);
  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "popoverPresentationController"));
  objc_msgSend(v5, "setDelegate:", *(_QWORD *)(a1 + 32));
  objc_msgSend(v5, "setPermittedArrowDirections:", 15);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentLayer"));
  objc_msgSend(v5, "setSourceView:", v4);

  objc_msgSend(v5, "setSourceRect:", *(double *)(a1 + 48), *(double *)(a1 + 56), *(double *)(a1 + 64), *(double *)(a1 + 72));
}

void sub_1000EDE1C(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  id v11;
  void *v12;
  id v13;
  _QWORD v14[5];
  id v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;

  v11 = a2;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_1000EDED0;
  v14[3] = &unk_100554B08;
  v17 = a3;
  v18 = a4;
  v19 = a5;
  v20 = a6;
  v12 = *(void **)(a1 + 40);
  v14[4] = *(_QWORD *)(a1 + 32);
  v15 = v11;
  v16 = v12;
  v13 = v11;
  performBlockOnMainThread(v14);

}

uint64_t sub_1000EDED0(uint64_t a1)
{
  double MidX;
  double MidY;
  double v4;
  double v5;
  __n128 v6;
  __n128 v7;
  void *v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  uint64_t result;
  CGRect v18;
  CGRect v19;
  CGRect v20;
  CGRect v21;

  MidX = *(double *)(a1 + 56);
  MidY = *(double *)(a1 + 64);
  v4 = *(double *)(a1 + 72);
  v5 = *(double *)(a1 + 80);
  v21.origin.x = CGRectZero.origin.x;
  v21.origin.y = CGRectZero.origin.y;
  v21.size.width = CGRectZero.size.width;
  v21.size.height = CGRectZero.size.height;
  v18.origin.x = MidX;
  v18.origin.y = MidY;
  v18.size.width = v4;
  v18.size.height = v5;
  if (CGRectEqualToRect(v18, v21))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentLayer"));
    objc_msgSend(v8, "frame");
    v10 = v9;
    v12 = v11;
    v14 = v13;
    v16 = v15;

    v19.origin.x = v10;
    v19.origin.y = v12;
    v19.size.width = v14;
    v19.size.height = v16;
    MidX = CGRectGetMidX(v19);
    v20.origin.x = v10;
    v20.origin.y = v12;
    v20.size.width = v14;
    v20.size.height = v16;
    MidY = CGRectGetMidY(v20);
  }
  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    if (v5 == 0.0)
      v7.n128_f64[0] = 1.0;
    else
      v7.n128_f64[0] = v5;
    if (v4 == 0.0)
      v6.n128_f64[0] = 1.0;
    else
      v6.n128_f64[0] = v4;
    return (*(uint64_t (**)(uint64_t, _QWORD, double, double, __n128, __n128))(result + 16))(result, *(_QWORD *)(a1 + 40), MidX, MidY, v6, v7);
  }
  return result;
}

uint64_t sub_1000EE068(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "didDismissPickerController");
  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1000EE254(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "filename"));
  objc_msgSend(v1, "insertAttachmentWithData:mimeType:preferredFilename:", v2, v3, v4);

}

id sub_1000EE570(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "cleanupAfterBarSourcedPopoverPresentation");
}

id sub_1000EE578(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "didDismissActivityController");
}

void sub_1000EEC88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000EECC8(uint64_t a1)
{
  id WeakRetained;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v2 = WeakRetained;
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "contentLayer"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "webArchive"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[ICAirDropDocument legacyNoteAirDropDocumentWithWebArchive:](ICAirDropDocument, "legacyNoteAirDropDocumentWithWebArchive:", v4));

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1000EF148(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  void *v9;
  id v10;

  v10 = a2;
  objc_msgSend(*(id *)(a1 + 32), "cleanupAfterBarSourcedPopoverPresentation");
  if (!a5 && a3 && objc_msgSend(v10, "length"))
  {
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
    objc_msgSend(v8, "submitNoteSharrowEventForHTMLNote:activityType:contextPath:", v9, v10, 0);

  }
}

void sub_1000EF580(uint64_t a1, int a2)
{
  id v3;

  if (a2)
  {
    objc_msgSend(*(id *)(a1 + 32), "animateDeleteTransitionWithCompletion:", 0);
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate"));
    objc_msgSend(v3, "noteDisplayController:noteWasDeleted:actionOrigin:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);

  }
}

void sub_1000EF824(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  id v11;
  _QWORD v12[4];
  id v13;
  uint64_t v14;
  char v15;

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1000EF904;
  v12[3] = &unk_100550688;
  v15 = *(_BYTE *)(a1 + 56);
  v2 = *(id *)(a1 + 32);
  v4 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v13 = v2;
  v14 = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1000EF958;
  v8[3] = &unk_1005538D8;
  v5 = v4;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(void **)(a1 + 48);
  v9 = v5;
  v10 = v6;
  v11 = v7;
  +[UIView animateWithDuration:animations:completion:](UIView, "animateWithDuration:animations:completion:", v12, v8, 0.35);

}

void sub_1000EF904(uint64_t a1)
{
  id v2;

  if (*(_BYTE *)(a1 + 48))
    objc_msgSend(*(id *)(a1 + 32), "setAlpha:", 0.0);
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "backgroundView"));
  objc_msgSend(v2, "setContentViewVisible:", 1);

}

uint64_t sub_1000EF958(uint64_t a1)
{
  uint64_t result;

  objc_msgSend(*(id *)(a1 + 32), "removeFromSuperview");
  objc_msgSend(*(id *)(a1 + 40), "setPerformingDeleteAnimation:", 0);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

uint64_t sub_1000EF9A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1000F0664(id a1, UIAlertAction *a2)
{
  void *v2;
  unsigned __int8 v3;
  void *v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", CFSTR("prefs:root=APPLE_ACCOUNT&path=ICLOUD_SERVICE")));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"));
  v3 = objc_msgSend(v2, "openSensitiveURL:withOptions:", v6, 0);

  if ((v3 & 1) == 0)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](NSURL, "URLWithString:", UIApplicationOpenSettingsURLString));
    objc_msgSend(v4, "openURL:options:completionHandler:", v5, &__NSDictionary0__struct, 0);

  }
}

void sub_1000F16A4(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setTransitioningToSize:", 0);
  if (objc_msgSend(*(id *)(a1 + 32), "isPickingAttachment"))
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentLayer"));
    objc_msgSend(v2, "scrollSelectionToVisible:", 1);

  }
}

void sub_1000F17EC(uint64_t a1)
{
  void *v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setChangingTraitCollection:", 0);
  if (*(_BYTE *)(a1 + 40))
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "contentLayer"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "noteHTMLEditorView"));
    objc_msgSend(v2, "startEditing");

  }
}

id sub_1000F1DC0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;

  v3 = a2;
  v4 = v3;
  if (*(_BYTE *)(a1 + 40))
  {
    v5 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "traitCollectionByModifyingTraits:", &stru_100554C30));

    v4 = (void *)v5;
  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "resolvedColorWithTraitCollection:", v4));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ic_appearanceInfo"));
  objc_msgSend(v7, "navigationBarAlpha");
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "colorWithAlphaComponent:"));

  return v8;
}

void sub_1000F1E5C(id a1, UIMutableTraits *a2)
{
  -[UIMutableTraits setUserInterfaceStyle:](a2, "setUserInterfaceStyle:", 1);
}

id sub_1000F2238(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "isEditing");
  if ((_DWORD)result)
  {
    result = objc_msgSend(*(id *)(a1 + 32), "noteCanBeSaved");
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(a1 + 32), "setEditing:animated:", 0, 1);
  }
  return result;
}

void sub_1000F22E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
  objc_sync_exit(obj);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F32B0(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1000F3304;
  v2[3] = &unk_100550110;
  v2[4] = *(_QWORD *)(a1 + 32);
  return performBlockOnMainThread(v2);
}

id sub_1000F3304(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateFromConfiguration");
}

id sub_1000F3954(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "updateViewStateProperties");
  return objc_msgSend(*(id *)(a1 + 32), "synchronouslyLoadConfigurationDataAndUpdate");
}

id sub_1000F4AE0(uint64_t a1)
{
  uint64_t v2;

  if (objc_msgSend(*(id *)(a1 + 32), "prefersLightBackground"))
    v2 = 1;
  else
    v2 = 2;
  objc_msgSend(*(id *)(a1 + 32), "setPreferredBackgroundType:", v2);
  objc_msgSend(*(id *)(a1 + 32), "updateUserSpecificChangeCountWithReason:", CFSTR("Changed preferred background type"));
  objc_msgSend(*(id *)(a1 + 32), "updateChangeCountWithReason:", CFSTR("Changed preferred background type"));
  return objc_msgSend(*(id *)(a1 + 40), "ic_save");
}

void sub_1000F4E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F4E7C(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "note"));
  objc_msgSend(v1, "changePinStatusIfPossible");

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "note"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectContext"));
  objc_msgSend(v3, "ic_save");

}

void sub_1000F552C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = os_log_create("com.apple.notes", "UI");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    sub_10040B950(v2, v3, v4, v5, v6, v7, v8, v9);

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "updateMakingProgressDelayer"));
  objc_msgSend(v10, "requestFire");

}

id sub_1000F5648(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_performProgressUpdate");
}

void sub_1000F57A8(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_1000F57CC(uint64_t a1, void *a2)
{
  id v3;
  id WeakRetained;
  unsigned __int8 v5;
  _QWORD v6[5];
  id v7;
  unsigned __int8 v8;

  v3 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v5 = objc_msgSend((id)objc_opt_class(WeakRetained), "isMigratingICloudAccount:", v3);

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1000F58A0;
  v6[3] = &unk_100554C98;
  objc_copyWeak(&v7, (id *)(a1 + 40));
  v6[4] = *(_QWORD *)(a1 + 32);
  v8 = v5;
  performBlockOnMainThread(v6);
  objc_destroyWeak(&v7);

}

void sub_1000F588C(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1000F58A0(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  id v4;
  _BOOL4 v5;
  void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  NSObject *v12;
  int v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  unsigned int v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  _BOOL4 v22;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICReachability sharedReachabilityForInternetConnection](ICReachability, "sharedReachabilityForInternetConnection"));
    v4 = objc_msgSend(v3, "currentReachabilityStatus");
    v5 = v4 != 0;

    v6 = (void *)objc_claimAutoreleasedReturnValue(+[ICLegacyImportManager sharedLegacyImportManager](ICLegacyImportManager, "sharedLegacyImportManager"));
    v7 = objc_msgSend(v6, "hasPendingOperations");

    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICCloudContext sharedContext](ICCloudContext, "sharedContext"));
    v9 = objc_msgSend(v8, "hasPendingOperations");

    v10 = objc_msgSend((id)objc_opt_class(*(_QWORD *)(a1 + 32)), "isMigratingLocalAccount");
    if ((v10 & 1) == 0)
    {
      v11 = *(_BYTE *)(a1 + 48) ? 1 : v9;
      if (v11 != 1)
        v5 = 0;
    }
    v12 = os_log_create("com.apple.notes", "UI");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
    {
      v13 = *(unsigned __int8 *)(a1 + 48);
      v14[0] = 67110144;
      v14[1] = v7;
      v15 = 1024;
      v16 = v13;
      v17 = 1024;
      v18 = v10;
      v19 = 1024;
      v20 = v9;
      v21 = 1024;
      v22 = v4 != 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Updating progress spinner. importing=%d migratingICloud=%d migratingLocal=%d syncing=%d reachable=%d", (uint8_t *)v14, 0x20u);
    }

    objc_msgSend(WeakRetained, "setMakingProgress:", v5 | v7);
    objc_msgSend(WeakRetained, "setIsPerformingProgressUpdate:", 0);
    if (objc_msgSend(WeakRetained, "needsPerformingProgressUpdateAfterCurrentIsComplete"))
    {
      objc_msgSend(WeakRetained, "setNeedsPerformingProgressUpdateAfterCurrentIsComplete:", 0);
      objc_msgSend(WeakRetained, "updateMakingProgress");
    }
  }

}

void sub_1000F5C04(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICHashtag hashtagWithStandardizedContent:onlyVisible:account:](ICHashtag, "hashtagWithStandardizedContent:onlyVisible:account:", *(_QWORD *)(a1 + 32), 0, *(_QWORD *)(a1 + 40)));
  v3 = v2;
  if (*(_BYTE *)(a1 + 56))
    objc_msgSend(v2, "markForDeletion");
  else
    objc_msgSend(v2, "unmarkForDeletion");
  objc_msgSend(*(id *)(a1 + 48), "ic_save");

}

void sub_1000F5CA4(id a1)
{
  ICLegacyImportManager *v1;
  void *v2;

  v1 = objc_alloc_init(ICLegacyImportManager);
  v2 = (void *)qword_1005DDFA8;
  qword_1005DDFA8 = (uint64_t)v1;

}

void sub_1000F6024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  id *v24;
  id *v25;
  uint64_t v26;

  objc_destroyWeak(v25);
  _Block_object_dispose(&a24, 8);
  objc_destroyWeak(v24);
  objc_destroyWeak((id *)(v26 - 136));
  _Unwind_Resume(a1);
}

void sub_1000F607C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  id WeakRetained;
  void *v5;
  int v6;
  uint64_t v7;

  v2 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_QWORD *)(a1 + 32);
    v6 = 138412290;
    v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Took too long for import background task %@", (uint8_t *)&v6, 0xCu);
  }

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(WeakRetained, "cancel");

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v5, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = UIBackgroundTaskInvalid;
}

void sub_1000F6180(uint64_t a1)
{
  NSObject *v2;
  id WeakRetained;
  void *v4;
  void *v5;
  int v6;
  id v7;

  v2 = os_log_create("com.apple.notes", "Migration");
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v6 = 138412290;
    v7 = WeakRetained;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Completed import operation: %@", (uint8_t *)&v6, 0xCu);

  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v4, "endBackgroundTask:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24));

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
  objc_msgSend(v5, "postNotificationName:object:", CFSTR("ICLegacyImportManagerOperationsDidChangeNotification"), *(_QWORD *)(a1 + 32));

}

void sub_1000F6F88(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  id v15;
  float v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  void *i;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];

  v2 = objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithFormat:](NSPredicate, "predicateWithFormat:", CFSTR("typeUTI == %@"), AVFileTypeAppleM4A));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "workerContext"));
  v31 = (void *)v2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentsMatchingPredicate:context:](ICAttachment, "attachmentsMatchingPredicate:context:", v2, v3));

  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v5 = v4;
  v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
  if (v6)
  {
    v7 = v6;
    v8 = *(_QWORD *)v43;
    v32 = *(_QWORD *)v43;
    v33 = v5;
    do
    {
      v9 = 0;
      v34 = v7;
      do
      {
        if (*(_QWORD *)v43 != v8)
          objc_enumerationMutation(v5);
        v10 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v9);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "audioModel"));
        v12 = v11;
        if (v11)
        {
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "audioDocument"));
          v14 = v13;
          if (v13)
          {
            v15 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "transcriptVersion"));
            objc_msgSend(v15, "floatValue");
            if (v16 >= 1.0)
              goto LABEL_22;
            v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "transcriptVersion"));

            if (v17)
            {
              v15 = objc_alloc_init((Class)NSMutableDictionary);
              v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subAttachments"));
              v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "allObjects"));

              if (v19)
              {
                v36 = v10;
                v37 = v14;
                v40 = 0u;
                v41 = 0u;
                v38 = 0u;
                v39 = 0u;
                v35 = v19;
                v20 = v19;
                v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
                if (v21)
                {
                  v22 = v21;
                  v23 = *(_QWORD *)v39;
                  do
                  {
                    for (i = 0; i != v22; i = (char *)i + 1)
                    {
                      if (*(_QWORD *)v39 != v23)
                        objc_enumerationMutation(v20);
                      v25 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * (_QWORD)i);
                      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "media"));
                      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v26, "mediaURL"));

                      if (v27)
                      {
                        v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "objectID"));
                        objc_msgSend(v15, "setObject:forKeyedSubscript:", v27, v28);

                      }
                    }
                    v22 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v38, v46, 16);
                  }
                  while (v22);
                }

                v8 = v32;
                v5 = v33;
                v7 = v34;
                v19 = v35;
                v10 = v36;
                v14 = v37;
              }
              v29 = (void *)objc_claimAutoreleasedReturnValue(+[ICBackgroundTranscriptionHelper sharedInstance](ICBackgroundTranscriptionHelper, "sharedInstance"));
              v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectID"));
              objc_msgSend(v29, "addRetranscriptionTaskToQueue:attachmentIdentifier:", v15, v30);

LABEL_22:
            }
          }

        }
        v9 = (char *)v9 + 1;
      }
      while (v9 != v7);
      v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v42, v47, 16);
    }
    while (v7);
  }

}

void sub_1000F783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F7880(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1000F7890(uint64_t a1)
{

}

void sub_1000F7898(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationFolder"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000F78EC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  unsigned __int8 v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  id v30;
  uint8_t buf[4];
  id v32;
  __int16 v33;
  void *v34;

  v2 = objc_autoreleasePoolPush();
  v4 = *(_QWORD *)(a1 + 40);
  v3 = a1 + 40;
  v5 = (id *)(v3 - 8);
  v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v3 - 8), "ensureLegacyNoteIsValid:", *(_QWORD *)(*(_QWORD *)(v4 + 8) + 40)));
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
  v10 = os_log_create("com.apple.notes", "Migration");
  v11 = v10;
  if (!v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v28 = *v5;
      v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40), "identifier"));
      *(_DWORD *)buf = 138412546;
      v32 = v28;
      v33 = 2112;
      v34 = v29;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%@ found deleted legacy note: %@", buf, 0x16u);

    }
    v13 = v11;
    goto LABEL_12;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    sub_10040BAF0((uint64_t *)(v3 - 8), v3, v11);

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v5, "destinationFolder"));
  v13 = +[ICNote newEmptyNoteInFolder:](ICNote, "newEmptyNoteInFolder:", v12);

  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40);
  v15 = objc_alloc_init((Class)ICTextController);
  v16 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachmentPreviewGenerator sharedGenerator](ICAttachmentPreviewGenerator, "sharedGenerator"));
  +[ICLegacyNoteUtilities copyValuesFromLegacyNote:toNote:styler:attachmentPreviewGenerator:](ICLegacyNoteUtilities, "copyValuesFromLegacyNote:toNote:styler:attachmentPreviewGenerator:", v14, v13, v15, v16);

  -[NSObject updateChangeCountWithReason:](v13, "updateChangeCountWithReason:", CFSTR("Imported HTML note"));
  if (objc_msgSend(*v5, "deleteLegacyNotesAfterImport"))
  {
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"));
    objc_msgSend(v17, "postNotificationName:object:", CFSTR("ICImportOperationWillDeleteNoteNotification"), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40));

    objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)v3 + 8) + 40), "markForDeletion");
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NotesApp sharedNotesApp](NotesApp, "sharedNotesApp"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "noteContext"));
    v30 = 0;
    v20 = objc_msgSend(v19, "save:", &v30);
    v11 = v30;

    if ((v20 & 1) == 0)
    {
      v21 = os_log_create("com.apple.notes", "Migration");
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        sub_10040BA8C((uint64_t)v11, v21, v22, v23, v24, v25, v26, v27);

    }
LABEL_12:

  }
  objc_autoreleasePoolPop(v2);
}

void sub_1000F7BC8(uint64_t a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  id obj;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NotesApp sharedNotesApp](NotesApp, "sharedNotesApp"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "noteContext"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  obj = *(id *)(v4 + 40);
  objc_msgSend(v3, "save:", &obj);
  objc_storeStrong((id *)(v4 + 40), obj);

}

id sub_1000F7C40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "save");
}

void sub_1000F7DE8(uint64_t a1)
{
  void *v2;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationFolder"));
  v3 = objc_msgSend(v2, "isDeleted");

  if (v3)
  {
    v4 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v10 = 138412290;
      v11 = v5;
      v6 = "Cancelling import operation because folder was deleted: %@";
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, 0xCu);
    }
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationFolder"));
    v8 = objc_msgSend(v7, "markedForDeletion");

    if (!v8)
      return;
    v4 = os_log_create("com.apple.notes", "Migration");
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v9 = *(_QWORD *)(a1 + 32);
      v10 = 138412290;
      v11 = v9;
      v6 = "Cancelling import operation because folder was marked for deletion: %@";
      goto LABEL_7;
    }
  }

  objc_msgSend(*(id *)(a1 + 32), "cancel");
}

void sub_1000F802C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F8044(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "legacyManagedObjectContext"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "objectID"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectWithID:", v2));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1000F8160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F8178(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v6 = (id)objc_claimAutoreleasedReturnValue(+[NotesApp sharedNotesApp](NotesApp, "sharedNotesApp"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "noteContext"));
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "managedObjectContext"));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1000F830C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000F8324(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;

  v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "destinationFolder"));
  v2 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1000F8954(id a1, UIMutableTraits *a2)
{
  -[UIMutableTraits setUserInterfaceStyle:](a2, "setUserInterfaceStyle:", 1);
}

void sub_1000F8CDC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountsFetchedResultsController"));

  if (v2 != v3)
  {
    v4 = *(void **)(a1 + 32);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storesFetchedResultsController"));

    if (v4 != v5 || (unint64_t)(*(_QWORD *)(a1 + 48) - 1) > 1)
      return;
LABEL_9:
    objc_msgSend(*(id *)(a1 + 40), "setAccountsListNeedsUpdate:", 1);
    return;
  }
  v6 = *(_QWORD *)(a1 + 48);
  v7 = v6 > 4;
  v8 = (1 << v6) & 0x16;
  if (!v7 && v8 != 0)
    goto LABEL_9;
}

void sub_1000F8DF4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v2 = *(void **)(a1 + 32);
  v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "accountsFetchedResultsController"));
  if (v2 == (void *)v3)
  {

  }
  else
  {
    v4 = (void *)v3;
    v5 = *(void **)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "storesFetchedResultsController"));

    if (v5 != v6)
      return;
  }
  if (objc_msgSend(*(id *)(a1 + 40), "accountsListNeedsUpdate"))
  {
    objc_msgSend(*(id *)(a1 + 40), "setAccountsListNeedsUpdate:", 0);
    v7 = (id)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
    objc_msgSend(v7, "legacyNotesChanged");

  }
}

void sub_1000F9144(id a1)
{
  void *v1;
  id v2;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "workerManagedObjectContext"));

  +[ICMigrationUtilities updateAllLegacyAccountMigrationStatesInContext:](ICMigrationUtilities, "updateAllLegacyAccountMigrationStatesInContext:", v2);
}

void sub_1000F9F4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000F9F6C(uint64_t a1)
{
  void *v1;
  void (**v2)(void);
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "closeHandler"));

  if (v1)
  {
    v2 = (void (**)(void))objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "closeHandler"));
    v2[2]();

  }
}

void sub_1000FA204(id a1, UIAction *a2)
{
  +[UIApplication ic_openNotificationSettings](UIApplication, "ic_openNotificationSettings");
}

id sub_1000FC278(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "contentSizeCategoryDidChange");
  objc_msgSend(*(id *)(a1 + 32), "updateHeaderViewMargins");
  return _objc_msgSend(*(id *)(a1 + 32), "updateImagesAndMoviesScrollViewContentInset");
}

id sub_1000FCB28(uint64_t a1, void *a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "titleForAttachmentSection:", (__int16)objc_msgSend(a2, "integerValue"));
}

uint64_t sub_1000FCC9C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1);
  return result;
}

void sub_1000FDBCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000FDBFC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  unsigned int v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _BYTE v21[128];

  v5 = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
  v7 = objc_msgSend(v6, "intValue");

  if (v7 == 7)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objects", 0));
    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
    if (v9)
    {
      v10 = v9;
      v11 = *(_QWORD *)v18;
      do
      {
        for (i = 0; i != v10; i = (char *)i + 1)
        {
          if (*(_QWORD *)v18 != v11)
            objc_enumerationMutation(v8);
          v13 = *(void **)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)i);
          if (objc_msgSend(v13, "attachmentType") == 15)
            objc_msgSend(*(id *)(a1 + 32), "addObject:", v13);
        }
        v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v17, v21, 16);
      }
      while (v10);
    }

    v14 = *(_QWORD *)(a1 + 40);
    goto LABEL_14;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "name"));
  v16 = objc_msgSend(v15, "intValue");

  if (v16 == 6)
  {
    v14 = *(_QWORD *)(a1 + 48);
LABEL_14:
    *(_QWORD *)(*(_QWORD *)(v14 + 8) + 24) = a3;
  }

}

int64_t sub_1000FDD7C(id a1, id a2, id a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;
  int64_t v17;

  v4 = a3;
  v5 = ICCheckedProtocolCast(&OBJC_PROTOCOL___NSFetchedResultsSectionInfo, a2);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = ICCheckedProtocolCast(&OBJC_PROTOCOL___NSFetchedResultsSectionInfo, v4);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v9 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentSectionSortOrder](ICAttachment, "attachmentSectionSortOrder"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "name"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v10, "intValue")));
  v12 = objc_msgSend(v9, "indexOfObject:", v11);

  v13 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachment attachmentSectionSortOrder](ICAttachment, "attachmentSectionSortOrder"));
  v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "name"));
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v14, "intValue")));
  v16 = objc_msgSend(v13, "indexOfObject:", v15);

  if (v12 == (id)0x7FFFFFFFFFFFFFFFLL || v16 == (id)0x7FFFFFFFFFFFFFFFLL)
    +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "index1 != NSNotFound && index2 != NSNotFound", "-[ICBrowseAttachmentsCollectionController sortFetchedResultsSections]_block_invoke", 1, 0, CFSTR("Unknown section"));
  if (v12 == v16)
    +[ICAssert handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:](ICAssert, "handleFailedAssertWithCondition:functionName:simulateCrash:showAlert:format:", "index1 != index2", "-[ICBrowseAttachmentsCollectionController sortFetchedResultsSections]_block_invoke", 1, 0, CFSTR("Sections should different"));
  if (v12 < v16)
    v17 = -1;
  else
    v17 = 1;

  return v17;
}

id sub_1000FDF84(uint64_t a1)
{
  void *v2;
  void *v3;

  objc_msgSend(*(id *)(a1 + 32), "sortFetchedResultsSections");
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionView"));
  objc_msgSend(v2, "reloadData");

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "collectionViewLayout"));
  objc_msgSend(v3, "invalidateLayout");

  return objc_msgSend(*(id *)(a1 + 32), "updateEmptyView");
}

id sub_1000FEAE4(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

id sub_1000FEAEC(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = *(void **)(a1 + 32);
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_viewControllerManager"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "view"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "previewActionsForViewControllerManager:fromView:", v3, v4));

  v6 = (void *)objc_claimAutoreleasedReturnValue(+[UIMenu menuWithTitle:image:identifier:options:children:](UIMenu, "menuWithTitle:image:identifier:options:children:", &stru_1005704B8, 0, 0, 0, v5));
  return v6;
}

void sub_1000FEDD0(_QWORD *a1)
{
  void *v2;
  id v3;

  v2 = (void *)a1[4];
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "collectionView"));
  objc_msgSend(v2, "browseAttachmentsCollectionView:didSelectAttachment:indexPath:", v3, a1[5], a1[6]);

}

void sub_100100AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_100100AD4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result;

  result = objc_msgSend(a2, "didChooseToMigrate");
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_100100B70(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  id v16;

  v16 = (id)objc_claimAutoreleasedReturnValue(+[ICQuickNoteSessionManager sharedManager](ICQuickNoteSessionManager, "sharedManager"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "noteEditorViewController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "note"));
  if (objc_msgSend(v16, "isQuickNoteSessionActive"))
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "presentedViewController"));
    v5 = objc_opt_respondsToSelector(v4, "prepareForDismissal");

    if ((v5 & 1) != 0)
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "presentedViewController"));
      objc_msgSend(v6, "prepareForDismissal");

    }
    objc_msgSend(v16, "endSession");
  }
  if (objc_msgSend(v3, "isEmpty"))
  {
    +[ICNote deleteEmptyNote:](ICNote, "deleteEmptyNote:", v3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
    objc_msgSend(v7, "ic_save");
  }
  else
  {
    objc_msgSend(v2, "saveNote");
    v7 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
    objc_msgSend(v7, "saveImmediately");
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "noteEditorViewController"));
  objc_msgSend(v9, "updateInlineDrawings");

  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "noteEditorViewController"));
  objc_msgSend(v11, "resetTextViewUndoManager");

  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "currentAttachmentPresenter"));
  objc_msgSend(v13, "dismissAnimated:completion:", 0, 0);

  v14 = (void *)objc_claimAutoreleasedReturnValue(+[ICQuickNoteSessionManager sharedManager](ICQuickNoteSessionManager, "sharedManager"));
  objc_msgSend(v14, "setSecureScreenShowing:", 0);

  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "viewControllerManager"));
  objc_msgSend(v15, "dismissAnyPresentedViewControllerAnimated:completion:", 0, 0);

  objc_msgSend(*(id *)(a1 + 32), "setIcWindow:", 0);
}

void sub_10010100C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  void *v6;
  ICStartupQuickNoteFirstLaunchViewController *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  _QWORD v12[4];
  id v13;
  _QWORD v14[4];
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  char v20;
  char v21;

  +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "navigationController"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "view"));
  objc_msgSend(v3, "layoutIfNeeded");

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "view"));
  objc_msgSend(v4, "layoutIfNeeded");

  LODWORD(v3) = objc_msgSend(*(id *)(a1 + 40), "isQuickNoteFirstLaunch");
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10010120C;
  v14[3] = &unk_100554EE8;
  v15 = *(id *)(a1 + 32);
  v16 = *(id *)(a1 + 40);
  v17 = *(id *)(a1 + 48);
  v18 = *(id *)(a1 + 56);
  v19 = *(id *)(a1 + 64);
  v20 = (char)v3;
  v21 = *(_BYTE *)(a1 + 72);
  v5 = objc_retainBlock(v14);
  v6 = v5;
  if ((_DWORD)v3)
  {
    v7 = [ICStartupQuickNoteFirstLaunchViewController alloc];
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
    v9 = -[ICStartupQuickNoteFirstLaunchViewController initStartedWithPencil:launchBlock:](v7, "initStartedWithPencil:launchBlock:", objc_msgSend(v8, "isLaunchingQuickNoteViaPencil"), v6);

    v10 = (void *)objc_claimAutoreleasedReturnValue(+[ICAppDelegate sharedInstance](ICAppDelegate, "sharedInstance"));
    objc_msgSend(v10, "setLaunchingQuickNoteViaPencil:", 0);

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1001016BC;
    v12[3] = &unk_100550110;
    v11 = *(void **)(a1 + 32);
    v13 = *(id *)(a1 + 40);
    objc_msgSend(v11, "presentViewController:animated:completion:", v9, 1, v12);

  }
  else
  {
    ((void (*)(_QWORD *, _QWORD))v5[2])(v5, 0);
  }

}

void sub_10010120C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _QWORD v17[4];
  id v18;
  _QWORD v19[4];
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  char v25;

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1001014BC;
  v19[3] = &unk_100554EC0;
  v20 = *(id *)(a1 + 32);
  v21 = *(id *)(a1 + 40);
  v22 = *(id *)(a1 + 48);
  v23 = *(id *)(a1 + 56);
  v24 = *(id *)(a1 + 64);
  v25 = *(_BYTE *)(a1 + 72);
  v4 = objc_retainBlock(v19);
  v5 = v4;
  if (a2 != 1)
  {
    if (*(_BYTE *)(a1 + 73))
    {
      v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(&__kCFBooleanFalse, "stringValue"));
      objc_msgSend(v6, "setValue:forKey:", v7, ICQuickNoteURLOptionShowList);

      if (ICInternalSettingsIsSelectionStateTrackingEnabled(v8))
      {
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[ICSelectionStateUtilities selectedNoteObjectIDFromArchive:modernManagedObjectContext:legacyManagedObjectContext:](_TtC11MobileNotes25ICSelectionStateUtilities, "selectedNoteObjectIDFromArchive:modernManagedObjectContext:legacyManagedObjectContext:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48), 0));
        v10 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote ic_existingObjectWithID:context:](ICNote, "ic_existingObjectWithID:context:", v9, *(_QWORD *)(a1 + 48)));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier"));
        objc_msgSend(v6, "setValue:forKey:", v11, ICQuickNoteURLOptionNoteIdentifier);

      }
      else
      {
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "currentNoteObjectIDURL"));

        if (!v12)
        {
LABEL_9:
          v16 = *(void **)(a1 + 64);
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472;
          v17[2] = sub_1001016A4;
          v17[3] = &unk_100550890;
          v18 = v5;
          objc_msgSend(v16, "launchNotesAppFromLockscreenWithQueryOptions:completionBlock:", v6, v17);

          goto LABEL_10;
        }
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "persistentStoreCoordinator"));
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "currentNoteObjectIDURL"));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ic_managedObjectIDForURIRepresentation:", v14));
        v9 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote ic_existingObjectWithID:context:](ICNote, "ic_existingObjectWithID:context:", v15, *(_QWORD *)(a1 + 48)));

        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "identifier"));
        objc_msgSend(v6, "setValue:forKey:", v10, ICQuickNoteURLOptionNoteIdentifier);
      }

      goto LABEL_9;
    }
    ((void (*)(_QWORD *, uint64_t))v4[2])(v4, 1);
  }
LABEL_10:

}

void sub_1001014BC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  id v11;
  char v12;
  char v13;

  v13 = 0;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "noteForSessionCreatingIfNecessaryInContext:stateArchive:canResume:isNewlyCreated:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), a2, &v13));
  objc_msgSend(*(id *)(a1 + 32), "setNote:", v3);

  if (v13)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
    objc_msgSend(v4, "submitNoteCreateEventForModernNote:createApproach:", v5, 12);

  }
  objc_msgSend(*(id *)(a1 + 40), "beginSessionWithNoteEditorViewController:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 64), "updateNoteEditorViewControllerWithStateArchive:", *(_QWORD *)(a1 + 56));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1001015C8;
  v10[3] = &unk_100550360;
  v11 = *(id *)(a1 + 32);
  v12 = *(_BYTE *)(a1 + 72);
  v6 = objc_retainBlock(v10);
  ((void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v6[2])(v6, v7, v8, v9);

}

void sub_1001015C8(uint64_t a1)
{
  void *v2;
  id v3;
  unsigned int v4;
  void *v5;
  unsigned int v6;
  id v7;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v3 = objc_msgSend(v2, "userInterfaceIdiom");

  v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  if (objc_msgSend(v7, "isPasswordProtected"))
  {
    v4 = objc_msgSend(v7, "isAuthenticated") ^ 1;
    if (!v3)
      goto LABEL_7;
  }
  else
  {
    LOBYTE(v4) = 0;
    if (!v3)
      goto LABEL_7;
  }
  if ((v4 & 1) == 0)
    objc_msgSend(*(id *)(a1 + 32), "showInkPicker:animated:", 1, 0);
LABEL_7:
  +[UIView setAnimationsEnabled:](UIView, "setAnimationsEnabled:", 1);
  if (!*(_BYTE *)(a1 + 40) && !v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
    v6 = objc_msgSend(v5, "isEmpty");

    if (v6)
      objc_msgSend(*(id *)(a1 + 32), "startEditing");
  }

}

uint64_t sub_1001016A4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

id sub_1001016BC(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "setQuickNoteFirstLaunch:", 0);
}

void sub_1001016E8(void *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v9[4];
  id v10;

  v3 = a2;
  v4 = a1;
  v5 = objc_opt_class(SBSUISystemNotesWindowScene);
  v6 = ICCheckedDynamicCast(v5, v4);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1001017A0;
  v9[3] = &unk_100554F78;
  v10 = v3;
  v8 = v3;
  objc_msgSend(v7, "takeScreenshotOfDisplays:handler:", 0, v9);

}

void sub_1001017A0(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;

  v9 = a3;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "allValues"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ic_map:", &stru_100554F50));

  if (objc_msgSend(v6, "count"))
  {
    v7 = v6;
    v8 = 0;
  }
  else
  {
    v7 = 0;
    v8 = v9;
  }
  (*(void (**)(_QWORD, void *, id))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v7, v8);

}

NSData *__cdecl sub_100101838(id a1, UIImage *a2)
{
  const void *v2;
  UIImage *v3;
  UIImage *v4;
  NSData *v5;
  void *v6;

  v2 = (const void *)UICreateCGImageFromIOSurface(-[UIImage ioSurface](a2, "ioSurface"));
  v3 = +[UIImage imageWithCGImage:](UIImage, "imageWithCGImage:", CFAutorelease(v2));
  v4 = (UIImage *)objc_claimAutoreleasedReturnValue(v3);
  v5 = UIImagePNGRepresentation(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return (NSData *)v6;
}

uint64_t sub_100102FB0(uint64_t a1)
{
  _QWORD v2[5];

  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100103004;
  v2[3] = &unk_100550110;
  v2[4] = *(_QWORD *)(a1 + 32);
  return performBlockOnMainThread(v2);
}

void sub_100103004(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "eventReporter"));
  objc_msgSend(v1, "startWindowSceneEventDurationTracking");

}

void sub_100103D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id *location, id *a20,id *a21,id *a22,id *a23,id *a24,id *a25)
{
  id *v25;
  id *v26;
  uint64_t v27;

  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(location);
  objc_destroyWeak(a20);
  objc_destroyWeak(a21);
  objc_destroyWeak(a22);
  objc_destroyWeak(a23);
  objc_destroyWeak(a24);
  objc_destroyWeak(a25);
  objc_destroyWeak((id *)(v27 - 120));
  objc_destroyWeak((id *)(v27 - 112));
  _Unwind_Resume(a1);
}

void sub_100103E18(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void **v22;
  uint64_t v23;
  void (*v24)(uint64_t, void *);
  void *v25;
  id v26;
  id v27;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  objc_msgSend(v7, "setDisplayGenericTitle:", 0);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionViewDiffableDataSource"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "snapshot"));
  objc_msgSend(v7, "setDisplayDisclosure:", (uint64_t)objc_msgSend(v12, "numberOfSections") > 1);

  v13 = objc_opt_class(ICFolderListSectionIdentifier);
  v14 = ICDynamicCast(v13, v9);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v16 = v15;
  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
  {
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "accountObjectID"));
    v19 = (*(uint64_t (**)(uint64_t, void *))(v17 + 16))(v17, v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    objc_msgSend(v7, "setUpgradeButtonTapHandler:", v20);

  }
  else
  {
    objc_msgSend(v7, "setUpgradeButtonTapHandler:", 0);
  }
  objc_msgSend(v7, "setFolderListSectionIdentifier:", v16);
  objc_msgSend(v7, "setTagSelection:", 0);
  if (objc_msgSend(v16, "sectionType") == (id)8)
  {
    v22 = _NSConcreteStackBlock;
    v23 = 3221225472;
    v24 = sub_10010405C;
    v25 = &unk_100554FA0;
    objc_copyWeak(&v27, (id *)(a1 + 48));
    v26 = *(id *)(a1 + 40);
    objc_msgSend(v7, "setTagSelectionDidChange:", &v22);
    v21 = objc_loadWeakRetained((id *)(a1 + 48));
    objc_msgSend(v7, "setShouldDisplayTagSelectionOperator:", objc_msgSend(v21, "shouldDisplayTagOperatorInTagHeading", v22, v23, v24, v25));

    objc_destroyWeak(&v27);
  }
  else
  {
    objc_msgSend(v7, "setTagSelectionDidChange:", 0);
    objc_msgSend(v7, "setShouldDisplayTagSelectionOperator:", 0);
  }
  objc_msgSend(v7, "setUsesSidebarHeaderConfiguration:", objc_msgSend(v7, "ic_inSidebar"));
  if (+[UIDevice ic_isVision](UIDevice, "ic_isVision"))
    objc_msgSend(v7, "setHorizontalInsetsOverride:", 24.0);

}

void sub_100104044(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_10010405C(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setTagSelection:", v5);

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

void sub_1001040B8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6;
  id v7;
  id WeakRetained;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;

  v6 = a2;
  v7 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v9 = WeakRetained;
  if (WeakRetained)
  {
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "presentingViewController"));
    objc_msgSend(v6, "setPresentingViewController:", v10);

    objc_msgSend(v6, "setHasGroupInset:", objc_msgSend(v9, "hasGroupInset"));
    objc_msgSend(v6, "setHasDisclosureIndicator:", objc_msgSend(v9, "hasGroupInset"));
    objc_msgSend(v6, "setShouldIndentNoteCount:", objc_msgSend(v9, "shouldIndentNoteCount"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "unsupportedFolderInfoButtonTapHandler"));
    objc_msgSend(v6, "setUnsupportedFolderInfoButtonTapHandler:", v11);

    v12 = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(v6, "setAccessibilityCustomActionsDelegate:", v12);

    v13 = objc_opt_class(NSManagedObjectID);
    v14 = ICDynamicCast(v13, v7);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    LODWORD(v11) = objc_msgSend(v15, "ic_isModernContainerType");

    if ((_DWORD)v11)
    {
      v16 = objc_opt_class(ICNoteContainer);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "modernViewContext"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectWithID:", v7));
      v19 = ICCheckedDynamicCast(v16, v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      objc_msgSend(v6, "setNoteContainer:", v20);
LABEL_6:

      goto LABEL_12;
    }
    v21 = objc_opt_class(NSManagedObjectID);
    v22 = ICDynamicCast(v21, v7);
    v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24 = objc_msgSend(v23, "ic_isLegacyContainerType");

    if (v24)
    {
      v25 = objc_opt_class(NoteCollectionObject);
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "legacyViewContext"));
      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "objectWithID:", v7));
      v26 = ICCheckedDynamicCast(v25, v18);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v26);
      objc_msgSend(v6, "setNoteCollection:", v20);
      goto LABEL_6;
    }
    v27 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
    if ((objc_opt_isKindOfClass(v7, v27) & 1) != 0)
    {
      v28 = objc_opt_class(ICVirtualSmartFolderItemIdentifier);
      v29 = ICCheckedDynamicCast(v28, v7);
      v30 = objc_claimAutoreleasedReturnValue(v29);
      objc_msgSend(v6, "setVirtualSmartFolder:", v30);
    }
    else
    {
      v30 = os_log_create("com.apple.notes", "UI");
      if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT))
        sub_10040BD48((uint64_t)v7, v30);
    }

  }
LABEL_12:

}

void sub_100104330(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id WeakRetained;
  void **v11;
  uint64_t v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  id v15;
  id v16;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v7, "setHasGroupInset:", objc_msgSend(WeakRetained, "hasGroupInset"));

  v11 = _NSConcreteStackBlock;
  v12 = 3221225472;
  v13 = sub_100104440;
  v14 = &unk_100554FA0;
  objc_copyWeak(&v16, (id *)(a1 + 40));
  v15 = *(id *)(a1 + 32);
  objc_msgSend(v7, "setSelectionDidChange:", &v11);
  objc_msgSend(v7, "setAllowsExclusion:", 1, v11, v12, v13, v14);

  objc_destroyWeak(&v16);
}

void sub_100104428(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_100104440(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setTagSelection:", v5);

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

void sub_10010449C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  id WeakRetained;
  void *v12;
  id v13;
  void **v14;
  uint64_t v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  id v18;
  id v19;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  v14 = _NSConcreteStackBlock;
  v15 = 3221225472;
  v16 = sub_1001045C8;
  v17 = &unk_100554FA0;
  v10 = (id *)(a1 + 40);
  objc_copyWeak(&v19, (id *)(a1 + 40));
  v18 = *(id *)(a1 + 32);
  objc_msgSend(v7, "setSelectionChangeHandler:", &v14);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tagSelection", v14, v15, v16, v17));
  objc_msgSend(v7, "setTagSelection:", v12);

  v13 = objc_loadWeakRetained(v10);
  objc_msgSend(v13, "updateTagOperatorVisibility");

  objc_destroyWeak(&v19);
}

void sub_1001045B0(_Unwind_Exception *a1)
{
  id *v1;

  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1001045C8(uint64_t a1, void *a2)
{
  id WeakRetained;
  uint64_t v4;
  id v5;

  v5 = a2;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "setTagSelection:", v5);

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);

}

id sub_100104624(id *a1, uint64_t a2, void *a3, void *a4)
{
  id v6;
  id v7;
  uint64_t v8;
  id *v9;
  uint64_t v10;
  uint64_t v11;
  char isKindOfClass;
  id v13;
  id WeakRetained;
  void *v15;

  v6 = a4;
  v7 = a3;
  v8 = objc_opt_class(ICFolderListSectionIdentifier);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    v9 = a1 + 4;
  }
  else
  {
    v10 = objc_opt_class(ICTagContainerItemIdentifier);
    if ((objc_opt_isKindOfClass(v6, v10) & 1) != 0)
    {
      v9 = a1 + 5;
    }
    else
    {
      v11 = objc_opt_class(ICTagOperatorItemIdentifier);
      isKindOfClass = objc_opt_isKindOfClass(v6, v11);
      v9 = a1 + 7;
      if ((isKindOfClass & 1) != 0)
        v9 = a1 + 6;
    }
  }
  v13 = *v9;
  WeakRetained = objc_loadWeakRetained(a1 + 8);
  v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "dequeueConfiguredReusableCellWithRegistration:forIndexPath:item:", v13, v7, v6));

  return v15;
}

void sub_10010471C(uint64_t a1, void *a2)
{
  id *v3;
  id WeakRetained;
  id v5;

  v3 = (id *)(a1 + 40);
  v5 = a2;
  WeakRetained = objc_loadWeakRetained(v3);
  objc_msgSend(v5, "setHasGroupInset:", objc_msgSend(WeakRetained, "hasGroupInset"));

  objc_msgSend(v5, "setCloseHandler:", *(_QWORD *)(a1 + 32));
}

id sub_10010477C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "dequeueConfiguredReusableSupplementaryViewWithRegistration:forIndexPath:", *(_QWORD *)(a1 + 32));
}

void sub_100104788(uint64_t a1, void *a2)
{
  void *v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void (**v11)(_QWORD, _QWORD);
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICExpansionState sharedExpansionState](ICExpansionState, "sharedExpansionState"));
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "indexer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "expansionStateContext"));
  objc_msgSend(v3, "expandItemIdentifier:context:", v12, v7);

  v8 = objc_loadWeakRetained(v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "willExpandItemHandler"));

  if (v9)
  {
    v10 = objc_loadWeakRetained(v4);
    v11 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "willExpandItemHandler"));
    ((void (**)(_QWORD, id))v11)[2](v11, v12);

  }
}

void sub_100104874(uint64_t a1, void *a2)
{
  void *v3;
  id *v4;
  id WeakRetained;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void (**v11)(_QWORD, _QWORD);
  id v12;

  v12 = a2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICExpansionState sharedExpansionState](ICExpansionState, "sharedExpansionState"));
  v4 = (id *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "indexer"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "expansionStateContext"));
  objc_msgSend(v3, "collapseItemIdentifier:context:", v12, v7);

  v8 = objc_loadWeakRetained(v4);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "willCollapseItemHandler"));

  if (v9)
  {
    v10 = objc_loadWeakRetained(v4);
    v11 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "willCollapseItemHandler"));
    ((void (**)(_QWORD, id))v11)[2](v11, v12);

  }
}

void sub_100104A4C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 56));
  _Unwind_Resume(a1);
}

void sub_100104A68(uint64_t a1, void *a2)
{
  id v2;
  id v3;
  uint64_t v4;
  id *v5;
  void *i;
  uint64_t v7;
  id WeakRetained;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  id obj;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];

  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v18 = a2;
  obj = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "allVirtualSmartFolderIdentifiers"));
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v22;
    v5 = (id *)(a1 + 40);
    do
    {
      for (i = 0; i != v3; i = (char *)i + 1)
      {
        if (*(_QWORD *)v22 != v4)
          objc_enumerationMutation(obj);
        v7 = *(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * (_QWORD)i);
        WeakRetained = objc_loadWeakRetained(v5);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "collectionViewDiffableDataSource"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "indexPathForItemIdentifier:", v7));

        if (v10)
        {
          v11 = objc_loadWeakRetained(v5);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "collectionView"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "cellForItemAtIndexPath:", v10));

        }
        else
        {
          v13 = 0;
        }
        v14 = objc_opt_class(ICFolderOutlineCollectionViewCell);
        v15 = ICDynamicCast(v14, v13);
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        objc_msgSend(v16, "setVirtualSmartFolder:", v7);

      }
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v3);
  }

  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v18);

}

uint64_t sub_10010538C(uint64_t a1, void *a2)
{
  void *v2;
  id v3;
  void *v4;
  unsigned int v5;

  v2 = *(void **)(a1 + 32);
  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "modernViewContext"));
  v5 = objc_msgSend(v3, "isHiddenInContext:", v4);

  return v5 ^ 1;
}

void sub_100105954(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  double v12;
  void *v13;
  void *v14;
  void *v15;
  BOOL v16;
  void *v17;
  void *v18;
  id obj;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  obj = *(id *)(a1 + 32);
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v2)
  {
    v3 = v2;
    v4 = *(_QWORD *)v21;
    do
    {
      v5 = 0;
      do
      {
        if (*(_QWORD *)v21 != v4)
          objc_enumerationMutation(obj);
        v6 = *(void **)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)v5);
        v7 = objc_opt_class(ICAttachmentDrawingModel);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "attachmentModel"));
        v9 = ICDynamicCast(v7, v8);
        v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

        v11 = (void *)objc_claimAutoreleasedReturnValue(+[UIScreen mainScreen](UIScreen, "mainScreen"));
        objc_msgSend(v11, "scale");
        v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "attachmentPreviewImageWithMinSize:scale:", 240.0, 240.0, v12));

        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "orientedImage"));
        if (v10)
        {
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "drawing"));

          if (v15)
            v16 = v14 == 0;
          else
            v16 = 1;
          if (!v16)
          {
            objc_msgSend(*(id *)(a1 + 40), "addObject:", v6);
            v17 = *(void **)(a1 + 48);
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "drawing"));
            objc_msgSend(v17, "addObject:", v18);

            objc_msgSend(*(id *)(a1 + 56), "addObject:", v14);
          }
        }

        v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      v3 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v3);
  }

}

void sub_1001071D0(uint64_t a1)
{
  void *v2;
  UIImage *v3;
  UIImage *v4;
  NSData *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;

  v2 = *(void **)(a1 + 32);
  +[ICDrawing defaultPixelSize](ICDrawing, "defaultPixelSize");
  v10 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "attachmentPreviewImageWithMinSize:scale:"));
  v3 = (UIImage *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "image"));
  v4 = v3;
  if (v3)
  {
    v5 = UIImagePNGRepresentation(v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = *(void **)(a1 + 40);
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("/image_%d.png"), *(_QWORD *)(a1 + 56)));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "URLByAppendingPathComponent:isDirectory:", v8, 0));

    objc_msgSend(v6, "writeToURL:atomically:", v9, 1);
    objc_msgSend(*(id *)(a1 + 48), "addObject:", v9);

  }
}

void sub_100108C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100108C40(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100108C50(uint64_t a1)
{

}

void sub_100108C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(+[ICNote ic_objectsFromObjectIDs:context:](ICNote, "ic_objectsFromObjectIDs:context:", a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40)));
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
}

uint64_t sub_100108EC4(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
  if (v4 == *(void **)(a1 + 32))
    v5 = (uint64_t)objc_msgSend(v3, "isDeletedOrInTrash");
  else
    v5 = 1;

  return v5;
}

void sub_100108F28(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "type"));
  objc_msgSend(v2, "undoablyMoveNotes:toVirtualSmartFolderType:completionHandler:", v3, v4, *(_QWORD *)(a1 + 56));

}

void sub_1001099C4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "markAsSystemPaperIfNeeded:", *(unsigned __int8 *)(a1 + 48), (_QWORD)v8);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  objc_msgSend(v7, "ic_save");

}

void sub_100109BA4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "markAsMathNoteIfNeeded:", *(unsigned __int8 *)(a1 + 48), (_QWORD)v8);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  objc_msgSend(v7, "ic_save");

}

void sub_100109D84(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[128];

  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v9;
    do
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v9 != v5)
          objc_enumerationMutation(v2);
        objc_msgSend(*(id *)(*((_QWORD *)&v8 + 1) + 8 * (_QWORD)v6), "markAsCallNoteIfNeeded:", *(unsigned __int8 *)(a1 + 48), (_QWORD)v8);
        v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v8, v12, 16);
    }
    while (v4);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "managedObjectContext"));
  objc_msgSend(v7, "ic_save");

}

void sub_10010A530(uint64_t a1)
{
  id v1;

  v1 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "managedObjectContext"));
  objc_msgSend(v1, "ic_save");

}

void sub_10010A8BC(uint64_t a1)
{
  void *v2;
  void *v3;
  BOOL v4;
  void *v5;
  id v6;

  if (objc_msgSend(*(id *)(a1 + 32), "isSmartFolder"))
  {
    v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "smartFolderQuery"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "tagSelectionWithManagedObjectContext:", *(_QWORD *)(a1 + 40)));
    if (objc_msgSend(v3, "isNonEmpty"))
      v4 = v6 == 0;
    else
      v4 = 1;
    if (!v4)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tagIdentifiers"));
      objc_msgSend(v6, "deleteUnusedHashtagsWithStandardizedContent:", v5);

    }
  }
}

void sub_10010AA4C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  if (objc_msgSend(*(id *)(a1 + 32), "isSmartFolder"))
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "smartFolderQuery"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "tagSelectionWithManagedObjectContext:", *(_QWORD *)(a1 + 40)));
    v12 = 0u;
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "tagIdentifiers", 0));
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v13;
      do
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v13 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)v8);
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "account"));
          v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICHashtag hashtagWithStandardizedContent:onlyVisible:account:](ICHashtag, "hashtagWithStandardizedContent:onlyVisible:account:", v9, 0, v10));
          objc_msgSend(v11, "unmarkForDeletion");

          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
      }
      while (v6);
    }

  }
}

void sub_10010B580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010B598(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;

  v3 = a2;
  objc_msgSend(v3, "setTotalUnitCount:", objc_msgSend(*(id *)(a1 + 32), "count"));
  objc_msgSend(v3, "setCompletedUnitCount:", 0);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_10010B678;
  v8[3] = &unk_1005551A0;
  v4 = *(void **)(a1 + 40);
  v9 = *(id *)(a1 + 32);
  v10 = v3;
  v11 = *(id *)(a1 + 40);
  v5 = *(id *)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v12 = v5;
  v13 = v6;
  v7 = v3;
  objc_msgSend(v4, "performBlockAndWait:", v8);

}

void sub_10010B678(uint64_t a1)
{
  id v2;
  id v3;
  __int128 v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *i;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  id v14;
  void *v15;
  unsigned __int8 v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  void *v22;
  id v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t buf[4];
  uint64_t v29;
  _BYTE v30[128];

  v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v2 = *(id *)(a1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
  if (v3)
  {
    v5 = v3;
    v6 = 0;
    v7 = *(_QWORD *)v25;
    *(_QWORD *)&v4 = 138412290;
    v21 = v4;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v25 != v7)
          objc_enumerationMutation(v2);
        v9 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
        v10 = objc_autoreleasePoolPush();
        if (objc_msgSend(*(id *)(a1 + 40), "isCancelled"))
        {
          objc_autoreleasePoolPop(v10);
          goto LABEL_16;
        }
        v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote ic_existingObjectWithID:context:](ICNote, "ic_existingObjectWithID:context:", v9, *(_QWORD *)(a1 + 48)));
        if (v11)
        {
          v12 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
          v13 = objc_claimAutoreleasedReturnValue(v12);
          if (v13)
            objc_msgSend(v22, "addObject:", v13);
        }
        else
        {
          v13 = os_log_create("com.apple.notes", "Move");
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = v21;
            v29 = v9;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Cannot retrieve note to be processed — skipping {objectID: %@}", buf, 0xCu);
          }
        }

        objc_msgSend(*(id *)(a1 + 40), "setCompletedUnitCount:", (char *)i + v6 + 1);
        objc_autoreleasePoolPop(v10);
      }
      v5 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
      v6 += (uint64_t)i;
      if (v5)
        continue;
      break;
    }
  }
LABEL_16:

  if ((objc_msgSend(*(id *)(a1 + 48), "ic_isMainThreadContext") & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v15 = *(void **)(a1 + 48);
    v23 = 0;
    v16 = objc_msgSend(v15, "save:", &v23);
    v14 = v23;
    if ((v16 & 1) == 0)
    {
      v17 = os_log_create("com.apple.notes", "CoreData");
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        sub_10040C080();

    }
  }
  v18 = objc_claimAutoreleasedReturnValue(+[NSManagedObject ic_permanentObjectIDsFromObjects:](NSManagedObject, "ic_permanentObjectIDsFromObjects:", v22, v21));
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  v20 = *(void **)(v19 + 40);
  *(_QWORD *)(v19 + 40) = v18;

}

uint64_t sub_10010B91C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD))(result + 16))(result, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  return result;
}

NSString *__cdecl sub_10010BA9C(id a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Moving note %lu of %lu…"), &stru_1005704B8, 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v6, a2, a3));
  return (NSString *)v7;
}

id sub_10010BB28(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  NSObject *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  NSObject *v20;
  id v21;
  void *v22;
  NSObject *v23;

  v3 = a2;
  v4 = *(void **)(a1 + 32);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v5));

  if (v6)
  {
    v7 = *(void **)(a1 + 32);
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v8));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder ic_existingObjectWithID:context:](ICFolder, "ic_existingObjectWithID:context:", v9, v10));

  }
  else
  {
    v11 = 0;
  }
  if (objc_msgSend(v11, "isSmartFolder"))
  {
    v12 = os_log_create("com.apple.notes", "CoreData");
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      sub_10040C150();

    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "account"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultFolder"));

    v11 = (void *)v14;
  }
  if (v11)
  {
    if (objc_msgSend(v3, "markedForDeletion"))
    {
      v15 = *(void **)(a1 + 40);
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
      v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v16));

      v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
      v19 = (void *)objc_claimAutoreleasedReturnValue(+[ICNote ic_existingObjectWithID:context:](ICNote, "ic_existingObjectWithID:context:", v17, v18));

      objc_msgSend(*(id *)(a1 + 48), "unmarkNoteAndAttachmentsForDeletion:", v3);
      if (v19)
      {
        objc_msgSend(*(id *)(a1 + 48), "markNoteAndAttachmentsForDeletion:", v19);
      }
      else
      {
        v23 = os_log_create("com.apple.notes", "CoreData");
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          sub_10040C124();

      }
      v21 = v3;

    }
    else
    {
      objc_msgSend(v3, "setFolder:", v11);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v3, "setFolderModificationDate:", v22);

      objc_msgSend(v3, "updateChangeCountWithReason:", CFSTR("Unmoved note"));
      v21 = v3;
    }
  }
  else
  {
    v20 = os_log_create("com.apple.notes", "CoreData");
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      sub_10040C0AC(v3);

    v21 = 0;
  }

  return v21;
}

NSString *__cdecl sub_10010C020(id a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Moving note %lu of %lu…"), &stru_1005704B8, 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v6, a2, a3));
  return (NSString *)v7;
}

id sub_10010C0AC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  NSObject *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  unsigned __int8 v31;
  ICCloudSyncingObjectMoveAction *v32;
  void *v33;
  void *v34;
  id v35;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "folder"));
  v5 = *(void **)(a1 + 32);
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v6));
  if (v7)
  {
    v8 = *(void **)(a1 + 32);
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", v9));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "managedObjectContext"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[ICFolder ic_existingObjectWithID:context:](ICFolder, "ic_existingObjectWithID:context:", v10, v11));

  }
  else
  {
    v12 = 0;
  }

  if (objc_msgSend(v12, "isSmartFolder"))
  {
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
    v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "defaultFolder"));

    v12 = (void *)v14;
  }
  if (v12)
  {
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "folder"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectID"));
    v17 = *(void **)(a1 + 40);
    v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v16, v18);

    if ((+[ICMoveDecision shouldCopyThenDeleteWhenMovingObject:toNoteContainer:](ICMoveDecision, "shouldCopyThenDeleteWhenMovingObject:toNoteContainer:", v3, v12) & 1) != 0)
    {
      if (objc_msgSend(v3, "isPasswordProtected"))
      {
        if (objc_msgSend(v3, "isAuthenticated"))
        {
          v19 = (id)objc_claimAutoreleasedReturnValue(+[ICNote duplicateNote:intoFolder:isPasswordProtected:removeOriginalNote:](ICNote, "duplicateNote:intoFolder:isPasswordProtected:removeOriginalNote:", v3, v12, 1, 1));
          objc_msgSend(v19, "setIsPinned:", objc_msgSend(v3, "isPinned"));
          objc_msgSend(v19, "setPreferredBackgroundType:", objc_msgSend(v3, "preferredBackgroundType"));
          objc_msgSend(v19, "updateChangeCountWithReason:", CFSTR("Moved note"));
        }
        else
        {
          v19 = 0;
        }
        v21 = 0;
        goto LABEL_19;
      }
      v19 = +[ICNote newEmptyNoteInFolder:](ICNote, "newEmptyNoteInFolder:", v12);
      v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "ic_permanentObjectID"));
      v25 = *(void **)(a1 + 48);
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectID"));
      objc_msgSend(v25, "setObject:forKeyedSubscript:", v24, v26);

      objc_msgSend(v3, "copyValuesToNote:", v19);
      v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "account"));
      objc_msgSend(v19, "setAccount:", v27);

      v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "account"));
      objc_msgSend(v19, "setAccount:", v28);

      v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v19, "setFolderModificationDate:", v29);

      objc_msgSend(v19, "updateChangeCountWithReason:", CFSTR("Moved note"));
      objc_msgSend(*(id *)(a1 + 56), "markNoteAndAttachmentsForDeletion:", v3);
      v23 = v3;
    }
    else
    {
      objc_msgSend(v3, "setFolder:", v12);
      v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
      objc_msgSend(v3, "setFolderModificationDate:", v22);

      objc_msgSend(v3, "updateChangeCountWithReason:", CFSTR("Moved note"));
      v23 = v3;
      v19 = v23;
    }
    v21 = v23;
LABEL_19:
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSUndoManager shared](NSUndoManager, "shared"));
    v31 = objc_msgSend(v30, "isUndoing");

    if ((v31 & 1) == 0)
    {
      v32 = -[ICCloudSyncingObjectMoveAction initWithObject:fromParentObject:toParentObject:isCopy:]([ICCloudSyncingObjectMoveAction alloc], "initWithObject:fromParentObject:toParentObject:isCopy:", v3, v4, v12, 0);
      if (v32)
        +[ICCloudSyncingObject undoablyPersistActivityEventsForMoveAction:oldObject:newObject:](ICCloudSyncingObject, "undoablyPersistActivityEventsForMoveAction:oldObject:newObject:", v32, v3, v19);

    }
    v33 = *(void **)(a1 + 64);
    v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "objectID"));
    objc_msgSend(v33, "ic_addNonNilObject:", v34);

    goto LABEL_24;
  }
  v20 = os_log_create("com.apple.notes", "CoreData");
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    sub_10040C188(v3);

  v19 = 0;
  v21 = 0;
LABEL_24:
  v35 = v21;

  return v35;
}

void sub_10010C4E8(_QWORD *a1, void *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;

  v8 = a2;
  if (objc_msgSend(v8, "count"))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUndoManager shared](NSUndoManager, "shared"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "prepareWithInvocationTarget:", a1[4]));
    objc_msgSend(v4, "undoablyUnmoveNoteIDs:toFolderIDs:originalToCopyNoteIDs:actionName:noteToFolderIDsForRedo:workerContext:", v8, a1[5], a1[6], a1[7], a1[8], a1[9]);

    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSUndoManager shared](NSUndoManager, "shared"));
    objc_msgSend(v5, "setActionName:", a1[7]);

  }
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUndoManager shared](NSUndoManager, "shared"));
  objc_msgSend(v6, "endUndoGrouping");

  v7 = a1[11];
  if (v7)
    (*(void (**)(uint64_t, _QWORD))(v7 + 16))(v7, a1[10]);

}

void sub_10010CB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010CB60(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  NSObject *v7;
  _BOOL4 v8;
  const char *v9;
  int v10;
  id v11;

  v5 = a2;
  v6 = a3;
  if (v6)
  {
    v7 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      sub_10040C240((uint64_t)v6, v7);
    goto LABEL_4;
  }
  v7 = os_log_create("com.apple.notes", "LaunchTask");
  v8 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
  if (!v5)
  {
    if (v8)
    {
      LOWORD(v10) = 0;
      v9 = "No client state found from CoreSpotlight.";
      goto LABEL_14;
    }
LABEL_4:

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
    goto LABEL_5;
  }
  if (v8)
  {
    v10 = 138412290;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Client State from CoreSpotlight: %@", (uint8_t *)&v10, 0xCu);
  }

  if ((objc_msgSend(v5, "isEqual:", *(_QWORD *)(a1 + 32)) & 1) == 0)
  {
    v7 = os_log_create("com.apple.notes", "LaunchTask");
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      v9 = "clientStateFromCoreSpotlight not equal to clientStateFromDefaults";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v10, 2u);
      goto LABEL_4;
    }
    goto LABEL_4;
  }
LABEL_5:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));

}

void sub_10010CE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010CE70(uint64_t a1, void *a2)
{
  id *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id WeakRetained;

  v2 = (id *)(a1 + 32);
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[UIColor systemBackgroundColor](UIColor, "systemBackgroundColor"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "traitCollection"));

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "resolvedColorWithTraitCollection:", v5));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "view"));
  objc_msgSend(v7, "setBackgroundColor:", v6);

}

void sub_10010D294(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "directory"));

  if (v2)
  {
    v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "directory"));
    +[ICCallNoteCoordinator importAndDeleteCallRecordingFilesIfNeededFromDirectory:managedObjectContext:](ICCallNoteCoordinator, "importAndDeleteCallRecordingFilesIfNeededFromDirectory:managedObjectContext:", v3, *(_QWORD *)(a1 + 40));

  }
  else
  {
    +[ICCallNoteCoordinator importAndDeleteCallRecordingFilesIfNeededFromDirectory:managedObjectContext:](ICCallNoteCoordinator, "importAndDeleteCallRecordingFilesIfNeededFromDirectory:managedObjectContext:", 0, *(_QWORD *)(a1 + 40));
  }
}

void sub_10010D6B0(id a1)
{
  void *v1;
  void *v2;
  id v3;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[ICNoteContext sharedContext](ICNoteContext, "sharedContext"));
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "managedObjectContext"));

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachmentPreviewGenerator sharedGenerator](ICAttachmentPreviewGenerator, "sharedGenerator"));
  objc_msgSend(v2, "generateMissingOrOutdatedAttachmentMetaDataIfNeededInContext:", v3);

}

id sub_10010DA14(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "clearAtIndexPath:", *(_QWORD *)(a1 + 40));
}

__CFString *sub_10010E420(void *a1)
{
  __CFString *v1;
  __CFString *v2;
  __CFString *v3;

  v1 = a1;
  if (-[__CFString length](v1, "length"))
    v2 = v1;
  else
    v2 = CFSTR("(None)");
  v3 = v2;

  return v3;
}

void sub_10010E8D0(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;

  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 72));
  _Unwind_Resume(a1);
}

id sub_10010E8EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "ic_save");
}

void sub_10010E8F4(uint64_t a1)
{
  id WeakRetained;
  void *v3;
  void *v4;
  uint64_t v5;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
  v5 = *(_QWORD *)(a1 + 32);
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v5, 1));
  objc_msgSend(v3, "reloadRowsAtIndexPaths:withRowAnimation:", v4, 100);

}

void sub_10010ECAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id location)
{
  id *v32;

  objc_destroyWeak(v32);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010ED14(uint64_t a1)
{
  id WeakRetained;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  _QWORD v7[6];

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  +[CATransaction begin](CATransaction, "begin");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10010EDF4;
  v7[3] = &unk_10054FE80;
  v3 = *(_QWORD *)(a1 + 32);
  v7[4] = WeakRetained;
  v7[5] = v3;
  +[CATransaction setCompletionBlock:](CATransaction, "setCompletionBlock:", v7);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "indexPathForSelectedRow"));
  objc_msgSend(v4, "deselectRowAtIndexPath:animated:", v6, 1);

  +[CATransaction commit](CATransaction, "commit");
}

id sub_10010EDF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setAttachment:", *(_QWORD *)(a1 + 40));
}

void sub_10010EDFC(uint64_t a1)
{
  void *v1;
  void *v2;
  void *v3;
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "tableView"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "indexPathForSelectedRow"));
  objc_msgSend(v1, "deselectRowAtIndexPath:animated:", v3, 1);

}

id sub_10010F330(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;

  v3 = a2;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier"));
  if (objc_msgSend(v4, "isEqualToString:", v5))
    v6 = 0;
  else
    v6 = v3;
  v7 = v6;

  return v7;
}

id sub_10010F3E4(id a1, ICAttachment *a2)
{
  return -[ICAttachment identifier](a2, "identifier");
}

void sub_10010F834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location, id a18)
{
  id *v18;
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a18);
  _Unwind_Resume(a1);
}

void sub_10010F86C(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  v3 = objc_loadWeakRetained((id *)(a1 + 40));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10010F8F8;
  v5[3] = &unk_10054FE80;
  v6 = WeakRetained;
  v7 = v3;
  v4 = WeakRetained;
  performBlockOnMainThread(v5);

}

void sub_10010F8F8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  id v12;
  void *v13;
  void *v14;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "results", 0));
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)v17;
    while (2)
    {
      for (i = 0; i != v4; i = (char *)i + 1)
      {
        if (*(_QWORD *)v17 != v5)
          objc_enumerationMutation(v2);
        v7 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)i);
        v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uniqueIdentifier"));
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "attachment"));
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "searchIndexingIdentifier"));
        v11 = objc_msgSend(v8, "isEqualToString:", v10);

        if (v11)
        {
          v12 = sub_10010FAA4(v7);
          v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          objc_msgSend(*(id *)(a1 + 40), "setSpotlightResults:", v13);

          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "tableView"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", 7));
          objc_msgSend(v14, "reloadSections:withRowAnimation:", v15, 100);

          goto LABEL_11;
        }
      }
      v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
      if (v4)
        continue;
      break;
    }
  }
LABEL_11:

}

id sub_10010FAA4(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  ICKeyValuePair *v13;
  void *v14;
  void *v15;
  ICKeyValuePair *v16;
  id v17;
  void *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[128];

  v1 = a1;
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v19 = v1;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "attributeSet"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "attributeDictionary"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", CFSTR("_kMDItemSDBInfo")));

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allKeys"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "sortedArrayUsingSelector:", "compare:"));

  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v21;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v21 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v20 + 1) + 8 * (_QWORD)i);
        v13 = [ICKeyValuePair alloc];
        v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v12));
        v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "debugDescription"));
        v16 = -[ICKeyValuePair initWithKey:value:](v13, "initWithKey:value:", v12, v15);
        objc_msgSend(v2, "addObject:", v16);

      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v20, v24, 16);
    }
    while (v9);
  }

  v17 = objc_msgSend(v2, "copy");
  return v17;
}

void sub_1001101F4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;

  v3 = a2;
  v4 = os_log_create("com.apple.notes", "LaunchTask");
  v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      sub_10040C36C(a1, (uint64_t)v3, v5);
  }
  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      sub_10040C2F4(a1, v5);

    v5 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", 11));
    +[ICSettingsUtilities setObject:forKey:](ICSettingsUtilities, "setObject:forKey:", v5, kICSearchIndexingVersionKey);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1001104C0(uint64_t a1)
{
  ICMoveDecisionController *v2;
  void *v3;
  void *v4;
  void *v5;
  ICMoveDecisionController *v6;
  void *v7;
  _QWORD v8[5];
  id v9;
  void *v10;

  v2 = [ICMoveDecisionController alloc];
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "note"));
  v10 = v3;
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v10, 1));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "presentingViewController"));
  v6 = -[ICMoveDecisionController initWithSourceObjects:presentingViewController:](v2, "initWithSourceObjects:presentingViewController:", v4, v5);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_1001105E4;
  v8[3] = &unk_100552078;
  v7 = *(void **)(a1 + 40);
  v8[4] = *(_QWORD *)(a1 + 32);
  v9 = v7;
  -[ICMoveDecisionController performDecisionWithCompletion:](v6, "performDecisionWithCompletion:", v8);

}

void sub_1001105E4(uint64_t a1, void *a2)
{
  uint64_t v3;
  _BOOL8 v4;
  void *v5;
  id v6;

  v6 = a2;
  objc_msgSend(*(id *)(a1 + 32), "activityDidFinish:", 1);
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v4 = objc_msgSend(v6, "count") != 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "activityType"));
    (*(void (**)(uint64_t, _BOOL8, void *))(v3 + 16))(v3, v4, v5);

  }
}

void sub_100110A4C()
{
  objc_end_catch();
  JUMPOUT(0x100110A54);
}

id sub_100110A60()
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)qword_1005DDFD0;
  v7 = qword_1005DDFD0;
  if (!qword_1005DDFD0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_1001115CC;
    v3[3] = &unk_100550C10;
    v3[4] = &v4;
    sub_1001115CC((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100110B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100110CEC()
{
  objc_end_catch();
  JUMPOUT(0x100110CF4);
}

void sub_1001114E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  id v11;

  if (a2 == 1)
  {
    v11 = objc_begin_catch(exception_object);
    NSLog(CFSTR("Exception raised when attempting to refresh notes for %@: %@"));

    objc_end_catch();
    JUMPOUT(0x100111494);
  }
  _Unwind_Resume(exception_object);
}

Class sub_1001115CC(uint64_t a1)
{
  char *v2;
  Class result;
  char *v4;
  __int128 v5;
  uint64_t v6;

  v4 = 0;
  if (!qword_1005DDFD8)
  {
    v5 = off_100555430;
    v6 = 0;
    qword_1005DDFD8 = _sl_dlopen(&v5, &v4);
    v2 = v4;
    if (!qword_1005DDFD8)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }
    if (v4)
      goto LABEL_8;
  }
  while (1)
  {
    result = objc_getClass("DADConnection");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_7:
    v2 = (char *)sub_100409510();
LABEL_8:
    free(v2);
  }
  qword_1005DDFD0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

NSString *__cdecl sub_1001117A0(id a1, unint64_t a2, unint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSBundle mainBundle](NSBundle, "mainBundle"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "localizedStringForKey:value:table:", CFSTR("Importing %lu of %lu Notes"), &stru_1005704B8, 0));

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v6, a2, a3));
  return (NSString *)v7;
}

void sub_100111AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100111AC0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100111AD0(uint64_t a1)
{

}

void sub_100111AD8(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id obj;

  v3 = *(void **)(a1 + 32);
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "archiveImporter"));
  v6 = *(_QWORD *)(a1 + 40);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectID"));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  obj = *(id *)(v8 + 40);
  objc_msgSend(v5, "importArchiveAtURL:intoNoteContainerWithID:progress:error:", v6, v7, v4, &obj);

  objc_storeStrong((id *)(v8 + 40), obj);
}

id sub_100111B78(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  void (**v5)(_QWORD, _QWORD);

  if ((objc_msgSend(a2, "isCancelled") & 1) != 0
    || !*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[ICAttachmentPreviewGenerator sharedGenerator](ICAttachmentPreviewGenerator, "sharedGenerator"));
    objc_msgSend(v3, "generatePreviewsIfNeeded");

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "showError:");
  }
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));

  if (v4)
  {
    v5 = (void (**)(_QWORD, _QWORD))objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completion"));
    v5[2](v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

  }
  return objc_msgSend(*(id *)(a1 + 32), "setCompletion:", 0);
}

uint64_t sub_100111E24()
{
  return 4;
}

objc_class *sub_100111E2C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::OpaquePointer preferredElementSize;
  id v7;
  Swift::String v8;
  Class isa;
  Swift::OpaquePointer v10;
  id v11;
  Swift::String v12;
  UIMenu v13;
  void *v14;
  id v15;
  UIImage_optional v17;
  UIImage_optional v18;

  v1 = OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize._rawValue = (void *)swift_allocObject(v5, 64, 7);
    *((_OWORD *)preferredElementSize._rawValue + 1) = xmmword_100451BE0;
    *((_QWORD *)preferredElementSize._rawValue + 4) = sub_10011236C();
    *((_QWORD *)preferredElementSize._rawValue + 5) = sub_1001124CC();
    *((_QWORD *)preferredElementSize._rawValue + 6) = sub_100112624();
    v7 = sub_100112794();
    *((_QWORD *)preferredElementSize._rawValue + 7) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v17.value.super.isa = 0;
    v17.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v17, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize._rawValue, preferredElementSize).super.super.isa;
    v10._rawValue = (void *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)v10._rawValue + 1) = xmmword_100451BF0;
    v11 = sub_10011218C();
    *((_QWORD *)v10._rawValue + 4) = v11;
    *((_QWORD *)v10._rawValue + 5) = isa;
    specialized Array._endMutation()(v11);
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v18.value.super.isa = 0;
    v18.is_nil = 0;
    v13.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v18, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v10._rawValue, v10).super.super.isa;
    v14 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v13;
    v3 = v13.super.super.isa;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_100111FA8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BOOL8 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BOOL8 v24;
  id v25;

  v1 = (void *)sub_10011218C();
  v2 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  v5 = 1;
  if (v3)
  {
    v4 = objc_opt_self(ICMentionsFilterTypeSelection);
    if (swift_dynamicCastObjCClass(v3, v4))
      v5 = 0;
  }
  objc_msgSend(v1, "setState:", v5);

  v6 = sub_10011236C();
  v7 = *(_QWORD *)(v0 + v2);
  v10 = 0;
  if (v7)
  {
    v8 = objc_opt_self(ICMentionsFilterTypeSelection);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      if (objc_msgSend(v9, "selectionType") == (id)1)
        v10 = 1;
    }
  }
  objc_msgSend(v6, "setState:", v10);

  v11 = sub_1001124CC();
  v12 = *(_QWORD *)(v0 + v2);
  v15 = 0;
  if (v12)
  {
    v13 = objc_opt_self(ICMentionsFilterTypeSelection);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      if (!objc_msgSend(v14, "selectionType"))
        v15 = 1;
    }
  }
  objc_msgSend(v11, "setState:", v15);

  v16 = sub_100112624();
  v17 = *(_QWORD *)(v0 + v2);
  v20 = 0;
  if (v17)
  {
    v18 = objc_opt_self(ICMentionsFilterTypeSelection);
    v19 = (void *)swift_dynamicCastObjCClass(v17, v18);
    if (v19)
    {
      if (objc_msgSend(v19, "selectionType") == (id)2)
        v20 = 1;
    }
  }
  objc_msgSend(v16, "setState:", v20);

  v25 = sub_100112794();
  v21 = *(_QWORD *)(v0 + v2);
  v24 = 0;
  if (v21)
  {
    v22 = objc_opt_self(ICMentionsFilterTypeSelection);
    v23 = (void *)swift_dynamicCastObjCClass(v21, v22);
    if (v23)
    {
      if (objc_msgSend(v23, "selectionType") == (id)3)
        v24 = 1;
    }
  }
  objc_msgSend(v25, "setState:", v24);

}

id sub_10011218C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionOff;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionOff];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionOff];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100557E38, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100129574, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_1001122E8(uint64_t a1, char *a2)
{
  void *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  sub_100111FA8();
  v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    v5 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v6 = swift_retain(v5);
    v4(v6);
    sub_100012C50((uint64_t)v4, v5);
  }
}

id sub_10011236C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionAnyone;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionAnyone];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionAnyone];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100557E10, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012954C, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_1001124CC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionMe;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionMe];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionMe];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100557DE8, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100129524, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_100112624()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionSpecificUsers;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionSpecificUsers];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionSpecificUsers];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100557DC0, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1001294FC, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_100112794()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionNone;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionNone];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionNone];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100557D98, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1001294D4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_1001128F0(uint64_t a1, char a2)
{
  char *v2;
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  uint64_t result;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  if ((a2 & 1) == 0)
  {
    v4 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(v4, "managedObjectContext");

      if (v6)
      {
        v7 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_accountObjectID];
        if (v7)
        {
          v8 = objc_allocWithZone((Class)ICMentionsFilterTypeSelection);
          v9 = v7;
          v10 = objc_msgSend(v8, "initWithManagedObjectContext:accountObjectID:selectionType:joinOperator:", v6, v9, a1, a1 == 2);
          v11 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
          *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v10;
          v12 = v10;

          objc_msgSend(v2, "setNeedsUpdateConfiguration");
          goto LABEL_8;
        }

      }
    }
  }
  v14 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  v13 = objc_msgSend(v2, "setNeedsUpdateConfiguration");
LABEL_8:
  result = sub_100111FA8(v13);
  v16 = *(void (**)(uint64_t))&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v16)
  {
    v17 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v18 = swift_retain(v17);
    v16(v18);
    return sub_100012C50((uint64_t)v16, v17);
  }
  return result;
}

id sub_100112B24(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionAnyone] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionMe] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionSpecificUsers] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionNone] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellMentions();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

void sub_100112BDC()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionOff));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionAnyone));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionMe));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionSpecificUsers));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes32FolderComposerFilterCellMentions____lazy_storage___menuActionNone));
}

id sub_100112C48()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellMentions();
  return objc_msgSendSuper2(&v2, "dealloc");
}

objc_class *sub_100112CF0()
{
  return sub_100111E2C();
}

void sub_100112D10()
{
  sub_100111FA8();
}

uint64_t variable initialization expression of OpenAccountIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D6AB0);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18(&qword_1005CEE38);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x746E756F636341, 0xE700000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Notes Account intent", 45, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100476AE0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for account", 33, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for AccountEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&unk_1005CEE40, type metadata accessor for AccountEntity, (uint64_t)&protocol conformance descriptor for AccountEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of SetChecklistItemsCheckedIntentv1._loggingConfiguration()
{
  return sub_1001269D0((uint64_t *)&unk_1005D06C0, 0xD000000000000024, 0x8000000100476B40);
}

uint64_t variable initialization expression of SetChecklistItemsCheckedIntentv1._context()
{
  return sub_1001269D0(&qword_1005CEE50, 0xD000000000000021, 0x8000000100476B70);
}

uint64_t variable initialization expression of RemoveTagsFromNotesIntent._notes()
{
  return sub_10011D434((uint64_t)"Parameter title for Remove Tags from Notes intent", 49, 0xD000000000000028, 0x8000000100476BE0);
}

uint64_t variable initialization expression of RemoveTagsFromNotesIntent._tags()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18(&qword_1005CEE68);
  v23 = String.LocalizationValue.init(stringLiteral:)(1936154964, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Remove Tags from Notes intent", 49, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100476C30);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for tags", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of FastSync.LeaveActivityAction.isFinished()
{
  return 0;
}

uint64_t variable initialization expression of DeleteChecklistItemsIntent._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18((uint64_t *)&unk_1005D1B80);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xEF736D6574492074);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Delete Tables intent", 40, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x8000000100476CB0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for checklist items", 41, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&unk_1005CEE80, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of AppendToNoteIntent._entity()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note to append to", 37, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000026, 0x8000000100476D50);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description", 21, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of AppendToNoteIntent._text()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEEA0);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEEA8);
  v23 = String.LocalizationValue.init(stringLiteral:)(1954047316, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for text to append to note", 42, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100476DD0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description", 21, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for AttributedString(0);
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v22, v8, v28, v30, v31);
}

uint64_t variable initialization expression of TableEntity._title()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v13 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Tables intent", 38, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of AddTagsToNotesIntent._notes()
{
  return sub_10011D434((uint64_t)"Parameter title for notes to add tags to", 40, 0xD000000000000024, 0x8000000100476E60);
}

uint64_t variable initialization expression of AddTagsToNotesIntent._tags()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18(&qword_1005CEE68);
  v23 = String.LocalizationValue.init(stringLiteral:)(1936154964, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for tags to add to notes", 40, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x8000000100476EC0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for tags", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of SetChecklistItemsCheckedIntentv1._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18((uint64_t *)&unk_1005D1B80);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xEE006D6574492074);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Set Checklist Items Checked intent", 54, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002FLL, 0x8000000100476F30);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for checklist item", 40, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&unk_1005CEE80, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of SetChecklistItemsCheckedIntentv1._changeOperation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005D1B90);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x6F6974617265704FLL, 0xE90000000000006ELL);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Set Checklist Items Checked intent", 54, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x8000000100476F90);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for operation", 35, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 2;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100127D84();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_1005556F0, v32);
}

uint64_t variable initialization expression of LockNoteIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note", 24, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x8000000100477010);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E93A0();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of TagCell.$__lazy_storage_$_imageViewBackgroundColor()
{
  return 0;
}

uint64_t variable initialization expression of ChangeFolderViewSettingIntent._changeOperation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v45 = *(_QWORD *)(v0 - 8);
  v46 = v0;
  __chkstk_darwin(v0);
  v44 = (char *)v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v43 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (char *)v40 - v5;
  v6 = sub_100012E18(&qword_1005CEED0);
  __chkstk_darwin(v6);
  v41 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = sub_100012E18(&qword_1005CEED8);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x65676E616843, 0xE600000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter to Change Folder View Setting intent", 46, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100477080);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for change operation", 42, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for ChangeOperation(0);
  v30 = v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v41, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v42;
  v32(v42, 1, 1, v31);
  v34 = v43;
  v32(v43, 1, 1, v31);
  v35 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, enum case for InputConnectionBehavior.default(_:), v46);
  v36 = sub_100019C6C(&qword_1005CEEE0, (uint64_t (*)(uint64_t))&type metadata accessor for ChangeOperation, (uint64_t)&protocol conformance descriptor for ChangeOperation);
  dispatch thunk of static CaseIterable.allCases.getter(&v47, v29, v36);
  v37 = v47;
  v38 = sub_100019C6C(&qword_1005CEEE8, (uint64_t (*)(uint64_t))&type metadata accessor for ChangeOperation, (uint64_t)&protocol conformance descriptor for ChangeOperation);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v24, v10, v30, v33, v34, v35, v37, v38);
}

uint64_t variable initialization expression of ChangeFolderViewSettingIntent._setting()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CEEF0);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x676E6974746553, 0xE700000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter to Change Folder View Setting intent", 46, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001004770D0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for folder view", 37, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 2;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100127E1C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100555C88, v32);
}

uint64_t variable initialization expression of CreateNoteIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Create Note intent", 38, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000034, 0x8000000100477160);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for name", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of CreateNoteIntent._contents()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEEA0);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18((uint64_t *)&unk_1005CEF10);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x73746E65746E6F43, 0xE800000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Create Note intent", 38, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000039, 0x80000001004771C0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for contents", 34, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for AttributedString(0);
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v22, v8, v28, v30, v31);
}

uint64_t variable initialization expression of CreateNoteIntent._folder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char *v40;
  unint64_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  char v51;
  char v52;
  char v53;
  char v54;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)&v43 - v5;
  v6 = sub_100012E18(&qword_1005D1EB0);
  __chkstk_darwin(v6);
  v44 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100012E18((uint64_t *)&unk_1005CEF20);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Create Note intent", 38, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100477230);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for folder", 32, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for FolderEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_10014386C();
  v50[1] = v35;
  v51 = v36 & 1;
  v52 = v37 & 1;
  v53 = v38 & 1;
  v54 = v39 & 1;
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127E60();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleFoldersQuery, v41);
}

uint64_t variable initialization expression of ICNavigableQueue.accessQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100019C6C((unint64_t *)&qword_1005D6870, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_100012E18((uint64_t *)&unk_1005CEF40);
  v13 = sub_100127EA4();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v4, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000030, 0x8000000100477290, v9, v6, v3, 0);
}

uint64_t variable initialization expression of ICNavigableQueue.maxCount()
{
  return 50;
}

uint64_t variable initialization expression of ICNavigableQueue._deferredItem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1);
}

uint64_t variable initialization expression of TagCell.displayText()
{
  return 0;
}

uint64_t variable initialization expression of ICNavigableQueue.currentIndex()
{
  return 0;
}

uint64_t variable initialization expression of AttachmentEntity.fileURL@<X0>(uint64_t a1@<X8>)
{
  return sub_100124D54((uint64_t (*)(_QWORD))&type metadata accessor for URL, a1);
}

uint64_t variable initialization expression of AttachmentEntity._title()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v13 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Attachments intent", 43, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of CreateTagIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Create Tag intent", 37, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100477330);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for name", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of CreateChecklistItemIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Append Checklist Item intent", 48, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000038, 0x80000001004773A0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for name", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of CreateChecklistItemIntent._noteEntity()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Append Checklist Item intent", 48, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000031, 0x80000001004773E0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E8EEC();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of CreateChecklistItemIntent.insertionRange()
{
  return 0;
}

uint64_t variable initialization expression of ChangeTagSelectionIntent._includedTags()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18(&qword_1005CEE68);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x646564756C636E49, 0xED00007367615420);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Change Tag Selection intent", 47, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100477450);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for included tags", 39, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of ChangeTagSelectionIntent._excludedTags()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18(&qword_1005CEE68);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x646564756C637845, 0xED00007367615420);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Change Tag Selection intent", 47, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000036, 0x80000001004774B0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for excluded tags", 39, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of ChangeTagSelectionIntent._selectionOperator()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CEF50);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x6F697463656C6553, 0xE90000000000006ELL);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter Change Tag Selection intent", 37, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0x10000000000000C7, 0x8000000100477550);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for selection operator", 44, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 2;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100127EF0();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100555F78, v32);
}

uint64_t variable initialization expression of VisibleNotesQuery._addOrRemoveNoteLockIntent()
{
  return sub_10011F074((uint64_t *)&unk_1005CEF60, (uint64_t)&unk_100451C30);
}

uint64_t sub_100117D18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of AsyncChannel.Iterator.active()
{
  return 1;
}

uint64_t variable initialization expression of AddLinkAttachmentIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Add Link intent", 35, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x8000000100477680);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for name", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of AddLinkAttachmentIntent._url()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEFD8);
  v23 = String.LocalizationValue.init(stringLiteral:)(5001813, 0xE300000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Add Link intent", 35, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000030, 0x80000001004776B0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for URL", 29, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for URL(0);
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v22, v8, v28, v30, v31);
}

uint64_t variable initialization expression of AddLinkAttachmentIntent._note()
{
  return sub_100123D5C((uint64_t)"Parameter title for Add Link intent", 35, 0xD000000000000025, 0x8000000100477710);
}

uint64_t variable initialization expression of OpenFolderIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18(&qword_1005D1EB0);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18((uint64_t *)&unk_1005CEFE0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Folder intent", 38, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x8000000100477770);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for folder", 32, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for FolderEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&qword_1005D7870, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of ApplyFormattingIntent._bold()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CEFF0);
  v23 = String.LocalizationValue.init(stringLiteral:)(1684827970, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for whether to bold or unbold", 45, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x80000001004777C0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for bold", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 3;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_10012828C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_1005562F8, v32);
}

uint64_t variable initialization expression of ApplyFormattingIntent._italic()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CEFF0);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x63696C617449, 0xE600000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for whether to italicize", 40, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000037, 0x8000000100477840);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for italic", 32, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 3;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_10012828C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100556320, v32);
}

uint64_t variable initialization expression of ApplyFormattingIntent._underline()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CEFF0);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x6E696C7265646E55, 0xE900000000000065);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for whether to underline", 40, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003BLL, 0x80000001004778E0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for underline", 35, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 3;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_10012828C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100556348, v32);
}

uint64_t variable initialization expression of ApplyFormattingIntent._strikethrough()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CEFF0);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x6874656B69727453, 0xED00006867756F72);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for whether to add strikethrough", 48, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000047, 0x8000000100477990);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for strikethrough", 39, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 3;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_10012828C();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100556370, v32);
}

uint64_t variable initialization expression of SetParagraphStyleIntent._paragraphStyle()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CF000);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x7061726761726150, 0xEF656C7974532068);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for paragraph style", 35, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000030, 0x8000000100477A40);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for paragraph style", 41, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 10;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_1001282D0();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_1005558C0, v32);
}

void *variable initialization expression of RealtimeCollaborationSelectionController.activeParticipants()
{
  return &_swiftEmptySetSingleton;
}

id variable initialization expression of TagCreateOrRenameAlertController.workerContext()
{
  return sub_10011EB2C((SEL *)&selRef_workerManagedObjectContext);
}

id variable initialization expression of TagCreateOrRenameAlertController.viewContext()
{
  return sub_10011EB2C((SEL *)&selRef_managedObjectContext);
}

uint64_t variable initialization expression of TagCreateOrRenameAlertController.renameMethod()
{
  return 0;
}

uint64_t variable initialization expression of ICArchiveExporterConfiguration.exportsAttributions()
{
  return ICInternalSettingsIsAlexandriaDemoModeEnabled();
}

double variable initialization expression of ICArchiveImporter.Configuration.timestampOffset()
{
  return 0.0;
}

unint64_t variable initialization expression of ICArchiveImporter.errors()
{
  return sub_100135BD8((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of ICArchiveImporter.saveBatchSize()
{
  return 32;
}

double variable initialization expression of ICArchiveImporter.didReceiveMemoryWarningObserver@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of InsertMentionIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note to add mention to", 42, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100477AE0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E8EEC();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of InsertMentionIntent._mentionText()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CF070);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x6E6F69746E654DLL, 0xE700000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for mention text", 32, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100477B30);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for mention text", 38, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of RemoveLockFromNoteIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note", 24, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100477B90);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E98EC();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of OpenNotesViewIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CF078);
  v23 = String.LocalizationValue.init(stringLiteral:)(2003134806, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Title for View parameter to Open Notes View intent", 50, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100477C00);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for view", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 2;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100128314();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100556988, v32);
}

unint64_t variable initialization expression of ICArchivePreviewer.objects()
{
  return sub_100135D6C((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t variable initialization expression of OpenTableIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18(&qword_1005CF088);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18((uint64_t *)&unk_1005CF090);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x656C626154, 0xE500000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Table intent", 37, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100477C80);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for table", 31, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for TableEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of DeleteAttachmentsIntent._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18((uint64_t *)&unk_1005CF0A0);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x656D686361747441, 0xEB0000000073746ELL);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Delete Attachments intent", 45, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x8000000100477CF0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for attachments", 37, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of RenameFolderIntent._entity()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char *v40;
  unint64_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  char v51;
  char v52;
  char v53;
  char v54;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)&v43 - v5;
  v6 = sub_100012E18(&qword_1005D1EB0);
  __chkstk_darwin(v6);
  v44 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100012E18((uint64_t *)&unk_1005CEFE0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Rename Folder intent", 40, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100477D80);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for folder", 32, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for FolderEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = VisibleAccountsQuery.init(requireFolderCreationSupport:)();
  v50[1] = v35;
  v51 = v36 & 1;
  v52 = v37 & 1;
  v53 = v38 & 1;
  v54 = v39 & 1;
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127E60();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleFoldersQuery, v41);
}

uint64_t variable initialization expression of RenameFolderIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CF070);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Rename Folder intent", 40, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000013, 0x8000000100477DA0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for name", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of DeleteTablesIntent._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18(&qword_1005CF0B0);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x73656C626154, 0xE600000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Delete Tables intent", 40, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100477DC0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for tables", 32, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of CreateFolderIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Create Folder intent", 40, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100477E40);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for tags", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of CreateFolderIntent.parentAccount@<X0>(uint64_t a1@<X8>)
{
  return sub_100124D54(type metadata accessor for AccountEntity, a1);
}

uint64_t variable initialization expression of CreateFolderIntent.parentFolder@<X0>(uint64_t a1@<X8>)
{
  return sub_100124D54(type metadata accessor for FolderEntity, a1);
}

id variable initialization expression of RealtimeCollaborationController.eventReporter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v7;

  v7 = type metadata accessor for RealtimeCollaborationController(0);
  v0 = sub_100012E18(&qword_1005CF0B8);
  String.init<A>(describing:)(&v7, v0);
  v2 = v1;
  v3 = objc_allocWithZone((Class)ICNAEventReporter);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithSubTrackerName:", v4);

  return v5;
}

uint64_t variable initialization expression of RealtimeCollaborationController.stateMachine@<X0>(uint64_t a1@<X8>)
{
  return sub_100124D54(type metadata accessor for FastSyncStateMachine, a1);
}

uint64_t variable initialization expression of RealtimeCollaborationController.mergeableFieldStateCache()
{
  return sub_1001224CC(&qword_1005CF0C0, (uint64_t)&_swiftEmptyDictionarySingleton);
}

uint64_t variable initialization expression of RealtimeCollaborationController.contextNotifications()
{
  return sub_100122418(&qword_1005CF0C8, &qword_1005CF0D0, (uint64_t (*)(char *))sub_1001255C8);
}

uint64_t variable initialization expression of OpenTopLevelFolderIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CF0D8);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Title for target parameter to Open Notes Top-Level Folder intent", 64, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100477EC0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for top-level folder", 42, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 4;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100128358();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100556E60, v32);
}

uint64_t variable initialization expression of MoveNotesToFolderIntent._container()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char *v40;
  unint64_t v41;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[2];
  char v51;
  char v52;
  char v53;
  char v54;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)&v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)&v43 - v5;
  v6 = sub_100012E18(&qword_1005D1EB0);
  __chkstk_darwin(v6);
  v44 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100012E18((uint64_t *)&unk_1005CEFE0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Move Notes to Folder intent", 47, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x8000000100477F50);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for folder", 32, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for FolderEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_100143988();
  v50[1] = v35;
  v51 = v36 & 1;
  v52 = v37 & 1;
  v53 = v38 & 1;
  v54 = v39 & 1;
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127E60();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleFoldersQuery, v41);
}

uint64_t variable initialization expression of MoveNotesToFolderIntent._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18(&qword_1005CEE58);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x7365746F4ELL, 0xE500000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Move Notes to Folder intent", 47, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x8000000100477F80);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for notes", 31, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of GetLinkedNotesIntent._entity()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note to get links from", 42, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002BLL, 0x8000000100477FF0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of PinNotesIntent._operation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v45 = *(_QWORD *)(v0 - 8);
  v46 = v0;
  __chkstk_darwin(v0);
  v44 = (char *)v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v43 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (char *)v40 - v5;
  v6 = sub_100012E18(&qword_1005CF0E8);
  __chkstk_darwin(v6);
  v41 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = sub_100012E18(&qword_1005CF0F0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x65676E616843, 0xE600000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Pin Notes intent", 36, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000029, 0x8000000100478050);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for operation", 35, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for FavoriteOperation(0);
  v30 = v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v41, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v42;
  v32(v42, 1, 1, v31);
  v34 = v43;
  v32(v43, 1, 1, v31);
  v35 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, enum case for InputConnectionBehavior.default(_:), v46);
  v36 = sub_100019C6C(&qword_1005CF0F8, (uint64_t (*)(uint64_t))&type metadata accessor for FavoriteOperation, (uint64_t)&protocol conformance descriptor for FavoriteOperation);
  dispatch thunk of static CaseIterable.allCases.getter(&v47, v29, v36);
  v37 = v47;
  v38 = sub_100019C6C(&qword_1005CF100, (uint64_t (*)(uint64_t))&type metadata accessor for FavoriteOperation, (uint64_t)&protocol conformance descriptor for FavoriteOperation);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v24, v10, v30, v33, v34, v35, v37, v38);
}

uint64_t variable initialization expression of PinNotesIntent._entities()
{
  return sub_10011D434((uint64_t)"Parameter title for Pin Notes intent", 36, 0xD000000000000029, 0x8000000100478080);
}

uint64_t sub_10011D434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[3];
  char v54;
  unsigned __int32 v55;
  uint64_t v56;

  v46 = a3;
  v47 = a4;
  v44 = a1;
  v45 = a2;
  v4 = type metadata accessor for InputConnectionBehavior(0);
  v51 = *(_QWORD *)(v4 - 8);
  v52 = v4;
  __chkstk_darwin(v4);
  v50 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v7 = __chkstk_darwin(v6);
  v49 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v48 = (char *)&v43 - v9;
  v10 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LocalizedStringResource(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100012E18(&qword_1005CEE58);
  v27 = String.LocalizationValue.init(stringLiteral:)(0x7365746F4ELL, 0xE500000000000000);
  static Locale.current.getter(v27);
  v28 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 104);
  v29(v16, enum case for LocalizedStringResource.BundleDescription.main(_:), v13);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v22, 0, 0, v19, v16, v44, v45, 2);
  v30 = String.LocalizationValue.init(stringLiteral:)(v46, v47);
  static Locale.current.getter(v30);
  v29(v16, v28, v13);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v22, 0, 0, v19, v16, "Parameter description for notes", 31, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v12, 0, 1, v23);
  v56 = 0;
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v48;
  v32(v48, 1, 1, v31);
  v34 = v49;
  v32(v49, 1, 1, v31);
  v53[0] = sub_1001E8EEC();
  v53[1] = v35;
  v53[2] = v36;
  v54 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v55 = vmovn_s16(v39).u32[0];
  v40 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, enum case for InputConnectionBehavior.default(_:), v52);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v26, v12, &v56, v33, v34, v40, v53, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of DeleteTagsIntent._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18(&qword_1005CEE68);
  v23 = String.LocalizationValue.init(stringLiteral:)(1936154964, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Delete Tags intent", 38, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x80000001004780E0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for tags", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of OpenAttachmentIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18(&qword_1005CF108);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18((uint64_t *)&unk_1005CF110);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x656D686361747441, 0xEA0000000000746ELL);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Attachment intent", 42, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100478140);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for attachment", 36, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for AttachmentEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of NoteEntity._title()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v13 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Notes intent", 37, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of NoteEntity._subtitle()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v13 = String.LocalizationValue.init(stringLiteral:)(0x7972616D6D7553, 0xE700000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Notes intent", 37, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of NoteEntity._contents()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005D7860);
  v13 = String.LocalizationValue.init(stringLiteral:)(2036625218, 0xE400000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Notes intent", 37, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of NoteEntity._folder()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005CF120);
  v13 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Notes intent", 37, 2);
  v14 = sub_100019C6C((unint64_t *)&qword_1005D7870, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
  return EntityProperty<>.init(title:)(v12, v14);
}

uint64_t variable initialization expression of NoteEntity._tags()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005D3E40);
  v13 = String.LocalizationValue.init(stringLiteral:)(1936154964, 0xE400000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Notes intent", 37, 2);
  v14 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  return EntityProperty<>.init(title:)(v12, v14);
}

uint64_t variable initialization expression of NoteEntity._creationDate()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18(&qword_1005CF130);
  v13 = String.LocalizationValue.init(stringLiteral:)(0x6E6F697461657243, 0xED00006574614420);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Notes intent", 37, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of NoteEntity._modificationDate()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18(&qword_1005CF130);
  v13 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x80000001004781D0);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Notes intent", 37, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of FastSyncPresenceController.controllerPool@<X0>(uint64_t a1@<X8>)
{
  return sub_100124D54(type metadata accessor for FastSyncControllerPool, a1);
}

uint64_t variable initialization expression of FastSyncPresenceController.editorActivityChanges@<X0>(uint64_t a1@<X8>)
{
  return sub_10011EACC(&qword_1005CF138, a1);
}

uint64_t variable initialization expression of FastSyncPresenceController.noteActivityShareChanges@<X0>(uint64_t a1@<X8>)
{
  return sub_10011EACC(&qword_1005CF140, a1);
}

uint64_t sub_10011EACC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = sub_100012E18(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

id variable initialization expression of TagCreateOrRenameAlertController.sizingCell()
{
  uint64_t v0;

  v0 = type metadata accessor for TagCell();
  return objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v0)), "init");
}

id sub_10011EB2C(SEL *a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (!v2)
    return 0;
  v3 = v2;
  v4 = objc_msgSend(v2, *a1);

  return v4;
}

uint64_t variable initialization expression of ChecklistItemEntity._text()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v13 = String.LocalizationValue.init(stringLiteral:)(1954047316, 0xE400000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Checklist Items intent", 47, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of ChecklistItemEntity._checked()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v15[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18(&qword_1005CF148);
  v13 = String.LocalizationValue.init(stringLiteral:)(0x64656B63656843, 0xE700000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Checklist Items intent", 47, 2);
  return EntityProperty<>.init(title:)(v12);
}

uint64_t variable initialization expression of ChecklistItemEntity._note()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v16[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v10);
  v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012E18((uint64_t *)&unk_1005CF150);
  v13 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v13);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Parameter title for Find Checklist Items intent", 47, 2);
  v14 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  return EntityProperty<>.init(title:)(v12, v14);
}

uint64_t variable initialization expression of VisibleChecklistItemsQuery._setChecklistItemsCheckedIntent()
{
  return sub_10011F074((uint64_t *)&unk_1005D8C70, (uint64_t)&unk_100451C58);
}

uint64_t sub_10011F074(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t KeyPath;

  sub_100012E18(a1);
  KeyPath = swift_getKeyPath(a2, v3);
  return IntentParameterDependency.__allocating_init<A, B>(_:)(KeyPath);
}

uint64_t sub_10011F0A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t variable initialization expression of DeleteFoldersIntent._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18((uint64_t *)&unk_1005CF160);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x737265646C6F46, 0xE700000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Delete Folders intent", 41, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000015, 0x8000000100478250);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for folders", 33, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&qword_1005D7870, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of SetAttachmentSizeIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  char v36;
  char *v37;
  unint64_t v38;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  char v48;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v45 = *(_QWORD *)(v0 - 8);
  v46 = v0;
  __chkstk_darwin(v0);
  v44 = (char *)&v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v43 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (char *)&v40 - v5;
  v6 = sub_100012E18(&qword_1005CF108);
  __chkstk_darwin(v6);
  v41 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100012E18((uint64_t *)&unk_1005CF110);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x656D686361747441, 0xEA0000000000746ELL);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Set Attachment Size intent", 46, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001004782D0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for attachment", 36, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for AttachmentEntity(0);
  v30 = v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v41, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v42;
  v32(v42, 1, 1, v31);
  v34 = v43;
  v32(v43, 1, 1, v31);
  v47[0] = VisibleAccountsQuery.init(requireFolderCreationSupport:)();
  v47[1] = v35;
  v48 = v36 & 1;
  v37 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, enum case for InputConnectionBehavior.default(_:), v46);
  v38 = sub_10012839C();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v37, v47, &type metadata for VisibleAttachmentsQuery, v38);
}

uint64_t variable initialization expression of SetAttachmentSizeIntent._attachmentSize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18((uint64_t *)&unk_1005CF170);
  v23 = String.LocalizationValue.init(stringLiteral:)(1702521171, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Set Attachment Size intent", 46, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000047, 0x8000000100478300);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for size", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 4;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_1001283E0();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100556F50, v32);
}

uint64_t variable initialization expression of ReplaceSelectionIntent._text()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEEA0);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEEA8);
  v23 = String.LocalizationValue.init(stringLiteral:)(1954047316, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for text to replace the selection with in the note", 66, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000027, 0x80000001004783C0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for text", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for AttributedString(0);
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v22, v8, v28, v30, v31);
}

uint64_t variable initialization expression of InsertNoteLinkIntent._linkedNote()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x4E2064656B6E694CLL, 0xEB0000000065746FLL);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for linked note", 31, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000031, 0x8000000100478430);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for linked note", 37, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E8EEC();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of InsertNoteLinkIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note to update", 34, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000031, 0x80000001004784D0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for target note", 37, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E8EEC();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of InsertNoteLinkIntent._useNoteTitleAsName()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CF180);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CF188);
  v23 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x8000000100478540);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for use Note Title as Name", 42, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000034, 0x8000000100478590);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for use note title as name", 48, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v39[0] = 1;
  v27 = type metadata accessor for Bool.IntentDisplayName(0);
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:displayName:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of ICArchiveCreator.softwareIdentifier()
{
  id v0;
  id v1;
  uint64_t v2;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "bundleIdentifier");

  if (!v1)
    return 0;
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v2;
}

uint64_t variable initialization expression of ICArchiveCreator.softwareVersionName()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "infoDictionary");

  if (!v1)
  {
    v7 = 0u;
    v8 = 0u;
    goto LABEL_11;
  }
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  if (!*(_QWORD *)(v2 + 16) || (v3 = sub_100248A98(0xD00000000000001ALL, 0x8000000100478610), (v4 & 1) == 0))
  {
    v7 = 0u;
    v8 = 0u;
    swift_bridgeObjectRelease(v2);
    goto LABEL_11;
  }
  sub_100128424(*(_QWORD *)(v2 + 56) + 32 * v3, (uint64_t)&v7);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v8 + 1))
  {
LABEL_11:
    sub_100012DDC((uint64_t)&v7, &qword_1005CF190);
    return 0;
  }
  if (swift_dynamicCast(&v6, &v7, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v6;
  else
    return 0;
}

CFStringRef variable initialization expression of ICArchiveCreator.softwareVersion()
{
  id v0;
  id v1;
  uint64_t v2;
  CFStringRef result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "infoDictionary");

  if (!v1)
  {
    v10 = 0u;
    v11 = 0u;
    goto LABEL_12;
  }
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  result = kCFBundleVersionKey;
  if (!kCFBundleVersionKey)
  {
    __break(1u);
    return result;
  }
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCFBundleVersionKey);
  v6 = v5;
  if (!*(_QWORD *)(v2 + 16) || (v7 = sub_100248A98(v4, v5), (v8 & 1) == 0))
  {
    v10 = 0u;
    v11 = 0u;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v2);
    goto LABEL_12;
  }
  sub_100128424(*(_QWORD *)(v2 + 56) + 32 * v7, (uint64_t)&v10);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v11 + 1))
  {
LABEL_12:
    sub_100012DDC((uint64_t)&v10, &qword_1005CF190);
    return 0;
  }
  if (swift_dynamicCast(&v9, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return (CFStringRef)v9;
  else
    return 0;
}

uint64_t variable initialization expression of OpenChecklistItemIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18(&qword_1005CF198);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18(&qword_1005CF1A0);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xEE006D6574492074);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Reveal Checklist Item intent", 48, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x8000000100478670);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for checklist item", 40, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for ChecklistItemEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&unk_1005CEE80, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of DeleteNotesIntent._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18(&qword_1005CEE58);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x7365746F4ELL, 0xE500000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Delete Notes intent", 39, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001004786D0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for notes", 31, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of CreateTableIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Add Table intent", 36, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003FLL, 0x8000000100478720);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for name", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of CreateTableIntent._csvString()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x8000000100478760);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Add Table intent", 36, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x8000000100478780);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for comma separated value string", 54, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of CreateTableIntent._note()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Add Table intent", 36, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000026, 0x8000000100478800);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E8EEC();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of ICArchiveExporterConfiguration.creator@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_1005CED18 != -1)
    swift_once(&qword_1005CED18, sub_100345FC4);
  v2 = qword_100601DA0;
  *(_QWORD *)a1 = static ICArchiveCreator.default;
  v3 = *((_QWORD *)&static ICArchiveCreator.default + 1);
  *(_OWORD *)(a1 + 8) = *(__int128 *)((char *)&static ICArchiveCreator.default + 8);
  v4 = v3;
  v5 = unk_100601D90;
  *(_OWORD *)(a1 + 24) = unk_100601D90;
  v6 = v5;
  *(_QWORD *)(a1 + 40) = v2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  return swift_bridgeObjectRetain(v2);
}

void variable initialization expression of RealtimeCollaborationPaperKitController.activeParticipants()
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      sub_10012847C((uint64_t)_swiftEmptyArrayStorage, (uint64_t *)&unk_1005CF7C0, &qword_1005D8540, CKShareParticipant_ptr);
  }
}

uint64_t variable initialization expression of RealtimeCollaborationMessageController.cloudKitRecords()
{
  return sub_100122290(&qword_1005CF1A8, (uint64_t *)&unk_1005CF1B0, (uint64_t (*)(char *))sub_100125BF0);
}

uint64_t variable initialization expression of RealtimeCollaborationMessageController.selectionMessages()
{
  return sub_100122290((uint64_t *)&unk_1005DB010, (uint64_t *)&unk_1005CF1C0, (uint64_t (*)(char *))sub_1001259E4);
}

uint64_t sub_100122290(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(char *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v5 = sub_100012E18(a1);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v16 - v10;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))((char *)&v16 - v10, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v5);
  v12 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v12(v9, v11, v5);
  v13 = sub_100012E18(a2);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = a3(v9);
  v12(v9, v11, v5);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  a3(v9);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  return v14;
}

uint64_t variable initialization expression of RealtimeCollaborationMessageController.paperKitInbox()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_100012E18((uint64_t *)&unk_1005DB020);
  result = swift_allocObject(v0, 28, 7);
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = _swiftEmptyArrayStorage;
  return result;
}

uint64_t variable initialization expression of RealtimeCollaborationMessageController.paperKitOutbox()
{
  return sub_100122418(&qword_1005CF1D0, &qword_1005CF1D8, (uint64_t (*)(char *))sub_1001257D4);
}

uint64_t sub_100122418(uint64_t *a1, uint64_t *a2, uint64_t (*a3)(char *))
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v5 = sub_100012E18(a1);
  __chkstk_darwin(v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v8 + 104))(v7, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:));
  v9 = sub_100012E18(a2);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  return a3(v7);
}

void *variable initialization expression of RealtimeCollaborationMessageController.subtasks()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t variable initialization expression of RealtimeCollaborationMessageController.nonFatalErrorCount()
{
  return sub_1001224CC(&qword_1005CF1E0, 0);
}

uint64_t sub_1001224CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_100012E18(a1);
  result = swift_allocObject(v3, 28, 7);
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t variable initialization expression of OpenTagIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18(&qword_1005CF1E8);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18(&qword_1005CF1F0);
  v25 = String.LocalizationValue.init(stringLiteral:)(6775124, 0xE300000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Tag intent", 35, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000022, 0x8000000100478860);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for tag", 29, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for TagEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of OpenNoteIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Note intent", 36, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001004788E0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t variable initialization expression of CreateAttachmentIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Create Attachment intent", 44, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100478930);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for name", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of CreateAttachmentIntent._file()
{
  return sub_10012396C((uint64_t)"Parameter title for Create Attachment intent", 44, 0xD00000000000001FLL, 0x8000000100478950);
}

uint64_t variable initialization expression of CreateAttachmentIntent._url()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEFD8);
  v23 = String.LocalizationValue.init(stringLiteral:)(5001813, 0xE300000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Create attachment intent", 44, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001004789C0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for URL", 29, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for URL(0);
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v22, v8, v28, v30, v31);
}

uint64_t variable initialization expression of CreateAttachmentIntent._note()
{
  return sub_100123D5C((uint64_t)"Parameter title for Create attachment intent", 44, 0xD000000000000020, 0x80000001004789E0);
}

id variable initialization expression of TagCell.imageView()
{
  return objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id variable initialization expression of TagCell.textLabel()
{
  return objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
}

id variable initialization expression of TagCell.unemphasizedBackgroundColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "tertiarySystemFillColor");
}

id variable initialization expression of TagCell.excludedBackgroundColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
}

id variable initialization expression of TagCell.emphasizedTextColor()
{
  return objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
}

id variable initialization expression of ContentInsetViewController.configuration()
{
  CGFloat bottom;
  CGFloat trailing;
  objc_class *v2;
  _BYTE *v3;
  CGFloat *v4;
  __int128 v6;
  objc_super v7;

  v6 = *(_OWORD *)&NSDirectionalEdgeInsetsZero.top;
  bottom = NSDirectionalEdgeInsetsZero.bottom;
  trailing = NSDirectionalEdgeInsetsZero.trailing;
  v2 = (objc_class *)type metadata accessor for ContentInsetViewController.Configuration();
  v3 = objc_allocWithZone(v2);
  v4 = (CGFloat *)&v3[OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets];
  *(_OWORD *)v4 = v6;
  v4[2] = bottom;
  v4[3] = trailing;
  v3[OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius] = 0;
  v7.receiver = v3;
  v7.super_class = v2;
  return objc_msgSendSuper2(&v7, "init");
}

uint64_t variable initialization expression of AddFileAttachmentIntent._name()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD v33[2];
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v2);
  v35 = (char *)v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v4);
  v34 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33[1] = sub_100012E18(&qword_1005CEF08);
  v23 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Add File intent", 35, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100478930);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for name", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v27 = type metadata accessor for String.IntentInputOptions(0);
  v39[0] = 0;
  v39[1] = 0;
  v28 = v34;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v34, 1, 1, v27);
  v29 = type metadata accessor for IntentDialog(0);
  v30 = v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v35, 1, 1, v29);
  v31 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for InputConnectionBehavior.default(_:), v38);
  return IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v22, v8, v39, v28, v30, v31);
}

uint64_t variable initialization expression of AddFileAttachmentIntent._file()
{
  return sub_10012396C((uint64_t)"Parameter title for Add File intent", 35, 0xD000000000000029, 0x8000000100478A40);
}

uint64_t sub_10012396C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;

  v44 = a3;
  v45 = a4;
  v41 = a1;
  v42 = a2;
  v4 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v4 - 8);
  v49 = v4;
  __chkstk_darwin(v4);
  v47 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v6);
  v46 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CF1F8);
  __chkstk_darwin(v8);
  v43 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Locale(0);
  __chkstk_darwin(v17);
  v19 = (char *)v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v20);
  v22 = (char *)v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for LocalizedStringResource(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)v40 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = sub_100012E18(&qword_1005CF200);
  v27 = String.LocalizationValue.init(stringLiteral:)(1701603654, 0xE400000000000000);
  static Locale.current.getter(v27);
  v28 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 104);
  v29(v16, enum case for LocalizedStringResource.BundleDescription.main(_:), v13);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v22, 0, 0, v19, v16, v41, v42, 2);
  v30 = String.LocalizationValue.init(stringLiteral:)(v44, v45);
  static Locale.current.getter(v30);
  v29(v16, v28, v13);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v22, 0, 0, v19, v16, "Parameter description for file", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v12, 0, 1, v23);
  v31 = type metadata accessor for IntentFile(0);
  v32 = v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v43, 1, 1, v31);
  v33 = type metadata accessor for IntentDialog(0);
  v34 = v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v46, 1, 1, v33);
  v35 = sub_100012E18(&qword_1005CF208);
  v36 = type metadata accessor for UTType(0);
  v37 = swift_allocObject(v35, ((*(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v36 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v36 - 8) + 80) | 7);
  *(_OWORD *)(v37 + 16) = xmmword_100451C20;
  static UTType.item.getter();
  v38 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  return IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)(v26, v12, v32, v37, v34, v38);
}

uint64_t variable initialization expression of AddFileAttachmentIntent._note()
{
  return sub_100123D5C((uint64_t)"Parameter title for Add File intent", 35, 0xD00000000000002CLL, 0x8000000100478A70);
}

uint64_t sub_100123D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64x2_t v42;
  int16x8_t v43;
  char *v44;
  unint64_t v45;
  _QWORD v47[2];
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];
  char v59;
  unsigned __int32 v60;

  v51 = a3;
  v52 = a4;
  v49 = a1;
  v50 = a2;
  v4 = type metadata accessor for InputConnectionBehavior(0);
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  __chkstk_darwin(v4);
  v55 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v7 = __chkstk_darwin(v6);
  v54 = (char *)v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v53 = (char *)v47 - v9;
  v10 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v10);
  v48 = (char *)v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v12);
  v14 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Locale(0);
  __chkstk_darwin(v19);
  v21 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v22);
  v24 = (char *)v47 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for LocalizedStringResource(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v28 = (char *)v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47[1] = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v29 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v29);
  v30 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 104);
  v31(v18, enum case for LocalizedStringResource.BundleDescription.main(_:), v15);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v24, 0, 0, v21, v18, v49, v50, 2);
  v32 = String.LocalizationValue.init(stringLiteral:)(v51, v52);
  static Locale.current.getter(v32);
  v31(v18, v30, v15);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v24, 0, 0, v21, v18, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v14, 0, 1, v25);
  v33 = type metadata accessor for NoteEntity(0);
  v34 = v48;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v48, 1, 1, v33);
  v35 = type metadata accessor for IntentDialog(0);
  v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v37 = v53;
  v36(v53, 1, 1, v35);
  v38 = v54;
  v36(v54, 1, 1, v35);
  v58[0] = sub_1001E9508();
  v58[1] = v39;
  v58[2] = v40;
  v59 = v41 & 1;
  v42 = (uint64x2_t)vdupq_n_s64(v41);
  v43 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v42, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v42, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v43.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v43), (int8x8_t)0x1000100010001);
  v60 = vmovn_s16(v43).u32[0];
  v44 = v55;
  (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v55, enum case for InputConnectionBehavior.default(_:), v57);
  v45 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v28, v14, v34, v37, v38, v44, v58, &type metadata for VisibleNotesQuery, v45);
}

uint64_t variable initialization expression of InsertAllMentionIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note to add mention to", 42, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x8000000100478AA0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E8EEC();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of AddOrRemoveNoteLockIntent._operation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CF210);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x6F6974617265704FLL, 0xE90000000000006ELL);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Add or Remove Note Lock intent", 50, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000039, 0x8000000100478B10);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for operation", 35, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 3;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100128884();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_100557508, v32);
}

uint64_t variable initialization expression of AddOrRemoveNoteLockIntent._target()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64x2_t v38;
  int16x8_t v39;
  char *v40;
  unint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[3];
  char v51;
  unsigned __int32 v52;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note", 24, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000035, 0x8000000100478B50);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v50[0] = sub_1001E9508();
  v50[1] = v35;
  v50[2] = v36;
  v51 = v37 & 1;
  v38 = (uint64x2_t)vdupq_n_s64(v37);
  v39 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v38, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v39.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v39), (int8x8_t)0x1000100010001);
  v52 = vmovn_s16(v39).u32[0];
  v40 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v41 = sub_100127D40();
  return IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v24, v10, v30, v33, v34, v40, v50, &type metadata for VisibleNotesQuery, v41);
}

uint64_t variable initialization expression of AppStoreRatingController.lastInteractionDate@<X0>(uint64_t a1@<X8>)
{
  return sub_100124D54((uint64_t (*)(_QWORD))&type metadata accessor for Date, a1);
}

uint64_t sub_100124D54@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of AppStoreRatingController.maximumPersistedLaunchDaysCount()
{
  return 100;
}

uint64_t variable initialization expression of ShowQuickNoteIntent.layoutMonitor()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitorConfiguration), "configurationForDefaultMainDisplayMonitor");
  v1 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitor), "monitorWithConfiguration:", v0);

  v2 = type metadata accessor for ShowQuickNoteIntent.LayoutMonitorBox();
  result = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(result + 16) = v1;
  return result;
}

uint64_t variable initialization expression of ChangeSettingIntent._changeOperation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v40[2];
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v45 = *(_QWORD *)(v0 - 8);
  v46 = v0;
  __chkstk_darwin(v0);
  v44 = (char *)v40 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v43 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (char *)v40 - v5;
  v6 = sub_100012E18(&qword_1005CEED0);
  __chkstk_darwin(v6);
  v41 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v40 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[1] = sub_100012E18(&qword_1005CEED8);
  v25 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x8000000100478B90);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter for Change Notes Setting intent", 41, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100477080);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for change operation", 42, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for ChangeOperation(0);
  v30 = v41;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v41, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v42;
  v32(v42, 1, 1, v31);
  v34 = v43;
  v32(v43, 1, 1, v31);
  v35 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, enum case for InputConnectionBehavior.default(_:), v46);
  v36 = sub_100019C6C(&qword_1005CEEE0, (uint64_t (*)(uint64_t))&type metadata accessor for ChangeOperation, (uint64_t)&protocol conformance descriptor for ChangeOperation);
  dispatch thunk of static CaseIterable.allCases.getter(&v47, v29, v36);
  v37 = v47;
  v38 = sub_100019C6C(&qword_1005CEEE8, (uint64_t (*)(uint64_t))&type metadata accessor for ChangeOperation, (uint64_t)&protocol conformance descriptor for ChangeOperation);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v24, v10, v30, v33, v34, v35, v37, v38);
}

uint64_t variable initialization expression of ChangeSettingIntent._setting()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CF220);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x676E6974746553, 0xE700000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter for Change Notes Setting intent", 41, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001004770D0);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for setting", 33, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 5;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_1001288C8();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_1005575C0, v32);
}

uint64_t sub_1001255C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24[16];
  char *v25;

  v3 = sub_100012E18(&qword_1005CF0C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005CF8A0);
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005CF8A8);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  v16 = sub_100012E18(&qword_1005CF8B0);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  v20 = v4;
  v21 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v25 = v15;
  v18 = type metadata accessor for Notification(0);
  AsyncStream.init(_:bufferingPolicy:_:)(v18, v6, sub_10012964C, v24, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v9, v23);
  sub_100012CE8((uint64_t)v15, (uint64_t)v13, &qword_1005CF8A8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v3);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v13, v16);
    sub_100012DDC((uint64_t)v15, &qword_1005CF8A8);
    return v1;
  }
  return result;
}

uint64_t sub_1001257D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22[16];
  char *v23;

  v21 = a1;
  v2 = sub_100012E18(&qword_1005CF1D0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100012E18(&qword_1005CF7A8);
  v6 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005CF7B0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v18 - v13;
  v15 = sub_100012E18(&qword_1005CF7B8);
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
  v19 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v21, v2);
  v23 = v14;
  AsyncStream.init(_:bufferingPolicy:_:)(&type metadata for Data, v5, sub_100129624, v22, &type metadata for Data);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v8, v20);
  sub_100012CE8((uint64_t)v14, (uint64_t)v12, &qword_1005CF7B0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48))(v12, 1, v15);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v2);
    (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v12, v15);
    sub_100012DDC((uint64_t)v14, &qword_1005CF7B0);
    return v1;
  }
  return result;
}

uint64_t sub_1001259E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24[16];
  char *v25;

  v3 = sub_100012E18((uint64_t *)&unk_1005DB010);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005CF770);
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005CF778);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  v16 = sub_100012E18(&qword_1005CF780);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  v20 = v4;
  v21 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v25 = v15;
  v18 = type metadata accessor for FastSync.SelectionMessage(0);
  AsyncStream.init(_:bufferingPolicy:_:)(v18, v6, sub_1001295D4, v24, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v9, v23);
  sub_100012CE8((uint64_t)v15, (uint64_t)v13, &qword_1005CF778);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v3);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v13, v16);
    sub_100012DDC((uint64_t)v15, &qword_1005CF778);
    return v1;
  }
  return result;
}

uint64_t sub_100125BF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24[16];
  char *v25;

  v3 = sub_100012E18(&qword_1005CF1A8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005CF788);
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005CF790);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v20 - v14;
  v16 = sub_100012E18(&qword_1005CF798);
  v17 = *(_QWORD *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1, 1, v16);
  v20 = v4;
  v21 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  v25 = v15;
  v18 = sub_100012E18(&qword_1005CF7A0);
  AsyncStream.init(_:bufferingPolicy:_:)(v18, v6, sub_1001295FC, v24, v18);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v9, v23);
  sub_100012CE8((uint64_t)v15, (uint64_t)v13, &qword_1005CF790);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v13, 1, v16);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v3);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v13, v16);
    sub_100012DDC((uint64_t)v15, &qword_1005CF790);
    return v1;
  }
  return result;
}

uint64_t sub_100125E00(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;

  sub_100012DDC(a2, a3);
  v7 = sub_100012E18(a4);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a2, a1, v7);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
}

uint64_t variable initialization expression of AsyncBufferedMulticastManager.streams(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for AsyncBufferedQueue(0, a1, a3, a4);
  v5 = Array.init()();
  v9 = v5;
  v6 = type metadata accessor for Array(0, v4);
  v7 = sub_1001287FC((uint64_t)&v9, v6);
  swift_bridgeObjectRelease(v5);
  return v7;
}

uint64_t variable initialization expression of SetChecklistItemsCheckedIntent._changeOperation()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  unint64_t v32;
  _QWORD v34[2];
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40[3];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34[1] = sub_100012E18(&qword_1005CF230);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x65676E616843, 0xE600000000000000);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Set Checklist Items Checked intent", 54, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000051, 0x8000000100478C10);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for operation", 35, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40[0] = 2;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100128B90();
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v22, v8, v40, v29, v30, v31, &off_1005575E8, v32);
}

uint64_t variable initialization expression of SetChecklistItemsCheckedIntent._entities()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v38 = *(_QWORD *)(v0 - 8);
  v39 = v0;
  __chkstk_darwin(v0);
  v37 = (char *)&v34 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v36 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v34 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100012E18((uint64_t *)&unk_1005D1B80);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xEE006D6574492074);
  static Locale.current.getter(v23);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v25(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Set Checklist Items Checked intent", 54, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x8000000100478C70);
  static Locale.current.getter(v26);
  v25(v12, v24, v9);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for checklist item", 40, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v8, 0, 1, v19);
  v40 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v35;
  v28(v35, 1, 1, v27);
  v30 = v36;
  v28(v36, 1, 1, v27);
  v31 = v37;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for InputConnectionBehavior.default(_:), v39);
  v32 = sub_100019C6C((unint64_t *)&unk_1005CEE80, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v22, v8, &v40, v29, v30, v31, v32);
}

uint64_t variable initialization expression of SetChecklistItemsCheckedIntent._note()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v43 = *(_QWORD *)(v0 - 8);
  v44 = v0;
  __chkstk_darwin(v0);
  v42 = (char *)&v38 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v41 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v40 = (char *)&v38 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100012E18(&qword_1005CEEC8);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note to update checklist items in", 53, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100478CF0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description", 21, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v39, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v40;
  v32(v40, 1, 1, v31);
  v34 = v41;
  v32(v41, 1, 1, v31);
  v35 = v42;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v42, enum case for InputConnectionBehavior.default(_:), v44);
  v36 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  return IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
}

uint64_t sub_1001269D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[5];

  sub_100012E18(a1);
  v7[0] = a2;
  v7[1] = a3;
  AnyHashable.init<A>(_:)(v8, v7, &type metadata for String, &protocol witness table for String);
  type metadata accessor for AppDependencyManager(0);
  v5 = static AppDependencyManager.shared.getter();
  return AppDependency.__allocating_init(key:manager:)(v8, v5);
}

uint64_t sub_100126A48(uint64_t a1, uint64_t a2)
{
  return sub_100127BA8(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

_DWORD *sub_100126A60@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

uint64_t sub_100126A78(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005CF530, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_1004520B0);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100126AB8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005CF530, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_1004520B0);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100126AFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100126B3C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

NSNumber sub_100126B4C()
{
  return CGFloat._bridgeToObjectiveC()();
}

uint64_t sub_100126B54(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static CGFloat._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v7;
  v5 = v6;
  if (v7)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return result;
}

uint64_t sub_100126BA4(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static CGFloat._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v8;
  v5 = v7;
  if (v8)
    v5 = 0;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v4;
  return v3 & 1;
}

void sub_100126BF8(double *a1@<X8>)
{
  *a1 = static CGFloat._unconditionallyBridgeFromObjectiveC(_:)();
}

_DWORD *sub_100126C1C@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_100126C28@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_100126C3C(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_100126C50(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100126C64(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100126C78(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_100126C94(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

NSNumber sub_100126CA0()
{
  return Int._bridgeToObjectiveC()();
}

uint64_t sub_100126CA8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v6 = 0;
  v7 = 1;
  result = static Int._forceBridgeFromObjectiveC(_:result:)(a1, &v6);
  v4 = v6;
  v5 = v7;
  if (v7)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_100126CF8(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v7;
  char v8;

  v7 = 0;
  v8 = 1;
  v3 = static Int._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v7);
  v4 = v7;
  v5 = v8;
  if (v8)
    v4 = 0;
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  return v3 & 1;
}

uint64_t sub_100126D4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = static Int._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  return result;
}

id sub_100126D70()
{
  id *v0;

  return *v0;
}

Swift::Int sub_100126D78()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100126DBC()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100126DE4(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100126E24()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorDomain);
}

uint64_t sub_100126E34(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100126E74(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100126EB4(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100126F18(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void sub_100126F6C(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_100126F78(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100126F8C(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100127000(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_10012707C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

void sub_1001270BC(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_1001270C4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1001270D8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1001270EC(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_10012711C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_100127148@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_10012716C(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_100127180(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_100127194@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1001271A8(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1001271BC()
{
  _DWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1001271CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_DWORD *sub_1001271E4(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_1001271F8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_100127208(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005CFA18, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453824);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100127248(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005CFA18, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453824);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100127288(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100019C6C(&qword_1005CFA18, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453824);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1001272EC()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100127320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100019C6C(&qword_1005CFA18, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453824);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100127370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

_QWORD *sub_1001273CC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1001273DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C(&qword_1005CF5C0, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100452698);
  v3 = sub_100019C6C(&qword_1005CF5C8, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_100452638);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100127460(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C((unint64_t *)&qword_1005CF5E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100452820);
  v3 = sub_100019C6C(&qword_1005CF5E8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100452168);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1001274E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C((unint64_t *)&qword_1005CFA90, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1004539BC);
  v3 = sub_100019C6C(&qword_1005CFA98, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_1004531D0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100127568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1001275C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C(&qword_1005CFAD8, (uint64_t (*)(uint64_t))type metadata accessor for VirtualSmartFolderItemIdentifierTypes, (uint64_t)&unk_100452F80);
  v3 = sub_100019C6C(&qword_1005CFAE0, (uint64_t (*)(uint64_t))type metadata accessor for VirtualSmartFolderItemIdentifierTypes, (uint64_t)&unk_100452F20);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100127644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C(&qword_1005CFA80, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1004533B8);
  v3 = sub_100019C6C(&qword_1005CFA88, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_100453358);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

double sub_1001276C8@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

uint64_t sub_1001276D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = sub_100019C6C(&qword_1005CFAA0, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_1004530D8);
  v3 = sub_100019C6C(&qword_1005CFAA8, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_100453078);
  v4 = sub_100129E28();
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, v4);
}

uint64_t sub_100127774@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10012779C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C(&qword_1005CFAE8, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100452E28);
  v3 = sub_100019C6C(&qword_1005CFAF0, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100452DD0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100127820(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C(&qword_1005CFA60, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_100453768);
  v3 = sub_100019C6C(&qword_1005CFA68, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_100453660);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1001278A4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_1001278E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C(&qword_1005CFA70, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_1004537A8);
  v3 = sub_100019C6C(&qword_1005CFA78, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_100453560);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10012796C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;
  uint64_t result;

  v4 = sub_100127DE4(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_1001279A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100019C6C(&qword_1005CF5D0, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_100452350);
  v3 = sub_100019C6C(&qword_1005CF5D8, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1004522F0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for Int);
}

uint64_t sub_100127A3C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005CFA20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453978);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100127A7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005CFA20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453978);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100127ABC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005CFA18, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453824);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100127AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100019C6C(&qword_1005CFA18, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453824);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100127B54()
{
  double *v0;

  return Double.hashValue.getter(*v0);
}

void sub_100127B5C()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;

  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
}

uint64_t sub_100127B8C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*v1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = *v1;
  else
    v2 = 0;
  return static Hasher._hash(seed:_:)(a1, v2);
}

uint64_t sub_100127B9C(uint64_t a1, uint64_t a2)
{
  return sub_100127BA8(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100127BA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100127BE4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100127C24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100127C94()
{
  _QWORD *v0;

  return Int.hashValue.getter(*v0);
}

uint64_t sub_100127C9C(uint64_t a1)
{
  _QWORD *v1;

  return static Hasher._hash(seed:_:)(a1, *v1);
}

BOOL sub_100127CA4(double *a1, double *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100127CB8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

unint64_t sub_100127D40()
{
  unint64_t result;

  result = qword_1005CEE60;
  if (!qword_1005CEE60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleNotesQuery, &type metadata for VisibleNotesQuery);
    atomic_store(result, (unint64_t *)&qword_1005CEE60);
  }
  return result;
}

unint64_t sub_100127D84()
{
  unint64_t result;

  result = qword_1005CEEC0;
  if (!qword_1005CEEC0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntentv1.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntentv1.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005CEEC0);
  }
  return result;
}

void sub_100127DC8(uint64_t a1)
{
  sub_10012847C(a1, (uint64_t *)&unk_1005CF650, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
}

uint64_t sub_100127DE4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_100127E1C()
{
  unint64_t result;

  result = qword_1005CEEF8;
  if (!qword_1005CEEF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FolderViewSetting, &type metadata for FolderViewSetting);
    atomic_store(result, (unint64_t *)&qword_1005CEEF8);
  }
  return result;
}

unint64_t sub_100127E60()
{
  unint64_t result;

  result = qword_1005D1FA0;
  if (!qword_1005D1FA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleFoldersQuery, &type metadata for VisibleFoldersQuery);
    atomic_store(result, (unint64_t *)&qword_1005D1FA0);
  }
  return result;
}

unint64_t sub_100127EA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D6880;
  if (!qword_1005D6880)
  {
    v1 = sub_10001537C((uint64_t *)&unk_1005CEF40);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D6880);
  }
  return result;
}

unint64_t sub_100127EF0()
{
  unint64_t result;

  result = qword_1005CEF58;
  if (!qword_1005CEF58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TagSelectionOperatorEnum, &type metadata for TagSelectionOperatorEnum);
    atomic_store(result, (unint64_t *)&qword_1005CEF58);
  }
  return result;
}

void sub_100127F34(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  id v29;
  Swift::Int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = a1;
  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_100012E18(&qword_1005CF6D8);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (v1 < 0)
        v7 = v1;
      else
        v7 = v1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = (char *)(v4 + 7);
  v45 = v5;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v9 = 0;
    v43 = v1;
    while (1)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
      v11 = __OFADD__(v9++, 1);
      if (v11)
      {
        __break(1u);
        goto LABEL_43;
      }
      v12 = v10;
      v13 = NSObject._rawHashValue(seed:)(v4[5]);
      v14 = -1 << *((_BYTE *)v4 + 32);
      v15 = v13 & ~v14;
      v16 = v15 >> 6;
      v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
      v18 = 1 << v15;
      if (((1 << v15) & v17) != 0)
      {
        type metadata accessor for UIAppIntentInteraction(0);
        v19 = *(id *)(v4[6] + 8 * v15);
        v20 = static NSObject.== infix(_:_:)();

        if ((v20 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v12, v21);
          v1 = v43;
          goto LABEL_18;
        }
        v22 = ~v14;
        while (1)
        {
          v15 = (v15 + 1) & v22;
          v16 = v15 >> 6;
          v17 = *(_QWORD *)&v8[8 * (v15 >> 6)];
          v18 = 1 << v15;
          if ((v17 & (1 << v15)) == 0)
            break;
          v23 = *(id *)(v4[6] + 8 * v15);
          v24 = static NSObject.== infix(_:_:)();

          if ((v24 & 1) != 0)
            goto LABEL_17;
        }
        v1 = v43;
      }
      *(_QWORD *)&v8[8 * v16] = v18 | v17;
      *(_QWORD *)(v4[6] + 8 * v15) = v12;
      v25 = v4[2];
      v11 = __OFADD__(v25, 1);
      v26 = v25 + 1;
      if (v11)
        goto LABEL_44;
      v4[2] = v26;
LABEL_18:
      if (v9 == v45)
        return;
    }
  }
  v27 = 0;
  v44 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v27 != v44)
  {
    v28 = v4[5];
    v29 = *(id *)(v1 + 32 + 8 * v27);
    v30 = NSObject._rawHashValue(seed:)(v28);
    v31 = -1 << *((_BYTE *)v4 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    v34 = *(_QWORD *)&v8[8 * (v32 >> 6)];
    v35 = 1 << v32;
    if (((1 << v32) & v34) != 0)
    {
      type metadata accessor for UIAppIntentInteraction(0);
      v36 = *(id *)(v4[6] + 8 * v32);
      v37 = static NSObject.== infix(_:_:)();

      if ((v37 & 1) != 0)
        goto LABEL_30;
      v38 = ~v31;
      v32 = (v32 + 1) & v38;
      v33 = v32 >> 6;
      v34 = *(_QWORD *)&v8[8 * (v32 >> 6)];
      v35 = 1 << v32;
      if ((v34 & (1 << v32)) != 0)
      {
        while (1)
        {
          v39 = *(id *)(v4[6] + 8 * v32);
          v40 = static NSObject.== infix(_:_:)();

          if ((v40 & 1) != 0)
            break;
          v32 = (v32 + 1) & v38;
          v33 = v32 >> 6;
          v34 = *(_QWORD *)&v8[8 * (v32 >> 6)];
          v35 = 1 << v32;
          if ((v34 & (1 << v32)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v5 = v45;
        goto LABEL_31;
      }
LABEL_38:
      v5 = v45;
    }
    *(_QWORD *)&v8[8 * v33] = v35 | v34;
    *(_QWORD *)(v4[6] + 8 * v32) = v29;
    v41 = v4[2];
    v11 = __OFADD__(v41, 1);
    v42 = v41 + 1;
    if (v11)
      goto LABEL_45;
    v4[2] = v42;
LABEL_31:
    if (++v27 == v5)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

unint64_t sub_10012828C()
{
  unint64_t result;

  result = qword_1005CEFF8;
  if (!qword_1005CEFF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ApplyFormattingIntent.ChangeOperationType, &type metadata for ApplyFormattingIntent.ChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005CEFF8);
  }
  return result;
}

unint64_t sub_1001282D0()
{
  unint64_t result;

  result = qword_1005CF008;
  if (!qword_1005CF008)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ParagraphStyle, &type metadata for ParagraphStyle);
    atomic_store(result, (unint64_t *)&qword_1005CF008);
  }
  return result;
}

unint64_t sub_100128314()
{
  unint64_t result;

  result = qword_1005CF080;
  if (!qword_1005CF080)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesView, &type metadata for NotesView);
    atomic_store(result, (unint64_t *)&qword_1005CF080);
  }
  return result;
}

unint64_t sub_100128358()
{
  unint64_t result;

  result = qword_1005CF0E0;
  if (!qword_1005CF0E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for TopLevelFolder, &type metadata for TopLevelFolder);
    atomic_store(result, (unint64_t *)&qword_1005CF0E0);
  }
  return result;
}

unint64_t sub_10012839C()
{
  unint64_t result;

  result = qword_1005D2BB0;
  if (!qword_1005D2BB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleAttachmentsQuery, &type metadata for VisibleAttachmentsQuery);
    atomic_store(result, (unint64_t *)&qword_1005D2BB0);
  }
  return result;
}

unint64_t sub_1001283E0()
{
  unint64_t result;

  result = qword_1005D9320;
  if (!qword_1005D9320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AttachmentViewSize, &type metadata for AttachmentViewSize);
    atomic_store(result, (unint64_t *)&qword_1005D9320);
  }
  return result;
}

uint64_t sub_100128424(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_100128460(uint64_t a1)
{
  sub_10012847C(a1, &qword_1005CFAB8, &qword_1005CFAC0, ICAttachment_ptr);
}

void sub_10012847C(uint64_t a1, uint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  id v33;
  Swift::Int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  char v41;
  uint64_t v42;
  id v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v51;

  v5 = a1;
  v6 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
    if (v7)
    {
LABEL_3:
      sub_100012E18(a2);
      v8 = (_QWORD *)static _SetStorage.allocate(capacity:)(v7);
      if (!v6)
        goto LABEL_4;
LABEL_11:
      if (v5 < 0)
        v11 = v5;
      else
        v11 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v9 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease(v5);
      if (!v9)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
  }
  v8 = &_swiftEmptySetSingleton;
  if (v6)
    goto LABEL_11;
LABEL_4:
  v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    return;
LABEL_15:
  v12 = (char *)(v8 + 7);
  v51 = v9;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v13 = 0;
    v47 = v5;
    while (1)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v5);
      v15 = __OFADD__(v13++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_43;
      }
      v16 = v14;
      v17 = NSObject._rawHashValue(seed:)(v8[5]);
      v18 = -1 << *((_BYTE *)v8 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
      v22 = 1 << v19;
      if (((1 << v19) & v21) != 0)
      {
        sub_1000163BC(0, a3, a4);
        v23 = *(id *)(v8[6] + 8 * v19);
        v24 = static NSObject.== infix(_:_:)(v23);

        if ((v24 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v16, v25);
          v5 = v47;
          goto LABEL_18;
        }
        v26 = ~v18;
        while (1)
        {
          v19 = (v19 + 1) & v26;
          v20 = v19 >> 6;
          v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
          v22 = 1 << v19;
          if ((v21 & (1 << v19)) == 0)
            break;
          v27 = *(id *)(v8[6] + 8 * v19);
          v28 = static NSObject.== infix(_:_:)(v27);

          if ((v28 & 1) != 0)
            goto LABEL_17;
        }
        v5 = v47;
      }
      *(_QWORD *)&v12[8 * v20] = v22 | v21;
      *(_QWORD *)(v8[6] + 8 * v19) = v16;
      v29 = v8[2];
      v15 = __OFADD__(v29, 1);
      v30 = v29 + 1;
      if (v15)
        goto LABEL_44;
      v8[2] = v30;
LABEL_18:
      if (v13 == v51)
        return;
    }
  }
  v31 = 0;
  v48 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v31 != v48)
  {
    v32 = v8[5];
    v33 = *(id *)(v5 + 32 + 8 * v31);
    v34 = NSObject._rawHashValue(seed:)(v32);
    v35 = -1 << *((_BYTE *)v8 + 32);
    v36 = v34 & ~v35;
    v37 = v36 >> 6;
    v38 = *(_QWORD *)&v12[8 * (v36 >> 6)];
    v39 = 1 << v36;
    if (((1 << v36) & v38) != 0)
    {
      sub_1000163BC(0, a3, a4);
      v40 = *(id *)(v8[6] + 8 * v36);
      v41 = static NSObject.== infix(_:_:)(v40);

      if ((v41 & 1) != 0)
        goto LABEL_30;
      v42 = ~v35;
      v36 = (v36 + 1) & v42;
      v37 = v36 >> 6;
      v38 = *(_QWORD *)&v12[8 * (v36 >> 6)];
      v39 = 1 << v36;
      if ((v38 & (1 << v36)) != 0)
      {
        while (1)
        {
          v43 = *(id *)(v8[6] + 8 * v36);
          v44 = static NSObject.== infix(_:_:)(v43);

          if ((v44 & 1) != 0)
            break;
          v36 = (v36 + 1) & v42;
          v37 = v36 >> 6;
          v38 = *(_QWORD *)&v12[8 * (v36 >> 6)];
          v39 = 1 << v36;
          if ((v38 & (1 << v36)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v9 = v51;
        goto LABEL_31;
      }
LABEL_38:
      v9 = v51;
    }
    *(_QWORD *)&v12[8 * v37] = v39 | v38;
    *(_QWORD *)(v8[6] + 8 * v36) = v33;
    v45 = v8[2];
    v15 = __OFADD__(v45, 1);
    v46 = v45 + 1;
    if (v15)
      goto LABEL_45;
    v8[2] = v46;
LABEL_31:
    if (++v31 == v9)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

void sub_1001287E0(uint64_t a1)
{
  sub_10012847C(a1, &qword_1005CFAC8, &qword_1005CFAD0, ICInlineAttachment_ptr);
}

uint64_t sub_1001287FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v6[4];

  type metadata accessor for os_unfair_lock_s(255);
  type metadata accessor for ManagedBuffer(0, a2, v4);
  v6[2] = a1;
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)(1, sub_10012957C, v6);
}

void sub_100128868(uint64_t a1)
{
  sub_10012847C(a1, (uint64_t *)&unk_1005CF7C0, &qword_1005D8540, CKShareParticipant_ptr);
}

unint64_t sub_100128884()
{
  unint64_t result;

  result = qword_1005CF218;
  if (!qword_1005CF218)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005CF218);
  }
  return result;
}

unint64_t sub_1001288C8()
{
  unint64_t result;

  result = qword_1005CF228;
  if (!qword_1005CF228)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NotesSetting, &type metadata for NotesSetting);
    atomic_store(result, (unint64_t *)&qword_1005CF228);
  }
  return result;
}

void *sub_10012890C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void *result;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    sub_100012E18(&qword_1005CF6F8);
    v10 = static _SetStorage.allocate(capacity:)(v9);
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v31 = v9;
    v32 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v35 = v10 + 56;
    while (1)
    {
      v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      v14 = *(_QWORD *)(v10 + 40);
      v15 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      v17 = ~(-1 << *(_BYTE *)(v10 + 32));
      v18 = v16 & v17;
      v19 = (v16 & (unint64_t)v17) >> 6;
      v20 = *(_QWORD *)(v35 + 8 * v19);
      v21 = 1 << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(_QWORD *)(v10 + 48) + v18 * v13, v2);
          v22 = sub_100019C6C((unint64_t *)&qword_1005D8A60, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          v24 = v3;
          v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            v3 = v24;
            v9 = v31;
            goto LABEL_4;
          }
          v18 = (v18 + 1) & v17;
          v19 = v18 >> 6;
          v20 = *(_QWORD *)(v35 + 8 * (v18 >> 6));
          v21 = 1 << v18;
          v3 = v24;
        }
        while ((v20 & (1 << v18)) != 0);
        v9 = v31;
      }
      *(_QWORD *)(v35 + 8 * v19) = v21 | v20;
      result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v18 * v13, v8, v2);
      v27 = *(_QWORD *)(v10 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
        break;
      *(_QWORD *)(v10 + 16) = v29;
LABEL_4:
      v11 = v33 + 1;
      if (v33 + 1 == v9)
        return (void *)v10;
    }
    __break(1u);
  }
  else
  {
    return &_swiftEmptySetSingleton;
  }
  return result;
}

void sub_100128B74(uint64_t a1)
{
  sub_10012847C(a1, (uint64_t *)&unk_1005CF890, (unint64_t *)&qword_1005D8AB0, ICNoteEditorViewController_ptr);
}

unint64_t sub_100128B90()
{
  unint64_t result;

  result = qword_1005CF238;
  if (!qword_1005CF238)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005CF238);
  }
  return result;
}

uint64_t type metadata accessor for FolderComposerFilterCellMentions()
{
  return objc_opt_self(_TtC11MobileNotes32FolderComposerFilterCellMentions);
}

void type metadata accessor for FilterType(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF420, (uint64_t)&unk_100557960);
}

void type metadata accessor for SymbolicTraits(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF428, (uint64_t)&unk_100557980);
}

void type metadata accessor for TextStyle(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF430, (uint64_t)&unk_1005579A8);
}

uint64_t initializeBufferWithCopyOfBuffer for RemoveTagsFromNotesIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 initializeWithTake for RemoveTagsFromNotesIntent(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100128C6C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100128C8C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for NSDirectionalEdgeInsets(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF438, (uint64_t)&unk_100557A28);
}

void type metadata accessor for FilterSelectionJoinOperator(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF440, (uint64_t)&unk_100557A58);
}

void type metadata accessor for TagSelectionOperator(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF448, (uint64_t)&unk_100557A78);
}

void type metadata accessor for DateFilterRelativeRangeSelectionType(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF450, (uint64_t)&unk_100557A98);
}

void type metadata accessor for ParticipantsFilterJoinOperator(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF458, (uint64_t)&unk_100557AB8);
}

void type metadata accessor for UIBackgroundTaskIdentifier(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF460, (uint64_t)&unk_100557AD8);
}

void type metadata accessor for ICASTagRenameApproachEnum(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF468, (uint64_t)&unk_100557B00);
}

void type metadata accessor for ICASTagDeleteApproachEnum(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF470, (uint64_t)&unk_100557B20);
}

__n128 initializeWithTake for VisibleTagsQuery(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF478, (uint64_t)&unk_100557B98);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF480, (uint64_t)&unk_100557C18);
}

__n128 initializeWithTake for OpenAccountIntent(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t _s17LaunchRequirementVwet(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t _s17LaunchRequirementVwst(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for OperatingSystemVersion(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF488, (uint64_t)&unk_100557C98);
}

void type metadata accessor for ICMoveDecisionType(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF490, (uint64_t)&unk_100557CC8);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF498, (uint64_t)&unk_100557CE8);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF4A0, (uint64_t)&unk_100557D10);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF4A8, (uint64_t)&unk_100557D30);
}

void type metadata accessor for ICError(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF4B0, (uint64_t)&unk_100557D58);
}

uint64_t sub_100128E64()
{
  return sub_100019C6C(&qword_1005CF4B8, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100451FC8);
}

uint64_t sub_100128E90()
{
  return sub_100019C6C(&qword_1005CF4C0, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100451FF4);
}

uint64_t sub_100128EBC()
{
  return sub_100019C6C(&qword_1005CF4C8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10045212C);
}

uint64_t sub_100128EE8()
{
  return sub_100019C6C(&qword_1005CF4D0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100452100);
}

uint64_t sub_100128F14()
{
  return sub_100019C6C(&qword_1005CF4D8, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_1004522B4);
}

uint64_t sub_100128F40()
{
  return sub_100019C6C(&qword_1005CF4E0, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_100452288);
}

uint64_t sub_100128F6C()
{
  return sub_100019C6C(&qword_1005CF4E8, (uint64_t (*)(uint64_t))type metadata accessor for UIBackgroundTaskIdentifier, (uint64_t)&unk_100452324);
}

uint64_t sub_100128F98()
{
  return sub_100019C6C(&qword_1005CF4F0, (uint64_t (*)(uint64_t))type metadata accessor for DateFilterRelativeRangeSelectionType, (uint64_t)&unk_100452498);
}

uint64_t sub_100128FC4()
{
  return sub_100019C6C(&qword_1005CF4F8, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004525FC);
}

uint64_t sub_100128FF0()
{
  return sub_100019C6C(&qword_1005CF500, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_1004525D0);
}

uint64_t sub_10012901C()
{
  return sub_100019C6C(&qword_1005CF508, (uint64_t (*)(uint64_t))type metadata accessor for TextStyle, (uint64_t)&unk_10045266C);
}

uint64_t sub_100129048()
{
  return sub_100019C6C(&qword_1005CF510, (uint64_t (*)(uint64_t))type metadata accessor for FilterType, (uint64_t)&unk_10045276C);
}

uint64_t sub_100129074()
{
  return sub_100019C6C(&qword_1005CF518, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100452214);
}

uint64_t sub_1001290A0()
{
  return sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
}

uint64_t sub_1001290CC()
{
  return sub_100019C6C(&qword_1005CF528, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10045219C);
}

uint64_t sub_1001290F8()
{
  return sub_100019C6C(&qword_1005CF530, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_1004520B0);
}

uint64_t sub_100129124()
{
  return sub_100019C6C(&qword_1005CF538, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_10045207C);
}

uint64_t sub_100129150()
{
  return sub_100019C6C(&qword_1005CF540, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452038);
}

uint64_t sub_10012917C()
{
  return sub_100019C6C(&qword_1005CF548, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1004527E4);
}

uint64_t sub_1001291A8()
{
  return sub_100019C6C(&qword_1005CF550, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100452240);
}

unint64_t sub_1001291D8()
{
  unint64_t result;

  result = qword_1005CF558;
  if (!qword_1005CF558)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1005CF558);
  }
  return result;
}

void sub_10012921C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v6 = a1;
    else
      v6 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(a1);
    if (v3)
    {
LABEL_3:
      sub_100012E18(&qword_1005CF6C0);
      v4 = (_QWORD *)static _SetStorage.allocate(capacity:)(v3);
      v26 = a1;
      if (!v2)
        goto LABEL_4;
LABEL_11:
      if (a1 < 0)
        v7 = a1;
      else
        v7 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(a1);
      if (!v5)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v3)
      goto LABEL_3;
  }
  v4 = &_swiftEmptySetSingleton;
  v26 = a1;
  if (v2)
    goto LABEL_11;
LABEL_4:
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v5)
    return;
LABEL_15:
  v8 = 0;
  v9 = (char *)(v4 + 7);
  v25 = v5;
  while ((v26 & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v26);
    v11 = __OFADD__(v8++, 1);
    if (v11)
      goto LABEL_32;
LABEL_24:
    v27 = v10;
    v29 = v10;
    v12 = v4[5];
    v13 = type metadata accessor for AnyCancellable(0);
    v14 = sub_100019C6C(&qword_1005CF6C8, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
    v16 = -1 << *((_BYTE *)v4 + 32);
    v17 = v15 & ~v16;
    v18 = v17 >> 6;
    v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
    v20 = 1 << v17;
    if (((1 << v17) & v19) != 0)
    {
      v21 = ~v16;
      v22 = sub_100019C6C(&qword_1005CF6D0, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        v28 = *(_QWORD *)(v4[6] + 8 * v17);
        if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v22) & 1) != 0)
        {
          swift_release(v27);
          v5 = v25;
          goto LABEL_17;
        }
        v17 = (v17 + 1) & v21;
        v18 = v17 >> 6;
        v19 = *(_QWORD *)&v9[8 * (v17 >> 6)];
        v20 = 1 << v17;
      }
      while ((v19 & (1 << v17)) != 0);
      v5 = v25;
    }
    *(_QWORD *)&v9[8 * v18] = v20 | v19;
    *(_QWORD *)(v4[6] + 8 * v17) = v27;
    v23 = v4[2];
    v11 = __OFADD__(v23, 1);
    v24 = v23 + 1;
    if (v11)
      goto LABEL_33;
    v4[2] = v24;
LABEL_17:
    if (v8 == v5)
      return;
  }
  if (v8 >= *(_QWORD *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_34;
  v10 = swift_retain(*(_QWORD *)(v26 + 32 + 8 * v8));
  v11 = __OFADD__(v8++, 1);
  if (!v11)
    goto LABEL_24;
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  __break(1u);
}

uint64_t sub_1001294B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001294D4()
{
  return sub_1001128F0(3, 0);
}

uint64_t sub_1001294FC()
{
  return sub_1001128F0(2, 0);
}

uint64_t sub_100129524()
{
  return sub_1001128F0(0, 0);
}

uint64_t sub_10012954C()
{
  return sub_1001128F0(1, 0);
}

void sub_100129574(uint64_t a1)
{
  uint64_t v1;

  sub_1001122E8(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012957C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v2 + 16);
  v4 = *a1;
  *(_DWORD *)((char *)a1 + ((*(unsigned int *)(*a1 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4
                                                                             + class metadata base offset for ManagedBuffer)
                                                                 - 8)
                                                     + 16))(a2, v3);
}

uint64_t sub_1001295D4(uint64_t a1)
{
  uint64_t v1;

  return sub_100125E00(a1, *(_QWORD *)(v1 + 16), &qword_1005CF778, &qword_1005CF780);
}

uint64_t sub_1001295FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100125E00(a1, *(_QWORD *)(v1 + 16), &qword_1005CF790, &qword_1005CF798);
}

uint64_t sub_100129624(uint64_t a1)
{
  uint64_t v1;

  return sub_100125E00(a1, *(_QWORD *)(v1 + 16), &qword_1005CF7B0, &qword_1005CF7B8);
}

uint64_t sub_10012964C(uint64_t a1)
{
  uint64_t v1;

  return sub_100125E00(a1, *(_QWORD *)(v1 + 16), &qword_1005CF8A8, &qword_1005CF8B0);
}

void type metadata accessor for CMFormatDescription(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8B8, (uint64_t)&unk_100557E60);
}

void type metadata accessor for ICCRMergeResult(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8C0, (uint64_t)&unk_100557E90);
}

void type metadata accessor for DocumentAttributeKey(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8C8, (uint64_t)&unk_100557EB0);
}

void type metadata accessor for DocumentReadingOptionKey(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8D0, (uint64_t)&unk_100557ED8);
}

void type metadata accessor for ID(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8D8, (uint64_t)&unk_100557F00);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8E8, (uint64_t)&unk_100557F48);
}

void type metadata accessor for CGColor(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8F0, (uint64_t)&unk_100557F68);
}

void type metadata accessor for OpenExternalURLOptionsKey(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF8F8, (uint64_t)&unk_100557F98);
}

void type metadata accessor for Level(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF900, (uint64_t)&unk_100557FC0);
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF908, (uint64_t)&unk_100558040);
}

void type metadata accessor for VirtualSmartFolderItemIdentifierTypes(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF910, (uint64_t)&unk_100558068);
}

void type metadata accessor for _UIDataOwner(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF918, (uint64_t)&unk_100558090);
}

void type metadata accessor for ActivityType(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF920, (uint64_t)&unk_1005580B0);
}

void type metadata accessor for CADisableUpdateMask(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF928, (uint64_t)&unk_1005580D8);
}

void type metadata accessor for NavigationDirection(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF930, (uint64_t)&unk_100558100);
}

uint64_t getEnumTagSinglePayload for ICAttachmentArchiveModel.Coordinate(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ICAttachmentArchiveModel.Coordinate(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF938, (uint64_t)&unk_100558178);
}

void type metadata accessor for ICTTNamedStyle(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CF940, (uint64_t)&unk_1005581A0);
}

uint64_t sub_100129810()
{
  return sub_100019C6C(&qword_1005CF948, (uint64_t (*)(uint64_t))type metadata accessor for CADisableUpdateMask, (uint64_t)&unk_100452C10);
}

uint64_t sub_10012983C()
{
  return sub_100019C6C(&qword_1005CF950, (uint64_t (*)(uint64_t))type metadata accessor for CADisableUpdateMask, (uint64_t)&unk_100452BE0);
}

uint64_t sub_100129868()
{
  return sub_100019C6C(&qword_1005CF958, (uint64_t (*)(uint64_t))type metadata accessor for CADisableUpdateMask, (uint64_t)&unk_100452C38);
}

uint64_t sub_100129894()
{
  return sub_100019C6C(&qword_1005CF960, (uint64_t (*)(uint64_t))type metadata accessor for CADisableUpdateMask, (uint64_t)&unk_100452C70);
}

uint64_t sub_1001298C0()
{
  return sub_100019C6C(&qword_1005CF968, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100452D98);
}

uint64_t sub_1001298EC()
{
  return sub_100019C6C(&qword_1005CF970, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100452D70);
}

uint64_t sub_100129918()
{
  return sub_100019C6C(&qword_1005CF978, (uint64_t (*)(uint64_t))type metadata accessor for ActivityType, (uint64_t)&unk_100452E00);
}

uint64_t sub_100129944()
{
  return sub_100019C6C(&qword_1005CF980, (uint64_t (*)(uint64_t))type metadata accessor for VirtualSmartFolderItemIdentifierTypes, (uint64_t)&unk_100452EE4);
}

uint64_t sub_100129970()
{
  return sub_100019C6C(&qword_1005CF988, (uint64_t (*)(uint64_t))type metadata accessor for VirtualSmartFolderItemIdentifierTypes, (uint64_t)&unk_100452EB8);
}

uint64_t sub_10012999C()
{
  return sub_100019C6C(&qword_1005CF990, (uint64_t (*)(uint64_t))type metadata accessor for VirtualSmartFolderItemIdentifierTypes, (uint64_t)&unk_100452F54);
}

uint64_t sub_1001299C8()
{
  return sub_100019C6C(&qword_1005CF998, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_10045303C);
}

uint64_t sub_1001299F4()
{
  return sub_100019C6C(&qword_1005CF9A0, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_100453010);
}

uint64_t sub_100129A20()
{
  return sub_100019C6C(&qword_1005CF9A8, (uint64_t (*)(uint64_t))type metadata accessor for Level, (uint64_t)&unk_1004530AC);
}

uint64_t sub_100129A4C()
{
  return sub_100019C6C(&qword_1005CF9B0, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100453194);
}

uint64_t sub_100129A78()
{
  return sub_100019C6C(&qword_1005CF9B8, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100453168);
}

uint64_t sub_100129AA4()
{
  return sub_100019C6C(&qword_1005CF9C0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_10045331C);
}

uint64_t sub_100129AD0()
{
  return sub_100019C6C(&qword_1005CF9C8, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_1004532F0);
}

uint64_t sub_100129AFC()
{
  return sub_100019C6C(&qword_1005CF9D0, (uint64_t (*)(uint64_t))type metadata accessor for Name, (uint64_t)&unk_10045338C);
}

uint64_t sub_100129B28()
{
  return sub_100019C6C(&qword_1005CF9D8, (uint64_t (*)(uint64_t))type metadata accessor for ID, (uint64_t)&unk_100453498);
}

uint64_t sub_100129B54()
{
  return sub_100019C6C(&qword_1005CF9E0, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_100453528);
}

uint64_t sub_100129B80()
{
  return sub_100019C6C(&qword_1005CF9E8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_100453500);
}

uint64_t sub_100129BAC()
{
  return sub_100019C6C(&qword_1005CF9F0, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_100453628);
}

uint64_t sub_100129BD8()
{
  return sub_100019C6C(&qword_1005CF9F8, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_100453600);
}

uint64_t sub_100129C04()
{
  return sub_100019C6C(&qword_1005CFA00, (uint64_t (*)(uint64_t))type metadata accessor for DocumentAttributeKey, (uint64_t)&unk_100453690);
}

uint64_t sub_100129C30()
{
  return sub_100019C6C(&qword_1005CFA08, (uint64_t (*)(uint64_t))type metadata accessor for DocumentReadingOptionKey, (uint64_t)&unk_100453590);
}

uint64_t sub_100129C5C()
{
  return sub_100019C6C(&qword_1005CFA10, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100453288);
}

uint64_t sub_100129C88()
{
  return sub_100019C6C(&qword_1005CFA18, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453824);
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_100016578(a1, &qword_1005CFAF8, (uint64_t)&unk_1005581C0);
}

uint64_t sub_100129CC8()
{
  return sub_100019C6C(&qword_1005CFA20, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453978);
}

uint64_t sub_100129CF4()
{
  return sub_100019C6C(&qword_1005CFA28, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453900);
}

uint64_t sub_100129D20()
{
  return sub_100019C6C(&qword_1005CFA30, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453890);
}

uint64_t sub_100129D4C()
{
  return sub_100019C6C(&qword_1005CFA38, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1004537E8);
}

uint64_t sub_100129D78()
{
  return sub_100019C6C(&qword_1005CFA40, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1004532B4);
}

uint64_t sub_100129DA4()
{
  return sub_100019C6C(&qword_1005CFA48, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1004538D4);
}

uint64_t sub_100129DD0()
{
  return sub_100019C6C(&qword_1005CFA50, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100453934);
}

uint64_t sub_100129DFC()
{
  return sub_100019C6C(&qword_1005CFA58, (uint64_t (*)(uint64_t))type metadata accessor for OpenExternalURLOptionsKey, (uint64_t)&unk_100453204);
}

unint64_t sub_100129E28()
{
  unint64_t result;

  result = qword_1005CFAB0;
  if (!qword_1005CFAB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_1005CFAB0);
  }
  return result;
}

void type metadata accessor for NotesVersion(uint64_t a1)
{
  sub_100016578(a1, (unint64_t *)&unk_1005CFB00, (uint64_t)&unk_1005581E8);
}

void *OpenAccountIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenAccountIntent.persistentIdentifier;
}

uint64_t sub_100129EF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static OpenAccountIntent.title);
  sub_10012A0B0(v10, (uint64_t)static OpenAccountIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x636341206E65704FLL, 0xEC000000746E756FLL);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t OpenAccountIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CE960 != -1)
    swift_once(&qword_1005CE960, sub_100129EF0);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static OpenAccountIntent.title);
}

uint64_t sub_10012A0B0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t static OpenAccountIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CE960 != -1)
    swift_once(&qword_1005CE960, sub_100129EF0);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static OpenAccountIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *OpenAccountIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenAccountIntent.openAppWhenRun;
}

uint64_t static OpenAccountIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000023, 0x80000001004793A0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static OpenAccountIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005CFC90);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005CFC98);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000191E4();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, &type metadata for OpenAccountIntent, v6);
  v7._countAndFlagsBits = 0x656874206E65704FLL;
  v7._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100453A48, v8);
  v10 = sub_100012E18(&qword_1005CFCA0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x746E756F63636120;
  v11._object = (void *)0xE800000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for OpenAccountIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenAccountIntent, v6);
}

uint64_t SetChecklistItemsCheckedIntentv1.$entities.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_10012A4F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t ChangeFolderViewSettingIntent.changeOperation.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t OpenAccountIntent.target.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for AccountEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012AF28(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_10012AF6C(a1);
}

uint64_t (*SetChecklistItemsCheckedIntentv1.entities.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t DeleteChecklistItemsIntent.loggingConfiguration.getter()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t DeleteChecklistItemsIntent.loggingConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  return AppDependency.wrappedValue.setter(v5);
}

uint64_t (*DeleteChecklistItemsIntent.loggingConfiguration.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AppDependency.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t DeleteChecklistItemsIntent.$loggingConfiguration.getter()
{
  return AppDependency.projectedValue.getter();
}

uint64_t ChangeFolderViewSettingIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v1 + 24) = static MainActor.shared.getter();
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor, v3);
  return swift_task_switch(sub_10012A740, v4, v5);
}

uint64_t sub_10012A740()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 24));
  static IntentResult.result<>()(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012A77C()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t InsertAllMentionIntent.target.getter()
{
  return IntentParameter.wrappedValue.getter();
}

uint64_t sub_10012A7D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for AccountEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10012AF28(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_10012AF6C(a1);
}

uint64_t (*SetChecklistItemsCheckedIntent.changeOperation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10012A600;
}

void sub_10012A894(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD, _QWORD))(*a1 + 32))(*a1, 0);
  free(v1);
}

uint64_t sub_10012A8CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005CFC90);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005CFC98);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(17, 1, a1, a2);
  v10._countAndFlagsBits = 0x656874206E65704FLL;
  v10._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_100453A48, v11);
  v13 = sub_100012E18(&qword_1005CFCA0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x746E756F63636120;
  v14._object = (void *)0xE800000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_10012AA3C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes17OpenAccountIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t _s11MobileNotes17OpenAccountIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD v52[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D6AB0);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18(&qword_1005CEE38);
  v25 = String.LocalizationValue.init(stringLiteral:)(0x746E756F636341, 0xE700000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Notes Account intent", 45, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100476AE0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for account", 33, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for AccountEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v35 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v36 = sub_10012B2F4((unint64_t *)&unk_1005CEE40, (uint64_t)&protocol conformance descriptor for AccountEntity);
  v37 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v50 = 0xD000000000000024;
  v51 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v38 = type metadata accessor for AppDependencyManager(0);
  v39 = static AppDependencyManager.shared.getter(v38);
  AppDependency.__allocating_init(key:manager:)(v52, v39);
  sub_100012E18(&qword_1005CEE50);
  v50 = 0xD000000000000021;
  v51 = 0x8000000100476B70;
  v40 = AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v41 = static AppDependencyManager.shared.getter(v40);
  AppDependency.__allocating_init(key:manager:)(v52, v41);
  return v37;
}

uint64_t sub_10012AF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccountEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012AF6C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccountEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10012AFA8()
{
  return sub_10012B2F4(&qword_1005CFCB0, (uint64_t)&protocol conformance descriptor for AccountEntity);
}

unint64_t sub_10012AFCC(uint64_t a1)
{
  unint64_t result;

  result = sub_10012AFF0();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10012AFF0()
{
  unint64_t result;

  result = qword_1005CFCE0;
  if (!qword_1005CFCE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenAccountIntent, &type metadata for OpenAccountIntent);
    atomic_store(result, (unint64_t *)&qword_1005CFCE0);
  }
  return result;
}

unint64_t sub_10012B038()
{
  unint64_t result;

  result = qword_1005CFCE8;
  if (!qword_1005CFCE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenAccountIntent, &type metadata for OpenAccountIntent);
    atomic_store(result, (unint64_t *)&qword_1005CFCE8);
  }
  return result;
}

uint64_t sub_10012B07C()
{
  return sub_10012B2F4(&qword_1005D6560, (uint64_t)&protocol conformance descriptor for AccountEntity);
}

uint64_t sub_10012B0A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of OpenAccountIntent.perform()>>, 1);
}

uint64_t sub_10012B0B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static OpenAccountIntent.parameterSummary>>, 1);
}

uint64_t destroy for OpenAccountIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *_s11MobileNotes17OpenAccountIntentVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for OpenAccountIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

_QWORD *assignWithTake for OpenAccountIntent(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for OpenAccountIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OpenAccountIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OpenAccountIntent()
{
  return &type metadata for OpenAccountIntent;
}

uint64_t sub_10012B29C()
{
  return sub_100016638(&qword_1005CFD08, &qword_1005CFD10, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_10012B2C8()
{
  return sub_100016638((unint64_t *)&qword_1005D1B40, (uint64_t *)&unk_1005D0690, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_10012B2F4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for AccountEntity(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10012B334(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

void sub_10012B37C(_QWORD *a1@<X8>)
{
  *a1 = &off_1005554B8;
}

BOOL sub_10012B38C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10012B3A4()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10012B3E8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10012B410(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *sub_10012B450@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_10012B470(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_10012B47C(_QWORD *a1@<X8>)
{
  *a1 = &off_1005554E0;
}

uint64_t sub_10012B48C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  id v12;
  void *v13;
  Class isa;
  id v15;
  uint64_t v16;
  uint64_t result;
  _BYTE v18[15];
  char v19;

  v1 = v0;
  v2 = type metadata accessor for IndexPath(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100012E18((uint64_t *)&unk_1005D6350);
  v7 = __chkstk_darwin(v6);
  v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v18[-v10];
  v12 = sub_10012B880();
  v19 = 0;
  dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(&v19);

  sub_10012D1C8((uint64_t)v11, (uint64_t)v9);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    sub_10012D210((uint64_t)v11);
    sub_10012D210((uint64_t)v9);
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 32))(v5, v9, v2);
    v13 = *(void **)(v1 + 16);
    isa = IndexPath._bridgeToObjectiveC()().super.isa;
    v15 = objc_msgSend(v13, "cellForItemAtIndexPath:", isa);

    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
    sub_10012D210((uint64_t)v11);
    if (v15)
    {
      v16 = type metadata accessor for SmartFolderComposerTextFieldCell();
      result = swift_dynamicCastClass(v15, v16);
      if (result)
        return result;

    }
  }
  return 0;
}

uint64_t sub_10012B630()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;

  v1 = (void *)v0[3];
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v2, "title");
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  }
  else
  {
    v5 = (void *)v0[7];
    if (v5)
      objc_msgSend(v5, "isEmpty");
    v6 = (void *)objc_opt_self(ICFolder);
    v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "localizedStringForKey:value:table:", v8, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v3 = objc_msgSend(v6, "deduplicatingTitle:account:", v12, v0[4]);

    if (!v3)
      return 0;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }

  return v4;
}

id sub_10012B880()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(id *)(v0 + 80);
  }
  else
  {
    v3 = (void *)sub_10012B9BC(v0);
    v4 = *(void **)(v0 + 80);
    *(_QWORD *)(v0 + 80) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_10012B8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;

  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  v9 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "managedObjectContext");

  }
  else
  {
    v11 = 0;
  }
  *(_QWORD *)(v4 + 64) = v11;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 80) = 0;
  v12 = *(void **)(v4 + 24);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = a2;

  v13 = *(_QWORD *)(v4 + 48);
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 48) = a4;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRelease(v13);
  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    *(_BYTE *)(v4 + 72) = 1;
  }
  return v4;
}

uint64_t sub_10012B9BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v2 = sub_100012E18(&qword_1005CFE40);
  v31 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  v3 = *(_QWORD *)(v31 + 64);
  v4 = __chkstk_darwin(v2);
  v30 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v33 = (char *)&v28 - v5;
  v6 = sub_100012E18(&qword_1005CFE48);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v10 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - v11;
  v13 = type metadata accessor for SmartFolderComposerTextFieldCell();
  swift_retain(a1);
  v29 = v12;
  UICollectionView.CellRegistration.init(handler:)(sub_10012CD80, a1, v13, &type metadata for FolderComposerDataSource.Item);
  v14 = sub_1000163BC(0, &qword_1005CFE50, UICollectionViewListCell_ptr);
  swift_retain(a1);
  v15 = v33;
  UICollectionView.CellRegistration.init(handler:)(sub_10012CD88, a1, v14, &type metadata for FolderComposerDataSource.Item);
  v28 = *(id *)(a1 + 16);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v12, v6);
  v17 = v30;
  v16 = v31;
  v18 = v15;
  v19 = v32;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v30, v18, v32);
  v20 = *(unsigned __int8 *)(v7 + 80);
  v21 = (v20 + 16) & ~v20;
  v22 = *(unsigned __int8 *)(v16 + 80);
  v23 = (v8 + v22 + v21) & ~v22;
  v24 = swift_allocObject(&unk_100558748, v23 + v3, v20 | v22 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v24 + v21, v10, v6);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v24 + v23, v17, v19);
  v25 = objc_allocWithZone((Class)sub_100012E18(&qword_1005CFE58));
  v26 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v28, sub_10012CE4C, v24);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v33, v19);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v29, v6);
  return v26;
}

uint64_t sub_10012BC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  void (**v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a4 + 48);
  swift_bridgeObjectRetain(v6);
  v7 = sub_100376928();
  if (v6)
  {
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v8 = 0;
  }
  objc_msgSend(v7, "setText:", v8);

  v9 = sub_100376928();
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "localizedStringForKey:value:table:", v11, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14 = v13;

  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v9, "setAccessibilityLabel:", v15);

  v16 = (void (**)(uint64_t, uint64_t))(a1
                                               + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell_textDidChange);
  v17 = *(_QWORD *)(a1 + OBJC_IVAR____TtC11MobileNotes32SmartFolderComposerTextFieldCell_textDidChange);
  v18 = (uint64_t)v16[1];
  *v16 = sub_10012D1C0;
  v16[1] = (void (*)(uint64_t, uint64_t))a4;
  swift_retain(a4);
  return sub_100012C50(v17, v18);
}

void sub_10012BDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  NSString v10;

  v4 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 40) = a1;
  *(_QWORD *)(a3 + 48) = a2;
  swift_bridgeObjectRetain(a2);
  v5 = swift_bridgeObjectRelease(v4);
  v6 = sub_10012B48C(v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(_QWORD *)(a3 + 48);
    swift_bridgeObjectRetain(v8);
    v9 = sub_100376928();
    if (v8)
    {
      v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      v10 = 0;
    }
    objc_msgSend(v9, "setText:", v10);

  }
  *(_BYTE *)(a3 + 72) = 1;
}

void sub_10012BE58(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void (*v27)(_QWORD *, _QWORD);
  void *v28;
  void *v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  id v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*__ptr32 *v43)();
  void *v44;
  id v45;
  NSString v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t inited;
  id v58;
  NSString v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  UIAccessibilityTraits v78;
  unint64_t v79;
  UIAccessibilityTraits v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[5];
  char v92[80];

  v89 = a4;
  v5 = sub_100012E18(&qword_1005CFE60);
  __chkstk_darwin(v5);
  v86 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UICellAccessory.DisclosureIndicatorOptions(0);
  v87 = *(_QWORD *)(v7 - 8);
  v88 = v7;
  __chkstk_darwin(v7);
  v85 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v83 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UIListContentConfiguration(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  UICollectionViewListCell.defaultContentConfiguration()(v13);
  v16 = (void *)objc_opt_self(UIColor);
  v17 = objc_msgSend(v16, "tintColor");
  v18 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 17.0);
  v19 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v18);

  v20 = v19;
  v21 = String._bridgeToObjectiveC()();
  v22 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:withConfiguration:", v21, v20);

  if (v22)
  {
    v23 = objc_msgSend(v16, "whiteColor");
    v24 = objc_msgSend(v22, "imageWithTintColor:", v23);

    if (v17)
    {
      v25 = v17;
      v26 = objc_msgSend(v24, "ic_imageCenteredWithBackgroundColor:size:", v25, 28.0, 28.0);

      v24 = v26;
    }
    v90 = v11;

    UIListContentConfiguration.image.setter(v24);
    v27 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.imageProperties.modify(v91);
    UIListContentConfiguration.ImageProperties.cornerRadius.setter(8.0);
    v27(v91, 0);
    v28 = *(void **)(v89 + 56);
    v82 = v12;
    if (v28 && (objc_msgSend(v28, "isEmpty") & 1) == 0)
    {
      v44 = (void *)objc_opt_self(NSBundle);
      v45 = objc_msgSend(v44, "mainBundle");
      v46 = String._bridgeToObjectiveC()();
      v47 = objc_msgSend(v45, "localizedStringForKey:value:table:", v46, 0, 0);

      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      v50 = v49;

      UIListContentConfiguration.text.setter(v48, v50);
      v51 = *(void **)(v89 + 56);
      if (v51)
      {
        v52 = objc_msgSend(v51, "filterTypeSelections");
        v53 = sub_1000163BC(0, &qword_1005D6360, ICFilterTypeSelection_ptr);
        v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v52, v53);

        if ((unint64_t)v54 >> 62)
        {
          if (v54 < 0)
            v81 = v54;
          else
            v81 = v54 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v54);
          v55 = _CocoaArrayWrapper.endIndex.getter(v81);
          swift_bridgeObjectRelease(v54);
        }
        else
        {
          v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        v43 = &off_100451000;
        swift_bridgeObjectRelease(v54);
      }
      else
      {
        v55 = 0;
        v43 = &off_100451000;
      }
      v56 = sub_100012E18((uint64_t *)&unk_1005D5630);
      inited = swift_initStackObject(v56, v92);
      *(_OWORD *)(inited + 16) = *((_OWORD *)v43 + 194);
      *(_QWORD *)(inited + 56) = &type metadata for Int;
      *(_QWORD *)(inited + 64) = &protocol witness table for Int;
      *(_QWORD *)(inited + 32) = v55;
      v58 = objc_msgSend(v44, "mainBundle");
      v59 = String._bridgeToObjectiveC()();
      v60 = objc_msgSend(v58, "localizedStringForKey:value:table:", v59, 0, 0);

      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v63 = v62;

      swift_bridgeObjectRetain(v63);
      v39 = sub_10012CED4(inited, v61, v63);
      v41 = v64;
      swift_bridgeObjectRelease_n(v63, 2);
      swift_setDeallocating(inited);
      v65 = sub_100012E18(&qword_1005CFE68);
      swift_arrayDestroy(inited + 32, 1, v65);
      v42 = v90;
    }
    else
    {
      v29 = (void *)objc_opt_self(NSBundle);
      v30 = objc_msgSend(v29, "mainBundle");
      v31 = String._bridgeToObjectiveC()();
      v32 = objc_msgSend(v30, "localizedStringForKey:value:table:", v31, 0, 0);

      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;

      UIListContentConfiguration.text.setter(v33, v35);
      v36 = objc_msgSend(v29, "mainBundle");
      v37 = String._bridgeToObjectiveC()();
      v38 = objc_msgSend(v36, "localizedStringForKey:value:table:", v37, 0, 0);

      v39 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      v42 = v90;
      v43 = &off_100451000;
    }
    UIListContentConfiguration.secondaryText.setter(v39, v41);
    v91[3] = v42;
    v91[4] = &protocol witness table for UIListContentConfiguration;
    v66 = sub_10012D160(v91);
    v67 = v82;
    (*(void (**)(_QWORD *, char *, uint64_t))(v82 + 16))(v66, v15, v42);
    UICollectionViewCell.contentConfiguration.setter(v91);
    v68 = sub_100012E18(&qword_1005CFE70);
    v69 = type metadata accessor for UICellAccessory(0);
    v70 = swift_allocObject(v68, ((*(unsigned __int8 *)(*(_QWORD *)(v69 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v69 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v69 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v69 - 8) + 80) | 7);
    *(_OWORD *)(v70 + 16) = *((_OWORD *)v43 + 194);
    v71 = v15;
    v72 = a1;
    v73 = v83;
    v74 = v84;
    (*(void (**)(char *, _QWORD, uint64_t))(v83 + 104))(v10, enum case for UICellAccessory.DisplayedState.always(_:), v84);
    v75 = type metadata accessor for UICellAccessory.LayoutDimension(0);
    v76 = v86;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v75 - 8) + 56))(v86, 1, 1, v75);
    v77 = v85;
    UICellAccessory.DisclosureIndicatorOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v76, 0);
    static UICellAccessory.disclosureIndicator(displayed:options:)(v10, v77);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v77, v88);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v10, v74);
    UICollectionViewListCell.accessories.setter(v70);
    v78 = UIAccessibilityTraitButton;
    v79 = (unint64_t)objc_msgSend(v72, "accessibilityTraits");
    if ((v78 & ~v79) != 0)
      v80 = v78;
    else
      v80 = 0;
    objc_msgSend(v72, "setAccessibilityTraits:", v80 | v79, v82);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v71, v90);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10012C650(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char v12;
  char v13;

  if ((*a3 & 1) != 0)
  {
    v13 = 1;
    v7 = sub_1000163BC(0, &qword_1005CFE50, UICollectionViewListCell_ptr);
    v8 = &v13;
    v9 = a5;
  }
  else
  {
    v12 = 0;
    v7 = type metadata accessor for SmartFolderComposerTextFieldCell();
    v8 = &v12;
    v9 = a4;
  }
  return UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(v9, a2, v8, v7, &type metadata for FolderComposerDataSource.Item);
}

uint64_t sub_10012C6F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return v0;
}

uint64_t sub_10012C73C()
{
  uint64_t v0;

  sub_10012C6F0();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for FolderComposerDataSource()
{
  return objc_opt_self(_TtC11MobileNotes24FolderComposerDataSource);
}

_BYTE *initializeBufferWithCopyOfBuffer for FolderComposerDataSource.Section(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10012C790(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10012C79C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for FolderComposerDataSource.Item()
{
  return &type metadata for FolderComposerDataSource.Item;
}

uint64_t getEnumTagSinglePayload for TableEntity.SortType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s11MobileNotes24FolderComposerDataSourceC7SectionOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10012C894 + 4 * byte_100453C25[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012C8C8 + 4 * asc_100453C20[v4]))();
}

uint64_t sub_10012C8C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012C8D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012C8D8);
  return result;
}

uint64_t sub_10012C8E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012C8ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10012C8F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012C8F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FolderComposerDataSource.Section()
{
  return &type metadata for FolderComposerDataSource.Section;
}

uint64_t sub_10012C914()
{
  return sub_10012C9A4(&qword_1005CFDF8, &qword_1005CFE00);
}

unint64_t sub_10012C93C()
{
  unint64_t result;

  result = qword_1005CFE08;
  if (!qword_1005CFE08)
  {
    result = swift_getWitnessTable(&unk_100453D48, &type metadata for FolderComposerDataSource.Section);
    atomic_store(result, (unint64_t *)&qword_1005CFE08);
  }
  return result;
}

uint64_t sub_10012C980()
{
  return sub_10012C9A4(&qword_1005CFE10, &qword_1005CFE18);
}

uint64_t sub_10012C9A4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001537C(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10012C9E8()
{
  unint64_t result;

  result = qword_1005CFE20;
  if (!qword_1005CFE20)
  {
    result = swift_getWitnessTable(&unk_100453E20, &type metadata for FolderComposerDataSource.Item);
    atomic_store(result, (unint64_t *)&qword_1005CFE20);
  }
  return result;
}

id sub_10012CA2C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  NSString v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v19;

  v5 = v4;
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v10 = a3[3];
  if (v10)
  {
    v11 = sub_10012D19C(a3, a3[3]);
    v12 = *(_QWORD *)(v10 - 8);
    __chkstk_darwin(v11);
    v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v12 + 16))(v14);
    v15 = _bridgeAnythingToObjectiveC<A>(_:)(v14, v10);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v10);
    sub_1000153C0(a3);
  }
  else
  {
    v15 = 0;
  }
  v16 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v5)), "initWithFormat:locale:arguments:", v9, v15, a4);

  swift_unknownObjectRelease(v15, v17);
  return v16;
}

uint64_t sub_10012CB4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  NSString v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v18;
  char v19;
  char v20;

  v1 = v0;
  v2 = sub_100012E18(&qword_1005CFE28);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 72) != 1 || !*(_QWORD *)(v0 + 48))
  {
    v6 = sub_10012B630();
    v7 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(v0 + 40) = v6;
    *(_QWORD *)(v0 + 48) = v8;
    swift_bridgeObjectRelease(v7);
    v9 = sub_10012B48C();
    if (v9)
    {
      v10 = (void *)v9;
      v11 = *(_QWORD *)(v1 + 48);
      swift_bridgeObjectRetain(v11);
      v12 = sub_100376928();
      if (v11)
      {
        v13 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v11);
      }
      else
      {
        v13 = 0;
      }
      objc_msgSend(v12, "setText:", v13);

    }
  }
  v14 = sub_10012CCF8();
  v15 = sub_10012CD3C();
  NSDiffableDataSourceSnapshot.init()(&type metadata for FolderComposerDataSource.Section, &type metadata for FolderComposerDataSource.Item, v14, v15);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100555508);
  v20 = 0;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_100555530, &v20, v2);
  v19 = 1;
  NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(&off_100555558, &v19, v2);
  v16 = sub_10012B880();
  dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)(v5, 0, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_10012CCF8()
{
  unint64_t result;

  result = qword_1005CFE30;
  if (!qword_1005CFE30)
  {
    result = swift_getWitnessTable(&unk_100453D08, &type metadata for FolderComposerDataSource.Section);
    atomic_store(result, (unint64_t *)&qword_1005CFE30);
  }
  return result;
}

unint64_t sub_10012CD3C()
{
  unint64_t result;

  result = qword_1005CFE38;
  if (!qword_1005CFE38)
  {
    result = swift_getWitnessTable(&unk_100453DE0, &type metadata for FolderComposerDataSource.Item);
    atomic_store(result, (unint64_t *)&qword_1005CFE38);
  }
  return result;
}

uint64_t sub_10012CD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10012BC28(a1, a2, a3, v3);
}

void sub_10012CD88(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_10012BE58(a1, a2, a3, v3);
}

uint64_t sub_10012CD90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_100012E18(&qword_1005CFE48);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_100012E18(&qword_1005CFE40);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10012CE4C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(sub_100012E18(&qword_1005CFE48) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012E18(&qword_1005CFE40) - 8) + 80);
  return sub_10012C650(a1, a2, a3, v3 + v8, v3 + ((v8 + v9 + v10) & ~v10));
}

char *sub_10012CED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;

  v4 = type metadata accessor for __VaListBuilder(0);
  v5 = (_QWORD *)swift_allocObject(v4, 48, 7);
  v5[2] = 8;
  v5[3] = 0;
  v6 = v5 + 3;
  v5[4] = 0;
  v5[5] = 0;
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_25:
    v25 = __VaListBuilder.va_list()();
    sub_1000163BC(0, (unint64_t *)&qword_1005CFE78, NSString_ptr);
    v32 = type metadata accessor for Locale(0);
    sub_10012D160(v31);
    swift_bridgeObjectRetain(a3);
    static Locale.current.getter(v26);
    v27 = sub_10012CA2C(a2, a3, v31, v25);
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    swift_release(v5);

    return (char *)v28;
  }
  v8 = 0;
  v9 = a1 + 32;
  while (1)
  {
    sub_10012D11C(v9 + 40 * v8, (uint64_t)v31);
    v10 = v32;
    v11 = v33;
    sub_10012D19C(v31, v32);
    result = (char *)dispatch thunk of CVarArg._cVarArgEncoding.getter(v10, v11);
    v13 = *v6;
    v14 = *((_QWORD *)result + 2);
    v15 = __OFADD__(*v6, v14);
    v16 = *v6 + v14;
    if (v15)
      break;
    v17 = result;
    v18 = v5[4];
    if (v18 >= v16)
      goto LABEL_18;
    if (v18 + 0x4000000000000000 < 0)
      goto LABEL_28;
    v19 = (char *)v5[5];
    if (2 * v18 > v16)
      v16 = 2 * v18;
    v5[4] = v16;
    if ((unint64_t)(v16 - 0x1000000000000000) >> 61 != 7)
      goto LABEL_29;
    result = (char *)swift_slowAlloc(8 * v16, 7);
    v5[5] = result;
    if (v19)
    {
      if (result != v19 || result >= &v19[8 * v13])
        memmove(result, v19, 8 * v13);
      __VaListBuilder.deallocStorage(wordCount:storage:)(v18, v19);
LABEL_18:
      result = (char *)v5[5];
    }
    if (!result)
      goto LABEL_30;
    v21 = *((_QWORD *)v17 + 2);
    if (v21)
    {
      v22 = (uint64_t *)(v17 + 32);
      v23 = *v6;
      while (1)
      {
        v24 = *v22++;
        *(_QWORD *)&result[8 * v23] = v24;
        v23 = *v6 + 1;
        if (__OFADD__(*v6, 1))
          break;
        *v6 = v23;
        if (!--v21)
          goto LABEL_3;
      }
      __break(1u);
      break;
    }
LABEL_3:
    ++v8;
    swift_bridgeObjectRelease(v17);
    sub_1000153C0(v31);
    if (v8 == v7)
      goto LABEL_25;
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10012D11C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_QWORD *sub_10012D160(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

_QWORD *sub_10012D19C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void sub_10012D1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10012BDA4(a1, a2, v2);
}

uint64_t sub_10012D1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18((uint64_t *)&unk_1005D6350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012D210(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18((uint64_t *)&unk_1005D6350);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10012D270()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  unsigned __int8 v14;
  double v15;
  id v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  Class isa;
  id v28;
  unint64_t v29;
  id v30;
  id v31;
  NSString v32;
  id v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;

  v1 = v0;
  v2 = sub_100012E18(&qword_1005CFF48);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)&v37 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)&v37 - v9;
  v11 = sub_1000183D4();
  v12 = objc_msgSend((id)objc_opt_self(UIFont), "ic_preferredFontForStyle:symbolicTraits:", UIFontTextStyleTitle2, 2);
  objc_msgSend(v11, "setFont:", v12);

  v13 = (void *)objc_opt_self(UIDevice);
  LODWORD(v12) = objc_msgSend(v13, "ic_isVision");
  v14 = objc_msgSend(v13, "ic_isVision");
  v15 = 20.0;
  if ((_DWORD)v12)
  {
    if ((v14 & 1) == 0)
    {
      if ((objc_msgSend(v1, "ic_hasCompactWidth") & 1) == 0
        || (v15 = 22.0, (objc_msgSend(v1, "ic_hasCompactHeight") & 1) == 0))
      {
        v15 = 30.0;
      }
    }
    v16 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:weight:scale:", 6, 1, v15);
    v17 = sub_100006FF8();
    UIButton.configuration.getter();
    v18 = type metadata accessor for UIButton.Configuration(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v10, 1, v18))
    {
      sub_10012DB8C((uint64_t)v10, (uint64_t)v8);
      UIButton.configuration.setter(v8);

      sub_10012DBD4((uint64_t)v10);
    }
    else
    {
      v30 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
      UIButton.Configuration.baseForegroundColor.setter(v30);
      UIButton.configuration.setter(v10);

    }
    v29 = 0xE500000000000000;
  }
  else
  {
    if ((v14 & 1) == 0)
    {
      if (!objc_msgSend(v1, "ic_hasCompactWidth")
        || (v15 = 22.0, (objc_msgSend(v1, "ic_hasCompactHeight") & 1) == 0))
      {
        v15 = 30.0;
      }
    }
    v19 = (void *)objc_opt_self(UIImageSymbolConfiguration);
    v20 = objc_msgSend(v19, "configurationWithPointSize:weight:scale:", 4, 2, v15);
    v21 = sub_100012E18(&qword_1005CF6F0);
    v22 = swift_allocObject(v21, 48, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100451BF0;
    v23 = (void *)objc_opt_self(UIColor);
    v24 = v20;
    *(_QWORD *)(v22 + 32) = objc_msgSend(v23, "secondaryLabelColor");
    v25 = objc_msgSend(v23, "tertiarySystemFillColor");
    *(_QWORD *)(v22 + 40) = v25;
    v38 = v22;
    specialized Array._endMutation()(v25);
    v26 = v38;
    sub_1000163BC(0, &qword_1005CFF50, UIColor_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    v28 = objc_msgSend(v19, "configurationWithPaletteColors:", isa);

    v16 = objc_msgSend(v24, "configurationByApplyingConfiguration:", v28);
    v29 = 0x8000000100479620;
  }
  v31 = v16;
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  v33 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v32, v31);

  v34 = sub_100006FF8();
  UIButton.configuration.getter();
  v35 = type metadata accessor for UIButton.Configuration(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 48))(v5, 1, v35))
  {
    sub_10012DB8C((uint64_t)v5, (uint64_t)v8);
    UIButton.configuration.setter(v8);

    sub_10012DBD4((uint64_t)v5);
  }
  else
  {
    v36 = v33;
    UIButton.Configuration.image.setter(v33);
    UIButton.configuration.setter(v5);

  }
}

void sub_10012D740(void *a1)
{
  _BYTE *v1;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_horizontalMargin] = 0x4030000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_verticalMargin] = 0x4024000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_closeButtonTopMargin] = 0x4018000000000000;
  v1[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_isCloseButtonHidden] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___label] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView____lazy_storage___closeButton] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001004796E0, "MobileNotes/ActivityStreamHeaderView.swift", 42, 2, 87, 0);
  __break(1u);
}

id sub_10012D80C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  NSString v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  _QWORD aBlock[5];
  uint64_t v27;

  v2 = type metadata accessor for UIButton.Configuration(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)aBlock - v7;
  if (objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision"))
    static UIButton.Configuration.bordered()();
  else
    static UIButton.Configuration.plain()();
  v9 = (void *)objc_opt_self(UIAction);
  v10 = swift_allocObject(&unk_1005587E8, 24, 7);
  *(_QWORD *)(v10 + 16) = a1;
  aBlock[4] = sub_10012DC38;
  v27 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002489AC;
  aBlock[3] = &unk_100558800;
  v11 = _Block_copy(aBlock);
  v12 = v27;
  v13 = a1;
  swift_release(v12);
  v14 = objc_msgSend(v9, "ic_actionWithImage:handler:", 0, v11);
  _Block_release(v11);
  sub_1000163BC(0, &qword_1005CFF58, UIButton_ptr);
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v15 = v14;
  v16 = (void *)UIButton.init(configuration:primaryAction:)(v6, v14);
  objc_msgSend(v16, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v17 = (void *)objc_opt_self(NSBundle);
  v18 = v16;
  v19 = objc_msgSend(v17, "mainBundle");
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v19, "localizedStringForKey:value:table:", v20, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v23 = v22;

  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v23);
  objc_msgSend(v18, "setAccessibilityLabel:", v24);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  return v18;
}

id ICCloudSyncingObject.MoveAction.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10012DB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005CFF48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012DBD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18(&qword_1005CFF48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10012DC14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10012DC38()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC11MobileNotes24ActivityStreamHeaderView_coordinator), "hideActivityStreamWithCompletion:", 0);
}

uint64_t sub_10012DC58()
{
  return 6;
}

objc_class *sub_10012DC60()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  Swift::OpaquePointer preferredElementSize;
  id v7;
  Swift::String v8;
  Class isa;
  Swift::OpaquePointer v10;
  id v11;
  Swift::String v12;
  UIMenu v13;
  void *v14;
  id v15;
  UIImage_optional v17;
  UIImage_optional v18;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize._rawValue = (void *)swift_allocObject(v5, 104, 7);
    *((_OWORD *)preferredElementSize._rawValue + 1) = xmmword_100453EA0;
    *((_QWORD *)preferredElementSize._rawValue + 4) = sub_10012E384();
    *((_QWORD *)preferredElementSize._rawValue + 5) = sub_10012E598();
    *((_QWORD *)preferredElementSize._rawValue + 6) = sub_10012E7C0();
    *((_QWORD *)preferredElementSize._rawValue + 7) = sub_10012E9D8();
    *((_QWORD *)preferredElementSize._rawValue + 8) = sub_10012EBF4();
    *((_QWORD *)preferredElementSize._rawValue + 9) = sub_10012EE08();
    *((_QWORD *)preferredElementSize._rawValue + 10) = sub_10012F024();
    *((_QWORD *)preferredElementSize._rawValue + 11) = sub_10012F23C();
    v7 = sub_10012F45C();
    *((_QWORD *)preferredElementSize._rawValue + 12) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v17.value.super.isa = 0;
    v17.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v17, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize._rawValue, preferredElementSize).super.super.isa;
    v10._rawValue = (void *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)v10._rawValue + 1) = xmmword_100451BF0;
    v11 = sub_10012E1A4();
    *((_QWORD *)v10._rawValue + 4) = v11;
    *((_QWORD *)v10._rawValue + 5) = isa;
    specialized Array._endMutation()(v11);
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v18.value.super.isa = 0;
    v18.is_nil = 0;
    v13.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v18, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)v10._rawValue, v10).super.super.isa;
    v14 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v13;
    v3 = v13.super.super.isa;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_10012DE04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BOOL8 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BOOL8 v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _BOOL8 v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  _BOOL8 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _BOOL8 v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  _BOOL8 v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _BOOL8 v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  _BOOL8 v49;
  id v50;

  v1 = (void *)sub_10012E1A4();
  v2 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  v5 = 1;
  if (v3)
  {
    v4 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    if (swift_dynamicCastObjCClass(v3, v4))
      v5 = 0;
  }
  objc_msgSend(v1, "setState:", v5);

  v6 = sub_10012E384();
  v7 = *(_QWORD *)(v0 + v2);
  v10 = 0;
  if (v7)
  {
    v8 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      if (objc_msgSend(v9, "selectionType") == (id)1)
        v10 = 1;
    }
  }
  objc_msgSend(v6, "setState:", v10);

  v11 = sub_10012E598();
  v12 = *(_QWORD *)(v0 + v2);
  v15 = 0;
  if (v12)
  {
    v13 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      if (objc_msgSend(v14, "selectionType") == (id)2)
        v15 = 1;
    }
  }
  objc_msgSend(v11, "setState:", v15);

  v16 = sub_10012E7C0();
  v17 = *(_QWORD *)(v0 + v2);
  v20 = 0;
  if (v17)
  {
    v18 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v19 = (void *)swift_dynamicCastObjCClass(v17, v18);
    if (v19)
    {
      if (objc_msgSend(v19, "selectionType") == (id)3)
        v20 = 1;
    }
  }
  objc_msgSend(v16, "setState:", v20);

  v21 = sub_10012E9D8();
  v22 = *(_QWORD *)(v0 + v2);
  v25 = 0;
  if (v22)
  {
    v23 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v24 = (void *)swift_dynamicCastObjCClass(v22, v23);
    if (v24)
    {
      if (objc_msgSend(v24, "selectionType") == (id)4)
        v25 = 1;
    }
  }
  objc_msgSend(v21, "setState:", v25);

  v26 = sub_10012EBF4();
  v27 = *(_QWORD *)(v0 + v2);
  v30 = 0;
  if (v27)
  {
    v28 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v29 = (void *)swift_dynamicCastObjCClass(v27, v28);
    if (v29)
    {
      if (objc_msgSend(v29, "selectionType") == (id)5)
        v30 = 1;
    }
  }
  objc_msgSend(v26, "setState:", v30);

  v31 = sub_10012EE08();
  v32 = *(_QWORD *)(v0 + v2);
  v35 = 0;
  if (v32)
  {
    v33 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v34 = (void *)swift_dynamicCastObjCClass(v32, v33);
    if (v34)
    {
      if (objc_msgSend(v34, "selectionType") == (id)6)
        v35 = 1;
    }
  }
  objc_msgSend(v31, "setState:", v35);

  v36 = sub_10012F024();
  v37 = *(_QWORD *)(v0 + v2);
  v40 = 0;
  if (v37)
  {
    v38 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v39 = (void *)swift_dynamicCastObjCClass(v37, v38);
    if (v39)
    {
      if (objc_msgSend(v39, "selectionType") == (id)7)
        v40 = 1;
    }
  }
  objc_msgSend(v36, "setState:", v40);

  v41 = sub_10012F23C();
  v42 = *(_QWORD *)(v0 + v2);
  v45 = 0;
  if (v42)
  {
    v43 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v44 = (void *)swift_dynamicCastObjCClass(v42, v43);
    if (v44)
    {
      if (objc_msgSend(v44, "selectionType") == (id)8)
        v45 = 1;
    }
  }
  objc_msgSend(v41, "setState:", v45);

  v50 = sub_10012F45C();
  v46 = *(_QWORD *)(v0 + v2);
  v49 = 0;
  if (v46)
  {
    v47 = objc_opt_self(ICAttachmentsFilterTypeSelection);
    v48 = (void *)swift_dynamicCastObjCClass(v46, v47);
    if (v48)
    {
      if (objc_msgSend(v48, "selectionType") == (id)9)
        v49 = 1;
    }
  }
  objc_msgSend(v50, "setState:", v49);

}

id sub_10012E1A4()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionOff;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionOff];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionOff];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_1005589B8, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FAFC, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_10012E300(uint64_t a1, char *a2)
{
  void *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  sub_10012DE04();
  v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    v5 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v6 = swift_retain(v5);
    v4(v6);
    sub_100012C50((uint64_t)v4, v5);
  }
}

id sub_10012E384()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAny;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAny];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAny];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558990, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FAF4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012E4E0(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 1);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012E598()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionPhotoVideo;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionPhotoVideo];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionPhotoVideo];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558968, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FAEC, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012E708(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 2);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012E7C0()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionScan;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionScan];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionScan];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558940, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FAE4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012E920(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 3);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012E9D8()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDrawing;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDrawing];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDrawing];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558918, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FADC, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012EB3C(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 4);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012EBF4()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionMap;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionMap];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionMap];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_1005588F0, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FAD4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012ED50(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 5);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012EE08()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionWebsite;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionWebsite];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionWebsite];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_1005588C8, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FACC, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012EF6C(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 6);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012F024()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAudio;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAudio];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAudio];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_1005588A0, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FAC4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012F184(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 7);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012F23C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDocument;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDocument];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDocument];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558878, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FABC, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012F3A4(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 8);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012F45C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionNone;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionNone];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionNone];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558850, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_10012FAB4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_10012F5CC(uint64_t a1, char *a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t result;
  void (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentsFilterTypeSelection), "initWithSelectionType:", 9);
  v4 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = v3;
  v5 = v3;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_10012DE04();
  v7 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v7)
  {
    v8 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v9 = swift_retain(v8);
    v7(v9);
    return sub_100012C50((uint64_t)v7, v8);
  }
  return result;
}

id sub_10012F684(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_super v10;

  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menu] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAny] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionPhotoVideo] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionScan] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDrawing] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionMap] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionWebsite] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAudio] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDocument] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionNone] = 0;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for FolderComposerFilterCellAttachments();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id sub_10012F788(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAny] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionPhotoVideo] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionScan] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDrawing] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionMap] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionWebsite] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAudio] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDocument] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionNone] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellAttachments();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

void sub_10012F87C()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionOff));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAny));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionPhotoVideo));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionScan));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDrawing));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionMap));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionWebsite));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionAudio));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionDocument));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes35FolderComposerFilterCellAttachments____lazy_storage___menuActionNone));
}

id sub_10012F938()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellAttachments();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellAttachments()
{
  return objc_opt_self(_TtC11MobileNotes35FolderComposerFilterCellAttachments);
}

objc_class *sub_10012FA50()
{
  return sub_10012DC60();
}

void sub_10012FA70()
{
  sub_10012DE04();
}

uint64_t sub_10012FA90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012FAB4(uint64_t a1)
{
  uint64_t v1;

  return sub_10012F5CC(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012FABC(uint64_t a1)
{
  uint64_t v1;

  return sub_10012F3A4(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012FAC4(uint64_t a1)
{
  uint64_t v1;

  return sub_10012F184(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012FACC(uint64_t a1)
{
  uint64_t v1;

  return sub_10012EF6C(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012FAD4(uint64_t a1)
{
  uint64_t v1;

  return sub_10012ED50(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012FADC(uint64_t a1)
{
  uint64_t v1;

  return sub_10012EB3C(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012FAE4(uint64_t a1)
{
  uint64_t v1;

  return sub_10012E920(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012FAEC(uint64_t a1)
{
  uint64_t v1;

  return sub_10012E708(a1, *(char **)(v1 + 16));
}

uint64_t sub_10012FAF4(uint64_t a1)
{
  uint64_t v1;

  return sub_10012E4E0(a1, *(char **)(v1 + 16));
}

void sub_10012FAFC(uint64_t a1)
{
  uint64_t v1;

  sub_10012E300(a1, *(char **)(v1 + 16));
}

void *RemoveTagsFromNotesIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static RemoveTagsFromNotesIntent.persistentIdentifier;
}

unint64_t static RemoveTagsFromNotesIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_10012FB50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static RemoveTagsFromNotesIntent.title);
  sub_10012A0B0(v10, (uint64_t)static RemoveTagsFromNotesIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x80000001004798F0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t RemoveTagsFromNotesIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CE968 != -1)
    swift_once(&qword_1005CE968, sub_10012FB50);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static RemoveTagsFromNotesIntent.title);
}

uint64_t static RemoveTagsFromNotesIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CE968 != -1)
    swift_once(&qword_1005CE968, sub_10012FB50);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static RemoveTagsFromNotesIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static RemoveTagsFromNotesIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000018, 0x80000001004798D0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static RemoveTagsFromNotesIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005CFFE0);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005CFFE8);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100130160();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(22, 2, &type metadata for RemoveTagsFromNotesIntent, v6);
  v7._countAndFlagsBits = 0x742065766F6D6552;
  v7._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100453EF0, v8);
  v10 = sub_100012E18(&qword_1005CFFF8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._object = (void *)0xEB00000000206D6FLL;
  v11._countAndFlagsBits = 0x7266207367617420;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_100453F18, v12);
  v14 = sub_100012E18(&qword_1005D0000);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for RemoveTagsFromNotesIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for RemoveTagsFromNotesIntent, v6);
}

unint64_t sub_100130160()
{
  unint64_t result;

  result = qword_1005CFFF0;
  if (!qword_1005CFFF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RemoveTagsFromNotesIntent, &type metadata for RemoveTagsFromNotesIntent);
    atomic_store(result, (unint64_t *)&qword_1005CFFF0);
  }
  return result;
}

uint64_t SetChecklistItemsCheckedIntentv1.$changeOperation.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_1001301C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1001301EC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t SetChecklistItemsCheckedIntentv1.entities.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t SetChecklistItemsCheckedIntentv1.entities.setter(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t AddTagsToNotesIntent.tags.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t AddTagsToNotesIntent.tags.setter(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t (*SetChecklistItemsCheckedIntentv1.changeOperation.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t ChangeSettingIntent.loggingConfiguration.getter()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t ChangeSettingIntent.loggingConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  return AppDependency.wrappedValue.setter(v5);
}

uint64_t (*ChangeSettingIntent.loggingConfiguration.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AppDependency.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t ChangeSettingIntent.$loggingConfiguration.getter()
{
  return AppDependency.projectedValue.getter();
}

uint64_t RemoveTagsFromNotesIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[13] = a4;
  v5[14] = a5;
  v5[11] = a2;
  v5[12] = a3;
  v5[10] = a1;
  v6 = type metadata accessor for BulkModifyNoteTags(0);
  v5[15] = v6;
  v5[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100130454, 0, 0);
}

uint64_t sub_100130454()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = v0[16];
  v3 = v0[13];
  v2 = v0[14];
  v5 = v0[11];
  v4 = v0[12];
  AppDependency.wrappedValue.getter(v0 + 6);
  v6 = v0[6];
  swift_retain(v5);
  swift_retain(v4);
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter(v0 + 2);
  Logger.init(subsystem:category:)(v0[2], v0[3], v0[4], v0[5]);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  *(_BYTE *)v1 = 1;
  *(_QWORD *)(v1 + 8) = v6;
  IntentParameter.wrappedValue.getter(v0 + 7);
  v7 = v0[7];
  v0[17] = v7;
  IntentParameter.wrappedValue.getter(v0 + 8);
  v8 = v0[8];
  v0[18] = v8;
  v9 = (_QWORD *)swift_task_alloc(dword_1005DB4AC);
  v0[19] = v9;
  *v9 = v0;
  v9[1] = sub_100130584;
  return sub_10039799C(v7, v8);
}

uint64_t sub_100130584(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v4 = *v2;
  v6 = *(_QWORD *)(*v2 + 144);
  v5 = *(_QWORD *)(*v2 + 152);
  v7 = *(_QWORD *)(*v2 + 136);
  *(_QWORD *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  if (v1)
  {
    v8 = sub_1001306A4;
  }
  else
  {
    *(_QWORD *)(v4 + 168) = a1;
    v8 = sub_100130614;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100130614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 72) = v1;
  v3 = sub_100012E18(qword_1005D3AD0);
  v4 = sub_100130EAC();
  static IntentResult.result<A>(value:)(v0 + 72, v3, v4);
  sub_100130E70(v2);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001306A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 128);
  sub_100130E70(v1);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001306F0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *v1;
  v5 = v1[1];
  v7 = v1[2];
  v6 = v1[3];
  v8 = (_QWORD *)swift_task_alloc(dword_1005D000C);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100130768;
  return RemoveTagsFromNotesIntent.perform()(a1, v4, v5, v7, v6);
}

uint64_t sub_100130768()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1001307B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = _s11MobileNotes014RemoveTagsFromB6IntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

uint64_t SetChecklistItemsCheckedIntent.loggingConfiguration.getter()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t _s11MobileNotes014RemoveTagsFromB6IntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_BYTE *);
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64x2_t v34;
  int16x8_t v35;
  _BYTE *v36;
  unint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_BYTE *, uint64_t, uint64_t);
  uint64_t v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _BYTE v53[12];
  unsigned int v54;
  void (*v55)(_BYTE *);
  void (*v56)(_BYTE *, uint64_t, uint64_t);
  uint64_t v57;
  unsigned int v58;
  _BYTE *v59;
  void (*v60)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD v70[3];
  char v71;
  unsigned __int32 v72;

  v67 = type metadata accessor for InputConnectionBehavior(0);
  v63 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v66 = &v53[-((v0 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v1 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v2 = __chkstk_darwin(v1);
  v65 = &v53[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  v64 = &v53[-v4];
  v5 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v5);
  v7 = &v53[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = v8;
  __chkstk_darwin(v8);
  v12 = &v53[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = &v53[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = &v53[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  v61 = v19;
  __chkstk_darwin(v19);
  v59 = &v53[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v62 = sub_100012E18(&qword_1005CEE58);
  v22 = String.LocalizationValue.init(stringLiteral:)(0x7365746F4ELL, 0xE500000000000000);
  static Locale.current.getter(v22);
  v23 = *(void (**)(_BYTE *))(v9 + 104);
  v24 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v58 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v57 = v10;
  v23(v12);
  v56 = (void (*)(_BYTE *, uint64_t, uint64_t))v23;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Remove Tags from Notes intent", 49, 2);
  v25 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x8000000100476BE0);
  static Locale.current.getter(v25);
  ((void (*)(_BYTE *, uint64_t, uint64_t))v23)(v12, v24, v10);
  v26 = v7;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for notes", 31, 2);
  v60 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v60(v7, 0, 1, v19);
  v68 = 0;
  v27 = type metadata accessor for IntentDialog(0);
  v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v29 = v64;
  v28(v64, 1, 1, v27);
  v30 = v65;
  v28(v65, 1, 1, v27);
  v70[0] = sub_1001E8EEC();
  v70[1] = v31;
  v70[2] = v32;
  v71 = v33 & 1;
  v34 = (uint64x2_t)vdupq_n_s64(v33);
  v35 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v34, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v34, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v35.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v35), (int8x8_t)0x1000100010001);
  v72 = vmovn_s16(v35).u32[0];
  v54 = enum case for InputConnectionBehavior.default(_:);
  v55 = *(void (**)(_BYTE *))(v63 + 104);
  v36 = v66;
  v55(v66);
  v37 = sub_100127D40();
  v38 = v59;
  v63 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v59, v26, &v68, v29, v30, v36, v70, &type metadata for VisibleNotesQuery, v37);
  v62 = sub_100012E18(&qword_1005CEE68);
  v39 = String.LocalizationValue.init(stringLiteral:)(1936154964, 0xE400000000000000);
  static Locale.current.getter(v39);
  v40 = v58;
  v42 = v56;
  v41 = v57;
  v56(v12, v58, v57);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter title for Remove Tags from Notes intent", 49, 2);
  v43 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100476C30);
  static Locale.current.getter(v43);
  v42(v12, v40, v41);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for tags", 30, 2);
  v60(v26, 0, 1, v61);
  v70[0] = 0;
  v44 = v64;
  v28(v64, 1, 1, v27);
  v45 = v65;
  v28(v65, 1, 1, v27);
  v46 = v66;
  ((void (*)(_BYTE *, _QWORD, uint64_t))v55)(v66, v54, v67);
  v47 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v38, v26, v70, v44, v45, v46, v47);
  sub_100012E18(&qword_1005CEE50);
  v68 = 0xD000000000000021;
  v69 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v70, &v68, &type metadata for String, &protocol witness table for String);
  v48 = type metadata accessor for AppDependencyManager(0);
  v49 = static AppDependencyManager.shared.getter(v48);
  AppDependency.__allocating_init(key:manager:)(v70, v49);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v68 = 0xD000000000000024;
  v69 = 0x8000000100476B40;
  v50 = AnyHashable.init<A>(_:)(v70, &v68, &type metadata for String, &protocol witness table for String);
  v51 = static AppDependencyManager.shared.getter(v50);
  AppDependency.__allocating_init(key:manager:)(v70, v51);
  return v63;
}

uint64_t sub_100130E70(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BulkModifyNoteTags(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100130EAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D0010;
  if (!qword_1005D0010)
  {
    v1 = sub_10001537C(qword_1005D3AD0);
    sub_100019C6C((unint64_t *)&qword_1005D0A80, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D0010);
  }
  return result;
}

unint64_t sub_100130F2C()
{
  unint64_t result;

  result = qword_1005D0018;
  if (!qword_1005D0018)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RemoveTagsFromNotesIntent, &type metadata for RemoveTagsFromNotesIntent);
    atomic_store(result, (unint64_t *)&qword_1005D0018);
  }
  return result;
}

unint64_t sub_100130F74()
{
  unint64_t result;

  result = qword_1005D0020;
  if (!qword_1005D0020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for RemoveTagsFromNotesIntent, &type metadata for RemoveTagsFromNotesIntent);
    atomic_store(result, (unint64_t *)&qword_1005D0020);
  }
  return result;
}

uint64_t sub_100130FB8(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of RemoveTagsFromNotesIntent.perform()>>, 1)+ 8);
}

uint64_t sub_100130FDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static RemoveTagsFromNotesIntent.parameterSummary>>, 1);
}

uint64_t destroy for RemoveTagsFromNotesIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for RemoveTagsFromNotesIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for RemoveTagsFromNotesIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *assignWithTake for RemoveTagsFromNotesIntent(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RemoveTagsFromNotesIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RemoveTagsFromNotesIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RemoveTagsFromNotesIntent()
{
  return &type metadata for RemoveTagsFromNotesIntent;
}

uint64_t sub_1001311F0()
{
  return sub_100016638(&qword_1005D0030, &qword_1005D0038, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_10013121C()
{
  return sub_100016638(&qword_1005D0040, &qword_1005D0048, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100131248()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  if (v1)
  {
    v2 = objc_opt_self(ICTagSelection);
    v3 = swift_dynamicCastObjCClass(v1, v2);
    if (v3)
    {
      v4 = (void *)v3;
      v5 = v1;
      if (!objc_msgSend(v4, "mode") && (uint64_t)objc_msgSend(v4, "selectedTagCount") >= 1)
      {
        v6 = objc_msgSend(v4, "selectedTagCountString");
        v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

        goto LABEL_6;
      }

    }
  }
  v6 = (id)ICLocalizedStringForICFilterType(0);
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
LABEL_6:

  return v7;
}

objc_class *sub_100131330()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  UIMenuElementSize preferredElementSize;
  id v7;
  Swift::String v8;
  Class isa;
  UIMenuElementSize v10;
  objc_class *v11;
  id v12;
  Swift::String v13;
  Class v14;
  void *v15;
  id v16;
  Swift::OpaquePointer v18;
  Swift::OpaquePointer v19;
  UIImage_optional v20;
  UIImage_optional v21;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize = swift_allocObject(v5, 56, 7);
    *(_OWORD *)(preferredElementSize + 16) = xmmword_100454060;
    *(_QWORD *)(preferredElementSize + 32) = sub_100131860();
    *(_QWORD *)(preferredElementSize + 40) = sub_1001319C4();
    v7 = sub_100131B2C();
    *(_QWORD *)(preferredElementSize + 48) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v20.value.super.isa = 0;
    v20.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v20, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v18).super.super.isa;
    v10 = swift_allocObject(v5, 56, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100454060;
    *(_QWORD *)(v10 + 32) = sub_100131704();
    *(_QWORD *)(v10 + 40) = isa;
    v11 = isa;
    v12 = sub_100131C94();
    *(_QWORD *)(v10 + 48) = v12;
    specialized Array._endMutation()(v12);
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v21.value.super.isa = 0;
    v21.is_nil = 0;
    v14 = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v13, (Swift::String_optional)0, v21, 0, 0xFFFFFFFFFFFFFFFFLL, v10, v19).super.super.isa;

    v15 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v14;
    v3 = v14;

    v2 = 0;
  }
  v16 = v2;
  return v3;
}

void sub_1001314BC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _BOOL8 v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;

  v1 = (void *)sub_100131704();
  v2 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  v5 = 1;
  if (v3)
  {
    v4 = objc_opt_self(ICTagSelection);
    if (swift_dynamicCastObjCClass(v3, v4))
      v5 = 0;
  }
  objc_msgSend(v1, "setState:", v5);

  v6 = sub_100131860();
  v7 = *(_QWORD *)(v0 + v2);
  v10 = 0;
  if (v7)
  {
    v8 = objc_opt_self(ICTagSelection);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      if (objc_msgSend(v9, "mode") == (id)1)
        v10 = 1;
    }
  }
  objc_msgSend(v6, "setState:", v10);

  v11 = sub_1001319C4();
  v12 = *(_QWORD *)(v0 + v2);
  v15 = 0;
  if (v12)
  {
    v13 = objc_opt_self(ICTagSelection);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (v14)
    {
      if (!objc_msgSend(v14, "mode"))
      {
        v25 = *(_QWORD *)(v0 + v2);
        if (v25)
        {
          v26 = objc_opt_self(ICTagSelection);
          v27 = (void *)swift_dynamicCastObjCClass(v25, v26);
          if (v27)
          {
            if (objc_msgSend(v27, "tagOperator") == (id)2)
              v15 = 1;
          }
        }
      }
    }
  }
  objc_msgSend(v11, "setState:", v15);

  v16 = sub_100131B2C();
  v17 = *(_QWORD *)(v0 + v2);
  v20 = 0;
  if (v17)
  {
    v18 = objc_opt_self(ICTagSelection);
    v19 = (void *)swift_dynamicCastObjCClass(v17, v18);
    if (v19)
    {
      if (!objc_msgSend(v19, "mode"))
      {
        v28 = *(_QWORD *)(v0 + v2);
        if (v28)
        {
          v29 = objc_opt_self(ICTagSelection);
          v30 = (void *)swift_dynamicCastObjCClass(v28, v29);
          if (v30)
          {
            if (objc_msgSend(v30, "tagOperator") == (id)1)
              v20 = 1;
          }
        }
      }
    }
  }
  objc_msgSend(v16, "setState:", v20);

  v31 = sub_100131C94();
  v21 = *(_QWORD *)(v0 + v2);
  v24 = 0;
  if (v21)
  {
    v22 = objc_opt_self(ICTagSelection);
    v23 = (void *)swift_dynamicCastObjCClass(v21, v22);
    if (v23)
    {
      if (objc_msgSend(v23, "mode") == (id)2)
        v24 = 1;
    }
  }
  objc_msgSend(v31, "setState:", v24);

}

id sub_100131704()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionOff;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionOff];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionOff];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558BF8, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100132544, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_100131860()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnyTag;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnyTag];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnyTag];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558BD0, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100132514, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_1001319C4()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnySelectedTag;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnySelectedTag];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnySelectedTag];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558BA8, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1001324E4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_100131B2C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAllSelectedTags;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAllSelectedTags];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAllSelectedTags];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558B80, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1001324B4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_100131C94()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionNoTags;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionNoTags];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionNoTags];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_100558B58, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_100132484, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_100131DF8(uint64_t a1, char a2, uint64_t a3, char a4)
{
  char *v4;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  BOOL v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[4];

  v9 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
  v10 = *(void **)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  if (v10)
  {
    v11 = objc_opt_self(ICTagSelection);
    v12 = swift_dynamicCastObjCClass(v10, v11);
    if (v12)
    {
      v13 = (void *)v12;
      v14 = v10;
      v15 = objc_msgSend(v13, "mode");
      v17 = (a2 & 1) == 0 && a1 == 0;
      if (!v15 && !v17)
      {
        v18 = objc_msgSend(v13, "copy");
        _bridgeAnyObjectToAny(_:)(v48, v18);
        swift_unknownObjectRelease(v18, v19);
        v20 = sub_1000163BC(0, &qword_1005D67D0, ICTagSelection_ptr);
        v21 = swift_dynamicCast(&v47, v48, (char *)&type metadata for Any + 8, v20, 6);
        v22 = v47;
        if (!v21)
          v22 = 0;
        v23 = *(void **)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags_previousCustomTagSelection];
        *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags_previousCustomTagSelection] = v22;

        goto LABEL_20;
      }

    }
    v24 = *(_QWORD *)&v4[v9];
    if (v24)
    {
      v25 = objc_opt_self(ICTagSelection);
      v26 = (void *)swift_dynamicCastObjCClass(v24, v25);
      if (v26)
      {
        if (!objc_msgSend(v26, "mode"))
        {
          v45 = *(_QWORD *)&v4[v9];
          if (v45)
          {
            v46 = objc_opt_self(ICTagSelection);
            if (swift_dynamicCastObjCClass(v45, v46))
              goto LABEL_20;
          }
        }
      }
    }
  }
  v27 = *(void **)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags_previousCustomTagSelection];
  if (v27)
  {
    v28 = *(void **)&v4[v9];
    *(_QWORD *)&v4[v9] = v27;
    v29 = v27;

    objc_msgSend(v4, "setNeedsUpdateConfiguration");
  }
LABEL_20:
  v30 = *(void **)&v4[v9];
  if (v30)
  {
    v31 = objc_opt_self(ICTagSelection);
    v32 = swift_dynamicCastObjCClass(v30, v31);
    if (v32)
    {
      if ((a2 & 1) == 0)
      {
        v33 = (void *)v32;
        v34 = v30;
        objc_msgSend(v33, "setMode:", a1);
        if ((a4 & 1) == 0)
          objc_msgSend(v33, "setTagOperator:", a3);
        objc_msgSend(v4, "setNeedsUpdateConfiguration");

        goto LABEL_33;
      }
LABEL_32:
      v41 = *(void **)&v4[v9];
      *(_QWORD *)&v4[v9] = 0;

      objc_msgSend(v4, "setNeedsUpdateConfiguration");
      goto LABEL_33;
    }
  }
  if ((a2 & 1) != 0)
    goto LABEL_32;
  v35 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (!v35)
    goto LABEL_32;
  v36 = v35;
  v37 = objc_msgSend(v35, "managedObjectContext");

  if (!v37)
    goto LABEL_32;
  if ((a4 & 1) != 0)
    a3 = 0;
  v38 = objc_msgSend(objc_allocWithZone((Class)ICTagSelection), "initWithManagedObjectContext:mode:tagOperator:", v37, a1, a3);
  v39 = *(void **)&v4[v9];
  *(_QWORD *)&v4[v9] = v38;
  v40 = v38;

  objc_msgSend(v4, "setNeedsUpdateConfiguration");
LABEL_33:
  sub_1001314BC();
  v42 = *(void (**)(uint64_t))&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v42)
  {
    v43 = *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v44 = swift_retain(v43);
    v42(v44);
    sub_100012C50((uint64_t)v42, v43);
  }
}

id sub_100132134(double a1, double a2, double a3, double a4)
{
  char *v4;
  objc_super v10;

  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menu] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags_previousCustomTagSelection] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnyTag] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnySelectedTag] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAllSelectedTags] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionNoTags] = 0;
  v10.receiver = v4;
  v10.super_class = (Class)type metadata accessor for FolderComposerFilterCellTags();
  return objc_msgSendSuper2(&v10, "initWithFrame:", a1, a2, a3, a4);
}

id sub_100132208(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags_previousCustomTagSelection] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnyTag] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnySelectedTag] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAllSelectedTags] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionNoTags] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellTags();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

void sub_1001322CC()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnyTag));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAnySelectedTag));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionAllSelectedTags));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterCellTags____lazy_storage___menuActionNoTags));
}

id sub_100132348()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellTags();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellTags()
{
  return objc_opt_self(_TtC11MobileNotes28FolderComposerFilterCellTags);
}

objc_class *sub_100132420()
{
  return sub_100131330();
}

void sub_100132440()
{
  sub_1001314BC();
}

uint64_t sub_100132460()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100132484()
{
  return sub_100131DF8(2, 0, 0, 1);
}

uint64_t sub_1001324B4()
{
  return sub_100131DF8(0, 0, 1, 0);
}

uint64_t sub_1001324E4()
{
  return sub_100131DF8(0, 0, 2, 0);
}

uint64_t sub_100132514()
{
  return sub_100131DF8(1, 0, 0, 1);
}

void sub_100132544()
{
  sub_100131DF8(0, 1, 0, 1);
}

uint64_t sub_100132584()
{
  uint64_t result;

  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  result = NSPredicate.init(format:_:)(0xD00000000000001FLL, 0x8000000100479AE0, _swiftEmptyArrayStorage);
  qword_1005D00B0 = result;
  return result;
}

uint64_t VisibleChecklistItemsQuery.loggingConfiguration.getter()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t VisibleChecklistItemsQuery.loggingConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  return AppDependency.wrappedValue.setter(v5);
}

void (*VisibleChecklistItemsQuery.loggingConfiguration.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AppDependency.wrappedValue.modify();
  return sub_10012A894;
}

uint64_t VisibleChecklistItemsQuery.$loggingConfiguration.getter()
{
  return AppDependency.projectedValue.getter();
}

uint64_t VisibleTagsQuery.entities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a3;
  return swift_task_switch(sub_1001326D0, 0, 0);
}

uint64_t sub_1001326D0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  AppDependency.wrappedValue.getter(v0 + 2);
  v1 = v0[2];
  v0[5] = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D00C0 + dword_1005D00C0);
  v2 = (_QWORD *)swift_task_alloc(unk_1005D00C4);
  v0[6] = v2;
  *v2 = v0;
  v2[1] = sub_100132748;
  return v4(v0[3], v1);
}

uint64_t sub_100132748(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(void **)(*v2 + 40);
  v4 = *(_QWORD *)(*v2 + 48);
  v6 = *v2;
  swift_task_dealloc(v4);

  if (!v1)
    v7 = a1;
  return (*(uint64_t (**)(uint64_t))(v6 + 8))(v7);
}

uint64_t sub_1001327A8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)(v3 + 188) = a3;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(type metadata accessor for NoteEntity(0) - 8);
  *(_QWORD *)(v3 + 56) = v6;
  *(_QWORD *)(v3 + 64) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NoteID(0);
  *(_QWORD *)(v3 + 72) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 80) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 88) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 96) = swift_task_alloc(v9);
  return swift_task_switch(sub_100132868, 0, 0);
}

uint64_t sub_100132868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 104) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 80);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 184) = v5;
    *(_QWORD *)(v0 + 112) = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    *(_QWORD *)(v0 + 128) = 0;
    *(_QWORD *)(v0 + 136) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 120) = v6;
    v7 = *(_QWORD *)(v0 + 96);
    v8 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    v9 = swift_bridgeObjectRetain(v1);
    v6(v7, v8, v4, v9);
    v15 = (char *)&dword_1005D7890 + dword_1005D7890;
    v10 = (_QWORD *)swift_task_alloc(unk_1005D7894);
    *(_QWORD *)(v0 + 144) = v10;
    *v10 = v0;
    v10[1] = sub_100132988;
    return ((uint64_t (*)(_QWORD, _QWORD))v15)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 88);
    v13 = *(_QWORD *)(v0 + 64);
    v14 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100132988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001329E4, 0, 0);
}

uint64_t sub_1001329E4(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  uint64_t v56[2];

  v2 = *(void **)(v1 + 152);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v1 + 24), "managedObjectContextForObjectID:", *(_QWORD *)(v1 + 152));
    *(_QWORD *)(v1 + 160) = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(void **)(v1 + 24);
      v6 = dword_1005D7884;
      v7 = v2;
      v8 = v4;
      v9 = v5;
      v10 = (_QWORD *)swift_task_alloc(v6);
      *(_QWORD *)(v1 + 168) = v10;
      *v10 = v1;
      v10[1] = sub_100132E40;
      return NoteEntity.init(for:in:includeContents:noteContext:)(*(_QWORD *)(v1 + 64), (uint64_t)v7, (uint64_t)v8, *(_BYTE *)(v1 + 188), (uint64_t)v9);
    }
    else
    {
      v35 = *(_QWORD *)(v1 + 136);
      v36 = *(_QWORD *)(v1 + 96);
      v37 = *(_QWORD *)(v1 + 72);
      v38 = *(_QWORD *)(v1 + 80);
      v39 = swift_allocObject(&unk_100558D10, 24, 7);
      *(_QWORD *)(v39 + 16) = 0;
      v40 = v2;
      sub_10014F724(v39, 225, v40);

      v41 = swift_release(v39);
      swift_willThrow(v41);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
      swift_bridgeObjectRelease(v35);
      v42 = *(_QWORD *)(v1 + 88);
      v43 = *(_QWORD *)(v1 + 96);
      v44 = *(_QWORD *)(v1 + 64);
      v45 = *(_QWORD *)(v1 + 48);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      swift_task_dealloc(v43);
      swift_task_dealloc(v42);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else
  {
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 120);
    v13 = *(_QWORD *)(v1 + 88);
    v14 = *(_QWORD *)(v1 + 96);
    v15 = *(_QWORD *)(v1 + 72);
    static Logger.link.getter(a1);
    v16 = v12(v13, v14, v15);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.error.getter(v17, v18);
    v20 = os_log_type_enabled(v17, v19);
    v21 = *(_QWORD *)(v1 + 88);
    v22 = *(_QWORD *)(v1 + 96);
    v23 = *(_QWORD *)(v1 + 72);
    v24 = *(_QWORD *)(v1 + 80);
    v25 = *(_QWORD *)(v1 + 40);
    v26 = *(_QWORD *)(v1 + 48);
    v54 = *(_QWORD *)(v1 + 32);
    if (v20)
    {
      v53 = *(_QWORD *)(v1 + 96);
      v27 = swift_slowAlloc(22, -1);
      v52 = v26;
      v28 = swift_slowAlloc(64, -1);
      v56[0] = v28;
      *(_DWORD *)v27 = 136315394;
      *(_QWORD *)(v27 + 4) = sub_1003A4190(0x69746E4565746F4ELL, 0xEA00000000007974, v56);
      *(_WORD *)(v27 + 12) = 2080;
      v29 = sub_100019C6C(&qword_1005D0278, (uint64_t (*)(uint64_t))&type metadata accessor for NoteID, (uint64_t)&protocol conformance descriptor for NoteID);
      v30 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v23, v29);
      v32 = v31;
      *(_QWORD *)(v27 + 14) = sub_1003A4190(v30, v31, v56);
      swift_bridgeObjectRelease(v32);
      v33 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v33(v21, v23);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v52, v54);
      v34 = v53;
    }
    else
    {

      v33 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
      v33(v21, v23);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v54);
      v34 = v22;
    }
    v33(v34, v23);
    v46 = *(_QWORD *)(v1 + 128) + 1;
    if (v46 == *(_QWORD *)(v1 + 104))
    {
      v47 = *(_QWORD *)(v1 + 136);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      v48 = *(_QWORD *)(v1 + 88);
      v49 = *(_QWORD *)(v1 + 64);
      v50 = *(_QWORD *)(v1 + 48);
      swift_task_dealloc(*(_QWORD *)(v1 + 96));
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v47);
    }
    else
    {
      *(_QWORD *)(v1 + 128) = v46;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v1 + 120))(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 16)+ ((*(unsigned __int8 *)(v1 + 184) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 184))+ *(_QWORD *)(v1 + 112) * v46, *(_QWORD *)(v1 + 72));
      v55 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
      v51 = (_QWORD *)swift_task_alloc(unk_1005D7894);
      *(_QWORD *)(v1 + 144) = v51;
      *v51 = v1;
      v51[1] = sub_100132988;
      return v55(*(_QWORD *)(v1 + 96), *(_QWORD *)(v1 + 24));
    }
  }
}

uint64_t sub_100132E40()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 136));
    v4 = sub_100133078;
  }
  else
  {
    v4 = sub_100132EAC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100132EAC()
{
  uint64_t v0;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  char *v18;

  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v0 + 136);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v2 = sub_10016A824(0, *(_QWORD *)(v2 + 16) + 1, 1, *(_QWORD *)(v0 + 136));
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10016A824(v3 > 1, v4 + 1, 1, v2);
  v6 = *(void **)(v0 + 152);
  v5 = *(void **)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 72);
  v9 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  sub_10013B170(v10, v2+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v4, type metadata accessor for NoteEntity);

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v12 = *(_QWORD *)(v0 + 128) + 1;
  if (v12 == *(_QWORD *)(v0 + 104))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    v13 = *(_QWORD *)(v0 + 88);
    v14 = *(_QWORD *)(v0 + 64);
    v15 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 96));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v2);
  }
  else
  {
    *(_QWORD *)(v0 + 128) = v12;
    *(_QWORD *)(v0 + 136) = v2;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 120))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 184) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 184))+ *(_QWORD *)(v0 + 112) * v12, *(_QWORD *)(v0 + 72));
    v18 = (char *)&dword_1005D7890 + dword_1005D7890;
    v17 = (_QWORD *)swift_task_alloc(unk_1005D7894);
    *(_QWORD *)(v0 + 144) = v17;
    *v17 = v0;
    v17[1] = sub_100132988;
    return ((uint64_t (*)(_QWORD, _QWORD))v18)(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 24));
  }
}

uint64_t sub_100133078()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10013310C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  *(_BYTE *)(v3 + 268) = a3;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  *(_QWORD *)(v3 + 56) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 64) = v7;
  *(_QWORD *)(v3 + 72) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Locale(0);
  *(_QWORD *)(v3 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  *(_QWORD *)(v3 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  *(_QWORD *)(v3 + 96) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AttachmentEntity(0);
  *(_QWORD *)(v3 + 104) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v3 + 112) = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 120) = swift_task_alloc(v13);
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v13);
  v14 = type metadata accessor for AttachmentID(0);
  *(_QWORD *)(v3 + 136) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v3 + 144) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v16);
  return swift_task_switch(sub_100133268, 0, 0);
}

uint64_t sub_100133268()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  void (*v7)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 168) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 136);
    v3 = *(_QWORD *)(v0 + 144);
    v5 = (*(_DWORD *)(v3 + 80) + 32) & ~(unint64_t)*(_DWORD *)(v3 + 80);
    v6 = enum case for LocalizedStringResource.BundleDescription.main(_:);
    *(_DWORD *)(v0 + 248) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 252) = v6;
    *(_QWORD *)(v0 + 176) = *(_QWORD *)(v3 + 72);
    v7 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    *(_QWORD *)(v0 + 192) = 0;
    *(_QWORD *)(v0 + 200) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 184) = v7;
    v8 = *(_QWORD *)(v0 + 160);
    v9 = v1 + v5;
    v10 = swift_bridgeObjectRetain(v1);
    v7(v8, v9, v4, v10);
    v21 = (char *)&dword_1005D2B90 + dword_1005D2B90;
    v11 = (_QWORD *)swift_task_alloc(unk_1005D2B94);
    *(_QWORD *)(v0 + 208) = v11;
    *v11 = v0;
    v11[1] = sub_1001333DC;
    return ((uint64_t (*)(_QWORD, _QWORD))v21)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 152);
    v15 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 128);
    v17 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1001333DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100133438, 0, 0);
}

uint64_t sub_100133438(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  _QWORD *v23;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t);
  uint64_t v85[3];

  v2 = *(void **)(v1 + 216);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v1 + 24), "managedObjectContextForObjectID:", *(_QWORD *)(v1 + 216));
    *(_QWORD *)(v1 + 224) = v3;
    if (v3)
    {
      v4 = v3;
      v80 = *(_DWORD *)(v1 + 252);
      v5 = *(_QWORD *)(v1 + 128);
      v6 = *(int **)(v1 + 104);
      v82 = *(_QWORD *)(v1 + 96);
      v7 = *(_QWORD *)(v1 + 88);
      v75 = *(_QWORD *)(v1 + 80);
      v76 = *(_QWORD *)(v1 + 64);
      v77 = *(_QWORD *)(v1 + 72);
      v78 = *(_QWORD *)(v1 + 56);
      v8 = *(void **)(v1 + 24);
      v9 = v6[6];
      *(_DWORD *)(v1 + 256) = v9;
      v10 = (_QWORD *)(v5 + v9);
      *v10 = 0;
      v10[1] = 0;
      v11 = v6[7];
      *(_DWORD *)(v1 + 260) = v11;
      v12 = v5 + v11;
      v13 = type metadata accessor for URL(0);
      v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
      v15 = v2;
      v16 = v4;
      v17 = v8;
      v14(v12, 1, 1, v13);
      v18 = v6[8];
      *(_DWORD *)(v1 + 264) = v18;
      sub_100012E18((uint64_t *)&unk_1005CEEB0);
      v19 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
      static Locale.current.getter(v19);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v76 + 104))(v77, v80, v78);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)(v7, 0, 0, v75, v77, "Parameter title for Find Attachments intent", 43, 2);
      *(_QWORD *)(v5 + v18) = EntityProperty<>.init(title:)(v82);
      v20 = dword_1005D2B7C;
      v21 = v15;
      v22 = v16;
      v23 = (_QWORD *)swift_task_alloc(v20);
      *(_QWORD *)(v1 + 232) = v23;
      *v23 = v1;
      v23[1] = sub_100133A00;
      return AttachmentEntity.init(for:in:includeContents:)(*(_QWORD *)(v1 + 120), (uint64_t)v21, (uint64_t)v22);
    }
    else
    {
      v48 = *(_QWORD *)(v1 + 200);
      v49 = *(_QWORD *)(v1 + 160);
      v51 = *(_QWORD *)(v1 + 136);
      v50 = *(_QWORD *)(v1 + 144);
      v52 = swift_allocObject(&unk_100558D10, 24, 7);
      *(_QWORD *)(v52 + 16) = 0;
      v53 = v2;
      sub_10014F914(v52, 225, v53);

      v54 = swift_release(v52);
      swift_willThrow(v54);

      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
      swift_bridgeObjectRelease(v48);
      v56 = *(_QWORD *)(v1 + 152);
      v55 = *(_QWORD *)(v1 + 160);
      v58 = *(_QWORD *)(v1 + 120);
      v57 = *(_QWORD *)(v1 + 128);
      v60 = *(_QWORD *)(v1 + 88);
      v59 = *(_QWORD *)(v1 + 96);
      v62 = *(_QWORD *)(v1 + 72);
      v61 = *(_QWORD *)(v1 + 80);
      v63 = *(_QWORD *)(v1 + 48);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 184);
    v26 = *(_QWORD *)(v1 + 152);
    v27 = *(_QWORD *)(v1 + 160);
    v28 = *(_QWORD *)(v1 + 136);
    static Logger.link.getter(a1);
    v29 = v25(v26, v27, v28);
    v30 = Logger.logObject.getter(v29);
    v32 = static os_log_type_t.error.getter(v30, v31);
    v33 = os_log_type_enabled(v30, v32);
    v34 = *(_QWORD *)(v1 + 152);
    v35 = *(_QWORD *)(v1 + 160);
    v36 = *(_QWORD *)(v1 + 136);
    v37 = *(_QWORD *)(v1 + 144);
    v38 = *(_QWORD *)(v1 + 40);
    v39 = *(_QWORD *)(v1 + 48);
    v83 = *(_QWORD *)(v1 + 32);
    if (v33)
    {
      v81 = *(_QWORD *)(v1 + 160);
      v40 = swift_slowAlloc(22, -1);
      v79 = v39;
      v41 = swift_slowAlloc(64, -1);
      v85[0] = v41;
      *(_DWORD *)v40 = 136315394;
      *(_QWORD *)(v40 + 4) = sub_1003A4190(0xD000000000000010, 0x8000000100479AC0, v85);
      *(_WORD *)(v40 + 12) = 2080;
      v42 = sub_100019C6C(&qword_1005D0210, (uint64_t (*)(uint64_t))&type metadata accessor for AttachmentID, (uint64_t)&protocol conformance descriptor for AttachmentID);
      v43 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v36, v42);
      v45 = v44;
      *(_QWORD *)(v40 + 14) = sub_1003A4190(v43, v44, v85);
      swift_bridgeObjectRelease(v45);
      v46 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v46(v34, v36);
      _os_log_impl((void *)&_mh_execute_header, v30, v32, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v79, v83);
      v47 = v81;
    }
    else
    {

      v46 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v46(v34, v36);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v83);
      v47 = v35;
    }
    v46(v47, v36);
    v64 = *(_QWORD *)(v1 + 192) + 1;
    if (v64 == *(_QWORD *)(v1 + 168))
    {
      v65 = *(_QWORD *)(v1 + 200);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      v66 = *(_QWORD *)(v1 + 152);
      v68 = *(_QWORD *)(v1 + 120);
      v67 = *(_QWORD *)(v1 + 128);
      v70 = *(_QWORD *)(v1 + 88);
      v69 = *(_QWORD *)(v1 + 96);
      v72 = *(_QWORD *)(v1 + 72);
      v71 = *(_QWORD *)(v1 + 80);
      v73 = *(_QWORD *)(v1 + 48);
      swift_task_dealloc(*(_QWORD *)(v1 + 160));
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v65);
    }
    else
    {
      *(_QWORD *)(v1 + 192) = v64;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v1 + 184))(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 16)+ ((*(unsigned __int8 *)(v1 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 248))+ *(_QWORD *)(v1 + 176) * v64, *(_QWORD *)(v1 + 136));
      v84 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D2B90 + dword_1005D2B90);
      v74 = (_QWORD *)swift_task_alloc(unk_1005D2B94);
      *(_QWORD *)(v1 + 208) = v74;
      *v74 = v1;
      v74[1] = sub_1001333DC;
      return v84(*(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 24));
    }
  }
}

uint64_t sub_100133A00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100133CC4;
  else
    v3 = sub_100133A64;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100133A64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  uint64_t (*v31)(uint64_t, uint64_t);

  v1 = *(int *)(v0 + 264);
  v2 = *(int *)(v0 + 260);
  v3 = *(int *)(v0 + 256);
  v5 = *(void **)(v0 + 216);
  v4 = *(void **)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);

  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v3 + 8));
  sub_10013B118(v7 + v2);
  swift_release(*(_QWORD *)(v7 + v1));
  sub_10013B170(v8, v7, type metadata accessor for AttachmentEntity);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  v10 = *(_QWORD *)(v0 + 200);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v10 = sub_10016B280(0, *(_QWORD *)(v10 + 16) + 1, 1, *(_QWORD *)(v0 + 200));
  v12 = *(_QWORD *)(v10 + 16);
  v11 = *(_QWORD *)(v10 + 24);
  if (v12 >= v11 >> 1)
    v10 = sub_10016B280(v11 > 1, v12 + 1, 1, v10);
  v14 = *(void **)(v0 + 216);
  v13 = *(void **)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 160);
  v16 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v10 + 16) = v12 + 1;
  sub_10013B170(v18, v10+ ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))+ *(_QWORD *)(v19 + 72) * v12, type metadata accessor for AttachmentEntity);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  v20 = *(_QWORD *)(v0 + 192) + 1;
  if (v20 == *(_QWORD *)(v0 + 168))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    v21 = *(_QWORD *)(v0 + 152);
    v23 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 88);
    v24 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 72);
    v26 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v10);
  }
  else
  {
    *(_QWORD *)(v0 + 192) = v20;
    *(_QWORD *)(v0 + 200) = v10;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 184))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 176) * v20, *(_QWORD *)(v0 + 136));
    v31 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D2B90 + dword_1005D2B90);
    v30 = (_QWORD *)swift_task_alloc(unk_1005D2B94);
    *(_QWORD *)(v0 + 208) = v30;
    *v30 = v0;
    v30[1] = sub_1001333DC;
    return v31(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 24));
  }
}

uint64_t sub_100133CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = *(int *)(v0 + 264);
  v2 = *(int *)(v0 + 260);
  v3 = *(int *)(v0 + 256);
  v5 = *(void **)(v0 + 216);
  v4 = *(void **)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 128);

  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v3 + 8));
  sub_10013B118(v9 + v2);
  swift_release(*(_QWORD *)(v9 + v1));
  swift_bridgeObjectRelease(v6);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v20, v7);
  v11 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 88);
  v14 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 72);
  v16 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t VisibleTagsQuery.suggestedEntities()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100133E50, 0, 0);
}

uint64_t sub_100133E50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = v0[9];
  v1 = v0[10];
  AppDependency.wrappedValue.getter(v0 + 7);
  v3 = (void *)v0[7];
  v0[14] = objc_msgSend(v3, "modernManagedObjectContext");

  v4 = swift_allocObject(&unk_100558C40, 32, 7);
  v0[15] = v4;
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  v5 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  swift_retain(v2);
  swift_retain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[16] = v6;
  v7 = sub_100012E18(&qword_1005D00D0);
  *v6 = v0;
  v6[1] = sub_100133F3C;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 6, sub_100138408, v4, v7);
}

uint64_t sub_100133F3C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  v2 = *(void **)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_release(v1);

  return swift_task_switch(sub_100133FA0, 0, 0);
}

uint64_t sub_100133FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  swift_retain(v1);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 16));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_release(v1);
  swift_release(v2);
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v18 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 104);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v21 = v8;
    *(_DWORD *)v7 = 136642819;
    v9 = type metadata accessor for TagEntity(0);
    v10 = swift_bridgeObjectRetain(v3);
    v11 = Array.description.getter(v10, v9);
    v13 = v12;
    swift_bridgeObjectRelease(v3);
    *(_QWORD *)(v0 + 64) = sub_1003A4190(v11, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v7 + 4);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease_n(v3, 2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "VisibleTagsQuery: suggesting tags %{sensitive}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v20, v19);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease_n(v3, 2);

    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v3);
}

uint64_t sub_1001341D0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v2 = v1;
  v4 = type metadata accessor for TagEntity(0);
  v44 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v39 - v8;
  v10 = (void *)objc_opt_self(ICHashtag);
  AppDependency.wrappedValue.getter(&v45);
  v11 = v45;
  v12 = objc_msgSend(v45, "modernManagedObjectContext");

  v13 = objc_msgSend(v10, "canonicalHashtagsInContext:", v12);
  v14 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
  v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

  if (!((unint64_t)v15 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    v40 = a1;
    if (v16)
      goto LABEL_3;
LABEL_22:
    result = swift_bridgeObjectRelease(v15);
    v19 = _swiftEmptyArrayStorage;
LABEL_23:
    *v40 = v19;
    return result;
  }
  if (v15 < 0)
    v38 = v15;
  else
    v38 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v16 = _CocoaArrayWrapper.endIndex.getter(v38);
  swift_bridgeObjectRelease(v15);
  v40 = a1;
  if (!v16)
    goto LABEL_22;
LABEL_3:
  v45 = _swiftEmptyArrayStorage;
  result = sub_10013700C(0, v16 & ~(v16 >> 63), 0);
  if ((v16 & 0x8000000000000000) == 0)
  {
    v39 = v2;
    v18 = 0;
    v19 = v45;
    v41 = v15 & 0xC000000000000001;
    v42 = v16;
    v43 = v15;
    do
    {
      if (v41)
        v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v15);
      else
        v20 = *(id *)(v15 + 8 * v18 + 32);
      v21 = v20;
      TagID.init(_:)();
      v22 = objc_msgSend(v21, "objectID");
      v23 = objc_msgSend(v22, "URIRepresentation");

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v24 = objc_msgSend(v21, "standardizedContent");
      if (v24)
      {
        v25 = v24;
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v28 = v27;

      }
      else
      {
        v26 = 0;
        v28 = 0xE000000000000000;
      }
      v29 = (uint64_t *)&v7[*(int *)(v4 + 24)];
      *v29 = v26;
      v29[1] = v28;
      v30 = objc_msgSend(v21, "displayText", v39);
      if (v30)
      {
        v31 = v30;
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v34 = v33;

      }
      else
      {

        v32 = 0;
        v34 = 0xE000000000000000;
      }
      v35 = (uint64_t *)&v7[*(int *)(v4 + 28)];
      *v35 = v32;
      v35[1] = v34;
      sub_10013B170((uint64_t)v7, (uint64_t)v9, type metadata accessor for TagEntity);
      v45 = v19;
      v37 = v19[2];
      v36 = v19[3];
      if (v37 >= v36 >> 1)
      {
        sub_10013700C(v36 > 1, v37 + 1, 1);
        v19 = v45;
      }
      ++v18;
      v19[2] = v37 + 1;
      sub_10013B170((uint64_t)v9, (uint64_t)v19+ ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80))+ *(_QWORD *)(v44 + 72) * v37, type metadata accessor for TagEntity);
      v15 = v43;
    }
    while (v42 != v18);
    result = swift_bridgeObjectRelease(v43);
    goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t sub_100134558@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _s11MobileNotes18VisibleTablesQueryVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_10013457C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v3;
  return swift_task_switch(sub_1001326D0, 0, 0);
}

uint64_t sub_100134598(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *v1;
  v4 = v1[1];
  v5 = (_QWORD *)swift_task_alloc(dword_1005D00CC);
  *(_QWORD *)(v2 + 24) = v5;
  *v5 = v2;
  v5[1] = sub_10013B218;
  return VisibleTagsQuery.suggestedEntities()(v3, v4);
}

uint64_t sub_1001345EC()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_100134620(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_1001386A4();
  *v5 = v2;
  v5[1] = sub_100130768;
  return EntityQuery.results()(a1, a2, v6);
}

uint64_t sub_10013468C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(async function pointer to DynamicOptionsProvider.defaultResult()[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100130768;
  return DynamicOptionsProvider.defaultResult()(a1, a2, a3);
}

uint64_t VisibleTagsQuery.entities(matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4[41] = a3;
  v4[42] = a4;
  v4[39] = a1;
  v4[40] = a2;
  v5 = type metadata accessor for TagEntity(0);
  v4[43] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[44] = v6;
  v4[45] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TagID(0);
  v4[46] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[47] = v8;
  v4[48] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v4[49] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[50] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[51] = swift_task_alloc(v11);
  v4[52] = swift_task_alloc(v11);
  v4[53] = swift_task_alloc(v11);
  v4[54] = swift_task_alloc(v11);
  v4[55] = swift_task_alloc(v11);
  return swift_task_switch(sub_1001347E8, 0, 0);
}

uint64_t sub_1001347E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t inited;
  void *v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Class isa;
  id v18;
  uint64_t v19;
  Class v20;
  id v21;
  void *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;

  v1 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
  v47 = (id)static NSObject<>.ic_fetchRequest()();
  v0[56] = v47;
  v2 = sub_100012E18(&qword_1005CF6F0);
  v3 = swift_allocObject(v2, 48, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100451BF0;
  *(_QWORD *)(v3 + 32) = objc_msgSend((id)swift_getObjCClassFromMetadata(v1), "predicateForVisibleObjects");
  if (qword_1005CE970 != -1)
    swift_once(&qword_1005CE970, sub_100132584);
  v5 = v0[41];
  v4 = v0[42];
  v6 = v0[40];
  v7 = (void *)qword_1005D00B0;
  v8 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
  inited = swift_initStackObject(v8, v0 + 2);
  *(_OWORD *)(inited + 16) = xmmword_100451C20;
  *(_QWORD *)(inited + 32) = 0x7972657571;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v10 = (void *)objc_opt_self(ICHashtag);
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v10, "standardizedHashtagRepresentationForDisplayText:", v11);

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 48) = v13;
  *(_QWORD *)(inited + 56) = v15;
  v16 = sub_1001356D4(inited);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  v18 = objc_msgSend(v7, "predicateWithSubstitutionVariables:", isa);

  *(_QWORD *)(v3 + 40) = v18;
  v48 = v3;
  specialized Array._endMutation()(v19);
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  v20 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  v21 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", v20);

  v22 = v47;
  objc_msgSend(v47, "setPredicate:", v21);

  swift_retain(v5);
  swift_retain(v4);
  AppDependency.wrappedValue.getter(v0 + 12);
  Logger.init(subsystem:category:)(v0[12], v0[13], v0[14], v0[15]);
  swift_release(v5);
  swift_release(v4);
  v23 = swift_bridgeObjectRetain_n(v6, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  v26 = os_log_type_enabled(v24, v25);
  v27 = v0[55];
  v28 = v0[49];
  v29 = v0[50];
  v30 = v0[40];
  if (v26)
  {
    v46 = v0[55];
    v43 = v0[39];
    v45 = v0[50];
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = v28;
    v32 = swift_slowAlloc(32, -1);
    v48 = v32;
    *(_DWORD *)v31 = 136642819;
    swift_bridgeObjectRetain(v30);
    v0[38] = sub_1003A4190(v43, v30, &v48);
    v22 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 38, v0 + 39, v31 + 4);
    swift_bridgeObjectRelease_n(v30, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "VisibleTagsQuery: performing with query string '%{sensitive}s'", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    v33 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v33(v46, v44);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[40], 2);

    v33 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v33(v27, v28);
  }
  v0[57] = v33;
  v35 = v0[41];
  v34 = v0[42];
  AppDependency.wrappedValue.getter(v0 + 33);
  v36 = (void *)v0[33];
  v0[58] = objc_msgSend(v36, "modernManagedObjectContext");

  v37 = (_QWORD *)swift_allocObject(&unk_100558C68, 40, 7);
  v0[59] = v37;
  v37[2] = v35;
  v37[3] = v34;
  v37[4] = v22;
  v38 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  swift_retain(v35);
  swift_retain(v34);
  v39 = v22;
  v40 = (_QWORD *)swift_task_alloc(v38);
  v0[60] = v40;
  v41 = sub_100012E18(&qword_1005D00D0);
  *v40 = v0;
  v40[1] = sub_100134CD0;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 32, sub_100138454, v37, v41);
}

uint64_t sub_100134CD0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 480);
  *(_QWORD *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100135498;
  }
  else
  {
    v5 = *(void **)(v2 + 464);
    swift_release(*(_QWORD *)(v2 + 472));

    v4 = sub_100134D40;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100134D40()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  int64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  os_log_type_t v77;
  uint64_t v78;
  uint8_t *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;

  v1 = (_QWORD *)(v0 + 224);
  v82 = v0 + 288;
  v3 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 256);
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 160));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  swift_release(v3);
  swift_release(v2);
  v5 = swift_bridgeObjectRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134349056;
    *(_QWORD *)(v0 + 296) = *(_QWORD *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v8 + 4);
    swift_bridgeObjectRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "VisibleTagsQuery: found %{public}ld matching tag(s)", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
  }

  v9 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 336);
  (*(void (**)(_QWORD, _QWORD))(v0 + 456))(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 392));
  swift_retain(v9);
  swift_retain(v10);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 192));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  swift_release(v9);
  swift_release(v10);
  v11 = swift_bridgeObjectRetain_n(v4, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  v83 = v4;
  if (os_log_type_enabled(v12, v13))
  {
    v77 = v13;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v76 = swift_slowAlloc(32, -1);
    v84 = v76;
    v79 = v14;
    *(_DWORD *)v14 = 136446210;
    v15 = *(_QWORD *)(v4 + 16);
    v16 = _swiftEmptyArrayStorage;
    if (v15)
    {
      v72 = v12;
      v17 = *(_QWORD *)(v0 + 376);
      v18 = *(_QWORD *)(v0 + 352);
      v85 = _swiftEmptyArrayStorage;
      sub_100137044(0, v15, 0);
      v19 = v4 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      v20 = *(_QWORD *)(v18 + 72);
      v16 = _swiftEmptyArrayStorage;
      do
      {
        v21 = *(_QWORD *)(v0 + 384);
        v22 = *(_QWORD *)(v0 + 360);
        v23 = *(_QWORD *)(v0 + 368);
        sub_100138470(v19, v22);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v21, v22, v23);
        sub_1001384B4(v22);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        {
          sub_100137044(0, v16[2] + 1, 1);
          v16 = v85;
        }
        v25 = v16[2];
        v24 = v16[3];
        if (v25 >= v24 >> 1)
        {
          sub_100137044(v24 > 1, v25 + 1, 1);
          v16 = v85;
        }
        v26 = *(_QWORD *)(v0 + 384);
        v27 = *(_QWORD *)(v0 + 368);
        v16[2] = v25 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v25, v26, v27);
        v85 = v16;
        v19 += v20;
        --v15;
      }
      while (v15);
      v12 = v72;
    }
    v31 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
    v73 = *(_QWORD *)(v0 + 424);
    v32 = *(_QWORD *)(v0 + 392);
    v33 = Array.description.getter(v16, *(_QWORD *)(v0 + 368));
    v35 = v34;
    swift_bridgeObjectRelease(v16);
    *(_QWORD *)(v0 + 288) = sub_1003A4190(v33, v35, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v82, v0 + 296, v79 + 4);
    swift_bridgeObjectRelease(v35);
    v4 = v83;
    swift_bridgeObjectRelease_n(v83, 2);
    _os_log_impl((void *)&_mh_execute_header, v12, v77, "VisibleTagsQuery: matching tag IDs: %{public}s", v79, 0xCu);
    swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1, -1);
    swift_slowDealloc(v79, -1, -1);

    v31(v73, v32);
    v1 = (_QWORD *)(v0 + 224);
  }
  else
  {
    v28 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
    v29 = *(_QWORD *)(v0 + 424);
    v30 = *(_QWORD *)(v0 + 392);
    swift_bridgeObjectRelease_n(v4, 2);

    v28(v29, v30);
  }
  v36 = *(_QWORD *)(v0 + 328);
  v37 = *(_QWORD *)(v0 + 336);
  swift_retain(v36);
  swift_retain(v37);
  AppDependency.wrappedValue.getter(v1);
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  swift_release(v36);
  swift_release(v37);
  v38 = swift_bridgeObjectRetain_n(v4, 2);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v80 = v40;
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v78 = swift_slowAlloc(32, -1);
    v84 = v78;
    v81 = v41;
    *(_DWORD *)v41 = 136642819;
    v42 = *(_QWORD *)(v4 + 16);
    v43 = _swiftEmptyArrayStorage;
    if (v42)
    {
      v74 = v39;
      v45 = *(_QWORD *)(v0 + 344);
      v44 = *(_QWORD *)(v0 + 352);
      v85 = _swiftEmptyArrayStorage;
      sub_100137028(0, v42, 0);
      v46 = v4 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
      v47 = *(_QWORD *)(v44 + 72);
      v43 = v85;
      do
      {
        v48 = *(_QWORD *)(v0 + 360);
        sub_100138470(v46, v48);
        v49 = (uint64_t *)(v48 + *(int *)(v45 + 28));
        v50 = *v49;
        v51 = v49[1];
        swift_bridgeObjectRetain(v51);
        sub_1001384B4(v48);
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        {
          sub_100137028(0, v43[2] + 1, 1);
          v43 = v85;
        }
        v53 = v43[2];
        v52 = v43[3];
        if (v53 >= v52 >> 1)
        {
          sub_100137028(v52 > 1, v53 + 1, 1);
          v43 = v85;
        }
        v43[2] = v53 + 1;
        v54 = &v43[2 * v53];
        v54[4] = v50;
        v54[5] = v51;
        v46 += v47;
        --v42;
      }
      while (v42);
      v39 = v74;
    }
    v60 = *(void **)(v0 + 448);
    v55 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
    v75 = *(_QWORD *)(v0 + 416);
    v61 = *(_QWORD *)(v0 + 392);
    v62 = Array.description.getter(v43, &type metadata for String);
    v64 = v63;
    swift_bridgeObjectRelease(v43);
    *(_QWORD *)(v0 + 280) = sub_1003A4190(v62, v64, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v82, v81 + 4);
    swift_bridgeObjectRelease(v64);
    v4 = v83;
    swift_bridgeObjectRelease_n(v83, 2);
    _os_log_impl((void *)&_mh_execute_header, v39, v80, "VisibleTagsQuery: matching tag displayText: %{sensitive}s", v81, 0xCu);
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v81, -1, -1);

    v58 = v75;
    v59 = v61;
  }
  else
  {
    v55 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
    v56 = *(_QWORD *)(v0 + 416);
    v57 = *(_QWORD *)(v0 + 392);

    swift_bridgeObjectRelease_n(v4, 2);
    v58 = v56;
    v59 = v57;
  }
  v55(v58, v59);
  v65 = *(_QWORD *)(v0 + 432);
  v67 = *(_QWORD *)(v0 + 416);
  v66 = *(_QWORD *)(v0 + 424);
  v68 = *(_QWORD *)(v0 + 408);
  v69 = *(_QWORD *)(v0 + 384);
  v70 = *(_QWORD *)(v0 + 360);
  swift_task_dealloc(*(_QWORD *)(v0 + 440));
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_100135498()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 488);
  v2 = *(void **)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  swift_release(*(_QWORD *)(v0 + 472));

  swift_retain(v4);
  swift_retain(v3);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 128));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_release(v4);
  swift_release(v3);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 488);
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138412290;
    v11 = _convertErrorToNSError(_:)(v8);
    *(_QWORD *)(v0 + 272) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v9 + 4);
    *v10 = v11;
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "VisibleTagsQuery: error fetching tags: %@", v9, 0xCu);
    v12 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 488));
  }
  v13 = v6;
  v15 = *(void **)(v0 + 448);
  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 456);
  v17 = *(_QWORD *)(v0 + 432);
  v16 = *(_QWORD *)(v0 + 440);
  v19 = *(_QWORD *)(v0 + 416);
  v18 = *(_QWORD *)(v0 + 424);
  v20 = *(_QWORD *)(v0 + 408);
  v21 = *(_QWORD *)(v0 + 392);
  v24 = *(_QWORD *)(v0 + 384);
  v25 = *(_QWORD *)(v0 + 360);

  v22 = v14(v20, v21);
  swift_willThrow(v22);

  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1001356B8(uint64_t a1)
{
  return sub_100135944(a1, &qword_1005D01F0, &qword_1005D01F8, (uint64_t (*)(uint64_t))sub_1002489FC);
}

unint64_t sub_1001356D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(&qword_1005D02D8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100012CE8(v7, (uint64_t)&v16, (uint64_t *)&unk_1005D02E0);
    v8 = v16;
    v9 = v17;
    result = sub_100248A98(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_1000160B8(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100135808(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(&qword_1005D0170);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v7 = *(v6 - 3);
    v8 = *(v6 - 2);
    v10 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    result = sub_100248A98(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    v14 = (_QWORD *)(v4[7] + 16 * result);
    *v14 = v10;
    v14[1] = v9;
    v15 = v4[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100135928(uint64_t a1)
{
  return sub_100135944(a1, &qword_1005D0178, &qword_1005D0180, (uint64_t (*)(uint64_t))sub_100248AFC);
}

unint64_t sub_100135944(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(a2);
  v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v9;
  }
  v11 = v8 + 64;
  v12 = a1 + 32;
  swift_retain(v8);
  while (1)
  {
    sub_100012CE8(v12, (uint64_t)&v19, a3);
    v13 = v19;
    result = a4(v19);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v9[6] + 8 * result) = v13;
    result = (unint64_t)sub_1000160B8(&v20, (_OWORD *)(v9[7] + 32 * result));
    v16 = v9[2];
    v17 = __OFADD__(v16, 1);
    v18 = v16 + 1;
    if (v17)
      goto LABEL_11;
    v9[2] = v18;
    v12 += 40;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100135A6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(&qword_1005D0138);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v22 = v3 + 64;
  swift_retain(v3);
  v21 = v1;
  v6 = (_QWORD *)(v1 + 80);
  while (1)
  {
    v7 = *(v6 - 6);
    v8 = *(v6 - 5);
    v9 = *(v6 - 4);
    v10 = *(v6 - 3);
    v11 = *(v6 - 2);
    v12 = *((_BYTE *)v6 - 8);
    v13 = *v6;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v8);
    sub_10013ADF8(v11, v12);
    swift_retain(v13);
    result = sub_100248B7C(v7, v8, v9, v10);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v4[6] + 32 * result);
    *v16 = v7;
    v16[1] = v8;
    v16[2] = v9;
    v16[3] = v10;
    v17 = v4[7] + 24 * result;
    *(_QWORD *)v17 = v11;
    *(_BYTE *)(v17 + 8) = v12;
    *(_QWORD *)(v17 + 16) = v13;
    v18 = v4[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v6 += 7;
    v4[2] = v20;
    if (!--v5)
    {
      swift_release(v4);
      v1 = v21;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100135BD8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100012E18(&qword_1005D0230);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100012E18(&qword_1005D0238);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = *(int *)(v2 + 48);
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100012CE8(v13, (uint64_t)v5, &qword_1005D0230);
    result = sub_100248C90((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for URL(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    *(_QWORD *)(v8[7] + 8 * v17) = *(_QWORD *)&v5[v10];
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100135D6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100012E18(&qword_1005D0E50);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100012E18(&qword_1005D0200);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100012CE8(v13, (uint64_t)v5, &qword_1005D0E50);
    result = sub_100248D28((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = sub_100012E18(&qword_1005D3DA0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = v8[7] + 24 * v17;
    v21 = v10[16];
    *(_OWORD *)v20 = *(_OWORD *)v10;
    *(_BYTE *)(v20 + 16) = v21;
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100135F1C(uint64_t a1)
{
  return sub_100135944(a1, &qword_1005D02A0, &qword_1005D02A8, (uint64_t (*)(uint64_t))sub_1002489FC);
}

unint64_t sub_100135F38(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D1B50, &qword_1005D02C0, (uint64_t (*)(_QWORD))sub_100248E2C);
}

unint64_t sub_100135F54(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D02B0, &qword_1005D02B8, (uint64_t (*)(_QWORD))sub_100248E30);
}

unint64_t sub_100135F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(&qword_1005D0168);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_100248C44((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100136078(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D0290, &qword_1005D0298, (uint64_t (*)(_QWORD))sub_100248EFC);
}

unint64_t sub_100136094(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t result;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v31 = a4;
  v7 = sub_100012E18(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
  {
    v13 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v29 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v29);
    return (unint64_t)v13;
  }
  sub_100012E18(a3);
  v12 = static _DictionaryStorage.allocate(capacity:)(v11);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    goto LABEL_9;
  v15 = &v10[*(int *)(v7 + 48)];
  v16 = v12 + 64;
  v17 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v30 = a1;
  v18 = a1 + v17;
  v19 = *(_QWORD *)(v8 + 72);
  swift_retain(v12);
  while (1)
  {
    sub_100012CE8(v18, (uint64_t)v10, a2);
    v20 = *v10;
    result = v31(*v10);
    if ((v22 & 1) != 0)
      break;
    v23 = result;
    *(_QWORD *)(v16 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v13[6] + result) = v20;
    v24 = v13[7];
    v25 = type metadata accessor for DisplayRepresentation(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v23, v15, v25);
    v26 = v13[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_12;
    v13[2] = v28;
    v18 += v19;
    if (!--v14)
    {
      swift_release(v13);
      v29 = v30;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10013622C(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D0280, &qword_1005D0288, (uint64_t (*)(_QWORD))sub_100248FE0);
}

unint64_t sub_100136248(uint64_t a1)
{
  return sub_100136A84(a1, &qword_1005D0228);
}

unint64_t sub_100136254(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D0260, &qword_1005D0268, (uint64_t (*)(_QWORD))sub_1002490E8);
}

unint64_t sub_100136270(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D0250, &qword_1005D0258, (uint64_t (*)(_QWORD))sub_1002491DC);
}

unint64_t sub_10013628C(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D0240, &qword_1005D0248, sub_100249288);
}

unint64_t sub_1001362A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = sub_100012E18(&qword_1005D0218);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v25 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v25);
    return (unint64_t)v8;
  }
  sub_100012E18(&qword_1005D0220);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v27 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100012CE8(v13, (uint64_t)v5, &qword_1005D0218);
    result = sub_100248A00((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    v20 = (_QWORD *)(v8[7] + 16 * v17);
    v21 = *((_QWORD *)v10 + 1);
    *v20 = *(_QWORD *)v10;
    v20[1] = v21;
    v22 = v8[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (v23)
      goto LABEL_12;
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v25 = v27;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100136444(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(&qword_1005D0150);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100012CE8(v7, (uint64_t)v16, &qword_1005D0158);
    result = sub_100248ECC((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_1000160B8(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100136584(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(&qword_1005D01E8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100249354(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100136694(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(&qword_1005D8330);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v7 = *(v6 - 2);
    v8 = *(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_100248A98(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 3;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001367A4(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D01C8, &qword_1005D01D0, (uint64_t (*)(_QWORD))sub_1002493CC);
}

unint64_t sub_1001367C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  id *v6;
  int v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(&qword_1005D0160);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (id *)(a1 + 40);
  while (1)
  {
    v7 = *(_DWORD *)v6;
    v8 = *(v6 - 1);
    result = sub_100249468((uint64_t)v8);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    *(_DWORD *)(v4[7] + 4 * result) = v7;
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001368BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100012E18(&qword_1005D01B0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100012E18(&qword_1005D01B8);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = (__int128 *)&v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100012CE8(v13, (uint64_t)v5, &qword_1005D01B0);
    result = sub_100248A00((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    result = sub_10013B100(v10, v8[7] + 40 * v17);
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100136A5C(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D9370, &qword_1005D01C0, (uint64_t (*)(_QWORD))sub_1002494B4);
}

unint64_t sub_100136A78(uint64_t a1)
{
  return sub_100136A84(a1, &qword_1005D0148);
}

unint64_t sub_100136A84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  unint64_t result;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
    v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012E18(a2);
  v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  v5 = (_QWORD *)v4;
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }
  swift_retain(v4);
  v7 = (void **)(a1 + 48);
  while (1)
  {
    v8 = (uint64_t)*(v7 - 2);
    v9 = (uint64_t)*(v7 - 1);
    v10 = *v7;
    swift_bridgeObjectRetain(v9);
    v11 = v10;
    result = sub_100248A98(v8, v9);
    if ((v13 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v14 = (uint64_t *)(v5[6] + 16 * result);
    *v14 = v8;
    v14[1] = v9;
    *(_QWORD *)(v5[7] + 8 * result) = v11;
    v15 = v5[2];
    v16 = __OFADD__(v15, 1);
    v17 = v15 + 1;
    if (v16)
      goto LABEL_11;
    v5[2] = v17;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100136B98(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005D0190, &qword_1005D0198, (uint64_t (*)(_QWORD))sub_1002495E8);
}

unint64_t sub_100136BB4(uint64_t a1)
{
  return sub_100136094(a1, &qword_1005DD070, &qword_1005D0188, (uint64_t (*)(_QWORD))sub_100248E2C);
}

void sub_100136BD0(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;

  v5 = type metadata accessor for TagEntity(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v39 - v10;
  AppDependency.wrappedValue.getter(&v47);
  v12 = v47;
  v13 = objc_msgSend(v47, "modernManagedObjectContext");

  v14 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
  v15 = NSManagedObjectContext.fetch<A>(_:)(a1, v14);

  if (v2)
    return;
  v46 = v11;
  v41 = 0;
  if (!((unint64_t)v15 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v16)
      goto LABEL_4;
LABEL_23:
    swift_bridgeObjectRelease(v15);
    *a2 = _swiftEmptyArrayStorage;
    return;
  }
  if (v15 < 0)
    v38 = v15;
  else
    v38 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v15);
  v16 = _CocoaArrayWrapper.endIndex.getter(v38);
  swift_bridgeObjectRelease(v15);
  if (!v16)
    goto LABEL_23;
LABEL_4:
  v47 = _swiftEmptyArrayStorage;
  sub_10013700C(0, v16 & ~(v16 >> 63), 0);
  if (v16 < 0)
  {
    __break(1u);
  }
  else
  {
    v45 = v6;
    v40 = a2;
    v17 = 0;
    v18 = v47;
    v42 = v15 & 0xC000000000000001;
    v43 = v16;
    v44 = v15;
    do
    {
      if (v42)
        v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v17, v15);
      else
        v19 = *(id *)(v15 + 8 * v17 + 32);
      v20 = v19;
      TagID.init(_:)();
      v21 = objc_msgSend(v20, "objectID");
      v22 = objc_msgSend(v21, "URIRepresentation");

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);
      v23 = objc_msgSend(v20, "standardizedContent");
      if (v23)
      {
        v24 = v23;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v27 = v26;

      }
      else
      {
        v25 = 0;
        v27 = 0xE000000000000000;
      }
      v28 = (uint64_t *)&v9[*(int *)(v5 + 24)];
      *v28 = v25;
      v28[1] = v27;
      v29 = objc_msgSend(v20, "displayText");
      if (v29)
      {
        v30 = v29;
        v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

      }
      else
      {

        v31 = 0;
        v33 = 0xE000000000000000;
      }
      v34 = (uint64_t *)&v9[*(int *)(v5 + 28)];
      *v34 = v31;
      v34[1] = v33;
      v35 = (uint64_t)v46;
      sub_10013B170((uint64_t)v9, (uint64_t)v46, type metadata accessor for TagEntity);
      v47 = v18;
      v37 = v18[2];
      v36 = v18[3];
      if (v37 >= v36 >> 1)
      {
        sub_10013700C(v36 > 1, v37 + 1, 1);
        v35 = (uint64_t)v46;
        v18 = v47;
      }
      ++v17;
      v18[2] = v37 + 1;
      sub_10013B170(v35, (uint64_t)v18+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v37, type metadata accessor for TagEntity);
      v15 = v44;
    }
    while (v43 != v17);
    swift_bridgeObjectRelease(v44);
    *v40 = v18;
  }
}

uint64_t sub_100136F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = *v3;
  v7 = v3[1];
  v9 = (_QWORD *)swift_task_alloc(dword_1005D00DC);
  *(_QWORD *)(v4 + 24) = v9;
  *v9 = v4;
  v9[1] = sub_100136FB0;
  return VisibleTagsQuery.entities(matching:)(a2, a3, v8, v7);
}

uint64_t sub_100136FB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10013700C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100153540(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137028(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100153554(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100137044(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001536BC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137060(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001536D0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10013707C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001536E4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137098(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001536F8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001370B4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10015387C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001370D0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100153890(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001370EC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001538A4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100137108(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100153A10(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137124(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100153B98(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137140(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100153BAC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10013715C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100153D50(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137178(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100153D64(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100137194(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100153EC0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001371B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100153ED4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001371CC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100153EE8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001371E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154044(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137204(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154058(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137220(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001541FC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10013723C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100154380(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100137258(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001544DC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100137274(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10015465C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100137290(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1001547A8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001372AC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1001547BC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1001372C8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154918(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001372E4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10015492C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137300(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100154940(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10013731C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154A9C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137338(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154AB0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137354(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154C38(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100137370(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154C4C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10013738C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154C60(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001373A8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154C74(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001373C4(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154C88(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001373E0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154E7C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1001373FC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100154E90(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t _s11MobileNotes18VisibleTablesQueryVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v6 = 0xD000000000000024;
  v7 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v0 = type metadata accessor for AppDependencyManager(0);
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(v8, v1);
  sub_100012E18(&qword_1005CEE50);
  v6 = 0xD000000000000021;
  v7 = 0x8000000100476B70;
  v3 = AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(v8, v4);
  return v2;
}

id sub_100137524(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void **v4;
  id v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD v26[3];
  _BYTE v27[80];
  uint64_t v28;

  v4 = (void **)(a1 + 16);
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    v5 = *(id *)(a1 + 16);
  }
  else
  {
    type metadata accessor for ICError(0);
    v9 = v8;
    v28 = a2;
    v10 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v10, v27);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v12;
    v26[0] = 0;
    v26[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v13._countAndFlagsBits = 0x7469746E45676154;
    v13._object = (void *)0xE900000000000079;
    String.append(_:)(v13);
    v14._object = (void *)0x8000000100479A60;
    v14._countAndFlagsBits = 0xD000000000000053;
    String.append(_:)(v14);
    v15 = objc_msgSend(a3, "description");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19._countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v18);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0;
    *(_QWORD *)(inited + 56) = 0xE000000000000000;
    v20 = sub_100174AD0(inited);
    v21 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    _BridgedStoredNSError.init(_:userInfo:)(v26, &v28, v20, v9, v21);
    v22 = (void *)v26[0];
    swift_beginAccess(v4, v26, 1, 0);
    v23 = *v4;
    *v4 = v22;
    v5 = v22;

    v3 = 0;
  }
  v24 = v3;
  return v5;
}

uint64_t sub_1001376F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[3] = a1;
  v2[4] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TagEntity(0);
  v2[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  v2[12] = swift_task_alloc(v7);
  v8 = type metadata accessor for TagID(0);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v10);
  v2[16] = swift_task_alloc(v10);
  return swift_task_switch(sub_1001377D0, 0, 0);
}

uint64_t sub_1001377D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  void (*v6)(uint64_t, unint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 136) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 112);
    v4 = (void *)objc_opt_self(ICHashtag);
    *(_QWORD *)(v0 + 144) = v4;
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 248) = v5;
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16);
    *(_QWORD *)(v0 + 168) = 0;
    *(_QWORD *)(v0 + 176) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 160) = v6;
    v7 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 104);
    v9 = *(void **)(v0 + 32);
    v10 = *(_QWORD *)(v0 + 24) + ((v5 + 32) & ~(unint64_t)v5);
    swift_bridgeObjectRetain(v1);
    v6(v7, v10, v8);
    v11 = objc_msgSend(v9, "modernManagedObjectContext");
    *(_QWORD *)(v0 + 184) = v11;
    TagID.displayText.getter();
    v13 = v12;
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
    v15 = objc_msgSend(v4, "standardizedHashtagRepresentationForDisplayText:", v14);

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = (_QWORD *)swift_allocObject(&unk_100558DB0, 40, 7);
    *(_QWORD *)(v0 + 192) = v19;
    v19[2] = v16;
    v19[3] = v18;
    v19[4] = v11;
    v20 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v11;
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v0 + 200) = v21;
    v22 = sub_100012E18(&qword_1005D1230);
    *v21 = v0;
    v21[1] = sub_1001379E8;
    return NSManagedObjectContext.perform<A>(_:)(v0 + 16, sub_10013B1E0, v19, v22);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 88);
    v25 = *(_QWORD *)(v0 + 96);
    v27 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_1001379E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 192);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release(v1);
  return swift_task_switch(sub_100137A44, 0, 0);
}

uint64_t sub_100137A44()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  NSString v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[2];

  v1 = *(void **)(v0 + 16);
  *(_QWORD *)(v0 + 208) = v1;
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 32), "managedObjectContextForObjectID:", v1);
    *(_QWORD *)(v0 + 216) = v2;
    if (v2)
    {
      v3 = v2;
      v4 = *(void **)(v0 + 32);
      v5 = swift_allocObject(&unk_100558DD8, 32, 7);
      *(_QWORD *)(v0 + 224) = v5;
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v1;
      v6 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v7 = v1;
      v8 = v3;
      v9 = v7;
      v10 = v8;
      v11 = v4;
      v12 = v9;
      v10;
      v13 = (_QWORD *)swift_task_alloc(v6);
      *(_QWORD *)(v0 + 232) = v13;
      *v13 = v0;
      v13[1] = sub_100137FAC;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 80), sub_10013B1FC, v5, *(_QWORD *)(v0 + 64));
    }
    else
    {
      v35 = *(_QWORD *)(v0 + 176);
      v36 = *(_QWORD *)(v0 + 128);
      v37 = *(_QWORD *)(v0 + 104);
      v38 = *(_QWORD *)(v0 + 112);
      v39 = swift_allocObject(&unk_100558D10, 24, 7);
      *(_QWORD *)(v39 + 16) = 0;
      v40 = v1;
      sub_100137524(v39, 225, v40);

      v41 = swift_release(v39);
      swift_willThrow(v41);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
      swift_bridgeObjectRelease(v35);
      v43 = *(_QWORD *)(v0 + 120);
      v42 = *(_QWORD *)(v0 + 128);
      v45 = *(_QWORD *)(v0 + 88);
      v44 = *(_QWORD *)(v0 + 96);
      v46 = *(_QWORD *)(v0 + 80);
      v47 = *(_QWORD *)(v0 + 56);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 160);
    v17 = *(_QWORD *)(v0 + 120);
    v16 = *(_QWORD *)(v0 + 128);
    v18 = *(_QWORD *)(v0 + 104);
    static Logger.link.getter();
    v19 = v15(v17, v16, v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 128);
    v25 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 112);
    v27 = *(_QWORD *)(v0 + 56);
    v72 = *(_QWORD *)(v0 + 48);
    v73 = *(_QWORD *)(v0 + 40);
    if (v22)
    {
      v71 = *(_QWORD *)(v0 + 56);
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(64, -1);
      v74[0] = v29;
      *(_DWORD *)v28 = 136315394;
      *(_QWORD *)(v28 + 4) = sub_1003A4190(0x7469746E45676154, 0xE900000000000079, v74);
      *(_WORD *)(v28 + 12) = 2080;
      v30 = sub_100019C6C((unint64_t *)&unk_1005DB510, (uint64_t (*)(uint64_t))&type metadata accessor for TagID, (uint64_t)&protocol conformance descriptor for TagID);
      v31 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v25, v30);
      v70 = v24;
      v33 = v32;
      *(_QWORD *)(v28 + 14) = sub_1003A4190(v31, v32, v74);
      swift_bridgeObjectRelease(v33);
      v34 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v34(v23, v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
      v34(v70, v25);
    }
    else
    {

      v48 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v48(v23, v25);
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v27, v73);
      v48(v24, v25);
    }
    v49 = *(_QWORD *)(v0 + 168) + 1;
    if (v49 == *(_QWORD *)(v0 + 136))
    {
      v50 = *(_QWORD *)(v0 + 176);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
      v51 = *(_QWORD *)(v0 + 120);
      v53 = *(_QWORD *)(v0 + 88);
      v52 = *(_QWORD *)(v0 + 96);
      v54 = *(_QWORD *)(v0 + 80);
      v55 = *(_QWORD *)(v0 + 56);
      swift_task_dealloc(*(_QWORD *)(v0 + 128));
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v50);
    }
    else
    {
      *(_QWORD *)(v0 + 168) = v49;
      v56 = *(void **)(v0 + 144);
      v57 = *(void **)(v0 + 32);
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 160))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 152) * v49, *(_QWORD *)(v0 + 104));
      v58 = objc_msgSend(v57, "modernManagedObjectContext");
      *(_QWORD *)(v0 + 184) = v58;
      TagID.displayText.getter();
      v60 = v59;
      v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v60);
      v62 = objc_msgSend(v56, "standardizedHashtagRepresentationForDisplayText:", v61);

      v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v65 = v64;

      v66 = (_QWORD *)swift_allocObject(&unk_100558DB0, 40, 7);
      *(_QWORD *)(v0 + 192) = v66;
      v66[2] = v63;
      v66[3] = v65;
      v66[4] = v58;
      v67 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v58;
      v68 = (_QWORD *)swift_task_alloc(v67);
      *(_QWORD *)(v0 + 200) = v68;
      v69 = sub_100012E18(&qword_1005D1230);
      *v68 = v0;
      v68[1] = sub_1001379E8;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 16, sub_10013B1E0, v66, v69);
    }
  }
}

uint64_t sub_100137FAC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001382FC;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 224));
    v4 = sub_100138018;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100138018()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  v2 = *(void **)(v0 + 208);
  v1 = *(void **)(v0 + 216);
  v3 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80);
  v7 = *(void **)(v0 + 32);

  sub_10013B170(v6, v5, type metadata accessor for TagEntity);
  sub_10013B170(v5, v4, type metadata accessor for TagEntity);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v9 = *(_QWORD *)(v0 + 176);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v9 = sub_10016A838(0, *(_QWORD *)(v9 + 16) + 1, 1, *(_QWORD *)(v0 + 176));
  v11 = *(_QWORD *)(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  if (v11 >= v10 >> 1)
    v9 = sub_10016A838(v10 > 1, v11 + 1, 1, v9);
  v13 = *(void **)(v0 + 208);
  v12 = *(void **)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 128);
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v9 + 16) = v11 + 1;
  sub_10013B170(v17, v9+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v11, type metadata accessor for TagEntity);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  v19 = *(_QWORD *)(v0 + 168) + 1;
  if (v19 == *(_QWORD *)(v0 + 136))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
    v20 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 80);
    v24 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 128));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9);
  }
  else
  {
    *(_QWORD *)(v0 + 168) = v19;
    *(_QWORD *)(v0 + 176) = v9;
    v26 = *(void **)(v0 + 144);
    v27 = *(void **)(v0 + 32);
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 160))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 24)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 152) * v19, *(_QWORD *)(v0 + 104));
    v28 = objc_msgSend(v27, "modernManagedObjectContext");
    *(_QWORD *)(v0 + 184) = v28;
    TagID.displayText.getter();
    v30 = v29;
    v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    v32 = objc_msgSend(v26, "standardizedHashtagRepresentationForDisplayText:", v31);

    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v36 = (_QWORD *)swift_allocObject(&unk_100558DB0, 40, 7);
    *(_QWORD *)(v0 + 192) = v36;
    v36[2] = v33;
    v36[3] = v35;
    v36[4] = v28;
    v37 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v28;
    v38 = (_QWORD *)swift_task_alloc(v37);
    *(_QWORD *)(v0 + 200) = v38;
    v39 = sub_100012E18(&qword_1005D1230);
    *v38 = v0;
    v38[1] = sub_1001379E8;
    return NSManagedObjectContext.perform<A>(_:)(v0 + 16, sub_10013B1E0, v36, v39);
  }
}

uint64_t sub_1001382FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void **)(v0 + 216);
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(void **)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = *(_QWORD *)(v0 + 112);
  v8 = *(void **)(v0 + 32);

  swift_release(v1);
  swift_bridgeObjectRelease(v4);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v10 = *(_QWORD *)(v0 + 120);
  v9 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001383DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100138408@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001341D0(a1);
}

uint64_t sub_100138420()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_100138454(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100136BD0(*(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_100138470(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TagEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001384B4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TagEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1001384F4()
{
  unint64_t result;

  result = qword_1005D00E0;
  if (!qword_1005D00E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleTagsQuery, &type metadata for VisibleTagsQuery);
    atomic_store(result, (unint64_t *)&qword_1005D00E0);
  }
  return result;
}

unint64_t sub_10013853C()
{
  unint64_t result;

  result = qword_1005D00E8[0];
  if (!qword_1005D00E8[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleTagsQuery, &type metadata for VisibleTagsQuery);
    atomic_store(result, qword_1005D00E8);
  }
  return result;
}

uint64_t sub_100138580()
{
  return sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
}

unint64_t sub_1001385B0()
{
  unint64_t result;

  result = qword_1005D0100;
  if (!qword_1005D0100)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleTagsQuery, &type metadata for VisibleTagsQuery);
    atomic_store(result, (unint64_t *)&qword_1005D0100);
  }
  return result;
}

uint64_t sub_1001385F4()
{
  return sub_100019C6C(&qword_1005D3E20, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
}

unint64_t sub_100138624()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D0108[0];
  if (!qword_1005D0108[0])
  {
    v1 = sub_10001537C(&qword_1005D00D0);
    sub_100019C6C(&qword_1005D3E20, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, qword_1005D0108);
  }
  return result;
}

unint64_t sub_1001386A4()
{
  unint64_t result;

  result = qword_1005D0120;
  if (!qword_1005D0120)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleTagsQuery, &type metadata for VisibleTagsQuery);
    atomic_store(result, (unint64_t *)&qword_1005D0120);
  }
  return result;
}

uint64_t destroy for VisibleTagsQuery(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s11MobileNotes16VisibleTagsQueryVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for VisibleTagsQuery(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

_QWORD *assignWithTake for VisibleTagsQuery(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for VisibleTagsQuery(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VisibleTagsQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisibleTagsQuery()
{
  return &type metadata for VisibleTagsQuery;
}

uint64_t sub_100138874(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FolderEntity(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  v8 = type metadata accessor for FolderID(0);
  v2[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[13] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v10);
  v2[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_100138950, 0, 0);
}

uint64_t sub_100138950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 128) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 104);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 216) = v5;
    *(_QWORD *)(v0 + 136) = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    *(_QWORD *)(v0 + 152) = 0;
    *(_QWORD *)(v0 + 160) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 144) = v6;
    v7 = *(_QWORD *)(v0 + 120);
    v8 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    swift_bridgeObjectRetain(v1);
    v6(v7, v8, v4);
    v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005DB980 + dword_1005DB980);
    v9 = (_QWORD *)swift_task_alloc(unk_1005DB984);
    *(_QWORD *)(v0 + 168) = v9;
    *v9 = v0;
    v9[1] = sub_100138A88;
    return v16(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 112);
    v13 = *(_QWORD *)(v0 + 80);
    v12 = *(_QWORD *)(v0 + 88);
    v14 = *(_QWORD *)(v0 + 72);
    v15 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100138A88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100138AE4, 0, 0);
}

uint64_t sub_100138AE4()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t, uint64_t);
  uint64_t v62[2];

  v1 = *(void **)(v0 + 176);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 24), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 176));
    *(_QWORD *)(v0 + 184) = v2;
    if (v2)
    {
      v3 = v2;
      v4 = *(void **)(v0 + 24);
      v5 = swift_allocObject(&unk_100558D88, 32, 7);
      *(_QWORD *)(v0 + 192) = v5;
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v1;
      v6 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v7 = v1;
      v8 = v3;
      v9 = v7;
      v10 = v8;
      v11 = v4;
      v12 = v9;
      v10;
      v13 = (_QWORD *)swift_task_alloc(v6);
      *(_QWORD *)(v0 + 200) = v13;
      *v13 = v0;
      v13[1] = sub_100138FA0;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 72), sub_10013B158, v5, *(_QWORD *)(v0 + 56));
    }
    else
    {
      v37 = *(_QWORD *)(v0 + 160);
      v38 = *(_QWORD *)(v0 + 120);
      v39 = *(_QWORD *)(v0 + 96);
      v40 = *(_QWORD *)(v0 + 104);
      v41 = swift_allocObject(&unk_100558D10, 24, 7);
      *(_QWORD *)(v41 + 16) = 0;
      v42 = v1;
      sub_10014F8F4(v41, 225, v42);

      v43 = swift_release(v41);
      swift_willThrow(v43);

      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
      swift_bridgeObjectRelease(v37);
      v45 = *(_QWORD *)(v0 + 112);
      v44 = *(_QWORD *)(v0 + 120);
      v47 = *(_QWORD *)(v0 + 80);
      v46 = *(_QWORD *)(v0 + 88);
      v48 = *(_QWORD *)(v0 + 72);
      v49 = *(_QWORD *)(v0 + 48);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
    v16 = *(_QWORD *)(v0 + 112);
    v17 = *(_QWORD *)(v0 + 120);
    v18 = *(_QWORD *)(v0 + 96);
    static Logger.link.getter();
    v19 = v15(v16, v17, v18);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 112);
    v24 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 96);
    v26 = *(_QWORD *)(v0 + 104);
    v27 = *(_QWORD *)(v0 + 40);
    v28 = *(_QWORD *)(v0 + 48);
    v60 = *(_QWORD *)(v0 + 32);
    if (v22)
    {
      v59 = *(_QWORD *)(v0 + 120);
      v29 = swift_slowAlloc(22, -1);
      v58 = v28;
      v30 = swift_slowAlloc(64, -1);
      v62[0] = v30;
      *(_DWORD *)v29 = 136315394;
      *(_QWORD *)(v29 + 4) = sub_1003A4190(0x6E457265646C6F46, 0xEC00000079746974, v62);
      *(_WORD *)(v29 + 12) = 2080;
      v31 = sub_100019C6C(&qword_1005D02D0, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
      v32 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v25, v31);
      v34 = v33;
      *(_QWORD *)(v29 + 14) = sub_1003A4190(v32, v33, v62);
      swift_bridgeObjectRelease(v34);
      v35 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v35(v23, v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v58, v60);
      v36 = v59;
    }
    else
    {

      v35 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v35(v23, v25);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v60);
      v36 = v24;
    }
    v35(v36, v25);
    v50 = *(_QWORD *)(v0 + 152) + 1;
    if (v50 == *(_QWORD *)(v0 + 128))
    {
      v51 = *(_QWORD *)(v0 + 160);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
      v52 = *(_QWORD *)(v0 + 112);
      v54 = *(_QWORD *)(v0 + 80);
      v53 = *(_QWORD *)(v0 + 88);
      v55 = *(_QWORD *)(v0 + 72);
      v56 = *(_QWORD *)(v0 + 48);
      swift_task_dealloc(*(_QWORD *)(v0 + 120));
      swift_task_dealloc(v52);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v51);
    }
    else
    {
      *(_QWORD *)(v0 + 152) = v50;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 216))+ *(_QWORD *)(v0 + 136) * v50, *(_QWORD *)(v0 + 96));
      v61 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005DB980 + dword_1005DB980);
      v57 = (_QWORD *)swift_task_alloc(unk_1005DB984);
      *(_QWORD *)(v0 + 168) = v57;
      *v57 = v0;
      v57[1] = sub_100138A88;
      return v61(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 24));
    }
  }
}

uint64_t sub_100138FA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100139240;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 192));
    v4 = sub_10013900C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013900C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  char *v27;

  v2 = *(void **)(v0 + 176);
  v1 = *(void **)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(void **)(v0 + 24);

  sub_10013B170(v6, v5, type metadata accessor for FolderEntity);
  sub_10013B170(v5, v4, type metadata accessor for FolderEntity);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v9 = *(_QWORD *)(v0 + 160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v9 = sub_10016AA58(0, *(_QWORD *)(v9 + 16) + 1, 1, *(_QWORD *)(v0 + 160));
  v11 = *(_QWORD *)(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  if (v11 >= v10 >> 1)
    v9 = sub_10016AA58(v10 > 1, v11 + 1, 1, v9);
  v13 = *(void **)(v0 + 176);
  v12 = *(void **)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v9 + 16) = v11 + 1;
  sub_10013B170(v17, v9+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v11, type metadata accessor for FolderEntity);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  v19 = *(_QWORD *)(v0 + 152) + 1;
  if (v19 == *(_QWORD *)(v0 + 128))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    v20 = *(_QWORD *)(v0 + 112);
    v22 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 72);
    v24 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9);
  }
  else
  {
    *(_QWORD *)(v0 + 152) = v19;
    *(_QWORD *)(v0 + 160) = v9;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 216))+ *(_QWORD *)(v0 + 136) * v19, *(_QWORD *)(v0 + 96));
    v27 = (char *)&dword_1005DB980 + dword_1005DB980;
    v26 = (_QWORD *)swift_task_alloc(unk_1005DB984);
    *(_QWORD *)(v0 + 168) = v26;
    *v26 = v0;
    v26[1] = sub_100138A88;
    return ((uint64_t (*)(_QWORD, _QWORD))v27)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 24));
  }
}

uint64_t sub_100139240()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void **)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(void **)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v8 = *(void **)(v0 + 24);

  swift_release(v1);
  swift_bridgeObjectRelease(v4);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v10 = *(_QWORD *)(v0 + 112);
  v9 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 72);
  v14 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100139320(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10013A120(a1, a2, a3, 0x746E45656C626154, (void *)0xEB00000000797469);
}

uint64_t sub_100139340(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource(0);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for TableEntity(0);
  v2[13] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[14] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v12);
  v2[16] = swift_task_alloc(v12);
  v2[17] = swift_task_alloc(v12);
  v13 = type metadata accessor for TableID(0);
  v2[18] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[19] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v15);
  v2[21] = swift_task_alloc(v15);
  return swift_task_switch(sub_1001394A4, 0, 0);
}

uint64_t sub_1001394A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 176) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 144);
    v3 = *(_QWORD *)(v0 + 152);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 264) = v5;
    *(_DWORD *)(v0 + 268) = enum case for LocalizedStringResource.BundleDescription.main(_:);
    *(_QWORD *)(v0 + 184) = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    *(_QWORD *)(v0 + 200) = 0;
    *(_QWORD *)(v0 + 208) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 192) = v6;
    v7 = *(_QWORD *)(v0 + 168);
    v8 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    v9 = swift_bridgeObjectRetain(v1);
    v6(v7, v8, v4, v9);
    v21 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D10A8 + dword_1005D10A8);
    v10 = (_QWORD *)swift_task_alloc(unk_1005D10AC);
    *(_QWORD *)(v0 + 216) = v10;
    *v10 = v0;
    v10[1] = sub_10013962C;
    return v21(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 120);
    v17 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 96);
    v19 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10013962C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100139688, 0, 0);
}

uint64_t sub_100139688(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  os_log_type_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  void (*v47)(uint64_t, uint64_t, __n128);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t (*v89)(uint64_t, uint64_t);
  uint64_t v90[3];

  v2 = *(void **)(v1 + 224);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v1 + 24), "managedObjectContextForObjectID:", *(_QWORD *)(v1 + 224));
    *(_QWORD *)(v1 + 232) = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(unsigned int *)(v1 + 268);
      v77 = *(_DWORD *)(v1 + 268);
      v83 = *(_QWORD *)(v1 + 136);
      v86 = *(_QWORD *)(v1 + 128);
      v81 = *(_QWORD *)(v1 + 104);
      v6 = *(_QWORD *)(v1 + 80);
      v7 = *(_QWORD *)(v1 + 88);
      v9 = *(_QWORD *)(v1 + 64);
      v8 = *(_QWORD *)(v1 + 72);
      v10 = *(_QWORD *)(v1 + 56);
      v76 = v10;
      v11 = *(void **)(v1 + 24);
      v78 = *(_QWORD *)(v1 + 96);
      v79 = *(int *)(v81 + 24);
      *(_DWORD *)(v1 + 272) = v79;
      v80 = v2;
      v12 = v4;
      v13 = v11;
      sub_100012E18((uint64_t *)&unk_1005CEEB0);
      v14 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
      static Locale.current.getter(v14);
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 104);
      v15(v8, v5, v10);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)(v7, 0, 0, v6, v8, "Parameter title for Find Tables intent", 38, 2);
      *(_QWORD *)(v83 + v79) = EntityProperty<>.init(title:)(v78);
      v16 = *(int *)(v81 + 24);
      *(_DWORD *)(v1 + 276) = v16;
      v17 = v80;
      v18 = v12;
      v19 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
      static Locale.current.getter(v19);
      v15(v8, v77, v76);
      LocalizedStringResource.init(_:table:locale:bundle:comment:)(v7, 0, 0, v6, v8, "Parameter title for Find Tables intent", 38, 2);
      *(_QWORD *)(v86 + v16) = EntityProperty<>.init(title:)(v78);
      v20 = swift_allocObject(&unk_100558D60, 32, 7);
      *(_QWORD *)(v1 + 240) = v20;
      *(_QWORD *)(v20 + 16) = v18;
      *(_QWORD *)(v20 + 24) = v17;
      v21 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v22 = v17;
      v18;
      v23 = (_QWORD *)swift_task_alloc(v21);
      *(_QWORD *)(v1 + 248) = v23;
      *v23 = v1;
      v23[1] = sub_100139CF8;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v1 + 120), sub_10013B0E8, v20, *(_QWORD *)(v1 + 104));
    }
    else
    {
      v49 = *(_QWORD *)(v1 + 208);
      v50 = *(_QWORD *)(v1 + 168);
      v51 = *(_QWORD *)(v1 + 144);
      v52 = *(_QWORD *)(v1 + 152);
      v53 = swift_allocObject(&unk_100558D10, 24, 7);
      *(_QWORD *)(v53 + 16) = 0;
      v54 = v2;
      sub_10013A120(v53, 225, v54, 0x746E45656C626154, (void *)0xEB00000000797469);

      swift_release(v53);
      swift_willThrow(v55);

      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v50, v51);
      swift_bridgeObjectRelease(v49);
      v57 = *(_QWORD *)(v1 + 160);
      v56 = *(_QWORD *)(v1 + 168);
      v59 = *(_QWORD *)(v1 + 128);
      v58 = *(_QWORD *)(v1 + 136);
      v60 = *(_QWORD *)(v1 + 120);
      v62 = *(_QWORD *)(v1 + 88);
      v61 = *(_QWORD *)(v1 + 96);
      v63 = *(_QWORD *)(v1 + 72);
      v64 = *(_QWORD *)(v1 + 80);
      v85 = *(_QWORD *)(v1 + 48);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v64);
      swift_task_dealloc(v63);
      swift_task_dealloc(v85);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 192);
    v26 = *(_QWORD *)(v1 + 160);
    v27 = *(_QWORD *)(v1 + 168);
    v28 = *(_QWORD *)(v1 + 144);
    static Logger.link.getter(a1);
    v29 = v25(v26, v27, v28);
    v30 = Logger.logObject.getter(v29);
    v32 = static os_log_type_t.error.getter(v30, v31);
    v33 = os_log_type_enabled(v30, v32);
    v34 = *(_QWORD *)(v1 + 160);
    v35 = *(_QWORD *)(v1 + 168);
    v36 = *(_QWORD *)(v1 + 144);
    v37 = *(_QWORD *)(v1 + 152);
    v38 = *(_QWORD *)(v1 + 40);
    v39 = *(_QWORD *)(v1 + 48);
    v87 = *(_QWORD *)(v1 + 32);
    if (v33)
    {
      v84 = *(_QWORD *)(v1 + 168);
      v40 = swift_slowAlloc(22, -1);
      v82 = v39;
      v41 = swift_slowAlloc(64, -1);
      v90[0] = v41;
      *(_DWORD *)v40 = 136315394;
      *(_QWORD *)(v40 + 4) = sub_1003A4190(0x746E45656C626154, 0xEB00000000797469, v90);
      *(_WORD *)(v40 + 12) = 2080;
      v42 = sub_100019C6C(&qword_1005D10D0, (uint64_t (*)(uint64_t))&type metadata accessor for TableID, (uint64_t)&protocol conformance descriptor for TableID);
      v43 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v36, v42);
      v45 = v44;
      *(_QWORD *)(v40 + 14) = sub_1003A4190(v43, v44, v90);
      v46 = swift_bridgeObjectRelease(v45);
      v47 = *(void (**)(uint64_t, uint64_t, __n128))(v37 + 8);
      v47(v34, v36, v46);
      _os_log_impl((void *)&_mh_execute_header, v30, v32, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v82, v87);
      v48 = v84;
    }
    else
    {

      v47 = *(void (**)(uint64_t, uint64_t, __n128))(v37 + 8);
      ((void (*)(uint64_t, uint64_t))v47)(v34, v36);
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v39, v87);
      v48 = v35;
    }
    ((void (*)(uint64_t, uint64_t))v47)(v48, v36);
    v65 = *(_QWORD *)(v1 + 200) + 1;
    if (v65 == *(_QWORD *)(v1 + 176))
    {
      v88 = *(_QWORD *)(v1 + 208);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      v66 = *(_QWORD *)(v1 + 160);
      v68 = *(_QWORD *)(v1 + 128);
      v67 = *(_QWORD *)(v1 + 136);
      v69 = *(_QWORD *)(v1 + 120);
      v71 = *(_QWORD *)(v1 + 88);
      v70 = *(_QWORD *)(v1 + 96);
      v73 = *(_QWORD *)(v1 + 72);
      v72 = *(_QWORD *)(v1 + 80);
      v74 = *(_QWORD *)(v1 + 48);
      swift_task_dealloc(*(_QWORD *)(v1 + 168));
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v88);
    }
    else
    {
      *(_QWORD *)(v1 + 200) = v65;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v1 + 192))(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 16)+ ((*(unsigned __int8 *)(v1 + 264) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 264))+ *(_QWORD *)(v1 + 184) * v65, *(_QWORD *)(v1 + 144));
      v89 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D10A8 + dword_1005D10A8);
      v75 = (_QWORD *)swift_task_alloc(unk_1005D10AC);
      *(_QWORD *)(v1 + 216) = v75;
      *v75 = v1;
      v75[1] = sub_10013962C;
      return v89(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 24));
    }
  }
}

uint64_t sub_100139CF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100139FE0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 240));
    v4 = sub_100139D64;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100139D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);

  v1 = *(int *)(v0 + 276);
  v2 = *(int *)(v0 + 272);
  v4 = *(void **)(v0 + 224);
  v3 = *(void **)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 208);
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 120);
  v9 = *(void **)(v0 + 24);

  swift_release(*(_QWORD *)(v7 + v1));
  sub_10013B170(v8, v7, type metadata accessor for TableEntity);

  swift_release(*(_QWORD *)(v6 + v2));
  sub_10013B170(v7, v6, type metadata accessor for TableEntity);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
  v11 = *(_QWORD *)(v0 + 208);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v11 = sub_10016B858(0, *(_QWORD *)(v11 + 16) + 1, 1, *(_QWORD *)(v0 + 208));
  v13 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(v11 + 24);
  if (v13 >= v12 >> 1)
    v11 = sub_10016B858(v12 > 1, v13 + 1, 1, v11);
  v15 = *(void **)(v0 + 224);
  v14 = *(void **)(v0 + 232);
  v16 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v11 + 16) = v13 + 1;
  sub_10013B170(v19, v11+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v13, type metadata accessor for TableEntity);

  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  v21 = *(_QWORD *)(v0 + 200) + 1;
  if (v21 == *(_QWORD *)(v0 + 176))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    v22 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 128);
    v23 = *(_QWORD *)(v0 + 136);
    v25 = *(_QWORD *)(v0 + 120);
    v27 = *(_QWORD *)(v0 + 88);
    v26 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 72);
    v28 = *(_QWORD *)(v0 + 80);
    v32 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v11);
  }
  else
  {
    *(_QWORD *)(v0 + 200) = v21;
    *(_QWORD *)(v0 + 208) = v11;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 264) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 264))+ *(_QWORD *)(v0 + 184) * v21, *(_QWORD *)(v0 + 144));
    v33 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D10A8 + dword_1005D10A8);
    v31 = (_QWORD *)swift_task_alloc(unk_1005D10AC);
    *(_QWORD *)(v0 + 216) = v31;
    *v31 = v0;
    v31[1] = sub_10013962C;
    return v33(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 24));
  }
}

uint64_t sub_100139FE0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(void **)(v0 + 232);
  v1 = *(_QWORD *)(v0 + 240);
  v3 = *(int *)(v0 + 276);
  v4 = *(int *)(v0 + 272);
  v5 = *(void **)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(void **)(v0 + 24);

  swift_release(v1);
  swift_release(*(_QWORD *)(v8 + v3));

  swift_release(*(_QWORD *)(v7 + v4));
  swift_bridgeObjectRelease(v6);

  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v23, v21);
  v11 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 136);
  v14 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 96);
  v17 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 80);
  v22 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10013A120(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  void *v5;
  void **v6;
  id v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  id v30;
  _QWORD v32[3];
  _BYTE v33[80];
  uint64_t v34;

  v6 = (void **)(a1 + 16);
  v5 = *(void **)(a1 + 16);
  if (v5)
  {
    v7 = *(id *)(a1 + 16);
  }
  else
  {
    type metadata accessor for ICError(0);
    v13 = v12;
    v34 = a2;
    v14 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v14, v33);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v16;
    v32[0] = 0;
    v32[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    String.append(_:)(v17);
    v18._countAndFlagsBits = a4;
    v18._object = a5;
    String.append(_:)(v18);
    v19._object = (void *)0x8000000100479A60;
    v19._countAndFlagsBits = 0xD000000000000053;
    String.append(_:)(v19);
    v20 = objc_msgSend(a3, "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v23);
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    String.append(_:)(v25);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0;
    *(_QWORD *)(inited + 56) = 0xE000000000000000;
    v26 = sub_100174AD0(inited);
    v27 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    _BridgedStoredNSError.init(_:userInfo:)(v32, &v34, v26, v13, v27);
    v28 = (void *)v32[0];
    swift_beginAccess(v6, v32, 1, 0);
    v29 = *v6;
    *v6 = v28;
    v7 = v28;

    v5 = 0;
  }
  v30 = v5;
  return v7;
}

uint64_t sub_10013A308(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccountEntity(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  v8 = type metadata accessor for AccountID(0);
  v2[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[13] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v10);
  v2[15] = swift_task_alloc(v10);
  return swift_task_switch(sub_10013A3E4, 0, 0);
}

uint64_t sub_10013A3E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 128) = v2;
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 96);
    v3 = *(_QWORD *)(v0 + 104);
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 216) = v5;
    *(_QWORD *)(v0 + 136) = *(_QWORD *)(v3 + 72);
    v6 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    *(_QWORD *)(v0 + 152) = 0;
    *(_QWORD *)(v0 + 160) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 144) = v6;
    v7 = *(_QWORD *)(v0 + 120);
    v8 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    v9 = swift_bridgeObjectRetain(v1);
    v6(v7, v8, v4, v9);
    v17 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D6550 + dword_1005D6550);
    v10 = (_QWORD *)swift_task_alloc(unk_1005D6554);
    *(_QWORD *)(v0 + 168) = v10;
    *v10 = v0;
    v10[1] = sub_10013A51C;
    return v17(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 112);
    v14 = *(_QWORD *)(v0 + 80);
    v13 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 72);
    v16 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_10013A51C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10013A578, 0, 0);
}

uint64_t sub_10013A578(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  void (*v38)(uint64_t, uint64_t, __n128);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(uint64_t, uint64_t);
  uint64_t v65[2];

  v2 = *(void **)(v1 + 176);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v1 + 24), "managedObjectContextForObjectID:", *(_QWORD *)(v1 + 176));
    *(_QWORD *)(v1 + 184) = v3;
    if (v3)
    {
      v4 = v3;
      v5 = *(void **)(v1 + 24);
      v6 = swift_allocObject(&unk_100558D38, 32, 7);
      *(_QWORD *)(v1 + 192) = v6;
      *(_QWORD *)(v6 + 16) = v4;
      *(_QWORD *)(v6 + 24) = v2;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v8 = v2;
      v9 = v4;
      v10 = v8;
      v11 = v9;
      v12 = v5;
      v13 = v10;
      v11;
      v14 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v1 + 200) = v14;
      *v14 = v1;
      v14[1] = sub_10013AA58;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v1 + 72), sub_10013B0D0, v6, *(_QWORD *)(v1 + 56));
    }
    else
    {
      v40 = *(_QWORD *)(v1 + 160);
      v41 = *(_QWORD *)(v1 + 120);
      v42 = *(_QWORD *)(v1 + 96);
      v43 = *(_QWORD *)(v1 + 104);
      v44 = swift_allocObject(&unk_100558D10, 24, 7);
      *(_QWORD *)(v44 + 16) = 0;
      v45 = v2;
      sub_10013A120(v44, 225, v45, 0x45746E756F636341, (void *)0xED0000797469746ELL);

      swift_release(v44);
      swift_willThrow(v46);

      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v41, v42);
      swift_bridgeObjectRelease(v40);
      v48 = *(_QWORD *)(v1 + 112);
      v47 = *(_QWORD *)(v1 + 120);
      v50 = *(_QWORD *)(v1 + 80);
      v49 = *(_QWORD *)(v1 + 88);
      v51 = *(_QWORD *)(v1 + 72);
      v52 = *(_QWORD *)(v1 + 48);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else
  {
    v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 144);
    v17 = *(_QWORD *)(v1 + 112);
    v18 = *(_QWORD *)(v1 + 120);
    v19 = *(_QWORD *)(v1 + 96);
    static Logger.link.getter(a1);
    v20 = v16(v17, v18, v19);
    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.error.getter(v21, v22);
    v24 = os_log_type_enabled(v21, v23);
    v25 = *(_QWORD *)(v1 + 112);
    v26 = *(_QWORD *)(v1 + 120);
    v27 = *(_QWORD *)(v1 + 96);
    v28 = *(_QWORD *)(v1 + 104);
    v29 = *(_QWORD *)(v1 + 40);
    v30 = *(_QWORD *)(v1 + 48);
    v63 = *(_QWORD *)(v1 + 32);
    if (v24)
    {
      v62 = *(_QWORD *)(v1 + 120);
      v31 = swift_slowAlloc(22, -1);
      v61 = v30;
      v32 = swift_slowAlloc(64, -1);
      v65[0] = v32;
      *(_DWORD *)v31 = 136315394;
      *(_QWORD *)(v31 + 4) = sub_1003A4190(0x45746E756F636341, 0xED0000797469746ELL, v65);
      *(_WORD *)(v31 + 12) = 2080;
      v33 = sub_100019C6C(&qword_1005D6580, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
      v34 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v27, v33);
      v36 = v35;
      *(_QWORD *)(v31 + 14) = sub_1003A4190(v34, v35, v65);
      v37 = swift_bridgeObjectRelease(v36);
      v38 = *(void (**)(uint64_t, uint64_t, __n128))(v28 + 8);
      v38(v25, v27, v37);
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v61, v63);
      v39 = v62;
    }
    else
    {

      v38 = *(void (**)(uint64_t, uint64_t, __n128))(v28 + 8);
      ((void (*)(uint64_t, uint64_t))v38)(v25, v27);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v30, v63);
      v39 = v26;
    }
    ((void (*)(uint64_t, uint64_t))v38)(v39, v27);
    v53 = *(_QWORD *)(v1 + 152) + 1;
    if (v53 == *(_QWORD *)(v1 + 128))
    {
      v54 = *(_QWORD *)(v1 + 160);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      v55 = *(_QWORD *)(v1 + 112);
      v57 = *(_QWORD *)(v1 + 80);
      v56 = *(_QWORD *)(v1 + 88);
      v58 = *(_QWORD *)(v1 + 72);
      v59 = *(_QWORD *)(v1 + 48);
      swift_task_dealloc(*(_QWORD *)(v1 + 120));
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v54);
    }
    else
    {
      *(_QWORD *)(v1 + 152) = v53;
      (*(void (**)(_QWORD, unint64_t, _QWORD))(v1 + 144))(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 16)+ ((*(unsigned __int8 *)(v1 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 216))+ *(_QWORD *)(v1 + 136) * v53, *(_QWORD *)(v1 + 96));
      v64 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D6550 + dword_1005D6550);
      v60 = (_QWORD *)swift_task_alloc(unk_1005D6554);
      *(_QWORD *)(v1 + 168) = v60;
      *v60 = v1;
      v60[1] = sub_10013A51C;
      return v64(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 24));
    }
  }
}

uint64_t sub_10013AA58()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10013B214;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 192));
    v4 = sub_10013AAC4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10013AAC4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  char *v27;

  v2 = *(void **)(v0 + 176);
  v1 = *(void **)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 88);
  v6 = *(_QWORD *)(v0 + 72);
  v7 = *(void **)(v0 + 24);

  sub_10013B170(v6, v5, type metadata accessor for AccountEntity);
  sub_10013B170(v5, v4, type metadata accessor for AccountEntity);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v9 = *(_QWORD *)(v0 + 160);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v9 = sub_10016B9A0(0, *(_QWORD *)(v9 + 16) + 1, 1, *(_QWORD *)(v0 + 160));
  v11 = *(_QWORD *)(v9 + 16);
  v10 = *(_QWORD *)(v9 + 24);
  if (v11 >= v10 >> 1)
    v9 = sub_10016B9A0(v10 > 1, v11 + 1, 1, v9);
  v13 = *(void **)(v0 + 176);
  v12 = *(void **)(v0 + 184);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 88);
  v18 = *(_QWORD *)(v0 + 64);
  *(_QWORD *)(v9 + 16) = v11 + 1;
  sub_10013B170(v17, v9+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v11, type metadata accessor for AccountEntity);

  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  v19 = *(_QWORD *)(v0 + 152) + 1;
  if (v19 == *(_QWORD *)(v0 + 128))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
    v20 = *(_QWORD *)(v0 + 112);
    v22 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 72);
    v24 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 120));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v9);
  }
  else
  {
    *(_QWORD *)(v0 + 152) = v19;
    *(_QWORD *)(v0 + 160) = v9;
    (*(void (**)(_QWORD, unint64_t, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 16)+ ((*(unsigned __int8 *)(v0 + 216) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 216))+ *(_QWORD *)(v0 + 136) * v19, *(_QWORD *)(v0 + 96));
    v27 = (char *)&dword_1005D6550 + dword_1005D6550;
    v26 = (_QWORD *)swift_task_alloc(unk_1005D6554);
    *(_QWORD *)(v0 + 168) = v26;
    *v26 = v0;
    v26[1] = sub_10013A51C;
    return ((uint64_t (*)(_QWORD, _QWORD))v27)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 24));
  }
}

unint64_t sub_10013ACF8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100012E18(&qword_1005D0130);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v4 = *(_BYTE *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  result = sub_1002492FC(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }
  v8 = (_QWORD *)(a1 + 56);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v4;
    *(_QWORD *)(v3[7] + 8 * result) = v5;
    v9 = v3[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      break;
    v3[2] = v11;
    if (!--v1)
      goto LABEL_8;
    v12 = v8 + 2;
    v4 = *((_BYTE *)v8 - 8);
    v13 = *v8;
    swift_bridgeObjectRetain(v5);
    result = sub_1002492FC(v4);
    v8 = v12;
    v5 = v13;
    if ((v14 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_10013ADF8(uint64_t result, char a2)
{
  switch(a2)
  {
    case 0:
    case 2:
    case 3:
      result = swift_errorRetain(result);
      break;
    case 1:
      result = sub_10013AE2C(result);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10013AE2C(unint64_t result)
{
  if (result >= 2)
    return swift_errorRetain();
  return result;
}

unint64_t sub_10013AE3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_100012E18(&qword_1005D01D8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_100012E18(&qword_1005D01E0);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v6);
    v8 = (uint64_t)v5 + *(int *)(v2 + 48);
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_100012CE8(v9, (uint64_t)v5, &qword_1005D01D8);
      v11 = *v5;
      result = sub_1002493C8(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_QWORD *)(v7[6] + 8 * result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for FastSyncPresenceController.EditorDebounceState(0);
      result = sub_10013B170(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, type metadata accessor for FastSyncPresenceController.EditorDebounceState);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_10013AFA8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100012E18(&qword_1005D0140);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
    for (i = (uint64_t *)(a1 + 40); ; i += 2)
    {
      v5 = *(i - 1);
      v6 = *i;
      result = sub_1002493C8(v5);
      if ((v8 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      v9 = 8 * result;
      *(_QWORD *)(v3[6] + v9) = v5;
      *(_QWORD *)(v3[7] + v9) = v6;
      v10 = v3[2];
      v11 = __OFADD__(v10, 1);
      v12 = v10 + 1;
      if (v11)
        goto LABEL_10;
      v3[2] = v12;
      if (!--v1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  return result;
}

uint64_t sub_10013B080()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013B0A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10013B0D0(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1002728C8(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

void sub_10013B0E8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1001587D8(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10013B100(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10013B118(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18(&qword_1005CEFD0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10013B158(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1003AA4F8(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10013B170(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10013B1B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10013B1E0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1002ACB64(*(_QWORD *)(v1 + 32), a1);
}

void sub_10013B1FC(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1002AC82C(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

id sub_10013B248(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  objc_class *ObjectType;
  uint64_t v55;
  uint64_t v56;
  objc_super v57;
  uint64_t v58;

  v2 = v1;
  v56 = a1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v3 = type metadata accessor for Date(0);
  __chkstk_darwin(v3);
  v46 = (char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for ActivityStream(0);
  __chkstk_darwin(v45);
  v43 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100012E18(&qword_1005D0408);
  v42 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44);
  v41 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100012E18(&qword_1005D03B8);
  v7 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100012E18(&qword_1005D8500);
  v10 = __chkstk_darwin(v52);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v41 - v13;
  v15 = sub_100012E18(&qword_1005D03A8);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = OBJC_IVAR___ICActivityStreamViewController_hostingController;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamViewController_hostingController] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICActivityStreamViewController_topInset] = 0;
  v19 = &v2[OBJC_IVAR___ICActivityStreamViewController__selection];
  v58 = 0;
  v50 = v2;
  v20 = v2;
  v21 = sub_100012E18(&qword_1005D67B0);
  Published.init(initialValue:)(&v58, v21);
  v49 = v16;
  v22 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v47 = v19;
  v51 = v15;
  v22(v19, v18, v15);
  v23 = &v20[OBJC_IVAR___ICActivityStreamViewController__pressedItem];
  v24 = type metadata accessor for ActivityStream.Item(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v14, 1, 1, v24);
  sub_10013D428((uint64_t)v14, (uint64_t)v12);
  Published.init(initialValue:)(v12, v52);
  sub_100012DDC((uint64_t)v14, &qword_1005D8500);
  v52 = v7;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v23, v9, v55);
  v25 = OBJC_IVAR___ICActivityStreamViewController_activityStreamUpdater;
  *(_QWORD *)&v20[OBJC_IVAR___ICActivityStreamViewController_activityStreamUpdater] = 0;
  v26 = OBJC_IVAR___ICActivityStreamViewController_activityStreamObservation;
  *(_QWORD *)&v20[OBJC_IVAR___ICActivityStreamViewController_activityStreamObservation] = 0;
  v27 = OBJC_IVAR___ICActivityStreamViewController_coordinator;
  v28 = v56;
  *(_QWORD *)&v20[OBJC_IVAR___ICActivityStreamViewController_coordinator] = v56;
  v29 = objc_allocWithZone((Class)type metadata accessor for ActivityEventResolver(0));
  swift_unknownObjectRetain(v28);
  v30 = v53;
  v31 = ActivityEventResolver.init(object:)(0);
  if (v30)
  {
    swift_unknownObjectRelease(v56, v32);
    swift_unknownObjectRelease(*(_QWORD *)&v20[v27], v33);

    (*(void (**)(char *, uint64_t))(v49 + 8))(v47, v51);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v55);
    swift_release(*(_QWORD *)&v20[v25]);
    v34 = *(id *)&v20[v26];

    swift_release(v34);
    swift_deallocPartialClassInstance(v20, ObjectType, *(unsigned int *)((swift_isaMask & *(_QWORD *)v20) + 0x30), *(unsigned __int16 *)((swift_isaMask & *(_QWORD *)v20) + 0x34));
  }
  else
  {
    v35 = v31;
    v36 = v46;
    static Date.now.getter();
    v37 = v43;
    ActivityStream.init(items:resolver:now:)(_swiftEmptyArrayStorage, v35, v36);
    v38 = v41;
    Published.init(initialValue:)(v37, v45);
    (*(void (**)(char *, char *, uint64_t))(v42 + 32))(&v20[OBJC_IVAR___ICActivityStreamViewController__activityStream], v38, v44);

    v57.receiver = v20;
    v57.super_class = ObjectType;
    v34 = objc_msgSendSuper2(&v57, "initWithNibName:bundle:", 0, 0);
    swift_unknownObjectRelease(v56, v39);
  }
  return v34;
}

void sub_10013B710(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = sub_100012E18(&qword_1005D03B8);
  v3 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005D8500);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v20 - v10;
  v12 = sub_100012E18(&qword_1005D03A8);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);

  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamViewController_hostingController] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamViewController_topInset] = 0;
  v16 = &v1[OBJC_IVAR___ICActivityStreamViewController__selection];
  v21 = 0;
  v17 = sub_100012E18(&qword_1005D67B0);
  Published.init(initialValue:)(&v21, v17);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v15, v12);
  v18 = &v1[OBJC_IVAR___ICActivityStreamViewController__pressedItem];
  v19 = type metadata accessor for ActivityStream.Item(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v11, 1, 1, v19);
  sub_10013D428((uint64_t)v11, (uint64_t)v9);
  Published.init(initialValue:)(v9, v6);
  sub_100012DDC((uint64_t)v11, &qword_1005D8500);
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v18, v5, v20);
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamViewController_activityStreamUpdater] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamViewController_activityStreamObservation] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x80000001004796E0, "MobileNotes/ActivityStreamViewController.swift", 46, 2, 30, 0);
  __break(1u);
}

void sub_10013BA10()
{
  char *v0;
  id v1;
  void *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  void *v9;
  double v10;
  id v11;
  id v12;

  if (!objc_msgSend((id)objc_opt_self(UIView), "_isInAnimationBlockWithAnimationsEnabled")
    || objc_msgSend(v0, "_appearState") == 1)
  {
    v1 = objc_msgSend(v0, "view");
    if (!v1)
    {
      __break(1u);
LABEL_10:
      __break(1u);
      return;
    }
    v2 = v1;
    objc_msgSend(v1, "bounds");
    v4 = v3;
    v6 = v5;
    v8 = v7;

    if (v6 > 0.0)
    {
      v9 = *(void **)&v0[OBJC_IVAR___ICActivityStreamViewController_hostingController];
      if (v9)
      {
        v10 = *(double *)&v0[OBJC_IVAR___ICActivityStreamViewController_topInset];
        v11 = objc_msgSend(v9, "view");
        if (v11)
        {
          v12 = v11;
          objc_msgSend(v11, "setFrame:", v4, v10, v6, v8 - v10);

          return;
        }
        goto LABEL_10;
      }
    }
  }
}

void sub_10013BB8C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;

  v1 = v0;
  swift_getObjectType(v0);
  v2 = sub_100012E18(&qword_1005D03F0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR___ICActivityStreamViewController_hostingController;
  if (!*(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamViewController_hostingController])
  {
    sub_10013D568(&qword_1005D03F8, (uint64_t)&unk_1004542E0);
    v6 = v1;
    ActivityStreamPanelView.init(controller:)();
    v7 = objc_allocWithZone((Class)sub_100012E18(&qword_1005D0400));
    v8 = (void *)UIHostingController.init(rootView:)(v4);
    v9 = objc_msgSend(v8, "view");
    if (v9)
    {
      v10 = v9;
      objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      v11 = objc_msgSend(v8, "view");
      if (v11)
      {
        v12 = v11;
        v13 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
        objc_msgSend(v12, "setBackgroundColor:", v13);

        v14 = *(void **)&v1[v5];
        *(_QWORD *)&v1[v5] = v8;
        v15 = v8;

        objc_msgSend(v6, "addChildViewController:", v15);
        v16 = objc_msgSend(v6, "view");
        if (v16)
        {
          v17 = v16;
          v18 = objc_msgSend(v15, "view");
          if (v18)
          {
            v19 = v18;
            objc_msgSend(v17, "addSubview:", v18);

            objc_msgSend(v15, "didMoveToParentViewController:", v6);
            return;
          }
LABEL_11:
          __break(1u);
          return;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

uint64_t sub_10013BE58@<X0>(_QWORD *a1@<X8>)
{
  return sub_10013BFDC((uint64_t)&unk_1004543A0, (uint64_t)&unk_1004543C8, a1);
}

uint64_t sub_10013BEE8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1004543E8, a2);
  v4 = swift_getKeyPath(&unk_100454410, v3);
  static Published.subscript.getter(&v6);
  swift_release(v4);
  swift_release(KeyPath);
  return v6;
}

uint64_t sub_10013BFC8@<X0>(_QWORD *a1@<X8>)
{
  return sub_10013BFDC((uint64_t)&unk_100454358, (uint64_t)&unk_100454380, a1);
}

uint64_t sub_10013BFDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1, a2);
  v7 = swift_getKeyPath(a2, v6);
  static Published.subscript.getter(a3);
  swift_release(v7);
  return swift_release(KeyPath);
}

void sub_10013C038(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  char v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[4];

  v2 = v1;
  v4 = sub_100012E18(&qword_1005D0398);
  v53 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D03A0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR___ICActivityStreamViewController_activityStreamUpdater;
  v12 = *(_QWORD *)&v1[OBJC_IVAR___ICActivityStreamViewController_activityStreamUpdater];
  v54 = v4;
  if (v12)
  {
    v13 = swift_retain(v12);
    v14 = (void *)ActivityStream.Updater.resolver.getter(v13);
    v15 = swift_release(v12);
    v16 = (void *)ActivityEventResolver.object.getter(v15);

    if (a1)
    {
      if (v16)
      {
        sub_10013D514();
        v17 = a1;
        v18 = static NSObject.== infix(_:_:)();

        if ((v18 & 1) != 0)
          return;
      }
    }
    else
    {
      if (!v16)
        return;

    }
  }
  else if (!a1)
  {
    return;
  }
  v19 = objc_allocWithZone((Class)type metadata accessor for ActivityEventResolver(0));
  v20 = a1;
  v21 = (void *)ActivityEventResolver.init(object:)(a1);
  if (v21)
  {
    v22 = swift_allocObject(&unk_100558EC8, 17, 7);
    *(_BYTE *)(v22 + 16) = 1;
    v51 = v22;
    v52 = v22 + 16;
    KeyPath = swift_getKeyPath(&unk_1004543E8, v23);
    v26 = v2;
    v27 = swift_getKeyPath(&unk_100454410, v25);
    v55[0] = 0;
    v28 = v26;
    static Published.subscript.setter(v55, v28, KeyPath, v27);
    swift_beginAccess(&v28[OBJC_IVAR___ICActivityStreamViewController__selection], v55, 33, 0);
    v29 = v21;
    v30 = sub_100012E18(&qword_1005D03A8);
    Published.projectedValue.getter(v30);
    swift_endAccess(v55);
    v31 = sub_100016638(&qword_1005D03B0, &qword_1005D03A0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v32 = Publisher.eraseToAnyPublisher()(v7, v31);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    swift_beginAccess(&v28[OBJC_IVAR___ICActivityStreamViewController__pressedItem], v55, 33, 0);
    v33 = sub_100012E18(&qword_1005D03B8);
    Published.projectedValue.getter(v33);
    swift_endAccess(v55);
    v34 = sub_100016638(&qword_1005D03C0, &qword_1005D0398, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v35 = v54;
    v36 = Publisher.eraseToAnyPublisher()(v54, v34);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v6, v35);
    v37 = type metadata accessor for ActivityStream.Updater(0);
    swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v38 = ActivityStream.Updater.init(resolver:selection:pressedItem:)(v29, v32, v36);
    v39 = *(_QWORD *)&v26[v11];
    *(_QWORD *)&v26[v11] = v38;
    swift_release(v39);
    v40 = *(_QWORD *)&v26[v11];
    if (v40)
    {
      v41 = swift_retain(*(_QWORD *)&v26[v11]);
      v42 = ActivityStream.Updater.activityStream.getter(v41);
      swift_release(v40);
      v55[0] = v42;
      v43 = swift_allocObject(&unk_100558EF0, 24, 7);
      swift_unknownObjectWeakInit(v43 + 16, v28);
      v44 = (_QWORD *)swift_allocObject(&unk_100558F18, 40, 7);
      v44[2] = v43;
      v44[3] = v29;
      v45 = v51;
      v44[4] = v51;
      v46 = v29;
      swift_retain(v45);
      v47 = sub_100012E18(&qword_1005D03C8);
      v48 = sub_100016638((unint64_t *)&unk_1005D03D0, &qword_1005D03C8, (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v49 = Publisher<>.sink(receiveValue:)(sub_10013D508, v44, v47, v48);
      swift_release(v44);

      swift_release(v55[0]);
    }
    else
    {

      v49 = 0;
      v45 = v51;
    }
    v50 = *(_QWORD *)&v28[OBJC_IVAR___ICActivityStreamViewController_activityStreamObservation];
    *(_QWORD *)&v28[OBJC_IVAR___ICActivityStreamViewController_activityStreamObservation] = v49;
    swift_release(v50);
    swift_beginAccess(v52, v55, 1, 0);
    *(_BYTE *)(v45 + 16) = 0;
    swift_release(v45);
  }
}

uint64_t sub_10013C4A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t Strong;
  uint64_t v27;
  void *v28;
  uint64_t KeyPath;
  uint64_t v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[24];
  _BYTE v47[24];

  v45 = a1;
  v7 = sub_100012E18((uint64_t *)&unk_1005D03E0);
  __chkstk_darwin(v7);
  v43 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActivityStream(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v42 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (uint64_t *)((char *)&v42 - v21);
  __chkstk_darwin(v20);
  v24 = (char *)&v42 - v23;
  v44 = a2;
  a2 += 16;
  v25 = (char *)(a4 + 16);
  swift_beginAccess(a2, v47, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v28 = (void *)Strong;
    KeyPath = swift_getKeyPath(&unk_1004543A0, v27);
    v31 = swift_getKeyPath(&unk_1004543C8, v30);
    static Published.subscript.getter(v22);
    swift_release(v31);
    swift_release(KeyPath);

    (*(void (**)(char *, _QWORD *, uint64_t))(v13 + 32))(v24, v22, v12);
  }
  else
  {
    static Date.now.getter();
    ActivityStream.init(items:resolver:now:)(_swiftEmptyArrayStorage, a3, v11);
  }
  swift_beginAccess(v25, v46, 0, 0);
  v32 = *v25;
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v34 = v45;
  v33(v19, v45, v12);
  v33(v16, (uint64_t)v24, v12);
  if ((v32 & 1) != 0)
  {
    v35 = *(void (**)(char *, uint64_t))(v13 + 8);
    v35(v16, v12);
    v36 = ((uint64_t (*)(char *, uint64_t))v35)(v19, v12);
LABEL_8:
    v39 = 0;
    goto LABEL_9;
  }
  v37 = (uint64_t)v43;
  v33(v43, (uint64_t)v16, v12);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v37, 0, 1, v12);
  v38 = ActivityStream.animatesTransition(from:)(v37);
  sub_100012DDC(v37, (uint64_t *)&unk_1005D03E0);
  v35 = *(void (**)(char *, uint64_t))(v13 + 8);
  v35(v16, v12);
  v36 = ((uint64_t (*)(char *, uint64_t))v35)(v19, v12);
  if ((v38 & 1) == 0)
    goto LABEL_8;
  v36 = static Animation.easeOut.getter(v36);
  v39 = v36;
LABEL_9:
  __chkstk_darwin(v36);
  *(&v42 - 2) = v44;
  *(&v42 - 1) = v34;
  v40 = sub_100012E18((uint64_t *)&unk_1005D68A0);
  withAnimation<A>(_:_:)(v39, sub_10013D550, &v42 - 4, v40);
  swift_release(v39);
  return ((uint64_t (*)(char *, uint64_t))v35)(v24, v12);
}

void sub_10013C7F0(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void *Strong;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  _BYTE v20[24];
  uint64_t KeyPath;

  v6 = type metadata accessor for ActivityStream(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = ((uint64_t (*)(void))__chkstk_darwin)();
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v8);
  v12 = &v20[-v11 - 8];
  a1 += 16;
  swift_beginAccess(a1, v20, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v14(v12, a2, v6);
    KeyPath = swift_getKeyPath(&unk_1004543A0, v15);
    v17 = swift_getKeyPath(&unk_1004543C8, v16);
    v14(v10, (uint64_t)v12, v6);
    v18 = Strong;
    static Published.subscript.setter(v10, v18, KeyPath, v17);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);

  }
  *a3 = Strong == 0;
}

id sub_10013C9C8()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = *(id *)(v0 + OBJC_IVAR___ICActivityStreamViewController_activityStreamUpdater);
  if (v1)
  {
    v2 = swift_retain(v1);
    v3 = (void *)ActivityStream.Updater.resolver.getter(v2);
    v4 = swift_release(v1);
    v5 = (void *)ActivityEventResolver.object.getter(v4);

    if (v5)
    {
      v1 = objc_msgSend(v5, "objectID");

    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t sub_10013CB5C()
{
  return type metadata accessor for ActivityStreamViewController(0);
}

uint64_t type metadata accessor for ActivityStreamViewController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D0358;
  if (!qword_1005D0358)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ActivityStreamViewController);
  return result;
}

void sub_10013CBA0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];

  v8[0] = "\b";
  v8[1] = &unk_100454288;
  v8[2] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_10013CC88(319);
  if (v3 <= 0x3F)
  {
    v8[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_10013CCDC(319, (unint64_t *)&unk_1005D0370, &qword_1005D67B0);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_10013CCDC(319, (unint64_t *)&unk_1005D0380, &qword_1005D8500);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = &unk_100454288;
        v8[7] = &unk_100454288;
        swift_updateClassMetadata2(a1, 256, 8, v8, a1 + 80);
      }
    }
  }
}

void sub_10013CC88(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D0368)
  {
    v2 = type metadata accessor for ActivityStream(255);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D0368);
  }
}

void sub_10013CCDC(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_10001537C(a3);
    v6 = type metadata accessor for Published(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

void *sub_10013CD28()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_10013CD34()
{
  uint64_t v0;

  return swift_unknownObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICActivityStreamViewController_coordinator));
}

uint64_t sub_10013CD44@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_10013CEB4(a1, (uint64_t)&unk_1004543A0, (uint64_t)&unk_1004543C8, a2);
}

uint64_t sub_10013CD58(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v3 = type metadata accessor for ActivityStream(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1004543A0, v7);
  v10 = swift_getKeyPath(&unk_1004543C8, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  static Published.subscript.setter(v6, v1, KeyPath, v10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
}

uint64_t (*sub_10013CE24(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_1004543A0, v4);
  v3[4] = KeyPath;
  v7 = swift_getKeyPath(&unk_1004543C8, v6);
  v3[5] = v7;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v7);
  return sub_10013CE9C;
}

uint64_t sub_10013CEA0@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_10013CEB4(a1, (uint64_t)&unk_100454358, (uint64_t)&unk_100454380, a2);
}

uint64_t sub_10013CEB4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;

  KeyPath = swift_getKeyPath(a2, a1);
  v8 = swift_getKeyPath(a3, v7);
  static Published.subscript.getter(a4);
  swift_release(v8);
  return swift_release(KeyPath);
}

uint64_t sub_10013CF14(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = sub_100012E18(&qword_1005D8500);
  __chkstk_darwin(v3);
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_100454358, v6);
  v9 = swift_getKeyPath(&unk_100454380, v8);
  sub_10013D428(a1, (uint64_t)v5);
  static Published.subscript.setter(v5, v1, KeyPath, v9);
  return sub_100012DDC(a1, &qword_1005D8500);
}

uint64_t (*sub_10013CFD0(_QWORD *a1))()
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  KeyPath = swift_getKeyPath(&unk_100454358, v4);
  v3[4] = KeyPath;
  v7 = swift_getKeyPath(&unk_100454380, v6);
  v3[5] = v7;
  v3[6] = static Published.subscript.modify(v3, v1, KeyPath, v7);
  return sub_10013CE9C;
}

void sub_10013D048(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (void *)*a1;
  v2 = *(_QWORD *)(*a1 + 40);
  v3 = *(_QWORD *)(*a1 + 32);
  (*(void (**)(_QWORD, _QWORD))(*a1 + 48))(*a1, 0);
  swift_release(v2);
  swift_release(v3);
  free(v1);
}

uint64_t sub_10013D094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v3);
  return ActivityStreamControlling.isItemEnabled(_:)(a1, ObjectType, a3);
}

uint64_t sub_10013D0D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v4);
  return ActivityStreamControlling.press(_:isPressed:)(a1, a2, ObjectType, a4);
}

uint64_t sub_10013D114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(v3);
  return ActivityStreamControlling.select(_:)(a1, ObjectType, a3);
}

uint64_t sub_10013D150@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t result;

  ObjectType = swift_getObjectType(v2);
  result = ObservableObject<>.objectWillChange.getter(ObjectType, a1);
  *a2 = result;
  return result;
}

uint64_t sub_10013D18C()
{
  return sub_10013D568(&qword_1005D0390, (uint64_t)&unk_1004542A8);
}

uint64_t sub_10013D1B0(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void *v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for ActivityStream(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v18 - v9;
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v18 - v9, a1, v4);
  v12 = *a2;
  KeyPath = swift_getKeyPath(&unk_1004543A0, v13);
  v16 = swift_getKeyPath(&unk_1004543C8, v15);
  v11(v8, (uint64_t)v10, v4);
  static Published.subscript.setter(v8, v12, KeyPath, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
}

uint64_t sub_10013D2B0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;

  KeyPath = swift_getKeyPath(a2, a1);
  v8 = swift_getKeyPath(a3, v7);
  static Published.subscript.getter(a4);
  swift_release(v8);
  return swift_release(KeyPath);
}

uint64_t sub_10013D314@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_10013D2B0(a1, (uint64_t)&unk_100454358, (uint64_t)&unk_100454380, a2);
}

uint64_t sub_10013D338(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005D8500);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v16 - v8;
  sub_10013D428(a1, (uint64_t)&v16 - v8);
  v10 = *a2;
  KeyPath = swift_getKeyPath(&unk_100454358, v11);
  v14 = swift_getKeyPath(&unk_100454380, v13);
  sub_10013D428((uint64_t)v9, (uint64_t)v7);
  static Published.subscript.setter(v7, v10, KeyPath, v14);
  return sub_100012DDC((uint64_t)v9, &qword_1005D8500);
}

uint64_t sub_10013D428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D8500);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013D470@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  return sub_10013D2B0(a1, (uint64_t)&unk_1004543A0, (uint64_t)&unk_1004543C8, a2);
}

uint64_t sub_10013D4A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10013D4B0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10013D4D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10013D508(uint64_t a1)
{
  uint64_t v1;

  return sub_10013C4A8(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

unint64_t sub_10013D514()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D9080;
  if (!qword_1005D9080)
  {
    v1 = objc_opt_self(ICCloudSyncingObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D9080);
  }
  return result;
}

void sub_10013D550(BOOL *a1@<X8>)
{
  uint64_t v1;

  sub_10013C7F0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10013D568(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ActivityStreamViewController(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_10013D5A8(void *a1)
{
  _QWORD *v1;
  Class isa;
  Class v4;
  Class v5;
  Class v6;
  id v7;

  objc_msgSend(a1, "setIsPasswordProtected:", 1);
  objc_msgSend(a1, "setCryptoIterationCount:", *v1);
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCryptoSalt:", isa);

  v4 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCryptoInitializationVector:", v4);

  v5 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCryptoTag:", v5);

  v6 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, "setCryptoWrappedKey:", v6);

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setPasswordHint:", v7);

}

uint64_t sub_10013D6AC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013D6EC + 4 * byte_100454430[a1]))(0x6F69746172657469, 0xEE00746E756F436ELL);
}

uint64_t sub_10013D6EC()
{
  return 1953259891;
}

unint64_t sub_10013D6FC()
{
  return 0xD000000000000014;
}

uint64_t sub_10013D718()
{
  return 6775156;
}

uint64_t sub_10013D728()
{
  return 0x4B64657070617277;
}

uint64_t sub_10013D744()
{
  return 0x64726F7773736170;
}

uint64_t sub_10013D764()
{
  return 1635017060;
}

BOOL sub_10013D774(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10013D788()
{
  unsigned __int8 *v0;

  return sub_10013D6AC(*v0);
}

uint64_t sub_10013D790@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10013E064(a1, a2);
  *a3 = result;
  return result;
}

void sub_10013D7B4(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10013D7C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013E918();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013D7E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013E918();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013D810(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  __int128 v19;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005D0428);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_10013E918();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s13EncryptedDataV10CodingKeysON, &_s13EncryptedDataV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v19) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v19, v5);
  if (!v2)
  {
    v19 = *(_OWORD *)(v3 + 1);
    v18 = 1;
    v13 = sub_10013E9A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
    v19 = *(_OWORD *)(v3 + 3);
    v18 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
    v19 = *(_OWORD *)(v3 + 5);
    v18 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
    v19 = *(_OWORD *)(v3 + 7);
    v18 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
    v14 = v3[9];
    v15 = v3[10];
    LOBYTE(v19) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v19, v5);
    v19 = *(_OWORD *)(v3 + 11);
    v18 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_10013DA58@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;

  sub_10013E358(a1, (uint64_t *)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_QWORD *)(a2 + 96) = v8;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_10013DAB4(_QWORD *a1)
{
  return sub_10013D810(a1);
}

void sub_10013DAC8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;

  if (objc_msgSend(a1, "isPasswordProtected"))
  {
    v36 = a3;
    v34 = objc_msgSend(a1, "cryptoIterationCount");
    v8 = objc_msgSend(a1, "cryptoSalt");
    if (v8)
    {
      v9 = v8;
      v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v32 = v11;
      v33 = v10;

    }
    else
    {
      v32 = 0xC000000000000000;
      v33 = 0;
    }
    v12 = objc_msgSend(a1, "cryptoInitializationVector");
    v35 = a2;
    if (v12)
    {
      v13 = v12;
      v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v16 = v15;

    }
    else
    {
      v14 = 0;
      v16 = 0xC000000000000000;
    }
    v17 = objc_msgSend(a1, "cryptoTag");
    if (v17)
    {
      v18 = v17;
      v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;

    }
    else
    {
      v19 = 0;
      v21 = 0xC000000000000000;
    }
    v22 = objc_msgSend(a1, "cryptoWrappedKey");
    if (v22)
    {
      v23 = v22;
      v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

    }
    else
    {
      v24 = 0;
      v26 = 0xC000000000000000;
    }
    v27 = objc_msgSend(a1, "passwordHint");
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

    }
    else
    {
      v29 = 0;
      v31 = 0xE000000000000000;
    }
    *a4 = v34;
    a4[1] = v33;
    a4[2] = v32;
    a4[3] = v14;
    a4[4] = v16;
    a4[5] = v19;
    a4[6] = v21;
    a4[7] = v24;
    a4[8] = v26;
    a4[9] = v29;
    a4[10] = v31;
    a4[11] = v35;
    a4[12] = v36;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10013DCA0(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t _s13EncryptedDataVwxx(_QWORD *a1)
{
  sub_10013DD30(a1[1], a1[2]);
  sub_10013DD30(a1[3], a1[4]);
  sub_10013DD30(a1[5], a1[6]);
  sub_10013DD30(a1[7], a1[8]);
  swift_bridgeObjectRelease(a1[10]);
  return sub_10013DD30(a1[11], a1[12]);
}

uint64_t sub_10013DD30(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *_s13EncryptedDataVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = a2[1];
  *a1 = *a2;
  v5 = a2[2];
  sub_10013DCA0(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  v6 = a2[3];
  v7 = a2[4];
  sub_10013DCA0(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  v8 = a2[5];
  v9 = a2[6];
  sub_10013DCA0(v8, v9);
  a1[5] = v8;
  a1[6] = v9;
  v10 = a2[7];
  v11 = a2[8];
  sub_10013DCA0(v10, v11);
  a1[7] = v10;
  a1[8] = v11;
  v12 = a2[10];
  a1[9] = a2[9];
  a1[10] = v12;
  v14 = a2[11];
  v13 = a2[12];
  swift_bridgeObjectRetain(v12);
  sub_10013DCA0(v14, v13);
  a1[11] = v14;
  a1[12] = v13;
  return a1;
}

_QWORD *_s13EncryptedDataVwca(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  sub_10013DCA0(v4, v5);
  v6 = a1[1];
  v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_10013DD30(v6, v7);
  v8 = a2[3];
  v9 = a2[4];
  sub_10013DCA0(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10013DD30(v10, v11);
  v12 = a2[5];
  v13 = a2[6];
  sub_10013DCA0(v12, v13);
  v14 = a1[5];
  v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10013DD30(v14, v15);
  v16 = a2[7];
  v17 = a2[8];
  sub_10013DCA0(v16, v17);
  v18 = a1[7];
  v19 = a1[8];
  a1[7] = v16;
  a1[8] = v17;
  sub_10013DD30(v18, v19);
  a1[9] = a2[9];
  v20 = a2[10];
  v21 = a1[10];
  a1[10] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v23 = a2[11];
  v22 = a2[12];
  sub_10013DCA0(v23, v22);
  v24 = a1[11];
  v25 = a1[12];
  a1[11] = v23;
  a1[12] = v22;
  sub_10013DD30(v24, v25);
  return a1;
}

__n128 _s13EncryptedDataVwtk(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t _s13EncryptedDataVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10013DD30(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10013DD30(v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10013DD30(v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10013DD30(v10, v11);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 88);
  v14 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10013DD30(v13, v14);
  return a1;
}

uint64_t _s13EncryptedDataVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s13EncryptedDataVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s13EncryptedDataVMa()
{
  return &_s13EncryptedDataVN;
}

uint64_t sub_10013E064(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x6F69746172657469 && a2 == 0xEE00746E756F436ELL)
  {
    v5 = 0xEE00746E756F436ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F69746172657469, 0xEE00746E756F436ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1953259891 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1953259891, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000014)
  {
    v8 = 0x8000000100479D00;
    if (a2 == 0x8000000100479D00)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x8000000100479D00, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 6775156 && a2 == 0xE300000000000000)
  {
    v9 = 0xE300000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6775156, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x4B64657070617277 && a2 == 0xEA00000000007965)
  {
    v10 = 0xEA00000000007965;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B64657070617277, 0xEA00000000007965, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x64726F7773736170 && a2 == 0xEC000000746E6948)
  {
    v11 = 0xEC000000746E6948;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64726F7773736170, 0xEC000000746E6948, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_10013E358@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;

  v5 = sub_100012E18(&qword_1005D0410);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_10013E918();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s13EncryptedDataV10CodingKeysON, &_s13EncryptedDataV10CodingKeysON, v11, v9, v10);
  if (v2)
    return sub_1000153C0(a1);
  LOBYTE(v55) = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
  v57 = 1;
  v13 = sub_10013E95C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  v57 = 2;
  v50 = v56;
  v51 = v55;
  sub_10013DCA0(v55, v56);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  v57 = 3;
  v53 = v56;
  v54 = v55;
  sub_10013DCA0(v55, v56);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  v48 = v12;
  v14 = v55;
  v57 = 4;
  v49 = v56;
  sub_10013DCA0(v55, v56);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  v52 = v14;
  v15 = v49;
  v16 = v55;
  LOBYTE(v55) = 5;
  v46 = v56;
  v47 = v16;
  sub_10013DCA0(v16, v56);
  v44 = KeyedDecodingContainer.decode(_:forKey:)(&v55, v5);
  v45 = v17;
  v57 = 6;
  swift_bridgeObjectRetain(v17);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v55, &type metadata for Data, &v57, v5, &type metadata for Data, v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v55;
  v18 = v56;
  v42 = v56;
  v43 = v55;
  sub_10013DCA0(v51, v50);
  sub_10013DCA0(v54, v53);
  sub_10013DCA0(v52, v15);
  v20 = v46;
  v21 = v47;
  sub_10013DCA0(v47, v46);
  v22 = v45;
  swift_bridgeObjectRetain(v45);
  sub_10013DCA0(v19, v18);
  swift_bridgeObjectRelease(v22);
  v23 = v21;
  v24 = v20;
  sub_10013DD30(v23, v20);
  v25 = v52;
  sub_10013DD30(v52, v15);
  v26 = v53;
  v27 = v54;
  sub_10013DD30(v54, v53);
  v28 = v50;
  v29 = v51;
  sub_10013DD30(v51, v50);
  sub_1000153C0(a1);
  sub_10013DD30(v29, v28);
  sub_10013DD30(v27, v26);
  v30 = v25;
  v31 = v49;
  sub_10013DD30(v25, v49);
  v32 = v47;
  v33 = v24;
  sub_10013DD30(v47, v24);
  v34 = v45;
  swift_bridgeObjectRelease(v45);
  v36 = v42;
  v35 = v43;
  result = sub_10013DD30(v43, v42);
  v38 = v51;
  *a2 = v48;
  a2[1] = v38;
  v39 = v54;
  a2[2] = v50;
  a2[3] = v39;
  a2[4] = v53;
  a2[5] = v30;
  a2[6] = v31;
  a2[7] = v32;
  v40 = v44;
  a2[8] = v33;
  a2[9] = v40;
  a2[10] = v34;
  a2[11] = v35;
  a2[12] = v36;
  return result;
}

unint64_t sub_10013E918()
{
  unint64_t result;

  result = qword_1005D0418;
  if (!qword_1005D0418)
  {
    result = swift_getWitnessTable(&unk_100454564, &_s13EncryptedDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D0418);
  }
  return result;
}

unint64_t sub_10013E95C()
{
  unint64_t result;

  result = qword_1005D0420;
  if (!qword_1005D0420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1005D0420);
  }
  return result;
}

unint64_t sub_10013E9A0()
{
  unint64_t result;

  result = qword_1005D0430;
  if (!qword_1005D0430)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1005D0430);
  }
  return result;
}

uint64_t _s13EncryptedDataV10CodingKeysOwet(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s13EncryptedDataV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10013EAC0 + 4 * byte_10045443C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10013EAF4 + 4 * byte_100454437[v4]))();
}

uint64_t sub_10013EAF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013EAFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013EB04);
  return result;
}

uint64_t sub_10013EB10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013EB18);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10013EB1C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013EB24(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10013EB30(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *_s13EncryptedDataV10CodingKeysOMa()
{
  return &_s13EncryptedDataV10CodingKeysON;
}

unint64_t sub_10013EB4C()
{
  unint64_t result;

  result = qword_1005D0438;
  if (!qword_1005D0438)
  {
    result = swift_getWitnessTable(&unk_10045453C, &_s13EncryptedDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D0438);
  }
  return result;
}

unint64_t sub_10013EB94()
{
  unint64_t result;

  result = qword_1005D0440;
  if (!qword_1005D0440)
  {
    result = swift_getWitnessTable(&unk_1004544AC, &_s13EncryptedDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D0440);
  }
  return result;
}

unint64_t sub_10013EBDC()
{
  unint64_t result;

  result = qword_1005D0448;
  if (!qword_1005D0448)
  {
    result = swift_getWitnessTable(&unk_1004544D4, &_s13EncryptedDataV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005D0448);
  }
  return result;
}

BOOL static AppIntentsError.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AppIntentsError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int AppIntentsError.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void AppIntentsError.localizedStringResource.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for Locale(0);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

uint64_t sub_10013ED84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v5 = ((uint64_t (*)(uint64_t, unint64_t))String.LocalizationValue.init(stringLiteral:))(0x1000000000000051, 0x800000010047A600);
  ((void (*)(uint64_t))static Locale.current.getter)(v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v0, enum case for LocalizedStringResource.BundleDescription.main(_:), v3);
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, const char *, uint64_t, uint64_t))LocalizedStringResource.init(_:table:locale:bundle:comment:))(v2, 0, 0, v1, v0, "Change setting error description", 32, 2);
}

void sub_10013F42C()
{
  char *v0;

  AppIntentsError.localizedStringResource.getter(*v0);
}

uint64_t AppIntentsError.errorDescription.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppIntentsError.localizedStringResource.getter(a1);
  return String.init(localized:)(v4);
}

unint64_t sub_10013F4A0()
{
  unint64_t result;

  result = qword_1005D0450;
  if (!qword_1005D0450)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppIntentsError, &type metadata for AppIntentsError);
    atomic_store(result, (unint64_t *)&qword_1005D0450);
  }
  return result;
}

unint64_t sub_10013F4E8()
{
  unint64_t result;

  result = qword_1005D1F00;
  if (!qword_1005D1F00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppIntentsError, &type metadata for AppIntentsError);
    atomic_store(result, (unint64_t *)&qword_1005D1F00);
  }
  return result;
}

uint64_t sub_10013F52C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v1 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  AppIntentsError.localizedStringResource.getter(*v0);
  return String.init(localized:)(v3);
}

uint64_t getEnumTagSinglePayload for AppIntentsError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEB)
    goto LABEL_17;
  if (a2 + 21 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 21) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 21;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 21;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 21;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x16;
  v8 = v6 - 22;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppIntentsError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 21 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 21) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEA)
    return ((uint64_t (*)(void))((char *)&loc_10013F678 + 4 * byte_1004545E5[v4]))();
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_10013F6AC + 4 * byte_1004545E0[v4]))();
}

uint64_t sub_10013F6AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013F6B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013F6BCLL);
  return result;
}

uint64_t sub_10013F6C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013F6D0);
  *(_BYTE *)result = a2 + 21;
  return result;
}

uint64_t sub_10013F6D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013F6DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppIntentsError()
{
  return &type metadata for AppIntentsError;
}

__n128 initializeBufferWithCopyOfBuffer for NotesFeature(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NotesFeature(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NotesFeature(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 17) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NotesFeature()
{
  return &type metadata for NotesFeature;
}

uint64_t sub_10013F768(uint64_t a1, uint64_t a2)
{
  return sub_10013F908(a1, a2, (uint64_t)"Notes", 5);
}

uint64_t sub_10013F778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FCA4(a1, a2, a3, (uint64_t (*)(void))sub_1000199D4, (uint64_t (*)(void))sub_10013F78C);
}

unint64_t sub_10013F78C()
{
  unint64_t result;

  result = qword_1005D0458;
  if (!qword_1005D0458)
  {
    result = swift_getWitnessTable(&unk_100454744, &type metadata for NotesFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0458);
  }
  return result;
}

const char *sub_10013F7D0()
{
  return "PencilAndPaper";
}

uint64_t sub_10013F7E4(uint64_t a1, uint64_t a2)
{
  return sub_10013F908(a1, a2, (uint64_t)"PencilAndPaper", 14);
}

const char *sub_10013F7F4()
{
  return "TelephonyUtilities";
}

uint64_t sub_10013F808(uint64_t a1, uint64_t a2)
{
  return sub_10013F908(a1, a2, (uint64_t)"TelephonyUtilities", 18);
}

ValueMetadata *type metadata accessor for GreyParrotFeature()
{
  return &type metadata for GreyParrotFeature;
}

ValueMetadata *type metadata accessor for SiriSMARTFeature()
{
  return &type metadata for SiriSMARTFeature;
}

ValueMetadata *type metadata accessor for UniquelyiPadFeature()
{
  return &type metadata for UniquelyiPadFeature;
}

ValueMetadata *type metadata accessor for PencilAndPaperFeature()
{
  return &type metadata for PencilAndPaperFeature;
}

ValueMetadata *type metadata accessor for TelephonyUtilitiesFeature()
{
  return &type metadata for TelephonyUtilitiesFeature;
}

ValueMetadata *type metadata accessor for AppIntentsFeature()
{
  return &type metadata for AppIntentsFeature;
}

const char *sub_10013F878()
{
  return "GreyParrot";
}

uint64_t sub_10013F88C(uint64_t a1, uint64_t a2)
{
  return sub_10013F908(a1, a2, (uint64_t)"GreyParrot", 10);
}

const char *sub_10013F89C()
{
  return "ResponseFramework";
}

uint64_t sub_10013F8B0(uint64_t a1, uint64_t a2)
{
  return sub_10013F908(a1, a2, (uint64_t)"ResponseFramework", 17);
}

const char *sub_10013F8C0()
{
  return "UIKit";
}

uint64_t sub_10013F8D4(uint64_t a1, uint64_t a2)
{
  return sub_10013F908(a1, a2, (uint64_t)"UIKit", 5);
}

const char *sub_10013F8E4()
{
  return "Link";
}

uint64_t sub_10013F8F8(uint64_t a1, uint64_t a2)
{
  return sub_10013F908(a1, a2, (uint64_t)"Link", 4);
}

uint64_t sub_10013F908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  uint64_t v12;

  v5 = *v4;
  v6 = v4[1];
  v7 = *((unsigned __int8 *)v4 + 16);
  v12 = StaticString.description.getter(a3, a4, 2);
  v8._countAndFlagsBits = 47;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = StaticString.description.getter(v5, v6, v7);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  return v12;
}

uint64_t sub_10013F984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FCA4(a1, a2, a3, (uint64_t (*)(void))sub_10013F998, (uint64_t (*)(void))sub_10013F9DC);
}

unint64_t sub_10013F998()
{
  unint64_t result;

  result = qword_1005DCC20;
  if (!qword_1005DCC20)
  {
    result = swift_getWitnessTable(&unk_100454AFC, &type metadata for AppIntentsFeature);
    atomic_store(result, (unint64_t *)&qword_1005DCC20);
  }
  return result;
}

unint64_t sub_10013F9DC()
{
  unint64_t result;

  result = qword_1005D0460;
  if (!qword_1005D0460)
  {
    result = swift_getWitnessTable(&unk_100454874, &type metadata for AppIntentsFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0460);
  }
  return result;
}

uint64_t sub_10013FA20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FCA4(a1, a2, a3, (uint64_t (*)(void))sub_10013FA34, (uint64_t (*)(void))sub_10013FA78);
}

unint64_t sub_10013FA34()
{
  unint64_t result;

  result = qword_1005D0468;
  if (!qword_1005D0468)
  {
    result = swift_getWitnessTable(&unk_100454ACC, &type metadata for TelephonyUtilitiesFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0468);
  }
  return result;
}

unint64_t sub_10013FA78()
{
  unint64_t result;

  result = qword_1005D0470;
  if (!qword_1005D0470)
  {
    result = swift_getWitnessTable(&unk_1004548B8, &type metadata for TelephonyUtilitiesFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0470);
  }
  return result;
}

uint64_t sub_10013FABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FCA4(a1, a2, a3, (uint64_t (*)(void))sub_10013FAD0, (uint64_t (*)(void))sub_10013FB14);
}

unint64_t sub_10013FAD0()
{
  unint64_t result;

  result = qword_1005D8F80;
  if (!qword_1005D8F80)
  {
    result = swift_getWitnessTable(&unk_100454A9C, &type metadata for PencilAndPaperFeature);
    atomic_store(result, (unint64_t *)&qword_1005D8F80);
  }
  return result;
}

unint64_t sub_10013FB14()
{
  unint64_t result;

  result = qword_1005D0478;
  if (!qword_1005D0478)
  {
    result = swift_getWitnessTable(&unk_1004548FC, &type metadata for PencilAndPaperFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0478);
  }
  return result;
}

uint64_t sub_10013FB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FCA4(a1, a2, a3, (uint64_t (*)(void))sub_10013FB6C, (uint64_t (*)(void))sub_10013FBB0);
}

unint64_t sub_10013FB6C()
{
  unint64_t result;

  result = qword_1005D0480;
  if (!qword_1005D0480)
  {
    result = swift_getWitnessTable(&unk_100454A6C, &type metadata for UniquelyiPadFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0480);
  }
  return result;
}

unint64_t sub_10013FBB0()
{
  unint64_t result;

  result = qword_1005D0488;
  if (!qword_1005D0488)
  {
    result = swift_getWitnessTable(&unk_100454940, &type metadata for UniquelyiPadFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0488);
  }
  return result;
}

uint64_t sub_10013FBF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FCA4(a1, a2, a3, (uint64_t (*)(void))sub_10013FC08, (uint64_t (*)(void))sub_10013FC4C);
}

unint64_t sub_10013FC08()
{
  unint64_t result;

  result = qword_1005D0490;
  if (!qword_1005D0490)
  {
    result = swift_getWitnessTable(&unk_100454A3C, &type metadata for SiriSMARTFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0490);
  }
  return result;
}

unint64_t sub_10013FC4C()
{
  unint64_t result;

  result = qword_1005D0498;
  if (!qword_1005D0498)
  {
    result = swift_getWitnessTable(&unk_100454984, &type metadata for SiriSMARTFeature);
    atomic_store(result, (unint64_t *)&qword_1005D0498);
  }
  return result;
}

uint64_t sub_10013FC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10013FCA4(a1, a2, a3, (uint64_t (*)(void))sub_10013FCD4, (uint64_t (*)(void))sub_10013FD18);
}

uint64_t sub_10013FCA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a4();
  result = a5();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10013FCD4()
{
  unint64_t result;

  result = qword_1005D04A0;
  if (!qword_1005D04A0)
  {
    result = swift_getWitnessTable(&unk_100454A0C, &type metadata for GreyParrotFeature);
    atomic_store(result, (unint64_t *)&qword_1005D04A0);
  }
  return result;
}

unint64_t sub_10013FD18()
{
  unint64_t result;

  result = qword_1005D04A8;
  if (!qword_1005D04A8)
  {
    result = swift_getWitnessTable(&unk_1004549C8, &type metadata for GreyParrotFeature);
    atomic_store(result, (unint64_t *)&qword_1005D04A8);
  }
  return result;
}

uint64_t VisibleFoldersQuery.init()()
{
  return _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
}

uint64_t VisibleFoldersQuery.init(requireRenamingSupport:)()
{
  return VisibleAccountsQuery.init(requireFolderCreationSupport:)();
}

uint64_t VisibleFoldersQuery.init(requireNewNoteDestinationSupport:)()
{
  return sub_10014386C();
}

uint64_t VisibleFoldersQuery.init(requireMoveNoteDestinationSupport:)()
{
  return sub_100143988();
}

uint64_t VisibleFoldersQuery.init(requireFolderCreationSupport:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v6 = 0xD000000000000024;
  v7 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v0 = type metadata accessor for AppDependencyManager(0);
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(v8, v1);
  sub_100012E18(&qword_1005CEE50);
  v6 = 0xD000000000000021;
  v7 = 0x8000000100476B70;
  v3 = AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(v8, v4);
  return v2;
}

uint64_t VisibleFoldersQuery.entities(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  v4 = type metadata accessor for Logger(0);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v3[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10013FF48, 0, 0);
}

uint64_t sub_10013FF48()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  AppDependency.wrappedValue.getter(v0 + 6);
  v1 = v0[6];
  v0[14] = v1;
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D02C8 + dword_1005D02C8);
  v2 = (_QWORD *)swift_task_alloc(unk_1005D02CC);
  v0[15] = v2;
  *v2 = v0;
  v2[1] = sub_10013FFC0;
  return v4(v0[8], v1);
}

uint64_t sub_10013FFC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v4 = *(void **)(*v2 + 112);
  v3 = *(_QWORD *)(*v2 + 120);
  v5 = *v2;
  *(_QWORD *)(v5 + 128) = a1;
  swift_task_dealloc(v3);

  if (!v1)
    return swift_task_switch(sub_10014004C, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v5 + 104));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10014004C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 16));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  swift_release(v3);
  swift_release(v2);
  v4 = swift_bridgeObjectRetain_n(v1, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 128);
    v19 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 104);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v22 = v9;
    *(_DWORD *)v8 = 136642819;
    v10 = type metadata accessor for FolderEntity(0);
    v11 = swift_bridgeObjectRetain(v7);
    v12 = Array.description.getter(v11, v10);
    v14 = v13;
    swift_bridgeObjectRelease(v7);
    *(_QWORD *)(v0 + 56) = sub_1003A4190(v12, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v8 + 4);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "VisibleFoldersQuery: Suggesting folders: %{sensitive}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v20);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 88);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);

    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 128));
}

uint64_t VisibleFoldersQuery.suggestedEntities()(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_DWORD *)(v3 + 1784) = a3;
  *(_QWORD *)(v3 + 1624) = a2;
  *(_QWORD *)(v3 + 1576) = a1;
  v4 = type metadata accessor for ManagedEntityContextType(0);
  *(_QWORD *)(v3 + 1672) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 1680) = v5;
  *(_QWORD *)(v3 + 1688) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001402E0, 0, 0);
}

uint64_t sub_1001402E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  int v6;
  int v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  char v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 1688);
  v2 = *(_QWORD *)(v0 + 1680);
  v3 = *(_QWORD *)(v0 + 1672);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1336));
  v4 = *(void **)(v0 + 1336);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ManagedEntityContextType.html(_:), v3);
  *(_QWORD *)(v0 + 1696) = ICUnifiedNoteContext.managedObjectContext(for:)(v1);
  v5 = *(_DWORD *)(v0 + 1784);
  v13 = v5 & 1;
  LODWORD(v2) = HIBYTE(v5) & 1;
  v6 = HIWORD(v5) & 1;
  v7 = (v5 >> 8) & 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1680) + 8))(*(_QWORD *)(v0 + 1688), *(_QWORD *)(v0 + 1672));

  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1480));
  v8 = *(void **)(v0 + 1480);
  *(_QWORD *)(v0 + 1704) = objc_msgSend(v8, "modernManagedObjectContext");

  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1384));
  v9 = *(void **)(v0 + 1384);
  sub_1000163BC(0, &qword_1005D04C0, ICUnifiedNoteContext_ptr);
  v10 = static ICUnifiedNoteContext.$prefersViewContext.getter();
  *(_BYTE *)(v0 + 1788) = 0;
  swift_task_localValuePush(v10, v0 + 1788, &type metadata for Bool);
  sub_100141ECC(v9, v7, v6, v2, v13, &v14);
  swift_task_localValuePop();
  swift_release(v10);

  *(_QWORD *)(v0 + 1712) = v14;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to ICCoreDataIndexer.reloadSnapshot()[1]);
  *(_QWORD *)(v0 + 1720) = v11;
  *v11 = v0;
  v11[1] = sub_1001404E4;
  return ICCoreDataIndexer.reloadSnapshot()();
}

uint64_t sub_1001404E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1720);
  *(_QWORD *)(*(_QWORD *)v1 + 1728) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100140540, 0, 0);
}

uint64_t sub_100140540()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v15;
  int v16;
  char v17;
  void *v18;

  v1 = *(void **)(v0 + 1704);
  v18 = *(void **)(v0 + 1696);
  v2 = *(_DWORD *)(v0 + 1784);
  v3 = *(_QWORD *)(v0 + 1624);
  v4 = *(_QWORD *)(v0 + 1576);
  v5 = sub_100143AA4(*(id *)(v0 + 1728));
  v7 = v6;
  v8 = swift_allocObject(&unk_100559758, 64, 7);
  *(_QWORD *)(v0 + 1736) = v8;
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v3;
  v17 = v2 & 1;
  *(_BYTE *)(v8 + 32) = v2 & 1;
  v16 = (v2 >> 8) & 1;
  *(_BYTE *)(v8 + 33) = v16;
  v15 = HIWORD(v2) & 1;
  *(_BYTE *)(v8 + 34) = BYTE2(v2) & 1;
  v9 = HIBYTE(v2) & 1;
  *(_BYTE *)(v8 + 35) = v9;
  *(_QWORD *)(v8 + 40) = v5;
  *(_QWORD *)(v8 + 48) = v7;
  *(_QWORD *)(v8 + 56) = v1;
  swift_retain(v4);
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v10 = v1;
  swift_retain(v8);
  v11 = sub_10001537C(&qword_1005D04D8);
  swift_asyncLet_begin(v0 + 656, 0, v11, &unk_1005D04D0, v8, v0 + 1528);
  v12 = swift_allocObject(&unk_100559780, 64, 7);
  *(_QWORD *)(v0 + 1744) = v12;
  *(_QWORD *)(v12 + 16) = v4;
  *(_QWORD *)(v12 + 24) = v3;
  *(_BYTE *)(v12 + 32) = v17;
  *(_BYTE *)(v12 + 33) = v16;
  *(_BYTE *)(v12 + 34) = v15;
  *(_BYTE *)(v12 + 35) = v9;
  *(_QWORD *)(v12 + 40) = v5;
  *(_QWORD *)(v12 + 48) = v7;
  *(_QWORD *)(v12 + 56) = v18;
  swift_retain(v4);
  swift_retain(v3);
  v13 = v18;
  swift_retain(v12);
  swift_asyncLet_begin(v0 + 16, 0, v11, &unk_1005D04E8, v12, v0 + 1432);
  return swift_asyncLet_get_throwing(v0 + 656, v0 + 1528, sub_10014070C, v0 + 1536);
}

uint64_t sub_10014070C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v1[219] = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 2, v1 + 179, sub_100140934, v1 + 168);
  v3 = v1[191];
  v1[220] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_asyncLet_get_throwing(v1 + 2, v1 + 179, sub_100140794, v1 + 198);
}

uint64_t sub_100140794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 1768) = v0;
  if (v0)
    v2 = sub_100140A30;
  else
    v2 = sub_1001407BC;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1001407BC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[220];
  v2 = swift_bridgeObjectRetain(v0[179]);
  v3 = sub_100140D40(v2, v1);
  v0[222] = sub_1001419F0(v3);
  return swift_asyncLet_finish(v0 + 2, v0 + 179, sub_100140830, v0 + 174);
}

uint64_t sub_100140830()
{
  return swift_task_switch(sub_100140844, 0, 0);
}

uint64_t sub_100140844()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1744));
  return swift_asyncLet_finish(v0 + 656, v0 + 1528, sub_100140898, v0 + 1296);
}

uint64_t sub_100140898()
{
  return swift_task_switch(sub_1001408AC, 0, 0);
}

uint64_t sub_1001408AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 1744);
  v2 = *(_QWORD *)(v0 + 1736);
  v3 = *(void **)(v0 + 1728);
  v4 = *(void **)(v0 + 1712);
  v5 = *(void **)(v0 + 1696);
  v6 = *(_QWORD *)(v0 + 1688);

  swift_release_n(v2, 2);
  swift_release(v1);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 1776));
}

uint64_t sub_100140934()
{
  return swift_task_switch(sub_100140948, 0, 0);
}

uint64_t sub_100140948()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1744));
  return swift_asyncLet_finish(v0 + 656, v0 + 1528, sub_10014099C, v0 + 1632);
}

uint64_t sub_10014099C()
{
  return swift_task_switch(sub_1001409B0, 0, 0);
}

uint64_t sub_1001409B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 1744);
  v2 = *(_QWORD *)(v0 + 1736);
  v3 = *(void **)(v0 + 1728);
  v4 = *(void **)(v0 + 1712);
  v5 = *(void **)(v0 + 1696);

  swift_release_n(v2, 2);
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100140A30()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1760));
  return swift_asyncLet_finish(v0 + 16, v0 + 1432, sub_100140A84, v0 + 1488);
}

uint64_t sub_100140A84()
{
  return swift_task_switch(sub_100140A98, 0, 0);
}

uint64_t sub_100140A98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1744));
  return swift_asyncLet_finish(v0 + 656, v0 + 1528, sub_100140AEC, v0 + 1440);
}

uint64_t sub_100140AEC()
{
  return swift_task_switch(sub_100140B00, 0, 0);
}

uint64_t sub_100140B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 1744);
  v2 = *(_QWORD *)(v0 + 1736);
  v3 = *(void **)(v0 + 1728);
  v4 = *(void **)(v0 + 1712);
  v5 = *(void **)(v0 + 1696);

  swift_release_n(v2, 2);
  swift_release(v1);
  swift_task_dealloc(*(_QWORD *)(v0 + 1688));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100140B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;

  *(_QWORD *)(v7 + 16) = a1;
  v10 = (_QWORD *)swift_task_alloc(dword_1005D056C);
  *(_QWORD *)(v7 + 24) = v10;
  *v10 = v7;
  v10[1] = sub_100140BD8;
  return sub_100143EE8(a5, a7);
}

uint64_t sub_100140BD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch(sub_10014535C, 0, 0);
}

uint64_t sub_100140C54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;

  *(_QWORD *)(v7 + 16) = a1;
  v10 = (_QWORD *)swift_task_alloc(dword_1005D056C);
  *(_QWORD *)(v7 + 24) = v10;
  *v10 = v7;
  v10[1] = sub_100140CAC;
  return sub_100143EE8(a6, a7);
}

uint64_t sub_100140CAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch(sub_100140D28, 0, 0);
}

uint64_t sub_100140D28()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100140D40(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t (*v18)(uint64_t);
  unint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  unint64_t v69;
  int *v70;
  _QWORD v71[10];

  v69 = a2;
  v70 = (int *)type metadata accessor for FolderEntity(0);
  v62 = *((_QWORD *)v70 - 1);
  v3 = __chkstk_darwin(v70);
  v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v60 = (uint64_t)&v57 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v57 - v9;
  result = __chkstk_darwin(v8);
  v61 = (uint64_t)&v57 - v12;
  v13 = 0;
  v63 = a1;
  v14 = *(_QWORD *)(a1 + 56);
  v58 = a1 + 56;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  if (v15 < 64)
    v16 = ~(-1 << v15);
  else
    v16 = -1;
  v17 = v16 & v14;
  v59 = (unint64_t)(v15 + 63) >> 6;
  v18 = type metadata accessor for FolderEntity;
  while (1)
  {
    if (v17)
    {
      v64 = (v17 - 1) & v17;
      v65 = v13;
      v23 = __clz(__rbit64(v17)) | (v13 << 6);
      goto LABEL_26;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_46;
    }
    if (v24 >= v59)
      goto LABEL_44;
    v25 = *(_QWORD *)(v58 + 8 * v24);
    v26 = v13 + 1;
    if (!v25)
    {
      v26 = v13 + 2;
      if (v13 + 2 >= v59)
        goto LABEL_44;
      v25 = *(_QWORD *)(v58 + 8 * v26);
      if (!v25)
      {
        v26 = v13 + 3;
        if (v13 + 3 >= v59)
          goto LABEL_44;
        v25 = *(_QWORD *)(v58 + 8 * v26);
        if (!v25)
        {
          v26 = v13 + 4;
          if (v13 + 4 >= v59)
            goto LABEL_44;
          v25 = *(_QWORD *)(v58 + 8 * v26);
          if (!v25)
            break;
        }
      }
    }
LABEL_25:
    v64 = (v25 - 1) & v25;
    v65 = v26;
    v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_26:
    v28 = *(_QWORD *)(v62 + 72);
    v29 = v61;
    sub_100145220(*(_QWORD *)(v63 + 48) + v28 * v23, v61, v18);
    v30 = v18;
    sub_10013B170(v29, (uint64_t)v10, v18);
    v31 = v69;
    Hasher.init(_seed:)(v71, *(_QWORD *)(v69 + 40));
    v32 = type metadata accessor for FolderID(0);
    v33 = sub_100019C6C(&qword_1005D0570, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
    swift_bridgeObjectRetain(v31);
    dispatch thunk of Hashable.hash(into:)(v71, v32, v33);
    v34 = v70;
    v35 = &v10[v70[5]];
    v36 = type metadata accessor for URL(0);
    v37 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v68 = v35;
    dispatch thunk of Hashable.hash(into:)(v71, v36, v37);
    v38 = &v10[v34[6]];
    v39 = *(_QWORD *)v38;
    v40 = *((_QWORD *)v38 + 1);
    swift_bridgeObjectRetain(v40);
    String.hash(into:)(v71, v39, v40);
    swift_bridgeObjectRelease(v40);
    v41 = &v10[v34[7]];
    v42 = *(_QWORD *)v41;
    v43 = *((_QWORD *)v41 + 1);
    swift_bridgeObjectRetain(v43);
    String.hash(into:)(v71, v42, v43);
    swift_bridgeObjectRelease(v43);
    v67 = v34[8];
    Hasher._combine(_:)(v10[v67]);
    v66 = v34[9];
    Hasher._combine(_:)(v10[v66]);
    v44 = Hasher._finalize()();
    v45 = -1 << *(_BYTE *)(v31 + 32);
    v46 = v44 & ~v45;
    v47 = v31 + 56;
    if (((*(_QWORD *)(v31 + 56 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) != 0)
    {
      v48 = ~v45;
      v18 = v30;
      while (1)
      {
        sub_100145220(*(_QWORD *)(v69 + 48) + v46 * v28, (uint64_t)v5, v18);
        if ((static FolderID.== infix(_:_:)(v5, v10) & 1) != 0
          && (static URL.== infix(_:_:)(&v5[v70[5]], v68) & 1) != 0)
        {
          v49 = &v5[v70[6]];
          v50 = *((_QWORD *)v49 + 1);
          v51 = *((_QWORD *)v38 + 1);
          v52 = *(_QWORD *)v49 == *(_QWORD *)v38 && v50 == v51;
          if (v52
            || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v49, v50, *(_QWORD *)v38, v51, 0) & 1) != 0)
          {
            v53 = &v5[v70[7]];
            v54 = *((_QWORD *)v53 + 1);
            v55 = *((_QWORD *)v41 + 1);
            v56 = *(_QWORD *)v53 == *(_QWORD *)v41 && v54 == v55;
            if ((v56
               || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v53, v54, *(_QWORD *)v41, v55, 0) & 1) != 0)
              && v5[v70[8]] == v10[v67]
              && v5[v70[9]] == v10[v66])
            {
              break;
            }
          }
        }
        v18 = v30;
        sub_100145264((uint64_t)v5, v30);
        v46 = (v46 + 1) & v48;
        if (((*(_QWORD *)(v47 + ((v46 >> 3) & 0xFFFFFFFFFFFFF8)) >> v46) & 1) == 0)
          goto LABEL_6;
      }
      v18 = v30;
      sub_100145264((uint64_t)v5, v30);
      v22 = v69;
    }
    else
    {
      v18 = v30;
LABEL_6:
      v19 = v69;
      swift_bridgeObjectRelease(v69);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      v21 = v60;
      sub_100145220((uint64_t)v10, v60, v18);
      v71[0] = v19;
      sub_10030612C(v21, v46, isUniquelyReferenced_nonNull_native);
      v69 = v71[0];
      v22 = 0x8000000000000000;
    }
    swift_bridgeObjectRelease(v22);
    result = sub_100145264((uint64_t)v10, v18);
    v17 = v64;
    v13 = v65;
  }
  v27 = v13 + 5;
  if (v13 + 5 >= v59)
  {
LABEL_44:
    swift_release(v63);
    return v69;
  }
  v25 = *(_QWORD *)(v58 + 8 * v27);
  if (v25)
  {
    v26 = v13 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    v26 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v26 >= v59)
      goto LABEL_44;
    v25 = *(_QWORD *)(v58 + 8 * v26);
    ++v27;
    if (v25)
      goto LABEL_25;
  }
LABEL_46:
  __break(1u);
  return result;
}

void sub_100141294(uint64_t a1, void *a2)
{
  sub_1001412DC(a1, a2, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr, &qword_1005D0578, (void (*)(id *, id))sub_1003030D0);
}

void sub_1001412B8(uint64_t a1, void *a2)
{
  sub_1001412DC(a1, a2, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr, (unint64_t *)&qword_1005D3CC0, (void (*)(id *, id))sub_100302C94);
}

void sub_1001412DC(uint64_t a1, void *a2, unint64_t *a3, _QWORD *a4, unint64_t *a5, void (*a6)(id *, id))
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v34;
  uint64_t v35;
  id v36[7];

  v7 = a1;
  v36[1] = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 >= 0)
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    v11 = __CocoaSet.makeIterator()(a1);
    v12 = sub_1000163BC(0, a3, a4);
    v13 = sub_1001452A0(a5, a3, a4);
    a1 = Set.Iterator.init(_cocoa:)(v11, v12, v13);
    v7 = (uint64_t)v36[2];
    v34 = v36[3];
    v14 = (uint64_t)v36[4];
    v15 = v36[5];
    v16 = (unint64_t)v36[6];
  }
  else
  {
    v15 = 0;
    v17 = -1 << *(_BYTE *)(a1 + 32);
    v34 = (_QWORD *)(a1 + 56);
    v14 = ~v17;
    v18 = -v17;
    if (v18 < 64)
      v19 = ~(-1 << v18);
    else
      v19 = -1;
    v16 = v19 & *(_QWORD *)(a1 + 56);
  }
  v20 = (unint64_t)(v14 + 64) >> 6;
  if (v7 < 0)
    goto LABEL_12;
  while (1)
  {
    if (v16)
    {
      v21 = (v16 - 1) & v16;
      v22 = __clz(__rbit64(v16)) | ((_QWORD)v15 << 6);
      v23 = (char *)v15;
      goto LABEL_31;
    }
    v29 = (uint64_t)v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v29 >= v20)
      goto LABEL_34;
    v30 = v34[v29];
    v23 = (char *)v15 + 1;
    if (!v30)
    {
      v23 = (char *)v15 + 2;
      if ((uint64_t)v15 + 2 >= v20)
        goto LABEL_34;
      v30 = v34[(_QWORD)v23];
      if (!v30)
      {
        v23 = (char *)v15 + 3;
        if ((uint64_t)v15 + 3 >= v20)
          goto LABEL_34;
        v30 = v34[(_QWORD)v23];
        if (!v30)
        {
          v23 = (char *)v15 + 4;
          if ((uint64_t)v15 + 4 >= v20)
            goto LABEL_34;
          v30 = v34[(_QWORD)v23];
          if (!v30)
          {
            v23 = (char *)v15 + 5;
            if ((uint64_t)v15 + 5 >= v20)
              goto LABEL_34;
            v30 = v34[(_QWORD)v23];
            if (!v30)
            {
              v31 = (char *)v15 + 6;
              while ((char *)v20 != v31)
              {
                v30 = v34[(_QWORD)v31++];
                if (v30)
                {
                  v23 = v31 - 1;
                  goto LABEL_30;
                }
              }
LABEL_34:
              sub_1001452E0(v7);
              return;
            }
          }
        }
      }
    }
LABEL_30:
    v21 = (v30 - 1) & v30;
    v22 = __clz(__rbit64(v30)) + ((_QWORD)v23 << 6);
LABEL_31:
    v27 = *(id *)(*(_QWORD *)(v7 + 48) + 8 * v22);
    if (!v27)
      goto LABEL_34;
    while (1)
    {
      a6(v36, v27);

      v15 = v23;
      v16 = v21;
      if ((v7 & 0x8000000000000000) == 0)
        break;
LABEL_12:
      v24 = __CocoaSet.Iterator.next()(a1);
      if (v24)
      {
        v25 = v24;
        v35 = v24;
        v26 = sub_1000163BC(0, a3, a4);
        swift_unknownObjectRetain(v25);
        swift_dynamicCast(v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, v26, 7);
        v27 = v36[0];
        swift_unknownObjectRelease(v25, v28);
        v23 = (char *)v15;
        v21 = v16;
        if (v27)
          continue;
      }
      goto LABEL_34;
    }
  }
  __break(1u);
}

uint64_t sub_10014158C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  Swift::Int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  _QWORD v55[9];

  v54 = type metadata accessor for AccountEntity(0);
  v50 = *(_QWORD *)(v54 - 8);
  v4 = __chkstk_darwin(v54);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v48 = (uint64_t)&v46 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v46 - v10;
  result = __chkstk_darwin(v9);
  v49 = (uint64_t)&v46 - v13;
  v14 = 0;
  v51 = a1;
  v15 = *(_QWORD *)(a1 + 56);
  v46 = a1 + 56;
  v16 = 1 << *(_BYTE *)(a1 + 32);
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v18 = v17 & v15;
  v47 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      v52 = (v18 - 1) & v18;
      v53 = v14;
      v22 = __clz(__rbit64(v18)) | (v14 << 6);
      goto LABEL_25;
    }
    v23 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v23 >= v47)
      goto LABEL_36;
    v24 = *(_QWORD *)(v46 + 8 * v23);
    v25 = v14 + 1;
    if (!v24)
    {
      v25 = v14 + 2;
      if (v14 + 2 >= v47)
        goto LABEL_36;
      v24 = *(_QWORD *)(v46 + 8 * v25);
      if (!v24)
      {
        v25 = v14 + 3;
        if (v14 + 3 >= v47)
          goto LABEL_36;
        v24 = *(_QWORD *)(v46 + 8 * v25);
        if (!v24)
        {
          v25 = v14 + 4;
          if (v14 + 4 >= v47)
            goto LABEL_36;
          v24 = *(_QWORD *)(v46 + 8 * v25);
          if (!v24)
            break;
        }
      }
    }
LABEL_24:
    v52 = (v24 - 1) & v24;
    v53 = v25;
    v22 = __clz(__rbit64(v24)) + (v25 << 6);
LABEL_25:
    v27 = *(_QWORD *)(v50 + 72);
    v28 = v49;
    sub_100145220(*(_QWORD *)(v51 + 48) + v27 * v22, v49, type metadata accessor for AccountEntity);
    sub_10013B170(v28, (uint64_t)v11, type metadata accessor for AccountEntity);
    Hasher.init(_seed:)(v55, *(_QWORD *)(a2 + 40));
    v29 = type metadata accessor for AccountID(0);
    v30 = sub_100019C6C((unint64_t *)&unk_1005D64C0, (uint64_t (*)(uint64_t))&type metadata accessor for AccountID, (uint64_t)&protocol conformance descriptor for AccountID);
    swift_bridgeObjectRetain(a2);
    dispatch thunk of Hashable.hash(into:)(v55, v29, v30);
    v31 = v54;
    v32 = &v11[*(int *)(v54 + 20)];
    v33 = type metadata accessor for URL(0);
    v34 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(v55, v33, v34);
    v35 = &v11[*(int *)(v31 + 24)];
    v36 = *(_QWORD *)v35;
    v37 = *((_QWORD *)v35 + 1);
    swift_bridgeObjectRetain(v37);
    String.hash(into:)(v55, v36, v37);
    swift_bridgeObjectRelease(v37);
    v38 = Hasher._finalize()();
    v39 = -1 << *(_BYTE *)(a2 + 32);
    v40 = v38 & ~v39;
    if (((*(_QWORD *)(a2 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) != 0)
    {
      v41 = ~v39;
      while (1)
      {
        sub_100145220(*(_QWORD *)(a2 + 48) + v40 * v27, (uint64_t)v6, type metadata accessor for AccountEntity);
        if ((static AccountID.== infix(_:_:)(v6, v11) & 1) != 0
          && (static URL.== infix(_:_:)(&v6[*(int *)(v54 + 20)], v32) & 1) != 0)
        {
          v42 = &v6[*(int *)(v54 + 24)];
          v43 = *((_QWORD *)v42 + 1);
          v44 = *((_QWORD *)v35 + 1);
          v45 = *(_QWORD *)v42 == *(_QWORD *)v35 && v43 == v44;
          if (v45
            || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v42, v43, *(_QWORD *)v35, v44, 0) & 1) != 0)
          {
            break;
          }
        }
        sub_100145264((uint64_t)v6, type metadata accessor for AccountEntity);
        v40 = (v40 + 1) & v41;
        if (((*(_QWORD *)(a2 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFF8)) >> v40) & 1) == 0)
          goto LABEL_5;
      }
      sub_100145264((uint64_t)v6, type metadata accessor for AccountEntity);
      v21 = a2;
    }
    else
    {
LABEL_5:
      swift_bridgeObjectRelease(a2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a2);
      v20 = v48;
      sub_100145220((uint64_t)v11, v48, type metadata accessor for AccountEntity);
      v55[0] = a2;
      sub_100307788(v20, v40, isUniquelyReferenced_nonNull_native);
      a2 = v55[0];
      v21 = 0x8000000000000000;
    }
    swift_bridgeObjectRelease(v21);
    v18 = v52;
    v14 = v53;
    result = sub_100145264((uint64_t)v11, type metadata accessor for AccountEntity);
  }
  v26 = v14 + 5;
  if (v14 + 5 >= v47)
  {
LABEL_36:
    swift_release(v51);
    return a2;
  }
  v24 = *(_QWORD *)(v46 + 8 * v26);
  if (v24)
  {
    v25 = v14 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v25 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v25 >= v47)
      goto LABEL_36;
    v24 = *(_QWORD *)(v46 + 8 * v25);
    ++v26;
    if (v24)
      goto LABEL_24;
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_1001419F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v2 = type metadata accessor for FolderEntity(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v31 - v8;
  result = __chkstk_darwin(v7);
  v12 = (char *)&v31 - v11;
  v13 = 0;
  v36 = a1;
  v16 = *(_QWORD *)(a1 + 56);
  v15 = a1 + 56;
  v14 = v16;
  v17 = 1 << *(_BYTE *)(v15 - 24);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v14;
  v32 = v15;
  v33 = (unint64_t)(v17 + 63) >> 6;
  v20 = _swiftEmptyArrayStorage;
  v34 = v6;
  v35 = v3;
  if ((v18 & v14) == 0)
    goto LABEL_5;
LABEL_4:
  v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v21 | (v13 << 6); ; i = __clz(__rbit64(v24)) + (v13 << 6))
  {
    v26 = *(_QWORD *)(v3 + 72);
    sub_100145220(*(_QWORD *)(v36 + 48) + v26 * i, (uint64_t)v9, type metadata accessor for FolderEntity);
    sub_10013B170((uint64_t)v9, (uint64_t)v12, type metadata accessor for FolderEntity);
    sub_10013B170((uint64_t)v12, (uint64_t)v6, type metadata accessor for FolderEntity);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    v37 = v20;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100137060(0, v20[2] + 1, 1);
      v20 = v37;
    }
    v29 = v20[2];
    v28 = v20[3];
    if (v29 >= v28 >> 1)
    {
      sub_100137060(v28 > 1, v29 + 1, 1);
      v20 = v37;
    }
    v20[2] = v29 + 1;
    v3 = v35;
    v30 = (uint64_t)v20
        + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))
        + v29 * v26;
    v6 = v34;
    result = sub_10013B170((uint64_t)v34, v30, type metadata accessor for FolderEntity);
    if (v19)
      goto LABEL_4;
LABEL_5:
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v23 >= v33)
      goto LABEL_27;
    v24 = *(_QWORD *)(v32 + 8 * v23);
    ++v13;
    if (!v24)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v33)
        goto LABEL_27;
      v24 = *(_QWORD *)(v32 + 8 * v13);
      if (!v24)
      {
        v13 = v23 + 2;
        if (v23 + 2 >= v33)
          goto LABEL_27;
        v24 = *(_QWORD *)(v32 + 8 * v13);
        if (!v24)
        {
          v13 = v23 + 3;
          if (v23 + 3 >= v33)
            goto LABEL_27;
          v24 = *(_QWORD *)(v32 + 8 * v13);
          if (!v24)
            break;
        }
      }
    }
LABEL_20:
    v19 = (v24 - 1) & v24;
  }
  v25 = v23 + 4;
  if (v25 >= v33)
  {
LABEL_27:
    swift_release(v36);
    return (uint64_t)v20;
  }
  v24 = *(_QWORD *)(v32 + 8 * v25);
  if (v24)
  {
    v13 = v25;
    goto LABEL_20;
  }
  while (1)
  {
    v13 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v13 >= v33)
      goto LABEL_27;
    v24 = *(_QWORD *)(v32 + 8 * v13);
    ++v25;
    if (v24)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100141CC4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;

  result = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4 & 1;
  *(_BYTE *)(a1 + 17) = v5 & 1;
  *(_BYTE *)(a1 + 18) = v6 & 1;
  *(_BYTE *)(a1 + 19) = v7 & 1;
  return result;
}

uint64_t sub_100141D08(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *v1;
  v4 = v1[1];
  v6 = (_QWORD *)swift_task_alloc(dword_1005D04B4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100141D68;
  return VisibleFoldersQuery.entities(for:)(a1, v5, v4);
}

uint64_t sub_100141D68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*v2 + 16);
  v5 = *v2;
  v6 = swift_task_dealloc(v4);
  if (!v1)
    v6 = a1;
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100141DBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  int v10;
  int v11;
  int v12;
  int v13;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(unsigned __int8 *)(v1 + 16);
  v6 = *(unsigned __int8 *)(v1 + 17);
  v7 = *(unsigned __int8 *)(v1 + 18);
  v8 = *(unsigned __int8 *)(v1 + 19);
  v9 = (_QWORD *)swift_task_alloc(dword_1005D04BC);
  *(_QWORD *)(v2 + 24) = v9;
  if (v6)
    v10 = 256;
  else
    v10 = 0;
  v11 = v10 | v5;
  if (v7)
    v12 = 0x10000;
  else
    v12 = 0;
  if (v8)
    v13 = 0x1000000;
  else
    v13 = 0;
  *v9 = v2;
  v9[1] = sub_10013B218;
  return VisibleFoldersQuery.suggestedEntities()(v3, v4, v11 | v12 | v13);
}

uint64_t sub_100141E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  unint64_t v6;

  v5 = (_QWORD *)swift_task_alloc(async function pointer to EntityQuery.results()[1]);
  *(_QWORD *)(v2 + 16) = v5;
  v6 = sub_100127E60();
  *v5 = v2;
  v5[1] = sub_100130768;
  return EntityQuery.results()(a1, a2, v6);
}

void sub_100141ECC(void *a1@<X0>, int a2@<W1>, int a3@<W2>, char a4@<W3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  char v19;
  uint64_t v20;
  int v21;
  int v22;

  v21 = a2;
  v22 = a3;
  v11 = type metadata accessor for ManagedEntityContextType(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(a1, "modernManagedObjectContext");
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for ManagedEntityContextType.html(_:), v11);
  v16 = ICUnifiedNoteContext.managedObjectContext(for:)(v14);
  if (v6)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);

  }
  else
  {
    v17 = (void *)v16;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    v18 = objc_msgSend(objc_allocWithZone((Class)ICFolderCoreDataIndexer), "initWithLegacyManagedObjectContext:modernManagedObjectContext:", v17, v15);
    objc_msgSend(v18, "setShouldIncludeTrash:", 0);
    v19 = v22;
    if ((v21 & 1) != 0 || (v22 & 1) != 0 || (a4 & 1) != 0)
    {
      objc_msgSend(v18, "setShouldIncludeSmartFolders:", 0);
      objc_msgSend(v18, "setShouldIncludeSystemPaper:", 2);
      objc_msgSend(v18, "setShouldIncludeMathNotes:", 2);
      objc_msgSend(v18, "setShouldIncludeCallNotes:", 2);
      objc_msgSend(v18, "setShouldIncludeSharedWithYou:", 2);
    }
    if ((v19 & 1) != 0 || (a4 & 1) != 0)
    {
      objc_msgSend(v18, "setShouldIncludeLegacyAccounts:", 0);
      if ((a4 & 1) != 0)
        objc_msgSend(v18, "setShouldIncludeDefaultFolder:", 0);
    }
    if ((a5 & 1) != 0)
    {
      objc_msgSend(v18, "setShouldIncludeDefaultFolder:", 0);
      objc_msgSend(v18, "setShouldIncludeSystemPaper:", 2);
      objc_msgSend(v18, "setShouldIncludeMathNotes:", 2);
      objc_msgSend(v18, "setShouldIncludeCallNotes:", 2);
      objc_msgSend(v18, "setShouldIncludeSharedWithYou:", 2);
      objc_msgSend(v18, "setShouldIncludeLegacyAccounts:", 0);
    }

    *a6 = v18;
  }
}

uint64_t VisibleFoldersQuery.entities(matching:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)(v5 + 2064) = a5;
  *(_QWORD *)(v5 + 1840) = a4;
  *(_QWORD *)(v5 + 1832) = a3;
  *(_QWORD *)(v5 + 1824) = a2;
  *(_QWORD *)(v5 + 1816) = a1;
  v6 = type metadata accessor for FolderEntity(0);
  *(_QWORD *)(v5 + 1848) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 1856) = v7;
  *(_QWORD *)(v5 + 1864) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FolderID(0);
  *(_QWORD *)(v5 + 1872) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 1880) = v9;
  *(_QWORD *)(v5 + 1888) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 1896) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 1904) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 1912) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 1920) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 1928) = swift_task_alloc(v12);
  *(_QWORD *)(v5 + 1936) = swift_task_alloc(v12);
  v13 = type metadata accessor for ManagedEntityContextType(0);
  *(_QWORD *)(v5 + 1944) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v5 + 1952) = v14;
  *(_QWORD *)(v5 + 1960) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100142248, 0, 0);
}

uint64_t sub_100142248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  unsigned int v6;
  int v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[2];

  v1 = *(_QWORD *)(v0 + 1960);
  v2 = *(_QWORD *)(v0 + 1952);
  v3 = *(_QWORD *)(v0 + 1944);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1464));
  v4 = *(void **)(v0 + 1464);
  *(_QWORD *)(v0 + 1968) = objc_msgSend(v4, "modernManagedObjectContext");

  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1704));
  v5 = *(void **)(v0 + 1704);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ManagedEntityContextType.html(_:), v3);
  *(_QWORD *)(v0 + 1976) = ICUnifiedNoteContext.managedObjectContext(for:)(v1);
  v6 = *(_DWORD *)(v0 + 2064);
  LOBYTE(v2) = v6 & 1;
  v7 = HIWORD(v6) & 1;
  v8 = (v6 >> 8) & 1;
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 1952) + 8))(*(_QWORD *)(v0 + 1960), *(_QWORD *)(v0 + 1944));

  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1656));
  v9 = *(void **)(v0 + 1656);
  sub_1000163BC(0, &qword_1005D04C0, ICUnifiedNoteContext_ptr);
  v10 = static ICUnifiedNoteContext.$prefersViewContext.getter();
  *(_BYTE *)(v0 + 2068) = 0;
  swift_task_localValuePush(v10, v0 + 2068, &type metadata for Bool);
  sub_100141ECC(v9, v8, v7, 0, v2, v30);
  v11 = *(_QWORD *)(v0 + 1840);
  v12 = *(_QWORD *)(v0 + 1832);
  v13 = *(_QWORD *)(v0 + 1824);
  swift_task_localValuePop();
  swift_release(v10);

  *(_QWORD *)(v0 + 1984) = v30[0];
  swift_retain(v12);
  swift_retain(v11);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1400));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1400), *(_QWORD *)(v0 + 1408), *(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1424));
  swift_release(v12);
  swift_release(v11);
  v14 = swift_bridgeObjectRetain_n(v13, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(_QWORD *)(v0 + 1936);
  v19 = *(_QWORD *)(v0 + 1904);
  v20 = *(_QWORD *)(v0 + 1896);
  v21 = *(_QWORD *)(v0 + 1824);
  if (v17)
  {
    v22 = *(_QWORD *)(v0 + 1816);
    v29 = *(_QWORD *)(v0 + 1896);
    v28 = *(_QWORD *)(v0 + 1936);
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v30[0] = swift_slowAlloc(32, -1);
    v24 = v30[0];
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain(v21);
    *(_QWORD *)(v0 + 1608) = sub_1003A4190(v22, v21, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1608, v0 + 1616, v23 + 4);
    swift_bridgeObjectRelease_n(v21, 3);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "VisibleFoldersQuery: performing with query string '%s'", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v25(v28, v29);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1824), 2);

    v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v25(v18, v20);
  }
  *(_QWORD *)(v0 + 1992) = v25;
  v26 = (_QWORD *)swift_task_alloc(async function pointer to ICCoreDataIndexer.reloadSnapshot()[1]);
  *(_QWORD *)(v0 + 2000) = v26;
  *v26 = v0;
  v26[1] = sub_100142658;
  return ICCoreDataIndexer.reloadSnapshot()();
}

uint64_t sub_100142658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2000);
  *(_QWORD *)(*(_QWORD *)v1 + 2008) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001426B4, 0, 0);
}

uint64_t sub_1001426B4()
{
  uint64_t v0;
  void *v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  int v15;
  int v16;
  char v17;
  void *v18;

  v18 = *(void **)(v0 + 1976);
  v1 = *(void **)(v0 + 1968);
  v2 = *(_DWORD *)(v0 + 2064);
  v3 = *(_QWORD *)(v0 + 1840);
  v4 = *(_QWORD *)(v0 + 1832);
  v5 = sub_100143AA4(*(id *)(v0 + 2008));
  v7 = v6;
  v8 = swift_allocObject(&unk_1005597A8, 64, 7);
  *(_QWORD *)(v0 + 2016) = v8;
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v3;
  v17 = v2 & 1;
  *(_BYTE *)(v8 + 32) = v2 & 1;
  v16 = (v2 >> 8) & 1;
  *(_BYTE *)(v8 + 33) = v16;
  v15 = HIWORD(v2) & 1;
  *(_BYTE *)(v8 + 34) = BYTE2(v2) & 1;
  v9 = HIBYTE(v2) & 1;
  *(_BYTE *)(v8 + 35) = v9;
  *(_QWORD *)(v8 + 40) = v5;
  *(_QWORD *)(v8 + 48) = v7;
  *(_QWORD *)(v8 + 56) = v1;
  swift_retain(v4);
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  v10 = v1;
  swift_retain(v8);
  v11 = sub_10001537C(&qword_1005D04D8);
  swift_asyncLet_begin(v0 + 656, 0, v11, &unk_1005D0500, v8, v0 + 1560);
  v12 = swift_allocObject(&unk_1005597D0, 64, 7);
  *(_QWORD *)(v0 + 2024) = v12;
  *(_QWORD *)(v12 + 16) = v4;
  *(_QWORD *)(v12 + 24) = v3;
  *(_BYTE *)(v12 + 32) = v17;
  *(_BYTE *)(v12 + 33) = v16;
  *(_BYTE *)(v12 + 34) = v15;
  *(_BYTE *)(v12 + 35) = v9;
  *(_QWORD *)(v12 + 40) = v5;
  *(_QWORD *)(v12 + 48) = v7;
  *(_QWORD *)(v12 + 56) = v18;
  swift_retain(v4);
  swift_retain(v3);
  v13 = v18;
  swift_retain(v12);
  swift_asyncLet_begin(v0 + 16, 0, v11, &unk_1005D0510, v12, v0 + 1512);
  return swift_asyncLet_get_throwing(v0 + 656, v0 + 1560, sub_100142880, v0 + 1760);
}

uint64_t sub_100142880()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v1[254] = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 2, v1 + 189, sub_100143248, v1 + 214);
  v3 = v1[195];
  v1[255] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_asyncLet_get_throwing(v1 + 2, v1 + 189, sub_100142908, v1 + 184);
}

uint64_t sub_100142908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 2048) = v0;
  if (v0)
    v2 = sub_100143394;
  else
    v2 = sub_100142930;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100142930()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  int64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  int64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  void (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v70;
  uint64_t v71;
  os_log_type_t v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint8_t *v75;
  NSObject *log;
  NSObject *loga;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;

  v1 = *(_QWORD *)(v0 + 2040);
  v2 = *(_QWORD *)(v0 + 1840);
  v3 = *(_QWORD *)(v0 + 1832);
  v4 = *(_QWORD *)(v0 + 1824);
  v5 = *(_QWORD *)(v0 + 1816);
  v6 = swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1512));
  v7 = sub_100140D40(v6, v1);
  swift_bridgeObjectRetain(v4);
  v8 = sub_100144B54(v7, v5, v4);
  *(_QWORD *)(v0 + 2056) = v8;
  swift_bridgeObjectRelease(v4);
  swift_retain(v3);
  swift_retain(v2);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1432));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1432), *(_QWORD *)(v0 + 1440), *(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1456));
  swift_release(v3);
  swift_release(v2);
  v9 = swift_bridgeObjectRetain(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v12 = 134349056;
    *(_QWORD *)(v0 + 1808) = *(_QWORD *)(v8 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1808, v0 + 1816, v12 + 4);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "VisibleFoldersQuery: found %{public}ld matching folder(s)", v12, 0xCu);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease(v8);
  }
  v13 = v0 + 1512;

  v14 = *(_QWORD *)(v0 + 1840);
  v15 = *(_QWORD *)(v0 + 1832);
  (*(void (**)(_QWORD, _QWORD))(v0 + 1992))(*(_QWORD *)(v0 + 1928), *(_QWORD *)(v0 + 1896));
  swift_retain(v15);
  swift_retain(v14);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1368));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), *(_QWORD *)(v0 + 1384), *(_QWORD *)(v0 + 1392));
  swift_release(v15);
  swift_release(v14);
  v16 = swift_bridgeObjectRetain_n(v8, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  v80 = v8;
  if (os_log_type_enabled(v17, v18))
  {
    v72 = v18;
    log = v17;
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v70 = swift_slowAlloc(32, -1);
    v82 = v70;
    v74 = v19;
    *(_DWORD *)v19 = 136446210;
    v20 = *(_QWORD *)(v8 + 16);
    v21 = _swiftEmptyArrayStorage;
    if (v20)
    {
      v22 = *(_QWORD *)(v0 + 1880);
      v23 = *(_QWORD *)(v0 + 1856);
      v83 = _swiftEmptyArrayStorage;
      sub_10013707C(0, v20, 0);
      v24 = v8 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
      v25 = *(_QWORD *)(v23 + 72);
      v21 = _swiftEmptyArrayStorage;
      do
      {
        v26 = *(_QWORD *)(v0 + 1888);
        v27 = *(_QWORD *)(v0 + 1872);
        v28 = *(_QWORD *)(v0 + 1864);
        sub_100145220(v24, v28, type metadata accessor for FolderEntity);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v26, v28, v27);
        sub_100145264(v28, type metadata accessor for FolderEntity);
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        {
          sub_10013707C(0, v21[2] + 1, 1);
          v21 = v83;
        }
        v30 = v21[2];
        v29 = v21[3];
        if (v30 >= v29 >> 1)
        {
          sub_10013707C(v29 > 1, v30 + 1, 1);
          v21 = v83;
        }
        v31 = *(_QWORD *)(v0 + 1888);
        v32 = *(_QWORD *)(v0 + 1872);
        v21[2] = v30 + 1;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))((unint64_t)v21+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(_QWORD *)(v22 + 72) * v30, v31, v32);
        v83 = v21;
        v24 += v25;
        --v20;
      }
      while (v20);
      v13 = v0 + 1512;
    }
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1992);
    v78 = *(_QWORD *)(v0 + 1920);
    v38 = *(_QWORD *)(v0 + 1896);
    v39 = Array.description.getter(v21, *(_QWORD *)(v0 + 1872));
    v41 = v40;
    swift_bridgeObjectRelease(v21);
    *(_QWORD *)(v0 + 1800) = sub_1003A4190(v39, v41, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1800, v0 + 1808, v74 + 4);
    swift_bridgeObjectRelease(v41);
    v8 = v80;
    swift_bridgeObjectRelease_n(v80, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v72, "VisibleFoldersQuery: matching folder IDs: %{public}s", v74, 0xCu);
    swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v74, -1, -1);

    v36 = v78;
    v37 = v38;
  }
  else
  {
    v33 = *(void (**)(uint64_t, uint64_t))(v0 + 1992);
    v34 = *(_QWORD *)(v0 + 1920);
    v35 = *(_QWORD *)(v0 + 1896);
    swift_bridgeObjectRelease_n(v8, 2);

    v36 = v34;
    v37 = v35;
  }
  v33(v36, v37);
  v42 = *(_QWORD *)(v0 + 1840);
  v43 = *(_QWORD *)(v0 + 1832);
  swift_retain(v43);
  swift_retain(v42);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 1336));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1360));
  swift_release(v43);
  swift_release(v42);
  v44 = swift_bridgeObjectRetain_n(v8, 2);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v73 = v46;
    loga = v45;
    v79 = v13;
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v71 = swift_slowAlloc(32, -1);
    v82 = v71;
    v75 = v47;
    *(_DWORD *)v47 = 136642819;
    v48 = *(_QWORD *)(v8 + 16);
    v49 = _swiftEmptyArrayStorage;
    if (v48)
    {
      v50 = *(_QWORD *)(v0 + 1856);
      v81 = *(_QWORD *)(v0 + 1848);
      v83 = _swiftEmptyArrayStorage;
      sub_100137028(0, v48, 0);
      v51 = v8 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
      v52 = *(_QWORD *)(v50 + 72);
      v49 = v83;
      do
      {
        v53 = *(_QWORD *)(v0 + 1864);
        sub_100145220(v51, v53, type metadata accessor for FolderEntity);
        v54 = (uint64_t *)(v53 + *(int *)(v81 + 24));
        v55 = *v54;
        v56 = v54[1];
        swift_bridgeObjectRetain(v56);
        sub_100145264(v53, type metadata accessor for FolderEntity);
        if ((swift_isUniquelyReferenced_nonNull_native(v49) & 1) == 0)
        {
          sub_100137028(0, v49[2] + 1, 1);
          v49 = v83;
        }
        v58 = v49[2];
        v57 = v49[3];
        if (v58 >= v57 >> 1)
        {
          sub_100137028(v57 > 1, v58 + 1, 1);
          v49 = v83;
        }
        v49[2] = v58 + 1;
        v59 = &v49[2 * v58];
        v59[4] = v55;
        v59[5] = v56;
        v51 += v52;
        --v48;
      }
      while (v48);
    }
    v63 = *(void (**)(uint64_t, uint64_t))(v0 + 1992);
    v64 = *(_QWORD *)(v0 + 1912);
    v65 = *(_QWORD *)(v0 + 1896);
    v66 = Array.description.getter(v49, &type metadata for String);
    v68 = v67;
    swift_bridgeObjectRelease(v49);
    *(_QWORD *)(v0 + 1752) = sub_1003A4190(v66, v68, &v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1752, v0 + 1760, v75 + 4);
    swift_bridgeObjectRelease(v68);
    swift_bridgeObjectRelease_n(v80, 2);
    _os_log_impl((void *)&_mh_execute_header, loga, v73, "VisibleFoldersQuery: matching folder titles: %{sensitive}s", v75, 0xCu);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v75, -1, -1);

    v63(v64, v65);
    v13 = v79;
  }
  else
  {
    v60 = *(void (**)(uint64_t, uint64_t))(v0 + 1992);
    v61 = *(_QWORD *)(v0 + 1912);
    v62 = *(_QWORD *)(v0 + 1896);
    swift_bridgeObjectRelease_n(v8, 2);

    v60(v61, v62);
  }
  return swift_asyncLet_finish(v0 + 16, v13, sub_1001430E4, v0 + 1296);
}

uint64_t sub_1001430E4()
{
  return swift_task_switch(sub_1001430F8, 0, 0);
}

uint64_t sub_1001430F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2024));
  return swift_asyncLet_finish(v0 + 656, v0 + 1560, sub_10014314C, v0 + 1616);
}

uint64_t sub_10014314C()
{
  return swift_task_switch(sub_100143160, 0, 0);
}

uint64_t sub_100143160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 2024);
  v2 = *(_QWORD *)(v0 + 2016);
  v3 = *(void **)(v0 + 2008);
  v4 = *(void **)(v0 + 1984);
  v5 = *(void **)(v0 + 1976);
  v6 = *(_QWORD *)(v0 + 1960);
  v7 = *(_QWORD *)(v0 + 1936);
  v8 = *(_QWORD *)(v0 + 1928);
  v9 = *(_QWORD *)(v0 + 1920);
  v11 = *(_QWORD *)(v0 + 1912);
  v12 = *(_QWORD *)(v0 + 1888);
  v13 = *(_QWORD *)(v0 + 1864);

  swift_release_n(v2, 2);
  swift_release(v1);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2056));
}

uint64_t sub_100143248()
{
  return swift_task_switch(sub_10014325C, 0, 0);
}

uint64_t sub_10014325C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2024));
  return swift_asyncLet_finish(v0 + 656, v0 + 1560, sub_1001432B0, v0 + 1568);
}

uint64_t sub_1001432B0()
{
  return swift_task_switch(sub_1001432C4, 0, 0);
}

uint64_t sub_1001432C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 2024);
  v2 = *(_QWORD *)(v0 + 2016);
  v3 = *(void **)(v0 + 2008);
  v4 = *(void **)(v0 + 1984);
  v5 = *(void **)(v0 + 1976);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1936);
  v7 = *(_QWORD *)(v0 + 1928);
  v8 = *(_QWORD *)(v0 + 1920);
  v9 = *(_QWORD *)(v0 + 1912);
  v10 = *(_QWORD *)(v0 + 1888);
  v11 = *(_QWORD *)(v0 + 1864);
  swift_task_dealloc(*(_QWORD *)(v0 + 1960));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100143394()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 2040));
  return swift_asyncLet_finish(v0 + 16, v0 + 1512, sub_1001433E8, v0 + 1664);
}

uint64_t sub_1001433E8()
{
  return swift_task_switch(sub_1001433FC, 0, 0);
}

uint64_t sub_1001433FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 2024));
  return swift_asyncLet_finish(v0 + 656, v0 + 1560, sub_100143450, v0 + 1520);
}

uint64_t sub_100143450()
{
  return swift_task_switch(sub_100143464, 0, 0);
}

uint64_t sub_100143464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 2024);
  v2 = *(_QWORD *)(v0 + 2016);
  v3 = *(void **)(v0 + 2008);
  v4 = *(void **)(v0 + 1984);
  v5 = *(void **)(v0 + 1976);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1936);
  v7 = *(_QWORD *)(v0 + 1928);
  v8 = *(_QWORD *)(v0 + 1920);
  v9 = *(_QWORD *)(v0 + 1912);
  v10 = *(_QWORD *)(v0 + 1888);
  v11 = *(_QWORD *)(v0 + 1864);
  swift_task_dealloc(*(_QWORD *)(v0 + 1960));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100143534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v10;

  *(_QWORD *)(v7 + 16) = a1;
  v10 = (_QWORD *)swift_task_alloc(dword_1005D056C);
  *(_QWORD *)(v7 + 24) = v10;
  *v10 = v7;
  v10[1] = sub_100140BD8;
  return sub_100143EE8(a6, a7);
}

uint64_t sub_10014358C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = *(_QWORD *)v3;
  v8 = *(_QWORD *)(v3 + 8);
  v9 = *(unsigned __int8 *)(v3 + 16);
  v10 = *(unsigned __int8 *)(v3 + 17);
  v11 = *(unsigned __int8 *)(v3 + 18);
  v12 = *(unsigned __int8 *)(v3 + 19);
  v13 = (_QWORD *)swift_task_alloc(dword_1005D04F4);
  *(_QWORD *)(v4 + 24) = v13;
  if (v10)
    v14 = 256;
  else
    v14 = 0;
  v15 = v14 | v9;
  if (v11)
    v16 = 0x10000;
  else
    v16 = 0;
  if (v12)
    v17 = 0x1000000;
  else
    v17 = 0;
  *v13 = v4;
  v13[1] = sub_100136FB0;
  return VisibleFoldersQuery.entities(matching:)(a2, a3, v7, v8, v15 | v16 | v17);
}

uint64_t _s11MobileNotes20VisibleAccountsQueryVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v6 = 0xD000000000000024;
  v7 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v0 = type metadata accessor for AppDependencyManager(0);
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(v8, v1);
  sub_100012E18(&qword_1005CEE50);
  v6 = 0xD000000000000021;
  v7 = 0x8000000100476B70;
  v3 = AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(v8, v4);
  return v2;
}

uint64_t VisibleAccountsQuery.init(requireFolderCreationSupport:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v6 = 0xD000000000000024;
  v7 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v0 = type metadata accessor for AppDependencyManager(0);
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(v8, v1);
  sub_100012E18(&qword_1005CEE50);
  v6 = 0xD000000000000021;
  v7 = 0x8000000100476B70;
  v3 = AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(v8, v4);
  return v2;
}

uint64_t sub_10014386C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v6 = 0xD000000000000024;
  v7 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v0 = type metadata accessor for AppDependencyManager(0);
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(v8, v1);
  sub_100012E18(&qword_1005CEE50);
  v6 = 0xD000000000000021;
  v7 = 0x8000000100476B70;
  v3 = AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(v8, v4);
  return v2;
}

uint64_t sub_100143988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v6 = 0xD000000000000024;
  v7 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v0 = type metadata accessor for AppDependencyManager(0);
  v1 = static AppDependencyManager.shared.getter(v0);
  v2 = AppDependency.__allocating_init(key:manager:)(v8, v1);
  sub_100012E18(&qword_1005CEE50);
  v6 = 0xD000000000000021;
  v7 = 0x8000000100476B70;
  v3 = AnyHashable.init<A>(_:)(v8, &v6, &type metadata for String, &protocol witness table for String);
  v4 = static AppDependencyManager.shared.getter(v3);
  AppDependency.__allocating_init(key:manager:)(v8, v4);
  return v2;
}

void *sub_100143AA4(id a1)
{
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v11;
  void *v12;
  id v13;
  _BYTE v14[32];
  void *v15;
  void *v16;

  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_100127DC8((uint64_t)_swiftEmptyArrayStorage);
      v2 = v11;
    }
    else
    {
      v2 = &_swiftEmptySetSingleton;
    }
    v16 = v2;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_100127DC8((uint64_t)_swiftEmptyArrayStorage);
      v3 = v12;
    }
    else
    {
      v3 = &_swiftEmptySetSingleton;
    }
  }
  else
  {
    v2 = &_swiftEmptySetSingleton;
    v16 = &_swiftEmptySetSingleton;
    v3 = &_swiftEmptySetSingleton;
  }
  v15 = v3;
  v4 = objc_msgSend(a1, "itemIdentifiers");
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, (char *)&type metadata for Any + 8);

  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 32;
    do
    {
      sub_100128424(v7, (uint64_t)v14);
      v8 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      if ((swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
      {
        v9 = v13;
        if (objc_msgSend(v13, "ic_isModernFolderType")
          || objc_msgSend(v9, "ic_isLegacyFolderType"))
        {
          sub_100302C94((Swift::Int *)&v13, v9);

        }
        else
        {

        }
      }
      v7 += 32;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(v5);
    return v16;
  }
  else
  {
    swift_bridgeObjectRelease(v5);
  }
  return v2;
}

uint64_t sub_100143C90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = (_QWORD *)swift_task_alloc(dword_1005D04CC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100145358;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1005D056C);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_100140BD8;
  return sub_100143EE8(v4, v5);
}

uint64_t sub_100143D18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = (_QWORD *)swift_task_alloc(dword_1005D04E4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100130768;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1005D056C);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_100140CAC;
  return sub_100143EE8(v5, v4);
}

uint64_t sub_100143D9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 56);
  v6 = (_QWORD *)swift_task_alloc(dword_1005D04FC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100145358;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1005D056C);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_100140BD8;
  return sub_100143EE8(v4, v5);
}

uint64_t sub_100143E24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100143E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v6 = (_QWORD *)swift_task_alloc(dword_1005D050C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100145358;
  v6[2] = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1005D056C);
  v6[3] = v7;
  *v7 = v6;
  v7[1] = sub_100140BD8;
  return sub_100143EE8(v5, v4);
}

uint64_t sub_100143EE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[9] = a1;
  v2[10] = a2;
  v3 = type metadata accessor for FolderEntity(0);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v5);
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v2[16] = swift_task_alloc(v5);
  v2[17] = swift_task_alloc(v5);
  return swift_task_switch(sub_100143F7C, 0, 0);
}

uint64_t sub_100143F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  _QWORD *v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 72);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 72);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    v5 = sub_1001452A0((unint64_t *)&qword_1005D3CC0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    Set.Iterator.init(_cocoa:)(v3, v4, v5);
    result = *(_QWORD *)(v0 + 16);
    v7 = *(_QWORD *)(v0 + 24);
    v9 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v11 = -1 << *(_BYTE *)(v1 + 32);
    v7 = v1 + 56;
    v9 = ~v11;
    v12 = -v11;
    if (v12 < 64)
      v13 = ~(-1 << v12);
    else
      v13 = -1;
    v10 = v13 & *(_QWORD *)(v1 + 56);
    result = swift_bridgeObjectRetain(v1);
    v8 = 0;
  }
  *(_QWORD *)(v0 + 144) = result;
  *(_QWORD *)(v0 + 152) = v7;
  *(_QWORD *)(v0 + 176) = v8;
  *(_QWORD *)(v0 + 184) = v10;
  *(_QWORD *)(v0 + 160) = v9;
  *(_QWORD *)(v0 + 168) = &_swiftEmptySetSingleton;
  if (result < 0)
  {
    v18 = __CocoaSet.Iterator.next()();
    if (v18)
    {
      v19 = v18;
      *(_QWORD *)(v0 + 64) = v18;
      v20 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      swift_unknownObjectRetain(v19);
      swift_dynamicCast(v0 + 56, v0 + 64, (char *)&type metadata for Swift.AnyObject + 8, v20, 7);
      v17 = *(id *)(v0 + 56);
      swift_unknownObjectRelease(v19, v21);
      v16 = v8;
      v14 = v10;
LABEL_16:
      *(_QWORD *)(v0 + 200) = v16;
      *(_QWORD *)(v0 + 208) = v14;
      *(_QWORD *)(v0 + 192) = v17;
      if (v17)
      {
        v22 = *(void **)(v0 + 80);
        v23 = swift_allocObject(&unk_100559888, 32, 7);
        *(_QWORD *)(v0 + 216) = v23;
        *(_QWORD *)(v23 + 16) = v22;
        *(_QWORD *)(v23 + 24) = v17;
        v24 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
        v25 = v17;
        v26 = v22;
        v27 = v25;
        v28 = v26;
        v29 = v27;
        v30 = v28;
        v31 = (_QWORD *)swift_task_alloc(v24);
        *(_QWORD *)(v0 + 224) = v31;
        *v31 = v0;
        v31[1] = sub_1001442EC;
        return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 120), sub_10013B158, v23, *(_QWORD *)(v0 + 88));
      }
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  if (v10)
  {
    v14 = (v10 - 1) & v10;
    v15 = __clz(__rbit64(v10)) | (v8 << 6);
    v16 = v8;
LABEL_13:
    v17 = *(id *)(*(_QWORD *)(result + 48) + 8 * v15);
    goto LABEL_16;
  }
  v32 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    v33 = (unint64_t)(v9 + 64) >> 6;
    if (v32 < v33)
    {
      v34 = *(_QWORD *)(v7 + 8 * v32);
      v16 = v8 + 1;
      if (v34)
      {
LABEL_21:
        v14 = (v34 - 1) & v34;
        v15 = __clz(__rbit64(v34)) + (v16 << 6);
        goto LABEL_13;
      }
      v16 = v8 + 2;
      if (v8 + 2 < v33)
      {
        v34 = *(_QWORD *)(v7 + 8 * v16);
        if (v34)
          goto LABEL_21;
        v16 = v8 + 3;
        if (v8 + 3 < v33)
        {
          v34 = *(_QWORD *)(v7 + 8 * v16);
          if (v34)
            goto LABEL_21;
          v16 = v8 + 4;
          if (v8 + 4 < v33)
          {
            v34 = *(_QWORD *)(v7 + 8 * v16);
            if (v34)
              goto LABEL_21;
            v16 = v8 + 5;
            if (v8 + 5 < v33)
            {
              v34 = *(_QWORD *)(v7 + 8 * v16);
              if (v34)
                goto LABEL_21;
              v35 = v8 + 6;
              while (v33 != v35)
              {
                v34 = *(_QWORD *)(v7 + 8 * v35++);
                if (v34)
                {
                  v16 = v35 - 1;
                  goto LABEL_21;
                }
              }
            }
          }
        }
      }
    }
LABEL_34:
    v36 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 120);
    v37 = *(_QWORD *)(v0 + 128);
    v40 = *(_QWORD *)(v0 + 104);
    v39 = *(_QWORD *)(v0 + 112);
    sub_1001452E0(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001442EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100144994;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 216));
    v4 = sub_100144358;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_100144358()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  int *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  char v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  _QWORD *v69;
  int64_t v70;
  int64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  _QWORD v85[9];

  v1 = *(void **)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 120);
  v7 = *(void **)(v0 + 80);
  v6 = *(int **)(v0 + 88);

  sub_10013B170(v5, v3, type metadata accessor for FolderEntity);
  sub_10013B170(v3, v4, type metadata accessor for FolderEntity);
  Hasher.init(_seed:)(v85, *(_QWORD *)(v2 + 40));
  v8 = type metadata accessor for FolderID(0);
  v9 = sub_100019C6C(&qword_1005D0570, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
  swift_bridgeObjectRetain(v2);
  dispatch thunk of Hashable.hash(into:)(v85, v8, v9);
  v10 = v4 + v6[5];
  v11 = type metadata accessor for URL(0);
  v12 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v84 = v10;
  dispatch thunk of Hashable.hash(into:)(v85, v11, v12);
  v13 = (_QWORD *)(v4 + v6[6]);
  v14 = *v13;
  v15 = v13[1];
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(v85, v14, v15);
  swift_bridgeObjectRelease(v15);
  v16 = (_QWORD *)(v4 + v6[7]);
  v17 = *v16;
  v18 = v16[1];
  v83 = v16;
  swift_bridgeObjectRetain(v18);
  String.hash(into:)(v85, v17, v18);
  swift_bridgeObjectRelease(v18);
  v81 = v6[8];
  Hasher._combine(_:)(*(_BYTE *)(v4 + v81));
  v82 = v4;
  v80 = v6[9];
  Hasher._combine(_:)(*(_BYTE *)(v4 + v80));
  v19 = Hasher._finalize()();
  v20 = -1 << *(_BYTE *)(v2 + 32);
  v21 = v19 & ~v20;
  v22 = v2 + 56;
  if (((*(_QWORD *)(v2 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
  {
    v23 = ~v20;
    v24 = *(_QWORD *)(v0 + 168);
    v25 = *(_QWORD *)(*(_QWORD *)(v0 + 96) + 72);
    do
    {
      v26 = *(_QWORD *)(v0 + 136);
      v27 = *(_QWORD *)(v0 + 104);
      sub_100145220(*(_QWORD *)(v24 + 48) + v21 * v25, v27, type metadata accessor for FolderEntity);
      v28 = static FolderID.== infix(_:_:)(v27, v26);
      v29 = *(_QWORD *)(v0 + 104);
      if ((v28 & 1) == 0)
        goto LABEL_3;
      v30 = static URL.== infix(_:_:)(v29 + *(int *)(*(_QWORD *)(v0 + 88) + 20), v84);
      v29 = *(_QWORD *)(v0 + 104);
      if ((v30 & 1) == 0)
        goto LABEL_3;
      v31 = *(int **)(v0 + 88);
      v32 = (_QWORD *)(v29 + v31[6]);
      v33 = v32[1];
      v34 = v13[1];
      if (*v32 != *v13 || v33 != v34)
      {
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)(*v32, v33, *v13, v34, 0);
        v29 = *(_QWORD *)(v0 + 104);
        if ((v36 & 1) == 0)
          goto LABEL_3;
        v31 = *(int **)(v0 + 88);
      }
      v37 = (_QWORD *)(v29 + v31[7]);
      v38 = v37[1];
      v39 = v83[1];
      if (*v37 != *v83 || v38 != v39)
      {
        v41 = _stringCompareWithSmolCheck(_:_:expecting:)(*v37, v38, *v83, v39, 0);
        v29 = *(_QWORD *)(v0 + 104);
        if ((v41 & 1) == 0)
          goto LABEL_3;
        v31 = *(int **)(v0 + 88);
      }
      if (*(unsigned __int8 *)(v29 + v31[8]) == *(unsigned __int8 *)(v82 + v81)
        && *(unsigned __int8 *)(v29 + v31[9]) == *(unsigned __int8 *)(v82 + v80))
      {
        v42 = *(_QWORD *)(v0 + 168);
        v43 = *(_QWORD *)(v0 + 136);
        sub_100145264(v29, type metadata accessor for FolderEntity);
        swift_bridgeObjectRelease(v42);
        sub_100145264(v43, type metadata accessor for FolderEntity);
        v44 = *(_QWORD *)(v0 + 168);
        goto LABEL_22;
      }
LABEL_3:
      sub_100145264(v29, type metadata accessor for FolderEntity);
      v21 = (v21 + 1) & v23;
    }
    while (((*(_QWORD *)(v22 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0);
  }
  v45 = *(_QWORD *)(v0 + 168);
  v46 = *(_QWORD *)(v0 + 136);
  v47 = *(_QWORD *)(v0 + 112);
  swift_bridgeObjectRelease(v45);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v45);
  sub_100145220(v46, v47, type metadata accessor for FolderEntity);
  v85[0] = v45;
  sub_10030612C(v47, v21, isUniquelyReferenced_nonNull_native);
  v44 = v85[0];
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_100145264(v46, type metadata accessor for FolderEntity);
LABEL_22:

  v49 = *(_QWORD *)(v0 + 200);
  v50 = *(_QWORD *)(v0 + 208);
  *(_QWORD *)(v0 + 176) = v49;
  *(_QWORD *)(v0 + 184) = v50;
  *(_QWORD *)(v0 + 168) = v44;
  v51 = *(_QWORD *)(v0 + 144);
  if (v51 < 0)
  {
    v56 = __CocoaSet.Iterator.next()();
    if (v56)
    {
      v57 = v56;
      *(_QWORD *)(v0 + 64) = v56;
      v58 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      swift_unknownObjectRetain(v57);
      swift_dynamicCast(v0 + 56, v0 + 64, (char *)&type metadata for Swift.AnyObject + 8, v58, 7);
      v55 = *(id *)(v0 + 56);
      swift_unknownObjectRelease(v57, v59);
      v54 = v49;
      v52 = v50;
LABEL_28:
      *(_QWORD *)(v0 + 200) = v54;
      *(_QWORD *)(v0 + 208) = v52;
      *(_QWORD *)(v0 + 192) = v55;
      if (v55)
      {
        v60 = *(void **)(v0 + 80);
        v61 = swift_allocObject(&unk_100559888, 32, 7);
        *(_QWORD *)(v0 + 216) = v61;
        *(_QWORD *)(v61 + 16) = v60;
        *(_QWORD *)(v61 + 24) = v55;
        v62 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
        v63 = v55;
        v64 = v60;
        v65 = v63;
        v66 = v64;
        v67 = v65;
        v68 = v66;
        v69 = (_QWORD *)swift_task_alloc(v62);
        *(_QWORD *)(v0 + 224) = v69;
        *v69 = v0;
        v69[1] = sub_1001442EC;
        NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 120), sub_10013B158, v61, *(_QWORD *)(v0 + 88));
        return;
      }
      goto LABEL_46;
    }
    goto LABEL_46;
  }
  if (v50)
  {
    v52 = (v50 - 1) & v50;
    v53 = __clz(__rbit64(v50)) | (v49 << 6);
    v54 = v49;
LABEL_25:
    v55 = *(id *)(*(_QWORD *)(v51 + 48) + 8 * v53);
    goto LABEL_28;
  }
  v70 = v49 + 1;
  if (!__OFADD__(v49, 1))
  {
    v71 = (unint64_t)(*(_QWORD *)(v0 + 160) + 64) >> 6;
    if (v70 < v71)
    {
      v72 = *(_QWORD *)(v0 + 152);
      v73 = *(_QWORD *)(v72 + 8 * v70);
      v54 = v49 + 1;
      if (v73)
      {
LABEL_33:
        v52 = (v73 - 1) & v73;
        v53 = __clz(__rbit64(v73)) + (v54 << 6);
        goto LABEL_25;
      }
      v54 = v49 + 2;
      if (v49 + 2 < v71)
      {
        v73 = *(_QWORD *)(v72 + 8 * v54);
        if (v73)
          goto LABEL_33;
        v54 = v49 + 3;
        if (v49 + 3 < v71)
        {
          v73 = *(_QWORD *)(v72 + 8 * v54);
          if (v73)
            goto LABEL_33;
          v54 = v49 + 4;
          if (v49 + 4 < v71)
          {
            v73 = *(_QWORD *)(v72 + 8 * v54);
            if (v73)
              goto LABEL_33;
            v54 = v49 + 5;
            if (v49 + 5 < v71)
            {
              v73 = *(_QWORD *)(v72 + 8 * v54);
              if (v73)
                goto LABEL_33;
              v74 = v49 + 6;
              while (v71 != v74)
              {
                v73 = *(_QWORD *)(v72 + 8 * v74++);
                if (v73)
                {
                  v54 = v74 - 1;
                  goto LABEL_33;
                }
              }
            }
          }
        }
      }
    }
LABEL_46:
    v75 = *(_QWORD *)(v0 + 136);
    v77 = *(_QWORD *)(v0 + 120);
    v76 = *(_QWORD *)(v0 + 128);
    v79 = *(_QWORD *)(v0 + 104);
    v78 = *(_QWORD *)(v0 + 112);
    sub_1001452E0(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    (*(void (**)(uint64_t))(v0 + 8))(v44);
    return;
  }
  __break(1u);
}

uint64_t sub_100144994()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(void **)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 168);
  v5 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 120);
  v10 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 104);
  v6 = *(void **)(v0 + 80);

  swift_release(v1);
  swift_bridgeObjectRelease(v3);
  sub_1001452E0(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100144A78(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void **v6;
  void *v7;
  id v8;
  uint64_t v9;

  v2 = result;
  v9 = a2;
  if ((unint64_t)result >> 62)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    result = _CocoaArrayWrapper.endIndex.getter(result);
    v3 = result;
    if (!result)
      return v9;
  }
  else
  {
    v3 = *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v3)
      return v9;
  }
  if (v3 >= 1)
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v3; ++i)
      {
        v5 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v2);
        sub_1003030D0((Swift::Int *)&v8, v5);

      }
    }
    else
    {
      v6 = (void **)(v2 + 32);
      do
      {
        v7 = *v6++;
        sub_1003030D0((Swift::Int *)&v8, v7);

        --v3;
      }
      while (v3);
    }
    return v9;
  }
  __break(1u);
  return result;
}

uint64_t sub_100144B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t i;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[4];
  _QWORD *v46;

  v42 = a2;
  v43 = a3;
  v41 = type metadata accessor for FolderEntity(0);
  v44 = *(_QWORD *)(v41 - 8);
  v4 = __chkstk_darwin(v41);
  v37 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v36 - v7;
  result = __chkstk_darwin(v6);
  v11 = (char *)&v36 - v10;
  v12 = 0;
  v38 = _swiftEmptyArrayStorage;
  v46 = _swiftEmptyArrayStorage;
  v13 = a1;
  v16 = *(_QWORD *)(a1 + 56);
  v15 = a1 + 56;
  v14 = v16;
  v17 = 1 << *(_BYTE *)(v15 - 24);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v14;
  v39 = v15;
  v40 = (unint64_t)(v17 + 63) >> 6;
  if ((v18 & v14) == 0)
    goto LABEL_7;
LABEL_4:
  v20 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  for (i = v20 | (v12 << 6); ; i = __clz(__rbit64(v28)) + (v12 << 6))
  {
    v22 = *(_QWORD *)(v44 + 72);
    sub_100145220(*(_QWORD *)(v13 + 48) + v22 * i, (uint64_t)v8, type metadata accessor for FolderEntity);
    sub_10013B170((uint64_t)v8, (uint64_t)v11, type metadata accessor for FolderEntity);
    v23 = &v11[*(int *)(v41 + 24)];
    v25 = *(_QWORD *)v23;
    v24 = *((_QWORD *)v23 + 1);
    v45[2] = v25;
    v45[3] = v24;
    v45[0] = v42;
    v45[1] = v43;
    v26 = sub_1001452E8();
    if ((StringProtocol.localizedStandardContains<A>(_:)(v45, &type metadata for String, &type metadata for String, v26, v26) & 1) != 0)
    {
      sub_10013B170((uint64_t)v11, v37, type metadata accessor for FolderEntity);
      v30 = v38;
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        sub_100137060(0, v30[2] + 1, 1);
      v31 = v46;
      v33 = v46[2];
      v32 = v46[3];
      v34 = (_QWORD *)(v33 + 1);
      if (v33 >= v32 >> 1)
      {
        v38 = (_QWORD *)(v33 + 1);
        v36 = v33;
        sub_100137060(v32 > 1, v33 + 1, 1);
        v34 = v38;
        v33 = v36;
        v31 = v46;
      }
      v31[2] = v34;
      v35 = *(unsigned __int8 *)(v44 + 80);
      v38 = v31;
      result = sub_10013B170(v37, (uint64_t)v31 + ((v35 + 32) & ~v35) + v33 * v22, type metadata accessor for FolderEntity);
      if (v19)
        goto LABEL_4;
    }
    else
    {
      result = sub_100145264((uint64_t)v11, type metadata accessor for FolderEntity);
      if (v19)
        goto LABEL_4;
    }
LABEL_7:
    v27 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v27 >= v40)
      goto LABEL_29;
    v28 = *(_QWORD *)(v39 + 8 * v27);
    ++v12;
    if (!v28)
    {
      v12 = v27 + 1;
      if (v27 + 1 >= v40)
        goto LABEL_29;
      v28 = *(_QWORD *)(v39 + 8 * v12);
      if (!v28)
      {
        v12 = v27 + 2;
        if (v27 + 2 >= v40)
          goto LABEL_29;
        v28 = *(_QWORD *)(v39 + 8 * v12);
        if (!v28)
        {
          v12 = v27 + 3;
          if (v27 + 3 >= v40)
            goto LABEL_29;
          v28 = *(_QWORD *)(v39 + 8 * v12);
          if (!v28)
            break;
        }
      }
    }
LABEL_22:
    v19 = (v28 - 1) & v28;
  }
  v29 = v27 + 4;
  if (v29 >= v40)
  {
LABEL_29:
    swift_release(v13);
    return (uint64_t)v38;
  }
  v28 = *(_QWORD *)(v39 + 8 * v29);
  if (v28)
  {
    v12 = v29;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v12 >= v40)
      goto LABEL_29;
    v28 = *(_QWORD *)(v39 + 8 * v12);
    ++v29;
    if (v28)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

unint64_t sub_100144EAC()
{
  unint64_t result;

  result = qword_1005D0518;
  if (!qword_1005D0518)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleFoldersQuery, &type metadata for VisibleFoldersQuery);
    atomic_store(result, (unint64_t *)&qword_1005D0518);
  }
  return result;
}

unint64_t sub_100144EF4()
{
  unint64_t result;

  result = qword_1005D0520[0];
  if (!qword_1005D0520[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleFoldersQuery, &type metadata for VisibleFoldersQuery);
    atomic_store(result, qword_1005D0520);
  }
  return result;
}

uint64_t sub_100144F38()
{
  return sub_100019C6C((unint64_t *)&qword_1005D7870, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

unint64_t sub_100144F68()
{
  unint64_t result;

  result = qword_1005D0538;
  if (!qword_1005D0538)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for VisibleFoldersQuery, &type metadata for VisibleFoldersQuery);
    atomic_store(result, (unint64_t *)&qword_1005D0538);
  }
  return result;
}

uint64_t sub_100144FAC()
{
  return sub_100019C6C((unint64_t *)&unk_1005D6AE0, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

unint64_t sub_100144FDC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D0540;
  if (!qword_1005D0540)
  {
    v1 = sub_10001537C(qword_1005D0548);
    sub_100019C6C((unint64_t *)&unk_1005D6AE0, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D0540);
  }
  return result;
}

uint64_t sub_100145060(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for VisibleFoldersQuery(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  *((_BYTE *)a1 + 18) = *((_BYTE *)a2 + 18);
  *((_BYTE *)a1 + 19) = *((_BYTE *)a2 + 19);
  return a1;
}

__n128 initializeWithTake for VisibleFoldersQuery(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for VisibleFoldersQuery(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  return a1;
}

uint64_t getEnumTagSinglePayload for VisibleFoldersQuery(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for VisibleFoldersQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VisibleFoldersQuery()
{
  return &type metadata for VisibleFoldersQuery;
}

uint64_t sub_100145220(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100145264(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1001452A0(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_1000163BC(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001452E0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

unint64_t sub_1001452E8()
{
  unint64_t result;

  result = qword_1005D2ED0;
  if (!qword_1005D2ED0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1005D2ED0);
  }
  return result;
}

uint64_t sub_10014532C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for FolderComposerFilterHeader()
{
  return objc_opt_self(_TtC11MobileNotes26FolderComposerFilterHeader);
}

void *DeleteChecklistItemsIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static DeleteChecklistItemsIntent.persistentIdentifier;
}

unint64_t static DeleteChecklistItemsIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1001455DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static DeleteChecklistItemsIntent.title);
  sub_10012A0B0(v10, (uint64_t)static DeleteChecklistItemsIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x800000010047A780);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t DeleteChecklistItemsIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CE978 != -1)
    swift_once(&qword_1005CE978, sub_1001455DC);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static DeleteChecklistItemsIntent.title);
}

uint64_t static DeleteChecklistItemsIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CE978 != -1)
    swift_once(&qword_1005CE978, sub_1001455DC);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static DeleteChecklistItemsIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static DeleteChecklistItemsIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000024, 0x800000010047A710);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static DeleteChecklistItemsIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005D05B8);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D05C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100145B9C();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(27, 1, &type metadata for DeleteChecklistItemsIntent, v6);
  v7._countAndFlagsBits = 0x74206574656C6544;
  v7._object = (void *)0xEB00000000206568;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100454CD0, v8);
  v10 = sub_100012E18(&qword_1005D05D0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._object = (void *)0x800000010047A740;
  v11._countAndFlagsBits = 0xD000000000000010;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for DeleteChecklistItemsIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for DeleteChecklistItemsIntent, v6);
}

unint64_t sub_100145B9C()
{
  unint64_t result;

  result = qword_1005D05C8;
  if (!qword_1005D05C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteChecklistItemsIntent, &type metadata for DeleteChecklistItemsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D05C8);
  }
  return result;
}

uint64_t DeleteChecklistItemsIntent.$entities.getter()
{
  return IntentParameter.projectedValue.getter();
}

uint64_t sub_100145C00@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t DeleteChecklistItemsIntent.entities.getter()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t DeleteChecklistItemsIntent.entities.setter(uint64_t a1)
{
  uint64_t v2;

  v2 = a1;
  return IntentParameter.wrappedValue.setter(&v2);
}

uint64_t (*DeleteChecklistItemsIntent.entities.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = IntentParameter.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t sub_100145CD4()
{
  uint64_t v1;

  IntentParameter.wrappedValue.getter(&v1);
  return v1;
}

uint64_t sub_100145D0C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = (_QWORD *)swift_task_alloc(dword_1005D05DC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100130768;
  return DeleteChecklistItemsIntent.perform()(a1, v4, v5, v6);
}

uint64_t DeleteChecklistItemsIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4[8] = a3;
  v4[9] = a4;
  v4[6] = a1;
  v4[7] = a2;
  v5 = *(_QWORD *)(type metadata accessor for ChecklistItemEntity(0) - 8);
  v4[10] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v4[11] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v7);
  v4[13] = swift_task_alloc(v7);
  return swift_task_switch(sub_100145DEC, 0, 0);
}

uint64_t sub_100145DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 112) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 120) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 80);
    v28 = *(_QWORD *)(v0 + 72);
    LODWORD(v4) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 232) = v4;
    v4 = v4;
    v5 = (v4 + 16) & ~v4;
    v6 = *(_QWORD *)(v0 + 96);
    v7 = (*(_QWORD *)(v0 + 88) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v0 + 128) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 136) = 0;
    v8 = *(_QWORD *)(v0 + 104);
    v10 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 64);
    v27 = v4 | 7;
    sub_100147414(v1 + ((v4 + 32) & ~v4), v8);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 32));
    v11 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 144) = objc_msgSend(v11, "modernManagedObjectContext");

    sub_100147414(v8, v6);
    v12 = swift_allocObject(&unk_100559988, v7 + 24, v27);
    *(_QWORD *)(v0 + 152) = v12;
    sub_100147570(v6, v12 + v5);
    v13 = (_QWORD *)(v12 + v7);
    *v13 = v10;
    v13[1] = v9;
    v13[2] = v28;
    v14 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v10);
    swift_retain(v9);
    swift_retain(v28);
    v15 = (_QWORD *)swift_task_alloc(v14);
    *(_QWORD *)(v0 + 160) = v15;
    v16 = (char *)sub_100012E18((uint64_t *)&unk_1005D0640);
    *v15 = v0;
    v15[1] = sub_100146050;
    v17 = sub_1001475B4;
    v18 = (_QWORD *)(v0 + 24);
    v19 = (_QWORD *)v12;
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    v21 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 56);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 40));
    v23 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 200) = objc_msgSend(v23, "modernManagedObjectContext");

    v24 = (_QWORD *)swift_allocObject(&unk_1005599B0, 40, 7);
    *(_QWORD *)(v0 + 208) = v24;
    v24[2] = v22;
    v24[3] = v21;
    v24[4] = v20;
    v25 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v20);
    swift_retain(v22);
    swift_retain(v21);
    v18 = (_QWORD *)swift_task_alloc(v25);
    *(_QWORD *)(v0 + 216) = v18;
    *v18 = v0;
    v18[1] = sub_1001466F4;
    v16 = (char *)&type metadata for () + 8;
    v17 = sub_1001476AC;
    v19 = v24;
  }
  return NSManagedObjectContext.perform<A>(_:)(v18, v17, v19, v16);
}

uint64_t sub_100146050()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  v2 = *(void **)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 160));
  swift_release(v1);

  return swift_task_switch(sub_1001460B4, 0, 0);
}

uint64_t sub_1001460B4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  uint64_t v40;

  v1 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 168) = v1;
  if (!v1)
    goto LABEL_6;
  v2 = objc_opt_self(ICNote);
  v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
  {

LABEL_6:
    sub_10014763C(*(_QWORD *)(v0 + 104));
    goto LABEL_8;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "managedObjectContext");
  *(_QWORD *)(v0 + 176) = v5;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v0 + 232);
    v7 = *(_QWORD *)(v0 + 96);
    v8 = (v6 + 24) & ~v6;
    v9 = v8 + *(_QWORD *)(v0 + 88);
    v10 = v6 | 7;
    sub_100147414(*(_QWORD *)(v0 + 104), v7);
    v11 = swift_allocObject(&unk_1005599D8, v9, v10);
    *(_QWORD *)(v0 + 184) = v11;
    *(_QWORD *)(v11 + 16) = v4;
    sub_100147570(v7, v11 + v8);
    v12 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v13 = v1;
    v14 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 192) = v14;
    v15 = (char *)sub_100012E18((uint64_t *)&unk_1005D68A0);
    *v14 = v0;
    v14[1] = sub_100146420;
    v16 = sub_1001477B8;
    v17 = (_QWORD *)(v0 + 236);
    v18 = (_QWORD *)v11;
    return NSManagedObjectContext.perform<A>(_:)(v17, v16, v18, v15);
  }
  sub_10014763C(*(_QWORD *)(v0 + 104));

LABEL_8:
  v19 = *(_QWORD *)(v0 + 136) + 1;
  if (v19 == *(_QWORD *)(v0 + 120))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
    v21 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 56);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 40));
    v23 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 200) = objc_msgSend(v23, "modernManagedObjectContext");

    v24 = (_QWORD *)swift_allocObject(&unk_1005599B0, 40, 7);
    *(_QWORD *)(v0 + 208) = v24;
    v24[2] = v22;
    v24[3] = v21;
    v24[4] = v20;
    v25 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v20);
    swift_retain(v22);
    swift_retain(v21);
    v17 = (_QWORD *)swift_task_alloc(v25);
    *(_QWORD *)(v0 + 216) = v17;
    *v17 = v0;
    v17[1] = sub_1001466F4;
    v15 = (char *)&type metadata for () + 8;
    v16 = sub_1001476AC;
    v18 = v24;
  }
  else
  {
    *(_QWORD *)(v0 + 136) = v19;
    v26 = *(unsigned __int8 *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 96);
    v29 = *(_QWORD *)(v0 + 64);
    v30 = *(_QWORD *)(v0 + 56);
    v31 = (v26 + 16) & ~v26;
    v32 = (*(_QWORD *)(v0 + 88) + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    v40 = *(_QWORD *)(v0 + 72);
    v39 = v26 | 7;
    sub_100147414(*(_QWORD *)(v0 + 112) + ((v26 + 32) & ~v26) + *(_QWORD *)(v0 + 128) * v19, v27);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 32));
    v33 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 144) = objc_msgSend(v33, "modernManagedObjectContext");

    sub_100147414(v27, v28);
    v34 = swift_allocObject(&unk_100559988, v32 + 24, v39);
    *(_QWORD *)(v0 + 152) = v34;
    sub_100147570(v28, v34 + v31);
    v35 = (_QWORD *)(v34 + v32);
    *v35 = v30;
    v35[1] = v29;
    v35[2] = v40;
    v36 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v30);
    swift_retain(v29);
    swift_retain(v40);
    v37 = (_QWORD *)swift_task_alloc(v36);
    *(_QWORD *)(v0 + 160) = v37;
    v15 = (char *)sub_100012E18((uint64_t *)&unk_1005D0640);
    *v37 = v0;
    v37[1] = sub_100146050;
    v16 = sub_1001475B4;
    v17 = (_QWORD *)(v0 + 24);
    v18 = (_QWORD *)v34;
  }
  return NSManagedObjectContext.perform<A>(_:)(v17, v16, v18, v15);
}

uint64_t sub_100146420()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  v2 = *(void **)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  swift_release(v1);

  return swift_task_switch(sub_100146484, 0, 0);
}

uint64_t sub_100146484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 104);

  sub_10014763C(v1);
  v2 = *(_QWORD *)(v0 + 136) + 1;
  if (v2 == *(_QWORD *)(v0 + 120))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
    v4 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 56);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 40));
    v6 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 200) = objc_msgSend(v6, "modernManagedObjectContext");

    v7 = (_QWORD *)swift_allocObject(&unk_1005599B0, 40, 7);
    *(_QWORD *)(v0 + 208) = v7;
    v7[2] = v5;
    v7[3] = v4;
    v7[4] = v3;
    v8 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v3);
    swift_retain(v5);
    swift_retain(v4);
    v9 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 216) = v9;
    *v9 = v0;
    v9[1] = sub_1001466F4;
    v10 = (char *)&type metadata for () + 8;
    v11 = sub_1001476AC;
    v12 = v7;
  }
  else
  {
    *(_QWORD *)(v0 + 136) = v2;
    v13 = *(unsigned __int8 *)(v0 + 232);
    v14 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 96);
    v16 = *(_QWORD *)(v0 + 64);
    v17 = *(_QWORD *)(v0 + 56);
    v18 = (v13 + 16) & ~v13;
    v19 = (*(_QWORD *)(v0 + 88) + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = *(_QWORD *)(v0 + 72);
    v20 = v13 | 7;
    sub_100147414(*(_QWORD *)(v0 + 112) + ((v13 + 32) & ~v13) + *(_QWORD *)(v0 + 128) * v2, v14);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 32));
    v21 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 144) = objc_msgSend(v21, "modernManagedObjectContext");

    sub_100147414(v14, v15);
    v22 = swift_allocObject(&unk_100559988, v19 + 24, v20);
    *(_QWORD *)(v0 + 152) = v22;
    sub_100147570(v15, v22 + v18);
    v23 = (_QWORD *)(v22 + v19);
    *v23 = v17;
    v23[1] = v16;
    v23[2] = v27;
    v24 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v17);
    swift_retain(v16);
    swift_retain(v27);
    v25 = (_QWORD *)swift_task_alloc(v24);
    *(_QWORD *)(v0 + 160) = v25;
    v10 = (char *)sub_100012E18((uint64_t *)&unk_1005D0640);
    *v25 = v0;
    v25[1] = sub_100146050;
    v11 = sub_1001475B4;
    v9 = (_QWORD *)(v0 + 24);
    v12 = (_QWORD *)v22;
  }
  return NSManagedObjectContext.perform<A>(_:)(v9, v11, v12, v10);
}

uint64_t sub_1001466F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001467AC;
  }
  else
  {
    v5 = *(void **)(v2 + 200);
    swift_release(*(_QWORD *)(v2 + 208));

    v4 = sub_100146764;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100146764(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 96);
  v3 = *(_QWORD *)(v1 + 104);
  static IntentResult.result<>()(a1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001467AC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 208));

  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100146800@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes26DeleteChecklistItemsIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

id sub_100146828@<X0>(void *a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id result;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  id v28;
  _QWORD aBlock[5];
  uint64_t v30;
  uint64_t v31;

  v7 = type metadata accessor for ChecklistItemEntity(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "textStorage");
  if (!result)
    goto LABEL_3;
  v12 = result;
  v13 = ICTTAttributeNameParagraphStyle;
  v31 = v3;
  v14 = v13;
  v15 = objc_msgSend(v12, "ic_range");
  v27 = v16;
  v28 = v15;
  sub_100147414(a2, (uint64_t)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100559A88, v20 + 8, v17 | 7);
  sub_100147570((uint64_t)v10, v21 + v18);
  *(_QWORD *)(v21 + v19) = v12;
  *(_QWORD *)(v21 + v20) = a1;
  v22 = swift_allocObject(&unk_100559AB0, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_100147AA8;
  *(_QWORD *)(v22 + 24) = v21;
  aBlock[4] = sub_100147B3C;
  v30 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003DA3F0;
  aBlock[3] = &unk_100559AC8;
  v23 = _Block_copy(aBlock);
  v24 = v30;
  v25 = v12;
  v26 = a1;
  swift_retain(v22);
  swift_release(v24);
  objc_msgSend(v25, "enumerateAttribute:inRange:options:usingBlock:", v14, v28, v27, 0, v23);

  _Block_release(v23);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v22, "", 117, 46, 157, 1);
  swift_release(v21);
  result = (id)swift_release(v22);
  if ((v23 & 1) != 0)
    __break(1u);
  else
LABEL_3:
    *a3 = 0;
  return result;
}

void sub_100146A50(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  int v34;
  int v35;
  uint64_t v36;
  char v37;
  void (*v38)(char *, uint64_t);
  id v39;
  NSString v40;
  id v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  void *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  id v47;
  _BYTE *v48;
  id v49;
  _BYTE v50[24];
  uint64_t v51;

  v47 = a7;
  v48 = a4;
  v45 = a6;
  v46 = a3;
  v44 = a2;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012E18((uint64_t *)&unk_1005D8C60);
  __chkstk_darwin(v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v17 = __chkstk_darwin(v16);
  v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v42 - v21;
  __chkstk_darwin(v20);
  v24 = (char *)&v42 - v23;
  sub_100012CE8(a1, (uint64_t)v50, &qword_1005CF190);
  if (!v51)
  {
    sub_100012DDC((uint64_t)v50, &qword_1005CF190);
    return;
  }
  v25 = sub_100147B44();
  if ((swift_dynamicCast(&v49, v50, (char *)&type metadata for Any + 8, v25, 6) & 1) == 0)
    return;
  v26 = v49;
  if (objc_msgSend(v49, "style") == 103)
  {
    v27 = type metadata accessor for ChecklistItemID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v24, a5 + *(int *)(v27 + 20), v9);
    v28 = v26;
    v29 = 1;
    v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
    v42(v24, 0, 1, v9);
    v43 = v28;
    v30 = objc_msgSend(v28, "uuid");
    if (v30)
    {
      v31 = v30;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

      v29 = 0;
    }
    v42(v22, v29, 1, v9);
    v32 = (uint64_t)&v15[*(int *)(v13 + 48)];
    sub_100012CE8((uint64_t)v24, (uint64_t)v15, (uint64_t *)&unk_1005D06A0);
    sub_100012CE8((uint64_t)v22, v32, (uint64_t *)&unk_1005D06A0);
    v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    if (v33((uint64_t)v15, 1, v9) == 1)
    {
      sub_100012DDC((uint64_t)v22, (uint64_t *)&unk_1005D06A0);
      sub_100012DDC((uint64_t)v24, (uint64_t *)&unk_1005D06A0);
      v34 = v33(v32, 1, v9);
      v26 = v43;
      if (v34 == 1)
      {
        sub_100012DDC((uint64_t)v15, (uint64_t *)&unk_1005D06A0);
LABEL_14:
        v39 = objc_allocWithZone((Class)NSAttributedString);
        v40 = String._bridgeToObjectiveC()();
        v41 = objc_msgSend(v39, "initWithString:", v40);

        objc_msgSend(v45, "replaceCharactersInRange:withAttributedString:", v44, v46, v41);
        objc_msgSend(v47, "updateModificationDateAndChangeCount");
        *v48 = 1;
        goto LABEL_15;
      }
      goto LABEL_12;
    }
    sub_100012CE8((uint64_t)v15, (uint64_t)v19, (uint64_t *)&unk_1005D06A0);
    v35 = v33(v32, 1, v9);
    v26 = v43;
    if (v35 == 1)
    {
      sub_100012DDC((uint64_t)v22, (uint64_t *)&unk_1005D06A0);
      sub_100012DDC((uint64_t)v24, (uint64_t *)&unk_1005D06A0);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v19, v9);
LABEL_12:
      sub_100012DDC((uint64_t)v15, (uint64_t *)&unk_1005D8C60);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 32))(v12, v32, v9);
    v36 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v37 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v12, v9, v36);
    v38 = *(void (**)(char *, uint64_t))(v10 + 8);
    v38(v12, v9);
    sub_100012DDC((uint64_t)v22, (uint64_t *)&unk_1005D06A0);
    sub_100012DDC((uint64_t)v24, (uint64_t *)&unk_1005D06A0);
    v38(v19, v9);
    sub_100012DDC((uint64_t)v15, (uint64_t *)&unk_1005D06A0);
    if ((v37 & 1) != 0)
      goto LABEL_14;
  }
LABEL_15:

}

id sub_100146EAC()
{
  id v0;
  id v1;
  unsigned int v2;
  id v3;
  id v5;
  id v6;

  AppDependency.wrappedValue.getter(&v6);
  v0 = v6;
  v1 = objc_msgSend(v6, "modernManagedObjectContext");

  v6 = 0;
  v2 = objc_msgSend(v1, "save:", &v6);

  v3 = v6;
  if (v2)
    return v6;
  v5 = v6;
  _convertNSErrorToError(_:)(v3);

  return (id)swift_willThrow();
}

uint64_t _s11MobileNotes26DeleteChecklistItemsIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD v49[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v45 = *(_QWORD *)(v0 - 8);
  v46 = v0;
  __chkstk_darwin(v0);
  v44 = (char *)&v36 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v42 = (char *)&v36 - v5;
  v6 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v6);
  v41 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v37 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizedStringResource(0);
  v38 = *(_QWORD *)(v17 - 8);
  v39 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012E18(&qword_1005CEE50);
  v47 = 0xD000000000000021;
  v48 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v49, &v47, &type metadata for String, &protocol witness table for String);
  v20 = type metadata accessor for AppDependencyManager(0);
  v21 = static AppDependencyManager.shared.getter(v20);
  v40 = AppDependency.__allocating_init(key:manager:)(v49, v21);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v47 = 0xD000000000000024;
  v48 = 0x8000000100476B40;
  v22 = AnyHashable.init<A>(_:)(v49, &v47, &type metadata for String, &protocol witness table for String);
  v23 = static AppDependencyManager.shared.getter(v22);
  v36 = AppDependency.__allocating_init(key:manager:)(v49, v23);
  sub_100012E18((uint64_t *)&unk_1005D1B80);
  v24 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xEF736D6574492074);
  static Locale.current.getter(v24);
  v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v37 + 104);
  v26(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v8);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, v13, v10, "Parameter title for Delete Tables intent", 40, 2);
  v27 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x8000000100476CB0);
  static Locale.current.getter(v27);
  v26(v10, v25, v8);
  v28 = v41;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v16, 0, 0, v13, v10, "Parameter description for checklist items", 41, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v28, 0, 1, v39);
  v49[0] = 0;
  v29 = type metadata accessor for IntentDialog(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v31 = v42;
  v30(v42, 1, 1, v29);
  v32 = v43;
  v30(v43, 1, 1, v29);
  v33 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v44, enum case for InputConnectionBehavior.default(_:), v46);
  v34 = sub_100019C6C((unint64_t *)&unk_1005CEE80, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v19, v28, v49, v31, v32, v33, v34);
  return v40;
}

uint64_t sub_100147414(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChecklistItemEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100147458()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for ChecklistItemEntity(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + *(int *)(type metadata accessor for ChecklistItemID(0) + 20);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v9(v7 + v1[5], v8);
  swift_release(*(_QWORD *)(v7 + v1[6]));
  swift_release(*(_QWORD *)(v7 + v1[7]));
  swift_release(*(_QWORD *)(v7 + v1[8]));
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 16));
  return swift_deallocObject(v0, v6 + 24, v5);
}

uint64_t sub_100147570(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ChecklistItemEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1001475B4(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;
  void *v4;

  type metadata accessor for ChecklistItemEntity(0);
  AppDependency.wrappedValue.getter(&v4);
  v2 = v4;
  v3 = ChecklistItemEntity.note(in:)(v4);

  *a1 = v3;
}

uint64_t sub_10014763C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ChecklistItemEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100147678()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

id sub_1001476AC()
{
  return sub_100146EAC();
}

uint64_t sub_1001476C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for ChecklistItemEntity(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + *(int *)(type metadata accessor for ChecklistItemID(0) + 20);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v9(v7 + v1[5], v8);
  swift_release(*(_QWORD *)(v7 + v1[6]));
  swift_release(*(_QWORD *)(v7 + v1[7]));
  swift_release(*(_QWORD *)(v7 + v1[8]));
  return swift_deallocObject(v0, v5, v6);
}

id sub_1001477B8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ChecklistItemEntity(0) - 8) + 80);
  return sub_100146828(*(void **)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_100147808()
{
  unint64_t result;

  result = qword_1005D0650;
  if (!qword_1005D0650)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteChecklistItemsIntent, &type metadata for DeleteChecklistItemsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D0650);
  }
  return result;
}

uint64_t sub_10014784C()
{
  return sub_100019C6C((unint64_t *)&unk_1005CEE80, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
}

unint64_t sub_100147880()
{
  unint64_t result;

  result = qword_1005D0660;
  if (!qword_1005D0660)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteChecklistItemsIntent, &type metadata for DeleteChecklistItemsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D0660);
  }
  return result;
}

unint64_t sub_1001478C8()
{
  unint64_t result;

  result = qword_1005D0668;
  if (!qword_1005D0668)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeleteChecklistItemsIntent, &type metadata for DeleteChecklistItemsIntent);
    atomic_store(result, (unint64_t *)&qword_1005D0668);
  }
  return result;
}

uint64_t sub_10014790C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of DeleteChecklistItemsIntent.perform()>>, 1);
}

uint64_t sub_10014791C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static DeleteChecklistItemsIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for DeleteChecklistItemsIntent()
{
  return &type metadata for DeleteChecklistItemsIntent;
}

uint64_t sub_10014793C()
{
  return sub_100016638(&qword_1005D0678, (uint64_t *)&unk_1005D0680, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_100147968()
{
  return sub_100016638((unint64_t *)&qword_1005D1B40, (uint64_t *)&unk_1005D0690, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100147994()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for ChecklistItemEntity(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v4;
  v9 = type metadata accessor for URL(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = v8 + *(int *)(type metadata accessor for ChecklistItemID(0) + 20);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v10(v8 + v1[5], v9);
  swift_release(*(_QWORD *)(v8 + v1[6]));
  swift_release(*(_QWORD *)(v8 + v1[7]));
  swift_release(*(_QWORD *)(v8 + v1[8]));

  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_100147AA8(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for ChecklistItemEntity(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100146A50(a1, a2, a3, a4, v4 + v10, *(void **)(v4 + v11), *(void **)(v4 + ((v11 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100147B2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100147B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1003DA3D0(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

unint64_t sub_100147B44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D06B0;
  if (!qword_1005D06B0)
  {
    v1 = objc_opt_self(ICTTParagraphStyle);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D06B0);
  }
  return result;
}

void sub_100147D5C()
{
  uint64_t v0;
  uint64_t Strong;
  void *v2;
  void *v3;
  id v4;
  NSString v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  uint64_t v11;
  void *v12;
  id v13;
  NSString v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  NSString v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  uint64_t v30;
  void *v31;
  id v32;
  NSString v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  void *v40;
  id v41;
  NSString v42;
  NSString v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  NSString v47;
  uint64_t v48;
  void *v49;
  id v50;
  NSString v51;
  NSString v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;

  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_whySmartFoldersExampleBodyTextView);
  if (!Strong)
  {
    __break(1u);
    goto LABEL_9;
  }
  v2 = (void *)Strong;
  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v3, "mainBundle");
  v5 = String._bridgeToObjectiveC()();
  v6 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v4, "localizedStringForKey:value:table:", v5, v6, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v9 = v8;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  objc_msgSend(v2, "setText:", v10);

  v11 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_smartFoldersExampleBodyTextView);
  if (!v11)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v12 = (void *)v11;
  v13 = objc_msgSend(v3, "mainBundle");
  v14 = String._bridgeToObjectiveC()();
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, v15, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v18 = v17;

  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v12, "setText:", v19);

  v20 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_makeSmartFoldersBodyTextView);
  if (!v20)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v21 = (void *)v20;
  v22 = (void *)objc_opt_self(UIDevice);
  objc_msgSend(v22, "ic_isVision");
  v23 = objc_msgSend(v3, "mainBundle");
  v24 = String._bridgeToObjectiveC()();
  v25 = String._bridgeToObjectiveC()();
  v26 = objc_msgSend(v23, "localizedStringForKey:value:table:", v24, v25, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v28 = v27;

  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  objc_msgSend(v21, "setText:", v29);

  v30 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsSummaryBodyTextView);
  if (!v30)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v31 = (void *)v30;
  objc_msgSend(v22, "ic_isVision");
  v32 = objc_msgSend(v3, "mainBundle");
  v33 = String._bridgeToObjectiveC()();
  v34 = String._bridgeToObjectiveC()();
  v35 = objc_msgSend(v32, "localizedStringForKey:value:table:", v33, v34, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v37 = v36;

  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v37);
  objc_msgSend(v31, "setText:", v38);

  v39 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsExampleBodyTextView);
  if (!v39)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v40 = (void *)v39;
  objc_msgSend(v22, "ic_isVision");
  v41 = objc_msgSend(v3, "mainBundle");
  v42 = String._bridgeToObjectiveC()();
  v43 = String._bridgeToObjectiveC()();
  v44 = objc_msgSend(v41, "localizedStringForKey:value:table:", v42, v43, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
  v46 = v45;

  v47 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v46);
  objc_msgSend(v40, "setText:", v47);

  v48 = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToSmartFoldersBodyTextView);
  if (v48)
  {
    v49 = (void *)v48;
    v50 = objc_msgSend(v3, "mainBundle");
    v51 = String._bridgeToObjectiveC()();
    v52 = String._bridgeToObjectiveC()();
    v53 = objc_msgSend(v50, "localizedStringForKey:value:table:", v51, v52, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    v55 = v54;

    v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v55);
    objc_msgSend(v49, "setText:", v56);

    return;
  }
LABEL_13:
  __break(1u);
}

unint64_t sub_100148404()
{
  return sub_100135808((uint64_t)&off_1005555A8);
}

uint64_t sub_100148410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = sub_100012E18((uint64_t *)&unk_1005D07B0);
  v2 = swift_allocObject(v1, 96, 7);
  *(_OWORD *)(v2 + 16) = xmmword_100454E90;
  result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsExampleBodyTextView);
  if (result)
  {
    v4 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_learnMoreTagsPlaceholder);
    v5 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_learnMoreTagsPlaceholder + 8);
    *(_QWORD *)(v2 + 32) = result;
    *(_QWORD *)(v2 + 40) = v4;
    *(_QWORD *)(v2 + 48) = v5;
    *(_BYTE *)(v2 + 56) = 2;
    result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToSmartFoldersBodyTextView);
    if (result)
    {
      v6 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToPlaceholder);
      v7 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToPlaceholder + 8);
      *(_QWORD *)(v2 + 64) = result;
      *(_QWORD *)(v2 + 72) = v6;
      *(_QWORD *)(v2 + 80) = v7;
      *(_BYTE *)(v2 + 88) = 0;
      swift_bridgeObjectRetain(v5);
      swift_bridgeObjectRetain(v7);
      return v2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100148530(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  objc_class *ObjectType;
  char *v7;
  char *v8;
  NSString v9;
  id v10;
  objc_super v12;

  ObjectType = (objc_class *)swift_getObjectType(v3);
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_whySmartFoldersExampleBodyTextView], 0);
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_smartFoldersExampleBodyTextView], 0);
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_makeSmartFoldersBodyTextView], 0);
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsSummaryBodyTextView], 0);
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsExampleBodyTextView], 0);
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToSmartFoldersBodyTextView], 0);
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filtersView], 0);
  v7 = &v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToPlaceholder];
  *(_QWORD *)v7 = 0xD000000000000017;
  *((_QWORD *)v7 + 1) = 0x800000010047B230;
  v8 = &v3[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_learnMoreTagsPlaceholder];
  *(_QWORD *)v8 = 0xD000000000000029;
  *((_QWORD *)v8 + 1) = 0x800000010047B250;
  if (a2)
  {
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v9 = 0;
  }
  v12.receiver = v3;
  v12.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v12, "initWithNibName:bundle:", v9, a3);

  return v10;
}

id sub_1001486FC(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  char *v5;
  id v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_whySmartFoldersExampleBodyTextView], 0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_smartFoldersExampleBodyTextView], 0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_makeSmartFoldersBodyTextView], 0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsSummaryBodyTextView], 0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsExampleBodyTextView], 0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToSmartFoldersBodyTextView], 0);
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filtersView], 0);
  v4 = &v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToPlaceholder];
  *(_QWORD *)v4 = 0xD000000000000017;
  *((_QWORD *)v4 + 1) = 0x800000010047B230;
  v5 = &v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_learnMoreTagsPlaceholder];
  *(_QWORD *)v5 = 0xD000000000000029;
  *((_QWORD *)v5 + 1) = 0x800000010047B250;
  v8.receiver = v1;
  v8.super_class = ObjectType;
  v6 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);

  return v6;
}

uint64_t sub_100148854()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_whySmartFoldersExampleBodyTextView);
  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_smartFoldersExampleBodyTextView);
  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_makeSmartFoldersBodyTextView);
  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsSummaryBodyTextView);
  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsExampleBodyTextView);
  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToSmartFoldersBodyTextView);
  swift_unknownObjectWeakDestroy(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filtersView);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToPlaceholder + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0
                                             + OBJC_IVAR___ICLearnMoreSmartFoldersViewController_learnMoreTagsPlaceholder
                                             + 8));
}

uint64_t type metadata accessor for LearnMoreSmartFoldersViewController()
{
  return objc_opt_self(ICLearnMoreSmartFoldersViewController);
}

uint64_t sub_100148A80(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Strong;
  void *v9;
  id v10;
  char v11;
  id v12;
  id v13;
  NSURL *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  Class isa;
  uint64_t v19;
  void *v20;
  id v21;
  char v22;
  id v23;
  void *v24;
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_howToSmartFoldersBodyTextView]);
  if (Strong
    && (v9 = (void *)Strong,
        sub_100148CAC(),
        v10 = a1,
        v11 = static NSObject.== infix(_:_:)(v10),
        v10,
        v10,
        v9,
        (v11 & 1) != 0))
  {
    v12 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
    v13 = objc_msgSend((id)objc_opt_self(ICHelp), "smartFoldersSupportURL");
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

    URL._bridgeToObjectiveC()(v14);
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v17 = sub_100135928((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for OpenExternalURLOptionsKey(0);
    sub_100148CE8();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    objc_msgSend(v12, "openURL:options:completionHandler:", v16, isa, 0);

  }
  else
  {
    v19 = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR___ICLearnMoreSmartFoldersViewController_filteringTagsExampleBodyTextView]);
    if (v19)
    {
      v20 = (void *)v19;
      sub_100148CAC();
      v21 = a1;
      v22 = static NSObject.== infix(_:_:)(v21);

      if ((v22 & 1) != 0)
      {
        v23 = objc_msgSend(v2, "presentingViewController");
        if (v23)
        {
          v24 = v23;
          type metadata accessor for LearnMoreTagsViewController();
          sub_1003E26A0(v24);

        }
      }
    }
  }
  return 0;
}

unint64_t sub_100148CAC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D07A0;
  if (!qword_1005D07A0)
  {
    v1 = objc_opt_self(UITextView);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D07A0);
  }
  return result;
}

unint64_t sub_100148CE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005CFA90;
  if (!qword_1005CFA90)
  {
    type metadata accessor for OpenExternalURLOptionsKey(255);
    result = swift_getWitnessTable(&unk_1004539BC, v1);
    atomic_store(result, (unint64_t *)&qword_1005CFA90);
  }
  return result;
}

id sub_100148D30()
{
  return sub_100148D68(&qword_1005CECE0, (id *)&qword_100601D48);
}

id sub_100148D4C()
{
  return sub_100148D68(&qword_1005CEDA0, (id *)&qword_100601F10);
}

id sub_100148D68(_QWORD *a1, id *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_100148DA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t KeyPath;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _OWORD v88[11];
  __int128 v89;
  _BYTE v90[199];
  char v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  unsigned __int8 v94;
  _BYTE v95[7];
  _BYTE v96[7];
  _BYTE v97[7];
  _BYTE v98[7];
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _OWORD v110[2];
  uint64_t v111;
  unsigned __int8 v112;
  uint64_t v113;
  unsigned __int8 v114;
  uint64_t v115;
  uint64_t v116;

  v86 = a1;
  v84 = type metadata accessor for Material(0);
  v82 = *(_QWORD *)(v84 - 8);
  __chkstk_darwin(v84);
  v79 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v3);
  v5 = (_OWORD *)((char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v77 = sub_100012E18(&qword_1005D0820);
  __chkstk_darwin(v77);
  v7 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100012E18(&qword_1005D0828);
  __chkstk_darwin(v83);
  v78 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100012E18(&qword_1005D0830);
  v9 = __chkstk_darwin(v80);
  v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = static HorizontalAlignment.leading.getter(v9);
  v12 = objc_msgSend((id)objc_opt_self(ICDeviceSupport), "deviceIsMac");
  v13 = 0x4020000000000000;
  if (v12)
    v13 = 0x4010000000000000;
  v81 = v13;
  v14 = sub_100149360(v1, (uint64_t)v88);
  v91 = 0;
  *(_OWORD *)&v90[135] = v88[8];
  *(_OWORD *)&v90[151] = v88[9];
  *(_OWORD *)&v90[167] = v88[10];
  *(_OWORD *)&v90[183] = v89;
  *(_OWORD *)&v90[71] = v88[4];
  *(_OWORD *)&v90[87] = v88[5];
  *(_OWORD *)&v90[103] = v88[6];
  *(_OWORD *)&v90[119] = v88[7];
  *(_OWORD *)&v90[7] = v88[0];
  *(_OWORD *)&v90[23] = v88[1];
  *(_OWORD *)&v90[39] = v88[2];
  *(_OWORD *)&v90[55] = v88[3];
  v76 = 0;
  v108 = *(_OWORD *)&v90[144];
  v109 = *(_OWORD *)&v90[160];
  v110[0] = *(_OWORD *)&v90[176];
  *(_QWORD *)((char *)v110 + 15) = *((_QWORD *)&v89 + 1);
  v105 = *(_OWORD *)&v90[96];
  v106 = *(_OWORD *)&v90[112];
  v107 = *(_OWORD *)&v90[128];
  v101 = *(_OWORD *)&v90[32];
  v102 = *(_OWORD *)&v90[48];
  v103 = *(_OWORD *)&v90[64];
  v104 = *(_OWORD *)&v90[80];
  v99 = *(_OWORD *)v90;
  v100 = *(_OWORD *)&v90[16];
  v15 = static Alignment.leading.getter(v14);
  v17 = _FrameLayout.init(width:height:alignment:)(&v111, 0x4074000000000000, 0, 0, 1, v15, v16);
  v72 = v111;
  v73 = v113;
  v74 = v116;
  v75 = v115;
  v93 = v112;
  v92 = v114;
  v71 = static Edge.Set.all.getter(v17);
  v18 = EdgeInsets.init(_all:)(8.0);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v66 = v93;
  v67 = v92;
  v94 = 0;
  v70 = ((uint64_t (*)(void))static SafeAreaRegions.all.getter)();
  v25 = static Edge.Set.all.getter(v70);
  v68 = v94;
  v69 = v25;
  v26 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v27 = Color.init(_:)(v26);
  KeyPath = swift_getKeyPath(&unk_100454F38, v28);
  v87 = v27;
  v64 = AnyShapeStyle.init<A>(_:)(&v87, &type metadata for Color, &protocol witness table for Color);
  v29 = static Alignment.center.getter();
  v62 = v30;
  v63 = v29;
  v31 = (char *)v5 + *(int *)(v3 + 20);
  v32 = enum case for RoundedCornerStyle.continuous(_:);
  v33 = type metadata accessor for RoundedCornerStyle(0);
  v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v31, v32, v33);
  __asm { FMOV            V0.2D, #16.0 }
  *v5 = _Q0;
  v40 = v79;
  static Material.ultraThin.getter(v34);
  sub_10014B2E4((uint64_t)v5, (uint64_t)v7);
  v41 = v77;
  v42 = v82;
  v43 = v84;
  (*(void (**)(char *, char *, uint64_t))(v82 + 16))(&v7[*(int *)(v77 + 52)], v40, v84);
  *(_WORD *)&v7[*(int *)(v41 + 56)] = 256;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v40, v43);
  v44 = sub_10014B328((uint64_t)v5);
  v45 = static SafeAreaRegions.all.getter(v44);
  LOBYTE(v43) = static Edge.Set.all.getter(v45);
  v46 = v78;
  sub_100012CE8((uint64_t)v7, v78, &qword_1005D0820);
  v47 = v46 + *(int *)(sub_100012E18(&qword_1005D0838) + 36);
  *(_QWORD *)v47 = v45;
  *(_BYTE *)(v47 + 8) = v43;
  sub_100012DDC((uint64_t)v7, &qword_1005D0820);
  v48 = (uint64_t *)(v46 + *(int *)(v83 + 36));
  v49 = v62;
  *v48 = v63;
  v48[1] = v49;
  sub_100012CE8(v46, (uint64_t)&v11[*(int *)(v80 + 36)], &qword_1005D0828);
  v50 = v107;
  *(_OWORD *)(v11 + 161) = v108;
  v51 = v110[0];
  *(_OWORD *)(v11 + 177) = v109;
  *(_OWORD *)(v11 + 193) = v51;
  v52 = v103;
  *(_OWORD *)(v11 + 97) = v104;
  v53 = v106;
  *(_OWORD *)(v11 + 113) = v105;
  *(_OWORD *)(v11 + 129) = v53;
  *(_OWORD *)(v11 + 145) = v50;
  v54 = v99;
  *(_OWORD *)(v11 + 33) = v100;
  v55 = v102;
  *(_OWORD *)(v11 + 49) = v101;
  *(_OWORD *)(v11 + 65) = v55;
  *(_OWORD *)(v11 + 81) = v52;
  v56 = v81;
  *(_QWORD *)v11 = v85;
  *((_QWORD *)v11 + 1) = v56;
  v11[16] = v76;
  v57 = *(_QWORD *)((char *)v110 + 15);
  *(_OWORD *)(v11 + 17) = v54;
  v58 = v72;
  *((_QWORD *)v11 + 26) = v57;
  *((_QWORD *)v11 + 27) = v58;
  v11[224] = v66;
  *(_DWORD *)(v11 + 225) = v87;
  *((_DWORD *)v11 + 57) = *(_DWORD *)((char *)&v87 + 3);
  *((_QWORD *)v11 + 29) = v73;
  v11[240] = v67;
  *(_DWORD *)(v11 + 241) = *(_DWORD *)v98;
  *((_DWORD *)v11 + 61) = *(_DWORD *)&v98[3];
  v59 = v74;
  *((_QWORD *)v11 + 31) = v75;
  *((_QWORD *)v11 + 32) = v59;
  v11[264] = v71;
  *((_DWORD *)v11 + 67) = *(_DWORD *)&v97[3];
  *(_DWORD *)(v11 + 265) = *(_DWORD *)v97;
  *((double *)v11 + 34) = v18;
  *((_QWORD *)v11 + 35) = v20;
  *((_QWORD *)v11 + 36) = v22;
  *((_QWORD *)v11 + 37) = v24;
  v11[304] = v68;
  *(_DWORD *)(v11 + 305) = *(_DWORD *)v96;
  *((_DWORD *)v11 + 77) = *(_DWORD *)&v96[3];
  *((_QWORD *)v11 + 39) = v70;
  v11[320] = v69;
  *(_DWORD *)(v11 + 321) = *(_DWORD *)v95;
  *((_DWORD *)v11 + 81) = *(_DWORD *)&v95[3];
  v60 = v64;
  *((_QWORD *)v11 + 41) = KeyPath;
  *((_QWORD *)v11 + 42) = v60;
  sub_100012DDC(v46, &qword_1005D0828);
  return sub_10014BD1C((uint64_t)v11, v86, &qword_1005D0830);
}

uint64_t sub_100149360@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t KeyPath;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)@<X0>(uint64_t *@<X8>);
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  id (*v47)@<X0>(uint64_t@<X8>);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *(*v51)@<X0>(uint64_t@<X8>);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;

  v4 = *(_QWORD *)a1;
  v5 = *(void **)(a1 + 8);
  v6 = *(unsigned __int8 *)(a1 + 16);
  v7 = type metadata accessor for NoteDebugStatusController(0);
  v8 = sub_100019C6C(&qword_1005D0840, type metadata accessor for NoteDebugStatusController, (uint64_t)&unk_1004634DC);
  v45 = v6;
  v9 = (void *)StateObject.wrappedValue.getter(v4, v5, v6, v7, v8);
  KeyPath = swift_getKeyPath(&unk_100454F78, v10);
  v13 = swift_getKeyPath(&unk_100454FA0, v12);
  static Published.subscript.getter(&v59);

  swift_release(KeyPath);
  swift_release(v13);
  v14 = v59;
  if (v59)
  {
    if (objc_msgSend(v59, "isPasswordProtected"))
    {
      v55 = swift_allocObject(&unk_100559CD8, 24, 7);
      *(_QWORD *)(v55 + 16) = v14;
      LOBYTE(v57) = 1;
      State.init(wrappedValue:)(&v59, &v57, &type metadata for Bool);
      v54 = v59;
      v52 = 0x800000010047B280;
      v53 = v60;
      v50 = 0xD000000000000013;
      v51 = sub_10014B49C;
      goto LABEL_6;
    }

  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v55 = 0;
LABEL_6:
  v15 = (void *)StateObject.wrappedValue.getter(v4, v5, v45, v7, v8);
  v17 = swift_getKeyPath(&unk_100454F78, v16);
  v19 = swift_getKeyPath(&unk_100454FA0, v18);
  static Published.subscript.getter(&v59);

  swift_release(v17);
  swift_release(v19);
  v20 = v59;
  v44 = v5;
  if (v59)
  {
    if (objc_msgSend(v59, "isInICloudAccount", v5))
    {
      v48 = swift_allocObject(&unk_100559CB0, 24, 7);
      *(_QWORD *)(v48 + 16) = v20;
      LOBYTE(v57) = 1;
      State.init(wrappedValue:)(&v59, &v57, &type metadata for Bool);
      v49 = v59;
      v46 = v60;
      v47 = sub_10014B420;
      v21 = 0xE700000000000000;
      v22 = 0x676E69636E7953;
      goto LABEL_11;
    }

  }
  v22 = 0;
  v21 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 0;
  v46 = 0;
LABEL_11:
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(void **)(a1 + 32);
  v25 = *(unsigned __int8 *)(a1 + 40);
  v26 = type metadata accessor for GroupActivityDebugStatusController(0);
  v27 = sub_100019C6C(&qword_1005D0848, type metadata accessor for GroupActivityDebugStatusController, (uint64_t)&unk_1004664B8);
  v28 = (char *)StateObject.wrappedValue.getter(v23, v24, v25, v26, v27);
  v29 = &v28[OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities];
  swift_beginAccess(&v28[OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities], &v59, 0, 0);
  v30 = *(_QWORD *)v29;
  swift_bridgeObjectRetain(v30);

  v31 = *(_QWORD *)(v30 + 16);
  swift_bridgeObjectRelease(v30);
  if (v31)
  {
    v32 = (_OWORD *)swift_allocObject(&unk_100559C88, 57, 7);
    v33 = *(_OWORD *)(a1 + 16);
    v32[1] = *(_OWORD *)a1;
    v32[2] = v33;
    v34 = *(_OWORD *)(a1 + 25);
    v35 = (uint64_t)v32;
    *(_OWORD *)((char *)v32 + 41) = v34;
    v56 = 1;
    sub_10014B014(v4, v44, v45);
    sub_10014B014(v23, v24, v25);
    State.init(wrappedValue:)(&v57, &v56, &type metadata for Bool);
    v36 = v57;
    v37 = v58;
    v38 = sub_10014B3A0;
    v39 = 0xE900000000000063;
    v40 = 0x6E79532074736146;
  }
  else
  {
    v40 = 0;
    v39 = 0;
    v38 = 0;
    v35 = 0;
    v36 = 0;
    v37 = 0;
  }
  v56 = 1;
  State.init(wrappedValue:)(&v57, &v56, &type metadata for Bool);
  v41 = v57;
  v42 = v58;
  *(_QWORD *)a2 = v50;
  *(_QWORD *)(a2 + 8) = v52;
  *(_QWORD *)(a2 + 16) = v51;
  *(_QWORD *)(a2 + 24) = v55;
  *(_QWORD *)(a2 + 32) = v54;
  *(_QWORD *)(a2 + 40) = v53;
  *(_QWORD *)(a2 + 48) = v22;
  *(_QWORD *)(a2 + 56) = v21;
  *(_QWORD *)(a2 + 64) = v47;
  *(_QWORD *)(a2 + 72) = v48;
  *(_QWORD *)(a2 + 80) = v49;
  *(_QWORD *)(a2 + 88) = v46;
  *(_QWORD *)(a2 + 96) = v40;
  *(_QWORD *)(a2 + 104) = v39;
  *(_QWORD *)(a2 + 112) = v38;
  *(_QWORD *)(a2 + 120) = v35;
  *(_QWORD *)(a2 + 128) = v36;
  *(_QWORD *)(a2 + 136) = v37;
  strcpy((char *)(a2 + 144), "Search Index");
  *(_BYTE *)(a2 + 157) = 0;
  *(_WORD *)(a2 + 158) = -5120;
  *(_QWORD *)(a2 + 160) = sub_1001499BC;
  *(_QWORD *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 176) = v41;
  *(_QWORD *)(a2 + 184) = v42;
  sub_10014B3A8(v50, v52, (uint64_t)v51, v55, v54, v53);
  sub_10014B3A8(v22, v21, (uint64_t)v47, v48, v49, v46);
  sub_10014B3A8(v40, v39, (uint64_t)v38, v35, v36, v37);
  sub_10014B3E4(v40, v39, (uint64_t)v38, v35, v36, v37);
  sub_10014B3E4(v22, v21, (uint64_t)v47, v48, v49, v46);
  return sub_10014B3E4(v50, v52, (uint64_t)v51, v55, v54, v53);
}

_QWORD *sub_100149894@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  char v10;
  uint64_t v11;
  char v12;
  _QWORD v13[2];

  v4 = sub_10014B4A4();
  v5 = sub_100019C6C(qword_1005D0850, (uint64_t (*)(uint64_t))sub_10014B4A4, (uint64_t)&protocol conformance descriptor for NSManagedObject);
  v6 = ObservedObject.init(wrappedValue:)(a1, v4, v5);
  v8 = v7;
  v12 = 0;
  result = State.init(wrappedValue:)(v13, &v12, &type metadata for Bool);
  v10 = v13[0];
  v11 = v13[1];
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_BYTE *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  return result;
}

uint64_t sub_100149934@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = type metadata accessor for GroupActivityDebugStatusController(0);
  v7 = sub_100019C6C(&qword_1005D0848, type metadata accessor for GroupActivityDebugStatusController, (uint64_t)&unk_1004664B8);
  v8 = StateObject.wrappedValue.getter(v3, v4, v5, v6, v7);
  result = ObservedObject.init(wrappedValue:)(v8, v6, v7);
  *a2 = result;
  a2[1] = v10;
  return result;
}

void sub_1001499BC(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = sub_100151FE0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
}

uint64_t sub_1001499D0(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v4 = a1;
  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin(a1);
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *v4++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin(a1);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin(TupleTypeMetadata);
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_100149B8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100148DA0(a1);
}

uint64_t sub_100149BC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t KeyPath;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _OWORD *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t);
  uint64_t v141;
  void (*v142)(char *, uint64_t, uint64_t);
  char *v143;
  uint64_t v144;
  void (*v145)(uint64_t, uint64_t);
  uint64_t v146;
  uint64_t v148;
  uint64_t (*v149)(_QWORD *);
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  unsigned __int128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199[8];
  uint64_t v200;
  uint64_t v201;
  __int128 *v202;
  uint64_t OpaqueTypeConformance2;
  void *v204;
  uint64_t v205;
  uint64_t v206;
  void *v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD v210[2];
  uint64_t v211[4];
  unsigned __int128 v212;
  uint64_t v213;
  void *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  unsigned __int128 v219;
  __int128 v220;

  v3 = v2;
  v193 = a2;
  v5 = type metadata accessor for EnabledTextSelectability(0);
  v164 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v163 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v195 = v8;
  v162 = v9;
  __chkstk_darwin(v6);
  v160 = (char *)&v148 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001537C(&qword_1005D0948);
  v12 = type metadata accessor for ModifiedContent(0, v8, v11);
  v158 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v156 = (char *)&v148 - v13;
  v14 = sub_10001537C(&qword_1005D0950);
  v15 = type metadata accessor for ModifiedContent(0, v12, v14);
  v159 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v157 = (char *)&v148 - v16;
  v194 = *(_QWORD *)(a1 + 24);
  v17 = v194;
  v18 = sub_100016638(&qword_1005D0958, &qword_1005D0948, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v217 = v17;
  v218 = v18;
  v161 = v12;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v20 = sub_100016638(&qword_1005D0960, &qword_1005D0950, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v150 = WitnessTable;
  v215 = WitnessTable;
  v216 = v20;
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  *(_QWORD *)&v192 = v15;
  *(_QWORD *)&v212 = v15;
  *((_QWORD *)&v212 + 1) = v5;
  *((_QWORD *)&v192 + 1) = v5;
  v198 = v21;
  v213 = v21;
  v214 = &protocol witness table for EnabledTextSelectability;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v212, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 0);
  v153 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2);
  v151 = (char *)&v148 - v23;
  v155 = v24;
  v25 = type metadata accessor for ModifiedContent(0, v24, &type metadata for _PaddingLayout);
  v187 = *(_QWORD *)(v25 - 8);
  v26 = __chkstk_darwin(v25);
  v152 = (char *)&v148 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  v154 = (uint64_t)&v148 - v28;
  v197 = v29;
  v191 = type metadata accessor for Optional(0, v29);
  v188 = *(_QWORD *)(v191 - 8);
  v30 = __chkstk_darwin(v191);
  v190 = (uint64_t)&v148 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  v189 = (char *)&v148 - v32;
  v183 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v183);
  v180 = (char *)&v148 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v185 = sub_100012E18(&qword_1005D0968);
  __chkstk_darwin(v185);
  v182 = (uint64_t)&v148 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = sub_100012E18(&qword_1005D0970);
  __chkstk_darwin(v184);
  v181 = (uint64_t)&v148 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for Image.Scale(0);
  v178 = *(_QWORD *)(v179 - 8);
  __chkstk_darwin(v179);
  v177 = (char *)&v148 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for IconOnlyLabelStyle(0);
  v171 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v38 = (char *)&v148 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100012E18(&qword_1005D0978);
  v168 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v41 = (char *)&v148 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v169 = sub_100012E18(&qword_1005D0980);
  v166 = *(_QWORD *)(v169 - 8);
  __chkstk_darwin(v169);
  v43 = (char *)&v148 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v165 = sub_100012E18(&qword_1005D0988);
  __chkstk_darwin(v165);
  v45 = (char *)&v148 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = sub_100012E18(&qword_1005D0990);
  v174 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v47 = (char *)&v148 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v167 = sub_100012E18(&qword_1005D0998);
  __chkstk_darwin(v167);
  v49 = (char *)&v148 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = sub_100012E18(&qword_1005D09A0);
  __chkstk_darwin(v176);
  v173 = (uint64_t)&v148 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v196 = sub_100012E18(&qword_1005D09A8);
  v51 = __chkstk_darwin(v196);
  v186 = (uint64_t)&v148 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  v172 = (char *)&v148 - v53;
  v54 = *v3;
  v55 = *((_QWORD *)v3 + 3);
  v149 = (uint64_t (*)(_QWORD *))*((_QWORD *)v3 + 2);
  v219 = v3[2];
  v220 = v54;
  v56 = swift_allocObject(&unk_100559D80, 80, 7);
  v57 = v195;
  v58 = v194;
  *(_QWORD *)(v56 + 16) = v195;
  *(_QWORD *)(v56 + 24) = v58;
  v59 = v3[1];
  *(_OWORD *)(v56 + 32) = *v3;
  *(_OWORD *)(v56 + 48) = v59;
  *(_OWORD *)(v56 + 64) = v3[2];
  v200 = v57;
  v201 = v58;
  v202 = v3;
  sub_10014BA28((uint64_t)&v220);
  v148 = v55;
  swift_retain(v55);
  sub_10014BA50((uint64_t)&v219);
  v60 = sub_100012E18(&qword_1005D09B0);
  v61 = sub_100016638(&qword_1005D09B8, &qword_1005D09B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v62 = Button.init(action:label:)(sub_10014B9C8, v56, sub_10014BA1C, v199, v60, v61);
  IconOnlyLabelStyle.init()(v62);
  v63 = sub_100016638(&qword_1005D09C0, &qword_1005D0978, (uint64_t)&protocol conformance descriptor for Button<A>);
  v64 = sub_100019C6C(&qword_1005D09C8, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
  v65 = v170;
  View.labelStyle<A>(_:)(v38, v39, v170, v63, v64);
  (*(void (**)(char *, uint64_t))(v171 + 8))(v38, v65);
  v66 = (*(uint64_t (**)(char *, uint64_t))(v168 + 8))(v41, v39);
  v67 = static Font.subheadline.getter(v66);
  KeyPath = swift_getKeyPath(&unk_100455040, v68);
  v70 = v166;
  v71 = v169;
  (*(void (**)(char *, char *, uint64_t))(v166 + 16))(v45, v43, v169);
  v72 = v165;
  v73 = (uint64_t *)&v45[*(int *)(v165 + 36)];
  *v73 = KeyPath;
  v73[1] = v67;
  (*(void (**)(char *, uint64_t))(v70 + 8))(v43, v71);
  v74 = sub_10014BA80();
  View.bold(_:)(1, v72, v74);
  sub_100012DDC((uint64_t)v45, &qword_1005D0988);
  v75 = v178;
  v76 = v177;
  v77 = v179;
  (*(void (**)(char *, _QWORD, uint64_t))(v178 + 104))(v177, enum case for Image.Scale.large(_:), v179);
  v79 = swift_getKeyPath(&unk_100455070, v78);
  v80 = (uint64_t *)&v49[*(int *)(v167 + 36)];
  v81 = sub_100012E18(&qword_1005D09D8);
  (*(void (**)(char *, char *, uint64_t))(v75 + 16))((char *)v80 + *(int *)(v81 + 28), v76, v77);
  *v80 = v79;
  v82 = v174;
  v83 = v175;
  (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v49, v47, v175);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
  v84 = (*(uint64_t (**)(char *, uint64_t))(v82 + 8))(v47, v83);
  LOBYTE(v83) = static Edge.Set.all.getter(v84);
  v85 = EdgeInsets.init(_all:)(8.0);
  v87 = v86;
  v89 = v88;
  v91 = v90;
  v92 = v173;
  sub_100012CE8((uint64_t)v49, v173, &qword_1005D0998);
  v93 = v92 + *(int *)(v176 + 36);
  *(_BYTE *)v93 = v83;
  *(double *)(v93 + 8) = v85;
  *(_QWORD *)(v93 + 16) = v87;
  *(_QWORD *)(v93 + 24) = v89;
  *(_QWORD *)(v93 + 32) = v91;
  *(_BYTE *)(v93 + 40) = 0;
  v94 = sub_100012DDC((uint64_t)v49, &qword_1005D0998);
  v95 = static Alignment.center.getter(v94);
  v97 = v96;
  v98 = (uint64_t)v172;
  v99 = (uint64_t)&v172[*(int *)(v196 + 36)];
  v100 = v180;
  v101 = &v180[*(int *)(v183 + 20)];
  v102 = enum case for RoundedCornerStyle.continuous(_:);
  v103 = type metadata accessor for RoundedCornerStyle(0);
  v104 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 104))(v101, v102, v103);
  __asm { FMOV            V0.2D, #8.0 }
  *v100 = _Q0;
  LODWORD(v101) = static HierarchicalShapeStyle.quaternary.getter(v104);
  v110 = v182;
  sub_10014B2E4((uint64_t)v100, v182);
  *(_DWORD *)(v110 + *(int *)(v185 + 36)) = (_DWORD)v101;
  sub_10014B328((uint64_t)v100);
  v111 = v181;
  sub_100012CE8(v110, v181, &qword_1005D0968);
  *(_QWORD *)(v111 + *(int *)(v184 + 36)) = 0x3FD999999999999ALL;
  sub_100012DDC(v110, &qword_1005D0968);
  sub_10014BD1C(v111, v99, &qword_1005D0970);
  v112 = (uint64_t *)(v99 + *(int *)(sub_100012E18(&qword_1005D09E0) + 36));
  *v112 = v95;
  v112[1] = v97;
  v113 = v92;
  v114 = v98;
  sub_10014BD1C(v113, v98, &qword_1005D09A0);
  v212 = v219;
  sub_100012E18(&qword_1005D09E8);
  v115 = State.wrappedValue.getter(v211);
  if ((v211[0] & 1) != 0)
  {
    v116 = v190;
    v117 = v197;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v187 + 56))(v190, 1, 1, v197);
    v118 = *((_QWORD *)&v192 + 1);
    v119 = v192;
    v212 = v192;
    v213 = v198;
    v214 = &protocol witness table for EnabledTextSelectability;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 1);
    v204 = &protocol witness table for _PaddingLayout;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v117);
  }
  else
  {
    v120 = v160;
    v121 = v149(v115);
    v122 = static Font.callout.getter(v121);
    v123 = v156;
    v124 = v195;
    View.font(_:)(v122, v195, v194);
    swift_release(v122);
    (*(void (**)(char *, uint64_t))(v162 + 8))(v120, v124);
    v125 = v157;
    v126 = v161;
    View.multilineTextAlignment(_:)(0, v161, v150);
    v127 = (*(uint64_t (**)(char *, uint64_t))(v158 + 8))(v123, v126);
    v128 = v163;
    EnabledTextSelectability.init()(v127);
    v129 = v151;
    v118 = *((_QWORD *)&v192 + 1);
    v119 = v192;
    v130 = v198;
    View.textSelection<A>(_:)(v128, v192, *((_QWORD *)&v192 + 1), v198, &protocol witness table for EnabledTextSelectability);
    (*(void (**)(char *, unint64_t))(v164 + 8))(v128, v118);
    v131 = (*(uint64_t (**)(char *, unint64_t))(v159 + 8))(v125, v119);
    v132 = static Edge.Set.vertical.getter(v131);
    v212 = __PAIR128__(v118, v119);
    v213 = v130;
    v214 = &protocol witness table for EnabledTextSelectability;
    v133 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 1);
    v134 = (uint64_t)v152;
    v135 = v132;
    v136 = v155;
    View.padding(_:_:)(v135, 0x4010000000000000, 0, v155, v133);
    (*(void (**)(char *, uint64_t))(v153 + 8))(v129, v136);
    v211[2] = v133;
    v211[3] = (uint64_t)&protocol witness table for _PaddingLayout;
    v137 = v197;
    swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v197);
    v138 = v154;
    sub_1001C8AAC(v134, v137, v154);
    v139 = v187;
    v140 = *(void (**)(uint64_t, uint64_t))(v187 + 8);
    v140(v134, v137);
    v116 = v190;
    sub_1001C0B94(v138, v137, v190);
    v140(v138, v137);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v139 + 56))(v116, 0, 1, v137);
  }
  v141 = v188;
  v142 = *(void (**)(char *, uint64_t, uint64_t))(v188 + 16);
  v143 = v189;
  v144 = v191;
  v142(v189, v116, v191);
  v145 = *(void (**)(uint64_t, uint64_t))(v141 + 8);
  v145(v116, v144);
  v146 = v186;
  sub_100012CE8(v114, v186, &qword_1005D09A8);
  v211[0] = v146;
  v142((char *)v116, (uint64_t)v143, v144);
  v211[1] = v116;
  v210[0] = v196;
  v210[1] = v144;
  v208 = sub_10014BB90();
  *(_QWORD *)&v212 = v119;
  *((_QWORD *)&v212 + 1) = v118;
  v213 = v198;
  v214 = &protocol witness table for EnabledTextSelectability;
  v206 = swift_getOpaqueTypeConformance2(&v212, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 1);
  v207 = &protocol witness table for _PaddingLayout;
  v205 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v197);
  v209 = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v144);
  sub_1001499D0(v211, 2uLL, (uint64_t)v210);
  v145((uint64_t)v143, v144);
  sub_100012DDC(v114, &qword_1005D09A8);
  v145(v116, v144);
  return sub_100012DDC(v146, &qword_1005D09A8);
}

uint64_t sub_10014AB94(uint64_t a1)
{
  uint64_t v1;
  BOOL v3;
  __int128 v4;
  char v5;
  __int128 v6;
  uint64_t v7;

  v6 = *(_OWORD *)(a1 + 32);
  sub_10014BD1C((uint64_t)&v6 + 8, (uint64_t)&v7, &qword_1005D0A40);
  sub_10014BD60(&v7);
  v1 = sub_100012E18(&qword_1005D09E8);
  State.wrappedValue.getter(&v5);
  v4 = v6;
  v3 = (v5 & 1) == 0;
  State.wrappedValue.setter(&v3, v1);
  return sub_10014BD88((uint64_t)&v6);
}

uint64_t sub_10014AC40@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;

  v46 = sub_100012E18(&qword_1005D0A18);
  __chkstk_darwin(v46);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005D0A20);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005D0A28);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v43 - v13;
  v15 = *a1;
  v16 = a1[1];
  v17 = swift_bridgeObjectRetain(v16);
  v18 = static Color.primary.getter(v17);
  v19 = Text.foregroundColor(_:)(v18, v15, v16, 0, _swiftEmptyArrayStorage);
  v48 = v20;
  v49 = v21;
  v45 = v22;
  swift_bridgeObjectRelease(v16);
  v23 = swift_release(v18);
  v44 = static Edge.Set.vertical.getter(v23);
  v24 = EdgeInsets.init(_all:)(4.0);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v50 = *((_OWORD *)a1 + 2);
  sub_100012E18(&qword_1005D09E8);
  State.wrappedValue.getter(&v51);
  if (v51 == 1)
  {
    v31 = LocalizedStringKey.init(stringLiteral:)(0x646E61707845, 0xE600000000000000);
    Label<>.init(_:systemImage:)(v31);
    v32 = v47;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v5, v8, v6);
    v33 = v5;
    v34 = v46;
    v35 = 0;
  }
  else
  {
    v36 = LocalizedStringKey.init(stringLiteral:)(0x657370616C6C6F43, 0xE800000000000000);
    Label<>.init(_:systemImage:)(v36);
    v32 = v47;
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v5, v8, v6);
    v33 = v5;
    v34 = v46;
    v35 = 1;
  }
  swift_storeEnumTagMultiPayload(v33, v34, v35);
  v37 = sub_100016638(&qword_1005D0A30, &qword_1005D0A20, (uint64_t)&protocol conformance descriptor for Label<A, B>);
  _ConditionalContent<>.init(storage:)(v5, v6, v6, v37, v37);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v6);
  v38 = v45 & 1;
  sub_100012CE8((uint64_t)v14, (uint64_t)v12, &qword_1005D0A28);
  v40 = v48;
  v39 = v49;
  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v40;
  *(_BYTE *)(a2 + 16) = v38;
  *(_QWORD *)(a2 + 24) = v39;
  *(_BYTE *)(a2 + 32) = v44;
  *(double *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v26;
  *(_QWORD *)(a2 + 56) = v28;
  *(_QWORD *)(a2 + 64) = v30;
  *(_BYTE *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 1;
  v41 = sub_100012E18(&qword_1005D0A38);
  sub_100012CE8((uint64_t)v12, a2 + *(int *)(v41 + 64), &qword_1005D0A28);
  sub_10014BCE0(v19, v40, v38);
  swift_bridgeObjectRetain(v39);
  sub_100012DDC((uint64_t)v14, &qword_1005D0A28);
  sub_100012DDC((uint64_t)v12, &qword_1005D0A28);
  sub_10014BCF0(v19, v40, v38);
  return swift_bridgeObjectRelease(v39);
}

uint64_t sub_10014AFC4()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_10014AFDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100149BC4(a1, a2);
}

id sub_10014B014(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)
    return a2;
  else
    return (id)swift_retain(a2);
}

void destroy for DebugStatusView(uint64_t a1)
{
  sub_10014B058(*(_QWORD *)a1, *(void **)(a1 + 8), *(_BYTE *)(a1 + 16));
  sub_10014B058(*(_QWORD *)(a1 + 24), *(void **)(a1 + 32), *(_BYTE *)(a1 + 40));
}

void sub_10014B058(uint64_t a1, void *a2, char a3)
{
  if ((a3 & 1) != 0)

  else
    swift_release(a2);
}

uint64_t initializeWithCopy for DebugStatusView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  void *v8;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10014B014(*(_QWORD *)a2, v5, v6);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(void **)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  sub_10014B014(v7, v8, v2);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = v2;
  return a1;
}

uint64_t assignWithCopy for DebugStatusView(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  char v6;
  uint64_t v7;
  void *v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void *v13;
  char v14;

  v2 = a2;
  v4 = *(_QWORD *)a2;
  v5 = *(void **)(a2 + 8);
  v6 = *(_BYTE *)(a2 + 16);
  sub_10014B014(*(_QWORD *)a2, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(void **)(a1 + 8);
  v9 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = v6;
  sub_10014B058(v7, v8, v9);
  v10 = *(_QWORD *)(v2 + 24);
  v11 = *(void **)(v2 + 32);
  LOBYTE(v2) = *(_BYTE *)(v2 + 40);
  sub_10014B014(v10, v11, v2);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(void **)(a1 + 32);
  v14 = *(_BYTE *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 40) = v2;
  sub_10014B058(v12, v13, v14);
  return a1;
}

__n128 initializeWithTake for DebugStatusView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for DebugStatusView(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  void *v6;
  char v7;
  char v8;
  uint64_t v9;
  void *v10;
  char v11;

  v4 = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)a1;
  v6 = *(void **)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v4;
  sub_10014B058(v5, v6, v7);
  v8 = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(void **)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 40) = v8;
  sub_10014B058(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for DebugStatusView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DebugStatusView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugStatusView()
{
  return &type metadata for DebugStatusView;
}

uint64_t sub_10014B284(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100503378, 1);
}

uint64_t sub_10014B294@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tint.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10014B2BC(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tint.setter(v1);
}

uint64_t sub_10014B2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014B328(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10014B36C()
{
  uint64_t v0;

  sub_10014B058(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_BYTE *)(v0 + 32));
  sub_10014B058(*(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_BYTE *)(v0 + 56));
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_10014B3A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100149934(v1 + 16, a1);
}

uint64_t sub_10014B3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_retain(a6);
    swift_bridgeObjectRetain(a2);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_10014B3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_release(a4);
    return swift_release(a6);
  }
  return result;
}

id sub_10014B420@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  void *v5;

  v5 = *(void **)(v1 + 16);
  v3 = swift_allocObject(&unk_100559D00, 24, 7);
  *(_QWORD *)(v3 + 16) = v5;
  *(_QWORD *)a1 = sub_10014B4E0;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = 0;
  return v5;
}

uint64_t sub_10014B478()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_10014B49C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100149894(*(void **)(v1 + 16), a1);
}

unint64_t sub_10014B4A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D39F0;
  if (!qword_1005D39F0)
  {
    v1 = objc_opt_self(ICNote);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D39F0);
  }
  return result;
}

char *sub_10014B4E0()
{
  uint64_t v0;

  return sub_100236DA4(*(void **)(v0 + 16));
}

uint64_t sub_10014B4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t sub_10014B4F0(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_release(a1[3]);
  return swift_release(a1[5]);
}

uint64_t sub_10014B520(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v5;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t sub_10014B588(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

__n128 initializeWithTake for InsertMentionIntent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10014B620(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release(v5);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v6);
  return a1;
}

uint64_t sub_10014B684(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10014B6CC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for DebugStatusView.Section(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for DebugStatusView.Section);
}

unint64_t sub_10014B728()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D08D8;
  if (!qword_1005D08D8)
  {
    v1 = sub_10001537C(&qword_1005D0830);
    sub_10014B7AC();
    sub_100016638(&qword_1005D0940, &qword_1005D0828, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D08D8);
  }
  return result;
}

unint64_t sub_10014B7AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D08E0;
  if (!qword_1005D08E0)
  {
    v1 = sub_10001537C(&qword_1005D08E8);
    sub_10014B874(&qword_1005D08F0, &qword_1005D08F8, (void (*)(void))sub_10014B850);
    sub_100016638(&qword_1005D0930, &qword_1005D0938, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D08E0);
  }
  return result;
}

uint64_t sub_10014B850()
{
  return sub_10014B874(&qword_1005D0900, &qword_1005D0908, (void (*)(void))sub_10014B8DC);
}

uint64_t sub_10014B874(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001537C(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10014B8DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D0910;
  if (!qword_1005D0910)
  {
    v1 = sub_10001537C(&qword_1005D0918);
    sub_100016638(&qword_1005D0920, &qword_1005D0928, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D0910);
  }
  return result;
}

uint64_t sub_10014B960(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1005033A0, 1);
}

uint64_t sub_10014B994()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10014B9C8()
{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;

  v2[1] = *(_OWORD *)(v0 + 16);
  v3 = v0 + 32;
  return withAnimation<A>(_:_:)(0, sub_10014BD00, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10014BA1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10014AC40(*(uint64_t **)(v1 + 32), a1);
}

uint64_t sub_10014BA28(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10014BA50(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_10014BA80()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1005D09D0;
  if (!qword_1005D09D0)
  {
    v1 = sub_10001537C(&qword_1005D0988);
    v2[0] = sub_10001537C(&qword_1005D0978);
    v2[1] = type metadata accessor for IconOnlyLabelStyle(255);
    v2[2] = sub_100016638(&qword_1005D09C0, &qword_1005D0978, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_100019C6C(&qword_1005D09C8, (uint64_t (*)(uint64_t))&type metadata accessor for IconOnlyLabelStyle, (uint64_t)&protocol conformance descriptor for IconOnlyLabelStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.labelStyle<A>(_:)>>, 1);
    sub_100016638(&qword_1005D0958, &qword_1005D0948, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D09D0);
  }
  return result;
}

unint64_t sub_10014BB90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D09F0;
  if (!qword_1005D09F0)
  {
    v1 = sub_10001537C(&qword_1005D09A8);
    sub_10014B874(&qword_1005D09F8, &qword_1005D09A0, (void (*)(void))sub_10014BC34);
    sub_100016638(&qword_1005D0A10, &qword_1005D09E0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D09F0);
  }
  return result;
}

unint64_t sub_10014BC34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1005D0A00;
  if (!qword_1005D0A00)
  {
    v1 = sub_10001537C(&qword_1005D0998);
    v2[0] = sub_10001537C(&qword_1005D0988);
    v2[1] = sub_10014BA80();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.bold(_:)>>, 1);
    sub_100016638(&qword_1005D0A08, &qword_1005D09D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D0A00);
  }
  return result;
}

uint64_t sub_10014BCE0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

uint64_t sub_10014BCF0(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

uint64_t sub_10014BD00()
{
  uint64_t v0;

  return sub_10014AB94(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10014BD1C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100012E18(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

_QWORD *sub_10014BD60(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

uint64_t sub_10014BD88(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_10014BDB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_10014BDDC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  _QWORD v15[8];

  v1 = *a1;
  v2 = a1[1];
  v3 = sub_10001537C(&qword_1005D09A8);
  v4 = sub_10001537C(&qword_1005D0948);
  v5 = type metadata accessor for ModifiedContent(255, v1, v4);
  v6 = sub_10001537C(&qword_1005D0950);
  v7 = type metadata accessor for ModifiedContent(255, v5, v6);
  v8 = type metadata accessor for EnabledTextSelectability(255);
  v15[6] = v2;
  v15[7] = sub_100016638(&qword_1005D0958, &qword_1005D0948, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v15[4] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v15[5] = sub_100016638(&qword_1005D0960, &qword_1005D0950, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v15[0] = v7;
  v15[1] = v8;
  v15[2] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v15[3] = &protocol witness table for EnabledTextSelectability;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, v15, &opaque type descriptor for <<opaque return type of View.textSelection<A>(_:)>>, 0);
  v10 = type metadata accessor for ModifiedContent(255, OpaqueTypeMetadata2, &type metadata for _PaddingLayout);
  v11 = type metadata accessor for Optional(255, v10);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v11, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  return swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
}

void *AppendToNoteIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static AppendToNoteIntent.persistentIdentifier;
}

unint64_t static AppendToNoteIntent.persistentIdentifier.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_10014BF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static AppendToNoteIntent.title);
  sub_10012A0B0(v10, (uint64_t)static AppendToNoteIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x7420646E65707041, 0xEE0065746F4E206FLL);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t AppendToNoteIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CE980 != -1)
    swift_once(&qword_1005CE980, sub_10014BF90);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static AppendToNoteIntent.title);
}

uint64_t static AppendToNoteIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CE980 != -1)
    swift_once(&qword_1005CE980, sub_10014BF90);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static AppendToNoteIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static AppendToNoteIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x800000010047B2C0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static AppendToNoteIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005D0A48);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005D0A50);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10014C588();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(11, 2, &type metadata for AppendToNoteIntent, v6);
  v7._countAndFlagsBits = 0x20646E65707041;
  v7._object = (void *)0xE700000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004550A0, v8);
  v10 = sub_100012E18(&qword_1005D0A60);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 544175136;
  v11._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_1004550C8, v12);
  v14 = sub_100012E18(&qword_1005D0A68);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for AppendToNoteIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for AppendToNoteIntent, v6);
}

unint64_t sub_10014C588()
{
  unint64_t result;

  result = qword_1005D0A58;
  if (!qword_1005D0A58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppendToNoteIntent, &type metadata for AppendToNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005D0A58);
  }
  return result;
}

uint64_t sub_10014C5CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10014C5F4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t AppendToNoteIntent.entity.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for NoteEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10014FF9C(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_10014FFE0(a1);
}

_QWORD *AppendToNoteIntent.text.getter@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t AppendToNoteIntent.text.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = type metadata accessor for AttributedString(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  IntentParameter.wrappedValue.setter(v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t AppendToNoteIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  v5 = type metadata accessor for NoteEntity(0);
  v4[7] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[8] = swift_task_alloc(v6);
  v4[9] = swift_task_alloc(v6);
  return swift_task_switch(sub_10014C7C4, 0, 0);
}

uint64_t sub_10014C7C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 32);
  IntentParameter.wrappedValue.getter(*(_QWORD **)(v0 + 72));
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 16));
  v4 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 80) = v4;
  v5 = (_QWORD *)swift_allocObject(&unk_100559E10, 40, 7);
  *(_QWORD *)(v0 + 88) = v5;
  v5[2] = v3;
  v5[3] = v2;
  v5[4] = v1;
  v6 = unk_1005D0A7C;
  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1005D0A78 + dword_1005D0A78);
  swift_retain(v3);
  swift_retain(v2);
  swift_retain(v1);
  v7 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 96) = v7;
  *v7 = v0;
  v7[1] = sub_10014C8B4;
  return v9(v4, (uint64_t)sub_100150050, (uint64_t)v5);
}

uint64_t sub_10014C8B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 96);
  v4[13] = a1;
  v4[14] = a2;
  v4[15] = v2;
  swift_task_dealloc(v5);
  v7 = (void *)v4[10];
  v6 = v4[11];
  v8 = v4[9];
  if (v2)
  {
    sub_10014FFE0(v8);
    swift_release(v6);

    v9 = sub_10014CAC0;
  }
  else
  {
    swift_release(v6);

    sub_10014FFE0(v8);
    v9 = sub_10014C95C;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_10014C95C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  _QWORD *v5;

  v1 = *(void **)(v0 + 112);
  v2 = dword_1005D7854;
  v3 = *(id *)(v0 + 104);
  v4 = v1;
  v5 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 128) = v5;
  *v5 = v0;
  v5[1] = sub_10014C9C0;
  return NoteEntity.init(for:in:)(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
}

uint64_t sub_10014C9C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10014CAFC;
  else
    v3 = sub_10014CA24;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10014CA24()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(void **)(v0 + 104);
  v1 = *(void **)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = sub_100019C6C((unint64_t *)&qword_1005D0A80, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  static IntentResult.result<A>(value:)(v3, v5, v6);

  sub_10014FFE0(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014CAC0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014CAFC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;

  v1 = *(void **)(v0 + 112);

  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10014CB44(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = objc_opt_self(ICNote);
  v6 = swift_dynamicCastObjCClass(a1, v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = a1;
    sub_100150368(v7);
  }
  else
  {
    v11 = objc_opt_self(NoteObject);
    v12 = swift_dynamicCastObjCClass(a1, v11);
    if (!v12)
    {
      type metadata accessor for ICError(0);
      v17 = v16;
      v31 = 227;
      v18 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
      inited = swift_initStackObject(v18, &v30);
      *(_OWORD *)(inited + 16) = xmmword_100451C20;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      *(_QWORD *)(inited + 40) = v20;
      v21 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v22 = String._bridgeToObjectiveC()();
      v23 = objc_msgSend(v21, "localizedStringForKey:value:table:", v22, 0, 0);

      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 48) = v24;
      *(_QWORD *)(inited + 56) = v26;
      v27 = sub_1001356D4(inited);
      v28 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
      v29 = _BridgedStoredNSError.init(_:userInfo:)(&v32, &v31, v27, v17, v28);
      swift_willThrow(v29);
      return;
    }
    v13 = (void *)v12;
    v8 = a1;
    sub_1001505CC(v13);
  }
  v14 = v9;
  v15 = v10;

  if (!v2)
  {
    *a2 = v14;
    a2[1] = v15;
  }
}

uint64_t sub_10014CD48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
  v6 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v4[20] = v6;
  *v6 = v4;
  v6[1] = sub_10014CDB8;
  return v8(v3, a1);
}

uint64_t sub_10014CDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014CE14, 0, 0);
}

uint64_t sub_10014CE14()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v1 = *(void **)(v0 + 168);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 128), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 168));
    *(_QWORD *)(v0 + 176) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 136);
      v4 = *(_QWORD *)(v0 + 144);
      v6 = (_QWORD *)swift_allocObject(&unk_10055A028, 48, 7);
      *(_QWORD *)(v0 + 184) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 192) = v9;
      v10 = sub_100012E18(&qword_1005D0B18);
      *v9 = v0;
      v9[1] = sub_10014D0D8;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 96, sub_100150318, v6, v10);
    }
    v24 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v24 + 16) = 0;
    v25 = v1;
    sub_10014F724(v24, 225, v25);

    v26 = swift_release(v24);
    swift_willThrow(v26);

  }
  else
  {
    type metadata accessor for ICError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 120) = 232;
    v14 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v14, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v16;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = type metadata accessor for NoteID(0);
    v18 = sub_100019C6C((unint64_t *)&unk_1005D0AD0, (uint64_t (*)(uint64_t))&type metadata accessor for NoteID, (uint64_t)&protocol conformance descriptor for NoteID);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v21 = sub_1001356D4(inited);
    v22 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v23 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 112), v0 + 120, v21, v13, v22);
    swift_willThrow(v23);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014D0D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001507B8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 184));
    v4 = sub_1001507B4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014D144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
  v7 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v5[19] = v7;
  *v7 = v5;
  v7[1] = sub_10014D1B8;
  return v9(v4, a2);
}

uint64_t sub_10014D1B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014D214, 0, 0);
}

uint64_t sub_10014D214()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 120), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 168) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 128);
      v4 = *(_QWORD *)(v0 + 136);
      v6 = (_QWORD *)swift_allocObject(&unk_10055A000, 48, 7);
      *(_QWORD *)(v0 + 176) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 184) = v9;
      *v9 = v0;
      v9[1] = sub_10014D4D0;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 112), sub_1001502BC, v6, (char *)&type metadata for () + 8);
    }
    v23 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v23 + 16) = 0;
    v24 = v1;
    sub_10014F724(v23, 225, v24);

    v25 = swift_release(v23);
    swift_willThrow(v25);

  }
  else
  {
    type metadata accessor for ICError(0);
    v12 = v11;
    *(_QWORD *)(v0 + 104) = 232;
    v13 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v13, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v15;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v16 = type metadata accessor for NoteID(0);
    v17 = sub_100019C6C((unint64_t *)&unk_1005D0AD0, (uint64_t (*)(uint64_t))&type metadata accessor for NoteID, (uint64_t)&protocol conformance descriptor for NoteID);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v20 = sub_1001356D4(inited);
    v21 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v22 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 96), v0 + 104, v20, v12, v21);
    swift_willThrow(v22);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014D4D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001507BC;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 176));
    v4 = sub_1001507B0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014D53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005DB980 + dword_1005DB980);
  v6 = (_QWORD *)swift_task_alloc(unk_1005DB984);
  v4[19] = v6;
  *v6 = v4;
  v6[1] = sub_10014D5AC;
  return v8(v3, a1);
}

uint64_t sub_10014D5AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014D608, 0, 0);
}

uint64_t sub_10014D608()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 120), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 168) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 128);
      v4 = *(_QWORD *)(v0 + 136);
      v6 = (_QWORD *)swift_allocObject(&unk_100559FD8, 48, 7);
      *(_QWORD *)(v0 + 176) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 184) = v9;
      v10 = sub_100012E18((uint64_t *)&unk_1005D1F10);
      *v9 = v0;
      v9[1] = sub_10014D8E8;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 96, sub_100150288, v6, v10);
    }
    v24 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v24 + 16) = 0;
    v25 = v1;
    sub_10013A120(v24, 225, v25, 0x6E457265646C6F46, (void *)0xEC00000079746974);

    v26 = swift_release(v24);
    swift_willThrow(v26);

  }
  else
  {
    type metadata accessor for ICError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 112) = 232;
    v14 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v14, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v16;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = type metadata accessor for FolderID(0);
    v18 = sub_100019C6C(&qword_1005D0B10, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v21 = sub_1001356D4(inited);
    v22 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v23 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 104), v0 + 112, v21, v13, v22);
    swift_willThrow(v23);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014D8E8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10014D990;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 176));
    v4 = sub_10014D954;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014D954()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10014D990()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 168);
  v2 = *(void **)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 176));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014D9D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
  v7 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v5[19] = v7;
  *v7 = v5;
  v7[1] = sub_10014DA44;
  return v9(v4, a2);
}

uint64_t sub_10014DA44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014DAA0, 0, 0);
}

uint64_t sub_10014DAA0()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 120), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 168) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 128);
      v4 = *(_QWORD *)(v0 + 136);
      v6 = (_QWORD *)swift_allocObject(&unk_100559FB0, 48, 7);
      *(_QWORD *)(v0 + 176) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 184) = v9;
      v10 = sub_100012E18(&qword_1005CF198);
      *v9 = v0;
      v9[1] = sub_10014D4D0;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 112), sub_1001501C0, v6, v10);
    }
    v24 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v24 + 16) = 0;
    v25 = v1;
    sub_10014F724(v24, 225, v25);

    v26 = swift_release(v24);
    swift_willThrow(v26);

  }
  else
  {
    type metadata accessor for ICError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 104) = 232;
    v14 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v14, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v16;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = type metadata accessor for NoteID(0);
    v18 = sub_100019C6C((unint64_t *)&unk_1005D0AD0, (uint64_t (*)(uint64_t))&type metadata accessor for NoteID, (uint64_t)&protocol conformance descriptor for NoteID);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v21 = sub_1001356D4(inited);
    v22 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v23 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 96), v0 + 104, v21, v13, v22);
    swift_willThrow(v23);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014DD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D2B90 + dword_1005D2B90);
  v7 = (_QWORD *)swift_task_alloc(unk_1005D2B94);
  v5[19] = v7;
  *v7 = v5;
  v7[1] = sub_10014DDD4;
  return v9(v4, a2);
}

uint64_t sub_10014DDD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014DE30, 0, 0);
}

uint64_t sub_10014DE30()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 120), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 168) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 128);
      v4 = *(_QWORD *)(v0 + 136);
      v6 = (_QWORD *)swift_allocObject(&unk_100559F88, 48, 7);
      *(_QWORD *)(v0 + 176) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 184) = v9;
      *v9 = v0;
      v9[1] = sub_10014E108;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 112), sub_10015025C, v6, (char *)&type metadata for () + 8);
    }
    v23 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v23 + 16) = 0;
    v24 = v1;
    sub_10013A120(v23, 225, v24, 0xD000000000000010, (void *)0x8000000100479AC0);

    v25 = swift_release(v23);
    swift_willThrow(v25);

  }
  else
  {
    type metadata accessor for ICError(0);
    v12 = v11;
    *(_QWORD *)(v0 + 104) = 232;
    v13 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v13, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v15;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v16 = type metadata accessor for AttachmentID(0);
    v17 = sub_100019C6C((unint64_t *)&unk_1005D2D30, (uint64_t (*)(uint64_t))&type metadata accessor for AttachmentID, (uint64_t)&protocol conformance descriptor for AttachmentID);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v20 = sub_1001356D4(inited);
    v21 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v22 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 96), v0 + 104, v20, v12, v21);
    swift_willThrow(v22);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014E108()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10014D990;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 176));
    v4 = sub_10014E174;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014E174()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 160);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014E1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v4[18] = a3;
  v4[19] = v3;
  v4[16] = a1;
  v4[17] = a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005DB980 + dword_1005DB980);
  v6 = (_QWORD *)swift_task_alloc(unk_1005DB984);
  v4[20] = v6;
  *v6 = v4;
  v6[1] = sub_10014E21C;
  return v8(v3, a1);
}

uint64_t sub_10014E21C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014E278, 0, 0);
}

uint64_t sub_10014E278()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v1 = *(void **)(v0 + 168);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 128), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 168));
    *(_QWORD *)(v0 + 176) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 136);
      v4 = *(_QWORD *)(v0 + 144);
      v6 = (_QWORD *)swift_allocObject(&unk_100559F60, 48, 7);
      *(_QWORD *)(v0 + 184) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 192) = v9;
      v10 = sub_100012E18(&qword_1005D0B18);
      *v9 = v0;
      v9[1] = sub_10014E558;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 96, sub_10015023C, v6, v10);
    }
    v24 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v24 + 16) = 0;
    v25 = v1;
    sub_10013A120(v24, 225, v25, 0x6E457265646C6F46, (void *)0xEC00000079746974);

    v26 = swift_release(v24);
    swift_willThrow(v26);

  }
  else
  {
    type metadata accessor for ICError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 120) = 232;
    v14 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v14, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v16;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = type metadata accessor for FolderID(0);
    v18 = sub_100019C6C(&qword_1005D0B10, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v21 = sub_1001356D4(inited);
    v22 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v23 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 112), v0 + 120, v21, v13, v22);
    swift_willThrow(v23);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014E558()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10014E600;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 184));
    v4 = sub_10014E5C4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014E5C4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 168);

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t sub_10014E600()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 176);
  v2 = *(void **)(v0 + 168);
  swift_release(*(_QWORD *)(v0 + 184));

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014E640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D10A8 + dword_1005D10A8);
  v7 = (_QWORD *)swift_task_alloc(unk_1005D10AC);
  v5[19] = v7;
  *v7 = v5;
  v7[1] = sub_10014E6B4;
  return v9(v4, a2);
}

uint64_t sub_10014E6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014E710, 0, 0);
}

uint64_t sub_10014E710()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  void *object;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 120), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 168) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 128);
      v4 = *(_QWORD *)(v0 + 136);
      v6 = (_QWORD *)swift_allocObject(&unk_100559F38, 48, 7);
      *(_QWORD *)(v0 + 176) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 184) = v9;
      *v9 = v0;
      v9[1] = sub_10014D4D0;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 112), sub_100150214, v6, (char *)&type metadata for () + 8);
    }
    v23 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v23 + 16) = 0;
    v24 = v1;
    sub_100139320(v23, 225, v24);

    v25 = swift_release(v23);
    swift_willThrow(v25);

  }
  else
  {
    type metadata accessor for ICError(0);
    v12 = v11;
    *(_QWORD *)(v0 + 104) = 232;
    v13 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v13, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v15;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v16 = type metadata accessor for TableID(0);
    v17 = sub_100019C6C(&qword_1005D0B00, (uint64_t (*)(uint64_t))&type metadata accessor for TableID, (uint64_t)&protocol conformance descriptor for TableID);
    v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v20 = sub_1001356D4(inited);
    v21 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v22 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 96), v0 + 104, v20, v12, v21);
    swift_willThrow(v22);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014E9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  v8 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
  v6 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v4[19] = v6;
  *v6 = v4;
  v6[1] = sub_10014EA3C;
  return v8(v3, a1);
}

uint64_t sub_10014EA3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014EA98, 0, 0);
}

uint64_t sub_10014EA98()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 120), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 168) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 128);
      v4 = *(_QWORD *)(v0 + 136);
      v6 = (_QWORD *)swift_allocObject(&unk_100559F10, 48, 7);
      *(_QWORD *)(v0 + 176) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 184) = v9;
      v10 = sub_100012E18(&qword_1005D0AF0);
      *v9 = v0;
      v9[1] = sub_10014ED5C;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 96, sub_1001501E0, v6, v10);
    }
    v24 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v24 + 16) = 0;
    v25 = v1;
    sub_10014F724(v24, 225, v25);

    v26 = swift_release(v24);
    swift_willThrow(v26);

  }
  else
  {
    type metadata accessor for ICError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 112) = 232;
    v14 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v14, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v16;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = type metadata accessor for NoteID(0);
    v18 = sub_100019C6C((unint64_t *)&unk_1005D0AD0, (uint64_t (*)(uint64_t))&type metadata accessor for NoteID, (uint64_t)&protocol conformance descriptor for NoteID);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v21 = sub_1001356D4(inited);
    v22 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v23 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 104), v0 + 112, v21, v13, v22);
    swift_willThrow(v23);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014ED5C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001507BC;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 176));
    v4 = sub_1001507AC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10014EDC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t);

  v5[17] = a4;
  v5[18] = v4;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
  v7 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v5[19] = v7;
  *v7 = v5;
  v7[1] = sub_10014EE3C;
  return v9(v4, a2);
}

uint64_t sub_10014EE3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10014EE98, 0, 0);
}

uint64_t sub_10014EE98()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *object;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;

  v1 = *(void **)(v0 + 160);
  if (v1)
  {
    v2 = objc_msgSend(*(id *)(v0 + 120), "managedObjectContextForObjectID:", *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 168) = v2;
    if (v2)
    {
      v3 = v2;
      v5 = *(_QWORD *)(v0 + 128);
      v4 = *(_QWORD *)(v0 + 136);
      v6 = (_QWORD *)swift_allocObject(&unk_100559EE8, 48, 7);
      *(_QWORD *)(v0 + 176) = v6;
      v6[2] = v3;
      v6[3] = v1;
      v6[4] = v5;
      v6[5] = v4;
      v7 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v3;
      v8 = v1;
      swift_retain(v4);
      v9 = (_QWORD *)swift_task_alloc(v7);
      *(_QWORD *)(v0 + 184) = v9;
      v10 = sub_100012E18(&qword_1005D0AE0);
      *v9 = v0;
      v9[1] = sub_10014D4D0;
      return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 112), sub_1001501C0, v6, v10);
    }
    v24 = swift_allocObject(&unk_100559EC0, 24, 7);
    *(_QWORD *)(v24 + 16) = 0;
    v25 = v1;
    sub_10014F724(v24, 225, v25);

    v26 = swift_release(v24);
    swift_willThrow(v26);

  }
  else
  {
    type metadata accessor for ICError(0);
    v13 = v12;
    *(_QWORD *)(v0 + 104) = 232;
    v14 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v14, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v16;
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease(0xE000000000000000);
    v17 = type metadata accessor for NoteID(0);
    v18 = sub_100019C6C((unint64_t *)&unk_1005D0AD0, (uint64_t (*)(uint64_t))&type metadata accessor for NoteID, (uint64_t)&protocol conformance descriptor for NoteID);
    v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v18);
    object = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(object);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0xD000000000000020;
    *(_QWORD *)(inited + 56) = 0x800000010047B2E0;
    v21 = sub_1001356D4(inited);
    v22 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v23 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 96), v0 + 104, v21, v13, v22);
    swift_willThrow(v23);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10014F160(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *v1;
  v5 = v1[1];
  v6 = v1[2];
  v7 = (_QWORD *)swift_task_alloc(dword_1005D0A74);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100130768;
  return AppendToNoteIntent.perform()(a1, v4, v5, v6);
}

uint64_t sub_10014F1CC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes18AppendToNoteIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

void sub_10014F1F4(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t))
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  __objc2_prot *v12;

  v10 = 0;
  v4 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v10);
  v5 = v10;
  if (v4)
  {
    v6 = v4;
    v12 = &OBJC_PROTOCOL___ICFolderObject;
    v7 = swift_dynamicCastObjCProtocolUnconditional(v4, 1, &v12, 0, 0, 0);
    v8 = v5;
    a3(&v11, v7);

  }
  else
  {
    v9 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
  }
}

void sub_10014F2FC(void *a1, uint64_t a2, void (*a3)(uint64_t))
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  __objc2_prot *v11;

  v10 = 0;
  v4 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v10);
  v5 = v10;
  if (v4)
  {
    v6 = v4;
    v11 = &OBJC_PROTOCOL___ICSearchIndexableNote;
    v7 = swift_dynamicCastObjCProtocolUnconditional(v4, 1, &v11, 0, 0, 0);
    v8 = v5;
    a3(v7);

  }
  else
  {
    v9 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
  }
}

void sub_10014F408(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t), uint64_t a4, uint64_t *a5)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;

  v13 = 0;
  v7 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v13);
  v8 = v13;
  if (v7)
  {
    v9 = v7;
    v15 = *a5;
    v10 = swift_dynamicCastObjCProtocolUnconditional(v7, 1, &v15, 0, 0, 0);
    v11 = v8;
    a3(&v14, v10);

  }
  else
  {
    v12 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
}

void sub_10014F510(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t *a5)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v13 = 0;
  v7 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v13);
  v8 = v13;
  if (v7)
  {
    v9 = v7;
    v14 = *a5;
    v10 = swift_dynamicCastObjCProtocolUnconditional(v7, 1, &v14, 0, 0, 0);
    v11 = v8;
    a3(v10);

  }
  else
  {
    v12 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }
}

void sub_10014F61C(void *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, uint64_t))
{
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  __objc2_prot *v12;

  v10 = 0;
  v4 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v10);
  v5 = v10;
  if (v4)
  {
    v6 = v4;
    v12 = &OBJC_PROTOCOL___ICSearchIndexableNote;
    v7 = swift_dynamicCastObjCProtocolUnconditional(v4, 1, &v12, 0, 0, 0);
    v8 = v5;
    a3(&v11, v7);

  }
  else
  {
    v9 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
  }
}

id sub_10014F724(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  void **v4;
  id v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  _QWORD v26[3];
  _BYTE v27[80];
  uint64_t v28;

  v4 = (void **)(a1 + 16);
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    v5 = *(id *)(a1 + 16);
  }
  else
  {
    type metadata accessor for ICError(0);
    v9 = v8;
    v28 = a2;
    v10 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v10, v27);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v12;
    v26[0] = 0;
    v26[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(87);
    v13._countAndFlagsBits = 0x69746E4565746F4ELL;
    v13._object = (void *)0xEA00000000007974;
    String.append(_:)(v13);
    v14._object = (void *)0x8000000100479A60;
    v14._countAndFlagsBits = 0xD000000000000053;
    String.append(_:)(v14);
    v15 = objc_msgSend(a3, "description");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19._countAndFlagsBits = v16;
    v19._object = v18;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v18);
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = 0;
    *(_QWORD *)(inited + 56) = 0xE000000000000000;
    v20 = sub_100174AD0(inited);
    v21 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    _BridgedStoredNSError.init(_:userInfo:)(v26, &v28, v20, v9, v21);
    v22 = (void *)v26[0];
    swift_beginAccess(v4, v26, 1, 0);
    v23 = *v4;
    *v4 = v22;
    v5 = v22;

    v3 = 0;
  }
  v24 = v3;
  return v5;
}

id sub_10014F8F4(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10013A120(a1, a2, a3, 0x6E457265646C6F46, (void *)0xEC00000079746974);
}

id sub_10014F914(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_10013A120(a1, a2, a3, 0xD000000000000010, (void *)0x8000000100479AC0);
}

uint64_t _s11MobileNotes18AppendToNoteIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t, uint64_t);
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  void (*v58)(char *);
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  void (*v60)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD v70[2];
  _QWORD v71[7];

  v0 = sub_100012E18(&qword_1005CEEA0);
  __chkstk_darwin(v0);
  v67 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for InputConnectionBehavior(0);
  v66 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v65 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v4 = __chkstk_darwin(v3);
  v63 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v68 = (char *)&v51 - v6;
  v7 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v7);
  v64 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Locale(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for LocalizedStringResource(0);
  v23 = *(_QWORD *)(v22 - 8);
  v61 = v22;
  __chkstk_darwin(v22);
  v53 = (char *)&v51 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v55 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v56 = v12;
  v27(v15, enum case for LocalizedStringResource.BundleDescription.main(_:), v12);
  v54 = v27;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter title for note to append to", 37, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000026, 0x8000000100476D50);
  static Locale.current.getter(v28);
  v27(v15, v26, v12);
  v29 = v11;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter description", 21, 2);
  v60 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56);
  v52 = v11;
  v60(v11, 0, 1, v22);
  v30 = type metadata accessor for NoteEntity(0);
  v31 = v64;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v64, 1, 1, v30);
  v32 = type metadata accessor for IntentDialog(0);
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v59 = v33;
  v34 = v68;
  v33(v68, 1, 1, v32);
  v35 = v63;
  v33(v63, 1, 1, v32);
  v57 = enum case for InputConnectionBehavior.default(_:);
  v36 = v65;
  v58 = *(void (**)(char *))(v66 + 104);
  v58(v65);
  v37 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  v38 = v53;
  v66 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v53, v29, v31, v34, v35, v36, v37);
  sub_100012E18(&qword_1005CEEA8);
  v39 = String.LocalizationValue.init(stringLiteral:)(1954047316, 0xE400000000000000);
  static Locale.current.getter(v39);
  v40 = v55;
  v41 = v56;
  v42 = v54;
  v54(v15, v55, v56);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter title for text to append to note", 42, 2);
  v43 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002ALL, 0x8000000100476DD0);
  static Locale.current.getter(v43);
  v42(v15, v40, v41);
  v44 = v52;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter description", 21, 2);
  v60(v44, 0, 1, v61);
  v45 = type metadata accessor for AttributedString(0);
  v46 = v67;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v67, 1, 1, v45);
  v47 = v68;
  v59(v68, 1, 1, v32);
  ((void (*)(char *, _QWORD, uint64_t))v58)(v36, v57, v69);
  IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v38, v44, v46, v47, v36);
  sub_100012E18(&qword_1005CEE50);
  v70[0] = 0xD000000000000021;
  v70[1] = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v71, v70, &type metadata for String, &protocol witness table for String);
  v48 = type metadata accessor for AppDependencyManager(0);
  v49 = static AppDependencyManager.shared.getter(v48);
  AppDependency.__allocating_init(key:manager:)(v71, v49);
  return v66;
}

uint64_t sub_10014FF9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NoteEntity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014FFE0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NoteEntity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10015001C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

void sub_100150050(void *a1@<X0>, _QWORD *a2@<X8>)
{
  sub_10014CB44(a1, a2);
}

unint64_t sub_100150070()
{
  unint64_t result;

  result = qword_1005D0A88;
  if (!qword_1005D0A88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppendToNoteIntent, &type metadata for AppendToNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005D0A88);
  }
  return result;
}

unint64_t sub_1001500B8()
{
  unint64_t result;

  result = qword_1005D0A90;
  if (!qword_1005D0A90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AppendToNoteIntent, &type metadata for AppendToNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005D0A90);
  }
  return result;
}

uint64_t sub_1001500FC(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of AppendToNoteIntent.perform()>>, 1)+ 8);
}

uint64_t sub_100150120(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static AppendToNoteIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for AppendToNoteIntent()
{
  return &type metadata for AppendToNoteIntent;
}

uint64_t sub_100150140()
{
  return sub_100016638(&qword_1005D0AA0, &qword_1005D0AA8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_10015016C()
{
  return sub_100016638((unint64_t *)&qword_1005D0AB0, &qword_1005D0AB8, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_100150198()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1001501C0()
{
  uint64_t v0;

  sub_10014F2FC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32));
}

void sub_1001501E0(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_10014F61C(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 32));
  if (!v2)
    *a1 = v4;
}

void sub_100150214()
{
  uint64_t v0;

  sub_10014F510(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), (uint64_t *)&protocolRef_ICTableObject);
}

void sub_10015023C(_QWORD *a1@<X8>)
{
  sub_100150334((uint64_t *)&protocolRef_ICFolderObject, a1);
}

void sub_10015025C()
{
  uint64_t v0;

  sub_10014F510(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), (uint64_t *)&protocolRef_ICAttachmentObject);
}

void sub_100150288(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  sub_10014F1F4(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t *__return_ptr, uint64_t))(v1 + 32));
  if (!v2)
    *a1 = v4;
}

void sub_1001502BC()
{
  uint64_t v0;

  sub_10014F510(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), (uint64_t *)&protocolRef_ICSearchIndexableNote_0);
}

uint64_t sub_1001502E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100150318(_QWORD *a1@<X8>)
{
  sub_100150334((uint64_t *)&protocolRef_ICSearchIndexableNote_0, a1);
}

void sub_100150334(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  sub_10014F408(*(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t *__return_ptr, uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), a1);
  if (!v3)
  {
    *a2 = v5;
    a2[1] = v6;
  }
}

void sub_100150368(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unsigned __int8 v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;

  v3 = type metadata accessor for AttributedString(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = objc_msgSend(a1, "managedObjectContext");
  if (!v7)
  {
    type metadata accessor for ICError(0);
    v14 = v13;
    v25 = 225;
    v15 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v16 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v17 = _BridgedStoredNSError.init(_:userInfo:)(&v26, &v25, v15, v14, v16);
    swift_willThrow(v17);
    return;
  }
  v8 = v7;
  if ((objc_msgSend(a1, "isPasswordProtectedAndLocked") & 1) != 0)
  {
    v9 = sub_10013F4E8();
    v10 = swift_allocError(&type metadata for AppIntentsError, v9, 0, 0);
    v12 = 11;
LABEL_9:
    *v11 = v12;
LABEL_10:
    swift_willThrow(v10);
    goto LABEL_11;
  }
  if (!objc_msgSend(a1, "isEditable"))
  {
    v18 = sub_10013F4E8();
    v10 = swift_allocError(&type metadata for AppIntentsError, v18, 0, 0);
    v12 = 12;
    goto LABEL_9;
  }
  IntentParameter.wrappedValue.getter(v6);
  ICNote.append(_:options:)(v6, 3);
  if (v1)
  {
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
LABEL_11:

    return;
  }
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  v26 = 0;
  v19 = objc_msgSend(v8, "save:", &v26);
  v20 = v26;
  if ((v19 & 1) == 0)
  {
    v23 = v26;
    _convertNSErrorToError(_:)(v20);

    goto LABEL_10;
  }
  v21 = v26;
  v22 = objc_msgSend(a1, "objectID");
}

void sub_1001505CC(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unsigned __int8 v14;
  id v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;

  v3 = type metadata accessor for AttributedString(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = objc_msgSend(a1, "managedObjectContext");
  if (!v7)
  {
    type metadata accessor for ICError(0);
    v10 = v9;
    v21 = 225;
    v11 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v13 = _BridgedStoredNSError.init(_:userInfo:)(&v22, &v21, v11, v10, v12);
    swift_willThrow(v13);
    return;
  }
  v8 = v7;
  IntentParameter.wrappedValue.getter(v6);
  NoteObject.append(_:)(v6);
  if (v1)
  {
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
    v22 = 0;
    v14 = objc_msgSend(v8, "save:", &v22);
    v15 = v22;
    if ((v14 & 1) != 0)
    {
      v16 = v22;
      v17 = objc_msgSend(a1, "objectID");
      return;
    }
    v18 = v22;
    _convertNSErrorToError(_:)(v15);

    swift_willThrow(v19);
  }

}

uint64_t sub_1001507C0()
{
  return sub_1001507F4((uint64_t)&unk_1004553F0, (uint64_t)&unk_100455418);
}

uint64_t sub_1001507D4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = *(_QWORD *)(v1 + 8);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1001507E0()
{
  return sub_1001507F4((uint64_t)&unk_100455438, (uint64_t)&unk_100455460);
}

uint64_t sub_1001507F4(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  KeyPath = swift_getKeyPath(a1, a2);
  v5 = swift_getKeyPath(a2, v4);
  static Published.subscript.getter(&v7);
  swift_release(KeyPath);
  swift_release(v5);
  return v7;
}

uint64_t sub_10015085C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100455328, a2);
  v4 = swift_getKeyPath(&unk_100455350, v3);
  static Published.subscript.getter(&v6);
  swift_release(KeyPath);
  swift_release(v4);
  return v6;
}

uint64_t sub_1001508CC(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_100455480, a2);
  v4 = swift_getKeyPath(&unk_1004554A8, v3);
  static Published.subscript.getter(&v6);
  swift_release(KeyPath);
  swift_release(v4);
  return v6;
}

uint64_t sub_10015093C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t KeyPath;
  id v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __n128 v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  __n128 v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  _QWORD *v178;

  v1 = v0;
  v2 = sub_100012E18(&qword_1005D0F18);
  v169 = *(_QWORD *)(v2 - 8);
  v170 = v2;
  v3 = __chkstk_darwin(v2);
  v168 = (char *)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v167 = (char *)&v126 - v5;
  v6 = sub_100012E18(&qword_1005D0F80);
  v7 = *(_QWORD *)(v6 - 8);
  v161 = v6;
  v162 = v7;
  __chkstk_darwin(v6);
  v158 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005D0F88);
  v10 = *(_QWORD *)(v9 - 8);
  v163 = v9;
  v164 = v10;
  __chkstk_darwin(v9);
  v159 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005D0F90);
  v13 = *(_QWORD *)(v12 - 8);
  v165 = v12;
  v166 = v13;
  __chkstk_darwin(v12);
  v160 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_100012E18(&qword_1005D0F98);
  v157 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v155 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_100012E18(&qword_1005D0FA0);
  v152 = *(_QWORD *)(v154 - 8);
  v16 = __chkstk_darwin(v154);
  v150 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v149 = (char *)&v126 - v18;
  v175 = sub_100012E18(&qword_1005D0FA8);
  v143 = *(_QWORD *)(v175 - 8);
  __chkstk_darwin(v175);
  v174 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100012E18(&qword_1005D0FB0);
  v145 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v140 = (char *)&v126 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = sub_100012E18(&qword_1005D0FB8);
  v147 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v142 = (char *)&v126 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100012E18(&qword_1005D0FC0);
  v138 = *(_QWORD *)(v139 - 8);
  v22 = __chkstk_darwin(v139);
  v137 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  v134 = (char *)&v126 - v24;
  v25 = sub_100012E18(&qword_1005D0FC8);
  __chkstk_darwin(v25);
  v173 = (char *)&v126 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_100012E18(&qword_1005D0FD0);
  v131 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin(v130);
  v128 = (char *)&v126 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100012E18((uint64_t *)&unk_1005D0FD8);
  v133 = *(_QWORD *)(v132 - 8);
  __chkstk_darwin(v132);
  v129 = (char *)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = sub_100012E18(&qword_1005D0DF0);
  v177 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin(v127);
  v30 = (char *)&v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100012E18(&qword_1005D0DE8);
  v32 = *(_QWORD *)(v31 - 8);
  v153 = v31;
  __chkstk_darwin(v31);
  v34 = (char *)&v126 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100012E18(&qword_1005D0DE0);
  v36 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v38 = (char *)&v126 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 16) = objc_msgSend((id)objc_opt_self(ICSearchIndexer), "sharedIndexer");
  v39 = v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__enabled;
  v136 = v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__enabled;
  LOBYTE(v178) = 0;
  Published.init(initialValue:)(&v178, &type metadata for Bool);
  v40 = *(void (**)(uint64_t, char *, uint64_t))(v36 + 32);
  v41 = v39;
  v42 = v35;
  v135 = v35;
  v40(v41, v38, v35);
  v43 = v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__observing;
  v141 = v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__observing;
  LOBYTE(v178) = 0;
  Published.init(initialValue:)(&v178, &type metadata for Bool);
  v40(v43, v38, v42);
  v44 = v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__dataSources;
  v151 = v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__dataSources;
  v178 = _swiftEmptyArrayStorage;
  v148 = sub_100012E18(&qword_1005D0BE8);
  Published.init(initialValue:)(&v178, v148);
  (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v44, v34, v31);
  v45 = v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__operationCount;
  v178 = 0;
  Published.init(initialValue:)(&v178, &type metadata for Int);
  v46 = v30;
  v47 = v127;
  (*(void (**)(uint64_t, char *, uint64_t))(v177 + 32))(v45, v46, v127);
  v48 = *(void **)(v0 + 16);
  KeyPath = swift_getKeyPath(&unk_100455560, v49);
  v51 = v48;
  v52 = v128;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 4);

  swift_release(KeyPath);
  v53 = sub_10015672C();
  v176 = v53;
  v178 = (_QWORD *)((uint64_t (*)(void))static OS_dispatch_queue.main.getter)();
  v54 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v177 = *(_QWORD *)(*(_QWORD *)(v54 - 8) + 56);
  v55 = (uint64_t)v173;
  v172 = v54;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v177)(v173, 1, 1, v54);
  v56 = sub_100016638(&qword_1005D0FE8, &qword_1005D0FD0, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
  v171 = sub_100019C6C(&qword_1005D0FF0, (uint64_t (*)(uint64_t))sub_10015672C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v57 = v129;
  v58 = v130;
  Publisher.receive<A>(on:options:)(&v178, v55, v130, v53, v56, v171);
  sub_100012DDC(v55, &qword_1005D0FC8);

  (*(void (**)(char *, uint64_t))(v131 + 8))(v52, v58);
  swift_beginAccess(v45, &v178, 33, 0);
  v59 = v134;
  Published.projectedValue.getter(v47);
  swift_endAccess(&v178);
  v60 = sub_100016638(&qword_1005D0FF8, (uint64_t *)&unk_1005D0FD8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v61 = v132;
  Publisher<>.assign(to:)(v59, v132, v60);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v57, v61);
  v62 = v138;
  v63 = v137;
  v64 = v139;
  (*(void (**)(char *, char *, uint64_t))(v138 + 16))(v137, v59, v139);
  swift_beginAccess(v45, &v178, 33, 0);
  Published.projectedValue.setter(v63, v47);
  v65 = swift_endAccess(&v178);
  (*(void (**)(char *, uint64_t, __n128))(v62 + 8))(v59, v64, v65);
  v126 = v1;
  v66 = *(void **)(v1 + 16);
  v68 = swift_getKeyPath(&unk_1004555A0, v67);
  v69 = v66;
  v70 = v174;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(v68, 4);

  swift_release(v68);
  v139 = sub_100016638(&qword_1005D1000, &qword_1005D0FA8, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
  v71 = v140;
  v72 = v175;
  Publisher.map<A>(_:)(sub_100151808, 0, v175, &type metadata for Bool, v139);
  v143 = *(_QWORD *)(v143 + 8);
  v73 = ((uint64_t (*)(char *, uint64_t))v143)(v70, v72);
  v74 = v176;
  v178 = (_QWORD *)static OS_dispatch_queue.main.getter(v73);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v177)(v55, 1, 1, v54);
  v75 = sub_100016638(&qword_1005D1008, &qword_1005D0FB0, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v76 = v142;
  v77 = v144;
  v78 = v171;
  Publisher.receive<A>(on:options:)(&v178, v55, v144, v74, v75, v171);
  sub_100012DDC(v55, &qword_1005D0FC8);

  (*(void (**)(char *, uint64_t))(v145 + 8))(v71, v77);
  v79 = v136;
  swift_beginAccess(v136, &v178, 33, 0);
  v80 = v149;
  v81 = v135;
  Published.projectedValue.getter(v135);
  swift_endAccess(&v178);
  v82 = sub_100016638(&qword_1005D1010, &qword_1005D0FB8, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v83 = v146;
  Publisher<>.assign(to:)(v80, v146, v82);
  (*(void (**)(char *, uint64_t))(v147 + 8))(v76, v83);
  v84 = v152;
  v147 = *(_QWORD *)(v152 + 16);
  v85 = v150;
  v86 = v154;
  ((void (*)(char *, char *, uint64_t))v147)(v150, v80, v154);
  swift_beginAccess(v79, &v178, 33, 0);
  Published.projectedValue.setter(v85, v81);
  v87 = swift_endAccess(&v178);
  v152 = *(_QWORD *)(v84 + 8);
  ((void (*)(char *, uint64_t, __n128))v152)(v80, v86, v87);
  v88 = *(void **)(v1 + 16);
  v90 = swift_getKeyPath(&unk_1004555E8, v89);
  v91 = v88;
  v92 = v174;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(v90, 4);

  v93 = swift_release(v90);
  v94 = v176;
  v178 = (_QWORD *)static OS_dispatch_queue.main.getter(v93);
  v95 = (uint64_t)v173;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v177)(v173, 1, 1, v172);
  v96 = v155;
  v97 = v175;
  Publisher.receive<A>(on:options:)(&v178, v95, v175, v94, v139, v78);
  sub_100012DDC(v95, &qword_1005D0FC8);

  ((void (*)(char *, uint64_t))v143)(v92, v97);
  v98 = v141;
  swift_beginAccess(v141, &v178, 33, 0);
  Published.projectedValue.getter(v81);
  swift_endAccess(&v178);
  v99 = sub_100016638(&qword_1005D1018, &qword_1005D0F98, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v100 = v156;
  Publisher<>.assign(to:)(v80, v156, v99);
  (*(void (**)(char *, uint64_t))(v157 + 8))(v96, v100);
  ((void (*)(char *, char *, uint64_t))v147)(v85, v80, v86);
  swift_beginAccess(v98, &v178, 33, 0);
  Published.projectedValue.setter(v85, v81);
  v101 = swift_endAccess(&v178);
  ((void (*)(char *, uint64_t, __n128))v152)(v80, v86, v101);
  v102 = v126;
  v103 = *(void **)(v126 + 16);
  v105 = swift_getKeyPath(&unk_100455618, v104);
  v106 = v103;
  v107 = v158;
  _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(v105, 4);

  swift_release(v105);
  v108 = sub_100016638(&qword_1005D1020, &qword_1005D0F80, (uint64_t)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
  v109 = v159;
  v110 = v161;
  Publisher.map<A>(_:)(sub_100151880, 0, v161, v148, v108);
  v111 = (*(uint64_t (**)(char *, uint64_t))(v162 + 8))(v107, v110);
  v112 = v176;
  v178 = (_QWORD *)static OS_dispatch_queue.main.getter(v111);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v177)(v95, 1, 1, v172);
  v113 = sub_100016638(&qword_1005D1028, &qword_1005D0F88, (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  v114 = v160;
  v115 = v163;
  Publisher.receive<A>(on:options:)(&v178, v95, v163, v112, v113, v171);
  sub_100012DDC(v95, &qword_1005D0FC8);

  (*(void (**)(char *, uint64_t))(v164 + 8))(v109, v115);
  v116 = v151;
  swift_beginAccess(v151, &v178, 33, 0);
  v117 = v167;
  v118 = v153;
  Published.projectedValue.getter(v153);
  swift_endAccess(&v178);
  v119 = sub_100016638(&qword_1005D1030, &qword_1005D0F90, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v120 = v165;
  Publisher<>.assign(to:)(v117, v165, v119);
  (*(void (**)(char *, uint64_t))(v166 + 8))(v114, v120);
  v121 = v168;
  v122 = v169;
  v123 = v170;
  (*(void (**)(char *, char *, uint64_t))(v169 + 16))(v168, v117, v170);
  swift_beginAccess(v116, &v178, 33, 0);
  Published.projectedValue.setter(v121, v118);
  v124 = swift_endAccess(&v178);
  (*(void (**)(char *, uint64_t, __n128))(v122 + 8))(v117, v123, v124);
  return v102;
}

_BYTE *sub_100151808@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  return result;
}

void sub_10015181C(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend(*a1, "dataSources");
  v4 = sub_100012E18(&qword_1005D1038);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  *a2 = v5;
}

uint64_t *sub_100151880@<X0>(uint64_t *result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  double v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v3 = *result;
  if ((unint64_t)*result >> 62)
  {
    if (v3 < 0)
      v19 = *result;
    else
      v19 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*result);
    v4 = _CocoaArrayWrapper.endIndex.getter(v19);
    result = (uint64_t *)swift_bridgeObjectRelease(v3);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v4)
    goto LABEL_13;
  result = (uint64_t *)sub_100137098(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = 0;
    v20 = a2;
    v21 = v3 & 0xC000000000000001;
    v6 = v3;
    v7 = v4;
    do
    {
      if (v21)
      {
        v8 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
      }
      else
      {
        v8 = *(void **)(v3 + 8 * v5 + 32);
        *(_QWORD *)&v9 = swift_unknownObjectRetain(v8).n128_u64[0];
      }
      v10 = objc_msgSend(v8, "dataSourceIdentifier", v9);
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      v14 = objc_msgSend(v8, "indexingPriority");
      result = (uint64_t *)swift_unknownObjectRelease(v8, v15);
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
        result = (uint64_t *)sub_100137098(v16 > 1, v17 + 1, 1);
      ++v5;
      _swiftEmptyArrayStorage[2] = v17 + 1;
      v18 = &_swiftEmptyArrayStorage[3 * v17];
      v18[4] = v14;
      v18[5] = v11;
      v18[6] = v13;
      v3 = v6;
    }
    while (v7 != v5);
    a2 = v20;
LABEL_13:
    *a2 = _swiftEmptyArrayStorage;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100151A24()
{
  id *v0;
  char *v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t);
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  v1 = (char *)v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__enabled;
  v2 = sub_100012E18(&qword_1005D0DE0);
  v3 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3((char *)v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__observing, v2);
  v4 = (char *)v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__dataSources;
  v5 = sub_100012E18(&qword_1005D0DE8);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)v0 + OBJC_IVAR____TtCV11MobileNotes23SearchIndexDebugSection9ViewModel__operationCount;
  v7 = sub_100012E18(&qword_1005D0DF0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_100151AF8()
{
  return type metadata accessor for SearchIndexDebugSection.ViewModel(0);
}

uint64_t type metadata accessor for SearchIndexDebugSection.ViewModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D0BC8;
  if (!qword_1005D0BC8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SearchIndexDebugSection.ViewModel);
  return result;
}

void sub_100151B3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100151C64(319, (unint64_t *)&qword_1005D8470, (uint64_t)&type metadata for Bool);
  if (v3 <= 0x3F)
  {
    v9 = *(_QWORD *)(v2 - 8) + 64;
    v10 = v9;
    sub_100151C0C(319);
    if (v5 <= 0x3F)
    {
      v11 = *(_QWORD *)(v4 - 8) + 64;
      sub_100151C64(319, (unint64_t *)&unk_1005D0BF0, (uint64_t)&type metadata for Int);
      if (v7 <= 0x3F)
      {
        v12 = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 5, &v8, a1 + 80);
      }
    }
  }
}

void sub_100151C0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D0BE0)
  {
    v2 = sub_10001537C(&qword_1005D0BE8);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D0BE0);
  }
}

void sub_100151C64(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    v4 = type metadata accessor for Published(0, a3);
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t BidirectionalAsyncBufferedQueue.outbox.getter(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t destroy for SearchIndexDebugSection(uint64_t *a1)
{
  return sub_100151CC4(*a1, a1[1]);
}

uint64_t sub_100151CC4(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t _s11MobileNotes23SearchIndexDebugSectionVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  BidirectionalAsyncBufferedQueue.outbox.getter(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SearchIndexDebugSection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  BidirectionalAsyncBufferedQueue.outbox.getter(*(_QWORD *)a2, v4);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_100151CC4(v6, v7);
  return a1;
}

uint64_t assignWithTake for SearchIndexDebugSection(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_100151CC4(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchIndexDebugSection(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchIndexDebugSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchIndexDebugSection()
{
  return &type metadata for SearchIndexDebugSection;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchIndexDebugSection.ViewModel.IndexingDataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for SearchIndexDebugSection.ViewModel.IndexingDataSource(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

_QWORD *assignWithCopy for SearchIndexDebugSection.ViewModel.IndexingDataSource(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a2[2];
  v4 = a1[2];
  a1[2] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for SearchIndexDebugSection.ViewModel.IndexingDataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SearchIndexDebugSection.ViewModel.IndexingDataSource(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchIndexDebugSection.ViewModel.IndexingDataSource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchIndexDebugSection.ViewModel.IndexingDataSource()
{
  return &type metadata for SearchIndexDebugSection.ViewModel.IndexingDataSource;
}

void *sub_100151F9C()
{
  return &protocol witness table for String;
}

uint64_t sub_100151FA8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1005034E8, 1);
}

uint64_t sub_100151FB8@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v2, a1);
  *a2 = result;
  return result;
}

uint64_t sub_100151FE0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for SearchIndexDebugSection.ViewModel(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_10015093C();
  return v1;
}

uint64_t sub_100152018@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;

  v32 = a4;
  v6 = a3 & 1;
  v7 = sub_100012E18(&qword_1005D0C98);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v13 = sub_100012E18(&qword_1005D0CA0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v32 - v18;
  *(_QWORD *)v19 = static VerticalAlignment.center.getter(v17);
  *((_QWORD *)v19 + 1) = 0;
  v19[16] = 1;
  v20 = sub_100012E18(&qword_1005D0CA8);
  sub_10015228C(a1, a2, v6, (uint64_t)&v19[*(int *)(v20 + 44)]);
  v21 = type metadata accessor for SearchIndexDebugSection.ViewModel(0);
  v22 = sub_100019C6C(&qword_1005D0CB0, type metadata accessor for SearchIndexDebugSection.ViewModel, (uint64_t)&unk_1004552EC);
  v23 = StateObject.wrappedValue.getter(a1, a2, v6, v21, v22);
  KeyPath = swift_getKeyPath(&unk_100455328, v24);
  v27 = swift_getKeyPath(&unk_100455350, v26);
  static Published.subscript.getter(&v33);
  swift_release(v23);
  swift_release(KeyPath);
  swift_release(v27);
  v28 = v33;
  sub_10015263C(v33, (uint64_t)v12);
  swift_bridgeObjectRelease(v28);
  sub_100012CE8((uint64_t)v19, (uint64_t)v16, &qword_1005D0CA0);
  sub_100012CE8((uint64_t)v12, (uint64_t)v10, &qword_1005D0C98);
  v29 = v32;
  sub_100012CE8((uint64_t)v16, v32, &qword_1005D0CA0);
  v30 = sub_100012E18(&qword_1005D0CB8);
  sub_100012CE8((uint64_t)v10, v29 + *(int *)(v30 + 48), &qword_1005D0C98);
  sub_100012DDC((uint64_t)v12, &qword_1005D0C98);
  sub_100012DDC((uint64_t)v19, &qword_1005D0CA0);
  sub_100012DDC((uint64_t)v10, &qword_1005D0C98);
  return sub_100012DDC((uint64_t)v16, &qword_1005D0CA0);
}

uint64_t sub_10015228C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v50 = a4;
  v6 = a3 & 1;
  v7 = sub_100012E18(&qword_1005D0D10);
  v8 = __chkstk_darwin(v7);
  v49 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v48 = (uint64_t)&v47 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v47 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v47 - v15;
  v17 = type metadata accessor for SearchIndexDebugSection.ViewModel(0);
  v18 = sub_100019C6C(&qword_1005D0CB0, type metadata accessor for SearchIndexDebugSection.ViewModel, (uint64_t)&unk_1004552EC);
  v47 = a1;
  v19 = StateObject.wrappedValue.getter(a1, a2, v6, v17, v18);
  KeyPath = swift_getKeyPath(&unk_1004553F0, v20);
  v23 = swift_getKeyPath(&unk_100455418, v22);
  static Published.subscript.getter((uint64_t *)((char *)&v52 + 1));
  swift_release(v19);
  swift_release(KeyPath);
  v24 = swift_release(v23);
  LOBYTE(KeyPath) = BYTE1(v52);
  *(_QWORD *)v16 = static VerticalAlignment.center.getter(v24);
  *((_QWORD *)v16 + 1) = 0;
  v16[16] = 1;
  v25 = sub_100012E18(&qword_1005D0D18);
  sub_100152884(KeyPath, 0x64656C62616E45, 0xE700000000000000, 0x64656C6261736944, 0xE800000000000000, &v16[*(int *)(v25 + 44)]);
  v26 = a1;
  v27 = a2;
  v28 = a2;
  v29 = v6;
  v30 = StateObject.wrappedValue.getter(v26, v27, v6, v17, v18);
  v32 = swift_getKeyPath(&unk_100455438, v31);
  v34 = swift_getKeyPath(&unk_100455460, v33);
  static Published.subscript.getter(&v52);
  swift_release(v30);
  swift_release(v32);
  v35 = swift_release(v34);
  LOBYTE(v30) = v52;
  *(_QWORD *)v14 = static VerticalAlignment.center.getter(v35);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 1;
  sub_100152884(v30, 0x6E6976726573624FLL, 0xE900000000000067, 0x6573626F20746F4ELL, 0xED0000676E697672, &v14[*(int *)(v25 + 44)]);
  v36 = StateObject.wrappedValue.getter(v47, v28, v29, v17, v18);
  v38 = swift_getKeyPath(&unk_100455480, v37);
  v40 = swift_getKeyPath(&unk_1004554A8, v39);
  static Published.subscript.getter(&v51);
  swift_release(v36);
  swift_release(v38);
  swift_release(v40);
  v41 = v51;
  v42 = v48;
  sub_100012CE8((uint64_t)v16, v48, &qword_1005D0D10);
  v43 = v49;
  sub_100012CE8((uint64_t)v14, v49, &qword_1005D0D10);
  v44 = v50;
  sub_100012CE8(v42, v50, &qword_1005D0D10);
  v45 = sub_100012E18(&qword_1005D0D20);
  sub_100012CE8(v43, v44 + *(int *)(v45 + 48), &qword_1005D0D10);
  *(_QWORD *)(v44 + *(int *)(v45 + 64)) = v41;
  sub_100012DDC((uint64_t)v14, &qword_1005D0D10);
  sub_100012DDC((uint64_t)v16, &qword_1005D0D10);
  sub_100012DDC(v43, &qword_1005D0D10);
  return sub_100012DDC(v42, &qword_1005D0D10);
}

uint64_t sub_10015263C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v25;
  char v26;
  _BYTE v27[16];
  _OWORD v28[7];

  v4 = sub_100012E18(&qword_1005D0CC0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_100012E18(&qword_1005D0C98);
  __chkstk_darwin(v8);
  v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  KeyPath = swift_getKeyPath(&unk_100455370, v11);
  *(_QWORD *)&v28[0] = a1;
  swift_bridgeObjectRetain(a1);
  sub_1001531F4((uint64_t (*)(__int128 *, __int128 *))sub_100156308, 0);
  swift_release(KeyPath);
  v13 = sub_100012E18(&qword_1005D0CC8);
  v14 = sub_100012E18(&qword_1005D0BE8);
  v15 = sub_100016638(&qword_1005D0CD0, &qword_1005D0CC8, (uint64_t)&protocol conformance descriptor for TupleTableColumnContent<A, B, C>);
  v16 = sub_100016638(&qword_1005D0CD8, &qword_1005D0BE8, (uint64_t)&protocol conformance descriptor for [A]);
  v17 = Table.init<A>(_:columns:)(v28, sub_100152A88, 0, &type metadata for SearchIndexDebugSection.ViewModel.IndexingDataSource, v13, v14, v15, v16);
  v18 = static Alignment.center.getter(v17);
  v26 = 1;
  v25 = 1;
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v28, 0x4069000000000000, 0, 0, 1, 0, 1, 0x4061800000000000, 0, 0, v25, 0, v26, v18, v19);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 16))(v10, v7, v4);
  v20 = &v10[*(int *)(v8 + 36)];
  v21 = v28[5];
  v20[4] = v28[4];
  v20[5] = v21;
  v20[6] = v28[6];
  v22 = v28[1];
  *v20 = v28[0];
  v20[1] = v22;
  v23 = v28[3];
  v20[2] = v28[2];
  v20[3] = v23;
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  return sub_10015631C((uint64_t)v10, a2);
}

uint64_t sub_100152884@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  char *v39;
  _QWORD v40[2];

  v39 = a6;
  v11 = sub_100012E18(&qword_1005D0D28);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v38 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v38 - v20;
  if ((a1 & 1) != 0)
  {
    v22 = static Color.green.getter(v19);
  }
  else
  {
    v22 = static Color.red.getter(v19);
    a2 = a4;
    a3 = a5;
  }
  v40[0] = v22;
  v23 = sub_100012E18(&qword_1005D0D30);
  v24 = sub_1001564E8();
  View.ic_frame(size:)(v23, v24, 8.0, 8.0);
  swift_release(v22);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v21, v18, v11);
  swift_bridgeObjectRetain(a3);
  v40[0] = a2;
  v40[1] = a3;
  v25 = sub_1001452E8();
  v26 = Text.init<A>(_:)(v40, &type metadata for String, v25);
  v28 = v27;
  v30 = v29;
  v32 = v31 & 1;
  v33 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v33(v15, v21, v11);
  v34 = v39;
  v33(v39, v15, v11);
  v35 = &v34[*(int *)(sub_100012E18((uint64_t *)&unk_1005D0D60) + 48)];
  *(_QWORD *)v35 = v26;
  *((_QWORD *)v35 + 1) = v28;
  v35[16] = v32;
  *((_QWORD *)v35 + 3) = v30;
  sub_10014BCE0(v26, v28, v32);
  v36 = *(void (**)(char *, uint64_t))(v12 + 8);
  swift_bridgeObjectRetain(v30);
  v36(v21, v11);
  sub_10014BCF0(v26, v28, v32);
  swift_bridgeObjectRelease(v30);
  return ((uint64_t (*)(char *, uint64_t))v36)(v15, v11);
}

uint64_t sub_100152A88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v2 = sub_100012E18((uint64_t *)&unk_1005D0CE0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = LocalizedStringKey.init(stringLiteral:)(0x797469726F697250, 0xE800000000000000);
  v8 = v7;
  v10 = v9;
  v12 = v11;
  KeyPath = swift_getKeyPath(&unk_100455390, v7);
  v14 = sub_1001563F4();
  TableColumn<>.init<>(_:value:)(v6, v8, v10 & 1, v12, KeyPath, v14);
  v15 = LocalizedStringKey.init(stringLiteral:)(0x696669746E656449, 0xEA00000000007265);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = swift_getKeyPath(&unk_1004553D0, v16);
  sub_100012E18(&qword_1005D0CF8);
  TableColumn<>.init<>(_:value:)(v15, v17, v19 & 1, v21, v22, v14);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, v2);
}

uint64_t sub_100152BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  Swift::String v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[4];
  char v31;

  v4 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = static VerticalAlignment.center.getter(v5);
  v8 = sub_100152DB8(a1, (uint64_t)v30);
  v9 = v30[0];
  v10 = v30[1];
  v11 = v30[2];
  v12 = v30[3];
  v13 = v31;
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(15, 1, v8);
  v14._countAndFlagsBits = 0x706F207865646E69;
  v14._object = (void *)0xEF6E6F6974617265;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v14);
  if (a1 == 1)
    v15 = 0;
  else
    v15 = 115;
  if (a1 == 1)
    v16 = 0xE000000000000000;
  else
    v16 = 0xE100000000000000;
  v17 = v16;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)&v15);
  swift_bridgeObjectRelease(v16);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
  v19 = LocalizedStringKey.init(stringInterpolation:)(v7);
  v20 = Text.init(_:tableName:bundle:comment:)(v19);
  v22 = v21;
  v24 = v23;
  LOBYTE(v30[0]) = v13;
  v26 = v25 & 1;
  *(_QWORD *)a2 = v29;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(_QWORD *)(a2 + 24) = v9;
  *(_QWORD *)(a2 + 32) = v10;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v12;
  *(_BYTE *)(a2 + 56) = v13;
  *(_QWORD *)(a2 + 64) = v20;
  *(_QWORD *)(a2 + 72) = v21;
  *(_BYTE *)(a2 + 80) = v25 & 1;
  *(_QWORD *)(a2 + 88) = v23;
  sub_100156804(v9, v10, v11, v12, v13);
  sub_10014BCE0(v20, v22, v26);
  swift_bridgeObjectRetain(v24);
  sub_10014BCF0(v20, v22, v26);
  swift_bridgeObjectRelease(v24);
  return sub_100156860(v9, v10, v11, v12, v30[0]);
}

double sub_100152DB8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  double result;
  __int128 v28;
  char v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  char v36;

  if (a1 > 9)
  {
    if ((unint64_t)a1 > 0x63)
    {
      v19 = sub_100156368();
      *(_QWORD *)&v34 = BinaryInteger.description.getter(&type metadata for Int, v19);
      *((_QWORD *)&v34 + 1) = v20;
      v21 = sub_1001452E8();
      *(_QWORD *)&v30 = Text.init<A>(_:)(&v34, &type metadata for String, v21);
      *((_QWORD *)&v30 + 1) = v23;
      v31 = v22 & 1;
      v32 = v24;
      v33 = 1;
      v25 = sub_100012E18(&qword_1005D1040);
      v26 = sub_1001568CC();
      _ConditionalContent<>.init(storage:)(&v30, v25, &type metadata for Text, v26, &protocol witness table for Text);
      goto LABEL_7;
    }
    *(_QWORD *)&v34 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *((_QWORD *)&v34 + 1) = v10;
    v11._countAndFlagsBits = 0x656C637269632ELL;
    v11._object = (void *)0xE700000000000000;
    String.append(_:)(v11);
    v12 = Image.init(systemName:)(v34, *((_QWORD *)&v34 + 1));
    *(_QWORD *)&v34 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *((_QWORD *)&v34 + 1) = v13;
    v14._countAndFlagsBits = 0x656C637269632ELL;
    v14._object = (void *)0xE700000000000000;
    String.append(_:)(v14);
    v5 = Image.init(systemName:)(v34, *((_QWORD *)&v34 + 1));
    swift_retain(v12);
    swift_retain(v5);
    *(_QWORD *)&v30 = v12;
    *((_QWORD *)&v30 + 1) = v5;
    LOBYTE(v31) = 1;
    v15 = sub_100012E18(&qword_1005D1058);
    v16 = sub_100016638(&qword_1005D1050, &qword_1005D1058, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(&v30, &type metadata for Image, v15, &protocol witness table for Image, v16);
    v30 = v34;
    v31 = v35;
    v32 = 0;
    v33 = 0;
    v17 = sub_100012E18(&qword_1005D1040);
    v18 = sub_1001568CC();
    _ConditionalContent<>.init(storage:)(&v30, v17, &type metadata for Text, v18, &protocol witness table for Text);
    swift_release(v12);
  }
  else
  {
    *(_QWORD *)&v34 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    *((_QWORD *)&v34 + 1) = v3;
    v4._countAndFlagsBits = 0x656C637269632ELL;
    v4._object = (void *)0xE700000000000000;
    String.append(_:)(v4);
    v5 = Image.init(systemName:)(v34, *((_QWORD *)&v34 + 1));
    v30 = (unint64_t)v5;
    LOBYTE(v31) = 0;
    swift_retain(v5);
    v6 = sub_100012E18(&qword_1005D1058);
    v7 = sub_100016638(&qword_1005D1050, &qword_1005D1058, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(&v30, &type metadata for Image, v6, &protocol witness table for Image, v7);
    v30 = v34;
    v31 = v35;
    v32 = 0;
    v33 = 0;
    v8 = sub_100012E18(&qword_1005D1040);
    v9 = sub_1001568CC();
    _ConditionalContent<>.init(storage:)(&v30, v8, &type metadata for Text, v9, &protocol witness table for Text);
  }
  swift_release(v5);
LABEL_7:
  result = *(double *)&v34;
  v28 = v35;
  v29 = v36;
  *(_OWORD *)a2 = v34;
  *(_OWORD *)(a2 + 16) = v28;
  *(_BYTE *)(a2 + 32) = v29;
  return result;
}

__n128 sub_100153108@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  char v18;
  __int128 v19;
  char v20;
  uint64_t v21;

  v4 = *v2;
  v5 = static VerticalAlignment.center.getter(a1);
  sub_100152BE4(v4, (uint64_t)&v14);
  v6 = v15;
  v7 = v18;
  v8 = v20;
  v9 = v21;
  result = v14;
  v11 = v16;
  v12 = v17;
  v13 = v19;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  *(__n128 *)(a2 + 24) = result;
  *(_BYTE *)(a2 + 40) = v6;
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 64) = v12;
  *(_BYTE *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 88) = v13;
  *(_BYTE *)(a2 + 104) = v8;
  *(_QWORD *)(a2 + 112) = v9;
  return result;
}

uint64_t sub_100153194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_QWORD *)v2;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_BYTE *)(v2 + 16);
  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 1;
  v7 = sub_100012E18(&qword_1005D0C90);
  return sub_100152018(v4, v5, v6, a2 + *(int *)(v7 + 44));
}

Swift::Int sub_1001531F4(uint64_t (*a1)(__int128 *, __int128 *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int result;

  v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native(*v2) & 1) == 0)
    v5 = sub_100156438(v5);
  result = sub_100155084(a1, a2);
  *v2 = v5;
  return result;
}

uint64_t sub_100153274@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X4>, _BYTE *a4@<X8>)
{
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  KeyPath = swift_getKeyPath(a2, a1);
  v8 = swift_getKeyPath(a3, v7);
  static Published.subscript.getter(&v10);
  swift_release(KeyPath);
  result = swift_release(v8);
  *a4 = v10;
  return result;
}

uint64_t sub_1001532EC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  char v13;

  v7 = *a1;
  v8 = *a2;
  KeyPath = swift_getKeyPath(a5, a2);
  v11 = swift_getKeyPath(a6, v10);
  v13 = v7;
  swift_retain(v8);
  return static Published.subscript.setter(&v13, v8, KeyPath, v11);
}

uint64_t sub_100153358@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100455480, a1);
  v5 = swift_getKeyPath(&unk_1004554A8, v4);
  static Published.subscript.getter(&v7);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001533D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100455480, a2);
  v6 = swift_getKeyPath(&unk_1004554A8, v5);
  v8 = v2;
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_100153444@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_100455328, a1);
  v5 = swift_getKeyPath(&unk_100455350, v4);
  static Published.subscript.getter(&v7);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1001534C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_100455328, a2);
  v6 = swift_getKeyPath(&unk_100455350, v5);
  v8 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

uint64_t sub_100153540(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0EF8, type metadata accessor for TagEntity);
}

uint64_t sub_100153554(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0EF0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001536BC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0EE8, (uint64_t (*)(_QWORD))&type metadata accessor for TagID);
}

uint64_t sub_1001536D0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0EE0, type metadata accessor for FolderEntity);
}

uint64_t sub_1001536E4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0ED8, (uint64_t (*)(_QWORD))&type metadata accessor for FolderID);
}

uint64_t sub_1001536F8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0D08);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10015387C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154EA4(a1, a2, a3, a4, &qword_1005D0E48, &qword_1005D0E50);
}

uint64_t sub_100153890(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0EC8, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
}

uint64_t sub_1001538A4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18((uint64_t *)&unk_1005D5620);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100153A10(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0DD0);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100012E18(&qword_1005D0DD8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100153B98(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0EC0, (uint64_t (*)(_QWORD))&type metadata accessor for NoteID);
}

uint64_t sub_100153BAC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0DC0);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100012E18(&qword_1005D0DC8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100153D50(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0E08, _s14AudioRecordingV8FragmentVMa);
}

uint64_t sub_100153D64(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18((uint64_t *)&unk_1005D89C0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100153EC0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0EA8, (uint64_t (*)(_QWORD))&type metadata accessor for RealtimeCollaborationSelectionDocument.ParticipantSelection);
}

uint64_t sub_100153ED4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0EB8, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100153EE8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0EB0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    memcpy(v14, v15, 16 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100154044(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0F10, _s14descr10055F441V6ObjectVMa);
}

uint64_t sub_100154058(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18((uint64_t *)&unk_1005D0E70);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100012E18((uint64_t *)&unk_1005D7360);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001541FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0E80);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = v11 + 4;
  v15 = a4 + 4;
  v16 = 4 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v11 + 4, a4 + 4, v16 * 8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    sub_100012E18(&qword_1005D0E88);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100154380(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18((uint64_t *)&unk_1005D0E90);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001544DC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18((uint64_t *)&unk_1005D21E0);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10015465C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0D70);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001547A8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0E58, (uint64_t (*)(_QWORD))&type metadata accessor for AttachmentID);
}

uint64_t sub_1001547BC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0DF8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100154918(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0E18, _s3TagVMa);
}

uint64_t sub_10015492C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0E10, _s8ActivityVMa);
}

uint64_t sub_100154940(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18((uint64_t *)&unk_1005D0DB0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100154A9C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0E30, (uint64_t (*)(_QWORD))&type metadata accessor for TableID);
}

uint64_t sub_100154AB0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18((uint64_t *)&unk_1005D0D80);
    v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v8)
      memmove(v11 + 4, a4 + 4, 32 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 32 * v8 || v14 >= v15 + 32 * v8)
  {
    sub_100012E18(&qword_1005CF190);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100154C38(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154EA4(a1, a2, a3, a4, &qword_1005D0D90, &qword_1005D0D98);
}

uint64_t sub_100154C4C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0E20, type metadata accessor for AccountEntity);
}

uint64_t sub_100154C60(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0E28, (uint64_t (*)(_QWORD))&type metadata accessor for AccountID);
}

uint64_t sub_100154C74(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, (uint64_t *)&unk_1005D0DA0, (uint64_t (*)(_QWORD))&type metadata accessor for SiriVocabulary.DynamicTerm);
}

uint64_t sub_100154C88(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154C9C(a1, a2, a3, a4, &qword_1005D0E00, _s14AudioRecordingV17TranscriptSegmentVMa);
}

uint64_t sub_100154C9C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100012E18(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100154E7C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154EA4(a1, a2, a3, a4, (uint64_t *)&unk_1005D0E60, &qword_1005D55E0);
}

uint64_t sub_100154E90(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_100154EA4(a1, a2, a3, a4, &qword_1005D0E38, &qword_1005D0E40);
}

uint64_t sub_100154EA4(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100012E18(a5);
  v14 = *(_QWORD *)(sub_100012E18(a6) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(sub_100012E18(a6) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (char *)v18 + v22;
  v24 = (char *)a4 + v22;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v23 >= &v24[*(_QWORD *)(v21 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v23, v24);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v23, v24);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v25 = *(_QWORD *)(v21 + 72) * v11;
  v26 = &v23[v25];
  v27 = (unint64_t)&v24[v25];
  if (v24 >= v26 || (unint64_t)v23 >= v27)
  {
    swift_arrayInitWithCopy(v23);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

Swift::Int sub_100155084(uint64_t (*a1)(__int128 *, __int128 *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  Swift::Int v4;
  Swift::Int result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  Swift::Int v13;
  Swift::Int v14;
  __int128 *v15;
  uint64_t v16;
  __int128 *v17;
  char *v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  Swift::Int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  uint64_t v61;
  char v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  Swift::Int v90;
  Swift::Int v91;
  _QWORD *v92;
  char v93;
  char v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  Swift::Int v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  Swift::Int v114;
  Swift::Int v115;
  Swift::Int v116;
  _QWORD *v117;
  int v118;
  Swift::Int v119;
  _QWORD *v120;
  Swift::Int v121;
  char *v122;
  uint64_t v123;
  __int128 v125;
  char *v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;

  v129 = a2;
  v4 = v2[1];
  result = _minimumMergeRunLength(_:)(v4);
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_142;
    if (v4)
      return sub_1001558E8(0, v4, 1, (uint64_t (*)(_QWORD *, __int128 *))a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 <= -2)
  {
LABEL_151:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v116 = result;
  v112 = v2;
  if (v4 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    v122 = (char *)&_swiftEmptyArrayStorage[4];
    if (v4 != 1)
    {
      v36 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_104:
      v117 = v9;
      if (v36 >= 2)
      {
        v98 = *v112;
        do
        {
          v99 = v36 - 2;
          if (v36 < 2)
            goto LABEL_137;
          if (!v98)
            goto LABEL_150;
          v100 = v12;
          v101 = v12 + 32;
          v102 = *(_QWORD *)&v12[16 * v99 + 32];
          v103 = *(_QWORD *)&v101[16 * v36 - 8];
          sub_100155A2C((char *)(v98 + 24 * v102), (char *)(v98 + 24 * *(_QWORD *)&v101[16 * v36 - 16]), v98 + 24 * v103, v122, a1);
          if (v3)
          {
            v97 = v100;
            goto LABEL_119;
          }
          if (v103 < v102)
            goto LABEL_138;
          if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
            v100 = sub_1001562F4((uint64_t)v100);
          if (v99 >= *((_QWORD *)v100 + 2))
            goto LABEL_139;
          v104 = v100;
          v105 = v100 + 32;
          v106 = &v100[16 * v99 + 32];
          *(_QWORD *)v106 = v102;
          *((_QWORD *)v106 + 1) = v103;
          v107 = *((_QWORD *)v100 + 2);
          if (v36 > v107)
            goto LABEL_140;
          v12 = v104;
          memmove(&v105[16 * v36 - 16], &v105[16 * v36], 16 * (v107 - v36));
          *((_QWORD *)v12 + 2) = v107 - 1;
          v36 = v107 - 1;
        }
        while (v107 > 2);
      }
      v97 = v12;
      goto LABEL_119;
    }
    v117 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v6 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6 >> 1, &type metadata for SearchIndexDebugSection.ViewModel.IndexingDataSource);
    *(_QWORD *)(v8 + 16) = v7;
    v117 = (_QWORD *)v8;
    v122 = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *v2;
  v113 = *v2 + 40;
  v111 = *v2 + 16;
  v12 = (char *)_swiftEmptyArrayStorage;
  v121 = v4;
  v123 = *v2;
  while (1)
  {
    v13 = v10;
    v14 = v10 + 1;
    if (v10 + 1 >= v4)
      goto LABEL_32;
    v15 = (__int128 *)(v11 + 24 * v14);
    v16 = *((_QWORD *)v15 + 2);
    v127 = *v15;
    v128 = v16;
    v17 = (__int128 *)(v11 + 24 * v10);
    v18 = (char *)*((_QWORD *)v17 + 2);
    v125 = *v17;
    v126 = v18;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
    v118 = a1(&v127, &v125);
    if (v3)
      break;
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v18);
    v14 = v13 + 2;
    if (v13 + 2 < v4)
    {
      v114 = v13;
      v19 = v113 + 24 * v13;
      while (1)
      {
        v20 = v14;
        v21 = *(_QWORD *)(v19 + 24);
        v127 = *(_OWORD *)(v19 + 8);
        v128 = v21;
        v22 = *(char **)v19;
        v125 = *(_OWORD *)(v19 - 16);
        v126 = v22;
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v22);
        v23 = a1(&v127, &v125);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v22);
        if (((v118 ^ v23) & 1) != 0)
          break;
        v14 = v20 + 1;
        v19 += 24;
        v4 = v121;
        if (v121 == v20 + 1)
        {
          v14 = v121;
          goto LABEL_22;
        }
      }
      v4 = v121;
      v14 = v20;
LABEL_22:
      v13 = v114;
    }
    v11 = v123;
    if ((v118 & 1) != 0)
    {
      if (v14 < v13)
        goto LABEL_146;
      if (v13 < v14)
      {
        v24 = 24 * v14;
        v25 = 24 * v13;
        v26 = v14;
        v27 = v13;
        do
        {
          if (v27 != --v26)
          {
            if (!v123)
              goto LABEL_149;
            v28 = v123 + v25;
            v29 = v123 + v24;
            v30 = *(_QWORD *)(v123 + v25 + 16);
            v31 = *(_OWORD *)(v123 + v25);
            v32 = *(_QWORD *)(v123 + v24 - 8);
            *(_OWORD *)v28 = *(_OWORD *)(v123 + v24 - 24);
            *(_QWORD *)(v28 + 16) = v32;
            *(_OWORD *)(v29 - 24) = v31;
            *(_QWORD *)(v29 - 8) = v30;
          }
          ++v27;
          v24 -= 24;
          v25 += 24;
        }
        while (v27 < v26);
      }
    }
LABEL_32:
    if (v14 >= v4)
      goto LABEL_41;
    if (__OFSUB__(v14, v13))
      goto LABEL_143;
    if (v14 - v13 >= v116)
    {
LABEL_41:
      if (v14 < v13)
        goto LABEL_141;
      goto LABEL_42;
    }
    if (__OFADD__(v13, v116))
      goto LABEL_144;
    if (v13 + v116 >= v4)
      v33 = v4;
    else
      v33 = v13 + v116;
    if (v33 < v13)
    {
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
      goto LABEL_151;
    }
    if (v14 == v33)
      goto LABEL_41;
    v109 = v12;
    v110 = v33;
    v85 = (_QWORD *)(v111 + 24 * v14);
    v115 = v13;
    do
    {
      v86 = (uint64_t *)(v11 + 24 * v14);
      v87 = *v86;
      v88 = v86[1];
      v89 = v86[2];
      v90 = v13;
      v120 = v85;
      while (1)
      {
        v91 = v14;
        *(_QWORD *)&v127 = v87;
        *((_QWORD *)&v127 + 1) = v88;
        v128 = v89;
        v18 = (char *)*(v85 - 3);
        v92 = v85 - 5;
        v125 = *(_OWORD *)(v85 - 5);
        v126 = v18;
        swift_bridgeObjectRetain(v89);
        swift_bridgeObjectRetain(v18);
        v93 = a1(&v127, &v125);
        if (v3)
        {
          swift_bridgeObjectRelease(v109);
          v108 = v89;
          goto LABEL_118;
        }
        v94 = v93;
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v18);
        if ((v94 & 1) == 0)
          break;
        v11 = v123;
        if (!v123)
          goto LABEL_148;
        v89 = *v85;
        v95 = *(v85 - 3);
        *(v85 - 3) = *v85;
        v85 -= 3;
        v87 = v85[1];
        v88 = v85[2];
        *(_OWORD *)(v92 + 3) = *(_OWORD *)v92;
        v92[5] = v95;
        *(v85 - 2) = v87;
        *(v85 - 1) = v88;
        ++v90;
        v14 = v91;
        if (v91 == v90)
          goto LABEL_99;
      }
      v11 = v123;
      v14 = v91;
LABEL_99:
      ++v14;
      v85 = v120 + 3;
      v13 = v115;
    }
    while (v14 != v110);
    v14 = v110;
    v12 = v109;
    if (v110 < v115)
      goto LABEL_141;
LABEL_42:
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_100155E58(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v35 = *((_QWORD *)v12 + 2);
    v34 = *((_QWORD *)v12 + 3);
    v36 = v35 + 1;
    v11 = v123;
    if (v35 >= v34 >> 1)
    {
      v96 = sub_100155E58((char *)(v34 > 1), v35 + 1, 1, v12);
      v11 = v123;
      v12 = v96;
    }
    *((_QWORD *)v12 + 2) = v36;
    v37 = v12 + 32;
    v38 = &v12[16 * v35 + 32];
    *(_QWORD *)v38 = v13;
    *((_QWORD *)v38 + 1) = v14;
    v119 = v14;
    if (v35)
    {
      while (2)
      {
        v39 = v36 - 1;
        if (v36 >= 4)
        {
          v44 = &v37[16 * v36];
          v45 = *((_QWORD *)v44 - 8);
          v46 = *((_QWORD *)v44 - 7);
          v50 = __OFSUB__(v46, v45);
          v47 = v46 - v45;
          if (v50)
            goto LABEL_126;
          v49 = *((_QWORD *)v44 - 6);
          v48 = *((_QWORD *)v44 - 5);
          v50 = __OFSUB__(v48, v49);
          v42 = v48 - v49;
          v43 = v50;
          if (v50)
            goto LABEL_127;
          v51 = v36 - 2;
          v52 = &v37[16 * v36 - 32];
          v54 = *(_QWORD *)v52;
          v53 = *((_QWORD *)v52 + 1);
          v50 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          if (v50)
            goto LABEL_129;
          v50 = __OFADD__(v42, v55);
          v56 = v42 + v55;
          if (v50)
            goto LABEL_132;
          if (v56 >= v47)
          {
            v74 = &v37[16 * v39];
            v76 = *(_QWORD *)v74;
            v75 = *((_QWORD *)v74 + 1);
            v50 = __OFSUB__(v75, v76);
            v77 = v75 - v76;
            if (v50)
              goto LABEL_136;
            v67 = v42 < v77;
          }
          else
          {
LABEL_60:
            if ((v43 & 1) != 0)
              goto LABEL_128;
            v51 = v36 - 2;
            v57 = &v37[16 * v36 - 32];
            v59 = *(_QWORD *)v57;
            v58 = *((_QWORD *)v57 + 1);
            v60 = __OFSUB__(v58, v59);
            v61 = v58 - v59;
            v62 = v60;
            if (v60)
              goto LABEL_131;
            v63 = &v37[16 * v39];
            v65 = *(_QWORD *)v63;
            v64 = *((_QWORD *)v63 + 1);
            v50 = __OFSUB__(v64, v65);
            v66 = v64 - v65;
            if (v50)
              goto LABEL_134;
            if (__OFADD__(v61, v66))
              goto LABEL_135;
            if (v61 + v66 < v42)
              goto LABEL_72;
            v67 = v42 < v66;
          }
          if (v67)
            v39 = v51;
        }
        else
        {
          if (v36 == 3)
          {
            v41 = *((_QWORD *)v12 + 4);
            v40 = *((_QWORD *)v12 + 5);
            v50 = __OFSUB__(v40, v41);
            v42 = v40 - v41;
            v43 = v50;
            goto LABEL_60;
          }
          v68 = *((_QWORD *)v12 + 4);
          v69 = *((_QWORD *)v12 + 5);
          v50 = __OFSUB__(v69, v68);
          v61 = v69 - v68;
          v62 = v50;
LABEL_72:
          if ((v62 & 1) != 0)
            goto LABEL_130;
          v70 = &v37[16 * v39];
          v72 = *(_QWORD *)v70;
          v71 = *((_QWORD *)v70 + 1);
          v50 = __OFSUB__(v71, v72);
          v73 = v71 - v72;
          if (v50)
            goto LABEL_133;
          if (v73 < v61)
            goto LABEL_89;
        }
        v78 = v39 - 1;
        if (v39 - 1 >= v36)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v11)
          goto LABEL_147;
        v79 = v12;
        v80 = &v37[16 * v78];
        v81 = *(_QWORD *)v80;
        v82 = &v37[16 * v39];
        v83 = *((_QWORD *)v82 + 1);
        sub_100155A2C((char *)(v11 + 24 * *(_QWORD *)v80), (char *)(v11 + 24 * *(_QWORD *)v82), v11 + 24 * v83, v122, a1);
        if (v3)
        {
          v97 = v79;
          goto LABEL_119;
        }
        if (v83 < v81)
          goto LABEL_123;
        if (v39 > *((_QWORD *)v79 + 2))
          goto LABEL_124;
        *(_QWORD *)v80 = v81;
        *(_QWORD *)&v37[16 * v78 + 8] = v83;
        v84 = *((_QWORD *)v79 + 2);
        if (v39 >= v84)
          goto LABEL_125;
        v12 = v79;
        v36 = v84 - 1;
        memmove(&v37[16 * v39], v82 + 16, 16 * (v84 - 1 - v39));
        *((_QWORD *)v79 + 2) = v84 - 1;
        v11 = v123;
        if (v84 <= 2)
          goto LABEL_89;
        continue;
      }
    }
    v36 = 1;
LABEL_89:
    v10 = v119;
    v4 = v121;
    if (v119 >= v121)
    {
      v9 = v117;
      goto LABEL_104;
    }
  }
  swift_bridgeObjectRelease(v12);
  v108 = v16;
LABEL_118:
  swift_bridgeObjectRelease(v108);
  v97 = v18;
LABEL_119:
  swift_bridgeObjectRelease(v97);
  v117[2] = 0;
  return swift_bridgeObjectRelease(v117);
}

uint64_t sub_1001558E8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, __int128 *))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t (*v25)(_QWORD *, __int128 *);

  v25 = a4;
  if (a3 != a2)
  {
    v6 = result;
    v7 = *v4;
    v8 = (_QWORD *)(*v4 + 24 * a3 + 16);
    v18 = result;
LABEL_4:
    v9 = (uint64_t *)(v7 + 24 * a3);
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[2];
    v20 = v8;
    v21 = a3;
    while (1)
    {
      v24[0] = v10;
      v24[1] = v11;
      v24[2] = v12;
      v13 = *(v8 - 3);
      v14 = v8 - 5;
      v22 = *(_OWORD *)(v8 - 5);
      v23 = v13;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      v15 = v25(v24, &v22);
      swift_bridgeObjectRelease(v12);
      result = swift_bridgeObjectRelease(v13);
      if (v5)
        break;
      if ((v15 & 1) == 0)
      {
        v17 = v21;
LABEL_11:
        a3 = v17 + 1;
        v8 = v20 + 3;
        v6 = v18;
        if (a3 != a2)
          goto LABEL_4;
        return result;
      }
      if (!v7)
      {
        __break(1u);
        return result;
      }
      v12 = *v8;
      v16 = *(v8 - 3);
      *(v8 - 3) = *v8;
      v8 -= 3;
      v10 = v8[1];
      v11 = v8[2];
      *(_OWORD *)(v14 + 3) = *(_OWORD *)v14;
      v14[5] = v16;
      *(v8 - 2) = v10;
      *(v8 - 1) = v11;
      ++v6;
      v17 = v21;
      if (v21 == v6)
        goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_100155A2C(char *__src, char *a2, unint64_t a3, char *a4, uint64_t (*a5)(__int128 *, __int128 *))
{
  uint64_t v5;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char *v18;
  _QWORD *v19;
  BOOL v20;
  __int128 v21;
  char *v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  char v31;
  char *v32;
  __int128 v33;
  unint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t result;
  const void *v38;
  char *v39;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char *v47;
  const void *v48;
  char *v49;

  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v49 = __src;
  v48 = a4;
  if (v9 >= v11)
  {
    if (v10 <= -24)
      goto LABEL_50;
    if (a4 != a2 || &a2[24 * v11] <= a4)
      memmove(a4, a2, 24 * v11);
    v22 = &a4[24 * v11];
    v47 = v22;
    v49 = v6;
    if (v7 >= v6 || v10 < 24)
    {
LABEL_49:
      sub_100155F50((void **)&v49, &v48, &v47);
      return 1;
    }
    v23 = a3 - 24;
    v24 = v6;
    v39 = v7;
    while (1)
    {
      v25 = v22;
      v26 = v22 - 24;
      v27 = *((_QWORD *)v22 - 1);
      v45 = *(_OWORD *)(v22 - 24);
      v46 = v27;
      v28 = *(_OWORD *)(v24 - 24);
      v24 -= 24;
      v29 = *((_QWORD *)v24 + 2);
      v43 = v28;
      v44 = v29;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v29);
      v30 = a5(&v45, &v43);
      if (v5)
      {
        swift_bridgeObjectRelease(v27);
        swift_bridgeObjectRelease(v29);
        goto LABEL_49;
      }
      v31 = v30;
      v32 = (char *)(v23 + 24);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v29);
      if ((v31 & 1) != 0)
      {
        v22 = v25;
        if (v32 != v6 || v23 >= (unint64_t)v6)
        {
          v33 = *(_OWORD *)v24;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v24 + 2);
          *(_OWORD *)v23 = v33;
        }
        v49 = v24;
      }
      else
      {
        v47 = v26;
        if (v32 >= v25 && v23 < (unint64_t)v25)
        {
          v34 = (unint64_t)v39;
          if (v32 != v25)
          {
            v35 = *(_OWORD *)v26;
            *(_QWORD *)(v23 + 16) = *((_QWORD *)v26 + 2);
            *(_OWORD *)v23 = v35;
          }
          v24 = v6;
          v22 = v26;
          v5 = 0;
          goto LABEL_42;
        }
        v36 = *(_OWORD *)v26;
        *(_QWORD *)(v23 + 16) = *((_QWORD *)v26 + 2);
        *(_OWORD *)v23 = v36;
        v24 = v6;
        v22 = v26;
      }
      v5 = 0;
      v34 = (unint64_t)v39;
LABEL_42:
      if ((unint64_t)v24 > v34)
      {
        v23 -= 24;
        v6 = v24;
        if (v22 > a4)
          continue;
      }
      goto LABEL_49;
    }
  }
  if (v8 > -24)
  {
    v12 = (unint64_t)a4;
    if (a4 != __src || &__src[24 * v9] <= a4)
      memmove(a4, __src, 24 * v9);
    v47 = &a4[24 * v9];
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      v38 = v48;
      v13 = v49;
      while (1)
      {
        v14 = *((_QWORD *)v6 + 2);
        v45 = *(_OWORD *)v6;
        v46 = v14;
        v15 = *(_QWORD *)(v12 + 16);
        v43 = *(_OWORD *)v12;
        v44 = v15;
        swift_bridgeObjectRetain(v14);
        swift_bridgeObjectRetain(v15);
        v16 = a5(&v45, &v43);
        if (v5)
        {
          v48 = v38;
          v49 = v13;
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v15);
          goto LABEL_49;
        }
        v17 = v16;
        swift_bridgeObjectRelease(v14);
        swift_bridgeObjectRelease(v15);
        if ((v17 & 1) != 0)
        {
          v18 = v6 + 24;
          if (v7 < v6)
          {
            v19 = v6;
          }
          else if (v7 >= v18)
          {
            v19 = v6;
          }
          else
          {
            v19 = v6;
            if (v7 == v6)
              goto LABEL_17;
          }
        }
        else
        {
          v19 = (_QWORD *)v12;
          v18 = v6;
          v20 = v7 == (char *)v12;
          v38 = (const void *)(v12 + 24);
          v12 += 24;
          if (v20)
            goto LABEL_17;
        }
        v21 = *(_OWORD *)v19;
        *((_QWORD *)v7 + 2) = v19[2];
        *(_OWORD *)v7 = v21;
LABEL_17:
        v13 = v7 + 24;
        if (v12 < (unint64_t)&a4[24 * v9])
        {
          v6 = v18;
          v7 += 24;
          if ((unint64_t)v18 < a3)
            continue;
        }
        v48 = v38;
        v49 = v13;
        goto LABEL_49;
      }
    }
    goto LABEL_49;
  }
LABEL_50:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100155E58(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005D0D00);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_100155F50(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

uint64_t sub_10015600C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = sub_100012E18(&qword_1005D3DA0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

uint64_t sub_10015611C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001561E8(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for TranscriptViewModelSegment);
}

char *sub_100156128(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

uint64_t sub_1001561D0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001561E8(a1, a2, a3, _s14descr10055F441V6ObjectVMa);
}

uint64_t sub_1001561DC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1001561E8(a1, a2, a3, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

uint64_t sub_1001561E8(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4, v5);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  return result;
}

char *sub_1001562F4(uint64_t a1)
{
  return sub_100155E58(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

BOOL sub_100156308(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

uint64_t sub_10015631C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D0C98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100156368()
{
  unint64_t result;

  result = qword_1005DB3A0;
  if (!qword_1005DB3A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1005DB3A0);
  }
  return result;
}

uint64_t sub_1001563AC@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = sub_100156368();
  result = BinaryInteger.description.getter(&type metadata for Int, v2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1001563F4()
{
  unint64_t result;

  result = qword_1005D0CF0;
  if (!qword_1005D0CF0)
  {
    result = swift_getWitnessTable(&unk_100455264, &type metadata for SearchIndexDebugSection.ViewModel.IndexingDataSource);
    atomic_store(result, (unint64_t *)&qword_1005D0CF0);
  }
  return result;
}

uint64_t sub_100156438(uint64_t a1)
{
  return sub_1001536F8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100156450@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_100153274(a1, (uint64_t)&unk_1004553F0, (uint64_t)&unk_100455418, a2);
}

uint64_t sub_100156474(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001532EC(a1, a2, a3, a4, (uint64_t)&unk_1004553F0, (uint64_t)&unk_100455418);
}

uint64_t sub_100156498@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_100153274(a1, (uint64_t)&unk_100455438, (uint64_t)&unk_100455460, a2);
}

uint64_t sub_1001564BC(char *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001532EC(a1, a2, a3, a4, (uint64_t)&unk_100455438, (uint64_t)&unk_100455460);
}

unint64_t sub_1001564E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D0D38;
  if (!qword_1005D0D38)
  {
    v1 = sub_10001537C(&qword_1005D0D30);
    sub_10015656C();
    sub_100016638(&qword_1005D0D48, (uint64_t *)&unk_1005D0D50, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D0D38);
  }
  return result;
}

unint64_t sub_10015656C()
{
  unint64_t result;

  result = qword_1005D0D40;
  if (!qword_1005D0D40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Circle, &type metadata for Circle);
    atomic_store(result, (unint64_t *)&qword_1005D0D40);
  }
  return result;
}

uint64_t sub_1001565B0(_QWORD *a1)
{
  return sub_100154EA4(0, a1[2], 0, a1, &qword_1005D0EA0, &qword_1005D3DA0);
}

uint64_t sub_1001565E4(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001565F8(_QWORD *a1)
{
  return sub_100154C9C(0, a1[2], 0, a1, &qword_1005D0F10, _s14descr10055F441V6ObjectVMa);
}

uint64_t sub_10015662C(_QWORD *a1)
{
  return sub_100154C9C(0, a1[2], 0, a1, &qword_1005D0D78, (uint64_t (*)(_QWORD))&type metadata accessor for Date);
}

ValueMetadata *type metadata accessor for SearchIndexDebugSection.OperationQueueView()
{
  return &type metadata for SearchIndexDebugSection.OperationQueueView;
}

uint64_t sub_100156670()
{
  return sub_100016638(&qword_1005D0F00, &qword_1005D0F08, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_10015669C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100503510, 1);
}

const char *sub_1001566AC()
{
  return "operationQueue";
}

id sub_1001566B8@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "operationQueue");
  *a2 = result;
  return result;
}

const char *sub_1001566F0()
{
  return "operationCount";
}

id sub_1001566FC@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "operationCount");
  *a2 = result;
  return result;
}

unint64_t sub_10015672C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005CEF30;
  if (!qword_1005CEF30)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005CEF30);
  }
  return result;
}

const char *sub_100156768()
{
  return "isDisabled";
}

id sub_100156774@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isDisabled");
  *a2 = (_BYTE)result;
  return result;
}

id sub_1001567A4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setDisabled:", *a1);
}

const char *sub_1001567B8()
{
  return "isObservingChanges";
}

id sub_1001567C4@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "isObservingChanges");
  *a2 = (_BYTE)result;
  return result;
}

const char *sub_1001567F4()
{
  return "dataSources";
}

uint64_t sub_100156804(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return sub_100156838(a1, a2, a3 & 1);
  sub_10014BCE0(a1, a2, a3 & 1);
  return swift_bridgeObjectRetain(a4);
}

uint64_t sub_100156838(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
  {
    swift_retain(a1);
    a1 = a2;
  }
  return swift_retain(a1);
}

uint64_t sub_100156860(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
    return sub_100156894(a1, a2, a3 & 1);
  sub_10014BCF0(a1, a2, a3 & 1);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100156894(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  result = swift_release(a1);
  if ((a3 & 1) != 0)
    return swift_release(a2);
  return result;
}

unint64_t sub_1001568CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D1048;
  if (!qword_1005D1048)
  {
    v1 = sub_10001537C(&qword_1005D1040);
    sub_100016638(&qword_1005D1050, &qword_1005D1058, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D1048);
  }
  return result;
}

uint64_t sub_100156950()
{
  return sub_100016638(&qword_1005D1060, &qword_1005D1068, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

uint64_t sub_100156980()
{
  uint64_t result;
  uint64_t v1;

  result = _s11MobileNotes18VisibleTablesQueryVACycfC_0();
  static TableEntity.defaultQuery = result;
  unk_1006015C0 = v1;
  return result;
}

uint64_t *TableEntity.defaultQuery.unsafeMutableAddressor()
{
  if (qword_1005CE988 != -1)
    swift_once(&qword_1005CE988, sub_100156980);
  return &static TableEntity.defaultQuery;
}

uint64_t static TableEntity.defaultQuery.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1005CE988 != -1)
    swift_once(&qword_1005CE988, sub_100156980);
  v0 = static TableEntity.defaultQuery;
  v1 = unk_1006015C0;
  swift_retain(static TableEntity.defaultQuery);
  swift_retain(v1);
  return v0;
}

uint64_t sub_100156A44()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static TableEntity.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static TableEntity.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x656C626154, 0xE500000000000000);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "App entity name", 15, 2);
  LocalizedStringResource.init(stringLiteral:)(0x62617420646C6C25, 0xEB0000000073656CLL);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v2, 0, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t TableEntity.typeDisplayRepresentation.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CE990 != -1)
    swift_once(&qword_1005CE990, sub_100156A44);
  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  return sub_10012A0B0(v0, (uint64_t)static TableEntity.typeDisplayRepresentation);
}

uint64_t static TableEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CE990 != -1)
    swift_once(&qword_1005CE990, sub_100156A44);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static TableEntity.typeDisplayRepresentation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t TableEntity.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TableID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t TableEntity.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for TableID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t (*TagEntity.id.modify())()
{
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t TableEntity.managedObjectURI.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TableEntity(0) + 20);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for TableEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_1005D11D8;
  if (!qword_1005D11D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TableEntity);
  return result;
}

uint64_t TableEntity.managedObjectURI.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for TableEntity(0) + 20);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*TableEntity.managedObjectURI.modify())()
{
  type metadata accessor for TableEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t TableEntity.title.getter()
{
  uint64_t v1;

  type metadata accessor for TableEntity(0);
  EntityProperty.wrappedValue.getter(&v1);
  return v1;
}

uint64_t TableEntity.title.setter(uint64_t a1, uint64_t a2)
{
  _QWORD v5[2];

  type metadata accessor for TableEntity(0);
  v5[0] = a1;
  v5[1] = a2;
  return EntityProperty.wrappedValue.setter(v5);
}

void (*TableEntity.title.modify(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  type metadata accessor for TableEntity(0);
  v2[4] = EntityProperty.wrappedValue.modify(v2);
  return sub_10012A894;
}

uint64_t TableEntity.$title.getter()
{
  type metadata accessor for TableEntity(0);
  return EntityProperty.projectedValue.getter();
}

uint64_t TableEntity.subtitle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for TableEntity(0) + 28));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t TableEntity.subtitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for TableEntity(0) + 28));
  result = swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*TableEntity.subtitle.modify())()
{
  type metadata accessor for TableEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t sub_100157054@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CE988 != -1)
    swift_once(&qword_1005CE988, sub_100156980);
  v2 = static TableEntity.defaultQuery;
  v3 = unk_1006015C0;
  *a1 = static TableEntity.defaultQuery;
  a1[1] = v3;
  swift_retain(v2);
  return swift_retain(v3);
}

uint64_t sub_1001570B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

uint64_t TableEntity.displayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  Swift::String v17;
  uint64_t v18;
  void *object;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  _QWORD v25[2];
  Swift::String v26;

  v25[1] = a1;
  v2 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v2);
  v4 = (char *)v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = type metadata accessor for LocalizedStringResource(0);
  v8 = *(_QWORD *)(v25[0] - 8);
  __chkstk_darwin(v25[0]);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v25 - v15;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v17);
  v18 = type metadata accessor for TableEntity(0);
  EntityProperty.wrappedValue.getter(&v26);
  object = v26._object;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v26);
  swift_bridgeObjectRelease(object);
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v20);
  LocalizedStringResource.init(stringInterpolation:)(v16);
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v21);
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v1 + *(int *)(v18 + 28)));
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
  LocalizedStringResource.init(stringInterpolation:)(v14);
  (*(void (**)(char *, _QWORD, uint64_t, _QWORD))(v8 + 56))(v7, 0, 1, v25[0]);
  v23 = type metadata accessor for DisplayRepresentation.Image(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v4, 1, 1, v23);
  return DisplayRepresentation.init(title:subtitle:image:)(v10, v7, v4);
}

uint64_t sub_100157348(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005D1108, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_10015739C(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  void *v43;
  id v44;
  void *v45;
  id v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  Swift::String v66;
  void *object;
  char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;

  v70 = a1;
  v3 = sub_100012E18(&qword_1005CEFD0);
  v4 = __chkstk_darwin(v3);
  v68 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v69 = (uint64_t)&v68 - v6;
  v7 = sub_100012E18(&qword_1005D1080);
  __chkstk_darwin(v7);
  v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for TableEntity(0);
  v23 = *(int *)(v71 + 24);
  sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v24 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for LocalizedStringResource.BundleDescription.main(_:), v10);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Parameter title for Find Tables intent", 38, 2);
  v25 = EntityProperty<>.init(title:)(v22);
  v72 = v23;
  *(_QWORD *)(a2 + v23) = v25;
  v26 = v70;
  v27 = objc_opt_self(ICAttachment);
  v28 = swift_dynamicCastObjCClass(v26, v27);
  if (!v28)
  {
    v73 = 0;
    v74 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease(v74);
    v73 = 0xD00000000000002ELL;
    v74 = 0x800000010047B4C0;
    v65 = sub_100012E18(&qword_1005D1238);
    v66._countAndFlagsBits = _typeName(_:qualified:)(v65, 0);
    object = v66._object;
    String.append(_:)(v66);
    swift_bridgeObjectRelease(object);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v73, v74, "MobileNotes/TableEntity.swift", 29, 2, 67, 0);
    __break(1u);
    return;
  }
  v29 = (void *)v28;
  v30 = enum case for ManagedEntityContextType.modern(_:);
  v31 = type metadata accessor for ManagedEntityContextType(0);
  v32 = *(_QWORD *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 104))(v9, v30, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v9, 0, 1, v31);
  v33 = v26;
  v34 = objc_msgSend(v29, "identifier");
  if (v34)
  {
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v38 = v37;

  }
  else
  {
    v36 = 0;
    v38 = 0xE000000000000000;
  }
  v39 = v71;
  TableID.init(contextType:managedIdentifier:)(v9, v36, v38);

  v40 = objc_msgSend(v33, "objectID");
  v41 = objc_msgSend(v40, "URIRepresentation");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v42 = objc_opt_self(ICAttachment);
  v43 = (void *)swift_dynamicCastObjCClass(v33, v42);
  if (!v43)
    goto LABEL_9;
  v44 = objc_msgSend(v43, "note");
  v45 = v44;
  if (!v44)
  {
LABEL_10:
    v48 = 0xE000000000000000;
    goto LABEL_11;
  }
  v46 = objc_msgSend(v44, "title");

  if (!v46)
  {
LABEL_9:
    v45 = 0;
    goto LABEL_10;
  }
  v45 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  v48 = v47;

LABEL_11:
  v49 = (_QWORD *)(a2 + *(int *)(v39 + 28));
  *v49 = v45;
  v49[1] = v48;
  v50 = objc_msgSend(v33, "title");
  if (v50)
  {
    v51 = v50;
    v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v54 = v53;

  }
  else
  {
    v55 = objc_msgSend(v33, "fileURL");
    if (v55)
    {
      v56 = v55;
      v57 = (uint64_t)v68;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v55);

      v58 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
    }
    else
    {
      v58 = type metadata accessor for URL(0);
      v57 = (uint64_t)v68;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v68, 1, 1, v58);
    }
    v59 = v69;
    sub_100157FAC(v57, v69);
    type metadata accessor for URL(0);
    v60 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v59, 1, v58) == 1)
    {
      sub_100012DDC(v59, &qword_1005CEFD0);
      v61 = objc_msgSend(v33, "identifier");
      if (v61)
      {
        v62 = v61;
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
        v54 = v63;

      }
      else
      {
        v52 = 0;
        v54 = 0xE000000000000000;
      }
    }
    else
    {
      v52 = URL.lastPathComponent.getter();
      v54 = v64;
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v58);
    }
  }
  v73 = v52;
  v74 = v54;
  EntityProperty.wrappedValue.setter(&v73);

}

void TableEntity.init<A>(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  id v37;
  void *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  _QWORD v55[3];

  v54 = a1;
  v3 = sub_100012E18(&qword_1005CEFD0);
  v4 = __chkstk_darwin(v3);
  v52 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v53 = (uint64_t)&v52 - v6;
  v7 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Locale(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizedStringResource(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for TableEntity(0);
  v21 = *(int *)(v20 + 24);
  sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v22 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for LocalizedStringResource.BundleDescription.main(_:), v7);
  v23 = v16;
  v24 = v21;
  v25 = a2;
  v26 = v54;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v13, v10, "Parameter title for Find Tables intent", 38, 2);
  *(_QWORD *)(v25 + v24) = EntityProperty<>.init(title:)(v19);
  static TableEntity.identifier<A>(for:)(v26);
  v27 = objc_msgSend(v26, "objectID");
  v28 = objc_msgSend(v27, "URIRepresentation");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v29 = objc_opt_self(ICAttachment);
  v30 = (void *)swift_dynamicCastObjCClass(v26, v29);
  if (!v30)
  {
LABEL_5:
    v32 = 0;
    goto LABEL_6;
  }
  v31 = objc_msgSend(v30, "note");
  v32 = v31;
  if (v31)
  {
    v33 = objc_msgSend(v31, "title");

    if (v33)
    {
      v32 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v35 = v34;

      goto LABEL_7;
    }
    goto LABEL_5;
  }
LABEL_6:
  v35 = 0xE000000000000000;
LABEL_7:
  v36 = (_QWORD *)(v25 + *(int *)(v20 + 28));
  *v36 = v32;
  v36[1] = v35;
  v37 = objc_msgSend(v26, "title");
  if (v37)
  {
    v38 = v37;
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
    v41 = v40;

  }
  else
  {
    v42 = objc_msgSend(v26, "fileURL");
    if (v42)
    {
      v43 = v42;
      v44 = (uint64_t)v52;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v42);

      v45 = type metadata accessor for URL(0);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
    }
    else
    {
      v45 = type metadata accessor for URL(0);
      v44 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v52, 1, 1, v45);
    }
    v46 = v53;
    sub_100157FAC(v44, v53);
    type metadata accessor for URL(0);
    v47 = *(_QWORD *)(v45 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v46, 1, v45) == 1)
    {
      sub_100012DDC(v46, &qword_1005CEFD0);
      v48 = objc_msgSend(v26, "identifier");
      if (v48)
      {
        v49 = v48;
        v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
        v41 = v50;

      }
      else
      {
        v39 = 0;
        v41 = 0xE000000000000000;
      }
    }
    else
    {
      v39 = URL.lastPathComponent.getter();
      v41 = v51;
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v45);
    }
  }
  v55[0] = v39;
  v55[1] = v41;
  EntityProperty.wrappedValue.setter(v55);

}

void static TableEntity.identifier<A>(for:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t ObjectType;
  Swift::String v18;
  void *object;
  unint64_t v20;
  unint64_t v21;

  v2 = sub_100012E18(&qword_1005D1080);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_opt_self(ICAttachment);
  v6 = swift_dynamicCastObjCClass(a1, v5);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = enum case for ManagedEntityContextType.modern(_:);
    v9 = type metadata accessor for ManagedEntityContextType(0);
    v10 = *(_QWORD *)(v9 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v4, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v4, 0, 1, v9);
    v11 = a1;
    v12 = objc_msgSend(v7, "identifier");
    if (v12)
    {
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

    }
    else
    {
      v14 = 0;
      v16 = 0xE000000000000000;
    }
    TableID.init(contextType:managedIdentifier:)(v4, v14, v16);

  }
  else
  {
    v20 = 0;
    v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease(v21);
    v20 = 0xD00000000000002ELL;
    v21 = 0x800000010047B4C0;
    ObjectType = swift_getObjectType(a1);
    v18._countAndFlagsBits = _typeName(_:qualified:)(ObjectType, 0);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v20, v21, "MobileNotes/TableEntity.swift", 29, 2, 67, 0);
    __break(1u);
  }
}

uint64_t sub_100157FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005CEFD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t TableEntity.init(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for TableEntity(0);
  v3[5] = v4;
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[8] = v6;
  v3[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource(0);
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001580DC, 0, 0);
}

uint64_t sub_1001580DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  _QWORD *v14;
  void *v16;
  void *v17;

  v1 = v0[11];
  v2 = v0[12];
  v4 = v0[9];
  v3 = v0[10];
  v5 = v0[7];
  v6 = v0[8];
  v7 = v0[2];
  v16 = (void *)v0[3];
  v17 = (void *)v0[4];
  v8 = *(int *)(v0[5] + 24);
  sub_100012E18((uint64_t *)&unk_1005CEEB0);
  v9 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v9);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v4, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v1, 0, 0, v3, v4, "Parameter title for Find Tables intent", 38, 2);
  v10 = EntityProperty<>.init(title:)(v2);
  v0[13] = v10;
  *(_QWORD *)(v7 + v8) = v10;
  v11 = dword_1005D1094;
  v12 = v16;
  v13 = v17;
  v14 = (_QWORD *)swift_task_alloc(v11);
  v0[14] = v14;
  *v14 = v0;
  v14[1] = sub_100158208;
  return TableEntity.init(for:in:includeContents:)(v0[6], v0[3], v0[4]);
}

uint64_t sub_100158208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10015830C;
  else
    v3 = sub_10015826C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10015826C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(void **)(v0 + 24);
  v8 = *(_QWORD *)(v0 + 16);

  swift_release(v2);
  sub_100158794(v6, v8);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10015830C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 48);
  v7 = *(void **)(v0 + 24);

  swift_release(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t TableEntity.init(for:in:includeContents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for TableEntity(0);
  v3[5] = v4;
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[8] = v6;
  v3[9] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for String.LocalizationValue(0);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource(0);
  v3[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100158484, 0, 0);
}

