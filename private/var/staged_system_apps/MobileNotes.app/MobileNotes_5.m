uint64_t sub_1003873CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 880);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 696);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 888) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_100387550;
  else
    v6 = sub_100387454;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100387454()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = FastSync.NoteContentMessage.recordBatchData.getter();
  v3 = v2;
  v0[112] = v1;
  v0[113] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_1005DB37C);
  v0[114] = v4;
  *v4 = v0;
  v4[1] = sub_1003874C4;
  return sub_10038F7A4(v1, v3);
}

uint64_t sub_1003874C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 912);
  v5 = *(_QWORD *)(*v2 + 904);
  v6 = *(_QWORD *)(*v2 + 896);
  *(_QWORD *)(v3 + 920) = a1;
  *(_QWORD *)(v3 + 928) = v1;
  swift_task_dealloc(v4);
  sub_10013DD30(v6, v5);
  if (v1)
    v7 = sub_100388B10;
  else
    v7 = sub_100387E94;
  return swift_task_switch(v7, 0, 0);
}

void sub_100387550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_meth_list **p_inst_meths;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v96 = v0 + 16;
  v1 = v0 + 112;
  v92 = v0 + 248;
  v82 = (_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 8))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 704));
  v101 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 888);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v99 = v0 + 112;
  v90 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error processing incoming fast sync message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 856);
  v13 = *(_QWORD *)(v0 + 424);

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v2);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v18 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
        v50 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 784);
        v52 = *(_QWORD *)(v0 + 776);
        v53 = *(_QWORD *)(v0 + 752);
        v54 = *(_QWORD *)(v0 + 744);
        v55 = *(_QWORD *)(v0 + 728);
        v56 = *(_QWORD *)(v0 + 720);
        v57 = *(_QWORD *)(v0 + 696);
        v58 = *(_QWORD *)(v0 + 688);
        v80 = *(_QWORD *)(v0 + 680);
        v81 = *(_QWORD *)(v0 + 672);
        v83 = *(_QWORD *)(v0 + 648);
        v84 = *(_QWORD *)(v0 + 640);
        v85 = *(_QWORD *)(v0 + 632);
        v86 = *(_QWORD *)(v0 + 624);
        v87 = *(_QWORD *)(v0 + 600);
        v88 = *(_QWORD *)(v0 + 576);
        v89 = *(_QWORD *)(v0 + 568);
        v91 = *(_QWORD *)(v0 + 560);
        v93 = *(_QWORD *)(v0 + 552);
        v95 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 520);
        v98 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 496);
        v102 = *(_QWORD *)(v0 + 472);
        v105 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v91);
        swift_task_dealloc(v93);
        swift_task_dealloc(v95);
        swift_task_dealloc(v97);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v102);
        swift_task_dealloc(v105);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v19 = *(_QWORD *)(v0 + 832);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v21 = *(_QWORD *)(v0 + 776);
      v103 = *(_QWORD *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 760);
      v23 = *(_QWORD *)(v0 + 752);
      v24 = v23 + *(int *)(v0 + 60);
      v25 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v92, v24, v22, v19);
      sub_100012CE8(v26, v96, &qword_1005DB360);
      v25(v92, 0);
      v20(v21, v23, v22);
      dispatch thunk of Collection.formIndex(after:)(v24, v22, v19);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v21, v22);
      v1 = v0 + 112;
      sub_10014BD1C(v96, v99, &qword_1005DB360);
      v94 = (__int128 *)(v0 + 160);
      sub_100012CE8(v99, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v2 = *(_QWORD *)v94;
        *v82 = *(_QWORD *)v94;
        v49 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v82, v49, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v27 = *(_QWORD *)(v0 + 728);
      v28 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v94, (uint64_t)v101);
      v29 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v27, v101, v29, v28, 0) & 1) != 0)
      {
        v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v59);
        v60 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v60;
        *v60 = v0;
        v60[1] = sub_1003873CC;
        v61 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v101, v29, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v63;
        *v63 = v0;
        v63[1] = sub_100389454;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v101, v29, *(_QWORD *)(v0 + 536), 0))
        break;
      v30 = sub_100012CE8(v99, v90, &qword_1005DB360);
      v31 = static Logger.realtimeCollaboration.getter(v30);
      v32 = static os_log_type_t.fault.getter(v31);
      v33 = v32;
      v34 = Logger.logObject.getter(v32);
      v35 = v33;
      v36 = os_log_type_enabled(v34, v33);
      v38 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 472);
      v39 = *(_QWORD *)(v0 + 456);
      if (v36)
      {
        v104 = *(_QWORD *)(v0 + 472);
        v40 = swift_slowAlloc(32, -1);
        v41 = swift_slowAlloc(64, -1);
        v106 = v41;
        *(_DWORD *)v40 = 136315650;
        v42 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v44 = v43;
        *(_QWORD *)(v40 + 4) = sub_1003A4190(v42, v43, &v106);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v40 + 12) = 2048;
        *(_QWORD *)(v40 + 14) = 228;
        *(_WORD *)(v40 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v45 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v45;
        v46._countAndFlagsBits = 0xD00000000000001DLL;
        v46._object = (void *)0x800000010048B7D0;
        String.append(_:)(v46);
        v47 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v90, v0 + 280, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v48 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v40 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v48, &v106);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed assertion at %s:%lu: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v104, v39);
      }
      else
      {

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v101);
    }
    v64 = *(_QWORD *)(v0 + 840);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 568);
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v69;
    v69(v66, v65, v67);
    v70 = objc_msgSend(*(id *)(v68 + v64), "fastSyncPaperKitEnablePCSEncryption");
    if ((v70 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v70);
      v71 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v71;
      *v71 = v0;
      v71[1] = sub_10038A9B4;
      v61 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 568);
      v74 = *(_QWORD *)(v0 + 560);
      v75 = *(_QWORD *)(v0 + 544);
      v76 = *(_QWORD *)(v0 + 536);
      v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      *(_QWORD *)(v0 + 976) = v77;
      v77(v73, v76);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v72, v76);
      GroupSessionMessenger.MessageContext.source.getter(v78);
      v79 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v79;
      *v79 = v0;
      v79[1] = sub_10038AA3C;
      v61 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v61, 3);
  }
}

void sub_100387E94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __objc2_meth_list **p_inst_meths;
  uint64_t *v7;
  id i;
  void *v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  __objc2_meth_list **v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, _QWORD);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_type_t v64;
  NSObject *v65;
  os_log_type_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  id v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  NSObject *v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142[2];

  v1 = *(_QWORD *)(v0 + 920);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v24 = *(_QWORD *)(v0 + 920);
    else
      v24 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 920));
    v2 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (v2)
    {
LABEL_3:
      v3 = v2 - 1;
      if (v2 < 1)
        goto LABEL_45;
      v4 = 0;
      v5 = v1 & 0xC000000000000001;
      v122 = *(_QWORD *)(v141 + 920) + 32;
      p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
      v7 = qword_1005DAFB0;
      if ((v1 & 0xC000000000000001) == 0)
        goto LABEL_6;
      while (1)
      {
        for (i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, *(_QWORD *)(v141 + 920));
              ;
              i = *(id *)(v122 + 8 * v4))
        {
          v9 = i;
          if (p_inst_meths[428] != (__objc2_meth_list *)-1)
            swift_once(&qword_1005CED60, sub_10037B8C0);
          sub_10012A0B0(*(_QWORD *)(v141 + 456), (uint64_t)v7);
          v10 = v9;
          v11 = Logger.logObject.getter(v10);
          v12 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v11, v12))
          {
            v130 = swift_slowAlloc(12, -1);
            v136 = swift_slowAlloc(32, -1);
            v142[0] = v136;
            *(_DWORD *)v130 = 136315138;
            v132 = v11;
            v13 = p_inst_meths;
            v14 = objc_msgSend(v10, "ic_loggingDescription");
            v15 = v4;
            v16 = v5;
            v17 = v3;
            v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
            v19 = v7;
            v21 = v20;

            p_inst_meths = v13;
            v22 = v18;
            v3 = v17;
            v5 = v16;
            v4 = v15;
            *(_QWORD *)(v130 + 4) = sub_1003A4190(v22, v21, v142);
            v23 = v21;
            v7 = v19;
            swift_bridgeObjectRelease(v23);

            _os_log_impl((void *)&_mh_execute_header, v132, v12, "Received CloudKit record: %s", (uint8_t *)v130, 0xCu);
            swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v136, -1, -1);
            swift_slowDealloc(v130, -1, -1);

            if (v3 == v15)
              goto LABEL_19;
          }
          else
          {

            if (v3 == v4)
              goto LABEL_19;
          }
          ++v4;
          if (v5)
            break;
LABEL_6:
          ;
        }
      }
    }
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 920));
    if (v2)
      goto LABEL_3;
  }
LABEL_19:
  v25 = *(_QWORD *)(v141 + 920);
  v137 = *(_QWORD *)(v141 + 720);
  v127 = *(_QWORD *)(v141 + 712);
  v133 = *(_QWORD *)(v141 + 704);
  v26 = *(_QWORD *)(v141 + 600);
  v27 = *(_QWORD *)(v141 + 592);
  v28 = *(_QWORD *)(v141 + 584);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)(v141 + 392) = v25;
  swift_bridgeObjectRetain(v25);
  v29 = sub_100012E18(&qword_1005CF798);
  AsyncStream.Continuation.yield(_:)(v141 + 392, v29);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v137, v133);
  v128 = v141 + 112;
  sub_100012DDC(v141 + 112, &qword_1005DB360);
  swift_bridgeObjectRelease(v25);
  v125 = (_QWORD *)(v141 + 208);
  sub_1000153C0((_QWORD *)(v141 + 208));
  v30 = *(_QWORD *)(*(_QWORD *)(v141 + 752) + *(int *)(v141 + 60));
  dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v141 + 760));
  if (v30 == *(_QWORD *)(v141 + 376))
  {
LABEL_20:
    sub_100012DDC(*(_QWORD *)(v141 + 752), &qword_1005DB348);
    v31 = *(_QWORD *)(v141 + 808);
    v32 = *(_QWORD *)(v141 + 784);
    v33 = *(_QWORD *)(v141 + 776);
    v34 = *(_QWORD *)(v141 + 752);
    v35 = *(_QWORD *)(v141 + 744);
    v36 = *(_QWORD *)(v141 + 728);
    v37 = *(_QWORD *)(v141 + 720);
    v38 = *(_QWORD *)(v141 + 696);
    v39 = *(_QWORD *)(v141 + 688);
    v107 = *(_QWORD *)(v141 + 680);
    v108 = *(_QWORD *)(v141 + 672);
    v109 = *(_QWORD *)(v141 + 648);
    v110 = *(_QWORD *)(v141 + 640);
    v111 = *(_QWORD *)(v141 + 632);
    v112 = *(_QWORD *)(v141 + 624);
    v113 = *(_QWORD *)(v141 + 600);
    v114 = *(_QWORD *)(v141 + 576);
    v116 = *(_QWORD *)(v141 + 568);
    v118 = *(_QWORD *)(v141 + 560);
    v120 = *(_QWORD *)(v141 + 552);
    v123 = *(_QWORD *)(v141 + 528);
    v126 = *(_QWORD *)(v141 + 520);
    v129 = *(_QWORD *)(v141 + 512);
    v131 = *(_QWORD *)(v141 + 496);
    v134 = *(_QWORD *)(v141 + 472);
    v138 = *(_QWORD *)(v141 + 448);
    swift_task_dealloc(*(_QWORD *)(v141 + 816));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v131);
    swift_task_dealloc(v134);
    swift_task_dealloc(v138);
    (*(void (**)(void))(v141 + 8))();
    return;
  }
  v121 = v141 + 248;
  v124 = v141 + 16;
  v119 = (__int128 *)(v141 + 160);
  v115 = (_QWORD *)(v141 + 352);
  v117 = v141 + 64;
  while (1)
  {
    v41 = *(_QWORD *)(v141 + 832);
    v42 = *(_QWORD *)(v141 + 776);
    v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(v141 + 824);
    v139 = *(_QWORD *)(v141 + 768);
    v43 = *(_QWORD *)(v141 + 760);
    v44 = *(_QWORD *)(v141 + 752);
    v45 = v44 + *(int *)(v141 + 60);
    v46 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v121, v45, v43, v41);
    sub_100012CE8(v47, v124, &qword_1005DB360);
    v46(v121, 0);
    v135(v42, v44, v43);
    dispatch thunk of Collection.formIndex(after:)(v45, v43, v41);
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v42, v43);
    sub_10014BD1C(v124, v128, &qword_1005DB360);
    sub_100012CE8(v128, (uint64_t)v119, &qword_1005DB360);
    if ((*(_BYTE *)(v141 + 200) & 1) != 0)
      break;
    v58 = *(_QWORD *)(v141 + 728);
    v59 = *(_QWORD *)(v141 + 704);
    sub_10013B100(v119, (uint64_t)v125);
    v60 = sub_100012E18(&qword_1005DB368);
    if ((swift_dynamicCast(v58, v125, v60, v59, 0) & 1) != 0)
    {
      v86 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v141 + 712) + 32))(*(_QWORD *)(v141 + 720), *(_QWORD *)(v141 + 728), *(_QWORD *)(v141 + 704));
      GroupSessionMessenger.MessageContext.source.getter(v86);
      v87 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v141 + 880) = v87;
      *v87 = v141;
      v87[1] = sub_1003873CC;
      v88 = *(_QWORD *)(v141 + 696);
LABEL_43:
      sub_10038EFCC(v88, 3);
      return;
    }
    if ((swift_dynamicCast(*(_QWORD *)(v141 + 648), v125, v60, *(_QWORD *)(v141 + 608), 0) & 1) != 0)
    {
      v89 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v141 + 616) + 32))(*(_QWORD *)(v141 + 640), *(_QWORD *)(v141 + 648), *(_QWORD *)(v141 + 608));
      GroupSessionMessenger.MessageContext.source.getter(v89);
      v90 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v141 + 936) = v90;
      *v90 = v141;
      v90[1] = sub_100389454;
      sub_10038EFCC(*(_QWORD *)(v141 + 688), 2);
      return;
    }
    if (swift_dynamicCast(*(_QWORD *)(v141 + 576), v125, v60, *(_QWORD *)(v141 + 536), 0))
    {
      v91 = *(_QWORD *)(v141 + 840);
      v92 = *(_QWORD *)(v141 + 576);
      v93 = *(_QWORD *)(v141 + 568);
      v94 = *(_QWORD *)(v141 + 536);
      v95 = *(_QWORD *)(v141 + 424);
      v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v141 + 544) + 16);
      *(_QWORD *)(v141 + 952) = v96;
      v96(v93, v92, v94);
      v97 = objc_msgSend(*(id *)(v95 + v91), "fastSyncPaperKitEnablePCSEncryption");
      if ((v97 & 1) != 0)
      {
        GroupSessionMessenger.MessageContext.source.getter(v97);
        v98 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v141 + 960) = v98;
        *v98 = v141;
        v98[1] = sub_10038A9B4;
        v88 = *(_QWORD *)(v141 + 680);
      }
      else
      {
        v99 = *(_QWORD *)(v141 + 576);
        v100 = *(_QWORD *)(v141 + 568);
        v101 = *(_QWORD *)(v141 + 560);
        v102 = *(_QWORD *)(v141 + 544);
        v103 = *(_QWORD *)(v141 + 536);
        v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
        *(_QWORD *)(v141 + 976) = v104;
        v104(v100, v103);
        v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v101, v99, v103);
        GroupSessionMessenger.MessageContext.source.getter(v105);
        v106 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v141 + 984) = v106;
        *v106 = v141;
        v106[1] = sub_10038AA3C;
        v88 = *(_QWORD *)(v141 + 672);
      }
      goto LABEL_43;
    }
    v61 = sub_100012CE8(v128, v117, &qword_1005DB360);
    v62 = static Logger.realtimeCollaboration.getter(v61);
    v63 = static os_log_type_t.fault.getter(v62);
    v64 = v63;
    v65 = Logger.logObject.getter(v63);
    v66 = v64;
    v67 = os_log_type_enabled(v65, v64);
    v69 = *(_QWORD *)(v141 + 464);
    v68 = *(_QWORD *)(v141 + 472);
    v70 = *(_QWORD *)(v141 + 456);
    if (v67)
    {
      v71 = swift_slowAlloc(32, -1);
      v140 = v68;
      v72 = swift_slowAlloc(64, -1);
      v142[0] = v72;
      *(_DWORD *)v71 = 136315650;
      v73 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v75 = v74;
      *(_QWORD *)(v71 + 4) = sub_1003A4190(v73, v74, v142);
      swift_bridgeObjectRelease(v75);
      *(_WORD *)(v71 + 12) = 2048;
      *(_QWORD *)(v71 + 14) = 228;
      *(_WORD *)(v71 + 22) = 2080;
      *(_QWORD *)(v141 + 328) = 0;
      *(_QWORD *)(v141 + 336) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v76 = *(_QWORD *)(v141 + 336);
      *(_QWORD *)(v141 + 280) = *(_QWORD *)(v141 + 328);
      *(_QWORD *)(v141 + 288) = v76;
      v77._countAndFlagsBits = 0xD00000000000001DLL;
      v77._object = (void *)0x800000010048B7D0;
      String.append(_:)(v77);
      v78 = sub_100012E18(&qword_1005DB360);
      _print_unlocked<A, B>(_:_:)(v117, v141 + 280, v78, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v79 = *(_QWORD *)(v141 + 288);
      *(_QWORD *)(v71 + 24) = sub_1003A4190(*(_QWORD *)(v141 + 280), v79, v142);
      swift_bridgeObjectRelease(v79);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed assertion at %s:%lu: %s", (uint8_t *)v71, 0x20u);
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v71, -1, -1);

      sub_100012DDC(v117, &qword_1005DB360);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v140, v70);
    }
    else
    {

      sub_100012DDC(v117, &qword_1005DB360);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    }
    sub_100012DDC(v128, &qword_1005DB360);
    sub_1000153C0(v125);
LABEL_24:
    v40 = *(_QWORD *)(*(_QWORD *)(v141 + 752) + *(int *)(v141 + 60));
    dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v141 + 760));
    if (v40 == *(_QWORD *)(v141 + 376))
      goto LABEL_20;
  }
  v48 = *(_QWORD *)v119;
  *v115 = *(_QWORD *)v119;
  v49 = sub_100012E18(&qword_1005D7A90);
  swift_willThrowTypedImpl(v115, v49, &protocol self-conformance witness table for Error);
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v141 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v48);
  v50 = swift_errorRetain(v48);
  v51 = Logger.logObject.getter(v50);
  v53 = static os_log_type_t.error.getter(v51, v52);
  if (os_log_type_enabled(v51, v53))
  {
    v54 = swift_slowAlloc(12, -1);
    v55 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v54 = 138412290;
    swift_errorRetain(v48);
    v56 = _swift_stdlib_bridgeErrorToNSError(v48);
    *(_QWORD *)(v54 + 4) = v56;
    *v55 = v56;
    swift_errorRelease(v48);
    swift_errorRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v51, v53, "Error processing incoming fast sync message: %@", (uint8_t *)v54, 0xCu);
    v57 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v55, 1, v57);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    swift_errorRelease(v48);
    swift_errorRelease(v48);
  }
  v80 = *(_QWORD *)(v141 + 856);
  v81 = *(_QWORD *)(v141 + 424);

  v82 = *(_QWORD *)(v81 + v80);
  os_unfair_lock_lock((os_unfair_lock_t)(v82 + 24));
  v83 = *(_QWORD *)(v82 + 16);
  v84 = __OFADD__(v83, 1);
  v85 = v83 + 1;
  if (!v84)
  {
    *(_QWORD *)(v82 + 16) = v85;
    os_unfair_lock_unlock((os_unfair_lock_t)(v82 + 24));
    swift_errorRelease(v48);
    sub_100012DDC(v128, &qword_1005DB360);
    goto LABEL_24;
  }
  __break(1u);
LABEL_45:
  __break(1u);
}

void sub_100388B10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_meth_list **p_inst_meths;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v96 = v0 + 16;
  v1 = v0 + 112;
  v92 = v0 + 248;
  v82 = (_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 8))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 704));
  v101 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 928);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v99 = v0 + 112;
  v90 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error processing incoming fast sync message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 856);
  v13 = *(_QWORD *)(v0 + 424);

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v2);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v18 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
        v50 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 784);
        v52 = *(_QWORD *)(v0 + 776);
        v53 = *(_QWORD *)(v0 + 752);
        v54 = *(_QWORD *)(v0 + 744);
        v55 = *(_QWORD *)(v0 + 728);
        v56 = *(_QWORD *)(v0 + 720);
        v57 = *(_QWORD *)(v0 + 696);
        v58 = *(_QWORD *)(v0 + 688);
        v80 = *(_QWORD *)(v0 + 680);
        v81 = *(_QWORD *)(v0 + 672);
        v83 = *(_QWORD *)(v0 + 648);
        v84 = *(_QWORD *)(v0 + 640);
        v85 = *(_QWORD *)(v0 + 632);
        v86 = *(_QWORD *)(v0 + 624);
        v87 = *(_QWORD *)(v0 + 600);
        v88 = *(_QWORD *)(v0 + 576);
        v89 = *(_QWORD *)(v0 + 568);
        v91 = *(_QWORD *)(v0 + 560);
        v93 = *(_QWORD *)(v0 + 552);
        v95 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 520);
        v98 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 496);
        v102 = *(_QWORD *)(v0 + 472);
        v105 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v91);
        swift_task_dealloc(v93);
        swift_task_dealloc(v95);
        swift_task_dealloc(v97);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v102);
        swift_task_dealloc(v105);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v19 = *(_QWORD *)(v0 + 832);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v21 = *(_QWORD *)(v0 + 776);
      v103 = *(_QWORD *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 760);
      v23 = *(_QWORD *)(v0 + 752);
      v24 = v23 + *(int *)(v0 + 60);
      v25 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v92, v24, v22, v19);
      sub_100012CE8(v26, v96, &qword_1005DB360);
      v25(v92, 0);
      v20(v21, v23, v22);
      dispatch thunk of Collection.formIndex(after:)(v24, v22, v19);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v21, v22);
      v1 = v0 + 112;
      sub_10014BD1C(v96, v99, &qword_1005DB360);
      v94 = (__int128 *)(v0 + 160);
      sub_100012CE8(v99, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v2 = *(_QWORD *)v94;
        *v82 = *(_QWORD *)v94;
        v49 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v82, v49, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v27 = *(_QWORD *)(v0 + 728);
      v28 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v94, (uint64_t)v101);
      v29 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v27, v101, v29, v28, 0) & 1) != 0)
      {
        v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v59);
        v60 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v60;
        *v60 = v0;
        v60[1] = sub_1003873CC;
        v61 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v101, v29, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v63;
        *v63 = v0;
        v63[1] = sub_100389454;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v101, v29, *(_QWORD *)(v0 + 536), 0))
        break;
      v30 = sub_100012CE8(v99, v90, &qword_1005DB360);
      v31 = static Logger.realtimeCollaboration.getter(v30);
      v32 = static os_log_type_t.fault.getter(v31);
      v33 = v32;
      v34 = Logger.logObject.getter(v32);
      v35 = v33;
      v36 = os_log_type_enabled(v34, v33);
      v38 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 472);
      v39 = *(_QWORD *)(v0 + 456);
      if (v36)
      {
        v104 = *(_QWORD *)(v0 + 472);
        v40 = swift_slowAlloc(32, -1);
        v41 = swift_slowAlloc(64, -1);
        v106 = v41;
        *(_DWORD *)v40 = 136315650;
        v42 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v44 = v43;
        *(_QWORD *)(v40 + 4) = sub_1003A4190(v42, v43, &v106);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v40 + 12) = 2048;
        *(_QWORD *)(v40 + 14) = 228;
        *(_WORD *)(v40 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v45 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v45;
        v46._countAndFlagsBits = 0xD00000000000001DLL;
        v46._object = (void *)0x800000010048B7D0;
        String.append(_:)(v46);
        v47 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v90, v0 + 280, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v48 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v40 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v48, &v106);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed assertion at %s:%lu: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v104, v39);
      }
      else
      {

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v101);
    }
    v64 = *(_QWORD *)(v0 + 840);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 568);
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v69;
    v69(v66, v65, v67);
    v70 = objc_msgSend(*(id *)(v68 + v64), "fastSyncPaperKitEnablePCSEncryption");
    if ((v70 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v70);
      v71 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v71;
      *v71 = v0;
      v71[1] = sub_10038A9B4;
      v61 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 568);
      v74 = *(_QWORD *)(v0 + 560);
      v75 = *(_QWORD *)(v0 + 544);
      v76 = *(_QWORD *)(v0 + 536);
      v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      *(_QWORD *)(v0 + 976) = v77;
      v77(v73, v76);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v72, v76);
      GroupSessionMessenger.MessageContext.source.getter(v78);
      v79 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v79;
      *v79 = v0;
      v79[1] = sub_10038AA3C;
      v61 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v61, 3);
  }
}

uint64_t sub_100389454()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 936);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 688);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 944) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_10038A070;
  else
    v6 = sub_1003894DC;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1003894DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_type_t v65;
  NSObject *v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  Swift::String v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, uint64_t, uint64_t);
  id v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t);
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  __int128 *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;

  v1 = v0 + 112;
  v125 = (_QWORD *)(v0 + 208);
  if (qword_1005CED68 != -1)
LABEL_33:
    swift_once(&qword_1005CED68, sub_10037B908);
  v2 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = sub_10012A0B0(*(_QWORD *)(v0 + 504), (uint64_t)qword_1005DAFC8);
  sub_100012CE8(v5, v2, &qword_1005D6E60);
  v127 = v1;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v2, 1, v4) == 1)
  {
    v6 = *(_QWORD *)(v0 + 616);
    sub_100012DDC(*(_QWORD *)(v0 + 528), &qword_1005D6E60);
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  }
  else
  {
    v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 616) + 16);
    v8 = v7(*(_QWORD *)(v0 + 632), *(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 608));
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.debug.getter();
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 632);
    v13 = *(_QWORD *)(v0 + 616);
    v14 = *(_QWORD *)(v0 + 608);
    if (v11)
    {
      v15 = swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v133 = v16;
      *(_DWORD *)v15 = 136315138;
      v17 = sub_100019C6C(&qword_1005D6E40, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.SelectionMessage, (uint64_t)&protocol conformance descriptor for FastSync.SelectionMessage);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
      v20 = v19;
      *(_QWORD *)(v15 + 4) = sub_1003A4190(v18, v19, &v133);
      v21 = swift_bridgeObjectRelease(v20);
      (*(void (**)(uint64_t, uint64_t, __n128))(v13 + 8))(v12, v14, v21);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Received selection message: %s", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    }
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 8))(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 456));
  }
  v22 = *(_QWORD *)(v0 + 640);
  v23 = *(_QWORD *)(v0 + 624);
  v24 = *(_QWORD *)(v0 + 616);
  v25 = *(_QWORD *)(v0 + 608);
  v27 = *(_QWORD *)(v0 + 488);
  v26 = *(_QWORD *)(v0 + 496);
  v28 = *(_QWORD *)(v0 + 480);
  v7(v23, v22, v25);
  v29 = sub_100012E18(&qword_1005CF780);
  AsyncStream.Continuation.yield(_:)(v23, v29);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v25);
  sub_100012DDC(v127, &qword_1005DB360);
  sub_1000153C0(v125);
  v30 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
  dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
  if (v30 != *(_QWORD *)(v0 + 376))
  {
    v121 = v0 + 248;
    v123 = v0 + 16;
    v117 = (_QWORD *)(v0 + 352);
    v119 = (__int128 *)(v0 + 160);
    v115 = v0 + 64;
    do
    {
      v42 = *(_QWORD *)(v0 + 832);
      v43 = *(_QWORD *)(v0 + 776);
      v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v132 = *(_QWORD *)(v0 + 768);
      v44 = *(_QWORD *)(v0 + 760);
      v45 = *(_QWORD *)(v0 + 752);
      v46 = v45 + *(int *)(v0 + 60);
      v47 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v121, v46, v44, v42);
      v1 = v0 + 16;
      sub_100012CE8(v48, v123, &qword_1005DB360);
      v47(v121, 0);
      v130(v43, v45, v44);
      dispatch thunk of Collection.formIndex(after:)(v46, v44, v42);
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v43, v44);
      sub_10014BD1C(v123, v127, &qword_1005DB360);
      sub_100012CE8(v127, (uint64_t)v119, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v49 = *(_QWORD *)v119;
        *v117 = *(_QWORD *)v119;
        v50 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v117, v50, &protocol self-conformance witness table for Error);
        if (qword_1005CED60 != -1)
          swift_once(&qword_1005CED60, sub_10037B8C0);
        sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
        swift_errorRetain(v49);
        v51 = swift_errorRetain(v49);
        v52 = Logger.logObject.getter(v51);
        v54 = static os_log_type_t.error.getter(v52, v53);
        if (os_log_type_enabled(v52, v54))
        {
          v55 = swift_slowAlloc(12, -1);
          v56 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v55 = 138412290;
          swift_errorRetain(v49);
          v57 = _swift_stdlib_bridgeErrorToNSError(v49);
          *(_QWORD *)(v55 + 4) = v57;
          *v56 = v57;
          swift_errorRelease(v49);
          swift_errorRelease(v49);
          _os_log_impl((void *)&_mh_execute_header, v52, v54, "Error processing incoming fast sync message: %@", (uint8_t *)v55, 0xCu);
          v58 = sub_100012E18(&qword_1005D3A30);
          swift_arrayDestroy(v56, 1, v58);
          swift_slowDealloc(v56, -1, -1);
          swift_slowDealloc(v55, -1, -1);
        }
        else
        {
          swift_errorRelease(v49);
          swift_errorRelease(v49);
        }
        v80 = *(_QWORD *)(v0 + 856);
        v81 = *(_QWORD *)(v0 + 424);

        v82 = *(_QWORD *)(v81 + v80);
        os_unfair_lock_lock((os_unfair_lock_t)(v82 + 24));
        v83 = *(_QWORD *)(v82 + 16);
        v84 = __OFADD__(v83, 1);
        v85 = v83 + 1;
        if (v84)
        {
          __break(1u);
          goto LABEL_33;
        }
        *(_QWORD *)(v82 + 16) = v85;
        os_unfair_lock_unlock((os_unfair_lock_t)(v82 + 24));
        swift_errorRelease(v49);
        sub_100012DDC(v127, &qword_1005DB360);
      }
      else
      {
        v59 = *(_QWORD *)(v0 + 728);
        v60 = *(_QWORD *)(v0 + 704);
        sub_10013B100(v119, (uint64_t)v125);
        v61 = sub_100012E18(&qword_1005DB368);
        if ((swift_dynamicCast(v59, v125, v61, v60, 0) & 1) != 0)
        {
          v86 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
          GroupSessionMessenger.MessageContext.source.getter(v86);
          v87 = (_QWORD *)swift_task_alloc(dword_1005DB374);
          *(_QWORD *)(v0 + 880) = v87;
          *v87 = v0;
          v87[1] = sub_1003873CC;
          v88 = *(_QWORD *)(v0 + 696);
          return sub_10038EFCC(v88, 3);
        }
        if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v125, v61, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
        {
          v89 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
          GroupSessionMessenger.MessageContext.source.getter(v89);
          v90 = (_QWORD *)swift_task_alloc(dword_1005DB374);
          *(_QWORD *)(v0 + 936) = v90;
          *v90 = v0;
          v90[1] = sub_100389454;
          return sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        }
        if ((swift_dynamicCast(*(_QWORD *)(v0 + 576), v125, v61, *(_QWORD *)(v0 + 536), 0) & 1) != 0)
        {
          v91 = *(_QWORD *)(v0 + 840);
          v92 = *(_QWORD *)(v0 + 576);
          v93 = *(_QWORD *)(v0 + 568);
          v94 = *(_QWORD *)(v0 + 536);
          v95 = *(_QWORD *)(v0 + 424);
          v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
          *(_QWORD *)(v0 + 952) = v96;
          v96(v93, v92, v94);
          v97 = objc_msgSend(*(id *)(v95 + v91), "fastSyncPaperKitEnablePCSEncryption");
          if ((v97 & 1) != 0)
          {
            GroupSessionMessenger.MessageContext.source.getter(v97);
            v98 = (_QWORD *)swift_task_alloc(dword_1005DB374);
            *(_QWORD *)(v0 + 960) = v98;
            *v98 = v0;
            v98[1] = sub_10038A9B4;
            v88 = *(_QWORD *)(v0 + 680);
          }
          else
          {
            v99 = *(_QWORD *)(v0 + 576);
            v100 = *(_QWORD *)(v0 + 568);
            v101 = *(_QWORD *)(v0 + 560);
            v102 = *(_QWORD *)(v0 + 544);
            v103 = *(_QWORD *)(v0 + 536);
            v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
            *(_QWORD *)(v0 + 976) = v104;
            v104(v100, v103);
            v105 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v102 + 32))(v101, v99, v103);
            GroupSessionMessenger.MessageContext.source.getter(v105);
            v106 = (_QWORD *)swift_task_alloc(dword_1005DB374);
            *(_QWORD *)(v0 + 984) = v106;
            *v106 = v0;
            v106[1] = sub_10038AA3C;
            v88 = *(_QWORD *)(v0 + 672);
          }
          return sub_10038EFCC(v88, 3);
        }
        v62 = sub_100012CE8(v127, v115, &qword_1005DB360);
        v63 = static Logger.realtimeCollaboration.getter(v62);
        v64 = static os_log_type_t.fault.getter(v63);
        v65 = v64;
        v66 = Logger.logObject.getter(v64);
        v67 = os_log_type_enabled(v66, v65);
        v68 = *(_QWORD *)(v0 + 464);
        v69 = *(_QWORD *)(v0 + 472);
        v70 = *(_QWORD *)(v0 + 456);
        if (v67)
        {
          v71 = swift_slowAlloc(32, -1);
          v72 = swift_slowAlloc(64, -1);
          v133 = v72;
          *(_DWORD *)v71 = 136315650;
          v73 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
          v75 = v74;
          *(_QWORD *)(v71 + 4) = sub_1003A4190(v73, v74, &v133);
          swift_bridgeObjectRelease(v75);
          *(_WORD *)(v71 + 12) = 2048;
          *(_QWORD *)(v71 + 14) = 228;
          *(_WORD *)(v71 + 22) = 2080;
          *(_QWORD *)(v0 + 328) = 0;
          *(_QWORD *)(v0 + 336) = 0xE000000000000000;
          _StringGuts.grow(_:)(31);
          v76 = *(_QWORD *)(v0 + 336);
          *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
          *(_QWORD *)(v0 + 288) = v76;
          v77._countAndFlagsBits = 0xD00000000000001DLL;
          v77._object = (void *)0x800000010048B7D0;
          String.append(_:)(v77);
          v78 = sub_100012E18(&qword_1005DB360);
          _print_unlocked<A, B>(_:_:)(v115, v0 + 280, v78, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
          v79 = *(_QWORD *)(v0 + 288);
          *(_QWORD *)(v71 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v79, &v133);
          swift_bridgeObjectRelease(v79);
          _os_log_impl((void *)&_mh_execute_header, v66, v65, "Failed assertion at %s:%lu: %s", (uint8_t *)v71, 0x20u);
          swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v72, -1, -1);
          swift_slowDealloc(v71, -1, -1);
        }

        sub_100012DDC(v115, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v70);
        sub_100012DDC(v127, &qword_1005DB360);
        sub_1000153C0(v125);
      }
      v41 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
    }
    while (v41 != *(_QWORD *)(v0 + 376));
  }
  sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
  v31 = *(_QWORD *)(v0 + 808);
  v32 = *(_QWORD *)(v0 + 784);
  v33 = *(_QWORD *)(v0 + 776);
  v34 = *(_QWORD *)(v0 + 752);
  v35 = *(_QWORD *)(v0 + 744);
  v36 = *(_QWORD *)(v0 + 728);
  v37 = *(_QWORD *)(v0 + 720);
  v38 = *(_QWORD *)(v0 + 696);
  v39 = *(_QWORD *)(v0 + 688);
  v107 = *(_QWORD *)(v0 + 680);
  v108 = *(_QWORD *)(v0 + 672);
  v109 = *(_QWORD *)(v0 + 648);
  v110 = *(_QWORD *)(v0 + 640);
  v111 = *(_QWORD *)(v0 + 632);
  v112 = *(_QWORD *)(v0 + 624);
  v113 = *(_QWORD *)(v0 + 600);
  v114 = *(_QWORD *)(v0 + 576);
  v116 = *(_QWORD *)(v0 + 568);
  v118 = *(_QWORD *)(v0 + 560);
  v120 = *(_QWORD *)(v0 + 552);
  v122 = *(_QWORD *)(v0 + 528);
  v124 = *(_QWORD *)(v0 + 520);
  v126 = *(_QWORD *)(v0 + 512);
  v128 = *(_QWORD *)(v0 + 496);
  v129 = *(_QWORD *)(v0 + 472);
  v131 = *(_QWORD *)(v0 + 448);
  swift_task_dealloc(*(_QWORD *)(v0 + 816));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  swift_task_dealloc(v128);
  swift_task_dealloc(v129);
  swift_task_dealloc(v131);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10038A070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_meth_list **p_inst_meths;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v96 = v0 + 16;
  v1 = v0 + 112;
  v92 = v0 + 248;
  v82 = (_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 8))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 608));
  v101 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 944);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v99 = v0 + 112;
  v90 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error processing incoming fast sync message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 856);
  v13 = *(_QWORD *)(v0 + 424);

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v2);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v18 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
        v50 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 784);
        v52 = *(_QWORD *)(v0 + 776);
        v53 = *(_QWORD *)(v0 + 752);
        v54 = *(_QWORD *)(v0 + 744);
        v55 = *(_QWORD *)(v0 + 728);
        v56 = *(_QWORD *)(v0 + 720);
        v57 = *(_QWORD *)(v0 + 696);
        v58 = *(_QWORD *)(v0 + 688);
        v80 = *(_QWORD *)(v0 + 680);
        v81 = *(_QWORD *)(v0 + 672);
        v83 = *(_QWORD *)(v0 + 648);
        v84 = *(_QWORD *)(v0 + 640);
        v85 = *(_QWORD *)(v0 + 632);
        v86 = *(_QWORD *)(v0 + 624);
        v87 = *(_QWORD *)(v0 + 600);
        v88 = *(_QWORD *)(v0 + 576);
        v89 = *(_QWORD *)(v0 + 568);
        v91 = *(_QWORD *)(v0 + 560);
        v93 = *(_QWORD *)(v0 + 552);
        v95 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 520);
        v98 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 496);
        v102 = *(_QWORD *)(v0 + 472);
        v105 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v91);
        swift_task_dealloc(v93);
        swift_task_dealloc(v95);
        swift_task_dealloc(v97);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v102);
        swift_task_dealloc(v105);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v19 = *(_QWORD *)(v0 + 832);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v21 = *(_QWORD *)(v0 + 776);
      v103 = *(_QWORD *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 760);
      v23 = *(_QWORD *)(v0 + 752);
      v24 = v23 + *(int *)(v0 + 60);
      v25 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v92, v24, v22, v19);
      sub_100012CE8(v26, v96, &qword_1005DB360);
      v25(v92, 0);
      v20(v21, v23, v22);
      dispatch thunk of Collection.formIndex(after:)(v24, v22, v19);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v21, v22);
      v1 = v0 + 112;
      sub_10014BD1C(v96, v99, &qword_1005DB360);
      v94 = (__int128 *)(v0 + 160);
      sub_100012CE8(v99, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v2 = *(_QWORD *)v94;
        *v82 = *(_QWORD *)v94;
        v49 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v82, v49, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v27 = *(_QWORD *)(v0 + 728);
      v28 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v94, (uint64_t)v101);
      v29 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v27, v101, v29, v28, 0) & 1) != 0)
      {
        v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v59);
        v60 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v60;
        *v60 = v0;
        v60[1] = sub_1003873CC;
        v61 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v101, v29, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v63;
        *v63 = v0;
        v63[1] = sub_100389454;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v101, v29, *(_QWORD *)(v0 + 536), 0))
        break;
      v30 = sub_100012CE8(v99, v90, &qword_1005DB360);
      v31 = static Logger.realtimeCollaboration.getter(v30);
      v32 = static os_log_type_t.fault.getter(v31);
      v33 = v32;
      v34 = Logger.logObject.getter(v32);
      v35 = v33;
      v36 = os_log_type_enabled(v34, v33);
      v38 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 472);
      v39 = *(_QWORD *)(v0 + 456);
      if (v36)
      {
        v104 = *(_QWORD *)(v0 + 472);
        v40 = swift_slowAlloc(32, -1);
        v41 = swift_slowAlloc(64, -1);
        v106 = v41;
        *(_DWORD *)v40 = 136315650;
        v42 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v44 = v43;
        *(_QWORD *)(v40 + 4) = sub_1003A4190(v42, v43, &v106);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v40 + 12) = 2048;
        *(_QWORD *)(v40 + 14) = 228;
        *(_WORD *)(v40 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v45 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v45;
        v46._countAndFlagsBits = 0xD00000000000001DLL;
        v46._object = (void *)0x800000010048B7D0;
        String.append(_:)(v46);
        v47 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v90, v0 + 280, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v48 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v40 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v48, &v106);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed assertion at %s:%lu: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v104, v39);
      }
      else
      {

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v101);
    }
    v64 = *(_QWORD *)(v0 + 840);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 568);
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v69;
    v69(v66, v65, v67);
    v70 = objc_msgSend(*(id *)(v68 + v64), "fastSyncPaperKitEnablePCSEncryption");
    if ((v70 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v70);
      v71 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v71;
      *v71 = v0;
      v71[1] = sub_10038A9B4;
      v61 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 568);
      v74 = *(_QWORD *)(v0 + 560);
      v75 = *(_QWORD *)(v0 + 544);
      v76 = *(_QWORD *)(v0 + 536);
      v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      *(_QWORD *)(v0 + 976) = v77;
      v77(v73, v76);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v72, v76);
      GroupSessionMessenger.MessageContext.source.getter(v78);
      v79 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v79;
      *v79 = v0;
      v79[1] = sub_10038AA3C;
      v61 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v61, 3);
  }
}

uint64_t sub_10038A9B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 960);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 680);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 968) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_10038ABC0;
  else
    v6 = sub_10038AAC4;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10038AA3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 984);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 672);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 664);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 656);
  *(_QWORD *)(*(_QWORD *)v1 + 992) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    v6 = sub_10038D9D4;
  else
    v6 = sub_10038CCCC;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10038AAC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = FastSync.PaperKitMessage.data.getter(a1);
  v4 = v3;
  v1[125] = v2;
  v1[126] = v3;
  v5 = (_QWORD *)swift_task_alloc(dword_1005DB37C);
  v1[127] = v5;
  *v5 = v1;
  v5[1] = sub_10038AB34;
  return sub_10038F7A4(v2, v4);
}

uint64_t sub_10038AB34(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1016);
  v5 = *(_QWORD *)(*v2 + 1008);
  v6 = *(_QWORD *)(*v2 + 1000);
  *(_QWORD *)(v3 + 1024) = a1;
  *(_QWORD *)(v3 + 1032) = v1;
  swift_task_dealloc(v4);
  sub_10013DD30(v6, v5);
  if (v1)
    v7 = sub_10038C374;
  else
    v7 = sub_10038B518;
  return swift_task_switch(v7, 0, 0);
}

void sub_10038ABC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  __objc2_meth_list **p_inst_meths;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v99 = v0 + 16;
  v1 = v0 + 112;
  v95 = v0 + 248;
  v85 = (_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 8);
  v4(*(_QWORD *)(v0 + 568), v3);
  v4(v2, v3);
  v104 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v5 = *(_QWORD *)(v0 + 968);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v102 = v0 + 112;
  v93 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.error.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v5);
    v13 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v11 + 4) = v13;
    *v12 = v13;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Error processing incoming fast sync message: %@", (uint8_t *)v11, 0xCu);
    v14 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }
  v15 = *(_QWORD *)(v0 + 856);
  v16 = *(_QWORD *)(v0 + 424);

  v17 = *(_QWORD *)(v16 + v15);
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v17 + 16) = v20;
    os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));
    swift_errorRelease(v5);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v21 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
        v53 = *(_QWORD *)(v0 + 808);
        v54 = *(_QWORD *)(v0 + 784);
        v55 = *(_QWORD *)(v0 + 776);
        v56 = *(_QWORD *)(v0 + 752);
        v57 = *(_QWORD *)(v0 + 744);
        v58 = *(_QWORD *)(v0 + 728);
        v59 = *(_QWORD *)(v0 + 720);
        v60 = *(_QWORD *)(v0 + 696);
        v61 = *(_QWORD *)(v0 + 688);
        v83 = *(_QWORD *)(v0 + 680);
        v84 = *(_QWORD *)(v0 + 672);
        v86 = *(_QWORD *)(v0 + 648);
        v87 = *(_QWORD *)(v0 + 640);
        v88 = *(_QWORD *)(v0 + 632);
        v89 = *(_QWORD *)(v0 + 624);
        v90 = *(_QWORD *)(v0 + 600);
        v91 = *(_QWORD *)(v0 + 576);
        v92 = *(_QWORD *)(v0 + 568);
        v94 = *(_QWORD *)(v0 + 560);
        v96 = *(_QWORD *)(v0 + 552);
        v98 = *(_QWORD *)(v0 + 528);
        v100 = *(_QWORD *)(v0 + 520);
        v101 = *(_QWORD *)(v0 + 512);
        v103 = *(_QWORD *)(v0 + 496);
        v105 = *(_QWORD *)(v0 + 472);
        v108 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v59);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v90);
        swift_task_dealloc(v91);
        swift_task_dealloc(v92);
        swift_task_dealloc(v94);
        swift_task_dealloc(v96);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v101);
        swift_task_dealloc(v103);
        swift_task_dealloc(v105);
        swift_task_dealloc(v108);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v22 = *(_QWORD *)(v0 + 832);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v24 = *(_QWORD *)(v0 + 776);
      v106 = *(_QWORD *)(v0 + 768);
      v25 = *(_QWORD *)(v0 + 760);
      v26 = *(_QWORD *)(v0 + 752);
      v27 = v26 + *(int *)(v0 + 60);
      v28 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v95, v27, v25, v22);
      sub_100012CE8(v29, v99, &qword_1005DB360);
      v28(v95, 0);
      v23(v24, v26, v25);
      dispatch thunk of Collection.formIndex(after:)(v27, v25, v22);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v24, v25);
      v1 = v0 + 112;
      sub_10014BD1C(v99, v102, &qword_1005DB360);
      v97 = (__int128 *)(v0 + 160);
      sub_100012CE8(v102, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v5 = *(_QWORD *)v97;
        *v85 = *(_QWORD *)v97;
        v52 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v85, v52, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v30 = *(_QWORD *)(v0 + 728);
      v31 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v97, (uint64_t)v104);
      v32 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v30, v104, v32, v31, 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v63;
        *v63 = v0;
        v63[1] = sub_1003873CC;
        v64 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v104, v32, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v65 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v65);
        v66 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v66;
        *v66 = v0;
        v66[1] = sub_100389454;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v104, v32, *(_QWORD *)(v0 + 536), 0))
        break;
      v33 = sub_100012CE8(v102, v93, &qword_1005DB360);
      v34 = static Logger.realtimeCollaboration.getter(v33);
      v35 = static os_log_type_t.fault.getter(v34);
      v36 = v35;
      v37 = Logger.logObject.getter(v35);
      v38 = v36;
      v39 = os_log_type_enabled(v37, v36);
      v41 = *(_QWORD *)(v0 + 464);
      v40 = *(_QWORD *)(v0 + 472);
      v42 = *(_QWORD *)(v0 + 456);
      if (v39)
      {
        v107 = *(_QWORD *)(v0 + 472);
        v43 = swift_slowAlloc(32, -1);
        v44 = swift_slowAlloc(64, -1);
        v109 = v44;
        *(_DWORD *)v43 = 136315650;
        v45 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v47 = v46;
        *(_QWORD *)(v43 + 4) = sub_1003A4190(v45, v46, &v109);
        swift_bridgeObjectRelease(v47);
        *(_WORD *)(v43 + 12) = 2048;
        *(_QWORD *)(v43 + 14) = 228;
        *(_WORD *)(v43 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v48 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v48;
        v49._countAndFlagsBits = 0xD00000000000001DLL;
        v49._object = (void *)0x800000010048B7D0;
        String.append(_:)(v49);
        v50 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v93, v0 + 280, v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v51 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v43 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v51, &v109);
        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed assertion at %s:%lu: %s", (uint8_t *)v43, 0x20u);
        swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        sub_100012DDC(v93, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v107, v42);
      }
      else
      {

        sub_100012DDC(v93, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v104);
    }
    v67 = *(_QWORD *)(v0 + 840);
    v68 = *(_QWORD *)(v0 + 576);
    v69 = *(_QWORD *)(v0 + 568);
    v70 = *(_QWORD *)(v0 + 536);
    v71 = *(_QWORD *)(v0 + 424);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v72;
    v72(v69, v68, v70);
    v73 = objc_msgSend(*(id *)(v71 + v67), "fastSyncPaperKitEnablePCSEncryption");
    if ((v73 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v73);
      v74 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v74;
      *v74 = v0;
      v74[1] = sub_10038A9B4;
      v64 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v75 = *(_QWORD *)(v0 + 576);
      v76 = *(_QWORD *)(v0 + 568);
      v77 = *(_QWORD *)(v0 + 560);
      v78 = *(_QWORD *)(v0 + 544);
      v79 = *(_QWORD *)(v0 + 536);
      v80 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      *(_QWORD *)(v0 + 976) = v80;
      v80(v76, v79);
      v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v77, v75, v79);
      GroupSessionMessenger.MessageContext.source.getter(v81);
      v82 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v82;
      *v82 = v0;
      v82[1] = sub_10038AA3C;
      v64 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v64, 3);
  }
}

uint64_t sub_10038B518()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint64_t v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  NSObject *v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  Swift::String v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t);
  id v102;
  _QWORD *v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  __int128 *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t *);
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v2 = (uint64_t *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 1024);
  if ((unint64_t)v3 >> 62)
  {
LABEL_48:
    if (v3 < 0)
      v120 = v3;
    else
      v120 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v120);
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1024));
  }
  v5 = (_QWORD *)(v0 + 368);
  v141 = (uint64_t)v2;
  if (!v4)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1024));
    goto LABEL_13;
  }
  if ((v3 & 0xC000000000000001) != 0)
    goto LABEL_53;
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v0 + 1024);
    v7 = *(id *)(v6 + 32);
    while (1)
    {
      v8 = objc_msgSend(v7, "encryptedValues", swift_bridgeObjectRelease(v6).n128_f64[0]);

      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(v8, "objectForKeyedSubscript:", v9);

      swift_unknownObjectRelease(v8, v11);
      if (v10)
      {
        *v5 = v10;
        v12 = sub_100012E18(&qword_1005DB380);
        if ((swift_dynamicCast(v0 + 312, v5, v12, &type metadata for Data, 6) & 1) != 0)
          break;
      }
LABEL_13:
      if (qword_1005CED60 != -1)
        swift_once(&qword_1005CED60, sub_10037B8C0);
      v17 = *(_QWORD *)(v0 + 1024);
      sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
      swift_bridgeObjectRetain(v17);
      v19 = Logger.logObject.getter(v18);
      v21 = static os_log_type_t.error.getter(v19, v20);
      v22 = os_log_type_enabled(v19, v21);
      v23 = *(_QWORD *)(v0 + 1024);
      if (v22)
      {
        v145 = v5;
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v148 = v25;
        *(_DWORD *)v24 = 136315138;
        v26 = sub_1000163BC(0, &qword_1005DB250, CKRecord_ptr);
        swift_bridgeObjectRetain(v23);
        v5 = (_QWORD *)Array.description.getter(v27, v26);
        v29 = v28;
        swift_bridgeObjectRelease(v23);
        *(_QWORD *)(v0 + 360) = sub_1003A4190((uint64_t)v5, v29, &v148);
        v2 = (uint64_t *)v141;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v145, v24 + 4);
        swift_bridgeObjectRelease(v29);
        swift_bridgeObjectRelease_n(v23, 2);
        _os_log_impl((void *)&_mh_execute_header, v19, v21, "Incoming PaperKit message is not in a valid format: %s", v24, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1024), 2);
      }

      v30 = *(_QWORD *)(*(_QWORD *)(v0 + 424) + *(_QWORD *)(v0 + 856));
      os_unfair_lock_lock((os_unfair_lock_t)(v30 + 24));
      v31 = *(_QWORD *)(v30 + 16);
      v32 = __OFADD__(v31, 1);
      v33 = v31 + 1;
      if (!v32)
      {
        v34 = *(_QWORD *)(v0 + 576);
        v35 = *(_QWORD *)(v0 + 568);
        v36 = *(_QWORD *)(v0 + 544);
        v37 = *(_QWORD *)(v0 + 536);
        *(_QWORD *)(v30 + 16) = v33;
        os_unfair_lock_unlock((os_unfair_lock_t)(v30 + 24));
        v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v38(v35, v37);
        sub_100012DDC((uint64_t)v2, &qword_1005DB360);
        v38(v34, v37);
        goto LABEL_20;
      }
      __break(1u);
LABEL_53:
      v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 1024));
      v6 = *(_QWORD *)(v0 + 1024);
    }
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1024));
    v5 = *(_QWORD **)(v0 + 312);
    v1 = *(uint64_t **)(v0 + 320);
    if (qword_1005CED68 != -1)
      goto LABEL_55;
  }
  else
  {
    __break(1u);
LABEL_55:
    swift_once(&qword_1005CED68, sub_10037B908);
  }
  v13 = *(_QWORD *)(v0 + 520);
  v14 = *(_QWORD *)(v0 + 456);
  v15 = *(_QWORD *)(v0 + 464);
  v16 = sub_10012A0B0(*(_QWORD *)(v0 + 504), (uint64_t)qword_1005DAFC8);
  sub_100012CE8(v16, v13, &qword_1005D6E60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_100012DDC(*(_QWORD *)(v0 + 520), &qword_1005D6E60);
  }
  else
  {
    v104 = sub_10013DCA0((uint64_t)v5, (unint64_t)v1);
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v105, v106))
    {
      *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
      __asm { BR              X10 }
    }

    sub_10013DD30((uint64_t)v5, (unint64_t)v1);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 464) + 8))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 456));
  }
  v115 = *(_QWORD *)(v0 + 576);
  v116 = *(_QWORD *)(v0 + 568);
  v117 = *(_QWORD *)(v0 + 544);
  v118 = *(_QWORD *)(v0 + 536);
  sub_10038FDF4((uint64_t)v5, (unint64_t)v1, *(_QWORD *)(*(_QWORD *)(v0 + 424) + *(_QWORD *)(v0 + 848)));
  v119 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
  v119(v116, v118);
  sub_100012DDC((uint64_t)v2, &qword_1005DB360);
  sub_10013DD30((uint64_t)v5, (unint64_t)v1);
  v119(v115, v118);
LABEL_20:
  v136 = v0 + 248;
  v138 = v0 + 16;
  v132 = (_QWORD *)(v0 + 208);
  v134 = (__int128 *)(v0 + 160);
  v130 = (_QWORD *)(v0 + 352);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v128 = v0 + 64;
  while (1)
  {
    while (1)
    {
      v39 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v39 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
        v81 = *(_QWORD *)(v0 + 808);
        v82 = *(_QWORD *)(v0 + 784);
        v83 = *(_QWORD *)(v0 + 776);
        v84 = *(_QWORD *)(v0 + 752);
        v85 = *(_QWORD *)(v0 + 744);
        v86 = *(_QWORD *)(v0 + 728);
        v87 = *(_QWORD *)(v0 + 720);
        v88 = *(_QWORD *)(v0 + 696);
        v89 = *(_QWORD *)(v0 + 688);
        v121 = *(_QWORD *)(v0 + 680);
        v122 = *(_QWORD *)(v0 + 672);
        v123 = *(_QWORD *)(v0 + 648);
        v124 = *(_QWORD *)(v0 + 640);
        v125 = *(_QWORD *)(v0 + 632);
        v126 = *(_QWORD *)(v0 + 624);
        v127 = *(_QWORD *)(v0 + 600);
        v129 = *(_QWORD *)(v0 + 576);
        v131 = *(_QWORD *)(v0 + 568);
        v133 = *(_QWORD *)(v0 + 560);
        v135 = *(_QWORD *)(v0 + 552);
        v137 = *(_QWORD *)(v0 + 528);
        v139 = *(_QWORD *)(v0 + 520);
        v140 = *(_QWORD *)(v0 + 512);
        v142 = *(_QWORD *)(v0 + 496);
        v144 = *(_QWORD *)(v0 + 472);
        v147 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v81);
        swift_task_dealloc(v82);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v121);
        swift_task_dealloc(v122);
        swift_task_dealloc(v123);
        swift_task_dealloc(v124);
        swift_task_dealloc(v125);
        swift_task_dealloc(v126);
        swift_task_dealloc(v127);
        swift_task_dealloc(v129);
        swift_task_dealloc(v131);
        swift_task_dealloc(v133);
        swift_task_dealloc(v135);
        swift_task_dealloc(v137);
        swift_task_dealloc(v139);
        swift_task_dealloc(v140);
        swift_task_dealloc(v142);
        swift_task_dealloc(v144);
        swift_task_dealloc(v147);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v40 = *(_QWORD *)(v0 + 832);
      v41 = *(_QWORD *)(v0 + 776);
      v143 = *(void (**)(uint64_t, uint64_t, uint64_t *))(v0 + 824);
      v146 = *(_QWORD *)(v0 + 768);
      v1 = *(uint64_t **)(v0 + 760);
      v42 = *(_QWORD *)(v0 + 752);
      v43 = v42 + *(int *)(v0 + 60);
      v44 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v136, v43, v1, v40);
      sub_100012CE8(v45, v138, &qword_1005DB360);
      v44(v136, 0);
      v2 = &qword_1005DB360;
      v143(v41, v42, v1);
      dispatch thunk of Collection.formIndex(after:)(v43, v1, v40);
      (*(void (**)(uint64_t, uint64_t *))(v146 + 8))(v41, v1);
      sub_10014BD1C(v138, v141, &qword_1005DB360);
      sub_100012CE8(v141, (uint64_t)v134, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) == 0)
        break;
      v46 = *(_QWORD *)v134;
      *v130 = *(_QWORD *)v134;
      v47 = sub_100012E18(&qword_1005D7A90);
      swift_willThrowTypedImpl(v130, v47, &protocol self-conformance witness table for Error);
      if (qword_1005CED60 != -1)
        swift_once(&qword_1005CED60, sub_10037B8C0);
      sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
      swift_errorRetain(v46);
      v48 = swift_errorRetain(v46);
      v49 = Logger.logObject.getter(v48);
      v51 = static os_log_type_t.error.getter(v49, v50);
      if (os_log_type_enabled(v49, v51))
      {
        v52 = swift_slowAlloc(12, -1);
        v1 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v52 = 138412290;
        swift_errorRetain(v46);
        v53 = _swift_stdlib_bridgeErrorToNSError(v46);
        *(_QWORD *)(v52 + 4) = v53;
        *v1 = v53;
        swift_errorRelease(v46);
        swift_errorRelease(v46);
        _os_log_impl((void *)&_mh_execute_header, v49, v51, "Error processing incoming fast sync message: %@", (uint8_t *)v52, 0xCu);
        v54 = sub_100012E18(&qword_1005D3A30);
        swift_arrayDestroy(v1, 1, v54);
        swift_slowDealloc(v1, -1, -1);
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {
        swift_errorRelease(v46);
        swift_errorRelease(v46);
      }
      v76 = *(_QWORD *)(v0 + 856);
      v77 = *(_QWORD *)(v0 + 424);

      v78 = *(_QWORD *)(v77 + v76);
      v3 = v78 + 24;
      os_unfair_lock_lock((os_unfair_lock_t)(v78 + 24));
      v79 = *(_QWORD *)(v78 + 16);
      v32 = __OFADD__(v79, 1);
      v80 = v79 + 1;
      if (v32)
      {
        __break(1u);
        goto LABEL_48;
      }
      *(_QWORD *)(v78 + 16) = v80;
      os_unfair_lock_unlock((os_unfair_lock_t)(v78 + 24));
      swift_errorRelease(v46);
      sub_100012DDC(v141, &qword_1005DB360);
    }
    v55 = *(_QWORD *)(v0 + 728);
    v56 = *(_QWORD *)(v0 + 704);
    sub_10013B100(v134, (uint64_t)v132);
    v57 = sub_100012E18(&qword_1005DB368);
    if ((swift_dynamicCast(v55, v132, v57, v56, 0) & 1) != 0)
    {
      v91 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
      GroupSessionMessenger.MessageContext.source.getter(v91);
      v92 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 880) = v92;
      *v92 = v0;
      v92[1] = sub_1003873CC;
      v93 = *(_QWORD *)(v0 + 696);
      return sub_10038EFCC(v93, 3);
    }
    if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v132, v57, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
    {
      v94 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
      GroupSessionMessenger.MessageContext.source.getter(v94);
      v95 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 936) = v95;
      *v95 = v0;
      v95[1] = sub_100389454;
      return sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
    }
    if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v132, v57, *(_QWORD *)(v0 + 536), 0))
      break;
    v58 = sub_100012CE8(v141, v128, &qword_1005DB360);
    v59 = static Logger.realtimeCollaboration.getter(v58);
    v60 = static os_log_type_t.fault.getter(v59);
    v61 = v60;
    v62 = Logger.logObject.getter(v60);
    v63 = os_log_type_enabled(v62, v61);
    v64 = *(_QWORD *)(v0 + 464);
    v65 = *(_QWORD *)(v0 + 472);
    v66 = *(_QWORD *)(v0 + 456);
    if (v63)
    {
      v67 = swift_slowAlloc(32, -1);
      v68 = swift_slowAlloc(64, -1);
      v148 = v68;
      *(_DWORD *)v67 = 136315650;
      v69 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v71 = v70;
      *(_QWORD *)(v67 + 4) = sub_1003A4190(v69, v70, &v148);
      swift_bridgeObjectRelease(v71);
      *(_WORD *)(v67 + 12) = 2048;
      *(_QWORD *)(v67 + 14) = 228;
      *(_WORD *)(v67 + 22) = 2080;
      *(_QWORD *)(v0 + 328) = 0;
      *(_QWORD *)(v0 + 336) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v72 = *(_QWORD *)(v0 + 336);
      *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
      *(_QWORD *)(v0 + 288) = v72;
      v73._countAndFlagsBits = 0xD00000000000001DLL;
      v73._object = (void *)0x800000010048B7D0;
      String.append(_:)(v73);
      v74 = sub_100012E18(&qword_1005DB360);
      _print_unlocked<A, B>(_:_:)(v128, v0 + 280, v74, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v75 = *(_QWORD *)(v0 + 288);
      *(_QWORD *)(v67 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v75, &v148);
      swift_bridgeObjectRelease(v75);
      _os_log_impl((void *)&_mh_execute_header, v62, v61, "Failed assertion at %s:%lu: %s", (uint8_t *)v67, 0x20u);
      swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);
    }

    sub_100012DDC(v128, &qword_1005DB360);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v65, v66);
    sub_100012DDC(v141, &qword_1005DB360);
    sub_1000153C0(v132);
  }
  v96 = *(_QWORD *)(v0 + 840);
  v97 = *(_QWORD *)(v0 + 576);
  v98 = *(_QWORD *)(v0 + 568);
  v99 = *(_QWORD *)(v0 + 536);
  v100 = *(_QWORD *)(v0 + 424);
  v101 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
  *(_QWORD *)(v0 + 952) = v101;
  v101(v98, v97, v99);
  v102 = objc_msgSend(*(id *)(v100 + v96), "fastSyncPaperKitEnablePCSEncryption");
  if ((v102 & 1) != 0)
  {
    GroupSessionMessenger.MessageContext.source.getter(v102);
    v103 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v0 + 960) = v103;
    *v103 = v0;
    v103[1] = sub_10038A9B4;
    v93 = *(_QWORD *)(v0 + 680);
  }
  else
  {
    v107 = *(_QWORD *)(v0 + 576);
    v108 = *(_QWORD *)(v0 + 568);
    v109 = *(_QWORD *)(v0 + 560);
    v110 = *(_QWORD *)(v0 + 544);
    v111 = *(_QWORD *)(v0 + 536);
    v112 = *(void (**)(uint64_t, uint64_t))(v110 + 8);
    *(_QWORD *)(v0 + 976) = v112;
    v112(v108, v111);
    v113 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 32))(v109, v107, v111);
    GroupSessionMessenger.MessageContext.source.getter(v113);
    v114 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v0 + 984) = v114;
    *v114 = v0;
    v114[1] = sub_10038AA3C;
    v93 = *(_QWORD *)(v0 + 672);
  }
  return sub_10038EFCC(v93, 3);
}

void sub_10038C374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  __objc2_meth_list **p_inst_meths;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  Swift::String v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t, uint64_t);
  id v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;

  v99 = v0 + 16;
  v1 = v0 + 112;
  v95 = v0 + 248;
  v85 = (_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 8);
  v4(*(_QWORD *)(v0 + 568), v3);
  v4(v2, v3);
  v104 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v5 = *(_QWORD *)(v0 + 1032);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v102 = v0 + 112;
  v93 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v5);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.error.getter(v8, v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138412290;
    swift_errorRetain(v5);
    v13 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v11 + 4) = v13;
    *v12 = v13;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Error processing incoming fast sync message: %@", (uint8_t *)v11, 0xCu);
    v14 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }
  v15 = *(_QWORD *)(v0 + 856);
  v16 = *(_QWORD *)(v0 + 424);

  v17 = *(_QWORD *)(v16 + v15);
  os_unfair_lock_lock((os_unfair_lock_t)(v17 + 24));
  v18 = *(_QWORD *)(v17 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v17 + 16) = v20;
    os_unfair_lock_unlock((os_unfair_lock_t)(v17 + 24));
    swift_errorRelease(v5);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v21 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
        v53 = *(_QWORD *)(v0 + 808);
        v54 = *(_QWORD *)(v0 + 784);
        v55 = *(_QWORD *)(v0 + 776);
        v56 = *(_QWORD *)(v0 + 752);
        v57 = *(_QWORD *)(v0 + 744);
        v58 = *(_QWORD *)(v0 + 728);
        v59 = *(_QWORD *)(v0 + 720);
        v60 = *(_QWORD *)(v0 + 696);
        v61 = *(_QWORD *)(v0 + 688);
        v83 = *(_QWORD *)(v0 + 680);
        v84 = *(_QWORD *)(v0 + 672);
        v86 = *(_QWORD *)(v0 + 648);
        v87 = *(_QWORD *)(v0 + 640);
        v88 = *(_QWORD *)(v0 + 632);
        v89 = *(_QWORD *)(v0 + 624);
        v90 = *(_QWORD *)(v0 + 600);
        v91 = *(_QWORD *)(v0 + 576);
        v92 = *(_QWORD *)(v0 + 568);
        v94 = *(_QWORD *)(v0 + 560);
        v96 = *(_QWORD *)(v0 + 552);
        v98 = *(_QWORD *)(v0 + 528);
        v100 = *(_QWORD *)(v0 + 520);
        v101 = *(_QWORD *)(v0 + 512);
        v103 = *(_QWORD *)(v0 + 496);
        v105 = *(_QWORD *)(v0 + 472);
        v108 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v59);
        swift_task_dealloc(v60);
        swift_task_dealloc(v61);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v90);
        swift_task_dealloc(v91);
        swift_task_dealloc(v92);
        swift_task_dealloc(v94);
        swift_task_dealloc(v96);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v101);
        swift_task_dealloc(v103);
        swift_task_dealloc(v105);
        swift_task_dealloc(v108);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v22 = *(_QWORD *)(v0 + 832);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v24 = *(_QWORD *)(v0 + 776);
      v106 = *(_QWORD *)(v0 + 768);
      v25 = *(_QWORD *)(v0 + 760);
      v26 = *(_QWORD *)(v0 + 752);
      v27 = v26 + *(int *)(v0 + 60);
      v28 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v95, v27, v25, v22);
      sub_100012CE8(v29, v99, &qword_1005DB360);
      v28(v95, 0);
      v23(v24, v26, v25);
      dispatch thunk of Collection.formIndex(after:)(v27, v25, v22);
      (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v24, v25);
      v1 = v0 + 112;
      sub_10014BD1C(v99, v102, &qword_1005DB360);
      v97 = (__int128 *)(v0 + 160);
      sub_100012CE8(v102, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v5 = *(_QWORD *)v97;
        *v85 = *(_QWORD *)v97;
        v52 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v85, v52, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v30 = *(_QWORD *)(v0 + 728);
      v31 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v97, (uint64_t)v104);
      v32 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v30, v104, v32, v31, 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v63;
        *v63 = v0;
        v63[1] = sub_1003873CC;
        v64 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v104, v32, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v65 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v65);
        v66 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v66;
        *v66 = v0;
        v66[1] = sub_100389454;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v104, v32, *(_QWORD *)(v0 + 536), 0))
        break;
      v33 = sub_100012CE8(v102, v93, &qword_1005DB360);
      v34 = static Logger.realtimeCollaboration.getter(v33);
      v35 = static os_log_type_t.fault.getter(v34);
      v36 = v35;
      v37 = Logger.logObject.getter(v35);
      v38 = v36;
      v39 = os_log_type_enabled(v37, v36);
      v41 = *(_QWORD *)(v0 + 464);
      v40 = *(_QWORD *)(v0 + 472);
      v42 = *(_QWORD *)(v0 + 456);
      if (v39)
      {
        v107 = *(_QWORD *)(v0 + 472);
        v43 = swift_slowAlloc(32, -1);
        v44 = swift_slowAlloc(64, -1);
        v109 = v44;
        *(_DWORD *)v43 = 136315650;
        v45 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v47 = v46;
        *(_QWORD *)(v43 + 4) = sub_1003A4190(v45, v46, &v109);
        swift_bridgeObjectRelease(v47);
        *(_WORD *)(v43 + 12) = 2048;
        *(_QWORD *)(v43 + 14) = 228;
        *(_WORD *)(v43 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v48 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v48;
        v49._countAndFlagsBits = 0xD00000000000001DLL;
        v49._object = (void *)0x800000010048B7D0;
        String.append(_:)(v49);
        v50 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v93, v0 + 280, v50, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v51 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v43 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v51, &v109);
        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Failed assertion at %s:%lu: %s", (uint8_t *)v43, 0x20u);
        swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);

        sub_100012DDC(v93, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v107, v42);
      }
      else
      {

        sub_100012DDC(v93, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v104);
    }
    v67 = *(_QWORD *)(v0 + 840);
    v68 = *(_QWORD *)(v0 + 576);
    v69 = *(_QWORD *)(v0 + 568);
    v70 = *(_QWORD *)(v0 + 536);
    v71 = *(_QWORD *)(v0 + 424);
    v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v72;
    v72(v69, v68, v70);
    v73 = objc_msgSend(*(id *)(v71 + v67), "fastSyncPaperKitEnablePCSEncryption");
    if ((v73 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v73);
      v74 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v74;
      *v74 = v0;
      v74[1] = sub_10038A9B4;
      v64 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v75 = *(_QWORD *)(v0 + 576);
      v76 = *(_QWORD *)(v0 + 568);
      v77 = *(_QWORD *)(v0 + 560);
      v78 = *(_QWORD *)(v0 + 544);
      v79 = *(_QWORD *)(v0 + 536);
      v80 = *(void (**)(uint64_t, uint64_t))(v78 + 8);
      *(_QWORD *)(v0 + 976) = v80;
      v80(v76, v79);
      v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 32))(v77, v75, v79);
      GroupSessionMessenger.MessageContext.source.getter(v81);
      v82 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v82;
      *v82 = v0;
      v82[1] = sub_10038AA3C;
      v64 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v64, 3);
  }
}

uint64_t sub_10038CCCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _DWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _QWORD);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  NSObject *v68;
  os_log_type_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  Swift::String v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t, uint64_t);
  id v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int128 *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t, uint64_t);
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;

  if (qword_1005CED68 != -1)
    swift_once(&qword_1005CED68, sub_10037B908);
  v0 = *(_QWORD *)(v138 + 512);
  v1 = *(_QWORD *)(v138 + 456);
  v2 = *(_QWORD *)(v138 + 464);
  v3 = sub_10012A0B0(*(_QWORD *)(v138 + 504), (uint64_t)qword_1005DAFC8);
  sub_100012CE8(v3, v0, &qword_1005D6E60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0, 1, v1) == 1)
  {
    v4 = sub_100012DDC(*(_QWORD *)(v138 + 512), &qword_1005D6E60);
  }
  else
  {
    v5 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v138 + 952))(*(_QWORD *)(v138 + 552), *(_QWORD *)(v138 + 560), *(_QWORD *)(v138 + 536));
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (_DWORD *)swift_slowAlloc(12, -1);
      *v8 = 134217984;
      FastSync.PaperKitMessage.data.getter(v8);
      __asm { BR              X10 }
    }
    (*(void (**)(_QWORD, _QWORD))(v138 + 976))(*(_QWORD *)(v138 + 552), *(_QWORD *)(v138 + 536));
    v10 = *(_QWORD *)(v138 + 512);
    v11 = *(_QWORD *)(v138 + 456);
    v12 = *(_QWORD *)(v138 + 464);

    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
  }
  v13 = *(_QWORD *)(*(_QWORD *)(v138 + 424) + *(_QWORD *)(v138 + 848));
  v14 = FastSync.PaperKitMessage.data.getter(v4);
  v16 = v15;
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  v17 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRetain(v17);
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
  if ((unint64_t)v17 >> 62)
  {
    if (v17 < 0)
      v27 = v17;
    else
      v27 = v17 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v17);
    v18 = _CocoaArrayWrapper.endIndex.getter(v27);
    swift_bridgeObjectRelease(v17);
    if (v18)
      goto LABEL_10;
  }
  else
  {
    v18 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v18)
    {
LABEL_10:
      if (v18 < 1)
      {
LABEL_45:
        __break(1u);
        JUMPOUT(0x10038D9C0);
      }
      v19 = 0;
      v133 = v17 & 0xC000000000000001;
      v20 = v17;
      do
      {
        if (v133)
        {
          v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v17);
        }
        else
        {
          v21 = *(_QWORD *)(v17 + 8 * v19 + 32);
          swift_retain(v21);
        }
        v22 = *(_QWORD *)(v138 + 440);
        v23 = *(_QWORD *)(v138 + 448);
        v24 = *(_QWORD *)(v138 + 432);
        ++v19;
        *(_QWORD *)(v138 + 296) = v14;
        *(_QWORD *)(v138 + 304) = v16;
        sub_10013DCA0(v14, v16);
        v25 = sub_100012E18(&qword_1005CF7B8);
        AsyncStream.Continuation.yield(_:)(v138 + 296, v25);
        v26 = swift_release(v21);
        (*(void (**)(uint64_t, uint64_t, __n128))(v22 + 8))(v23, v24, v26);
        v17 = v20;
      }
      while (v18 != v19);
    }
  }
  v28 = *(void (**)(uint64_t, uint64_t))(v138 + 976);
  v29 = *(_QWORD *)(v138 + 560);
  v30 = *(_QWORD *)(v138 + 536);
  swift_bridgeObjectRelease(v17);
  sub_10013DD30(v14, v16);
  v28(v29, v30);
  v131 = v138 + 112;
  sub_100012DDC(v138 + 112, &qword_1005DB360);
  sub_1000153C0((_QWORD *)(v138 + 208));
  v31 = *(_QWORD *)(*(_QWORD *)(v138 + 752) + *(int *)(v138 + 60));
  dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v138 + 760));
  if (v31 == *(_QWORD *)(v138 + 376))
  {
LABEL_21:
    sub_100012DDC(*(_QWORD *)(v138 + 752), &qword_1005DB348);
    v32 = *(_QWORD *)(v138 + 808);
    v33 = *(_QWORD *)(v138 + 784);
    v34 = *(_QWORD *)(v138 + 776);
    v35 = *(_QWORD *)(v138 + 752);
    v36 = *(_QWORD *)(v138 + 744);
    v37 = *(_QWORD *)(v138 + 728);
    v38 = *(_QWORD *)(v138 + 720);
    v39 = *(_QWORD *)(v138 + 696);
    v40 = *(_QWORD *)(v138 + 688);
    v111 = *(_QWORD *)(v138 + 680);
    v112 = *(_QWORD *)(v138 + 672);
    v113 = *(_QWORD *)(v138 + 648);
    v114 = *(_QWORD *)(v138 + 640);
    v115 = *(_QWORD *)(v138 + 632);
    v116 = *(_QWORD *)(v138 + 624);
    v117 = *(_QWORD *)(v138 + 600);
    v118 = *(_QWORD *)(v138 + 576);
    v120 = *(_QWORD *)(v138 + 568);
    v122 = *(_QWORD *)(v138 + 560);
    v124 = *(_QWORD *)(v138 + 552);
    v126 = *(_QWORD *)(v138 + 528);
    v128 = *(_QWORD *)(v138 + 520);
    v130 = *(_QWORD *)(v138 + 512);
    v132 = *(_QWORD *)(v138 + 496);
    v134 = *(_QWORD *)(v138 + 472);
    v136 = *(_QWORD *)(v138 + 448);
    swift_task_dealloc(*(_QWORD *)(v138 + 816));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v132);
    swift_task_dealloc(v134);
    swift_task_dealloc(v136);
    return (*(uint64_t (**)(void))(v138 + 8))();
  }
  v127 = v138 + 248;
  v129 = v138 + 16;
  v125 = (__int128 *)(v138 + 160);
  v121 = (_QWORD *)(v138 + 352);
  v123 = v138 + 208;
  v119 = v138 + 64;
  while (1)
  {
    v43 = *(_QWORD *)(v138 + 832);
    v44 = *(_QWORD *)(v138 + 776);
    v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(v138 + 824);
    v137 = *(_QWORD *)(v138 + 768);
    v45 = *(_QWORD *)(v138 + 760);
    v46 = *(_QWORD *)(v138 + 752);
    v47 = v46 + *(int *)(v138 + 60);
    v48 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v127, v47, v45, v43);
    sub_100012CE8(v49, v129, &qword_1005DB360);
    v48(v127, 0);
    v135(v44, v46, v45);
    dispatch thunk of Collection.formIndex(after:)(v47, v45, v43);
    (*(void (**)(uint64_t, uint64_t))(v137 + 8))(v44, v45);
    sub_10014BD1C(v129, v131, &qword_1005DB360);
    sub_100012CE8(v131, (uint64_t)v125, &qword_1005DB360);
    if ((*(_BYTE *)(v138 + 200) & 1) == 0)
      break;
    v50 = *(_QWORD *)v125;
    *v121 = *(_QWORD *)v125;
    v51 = sub_100012E18(&qword_1005D7A90);
    swift_willThrowTypedImpl(v121, v51, &protocol self-conformance witness table for Error);
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    sub_10012A0B0(*(_QWORD *)(v138 + 456), (uint64_t)qword_1005DAFB0);
    swift_errorRetain(v50);
    v52 = swift_errorRetain(v50);
    v53 = Logger.logObject.getter(v52);
    v55 = static os_log_type_t.error.getter(v53, v54);
    if (os_log_type_enabled(v53, v55))
    {
      v56 = swift_slowAlloc(12, -1);
      v57 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v56 = 138412290;
      swift_errorRetain(v50);
      v58 = _swift_stdlib_bridgeErrorToNSError(v50);
      *(_QWORD *)(v56 + 4) = v58;
      *v57 = v58;
      swift_errorRelease(v50);
      swift_errorRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v53, v55, "Error processing incoming fast sync message: %@", (uint8_t *)v56, 0xCu);
      v59 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v57, 1, v59);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      swift_errorRelease(v50);
      swift_errorRelease(v50);
    }
    v84 = *(_QWORD *)(v138 + 856);
    v85 = *(_QWORD *)(v138 + 424);

    v86 = *(_QWORD *)(v85 + v84);
    os_unfair_lock_lock((os_unfair_lock_t)(v86 + 24));
    v87 = *(_QWORD *)(v86 + 16);
    v88 = __OFADD__(v87, 1);
    v89 = v87 + 1;
    if (v88)
    {
      __break(1u);
      goto LABEL_45;
    }
    *(_QWORD *)(v86 + 16) = v89;
    os_unfair_lock_unlock((os_unfair_lock_t)(v86 + 24));
    swift_errorRelease(v50);
    sub_100012DDC(v131, &qword_1005DB360);
LABEL_24:
    v42 = *(_QWORD *)(*(_QWORD *)(v138 + 752) + *(int *)(v138 + 60));
    dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v138 + 760));
    if (v42 == *(_QWORD *)(v138 + 376))
      goto LABEL_21;
  }
  v60 = *(_QWORD *)(v138 + 728);
  v61 = *(_QWORD *)(v138 + 704);
  v62 = (_QWORD *)(v138 + 208);
  sub_10013B100(v125, v123);
  v63 = sub_100012E18(&qword_1005DB368);
  if ((swift_dynamicCast(v60, v123, v63, v61, 0) & 1) != 0)
  {
    v90 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v138 + 712) + 32))(*(_QWORD *)(v138 + 720), *(_QWORD *)(v138 + 728), *(_QWORD *)(v138 + 704));
    GroupSessionMessenger.MessageContext.source.getter(v90);
    v91 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v138 + 880) = v91;
    *v91 = v138;
    v91[1] = sub_1003873CC;
    v92 = *(_QWORD *)(v138 + 696);
    return sub_10038EFCC(v92, 3);
  }
  if ((swift_dynamicCast(*(_QWORD *)(v138 + 648), v123, v63, *(_QWORD *)(v138 + 608), 0) & 1) != 0)
  {
    v93 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v138 + 616) + 32))(*(_QWORD *)(v138 + 640), *(_QWORD *)(v138 + 648), *(_QWORD *)(v138 + 608));
    GroupSessionMessenger.MessageContext.source.getter(v93);
    v94 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v138 + 936) = v94;
    *v94 = v138;
    v94[1] = sub_100389454;
    return sub_10038EFCC(*(_QWORD *)(v138 + 688), 2);
  }
  if (!swift_dynamicCast(*(_QWORD *)(v138 + 576), v123, v63, *(_QWORD *)(v138 + 536), 0))
  {
    v64 = sub_100012CE8(v131, v119, &qword_1005DB360);
    v65 = static Logger.realtimeCollaboration.getter(v64);
    v66 = static os_log_type_t.fault.getter(v65);
    v67 = v66;
    v68 = Logger.logObject.getter(v66);
    v69 = v67;
    v70 = os_log_type_enabled(v68, v67);
    v72 = *(_QWORD *)(v138 + 464);
    v71 = *(_QWORD *)(v138 + 472);
    v73 = *(_QWORD *)(v138 + 456);
    if (v70)
    {
      v74 = swift_slowAlloc(32, -1);
      v75 = swift_slowAlloc(64, -1);
      v139 = v75;
      *(_DWORD *)v74 = 136315650;
      v76 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
      v78 = v77;
      *(_QWORD *)(v74 + 4) = sub_1003A4190(v76, v77, &v139);
      swift_bridgeObjectRelease(v78);
      *(_WORD *)(v74 + 12) = 2048;
      *(_QWORD *)(v74 + 14) = 228;
      *(_WORD *)(v74 + 22) = 2080;
      *(_QWORD *)(v138 + 328) = 0;
      *(_QWORD *)(v138 + 336) = 0xE000000000000000;
      _StringGuts.grow(_:)(31);
      v79 = *(_QWORD *)(v138 + 336);
      *(_QWORD *)(v138 + 280) = *(_QWORD *)(v138 + 328);
      *(_QWORD *)(v138 + 288) = v79;
      v80._countAndFlagsBits = 0xD00000000000001DLL;
      v80._object = (void *)0x800000010048B7D0;
      String.append(_:)(v80);
      v81 = sub_100012E18(&qword_1005DB360);
      _print_unlocked<A, B>(_:_:)(v119, v138 + 280, v81, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v82 = *(_QWORD *)(v138 + 288);
      *(_QWORD *)(v74 + 24) = sub_1003A4190(*(_QWORD *)(v138 + 280), v82, &v139);
      swift_bridgeObjectRelease(v82);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Failed assertion at %s:%lu: %s", (uint8_t *)v74, 0x20u);
      swift_arrayDestroy(v75, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      v83 = v74;
      v62 = (_QWORD *)(v138 + 208);
      swift_slowDealloc(v83, -1, -1);
    }

    sub_100012DDC(v119, &qword_1005DB360);
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
    sub_100012DDC(v138 + 112, &qword_1005DB360);
    sub_1000153C0(v62);
    goto LABEL_24;
  }
  v95 = *(_QWORD *)(v138 + 840);
  v96 = *(_QWORD *)(v138 + 576);
  v97 = *(_QWORD *)(v138 + 568);
  v98 = *(_QWORD *)(v138 + 536);
  v99 = *(_QWORD *)(v138 + 424);
  v100 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v138 + 544) + 16);
  *(_QWORD *)(v138 + 952) = v100;
  v100(v97, v96, v98);
  v101 = objc_msgSend(*(id *)(v99 + v95), "fastSyncPaperKitEnablePCSEncryption");
  if ((v101 & 1) != 0)
  {
    GroupSessionMessenger.MessageContext.source.getter(v101);
    v102 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v138 + 960) = v102;
    *v102 = v138;
    v102[1] = sub_10038A9B4;
    v92 = *(_QWORD *)(v138 + 680);
  }
  else
  {
    v103 = *(_QWORD *)(v138 + 576);
    v104 = *(_QWORD *)(v138 + 568);
    v105 = *(_QWORD *)(v138 + 560);
    v106 = *(_QWORD *)(v138 + 544);
    v107 = *(_QWORD *)(v138 + 536);
    v108 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
    *(_QWORD *)(v138 + 976) = v108;
    v108(v104, v107);
    v109 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v106 + 32))(v105, v103, v107);
    GroupSessionMessenger.MessageContext.source.getter(v109);
    v110 = (_QWORD *)swift_task_alloc(dword_1005DB374);
    *(_QWORD *)(v138 + 984) = v110;
    *v110 = v138;
    v110[1] = sub_10038AA3C;
    v92 = *(_QWORD *)(v138 + 672);
  }
  return sub_10038EFCC(v92, 3);
}

void sub_10038D9D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_meth_list **p_inst_meths;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  id v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v96 = v0 + 16;
  v1 = v0 + 112;
  v92 = v0 + 248;
  v82 = (_QWORD *)(v0 + 352);
  (*(void (**)(_QWORD, _QWORD))(v0 + 976))(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 536));
  v101 = (_QWORD *)(v0 + 208);
  sub_1000153C0((_QWORD *)(v0 + 208));
  v2 = *(_QWORD *)(v0 + 992);
  p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
  v99 = v0 + 112;
  v90 = v0 + 64;
LABEL_2:
  if (p_inst_meths[428] != (__objc2_meth_list *)-1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  sub_10012A0B0(*(_QWORD *)(v0 + 456), (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error processing incoming fast sync message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = *(_QWORD *)(v0 + 856);
  v13 = *(_QWORD *)(v0 + 424);

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v2);
    sub_100012DDC(v1, &qword_1005DB360);
    while (1)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v0 + 752) + *(int *)(v0 + 60));
      dispatch thunk of Collection.endIndex.getter(*(_QWORD *)(v0 + 760));
      if (v18 == *(_QWORD *)(v0 + 376))
      {
        sub_100012DDC(*(_QWORD *)(v0 + 752), &qword_1005DB348);
        v50 = *(_QWORD *)(v0 + 808);
        v51 = *(_QWORD *)(v0 + 784);
        v52 = *(_QWORD *)(v0 + 776);
        v53 = *(_QWORD *)(v0 + 752);
        v54 = *(_QWORD *)(v0 + 744);
        v55 = *(_QWORD *)(v0 + 728);
        v56 = *(_QWORD *)(v0 + 720);
        v57 = *(_QWORD *)(v0 + 696);
        v58 = *(_QWORD *)(v0 + 688);
        v80 = *(_QWORD *)(v0 + 680);
        v81 = *(_QWORD *)(v0 + 672);
        v83 = *(_QWORD *)(v0 + 648);
        v84 = *(_QWORD *)(v0 + 640);
        v85 = *(_QWORD *)(v0 + 632);
        v86 = *(_QWORD *)(v0 + 624);
        v87 = *(_QWORD *)(v0 + 600);
        v88 = *(_QWORD *)(v0 + 576);
        v89 = *(_QWORD *)(v0 + 568);
        v91 = *(_QWORD *)(v0 + 560);
        v93 = *(_QWORD *)(v0 + 552);
        v95 = *(_QWORD *)(v0 + 528);
        v97 = *(_QWORD *)(v0 + 520);
        v98 = *(_QWORD *)(v0 + 512);
        v100 = *(_QWORD *)(v0 + 496);
        v102 = *(_QWORD *)(v0 + 472);
        v105 = *(_QWORD *)(v0 + 448);
        swift_task_dealloc(*(_QWORD *)(v0 + 816));
        swift_task_dealloc(v50);
        swift_task_dealloc(v51);
        swift_task_dealloc(v52);
        swift_task_dealloc(v53);
        swift_task_dealloc(v54);
        swift_task_dealloc(v55);
        swift_task_dealloc(v56);
        swift_task_dealloc(v57);
        swift_task_dealloc(v58);
        swift_task_dealloc(v80);
        swift_task_dealloc(v81);
        swift_task_dealloc(v83);
        swift_task_dealloc(v84);
        swift_task_dealloc(v85);
        swift_task_dealloc(v86);
        swift_task_dealloc(v87);
        swift_task_dealloc(v88);
        swift_task_dealloc(v89);
        swift_task_dealloc(v91);
        swift_task_dealloc(v93);
        swift_task_dealloc(v95);
        swift_task_dealloc(v97);
        swift_task_dealloc(v98);
        swift_task_dealloc(v100);
        swift_task_dealloc(v102);
        swift_task_dealloc(v105);
        (*(void (**)(void))(v0 + 8))();
        return;
      }
      v19 = *(_QWORD *)(v0 + 832);
      v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 824);
      v21 = *(_QWORD *)(v0 + 776);
      v103 = *(_QWORD *)(v0 + 768);
      v22 = *(_QWORD *)(v0 + 760);
      v23 = *(_QWORD *)(v0 + 752);
      v24 = v23 + *(int *)(v0 + 60);
      v25 = (void (*)(uint64_t, _QWORD))dispatch thunk of Collection.subscript.read(v92, v24, v22, v19);
      sub_100012CE8(v26, v96, &qword_1005DB360);
      v25(v92, 0);
      v20(v21, v23, v22);
      dispatch thunk of Collection.formIndex(after:)(v24, v22, v19);
      (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v21, v22);
      v1 = v0 + 112;
      sub_10014BD1C(v96, v99, &qword_1005DB360);
      v94 = (__int128 *)(v0 + 160);
      sub_100012CE8(v99, v0 + 160, &qword_1005DB360);
      if ((*(_BYTE *)(v0 + 200) & 1) != 0)
      {
        v2 = *(_QWORD *)v94;
        *v82 = *(_QWORD *)v94;
        v49 = sub_100012E18(&qword_1005D7A90);
        swift_willThrowTypedImpl(v82, v49, &protocol self-conformance witness table for Error);
        p_inst_meths = (__objc2_meth_list **)(&OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource + 24);
        goto LABEL_2;
      }
      v27 = *(_QWORD *)(v0 + 728);
      v28 = *(_QWORD *)(v0 + 704);
      sub_10013B100(v94, (uint64_t)v101);
      v29 = sub_100012E18(&qword_1005DB368);
      if ((swift_dynamicCast(v27, v101, v29, v28, 0) & 1) != 0)
      {
        v59 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 712) + 32))(*(_QWORD *)(v0 + 720), *(_QWORD *)(v0 + 728), *(_QWORD *)(v0 + 704));
        GroupSessionMessenger.MessageContext.source.getter(v59);
        v60 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 880) = v60;
        *v60 = v0;
        v60[1] = sub_1003873CC;
        v61 = *(_QWORD *)(v0 + 696);
        goto LABEL_25;
      }
      if ((swift_dynamicCast(*(_QWORD *)(v0 + 648), v101, v29, *(_QWORD *)(v0 + 608), 0) & 1) != 0)
      {
        v62 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 616) + 32))(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 608));
        GroupSessionMessenger.MessageContext.source.getter(v62);
        v63 = (_QWORD *)swift_task_alloc(dword_1005DB374);
        *(_QWORD *)(v0 + 936) = v63;
        *v63 = v0;
        v63[1] = sub_100389454;
        sub_10038EFCC(*(_QWORD *)(v0 + 688), 2);
        return;
      }
      if (swift_dynamicCast(*(_QWORD *)(v0 + 576), v101, v29, *(_QWORD *)(v0 + 536), 0))
        break;
      v30 = sub_100012CE8(v99, v90, &qword_1005DB360);
      v31 = static Logger.realtimeCollaboration.getter(v30);
      v32 = static os_log_type_t.fault.getter(v31);
      v33 = v32;
      v34 = Logger.logObject.getter(v32);
      v35 = v33;
      v36 = os_log_type_enabled(v34, v33);
      v38 = *(_QWORD *)(v0 + 464);
      v37 = *(_QWORD *)(v0 + 472);
      v39 = *(_QWORD *)(v0 + 456);
      if (v36)
      {
        v104 = *(_QWORD *)(v0 + 472);
        v40 = swift_slowAlloc(32, -1);
        v41 = swift_slowAlloc(64, -1);
        v106 = v41;
        *(_DWORD *)v40 = 136315650;
        v42 = StaticString.description.getter("MobileNotes/RealtimeCollaborationMessageController.swift", 56, 2);
        v44 = v43;
        *(_QWORD *)(v40 + 4) = sub_1003A4190(v42, v43, &v106);
        swift_bridgeObjectRelease(v44);
        *(_WORD *)(v40 + 12) = 2048;
        *(_QWORD *)(v40 + 14) = 228;
        *(_WORD *)(v40 + 22) = 2080;
        *(_QWORD *)(v0 + 328) = 0;
        *(_QWORD *)(v0 + 336) = 0xE000000000000000;
        _StringGuts.grow(_:)(31);
        v45 = *(_QWORD *)(v0 + 336);
        *(_QWORD *)(v0 + 280) = *(_QWORD *)(v0 + 328);
        *(_QWORD *)(v0 + 288) = v45;
        v46._countAndFlagsBits = 0xD00000000000001DLL;
        v46._object = (void *)0x800000010048B7D0;
        String.append(_:)(v46);
        v47 = sub_100012E18(&qword_1005DB360);
        _print_unlocked<A, B>(_:_:)(v90, v0 + 280, v47, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v48 = *(_QWORD *)(v0 + 288);
        *(_QWORD *)(v40 + 24) = sub_1003A4190(*(_QWORD *)(v0 + 280), v48, &v106);
        swift_bridgeObjectRelease(v48);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed assertion at %s:%lu: %s", (uint8_t *)v40, 0x20u);
        swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v104, v39);
      }
      else
      {

        sub_100012DDC(v90, &qword_1005DB360);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
      }
      sub_100012DDC(v0 + 112, &qword_1005DB360);
      sub_1000153C0(v101);
    }
    v64 = *(_QWORD *)(v0 + 840);
    v65 = *(_QWORD *)(v0 + 576);
    v66 = *(_QWORD *)(v0 + 568);
    v67 = *(_QWORD *)(v0 + 536);
    v68 = *(_QWORD *)(v0 + 424);
    v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 544) + 16);
    *(_QWORD *)(v0 + 952) = v69;
    v69(v66, v65, v67);
    v70 = objc_msgSend(*(id *)(v68 + v64), "fastSyncPaperKitEnablePCSEncryption");
    if ((v70 & 1) != 0)
    {
      GroupSessionMessenger.MessageContext.source.getter(v70);
      v71 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 960) = v71;
      *v71 = v0;
      v71[1] = sub_10038A9B4;
      v61 = *(_QWORD *)(v0 + 680);
    }
    else
    {
      v72 = *(_QWORD *)(v0 + 576);
      v73 = *(_QWORD *)(v0 + 568);
      v74 = *(_QWORD *)(v0 + 560);
      v75 = *(_QWORD *)(v0 + 544);
      v76 = *(_QWORD *)(v0 + 536);
      v77 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
      *(_QWORD *)(v0 + 976) = v77;
      v77(v73, v76);
      v78 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 32))(v74, v72, v76);
      GroupSessionMessenger.MessageContext.source.getter(v78);
      v79 = (_QWORD *)swift_task_alloc(dword_1005DB374);
      *(_QWORD *)(v0 + 984) = v79;
      *v79 = v0;
      v79[1] = sub_10038AA3C;
      v61 = *(_QWORD *)(v0 + 672);
    }
LABEL_25:
    sub_10038EFCC(v61, 3);
  }
}

Swift::Void __swiftcall RealtimeCollaborationMessageController.incrementNonFatalErrorCount()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v2 = *(_QWORD *)(v1 + 16);
  v3 = __OFADD__(v2, 1);
  v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 16) = v4;
    os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  }
}

uint64_t sub_10038E35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4[3] = a4;
  v5 = sub_100012E18(&qword_1005DB2E0);
  v4[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18((uint64_t *)&unk_1005DB1F0);
  v4[5] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[6] = v7;
  v4[7] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GroupSessionMessenger.MessageContext(0);
  v4[8] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[9] = v9;
  v4[10] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18(&qword_1005DB2E8);
  v4[11] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[12] = v11;
  v4[13] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005DB2F0);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012E18(&qword_1005DB2F8);
  v4[15] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[16] = v14;
  v4[17] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100012E18(&qword_1005DB300);
  v4[18] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[19] = v16;
  v4[20] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MessageChunking.UnsafeAppendingAccumulator(0);
  v4[21] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[22] = v18;
  v4[23] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10038E4DC, 0, 0);
}

uint64_t sub_10038E4DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[16];
  v1 = v0[17];
  v3 = v0[15];
  v4 = v0[11];
  MessageChunking.UnsafeAppendingAccumulator.init()();
  v5 = sub_100016638(&qword_1005DB308, &qword_1005DB2E8, (uint64_t)&protocol conformance descriptor for MessageChunking.Message<A>);
  v6 = sub_100016638(&qword_1005DB310, &qword_1005DB2E8, (uint64_t)&protocol conformance descriptor for MessageChunking.Message<A>);
  GroupSessionMessenger.messages<A>(of:)(v4, v4, v5, v6);
  GroupSessionMessenger.Messages.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[24] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  v7 = sub_100016638(&qword_1005DB318, &qword_1005DB300, (uint64_t)&protocol conformance descriptor for GroupSessionMessenger.Messages<A>.Iterator);
  v0[25] = v7;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[26] = v8;
  *v8 = v0;
  v8[1] = sub_10038E61C;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[14], v0[18], v7);
}

uint64_t sub_10038E61C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 208));
  if (v0)
  {
    *(_QWORD *)(v2 + 224) = v0;
    v3 = sub_10038EBC4;
  }
  else
  {
    *(_QWORD *)(v2 + 216) = 0;
    v3 = sub_10038E684;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_10038E684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = sub_100012E18(&qword_1005DB320);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 152) + 8))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10012A0B0(v3, (uint64_t)qword_1005DAFB0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "PaperKit subscriber task finished", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v0 + 80);
  v9 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = v1 + *(int *)(v2 + 48);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 96) + 32))(*(_QWORD *)(v0 + 104), v1, *(_QWORD *)(v0 + 88));
  v12.n128_f64[0] = (*(double (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v8, v11, v9);
  if ((static Task<>.isCancelled.getter(v12) & 1) != 0)
  {
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 96);
    v16 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 88);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
LABEL_9:
    v19 = *(_QWORD *)(v0 + 184);
    v20 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 136);
    v23 = *(_QWORD *)(v0 + 104);
    v22 = *(_QWORD *)(v0 + 112);
    v24 = *(_QWORD *)(v0 + 80);
    v25 = *(_QWORD *)(v0 + 56);
    v26 = *(_QWORD *)(v0 + 32);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 176) + 8))(v19, *(_QWORD *)(v0 + 168));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  v27 = *(_QWORD *)(v0 + 216);
  v28 = *(_QWORD *)(v0 + 104);
  v29 = *(_QWORD *)(v0 + 40);
  v30 = sub_100016638(&qword_1005DB258, (uint64_t *)&unk_1005DB1F0, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  v31 = sub_100016638(&qword_1005DB260, (uint64_t *)&unk_1005DB1F0, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  MessageChunking.UnsafeAppendingAccumulator.process<A>(incoming:)(v28, v29, v30, v31);
  if (v27)
  {
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v32 = type metadata accessor for Logger(0);
    sub_10012A0B0(v32, (uint64_t)qword_1005DAFB0);
    swift_errorRetain(v27);
    v33 = swift_errorRetain(v27);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.error.getter(v34, v35);
    if (os_log_type_enabled(v34, v36))
    {
      v37 = swift_slowAlloc(12, -1);
      v38 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138412290;
      swift_errorRetain(v27);
      v39 = _swift_stdlib_bridgeErrorToNSError(v27);
      *(_QWORD *)(v37 + 4) = v39;
      *v38 = v39;
      swift_errorRelease(v27);
      swift_errorRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Error processing incoming CloudKit message: %@", (uint8_t *)v37, 0xCu);
      v40 = sub_100012E18(&qword_1005D3A30);
      swift_arrayDestroy(v38, 1, v40);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      swift_errorRelease(v27);
      swift_errorRelease(v27);
    }
    v47 = *(_QWORD *)(v0 + 192);
    v48 = *(_QWORD *)(v0 + 24);

    v49 = *(_QWORD *)(v48 + v47);
    os_unfair_lock_lock((os_unfair_lock_t)(v49 + 24));
    v50 = *(_QWORD *)(v49 + 16);
    v51 = __OFADD__(v50, 1);
    v52 = v50 + 1;
    if (!v51)
    {
      v54 = *(_QWORD *)(v0 + 96);
      v53 = *(_QWORD *)(v0 + 104);
      v56 = *(_QWORD *)(v0 + 80);
      v55 = *(_QWORD *)(v0 + 88);
      v57 = *(_QWORD *)(v0 + 64);
      v58 = *(_QWORD *)(v0 + 72);
      *(_QWORD *)(v49 + 16) = v52;
      os_unfair_lock_unlock((os_unfair_lock_t)(v49 + 24));
      swift_errorRelease(v27);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v56, v57);
      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
      goto LABEL_20;
    }
    __break(1u);
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 40);
    v42 = *(_QWORD *)(v0 + 48);
    v43 = *(_QWORD *)(v0 + 32);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v41) == 1)
    {
      v45 = *(_QWORD *)(v0 + 96);
      v44 = *(_QWORD *)(v0 + 104);
      v46 = *(_QWORD *)(v0 + 88);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 72) + 8))(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      sub_100012DDC(v43, &qword_1005DB2E0);
LABEL_20:
      v59 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
      *(_QWORD *)(v0 + 248) = v59;
      *v59 = v0;
      v59[1] = sub_10038ED30;
      dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 200));
      return;
    }
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v42 + 32))(*(_QWORD *)(v0 + 56), v43, v41);
    v60 = (_QWORD *)swift_task_alloc(dword_1005DB32C);
    *(_QWORD *)(v0 + 232) = v60;
    *v60 = v0;
    v60[1] = sub_10038EC24;
    sub_100386468(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  }
}

uint64_t sub_10038EBC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 224);
  v1 = sub_100012E18(&qword_1005D7A90);
  v2 = swift_dynamicCast(v1, v0 + 16, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_10038EC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10038ED98;
  else
    v3 = sub_10038EC88;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10038EC88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[12];
  v1 = v0[13];
  v4 = v0[10];
  v3 = v0[11];
  v5 = v0[8];
  v6 = v0[9];
  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[31] = v7;
  *v7 = v0;
  v7[1] = sub_10038ED30;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[14], v0[18], v0[25]);
}

uint64_t sub_10038ED30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 248));
  if (v0)
  {
    *(_QWORD *)(v2 + 224) = v0;
    v3 = sub_10038EBC4;
  }
  else
  {
    *(_QWORD *)(v2 + 216) = 0;
    v3 = sub_10038E684;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_10038ED98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  v1 = v0[30];
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v2 = type metadata accessor for Logger(0);
  sub_10012A0B0(v2, (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.error.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v7 + 4) = v9;
    *v8 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Error processing incoming CloudKit message: %@", (uint8_t *)v7, 0xCu);
    v10 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v11 = v0[24];
  v12 = v0[3];

  v13 = *(_QWORD *)(v12 + v11);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    v18 = v0[12];
    v17 = v0[13];
    v20 = v0[10];
    v19 = v0[11];
    v21 = v0[8];
    v22 = v0[9];
    *(_QWORD *)(v13 + 16) = v16;
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    v0[31] = v23;
    *v23 = v0;
    v23[1] = sub_10038ED30;
    dispatch thunk of AsyncIteratorProtocol.next()(v0[14], v0[18], v0[25]);
  }
}

uint64_t sub_10038EFCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_100012E18(&qword_1005D6E60);
  v3[9] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[10] = swift_task_alloc(v5);
  v3[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_10038F040, 0, 0);
}

uint64_t sub_10038F040()
{
  _QWORD *v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80[2];

  v1 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_share);
  v2 = (os_unfair_lock_s *)(v1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  v3 = *(void **)(v1 + 16);
  v4 = v3;
  os_unfair_lock_unlock(v2);
  if (!v3)
  {
    if (qword_1005CED68 != -1)
      swift_once(&qword_1005CED68, sub_10037B908);
    v24 = v0[10];
    v25 = sub_10012A0B0(v0[9], (uint64_t)qword_1005DAFC8);
    sub_100012CE8(v25, v24, &qword_1005D6E60);
    v26 = type metadata accessor for Logger(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v24, 1, v26);
    v29 = v0[10];
    if (v28 != 1)
    {
      v30 = swift_retain_n(v0[8], 2);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.debug.getter();
      v33 = os_log_type_enabled(v31, v32);
      v34 = v0[8];
      if (v33)
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        *(_DWORD *)v35 = 136315138;
        v80[0] = v36;
        v37 = EditNoteActivity.noteID.getter(v36);
        v39 = v38;
        v0[2] = sub_1003A4190(v37, v38, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v35 + 4);
        swift_bridgeObjectRelease(v39);
        swift_release_n(v34, 2);
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Skipping participant validation because the note %s is not shared", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

        swift_release_n(v34, 2);
      }
      (*(void (**)(_QWORD, uint64_t))(v27 + 8))(v0[10], v26);
      goto LABEL_26;
    }
    goto LABEL_19;
  }
  v5 = v4;
  Participant.handle.getter(v5);
  v7 = v6;
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v5, "ic_participantWithHandle:", v8, swift_bridgeObjectRelease(v7).n128_f64[0]);

  if (v9)
  {
    if (objc_msgSend(v9, "acceptanceStatus") != (id)2)
    {
      v47 = type metadata accessor for FastSyncError(0);
      v48 = sub_100019C6C(&qword_1005DB2B0, (uint64_t (*)(uint64_t))&type metadata accessor for FastSyncError, (uint64_t)&protocol conformance descriptor for FastSyncError);
      swift_allocError(v47, v48, 0, 0);
      v50 = v49;
      v51 = objc_msgSend(v9, "description");
      v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      v54 = v53;

      *v50 = v52;
      v50[1] = v54;
      v23 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v50, enum case for FastSyncError.notAcceptedShare(_:), v47);
      goto LABEL_13;
    }
    v10 = v0[7];
    if ((uint64_t)objc_msgSend(v9, "permission") < v10)
    {
      v11 = v0[7];
      v12 = type metadata accessor for FastSyncError(0);
      v13 = sub_100019C6C(&qword_1005DB2B0, (uint64_t (*)(uint64_t))&type metadata accessor for FastSyncError, (uint64_t)&protocol conformance descriptor for FastSyncError);
      swift_allocError(v12, v13, 0, 0);
      v15 = v14;
      v16 = objc_msgSend(v9, "description");
      v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v19 = v18;

      v0[5] = v11;
      v20 = sub_100156368();
      v21 = BinaryInteger.description.getter(&type metadata for Int, v20);
      *v15 = v17;
      v15[1] = v19;
      v15[2] = v21;
      v15[3] = v22;
      v23 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v15, enum case for FastSyncError.noPermission(_:), v12);
LABEL_13:
      swift_willThrow(v23);

      goto LABEL_14;
    }
    if (qword_1005CED68 != -1)
      swift_once(&qword_1005CED68, sub_10037B908);
    v57 = v0[11];
    v58 = sub_10012A0B0(v0[9], (uint64_t)qword_1005DAFC8);
    sub_100012CE8(v58, v57, &qword_1005D6E60);
    v59 = type metadata accessor for Logger(0);
    v60 = *(_QWORD *)(v59 - 8);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v57, 1, v59);
    v29 = v0[11];
    if (v61 != 1)
    {
      v62 = v9;
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v76 = v0[7];
        v79 = v60;
        v65 = swift_slowAlloc(22, -1);
        v75 = (_QWORD *)swift_slowAlloc(8, -1);
        v78 = swift_slowAlloc(32, -1);
        v80[0] = v78;
        *(_DWORD *)v65 = 138412546;
        v0[3] = v62;
        v66 = v62;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v65 + 4);
        *v75 = v9;
        v77 = v66;

        *(_WORD *)(v65 + 12) = 2080;
        v67 = (id)CKStringFromParticipantPermission(v76);
        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
        v70 = v69;

        v0[4] = sub_1003A4190(v68, v70, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v65 + 14);
        swift_bridgeObjectRelease(v70);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Validated participant %@ has minimum permission: %s", (uint8_t *)v65, 0x16u);
        v71 = sub_100012E18(&qword_1005D3A30);
        swift_arrayDestroy(v75, 1, v71);
        swift_slowDealloc(v75, -1, -1);
        swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v78, -1, -1);
        v72 = v65;
        v60 = v79;
        swift_slowDealloc(v72, -1, -1);

      }
      else
      {

      }
      (*(void (**)(_QWORD, uint64_t))(v60 + 8))(v0[11], v59);
      goto LABEL_26;
    }

LABEL_19:
    sub_100012DDC(v29, &qword_1005D6E60);
LABEL_26:
    v73 = v0[10];
    swift_task_dealloc(v0[11]);
    swift_task_dealloc(v73);
    v56 = (uint64_t (*)(void))v0[1];
    return v56();
  }
  v40 = type metadata accessor for FastSyncError(0);
  v41 = sub_100019C6C(&qword_1005DB2B0, (uint64_t (*)(uint64_t))&type metadata accessor for FastSyncError, (uint64_t)&protocol conformance descriptor for FastSyncError);
  v42 = swift_allocError(v40, v41, 0, 0);
  v44 = v43;
  *v43 = Participant.handle.getter(v42);
  v44[1] = v45;
  v46 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v44, enum case for FastSyncError.handleNotInShare(_:), v40);
  swift_willThrow(v46);
LABEL_14:

  v55 = v0[10];
  swift_task_dealloc(v0[11]);
  swift_task_dealloc(v55);
  v56 = (uint64_t (*)(void))v0[1];
  return v56();
}

uint64_t sub_10038F7A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for OSSignpostError(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OSSignpostID(0);
  v3[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[11] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v8);
  v3[13] = swift_task_alloc(v8);
  v3[14] = swift_task_alloc(v8);
  return swift_task_switch(sub_10038F84C, 0, 0);
}

uint64_t sub_10038F84C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_signpost_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint8_t *v10;
  os_signpost_id_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  id v23;
  Class isa;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  if (qword_1005CED70 != -1)
    swift_once(&qword_1005CED70, sub_10037B954);
  v1 = type metadata accessor for OSSignposter(0);
  v2 = sub_10012A0B0(v1, (uint64_t)qword_1005DAFE0);
  v0[15] = v2;
  v3 = static OSSignpostID.exclusive.getter(v2);
  v4 = OSSignposter.logHandle.getter(v3);
  v5 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v6 = v0[13];
    v7 = v0[10];
    v8 = v0[11];
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v9(v6, v0[14], v7);
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    v11 = OSSignpostID.rawValue.getter(v10);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, v5, v11, "Deserialize", "", v10, 2u);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    v12 = v0[11];

    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  }
  v0[16] = v9;
  v13 = v0[13];
  v14 = v0[14];
  v15 = v0[10];
  v16 = v0[11];
  v17 = v0[5];
  v18 = v0[6];
  v19 = v0[4];
  v9(v13, v14, v15);
  v20 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v0[17] = OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  v21 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[18] = v21;
  v21(v14, v15);
  v22 = *(_QWORD *)(v18 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudDatabase);
  v23 = objc_allocWithZone((Class)CKDeserializeRecordModificationsOperation);
  sub_10013DCA0(v19, v17);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v25 = objc_msgSend(v23, "initWithSerializedModifications:", isa);
  v0[19] = v25;
  sub_10013DD30(v19, v17);

  objc_msgSend(v25, "setQualityOfService:", 25);
  v26 = swift_task_alloc(32);
  v0[20] = v26;
  *(_QWORD *)(v26 + 16) = v25;
  *(_QWORD *)(v26 + 24) = v22;
  v27 = swift_task_alloc(32);
  v0[21] = v27;
  *(_QWORD *)(v27 + 16) = v25;
  v28 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[22] = v28;
  v29 = sub_100012E18(&qword_1005DB398);
  *v28 = v0;
  v28[1] = sub_10038FAF8;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v0 + 2, &unk_1005DB390, v26, sub_1003945AC, v27, 0, 0, v29);
}

uint64_t sub_10038FAF8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10038FD5C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 160);
    swift_task_dealloc(*(_QWORD *)(v2 + 168));
    swift_task_dealloc(v5);
    v4 = sub_10038FB6C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10038FB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_signpost_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  os_signpost_id_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v3 = OSSignposter.logHandle.getter(v2);
  v4 = OSSignpostIntervalState.signpostID.getter();
  v5 = static os_signpost_type_t.end.getter(v4);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v27 = v1;
    v6 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 64);
    v8 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 56);
    v10 = swift_retain(v6);
    checkForErrorAndConsumeState(state:)(v10);
    swift_release(v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v8, v9) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v11 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 64) + 8))(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
      v11 = "";
    }
    v17 = *(_QWORD *)(v0 + 136);
    v16 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    v19 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 128))(v18, v19, v20);
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v5, v22, "Deserialize", v11, v21, 2u);
    swift_slowDealloc(v21, -1, -1);

    v16(v19, v20);
    swift_release(v17);
    v16(v18, v20);
    v1 = v27;
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 136);
    v12 = *(void (**)(uint64_t, uint64_t))(v0 + 144);
    v14 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 80);

    v12(v14, v15);
    swift_release(v13);
  }
  v23 = *(_QWORD *)(v0 + 104);
  v24 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10038FD5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 72);

  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_release(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10038FDF4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v6 = sub_100012E18((uint64_t *)&unk_1005DB330);
  v17 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_unfair_lock_lock((os_unfair_lock_t)(a3 + 24));
  v9 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain(v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(a3 + 24));
  if (!((unint64_t)v9 >> 62))
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease(v9);
    return;
  }
  if (v9 < 0)
    v15 = v9;
  else
    v15 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v10 = _CocoaArrayWrapper.endIndex.getter(v15);
  swift_bridgeObjectRelease(v9);
  if (!v10)
    goto LABEL_14;
LABEL_3:
  if (v10 >= 1)
  {
    v11 = 0;
    do
    {
      if ((v9 & 0xC000000000000001) != 0)
      {
        v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v9);
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 8 * v11 + 32);
        swift_retain(v12);
      }
      ++v11;
      v18[0] = a1;
      v18[1] = a2;
      sub_10013DCA0(a1, a2);
      v13 = sub_100012E18(&qword_1005CF7B8);
      AsyncStream.Continuation.yield(_:)(v18, v13);
      v14 = swift_release(v12);
      (*(void (**)(char *, uint64_t, __n128))(v17 + 8))(v8, v6, v14);
    }
    while (v10 != v11);
    goto LABEL_14;
  }
  __break(1u);
}

uint64_t sub_10038FFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4[7] = a4;
  v5 = type metadata accessor for FastSyncError(0);
  v4[8] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[9] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v7);
  v4[11] = swift_task_alloc(v7);
  v8 = sub_100012E18(&qword_1005DB268);
  v4[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[13] = v9;
  v4[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for FastSync.NoteContentMessage(0);
  v4[15] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[16] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v12);
  v4[18] = swift_task_alloc(v12);
  v13 = sub_100012E18((uint64_t *)&unk_1005DB2A0);
  v4[19] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[20] = v14;
  v4[21] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003900AC, 0, 0);
}

uint64_t sub_1003900AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100012E18(&qword_1005CF788);
  AsyncStream.makeAsyncIterator()(v1);
  *(_QWORD *)(v0 + 176) = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  *(_DWORD *)(v0 + 248) = enum case for FastSyncError.messageSendFailed(_:);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 184) = v2;
  *v2 = v0;
  v2[1] = sub_10039016C;
  return AsyncStream.Iterator.next(isolation:)(v0 + 32, 0, 0, *(_QWORD *)(v0 + 152));
}

uint64_t sub_10039016C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  return swift_task_switch(sub_1003901C0, 0, 0);
}

void sub_1003901C0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __objc2_meth_list **p_inst_meths;
  uint64_t *v19;
  id i;
  void *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  __objc2_meth_list **v27;
  unint64_t v28;
  id v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  NSObject *log;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = *(_QWORD *)(v1 + 32);
  if (!v2)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 160) + 8))(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 152));
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10012A0B0(v3, (uint64_t)qword_1005DAFB0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "CloudKit publisher task finished", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    goto LABEL_9;
  }
  if ((static Task<>.isCancelled.getter(a1) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 160) + 8))(*(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 152));
    swift_bridgeObjectRelease(v2);
LABEL_9:
    v8 = *(_QWORD *)(v1 + 136);
    v9 = *(_QWORD *)(v1 + 144);
    v10 = *(_QWORD *)(v1 + 112);
    v12 = *(_QWORD *)(v1 + 80);
    v11 = *(_QWORD *)(v1 + 88);
    swift_task_dealloc(*(_QWORD *)(v1 + 168));
    swift_task_dealloc(v9);
    swift_task_dealloc(v8);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    (*(void (**)(void))(v1 + 8))();
    return;
  }
  v13 = sub_100394040(v2);
  *(_QWORD *)(v1 + 192) = v13;
  swift_bridgeObjectRelease(v2);
  v43 = v13;
  v39 = v1;
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0)
      v37 = v13;
    else
      v37 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v14 = _CocoaArrayWrapper.endIndex.getter(v37);
    if (v14)
      goto LABEL_12;
LABEL_28:
    swift_bridgeObjectRelease(v43);
    v38 = (_QWORD *)swift_task_alloc(dword_1005DB23C);
    *(_QWORD *)(v39 + 200) = v38;
    *v38 = v39;
    v38[1] = sub_1003905F0;
    sub_100390ED0(v43);
    return;
  }
  v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v13);
  if (!v14)
    goto LABEL_28;
LABEL_12:
  v15 = v14 - 1;
  if (v14 >= 1)
  {
    v16 = 0;
    v17 = v43 & 0xC000000000000001;
    p_inst_meths = &OBJC_PROTOCOL___ICNoteBrowseNavigationItemConfigurationDataSource.inst_meths;
    v19 = qword_1005DAFB0;
    if ((v43 & 0xC000000000000001) == 0)
      goto LABEL_15;
    while (1)
    {
      for (i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v43);
            ;
            i = *(id *)(v43 + 8 * v16 + 32))
      {
        v21 = i;
        if (p_inst_meths[428] != (__objc2_meth_list *)-1)
          swift_once(&qword_1005CED60, sub_10037B8C0);
        v22 = type metadata accessor for Logger(0);
        sub_10012A0B0(v22, (uint64_t)v19);
        v23 = v21;
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = swift_slowAlloc(12, -1);
          v41 = swift_slowAlloc(32, -1);
          v44 = v41;
          *(_DWORD *)v26 = 136315138;
          log = v24;
          v27 = p_inst_meths;
          v28 = v17;
          v29 = objc_msgSend(v23, "ic_loggingDescription");
          v30 = v19;
          v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
          v42 = v16;
          v32 = v15;
          v34 = v33;

          v17 = v28;
          p_inst_meths = v27;
          v35 = v31;
          v19 = v30;
          *(_QWORD *)(v26 + 4) = sub_1003A4190(v35, v34, &v44);
          v36 = v34;
          v15 = v32;
          v16 = v42;
          swift_bridgeObjectRelease(v36);

          _os_log_impl((void *)&_mh_execute_header, log, v25, "Sending CloudKit record: %s", (uint8_t *)v26, 0xCu);
          swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v41, -1, -1);
          swift_slowDealloc(v26, -1, -1);

          if (v15 == v42)
            goto LABEL_28;
        }
        else
        {

          if (v15 == v16)
            goto LABEL_28;
        }
        ++v16;
        if (v17)
          break;
LABEL_15:
        ;
      }
    }
  }
  __break(1u);
}

uint64_t sub_1003905F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 200);
  v4[26] = a1;
  v4[27] = a2;
  v4[28] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_100390868;
  }
  else
  {
    swift_bridgeObjectRelease(v4[24]);
    v6 = sub_100390668;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100390668()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;

  v1 = v0[26];
  v2 = v0[27];
  v4 = v0[17];
  v3 = v0[18];
  v5 = v0[15];
  v6 = v0[16];
  sub_10013DCA0(v1, v2);
  FastSync.NoteContentMessage.init(recordBatchData:)(v1, v2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
  v7 = type metadata accessor for FastSync.Notes(0);
  v8 = sub_100019C6C(&qword_1005DB2B8, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.NoteContentMessage, (uint64_t)&protocol conformance descriptor for FastSync.NoteContentMessage);
  FastSync.MessageContainer.init<A>(message:)(v4, v7, v5, v8);
  v9 = (uint64_t **)swift_task_alloc(dword_1005DB284);
  v0[29] = (uint64_t)v9;
  *v9 = v0;
  v9[1] = (uint64_t *)sub_100390750;
  return sub_1003914E4(v0[14]);
}

uint64_t sub_100390750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100390B84;
  else
    v3 = sub_1003907B4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003907B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[18];
  v3 = v0[15];
  v2 = v0[16];
  v5 = v0[13];
  v4 = v0[14];
  v6 = v0[12];
  sub_10013DD30(v0[26], v0[27]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[23] = v7;
  *v7 = v0;
  v7[1] = sub_10039016C;
  return AsyncStream.Iterator.next(isolation:)(v0 + 4, 0, 0, v0[19]);
}

void sub_100390868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 224);
  *(_QWORD *)(v0 + 40) = v1;
  v2 = *(unsigned int *)(v0 + 248);
  v3 = *(_QWORD **)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v6 = sub_100012E18(&qword_1005D7A90);
  _print_unlocked<A, B>(_:_:)(v0 + 40, v0 + 16, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v7 = *(_QWORD *)(v0 + 24);
  *v3 = *(_QWORD *)(v0 + 16);
  v3[1] = v7;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v4 + 104))(v3, v2, v5);
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v9 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  v12 = type metadata accessor for Logger(0);
  sub_10012A0B0(v12, (uint64_t)qword_1005DAFB0);
  v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v14 = v13(v9, v8, v11);
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.error.getter(v15, v16);
  v18 = os_log_type_enabled(v15, v17);
  v20 = *(_QWORD *)(v0 + 72);
  v19 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 64);
  if (v18)
  {
    v39 = v1;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 138412290;
    v23 = sub_100019C6C(&qword_1005DB2B0, (uint64_t (*)(uint64_t))&type metadata accessor for FastSyncError, (uint64_t)&protocol conformance descriptor for FastSyncError);
    v24 = swift_allocError(v21, v23, 0, 0);
    v13(v25, v19, v21);
    v26 = _swift_stdlib_bridgeErrorToNSError(v24);
    *(_QWORD *)(v0 + 48) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v22 + 4);
    *v38 = v26;
    v1 = v39;
    v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v27(v19, v21);
    _os_log_impl((void *)&_mh_execute_header, v15, v17, "%@", v22, 0xCu);
    v28 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v38, 1, v28);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v27(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }
  v29 = *(_QWORD *)(v0 + 176);
  v30 = *(_QWORD *)(v0 + 56);

  v31 = *(_QWORD *)(v30 + v29);
  os_unfair_lock_lock((os_unfair_lock_t)(v31 + 24));
  v32 = *(_QWORD *)(v31 + 16);
  v33 = __OFADD__(v32, 1);
  v34 = v32 + 1;
  if (v33)
  {
    __break(1u);
  }
  else
  {
    v35 = *(_QWORD *)(v0 + 88);
    v36 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v31 + 16) = v34;
    os_unfair_lock_unlock((os_unfair_lock_t)(v31 + 24));
    swift_errorRelease(v1);
    v27(v35, v36);
    v37 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 184) = v37;
    *v37 = v0;
    v37[1] = sub_10039016C;
    AsyncStream.Iterator.next(isolation:)(v0 + 32, 0, 0, *(_QWORD *)(v0 + 152));
  }
}

void sub_100390B84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  sub_10013DD30(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v7 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 40) = v7;
  v8 = *(unsigned int *)(v0 + 248);
  v9 = *(_QWORD **)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  v12 = sub_100012E18(&qword_1005D7A90);
  _print_unlocked<A, B>(_:_:)(v0 + 40, v0 + 16, v12, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v13 = *(_QWORD *)(v0 + 24);
  *v9 = *(_QWORD *)(v0 + 16);
  v9[1] = v13;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v10 + 104))(v9, v8, v11);
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v15 = *(_QWORD *)(v0 + 80);
  v14 = *(_QWORD *)(v0 + 88);
  v17 = *(_QWORD *)(v0 + 64);
  v16 = *(_QWORD *)(v0 + 72);
  v18 = type metadata accessor for Logger(0);
  sub_10012A0B0(v18, (uint64_t)qword_1005DAFB0);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v20 = v19(v15, v14, v17);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.error.getter(v21, v22);
  v24 = os_log_type_enabled(v21, v23);
  v26 = *(_QWORD *)(v0 + 72);
  v25 = *(_QWORD *)(v0 + 80);
  v27 = *(_QWORD *)(v0 + 64);
  if (v24)
  {
    v45 = v7;
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v28 = 138412290;
    v29 = sub_100019C6C(&qword_1005DB2B0, (uint64_t (*)(uint64_t))&type metadata accessor for FastSyncError, (uint64_t)&protocol conformance descriptor for FastSyncError);
    v30 = swift_allocError(v27, v29, 0, 0);
    v19(v31, v25, v27);
    v32 = _swift_stdlib_bridgeErrorToNSError(v30);
    *(_QWORD *)(v0 + 48) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v28 + 4);
    *v44 = v32;
    v7 = v45;
    v33 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v33(v25, v27);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "%@", v28, 0xCu);
    v34 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v44, 1, v34);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    v33 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v33(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64));
  }
  v35 = *(_QWORD *)(v0 + 176);
  v36 = *(_QWORD *)(v0 + 56);

  v37 = *(_QWORD *)(v36 + v35);
  os_unfair_lock_lock((os_unfair_lock_t)(v37 + 24));
  v38 = *(_QWORD *)(v37 + 16);
  v39 = __OFADD__(v38, 1);
  v40 = v38 + 1;
  if (v39)
  {
    __break(1u);
  }
  else
  {
    v41 = *(_QWORD *)(v0 + 88);
    v42 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v37 + 16) = v40;
    os_unfair_lock_unlock((os_unfair_lock_t)(v37 + 24));
    swift_errorRelease(v7);
    v33(v41, v42);
    v43 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(_QWORD *)(v0 + 184) = v43;
    *v43 = v0;
    v43[1] = sub_10039016C;
    AsyncStream.Iterator.next(isolation:)(v0 + 32, 0, 0, *(_QWORD *)(v0 + 152));
  }
}

uint64_t sub_100390ED0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for OSSignpostError(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OSSignpostID(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[11] = swift_task_alloc(v7);
  v2[12] = swift_task_alloc(v7);
  v2[13] = swift_task_alloc(v7);
  return swift_task_switch(sub_100390F74, 0, 0);
}

uint64_t sub_100390F74()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_signpost_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint8_t *v10;
  os_signpost_id_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  __n128 v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  if (qword_1005CED70 != -1)
    swift_once(&qword_1005CED70, sub_10037B954);
  v1 = type metadata accessor for OSSignposter(0);
  v2 = sub_10012A0B0(v1, (uint64_t)qword_1005DAFE0);
  v0[14] = v2;
  v3 = static OSSignpostID.exclusive.getter(v2);
  v4 = OSSignposter.logHandle.getter(v3);
  v5 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v6 = v0[12];
    v7 = v0[9];
    v8 = v0[10];
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v9(v6, v0[13], v7);
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    v11 = OSSignpostID.rawValue.getter(v10);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, v5, v11, "Serialize", "", v10, 2u);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    v12 = v0[10];

    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  }
  v0[15] = v9;
  v13 = v0[12];
  v14 = v0[13];
  v15 = v0[9];
  v16 = v0[10];
  v17 = v0[4];
  v18 = v0[5];
  v9(v13, v14, v15);
  v19 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v0[16] = OSSignpostIntervalState.init(id:isOpen:)(v13, 1);
  v20 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[17] = v20;
  v20(v14, v15);
  v21 = *(_QWORD *)(v18 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudDatabase);
  sub_1000163BC(0, &qword_1005DB240, CKSerializeRecordModificationsOperation_ptr);
  v22 = swift_bridgeObjectRetain(v17);
  v23 = (void *)CKSerializeRecordModificationsOperation.init(recordsToSave:recordIDsToDelete:)(v22);
  v0[18] = v23;
  objc_msgSend(v23, "setQualityOfService:", 25);
  v24 = swift_task_alloc(32);
  v0[19] = v24;
  *(_QWORD *)(v24 + 16) = v23;
  *(_QWORD *)(v24 + 24) = v21;
  v25 = swift_task_alloc(32);
  v0[20] = v25;
  *(_QWORD *)(v25 + 16) = v23;
  v26 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[21] = v26;
  *v26 = v0;
  v26[1] = sub_1003911E4;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v0 + 2, &unk_1005DB248, v24, sub_100394038, v25, 0, 0, &type metadata for Data);
}

uint64_t sub_1003911E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10039144C;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 152);
    swift_task_dealloc(*(_QWORD *)(v2 + 160));
    swift_task_dealloc(v5);
    v4 = sub_100391258;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100391258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_signpost_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  os_signpost_id_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = OSSignposter.logHandle.getter(v3);
  v5 = OSSignpostIntervalState.signpostID.getter();
  v6 = static os_signpost_type_t.end.getter(v5);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v28 = v2;
    v7 = *(_QWORD *)(v0 + 128);
    v8 = *(_QWORD *)(v0 + 56);
    v9 = *(_QWORD *)(v0 + 64);
    v10 = *(_QWORD *)(v0 + 48);
    v11 = swift_retain(v7);
    checkForErrorAndConsumeState(state:)(v11);
    swift_release(v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v8 + 88))(v9, v10) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v12 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
      v12 = "";
    }
    v29 = v1;
    v18 = *(_QWORD *)(v0 + 128);
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
    v20 = *(_QWORD *)(v0 + 88);
    v19 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 72);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 120))(v19, v20, v21);
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    v23 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, v6, v23, "Serialize", v12, v22, 2u);
    swift_slowDealloc(v22, -1, -1);

    v17(v20, v21);
    swift_release(v18);
    v17(v19, v21);
    v2 = v28;
    v1 = v29;
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 128);
    v13 = *(void (**)(uint64_t, uint64_t))(v0 + 136);
    v15 = *(_QWORD *)(v0 + 88);
    v16 = *(_QWORD *)(v0 + 72);

    v13(v15, v16);
    swift_release(v14);
  }
  v24 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, v2);
}

uint64_t sub_10039144C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 64);

  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_release(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003914E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for OSSignpostError(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OSSignpostID(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  return swift_task_switch(sub_100391588, 0, 0);
}

uint64_t sub_100391588()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_signpost_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint8_t *v10;
  os_signpost_id_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_1005CED70 != -1)
    swift_once(&qword_1005CED70, sub_10037B954);
  v1 = type metadata accessor for OSSignposter(0);
  v2 = sub_10012A0B0(v1, (uint64_t)qword_1005DAFE0);
  v0[12] = v2;
  v3 = static OSSignpostID.exclusive.getter(v2);
  v4 = OSSignposter.logHandle.getter(v3);
  v5 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v6 = v0[10];
    v7 = v0[7];
    v8 = v0[8];
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v9(v6, v0[11], v7);
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    v11 = OSSignpostID.rawValue.getter(v10);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, v5, v11, "Send", "", v10, 2u);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    v12 = v0[8];

    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  }
  v0[13] = v9;
  v14 = v0[10];
  v13 = v0[11];
  v15 = v0[7];
  v16 = v0[8];
  v17 = v0[3];
  v9(v14, v13, v15);
  v18 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v0[14] = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
  v19 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[15] = v19;
  v19(v13, v15);
  v20 = objc_msgSend(*(id *)(v17 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration), "fastSyncMaximumMessageSizeBytes");
  v21 = (_QWORD *)swift_task_alloc(async function pointer to GroupSessionMessenger.ic_sendChunked<A>(_:size:)[1]);
  v0[16] = v21;
  v22 = sub_100012E18(&qword_1005DB268);
  v23 = sub_100016638(&qword_1005DB290, &qword_1005DB268, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  v24 = sub_100016638(&qword_1005DB298, &qword_1005DB268, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  *v21 = v0;
  v21[1] = sub_1003917D4;
  return GroupSessionMessenger.ic_sendChunked<A>(_:size:)(v0[2], v20, v22, v23, v24);
}

uint64_t sub_1003917D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100391A0C;
  else
    v3 = sub_100391838;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100391838(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  os_signpost_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  os_signpost_id_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = OSSignposter.logHandle.getter(a1);
  v3 = OSSignpostIntervalState.signpostID.getter();
  v4 = static os_signpost_type_t.end.getter(v3);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v5 = *(_QWORD *)(v1 + 112);
    v7 = *(_QWORD *)(v1 + 40);
    v6 = *(_QWORD *)(v1 + 48);
    v8 = *(_QWORD *)(v1 + 32);
    v9 = swift_retain(v5);
    checkForErrorAndConsumeState(state:)(v9);
    swift_release(v5);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(v7 + 88))(v6, v8) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v10 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 40) + 8))(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 32));
      v10 = "";
    }
    v15 = *(_QWORD *)(v1 + 112);
    v16 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v18 = *(_QWORD *)(v1 + 72);
    v17 = *(_QWORD *)(v1 + 80);
    v19 = *(_QWORD *)(v1 + 56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 104))(v17, v18, v19);
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    v21 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v2, v4, v21, "Send", v10, v20, 2u);
    swift_slowDealloc(v20, -1, -1);

    v16(v18, v19);
    swift_release(v15);
    v16(v17, v19);
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 112);
    v12 = *(void (**)(uint64_t, uint64_t))(v1 + 120);
    v13 = *(_QWORD *)(v1 + 72);
    v14 = *(_QWORD *)(v1 + 56);

    v12(v13, v14);
    swift_release(v11);
  }
  v22 = *(_QWORD *)(v1 + 80);
  v23 = *(_QWORD *)(v1 + 72);
  v24 = *(_QWORD *)(v1 + 48);
  swift_task_dealloc(*(_QWORD *)(v1 + 88));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100391A0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100391A74(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for OSSignpostError(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v2[6] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OSSignpostID(0);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[8] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v7);
  v2[10] = swift_task_alloc(v7);
  v2[11] = swift_task_alloc(v7);
  return swift_task_switch(sub_100391B18, 0, 0);
}

uint64_t sub_100391B18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_signpost_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint8_t *v10;
  os_signpost_id_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (qword_1005CED70 != -1)
    swift_once(&qword_1005CED70, sub_10037B954);
  v1 = type metadata accessor for OSSignposter(0);
  v2 = sub_10012A0B0(v1, (uint64_t)qword_1005DAFE0);
  v0[12] = v2;
  v3 = static OSSignpostID.exclusive.getter(v2);
  v4 = OSSignposter.logHandle.getter(v3);
  v5 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v6 = v0[10];
    v7 = v0[7];
    v8 = v0[8];
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    v9(v6, v0[11], v7);
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    v11 = OSSignpostID.rawValue.getter(v10);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, v5, v11, "Send", "", v10, 2u);
    swift_slowDealloc(v10, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  }
  else
  {
    v12 = v0[8];

    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
  }
  v0[13] = v9;
  v14 = v0[10];
  v13 = v0[11];
  v15 = v0[7];
  v16 = v0[8];
  v17 = v0[3];
  v9(v14, v13, v15);
  v18 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v0[14] = OSSignpostIntervalState.init(id:isOpen:)(v14, 1);
  v19 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[15] = v19;
  v19(v13, v15);
  v20 = objc_msgSend(*(id *)(v17 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration), "fastSyncMaximumMessageSizeBytes");
  v21 = (_QWORD *)swift_task_alloc(async function pointer to GroupSessionMessenger.ic_sendChunked<A>(_:size:)[1]);
  v0[16] = v21;
  v22 = sub_100012E18((uint64_t *)&unk_1005DB1F0);
  v23 = sub_100016638(&qword_1005DB258, (uint64_t *)&unk_1005DB1F0, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  v24 = sub_100016638(&qword_1005DB260, (uint64_t *)&unk_1005DB1F0, (uint64_t)&protocol conformance descriptor for FastSync.MessageContainer<A>);
  *v21 = v0;
  v21[1] = sub_100391D64;
  return GroupSessionMessenger.ic_sendChunked<A>(_:size:)(v0[2], v20, v22, v23, v24);
}

uint64_t sub_100391D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003945B4;
  else
    v3 = sub_1003945B8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100391DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[3] = a4;
  v5 = sub_100012E18(&qword_1005DB268);
  v4[4] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[5] = v6;
  v4[6] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D6E60);
  v4[7] = v7;
  v4[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for FastSync.SelectionMessage(0);
  v4[9] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[10] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v10);
  v4[12] = swift_task_alloc(v10);
  v4[13] = swift_task_alloc(v10);
  v11 = sub_100012E18(&qword_1005DB270);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005D6E38);
  v4[15] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[16] = v13;
  v4[17] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100391EE8, 0, 0);
}

uint64_t sub_100391EE8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = sub_100012E18(&qword_1005CF770);
  AsyncStream.makeAsyncIterator()(v1);
  v0[18] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  v2 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[19] = v2;
  *v2 = v0;
  v2[1] = sub_100391F88;
  return AsyncStream.Iterator.next(isolation:)(v0[14], 0, 0, v0[15]);
}

uint64_t sub_100391F88()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  return swift_task_switch(sub_100391FDC, 0, 0);
}

uint64_t sub_100391FDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, _QWORD, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10012A0B0(v4, (uint64_t)qword_1005DAFB0);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Selection publisher task finished", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    goto LABEL_9;
  }
  v9.n128_f64[0] = (*(double (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 104), v1, v2);
  if ((static Task<>.isCancelled.getter(v9) & 1) != 0)
  {
    v11 = *(_QWORD *)(v0 + 128);
    v10 = *(_QWORD *)(v0 + 136);
    v12 = *(_QWORD *)(v0 + 120);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 80) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 72));
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
LABEL_9:
    v13 = *(_QWORD *)(v0 + 104);
    v14 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 88);
    v15 = *(_QWORD *)(v0 + 96);
    v17 = *(_QWORD *)(v0 + 64);
    v18 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 136));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_1005CED68 != -1)
    swift_once(&qword_1005CED68, sub_10037B908);
  v20 = *(_QWORD *)(v0 + 64);
  v21 = sub_10012A0B0(*(_QWORD *)(v0 + 56), (uint64_t)qword_1005DAFC8);
  sub_100012CE8(v21, v20, &qword_1005D6E60);
  v22 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 160) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v20, 1, v22) == 1)
  {
    v24 = *(_QWORD *)(v0 + 80);
    sub_100012DDC(*(_QWORD *)(v0 + 64), &qword_1005D6E60);
    v25 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v24 + 16);
  }
  else
  {
    v25 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v0 + 80) + 16);
    v26 = v25(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 72));
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter();
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 96);
    v32 = *(_QWORD *)(v0 + 72);
    v31 = *(_QWORD *)(v0 + 80);
    if (v29)
    {
      v44 = *(_QWORD *)(v0 + 80);
      v33 = swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v46 = v45;
      *(_DWORD *)v33 = 136315138;
      v34 = sub_100019C6C(&qword_1005D6E40, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.SelectionMessage, (uint64_t)&protocol conformance descriptor for FastSync.SelectionMessage);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v32, v34);
      v37 = v36;
      *(_QWORD *)(v33 + 4) = sub_1003A4190(v35, v36, &v46);
      v38 = swift_bridgeObjectRelease(v37);
      (*(void (**)(uint64_t, uint64_t, __n128))(v44 + 8))(v30, v32, v38);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Sending selection message: %s", (uint8_t *)v33, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
    }
    (*(void (**)(_QWORD, uint64_t))(v23 + 8))(*(_QWORD *)(v0 + 64), v22);
  }
  v39 = *(_QWORD *)(v0 + 88);
  v40 = *(_QWORD *)(v0 + 72);
  v25(v39, *(_QWORD *)(v0 + 104), v40);
  v41 = type metadata accessor for FastSync.Notes(0);
  v42 = sub_100019C6C(&qword_1005DB278, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.SelectionMessage, (uint64_t)&protocol conformance descriptor for FastSync.SelectionMessage);
  FastSync.MessageContainer.init<A>(message:)(v39, v41, v40, v42);
  v43 = (_QWORD *)swift_task_alloc(dword_1005DB284);
  *(_QWORD *)(v0 + 168) = v43;
  *v43 = v0;
  v43[1] = sub_10039241C;
  return sub_1003914E4(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10039241C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003924FC;
  else
    v3 = sub_100392480;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100392480()
{
  _QWORD *v0;
  _QWORD *v1;

  (*(void (**)(_QWORD, _QWORD))(v0[5] + 8))(v0[6], v0[4]);
  (*(void (**)(_QWORD, _QWORD))(v0[10] + 8))(v0[13], v0[9]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[19] = v1;
  *v1 = v0;
  v1[1] = sub_100391F88;
  return AsyncStream.Iterator.next(isolation:)(v0[14], 0, 0, v0[15]);
}

void sub_1003924FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  (*(void (**)(_QWORD, _QWORD))(v0[5] + 8))(v0[6], v0[4]);
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v1 = v0[22];
  sub_10012A0B0(v0[20], (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.error.getter(v3, v4);
  v6 = os_log_type_enabled(v3, v5);
  v7 = v0[22];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    v0[2] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v8 + 4);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Error sending selection message: %@", v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v0[22]);
    swift_errorRelease(v7);
  }
  v12 = v0[18];
  v13 = v0[3];

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    v18 = v0[22];
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    swift_errorRelease(v18);
    (*(void (**)(_QWORD, _QWORD))(v0[10] + 8))(v0[13], v0[9]);
    v19 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[19] = v19;
    *v19 = v0;
    v19[1] = sub_100391F88;
    AsyncStream.Iterator.next(isolation:)(v0[14], 0, 0, v0[15]);
  }
}

uint64_t sub_10039274C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[5] = a4;
  v5 = sub_100012E18((uint64_t *)&unk_1005DB1F0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v4[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D6E60);
  v4[9] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[10] = swift_task_alloc(v8);
  v4[11] = swift_task_alloc(v8);
  v9 = type metadata accessor for FastSync.PaperKitMessage(0);
  v4[12] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[13] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[14] = swift_task_alloc(v11);
  v4[15] = swift_task_alloc(v11);
  v12 = sub_100012E18((uint64_t *)&unk_1005DB200);
  v4[16] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[17] = v13;
  v4[18] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10039284C, 0, 0);
}

uint64_t sub_10039284C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = sub_100012E18(&qword_1005CF7A8);
  AsyncStream.makeAsyncIterator()(v1);
  v2 = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount;
  v0[19] = OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration;
  v0[20] = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[21] = v3;
  *v3 = v0;
  v3[1] = sub_100392900;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[16]);
}

uint64_t sub_100392900()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  return swift_task_switch(sub_100392954, 0, 0);
}

uint64_t sub_100392954(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 176) = v2;
  *(_QWORD *)(v1 + 184) = v3;
  if (v3 >> 60 == 15)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 136) + 8))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 128));
    if (qword_1005CED60 != -1)
      swift_once(&qword_1005CED60, sub_10037B8C0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10012A0B0(v4, (uint64_t)qword_1005DAFB0);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "PaperKit publisher task finished", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    goto LABEL_9;
  }
  if ((static Task<>.isCancelled.getter(a1) & 1) != 0)
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 136) + 8))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 128));
    sub_1001672D8(v2, v3);
LABEL_9:
    v9 = *(_QWORD *)(v1 + 112);
    v10 = *(_QWORD *)(v1 + 120);
    v12 = *(_QWORD *)(v1 + 80);
    v11 = *(_QWORD *)(v1 + 88);
    v13 = *(_QWORD *)(v1 + 64);
    swift_task_dealloc(*(_QWORD *)(v1 + 144));
    swift_task_dealloc(v10);
    swift_task_dealloc(v9);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  if (objc_msgSend(*(id *)(*(_QWORD *)(v1 + 40) + *(_QWORD *)(v1 + 152)), "fastSyncPaperKitEnablePCSEncryption"))
  {
    v15 = (_QWORD *)swift_task_alloc(dword_1005DB22C);
    *(_QWORD *)(v1 + 192) = v15;
    *v15 = v1;
    v15[1] = sub_100392DA4;
    v16 = *(_QWORD *)(v1 + 40);
    v15[3] = v3;
    v15[4] = v16;
    v15[2] = v2;
    return swift_task_switch(sub_100393938, 0, 0);
  }
  else
  {
    if (qword_1005CED68 != -1)
      swift_once(&qword_1005CED68, sub_10037B908);
    v17 = *(_QWORD *)(v1 + 80);
    v18 = sub_10012A0B0(*(_QWORD *)(v1 + 72), (uint64_t)qword_1005DAFC8);
    sub_100012CE8(v18, v17, &qword_1005D6E60);
    v19 = type metadata accessor for Logger(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v17, 1, v19) == 1)
    {
      sub_100012DDC(*(_QWORD *)(v1 + 80), &qword_1005D6E60);
    }
    else
    {
      v21 = sub_10013DCA0(v2, v3);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v23))
      {
        *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
        __asm { BR              X10 }
      }

      sub_1001672D8(v2, v3);
      (*(void (**)(_QWORD, uint64_t))(v20 + 8))(*(_QWORD *)(v1 + 80), v19);
    }
    sub_10013DCA0(v2, v3);
    FastSync.PaperKitMessage.init(data:)(v2, v3);
    v24 = *(_QWORD *)(v1 + 112);
    v25 = *(_QWORD *)(v1 + 96);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v1 + 104) + 16))(v24, *(_QWORD *)(v1 + 120), v25);
    v26 = type metadata accessor for FastSync.PaperKit(0);
    v27 = sub_100019C6C(&qword_1005DB210, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.PaperKitMessage, (uint64_t)&protocol conformance descriptor for FastSync.PaperKitMessage);
    FastSync.MessageContainer.init<A>(message:)(v24, v26, v25, v27);
    v28 = (_QWORD *)swift_task_alloc(dword_1005DB21C);
    *(_QWORD *)(v1 + 256) = v28;
    *v28 = v1;
    v28[1] = sub_1003931CC;
    return sub_100391A74(*(_QWORD *)(v1 + 64));
  }
}

uint64_t sub_100392DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 192);
  *(_QWORD *)(v3 + 200) = a1;
  *(_QWORD *)(v3 + 208) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1003932E4;
  else
    v5 = sub_100392E10;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100392E10()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = (void *)v0[25];
  v2 = sub_100012E18(&qword_1005CF6F0);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100456F30;
  *(_QWORD *)(v3 + 32) = v1;
  v8 = v3;
  specialized Array._endMutation()(v3);
  v0[27] = v8;
  v4 = dword_1005DB23C;
  v5 = v1;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v0[28] = v6;
  *v6 = v0;
  v6[1] = sub_100392EB4;
  return sub_100390ED0(v8);
}

uint64_t sub_100392EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 224);
  v4[29] = a1;
  v4[30] = a2;
  v4[31] = v2;
  swift_task_dealloc(v5);
  if (v2)
  {
    v6 = sub_1003934E4;
  }
  else
  {
    swift_bridgeObjectRelease(v4[27]);
    v6 = sub_100392F2C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100392F2C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  if (qword_1005CED68 != -1)
    swift_once(&qword_1005CED68, sub_10037B908);
  v1 = v0[11];
  v2 = sub_10012A0B0(v0[9], (uint64_t)qword_1005DAFC8);
  sub_100012CE8(v2, v1, &qword_1005D6E60);
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1, v3) == 1)
  {
    sub_100012DDC(v0[11], &qword_1005D6E60);
  }
  else
  {
    v5 = sub_10013DCA0(v0[29], v0[30]);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = v0[30];
    if (v8)
    {
      *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
      __asm { BR              X10 }
    }
    v10 = v0[29];

    sub_10013DD30(v10, v9);
    (*(void (**)(_QWORD, uint64_t))(v4 + 8))(v0[11], v3);
  }
  v11 = (void *)v0[25];
  FastSync.PaperKitMessage.init(data:)(v0[29], v0[30]);

  v12 = v0[14];
  v13 = v0[12];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[13] + 16))(v12, v0[15], v13);
  v14 = type metadata accessor for FastSync.PaperKit(0);
  v15 = sub_100019C6C(&qword_1005DB210, (uint64_t (*)(uint64_t))&type metadata accessor for FastSync.PaperKitMessage, (uint64_t)&protocol conformance descriptor for FastSync.PaperKitMessage);
  FastSync.MessageContainer.init<A>(message:)(v12, v14, v13, v15);
  v16 = (_QWORD *)swift_task_alloc(dword_1005DB21C);
  v0[32] = v16;
  *v16 = v0;
  v16[1] = sub_1003931CC;
  return sub_100391A74(v0[8]);
}

uint64_t sub_1003931CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003936F4;
  else
    v3 = sub_100393230;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100393230()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[15];
  v3 = v0[12];
  v2 = v0[13];
  v5 = v0[7];
  v4 = v0[8];
  v6 = v0[6];
  sub_1001672D8(v0[22], v0[23]);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[21] = v7;
  *v7 = v0;
  v7[1] = sub_100392900;
  return AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[16]);
}

void sub_1003932E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0[26];
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v2 = type metadata accessor for Logger(0);
  sub_10012A0B0(v2, (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.error.getter(v4, v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v7 + 4) = v9;
    *v8 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "Error sending PaperKit message: %@", (uint8_t *)v7, 0xCu);
    v10 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }
  v11 = v0[20];
  v12 = v0[5];

  v13 = *(_QWORD *)(v12 + v11);
  os_unfair_lock_lock((os_unfair_lock_t)(v13 + 24));
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
  }
  else
  {
    v18 = v0[22];
    v17 = v0[23];
    *(_QWORD *)(v13 + 16) = v16;
    os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 24));
    sub_1001672D8(v18, v17);
    swift_errorRelease(v1);
    v19 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[21] = v19;
    *v19 = v0;
    v19[1] = sub_100392900;
    AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[16]);
  }
}

void sub_1003934E4()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = (void *)v0[25];
  swift_bridgeObjectRelease(v0[27]);

  v2 = v0[31];
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v3 = type metadata accessor for Logger(0);
  sub_10012A0B0(v3, (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.error.getter(v5, v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v2);
    v10 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Error sending PaperKit message: %@", (uint8_t *)v8, 0xCu);
    v11 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  v12 = v0[20];
  v13 = v0[5];

  v14 = *(_QWORD *)(v13 + v12);
  os_unfair_lock_lock((os_unfair_lock_t)(v14 + 24));
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    v19 = v0[22];
    v18 = v0[23];
    *(_QWORD *)(v14 + 16) = v17;
    os_unfair_lock_unlock((os_unfair_lock_t)(v14 + 24));
    sub_1001672D8(v19, v18);
    swift_errorRelease(v2);
    v20 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[21] = v20;
    *v20 = v0;
    v20[1] = sub_100392900;
    AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[16]);
  }
}

void sub_1003936F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0[15];
  v2 = v0[12];
  v3 = v0[13];
  (*(void (**)(_QWORD, _QWORD))(v0[7] + 8))(v0[8], v0[6]);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = v0[33];
  if (qword_1005CED60 != -1)
    swift_once(&qword_1005CED60, sub_10037B8C0);
  v5 = type metadata accessor for Logger(0);
  sub_10012A0B0(v5, (uint64_t)qword_1005DAFB0);
  swift_errorRetain(v4);
  v6 = swift_errorRetain(v4);
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.error.getter(v7, v8);
  if (os_log_type_enabled(v7, v9))
  {
    v10 = swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138412290;
    swift_errorRetain(v4);
    v12 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(_QWORD *)(v10 + 4) = v12;
    *v11 = v12;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Error sending PaperKit message: %@", (uint8_t *)v10, 0xCu);
    v13 = sub_100012E18(&qword_1005D3A30);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }
  v14 = v0[20];
  v15 = v0[5];

  v16 = *(_QWORD *)(v15 + v14);
  os_unfair_lock_lock((os_unfair_lock_t)(v16 + 24));
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    v21 = v0[22];
    v20 = v0[23];
    *(_QWORD *)(v16 + 16) = v19;
    os_unfair_lock_unlock((os_unfair_lock_t)(v16 + 24));
    sub_1001672D8(v21, v20);
    swift_errorRelease(v4);
    v22 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[21] = v22;
    *v22 = v0;
    v22[1] = sub_100392900;
    AsyncStream.Iterator.next(isolation:)(v0 + 2, 0, 0, v0[16]);
  }
}

uint64_t sub_10039391C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_100393938, 0, 0);
}

uint64_t sub_100393938()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  void *v7;
  id v8;
  Swift::String v9;
  Class isa;
  objc_class *v11;
  Swift::String v12;
  CKRecord v13;
  id v14;
  id v15;
  uint64_t ObjectType;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  void *v26;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 32)+ OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudConfiguration), "fastSyncPaperKitEnableEphemeralRecords");
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  if ((_DWORD)v1)
  {
    v5._countAndFlagsBits = EditNoteActivity.noteID.getter(v1);
    object = v5._object;
    v23 = 0xD000000000000010;
    v24 = 0x800000010048B7B0;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    sub_1000163BC(0, &qword_1005DB1B0, CKRecordID_ptr);
    v7 = *(void **)(v3 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_encryptionParentRecordID);
    v8 = objc_msgSend(v7, "zoneID");
    v9._countAndFlagsBits = 0xD000000000000010;
    v9._object = (void *)0x800000010048B7B0;
    isa = CKRecordID.init(recordName:zoneID:)(v9, (CKRecordZoneID)v8).super.isa;
    sub_1000163BC(0, &qword_1005DB250, CKRecord_ptr);
    v11 = isa;
    v12._countAndFlagsBits = 4935760;
    v12._object = (void *)0xE300000000000000;
    v13.super.isa = CKRecord.init(recordType:recordID:)(v12, (CKRecordID)v11).super.isa;
    v14 = objc_msgSend(objc_allocWithZone((Class)CKReference), "initWithRecordID:action:", v7, 0);
    -[objc_class setParent:](v13.super.isa, "setParent:", v14);

    v15 = -[objc_class encryptedValues](v13.super.isa, "encryptedValues");
    ObjectType = swift_getObjectType(v15);
    v25 = &type metadata for Data;
    v26 = &protocol witness table for Data;
    v23 = v4;
    v24 = v2;
    sub_10013DCA0(v4, v2);
    CKRecordKeyValueSetting.subscript.setter(&v23, 68, 0xE100000000000000, ObjectType);

    swift_unknownObjectRelease(v15, v17);
  }
  else
  {
    v18 = *(void **)(v3 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitTemplateRecord);
    v19 = objc_msgSend(v18, "encryptedValues");
    v20 = swift_getObjectType(v19);
    v25 = &type metadata for Data;
    v26 = &protocol witness table for Data;
    v23 = v4;
    v24 = v2;
    sub_10013DCA0(v4, v2);
    CKRecordKeyValueSetting.subscript.setter(&v23, 68, 0xE100000000000000, v20);
    swift_unknownObjectRelease(v19, v21);
    v13.super.isa = (Class)v18;
  }
  return (*(uint64_t (**)(Class))(v0 + 8))(v13.super.isa);
}

_QWORD *sub_100393BA4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t RealtimeCollaborationMessageController.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_activity;
  v2 = type metadata accessor for EditNoteActivity(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_messenger));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_encryptionParentRecordID));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_share));

  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudKitRecords);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_cloudKitRecords
                          + 8));
  swift_release(v3);
  v4 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_selectionMessages);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_selectionMessages
                          + 8));
  swift_release(v4);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitInbox));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_paperKitOutbox));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_subtasks));
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes38RealtimeCollaborationMessageController_nonFatalErrorCount));
  return v0;
}

uint64_t RealtimeCollaborationMessageController.__deallocating_deinit()
{
  uint64_t v0;

  RealtimeCollaborationMessageController.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100393D00()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100393D28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1005DB06C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100145358;
  return sub_10037CF54(a1, v4, v5, v6);
}

uint64_t sub_100393D94()
{
  return type metadata accessor for RealtimeCollaborationMessageController(0);
}

uint64_t type metadata accessor for RealtimeCollaborationMessageController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DB0A8;
  if (!qword_1005DB0A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RealtimeCollaborationMessageController);
  return result;
}

uint64_t sub_100393DD8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[14];

  result = type metadata accessor for EditNoteActivity(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[8] = &unk_1004658E8;
    v4[9] = &unk_1004658E8;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[12] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    return swift_updateClassMetadata2(a1, 256, 14, v4, a1 + 80);
  }
  return result;
}

uint64_t sub_100393E88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1005DB1BC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100145358;
  return sub_10038FFAC(a1, v4, v5, v6);
}

uint64_t sub_100393EF8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1005DB1CC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100130768;
  return sub_100391DC8(a1, v4, v5, v6);
}

uint64_t sub_100393F68(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1005DB1DC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100145358;
  return sub_10039274C(a1, v4, v5, v6);
}

uint64_t sub_100393FD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005DCE2C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100130768;
  return sub_1003DF6C4(a1, v5, v4);
}

id sub_100394038()
{
  uint64_t v0;

  return sub_1003DF990(*(void **)(v0 + 16));
}

uint64_t sub_100394040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_signpost_type_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint8_t *v19;
  os_signpost_id_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  void *v24;
  uint64_t v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  char *v31;
  uint64_t v32;
  os_signpost_type_t v33;
  uint64_t v34;
  char *v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  uint8_t *v41;
  os_signpost_id_t v42;
  __n128 v43;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v49 = a1;
  v48 = type metadata accessor for OSSignpostError(0);
  v1 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v46 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OSSignpostID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v45 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v45 - v11;
  if (qword_1005CED70 != -1)
    swift_once(&qword_1005CED70, sub_10037B954);
  v47 = v1;
  v50 = v7;
  v13 = type metadata accessor for OSSignposter(0);
  v14 = sub_10012A0B0(v13, (uint64_t)qword_1005DAFE0);
  v15 = static OSSignpostID.exclusive.getter(v14);
  v16 = OSSignposter.logHandle.getter(v15);
  v17 = static os_signpost_type_t.begin.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v18 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
    v18(v10, v12, v3);
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    v20 = OSSignpostID.rawValue.getter(v19);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v16, v17, v20, "Sort", "", v19, 2u);
    swift_slowDealloc(v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v4 + 8))(v10, v3);
  }
  else
  {

    v18 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  }
  v18(v10, v12, v3);
  v21 = type metadata accessor for OSSignpostIntervalState(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = OSSignpostIntervalState.init(id:isOpen:)(v10, 1);
  v23 = *(void (**)(char *, uint64_t))(v4 + 8);
  v23(v12, v3);
  v24 = (void *)objc_opt_self(ICCloudContext);
  v25 = sub_1000163BC(0, &qword_1005DB250, CKRecord_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v27 = objc_msgSend(v24, "sortedRecords:", isa);

  v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v25);
  v30 = OSSignposter.logHandle.getter(v29);
  v31 = v50;
  v32 = OSSignpostIntervalState.signpostID.getter();
  v33 = static os_signpost_type_t.end.getter(v32);
  if ((OS_os_log.signpostsEnabled.getter() & 1) != 0)
  {
    v49 = v28;
    v34 = swift_retain(v22);
    v35 = v46;
    checkForErrorAndConsumeState(state:)(v34);
    v36 = swift_release(v22);
    v38 = v47;
    v37 = v48;
    if ((*(unsigned int (**)(char *, uint64_t, __n128))(v47 + 88))(v35, v48, v36) == enum case for OSSignpostError.doubleEnd(_:))
    {
      v39 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v38 + 8))(v35, v37);
      v39 = "";
    }
    v40 = v50;
    v18(v10, v50, v3);
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    v42 = OSSignpostID.rawValue.getter(v41);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v30, v33, v42, "Sort", v39, v41, 2u);
    swift_slowDealloc(v41, -1, -1);

    v23(v40, v3);
    v43 = swift_release(v22);
    ((void (*)(char *, uint64_t, __n128))v23)(v10, v3, v43);
    return v49;
  }
  else
  {

    v23(v31, v3);
    swift_release(v22);
  }
  return v28;
}

uint64_t sub_100394440(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1005DB2C4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100145358;
  return sub_10037D9AC(a1, v4, v5, v6);
}

uint64_t sub_1003944B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16), a2);
  swift_release(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_1003944DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1005DB2D4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100145358;
  return sub_10038E35C(a1, v4, v5, v6);
}

uint64_t sub_100394548(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005DCE34);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100145358;
  return sub_1003DF9C4(a1, v5, v4);
}

uint64_t sub_1003945AC()
{
  uint64_t v0;

  return sub_1003DFC78(*(_QWORD *)(v0 + 16));
}

_QWORD *sub_1003945C0(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if ((unint64_t)a1 >> 62)
    goto LABEL_14;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = _swiftEmptyArrayStorage;
    if (!v2)
      break;
    result = (_QWORD *)specialized ContiguousArray.reserveCapacity(_:)(v2);
    if (v2 < 0)
    {
      __break(1u);
      return result;
    }
    v4 = 0;
    while (v2 != v4)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v5 = *(id *)(a1 + 8 * v4 + 32);
      v6 = v5;
      ++v4;
      v7 = objc_msgSend(v5, "objectID");

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      v8 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8);
      v9 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v7);
      specialized ContiguousArray._endMutation()(v9);
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_14:
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a1);
  }
  return result;
}

void sub_100394700(uint64_t *a1)
{
  uint64_t v2;
  void (*v3)(void **__return_ptr, uint64_t *);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  id v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(id *__return_ptr, uint64_t *);
  void (*v38)(_QWORD *__return_ptr, uint64_t *);
  uint64_t v39;
  void (*v40)(_QWORD *__return_ptr, uint64_t *);
  uint64_t v41;
  uint64_t (*v42)(id *);
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD *);
  void *v46;
  uint64_t v47[17];
  _QWORD v48[7];
  id v49;

  v2 = *a1;
  v3 = (void (*)(void **__return_ptr, uint64_t *))a1[1];
  v4 = a1[2];
  v45 = (uint64_t (*)(_QWORD *))a1[3];
  v5 = a1[4];
  v38 = (void (*)(_QWORD *__return_ptr, uint64_t *))a1[5];
  v39 = a1[6];
  v40 = (void (*)(_QWORD *__return_ptr, uint64_t *))a1[7];
  v41 = a1[8];
  v42 = (uint64_t (*)(id *))a1[9];
  v43 = a1[10];
  if ((*a1 & 0xC000000000000001) != 0)
  {
    if (v2 < 0)
      v6 = *a1;
    else
      v6 = v2 & 0xFFFFFFFFFFFFFF8;
    sub_10039740C(a1);
    v7 = __CocoaSet.makeIterator()(v6);
    v8 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    v9 = sub_100167280();
    v10 = (_QWORD *)Set.Iterator.init(_cocoa:)(v7, v8, v9);
    v2 = v48[1];
    v44 = v48[2];
    v11 = v48[3];
    v12 = v48[4];
    v13 = v48[5];
  }
  else
  {
    v14 = -1 << *(_BYTE *)(v2 + 32);
    v44 = v2 + 56;
    v15 = ~v14;
    v16 = -v14;
    if (v16 < 64)
      v17 = ~(-1 << v16);
    else
      v17 = -1;
    v13 = v17 & *(_QWORD *)(v2 + 56);
    v10 = sub_10039740C(a1);
    v11 = v15;
    v12 = 0;
  }
  v36 = a1[12];
  v37 = (void (*)(id *__return_ptr, uint64_t *))a1[11];
  v35 = v11;
  v18 = (unint64_t)(v11 + 64) >> 6;
  while (v2 < 0)
  {
    v21 = __CocoaSet.Iterator.next()(v10);
    if (!v21)
      goto LABEL_32;
    v22 = v21;
    v46 = (void *)v21;
    v23 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(v47, &v46, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v24 = (id)v47[0];
    swift_unknownObjectRelease(v22, v25);
    if (!v24)
      goto LABEL_32;
LABEL_28:
    v47[0] = (uint64_t)v24;
    v3(&v46, v47);

    v30 = v46;
    v48[0] = v46;
    if ((v45(v48) & 1) == 0)
      goto LABEL_29;
    v47[0] = (uint64_t)v30;
    v38(v48, v47);

    v31 = (void *)v48[0];
    v47[0] = v48[0];
    v40(v48, v47);

    v30 = (void *)v48[0];
    v49 = (id)v48[0];
    if ((v42(&v49) & 1) != 0)
    {
      v47[0] = (uint64_t)v30;
      v37(&v49, v47);

      v32 = v49;
      v33 = objc_msgSend(v49, "isSharedViaICloud");

      if ((v33 & 1) != 0)
        goto LABEL_32;
    }
    else
    {
LABEL_29:

    }
  }
  if (v13)
  {
    v19 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    v20 = v19 | (v12 << 6);
    goto LABEL_27;
  }
  v26 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v26 >= v18)
    {
      v13 = 0;
LABEL_32:
      v47[0] = v2;
      v47[1] = v44;
      v47[2] = v35;
      v47[3] = v12;
      v47[4] = v13;
      v47[5] = (uint64_t)v3;
      v47[6] = v4;
      v47[7] = (uint64_t)v45;
      v47[8] = v5;
      v47[9] = (uint64_t)v38;
      v47[10] = v39;
      v47[11] = (uint64_t)v40;
      v47[12] = v41;
      v47[13] = (uint64_t)v42;
      v47[14] = v43;
      v47[15] = (uint64_t)v37;
      v47[16] = v36;
      sub_100397494(v47);
      return;
    }
    v27 = *(_QWORD *)(v44 + 8 * v26);
    if (v27)
      goto LABEL_26;
    v28 = v12 + 2;
    if (v12 + 2 >= v18)
    {
      v13 = 0;
      ++v12;
      goto LABEL_32;
    }
    v27 = *(_QWORD *)(v44 + 8 * v28);
    if (v27)
      goto LABEL_22;
    v29 = v12 + 3;
    if (v12 + 3 >= v18)
      goto LABEL_45;
    v27 = *(_QWORD *)(v44 + 8 * v29);
    if (!v27)
    {
      v28 = v12 + 4;
      if (v12 + 4 >= v18)
        goto LABEL_46;
      v27 = *(_QWORD *)(v44 + 8 * v28);
      if (v27)
      {
LABEL_22:
        v26 = v28;
LABEL_26:
        v13 = (v27 - 1) & v27;
        v20 = __clz(__rbit64(v27)) + (v26 << 6);
        v12 = v26;
LABEL_27:
        v24 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v20);
        if (!v24)
          goto LABEL_32;
        goto LABEL_28;
      }
      v29 = v12 + 5;
      if (v12 + 5 >= v18)
      {
LABEL_45:
        v13 = 0;
        v12 = v28;
        goto LABEL_32;
      }
      v27 = *(_QWORD *)(v44 + 8 * v29);
      if (!v27)
      {
        v26 = v12 + 6;
        if (v12 + 6 >= v18)
        {
LABEL_46:
          v13 = 0;
          v12 = v29;
          goto LABEL_32;
        }
        v27 = *(_QWORD *)(v44 + 8 * v26);
        if (!v27)
        {
          v34 = v12 + 7;
          while (v18 != v34)
          {
            v27 = *(_QWORD *)(v44 + 8 * v34++);
            if (v27)
            {
              v26 = v34 - 1;
              goto LABEL_26;
            }
          }
          v13 = 0;
          v12 = v18 - 1;
          goto LABEL_32;
        }
        goto LABEL_26;
      }
    }
    v26 = v29;
    goto LABEL_26;
  }
  __break(1u);
}

void sub_100394B90(id a1@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;

  v4 = *a2;
  v5 = objc_msgSend(a1, "managedObjectContext");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "objectWithID:", v4);

  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
}

id sub_100394C08@<X0>(void **a1@<X0>, _QWORD *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  id result;
  id v6;

  v3 = *a1;
  v4 = objc_opt_self(ICNote);
  result = (id)swift_dynamicCastObjCClass(v3, v4);
  v6 = result;
  if (result)
    result = v3;
  *a2 = v6;
  return result;
}

BOOL sub_100394C58(_QWORD *a1)
{
  return *a1 != 0;
}

id sub_100394C68@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = *a1;
  if (result)
  {
    *a2 = result;
    return result;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100394C7C(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t i;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  NSString v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  void *v14;
  id v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  void *v26;
  BOOL v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  id v32;
  NSString v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void *v46;
  uint64_t j;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSString v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  id v68;
  NSString v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  void *v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  NSString v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  NSString v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  id v102;
  NSString v103;
  id v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  id v114;
  NSString v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  NSString v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  id v131;
  NSString v132;
  id v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  id v141;
  NSString v142;
  id v143;
  uint64_t v144;
  unint64_t v145;
  id v146;
  NSString v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  id v155;
  NSString v156;
  id v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  id v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t inited;
  unint64_t v169;
  id v170;
  NSString v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  void *v180;
  unint64_t v181;
  uint64_t v182;
  uint64_t v183;
  id v184;
  _QWORD *v185;
  _BYTE v186[112];
  _BYTE v187[152];
  _BYTE v188[152];
  _BYTE v189[192];
  _BYTE v190[152];
  _BYTE v191[152];
  _QWORD *v192;

  v2 = a1;
  i = (uint64_t)_swiftEmptyArrayStorage;
  v192 = _swiftEmptyArrayStorage;
  v4 = (_QWORD *)(a1 >> 62);
  if (a1 >> 62)
    goto LABEL_145;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
LABEL_3:
  v182 = v2;
  v183 = v5;
  v178 = v4;
  if (v5)
  {
    if (v5 >= 1)
    {
      v6 = 0;
      v7 = v2 & 0xC000000000000001;
      while (1)
      {
        if (v7)
          v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v2);
        else
          v15 = *(id *)(v2 + 8 * v6 + 32);
        v14 = v15;
        v16 = objc_msgSend(v15, "standardizedContent");
        if (!v16)
          goto LABEL_14;
        v17 = v16;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v19 = v18;

        v20 = objc_msgSend(v14, "managedObjectContext");
        if (!v20)
          break;
        v8 = v20;
        v9 = (void *)objc_opt_self(ICNote);
        v10 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v19);
        v1 = (unint64_t)objc_msgSend(v9, "notesContainingHashtagWithStandarizedContent:context:", v10, v8);

        v11 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
        v12 = sub_100167280();
        v13 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)(v1, v11, v12);

        v14 = (void *)v1;
        v2 = v182;
LABEL_7:

        ++v6;
        sub_1001D8564((uint64_t)v13);
        v5 = v183;
        if (v183 == v6)
        {
          swift_bridgeObjectRelease(v2);
          v4 = v192;
          goto LABEL_20;
        }
      }
      swift_bridgeObjectRelease(v19);
      v2 = v182;
LABEL_14:
      if ((i & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter(i))
      {
        sub_100127DC8(i);
        v13 = v21;
      }
      else
      {
        v13 = &_swiftEmptySetSingleton;
      }
      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_150;
  }
  swift_bridgeObjectRelease(v2);
  v4 = _swiftEmptyArrayStorage;
LABEL_20:
  v22 = sub_10020BAFC((uint64_t)v4);
  swift_bridgeObjectRelease(v4);
  if ((v22 & 0xC000000000000001) != 0)
  {
    if (v22 < 0)
      v23 = v22;
    else
      v23 = v22 & 0xFFFFFFFFFFFFFF8;
    v177 = __CocoaSet.count.getter(v23);
  }
  else
  {
    v177 = *(_QWORD *)(v22 + 16);
  }
  swift_bridgeObjectRelease(v22);
  v192 = (_QWORD *)i;
  if (v5)
  {
    v181 = v2 & 0xC000000000000001;
    v179 = v2 + 32;
    swift_bridgeObjectRetain(v2);
    v1 = 0;
    while (1)
    {
      if (v181)
        v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v2);
      else
        v25 = *(id *)(v179 + 8 * v1);
      v26 = v25;
      v27 = __OFADD__(v1++, 1);
      if (v27)
      {
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        if (v2 < 0)
          v176 = v2;
        else
          v176 = v2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v2);
        v5 = _CocoaArrayWrapper.endIndex.getter(v176);
        goto LABEL_3;
      }
      v28 = objc_msgSend(v25, "standardizedContent");
      if (!v28)
        goto LABEL_50;
      i = (uint64_t)v28;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v30 = v29;

      v31 = objc_msgSend(v26, "account");
      if (!v31)
      {
        swift_bridgeObjectRelease(v30);
LABEL_50:
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
          && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
        {
          sub_100127DC8((uint64_t)_swiftEmptyArrayStorage);
          v24 = v49;

        }
        else
        {

          v24 = &_swiftEmptySetSingleton;
        }
        goto LABEL_29;
      }
      v32 = v31;
      i = objc_opt_self(ICFolder);
      v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v30);
      v180 = v32;
      v34 = objc_msgSend((id)i, "visibleSmartFoldersForHashtagStandardizedContent:account:", v33, v32);

      v35 = sub_1000163BC(0, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
      v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0)
          v50 = v2;
        else
          v50 = v2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v2);
        v36 = _CocoaArrayWrapper.endIndex.getter(v50);
        swift_bridgeObjectRelease(v2);
        if (!v36)
        {
LABEL_70:
          swift_bridgeObjectRelease(v2);
          v43 = (uint64_t)_swiftEmptyArrayStorage;
          v44 = (unint64_t)_swiftEmptyArrayStorage >> 62;
          if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
            goto LABEL_45;
          goto LABEL_71;
        }
      }
      else
      {
        v36 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (!v36)
          goto LABEL_70;
      }
      v185 = _swiftEmptyArrayStorage;
      v4 = &v185;
      specialized ContiguousArray.reserveCapacity(_:)(v36);
      if (v36 < 0)
        goto LABEL_143;
      v37 = 0;
      do
      {
        if ((v2 & 0xC000000000000001) != 0)
          v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v37, v2);
        else
          v38 = *(id *)(v2 + 8 * v37 + 32);
        v39 = v38;
        ++v37;
        v40 = objc_msgSend(v38, "objectID");

        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v41 = v185[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v41);
        v42 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v40);
        specialized ContiguousArray._endMutation()(v42);
      }
      while (v36 != v37);
      v43 = (uint64_t)v185;
      swift_bridgeObjectRelease(v2);
      v5 = v183;
      v44 = (unint64_t)v43 >> 62;
      if (!((unint64_t)v43 >> 62))
      {
LABEL_45:
        v4 = *(_QWORD **)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_46;
      }
LABEL_71:
      if (v43 < 0)
        v51 = v43;
      else
        v51 = v43 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v43);
      v4 = (_QWORD *)_CocoaArrayWrapper.endIndex.getter(v51);
      swift_bridgeObjectRelease(v43);
LABEL_46:
      i = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      v45 = sub_100167280();
      v185 = (_QWORD *)Set.init(minimumCapacity:)(v4, i, v45);
      if (v44)
      {
        if (v43 < 0)
          v4 = (_QWORD *)v43;
        else
          v4 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFF8);
        swift_bridgeObjectRetain(v43);
        v2 = _CocoaArrayWrapper.endIndex.getter(v4);
        swift_bridgeObjectRelease(v43);
        if (v2)
        {
LABEL_56:
          if (v2 < 1)
            goto LABEL_144;
          if ((v43 & 0xC000000000000001) != 0)
          {
            for (i = 0; i != v2; ++i)
            {
              v46 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v43);
              sub_100302C94((Swift::Int *)&v184, v46);

            }
          }
          else
          {
            for (j = 0; j != v2; ++j)
            {
              v48 = *(void **)(v43 + 8 * j + 32);
              sub_100302C94((Swift::Int *)&v184, v48);

            }
          }
        }
      }
      else
      {
        v2 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v2)
          goto LABEL_56;
      }

      swift_bridgeObjectRelease(v43);
      v24 = v185;
      v2 = v182;
LABEL_29:
      v4 = &v192;
      sub_1001D8564((uint64_t)v24);
      if (v1 == v5)
      {
        swift_bridgeObjectRelease(v2);
        i = (uint64_t)v192;
        break;
      }
    }
  }
  v52 = sub_10020BAFC(i);
  swift_bridgeObjectRelease(i);
  if ((v52 & 0xC000000000000001) != 0)
  {
    if (v52 < 0)
      v53 = v52;
    else
      v53 = v52 & 0xFFFFFFFFFFFFFF8;
    v4 = (_QWORD *)__CocoaSet.count.getter(v53);
  }
  else
  {
    v4 = *(_QWORD **)(v52 + 16);
  }
  swift_bridgeObjectRelease(v52);
  if (!v178)
  {
    v54 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v54)
      return;
LABEL_84:
    if (v54 == 2)
    {
      v1 = v2 & 0xC000000000000001;
      if ((v2 & 0xC000000000000001) != 0)
      {
LABEL_152:
        v78 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
        goto LABEL_101;
      }
      if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        v78 = *(id *)(v2 + 32);
LABEL_101:
        v79 = v78;
        v80 = objc_msgSend(v78, "displayText");

        if (!v80)
          return;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
        v82 = v81;

        v83 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v82);
        v84 = objc_msgSend(v83, "ic_withHashtagPrefix");

        v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
        v64 = v86;

        if (v1)
        {
          v87 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v2);
          goto LABEL_120;
        }
        if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
        {
          v87 = *(id *)(v2 + 40);
LABEL_120:
          v120 = v87;
          v121 = objc_msgSend(v87, "displayText");

          if (v121)
          {
            static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
            v123 = v122;

            v124 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v123);
            v125 = objc_msgSend(v124, "ic_withHashtagPrefix");

            v126 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
            v128 = v127;

            if ((uint64_t)v4 > 0)
            {
              v129 = sub_100012E18((uint64_t *)&unk_1005D5630);
              if (v177 > 0)
              {
                v66 = swift_allocObject(v129, 192, 7);
                *(_OWORD *)(v66 + 16) = xmmword_100457CB0;
                *(_QWORD *)(v66 + 56) = &type metadata for String;
                v130 = sub_1001797EC();
                *(_QWORD *)(v66 + 32) = v85;
                *(_QWORD *)(v66 + 40) = v64;
                *(_QWORD *)(v66 + 96) = &type metadata for String;
                *(_QWORD *)(v66 + 104) = v130;
                *(_QWORD *)(v66 + 64) = v130;
                *(_QWORD *)(v66 + 72) = v126;
                *(_QWORD *)(v66 + 80) = v128;
                *(_QWORD *)(v66 + 136) = &type metadata for Int;
                *(_QWORD *)(v66 + 144) = &protocol witness table for Int;
                *(_QWORD *)(v66 + 112) = v177;
                *(_QWORD *)(v66 + 176) = &type metadata for Int;
                *(_QWORD *)(v66 + 184) = &protocol witness table for Int;
                *(_QWORD *)(v66 + 152) = v4;
                v131 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
                v132 = String._bridgeToObjectiveC()();
                v133 = objc_msgSend(v131, "localizedStringForKey:value:table:", v132, 0, 0);

                v134 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
                v136 = v135;

                swift_bridgeObjectRetain(v136);
                sub_10012CED4(v66, v134, v136);
                swift_bridgeObjectRelease_n(v136, 2);
                swift_setDeallocating(v66);
                v74 = sub_100012E18(&qword_1005CFE68);
                v75 = v66 + 32;
                v76 = 4;
LABEL_131:
                swift_arrayDestroy(v75, v76, v74);
                swift_deallocClassInstance(v66, 32, 7);
                return;
              }
              inited = swift_initStackObject(v129, v187);
              *(_OWORD *)(inited + 16) = xmmword_100456A10;
              *(_QWORD *)(inited + 56) = &type metadata for String;
              v169 = sub_1001797EC();
              *(_QWORD *)(inited + 32) = v85;
              v154 = inited + 32;
              *(_QWORD *)(inited + 40) = v64;
              *(_QWORD *)(inited + 96) = &type metadata for String;
              *(_QWORD *)(inited + 104) = v169;
              *(_QWORD *)(inited + 64) = v169;
              *(_QWORD *)(inited + 72) = v126;
              *(_QWORD *)(inited + 80) = v128;
              *(_QWORD *)(inited + 136) = &type metadata for Int;
              *(_QWORD *)(inited + 144) = &protocol witness table for Int;
              *(_QWORD *)(inited + 112) = v4;
              v170 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
              v171 = String._bridgeToObjectiveC()();
              v172 = objc_msgSend(v170, "localizedStringForKey:value:table:", v171, 0, 0);

              v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v172);
              v175 = v174;

              swift_bridgeObjectRetain(v175);
              sub_10012CED4(inited, v173, v175);
              swift_bridgeObjectRelease_n(v175, 2);
              v161 = inited;
              goto LABEL_138;
            }
            if (v177 <= 0)
            {
              swift_bridgeObjectRelease(v64);
              v144 = v128;
              goto LABEL_128;
            }
            v162 = sub_100012E18((uint64_t *)&unk_1005D5630);
            v138 = swift_initStackObject(v162, v188);
            *(_OWORD *)(v138 + 16) = xmmword_100456A10;
            *(_QWORD *)(v138 + 56) = &type metadata for String;
            v163 = sub_1001797EC();
            *(_QWORD *)(v138 + 32) = v85;
            v140 = v138 + 32;
            *(_QWORD *)(v138 + 40) = v64;
            *(_QWORD *)(v138 + 96) = &type metadata for String;
            *(_QWORD *)(v138 + 104) = v163;
            *(_QWORD *)(v138 + 64) = v163;
            *(_QWORD *)(v138 + 72) = v126;
            *(_QWORD *)(v138 + 80) = v128;
            *(_QWORD *)(v138 + 136) = &type metadata for Int;
            *(_QWORD *)(v138 + 144) = &protocol witness table for Int;
            *(_QWORD *)(v138 + 112) = v177;
            v141 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v142 = String._bridgeToObjectiveC()();
            v143 = objc_msgSend(v141, "localizedStringForKey:value:table:", v142, 0, 0);
LABEL_136:
            v164 = v143;

            v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v164);
            v167 = v166;

            swift_bridgeObjectRetain(v167);
            sub_10012CED4(v138, v165, v167);
            swift_bridgeObjectRelease_n(v167, 2);
            swift_setDeallocating(v138);
            v108 = sub_100012E18(&qword_1005CFE68);
            v109 = v140;
LABEL_139:
            v110 = 3;
            goto LABEL_140;
          }
LABEL_127:
          v144 = v64;
LABEL_128:
          swift_bridgeObjectRelease(v144);
          return;
        }
        goto LABEL_157;
      }
      __break(1u);
    }
    else
    {
      if (v54 == 1)
      {
        if ((v2 & 0xC000000000000001) != 0)
        {
LABEL_150:
          v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
          goto LABEL_89;
        }
        if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v55 = *(id *)(v2 + 32);
LABEL_89:
          v56 = v55;
          v57 = objc_msgSend(v55, "displayText");

          if (!v57)
            return;
          static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
          v59 = v58;

          v60 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v59);
          v61 = objc_msgSend(v60, "ic_withHashtagPrefix");

          v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v61);
          v64 = v63;

          if ((uint64_t)v4 > 0)
          {
            v65 = sub_100012E18((uint64_t *)&unk_1005D5630);
            if (v177 <= 0)
            {
              v66 = swift_allocObject(v65, 112, 7);
              *(_OWORD *)(v66 + 16) = xmmword_100454E90;
              *(_QWORD *)(v66 + 56) = &type metadata for String;
              v145 = sub_1001797EC();
              *(_QWORD *)(v66 + 32) = v62;
              *(_QWORD *)(v66 + 40) = v64;
              *(_QWORD *)(v66 + 96) = &type metadata for Int;
              *(_QWORD *)(v66 + 104) = &protocol witness table for Int;
              *(_QWORD *)(v66 + 64) = v145;
              *(_QWORD *)(v66 + 72) = v4;
              v146 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
              v147 = String._bridgeToObjectiveC()();
              v148 = objc_msgSend(v146, "localizedStringForKey:value:table:", v147, 0, 0);

              v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v148);
              v151 = v150;

              swift_bridgeObjectRetain(v151);
              sub_10012CED4(v66, v149, v151);
              swift_bridgeObjectRelease_n(v151, 2);
              swift_setDeallocating(v66);
              v74 = sub_100012E18(&qword_1005CFE68);
              v75 = v66 + 32;
              v76 = 2;
            }
            else
            {
              v66 = swift_allocObject(v65, 152, 7);
              *(_OWORD *)(v66 + 16) = xmmword_100456A10;
              *(_QWORD *)(v66 + 56) = &type metadata for String;
              v67 = sub_1001797EC();
              *(_QWORD *)(v66 + 32) = v62;
              *(_QWORD *)(v66 + 40) = v64;
              *(_QWORD *)(v66 + 96) = &type metadata for Int;
              *(_QWORD *)(v66 + 104) = &protocol witness table for Int;
              *(_QWORD *)(v66 + 64) = v67;
              *(_QWORD *)(v66 + 72) = v177;
              *(_QWORD *)(v66 + 136) = &type metadata for Int;
              *(_QWORD *)(v66 + 144) = &protocol witness table for Int;
              *(_QWORD *)(v66 + 112) = v4;
              v68 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
              v69 = String._bridgeToObjectiveC()();
              v70 = objc_msgSend(v68, "localizedStringForKey:value:table:", v69, 0, 0);

              v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
              v73 = v72;

              swift_bridgeObjectRetain(v73);
              sub_10012CED4(v66, v71, v73);
              swift_bridgeObjectRelease_n(v73, 2);
              swift_setDeallocating(v66);
              v74 = sub_100012E18(&qword_1005CFE68);
              v75 = v66 + 32;
              v76 = 3;
            }
            goto LABEL_131;
          }
          if (v177 > 0)
          {
            v111 = sub_100012E18((uint64_t *)&unk_1005D5630);
            v112 = swift_initStackObject(v111, v186);
            *(_OWORD *)(v112 + 16) = xmmword_100454E90;
            *(_QWORD *)(v112 + 56) = &type metadata for String;
            v113 = sub_1001797EC();
            *(_QWORD *)(v112 + 32) = v62;
            *(_QWORD *)(v112 + 40) = v64;
            *(_QWORD *)(v112 + 96) = &type metadata for Int;
            *(_QWORD *)(v112 + 104) = &protocol witness table for Int;
            *(_QWORD *)(v112 + 64) = v113;
            *(_QWORD *)(v112 + 72) = v177;
            v114 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v115 = String._bridgeToObjectiveC()();
            v116 = objc_msgSend(v114, "localizedStringForKey:value:table:", v115, 0, 0);

            v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
            v119 = v118;

            swift_bridgeObjectRetain(v119);
            sub_10012CED4(v112, v117, v119);
            swift_bridgeObjectRelease_n(v119, 2);
            swift_setDeallocating(v112);
            v108 = sub_100012E18(&qword_1005CFE68);
            v109 = v112 + 32;
            v110 = 2;
            goto LABEL_140;
          }
          goto LABEL_127;
        }
        __break(1u);
        goto LABEL_152;
      }
      if ((v2 & 0xC000000000000001) == 0)
      {
        if (!*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
          goto LABEL_159;
        }
        v88 = *(id *)(v2 + 32);
LABEL_107:
        v89 = v88;
        v90 = objc_msgSend(v88, "displayText");

        if (!v90)
          return;
        static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v92 = v91;

        v93 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v92);
        v94 = objc_msgSend(v93, "ic_withHashtagPrefix");

        v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v94);
        v64 = v96;

        if ((uint64_t)v4 <= 0)
        {
          if (v177 <= 0)
            goto LABEL_127;
          v137 = sub_100012E18((uint64_t *)&unk_1005D5630);
          v138 = swift_initStackObject(v137, v191);
          *(_OWORD *)(v138 + 16) = xmmword_100456A10;
          *(_QWORD *)(v138 + 56) = &type metadata for String;
          v139 = sub_1001797EC();
          *(_QWORD *)(v138 + 32) = v95;
          v140 = v138 + 32;
          *(_QWORD *)(v138 + 64) = v139;
          *(_QWORD *)(v138 + 40) = v64;
          if (!__OFSUB__(v54, 1))
          {
            *(_QWORD *)(v138 + 96) = &type metadata for Int;
            *(_QWORD *)(v138 + 104) = &protocol witness table for Int;
            *(_QWORD *)(v138 + 72) = v54 - 1;
            *(_QWORD *)(v138 + 136) = &type metadata for Int;
            *(_QWORD *)(v138 + 144) = &protocol witness table for Int;
            *(_QWORD *)(v138 + 112) = v177;
            v141 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v142 = String._bridgeToObjectiveC()();
            v143 = objc_msgSend(v141, "localizedStringForKey:value:table:", v142, 0, 0);
            goto LABEL_136;
          }
          goto LABEL_158;
        }
        v97 = sub_100012E18((uint64_t *)&unk_1005D5630);
        v27 = __OFSUB__(v54, 1);
        v98 = v54 - 1;
        v99 = v27;
        if (v177 <= 0)
        {
          v152 = swift_initStackObject(v97, v190);
          *(_OWORD *)(v152 + 16) = xmmword_100456A10;
          *(_QWORD *)(v152 + 56) = &type metadata for String;
          v153 = sub_1001797EC();
          *(_QWORD *)(v152 + 32) = v95;
          v154 = v152 + 32;
          *(_QWORD *)(v152 + 64) = v153;
          *(_QWORD *)(v152 + 40) = v64;
          if ((v99 & 1) == 0)
          {
            *(_QWORD *)(v152 + 96) = &type metadata for Int;
            *(_QWORD *)(v152 + 104) = &protocol witness table for Int;
            *(_QWORD *)(v152 + 72) = v98;
            *(_QWORD *)(v152 + 136) = &type metadata for Int;
            *(_QWORD *)(v152 + 144) = &protocol witness table for Int;
            *(_QWORD *)(v152 + 112) = v4;
            v155 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v156 = String._bridgeToObjectiveC()();
            v157 = objc_msgSend(v155, "localizedStringForKey:value:table:", v156, 0, 0);

            v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(v157);
            v160 = v159;

            swift_bridgeObjectRetain(v160);
            sub_10012CED4(v152, v158, v160);
            swift_bridgeObjectRelease_n(v160, 2);
            v161 = v152;
LABEL_138:
            swift_setDeallocating(v161);
            v108 = sub_100012E18(&qword_1005CFE68);
            v109 = v154;
            goto LABEL_139;
          }
LABEL_159:
          __break(1u);
          return;
        }
        v100 = swift_initStackObject(v97, v189);
        *(_OWORD *)(v100 + 16) = xmmword_100457CB0;
        *(_QWORD *)(v100 + 56) = &type metadata for String;
        v101 = sub_1001797EC();
        *(_QWORD *)(v100 + 32) = v95;
        *(_QWORD *)(v100 + 64) = v101;
        *(_QWORD *)(v100 + 40) = v64;
        if ((v99 & 1) == 0)
        {
          *(_QWORD *)(v100 + 96) = &type metadata for Int;
          *(_QWORD *)(v100 + 104) = &protocol witness table for Int;
          *(_QWORD *)(v100 + 72) = v98;
          *(_QWORD *)(v100 + 136) = &type metadata for Int;
          *(_QWORD *)(v100 + 144) = &protocol witness table for Int;
          *(_QWORD *)(v100 + 112) = v177;
          *(_QWORD *)(v100 + 176) = &type metadata for Int;
          *(_QWORD *)(v100 + 184) = &protocol witness table for Int;
          *(_QWORD *)(v100 + 152) = v4;
          v102 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
          v103 = String._bridgeToObjectiveC()();
          v104 = objc_msgSend(v102, "localizedStringForKey:value:table:", v103, 0, 0);

          v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v104);
          v107 = v106;

          swift_bridgeObjectRetain(v107);
          sub_10012CED4(v100, v105, v107);
          swift_bridgeObjectRelease_n(v107, 2);
          swift_setDeallocating(v100);
          v108 = sub_100012E18(&qword_1005CFE68);
          v109 = v100 + 32;
          v110 = 4;
LABEL_140:
          swift_arrayDestroy(v109, v110, v108);
          return;
        }
        goto LABEL_156;
      }
    }
    v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
    goto LABEL_107;
  }
  if (v2 < 0)
    v77 = v2;
  else
    v77 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  v54 = _CocoaArrayWrapper.endIndex.getter(v77);
  swift_bridgeObjectRelease(v2);
  if (v54)
    goto LABEL_84;
}

uint64_t sub_1003961BC(uint64_t a1, uint64_t a2)
{
  id v3;
  char **v4;
  NSString v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  char **v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;

  if (a2 < 1)
    return 0;
  v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4 = &selRef_lastRunNotesVersionKey;
  v5 = String._bridgeToObjectiveC()();
  v7 = objc_msgSend(v3, "localizedStringForKey:value:table:", v5, 0, 0);

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11 = static String.localizedStringWithFormat(_:_:)(v8, v10, _swiftEmptyArrayStorage);
  v13 = v12;
  swift_bridgeObjectRelease(v10);
  v14 = sub_100012E18(&qword_1005D0EF0);
  v15 = (_QWORD *)swift_allocObject(v14, 48, 7);
  *((_OWORD *)v15 + 1) = xmmword_100451C20;
  v15[4] = v11;
  v15[5] = v13;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v17 = (void *)objc_opt_self(NSBundle);
    swift_bridgeObjectRetain(a1);
    v39 = a1;
    v18 = (_QWORD *)(a1 + 40);
    do
    {
      v19 = *(v18 - 1);
      v20 = *v18;
      v21 = objc_msgSend(v17, "mainBundle", swift_bridgeObjectRetain(*v18).n128_f64[0]);
      v22 = String._bridgeToObjectiveC()();
      v23 = v4;
      v24 = objc_msgSend(v21, v4[95], v22, 0, 0);

      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      v28 = sub_100012E18((uint64_t *)&unk_1005D5630);
      v29 = swift_allocObject(v28, 72, 7);
      *(_OWORD *)(v29 + 16) = xmmword_100451C20;
      *(_QWORD *)(v29 + 56) = &type metadata for String;
      *(_QWORD *)(v29 + 64) = sub_1001797EC();
      *(_QWORD *)(v29 + 32) = v19;
      *(_QWORD *)(v29 + 40) = v20;
      v30 = static String.localizedStringWithFormat(_:_:)(v25, v27, v29);
      v32 = v31;
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease(v29);
      v34 = v15[2];
      v33 = v15[3];
      if (v34 >= v33 >> 1)
        v15 = sub_10016ACE0((_QWORD *)(v33 > 1), v34 + 1, 1, v15);
      v18 += 2;
      v15[2] = v34 + 1;
      v35 = &v15[2 * v34];
      v35[4] = v30;
      v35[5] = v32;
      --v16;
      v4 = v23;
    }
    while (v16);
    swift_bridgeObjectRelease(v39);
  }
  v36 = sub_100012E18(&qword_1005D39A8);
  v37 = sub_1003973C0();
  v6 = BidirectionalCollection<>.joined(separator:)(10, 0xE100000000000000, v36, v37);
  swift_bridgeObjectRelease(v15);
  return v6;
}

uint64_t sub_1003964E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;

  v2 = 0;
  if (a1 >= 1 && a2 >= 1)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, 0, 0);

    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  }
  return v2;
}

void sub_100396610(void *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  unint64_t v8;

  v2 = objc_msgSend(a1, "standardizedContent");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(a1, "managedObjectContext");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend((id)objc_opt_self(ICNote), "notesContainingHashtagWithStandarizedContent:context:", v3, v4);

      v7 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
      v8 = sub_100167280();
      static Set._unconditionallyBridgeFromObjectiveC(_:)(v6, v7, v8);

      return;
    }

  }
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      sub_100127DC8((uint64_t)_swiftEmptyArrayStorage);
  }
}

void sub_100396728(void *a1)
{
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = objc_msgSend(a1, "standardizedContent");
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(a1, "account");
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend((id)objc_opt_self(ICFolder), "visibleSmartFoldersForHashtagStandardizedContent:account:", v3, v4);

      v7 = sub_1000163BC(0, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
      v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, v7);

      v9 = sub_1003945C0(v8);
      swift_bridgeObjectRelease(v8);
      sub_10020BAFC((uint64_t)v9);

      swift_bridgeObjectRelease(v9);
      return;
    }

  }
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      sub_100127DC8((uint64_t)_swiftEmptyArrayStorage);
  }
}

char *sub_100396870(void *a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t inited;
  unint64_t v31;
  id v32;
  NSString v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  NSString v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v47[152];
  _BYTE v48[112];
  _BYTE v49[112];

  v2 = (char *)objc_msgSend(a1, "displayText");
  v3 = v2;
  if (v2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
    v7 = objc_msgSend(v6, "ic_withHashtagPrefix");

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    sub_100396610(a1);
    v12 = v11;
    if ((v11 & 0xC000000000000001) != 0)
    {
      if (v11 >= 0)
        v11 &= 0xFFFFFFFFFFFFFF8uLL;
      v13 = __CocoaSet.count.getter(v11);
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 16);
    }
    swift_bridgeObjectRelease(v12);
    sub_100396728(a1);
    v15 = v14;
    if ((v14 & 0xC000000000000001) != 0)
    {
      if (v14 >= 0)
        v14 &= 0xFFFFFFFFFFFFFF8uLL;
      v16 = __CocoaSet.count.getter(v14);
    }
    else
    {
      v16 = *(_QWORD *)(v14 + 16);
    }
    swift_bridgeObjectRelease(v15);
    if (v16 <= 0)
    {
      if (v13 <= 0)
      {
        swift_bridgeObjectRelease(v10);
        return 0;
      }
      v29 = sub_100012E18((uint64_t *)&unk_1005D5630);
      inited = swift_initStackObject(v29, v49);
      *(_OWORD *)(inited + 16) = xmmword_100454E90;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v31 = sub_1001797EC();
      *(_QWORD *)(inited + 32) = v8;
      *(_QWORD *)(inited + 40) = v10;
      *(_QWORD *)(inited + 96) = &type metadata for Int;
      *(_QWORD *)(inited + 104) = &protocol witness table for Int;
      *(_QWORD *)(inited + 64) = v31;
      *(_QWORD *)(inited + 72) = v13;
      v32 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v33 = String._bridgeToObjectiveC()();
      v34 = objc_msgSend(v32, "localizedStringForKey:value:table:", v33, 0, 0);

      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v37 = v36;

      swift_bridgeObjectRetain(v37);
      v3 = sub_10012CED4(inited, v35, v37);
      swift_bridgeObjectRelease_n(v37, 2);
      swift_setDeallocating(inited);
      v26 = sub_100012E18(&qword_1005CFE68);
      v27 = inited + 32;
    }
    else
    {
      v17 = sub_100012E18((uint64_t *)&unk_1005D5630);
      if (v13 > 0)
      {
        v18 = swift_initStackObject(v17, v47);
        *(_OWORD *)(v18 + 16) = xmmword_100456A10;
        *(_QWORD *)(v18 + 56) = &type metadata for String;
        v19 = sub_1001797EC();
        *(_QWORD *)(v18 + 32) = v8;
        *(_QWORD *)(v18 + 40) = v10;
        *(_QWORD *)(v18 + 96) = &type metadata for Int;
        *(_QWORD *)(v18 + 104) = &protocol witness table for Int;
        *(_QWORD *)(v18 + 64) = v19;
        *(_QWORD *)(v18 + 72) = v13;
        *(_QWORD *)(v18 + 136) = &type metadata for Int;
        *(_QWORD *)(v18 + 144) = &protocol witness table for Int;
        *(_QWORD *)(v18 + 112) = v16;
        v20 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v21 = String._bridgeToObjectiveC()();
        v22 = objc_msgSend(v20, "localizedStringForKey:value:table:", v21, 0, 0);

        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v25 = v24;

        swift_bridgeObjectRetain(v25);
        v3 = sub_10012CED4(v18, v23, v25);
        swift_bridgeObjectRelease_n(v25, 2);
        swift_setDeallocating(v18);
        v26 = sub_100012E18(&qword_1005CFE68);
        v27 = v18 + 32;
        v28 = 3;
LABEL_20:
        swift_arrayDestroy(v27, v28, v26);
        return v3;
      }
      v38 = swift_initStackObject(v17, v48);
      *(_OWORD *)(v38 + 16) = xmmword_100454E90;
      *(_QWORD *)(v38 + 56) = &type metadata for String;
      v39 = sub_1001797EC();
      *(_QWORD *)(v38 + 32) = v8;
      *(_QWORD *)(v38 + 40) = v10;
      *(_QWORD *)(v38 + 96) = &type metadata for Int;
      *(_QWORD *)(v38 + 104) = &protocol witness table for Int;
      *(_QWORD *)(v38 + 64) = v39;
      *(_QWORD *)(v38 + 72) = v16;
      v40 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v41 = String._bridgeToObjectiveC()();
      v42 = objc_msgSend(v40, "localizedStringForKey:value:table:", v41, 0, 0);

      v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
      v45 = v44;

      swift_bridgeObjectRetain(v45);
      v3 = sub_10012CED4(v38, v43, v45);
      swift_bridgeObjectRelease_n(v45, 2);
      swift_setDeallocating(v38);
      v26 = sub_100012E18(&qword_1005CFE68);
      v27 = v38 + 32;
    }
    v28 = 2;
    goto LABEL_20;
  }
  return v3;
}

char *sub_100396D5C(void *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  char v11;
  char v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25[13];

  v3 = sub_100396870(a1);
  if (v2)
  {
    v4 = v2;
    v5 = sub_100012E18(&qword_1005D0EF0);
    v6 = (_QWORD *)swift_allocObject(v5, 48, 7);
    *((_OWORD *)v6 + 1) = xmmword_100451C20;
    v6[4] = v3;
    v6[5] = v4;
    sub_100396610(a1);
    v8 = v7;
    v9 = swift_allocObject(&unk_10056BEF0, 24, 7);
    v25[0] = v8;
    v25[1] = (uint64_t)sub_1003973B8;
    v25[2] = v9;
    v25[3] = (uint64_t)sub_100397524;
    v25[4] = 0;
    v25[5] = (uint64_t)sub_100397528;
    *(_QWORD *)(v9 + 16) = a1;
    v25[6] = 0;
    v25[7] = (uint64_t)sub_100394C08;
    v25[8] = 0;
    v25[9] = (uint64_t)sub_100394C58;
    v25[10] = 0;
    v25[11] = (uint64_t)sub_100394C68;
    v25[12] = 0;
    v10 = a1;
    sub_100394700(v25);
    v12 = v11;
    swift_release(v9);
    swift_bridgeObjectRelease(v8);
    if ((v12 & 1) != 0)
    {
      v13 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v14 = String._bridgeToObjectiveC()();
      v15 = objc_msgSend(v13, "localizedStringForKey:value:table:", v14, 0, 0);

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
      v18 = v17;

      v20 = v6[2];
      v19 = v6[3];
      if (v20 >= v19 >> 1)
        v6 = sub_10016ACE0((_QWORD *)(v19 > 1), v20 + 1, 1, v6);
      v6[2] = v20 + 1;
      v21 = &v6[2 * v20];
      v21[4] = v16;
      v21[5] = v18;
    }
    v22 = sub_100012E18(&qword_1005D39A8);
    v23 = sub_1003973C0();
    v3 = (char *)BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v22, v23);
    swift_bridgeObjectRelease(v6);
  }
  return v3;
}

char *sub_100396F7C(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t inited;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  unint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  _BYTE v42[112];
  _BYTE v43[112];

  v6 = objc_msgSend(a1, "displayText");
  if (!v6)
    return 0;
  v7 = v6;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v11 = objc_msgSend(v10, "ic_withHashtagPrefix");

  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  sub_100396610(a1);
  v16 = v15;
  if ((v15 & 0xC000000000000001) != 0)
  {
    if (v15 >= 0)
      v15 &= 0xFFFFFFFFFFFFFF8uLL;
    v17 = __CocoaSet.count.getter(v15);
  }
  else
  {
    v17 = *(_QWORD *)(v15 + 16);
  }
  swift_bridgeObjectRelease(v16);
  sub_100396728(a1);
  v19 = v18;
  if ((v18 & 0xC000000000000001) != 0)
  {
    if (v18 >= 0)
      v18 &= 0xFFFFFFFFFFFFFF8uLL;
    v20 = __CocoaSet.count.getter(v18);
  }
  else
  {
    v20 = *(_QWORD *)(v18 + 16);
  }
  swift_bridgeObjectRelease(v19);
  if (v20 > 0)
  {
    v21 = sub_100012E18((uint64_t *)&unk_1005D5630);
    if (v17 <= 0)
    {
      inited = swift_initStackObject(v21, v42);
      *(_OWORD *)(inited + 16) = xmmword_100454E90;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v32 = sub_1001797EC();
      *(_QWORD *)(inited + 32) = v12;
      v24 = inited + 32;
      *(_QWORD *)(inited + 40) = v14;
      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 104) = v32;
      *(_QWORD *)(inited + 64) = v32;
      *(_QWORD *)(inited + 72) = a2;
      *(_QWORD *)(inited + 80) = a3;
      v33 = (void *)objc_opt_self(NSBundle);
      v26 = objc_msgSend(v33, "mainBundle", swift_bridgeObjectRetain(a3).n128_f64[0]);
      v27 = String._bridgeToObjectiveC()();
      v28 = objc_msgSend(v26, "localizedStringForKey:value:table:", v27, 0, 0);
    }
    else
    {
      inited = swift_initStackObject(v21, &v41);
      *(_OWORD *)(inited + 16) = xmmword_100454E90;
      *(_QWORD *)(inited + 56) = &type metadata for String;
      v23 = sub_1001797EC();
      *(_QWORD *)(inited + 32) = v12;
      v24 = inited + 32;
      *(_QWORD *)(inited + 40) = v14;
      *(_QWORD *)(inited + 96) = &type metadata for String;
      *(_QWORD *)(inited + 104) = v23;
      *(_QWORD *)(inited + 64) = v23;
      *(_QWORD *)(inited + 72) = a2;
      *(_QWORD *)(inited + 80) = a3;
      v25 = (void *)objc_opt_self(NSBundle);
      v26 = objc_msgSend(v25, "mainBundle", swift_bridgeObjectRetain(a3).n128_f64[0]);
      v27 = String._bridgeToObjectiveC()();
      v28 = objc_msgSend(v26, "localizedStringForKey:value:table:", v27, 0, 0);
    }
    goto LABEL_18;
  }
  if (v17 <= 0)
  {
    swift_bridgeObjectRelease(v14);
    return 0;
  }
  v29 = sub_100012E18((uint64_t *)&unk_1005D5630);
  inited = swift_initStackObject(v29, v43);
  *(_OWORD *)(inited + 16) = xmmword_100454E90;
  *(_QWORD *)(inited + 56) = &type metadata for String;
  v30 = sub_1001797EC();
  *(_QWORD *)(inited + 32) = v12;
  v24 = inited + 32;
  *(_QWORD *)(inited + 40) = v14;
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 104) = v30;
  *(_QWORD *)(inited + 64) = v30;
  *(_QWORD *)(inited + 72) = a2;
  *(_QWORD *)(inited + 80) = a3;
  v31 = (void *)objc_opt_self(NSBundle);
  v26 = objc_msgSend(v31, "mainBundle", swift_bridgeObjectRetain(a3).n128_f64[0]);
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(v26, "localizedStringForKey:value:table:", v27, 0, 0);
LABEL_18:
  v34 = v28;

  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v37 = v36;

  swift_bridgeObjectRetain(v37);
  v38 = sub_10012CED4(inited, v35, v37);
  swift_bridgeObjectRelease_n(v37, 2);
  swift_setDeallocating(inited);
  v39 = sub_100012E18(&qword_1005CFE68);
  swift_arrayDestroy(v24, 2, v39);
  return v38;
}

uint64_t sub_100397394()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003973B8(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  sub_100394B90(*(id *)(v2 + 16), a1, a2);
}

unint64_t sub_1003973C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D39B0;
  if (!qword_1005D39B0)
  {
    v1 = sub_10001537C(&qword_1005D39A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1005D39B0);
  }
  return result;
}

_QWORD *sub_10039740C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  v6 = a1[10];
  v7 = a1[12];
  swift_bridgeObjectRetain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *sub_100397494(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[6];
  v3 = a1[8];
  v4 = a1[10];
  v5 = a1[12];
  v6 = a1[14];
  v7 = a1[16];
  sub_1001452E0(*a1);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t *sub_10039752C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  id v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v12 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v12);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = (void *)a2[1];
    a1[1] = (uint64_t)v5;
    v6 = *(int *)(a3 + 24);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for Logger(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    v11 = v5;
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_1003975CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_100397614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  id v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = type metadata accessor for Logger(0);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v10 = v4;
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_100397688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(void **)(a2 + 8);
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  v8 = v6;

  v9 = *(int *)(a3 + 24);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v12 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_100397700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100397764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  v7 = *(int *)(a3 + 24);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1003977D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003977E4);
}

uint64_t sub_1003977E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_100397860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10039786C);
}

uint64_t sub_10039786C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for Logger(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for BulkModifyNoteTags(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DB468;
  if (!qword_1005DB468)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BulkModifyNoteTags);
  return result;
}

uint64_t sub_10039791C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100465948;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10039799C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3[197] = v2;
  v3[191] = a2;
  v3[185] = a1;
  v4 = *(_QWORD *)(type metadata accessor for BulkModifyNoteTags(0) - 8);
  v3[203] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v3[209] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[215] = swift_task_alloc(v6);
  v3[221] = swift_task_alloc(v6);
  v3[227] = swift_task_alloc(v6);
  v3[233] = swift_task_alloc(v6);
  v7 = type metadata accessor for NoteEntity(0);
  v3[234] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[235] = v8;
  v3[236] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100397A54, 0, 0);
}

uint64_t sub_100397A54()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t KeyPath;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  _BYTE *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 1480);
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 1576) + 8), "modernManagedObjectContext");
  *(_QWORD *)(v0 + 1896) = v2;
  KeyPath = swift_getKeyPath(&unk_100465960, v3);
  *(_QWORD *)(v0 + 1904) = KeyPath;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
    v16 = *(_QWORD *)(v0 + 1528);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 1480));
    swift_retain(KeyPath);
    swift_bridgeObjectRetain(v16);
    v17 = 0;
LABEL_22:
    sub_100145220(*(_QWORD *)(v0 + 1576), *(_QWORD *)(v0 + 1864), type metadata accessor for BulkModifyNoteTags);
    v23 = *(_BYTE **)(v0 + 1864);
    if (v17 >= (uint64_t)v5)
    {
      sub_100145264(*(_QWORD *)(v0 + 1864), type metadata accessor for BulkModifyNoteTags);
    }
    else
    {
      if ((*v23 & 1) == 0)
      {
        swift_bridgeObjectRelease(0xE300000000000000);
        sub_100145264((uint64_t)v23, type metadata accessor for BulkModifyNoteTags);
LABEL_29:
        v39 = *(_QWORD *)(v0 + 1528);
        v40 = *(_QWORD *)(v0 + 1480);
        v41 = sub_10013F4E8();
        v42 = swift_allocError(&type metadata for AppIntentsError, v41, 0, 0);
        *v43 = 1;
        swift_willThrow(v42);
        swift_bridgeObjectRelease(v39);
        swift_bridgeObjectRelease(v40);
        swift_release_n(KeyPath, 2);

        v44 = *(_QWORD *)(v0 + 1864);
        v45 = *(_QWORD *)(v0 + 1816);
        v46 = *(_QWORD *)(v0 + 1768);
        v47 = *(_QWORD *)(v0 + 1720);
        swift_task_dealloc(*(_QWORD *)(v0 + 1888));
        swift_task_dealloc(v44);
        swift_task_dealloc(v45);
        swift_task_dealloc(v46);
        swift_task_dealloc(v47);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65766F6D6572, 0xE600000000000000, 6579297, 0xE300000000000000, 0);
      swift_bridgeObjectRelease(0xE600000000000000);
      sub_100145264((uint64_t)v23, type metadata accessor for BulkModifyNoteTags);
      if ((v24 & 1) != 0)
        goto LABEL_29;
    }
    v25 = *(_QWORD *)(v0 + 1816);
    v49 = *(_QWORD *)(v0 + 1768);
    v26 = *(_QWORD *)(v0 + 1672);
    v48 = v26;
    v27 = *(_QWORD *)(v0 + 1624);
    v28 = *(_QWORD *)(v0 + 1576);
    v50 = *(_QWORD *)(v0 + 1528);
    v29 = KeyPath;
    v30 = *(_QWORD *)(v0 + 1480);
    sub_100145220(v28, v25, type metadata accessor for BulkModifyNoteTags);
    v31 = *(_DWORD *)(v27 + 80);
    *(_DWORD *)(v0 + 2008) = v31;
    v32 = v31;
    v33 = (v31 + 56) & ~(unint64_t)v31;
    v34 = (_QWORD *)swift_allocObject(&unk_10056BF18, v33 + v26, v31 | 7);
    *(_QWORD *)(v0 + 1912) = v34;
    v34[2] = v30;
    v34[3] = sub_100398C1C;
    v34[4] = v29;
    v34[5] = sub_100398C44;
    v34[6] = 0;
    sub_10013B170(v25, (uint64_t)v34 + v33, type metadata accessor for BulkModifyNoteTags);
    swift_bridgeObjectRetain(v30);
    swift_retain(v29);
    swift_retain(v34);
    v35 = sub_10001537C(&qword_1005DB4C0);
    swift_asyncLet_begin(v0 + 656, 0, v35, &unk_1005DB4B8, v34, v0 + 1432);
    sub_100145220(v28, v49, type metadata accessor for BulkModifyNoteTags);
    v36 = (v32 + 40) & ~v32;
    v37 = (_QWORD *)swift_allocObject(&unk_10056BF40, v36 + v48, v32 | 7);
    *(_QWORD *)(v0 + 1920) = v37;
    v37[2] = v50;
    v37[3] = sub_100398C50;
    v37[4] = 0;
    sub_10013B170(v49, (uint64_t)v37 + v36, type metadata accessor for BulkModifyNoteTags);
    swift_bridgeObjectRetain(v50);
    swift_retain(v37);
    v38 = sub_10001537C(&qword_1005DB4D8);
    swift_asyncLet_begin(v0 + 16, 0, v38, &unk_1005DB4D0, v37, v0 + 1384);
    return swift_asyncLet_get_throwing(v0 + 656, v0 + 1432, sub_100397F6C, v0 + 1392);
  }
  v53 = v2;
  v6 = *(_QWORD *)(v0 + 1880);
  v7 = *(_QWORD *)(v0 + 1872);
  v8 = *(_QWORD *)(v0 + 1528);
  v9 = *(_QWORD *)(v0 + 1480);
  v51 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v10 = v9 + v51;
  v11 = *(_QWORD *)(v6 + 72);
  swift_bridgeObjectRetain(v9);
  v54 = KeyPath;
  swift_retain_n(KeyPath, 2);
  swift_bridgeObjectRetain(v8);
  v12 = 0;
  while (1)
  {
    v13 = *(_QWORD *)(v0 + 1888);
    sub_100145220(v10, v13, type metadata accessor for NoteEntity);
    v14 = *(_BYTE *)(v13 + *(int *)(v7 + 24));
    result = sub_100145264(v13, type metadata accessor for NoteEntity);
    if ((v14 & 1) != 0)
      break;
    ++v12;
    v10 += v11;
    if (v5 == v12)
      goto LABEL_8;
  }
  if (v5 == v12)
  {
LABEL_8:
    KeyPath = v54;
    swift_release(v54);
    v17 = 0;
LABEL_21:
    v2 = v53;
    goto LABEL_22;
  }
  v17 = 0;
  v52 = v9 + v51;
  while (2)
  {
    v18 = __OFADD__(v17++, 1);
    if (v18)
    {
LABEL_32:
      __break(1u);
    }
    else
    {
      v18 = __OFADD__(v12++, 1);
      if (!v18)
      {
        if (v12 != v5)
        {
          v19 = v52 + v11 * v12;
          while (1)
          {
            if (v12 >= v5)
            {
              __break(1u);
LABEL_31:
              __break(1u);
              goto LABEL_32;
            }
            v20 = *(_QWORD *)(v0 + 1888);
            sub_100145220(v19, v20, type metadata accessor for NoteEntity);
            v21 = *(_BYTE *)(v20 + *(int *)(v7 + 24));
            result = sub_100145264(v20, type metadata accessor for NoteEntity);
            if ((v21 & 1) != 0)
              break;
            v22 = v12 + 1;
            if (__OFADD__(v12, 1))
              goto LABEL_31;
            ++v12;
            v19 += v11;
            if (v22 == v5)
              goto LABEL_20;
          }
          if (v5 != v12)
            continue;
        }
LABEL_20:
        KeyPath = v54;
        swift_release(v54);
        goto LABEL_21;
      }
    }
    break;
  }
  __break(1u);
  return result;
}

uint64_t sub_100397F6C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;

  v1[241] = v0;
  if (v0)
    return swift_asyncLet_finish(v1 + 2, v1 + 173, sub_100398440, v1 + 180);
  v3 = v1[179];
  v1[242] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_asyncLet_get_throwing(v1 + 2, v1 + 173, sub_100397FF4, v1 + 192);
}

uint64_t sub_100397FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 1944) = v0;
  if (v0)
    v2 = sub_100398578;
  else
    v2 = sub_10039801C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10039801C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 1936);
  v2 = *(unsigned __int8 *)(v0 + 2008);
  v3 = *(void **)(v0 + 1896);
  v4 = *(_QWORD *)(v0 + 1720);
  v5 = *(_QWORD *)(v0 + 1672);
  v6 = *(_QWORD *)(v0 + 1528);
  v7 = v2 | 7;
  v8 = *(_QWORD *)(v0 + 1384);
  sub_100145220(*(_QWORD *)(v0 + 1576), v4, type metadata accessor for BulkModifyNoteTags);
  v9 = (v2 + 32) & ~v2;
  v10 = (v5 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_10056BF68, v11 + 8, v7);
  *(_QWORD *)(v0 + 1952) = v12;
  *(_QWORD *)(v12 + 16) = v1;
  *(_QWORD *)(v12 + 24) = v8;
  sub_10013B170(v4, v12 + v9, type metadata accessor for BulkModifyNoteTags);
  *(_QWORD *)(v12 + v10) = v3;
  *(_QWORD *)(v12 + v11) = v6;
  v13 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  v14 = v3;
  v15 = (_QWORD *)swift_task_alloc(v13);
  *(_QWORD *)(v0 + 1960) = v15;
  v16 = sub_100012E18((uint64_t *)&unk_1005DB4E0);
  *v15 = v0;
  v15[1] = sub_100398158;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 1336, sub_10039BAB0, v12, v16);
}

uint64_t sub_100398158()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1960);
  *(_QWORD *)(*v1 + 1968) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100398704;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 1952));
    v4 = sub_1003981C4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003981C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = v0[197];
  v2 = v0[167];
  v0[247] = v2;
  v3 = *(_QWORD *)(v1 + 8);
  v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1005D0270 + dword_1005D0270);
  v4 = (_QWORD *)swift_task_alloc(unk_1005D0274);
  v0[248] = v4;
  *v4 = v0;
  v4[1] = sub_10039823C;
  return v6(v2, v3, 1);
}

uint64_t sub_10039823C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1984);
  *(_QWORD *)(*v2 + 1992) = v1;
  swift_task_dealloc(v5);
  if (v1)
    return swift_task_switch(sub_100398890, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + 1976));
  *(_QWORD *)(v4 + 2000) = a1;
  return swift_asyncLet_finish(v4 + 16, v4 + 1384, sub_1003982EC, v4 + 1584);
}

uint64_t sub_1003982EC()
{
  return swift_task_switch(sub_100398300, 0, 0);
}

uint64_t sub_100398300()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1920));
  return swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_100398354, v0 + 1296);
}

uint64_t sub_100398354()
{
  return swift_task_switch(sub_100398368, 0, 0);
}

uint64_t sub_100398368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 1920);
  v2 = *(_QWORD *)(v0 + 1912);
  v3 = *(_QWORD *)(v0 + 1904);
  v4 = *(void **)(v0 + 1896);
  v5 = *(_QWORD *)(v0 + 1888);
  v6 = *(_QWORD *)(v0 + 1864);
  v7 = *(_QWORD *)(v0 + 1816);
  v8 = *(_QWORD *)(v0 + 1768);
  v11 = *(_QWORD *)(v0 + 1720);
  v9 = *(_QWORD *)(v0 + 1528);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1480));
  swift_release_n(v3, 2);
  swift_bridgeObjectRelease(v9);

  swift_release_n(v2, 2);
  swift_release(v1);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 2000));
}

uint64_t sub_100398440()
{
  return swift_task_switch(sub_100398454, 0, 0);
}

uint64_t sub_100398454()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1920));
  return swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_1003984A8, v0 + 1488);
}

uint64_t sub_1003984A8()
{
  return swift_task_switch(sub_1003984BC, 0, 0);
}

uint64_t sub_1003984BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 1920);
  v2 = *(_QWORD *)(v0 + 1912);
  v3 = *(_QWORD *)(v0 + 1904);
  v4 = *(void **)(v0 + 1896);
  v5 = *(_QWORD *)(v0 + 1528);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1480));
  swift_release_n(v3, 2);
  swift_bridgeObjectRelease(v5);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1864);
  v7 = *(_QWORD *)(v0 + 1816);
  v8 = *(_QWORD *)(v0 + 1768);
  v9 = *(_QWORD *)(v0 + 1720);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100398578()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1936));
  return swift_asyncLet_finish(v0 + 16, v0 + 1384, sub_1003985CC, v0 + 1344);
}

uint64_t sub_1003985CC()
{
  return swift_task_switch(sub_1003985E0, 0, 0);
}

uint64_t sub_1003985E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1920));
  return swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_100398634, v0 + 1632);
}

uint64_t sub_100398634()
{
  return swift_task_switch(sub_100398648, 0, 0);
}

uint64_t sub_100398648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 1920);
  v2 = *(_QWORD *)(v0 + 1912);
  v3 = *(_QWORD *)(v0 + 1904);
  v4 = *(void **)(v0 + 1896);
  v5 = *(_QWORD *)(v0 + 1528);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1480));
  swift_release_n(v3, 2);
  swift_bridgeObjectRelease(v5);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1864);
  v7 = *(_QWORD *)(v0 + 1816);
  v8 = *(_QWORD *)(v0 + 1768);
  v9 = *(_QWORD *)(v0 + 1720);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100398704()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1952));
  return swift_asyncLet_finish(v0 + 16, v0 + 1384, sub_100398758, v0 + 1728);
}

uint64_t sub_100398758()
{
  return swift_task_switch(sub_10039876C, 0, 0);
}

uint64_t sub_10039876C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1920));
  return swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_1003987C0, v0 + 1776);
}

uint64_t sub_1003987C0()
{
  return swift_task_switch(sub_1003987D4, 0, 0);
}

uint64_t sub_1003987D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 1920);
  v2 = *(_QWORD *)(v0 + 1912);
  v3 = *(_QWORD *)(v0 + 1904);
  v4 = *(void **)(v0 + 1896);
  v5 = *(_QWORD *)(v0 + 1528);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1480));
  swift_release_n(v3, 2);
  swift_bridgeObjectRelease(v5);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1864);
  v7 = *(_QWORD *)(v0 + 1816);
  v8 = *(_QWORD *)(v0 + 1768);
  v9 = *(_QWORD *)(v0 + 1720);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100398890()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1976));
  return swift_asyncLet_finish(v0 + 16, v0 + 1384, sub_1003988E4, v0 + 1824);
}

uint64_t sub_1003988E4()
{
  return swift_task_switch(sub_1003988F8, 0, 0);
}

uint64_t sub_1003988F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 1920));
  return swift_asyncLet_finish(v0 + 656, v0 + 1432, sub_10039894C, v0 + 1680);
}

uint64_t sub_10039894C()
{
  return swift_task_switch(sub_100398960, 0, 0);
}

uint64_t sub_100398960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 1920);
  v2 = *(_QWORD *)(v0 + 1912);
  v3 = *(_QWORD *)(v0 + 1904);
  v4 = *(void **)(v0 + 1896);
  v5 = *(_QWORD *)(v0 + 1528);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 1480));
  swift_release_n(v3, 2);
  swift_bridgeObjectRelease(v5);

  swift_release_n(v2, 2);
  swift_release(v1);
  v6 = *(_QWORD *)(v0 + 1864);
  v7 = *(_QWORD *)(v0 + 1816);
  v8 = *(_QWORD *)(v0 + 1768);
  v9 = *(_QWORD *)(v0 + 1720);
  swift_task_dealloc(*(_QWORD *)(v0 + 1888));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100398A1C(char *a1, char *a2)
{
  return sub_1002161A4(*a1, *a2);
}

Swift::Int sub_100398A28()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x65766F6D6572;
  else
    v2 = 6579297;
  if (v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100398A9C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x65766F6D6572;
  else
    v2 = 6579297;
  if (*v1)
    v3 = 0xE600000000000000;
  else
    v3 = 0xE300000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100398AEC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x65766F6D6572;
  else
    v3 = 6579297;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100398B5C@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005574B8, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100398BB8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 6579297;
  if (*v1)
    v2 = 0x65766F6D6572;
  v3 = 0xE300000000000000;
  if (*v1)
    v3 = 0xE600000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100398BEC()
{
  _BYTE *v0;

  if (*v0)
    return 0x65766F6D6572;
  else
    return 6579297;
}

uint64_t sub_100398C1C(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 v3;

  swift_getAtKeyPath(a1, v1);
  return v3;
}

uint64_t sub_100398C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100398C5C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for NoteID, a2);
}

uint64_t sub_100398C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100398C5C(a1, (uint64_t (*)(_QWORD))&type metadata accessor for TagID, a2);
}

uint64_t sub_100398C5C@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  v5 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, a1, v5);
}

uint64_t sub_100398C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100398CB4, 0, 0);
}

uint64_t sub_100398CB4()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0[4] + 8);
  v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005DB520 + dword_1005DB520);
  v2 = (_QWORD *)swift_task_alloc(unk_1005DB524);
  v0[5] = v2;
  *v2 = v0;
  v2[1] = sub_100398D20;
  return v4(v0[3], v1);
}

uint64_t sub_100398D20(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 40);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch(sub_100398D9C, 0, 0);
}

uint64_t sub_100398D9C()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100398DB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  char *v8;
  uint64_t v9;

  v1 = type metadata accessor for BulkModifyNoteTags(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  v7 = (id *)((char *)v0 + v4);

  v8 = (char *)v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for Logger(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100398E58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BulkModifyNoteTags(0) - 8) + 80);
  v5 = v1 + 16;
  v6 = v1 + ((v4 + 56) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_1005DB4B4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100130768;
  v7[3] = v5;
  v7[4] = v6;
  v7[2] = a1;
  return swift_task_switch(sub_100398CB4, 0, 0);
}

uint64_t sub_100398EE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for Logger(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NoteID(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v7);
  v2[13] = swift_task_alloc(v7);
  v8 = type metadata accessor for NoteEntity(0);
  v2[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[15] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[16] = swift_task_alloc(v10);
  v2[17] = swift_task_alloc(v10);
  v11 = (*(_QWORD *)(*(_QWORD *)(sub_100012E18((uint64_t *)&unk_1005D0B60) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v11);
  v2[19] = swift_task_alloc(v11);
  v12 = sub_100012E18(&qword_1005DB530);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10039900C, 0, 0);
}

uint64_t sub_10039900C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t, uint64_t);

  v1 = *(uint64_t **)(v0 + 40);
  *(_QWORD *)(v0 + 24) = _swiftEmptyArrayStorage;
  v2 = *v1;
  *(_QWORD *)(v0 + 168) = *v1;
  *(_QWORD *)(v0 + 176) = v1[1];
  v3 = v1[2];
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 184) = v3;
  *(_QWORD *)(v0 + 192) = v1[3];
  v4 = v1[4];
  *(_QWORD *)(v0 + 200) = v4;
  *(_QWORD *)(v0 + 208) = *(_QWORD *)(v2 + 16);
  sub_10021FD58((_QWORD *)(v0 + 16));
  v5 = *(_QWORD *)(v0 + 208);
  swift_retain(v3);
  result = swift_retain(v4);
  if (v5)
  {
    v7 = 0;
    while (v5 != v7)
    {
      v8 = *(uint64_t (**)(uint64_t))(v0 + 176);
      v9 = *(_QWORD *)(v0 + 136);
      v10 = v7 + 1;
      sub_100145220(*(_QWORD *)(v0 + 168)+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 120) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 120) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 120) + 72) * v7, v9, type metadata accessor for NoteEntity);
      if ((v8(v9) & 1) != 0)
      {
        sub_10013B170(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 152), type metadata accessor for NoteEntity);
        v12 = 0;
        goto LABEL_10;
      }
      v11 = *(_QWORD *)(v0 + 208);
      result = sub_100145264(*(_QWORD *)(v0 + 136), type metadata accessor for NoteEntity);
      v7 = v10;
      if (v10 == v11)
      {
        v10 = *(_QWORD *)(v0 + 208);
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
    v10 = 0;
LABEL_8:
    v12 = 1;
LABEL_10:
    *(_QWORD *)(v0 + 216) = v10;
    v14 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 152);
    v15 = *(_QWORD *)(v0 + 112);
    v16 = *(_QWORD *)(v0 + 120);
    v17 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v13, v12, 1, v15);
    sub_10014BD1C(v13, v14, (uint64_t *)&unk_1005D0B60);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
    {
      v18 = *(void (**)(uint64_t))(v0 + 192);
      v19 = *(_QWORD *)(v0 + 128);
      sub_10013B170(*(_QWORD *)(v0 + 144), v19, type metadata accessor for NoteEntity);
      v18(v19);
      sub_100145264(v19, type metadata accessor for NoteEntity);
      v17 = 0;
    }
    v20 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 80);
    v22 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(v20, v17, 1, v21);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
    {
      v23 = *(_QWORD *)(v0 + 200);
      v24 = *(_QWORD *)(v0 + 184);
      v26 = *(_QWORD *)(v0 + 152);
      v25 = *(_QWORD *)(v0 + 160);
      v28 = *(_QWORD *)(v0 + 136);
      v27 = *(_QWORD *)(v0 + 144);
      v29 = *(_QWORD *)(v0 + 128);
      v30 = *(_QWORD *)(v0 + 104);
      v33 = *(_QWORD *)(v0 + 96);
      v34 = *(_QWORD *)(v0 + 72);
      sub_1001948C4((_QWORD *)(v0 + 16));
      swift_release(v24);
      swift_release(v23);
      v31 = *(_QWORD *)(v0 + 24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v31);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 32))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 80));
      v35 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
      v32 = (_QWORD *)swift_task_alloc(unk_1005D7894);
      *(_QWORD *)(v0 + 224) = v32;
      *v32 = v0;
      v32[1] = sub_10039932C;
      return v35(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 48));
    }
  }
  return result;
}

uint64_t sub_10039932C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100399388, 0, 0);
}

uint64_t sub_100399388(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  void (*v32)(uint64_t, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t);
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t);
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)(uint64_t, uint64_t);
  uint64_t v83[2];

  v2 = *(void **)(v1 + 232);
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v1 + 48), "managedObjectContextForObjectID:", *(_QWORD *)(v1 + 232));
    *(_QWORD *)(v1 + 240) = v3;
    if (v3)
    {
      v4 = v3;
      v5 = swift_allocObject(&unk_10056C008, 32, 7);
      *(_QWORD *)(v1 + 248) = v5;
      *(_QWORD *)(v5 + 16) = v4;
      *(_QWORD *)(v5 + 24) = v2;
      v6 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v4;
      v7 = v2;
      v8 = (_QWORD *)swift_task_alloc(v6);
      *(_QWORD *)(v1 + 256) = v8;
      v9 = sub_100012E18((uint64_t *)&unk_1005D1F10);
      *v8 = v1;
      v8[1] = sub_1003999D8;
      return NSManagedObjectContext.perform<A>(_:)(v1 + 32, sub_10039BD78, v5, v9);
    }
    else
    {
      v33 = *(_QWORD *)(v1 + 200);
      v34 = *(_QWORD *)(v1 + 184);
      v35 = *(_QWORD *)(v1 + 104);
      v36 = *(_QWORD *)(v1 + 80);
      v37 = *(_QWORD *)(v1 + 88);
      v38 = swift_allocObject(&unk_10056BFB8, 24, 7);
      *(_QWORD *)(v38 + 16) = 0;
      v39 = v2;
      sub_10014F724(v38, 225, v39);

      swift_release(v38);
      swift_willThrow(v40);

      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
      sub_1001948C4((_QWORD *)(v1 + 16));
      swift_release(v34);
      swift_release(v33);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
      v41 = *(_QWORD *)(v1 + 152);
      v43 = *(_QWORD *)(v1 + 136);
      v42 = *(_QWORD *)(v1 + 144);
      v44 = *(_QWORD *)(v1 + 128);
      v46 = *(_QWORD *)(v1 + 96);
      v45 = *(_QWORD *)(v1 + 104);
      v47 = *(_QWORD *)(v1 + 72);
      swift_task_dealloc(*(_QWORD *)(v1 + 160));
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
  }
  else
  {
    v11 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 104);
    v13 = *(_QWORD *)(v1 + 80);
    v14 = *(_QWORD *)(v1 + 88);
    static Logger.link.getter(a1);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v12, v13);
    v16 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.error.getter(v16, v17);
    v19 = os_log_type_enabled(v16, v18);
    v20 = *(_QWORD *)(v1 + 96);
    v21 = *(_QWORD *)(v1 + 104);
    v22 = *(_QWORD *)(v1 + 80);
    v23 = *(_QWORD *)(v1 + 88);
    v24 = *(_QWORD *)(v1 + 64);
    v79 = *(_QWORD *)(v1 + 56);
    v80 = *(_QWORD *)(v1 + 72);
    if (v19)
    {
      v25 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(64, -1);
      v83[0] = v26;
      *(_DWORD *)v25 = 136315394;
      *(_QWORD *)(v25 + 4) = sub_1003A4190(0x69746E4565746F4ELL, 0xEA00000000007974, v83);
      *(_WORD *)(v25 + 12) = 2080;
      v27 = sub_100019C6C(&qword_1005D0278, (uint64_t (*)(uint64_t))&type metadata accessor for NoteID, (uint64_t)&protocol conformance descriptor for NoteID);
      v28 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v22, v27);
      v78 = v21;
      v30 = v29;
      *(_QWORD *)(v25 + 14) = sub_1003A4190(v28, v29, v83);
      v31 = swift_bridgeObjectRelease(v30);
      v32 = *(void (**)(uint64_t, uint64_t, __n128))(v23 + 8);
      v32(v20, v22, v31);
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v80, v79);
      result = ((uint64_t (*)(uint64_t, uint64_t))v32)(v78, v22);
    }
    else
    {

      v48 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v48(v20, v22);
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v80, v79);
      result = ((uint64_t (*)(uint64_t, uint64_t))v48)(v21, v22);
    }
    v50 = *(_QWORD *)(v1 + 208);
    v49 = *(_QWORD *)(v1 + 216);
    if (v49 == v50)
    {
LABEL_16:
      v56 = 1;
LABEL_18:
      *(_QWORD *)(v1 + 216) = v49;
      v58 = *(_QWORD *)(v1 + 144);
      v57 = *(_QWORD *)(v1 + 152);
      v59 = *(_QWORD *)(v1 + 112);
      v60 = *(_QWORD *)(v1 + 120);
      v61 = 1;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v57, v56, 1, v59);
      sub_10014BD1C(v57, v58, (uint64_t *)&unk_1005D0B60);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59) != 1)
      {
        v62 = *(void (**)(uint64_t))(v1 + 192);
        v63 = *(_QWORD *)(v1 + 128);
        sub_10013B170(*(_QWORD *)(v1 + 144), v63, type metadata accessor for NoteEntity);
        v62(v63);
        sub_100145264(v63, type metadata accessor for NoteEntity);
        v61 = 0;
      }
      v64 = *(_QWORD *)(v1 + 160);
      v65 = *(_QWORD *)(v1 + 80);
      v66 = *(_QWORD *)(v1 + 88);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v66 + 56))(v64, v61, 1, v65);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v64, 1, v65) == 1)
      {
        v67 = *(_QWORD *)(v1 + 200);
        v68 = *(_QWORD *)(v1 + 184);
        v70 = *(_QWORD *)(v1 + 152);
        v69 = *(_QWORD *)(v1 + 160);
        v72 = *(_QWORD *)(v1 + 136);
        v71 = *(_QWORD *)(v1 + 144);
        v73 = *(_QWORD *)(v1 + 128);
        v75 = *(_QWORD *)(v1 + 96);
        v74 = *(_QWORD *)(v1 + 104);
        v81 = *(_QWORD *)(v1 + 72);
        sub_1001948C4((_QWORD *)(v1 + 16));
        swift_release(v68);
        swift_release(v67);
        v76 = *(_QWORD *)(v1 + 24);
        swift_task_dealloc(v69);
        swift_task_dealloc(v70);
        swift_task_dealloc(v71);
        swift_task_dealloc(v72);
        swift_task_dealloc(v73);
        swift_task_dealloc(v74);
        swift_task_dealloc(v75);
        swift_task_dealloc(v81);
        return (*(uint64_t (**)(uint64_t))(v1 + 8))(v76);
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 88) + 32))(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 80));
        v82 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
        v77 = (_QWORD *)swift_task_alloc(unk_1005D7894);
        *(_QWORD *)(v1 + 224) = v77;
        *v77 = v1;
        v77[1] = sub_10039932C;
        return v82(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 48));
      }
    }
    else
    {
      if (v49 <= v50)
        v51 = *(_QWORD *)(v1 + 208);
      else
        v51 = *(_QWORD *)(v1 + 216);
      while (v51 != v49)
      {
        v52 = *(uint64_t (**)(uint64_t))(v1 + 176);
        v53 = *(_QWORD *)(v1 + 136);
        v54 = v49 + 1;
        sub_100145220(*(_QWORD *)(v1 + 168)+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 + 120) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 + 120) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 + 120) + 72) * v49, v53, type metadata accessor for NoteEntity);
        if ((v52(v53) & 1) != 0)
        {
          sub_10013B170(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 152), type metadata accessor for NoteEntity);
          v56 = 0;
          v49 = v54;
          goto LABEL_18;
        }
        v55 = *(_QWORD *)(v1 + 208);
        result = sub_100145264(*(_QWORD *)(v1 + 136), type metadata accessor for NoteEntity);
        v49 = v54;
        if (v54 == v55)
        {
          v49 = *(_QWORD *)(v1 + 208);
          goto LABEL_16;
        }
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1003999D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 248);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 24));
    swift_release(v4);
    v5 = sub_100399D84;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 248));
    v5 = sub_100399A58;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100399A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(unint64_t);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t);

  v2 = *(uint64_t (**)(uint64_t))(v1 + 32);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a1);
  v4 = *(_QWORD *)((*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v3 = *(_QWORD *)((*(_QWORD *)(v1 + 24) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v4 >= v3 >> 1)
    goto LABEL_19;
  while (1)
  {
    v6 = *(void **)(v1 + 232);
    v5 = *(void **)(v1 + 240);
    v7 = *(_QWORD *)(v1 + 104);
    v8 = *(_QWORD *)(v1 + 80);
    v9 = *(_QWORD *)(v1 + 88);
    v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v2);
    specialized Array._endMutation()(v10);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v11 = *(_QWORD *)(v1 + 208);
    v3 = *(_QWORD *)(v1 + 216);
    if (v3 == v11)
      break;
    if (v3 <= v11)
      v12 = *(_QWORD *)(v1 + 208);
    else
      v12 = *(_QWORD *)(v1 + 216);
    v2 = type metadata accessor for NoteEntity;
    while (v12 != v3)
    {
      v13 = *(uint64_t (**)(unint64_t))(v1 + 176);
      v4 = *(_QWORD *)(v1 + 136);
      v14 = v3 + 1;
      sub_100145220(*(_QWORD *)(v1 + 168)+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 + 120) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 + 120) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 + 120) + 72) * v3, v4, type metadata accessor for NoteEntity);
      if ((v13(v4) & 1) != 0)
      {
        sub_10013B170(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 152), type metadata accessor for NoteEntity);
        v16 = 0;
        v3 = v14;
        goto LABEL_13;
      }
      v15 = *(_QWORD *)(v1 + 208);
      sub_100145264(*(_QWORD *)(v1 + 136), type metadata accessor for NoteEntity);
      v3 = v14;
      if (v14 == v15)
      {
        v3 = *(_QWORD *)(v1 + 208);
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_19:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1);
  }
LABEL_11:
  v16 = 1;
LABEL_13:
  *(_QWORD *)(v1 + 216) = v3;
  v18 = *(_QWORD *)(v1 + 144);
  v17 = *(_QWORD *)(v1 + 152);
  v19 = *(_QWORD *)(v1 + 112);
  v20 = *(_QWORD *)(v1 + 120);
  v21 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56))(v17, v16, 1, v19);
  sub_10014BD1C(v17, v18, (uint64_t *)&unk_1005D0B60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) != 1)
  {
    v22 = *(void (**)(uint64_t))(v1 + 192);
    v23 = *(_QWORD *)(v1 + 128);
    sub_10013B170(*(_QWORD *)(v1 + 144), v23, type metadata accessor for NoteEntity);
    v22(v23);
    sub_100145264(v23, type metadata accessor for NoteEntity);
    v21 = 0;
  }
  v24 = *(_QWORD *)(v1 + 160);
  v25 = *(_QWORD *)(v1 + 80);
  v26 = *(_QWORD *)(v1 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(v24, v21, 1, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    v27 = *(_QWORD *)(v1 + 200);
    v28 = *(_QWORD *)(v1 + 184);
    v30 = *(_QWORD *)(v1 + 152);
    v29 = *(_QWORD *)(v1 + 160);
    v32 = *(_QWORD *)(v1 + 136);
    v31 = *(_QWORD *)(v1 + 144);
    v33 = *(_QWORD *)(v1 + 128);
    v35 = *(_QWORD *)(v1 + 96);
    v34 = *(_QWORD *)(v1 + 104);
    v39 = *(_QWORD *)(v1 + 72);
    sub_1001948C4((_QWORD *)(v1 + 16));
    swift_release(v28);
    swift_release(v27);
    v36 = *(_QWORD *)(v1 + 24);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v36);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 88) + 32))(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 80));
    v40 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005D7890 + dword_1005D7890);
    v38 = (_QWORD *)swift_task_alloc(unk_1005D7894);
    *(_QWORD *)(v1 + 224) = v38;
    *v38 = v1;
    v38[1] = sub_10039932C;
    return v40(*(_QWORD *)(v1 + 104), *(_QWORD *)(v1 + 48));
  }
}

uint64_t sub_100399D84()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_1001948C4((_QWORD *)(v0 + 16));
  swift_release(v3);
  swift_release(v2);
  v7 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100399E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for Logger(0);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TagID(0);
  v4[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[13] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[14] = swift_task_alloc(v9);
  v4[15] = swift_task_alloc(v9);
  v10 = type metadata accessor for TagEntity(0);
  v4[16] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[17] = v11;
  v4[18] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (*(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005CF1E8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v12);
  v4[20] = swift_task_alloc(v12);
  v13 = sub_100012E18((uint64_t *)&unk_1005DB500);
  v4[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100399F7C, 0, 0);
}

uint64_t sub_100399F7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;

  *(_QWORD *)(v0 + 16) = _swiftEmptyArrayStorage;
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v0 + 176) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v2);
  if (v4)
  {
    sub_100145220(v3 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), *(_QWORD *)(v0 + 160), type metadata accessor for TagEntity);
    v5 = 0;
    v1 = *(_QWORD *)(v0 + 136);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  *(_QWORD *)(v0 + 184) = v6;
  v8 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 128);
  v10 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v1 + 56))(v7, v5, 1, v9);
  sub_10014BD1C(v7, v8, &qword_1005CF1E8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v8, 1, v9) != 1)
  {
    v11 = *(_QWORD *)(v0 + 144);
    v12 = *(void (**)(uint64_t))(v0 + 48);
    sub_10013B170(*(_QWORD *)(v0 + 152), v11, type metadata accessor for TagEntity);
    v12(v11);
    sub_100145264(v11, type metadata accessor for TagEntity);
    v10 = 0;
  }
  v13 = *(_QWORD *)(v0 + 168);
  v14 = *(_QWORD *)(v0 + 96);
  v15 = *(_QWORD *)(v0 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v10, 1, v14);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v16 = *(_QWORD *)(v0 + 160);
    v17 = *(_QWORD *)(v0 + 168);
    v19 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 152);
    v21 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
    swift_release(v23);
    v24 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v24);
  }
  else
  {
    v26 = *(void **)(v0 + 64);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 96));
    v27 = objc_msgSend(v26, "modernManagedObjectContext");
    *(_QWORD *)(v0 + 192) = v27;
    v28 = (void *)objc_opt_self(ICHashtag);
    TagID.displayText.getter();
    v30 = v29;
    v31 = String._bridgeToObjectiveC()();
    v32 = objc_msgSend(v28, "standardizedHashtagRepresentationForDisplayText:", v31, swift_bridgeObjectRelease(v30).n128_f64[0]);

    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v35 = v34;

    v36 = (_QWORD *)swift_allocObject(&unk_10056BF90, 40, 7);
    *(_QWORD *)(v0 + 200) = v36;
    v36[2] = v33;
    v36[3] = v35;
    v36[4] = v27;
    v37 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v27;
    v38 = (_QWORD *)swift_task_alloc(v37);
    *(_QWORD *)(v0 + 208) = v38;
    v39 = sub_100012E18(&qword_1005D1230);
    *v38 = v0;
    v38[1] = sub_10039A298;
    return NSManagedObjectContext.perform<A>(_:)(v0 + 24, sub_10013B1E0, v36, v39);
  }
}

uint64_t sub_10039A298()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_release(v1);
  return swift_task_switch(sub_10039A2F4, 0, 0);
}

uint64_t sub_10039A2F4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  os_log_type_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  void (*v32)(uint64_t, uint64_t, __n128);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  NSString v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[2];

  v2 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 216) = v2;
  if (v2)
  {
    v3 = objc_msgSend(*(id *)(v0 + 64), "managedObjectContextForObjectID:", v2);
    *(_QWORD *)(v0 + 224) = v3;
    if (v3)
    {
      v4 = v3;
      v5 = swift_allocObject(&unk_10056BFE0, 32, 7);
      *(_QWORD *)(v0 + 232) = v5;
      *(_QWORD *)(v5 + 16) = v4;
      *(_QWORD *)(v5 + 24) = v2;
      v6 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v4;
      v7 = v2;
      v8 = (_QWORD *)swift_task_alloc(v6);
      *(_QWORD *)(v0 + 240) = v8;
      v9 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
      *v8 = v0;
      v8[1] = sub_10039A988;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 32, sub_10039BD4C, v5, v9);
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 120);
      v34 = *(_QWORD *)(v0 + 96);
      v35 = *(_QWORD *)(v0 + 104);
      v36 = *(_QWORD *)(v0 + 56);
      v37 = *(_QWORD *)(v0 + 40);
      v38 = swift_allocObject(&unk_10056BFB8, 24, 7);
      *(_QWORD *)(v38 + 16) = 0;
      v39 = v2;
      sub_100137524(v38, 225, v39);

      swift_release(v38);
      swift_willThrow(v40);

      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
      swift_bridgeObjectRelease(v37);
      swift_release(v36);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
      v41 = *(_QWORD *)(v0 + 160);
      v43 = *(_QWORD *)(v0 + 144);
      v42 = *(_QWORD *)(v0 + 152);
      v45 = *(_QWORD *)(v0 + 112);
      v44 = *(_QWORD *)(v0 + 120);
      v46 = *(_QWORD *)(v0 + 88);
      swift_task_dealloc(*(_QWORD *)(v0 + 168));
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 112);
    v11 = *(_QWORD *)(v0 + 120);
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    static Logger.link.getter(v1);
    v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v12, v11, v13);
    v16 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.error.getter(v16, v17);
    v19 = os_log_type_enabled(v16, v18);
    v20 = *(_QWORD *)(v0 + 112);
    v21 = *(_QWORD *)(v0 + 120);
    v22 = *(_QWORD *)(v0 + 96);
    v23 = *(_QWORD *)(v0 + 104);
    v24 = *(_QWORD *)(v0 + 88);
    v87 = *(_QWORD *)(v0 + 80);
    v88 = *(_QWORD *)(v0 + 72);
    if (v19)
    {
      v86 = *(_QWORD *)(v0 + 88);
      v25 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(64, -1);
      v89[0] = v26;
      *(_DWORD *)v25 = 136315394;
      *(_QWORD *)(v25 + 4) = sub_1003A4190(0x7469746E45676154, 0xE900000000000079, v89);
      *(_WORD *)(v25 + 12) = 2080;
      v27 = sub_100019C6C((unint64_t *)&unk_1005DB510, (uint64_t (*)(uint64_t))&type metadata accessor for TagID, (uint64_t)&protocol conformance descriptor for TagID);
      v28 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v22, v27);
      v85 = v21;
      v30 = v29;
      *(_QWORD *)(v25 + 14) = sub_1003A4190(v28, v29, v89);
      v31 = swift_bridgeObjectRelease(v30);
      v32 = *(void (**)(uint64_t, uint64_t, __n128))(v23 + 8);
      v32(v20, v22, v31);
      _os_log_impl((void *)&_mh_execute_header, v16, v18, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v86, v88);
      result = ((uint64_t (*)(uint64_t, uint64_t))v32)(v85, v22);
    }
    else
    {

      v47 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v47(v20, v22);
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v24, v88);
      result = ((uint64_t (*)(uint64_t, uint64_t))v47)(v21, v22);
    }
    v48 = *(_QWORD *)(v0 + 176);
    v49 = *(_QWORD *)(v0 + 184);
    if (v49 == v48)
    {
      v50 = 1;
    }
    else
    {
      if (v49 >= v48)
      {
        __break(1u);
        return result;
      }
      sub_100145220(*(_QWORD *)(v0 + 40)+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 136) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 136) + 80))+ *(_QWORD *)(*(_QWORD *)(v0 + 136) + 72) * v49, *(_QWORD *)(v0 + 160), type metadata accessor for TagEntity);
      v50 = 0;
      ++v49;
    }
    *(_QWORD *)(v0 + 184) = v49;
    v52 = *(_QWORD *)(v0 + 152);
    v51 = *(_QWORD *)(v0 + 160);
    v53 = *(_QWORD *)(v0 + 128);
    v54 = *(_QWORD *)(v0 + 136);
    v55 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56))(v51, v50, 1, v53);
    sub_10014BD1C(v51, v52, &qword_1005CF1E8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53) != 1)
    {
      v56 = *(_QWORD *)(v0 + 144);
      v57 = *(void (**)(uint64_t))(v0 + 48);
      sub_10013B170(*(_QWORD *)(v0 + 152), v56, type metadata accessor for TagEntity);
      v57(v56);
      sub_100145264(v56, type metadata accessor for TagEntity);
      v55 = 0;
    }
    v58 = *(_QWORD *)(v0 + 168);
    v59 = *(_QWORD *)(v0 + 96);
    v60 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 56))(v58, v55, 1, v59);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59);
    v62 = *(_QWORD *)(v0 + 168);
    if (v61 == 1)
    {
      v64 = *(_QWORD *)(v0 + 152);
      v63 = *(_QWORD *)(v0 + 160);
      v65 = *(_QWORD *)(v0 + 144);
      v67 = *(_QWORD *)(v0 + 112);
      v66 = *(_QWORD *)(v0 + 120);
      v68 = *(_QWORD *)(v0 + 88);
      v69 = *(_QWORD *)(v0 + 56);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
      swift_release(v69);
      v70 = *(_QWORD *)(v0 + 16);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      swift_task_dealloc(v68);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v70);
    }
    else
    {
      v71 = *(void **)(v0 + 64);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 104) + 32))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 96));
      v72 = objc_msgSend(v71, "modernManagedObjectContext");
      *(_QWORD *)(v0 + 192) = v72;
      v73 = (void *)objc_opt_self(ICHashtag);
      TagID.displayText.getter();
      v75 = v74;
      v76 = String._bridgeToObjectiveC()();
      v77 = objc_msgSend(v73, "standardizedHashtagRepresentationForDisplayText:", v76, swift_bridgeObjectRelease(v75).n128_f64[0]);

      v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
      v80 = v79;

      v81 = (_QWORD *)swift_allocObject(&unk_10056BF90, 40, 7);
      *(_QWORD *)(v0 + 200) = v81;
      v81[2] = v78;
      v81[3] = v80;
      v81[4] = v72;
      v82 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v72;
      v83 = (_QWORD *)swift_task_alloc(v82);
      *(_QWORD *)(v0 + 208) = v83;
      v84 = sub_100012E18(&qword_1005D1230);
      *v83 = v0;
      v83[1] = sub_10039A298;
      return NSManagedObjectContext.perform<A>(_:)(v0 + 24, sub_10013B1E0, v81, v84);
    }
  }
}

uint64_t sub_10039A988()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 240);
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 232);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
    swift_release(v4);
    v5 = sub_10039AD78;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 232));
    v5 = sub_10039AA08;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10039AA08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;

  v2 = *(_QWORD *)(v1 + 32);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(a1);
  v4 = *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v3 = *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v4 >= v3 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1);
  v6 = *(void **)(v1 + 216);
  v5 = *(void **)(v1 + 224);
  v7 = *(_QWORD *)(v1 + 120);
  v8 = *(_QWORD *)(v1 + 96);
  v9 = *(_QWORD *)(v1 + 104);
  v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v2);
  specialized Array._endMutation()(v10);

  result = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v12 = *(_QWORD *)(v1 + 176);
  v13 = *(_QWORD *)(v1 + 184);
  if (v13 == v12)
  {
    v14 = 1;
  }
  else
  {
    if (v13 >= v12)
    {
      __break(1u);
      return result;
    }
    sub_100145220(*(_QWORD *)(v1 + 40)+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 + 136) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 + 136) + 80))+ *(_QWORD *)(*(_QWORD *)(v1 + 136) + 72) * v13, *(_QWORD *)(v1 + 160), type metadata accessor for TagEntity);
    v14 = 0;
    ++v13;
  }
  *(_QWORD *)(v1 + 184) = v13;
  v16 = *(_QWORD *)(v1 + 152);
  v15 = *(_QWORD *)(v1 + 160);
  v17 = *(_QWORD *)(v1 + 128);
  v18 = *(_QWORD *)(v1 + 136);
  v19 = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v15, v14, 1, v17);
  sub_10014BD1C(v15, v16, &qword_1005CF1E8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    v20 = *(_QWORD *)(v1 + 144);
    v21 = *(void (**)(uint64_t))(v1 + 48);
    sub_10013B170(*(_QWORD *)(v1 + 152), v20, type metadata accessor for TagEntity);
    v21(v20);
    sub_100145264(v20, type metadata accessor for TagEntity);
    v19 = 0;
  }
  v22 = *(_QWORD *)(v1 + 168);
  v23 = *(_QWORD *)(v1 + 96);
  v24 = *(_QWORD *)(v1 + 104);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v22, v19, 1, v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
  {
    v25 = *(_QWORD *)(v1 + 160);
    v26 = *(_QWORD *)(v1 + 168);
    v28 = *(_QWORD *)(v1 + 144);
    v27 = *(_QWORD *)(v1 + 152);
    v30 = *(_QWORD *)(v1 + 112);
    v29 = *(_QWORD *)(v1 + 120);
    v31 = *(_QWORD *)(v1 + 88);
    v32 = *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
    swift_release(v32);
    v33 = *(_QWORD *)(v1 + 16);
    swift_task_dealloc(v26);
    swift_task_dealloc(v25);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v33);
  }
  else
  {
    v34 = *(void **)(v1 + 64);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 104) + 32))(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 96));
    v35 = objc_msgSend(v34, "modernManagedObjectContext");
    *(_QWORD *)(v1 + 192) = v35;
    v36 = (void *)objc_opt_self(ICHashtag);
    TagID.displayText.getter();
    v38 = v37;
    v39 = String._bridgeToObjectiveC()();
    v40 = objc_msgSend(v36, "standardizedHashtagRepresentationForDisplayText:", v39, swift_bridgeObjectRelease(v38).n128_f64[0]);

    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v43 = v42;

    v44 = (_QWORD *)swift_allocObject(&unk_10056BF90, 40, 7);
    *(_QWORD *)(v1 + 200) = v44;
    v44[2] = v41;
    v44[3] = v43;
    v44[4] = v35;
    v45 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v35;
    v46 = (_QWORD *)swift_task_alloc(v45);
    *(_QWORD *)(v1 + 208) = v46;
    v47 = sub_100012E18(&qword_1005D1230);
    *v46 = v1;
    v46[1] = sub_10039A298;
    return NSManagedObjectContext.perform<A>(_:)(v1 + 24, sub_10013B1E0, v44, v47);
  }
}

uint64_t sub_10039AD78()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 40);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  swift_bridgeObjectRelease(v6);
  swift_release(v5);
  v7 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 112);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10039AE3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_10039AE5C, 0, 0);
}

uint64_t sub_10039AE5C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0[6] + 8);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005DB4F0 + dword_1005DB4F0);
  v2 = (_QWORD *)swift_task_alloc(unk_1005DB4F4);
  v0[7] = v2;
  *v2 = v0;
  v2[1] = sub_10039AECC;
  return v4(v0[3], v0[4], v0[5], v1);
}

uint64_t sub_10039AECC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 56);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 64) = a1;
  return swift_task_switch(sub_10039AF48, 0, 0);
}

uint64_t sub_10039AF48()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10039AF60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for BulkModifyNoteTags(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;

  v8 = v7 + *(int *)(v1 + 24);
  v9 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10039AFFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BulkModifyNoteTags(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = v1 + ((v4 + 40) & ~v4);
  v7 = swift_task_alloc(dword_1005DB4CC);
  v8 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v7;
  *(_QWORD *)v7 = v2;
  *(_QWORD *)(v7 + 8) = sub_100145358;
  *(_QWORD *)(v7 + 40) = v5;
  *(_QWORD *)(v7 + 48) = v6;
  *(_OWORD *)(v7 + 24) = v8;
  *(_QWORD *)(v7 + 16) = a1;
  return swift_task_switch(sub_10039AE5C, 0, 0);
}

uint64_t sub_10039B090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  char *v25;
  BOOL v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  os_log_type_t v39;
  uint64_t v40;
  _QWORD *v41;
  id v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  id v48;
  unsigned int v49;
  id v50;
  uint64_t v51;
  _QWORD *v52;
  NSObject *v53;
  os_log_type_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  _QWORD *v67;
  id v68;
  uint64_t v69;
  uint64_t result;
  _QWORD v71[2];
  _QWORD *v72;
  id v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  unsigned __int8 *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  id v97[3];

  v7 = v6;
  v73 = a4;
  v87 = a3;
  v72 = a6;
  v81 = type metadata accessor for BulkModifyNoteTags(0);
  __chkstk_darwin(v81);
  v12 = (uint64_t)v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for NoteID(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76);
  v82 = (char *)v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v86 = (char *)v71 - v19;
  v96 = _swiftEmptyArrayStorage;
  if ((unint64_t)a1 >> 62)
    goto LABEL_45;
  v20 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v20)
  {
    v71[1] = v7;
    v22 = 0;
    v91 = a1 & 0xC000000000000001;
    v78 = a1 & 0xFFFFFFFFFFFFFF8;
    v77 = a1 + 32;
    v23 = a2 & 0xFFFFFFFFFFFFFF8;
    v83 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v23 = a2;
    v71[0] = v23;
    v7 = a2 & 0xC000000000000001;
    *(_QWORD *)&v21 = 138543362;
    v74 = v21;
    v84 = (unint64_t)a2 >> 62;
    v85 = a5;
    v92 = v18;
    v90 = v12;
    v88 = v20;
    v80 = v14;
    v79 = v15;
    v89 = a1;
    while (1)
    {
      if (v91)
      {
        v25 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, a1);
      }
      else
      {
        if (v22 >= *(_QWORD *)(v78 + 16))
          goto LABEL_44;
        v25 = (char *)*(id *)(v77 + 8 * v22);
      }
      v18 = v25;
      v26 = __OFADD__(v22, 1);
      v27 = v22 + 1;
      if (v26)
        break;
      v94 = v27;
      v28 = objc_opt_self(ICNote);
      v29 = swift_dynamicCastObjCClass(v18, v28);
      if (!v29)
      {
        (*(void (**)(char *, unsigned __int8 *, uint64_t))(v15 + 16))(v86, &v87[*(int *)(v81 + 24)], v14);
        v38 = v18;
        v24 = Logger.logObject.getter(v38);
        v39 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v39))
        {
          v40 = swift_slowAlloc(12, -1);
          v41 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v40 = v74;
          v42 = objc_msgSend(v38, "objectID");
          *(_QWORD *)(v40 + 4) = v42;
          *v41 = v42;

          _os_log_impl((void *)&_mh_execute_header, v24, v39, "Object with ID %{public}@ was not an ICNote", (uint8_t *)v40, 0xCu);
          v43 = sub_100012E18(&qword_1005D3A30);
          swift_arrayDestroy(v41, 1, v43);
          swift_slowDealloc(v41, -1, -1);
          swift_slowDealloc(v40, -1, -1);
        }
        else
        {

          v24 = v38;
        }
        v18 = v92;
        v12 = v90;

        (*(void (**)(char *, uint64_t))(v15 + 8))(v86, v14);
        a5 = v85;
        goto LABEL_8;
      }
      a1 = v29;
      v93 = v18;
      if (v84)
      {
        v45 = v18;
        swift_bridgeObjectRetain(a2);
        v12 = _CocoaArrayWrapper.endIndex.getter(v71[0]);
        if (!v12)
        {
LABEL_38:
          v46 = v93;

          swift_bridgeObjectRelease(a2);
LABEL_39:
          v18 = v92;
          v12 = v90;
          goto LABEL_8;
        }
      }
      else
      {
        v12 = *(_QWORD *)(v83 + 16);
        v30 = v18;
        swift_bridgeObjectRetain(a2);
        if (!v12)
          goto LABEL_38;
      }
      if (v12 < 1)
        goto LABEL_43;
      a5 = 0;
      v14 = 0;
      v15 = *v87;
      do
      {
        if (v7)
        {
          v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, a2);
          if ((v15 & 1) != 0)
            goto LABEL_23;
        }
        else
        {
          v31 = *(id *)(a2 + 8 * v14 + 32);
          if ((v15 & 1) != 0)
          {
LABEL_23:
            v18 = (char *)objc_msgSend((id)a1, "removeHashtag:", v31, v71[0]);

            if (!(_DWORD)v18)
              goto LABEL_20;
            goto LABEL_19;
          }
        }
        v18 = (char *)objc_msgSend((id)a1, "addHashtagToNoteBodyIfMissing:", v31, v71[0]);

        if (!v18)
          goto LABEL_20;

LABEL_19:
        v26 = __OFADD__(a5++, 1);
        if (v26)
        {
          __break(1u);
          goto LABEL_42;
        }
LABEL_20:
        ++v14;
      }
      while (v12 != v14);
      swift_bridgeObjectRelease(a2);
      if (a5 <= 0)
      {
        v44 = v93;

        v14 = v80;
        v15 = v79;
        a5 = v85;
        goto LABEL_39;
      }
      v32 = sub_1000163BC(0, (unint64_t *)&qword_1005D39F0, ICNote_ptr);
      ICSearchIndexableNote<>.entityIdentifier.getter(v32);
      v33 = (unint64_t)v96;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v96);
      v14 = v80;
      a5 = v85;
      v18 = v92;
      v12 = v90;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v33 = sub_10016B830(0, *(_QWORD *)(v33 + 16) + 1, 1, v33);
      v36 = *(_QWORD *)(v33 + 16);
      v35 = *(_QWORD *)(v33 + 24);
      if (v36 >= v35 >> 1)
        v33 = sub_10016B830(v35 > 1, v36 + 1, 1, v33);
      *(_QWORD *)(v33 + 16) = v36 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v75 + 32))(v33+ ((*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80))+ *(_QWORD *)(v75 + 72) * v36, v82, v76);
      v37 = v93;

      v96 = (_QWORD *)v33;
      v15 = v79;
LABEL_8:
      a1 = v89;
      v22 = v94;
      if (v94 == v88)
      {
        swift_bridgeObjectRelease(v89);
        goto LABEL_50;
      }
    }
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    if (a1 < 0)
      v47 = a1;
    else
      v47 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v20 = _CocoaArrayWrapper.endIndex.getter(v47);
  }
  swift_bridgeObjectRelease(a1);
LABEL_50:
  v48 = v73;
  if ((objc_msgSend(v73, "hasChanges", v71[0]) & 1) != 0)
  {
    v97[0] = 0;
    v49 = objc_msgSend(v48, "save:", v97);
    v50 = v97[0];
    if (!v49)
    {
      v67 = v96;
      v68 = v97[0];
      swift_bridgeObjectRelease(v67);
      _convertNSErrorToError(_:)(v50);

      return swift_willThrow(v69);
    }
    v51 = (uint64_t)v87;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v15 + 16))(v18, &v87[*(int *)(v81 + 24)], v14);
    v52 = v96;
    sub_100145220(v51, v12, type metadata accessor for BulkModifyNoteTags);
    swift_bridgeObjectRetain_n(v52, 2);
    swift_bridgeObjectRetain_n(a5, 2);
    v53 = Logger.logObject.getter(v50);
    v54 = static os_log_type_t.info.getter();
    v55 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      v56 = swift_slowAlloc(32, -1);
      LODWORD(v94) = v55;
      v57 = v56;
      v93 = (char *)swift_slowAlloc(64, -1);
      v97[0] = v93;
      *(_DWORD *)v57 = 134349571;
      v92 = v18;
      v79 = v15;
      v58 = v52[2];
      swift_bridgeObjectRelease(v52);
      v95 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v57 + 4);
      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v57 + 12) = 2082;
      if (*(_BYTE *)v12)
        v59 = 0x65766F6D6572;
      else
        v59 = 6579297;
      if (*(_BYTE *)v12)
        v60 = 0xE600000000000000;
      else
        v60 = 0xE300000000000000;
      v95 = sub_1003A4190(v59, v60, (uint64_t *)v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v57 + 14);
      swift_bridgeObjectRelease(v60);
      sub_100145264(v12, type metadata accessor for BulkModifyNoteTags);
      *(_WORD *)(v57 + 22) = 2085;
      v61 = type metadata accessor for TagEntity(0);
      v62 = swift_bridgeObjectRetain(a5);
      v63 = Array.description.getter(v62, v61);
      v80 = v14;
      v65 = v64;
      swift_bridgeObjectRelease(a5);
      v95 = sub_1003A4190(v63, v65, (uint64_t *)v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v57 + 24);
      swift_bridgeObjectRelease_n(a5, 2);
      swift_bridgeObjectRelease(v65);
      _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v94, "Updated %{public}ld notes to %{public}s tags: %{sensitive}s", (uint8_t *)v57, 0x20u);
      v66 = v93;
      swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      (*(void (**)(char *, uint64_t))(v79 + 8))(v92, v80);
    }
    else
    {
      swift_bridgeObjectRelease_n(v52, 2);
      sub_100145264(v12, type metadata accessor for BulkModifyNoteTags);

      swift_bridgeObjectRelease_n(a5, 2);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
  }
  result = swift_beginAccess(&v96, v97, 0, 0);
  *v72 = v96;
  return result;
}

uint64_t sub_10039B9E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for BulkModifyNoteTags(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  v8 = v0 + v4;

  v9 = v8 + *(int *)(v1 + 24);
  v10 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_10039BAB0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BulkModifyNoteTags(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10039B090(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (unsigned __int8 *)(v1 + v4), *(void **)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)), a1);
}

id sub_10039BB1C(void *a1, uint64_t a2)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v8;
  __objc2_prot *v9;

  v8 = 0;
  v2 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v8);
  v3 = v8;
  if (v2)
  {
    v9 = &OBJC_PROTOCOL___ICSearchIndexableNote;
    v4 = (id)swift_dynamicCastObjCProtocolUnconditional(v2, 1, &v9, 0, 0, 0);
    v5 = v3;
  }
  else
  {
    v4 = v8;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v6);
  }
  return v4;
}

id sub_10039BBF4(void *a1, uint64_t a2)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  id v10;

  v10 = 0;
  v2 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v10);
  v3 = v10;
  if (v2)
  {
    v4 = v2;
    v5 = objc_opt_self(ICHashtag);
    v6 = (id)swift_dynamicCastObjCClassUnconditional(v4, v5, 0, 0, 0);
    v7 = v3;
  }
  else
  {
    v6 = v10;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow(v8);
  }
  return v6;
}

uint64_t sub_10039BCD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10039BCFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10039BD20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10039BD4C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id result;

  result = sub_10039BBF4(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
  if (!v2)
    *a1 = result;
  return result;
}

id sub_10039BD78@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  id result;

  result = sub_10039BB1C(*(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for BulkModifyNoteTags.ChangeOperation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10039BDF0 + 4 * byte_100465925[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10039BE24 + 4 * byte_100465920[v4]))();
}

uint64_t sub_10039BE24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10039BE2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10039BE34);
  return result;
}

uint64_t sub_10039BE40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10039BE48);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10039BE4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10039BE54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BulkModifyNoteTags.ChangeOperation()
{
  return &type metadata for BulkModifyNoteTags.ChangeOperation;
}

unint64_t sub_10039BE74()
{
  unint64_t result;

  result = qword_1005DB538;
  if (!qword_1005DB538)
  {
    result = swift_getWitnessTable(&unk_100465A38, &type metadata for BulkModifyNoteTags.ChangeOperation);
    atomic_store(result, (unint64_t *)&qword_1005DB538);
  }
  return result;
}

uint64_t sub_10039BEBC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005DB540);
  sub_10012A0B0(v0, (uint64_t)qword_1005DB540);
  return static Logger.application.getter();
}

double sub_10039C028()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  double result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t aBlock[5];
  uint64_t v45;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100012E18(&qword_1005DB690);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR___ICAppStoreRatingObserver_isObserving;
  if ((v1[OBJC_IVAR___ICAppStoreRatingObserver_isObserving] & 1) == 0)
  {
    v42 = ObjectType;
    if (qword_1005CED78 != -1)
      swift_once(&qword_1005CED78, sub_10039BEBC);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10012A0B0(v9, (uint64_t)qword_1005DB540);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v41 = v3;
      v15 = v14;
      aBlock[0] = v14;
      v40 = v7;
      *(_DWORD *)v13 = 136315138;
      v16 = _typeName(_:qualified:)(v42, 0);
      v18 = v17;
      v43 = sub_1003A4190(v16, v17, aBlock);
      v7 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, aBlock, v13 + 4);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s: startObserving", v13, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      v19 = v15;
      v3 = v41;
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

    v1[v8] = 1;
    v20 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v20, "addObserver:selector:name:object:", v1, "sceneWillEnterForeground", UISceneWillEnterForegroundNotification, 0);
    objc_msgSend(v20, "addObserver:selector:name:object:", v1, "noteEditorDidEditNote", ICNoteEditorViewControllerDidEditNote, 0);

    v21 = objc_msgSend(*(id *)(*(_QWORD *)&v1[OBJC_IVAR___ICAppStoreRatingObserver_appStoreRatingController]+ OBJC_IVAR___ICAppStoreRatingController_windowScene), "keyWindow");
    if (v21)
    {
      v22 = v21;
      v23 = sub_10039C868();
      objc_msgSend(v22, "addGestureRecognizer:", v23);

      v24 = sub_10039C938();
      objc_msgSend(v22, "addGestureRecognizer:", v24);

    }
    v25 = sub_10039CAEC();
    v26 = *(void **)&v1[OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController];
    *(_QWORD *)&v1[OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController] = v25;

    v27 = *(void **)&v1[OBJC_IVAR___ICAppStoreRatingObserver_managedObjectContext];
    v28 = swift_allocObject(&unk_10056C128, 32, 7);
    v29 = v42;
    *(_QWORD *)(v28 + 16) = v1;
    *(_QWORD *)(v28 + 24) = v29;
    aBlock[4] = (uint64_t)sub_10039D4D8;
    v45 = v28;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100206734;
    aBlock[3] = (uint64_t)&unk_10056C140;
    v30 = _Block_copy(aBlock);
    v31 = v45;
    v32 = v1;
    objc_msgSend(v27, "performBlock:", v30, swift_release(v31).n128_f64[0]);
    _Block_release(v30);
    KeyPath = swift_getKeyPath(&unk_100465AA8, v33);
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)(KeyPath, 5);
    swift_release(KeyPath);
    v35 = swift_allocObject(&unk_10056C178, 24, 7);
    swift_unknownObjectWeakInit(v35 + 16, v32);
    v36 = sub_10039D52C();
    v37 = Publisher<>.sink(receiveValue:)(sub_10039D524, v35, v3, v36);
    v38 = swift_release(v35);
    (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v7, v3, v38);
    v39 = *(_QWORD *)&v32[OBJC_IVAR___ICAppStoreRatingObserver_didRequestRatingObservation];
    *(_QWORD *)&v32[OBJC_IVAR___ICAppStoreRatingObserver_didRequestRatingObservation] = v37;
    *(_QWORD *)&result = swift_release(v39).n128_u64[0];
  }
  return result;
}

uint64_t sub_10039C46C(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v6) = *a1;
  *(_BYTE *)(*a2 + OBJC_IVAR___ICAppStoreRatingController_didRequestRating) = v6;
  if ((_DWORD)v6 == 1)
  {
    static Date.now.getter(result);
    v8 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
    return sub_1003CDFF8((uint64_t)v7);
  }
  return result;
}

void sub_10039C524(_BYTE *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  if (*a1 == 1)
  {
    v2 = a2 + 16;
    swift_beginAccess(a2 + 16, v5, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v2);
    if (Strong)
    {
      v4 = (void *)Strong;
      sub_10039C580();

    }
  }
}

double sub_10039C580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v4 = OBJC_IVAR___ICAppStoreRatingObserver_isObserving;
  if (*(_BYTE *)(v0 + OBJC_IVAR___ICAppStoreRatingObserver_isObserving) == 1)
  {
    v5 = ObjectType;
    if (qword_1005CED78 != -1)
      swift_once(&qword_1005CED78, sub_10039BEBC);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10012A0B0(v6, (uint64_t)qword_1005DB540);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v23 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = _typeName(_:qualified:)(v5, 0);
      v14 = v13;
      v22 = sub_1003A4190(v12, v13, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 4);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: stopObserving", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }

    *(_BYTE *)(v1 + v4) = 0;
    v15 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v15, "removeObserver:", v1);

    v16 = objc_msgSend(*(id *)(*(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_appStoreRatingController)+ OBJC_IVAR___ICAppStoreRatingController_windowScene), "keyWindow");
    if (v16)
    {
      v17 = v16;
      v18 = sub_10039C868();
      objc_msgSend(v17, "removeGestureRecognizer:", v18);

      v19 = sub_10039C938();
      objc_msgSend(v17, "removeGestureRecognizer:", v19);

    }
    v20 = *(void **)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController);
    *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController) = 0;

    v21 = *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_didRequestRatingObservation);
    *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_didRequestRatingObservation) = 0;
    *(_QWORD *)&result = swift_release(v21).n128_u64[0];
  }
  return result;
}

id sub_10039C868()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___tapGestureRecognizer;
  v2 = *(void **)(v0 + OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___tapGestureRecognizer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___tapGestureRecognizer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "initWithTarget:action:", v0, "didRecognizeGesture");
    objc_msgSend(v4, "setRequiresExclusiveTouchType:", 0);
    objc_msgSend(v4, "setCancelsTouchesInView:", 0);
    objc_msgSend(v4, "setDelaysTouchesEnded:", 0);
    objc_msgSend(v4, "setDelegate:", v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10039C938()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___panGestureRecognizer;
  v2 = *(void **)(v0 + OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___panGestureRecognizer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___panGestureRecognizer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UIPanGestureRecognizer), "initWithTarget:action:", v0, "didRecognizeGesture");
    objc_msgSend(v4, "setRequiresExclusiveTouchType:", 0);
    objc_msgSend(v4, "setCancelsTouchesInView:", 0);
    objc_msgSend(v4, "setDelegate:", v0);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_10039CAEC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  Class isa;
  id v13;
  id v14;
  uint64_t v16;

  v1 = v0;
  v2 = (void *)objc_opt_self(ICNote);
  v3 = objc_msgSend(v2, "newFetchRequestForNotes");
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "predicateForNotesInAccountWithIdentifier:", v4);

  v6 = *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingObserver_managedObjectContext);
  v7 = objc_msgSend(v2, "predicateForVisibleNotesInContext:", v6);
  v8 = sub_100012E18(&qword_1005CF6F0);
  v9 = swift_allocObject(v8, 48, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100451BF0;
  *(_QWORD *)(v9 + 32) = v5;
  *(_QWORD *)(v9 + 40) = v7;
  v16 = v9;
  specialized Array._endMutation()(v9);
  sub_1000163BC(0, &qword_1005D5230, NSPredicate_ptr);
  v10 = v5;
  v11 = v7;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  v13 = objc_msgSend((id)objc_opt_self(NSCompoundPredicate), "andPredicateWithSubpredicates:", isa);

  objc_msgSend(v3, "setPredicate:", v13);
  v14 = objc_msgSend(objc_allocWithZone((Class)NSFetchedResultsController), "initWithFetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:", v3, v6, 0, 0);
  objc_msgSend(v14, "setDelegate:", v1);

  return v14;
}

void sub_10039CCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  unsigned int v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;

  v3 = OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController;
  v4 = *(void **)(a1 + OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController);
  if (v4)
  {
    v30 = 0;
    v6 = objc_msgSend(v4, "performFetch:", &v30);
    v7 = v30;
    if (v6)
    {
      v8 = *(void **)(a1 + v3);
      v9 = v30;
      if (v8)
      {
        v10 = objc_msgSend(v8, "fetchedObjects");
        if (v10)
        {
          v11 = v10;
          v12 = sub_1000163BC(0, (unint64_t *)&qword_1005D39F0, ICNote_ptr);
          v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, v12);

          if ((unint64_t)v13 >> 62)
          {
            if (v13 < 0)
              v27 = v13;
            else
              v27 = v13 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v13);
            v14 = _CocoaArrayWrapper.endIndex.getter(v27);
            swift_bridgeObjectRelease(v13);
          }
          else
          {
            v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease(v13);
          sub_1003CD780(v14);
        }
      }
    }
    else
    {
      v15 = v30;
      v16 = _convertNSErrorToError(_:)(v7);

      swift_willThrow(v17);
      if (qword_1005CED78 != -1)
        swift_once(&qword_1005CED78, sub_10039BEBC);
      v18 = type metadata accessor for Logger(0);
      v19 = sub_10012A0B0(v18, (uint64_t)qword_1005DB540);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = (void *)swift_slowAlloc(32, -1);
        v30 = v23;
        *(_DWORD *)v22 = 136315138;
        v24 = _typeName(_:qualified:)(a2, 0);
        v26 = v25;
        v28 = sub_1003A4190(v24, v25, (uint64_t *)&v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v22 + 4);
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s: setUpNoteCountIndexer", v22, 0xCu);
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);
      }
      swift_errorRelease(v16);

    }
  }
}

uint64_t type metadata accessor for AppStoreRatingObserver()
{
  return objc_opt_self(ICAppStoreRatingObserver);
}

id sub_10039D264(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _BYTE *v5;
  _BYTE *v6;
  objc_class *ObjectType;
  _QWORD *v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  objc_super v21;

  v6 = v5;
  ObjectType = (objc_class *)swift_getObjectType(v6);
  v6[OBJC_IVAR___ICAppStoreRatingObserver_isObserving] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___ICAppStoreRatingObserver_didRequestRatingObservation] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___tapGestureRecognizer] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___ICAppStoreRatingObserver____lazy_storage___panGestureRecognizer] = 0;
  *(_QWORD *)&v6[OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController] = 0;
  v13 = &v6[OBJC_IVAR___ICAppStoreRatingObserver_accountIdentifier];
  *v13 = a1;
  v13[1] = a2;
  *(_QWORD *)&v6[OBJC_IVAR___ICAppStoreRatingObserver_managedObjectContext] = a3;
  v14 = (void *)objc_opt_self(ICCloudConfiguration);
  v15 = v6;
  v16 = a3;
  v17 = objc_msgSend(v14, "sharedConfiguration");
  if (qword_1005CED10 != -1)
    swift_once(&qword_1005CED10, sub_100345C48);
  v18 = qword_100601D70;
  objc_allocWithZone((Class)type metadata accessor for AppStoreRatingController(0));
  swift_retain(v18);
  v19 = sub_1003D07FC(v17, v18, a4, a5);

  swift_release(v18);
  *(_QWORD *)&v15[OBJC_IVAR___ICAppStoreRatingObserver_appStoreRatingController] = v19;

  v21.receiver = v15;
  v21.super_class = ObjectType;
  return objc_msgSendSuper2(&v21, "init");
}

id sub_10039D3E4()
{
  uint64_t v0;
  id result;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = *(id *)(v0 + OBJC_IVAR___ICAppStoreRatingObserver_noteCountFetchedResultsController);
  if (result)
  {
    result = objc_msgSend(result, "fetchedObjects");
    if (result)
    {
      v2 = result;
      v3 = sub_1000163BC(0, (unint64_t *)&qword_1005D39F0, ICNote_ptr);
      v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

      if ((unint64_t)v4 >> 62)
      {
        if (v4 < 0)
          v6 = v4;
        else
          v6 = v4 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4);
        v5 = _CocoaArrayWrapper.endIndex.getter(v6);
        swift_bridgeObjectRelease(v4);
      }
      else
      {
        v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease(v4);
      return (id)sub_1003CD780(v5);
    }
  }
  return result;
}

uint64_t sub_10039D4B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10039D4D8()
{
  uint64_t v0;

  sub_10039CCBC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_10039D4E0@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR___ICAppStoreRatingController_didRequestRating);
  return result;
}

uint64_t sub_10039D500()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10039D524(_BYTE *a1)
{
  uint64_t v1;

  sub_10039C524(a1, v1);
}

unint64_t sub_10039D52C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DB698;
  if (!qword_1005DB698)
  {
    v1 = sub_10001537C(&qword_1005DB690);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005DB698);
  }
  return result;
}

id sub_10039D578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10039D5C0(a1, a2, a3, type metadata accessor for AccountEntity, sub_10039EF0C);
}

id sub_10039D59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10039D5C0(a1, a2, a3, type metadata accessor for AttachmentEntity, sub_10039EEDC);
}

id sub_10039D5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t (*a5)(void))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  NSURL *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t (*v26)(void);
  _QWORD v27[3];
  void *v28;

  v26 = a5;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a4(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v25 - v14;
  v27[0] = a1;
  v27[1] = a2;
  v27[2] = a3;
  AppDependency.wrappedValue.getter(&v28);
  v16 = v28;
  IntentParameter.wrappedValue.getter(v15);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, &v15[*(int *)(v13 + 20)], v9);
  sub_100145264((uint64_t)v15, a4);
  URL._bridgeToObjectiveC()(v17);
  v19 = v18;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v20 = objc_msgSend(v16, "managedObjectIDForURIRepresentation:", v19);

  if (!v20)
  {
    __chkstk_darwin(v21);
    *(&v25 - 2) = (uint64_t)v27;
    v22 = swift_allocObject(&unk_10056C230, 24, 7);
    *(_QWORD *)(v22 + 16) = 0;
    sub_10039E3D4(v22, 230, v26);
    v23 = swift_release(v22);
    swift_willThrow(v23);
  }
  return v20;
}

id sub_10039D788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10039D5C0(a1, a2, a3, type metadata accessor for FolderEntity, sub_10039EEAC);
}

id sub_10039D7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10039D5C0(a1, a2, a3, type metadata accessor for NoteEntity, sub_10039EE7C);
}

id sub_10039D7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10039D5C0(a1, a2, a3, type metadata accessor for TableEntity, sub_10039EE4C);
}

id sub_10039D7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  NSURL *v12;
  void *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  void *v21;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for TagEntity(0);
  __chkstk_darwin(v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = a1;
  v20[1] = a2;
  AppDependency.wrappedValue.getter(&v21);
  v11 = v21;
  IntentParameter.wrappedValue.getter(v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, &v10[*(int *)(v8 + 20)], v4);
  sub_100145264((uint64_t)v10, type metadata accessor for TagEntity);
  URL._bridgeToObjectiveC()(v12);
  v14 = v13;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v15 = objc_msgSend(v11, "managedObjectIDForURIRepresentation:", v14);

  if (!v15)
  {
    __chkstk_darwin(v16);
    v20[-2] = v20;
    v17 = swift_allocObject(&unk_10056C230, 24, 7);
    *(_QWORD *)(v17 + 16) = 0;
    sub_10039E3D4(v17, 230, sub_10039EE20);
    v18 = swift_release(v17);
    swift_willThrow(v18);
  }
  return v15;
}

id sub_10039D9B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t inited;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  Class isa;
  uint64_t v22;
  id v23;

  swift_retain(a1);
  swift_retain(a2);
  v6 = sub_10039D7F4(a1, a2);
  swift_release(a2);
  swift_release(a1);
  if (!v2)
  {
    AppDependency.wrappedValue.getter(&v23);
    v7 = v23;
    v8 = objc_msgSend(v23, "managedObjectContextForObjectID:", v6);

    v9 = sub_100012E18(&qword_1005CF6F0);
    inited = swift_initStackObject(v9, &v22);
    *(_OWORD *)(inited + 16) = xmmword_100456F30;
    *(_QWORD *)(inited + 32) = v6;
    v23 = (id)inited;
    specialized Array._endMutation()(inited);
    v11 = v23;
    if ((unint64_t)v23 >> 62)
    {
      if ((uint64_t)v23 < 0)
        v16 = (unint64_t)v23;
      else
        v16 = (unint64_t)v23 & 0xFFFFFFFFFFFFFF8;
      v17 = v6;
      swift_bridgeObjectRetain(v11);
      v18 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(v11);
      if (v18)
        goto LABEL_4;
    }
    else
    {
      v12 = *(_QWORD *)(((unint64_t)v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      v13 = v6;
      if (v12)
      {
LABEL_4:
        sub_100127DC8((uint64_t)v11);
        v15 = v14;
LABEL_10:
        swift_bridgeObjectRelease(v11);
        v19 = objc_allocWithZone((Class)ICTagSelection);
        sub_1001D76F4();
        sub_100019C6C((unint64_t *)&qword_1005D3CC0, (uint64_t (*)(uint64_t))sub_1001D76F4, (uint64_t)&protocol conformance descriptor for NSObject);
        isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v15);
        v3 = objc_msgSend(v19, "initWithManagedObjectContext:includedObjectIDs:", v8, isa);

        return v3;
      }
    }
    v15 = &_swiftEmptySetSingleton;
    goto LABEL_10;
  }
  return v3;
}

uint64_t OpenTagIntent.target.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for TagEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100138470(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100145264(a1, type metadata accessor for TagEntity);
}

void *OpenTagIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenTagIntent.persistentIdentifier;
}

uint64_t sub_10039DC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static OpenTagIntent.title);
  sub_10012A0B0(v10, (uint64_t)static OpenTagIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x676154206E65704FLL, 0xE800000000000000);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t OpenTagIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CED80 != -1)
    swift_once(&qword_1005CED80, sub_10039DC08);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static OpenTagIntent.title);
}

uint64_t static OpenTagIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CED80 != -1)
    swift_once(&qword_1005CED80, sub_10039DC08);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static OpenTagIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *OpenTagIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenTagIntent.openAppWhenRun;
}

uint64_t static OpenTagIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000032, 0x800000010048BEE0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static OpenTagIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005DB6A8);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005DB6B0);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100019928();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1, &type metadata for OpenTagIntent, v6);
  v7._countAndFlagsBits = 0x656874206E65704FLL;
  v7._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100465AD8, v8);
  v10 = sub_100012E18(&qword_1005DB6B8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 1734439968;
  v11._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for OpenTagIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenTagIntent, v6);
}

uint64_t sub_10039E1C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for TagEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100138470(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100145264(a1, type metadata accessor for TagEntity);
}

uint64_t sub_10039E248(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005DB6A8);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005DB6B0);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 1, a1, a2);
  v10._countAndFlagsBits = 0x656874206E65704FLL;
  v10._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_100465AD8, v11);
  v13 = sub_100012E18(&qword_1005DB6B8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 1734439968;
  v14._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_10039E3B0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = _s11MobileNotes13OpenTagIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

id sub_10039E3D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  void *v3;
  void **v4;
  id v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  _QWORD v21[3];
  _BYTE v22[80];
  uint64_t v23;

  v4 = (void **)(a1 + 16);
  v3 = *(void **)(a1 + 16);
  if (v3)
  {
    v5 = *(id *)(a1 + 16);
  }
  else
  {
    type metadata accessor for ICError(0);
    v9 = v8;
    v23 = a2;
    v10 = sub_100012E18((uint64_t *)&unk_1005D1EF0);
    inited = swift_initStackObject(v10, v22);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(ICErrorFailureReasonKey);
    *(_QWORD *)(inited + 40) = v12;
    v13 = a3();
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 48) = v13;
    *(_QWORD *)(inited + 56) = v14;
    v15 = sub_100174AD0(inited);
    v16 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    _BridgedStoredNSError.init(_:userInfo:)(v21, &v23, v15, v9, v16);
    v17 = (void *)v21[0];
    swift_beginAccess(v4, v21, 1, 0);
    v18 = *v4;
    *v4 = v17;
    v5 = v17;

    v3 = 0;
  }
  v19 = v3;
  return v5;
}

uint64_t sub_10039E500(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  Swift::String v17;
  _QWORD v19[2];

  v6 = a2(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - v8;
  v10 = a3(0);
  __chkstk_darwin(v10);
  v12 = (_QWORD *)((char *)v19 - v11);
  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v13._object = (void *)0x800000010048A710;
  v13._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v13);
  v14._countAndFlagsBits = _typeName(_:qualified:)(a4, 0);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 0x6174206874697720;
  v16._object = (void *)0xED00002074656772;
  String.append(_:)(v16);
  IntentParameter.wrappedValue.getter(v12);
  (*(void (**)(char *, _QWORD *, uint64_t))(v7 + 16))(v9, v12, v6);
  sub_100145264((uint64_t)v12, a3);
  _print_unlocked<A, B>(_:_:)(v9, v19, v6, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v17._countAndFlagsBits = 46;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v19[0];
}

uint64_t sub_10039E694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  Swift::String v7;
  Swift::String v8;
  void *object;
  Swift::String v10;
  Swift::String v11;
  _QWORD v13[2];

  v0 = type metadata accessor for TagID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for TagEntity(0);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(41);
  v7._object = (void *)0x800000010048A710;
  v7._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v7);
  v8._countAndFlagsBits = _typeName(_:qualified:)(&type metadata for OpenTagIntent, 0);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v10._countAndFlagsBits = 0x6174206874697720;
  v10._object = (void *)0xED00002074656772;
  String.append(_:)(v10);
  IntentParameter.wrappedValue.getter(v6);
  (*(void (**)(char *, _QWORD *, uint64_t))(v1 + 16))(v3, v6, v0);
  sub_100145264((uint64_t)v6, type metadata accessor for TagEntity);
  _print_unlocked<A, B>(_:_:)(v3, v13, v0, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v11._countAndFlagsBits = 46;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return v13[0];
}

uint64_t _s11MobileNotes13OpenTagIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[2];
  _QWORD v49[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v46 = *(_QWORD *)(v0 - 8);
  v47 = v0;
  __chkstk_darwin(v0);
  v45 = (char *)v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v44 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v43 = (char *)v41 - v5;
  v6 = sub_100012E18(&qword_1005CF1E8);
  __chkstk_darwin(v6);
  v42 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v41 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[1] = sub_100012E18(&qword_1005CF1F0);
  v25 = String.LocalizationValue.init(stringLiteral:)(6775124, 0xE300000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Tag intent", 35, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0x1000000000000022, 0x8000000100478860);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for tag", 29, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for TagEntity(0);
  v30 = v42;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v42, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v43;
  v32(v43, 1, 1, v31);
  v34 = v44;
  v32(v44, 1, 1, v31);
  v35 = v45;
  (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v45, enum case for InputConnectionBehavior.default(_:), v47);
  v36 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
  v37 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
  sub_100012E18(&qword_1005CEE50);
  v48[0] = 0xD000000000000021;
  v48[1] = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v49, v48, &type metadata for String, &protocol witness table for String);
  v38 = type metadata accessor for AppDependencyManager(0);
  v39 = static AppDependencyManager.shared.getter(v38);
  AppDependency.__allocating_init(key:manager:)(v49, v39);
  return v37;
}

uint64_t sub_10039EC90@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10039ECB8()
{
  return sub_100019C6C(&qword_1005DB6C0, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
}

unint64_t sub_10039ECE4(uint64_t a1)
{
  unint64_t result;

  result = sub_10039ED08();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10039ED08()
{
  unint64_t result;

  result = qword_1005DB6F0;
  if (!qword_1005DB6F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTagIntent, &type metadata for OpenTagIntent);
    atomic_store(result, (unint64_t *)&qword_1005DB6F0);
  }
  return result;
}

unint64_t sub_10039ED50()
{
  unint64_t result;

  result = qword_1005DB6F8;
  if (!qword_1005DB6F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenTagIntent, &type metadata for OpenTagIntent);
    atomic_store(result, (unint64_t *)&qword_1005DB6F8);
  }
  return result;
}

uint64_t sub_10039ED94()
{
  return sub_100019C6C(&qword_1005D70F8, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
}

uint64_t sub_10039EDC4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of OpenTagIntent.perform()>>, 1);
}

uint64_t sub_10039EDD4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static OpenTagIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for OpenTagIntent()
{
  return &type metadata for OpenTagIntent;
}

uint64_t sub_10039EDF4()
{
  return sub_100016638(&qword_1005DB718, &qword_1005DB720, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_10039EE20()
{
  return sub_10039E694();
}

uint64_t sub_10039EE28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10039EE4C()
{
  uint64_t v0;

  return sub_10039E500(*(_QWORD *)(v0 + 16), (uint64_t (*)(_QWORD))&type metadata accessor for TableID, type metadata accessor for TableEntity, (uint64_t)&type metadata for OpenTableIntent);
}

uint64_t sub_10039EE7C()
{
  uint64_t v0;

  return sub_10039E500(*(_QWORD *)(v0 + 16), (uint64_t (*)(_QWORD))&type metadata accessor for NoteID, type metadata accessor for NoteEntity, (uint64_t)&type metadata for OpenNoteIntent);
}

uint64_t sub_10039EEAC()
{
  uint64_t v0;

  return sub_10039E500(*(_QWORD *)(v0 + 16), (uint64_t (*)(_QWORD))&type metadata accessor for FolderID, type metadata accessor for FolderEntity, (uint64_t)&type metadata for OpenFolderIntent);
}

uint64_t sub_10039EEDC()
{
  uint64_t v0;

  return sub_10039E500(*(_QWORD *)(v0 + 16), (uint64_t (*)(_QWORD))&type metadata accessor for AttachmentID, type metadata accessor for AttachmentEntity, (uint64_t)&type metadata for OpenAttachmentIntent);
}

uint64_t sub_10039EF0C()
{
  uint64_t v0;

  return sub_10039E500(*(_QWORD *)(v0 + 16), (uint64_t (*)(_QWORD))&type metadata accessor for AccountID, type metadata accessor for AccountEntity, (uint64_t)&type metadata for OpenAccountIntent);
}

uint64_t ICCloudSyncingObject.MoveAction.Types.init(fromParentObject:toParentObject:)(void *a1, void *a2)
{
  return sub_10039FF94(a1, a2);
}

uint64_t ICCloudSyncingObject.MoveAction.type.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_type);
}

id ICCloudSyncingObject.MoveAction.object.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
}

id ICCloudSyncingObject.MoveAction.fromParentObject.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
}

id ICCloudSyncingObject.MoveAction.toParentObject.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
}

uint64_t ICCloudSyncingObject.MoveAction.isCopy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy);
}

id ICCloudSyncingObject.MoveAction.__allocating_init(type:object:fromParentObject:toParentObject:isCopy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  objc_class *v5;
  _BYTE *v11;
  objc_super v13;

  v11 = objc_allocWithZone(v5);
  *(_QWORD *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_type] = a1;
  *(_QWORD *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_object] = a2;
  *(_QWORD *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject] = a3;
  *(_QWORD *)&v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject] = a4;
  v11[OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy] = a5;
  v13.receiver = v11;
  v13.super_class = v5;
  return objc_msgSendSuper2(&v13, "init");
}

id ICCloudSyncingObject.MoveAction.init(type:object:fromParentObject:toParentObject:isCopy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _BYTE *v5;
  objc_class *ObjectType;
  objc_super v13;

  ObjectType = (objc_class *)swift_getObjectType(v5);
  *(_QWORD *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_type] = a1;
  *(_QWORD *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_object] = a2;
  *(_QWORD *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject] = a3;
  *(_QWORD *)&v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject] = a4;
  v5[OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy] = a5;
  v13.receiver = v5;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, "init");
}

id ICCloudSyncingObject.MoveAction.__allocating_init(object:fromParentObject:toParentObject:isCopy:)(void *a1, void *a2, void *a3, char a4)
{
  objc_class *v4;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13;
  id v14;
  uint64_t ObjectType;

  v9 = objc_allocWithZone(v4);
  if (!a2)
  {

    a1 = a3;
LABEL_8:

    ObjectType = swift_getObjectType(v9);
    swift_deallocPartialClassInstance(v9, ObjectType, 41, 7);
    return 0;
  }
  if (!a3)
  {

    goto LABEL_8;
  }
  v10 = a3;
  v11 = a2;
  v12 = sub_10039FF94(v11, v10);
  if ((v13 & 1) != 0)
  {

    goto LABEL_8;
  }
  v14 = objc_msgSend(v9, "initWithType:object:fromParentObject:toParentObject:isCopy:", v12, a1, v11, v10, a4 & 1);

  return v14;
}

id ICCloudSyncingObject.MoveAction.init(object:fromParentObject:toParentObject:isCopy:)(void *a1, void *a2, void *a3, char a4)
{
  void *v4;
  void *v6;
  id v8;
  id v9;
  uint64_t v10;
  char v11;
  id v12;
  uint64_t ObjectType;

  v6 = a1;
  if (!a2)
  {

    v6 = a3;
LABEL_8:

    ObjectType = swift_getObjectType(v4);
    swift_deallocPartialClassInstance(v4, ObjectType, 41, 7);
    return 0;
  }
  if (!a3)
  {

    goto LABEL_8;
  }
  v8 = a2;
  v9 = a3;
  v10 = sub_10039FF94(v8, v9);
  if ((v11 & 1) != 0)
  {

    goto LABEL_8;
  }
  v12 = objc_msgSend(v4, "initWithType:object:fromParentObject:toParentObject:isCopy:", v10, v6, v8, v9, a4 & 1);

  return v12;
}

id ICCloudSyncingObject.MoveAction.__allocating_init(folder:toParentObject:isCopy:)(void *a1, void *a2, char a3)
{
  objc_class *v3;
  objc_class *v4;
  id v8;
  id v9;
  id v10;

  v4 = v3;
  v8 = objc_allocWithZone(v4);
  v9 = objc_msgSend(a1, "parent");
  if (!v9)
    v9 = objc_msgSend(a1, "account");
  v10 = objc_msgSend(v8, "initWithObject:fromParentObject:toParentObject:isCopy:", a1, v9, a2, a3 & 1);

  return v10;
}

id ICCloudSyncingObject.MoveAction.init(folder:toParentObject:isCopy:)(void *a1, void *a2, char a3)
{
  void *v3;
  void *v4;
  id v8;
  id v9;

  v4 = v3;
  v8 = objc_msgSend(a1, "parent");
  if (!v8)
    v8 = objc_msgSend(a1, "account");
  v9 = objc_msgSend(v4, "initWithObject:fromParentObject:toParentObject:isCopy:", a1, v8, a2, a3 & 1);

  return v9;
}

id ICCloudSyncingObject.MoveAction.__allocating_init(note:toFolder:isCopy:)(void *a1, void *a2, char a3)
{
  objc_class *v3;
  id v7;
  id v8;
  id v9;

  v7 = objc_allocWithZone(v3);
  v8 = objc_msgSend(a1, "folder");
  v9 = objc_msgSend(v7, "initWithObject:fromParentObject:toParentObject:isCopy:", a1, v8, a2, a3 & 1);

  return v9;
}

id ICCloudSyncingObject.MoveAction.init(note:toFolder:isCopy:)(void *a1, void *a2, char a3)
{
  void *v3;
  id v7;
  id v8;

  v7 = objc_msgSend(a1, "folder");
  v8 = objc_msgSend(v3, "initWithObject:fromParentObject:toParentObject:isCopy:", a1, v7, a2, a3 & 1);

  return v8;
}

void ICCloudSyncingObject.MoveAction.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.MoveAction", 22, "init()", 6, 0);
  __break(1u);
}

Swift::Void __swiftcall ICCloudSyncingObject.persistParticipantActivityEvents(oldShare:newShare:)(CKShare_optional oldShare, CKShare_optional newShare)
{
  void *v2;
  void *v3;
  Class isa;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  void (*v31)(_QWORD *, _QWORD);
  uint64_t v32;
  void *v33;
  int v34;
  id v35;
  char **v36;
  uint64_t v37;
  void *v38;
  void (*v39)(char *, uint64_t);
  void (*v40)(char *, char *, uint64_t, __n128);
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  uint64_t v44;

  v3 = *(void **)&oldShare.is_nil;
  isa = oldShare.value.super.super.isa;
  v42 = sub_100012E18(&qword_1005DB750);
  v5 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005DB758);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v41 = (uint64_t)&v38 - v12;
  if (isa)
  {
    v13 = -[objc_class ic_nonCurrentUserParticipants](isa, "ic_nonCurrentUserParticipants");
    v14 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
    v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    if (v15 < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = (uint64_t)_swiftEmptyArrayStorage;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_9;
  }
  if ((v15 & 0x4000000000000000) == 0)
  {
    v16 = v15 & 0xFFFFFFFFFFFFFF8;
    if (!v3)
      goto LABEL_10;
    goto LABEL_7;
  }
LABEL_9:
  v16 = (uint64_t)sub_10016C1A0(v15);
  swift_bridgeObjectRelease(v15);
  if (!v3)
  {
LABEL_10:
    v19 = (uint64_t)_swiftEmptyArrayStorage;
    v38 = v2;
    if (((unint64_t)_swiftEmptyArrayStorage & 0x8000000000000000) != 0)
      goto LABEL_18;
    goto LABEL_11;
  }
LABEL_7:
  v17 = objc_msgSend(v3, "ic_nonCurrentUserParticipants");
  v18 = sub_1000163BC(0, &qword_1005D8540, CKShareParticipant_ptr);
  v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, v18);

  v38 = v2;
  if (v19 < 0)
    goto LABEL_18;
LABEL_11:
  if ((v19 & 0x4000000000000000) == 0)
  {
    v20 = v19 & 0xFFFFFFFFFFFFFF8;
    goto LABEL_13;
  }
LABEL_18:
  v20 = (uint64_t)sub_10016C1A0(v19);
  swift_bridgeObjectRelease(v19);
LABEL_13:
  v43[0] = v20;
  v44 = v16;
  v21 = sub_100012E18(&qword_1005D3D70);
  v22 = sub_100016638(&qword_1005DB760, &qword_1005D3D70, (uint64_t)&protocol conformance descriptor for [A]);
  v23 = sub_1003A05F4();
  BidirectionalCollection<>.difference<A>(from:)(&v44, v21, v21, v22, v22, v23);
  swift_release(v20);
  v24 = swift_release(v16);
  v25 = v42;
  v40 = *(void (**)(char *, char *, uint64_t, __n128))(v5 + 16);
  v40(v11, v7, v42, v24);
  v26 = sub_100016638(&qword_1005DB770, &qword_1005DB750, (uint64_t)&protocol conformance descriptor for CollectionDifference<A>);
  dispatch thunk of Collection.startIndex.getter(v25, v26);
  v39 = *(void (**)(char *, uint64_t))(v5 + 8);
  v39(v7, v25);
  *(_QWORD *)&v11[*(int *)(v8 + 36)] = v43[0];
  v27 = v41;
  sub_1003A064C((uint64_t)v11, v41);
  v28 = (uint64_t *)(v27 + *(int *)(v8 + 36));
  v29 = *v28;
  dispatch thunk of Collection.endIndex.getter(v25);
  v30 = v38;
  if (v29 != v43[0])
  {
    do
    {
      v31 = (void (*)(_QWORD *, _QWORD))dispatch thunk of Collection.subscript.read(v43, v28, v25, v26);
      v33 = *(void **)(v32 + 8);
      v34 = *(unsigned __int8 *)(v32 + 25);
      v35 = v33;
      v31(v43, 0);
      ((void (*)(char *, uint64_t, uint64_t))v40)(v7, v41, v42);
      dispatch thunk of Collection.formIndex(after:)(v28, v42, v26);
      v39(v7, v42);
      v36 = &selRef_persistRemoveParticipantActivityEventForObject_participant_;
      if (!v34)
        v36 = &selRef_persistAddParticipantActivityEventForObject_participant_;

      v27 = v41;
      v25 = v42;

      v37 = *v28;
      dispatch thunk of Collection.endIndex.getter(v25);
    }
    while (v37 != v43[0]);
  }
  sub_100012DDC(v27, &qword_1005DB758);
}

Swift::Void __swiftcall ICCloudSyncingObject.persistJoinActivityEvent()()
{
  sub_10039FD70(&enum case for PersistedActivityEvent.Activities.addParticipant(_:));
}

Swift::Void __swiftcall ICCloudSyncingObject.persistLeaveActivityEvent()()
{
  sub_10039FD70(&enum case for PersistedActivityEvent.Activities.removeParticipant(_:));
}

uint64_t sub_10039FD70(unsigned int *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;

  v19 = a1;
  v20 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PersistedActivityEvent.Activities(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005D4DE8);
  __chkstk_darwin(v9);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ActivityEventParticipant(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v1;
  ActivityEventParticipant.init(cloudSyncingObject:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return sub_100012DDC((uint64_t)v11, &qword_1005D4DE8);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v15, v12);
  v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *v19, v5);
  Date.init()(v18);

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_10039FF94(void *a1, void *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  id v9;
  id v10;
  void *v11;
  id v12;
  char v13;
  unsigned int v14;

  v4 = objc_opt_self(ICFolder);
  v5 = (void *)swift_dynamicCastObjCClass(a1, v4);
  if (v5 && objc_msgSend(v5, "isTrashFolder")
    || (v6 = objc_opt_self(ICFolder), (v7 = (void *)swift_dynamicCastObjCClass(a2, v6)) != 0)
    && objc_msgSend(v7, "isTrashFolder"))
  {

    return 0;
  }
  if (objc_msgSend(a1, "isSharedViaICloud") && objc_msgSend(a2, "isSharedViaICloud"))
  {
    v9 = objc_msgSend(a1, "sharedRootObject");
    v10 = objc_msgSend(a2, "sharedRootObject");
    v11 = v10;
    if (v9)
    {
      if (v10)
      {
        sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
        v12 = v9;
        v13 = static NSObject.== infix(_:_:)(v12);

        if ((v13 & 1) == 0)
          return 2;
        return 3;
      }

      v11 = a2;
    }
    else
    {

      if (!v11)
        return 3;
    }

    return 2;
  }
  if ((objc_msgSend(a1, "isSharedViaICloud") & 1) != 0)
  {
    v14 = objc_msgSend(a2, "isSharedViaICloud");

    if (v14)
      return 0;
    else
      return 4;
  }
  else
  {

    return 1;
  }
}

void _sSo20ICCloudSyncingObjectC11MobileNotesE29undoablyPersistActivityEvents3for03oldC003newC0yAbCE10MoveActionC_ABSgAJtFZ_0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  uint64_t v30;

  switch(*(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_type))
  {
    case 0:
      return;
    case 1:
      if (!a3)
        return;
      v4 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      v29 = a3;
      if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) != 1)
        goto LABEL_28;
      v5 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
      v6 = a3;
      v7 = objc_msgSend(v6, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v6, v5, 0, v4);
      goto LABEL_29;
    case 2:
      v29 = a3;
      if (a2)
      {
        v12 = *(void **)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
        v13 = a2;
        v14 = objc_msgSend(v12, "sharedRootObject");
        if (v14)
        {
          v15 = v14;
          if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
            v16 = objc_msgSend(v14, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v13, *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object), v12, 0);
          else
            v16 = objc_msgSend(v14, "persistMoveActivityEventForObject:fromParentObject:toParentObject:", v13, v12, 0);
          v24 = v16;
          v25 = objc_msgSend((id)objc_opt_self(NSUndoManager), "shared");
          objc_msgSend(v25, "registerUndoForCloudSyncingObjectActivityEvent:cloudSyncingObject:", v24, v15);

          v13 = v25;
        }

        a3 = v29;
      }
      if (!a3)
        return;
      v4 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
      {
        v26 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
        v27 = a3;
        v7 = objc_msgSend(v27, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v27, v26, 0, v4);
      }
      else
      {
LABEL_28:
        v28 = a3;
        v7 = objc_msgSend(v28, "persistMoveActivityEventForObject:fromParentObject:toParentObject:", v28, 0, v4);
      }
      goto LABEL_29;
    case 3:
      if (!a3)
        return;
      v17 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
      v18 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_toParentObject);
      v29 = a3;
      if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
      {
        v19 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object);
        v20 = a3;
        v7 = objc_msgSend(v20, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v20, v19, v17, v18);
      }
      else
      {
        v21 = a3;
        v7 = objc_msgSend(v21, "persistMoveActivityEventForObject:fromParentObject:toParentObject:", v21, v17, v18);
      }
LABEL_29:
      v22 = v7;
      v23 = objc_msgSend((id)objc_opt_self(NSUndoManager), "shared");
      objc_msgSend(v23, "registerUndoForCloudSyncingObjectActivityEvent:cloudSyncingObject:", v22, v29);
      goto LABEL_30;
    case 4:
      if (!a2)
        return;
      v8 = *(void **)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_fromParentObject);
      v29 = a2;
      v9 = objc_msgSend(v8, "sharedRootObject");
      if (v9)
      {
        v10 = v9;
        if (*(_BYTE *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_isCopy) == 1)
          v11 = objc_msgSend(v9, "persistCopyActivityEventForObject:originalObject:fromParentObject:toParentObject:", v29, *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_object), v8, 0);
        else
          v11 = objc_msgSend(v9, "persistMoveActivityEventForObject:fromParentObject:toParentObject:", v29, v8, 0);
        v22 = v11;
        v23 = objc_msgSend((id)objc_opt_self(NSUndoManager), "shared");
        objc_msgSend(v23, "registerUndoForCloudSyncingObjectActivityEvent:cloudSyncingObject:", v22, v10);

LABEL_30:
      }
      else
      {

      }
      return;
    default:
      v30 = *(_QWORD *)(a1 + OBJC_IVAR___ICCloudSyncingObjectMoveAction_type);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for ICCloudSyncingObject.MoveAction.Types, &v30, &type metadata for ICCloudSyncingObject.MoveAction.Types, &type metadata for Int);
      __break(1u);
      JUMPOUT(0x1003A05E0);
  }
}

unint64_t sub_1003A05F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DB768;
  if (!qword_1005DB768)
  {
    v1 = sub_1000163BC(255, &qword_1005D8540, CKShareParticipant_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1005DB768);
  }
  return result;
}

uint64_t sub_1003A064C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005DB758);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1003A06A0()
{
  unint64_t result;

  result = qword_1005DB778;
  if (!qword_1005DB778)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICCloudSyncingObject.MoveAction.Types, &type metadata for ICCloudSyncingObject.MoveAction.Types);
    atomic_store(result, (unint64_t *)&qword_1005DB778);
  }
  return result;
}

uint64_t type metadata accessor for ICCloudSyncingObject.MoveAction()
{
  return objc_opt_self(ICCloudSyncingObjectMoveAction);
}

ValueMetadata *type metadata accessor for ICCloudSyncingObject.MoveAction.Types()
{
  return &type metadata for ICCloudSyncingObject.MoveAction.Types;
}

void *OpenNoteIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static OpenNoteIntent.persistentIdentifier;
}

uint64_t sub_1003A0724()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static OpenNoteIntent.title);
  sub_10012A0B0(v10, (uint64_t)static OpenNoteIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x746F4E206E65704FLL, 0xE900000000000065);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t OpenNoteIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CED88 != -1)
    swift_once(&qword_1005CED88, sub_1003A0724);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static OpenNoteIntent.title);
}

uint64_t static OpenNoteIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CED88 != -1)
    swift_once(&qword_1005CED88, sub_1003A0724);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static OpenNoteIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *OpenNoteIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static OpenNoteIntent.openAppWhenRun;
}

uint64_t static OpenNoteIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x800000010048C0A0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static OpenNoteIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;

  v0 = sub_100012E18(&qword_1005DB7B0);
  __chkstk_darwin(v0);
  v2 = (char *)&v13 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005DB7B8);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100019838();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1, &type metadata for OpenNoteIntent, v6);
  v7._countAndFlagsBits = 0x656874206E65704FLL;
  v7._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100465D48, v8);
  v10 = sub_100012E18(&qword_1005DA618);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x65746F6E20;
  v11._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for OpenNoteIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for OpenNoteIntent, v6);
}

uint64_t sub_1003A0CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  Swift::String v14;
  uint64_t v16;

  v4 = sub_100012E18(&qword_1005DB7B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005DB7B8);
  __chkstk_darwin(v7);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(14, 1, a1, a2);
  v10._countAndFlagsBits = 0x656874206E65704FLL;
  v10._object = (void *)0xE900000000000020;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v10);
  KeyPath = swift_getKeyPath(&unk_100465D48, v11);
  v13 = sub_100012E18(&qword_1005DA618);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v7, v13);
  swift_release(KeyPath);
  v14._countAndFlagsBits = 0x65746F6E20;
  v14._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v14);
  ParameterSummaryString.init(stringInterpolation:)(v9, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_1003A0E50@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = _s11MobileNotes14OpenNoteIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t _s11MobileNotes14OpenNoteIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD v43[2];
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD v52[6];

  v0 = type metadata accessor for InputConnectionBehavior(0);
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  __chkstk_darwin(v0);
  v47 = (char *)v43 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v3 = __chkstk_darwin(v2);
  v46 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v45 = (char *)v43 - v5;
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v6);
  v44 = (char *)v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[1] = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v25 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v25);
  v26 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v27(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Open Note intent", 36, 2);
  v28 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001004788E0);
  static Locale.current.getter(v28);
  v27(v14, v26, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v10, 0, 1, v21);
  v29 = type metadata accessor for NoteEntity(0);
  v30 = v44;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v44, 1, 1, v29);
  v31 = type metadata accessor for IntentDialog(0);
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v33 = v45;
  v32(v45, 1, 1, v31);
  v34 = v46;
  v32(v46, 1, 1, v31);
  v35 = v47;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for InputConnectionBehavior.default(_:), v49);
  v36 = sub_1003A14B4((unint64_t *)&qword_1005D0B70, (uint64_t)&protocol conformance descriptor for NoteEntity);
  v37 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v24, v10, v30, v33, v34, v35, v36);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v50 = 0xD000000000000024;
  v51 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v38 = type metadata accessor for AppDependencyManager(0);
  v39 = static AppDependencyManager.shared.getter(v38);
  AppDependency.__allocating_init(key:manager:)(v52, v39);
  sub_100012E18(&qword_1005CEE50);
  v50 = 0xD000000000000021;
  v51 = 0x8000000100476B70;
  v40 = AnyHashable.init<A>(_:)(v52, &v50, &type metadata for String, &protocol witness table for String);
  v41 = static AppDependencyManager.shared.getter(v40);
  AppDependency.__allocating_init(key:manager:)(v52, v41);
  return v37;
}

uint64_t sub_1003A1334@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003A135C()
{
  return sub_1003A14B4(&qword_1005DB7C0, (uint64_t)&protocol conformance descriptor for NoteEntity);
}

unint64_t sub_1003A1380(uint64_t a1)
{
  unint64_t result;

  result = sub_1003A13A4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003A13A4()
{
  unint64_t result;

  result = qword_1005DB7F0;
  if (!qword_1005DB7F0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNoteIntent, &type metadata for OpenNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005DB7F0);
  }
  return result;
}

unint64_t sub_1003A13EC()
{
  unint64_t result;

  result = qword_1005DB7F8;
  if (!qword_1005DB7F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OpenNoteIntent, &type metadata for OpenNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005DB7F8);
  }
  return result;
}

uint64_t sub_1003A1430()
{
  return sub_1003A14B4(&qword_1005D78E8, (uint64_t)&protocol conformance descriptor for NoteEntity);
}

uint64_t sub_1003A1458(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of OpenNoteIntent.perform()>>, 1);
}

uint64_t sub_1003A1468(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static OpenNoteIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for OpenNoteIntent()
{
  return &type metadata for OpenNoteIntent;
}

uint64_t sub_1003A1488()
{
  return sub_100016638(&qword_1005DB818, &qword_1005DB820, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_1003A14B4(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NoteEntity(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

char *sub_1003A14F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  char *v13;
  char *v14;
  objc_class *ObjectType;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  void *v31;
  id v32;
  id v33;
  char *v34;
  void *v35;
  void *v36;
  char *v37;
  id v38;
  char *v39;
  char *v41;
  void *v43;
  id v44;
  uint64_t v47;
  objc_super v49;
  _QWORD aBlock[5];
  uint64_t v51;

  v14 = v13;
  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v14[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource] = 0;
  *(_QWORD *)&v14[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolder] = a1;
  v20 = swift_allocObject(&unk_10056C558, 24, 7);
  *(_QWORD *)(v20 + 16) = ObjectType;
  v21 = objc_allocWithZone((Class)UICollectionViewCompositionalLayoutConfiguration);
  v43 = a1;
  v22 = a1;
  v23 = objc_msgSend(v21, "init");
  v24 = objc_allocWithZone((Class)UICollectionViewCompositionalLayout);
  aBlock[4] = sub_1003A1C24;
  v51 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1002287F4;
  aBlock[3] = &unk_10056C570;
  v25 = _Block_copy(aBlock);
  v26 = objc_msgSend(v24, "initWithSectionProvider:configuration:", v25, v23);

  _Block_release(v25);
  swift_release(v51);
  v49.receiver = v14;
  v49.super_class = ObjectType;
  v27 = objc_msgSendSuper2(&v49, "initWithFrame:collectionViewLayout:", v26, 0.0, 0.0, 0.0, 0.0);

  v28 = (void *)objc_opt_self(ICNoteContext);
  v29 = v27;
  v44 = v22;
  v41 = (char *)v29;
  v47 = a4;
  sub_100166B74(a4, a5);
  sub_100166B74(a6, a7);
  sub_100166B74(a8, a9);
  sub_100166B74(a10, a11);
  sub_100166B74(a12, a13);
  v30 = objc_msgSend(v28, "sharedContext");
  if (v30)
  {
    v31 = v30;
    v32 = objc_msgSend(v30, "managedObjectContext");

  }
  else
  {
    v32 = 0;
  }
  v33 = objc_allocWithZone((Class)type metadata accessor for SmartFolderComposerDataSource(0));
  v34 = sub_1003484FC(v41, v43, (uint64_t)v32, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  sub_100012C50(a12, a13);
  sub_100012C50(a10, a11);
  sub_100012C50(a8, a9);
  sub_100012C50(a6, a7);
  sub_100012C50(v47, a5);

  v35 = *(void **)&v41[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
  *(_QWORD *)&v41[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource] = v34;

  v36 = (void *)objc_opt_self(UIColor);
  v37 = v41;
  v38 = objc_msgSend(v36, "ICGroupedBackgroundColor");
  objc_msgSend(v37, "setBackgroundColor:", v38);

  v39 = v37;
  objc_msgSend(v39, "setShowsVerticalScrollIndicator:", 0);
  sub_100012C50(a12, a13);
  sub_100012C50(a10, a11);
  sub_100012C50(a8, a9);
  sub_100012C50(a6, a7);
  sub_100012C50(v47, a5);

  return v39;
}

uint64_t sub_1003A1944(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v18;
  uint64_t v19;

  v19 = a2;
  v3 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  switch(a1)
  {
    case 0:
      (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v7);
      UICollectionLayoutListConfiguration.init(appearance:)(v10);
      sub_10032FFD4();
      v16 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v15, v19);
      objc_msgSend(v16, "contentInsets");
      objc_msgSend(v16, "setContentInsets:", 0.0);
      goto LABEL_9;
    case 1:
      (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v7);
      UICollectionLayoutListConfiguration.init(appearance:)(v10);
      goto LABEL_8;
    case 2:
      return sub_1003A1C2C(v19);
    case 3:
      if (!ICInternalSettingsSmartFoldersCanIncludeRecentlyDeletedNotes(v13))
        goto LABEL_6;
      (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v7);
      UICollectionLayoutListConfiguration.init(appearance:)(v10);
      (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for UICollectionLayoutListConfiguration.FooterMode.supplementary(_:), v3);
      UICollectionLayoutListConfiguration.footerMode.setter(v6);
LABEL_8:
      sub_10032FFD4();
      v16 = (void *)static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v15, v19);
LABEL_9:
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      break;
    default:
LABEL_6:
      v16 = 0;
      break;
  }
  return (uint64_t)v16;
}

uint64_t type metadata accessor for SmartFolderComposerCollectionView()
{
  return objc_opt_self(_TtC11MobileNotes33SmartFolderComposerCollectionView);
}

uint64_t sub_1003A1C14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003A1C24(uint64_t a1, uint64_t a2)
{
  return sub_1003A1944(a1, a2);
}

uint64_t sub_1003A1C2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(_BYTE *, _QWORD);
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[32];

  v35 = a1;
  v1 = type metadata accessor for UIListSeparatorConfiguration(0);
  v33 = *(_QWORD *)(v1 - 8);
  v34 = v1;
  v2 = __chkstk_darwin(v1);
  v32 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v5 = (char *)&v28 - v4;
  v29 = type metadata accessor for UICollectionLayoutListConfiguration.HeaderMode(0);
  v6 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UICollectionLayoutListConfiguration.FooterMode(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UICollectionLayoutListConfiguration(0);
  v30 = *(_QWORD *)(v17 - 8);
  v31 = v17;
  __chkstk_darwin(v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for UICollectionLayoutListConfiguration.Appearance.insetGrouped(_:), v13);
  UICollectionLayoutListConfiguration.init(appearance:)(v16);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for UICollectionLayoutListConfiguration.FooterMode.supplementary(_:), v9);
  UICollectionLayoutListConfiguration.footerMode.setter(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for UICollectionLayoutListConfiguration.HeaderMode.supplementary(_:), v29);
  v20 = UICollectionLayoutListConfiguration.headerMode.setter(v8);
  UICollectionLayoutListConfiguration.separatorConfiguration.getter(v20);
  v21 = (void (*)(_BYTE *, _QWORD))UIListSeparatorConfiguration.bottomSeparatorInsets.modify(v36);
  *(_QWORD *)(v22 + 8) = 0;
  v21(v36, 0);
  v23 = v32;
  v24 = v33;
  v25 = v34;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v32, v5, v34);
  UICollectionLayoutListConfiguration.separatorConfiguration.setter(v23);
  sub_10032FFD4();
  v26 = static NSCollectionLayoutSection.list(using:layoutEnvironment:)(v19, v35);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v25);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v31);
  return v26;
}

uint64_t static ManagedEntity.entities<A>(for:in:includeContents:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t AssociatedTypeWitness;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v8 + 64) = a7;
  *(_QWORD *)(v8 + 72) = v7;
  *(_QWORD *)(v8 + 48) = a5;
  *(_QWORD *)(v8 + 56) = a6;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(v8 + 40) = a4;
  *(_BYTE *)(v8 + 248) = a3;
  *(_QWORD *)(v8 + 24) = a1;
  v13 = type metadata accessor for Logger(0);
  *(_QWORD *)(v8 + 80) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 88) = v14;
  *(_QWORD *)(v8 + 96) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v8 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a6 + 8);
  *(_QWORD *)(v8 + 112) = v15;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v15 + 24));
  *(_QWORD *)(v8 + 120) = AssociatedTypeWitness;
  v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v8 + 128) = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 136) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 144) = swift_task_alloc(v18);
  v19 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  *(_QWORD *)(v8 + 152) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a5 - 8);
  *(_QWORD *)(v8 + 160) = v20;
  *(_QWORD *)(v8 + 168) = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_getAssociatedTypeWitness(0, a7);
  *(_QWORD *)(v8 + 176) = v21;
  v22 = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(v8 + 184) = v22;
  *(_QWORD *)(v8 + 192) = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003A2030, 0, 0);
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;

  *(_QWORD *)(v8 + 72) = a7;
  *(_QWORD *)(v8 + 80) = v7;
  *(_QWORD *)(v8 + 56) = a5;
  *(_QWORD *)(v8 + 64) = a6;
  *(_QWORD *)(v8 + 40) = a2;
  *(_QWORD *)(v8 + 48) = a4;
  *(_BYTE *)(v8 + 176) = a3;
  *(_QWORD *)(v8 + 32) = a1;
  *(_QWORD *)(v8 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a5 - 8);
  *(_QWORD *)(v8 + 96) = v11;
  *(_QWORD *)(v8 + 104) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7);
  *(_QWORD *)(v8 + 112) = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  *(_QWORD *)(v8 + 120) = v13;
  *(_QWORD *)(v8 + 128) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003A2BBC, 0, 0);
}

uint64_t sub_1003A2030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  int *v22;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 16) = static Array._allocateUninitialized(_:)(0, *(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  dispatch thunk of Sequence.makeIterator()(v3);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 128);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48), v5, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  dispatch thunk of IteratorProtocol.next()(v5, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    v10 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 144);
    v12 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 136);
    v16 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(v10, *(_QWORD *)(v0 + 176));
    v17 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v17);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
    v20 = *(int **)(v19 + 56);
    v22 = (int *)((char *)v20 + *v20);
    v21 = (_QWORD *)swift_task_alloc(v20[1]);
    *(_QWORD *)(v0 + 200) = v21;
    *v21 = v0;
    v21[1] = sub_1003A21F8;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v22)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56));
  }
}

uint64_t sub_1003A21F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 200);
  v3[26] = a1;
  v3[27] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[2]);
    v5 = sub_1003A2970;
  }
  else
  {
    v5 = sub_1003A226C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003A226C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t AssociatedConformanceWitness;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  void (*v43)(uint64_t, uint64_t, __n128);
  void *v44;
  void *v45;
  int *v46;
  uint64_t v47;
  id v48;
  id v49;
  id v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  int *v78;
  uint64_t v79[2];

  v2 = *(void **)(v1 + 208);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 216);
    v4 = sub_1003A3EC0(*(_QWORD *)(v1 + 208), *(id *)(v1 + 32));
    *(_QWORD *)(v1 + 224) = v4;
    if (v3)
    {
      v6 = *(_QWORD *)(v1 + 184);
      v5 = *(_QWORD *)(v1 + 192);
      v7 = *(_QWORD *)(v1 + 176);
      v8 = *(_QWORD *)(v1 + 144);
      v9 = *(_QWORD *)(v1 + 120);
      v10 = *(_QWORD *)(v1 + 128);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      v11 = *(_QWORD *)(v1 + 168);
      v13 = *(_QWORD *)(v1 + 144);
      v12 = *(_QWORD *)(v1 + 152);
      v14 = *(_QWORD *)(v1 + 136);
      v16 = *(_QWORD *)(v1 + 96);
      v15 = *(_QWORD *)(v1 + 104);
      swift_task_dealloc(*(_QWORD *)(v1 + 192));
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    else
    {
      v44 = v4;
      v45 = *(void **)(v1 + 32);
      v46 = *(int **)(*(_QWORD *)(v1 + 56) + 48);
      v47 = v46[1];
      v77 = (int *)((char *)v46 + *v46);
      v48 = v2;
      v49 = v44;
      v50 = v45;
      v51 = (_QWORD *)swift_task_alloc(v47);
      *(_QWORD *)(v1 + 232) = v51;
      *v51 = v1;
      v51[1] = sub_1003A2740;
      return ((uint64_t (*)(_QWORD, id, id, _QWORD, id))v77)(*(_QWORD *)(v1 + 104), v48, v49, *(unsigned __int8 *)(v1 + 248), v50);
    }
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 136);
    v19 = *(_QWORD *)(v1 + 144);
    v20 = *(_QWORD *)(v1 + 120);
    v21 = *(_QWORD *)(v1 + 128);
    static Logger.link.getter(a1);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v18, v19, v20);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.error.getter(v23, v24);
    v26 = os_log_type_enabled(v23, v25);
    v27 = *(_QWORD *)(v1 + 136);
    v28 = *(_QWORD *)(v1 + 144);
    v29 = *(_QWORD *)(v1 + 120);
    v30 = *(_QWORD *)(v1 + 128);
    if (v26)
    {
      v31 = *(_QWORD *)(v1 + 112);
      v74 = *(_QWORD *)(v1 + 88);
      v75 = *(_QWORD *)(v1 + 80);
      v76 = *(_QWORD *)(v1 + 96);
      v32 = *(_QWORD *)(v1 + 40);
      v73 = *(_QWORD *)(v1 + 144);
      v33 = swift_slowAlloc(22, -1);
      v72 = v30;
      v34 = swift_slowAlloc(64, -1);
      v79[0] = v34;
      *(_DWORD *)v33 = 136315394;
      v35 = _typeName(_:qualified:)(v32, 0);
      v37 = v36;
      *(_QWORD *)(v33 + 4) = sub_1003A4190(v35, v36, v79);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v33 + 12) = 2080;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v31, v32, v29, &protocol requirements base descriptor for AppEntity, &associated conformance descriptor for AppEntity.Identifiable.ID: EntityIdentifierConvertible);
      v39 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v29, AssociatedConformanceWitness);
      v41 = v40;
      *(_QWORD *)(v33 + 14) = sub_1003A4190(v39, v40, v79);
      v42 = swift_bridgeObjectRelease(v41);
      v43 = *(void (**)(uint64_t, uint64_t, __n128))(v72 + 8);
      v43(v27, v29, v42);
      _os_log_impl((void *)&_mh_execute_header, v23, v25, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v76, v75);
      ((void (*)(uint64_t, uint64_t))v43)(v73, v29);
    }
    else
    {
      v53 = *(_QWORD *)(v1 + 88);
      v52 = *(_QWORD *)(v1 + 96);
      v54 = *(_QWORD *)(v1 + 80);

      v55 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v55(v27, v29);
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v54);
      v55(v28, v29);
    }
    v56 = *(_QWORD *)(v1 + 176);
    v57 = *(_QWORD *)(v1 + 152);
    v58 = *(_QWORD *)(v1 + 120);
    v59 = *(_QWORD *)(v1 + 128);
    v60 = swift_getAssociatedConformanceWitness(*(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 48), v56, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    dispatch thunk of IteratorProtocol.next()(v56, v60);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58) == 1)
    {
      v61 = *(_QWORD *)(v1 + 192);
      v62 = *(_QWORD *)(v1 + 168);
      v64 = *(_QWORD *)(v1 + 144);
      v63 = *(_QWORD *)(v1 + 152);
      v65 = *(_QWORD *)(v1 + 136);
      v67 = *(_QWORD *)(v1 + 96);
      v66 = *(_QWORD *)(v1 + 104);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 184) + 8))(v61, *(_QWORD *)(v1 + 176));
      v68 = *(_QWORD *)(v1 + 16);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v67);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v68);
    }
    else
    {
      v69 = *(_QWORD *)(v1 + 56);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 128) + 32))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 120));
      v70 = *(int **)(v69 + 56);
      v78 = (int *)((char *)v70 + *v70);
      v71 = (_QWORD *)swift_task_alloc(v70[1]);
      *(_QWORD *)(v1 + 200) = v71;
      *v71 = v1;
      v71[1] = sub_1003A21F8;
      return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v78)(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 56));
    }
  }
}

uint64_t sub_1003A2740()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
    v4 = sub_1003A2A24;
  }
  else
  {
    v4 = sub_1003A27AC;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A27AC()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedConformanceWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  int *v23;
  _QWORD *v24;
  int *v25;

  v1 = *(void **)(v0 + 224);
  v2 = *(void **)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 104);
  v7 = type metadata accessor for Array(0, *(_QWORD *)(v0 + 40));
  Array.append(_:)(v6, v7);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 128);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48), v8, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  dispatch thunk of IteratorProtocol.next()(v8, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v13 = *(_QWORD *)(v0 + 192);
    v14 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 96);
    v18 = *(_QWORD *)(v0 + 104);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 184) + 8))(v13, *(_QWORD *)(v0 + 176));
    v20 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v20);
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
    v23 = *(int **)(v22 + 56);
    v25 = (int *)((char *)v23 + *v23);
    v24 = (_QWORD *)swift_task_alloc(v23[1]);
    *(_QWORD *)(v0 + 200) = v24;
    *v24 = v0;
    v24[1] = sub_1003A21F8;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v25)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 56));
  }
}

uint64_t sub_1003A2970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A2A24()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = *(_QWORD *)(v0 + 128);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A2BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedConformanceWitness;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  void *v17;
  void *v18;
  int *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  _QWORD *v24;
  int *v25;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)(v0 + 16) = static Array._allocateUninitialized(_:)(0, *(_QWORD *)(v0 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6, v5);
  dispatch thunk of Sequence.makeIterator()(v5);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, v5, v2, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  *(_QWORD *)(v0 + 136) = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()(v2, AssociatedConformanceWitness);
  v8 = *(void **)(v0 + 24);
  if (v8)
  {
    while (1)
    {
      *(_QWORD *)(v0 + 144) = v8;
      if (!objc_msgSend(v8, "isTemporaryID"))
        break;
      v9 = *(_QWORD *)(v0 + 136);
      v10 = *(_QWORD *)(v0 + 112);

      dispatch thunk of IteratorProtocol.next()(v10, v9);
      v8 = *(void **)(v0 + 24);
      if (!v8)
        goto LABEL_4;
    }
    v16 = sub_1003A3EC0((uint64_t)v8, *(id *)(v0 + 40));
    *(_QWORD *)(v0 + 152) = v16;
    v17 = v16;
    v18 = *(void **)(v0 + 40);
    v19 = *(int **)(*(_QWORD *)(v0 + 64) + 48);
    v20 = v19[1];
    v25 = (int *)((char *)v19 + *v19);
    v21 = v8;
    v22 = v17;
    v23 = v18;
    v24 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v0 + 160) = v24;
    *v24 = v0;
    v24[1] = sub_1003A2E34;
    return ((uint64_t (*)(_QWORD, id, id, _QWORD, id))v25)(*(_QWORD *)(v0 + 88), v21, v22, *(unsigned __int8 *)(v0 + 176), v23);
  }
  else
  {
LABEL_4:
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v11, *(_QWORD *)(v0 + 112));
    v14 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
  }
}

uint64_t sub_1003A2E34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
    v4 = sub_1003A30DC;
  }
  else
  {
    v4 = sub_1003A2EA0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A2EA0()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int *v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  _QWORD *v29;
  int *v30;

  v2 = *(void **)(v0 + 144);
  v1 = *(void **)(v0 + 152);
  v3 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 88);
  v6 = type metadata accessor for Array(0, *(_QWORD *)(v0 + 48));
  Array.append(_:)(v5, v6);

  dispatch thunk of IteratorProtocol.next()(v4, v3);
  v7 = *(void **)(v0 + 24);
  if (v7)
  {
    v8 = *(_QWORD *)(v0 + 168);
    while (1)
    {
      *(_QWORD *)(v0 + 144) = v7;
      if (!objc_msgSend(v7, "isTemporaryID"))
        break;
      v9 = *(_QWORD *)(v0 + 136);
      v10 = *(_QWORD *)(v0 + 112);

      dispatch thunk of IteratorProtocol.next()(v10, v9);
      v7 = *(void **)(v0 + 24);
      if (!v7)
        goto LABEL_5;
    }
    v16 = sub_1003A3EC0((uint64_t)v7, *(id *)(v0 + 40));
    *(_QWORD *)(v0 + 152) = v16;
    if (v8)
    {
      v18 = *(_QWORD *)(v0 + 120);
      v17 = *(_QWORD *)(v0 + 128);
      v19 = *(_QWORD *)(v0 + 112);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
      v20 = *(_QWORD *)(v0 + 104);
      v21 = *(_QWORD *)(v0 + 88);
      swift_task_dealloc(*(_QWORD *)(v0 + 128));
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v22 = v16;
      v23 = *(void **)(v0 + 40);
      v24 = *(int **)(*(_QWORD *)(v0 + 64) + 48);
      v25 = v24[1];
      v30 = (int *)((char *)v24 + *v24);
      v26 = v7;
      v27 = v22;
      v28 = v23;
      v29 = (_QWORD *)swift_task_alloc(v25);
      *(_QWORD *)(v0 + 160) = v29;
      *v29 = v0;
      v29[1] = sub_1003A2E34;
      return ((uint64_t (*)(_QWORD, id, id, _QWORD, id))v30)(*(_QWORD *)(v0 + 88), v26, v27, *(unsigned __int8 *)(v0 + 176), v28);
    }
  }
  else
  {
LABEL_5:
    v11 = *(_QWORD *)(v0 + 128);
    v12 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v11, *(_QWORD *)(v0 + 112));
    v14 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
  }
}

uint64_t sub_1003A30DC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(void **)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 112);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void ManagedEntity.object(in:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSURL *v10;
  void *v11;
  void *v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v13 = objc_msgSend(a1, "managedObjectIDForURIRepresentation:", v12);

  if (v13)
  {
    v14 = objc_msgSend(a1, "managedObjectContextForObjectID:", v13);
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, "objectWithID:", v13);

      AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
      swift_dynamicCastUnknownClassUnconditional(v16, AssociatedTypeWitness, 0, 0, 0);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t static ManagedEntity.managedObjects<A>(for:in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7[10] = a6;
  v7[11] = v6;
  v7[8] = a4;
  v7[9] = a5;
  v7[6] = a2;
  v7[7] = a3;
  v7[5] = a1;
  v11 = type metadata accessor for Logger(0);
  v7[12] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[13] = v12;
  v7[14] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a5 + 8);
  v7[15] = v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v13 + 24));
  v7[16] = AssociatedTypeWitness;
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7[17] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[18] = swift_task_alloc(v16);
  v7[19] = swift_task_alloc(v16);
  v17 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v7[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(a4 - 8);
  v7[21] = v18;
  v7[22] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = swift_getAssociatedTypeWitness(0, a6);
  v7[23] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v7[24] = v20;
  v7[25] = swift_task_alloc((*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003A3410, 0, 0);
}

uint64_t sub_1003A3410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t AssociatedConformanceWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int *v20;
  _QWORD *v21;
  int *v22;

  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v0 + 72));
  *(_QWORD *)(v0 + 208) = AssociatedTypeWitness;
  *(_QWORD *)(v0 + 16) = static Array._allocateUninitialized(_:)(0, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  dispatch thunk of Sequence.makeIterator()(v3);
  v6 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 136);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64), v6, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  dispatch thunk of IteratorProtocol.next()(v6, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    v11 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(v11, *(_QWORD *)(v0 + 184));
    v17 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v17);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 32))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 128));
    v20 = *(int **)(v19 + 56);
    v22 = (int *)((char *)v20 + *v20);
    v21 = (_QWORD *)swift_task_alloc(v20[1]);
    *(_QWORD *)(v0 + 216) = v21;
    *v21 = v0;
    v21[1] = sub_1003A35E4;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v22)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_1003A35E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  v3[28] = a1;
  v3[29] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease(v3[2]);
    v5 = sub_1003A3D58;
  }
  else
  {
    v5 = sub_1003A3658;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003A3658(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t AssociatedConformanceWitness;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  void (*v42)(uint64_t, uint64_t, __n128);
  void *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74[2];

  v2 = *(void **)(v1 + 224);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 232);
    v4 = sub_1003A3EC0(*(_QWORD *)(v1 + 224), *(id *)(v1 + 48));
    *(_QWORD *)(v1 + 240) = v4;
    if (v3)
    {
      v6 = *(_QWORD *)(v1 + 192);
      v5 = *(_QWORD *)(v1 + 200);
      v7 = *(_QWORD *)(v1 + 184);
      v8 = *(_QWORD *)(v1 + 152);
      v9 = *(_QWORD *)(v1 + 128);
      v10 = *(_QWORD *)(v1 + 136);

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
      swift_bridgeObjectRelease(*(_QWORD *)(v1 + 16));
      v11 = *(_QWORD *)(v1 + 176);
      v13 = *(_QWORD *)(v1 + 152);
      v12 = *(_QWORD *)(v1 + 160);
      v14 = *(_QWORD *)(v1 + 144);
      v15 = *(_QWORD *)(v1 + 112);
      swift_task_dealloc(*(_QWORD *)(v1 + 200));
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      return (*(uint64_t (**)(void))(v1 + 8))();
    }
    else
    {
      v43 = v4;
      v44 = swift_allocObject(&unk_10056C5C8, 64, 7);
      *(_QWORD *)(v1 + 248) = v44;
      v45 = *(_OWORD *)(v1 + 72);
      *(_OWORD *)(v44 + 16) = *(_OWORD *)(v1 + 56);
      *(_OWORD *)(v44 + 32) = v45;
      *(_QWORD *)(v44 + 48) = v43;
      *(_QWORD *)(v44 + 56) = v2;
      v46 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v43;
      v47 = v2;
      v48 = (_QWORD *)swift_task_alloc(v46);
      *(_QWORD *)(v1 + 256) = v48;
      *v48 = v1;
      v48[1] = sub_1003A3B1C;
      return NSManagedObjectContext.perform<A>(_:)(v1 + 24, sub_1003A4600, v44, *(_QWORD *)(v1 + 208));
    }
  }
  else
  {
    v17 = *(_QWORD *)(v1 + 144);
    v18 = *(_QWORD *)(v1 + 152);
    v19 = *(_QWORD *)(v1 + 128);
    v20 = *(_QWORD *)(v1 + 136);
    static Logger.link.getter(a1);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v17, v18, v19);
    v22 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.error.getter(v22, v23);
    v25 = os_log_type_enabled(v22, v24);
    v26 = *(_QWORD *)(v1 + 144);
    v27 = *(_QWORD *)(v1 + 152);
    v28 = *(_QWORD *)(v1 + 128);
    v29 = *(_QWORD *)(v1 + 136);
    if (v25)
    {
      v30 = *(_QWORD *)(v1 + 120);
      v70 = *(_QWORD *)(v1 + 104);
      v71 = *(_QWORD *)(v1 + 96);
      v72 = *(_QWORD *)(v1 + 112);
      v31 = *(_QWORD *)(v1 + 56);
      v69 = *(_QWORD *)(v1 + 152);
      v32 = swift_slowAlloc(22, -1);
      v68 = v29;
      v33 = swift_slowAlloc(64, -1);
      v74[0] = v33;
      *(_DWORD *)v32 = 136315394;
      v34 = _typeName(_:qualified:)(v31, 0);
      v36 = v35;
      *(_QWORD *)(v32 + 4) = sub_1003A4190(v34, v35, v74);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v32 + 12) = 2080;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v30, v31, v28, &protocol requirements base descriptor for AppEntity, &associated conformance descriptor for AppEntity.Identifiable.ID: EntityIdentifierConvertible);
      v38 = dispatch thunk of EntityIdentifierConvertible.entityIdentifierString.getter(v28, AssociatedConformanceWitness);
      v40 = v39;
      *(_QWORD *)(v32 + 14) = sub_1003A4190(v38, v39, v74);
      v41 = swift_bridgeObjectRelease(v40);
      v42 = *(void (**)(uint64_t, uint64_t, __n128))(v68 + 8);
      v42(v26, v28, v41);
      _os_log_impl((void *)&_mh_execute_header, v22, v24, "%s: Managed object not found with entity identifier: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v72, v71);
      ((void (*)(uint64_t, uint64_t))v42)(v69, v28);
    }
    else
    {
      v50 = *(_QWORD *)(v1 + 104);
      v49 = *(_QWORD *)(v1 + 112);
      v51 = *(_QWORD *)(v1 + 96);

      v52 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v52(v26, v28);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
      v52(v27, v28);
    }
    v53 = *(_QWORD *)(v1 + 184);
    v54 = *(_QWORD *)(v1 + 160);
    v55 = *(_QWORD *)(v1 + 128);
    v56 = *(_QWORD *)(v1 + 136);
    v57 = swift_getAssociatedConformanceWitness(*(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 64), v53, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
    dispatch thunk of IteratorProtocol.next()(v53, v57);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55) == 1)
    {
      v58 = *(_QWORD *)(v1 + 200);
      v59 = *(_QWORD *)(v1 + 176);
      v61 = *(_QWORD *)(v1 + 152);
      v60 = *(_QWORD *)(v1 + 160);
      v62 = *(_QWORD *)(v1 + 144);
      v63 = *(_QWORD *)(v1 + 112);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 192) + 8))(v58, *(_QWORD *)(v1 + 184));
      v64 = *(_QWORD *)(v1 + 16);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v60);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      return (*(uint64_t (**)(uint64_t))(v1 + 8))(v64);
    }
    else
    {
      v65 = *(_QWORD *)(v1 + 72);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 136) + 32))(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 160), *(_QWORD *)(v1 + 128));
      v66 = *(int **)(v65 + 56);
      v73 = (int *)((char *)v66 + *v66);
      v67 = (_QWORD *)swift_task_alloc(v66[1]);
      *(_QWORD *)(v1 + 216) = v67;
      *v67 = v1;
      v67[1] = sub_1003A35E4;
      return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v73)(*(_QWORD *)(v1 + 152), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 72));
    }
  }
}

uint64_t sub_1003A3B1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 248);
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 16));
    swift_release(v4);
    v5 = sub_1003A3DFC;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 248));
    v5 = sub_1003A3B9C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003A3B9C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int *v21;
  _QWORD *v22;
  int *v23;

  *(_QWORD *)(v0 + 32) = *(_QWORD *)(v0 + 24);
  v1 = *(void **)(v0 + 240);
  v2 = *(void **)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 136);
  v6 = type metadata accessor for Array(0, *(_QWORD *)(v0 + 208));
  Array.append(_:)(v0 + 32, v6);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 128);
  v10 = *(_QWORD *)(v0 + 136);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 64), v7, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  dispatch thunk of IteratorProtocol.next()(v7, AssociatedConformanceWitness);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v12 = *(_QWORD *)(v0 + 200);
    v13 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 152);
    v14 = *(_QWORD *)(v0 + 160);
    v16 = *(_QWORD *)(v0 + 144);
    v17 = *(_QWORD *)(v0 + 112);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(v12, *(_QWORD *)(v0 + 184));
    v18 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v18);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 32))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 128));
    v21 = *(int **)(v20 + 56);
    v23 = (int *)((char *)v21 + *v21);
    v22 = (_QWORD *)swift_task_alloc(v21[1]);
    *(_QWORD *)(v0 + 216) = v22;
    *v22 = v0;
    v22[1] = sub_1003A35E4;
    return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))v23)(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_1003A3D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 136) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A3DFC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(void **)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1003A3EC0(uint64_t a1, id a2)
{
  id v2;
  uint64_t v3;
  uint64_t v4;

  v2 = objc_msgSend(a2, "managedObjectContextForObjectID:", a1);
  if (!v2)
  {
    __chkstk_darwin(0);
    v3 = swift_allocObject(&unk_10056C5F0, 24, 7);
    *(_QWORD *)(v3 + 16) = 0;
    sub_10039E3D4(v3, 225, sub_1003A4620);
    swift_release(v3);
    swift_willThrow(v4);
  }
  return v2;
}

id sub_1003A3F9C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, _QWORD *a4@<X8>)
{
  id v6;
  id v7;
  id v8;
  uint64_t AssociatedTypeWitness;
  id v11;
  uint64_t v12;
  id v13;

  v13 = 0;
  v6 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v13);
  v7 = v13;
  if (v6)
  {
    v8 = v6;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3);
    *a4 = swift_dynamicCastUnknownClassUnconditional(v8, AssociatedTypeWitness, 0, 0, 0);
    return v7;
  }
  else
  {
    v11 = v13;
    _convertNSErrorToError(_:)(v7);

    return (id)swift_willThrow(v12);
  }
}

uint64_t sub_1003A409C(void *a1, uint64_t a2)
{
  Swift::String v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  Swift::String v12;
  Swift::String v13;

  _StringGuts.grow(_:)(87);
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = _typeName(_:qualified:)(a2, 0);
  object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(object);
  v7._object = (void *)0x8000000100479A60;
  v7._countAndFlagsBits = 0xD000000000000053;
  String.append(_:)(v7);
  v8 = objc_msgSend(a1, "description");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12._countAndFlagsBits = v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t sub_1003A4190(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  sub_1003A4260(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100128424((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100128424((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_1000153C0(v12);
  return v7;
}

void sub_1003A4260(uint64_t *a1, void *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v10 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v10)
        {
          v12[0] = a5;
          v12[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          memcpy(__dst, v12, HIBYTE(a6) & 0xF);
          *((_BYTE *)__dst + v10) = 0;
          *a1 = (uint64_t)__dst;
          return;
        }
      }
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    sub_1003A435C(a5, a6);
    *a1 = v11;
    return;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      __break(1u);
      return;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) == 0)
    swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

char *sub_1003A435C(uint64_t a1, unint64_t a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (char *)sub_1003A43F0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1003A44EC(0, *((_QWORD *)v2 + 2) + 1, 1, v2);
  v4 = *((_QWORD *)v2 + 2);
  v3 = *((_QWORD *)v2 + 3);
  if (v4 >= v3 >> 1)
    v2 = sub_1003A44EC((char *)(v3 > 1), v4 + 1, 1, v2);
  *((_QWORD *)v2 + 2) = v4 + 1;
  v2[v4 + 32] = 0;
  return v2;
}

_QWORD *sub_1003A43F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *result;
  char v7;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_9;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_1003A4488(v4, 0);
      result = (_QWORD *)_StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v7 & 1) != 0)
        break;
      if (result == (_QWORD *)v4)
        return v5;
      __break(1u);
LABEL_9:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_1003A4488(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100012E18(&qword_1005DB878);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_1003A44EC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012E18(&qword_1005DB878);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1003A45D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

id sub_1003A4600@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1003A3F9C(*(void **)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1003A4620()
{
  uint64_t v0;

  return sub_1003A409C(*(void **)(v0 + 32), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1003A462C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003A4650()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  _BOOL8 v4;
  void *v5;
  _BOOL8 v6;
  id v7;

  v1 = sub_1003A4898(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___allAction, 0, (uint64_t)&unk_10056C648, (uint64_t)sub_1003A4CF8);
  v2 = OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection);
  v4 = v3 && !objc_msgSend(v3, "joinOperator");
  objc_msgSend(v1, "setState:", v4);

  v7 = sub_1003A4898(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___anyAction, 1, (uint64_t)&unk_10056C620, (uint64_t)sub_1003A4CF0);
  v5 = *(void **)(v0 + v2);
  v6 = v5 && objc_msgSend(v5, "joinOperator") == (id)1;
  objc_msgSend(v7, "setState:", v6);

}

uint64_t sub_1003A473C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection);
  if (!v1)
    return 0;
  v2 = objc_msgSend(v1, "summaryWithJoinOperatorMenu");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

UIMenu sub_1003A47A8()
{
  uint64_t v0;
  Swift::OpaquePointer preferredElementSize;
  id v2;
  Swift::String v3;
  UIImage_optional v5;

  sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
  v0 = sub_100012E18(&qword_1005CF6F0);
  preferredElementSize._rawValue = (void *)swift_allocObject(v0, 48, 7);
  *((_OWORD *)preferredElementSize._rawValue + 1) = xmmword_100451BF0;
  *((_QWORD *)preferredElementSize._rawValue + 4) = sub_1003A4898(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___allAction, 0, (uint64_t)&unk_10056C648, (uint64_t)sub_1003A4CF8);
  v2 = sub_1003A4898(&OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___anyAction, 1, (uint64_t)&unk_10056C620, (uint64_t)sub_1003A4CF0);
  *((_QWORD *)preferredElementSize._rawValue + 5) = v2;
  specialized Array._endMutation()(v2);
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v5.value.super.isa = 0;
  v5.is_nil = 0;
  return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v3, (Swift::String_optional)0, v5, 0, 0xFFFFFFFFFFFFFFFFLL, (UIMenuElementSize)preferredElementSize._rawValue, preferredElementSize);
}

id sub_1003A4898(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  char *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void *v19;
  id v20;

  v5 = *a1;
  v6 = *(void **)&v4[*a1];
  if (v6)
  {
    v7 = *(id *)&v4[*a1];
  }
  else
  {
    v11 = v4;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v12 = (id)NSStringFromICFilterSelectionJoinOperator(a2);
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = swift_allocObject(a3, 24, 7);
    *(_QWORD *)(v16 + 16) = v4;
    v17 = v4;
    v18 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v13, v15, 0, 0, 0, 0, 0, 0, 0, 0, 0, a4, v16);
    v19 = *(void **)&v4[v5];
    *(_QWORD *)&v11[v5] = v18;
    v7 = v18;

    v6 = 0;
  }
  v20 = v6;
  return v7;
}

id sub_1003A49A0(uint64_t a1, char *a2)
{
  id v3;
  id result;
  void (*v5)(_QWORD);
  uint64_t v6;

  v3 = *(id *)&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection];
  if (v3)
    v3 = objc_msgSend(v3, "setJoinOperator:", 0);
  sub_1003A4650(v3);
  result = objc_msgSend(a2, "setNeedsUpdateConfiguration");
  v5 = *(void (**)(_QWORD))&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged];
  if (v5)
  {
    v6 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged + 8];
    swift_retain(v6);
    v5(0);
    return (id)sub_100012C50((uint64_t)v5, v6);
  }
  return result;
}

id sub_1003A4A2C(uint64_t a1, char *a2)
{
  id v3;
  id result;
  void (*v5)(uint64_t);
  uint64_t v6;

  v3 = *(id *)&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection];
  if (v3)
    v3 = objc_msgSend(v3, "setJoinOperator:", 1);
  sub_1003A4650(v3);
  result = objc_msgSend(a2, "setNeedsUpdateConfiguration");
  v5 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged];
  if (v5)
  {
    v6 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged + 8];
    swift_retain(v6);
    v5(1);
    return (id)sub_100012C50((uint64_t)v5, v6);
  }
  return result;
}

id sub_1003A4B58(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  char *v4;
  id v5;
  objc_super v7;

  ObjectType = (objc_class *)swift_getObjectType(v1);
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_filterSelection] = 0;
  v4 = &v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___allAction] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell____lazy_storage___anyAction] = 0;
  v7.receiver = v1;
  v7.super_class = ObjectType;
  v5 = objc_msgSendSuper2(&v7, "initWithCoder:", a1);

  return v5;
}

void sub_1003A4C00()
{
  uint64_t v0;

  sub_100012C50(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged), *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes28FolderComposerFilterJoinCell_joinOperatorChanged + 8));
}

uint64_t type metadata accessor for FolderComposerFilterJoinCell()
{
  return objc_opt_self(_TtC11MobileNotes28FolderComposerFilterJoinCell);
}

uint64_t sub_1003A4CCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1003A4CF0(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A4A2C(a1, *(char **)(v1 + 16));
}

id sub_1003A4CF8(uint64_t a1)
{
  uint64_t v1;

  return sub_1003A49A0(a1, *(char **)(v1 + 16));
}

uint64_t sub_1003A4D04()
{
  return 9;
}

uint64_t sub_1003A4D0C()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, 0, 0);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

unint64_t sub_1003A4DC0()
{
  return sub_1003A4E98();
}

uint64_t type metadata accessor for FolderComposerFilterCellPinnedNotes()
{
  return objc_opt_self(_TtC11MobileNotes35FolderComposerFilterCellPinnedNotes);
}

unint64_t sub_1003A4E98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DB8F0;
  if (!qword_1005DB8F0)
  {
    v1 = objc_opt_self(ICPinnedNotesFilterTypeSelection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005DB8F0);
  }
  return result;
}

void sub_1003A5758()
{
  uint64_t v0;
  uint64_t v1;
  void *Strong;
  id v3;
  unsigned int v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;

  v1 = v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  if (Strong)
  {
    v13 = Strong;
    v3 = objc_msgSend(Strong, "traitCollection");
    v4 = objc_msgSend(v3, "ic_hasCompactWidth");

    if (v4)
      objc_msgSend(v13, "setEditing:animated:", 0, 1);
    v5 = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_delegate);
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, "noteEditorActionMenuWillShow:", v0);
      swift_unknownObjectRelease(v6, v7);
    }
    v8 = swift_unknownObjectWeakLoadStrong(v1);
    if (!v8)
      goto LABEL_13;
    v9 = (void *)v8;
    v10 = objc_opt_self(ICNAViewController);
    v11 = (void *)swift_dynamicCastObjCClass(v9, v10);
    if (v11)
    {
      v12 = objc_msgSend(v11, "eventReporter");

      if (!v12)
      {
LABEL_13:

        return;
      }
      objc_msgSend(v12, "submitNoteActionMenuEventForNoteEditorWithUsageType:activityType:", 1, 0);
    }
    else
    {
      v12 = v13;
      v13 = v9;
    }

    goto LABEL_13;
  }
}

id sub_1003A58D4()
{
  uint64_t v0;
  void *Strong;
  void *v2;
  id result;
  void *v4;
  unsigned __int8 v5;
  id v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  void *v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Class v21;
  unint64_t v22;

  v22 = (unint64_t)_swiftEmptyArrayStorage;
  if (!*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_invitation))
  {
    v16 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
    if (!v16 || objc_msgSend(v16, "isEmpty"))
    {
      v17 = sub_1003A5B3C();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v17);
      v19 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v18 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v19 >= v18 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
      v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized Array._endMutation()(v20);
      return (id)v22;
    }
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  if (!Strong)
  {
LABEL_5:
    v6 = sub_1003A5C08();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
    v8 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v7 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v8 >= v7 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
    v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v6);
    specialized Array._endMutation()(v9);
    v10 = sub_1003A5D28();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
    v12 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v11 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v12 >= v11 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
    v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
    specialized Array._endMutation()(v13);
    isa = sub_1003A5F80().super.super.isa;
    v21 = isa;
    v15 = sub_100012E18(&qword_1005D5880);
    Array.appendNonNil(_:)(&v21, v15);

    return (id)v22;
  }
  v2 = Strong;
  result = objc_msgSend(Strong, "view");
  if (result)
  {
    v4 = result;
    v5 = objc_msgSend(result, "ic_isInSecureWindow");

    if ((v5 & 1) != 0)
      return (id)v22;
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

id sub_1003A5B3C()
{
  id v0;
  uint64_t v1;
  void *v2;
  _QWORD *v3;
  Class isa;
  double v5;
  id v6;
  id v8;
  _QWORD *v9;

  v9 = _swiftEmptyArrayStorage;
  v0 = sub_1003A6FC4();
  v8 = v0;
  v1 = sub_100012E18(&qword_1005D5880);
  Array.appendNonNil(_:)(&v8, v1);

  v2 = (void *)objc_opt_self(UIMenu);
  v3 = v9;
  sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v5 = swift_bridgeObjectRelease(v3).n128_u64[0];
  v6 = objc_msgSend(v2, "ic_inlineMenuWithChildren:", isa, v5, v8);

  return v6;
}

id sub_1003A5C08()
{
  id v0;
  uint64_t v1;
  id v2;
  id v3;
  void *v4;
  _QWORD *v5;
  Class isa;
  id v7;
  id v9;
  _QWORD *v10;

  v10 = _swiftEmptyArrayStorage;
  v0 = sub_1003A6448();
  v9 = v0;
  v1 = sub_100012E18(&qword_1005D5880);
  Array.appendNonNil(_:)(&v9, v1);

  v2 = sub_1003A668C();
  v9 = v2;
  Array.appendNonNil(_:)(&v9, v1);

  v3 = sub_1003A6838();
  v9 = v3;
  Array.appendNonNil(_:)(&v9, v1);

  v4 = (void *)objc_opt_self(UIMenu);
  v5 = v10;
  sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v4, "ic_inlineMenuWithElementSize:children:", 1, isa, swift_bridgeObjectRelease(v5).n128_f64[0]);

  return v7;
}

id sub_1003A5D28()
{
  uint64_t v0;
  uint64_t v1;
  objc_class *v2;
  uint64_t v3;
  objc_class *v4;
  void *v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  objc_class *v10;
  id v11;
  Class v12;
  objc_class *v13;
  objc_class *v14;
  objc_class *v15;
  objc_class *v16;
  void *v17;
  _QWORD *v18;
  Class isa;
  id v20;
  Class v22;
  _QWORD *v23;

  v1 = v0;
  v23 = _swiftEmptyArrayStorage;
  v2 = (objc_class *)sub_1003A6BF4();
  v22 = v2;
  v3 = sub_100012E18(&qword_1005D5880);
  Array.appendNonNil(_:)(&v22, v3);

  v4 = (objc_class *)sub_1003A6E04();
  v22 = v4;
  Array.appendNonNil(_:)(&v22, v3);

  v5 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_isMathEnabled);
    v7 = objc_allocWithZone((Class)ICCalculatePreviewBehaviorMenu);
    v8 = v5;
    v9 = objc_msgSend(v7, "initWithNote:isMathEnabled:", v8, v6);
    v10 = (objc_class *)objc_msgSend(v9, "makeMenu");

  }
  else
  {
    v10 = 0;
  }
  v22 = v10;
  Array.appendNonNil(_:)(&v22, v3);

  v11 = *(id *)(v1 + OBJC_IVAR___ICNoteEditorActionMenu_viewControllerManager);
  v12 = sub_1002872D4(v11);

  v22 = v12;
  Array.appendNonNil(_:)(&v22, v3);

  v13 = (objc_class *)sub_1003A6FC4();
  v22 = v13;
  Array.appendNonNil(_:)(&v22, v3);

  v14 = (objc_class *)sub_1003A72FC();
  v22 = v14;
  Array.appendNonNil(_:)(&v22, v3);

  v15 = (objc_class *)sub_1003A74F8();
  v22 = v15;
  Array.appendNonNil(_:)(&v22, v3);

  v16 = (objc_class *)sub_1003A76FC();
  v22 = v16;
  Array.appendNonNil(_:)(&v22, v3);

  v17 = (void *)objc_opt_self(UIMenu);
  v18 = v23;
  sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v20 = objc_msgSend(v17, "ic_inlineMenuWithChildren:", isa, swift_bridgeObjectRelease(v18).n128_f64[0]);

  return v20;
}

UIMenu sub_1003A5F80()
{
  id v0;
  uint64_t v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  unsigned int v25;
  const char *v26;
  unint64_t v27;
  void *v28;
  NSString v29;
  id v30;
  UIMenuElementSize preferredElementSize;
  id v32;
  NSString v33;
  id v34;
  uint64_t v35;
  void *v36;
  void *v37;
  NSString v38;
  objc_class *v39;
  Swift::String v40;
  uint64_t v42;
  uint64_t v43;
  Swift::OpaquePointer v44;
  _OWORD v45[2];
  uint64_t v46;
  UIImage_optional v47;

  v46 = (uint64_t)_swiftEmptyArrayStorage;
  v0 = sub_1003A7A04();
  *(_QWORD *)&v45[0] = v0;
  v1 = sub_100012E18(&qword_1005D5880);
  Array.appendNonNil(_:)(v45, v1);

  v2 = sub_1003A69D4();
  *(_QWORD *)&v45[0] = v2;
  Array.appendNonNil(_:)(v45, v1);

  v3 = sub_1003A7B98();
  *(_QWORD *)&v45[0] = v3;
  Array.appendNonNil(_:)(v45, v1);

  v4 = sub_1003A7DD4();
  *(_QWORD *)&v45[0] = v4;
  Array.appendNonNil(_:)(v45, v1);

  v7 = sub_1003A7FD4(v5, v6);
  *(_QWORD *)&v45[0] = v7;
  Array.appendNonNil(_:)(v45, v1);

  v8 = sub_1003A8130();
  *(_QWORD *)&v45[0] = v8;
  Array.appendNonNil(_:)(v45, v1);

  v9 = sub_1003A82A0();
  *(_QWORD *)&v45[0] = v9;
  Array.appendNonNil(_:)(v45, v1);

  v10 = sub_1003A8410();
  *(_QWORD *)&v45[0] = v10;
  Array.appendNonNil(_:)(v45, v1);

  v11 = sub_1003A85FC();
  *(_QWORD *)&v45[0] = v11;
  Array.appendNonNil(_:)(v45, v1);

  v14 = sub_1003A8788(v12, v13);
  *(_QWORD *)&v45[0] = v14;
  Array.appendNonNil(_:)(v45, v1);

  v17 = sub_1003A88C4(v15, v16);
  *(_QWORD *)&v45[0] = v17;
  Array.appendNonNil(_:)(v45, v1);

  v18 = sub_1003A8A2C();
  *(_QWORD *)&v45[0] = v18;
  Array.appendNonNil(_:)(v45, v1);

  v21 = sub_1003A8B2C(v19, v20);
  *(_QWORD *)&v45[0] = v21;
  Array.appendNonNil(_:)(v45, v1);

  if (ICDebugModeEnabled(v22, v23))
  {
    v24 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v25 = objc_msgSend(v24, "_ICDebugWindowEnabled");

    v26 = "Show Debug Window";
    if (v25)
      v26 = "Hide Debug Window";
    v27 = (unint64_t)(v26 - 32) | 0x8000000000000000;
    sub_1000163BC(0, &qword_1005D8230, UICommand_ptr);
    memset(v45, 0, sizeof(v45));
    v44._rawValue = 0;
    v28 = (void *)UICommand.init(title:subtitle:image:selectedImage:action:propertyList:alternates:discoverabilityTitle:attributes:state:)(0xD000000000000011, v27, 0, 0, 0, 0, "toggleDebugStatusWindowVisible:", v45, _swiftEmptyArrayStorage);
    v29 = String._bridgeToObjectiveC()();
    v30 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v29);

    objc_msgSend(v28, "setImage:", v30);
  }
  else
  {
    v28 = 0;
  }
  *(_QWORD *)&v45[0] = v28;
  Array.appendNonNil(_:)(v45, v1);

  preferredElementSize = v46;
  if ((unint64_t)v46 >> 62)
  {
    if (v46 < 0)
      v42 = v46;
    else
      v42 = v46 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v46);
    v43 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease(preferredElementSize);
    if (v43)
      goto LABEL_8;
  }
  else if (*(_QWORD *)((v46 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_8:
    v32 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v33 = String._bridgeToObjectiveC()();
    v34 = objc_msgSend(v32, "localizedStringForKey:value:table:", v33, 0, 0);

    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v37 = v36;

    v38 = String._bridgeToObjectiveC()();
    v39 = (objc_class *)objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:", v38);

    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v40._countAndFlagsBits = v35;
    v40._object = v37;
    v47.value.super.isa = v39;
    v47.is_nil = 0;
    return UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v40, (Swift::String_optional)0, v47, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v44);
  }
  swift_bridgeObjectRelease(preferredElementSize);
  return 0;
}

id sub_1003A6448()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  char *v9;
  id v10;
  double v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *Strong;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  void **v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *(*v26)();
  uint64_t v27;

  v1 = *(void **)&v0[OBJC_IVAR___ICNoteEditorActionMenu_note];
  if (!v1)
    return 0;
  v2 = (void *)objc_opt_self(UIDevice);
  v3 = v1;
  if ((objc_msgSend(v2, "ic_isVision") & 1) != 0)
  {

    return 0;
  }
  v5 = swift_allocObject(&unk_10056CB60, 24, 7);
  *(_QWORD *)(v5 + 16) = v0;
  v6 = objc_allocWithZone((Class)ICScanDocumentsNoteActivity);
  v26 = sub_1003A8ED8;
  v27 = v5;
  v22 = _NSConcreteStackBlock;
  v23 = 1107296256;
  v24 = sub_100206734;
  v25 = &unk_10056CB78;
  v7 = _Block_copy(&v22);
  v8 = v27;
  v9 = v0;
  v10 = objc_msgSend(v6, "initWithScanDocumentsBlock:", v7, swift_release(v8).n128_f64[0]);
  _Block_release(v7);
  if (*(_QWORD *)&v9[OBJC_IVAR___ICNoteEditorActionMenu_completion])
  {
    v12 = *(_QWORD *)&v9[OBJC_IVAR___ICNoteEditorActionMenu_completion + 8];
    v26 = *(void *(**)())&v9[OBJC_IVAR___ICNoteEditorActionMenu_completion];
    v27 = v12;
    v22 = _NSConcreteStackBlock;
    v23 = 1107296256;
    v24 = sub_10023ABC8;
    v25 = &unk_10056CBA0;
    v13 = _Block_copy(&v22);
    v14 = v27;
    swift_retain(v12);
    *(_QWORD *)&v11 = swift_release(v14).n128_u64[0];
  }
  else
  {
    v13 = 0;
  }
  v4 = objc_msgSend(v10, "actionWithCompletion:", v13, v11);
  _Block_release(v13);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(&v9[OBJC_IVAR___ICNoteEditorActionMenu_delegate]);
  if (Strong)
  {
    v16 = Strong;
    v17 = objc_msgSend(Strong, "noteEditorActionMenuCanScanDocuments:", v9);
    swift_unknownObjectRelease(v16, v18);
    v19 = v17 ^ 1;
  }
  else
  {
    v19 = 1;
  }
  if ((objc_msgSend(v3, "isPasswordProtectedAndLocked") & 1) != 0)
    v20 = 1;
  else
    v20 = objc_msgSend(v3, "isEditable") ^ 1 | v19;
  objc_msgSend(v4, "setIc_disabled:", v20);

  return v4;
}

id sub_1003A668C()
{
  uint64_t v0;
  void *v1;
  uint64_t Strong;
  void *v3;
  uint64_t v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;

  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = objc_opt_self(ICNAViewController);
    v5 = (id)swift_dynamicCastObjCClass(v3, v4);
    v6 = v1;
    if (v5)
      v5 = objc_msgSend(v5, "eventReporter");

  }
  else
  {
    v8 = v1;
    v5 = 0;
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)ICPinNoteActivity), "initWithNote:eventReporter:", v1, v5);

  v11 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
  if (v11)
  {
    v12 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v16[4] = v11;
    v17 = v12;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1107296256;
    v16[2] = sub_10023ABC8;
    v16[3] = &unk_10056CB28;
    v13 = _Block_copy(v16);
    v14 = v17;
    swift_retain(v12);
    *(_QWORD *)&v10 = swift_release(v14).n128_u64[0];
  }
  else
  {
    v13 = 0;
  }
  v7 = objc_msgSend(v9, "actionWithCompletion:", v13, v10);
  _Block_release(v13);
  objc_msgSend(v7, "setIc_disabled:", objc_msgSend(v1, "isPinnable") ^ 1);

  return v7;
}

id sub_1003A6838()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *Strong;
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  double v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v17[5];
  uint64_t v18;

  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  v2 = v1;
  if (!objc_msgSend(v2, "isLockable")
    || (v3 = v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController,
        (Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController)) != 0)
    && (v5 = Strong, v6 = objc_msgSend(Strong, "ic_behavior"), v5, v6 == (id)1))
  {

    return 0;
  }
  v8 = (void *)swift_unknownObjectWeakLoadStrong(v3);
  v9 = objc_allocWithZone((Class)ICLockNoteActivity);
  v10 = v2;
  v11 = objc_msgSend(v9, "initWithNote:presentingViewController:", v10, v8);

  objc_msgSend(v11, "setContextPath:", 1);
  if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v13 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v17[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v18 = v13;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_10023ABC8;
    v17[3] = &unk_10056CB00;
    v14 = _Block_copy(v17);
    v15 = v18;
    swift_retain(v13);
    *(_QWORD *)&v12 = swift_release(v15).n128_u64[0];
  }
  else
  {
    v14 = 0;
  }
  v7 = objc_msgSend(v11, "actionWithCompletion:", v14, v12);

  _Block_release(v14);
  return v7;
}

id sub_1003A69D4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *Strong;
  void *v7;
  id v8;
  id v9;
  id v10;
  Class isa;
  id v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  _QWORD v20[5];
  uint64_t v21;

  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  v2 = v0;
  v3 = v1;
  if (!ICInternalSettingsIsAlexandriaEnabled() || !objc_msgSend(v3, "allowsExporting"))
  {

    return 0;
  }
  v4 = sub_100012E18(&qword_1005CF6F0);
  v5 = swift_allocObject(v4, 40, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100456F30;
  *(_QWORD *)(v5 + 32) = v3;
  v20[0] = v5;
  specialized Array._endMutation()(v5);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  v7 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
  v8 = objc_allocWithZone((Class)ICExportArchiveActivity);
  sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
  v9 = v3;
  v10 = v7;
  isa = Array._bridgeToObjectiveC()().super.isa;
  v12 = objc_msgSend(v8, "initWithObjects:presentingViewController:presentingBarButtonItem:presentingSourceView:", isa, Strong, v10, 0, swift_bridgeObjectRelease(v20[0]).n128_f64[0]);

  v14 = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
  if (v14)
  {
    v15 = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v20[4] = v14;
    v21 = v15;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1107296256;
    v20[2] = sub_10023ABC8;
    v20[3] = &unk_10056CAD8;
    v16 = _Block_copy(v20);
    v17 = v21;
    swift_retain(v15);
    *(_QWORD *)&v13 = swift_release(v17).n128_u64[0];
  }
  else
  {
    v16 = 0;
  }
  v18 = objc_msgSend(v12, "actionWithCompletion:", v16, v13, v20[0]);
  _Block_release(v16);
  objc_msgSend(v18, "setIc_disabled:", objc_msgSend(v9, "isSharable") ^ 1);

  return v18;
}

id sub_1003A6BF4()
{
  char *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  double v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  void **v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *(*v21)();
  uint64_t v22;

  v1 = *(void **)&v0[OBJC_IVAR___ICNoteEditorActionMenu_note];
  if (!v1)
    return 0;
  v2 = swift_allocObject(&unk_10056CA70, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v3 = objc_allocWithZone((Class)ICFindInNoteActivity);
  v21 = sub_1003A8EB8;
  v22 = v2;
  v17 = _NSConcreteStackBlock;
  v18 = 1107296256;
  v19 = sub_100206734;
  v20 = &unk_10056CA88;
  v4 = _Block_copy(&v17);
  v5 = v22;
  v6 = v0;
  v7 = v1;
  v8 = objc_msgSend(v3, "initWithPerformActivity:", v4, swift_release(v5).n128_f64[0]);
  _Block_release(v4);
  if (*(_QWORD *)&v6[OBJC_IVAR___ICNoteEditorActionMenu_completion])
  {
    v10 = *(_QWORD *)&v6[OBJC_IVAR___ICNoteEditorActionMenu_completion + 8];
    v21 = *(void *(**)())&v6[OBJC_IVAR___ICNoteEditorActionMenu_completion];
    v22 = v10;
    v17 = _NSConcreteStackBlock;
    v18 = 1107296256;
    v19 = sub_10023ABC8;
    v20 = &unk_10056CAB0;
    v11 = _Block_copy(&v17);
    v12 = v22;
    swift_retain(v10);
    *(_QWORD *)&v9 = swift_release(v12).n128_u64[0];
  }
  else
  {
    v11 = 0;
  }
  v13 = objc_msgSend(v8, "actionWithCompletion:", v11, v9);
  _Block_release(v11);
  if ((objc_msgSend(v7, "isPasswordProtectedAndLocked") & 1) != 0
    || (objc_msgSend(v7, "isDeletedOrInTrash") & 1) != 0
    || (objc_msgSend(v7, "isEmpty") & 1) != 0
    || (v14 = objc_msgSend(v7, "identifier")) == 0)
  {
    v15 = 1;
  }
  else
  {

    v15 = 0;
  }
  objc_msgSend(v13, "setIc_disabled:", v15);

  return v13;
}

id sub_1003A6E04()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *Strong;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v18[5];
  uint64_t v19;

  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  v2 = v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  v4 = v1;
  if (Strong)
  {
    v5 = objc_msgSend(Strong, "traitCollection");

    v6 = objc_msgSend(v5, "ic_behavior");
    if (v6 == (id)1)
    {

      return 0;
    }
  }
  v8 = (void *)swift_unknownObjectWeakLoadStrong(v2);
  v9 = objc_allocWithZone((Class)ICMoveNoteActivity);
  v10 = v4;
  v11 = objc_msgSend(v9, "initWithNote:presentingViewController:", v10, v8);

  v13 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
  if (v13)
  {
    v14 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v18[4] = v13;
    v19 = v14;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 1107296256;
    v18[2] = sub_10023ABC8;
    v18[3] = &unk_10056CA38;
    v15 = _Block_copy(v18);
    v16 = v19;
    swift_retain(v14);
    *(_QWORD *)&v12 = swift_release(v16).n128_u64[0];
  }
  else
  {
    v15 = 0;
  }
  v7 = objc_msgSend(v11, "actionWithCompletion:", v15, v12);
  _Block_release(v15);
  objc_msgSend(v7, "setIc_disabled:", objc_msgSend(v10, "isMovable") ^ 1);

  return v7;
}

id sub_1003A6FC4()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *Strong;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  void **v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id (*v28)();
  uint64_t v29;

  if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_invitation))
    return 0;
  v2 = OBJC_IVAR___ICNoteEditorActionMenu_note;
  v3 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  v4 = v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  v6 = swift_unknownObjectWeakLoadStrong(v4);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = objc_opt_self(ICNAViewController);
    v9 = (id)swift_dynamicCastObjCClass(v7, v8);
    v10 = v3;
    if (v9)
      v9 = objc_msgSend(v9, "eventReporter");

  }
  else
  {
    v10 = v3;
    v9 = 0;
  }
  v11 = swift_allocObject(&unk_10056C9D0, 24, 7);
  swift_unknownObjectWeakInit(v11 + 16, v0);
  v12 = objc_allocWithZone((Class)ICLinesAndGridsNoteActivity);
  v28 = sub_1003A8E78;
  v29 = v11;
  v24 = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_1003A8E80;
  v27 = &unk_10056C9E8;
  v13 = _Block_copy(&v24);
  v14 = v29;
  swift_retain(v11);
  v15 = objc_msgSend(v12, "initWithNote:presentingViewController:eventReporter:shouldCreateNewNoteBlock:", v10, Strong, v9, v13, swift_release(v14).n128_f64[0]);

  _Block_release(v13);
  v16 = swift_release(v11).n128_u64[0];
  if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v17 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v28 = *(id (**)())(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v29 = v17;
    v24 = _NSConcreteStackBlock;
    v25 = 1107296256;
    v26 = sub_10023ABC8;
    v27 = &unk_10056CA10;
    v18 = _Block_copy(&v24);
    v19 = v29;
    swift_retain(v17);
    v16 = swift_release(v19).n128_u64[0];
  }
  else
  {
    v18 = 0;
  }
  v1 = objc_msgSend(v15, "actionWithCompletion:", v18, *(double *)&v16);
  _Block_release(v18);
  v20 = *(void **)(v0 + v2);
  if (v20)
  {
    v21 = v20;
    if ((objc_msgSend(v21, "isPasswordProtectedAndLocked") & 1) != 0)
      v22 = 1;
    else
      v22 = objc_msgSend(v21, "isEditable") ^ 1;
    objc_msgSend(v1, "setIc_disabled:", v22);

  }
  return v1;
}

id sub_1003A725C(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (!Strong)
    return 0;
  v3 = (void *)Strong;
  v4 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR___ICNoteEditorActionMenu_delegate);
  if (!v4)
  {

    return 0;
  }
  v5 = v4;
  v6 = objc_msgSend(v4, "noteEditorActionMenuShouldCreateNewNote:", v3);
  swift_unknownObjectRelease(v5, v7);

  return v6;
}

id sub_1003A72FC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void **v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  v2 = objc_allocWithZone((Class)ICSetPreferredAttachmentSizeActivity);
  v3 = v1;
  v4 = objc_msgSend(v2, "initWithNote:", v3);
  if ((objc_msgSend(v3, "isPasswordProtectedAndLocked") & 1) != 0
    || (objc_msgSend(v3, "isEditable") & 1) == 0)
  {
    v10 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    if (v10)
    {
      v11 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      v20 = v10;
      v21 = v11;
      v16 = _NSConcreteStackBlock;
      v17 = 1107296256;
      v18 = sub_10023ABC8;
      v19 = &unk_10056C970;
      v12 = _Block_copy(&v16);
      v13 = v21;
      swift_retain(v11);
      v5 = swift_release(v13).n128_u64[0];
    }
    else
    {
      v12 = 0;
    }
    v14 = objc_msgSend(v4, "actionWithCompletion:", v12, *(double *)&v5);
    _Block_release(v12);
    objc_msgSend(v14, "setIc_disabled:", 1);

  }
  else
  {
    v6 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    if (v6)
    {
      v7 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      v20 = v6;
      v21 = v7;
      v16 = _NSConcreteStackBlock;
      v17 = 1107296256;
      v18 = sub_10023ABC8;
      v19 = &unk_10056C998;
      v8 = _Block_copy(&v16);
      v9 = v21;
      swift_retain(v7);
      v5 = swift_release(v9).n128_u64[0];
    }
    else
    {
      v8 = 0;
    }
    v14 = objc_msgSend(v4, "menuWithCompletion:", v8, *(double *)&v5);

    _Block_release(v8);
    v3 = v4;
  }

  return v14;
}

id sub_1003A74F8()
{
  uint64_t v0;
  void *v1;
  uint64_t Strong;
  void *v3;
  id v4;
  id result;
  void *v6;
  id v7;
  id v8;
  unsigned __int8 v9;
  id v10;
  id v11;
  double v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;

  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  if (!Strong)
    return 0;
  v3 = (void *)Strong;
  v4 = v1;
  result = objc_msgSend(v3, "view");
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, "window");

    if (v7)
    {
      v8 = objc_msgSend(v7, "traitCollection");
      v9 = objc_msgSend(v8, "ic_isDark");

      if ((v9 & 1) != 0
        && (objc_msgSend((id)objc_opt_self(UITraitCollection), "ic_alwaysShowLightContent") & 1) == 0
        && (objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision") & 1) == 0)
      {
        v11 = objc_msgSend(objc_allocWithZone((Class)ICLightContentActivity), "initWithNote:", v4);
        if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
        {
          v13 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
          v16[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
          v17 = v13;
          v16[0] = _NSConcreteStackBlock;
          v16[1] = 1107296256;
          v16[2] = sub_10023ABC8;
          v16[3] = &unk_10056C948;
          v14 = _Block_copy(v16);
          v15 = v17;
          swift_retain(v13);
          *(_QWORD *)&v12 = swift_release(v15).n128_u64[0];
        }
        else
        {
          v14 = 0;
        }
        v10 = objc_msgSend(v11, "actionWithCompletion:", v14, v12);

        _Block_release(v14);
        return v10;
      }

    }
    else
    {

    }
    return 0;
  }
  __break(1u);
  return result;
}

id sub_1003A76FC()
{
  char *v0;
  void *v1;
  uint64_t v2;
  id v3;
  void *v4;
  char *v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  void **v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void (*v18)();
  uint64_t v19;

  v1 = *(void **)&v0[OBJC_IVAR___ICNoteEditorActionMenu_note];
  if (!v1)
    return 0;
  v2 = swift_allocObject(&unk_10056C8E0, 24, 7);
  *(_QWORD *)(v2 + 16) = v0;
  v3 = objc_allocWithZone((Class)ICDeleteNoteActivity);
  v18 = sub_1003A8E4C;
  v19 = v2;
  v14 = _NSConcreteStackBlock;
  v15 = 1107296256;
  v16 = sub_100206734;
  v17 = &unk_10056C8F8;
  v4 = _Block_copy(&v14);
  v5 = v0;
  v6 = v1;
  v7 = objc_msgSend(v3, "initWithDeleteBlock:", v4);
  _Block_release(v4);
  v8 = swift_release(v19).n128_u64[0];
  if (*(_QWORD *)&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion])
  {
    v9 = *(_QWORD *)&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion + 8];
    v18 = *(void (**)())&v5[OBJC_IVAR___ICNoteEditorActionMenu_completion];
    v19 = v9;
    v14 = _NSConcreteStackBlock;
    v15 = 1107296256;
    v16 = sub_10023ABC8;
    v17 = &unk_10056C920;
    v10 = _Block_copy(&v14);
    v11 = v19;
    swift_retain(v9);
    v8 = swift_release(v11).n128_u64[0];
  }
  else
  {
    v10 = 0;
  }
  v12 = objc_msgSend(v7, "actionWithCompletion:", v10, *(double *)&v8);
  _Block_release(v10);
  objc_msgSend(v12, "setIc_destructive:", 1);
  objc_msgSend(v12, "setIc_disabled:", objc_msgSend(v6, "isDeletable") ^ 1);

  return v12;
}

void sub_1003A78C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;

  v2 = a1 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController;
  Strong = swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = objc_opt_self(ICNAViewController);
    v6 = (void *)swift_dynamicCastObjCClass(v4, v5);
    if (v6)
    {
      v7 = objc_msgSend(v6, "eventReporter");

      if (!v7)
        goto LABEL_6;
      objc_msgSend(v7, "pushContextPathDataWithContextPathEnum:", 1);
      v4 = v7;
    }

  }
LABEL_6:
  v8 = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR___ICNoteEditorActionMenu_delegate);
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "noteEditorActionMenuShouldDeleteNote:", a1);
    swift_unknownObjectRelease(v9, v10);
  }
  v11 = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (v11)
  {
    v12 = v11;
    v13 = objc_opt_self(ICNAViewController);
    v14 = (void *)swift_dynamicCastObjCClass(v12, v13);
    if (v14)
      v15 = objc_msgSend(v14, "eventReporter");
    else
      v15 = 0;

    v11 = v15;
  }
  v16 = v11;
  objc_msgSend(v11, "popContextPathData");

}

id sub_1003A7A04()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  double v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD v18[5];
  uint64_t v19;

  v1 = objc_msgSend((id)objc_opt_self(ICUtilities), "isInternalInstall");
  if ((v1 & 1) == 0 && !ICDebugModeEnabled(v1, v2))
    return 0;
  v3 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = objc_msgSend(v4, "identifier");
  if (v5)
  {
    v6 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    v9 = objc_allocWithZone((Class)ICCopyUUIDActivity);
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "initWithUUIDString:", v10, swift_bridgeObjectRelease(v8).n128_f64[0]);

    if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
    {
      v13 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      v18[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
      v19 = v13;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 1107296256;
      v18[2] = sub_10023ABC8;
      v18[3] = &unk_10056C8A8;
      v14 = _Block_copy(v18);
      v15 = v19;
      swift_retain(v13);
      *(_QWORD *)&v12 = swift_release(v15).n128_u64[0];
    }
    else
    {
      v14 = 0;
    }
    v16 = objc_msgSend(v11, "actionWithCompletion:", v14, v12);

    _Block_release(v14);
  }
  else
  {

    return 0;
  }
  return v16;
}

id sub_1003A7B98()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  id v10;
  uint64_t v11;
  void *Strong;
  id v13;
  Class isa;
  id v15;
  double v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  _QWORD v23[5];
  uint64_t v24;

  v1 = objc_msgSend((id)objc_opt_self(ICUtilities), "isInternalInstall");
  if ((v1 & 1) == 0 && !ICDebugModeEnabled(v1, v2))
    return 0;
  v3 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = objc_msgSend(v4, "attachmentsInOrder");
  v6 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v22 = v7;
    else
      v22 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)&v9 = swift_bridgeObjectRelease(v7).n128_u64[0];
  if (!v8)
  {

    return 0;
  }
  v10 = objc_msgSend(v4, "attachmentsInOrder", v9);
  v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v10, v6);

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  v13 = objc_allocWithZone((Class)ICInspectAttachmentsNoteActivity);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v15 = objc_msgSend(v13, "initWithAttachments:presentingViewController:", isa, Strong, swift_bridgeObjectRelease(v11).n128_f64[0]);

  if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v17 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v23[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v24 = v17;
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 1107296256;
    v23[2] = sub_10023ABC8;
    v23[3] = &unk_10056C880;
    v18 = _Block_copy(v23);
    v19 = v24;
    swift_retain(v17);
    *(_QWORD *)&v16 = swift_release(v19).n128_u64[0];
  }
  else
  {
    v18 = 0;
  }
  v20 = objc_msgSend(v15, "actionWithCompletion:", v18, v16);

  _Block_release(v18);
  return v20;
}

id sub_1003A7DD4()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *Strong;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  double v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v19[5];
  uint64_t v20;

  if (!objc_msgSend((id)objc_opt_self(ICDocCamArchiveExporter), "archiveExportingEnabled"))
    return 0;
  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v2, "visibleAttachmentsWithType:", 11);
  v4 = sub_1000163BC(0, &qword_1005CFAC0, ICAttachment_ptr);
  v5 = sub_100179830();
  v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v3, v4, v5);

  if ((v6 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    v8 = (id)__CocoaSet.count.getter(v7);
  }
  else
  {
    v8 = *(id *)(v6 + 16);
  }
  swift_bridgeObjectRelease(v6);
  if (v8)
  {
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
    v10 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
    v11 = objc_allocWithZone((Class)ICArchiveNoteDocScansActivity);
    v12 = v2;
    v13 = objc_msgSend(v11, "initWithNote:presentingViewController:presentingBarButtonItem:", v12, Strong, v10);

    if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
    {
      v15 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      v19[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
      v20 = v15;
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 1107296256;
      v19[2] = sub_10023ABC8;
      v19[3] = &unk_10056C858;
      v16 = _Block_copy(v19);
      v17 = v20;
      swift_retain(v15);
      *(_QWORD *)&v14 = swift_release(v17).n128_u64[0];
    }
    else
    {
      v16 = 0;
    }
    v8 = objc_msgSend(v13, "actionWithCompletion:", v16, v14);

    _Block_release(v16);
  }
  else
  {

  }
  return v8;
}

id sub_1003A7FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *Strong;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  double v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _QWORD v15[5];
  uint64_t v16;

  if (!ICDebugModeEnabled(a1, a2))
    return 0;
  v3 = *(void **)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v3)
    return 0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  v5 = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
  v6 = objc_allocWithZone((Class)ICChangeNoteDatesActivity);
  v7 = v3;
  v8 = objc_msgSend(v6, "initWithNote:presentingViewController:presentingBarButtonItem:", v7, Strong, v5);

  if (*(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v10 = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v15[4] = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v16 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10023ABC8;
    v15[3] = &unk_10056C830;
    v11 = _Block_copy(v15);
    v12 = v16;
    swift_retain(v10);
    *(_QWORD *)&v9 = swift_release(v12).n128_u64[0];
  }
  else
  {
    v11 = 0;
  }
  v13 = objc_msgSend(v8, "actionWithCompletion:", v11, v9);

  _Block_release(v11);
  return v13;
}

id sub_1003A8130()
{
  uint64_t v0;
  void *v1;
  void *Strong;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  double v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  _QWORD v13[5];
  uint64_t v14;

  if (!objc_msgSend((id)objc_opt_self(ICUtilities), "isInternalInstall"))
    return 0;
  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
  v4 = objc_allocWithZone((Class)ICDrawingRegressionTestsActivity);
  v5 = v1;
  v6 = objc_msgSend(v4, "initWithNote:presentingViewController:presentingBarButtonItem:", v5, Strong, v3);

  if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v8 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v13[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v14 = v8;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10023ABC8;
    v13[3] = &unk_10056C808;
    v9 = _Block_copy(v13);
    v10 = v14;
    swift_retain(v8);
    *(_QWORD *)&v7 = swift_release(v10).n128_u64[0];
  }
  else
  {
    v9 = 0;
  }
  v11 = objc_msgSend(v6, "actionWithCompletion:", v9, v7);

  _Block_release(v9);
  return v11;
}

id sub_1003A82A0()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  void *v3;
  id v4;
  id v5;
  double v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD v12[5];
  uint64_t v13;

  v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v2 = objc_msgSend(v1, "BOOLForKey:", kICEnableDuplicateNoteDefaultsKey);

  if (!v2)
    return 0;
  v3 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v3)
    return 0;
  v4 = v3;
  if (!objc_msgSend(v4, "isDuplicatable"))
  {

    return 0;
  }
  v5 = objc_msgSend(objc_allocWithZone((Class)ICDuplicateNoteActivity), "initWithNote:", v4);
  if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v7 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v12[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v13 = v7;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_10023ABC8;
    v12[3] = &unk_10056C7E0;
    v8 = _Block_copy(v12);
    v9 = v13;
    swift_retain(v7);
    *(_QWORD *)&v6 = swift_release(v9).n128_u64[0];
  }
  else
  {
    v8 = 0;
  }
  v10 = objc_msgSend(v5, "actionWithCompletion:", v8, v6);

  _Block_release(v8);
  return v10;
}

id sub_1003A8410()
{
  void *v0;
  uint64_t v1;
  id v2;
  void *v3;
  char *v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void **v12;
  uint64_t v13;
  void *v14;
  void *v15;
  void *(*v16)();
  uint64_t v17;

  if (!objc_msgSend((id)objc_opt_self(ICUtilities), "isInternalInstall"))
    return 0;
  v1 = swift_allocObject(&unk_10056C778, 24, 7);
  *(_QWORD *)(v1 + 16) = v0;
  v2 = objc_allocWithZone((Class)ICHandwritingDebugNoteActivity);
  v16 = sub_1003A8E2C;
  v17 = v1;
  v12 = _NSConcreteStackBlock;
  v13 = 1107296256;
  v14 = sub_100206734;
  v15 = &unk_10056C790;
  v3 = _Block_copy(&v12);
  v4 = v0;
  v5 = objc_msgSend(v2, "initWithShowHandwritingDebugBlock:", v3);
  _Block_release(v3);
  v6 = swift_release(v17).n128_u64[0];
  if (*(_QWORD *)&v4[OBJC_IVAR___ICNoteEditorActionMenu_completion])
  {
    v7 = *(_QWORD *)&v4[OBJC_IVAR___ICNoteEditorActionMenu_completion + 8];
    v16 = *(void *(**)())&v4[OBJC_IVAR___ICNoteEditorActionMenu_completion];
    v17 = v7;
    v12 = _NSConcreteStackBlock;
    v13 = 1107296256;
    v14 = sub_10023ABC8;
    v15 = &unk_10056C7B8;
    v8 = _Block_copy(&v12);
    v9 = v17;
    swift_retain(v7);
    v6 = swift_release(v9).n128_u64[0];
  }
  else
  {
    v8 = 0;
  }
  v10 = objc_msgSend(v5, "actionWithCompletion:", v8, *(double *)&v6);

  _Block_release(v8);
  return v10;
}

void *sub_1003A859C(uint64_t a1, SEL *a2)
{
  void *result;
  void *v5;
  uint64_t v6;

  result = (void *)swift_unknownObjectWeakLoadStrong(a1 + OBJC_IVAR___ICNoteEditorActionMenu_delegate);
  if (result)
  {
    v5 = result;
    objc_msgSend(result, *a2, a1);
    return (void *)swift_unknownObjectRelease(v5, v6);
  }
  return result;
}

id sub_1003A85FC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *Strong;
  id v5;
  id v6;
  id v7;
  double v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  _QWORD v14[5];
  uint64_t v15;

  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v1)
    return 0;
  v2 = v1;
  if (!objc_msgSend(v2, "isEditable")
    || (v3 = (void *)objc_opt_self(ICUtilities),
        (objc_msgSend(v3, "isInternalInstall") & 1) == 0)
    && !objc_msgSend(v3, "isSeedInstall"))
  {

    return 0;
  }
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
  v5 = objc_allocWithZone((Class)ICHandwritingFeedbackNoteActivity);
  v6 = v2;
  v7 = objc_msgSend(v5, "initWithNote:presentingViewController:", v6, Strong);

  if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v9 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v14[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v15 = v9;
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1107296256;
    v14[2] = sub_10023ABC8;
    v14[3] = &unk_10056C740;
    v10 = _Block_copy(v14);
    v11 = v15;
    swift_retain(v9);
    *(_QWORD *)&v8 = swift_release(v11).n128_u64[0];
  }
  else
  {
    v10 = 0;
  }
  v12 = objc_msgSend(v7, "actionWithCompletion:", v10, v8);

  _Block_release(v10);
  return v12;
}

id sub_1003A8788(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  objc_class *updated;
  char *v5;
  id v6;
  id v7;
  double v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD v13[5];
  uint64_t v14;
  objc_super v15;

  if (!ICDebugModeEnabled(a1, a2))
    return 0;
  v3 = *(id *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (v3)
  {
    updated = (objc_class *)type metadata accessor for UpdatePaperThumbnailsActivity();
    v5 = (char *)objc_allocWithZone(updated);
    *(_QWORD *)&v5[OBJC_IVAR___ICUpdatePaperThumbnailsActivity_note] = v3;
    v15.receiver = v5;
    v15.super_class = updated;
    v6 = v3;
    v7 = objc_msgSendSuper2(&v15, "init");
    if (*(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
    {
      v9 = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
      v13[4] = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
      v14 = v9;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 1107296256;
      v13[2] = sub_10023ABC8;
      v13[3] = &unk_10056C718;
      v10 = _Block_copy(v13);
      v11 = v14;
      swift_retain(v9);
      *(_QWORD *)&v8 = swift_release(v11).n128_u64[0];
    }
    else
    {
      v10 = 0;
    }
    v3 = objc_msgSend(v7, "actionWithCompletion:", v10, v8);

    _Block_release(v10);
  }
  return v3;
}

id sub_1003A88C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  objc_class *v7;
  char *v8;
  id v9;
  id v10;
  double v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;
  objc_super v17;

  if (!ICDebugModeEnabled(a1, a2))
    return 0;
  v3 = *(void **)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v3)
    return 0;
  v4 = v3;
  if (!objc_msgSend(v4, "isSharedViaICloud")
    || (objc_msgSend(v4, "isSharedReadOnly") & 1) != 0)
  {

    return 0;
  }
  v7 = (objc_class *)type metadata accessor for ClearActivityCachesActivity();
  v8 = (char *)objc_allocWithZone(v7);
  *(_QWORD *)&v8[OBJC_IVAR___ICClearActivityCachesActivity_note] = v4;
  v17.receiver = v8;
  v17.super_class = v7;
  v9 = v4;
  v10 = objc_msgSendSuper2(&v17, "init");
  if (*(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v12 = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v15[4] = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v16 = v12;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10023ABC8;
    v15[3] = &unk_10056C6F0;
    v13 = _Block_copy(v15);
    v14 = v16;
    swift_retain(v12);
    *(_QWORD *)&v11 = swift_release(v14).n128_u64[0];
  }
  else
  {
    v13 = 0;
  }
  v5 = objc_msgSend(v10, "actionWithCompletion:", v13, v11);

  _Block_release(v13);
  return v5;
}

id sub_1003A8A2C()
{
  uint64_t v0;
  id v1;
  double v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD v8[5];
  uint64_t v9;

  if (!ICInternalSettingsGetBundleBoolSettingValue(kICInternalSettingsEnableSettingCurrentQuickNote))
    return 0;
  v1 = objc_msgSend(objc_allocWithZone((Class)ICSetQuickNoteActivity), "init");
  if (*(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v3 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v8[4] = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v9 = v3;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1107296256;
    v8[2] = sub_10023ABC8;
    v8[3] = &unk_10056C6C8;
    v4 = _Block_copy(v8);
    v5 = v9;
    swift_retain(v3);
    *(_QWORD *)&v2 = swift_release(v5).n128_u64[0];
  }
  else
  {
    v4 = 0;
  }
  v6 = objc_msgSend(v1, "actionWithCompletion:", v4, v2);

  _Block_release(v4);
  return v6;
}

id sub_1003A8B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  id v4;
  objc_class *v5;
  char *v6;
  id v7;
  id v8;
  double v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v13;
  _QWORD v15[5];
  uint64_t v16;
  objc_super v17;

  if (!ICDebugModeEnabled(a1, a2))
    return 0;
  v3 = *(void **)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_note);
  if (!v3)
    return 0;
  v4 = v3;
  if (!objc_msgSend(v4, "isInICloudAccount"))
  {

    return 0;
  }
  v5 = (objc_class *)type metadata accessor for SimulateQuotaExceededActivity();
  v6 = (char *)objc_allocWithZone(v5);
  *(_QWORD *)&v6[OBJC_IVAR___ICSimulateQuotaExceededActivity_note] = v4;
  v17.receiver = v6;
  v17.super_class = v5;
  v7 = v4;
  v8 = objc_msgSendSuper2(&v17, "init");
  if (*(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion))
  {
    v10 = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8);
    v15[4] = *(_QWORD *)(v2 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
    v16 = v10;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10023ABC8;
    v15[3] = &unk_10056C6A0;
    v11 = _Block_copy(v15);
    v12 = v16;
    swift_retain(v10);
    *(_QWORD *)&v9 = swift_release(v12).n128_u64[0];
  }
  else
  {
    v11 = 0;
  }
  v13 = objc_msgSend(v8, "actionWithCompletion:", v11, v9);

  _Block_release(v11);
  return v13;
}

id sub_1003A8CAC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for NoteEditorActionMenu();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NoteEditorActionMenu()
{
  return objc_opt_self(ICNoteEditorActionMenu);
}

uint64_t sub_1003A8D88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion);
  sub_100166B74(v1, *(_QWORD *)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_completion + 8));
  return v1;
}

uint64_t sub_1003A8DC4()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController);
}

void *sub_1003A8DD4()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem);
  v2 = v1;
  return v1;
}

uint64_t sub_1003A8E08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void *sub_1003A8E2C()
{
  uint64_t v0;

  return sub_1003A859C(*(_QWORD *)(v0 + 16), (SEL *)&selRef_noteEditorActionMenuShouldShowHandwritingDebug_);
}

void sub_1003A8E4C()
{
  uint64_t v0;

  sub_1003A78C8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1003A8E54()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

id sub_1003A8E78()
{
  uint64_t v0;

  return sub_1003A725C(v0);
}

id sub_1003A8E80(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = (void *)v1(v3);
  swift_release(v2);
  return v4;
}

void *sub_1003A8EB8()
{
  uint64_t v0;

  return sub_1003A859C(*(_QWORD *)(v0 + 16), (SEL *)&selRef_noteEditorActionMenuShouldFindInNote_);
}

void *sub_1003A8ED8()
{
  uint64_t v0;

  return sub_1003A859C(*(_QWORD *)(v0 + 16), (SEL *)&selRef_noteEditorActionMenuShouldScanDocuments_);
}

id sub_1003A8EF8(void *a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  char *v28;
  objc_super v35;

  v11 = OBJC_IVAR___ICNoteEditorActionMenu_note;
  *(_QWORD *)&v8[OBJC_IVAR___ICNoteEditorActionMenu_note] = 0;
  v12 = OBJC_IVAR___ICNoteEditorActionMenu_invitation;
  *(_QWORD *)&v8[OBJC_IVAR___ICNoteEditorActionMenu_invitation] = 0;
  v13 = OBJC_IVAR___ICNoteEditorActionMenu_isMathEnabled;
  v14 = v8;
  v8[v13] = ICInternalSettingsIsMathEnabled();
  v28 = &v14[OBJC_IVAR___ICNoteEditorActionMenu_delegate];
  swift_unknownObjectWeakInit(&v14[OBJC_IVAR___ICNoteEditorActionMenu_delegate], 0);
  v15 = (uint64_t *)&v14[OBJC_IVAR___ICNoteEditorActionMenu_completion];
  *v15 = 0;
  v15[1] = 0;
  v16 = &v14[OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController];
  swift_unknownObjectWeakInit(&v14[OBJC_IVAR___ICNoteEditorActionMenu_presentingViewController], 0);
  v17 = OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem;
  *(_QWORD *)&v14[OBJC_IVAR___ICNoteEditorActionMenu_presentingBarButtonItem] = 0;
  v18 = *(void **)&v8[v11];
  *(_QWORD *)&v8[v11] = a1;
  v19 = a1;

  v20 = *(void **)&v8[v12];
  *(_QWORD *)&v8[v12] = a2;
  v21 = a2;

  swift_unknownObjectWeakAssign(v16, a3);
  v22 = *(void **)&v14[v17];
  *(_QWORD *)&v14[v17] = a4;
  v23 = a4;

  *(_QWORD *)&v14[OBJC_IVAR___ICNoteEditorActionMenu_viewControllerManager] = a5;
  swift_unknownObjectWeakAssign(v28, a6);
  v24 = *v15;
  v25 = v15[1];
  *v15 = a7;
  v15[1] = a8;
  v26 = a5;
  sub_100166B74(a7, a8);
  sub_100012C50(v24, v25);

  v35.receiver = v14;
  v35.super_class = (Class)type metadata accessor for NoteEditorActionMenu();
  return objc_msgSendSuper2(&v35, "init");
}

uint64_t sub_1003A9064()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_1003A9088()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DB960;
  if (!qword_1005DB960)
  {
    v1 = type metadata accessor for NoteEditorActionMenu();
    result = swift_getWitnessTable(&unk_100466040, v1);
    atomic_store(result, (unint64_t *)&qword_1005DB960);
  }
  return result;
}

uint64_t FolderEntity.init(for:in:)(uint64_t a1, void *a2, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  id v8;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v6 = type metadata accessor for FolderEntity(0);
  v3[5] = v6;
  v3[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a2;
  v8 = a3;
  return swift_task_switch(sub_1003A9238, 0, 0);
}

uint64_t sub_1003A9238()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_10056CD10, 32, 7);
  v0[7] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v2;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[8] = v7;
  *v7 = v0;
  v7[1] = sub_1003A92D0;
  return NSManagedObjectContext.perform<A>(_:)(v0[6], sub_10013B158, v3, v0[5]);
}

uint64_t sub_1003A92D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 64);
  *(_QWORD *)(*v1 + 72) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1002726C4;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 56));
    v4 = sub_1003A933C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003A933C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 48);
  v3 = *(void **)(v0 + 24);
  v2 = *(void **)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);

  sub_1002353B8(v1, v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static FolderEntity.managedObjectID(for:in:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005DB980 + dword_1005DB980);
  v5 = (_QWORD *)swift_task_alloc(unk_1005DB984);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100158D18;
  return v7(a1, a2);
}

void FolderEntity.init<A>(_:)(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v5;
  id v6;
  int *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  ICFolderObject<>.entityIdentifier.getter(a2);
  v5 = objc_msgSend(a1, "objectID");
  v6 = objc_msgSend(v5, "URIRepresentation");

  v7 = (int *)type metadata accessor for FolderEntity(0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v6);

  v8 = objc_msgSend(a1, "localizedTitle");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = (uint64_t *)(a3 + v7[6]);
  *v12 = v9;
  v12[1] = v11;
  v13 = objc_msgSend(a1, "account");
  v14 = objc_msgSend(v13, "localizedName");

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xE000000000000000;
  }
  v18 = (uint64_t *)(a3 + v7[7]);
  *v18 = v15;
  v18[1] = v17;
  v19 = objc_opt_self(ICFolder);
  v20 = swift_dynamicCastObjCClass(a1, v19);
  if (v20)
  {
    v21 = (void *)v20;
    v22 = a1;
    *(_BYTE *)(a3 + v7[9]) = objc_msgSend(v21, "folderType") == 2;
    LOBYTE(v21) = objc_msgSend(v21, "isSharedViaICloud");

    *(_BYTE *)(a3 + v7[8]) = (_BYTE)v21;
  }
  else
  {

    *(_BYTE *)(a3 + v7[9]) = 0;
    *(_BYTE *)(a3 + v7[8]) = 0;
  }
}

uint64_t sub_1003A95C0()
{
  uint64_t result;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  char v5;

  result = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  static FolderEntity.defaultQuery = result;
  *(_QWORD *)algn_100601EE8 = v1;
  byte_100601EF0 = v2 & 1;
  byte_100601EF1 = v3 & 1;
  byte_100601EF2 = v4 & 1;
  byte_100601EF3 = v5 & 1;
  return result;
}

uint64_t *FolderEntity.defaultQuery.unsafeMutableAddressor()
{
  if (qword_1005CED90 != -1)
    swift_once(&qword_1005CED90, sub_1003A95C0);
  return &static FolderEntity.defaultQuery;
}

uint64_t static FolderEntity.defaultQuery.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (qword_1005CED90 != -1)
    swift_once(&qword_1005CED90, sub_1003A95C0);
  v0 = static FolderEntity.defaultQuery;
  v1 = *(_QWORD *)algn_100601EE8;
  swift_retain(static FolderEntity.defaultQuery);
  swift_retain(v1);
  return v0;
}

uint64_t sub_1003A96F0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static FolderEntity.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static FolderEntity.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x7265646C6F46, 0xE600000000000000);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "App entity name", 15, 2);
  LocalizedStringResource.init(stringLiteral:)(0x6C6F6620646C6C25, 0xEC00000073726564);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v2, 0, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t FolderEntity.typeDisplayRepresentation.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CED98 != -1)
    swift_once(&qword_1005CED98, sub_1003A96F0);
  v0 = type metadata accessor for TypeDisplayRepresentation(0);
  return sub_10012A0B0(v0, (uint64_t)static FolderEntity.typeDisplayRepresentation);
}

uint64_t static FolderEntity.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CED98 != -1)
    swift_once(&qword_1005CED98, sub_1003A96F0);
  v2 = type metadata accessor for TypeDisplayRepresentation(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static FolderEntity.typeDisplayRepresentation);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t FolderEntity.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FolderID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t FolderEntity.id.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FolderID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t FolderEntity.managedObjectURI.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FolderEntity(0) + 20);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t FolderEntity.managedObjectURI.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for FolderEntity(0) + 20);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*FolderEntity.managedObjectURI.modify())()
{
  type metadata accessor for FolderEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t FolderEntity.title.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FolderEntity(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void FolderEntity.title.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FolderEntity(0) + 24));
  swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
}

uint64_t (*FolderEntity.title.modify())()
{
  type metadata accessor for FolderEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t FolderEntity.accountTitle.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FolderEntity(0) + 28));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void FolderEntity.accountTitle.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for FolderEntity(0) + 28));
  swift_bridgeObjectRelease(v5[1]);
  *v5 = a1;
  v5[1] = a2;
}

uint64_t (*FolderEntity.accountTitle.modify())()
{
  type metadata accessor for FolderEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t FolderEntity.isSharedFolder.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FolderEntity(0) + 32));
}

uint64_t FolderEntity.isSharedFolder.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FolderEntity(0);
  *(_BYTE *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*FolderEntity.isSharedFolder.modify())()
{
  type metadata accessor for FolderEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

uint64_t FolderEntity.isSmartFolder.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for FolderEntity(0) + 36));
}

uint64_t FolderEntity.isSmartFolder.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for FolderEntity(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*FolderEntity.isSmartFolder.modify())()
{
  type metadata accessor for FolderEntity(0);
  return ICCloudSyncingObject.MoveAction.Types.rawValue.getter;
}

void FolderEntity.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for FolderID(0);
  v5 = sub_100019C6C(&qword_1005D0570, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v5);
  v6 = (int *)type metadata accessor for FolderEntity(0);
  v7 = type metadata accessor for URL(0);
  v8 = sub_100019C6C((unint64_t *)&unk_1005CF700, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  v9 = (uint64_t *)(v1 + v6[6]);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease(v11);
  v12 = (uint64_t *)(v2 + v6[7]);
  v13 = *v12;
  v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(a1, v13, v14);
  swift_bridgeObjectRelease(v14);
  Hasher._combine(_:)(*(_BYTE *)(v2 + v6[8]));
  Hasher._combine(_:)(*(_BYTE *)(v2 + v6[9]));
}

Swift::Int FolderEntity.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  FolderEntity.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1003A9EA4(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  FolderEntity.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1003A9EDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;

  if (qword_1005CED90 != -1)
    swift_once(&qword_1005CED90, sub_1003A95C0);
  v2 = static FolderEntity.defaultQuery;
  v3 = *(_QWORD *)algn_100601EE8;
  v4 = byte_100601EF0;
  v5 = byte_100601EF1;
  v6 = byte_100601EF2;
  v7 = byte_100601EF3;
  *(_QWORD *)a1 = static FolderEntity.defaultQuery;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 17) = v5;
  *(_BYTE *)(a1 + 18) = v6;
  *(_BYTE *)(a1 + 19) = v7;
  swift_retain(v2);
  return swift_retain(v3);
}

uint64_t sub_1003A9F58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C((unint64_t *)&qword_1005D7870, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
  return static AppEntity.defaultResolverSpecification.getter(a1, v2);
}

unint64_t FolderEntity.debugDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  void *object;
  Swift::String v4;

  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(0xE000000000000000);
  v0 = type metadata accessor for FolderID(0);
  v1 = sub_100019C6C(&qword_1005D0B10, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0xD000000000000011;
}

uint64_t FolderEntity.displayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  int v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v34[2];

  v2 = v1;
  v4 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v7);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)v34 - v18;
  v20 = type metadata accessor for FolderEntity(0);
  v21 = v20;
  if (*(_BYTE *)(v2 + *(int *)(v20 + 32)) == 1)
  {
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v22._countAndFlagsBits = 0;
    v22._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v22);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v2 + *(int *)(v21 + 24)));
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v23);
    LocalizedStringResource.init(stringInterpolation:)(v19);
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v24._countAndFlagsBits = 0;
    v24._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v24);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v2 + *(int *)(v21 + 28)));
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v25);
    LocalizedStringResource.init(stringInterpolation:)(v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(0xD000000000000018, 0x800000010048C3D0, 0, 0);
  }
  else
  {
    v34[1] = a1;
    v26 = *(unsigned __int8 *)(v2 + *(int *)(v20 + 36));
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v27);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v2 + *(int *)(v21 + 24)));
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v28);
    LocalizedStringResource.init(stringInterpolation:)(v19);
    String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
    v29._countAndFlagsBits = 0;
    v29._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v29);
    String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(*(Swift::String *)(v2 + *(int *)(v21 + 28)));
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v30);
    LocalizedStringResource.init(stringInterpolation:)(v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    if (v26 == 1)
    {
      v31 = 0x7061687372616567;
      v32 = 0xE900000000000065;
    }
    else
    {
      v31 = 0x7265646C6F66;
      v32 = 0xE600000000000000;
    }
    DisplayRepresentation.Image.init(systemName:tintColor:symbolConfiguration:)(v31, v32, 0, 0);
  }
  return DisplayRepresentation.init(title:subtitle:image:)(v13, v9, v6);
}

uint64_t sub_1003AA3AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100019C6C(&qword_1005DB9E8, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
  return InstanceDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

uint64_t FolderEntity.init(for:in:includeContents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_1003AA418, 0, 0);
}

uint64_t sub_1003AA418()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_10056CD38, 32, 7);
  v0[5] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v1;
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[6] = v7;
  v8 = type metadata accessor for FolderEntity(0);
  *v7 = v0;
  v7[1] = sub_1002727E0;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_1003ABE40, v3, v8);
}

uint64_t type metadata accessor for FolderEntity(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DBAB8;
  if (!qword_1005DBAB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FolderEntity);
  return result;
}

void sub_1003AA4F8(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  __objc2_prot *v11;

  v10 = 0;
  v4 = objc_msgSend(a1, "existingObjectWithID:error:", a2, &v10);
  v5 = v10;
  if (v4)
  {
    v11 = &OBJC_PROTOCOL___ICFolderObject;
    v6 = (void *)swift_dynamicCastObjCProtocolUnconditional(v4, 1, &v11, 0, 0, 0);
    v7 = v5;
    sub_1003DCD14(v6, a3);
  }
  else
  {
    v8 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v9);
  }
}

uint64_t sub_1003AA5DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t FolderEntity.init(for:in:includeContents:noteContext:)(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v8;
  id v9;
  id v10;

  v5[4] = a3;
  v5[5] = a5;
  v5[2] = a1;
  v5[3] = a2;
  v8 = type metadata accessor for FolderEntity(0);
  v5[6] = v8;
  v5[7] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2;
  v10 = a3;
  return swift_task_switch(sub_1003AA678, 0, 0);
}

uint64_t sub_1003AA678()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_10056CD60, 32, 7);
  v0[8] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v2;
  v6 = v1;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[9] = v7;
  *v7 = v0;
  v7[1] = sub_1003AA710;
  return NSManagedObjectContext.perform<A>(_:)(v0[7], sub_1003ABE40, v3, v0[6]);
}

uint64_t sub_1003AA710()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100272CB8;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_1003AA77C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003AA77C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(void **)(v0 + 32);
  v2 = *(void **)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = *(void **)(v0 + 24);

  sub_1002353B8(v1, v4);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003AA7EC(void *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  NSString v7;
  id v8;
  id v9;

  FolderID.managedIdentifier.getter();
  v5 = v4;
  v6 = a1;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v8 = objc_msgSend((id)objc_opt_self(ICFolder), "folderWithIdentifier:context:", v7, v6);

  if (v8)
  {
    v9 = objc_msgSend(v8, "objectID");

  }
  else
  {
    v9 = 0;
  }
  *a2 = v9;
}

void sub_1003AA8B8(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  id v7;
  id v8;
  uint64_t v9;

  FolderID.managedIdentifier.getter();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(a1, "legacyFolderWithIdentifier:", v6);

  if (v7)
  {
    v8 = objc_msgSend(v7, "objectID");
    swift_unknownObjectRelease(v7, v9);
  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
}

uint64_t sub_1003AA964(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1005DB974);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100145358;
  return FolderEntity.init(for:in:)(a1, a2, a3);
}

uint64_t sub_1003AA9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[4] = a3;
  v5[5] = a5;
  v5[2] = a1;
  v5[3] = a2;
  return swift_task_switch(sub_1003AA9E8, 0, 0);
}

uint64_t sub_1003AA9E8()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  _QWORD *v7;

  v2 = (void *)v0[3];
  v1 = (void *)v0[4];
  v3 = swift_allocObject(&unk_10056CD88, 32, 7);
  v0[6] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v5 = v1;
  v6 = v2;
  v7 = (_QWORD *)swift_task_alloc(v4);
  v0[7] = v7;
  *v7 = v0;
  v7[1] = sub_1002730F4;
  return NSManagedObjectContext.perform<A>(_:)(v0[2], sub_1003ABE40, v3, v0[5]);
}

uint64_t sub_1003AAA80(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v10;

  v10 = (_QWORD *)swift_task_alloc(dword_1005DB99C);
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = sub_100130768;
  return FolderEntity.init(for:in:includeContents:noteContext:)(a1, a2, a3, 0, a5);
}

uint64_t sub_1003AAAF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t, uint64_t);

  v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1005DB980 + dword_1005DB980);
  v5 = (_QWORD *)swift_task_alloc(unk_1005DB984);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100159034;
  return v7(a1, a2);
}

uint64_t _s11MobileNotes12FolderEntityV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  char v19;

  if ((static FolderID.== infix(_:_:)(a1, a2) & 1) == 0
    || (v4 = (int *)type metadata accessor for FolderEntity(0),
        (static URL.== infix(_:_:)(a1 + v4[5], a2 + v4[5]) & 1) == 0))
  {
LABEL_14:
    v12 = 0;
    return v12 & 1;
  }
  v5 = v4[6];
  v6 = *(_QWORD *)(a1 + v5);
  v7 = *(_QWORD *)(a1 + v5 + 8);
  v8 = (_QWORD *)(a2 + v5);
  v9 = v8[1];
  v10 = v6 == *v8 && v7 == v9;
  if (v10 || (v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, *v8, v9, 0), v12 = 0, (v11 & 1) != 0))
  {
    v13 = v4[7];
    v14 = *(_QWORD *)(a1 + v13);
    v15 = *(_QWORD *)(a1 + v13 + 8);
    v16 = (_QWORD *)(a2 + v13);
    v17 = v16[1];
    v18 = v14 == *v16 && v15 == v17;
    if (v18 || (v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, *v16, v17, 0), v12 = 0, (v19 & 1) != 0))
    {
      if (*(unsigned __int8 *)(a1 + v4[8]) == *(unsigned __int8 *)(a2 + v4[8]))
      {
        v12 = *(_BYTE *)(a1 + v4[9]) ^ *(_BYTE *)(a2 + v4[9]) ^ 1;
        return v12 & 1;
      }
      goto LABEL_14;
    }
  }
  return v12 & 1;
}

uint64_t sub_1003AAC4C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[5] = a1;
  v2[6] = a2;
  v3 = type metadata accessor for FolderID(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[9] = v5;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v6);
  v2[11] = swift_task_alloc(v6);
  v7 = type metadata accessor for Logger(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005D1080);
  v2[15] = v9;
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AAD10, 0, 0);
}

uint64_t sub_1003AAD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(_QWORD *@<X8>);
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  _QWORD *v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v1 = *(_QWORD *)(v0 + 128);
  FolderID.contextType.getter();
  v2 = type metadata accessor for ManagedEntityContextType(0);
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) != 1)
  {
    v28 = (*(uint64_t (**)(_QWORD, uint64_t))(v3 + 88))(*(_QWORD *)(v0 + 128), v2);
    if (v28 == enum case for ManagedEntityContextType.modern(_:))
    {
      v30 = *(_QWORD *)(v0 + 72);
      v29 = *(_QWORD *)(v0 + 80);
      v31 = *(_QWORD *)(v0 + 56);
      v32 = *(_QWORD *)(v0 + 64);
      v33 = *(_QWORD *)(v0 + 40);
      v34 = objc_msgSend(*(id *)(v0 + 48), "modernManagedObjectContext");
      *(_QWORD *)(v0 + 136) = v34;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 16))(v29, v33, v31);
      v35 = *(unsigned __int8 *)(v32 + 80);
      v36 = (v35 + 16) & ~v35;
      v37 = (v30 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
      v38 = swift_allocObject(&unk_10056CDD8, v37 + 8, v35 | 7);
      *(_QWORD *)(v0 + 144) = v38;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v38 + v36, v29, v31);
      *(_QWORD *)(v38 + v37) = v34;
      v39 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v34;
      v40 = (_QWORD *)swift_task_alloc(v39);
      *(_QWORD *)(v0 + 152) = v40;
      v41 = sub_100012E18(&qword_1005D1230);
      *v40 = v0;
      v40[1] = sub_1003AB1F8;
      v42 = sub_1003ABDE4;
      v43 = v0 + 24;
      v44 = v38;
    }
    else
    {
      if (v28 != enum case for ManagedEntityContextType.html(_:))
        return _diagnoseUnexpectedEnumCase<A>(type:)(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 120));
      v45 = objc_msgSend(*(id *)(v0 + 48), "htmlManagedObjectContext");
      *(_QWORD *)(v0 + 160) = v45;
      if (!v45)
        goto LABEL_13;
      v46 = v45;
      v48 = *(_QWORD *)(v0 + 72);
      v47 = *(_QWORD *)(v0 + 80);
      v49 = *(_QWORD *)(v0 + 56);
      v50 = *(_QWORD *)(v0 + 64);
      v51 = *(void **)(v0 + 48);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 16))(v47, *(_QWORD *)(v0 + 40), v49);
      v52 = *(unsigned __int8 *)(v50 + 80);
      v53 = (v52 + 24) & ~v52;
      v54 = swift_allocObject(&unk_10056CDB0, v53 + v48, v52 | 7);
      *(_QWORD *)(v0 + 168) = v54;
      *(_QWORD *)(v54 + 16) = v51;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 32))(v54 + v53, v47, v49);
      v55 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
      v46;
      v56 = v51;
      v57 = (_QWORD *)swift_task_alloc(v55);
      *(_QWORD *)(v0 + 176) = v57;
      v41 = sub_100012E18(&qword_1005D1230);
      *v57 = v0;
      v57[1] = sub_1003AB2BC;
      v42 = sub_1003ABD24;
      v43 = v0 + 16;
      v44 = v54;
    }
    return NSManagedObjectContext.perform<A>(_:)(v43, v42, v44, v41);
  }
  v4 = *(void **)(v0 + 48);
  FolderID.managedIdentifier.getter();
  v6 = v5;
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v8 = objc_msgSend(v4, "managedObjectIDForURIString:", v7);

  if (!v8)
  {
    v9 = *(_QWORD *)(v0 + 88);
    v10 = *(_QWORD *)(v0 + 56);
    v11 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 40);
    static Logger.link.getter();
    v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, v12, v10);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    v16 = os_log_type_enabled(v14, v15);
    v18 = *(_QWORD *)(v0 + 104);
    v17 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 88);
    v20 = *(_QWORD *)(v0 + 96);
    v21 = *(_QWORD *)(v0 + 56);
    v22 = *(_QWORD *)(v0 + 64);
    if (v16)
    {
      v64 = *(_QWORD *)(v0 + 112);
      v63 = *(_QWORD *)(v0 + 96);
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v62 = swift_slowAlloc(32, -1);
      v65 = v62;
      *(_DWORD *)v23 = 136315138;
      v24 = sub_100019C6C(&qword_1005D0B10, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v21, v24);
      v27 = v26;
      *(_QWORD *)(v0 + 32) = sub_1003A4190(v25, v26, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v23 + 4);
      swift_bridgeObjectRelease(v27);
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "FolderEntity: Unable to resolve managed object ID for entity ID: %s", v23, 0xCu);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v64, v63);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v22 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 56));

      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v20);
    }
LABEL_13:
    v8 = 0;
  }
  v59 = *(_QWORD *)(v0 + 112);
  v61 = *(_QWORD *)(v0 + 80);
  v60 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(id))(v0 + 8))(v8);
}

uint64_t sub_1003AB1F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release(v1);
  return swift_task_switch(sub_1003AB254, 0, 0);
}

uint64_t sub_1003AB254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1003AB2BC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  v2 = *(void **)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release(v1);

  return swift_task_switch(sub_1003AB320, 0, 0);
}

uint64_t sub_1003AB320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1003AB388()
{
  return sub_100019C6C((unint64_t *)&unk_1005DB9A0, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB3B4()
{
  return sub_100019C6C((unint64_t *)&unk_1005D7310, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB3E0()
{
  return sub_100019C6C(&qword_1005DB9B0, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB40C()
{
  return sub_100019C6C(&qword_1005DB9B8, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB438()
{
  return sub_100019C6C(&qword_1005D02D0, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
}

uint64_t sub_1003AB464()
{
  return sub_100019C6C(&qword_1005DB9C0, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB490()
{
  return sub_100019C6C((unint64_t *)&unk_1005DB9C8, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB4BC()
{
  return sub_100019C6C((unint64_t *)&unk_1005D6AE0, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB4E8()
{
  return sub_100019C6C(&qword_1005D0570, (uint64_t (*)(uint64_t))&type metadata accessor for FolderID, (uint64_t)&protocol conformance descriptor for FolderID);
}

unint64_t sub_1003AB518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DB9D8;
  if (!qword_1005DB9D8)
  {
    v1 = sub_10001537C(&qword_1005DB9E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyResolverSpecification<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1005DB9D8);
  }
  return result;
}

uint64_t sub_1003AB564()
{
  return sub_100019C6C(&qword_1005DB9E8, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB590()
{
  return sub_100019C6C(&qword_1005DB9F0, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
}

uint64_t sub_1003AB5BC(uint64_t a1)
{
  uint64_t result;

  result = sub_100019C6C((unint64_t *)&qword_1005D7870, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for FolderEntity(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = type metadata accessor for FolderID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = a3[6];
    v13 = a3[7];
    v14 = (_QWORD *)((char *)a1 + v12);
    v15 = (_QWORD *)((char *)a2 + v12);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = (_QWORD *)((char *)a1 + v13);
    v18 = (_QWORD *)((char *)a2 + v13);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    v20 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v20) = *((_BYTE *)a2 + v20);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
  }
  return a1;
}

uint64_t destroy for FolderEntity(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for FolderID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + a2[5];
  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t initializeWithCopy for FolderEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for FolderID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = a3[6];
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v11);
  v14 = (_QWORD *)(a2 + v11);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = (_QWORD *)(a1 + v12);
  v17 = (_QWORD *)(a2 + v12);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  v19 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t assignWithCopy for FolderEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for FolderID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  *v12 = *v13;
  v14 = v13[1];
  v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a3[7];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  *v17 = *v18;
  v19 = v18[1];
  v20 = v17[1];
  v17[1] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t initializeWithTake for FolderEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for FolderID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  v12 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for FolderEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for FolderID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = a3[6];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (uint64_t *)(a2 + v11);
  v15 = *v13;
  v14 = v13[1];
  v16 = v12[1];
  *v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  v22 = v18[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  v23 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v23) = *(_BYTE *)(a2 + v23);
  return a1;
}

uint64_t getEnumTagSinglePayload for FolderEntity(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003ABAB4);
}

uint64_t sub_1003ABAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for FolderID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for FolderEntity(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003ABB6C);
}

uint64_t sub_1003ABB6C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for FolderID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1003ABC14(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[6];

  result = type metadata accessor for FolderID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for URL(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_100466360;
      v5[3] = &unk_100466360;
      v5[4] = &unk_100466378;
      v5[5] = &unk_100466378;
      swift_initStructMetadata(a1, 256, 6, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1003ABCB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for FolderID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1003ABD24(_QWORD *a1@<X8>)
{
  uint64_t v1;

  type metadata accessor for FolderID(0);
  sub_1003AA8B8(*(void **)(v1 + 16), a1);
}

uint64_t sub_1003ABD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for FolderID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1003ABDE4(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FolderID(0);
  sub_1003AA7EC(*(void **)(v1+ ((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64)+ ((*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80))+ 7) & 0xFFFFFFFFFFFFF8)), a1);
}

void sub_1003ABE40(uint64_t a1@<X8>)
{
  sub_10013B158(a1);
}

uint64_t sub_1003ABE60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100012DDC(a1, &qword_1005D4680);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      v12 = swift_unknownObjectRetain(v9);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10, v12);
      v15 = v14;
      swift_unknownObjectRelease(v9, v14);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = type metadata accessor for NoteEntity(0);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, a2, a3);
}

uint64_t sub_1003ABF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100012DDC(a1, &qword_1005D4680);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      v12 = swift_unknownObjectRetain(v9);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10, v12);
      v15 = v14;
      swift_unknownObjectRelease(v9, v14);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = sub_100012E18(&qword_1005D22E0);
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, v17, a2, a3);
}

uint64_t sub_1003AC0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100012DDC(a1, &qword_1005D4680);
    v9 = 7168;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
    {
LABEL_6:
      v17 = 0;
      return swift_task_create(v9, v17, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v9 = v18 | 0x1C00;
    v10 = *(_QWORD *)(a3 + 16);
    if (!v10)
      goto LABEL_6;
  }
  v11 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v10);
  v13 = swift_unknownObjectRetain(v10);
  v14 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11, v13);
  v16 = v15;
  swift_unknownObjectRelease(v10, v15);
  if (!(v16 | v14))
    goto LABEL_6;
  v20[0] = 0;
  v20[1] = 0;
  v17 = v20;
  v20[2] = v14;
  v20[3] = v16;
  return swift_task_create(v9, v17, (char *)&type metadata for () + 8, a2, a3);
}

char *sub_1003AC1F8()
{
  id v0;
  char *result;

  v0 = objc_allocWithZone((Class)type metadata accessor for GroupActivityDebugStatusController(0));
  result = sub_1003AC304();
  qword_100601F10 = (uint64_t)result;
  return result;
}

uint64_t sub_1003AC294(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1004664F0, a2);
  v4 = swift_getKeyPath(&unk_100466518, v3);
  static Published.subscript.getter(&v6);
  swift_release(v4);
  swift_release(KeyPath);
  return v6;
}

char *sub_1003AC304()
{
  char *v0;
  char *v1;
  objc_class *ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  objc_super v22;
  unint64_t v23;

  v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType(v0);
  v3 = sub_100012E18(&qword_1005D4680);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18(&qword_1005DBB68);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v1[OBJC_IVAR___ICGroupActivityDebugStatusController_observeNotificationsTask] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities] = _swiftEmptyArrayStorage;
  v10 = &v1[OBJC_IVAR___ICGroupActivityDebugStatusController__states];
  v11 = v1;
  v23 = sub_100135A6C((uint64_t)_swiftEmptyArrayStorage);
  v12 = sub_100012E18(&qword_1005DBB58);
  Published.init(initialValue:)(&v23, v12);
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v9, v6);

  v22.receiver = v11;
  v22.super_class = ObjectType;
  v13 = objc_msgSendSuper2(&v22, "init");
  v14 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v5, 1, 1, v14);
  type metadata accessor for MainActor(0);
  v15 = (char *)v13;
  v16 = static MainActor.shared.getter(v15);
  v17 = (_QWORD *)swift_allocObject(&unk_10056D070, 40, 7);
  v17[2] = v16;
  v17[3] = &protocol witness table for MainActor;
  v17[4] = v15;
  v18 = sub_1002EDE48((uint64_t)v5, (uint64_t)&unk_1005DBB78, (uint64_t)v17);

  v19 = *(_QWORD *)&v15[OBJC_IVAR___ICGroupActivityDebugStatusController_observeNotificationsTask];
  *(_QWORD *)&v15[OBJC_IVAR___ICGroupActivityDebugStatusController_observeNotificationsTask] = v18;
  swift_release(v19);
  return v15;
}

uint64_t sub_1003AC4F0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for MainActor(0);
  v0[2] = v1;
  v0[3] = static MainActor.shared.getter(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_1005DBB84);
  v0[4] = v2;
  *v2 = v0;
  v2[1] = sub_100298744;
  return sub_1003AC554();
}

uint64_t sub_1003AC554()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[20] = v0;
  v2 = type metadata accessor for Notification(0);
  v1[21] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[22] = v3;
  v1[23] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18(qword_1005D2FB8);
  v1[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NSNotificationCenter.Notifications.Iterator(0);
  v1[25] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[26] = v6;
  v1[27] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003AC600, 0, 0);
}

uint64_t sub_1003AC600()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  if (qword_1005CEBE0 != -1)
    swift_once(&qword_1005CEBE0, sub_1002A579C);
  NSNotificationCenter.notifications(named:object:)(qword_100601AC0, 0);

  NSNotificationCenter.Notifications.makeAsyncIterator()();
  v2 = sub_100019C6C((unint64_t *)&qword_1005DB1A0, (uint64_t (*)(uint64_t))&type metadata accessor for NSNotificationCenter.Notifications.Iterator, (uint64_t)&protocol conformance descriptor for NSNotificationCenter.Notifications.Iterator);
  v0[28] = v2;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[29] = v3;
  *v3 = v0;
  v3[1] = sub_1003AC6F8;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[24], v0[25], v2);
}

uint64_t sub_1003AC6F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 232));
  if (v0)
  {
    *(_QWORD *)(v2 + 240) = v0;
    v3 = sub_1003AC880;
  }
  else
  {
    v3 = sub_1003AC75C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003AC75C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 216);
    v5 = *(_QWORD *)(v0 + 184);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(v4, *(_QWORD *)(v0 + 200));
    swift_task_dealloc(v4);
    swift_task_dealloc(v1);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v7 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(v0 + 184), v1, v2);
  result = Notification.userInfo.getter(v7);
  *(_QWORD *)(v0 + 248) = result;
  if (result)
  {
    swift_bridgeObjectRetain(result);
    result = sub_1003AF340(v8);
    *(_QWORD *)(v0 + 256) = result;
    *(_QWORD *)(v0 + 264) = v9;
    *(_QWORD *)(v0 + 272) = v10;
    *(_QWORD *)(v0 + 280) = v11;
    if (v9)
    {
      v12 = type metadata accessor for MainActor(0);
      *(_QWORD *)(v0 + 288) = v12;
      *(_QWORD *)(v0 + 296) = static MainActor.shared.getter(v12);
      v14 = dispatch thunk of Actor.unownedExecutor.getter(v12, &protocol witness table for MainActor, v13);
      return swift_task_switch(sub_1003AC8E0, v14, v15);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003AC880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 152) = *(_QWORD *)(v0 + 240);
  v1 = sub_100012E18(&qword_1005D7A90);
  v2 = swift_dynamicCast(v1, v0 + 152, v1, &type metadata for Never, 7);
  return swift_willThrowTypedImpl(v2, &type metadata for Never, &protocol witness table for Never);
}

uint64_t sub_1003AC8E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 296));
  return swift_task_switch(sub_1003AC91C, 0, 0);
}

uint64_t sub_1003AC91C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 288);
  *(_QWORD *)(v1 + 304) = static MainActor.shared.getter(a1);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor, v3);
  return swift_task_switch(sub_1003AC97C, v4, v5);
}

uint64_t sub_1003AC97C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 304));
  return swift_task_switch(sub_1003AC9B8, 0, 0);
}

void sub_1003AC9B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v0 + 120) = 0xD000000000000015;
  v1 = *(_QWORD *)(v0 + 248);
  *(_QWORD *)(v0 + 128) = 0x8000000100485C90;
  AnyHashable.init<A>(_:)((_QWORD *)(v0 + 16), v0 + 120, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v2 = sub_100248ECC(v0 + 16), (v3 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(*(_QWORD *)(v0 + 248) + 56) + 32 * v2, v0 + 88);
  }
  else
  {
    *(_OWORD *)(v0 + 88) = 0u;
    *(_OWORD *)(v0 + 104) = 0u;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 248));
  if (*(_QWORD *)(v0 + 112))
  {
    v4 = *(_QWORD *)(v0 + 288);
    sub_10018550C(v0 + 16);
    sub_1000160B8((_OWORD *)(v0 + 88), (_OWORD *)(v0 + 56));
    v5 = swift_dynamicCast(v0 + 136, v0 + 56, (char *)&type metadata for Any + 8, &type metadata for RealtimeCollaborationController.GroupActivityState, 7);
    *(_QWORD *)(v0 + 312) = *(_QWORD *)(v0 + 136);
    *(_BYTE *)(v0 + 145) = *(_BYTE *)(v0 + 144);
    *(_QWORD *)(v0 + 320) = static MainActor.shared.getter(v5);
    v7 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor, v6);
    swift_task_switch(sub_1003ACB0C, v7, v8);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1003ACB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v6 = *(_BYTE *)(v0 + 145);
  swift_release(*(_QWORD *)(v0 + 320));
  sub_1003ACC80(v1, v6, v5, v4, v3, v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_1003ACB9C, 0, 0);
}

uint64_t sub_1003ACB9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 176);
  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 168);
  sub_100251F00(*(_QWORD *)(v0 + 312), *(_BYTE *)(v0 + 145));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 328) = v4;
  *v4 = v0;
  v4[1] = sub_1003ACC1C;
  return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224));
}

uint64_t sub_1003ACC1C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 328));
  if (v0)
  {
    *(_QWORD *)(v2 + 240) = v0;
    v3 = sub_1003AC880;
  }
  else
  {
    v3 = sub_1003AC75C;
  }
  return swift_task_switch(v3, 0, 0);
}

void sub_1003ACC80(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t *v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  char *v35;
  _QWORD v36[3];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[4];
  _BYTE v41[24];

  v7 = v6;
  v13 = sub_100012E18(&qword_1005D4680);
  __chkstk_darwin(v13);
  v36[2] = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  KeyPath = swift_getKeyPath(&unk_1004664F0, v15);
  v18 = swift_getKeyPath(&unk_100466518, v17);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a4);
  static Published.subscript.getter(v40);
  swift_release(v18);
  swift_release(KeyPath);
  v19 = v40[0];
  v20 = *(_QWORD *)(v40[0] + 16);
  v39 = a5;
  if (v20 && (v21 = sub_100248B7C(a3, a4, a5, a6), (v22 & 1) != 0))
  {
    v23 = *(_QWORD *)(v19 + 56) + 24 * v21;
    v24 = *(_QWORD *)v23;
    v25 = *(_QWORD *)(v23 + 16);
    v26 = *(_BYTE *)(v23 + 8);
    sub_10013ADF8(*(_QWORD *)v23, v26);
    v37 = v25;
    swift_retain(v25);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    v27 = v26;
    a5 = v39;
    sub_100251F00(v24, v27);
  }
  else
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(a4);
    v37 = 0;
  }
  v28 = (uint64_t *)(v7 + OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities);
  swift_beginAccess(v7 + OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities, v41, 0, 0);
  if ((sub_100263E8C(a3, a4, a5, a6, *v28) & 1) == 0)
  {
    v36[1] = v7;
    swift_beginAccess(v28, v40, 33, 0);
    v29 = (_QWORD *)*v28;
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
    *v28 = (uint64_t)v29;
    v31 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v29 = sub_10016B9C8(0, v29[2] + 1, 1, v29);
      *v28 = (uint64_t)v29;
    }
    v33 = v29[2];
    v32 = v29[3];
    if (v33 >= v32 >> 1)
    {
      v29 = sub_10016B9C8((_QWORD *)(v32 > 1), v33 + 1, 1, v29);
      *v28 = (uint64_t)v29;
    }
    v29[2] = v33 + 1;
    v34 = &v29[4 * v33];
    v34[4] = a3;
    v34[5] = a4;
    v34[6] = v39;
    v34[7] = a6;
    swift_endAccess(v40);
    a2 = v31;
  }
  v35 = (char *)&loc_1003ACEEC + 4 * byte_100466390[a2];
  v38 = a3;
  __asm { BR              X10 }
}

uint64_t sub_1003AD1DC()
{
  return type metadata accessor for GroupActivityDebugStatusController(0);
}

uint64_t type metadata accessor for GroupActivityDebugStatusController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DBB40;
  if (!qword_1005DBB40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for GroupActivityDebugStatusController);
  return result;
}

void sub_1003AD220(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1003AD2A4(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_1003AD2A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005DBB50)
  {
    v2 = sub_10001537C(&qword_1005DBB58);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005DBB50);
  }
}

double destroy for GroupActivityDebugStatusController.ActivityState(uint64_t a1)
{
  double result;

  sub_100251F00(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  *(_QWORD *)&result = swift_release(*(_QWORD *)(a1 + 16)).n128_u64[0];
  return result;
}

uint64_t _s11MobileNotes34GroupActivityDebugStatusControllerC13ActivityStateVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10013ADF8(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_retain(v6);
  return a1;
}

uint64_t assignWithCopy for GroupActivityDebugStatusController.ActivityState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_10013ADF8(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v4;
  v7 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v5;
  sub_100251F00(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for GroupActivityDebugStatusController.ActivityState(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *(_BYTE *)(a2 + 8);
  v5 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = v4;
  sub_100251F00(v5, v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupActivityDebugStatusController.ActivityState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GroupActivityDebugStatusController.ActivityState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupActivityDebugStatusController.ActivityState()
{
  return &type metadata for GroupActivityDebugStatusController.ActivityState;
}

uint64_t destroy for GroupActivityDebugStatusController.GroupActivityIdentifier(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for GroupActivityDebugStatusController.GroupActivityIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for GroupActivityDebugStatusController.GroupActivityIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for GroupActivityDebugStatusController.GroupActivityIdentifier(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for GroupActivityDebugStatusController.GroupActivityIdentifier()
{
  return &type metadata for GroupActivityDebugStatusController.GroupActivityIdentifier;
}

uint64_t sub_1003AD620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v20;

  KeyPath = swift_getKeyPath(&unk_1004664F0, a2);
  v10 = swift_getKeyPath(&unk_100466518, v9);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  static Published.subscript.getter(&v20);
  swift_release(KeyPath);
  swift_release(v10);
  v11 = v20;
  if (*(_QWORD *)(v20 + 16) && (v12 = sub_100248B7C(a1, a2, a3, a4), (v13 & 1) != 0))
  {
    v14 = *(_QWORD *)(v11 + 56) + 24 * v12;
    v15 = *(_QWORD *)v14;
    v16 = *(_QWORD *)(v14 + 16);
    v17 = *(_BYTE *)(v14 + 8);
    sub_10013ADF8(*(_QWORD *)v14, v17);
    swift_retain(v16);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v11);
    v18 = sub_1002A57D0(v15, v17);
    sub_100251F00(v15, v17);
    swift_release(v16);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(a4);
    return 0x6E776F6E6B6E55;
  }
  return v18;
}

uint64_t sub_1003AD784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  KeyPath = swift_getKeyPath(&unk_1004664F0, a2);
  v10 = swift_getKeyPath(&unk_100466518, v9);
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(a2);
  static Published.subscript.getter(&v18);
  swift_release(KeyPath);
  swift_release(v10);
  v11 = v18;
  if (*(_QWORD *)(v18 + 16))
  {
    v12 = sub_100248B7C(a1, a2, a3, a4);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(v11 + 56) + 24 * v12;
      v15 = *(unsigned __int8 *)(v14 + 8);
      v16 = *(_QWORD *)(v14 + 16);
      sub_10013ADF8(*(_QWORD *)v14, *(_BYTE *)(v14 + 8));
      swift_retain(v16);
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v11);
      __asm { BR              X9 }
    }
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(a4);
  return 0x6E776F6E6B6E55;
}

uint64_t sub_1003AD90C()
{
  uint64_t v0;

  return ((uint64_t (*)(void))((char *)sub_1003AD924 + 4 * byte_1004663A2[v0]))();
}

void sub_1003AD924()
{
  uint64_t v0;

  swift_release(v0);
  JUMPOUT(0x1003AD8F0);
}

uint64_t sub_1003ADA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v8[16] = a7;
  v8[17] = a8;
  v8[14] = a5;
  v8[15] = a6;
  v8[13] = a4;
  v9 = type metadata accessor for ContinuousClock(0);
  v8[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v8[19] = v10;
  v8[20] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for ContinuousClock.Instant(0);
  v8[21] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[22] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v8[23] = swift_task_alloc(v13);
  v8[24] = swift_task_alloc(v13);
  v14 = type metadata accessor for MainActor(0);
  v8[25] = static MainActor.shared.getter(v14);
  v16 = dispatch thunk of Actor.unownedExecutor.getter(v14, &protocol witness table for MainActor, v15);
  v8[26] = v16;
  v8[27] = v17;
  return swift_task_switch(sub_1003ADB40, v16, v17);
}

uint64_t sub_1003ADB40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  static ContinuousClock.Instant.now.getter();
  ContinuousClock.Instant.advanced(by:)(3000000000000000000, 0);
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 224) = v4;
  v5 = v4(v1, v2);
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 88) = 1;
  static Clock<>.continuous.getter(v5);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to static Task<>.sleep<A>(until:tolerance:clock:)[1]);
  *(_QWORD *)(v0 + 232) = v6;
  v7 = sub_100019C6C(&qword_1005DBB98, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  *v6 = v0;
  v6[1] = sub_1003ADC2C;
  return static Task<>.sleep<A>(until:tolerance:clock:)(*(_QWORD *)(v0 + 192), v0 + 72, *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144), v7);
}

uint64_t sub_1003ADC2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[28];
  if (v0)
  {
    v5 = v2[24];
    v6 = v2[21];
    (*(void (**)(_QWORD, _QWORD))(v2[19] + 8))(v2[20], v2[18]);
    v4(v5, v6);
    v7 = v2[26];
    v8 = v2[27];
    v9 = sub_1003AE004;
  }
  else
  {
    v10 = v2[24];
    v11 = v2[21];
    (*(void (**)(_QWORD, _QWORD))(v2[19] + 8))(v2[20], v2[18]);
    v4(v10, v11);
    v7 = v2[26];
    v8 = v2[27];
    v9 = sub_1003ADCE0;
  }
  return swift_task_switch(v9, v7, v8);
}

uint64_t sub_1003ADCE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 120);
  swift_release(*(_QWORD *)(v0 + 200));
  KeyPath = swift_getKeyPath(&unk_1004664F0, v3);
  v6 = swift_getKeyPath(&unk_100466518, v5);
  swift_bridgeObjectRetain(v1);
  swift_bridgeObjectRetain(v2);
  static Published.subscript.getter((_QWORD *)(v0 + 96));
  swift_release(KeyPath);
  swift_release(v6);
  v7 = *(_QWORD *)(v0 + 96);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = sub_100248B7C(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    v9 = *(_QWORD *)(v0 + 120);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(v7 + 56) + 24 * v8;
      v12 = *(unsigned __int8 *)(v11 + 8);
      v13 = *(_QWORD *)(v11 + 16);
      sub_10013ADF8(*(_QWORD *)v11, *(_BYTE *)(v11 + 8));
      swift_retain(v13);
      swift_bridgeObjectRelease(v1);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      __asm { BR              X9 }
    }
    swift_bridgeObjectRelease(v1);
    v15 = v9;
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(v1);
    v15 = v14;
  }
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRelease(v7);
  v16 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AE004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Int sub_1003AE060()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  v2 = v0[1];
  v4 = v0[2];
  v3 = v0[3];
  Hasher.init(_seed:)(v6, 0);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v3);
    String.hash(into:)(v6, v4, v3);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_1003AE108(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v6, v5);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_1003AE1A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v7, v5, v4);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_1003AE24C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1003AE258(uint64_t *a1, uint64_t *a2)
{
  return sub_1003AF208(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

unint64_t sub_1003AE278()
{
  unint64_t result;

  result = qword_1005DBB60;
  if (!qword_1005DBB60)
  {
    result = swift_getWitnessTable(&unk_100466418, &type metadata for GroupActivityDebugStatusController.GroupActivityIdentifier);
    atomic_store(result, (unint64_t *)&qword_1005DBB60);
  }
  return result;
}

uint64_t sub_1003AE2BC@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1004664F0, a1);
  v5 = swift_getKeyPath(&unk_100466518, v4);
  static Published.subscript.getter(&v7);
  swift_release(v5);
  result = swift_release(KeyPath);
  *a2 = v7;
  return result;
}

uint64_t sub_1003AE338(uint64_t *a1, void **a2)
{
  uint64_t v2;
  void *v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1004664F0, a2);
  v6 = swift_getKeyPath(&unk_100466518, v5);
  v8 = v2;
  swift_bridgeObjectRetain(v2);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

double sub_1003AE3AC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100248A00(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10024F854();
      v10 = v15;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    sub_10013B100((__int128 *)(*(_QWORD *)(v10 + 56) + 40 * v7), a2);
    sub_1003AE780(v7, v10);
    v13 = *v3;
    *v3 = v10;
    swift_bridgeObjectRelease(v13);
  }
  else
  {
    *(_QWORD *)(a2 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

double sub_1003AE4B0@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  __n128 v7;
  unint64_t v8;
  char v9;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  double result;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  v7 = swift_bridgeObjectRetain(*v3);
  v8 = sub_1002489FC(a1, v7);
  LOBYTE(a1) = v9;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v11 = *v3;
    v14 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10025006C();
      v11 = v14;
    }

    sub_1000160B8((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v8), a2);
    sub_1003AEA2C(v8, v11);
    v12 = *v3;
    *v3 = v11;
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1003AE594(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_100249354(a1, a2);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100250998();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_1003AEC1C(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1003AE670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = v4;
  v10 = *v5;
  swift_bridgeObjectRetain(*v5);
  v11 = sub_100248B7C(a1, a2, a3, a4);
  LOBYTE(a4) = v12;
  swift_bridgeObjectRelease(v10);
  if ((a4 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  v14 = *v5;
  v20 = *v5;
  *v5 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002514A4();
    v14 = v20;
  }
  v15 = *(_QWORD *)(v14 + 48) + 32 * v11;
  v16 = *(_QWORD *)(v15 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 24 * v11);
  sub_1003AEFD0(v11, v14);
  v18 = *v5;
  *v5 = v14;
  swift_bridgeObjectRelease(v18);
  return v17;
}

unint64_t sub_1003AE780(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 *v28;
  __int128 v29;
  __int128 v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, unint64_t, uint64_t);
  unint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v39 = (result + 1) & v11;
      v12 = *(_QWORD *)(v40 + 72);
      v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v38(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = *(_QWORD *)(a2 + 40);
        v19 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v4, v19);
        result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v7, v4);
        v13 = v17;
        v21 = v20 & v17;
        if (a1 >= (uint64_t)v39)
        {
          if (v21 >= v39 && a1 >= (uint64_t)v21)
          {
LABEL_16:
            v24 = *(_QWORD *)(a2 + 48);
            result = v24 + v15 * a1;
            v25 = v24 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v25 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v25);
LABEL_21:
              v13 = v17;
              v12 = v15;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront(result, v25);
              goto LABEL_21;
            }
            v26 = *(_QWORD *)(a2 + 56);
            v27 = v26 + 40 * a1;
            v28 = (__int128 *)(v26 + 40 * v10);
            if (a1 != v10 || (a1 = v10, v27 >= (unint64_t)v28 + 40))
            {
              v29 = *v28;
              v30 = v28[1];
              *(_QWORD *)(v27 + 32) = *((_QWORD *)v28 + 4);
              *(_OWORD *)v27 = v29;
              *(_OWORD *)(v27 + 16) = v30;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v21 >= v39 || a1 >= (uint64_t)v21)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v32 = *v31;
    v33 = (-1 << a1) - 1;
  }
  else
  {
    v31 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v33 = *v31;
    v32 = (-1 << a1) - 1;
  }
  *v31 = v33 & v32;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003AEA2C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::Int v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(void **)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;
        Hasher.init(_seed:)(v30, v10);
        v15 = v11;
        String.hash(into:)(v30, v12, v14);
        v16 = Hasher._finalize()();

        result = swift_bridgeObjectRelease(v14);
        v17 = v16 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v17 < v8)
            goto LABEL_5;
        }
        else if (v17 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v17)
        {
LABEL_11:
          v18 = *(_QWORD *)(a2 + 48);
          v19 = (_QWORD *)(v18 + 8 * v3);
          v20 = (_QWORD *)(v18 + 8 * v6);
          if (v3 != v6 || v19 >= v20 + 1)
            *v19 = *v20;
          v21 = *(_QWORD *)(a2 + 56);
          v22 = (_OWORD *)(v21 + 32 * v3);
          v23 = (_OWORD *)(v21 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= v23 + 2))
          {
            v9 = v23[1];
            *v22 = *v23;
            v22[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003AEC1C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003AEDF0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      while (1)
      {
        v9 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)(v27, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v9);
        result = Hasher._finalize()();
        v10 = result & v7;
        if (v3 >= (uint64_t)v8)
          break;
        if (v10 < v8)
          goto LABEL_11;
LABEL_12:
        v11 = *(_QWORD *)(a2 + 48);
        v12 = (_QWORD *)(v11 + 8 * v3);
        v13 = (_QWORD *)(v11 + 8 * v6);
        if (v3 != v6 || v12 >= v13 + 1)
          *v12 = *v13;
        v14 = *(_QWORD *)(a2 + 56);
        v15 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for FastSyncPresenceController.EditorDebounceState(0) - 8)
                        + 72);
        v16 = v15 * v3;
        result = v14 + v15 * v3;
        v17 = v15 * v6;
        v18 = v14 + v15 * v6;
        v19 = v18 + v15;
        if (v16 < v17 || result >= v19)
        {
          result = swift_arrayInitWithTakeFrontToBack(result, v18);
        }
        else
        {
          v3 = v6;
          if (v16 == v17)
            goto LABEL_6;
          result = swift_arrayInitWithTakeBackToFront(result, v18);
        }
        v3 = v6;
LABEL_6:
        v6 = (v6 + 1) & v7;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          goto LABEL_21;
      }
      if (v10 < v8)
        goto LABEL_6;
LABEL_11:
      if (v3 < (uint64_t)v10)
        goto LABEL_6;
      goto LABEL_12;
    }
LABEL_21:
    v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v22 = *v21;
    v23 = (-1 << v3) - 1;
  }
  else
  {
    v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    v23 = *v21;
    v22 = (-1 << result) - 1;
  }
  *v21 = v23 & v22;
  v24 = *(_QWORD *)(a2 + 16);
  v25 = __OFSUB__(v24, 1);
  v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_1003AEFD0(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 32 * v6);
        v11 = *v10;
        v12 = v10[1];
        v14 = v10[2];
        v13 = v10[3];
        Hasher.init(_seed:)(v30, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v30, v11, v12);
        if (v13)
        {
          Hasher._combine(_:)(1u);
          swift_bridgeObjectRetain(v13);
          String.hash(into:)(v30, v14, v13);
          swift_bridgeObjectRelease(v13);
        }
        else
        {
          Hasher._combine(_:)(0);
        }
        v15 = Hasher._finalize()();
        swift_bridgeObjectRelease(v13);
        result = swift_bridgeObjectRelease(v12);
        v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v16 < v8)
            goto LABEL_5;
        }
        else if (v16 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_14:
          v17 = *(_QWORD *)(a2 + 48);
          v18 = (_OWORD *)(v17 + 32 * v3);
          v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || v18 >= v19 + 2)
          {
            v20 = v19[1];
            *v18 = *v19;
            v18[1] = v20;
          }
          v21 = *(_QWORD *)(a2 + 56);
          v22 = v21 + 24 * v3;
          v23 = (__int128 *)(v21 + 24 * v6);
          if (v3 != v6 || (v3 = v6, v22 >= (unint64_t)v23 + 24))
          {
            v9 = *v23;
            *(_QWORD *)(v22 + 16) = *((_QWORD *)v23 + 2);
            *(_OWORD *)v22 = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v25 = *v24;
    v26 = (-1 << v3) - 1;
  }
  else
  {
    v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    v26 = *v24;
    v25 = (-1 << result) - 1;
  }
  *v24 = v26 & v25;
  v27 = *(_QWORD *)(a2 + 16);
  v28 = __OFSUB__(v27, 1);
  v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v29;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1003AF208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  if (a1 == a5 && a2 == a6
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v12 & 1) != 0))
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0) & 1) != 0))
        return 1;
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1003AF2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16), a2);

  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_1003AF2D4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005DBB74);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100130768;
  return sub_1003AC4F0();
}

uint64_t sub_1003AF340(uint64_t a1)
{
  unint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  _QWORD v8[2];
  _QWORD v9[5];
  __int128 v10;
  __int128 v11;

  v8[0] = 0xD000000000000011;
  v8[1] = 0x8000000100485C70;
  AnyHashable.init<A>(_:)(v9, v8, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v2 = sub_100248ECC((uint64_t)v9), (v3 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v2, (uint64_t)&v10);
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  sub_10018550C((uint64_t)v9);
  if (!*((_QWORD *)&v11 + 1))
  {
    swift_bridgeObjectRelease(a1);
    sub_100012DDC((uint64_t)&v10, &qword_1005CF190);
    return 0;
  }
  if ((swift_dynamicCast(v8, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease(a1);
    return 0;
  }
  v4 = v8[0];
  strcpy((char *)&v10, "RCCNoteTitle");
  BYTE13(v10) = 0;
  HIWORD(v10) = -5120;
  AnyHashable.init<A>(_:)(v9, &v10, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(a1 + 16) && (v5 = sub_100248ECC((uint64_t)v9), (v6 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(a1 + 56) + 32 * v5, (uint64_t)&v10);
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
  }
  swift_bridgeObjectRelease(a1);
  sub_10018550C((uint64_t)v9);
  if (*((_QWORD *)&v11 + 1))
    swift_dynamicCast(v8, &v10, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  else
    sub_100012DDC((uint64_t)&v10, &qword_1005CF190);
  return v4;
}

uint64_t sub_1003AF51C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_unknownObjectRelease(*(_QWORD *)(v2 + 16), a2);

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 64));
  return swift_deallocObject(v2, 72, 7);
}

uint64_t sub_1003AF558(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = v1[7];
  v10 = v1[8];
  v11 = (_QWORD *)swift_task_alloc(dword_1005DBB8C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100130768;
  return sub_1003ADA6C(a1, v4, v5, v6, v7, v8, v9, v10);
}

void sub_1003AF5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_QWORD **)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  if (!v6)
    return;
  v9 = 0;
  v10 = 0;
  while (1)
  {
    v11 = v5[v9 + 4];
    v12 = v5[v9 + 5];
    v14 = v5[v9 + 6];
    v13 = v5[v9 + 7];
    v15 = v11 == a2 && v12 == a3;
    if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, a2, a3, 0) & 1) != 0)
    {
      if (!v13)
      {
        if (!a5)
          break;
        goto LABEL_4;
      }
      if (a5)
      {
        v16 = v14 == a4 && v13 == a5;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, a4, a5, 0) & 1) != 0)
          break;
      }
    }
LABEL_4:
    ++v10;
    v9 += 4;
    if (v6 == v10)
      return;
  }
  v17 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    v44 = a5;
    v18 = v5[2];
    while (1)
    {
      if (v17 == v18)
        return;
      if (v17 >= v18)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        break;
      }
      v23 = &v5[v9];
      v24 = v5[v9 + 8];
      v25 = v5[v9 + 9];
      v27 = v5[v9 + 10];
      v26 = v5[v9 + 11];
      v28 = v24 == a2 && v25 == a3;
      if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, a2, a3, 0) & 1) != 0)
      {
        if (v26)
        {
          if (v44)
          {
            v29 = v27 == a4 && v26 == v44;
            if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, a4, v44, 0) & 1) != 0)
              goto LABEL_21;
          }
        }
        else if (!v44)
        {
          goto LABEL_21;
        }
      }
      if (v17 != v10)
      {
        if (v10 >= v18)
          goto LABEL_48;
        v30 = &v5[4 * v10 + 4];
        v31 = v30[1];
        v32 = v30[3];
        v40 = v30[2];
        v33 = v23[9];
        v43 = v23[8];
        v34 = v23[11];
        v41 = *v30;
        v42 = v23[10];
        swift_bridgeObjectRetain(v34);
        swift_bridgeObjectRetain(v31);
        v39 = v32;
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          v5 = sub_10026C6E8(v5);
        v35 = &v5[4 * v10];
        v36 = v35[5];
        v37 = v35[7];
        v35[4] = v43;
        v35[5] = v33;
        v35[6] = v42;
        v35[7] = v34;
        swift_bridgeObjectRelease(v36);
        swift_bridgeObjectRelease(v37);
        if (v17 >= v5[2])
          goto LABEL_49;
        v19 = &v5[v9];
        v20 = v5[v9 + 9];
        v21 = v5[v9 + 11];
        v19[8] = v41;
        v19[9] = v31;
        v19[10] = v40;
        v19[11] = v39;
        swift_bridgeObjectRelease(v20);
        swift_bridgeObjectRelease(v21);
        *(_QWORD *)a1 = v5;
      }
      if (__OFADD__(v10++, 1))
        goto LABEL_47;
LABEL_21:
      ++v17;
      v18 = v5[2];
      v9 += 4;
    }
  }
  __break(1u);
}

double sub_1003AF88C(uint64_t a1, char a2, uint64_t a3)
{
  double result;

  if (a3 != 1)
  {
    sub_100251F00(a1, a2);
    *(_QWORD *)&result = swift_release(a3).n128_u64[0];
  }
  return result;
}

uint64_t sub_1003AF8BC()
{
  return swift_task_switch(sub_1003AF8D0, 0, 0);
}

uint64_t sub_1003AF8D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for SiriVocabulary.Corpus(255);
  swift_asyncLet_begin(v0 + 656, 0, v1, &unk_1005DBC08, 0, v0 + 2760);
  swift_asyncLet_begin(v0 + 1936, 0, v1, &unk_1005DBC10, 0, v0 + 2616);
  swift_asyncLet_begin(v0 + 1296, 0, v1, &unk_1005DBC18, 0, v0 + 2664);
  swift_asyncLet_begin(v0 + 16, 0, v1, &unk_1005DBC20, 0, v0 + 2712);
  v2 = sub_100012E18(&qword_1005CF6F0);
  v3 = swift_allocObject(v2, 64, 7);
  *(_QWORD *)(v0 + 2808) = v3;
  *(_OWORD *)(v3 + 16) = xmmword_100451BE0;
  return swift_asyncLet_get_throwing(v0 + 656, v0 + 2760, sub_1003AFA04, v0 + 2768);
}

uint64_t sub_1003AFA04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 2856) = v0;
  if (v0)
    v2 = sub_1003AFD6C;
  else
    v2 = sub_1003AFA2C;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AFA2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2760);
  *(_QWORD *)(*(_QWORD *)(v0 + 2808) + 32) = v1;
  swift_retain(v1);
  return swift_asyncLet_get_throwing(v0 + 1936, v0 + 2616, sub_1003AFA88, v0 + 3008);
}

uint64_t sub_1003AFA88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 2904) = v0;
  if (v0)
    v2 = sub_1003AFE68;
  else
    v2 = sub_1003AFAB0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AFAB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2616);
  *(_QWORD *)(*(_QWORD *)(v0 + 2808) + 40) = v1;
  swift_retain(v1);
  return swift_asyncLet_get_throwing(v0 + 1296, v0 + 2664, sub_1003AFB0C, v0 + 2720);
}

uint64_t sub_1003AFB0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  *(_QWORD *)(v1 + 2952) = v0;
  if (v0)
    v2 = sub_1003AFF70;
  else
    v2 = sub_1003AFB34;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AFB34()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2664);
  *(_QWORD *)(*(_QWORD *)(v0 + 2808) + 48) = v1;
  swift_retain(v1);
  return swift_asyncLet_get_throwing(v0 + 16, v0 + 2712, sub_1003AFB90, v0 + 3488);
}

uint64_t sub_1003AFB90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  *(_QWORD *)(v1 + 3000) = v0;
  if (v0)
    v2 = sub_1003B0080;
  else
    v2 = sub_1003AFBB8;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003AFBB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = v1[351];
  v3 = v1[339];
  *(_QWORD *)(v2 + 56) = v3;
  v7 = v2;
  specialized Array._endMutation()(a1);
  v1[381] = v7;
  v4 = async function pointer to static SiriVocabulary.setCorporaByPriority(_:)[1];
  swift_retain(v3);
  v5 = (_QWORD *)swift_task_alloc(v4);
  v1[387] = v5;
  *v5 = v1;
  v5[1] = sub_1003AFC38;
  return static SiriVocabulary.setCorporaByPriority(_:)(v7);
}

uint64_t sub_1003AFC38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3096);
  *(_QWORD *)(*v1 + 3144) = v0;
  swift_task_dealloc(v3);
  if (v0)
    return swift_task_switch(sub_1003B0198, 0, 0);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 3048));
  return swift_asyncLet_finish(v2 + 16, v2 + 2712, sub_1003AFCD4, v2 + 3344);
}

uint64_t sub_1003AFCD4()
{
  return swift_task_switch(sub_1003AFCE8, 0, 0);
}

uint64_t sub_1003AFCE8()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_1003AFD00, v0 + 3248);
}

uint64_t sub_1003AFD00()
{
  return swift_task_switch(sub_1003AFD14, 0, 0);
}

uint64_t sub_1003AFD14()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_1003AFD2C, v0 + 2672);
}

uint64_t sub_1003AFD2C()
{
  return swift_task_switch(sub_1003AFD40, 0, 0);
}

uint64_t sub_1003AFD40()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_1003AFD58, v0 + 2576);
}

uint64_t sub_1003AFD58()
{
  return swift_task_switch(sub_10029D6C0, 0, 0);
}

uint64_t sub_1003AFD6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2808);
  *(_QWORD *)(v1 + 16) = 0;
  swift_release(v1);
  return swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_1003AFDC4, v0 + 2816);
}

uint64_t sub_1003AFDC4()
{
  return swift_task_switch(sub_1003AFDD8, 0, 0);
}

uint64_t sub_1003AFDD8()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_1003AFDF0, v0 + 2864);
}

uint64_t sub_1003AFDF0()
{
  return swift_task_switch(sub_1003AFE04, 0, 0);
}

uint64_t sub_1003AFE04()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_1003AFE1C, v0 + 2912);
}

uint64_t sub_1003AFE1C()
{
  return swift_task_switch(sub_1003AFE30, 0, 0);
}

uint64_t sub_1003AFE30()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_1003AFE48, v0 + 2960);
}

uint64_t sub_1003AFE48()
{
  return swift_task_switch(sub_1003AFE5C, 0, 0);
}

uint64_t sub_1003AFE5C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AFE68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 2808);
  swift_release(*(_QWORD *)(v1 + 32));
  *(_QWORD *)(v1 + 16) = 0;
  swift_release(v1);
  return swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_1003AFECC, v0 + 3056);
}

uint64_t sub_1003AFECC()
{
  return swift_task_switch(sub_1003AFEE0, 0, 0);
}

uint64_t sub_1003AFEE0()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_1003AFEF8, v0 + 3104);
}

uint64_t sub_1003AFEF8()
{
  return swift_task_switch(sub_1003AFF0C, 0, 0);
}

uint64_t sub_1003AFF0C()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_1003AFF24, v0 + 3152);
}

uint64_t sub_1003AFF24()
{
  return swift_task_switch(sub_1003AFF38, 0, 0);
}

uint64_t sub_1003AFF38()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_1003AFF50, v0 + 3200);
}

uint64_t sub_1003AFF50()
{
  return swift_task_switch(sub_1003AFF64, 0, 0);
}

uint64_t sub_1003AFF64()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AFF70()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 2808);
  swift_release(v1[5]);
  swift_release(v1[4]);
  v1[2] = 0;
  swift_release(v1);
  return swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_1003AFFDC, v0 + 3296);
}

uint64_t sub_1003AFFDC()
{
  return swift_task_switch(sub_1003AFFF0, 0, 0);
}

uint64_t sub_1003AFFF0()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_1003B0008, v0 + 2624);
}

uint64_t sub_1003B0008()
{
  return swift_task_switch(sub_1003B001C, 0, 0);
}

uint64_t sub_1003B001C()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_1003B0034, v0 + 3392);
}

uint64_t sub_1003B0034()
{
  return swift_task_switch(sub_1003B0048, 0, 0);
}

uint64_t sub_1003B0048()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_1003B0060, v0 + 3440);
}

uint64_t sub_1003B0060()
{
  return swift_task_switch(sub_1003B0074, 0, 0);
}

uint64_t sub_1003B0074()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B0080()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = *(_QWORD **)(v0 + 2808);
  swift_release(v1[6]);
  swift_release(v1[5]);
  swift_release(v1[4]);
  v1[2] = 0;
  swift_release(v1);
  return swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_1003B00F4, v0 + 3536);
}

uint64_t sub_1003B00F4()
{
  return swift_task_switch(sub_1003B0108, 0, 0);
}

uint64_t sub_1003B0108()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_1003B0120, v0 + 3584);
}

uint64_t sub_1003B0120()
{
  return swift_task_switch(sub_1003B0134, 0, 0);
}

uint64_t sub_1003B0134()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_1003B014C, v0 + 3632);
}

uint64_t sub_1003B014C()
{
  return swift_task_switch(sub_1003B0160, 0, 0);
}

uint64_t sub_1003B0160()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_1003B0178, v0 + 3680);
}

uint64_t sub_1003B0178()
{
  return swift_task_switch(sub_1003B018C, 0, 0);
}

uint64_t sub_1003B018C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B0198()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 3048));
  return swift_asyncLet_finish(v0 + 16, v0 + 2712, sub_1003B01EC, v0 + 3728);
}

uint64_t sub_1003B01EC()
{
  return swift_task_switch(sub_1003B0200, 0, 0);
}

uint64_t sub_1003B0200()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1296, v0 + 2664, sub_1003B0218, v0 + 3776);
}

uint64_t sub_1003B0218()
{
  return swift_task_switch(sub_1003B022C, 0, 0);
}

uint64_t sub_1003B022C()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 1936, v0 + 2616, sub_1003B0244, v0 + 3824);
}

uint64_t sub_1003B0244()
{
  return swift_task_switch(sub_1003B0258, 0, 0);
}

uint64_t sub_1003B0258()
{
  uint64_t v0;

  return swift_asyncLet_finish(v0 + 656, v0 + 2760, sub_1003B0270, v0 + 3872);
}

uint64_t sub_1003B0270()
{
  return swift_task_switch(sub_1003B0284, 0, 0);
}

uint64_t sub_1003B0284()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B0290(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1005DBC44);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100140BD8;
  return sub_1003B02D8();
}

uint64_t sub_1003B02D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for AccountEntity(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  v4 = type metadata accessor for SiriVocabulary.DynamicTerm(0);
  v0[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[7] = v5;
  v0[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003B036C, 0, 0);
}

uint64_t sub_1003B036C()
{
  _QWORD *v0;
  uint64_t VACycfC_0;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  _QWORD *v6;

  VACycfC_0 = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  v3 = v2;
  v5 = v4;
  v0[9] = VACycfC_0;
  v0[10] = v2;
  v6 = (_QWORD *)swift_task_alloc(dword_1005DAB2C);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_1003B03DC;
  return VisibleAccountsQuery.suggestedEntities()(VACycfC_0, v3, v5 & 1);
}

uint64_t sub_1003B03DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1003B1684;
  }
  else
  {
    v6 = v3[10];
    swift_release(v3[9]);
    swift_release(v6);
    v5 = sub_1003B0458;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003B0458()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  _QWORD *v29;

  v1 = v0[12];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[3];
    v25 = v0[2];
    v26 = v0[7];
    v29 = _swiftEmptyArrayStorage;
    sub_1001373A8(0, v2, 0);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v24 = *(_QWORD *)(v3 + 72);
    v5 = _swiftEmptyArrayStorage;
    v27 = v0;
    do
    {
      v28 = v2;
      v7 = v0[4];
      v6 = v0[5];
      v8 = v0[2];
      sub_100145220(v4, v6, type metadata accessor for AccountEntity);
      v9 = (uint64_t *)(v6 + *(int *)(v25 + 24));
      v11 = *v9;
      v10 = v9[1];
      sub_100145220(v6, v7, type metadata accessor for AccountEntity);
      v12 = sub_100019C6C((unint64_t *)&unk_1005CEE40, type metadata accessor for AccountEntity, (uint64_t)&protocol conformance descriptor for AccountEntity);
      v13 = swift_bridgeObjectRetain(v10);
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)(v11, v10, v7, v8, v12, v13);
      sub_100145264(v6, type metadata accessor for AccountEntity);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_1001373A8(0, v5[2] + 1, 1);
        v5 = v29;
      }
      v15 = v5[2];
      v14 = v5[3];
      v0 = v27;
      if (v15 >= v14 >> 1)
      {
        sub_1001373A8(v14 > 1, v15 + 1, 1);
        v5 = v29;
      }
      v16 = v27[8];
      v17 = v27[6];
      v5[2] = v15 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))((unint64_t)v5+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v15, v16, v17);
      v29 = v5;
      v4 += v24;
      v2 = v28 - 1;
    }
    while (v28 != 1);
    swift_bridgeObjectRelease(v27[12]);
  }
  else
  {
    swift_bridgeObjectRelease(v0[12]);
    v5 = _swiftEmptyArrayStorage;
  }
  v18 = v0[8];
  v20 = v0[4];
  v19 = v0[5];
  v21 = type metadata accessor for SiriVocabulary.Corpus(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = SiriVocabulary.Corpus.init(contents:capacity:)(v5, 50, 0);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return ((uint64_t (*)(uint64_t))v0[1])(v22);
}

uint64_t sub_1003B06A4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1005DBC3C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100140CAC;
  return sub_1003B06EC();
}

uint64_t sub_1003B06EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for FolderEntity(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  v4 = type metadata accessor for SiriVocabulary.DynamicTerm(0);
  v0[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[7] = v5;
  v0[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003B0780, 0, 0);
}

uint64_t sub_1003B0780()
{
  _QWORD *v0;
  uint64_t VACycfC_0;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *v6;

  VACycfC_0 = _s11MobileNotes20VisibleAccountsQueryVACycfC_0();
  v3 = v2;
  v5 = v4;
  v0[9] = VACycfC_0;
  v0[10] = v2;
  v6 = (_QWORD *)swift_task_alloc(dword_1005D04BC);
  v0[11] = v6;
  *v6 = v0;
  v6[1] = sub_1003B07F0;
  return VisibleFoldersQuery.suggestedEntities()(VACycfC_0, v3, v5 & 0x1010101);
}

uint64_t sub_1003B07F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1003B0AB8;
  }
  else
  {
    v6 = v3[10];
    swift_release(v3[9]);
    swift_release(v6);
    v5 = sub_1003B086C;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003B086C()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  _QWORD *v29;

  v1 = v0[12];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[3];
    v25 = v0[2];
    v26 = v0[7];
    v29 = _swiftEmptyArrayStorage;
    sub_1001373A8(0, v2, 0);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v24 = *(_QWORD *)(v3 + 72);
    v5 = _swiftEmptyArrayStorage;
    v27 = v0;
    do
    {
      v28 = v2;
      v7 = v0[4];
      v6 = v0[5];
      v8 = v0[2];
      sub_100145220(v4, v6, type metadata accessor for FolderEntity);
      v9 = (uint64_t *)(v6 + *(int *)(v25 + 24));
      v11 = *v9;
      v10 = v9[1];
      sub_100145220(v6, v7, type metadata accessor for FolderEntity);
      v12 = sub_100019C6C((unint64_t *)&qword_1005D7870, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
      v13 = swift_bridgeObjectRetain(v10);
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)(v11, v10, v7, v8, v12, v13);
      sub_100145264(v6, type metadata accessor for FolderEntity);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_1001373A8(0, v5[2] + 1, 1);
        v5 = v29;
      }
      v15 = v5[2];
      v14 = v5[3];
      v0 = v27;
      if (v15 >= v14 >> 1)
      {
        sub_1001373A8(v14 > 1, v15 + 1, 1);
        v5 = v29;
      }
      v16 = v27[8];
      v17 = v27[6];
      v5[2] = v15 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))((unint64_t)v5+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v15, v16, v17);
      v29 = v5;
      v4 += v24;
      v2 = v28 - 1;
    }
    while (v28 != 1);
    swift_bridgeObjectRelease(v27[12]);
  }
  else
  {
    swift_bridgeObjectRelease(v0[12]);
    v5 = _swiftEmptyArrayStorage;
  }
  v18 = v0[8];
  v20 = v0[4];
  v19 = v0[5];
  v21 = type metadata accessor for SiriVocabulary.Corpus(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = SiriVocabulary.Corpus.init(contents:capacity:)(v5, 100, 0);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return ((uint64_t (*)(uint64_t))v0[1])(v22);
}

uint64_t sub_1003B0AB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B0B1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1005DBC34);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100140BD8;
  return sub_1003B0B64();
}

uint64_t sub_1003B0B64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for TagEntity(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  v4 = type metadata accessor for SiriVocabulary.DynamicTerm(0);
  v0[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[7] = v5;
  v0[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003B0BF8, 0, 0);
}

uint64_t sub_1003B0BF8()
{
  _QWORD *v0;
  uint64_t VACycfC_0;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  VACycfC_0 = _s11MobileNotes18VisibleTablesQueryVACycfC_0();
  v3 = v2;
  v0[9] = VACycfC_0;
  v0[10] = v2;
  v4 = (_QWORD *)swift_task_alloc(dword_1005D00CC);
  v0[11] = v4;
  *v4 = v0;
  v4[1] = sub_1003B0C58;
  return VisibleTagsQuery.suggestedEntities()(VACycfC_0, v3);
}

uint64_t sub_1003B0C58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 88);
  v3[12] = a1;
  v3[13] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1003B1684;
  }
  else
  {
    v6 = v3[10];
    swift_release(v3[9]);
    swift_release(v6);
    v5 = sub_1003B0CD4;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003B0CD4()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64_t v28;
  _QWORD *v29;

  v1 = v0[12];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[3];
    v25 = v0[2];
    v26 = v0[7];
    v29 = _swiftEmptyArrayStorage;
    sub_1001373A8(0, v2, 0);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v24 = *(_QWORD *)(v3 + 72);
    v5 = _swiftEmptyArrayStorage;
    v27 = v0;
    do
    {
      v28 = v2;
      v7 = v0[4];
      v6 = v0[5];
      v8 = v0[2];
      sub_100145220(v4, v6, type metadata accessor for TagEntity);
      v9 = (uint64_t *)(v6 + *(int *)(v25 + 28));
      v11 = *v9;
      v10 = v9[1];
      sub_100145220(v6, v7, type metadata accessor for TagEntity);
      v12 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
      v13 = swift_bridgeObjectRetain(v10);
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)(v11, v10, v7, v8, v12, v13);
      sub_100145264(v6, type metadata accessor for TagEntity);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_1001373A8(0, v5[2] + 1, 1);
        v5 = v29;
      }
      v15 = v5[2];
      v14 = v5[3];
      v0 = v27;
      if (v15 >= v14 >> 1)
      {
        sub_1001373A8(v14 > 1, v15 + 1, 1);
        v5 = v29;
      }
      v16 = v27[8];
      v17 = v27[6];
      v5[2] = v15 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v26 + 32))((unint64_t)v5+ ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80))+ *(_QWORD *)(v26 + 72) * v15, v16, v17);
      v29 = v5;
      v4 += v24;
      v2 = v28 - 1;
    }
    while (v28 != 1);
    swift_bridgeObjectRelease(v27[12]);
  }
  else
  {
    swift_bridgeObjectRelease(v0[12]);
    v5 = _swiftEmptyArrayStorage;
  }
  v18 = v0[8];
  v20 = v0[4];
  v19 = v0[5];
  v21 = type metadata accessor for SiriVocabulary.Corpus(0);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v22 = SiriVocabulary.Corpus.init(contents:capacity:)(v5, 100, 0);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return ((uint64_t (*)(uint64_t))v0[1])(v22);
}

uint64_t sub_1003B0F20(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1005DBC2C);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_100140BD8;
  return sub_1003B0F68();
}

uint64_t sub_1003B0F68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = type metadata accessor for NoteEntity(0);
  v0[4] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[5] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[6] = swift_task_alloc(v3);
  v0[7] = swift_task_alloc(v3);
  v4 = type metadata accessor for SiriVocabulary.DynamicTerm(0);
  v0[8] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v0[9] = v5;
  v0[10] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003B0FFC, 0, 0);
}

uint64_t sub_1003B0FFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = sub_1001E964C();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v0[11] = v1;
  v0[12] = v2;
  v0[13] = v4;
  v8 = (_QWORD *)swift_task_alloc(dword_1005D394C);
  v0[14] = v8;
  *v8 = v0;
  v8[1] = sub_1003B1080;
  return VisibleNotesQuery.suggestedEntities()(v1, v3, v5, v7 & 0x101010101);
}

uint64_t sub_1003B1080(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 112);
  v3[15] = a1;
  v3[16] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1003B1358;
  }
  else
  {
    v6 = v3[12];
    v7 = v3[13];
    swift_release(v3[11]);
    swift_release(v6);
    swift_release(v7);
    v5 = sub_1003B1110;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003B1110()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v24 = *(_QWORD *)(v0 + 72);
    v3 = *(_QWORD *)(v0 + 40);
    v26 = _swiftEmptyArrayStorage;
    sub_1001373A8(0, v2, 0);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v23 = *(_QWORD *)(v3 + 72);
    v5 = _swiftEmptyArrayStorage;
    do
    {
      v25 = v2;
      v7 = *(_QWORD *)(v0 + 48);
      v6 = *(_QWORD *)(v0 + 56);
      v8 = *(_QWORD *)(v0 + 32);
      sub_100145220(v4, v6, type metadata accessor for NoteEntity);
      EntityProperty.wrappedValue.getter((_QWORD *)(v0 + 16));
      v9 = *(_QWORD *)(v0 + 16);
      v10 = *(_QWORD *)(v0 + 24);
      sub_100145220(v6, v7, type metadata accessor for NoteEntity);
      v11 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
      SiriVocabulary.DynamicTerm.init<A>(_:entity:)(v9, v10, v7, v8, v11, v12);
      sub_100145264(v6, type metadata accessor for NoteEntity);
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_1001373A8(0, v5[2] + 1, 1);
        v5 = v26;
      }
      v14 = v5[2];
      v13 = v5[3];
      if (v14 >= v13 >> 1)
      {
        sub_1001373A8(v13 > 1, v14 + 1, 1);
        v5 = v26;
      }
      v15 = *(_QWORD *)(v0 + 80);
      v16 = *(_QWORD *)(v0 + 64);
      v5[2] = v14 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v24 + 32))((unint64_t)v5+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v14, v15, v16);
      v26 = v5;
      v4 += v23;
      --v2;
    }
    while (v25 != 1);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
    v5 = _swiftEmptyArrayStorage;
  }
  v17 = *(_QWORD *)(v0 + 80);
  v19 = *(_QWORD *)(v0 + 48);
  v18 = *(_QWORD *)(v0 + 56);
  v20 = type metadata accessor for SiriVocabulary.Corpus(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v21 = SiriVocabulary.Corpus.init(contents:capacity:)(v5, 0, 1);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v21);
}

uint64_t sub_1003B1358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 48);
  v4 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v1);
  swift_release(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B13CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1003B1408(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1003B143C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1003B1480(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1003B14C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1003B1508(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1003B154C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003B1558);
}

uint64_t sub_1003B1558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1003B1594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003B15A0);
}

uint64_t sub_1003B15A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AppIntentsVocabularyManager(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DBCA0;
  if (!qword_1005DBCA0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppIntentsVocabularyManager);
  return result;
}

uint64_t sub_1003B161C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1003B1688()
{
  return 10;
}

unint64_t sub_1003B1690()
{
  return sub_1003B1768();
}

uint64_t type metadata accessor for FolderComposerFilterCellLockedNotes()
{
  return objc_opt_self(_TtC11MobileNotes35FolderComposerFilterCellLockedNotes);
}

unint64_t sub_1003B1768()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DBD00[0];
  if (!qword_1005DBD00[0])
  {
    v1 = objc_opt_self(ICLockedNotesFilterTypeSelection);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, qword_1005DBD00);
  }
  return result;
}

void sub_1003B17A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE v4[32];
  _QWORD v5[2];

  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1003B1CFC(319);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, (char *)&value witness table for Builtin.NativeObject + 64, *(_QWORD *)(v2 - 8) + 64);
    v5[1] = v4;
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v5);
  }
}

uint64_t *sub_1003B1830(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v10);
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v11 = *a2;
      *a1 = *a2;
      swift_retain(v11);
      v12 = *(int *)(sub_100012E18(&qword_1005D6EB0) + 48);
      v13 = (char *)a1 + v12;
      v14 = (char *)a2 + v12;
      v15 = sub_100012E18(&qword_1005D6EA8);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

void sub_1003B1930(_QWORD *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  char *v4;
  uint64_t v5;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  if (EnumCaseMultiPayload == 1)
  {
    swift_release(*a1);
    v4 = (char *)a1 + *(int *)(sub_100012E18(&qword_1005D6EB0) + 48);
    v5 = sub_100012E18(&qword_1005D6EA8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {
    swift_release(*a1);
  }
}

uint64_t *sub_1003B19B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    v8 = *a2;
    *a1 = *a2;
    swift_retain(v8);
    v9 = *(int *)(sub_100012E18(&qword_1005D6EB0) + 48);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_100012E18(&qword_1005D6EA8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = *a2;
    *a1 = *a2;
    swift_retain(v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

uint64_t *sub_1003B1A88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(uint64_t *, uint64_t))(v6 + 8))(a1, a3);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      v9 = *a2;
      *a1 = *a2;
      swift_retain(v9);
      v10 = *(int *)(sub_100012E18(&qword_1005D6EB0) + 48);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = sub_100012E18(&qword_1005D6EA8);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
    else
    {
      v8 = *a2;
      *a1 = *a2;
      swift_retain(v8);
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

_QWORD *sub_1003B1B78(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = *(int *)(sub_100012E18(&qword_1005D6EB0) + 48);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_100012E18(&qword_1005D6EA8);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1003B1C28(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v6 = *(_QWORD *)(a3 - 8);
    (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(a1, a3);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v7 = *(int *)(sub_100012E18(&qword_1005D6EB0) + 48);
      v8 = (char *)a1 + v7;
      v9 = (char *)a2 + v7;
      v10 = sub_100012E18(&qword_1005D6EA8);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(v6 + 64));
    }
  }
  return a1;
}

uint64_t _s9JoinStateOMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&_s9JoinStateOMn);
}

void sub_1003B1CFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005DBD88)
  {
    v2 = sub_10001537C(&qword_1005D7A90);
    v3 = type metadata accessor for CheckedContinuation(a1, (char *)&type metadata for () + 8, v2, &protocol self-conformance witness table for Error);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005DBD88);
  }
}

void *CreateAttachmentIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static CreateAttachmentIntent.persistentIdentifier;
}

unint64_t static CreateAttachmentIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1003B1D90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static CreateAttachmentIntent.title);
  sub_10012A0B0(v10, (uint64_t)static CreateAttachmentIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000011, 0x800000010048C580);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t CreateAttachmentIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEDA8 != -1)
    swift_once(&qword_1005CEDA8, sub_1003B1D90);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static CreateAttachmentIntent.title);
}

uint64_t static CreateAttachmentIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEDA8 != -1)
    swift_once(&qword_1005CEDA8, sub_1003B1D90);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static CreateAttachmentIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *CreateAttachmentIntent.assistantOnly.unsafeMutableAddressor()
{
  return &static CreateAttachmentIntent.assistantOnly;
}

uint64_t static CreateAttachmentIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003BLL, 0x800000010048C540);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

__n128 CreateAttachmentIntent.init()@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __n128 result;
  _OWORD v4[4];
  uint64_t v5;

  sub_1003B2FE8((char **)v4);
  v2 = v4[3];
  *(_OWORD *)(a1 + 32) = v4[2];
  *(_OWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 64) = v5;
  result = (__n128)v4[1];
  *(_OWORD *)a1 = v4[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t CreateAttachmentIntent.file.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100012E18(&qword_1005CF1F8);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012CE8(a1, (uint64_t)v4, &qword_1005CF1F8);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100012DDC(a1, &qword_1005CF1F8);
}

uint64_t CreateAttachmentIntent.url.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012CE8(a1, (uint64_t)v4, &qword_1005CEFD0);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100012DDC(a1, &qword_1005CEFD0);
}

_QWORD *CreateAttachmentIntent.note.getter@<X0>(_QWORD *a1@<X8>)
{
  return IntentParameter.wrappedValue.getter(a1);
}

uint64_t CreateAttachmentIntent.note.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = type metadata accessor for NoteEntity(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100145220(a1, (uint64_t)v4, type metadata accessor for NoteEntity);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100145264(a1, type metadata accessor for NoteEntity);
}

uint64_t CreateAttachmentIntent.insertionRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t CreateAttachmentIntent.insertionRange.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 32) = result;
  *(_QWORD *)(v3 + 40) = a2;
  *(_BYTE *)(v3 + 48) = a3 & 1;
  return result;
}

uint64_t CreateAttachmentIntent.loggingConfiguration.getter()
{
  uint64_t v1;

  AppDependency.wrappedValue.getter(&v1);
  return v1;
}

uint64_t CreateAttachmentIntent.loggingConfiguration.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];

  v5[0] = a1;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  return AppDependency.wrappedValue.setter(v5);
}

uint64_t (*CreateAttachmentIntent.loggingConfiguration.modify(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = AppDependency.wrappedValue.modify();
  return sub_10012A600;
}

uint64_t CreateAttachmentIntent.$loggingConfiguration.getter()
{
  return AppDependency.projectedValue.getter();
}

uint64_t CreateAttachmentIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for AttachmentEntity(0);
  v2[12] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v4);
  v2[14] = swift_task_alloc(v4);
  v2[15] = swift_task_alloc(v4);
  v2[16] = swift_task_alloc(v4);
  v5 = type metadata accessor for NoteID(0);
  v2[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[18] = v6;
  v2[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NoteEntity(0);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003B25A8, 0, 0);
}

uint64_t sub_1003B25A8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  v2 = v0[19];
  v1 = (_QWORD *)v0[20];
  v3 = v0[17];
  v4 = v0[18];
  AppDependency.wrappedValue.getter(v0 + 5);
  v5 = (void *)v0[5];
  v0[21] = objc_msgSend(v5, "modernManagedObjectContext");

  IntentParameter.wrappedValue.getter(v1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_100145264((uint64_t)v1, type metadata accessor for NoteEntity);
  AppDependency.wrappedValue.getter(v0 + 6);
  v6 = v0[6];
  v0[22] = v6;
  v9 = (char *)&dword_1005D7890 + dword_1005D7890;
  v7 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v0[23] = v7;
  *v7 = v0;
  v7[1] = sub_1003B26B0;
  return ((uint64_t (*)(_QWORD, uint64_t))v9)(v0[19], v6);
}

uint64_t sub_1003B26B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)(*(_QWORD *)v1 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_1003B2730, 0, 0);
}

uint64_t sub_1003B2730()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = (void *)v0[24];
  v2 = (void *)v0[21];
  v3 = v0[11];
  v4 = swift_allocObject(&unk_10056D1E0, 104, 7);
  v0[25] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = *(_OWORD *)(v3 + 16);
  v6 = *(_OWORD *)(v3 + 32);
  v7 = *(_OWORD *)(v3 + 48);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(v3 + 64);
  *(_OWORD *)(v4 + 64) = v6;
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 48) = v5;
  *(_OWORD *)(v4 + 32) = *(_OWORD *)v3;
  v8 = v1;
  v9 = v2;
  sub_1003B3B84((_QWORD *)v3);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(_:)[1]);
  v0[26] = v10;
  v11 = sub_100012E18(&qword_1005D1230);
  *v10 = v0;
  v10[1] = sub_1001F935C;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 7, sub_1003B3B68, v4, v11);
}

void sub_1003B2810(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSURL *v54;
  void *v55;
  void *v56;
  id v57;
  _QWORD *v58;
  id v59;
  id v60;
  id v61;
  id v62;
  NSURL *v63;
  void *v64;
  void *v65;
  void *v66;
  unsigned int v67;
  id v68;
  id v69;
  id v70;
  id v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  _BYTE v85[24];
  _QWORD v86[2];
  char v87;

  v82 = a3;
  v7 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v7);
  v78 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for IntentFile(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012E18(&qword_1005CF1F8);
  __chkstk_darwin(v13);
  v15 = (id *)((char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_100012E18(&qword_1005CEFD0);
  v17 = __chkstk_darwin(v16);
  v79 = (id *)((char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17);
  v20 = (char *)&v73 - v19;
  v21 = type metadata accessor for URL(0);
  v80 = *(_QWORD *)(v21 - 8);
  v81 = v21;
  v22 = __chkstk_darwin(v21);
  __chkstk_darwin(v22);
  v25 = (char *)&v73 - v24;
  if (!a1)
    goto LABEL_6;
  v76 = v23;
  v77 = a4;
  v26 = a1;
  v75 = a2;
  v27 = objc_msgSend(a2, "objectWithID:", v26);
  v28 = objc_opt_self(ICNote);
  v29 = (void *)swift_dynamicCastObjCClass(v27, v28);
  if (!v29)
  {

LABEL_6:
    type metadata accessor for ICError(0);
    v36 = v35;
    v83 = 227;
    v37 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v38 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v39 = _BridgedStoredNSError.init(_:userInfo:)(&v84, &v83, v37, v36, v38);
    swift_willThrow(v39);
    return;
  }
  v30 = v29;
  if ((objc_msgSend(v29, "isPasswordProtectedAndLocked") & 1) != 0)
  {
    v31 = sub_10013F4E8();
    v32 = swift_allocError(&type metadata for AppIntentsError, v31, 0, 0);
    v34 = 11;
LABEL_11:
    *v33 = v34;
    swift_willThrow(v32);

    return;
  }
  if (!objc_msgSend(v30, "isEditable"))
  {
    v43 = sub_10013F4E8();
    v32 = swift_allocError(&type metadata for AppIntentsError, v43, 0, 0);
    v34 = 12;
    goto LABEL_11;
  }
  v73 = v30;
  v74 = v26;
  v40 = v82;
  IntentParameter.wrappedValue.getter(v15);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9))
  {
    sub_100012DDC((uint64_t)v15, &qword_1005CF1F8);
    v42 = v80;
    v41 = v81;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56))(v20, 1, 1, v81);
LABEL_13:
    sub_100012DDC((uint64_t)v20, &qword_1005CEFD0);
    v45 = v79;
    IntentParameter.wrappedValue.getter(v79);
    v46 = v27;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v42 + 48))(v45, 1, v41) == 1)
    {
      v47 = sub_100012DDC((uint64_t)v45, &qword_1005CEFD0);
      v48 = IntentParameter.projectedValue.getter(v47);
      v49 = type metadata accessor for IntentDialog(0);
      v50 = (uint64_t)v78;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v78, 1, 1, v49);
      v51 = type metadata accessor for AppIntentError(0);
      v52 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
      swift_allocError(v51, v52, 0, 0);
      IntentParameter.needsValueError(_:)(v50);
      swift_release(v48);
      v53 = sub_100012DDC(v50, (uint64_t *)&unk_1005CEE20);
      swift_willThrow(v53);

      return;
    }
    v25 = v76;
    (*(void (**)(char *, _QWORD *, uint64_t))(v42 + 32))(v76, v45, v41);
    URL._bridgeToObjectiveC()(v54);
    v56 = v55;
    v57 = objc_msgSend(v73, "addURLAttachmentWithURL:", v55);

    goto LABEL_16;
  }
  (*(void (**)(char *, _QWORD *, uint64_t))(v10 + 16))(v12, v15, v9);
  v44 = sub_100012DDC((uint64_t)v15, &qword_1005CF1F8);
  IntentFile.fileURL.getter(v44);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v42 = v80;
  v41 = v81;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v80 + 48))(v20, 1, v81) == 1)
    goto LABEL_13;
  (*(void (**)(char *, char *, uint64_t))(v42 + 32))(v25, v20, v41);
  v46 = v27;
  if (!URL.startAccessingSecurityScopedResource()())
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v41);

    *v77 = 0;
    return;
  }
  URL._bridgeToObjectiveC()(v63);
  v65 = v64;
  v57 = objc_msgSend(v73, "addAttachmentWithFileURL:", v64);

  URL.stopAccessingSecurityScopedResource()();
LABEL_16:
  v58 = v77;
  (*(void (**)(char *, uint64_t))(v42 + 8))(v25, v41);
  if (v57)
  {
    v59 = objc_allocWithZone((Class)ICAttachmentInsertionController);
    v60 = v57;
    v61 = objc_msgSend(v59, "initWithNote:", v73);
    sub_1001FAC4C(v40 + 32, (uint64_t)v85);
    sub_1001FAC4C((uint64_t)v85, (uint64_t)v86);
    if ((v87 & 1) != 0)
      v62 = objc_msgSend(v61, "addAttachment:", v60);
    else
      v62 = objc_msgSend(v61, "addAttachment:atTextRange:", v60, v86[0], v86[1]);
    v66 = v75;

    v84 = 0;
    v67 = objc_msgSend(v66, "save:", &v84);
    v68 = v84;
    if (v67)
    {
      v69 = v84;
      v70 = objc_msgSend(v60, "objectID");

      *v58 = v70;
    }
    else
    {
      v71 = v84;
      _convertNSErrorToError(_:)(v68);

      swift_willThrow(v72);
    }
  }
  else
  {

    *v58 = 0;
  }
}

uint64_t sub_1003B2F28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;

  v4 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v2 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v2 + 64) = v4;
  *(_QWORD *)(v2 + 80) = *(_QWORD *)(v1 + 64);
  v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_1005DBD94);
  *(_QWORD *)(v2 + 88) = v6;
  *v6 = v2;
  v6[1] = sub_1003B2FA0;
  return CreateAttachmentIntent.perform()(a1);
}

uint64_t sub_1003B2FA0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1003B2FE8@<X0>(char **a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  void (*v62)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  void (*v64)(char *, _QWORD, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64x2_t v80;
  int16x8_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t result;
  char **v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  char **v100;
  unsigned int v101;
  void (*v102)(char *, uint64_t, uint64_t);
  uint64_t v103;
  void (*v104)(char *, uint64_t, uint64_t, uint64_t);
  char *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  char *v109;
  char *v110;
  void (*v111)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  unsigned __int32 v120;

  v100 = a1;
  v1 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v1);
  v99 = (char *)&v93 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v3);
  v97 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005CF1F8);
  __chkstk_darwin(v5);
  v95 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for InputConnectionBehavior(0);
  v103 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113);
  v110 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v9 = __chkstk_darwin(v8);
  v98 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v109 = (char *)&v93 - v11;
  v12 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v12);
  v96 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v14);
  v16 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Locale(0);
  __chkstk_darwin(v21);
  v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v24);
  v26 = (char *)&v93 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for LocalizedStringResource(0);
  v28 = *(_QWORD *)(v27 - 8);
  v112 = v27;
  __chkstk_darwin(v27);
  v105 = (char *)&v93 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100012E18(&qword_1005CEF08);
  v30 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v30);
  v31 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 104);
  v106 = v17;
  v32(v20, enum case for LocalizedStringResource.BundleDescription.main(_:), v17);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0, 0, v23, v20, "Parameter title for Create Attachment intent", 44, 2);
  v33 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100478930);
  static Locale.current.getter(v33);
  v32(v20, v31, v17);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0, 0, v23, v20, "Parameter description for name", 30, 2);
  v111 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56);
  v111(v16, 0, 1, v27);
  v34 = type metadata accessor for String.IntentInputOptions(0);
  v116 = 0;
  v117 = 0;
  v35 = v96;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v96, 1, 1, v34);
  v108 = type metadata accessor for IntentDialog(0);
  v104 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 56);
  v36 = v109;
  v104(v109, 1, 1, v108);
  v107 = enum case for InputConnectionBehavior.default(_:);
  v103 = *(_QWORD *)(v103 + 104);
  v37 = v110;
  ((void (*)(char *))v103)(v110);
  v96 = (char *)IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v105, v16, &v116, v35, v36, v37);
  v94 = sub_100012E18(&qword_1005CF200);
  v38 = String.LocalizationValue.init(stringLiteral:)(1701603654, 0xE400000000000000);
  static Locale.current.getter(v38);
  v101 = v31;
  v39 = v106;
  v102 = v32;
  v32(v20, v31, v106);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0, 0, v23, v20, "Parameter title for Create Attachment intent", 44, 2);
  v40 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100478950);
  static Locale.current.getter(v40);
  v32(v20, v31, v39);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0, 0, v23, v20, "Parameter description for file", 30, 2);
  v93 = v16;
  v111(v16, 0, 1, v112);
  v41 = type metadata accessor for IntentFile(0);
  v42 = v95;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v95, 1, 1, v41);
  v43 = v109;
  v104(v109, 1, 1, v108);
  v44 = sub_100012E18(&qword_1005CF208);
  v45 = type metadata accessor for UTType(0);
  v46 = swift_allocObject(v44, ((*(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v45 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v45 - 8) + 80) | 7);
  *(_OWORD *)(v46 + 16) = xmmword_100451C20;
  static UTType.item.getter(v46);
  v47 = v110;
  v48 = v113;
  ((void (*)(char *, _QWORD, uint64_t))v103)(v110, v107, v113);
  v49 = v16;
  v50 = v43;
  v51 = v43;
  v52 = v47;
  v95 = (char *)IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)(v105, v49, v42, v46, v50, v47);
  v94 = sub_100012E18(&qword_1005CEFD8);
  v53 = String.LocalizationValue.init(stringLiteral:)(5001813, 0xE300000000000000);
  static Locale.current.getter(v53);
  v54 = v101;
  v55 = v106;
  v56 = v102;
  v102(v20, v101, v106);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0, 0, v23, v20, "Parameter title for Create attachment intent", 44, 2);
  v57 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001004789C0);
  static Locale.current.getter(v57);
  v56(v20, v54, v55);
  v58 = v93;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0, 0, v23, v20, "Parameter description for URL", 29, 2);
  v111(v58, 0, 1, v112);
  v59 = type metadata accessor for URL(0);
  v60 = v97;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v97, 1, 1, v59);
  v61 = v51;
  v62 = v104;
  v104(v51, 1, 1, v108);
  v63 = v48;
  v64 = (void (*)(char *, _QWORD, uint64_t))v103;
  ((void (*)(char *, _QWORD, uint64_t))v103)(v52, v107, v63);
  v65 = v105;
  v97 = (char *)IntentParameter<>.init(title:description:default:requestValueDialog:inputConnectionBehavior:)(v105, v58, v60, v61, v52);
  v94 = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v66 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v66);
  v67 = v101;
  v68 = v106;
  v69 = v102;
  v102(v20, v101, v106);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0, 0, v23, v20, "Parameter title for Create attachment intent", 44, 2);
  v70 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001004789E0);
  static Locale.current.getter(v70);
  v69(v20, v67, v68);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v26, 0, 0, v23, v20, "Parameter description for note", 30, 2);
  v71 = v58;
  v111(v58, 0, 1, v112);
  v72 = type metadata accessor for NoteEntity(0);
  v73 = v99;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v99, 1, 1, v72);
  v74 = v108;
  v75 = v109;
  v62(v109, 1, 1, v108);
  v76 = v98;
  v62(v98, 1, 1, v74);
  v116 = sub_1001E9508();
  v117 = v77;
  v118 = v78;
  v119 = v79 & 1;
  v80 = (uint64x2_t)vdupq_n_s64(v79);
  v81 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v80, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v80, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v81.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v81), (int8x8_t)0x1000100010001);
  v120 = vmovn_s16(v81).u32[0];
  v82 = v110;
  v64(v110, v107, v113);
  v83 = sub_100127D40();
  v84 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v65, v71, v73, v75, v76, v82, &v116, &type metadata for VisibleNotesQuery, v83);
  sub_100012E18(&qword_1005CEE50);
  v114 = 0xD000000000000021;
  v115 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(&v116, &v114, &type metadata for String, &protocol witness table for String);
  v85 = type metadata accessor for AppDependencyManager(0);
  v86 = static AppDependencyManager.shared.getter(v85);
  v87 = AppDependency.__allocating_init(key:manager:)(&v116, v86);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v114 = 0xD000000000000024;
  v115 = 0x8000000100476B40;
  v88 = AnyHashable.init<A>(_:)(&v116, &v114, &type metadata for String, &protocol witness table for String);
  v89 = static AppDependencyManager.shared.getter(v88);
  result = AppDependency.__allocating_init(key:manager:)(&v116, v89);
  v91 = v100;
  v92 = v95;
  *v100 = v96;
  v91[1] = v92;
  v91[2] = v97;
  v91[3] = (char *)v84;
  v91[4] = 0;
  v91[5] = 0;
  *((_BYTE *)v91 + 48) = 1;
  v91[7] = (char *)v87;
  v91[8] = (char *)result;
  return result;
}

uint64_t sub_1003B3B0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

void sub_1003B3B68(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1003B2810(*(void **)(v1 + 16), *(void **)(v1 + 24), v1 + 32, a1);
}

_QWORD *sub_1003B3B84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[7];
  v6 = a1[8];
  swift_retain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

unint64_t sub_1003B3BF4()
{
  unint64_t result;

  result = qword_1005DBD98;
  if (!qword_1005DBD98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CreateAttachmentIntent, &type metadata for CreateAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DBD98);
  }
  return result;
}

unint64_t sub_1003B3C3C()
{
  unint64_t result;

  result = qword_1005DBDA0;
  if (!qword_1005DBDA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CreateAttachmentIntent, &type metadata for CreateAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DBDA0);
  }
  return result;
}

unint64_t sub_1003B3C84()
{
  unint64_t result;

  result = qword_1005DBDA8;
  if (!qword_1005DBDA8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CreateAttachmentIntent, &type metadata for CreateAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DBDA8);
  }
  return result;
}

unint64_t sub_1003B3CCC()
{
  unint64_t result;

  result = qword_1005DBDB0;
  if (!qword_1005DBDB0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CreateAttachmentIntent, &type metadata for CreateAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DBDB0);
  }
  return result;
}

uint64_t sub_1003B3D10(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of CreateAttachmentIntent.perform()>>, 1)+ 8);
}

uint64_t sub_1003B3D34(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1003B3C3C();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t destroy for CreateAttachmentIntent(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[7]);
  return swift_release(a1[8]);
}

uint64_t initializeWithCopy for CreateAttachmentIntent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v7 = a2[7];
  v8 = a2[8];
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v8;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for CreateAttachmentIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = *((_OWORD *)a2 + 2);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_OWORD *)a1 + 2) = v12;
  v13 = a2[7];
  v14 = a1[7];
  a1[7] = v13;
  swift_retain(v13);
  swift_release(v14);
  v15 = a2[8];
  v16 = a1[8];
  a1[8] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t assignWithTake for CreateAttachmentIntent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(*(_QWORD *)(a1 + 16));
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_release(*(_QWORD *)(a1 + 56));
  v6 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CreateAttachmentIntent(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CreateAttachmentIntent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CreateAttachmentIntent()
{
  return &type metadata for CreateAttachmentIntent;
}

uint64_t sub_1003B4030()
{
  return sub_1003B4078(&qword_1005D4570, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1003B4054()
{
  return sub_1003B4078(&qword_1005D4580, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1003B4078(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10001537C(&qword_1005D4578);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003B40BC()
{
  return 7;
}

objc_class *sub_1003B40C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  UIMenuElementSize preferredElementSize;
  id v7;
  Swift::String v8;
  Class isa;
  UIMenuElementSize v10;
  id v11;
  Swift::String v12;
  UIMenu v13;
  void *v14;
  id v15;
  Swift::OpaquePointer v17;
  Swift::OpaquePointer v18;
  UIImage_optional v19;
  UIImage_optional v20;

  v1 = OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize = swift_allocObject(v5, 48, 7);
    *(_OWORD *)(preferredElementSize + 16) = xmmword_100451BF0;
    *(_QWORD *)(preferredElementSize + 32) = sub_1003B4544();
    v7 = sub_1003B46AC();
    *(_QWORD *)(preferredElementSize + 40) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v19.value.super.isa = 0;
    v19.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v19, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v17).super.super.isa;
    v10 = swift_allocObject(v5, 48, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100451BF0;
    v11 = sub_1003B4364();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = isa;
    specialized Array._endMutation()(v11);
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v20.value.super.isa = 0;
    v20.is_nil = 0;
    v13.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v20, 0, 0xFFFFFFFFFFFFFFFFLL, v10, v18).super.super.isa;
    v14 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v13;
    v3 = v13.super.super.isa;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_1003B4230()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  _BOOL8 v14;
  id v15;

  v1 = (void *)sub_1003B4364();
  v2 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  v5 = 1;
  if (v3)
  {
    v4 = objc_opt_self(ICFoldersFilterTypeSelection);
    if (swift_dynamicCastObjCClass(v3, v4))
      v5 = 0;
  }
  objc_msgSend(v1, "setState:", v5);

  v6 = sub_1003B4544();
  v7 = *(_QWORD *)(v0 + v2);
  v10 = 0;
  if (v7)
  {
    v8 = objc_opt_self(ICFoldersFilterTypeSelection);
    v9 = (void *)swift_dynamicCastObjCClass(v7, v8);
    if (v9)
    {
      if (!objc_msgSend(v9, "inclusionType"))
        v10 = 1;
    }
  }
  objc_msgSend(v6, "setState:", v10);

  v15 = sub_1003B46AC();
  v11 = *(_QWORD *)(v0 + v2);
  v14 = 0;
  if (v11)
  {
    v12 = objc_opt_self(ICFoldersFilterTypeSelection);
    v13 = (void *)swift_dynamicCastObjCClass(v11, v12);
    if (v13)
    {
      if (objc_msgSend(v13, "inclusionType") == (id)1)
        v14 = 1;
    }
  }
  objc_msgSend(v15, "setState:", v14);

}

id sub_1003B4364()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056D400, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003B4CDC, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_1003B44C0(uint64_t a1, char *a2)
{
  void *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  sub_1003B4230();
  v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    v5 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v6 = swift_retain(v5);
    v4(v6);
    sub_100012C50((uint64_t)v4, v5);
  }
}

id sub_1003B4544()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056D3D8, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003B4CB4, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_1003B46AC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056D3B0, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003B4C8C, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_1003B4814(uint64_t a1, char a2)
{
  char *v2;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t result;
  void (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  Class isa;
  id v22;
  void *v23;
  id v24;

  if ((a2 & 1) == 0
    && (v4 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext")) != 0
    && (v5 = v4, v6 = objc_msgSend(v4, "managedObjectContext"), v5, v6))
  {
    v7 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection;
    v8 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
    if (v8
      && (v9 = objc_opt_self(ICFoldersFilterTypeSelection),
          (v10 = (void *)swift_dynamicCastObjCClass(v8, v9)) != 0))
    {
      v11 = objc_msgSend(v10, "folderIdentifiers");
      v12 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for String);

    }
    else
    {
      v12 = _swiftEmptyArrayStorage;
    }
    v19 = objc_allocWithZone((Class)ICFoldersFilterTypeSelection);
    v20 = v6;
    isa = Array._bridgeToObjectiveC()().super.isa;
    v22 = objc_msgSend(v19, "initWithManagedObjectContext:inclusionType:folderIdentifiers:", v20, a1, isa, swift_bridgeObjectRelease(v12).n128_f64[0]);

    v23 = *(void **)&v2[v7];
    *(_QWORD *)&v2[v7] = v22;
    v24 = v22;

    objc_msgSend(v2, "setNeedsUpdateConfiguration");
  }
  else
  {
    v13 = *(void **)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
    *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

    v14 = objc_msgSend(v2, "setNeedsUpdateConfiguration");
  }
  result = sub_1003B4230(v14);
  v16 = *(void (**)(uint64_t))&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v16)
  {
    v17 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v18 = swift_retain(v17);
    v16(v18);
    return sub_100012C50((uint64_t)v16, v17);
  }
  return result;
}

id sub_1003B4A94(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellFolders();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

void sub_1003B4B34()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionOff));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionInclude));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes31FolderComposerFilterCellFolders____lazy_storage___menuActionExclude));
}

id sub_1003B4B80()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellFolders();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellFolders()
{
  return objc_opt_self(_TtC11MobileNotes31FolderComposerFilterCellFolders);
}

objc_class *sub_1003B4C28()
{
  return sub_1003B40C4();
}

void sub_1003B4C48()
{
  sub_1003B4230();
}

uint64_t sub_1003B4C68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003B4C8C()
{
  return sub_1003B4814(1, 0);
}

uint64_t sub_1003B4CB4()
{
  return sub_1003B4814(0, 0);
}

void sub_1003B4CDC(uint64_t a1)
{
  uint64_t v1;

  sub_1003B44C0(a1, *(char **)(v1 + 16));
}

uint64_t type metadata accessor for UpdatePaperThumbnailsActivity()
{
  return objc_opt_self(ICUpdatePaperThumbnailsActivity);
}

id sub_1003B4F64()
{
  char *v0;
  char *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v1 = v0;
  type metadata accessor for SystemPaperThumbnailService(0);
  v2 = (void *)static SystemPaperThumbnailService.shared.getter();
  SystemPaperThumbnailService.invalidate(for:)(0);

  v3 = (void *)static SystemPaperThumbnailService.shared.getter();
  v4 = *(_QWORD *)&v1[OBJC_IVAR___ICUpdatePaperThumbnailsActivity_note];
  SystemPaperThumbnailService.invalidate(for:)(v4);

  v5 = (void *)static SystemPaperThumbnailService.shared.getter();
  SystemPaperThumbnailService.updateIfNeeded(for:completion:)(0, 0, 0);

  v6 = (void *)static SystemPaperThumbnailService.shared.getter();
  SystemPaperThumbnailService.updateIfNeeded(for:completion:)(v4, 0, 0);

  return objc_msgSend(v1, "activityDidFinish:", 1);
}

uint64_t sub_1003B5020()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

_QWORD *initializeBufferWithCopyOfBuffer for GroupActivitiesDebugSection(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  id v4;

  v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = v3;
  return a1;
}

void destroy for GroupActivitiesDebugSection(uint64_t a1)
{

}

_QWORD *assignWithCopy for GroupActivitiesDebugSection(_QWORD *a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  id v5;

  *a1 = *a2;
  v3 = (void *)a2[1];
  v4 = (void *)a1[1];
  a1[1] = v3;
  v5 = v3;

  return a1;
}

_QWORD *assignWithTake for GroupActivitiesDebugSection(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;

  v3 = a2[1];
  v4 = (void *)a1[1];
  *a1 = *a2;
  a1[1] = v3;

  return a1;
}

ValueMetadata *type metadata accessor for GroupActivitiesDebugSection()
{
  return &type metadata for GroupActivitiesDebugSection;
}

uint64_t sub_1003B50F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1005089EC, 1);
}

uint64_t sub_1003B5104@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  char v19[24];

  v6 = &a2[OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities];
  swift_beginAccess(&a2[OBJC_IVAR___ICGroupActivityDebugStatusController_groupActivities], v19, 0, 0);
  v7 = *(_QWORD *)v6;
  if (*(_QWORD *)(v7 + 16))
  {
    v18 = v7;
    v8 = swift_allocObject(&unk_10056D4E8, 32, 7);
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    swift_bridgeObjectRetain(v7);
    v9 = a2;
    v10 = sub_100012E18(&qword_1005DBE38);
    v11 = sub_100012E18(&qword_1005DBE40);
    v12 = sub_100016638(&qword_1005DBE48, &qword_1005DBE38, (uint64_t)&protocol conformance descriptor for [A]);
    v13 = sub_1003B6354();
    v14 = sub_1003B645C();
    ForEach<>.init(_:content:)(&v18, sub_1003B634C, v8, v10, &type metadata for String, v11, v12, v13, v14);
    v15 = sub_100012E18(&qword_1005DBE80);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a3, 0, 1, v15);
  }
  else
  {
    v17 = sub_100012E18(&qword_1005DBE80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a3, 1, 1, v17);
  }
}

void *sub_1003B5268@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  char v14;
  double v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  void *result;
  _BYTE v25[304];
  char v26;
  char v27;
  _BYTE __src[296];

  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = (void *)a1[3];
  v11 = static HorizontalAlignment.leading.getter(a1);
  sub_1003B53B0(v7, v8, v9, v10, a2, a3, __src);
  KeyPath = swift_getKeyPath(&unk_100466810, v12);
  v14 = static Edge.Set.horizontal.getter(KeyPath);
  if (objc_msgSend((id)objc_opt_self(ICDeviceSupport), "deviceIsMac"))
    v15 = 12.0;
  else
    v15 = 8.0;
  v25[296] = 0;
  memcpy(&v25[7], __src, 0x121uLL);
  v26 = 0;
  v16 = EdgeInsets.init(_all:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v23 = v26;
  v27 = 0;
  *(_QWORD *)a4 = v11;
  *(_QWORD *)(a4 + 8) = 0x4000000000000000;
  *(_BYTE *)(a4 + 16) = 0;
  result = memcpy((void *)(a4 + 17), v25, 0x128uLL);
  *(_QWORD *)(a4 + 320) = KeyPath;
  *(_QWORD *)(a4 + 328) = 1;
  *(_BYTE *)(a4 + 336) = v23;
  *(_BYTE *)(a4 + 344) = v14;
  *(double *)(a4 + 352) = v16;
  *(_QWORD *)(a4 + 360) = v18;
  *(_QWORD *)(a4 + 368) = v20;
  *(_QWORD *)(a4 + 376) = v22;
  *(_BYTE *)(a4 + 384) = v27;
  return result;
}

void *sub_1003B53B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, void *a7@<X8>)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[31];
  _OWORD v86[13];
  uint64_t v87;
  _OWORD v88[14];
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  _OWORD v102[2];
  _QWORD v103[2];
  _OWORD v104[14];
  _BYTE v105[7];
  char v106;
  _DWORD v107[2];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  _QWORD v123[2];
  char v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  _BYTE v137[31];
  _BYTE __src[289];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  _BYTE v157[7];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD __dst[39];

  if (a4)
  {
    v70 = static VerticalAlignment.firstTextBaseline.getter();
    sub_1003B5BF4(a3, a4, a5, a6, a1, a2, a3, (uint64_t)a4, (uint64_t)v86);
    v89 = 1;
    *(_OWORD *)((char *)&v88[10] + 7) = v86[10];
    *(_OWORD *)((char *)&v88[11] + 7) = v86[11];
    *(_OWORD *)((char *)&v88[12] + 7) = v86[12];
    *(_QWORD *)((char *)&v88[13] + 7) = v87;
    *(_OWORD *)((char *)&v88[6] + 7) = v86[6];
    *(_OWORD *)((char *)&v88[7] + 7) = v86[7];
    *(_OWORD *)((char *)&v88[8] + 7) = v86[8];
    *(_OWORD *)((char *)&v88[9] + 7) = v86[9];
    *(_OWORD *)((char *)&v88[2] + 7) = v86[2];
    *(_OWORD *)((char *)&v88[3] + 7) = v86[3];
    *(_OWORD *)((char *)&v88[4] + 7) = v86[4];
    *(_OWORD *)((char *)&v88[5] + 7) = v86[5];
    *(_OWORD *)((char *)v88 + 7) = v86[0];
    *(_OWORD *)((char *)&v88[1] + 7) = v86[1];
    v100 = v88[10];
    v101 = v88[11];
    v102[0] = v88[12];
    *(_OWORD *)((char *)v102 + 15) = *(_OWORD *)((char *)&v88[12] + 15);
    v96 = v88[6];
    v97 = v88[7];
    v98 = v88[8];
    v99 = v88[9];
    v92 = v88[2];
    v93 = v88[3];
    v94 = v88[4];
    v95 = v88[5];
    v90 = v88[0];
    v91 = v88[1];
    __dst[0] = a1;
    __dst[1] = a2;
    v13 = sub_1001452E8();
    swift_bridgeObjectRetain(a2);
    v14 = Text.init<A>(_:)(__dst, &type metadata for String, v13);
    v16 = v15;
    v18 = v17;
    v20 = v19 & 1;
    v21 = static Font.caption.getter(v14);
    v22 = Font.monospacedDigit()();
    swift_release(v21);
    v23 = Text.font(_:)(v22, v14, v16, v20, v18);
    v25 = v24;
    v27 = v26;
    v67 = v28;
    swift_release(v22);
    sub_10014BCF0(v14, v16, v20);
    swift_bridgeObjectRelease(v18);
    KeyPath = swift_getKeyPath(&unk_100466840, v29);
    v83 = v100;
    v84 = v101;
    *(_OWORD *)v85 = v102[0];
    *(_OWORD *)&v85[15] = *(_OWORD *)((char *)v102 + 15);
    v79 = v96;
    v80 = v97;
    v81 = v98;
    v82 = v99;
    v75 = v92;
    v76 = v93;
    v77 = v94;
    v78 = v95;
    v73 = v90;
    v74 = v91;
    *(_OWORD *)((char *)&v104[10] + 1) = v100;
    *(_OWORD *)((char *)&v104[11] + 1) = v101;
    *(_OWORD *)((char *)&v104[12] + 1) = v102[0];
    v104[13] = *(_OWORD *)((char *)v102 + 15);
    *(_OWORD *)((char *)&v104[6] + 1) = v96;
    *(_OWORD *)((char *)&v104[7] + 1) = v97;
    *(_OWORD *)((char *)&v104[8] + 1) = v98;
    *(_OWORD *)((char *)&v104[9] + 1) = v99;
    *(_OWORD *)((char *)&v104[2] + 1) = v92;
    *(_OWORD *)((char *)&v104[3] + 1) = v93;
    *(_OWORD *)((char *)&v104[4] + 1) = v94;
    *(_OWORD *)((char *)&v104[5] + 1) = v95;
    v103[0] = v70;
    v103[1] = 0;
    LOBYTE(v104[0]) = 1;
    *(_OWORD *)((char *)v104 + 1) = v90;
    *(_OWORD *)((char *)&v104[1] + 1) = v91;
    v120 = v104[11];
    v121 = v104[12];
    v122 = *(_OWORD *)((char *)v102 + 15);
    v116 = v104[7];
    v117 = v104[8];
    v119 = v104[10];
    v118 = v104[9];
    v112 = v104[3];
    v113 = v104[4];
    v115 = v104[6];
    v114 = v104[5];
    v108 = (unint64_t)v70;
    v109 = v104[0];
    v111 = v104[2];
    v110 = v104[1];
    v106 = v27 & 1;
    v107[0] = *(_DWORD *)v105;
    *(_DWORD *)((char *)v107 + 3) = *(_DWORD *)&v105[3];
    sub_1003B6548((uint64_t)v103);
    sub_10014BCE0(v23, v25, v27 & 1);
    swift_bridgeObjectRetain(v67);
    swift_retain(KeyPath);
    sub_1003B6658((uint64_t)v86);
    sub_10014BCE0(v23, v25, v27 & 1);
    swift_bridgeObjectRetain(v67);
    swift_retain(KeyPath);
    sub_10014BCF0(v23, v25, v27 & 1);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v67);
    v135 = v83;
    v136 = v84;
    *(_OWORD *)v137 = *(_OWORD *)v85;
    *(_OWORD *)&v137[15] = *(_OWORD *)&v85[15];
    v131 = v79;
    v132 = v80;
    v133 = v81;
    v134 = v82;
    v127 = v75;
    v128 = v76;
    v129 = v77;
    v130 = v78;
    v125 = v73;
    v123[0] = v70;
    v123[1] = 0;
    v124 = 1;
    v126 = v74;
    sub_1003B6768((uint64_t)v123);
    v151 = v120;
    v152 = v121;
    v153 = v122;
    v147 = v116;
    v148 = v117;
    v150 = v119;
    v149 = v118;
    v143 = v112;
    v144 = v113;
    v146 = v115;
    v145 = v114;
    v139 = v108;
    v140 = v109;
    v142 = v111;
    v141 = v110;
    v154 = v23;
    v155 = v25;
    v156 = v27 & 1;
    *(_DWORD *)v157 = v107[0];
    *(_DWORD *)&v157[3] = *(_DWORD *)((char *)v107 + 3);
    v158 = v67;
    v159 = KeyPath;
    v160 = 0x3FE0000000000000;
    sub_1003B687C((uint64_t)&v139);
    sub_1003B6500((uint64_t)&v139, (uint64_t)__dst);
    v31 = sub_100012E18(&qword_1005DBE90);
    v32 = sub_100012E18(&qword_1005DBE98);
    v33 = sub_100016638(&qword_1005DBEA0, &qword_1005DBE90, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v34 = sub_100016638(&qword_1005DBEA8, &qword_1005DBE98, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(__dst, v31, v32, v33, v34);
    sub_10014BCF0(v23, v25, v27 & 1);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v67);
    sub_1003B6884((uint64_t)v86);
  }
  else
  {
    __dst[0] = a1;
    __dst[1] = a2;
    v66 = sub_1001452E8();
    swift_bridgeObjectRetain(a2);
    v35 = Text.init<A>(_:)(__dst, &type metadata for String, v66);
    v37 = v36;
    v39 = v38;
    v41 = v40 & 1;
    v42 = static Font.body.getter();
    v43 = Font.monospacedDigit()();
    swift_release(v42);
    v68 = Text.font(_:)(v43, v35, v37, v41, v39);
    v69 = v44;
    v71 = v45;
    LOBYTE(v42) = v46;
    swift_release(v43);
    sub_10014BCF0(v35, v37, v41);
    swift_bridgeObjectRelease(v39);
    v48 = swift_getKeyPath(&unk_100466840, v47);
    v49 = a6;
    v50 = sub_1003AD620(a1, a2, a3, 0);
    v52 = v51;

    __dst[0] = v50;
    __dst[1] = v52;
    v53 = Text.init<A>(_:)(__dst, &type metadata for String, v66);
    v55 = v54;
    v57 = v56;
    v59 = v58 & 1;
    sub_10014BCE0(v68, v71, v42 & 1);
    swift_bridgeObjectRetain(v69);
    swift_retain(v48);
    sub_10014BCE0(v53, v55, v59);
    swift_bridgeObjectRetain(v57);
    v65 = v42 & 1;
    sub_10014BCE0(v68, v71, v42 & 1);
    swift_bridgeObjectRetain(v69);
    swift_retain(v48);
    sub_10014BCE0(v53, v55, v59);
    swift_bridgeObjectRetain(v57);
    sub_10014BCF0(v53, v55, v59);
    swift_bridgeObjectRelease(v57);
    sub_10014BCF0(v68, v71, v42 & 1);
    swift_release(v48);
    swift_bridgeObjectRelease(v69);
    *(_QWORD *)&v139 = v68;
    *((_QWORD *)&v139 + 1) = v71;
    LOBYTE(v140) = v42 & 1;
    *((_QWORD *)&v140 + 1) = v69;
    *(_QWORD *)&v141 = v48;
    *((_QWORD *)&v141 + 1) = 0x3FE0000000000000;
    *(_QWORD *)&v142 = v53;
    *((_QWORD *)&v142 + 1) = v55;
    LOBYTE(v143) = v59;
    *((_QWORD *)&v143 + 1) = v57;
    sub_1003B64F4((uint64_t)&v139);
    sub_1003B6500((uint64_t)&v139, (uint64_t)__dst);
    v60 = sub_100012E18(&qword_1005DBE90);
    v61 = sub_100012E18(&qword_1005DBE98);
    v62 = sub_100016638(&qword_1005DBEA0, &qword_1005DBE90, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v63 = sub_100016638(&qword_1005DBEA8, &qword_1005DBE98, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(__dst, v60, v61, v62, v63);
    sub_10014BCF0(v53, v55, v59);
    swift_bridgeObjectRelease(v57);
    sub_10014BCF0(v68, v71, v65);
    swift_release(v48);
    swift_bridgeObjectRelease(v69);
  }
  memcpy(__dst, __src, 0x121uLL);
  return memcpy(a7, __dst, 0x121uLL);
}

void sub_1003B5BF4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t KeyPath;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[7];
  char v87;
  _BYTE v88[7];
  char v89;
  int v90;
  __int16 v91;
  _BYTE v92[7];
  char v93;
  _BYTE v94[7];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[151];
  char v105;
  _BYTE v106[7];
  char v107;
  _BYTE v108[7];
  char v109;
  char v110;
  _BYTE v111[7];
  uint64_t v112;
  uint64_t v113;
  char v114;
  _BYTE v115[7];
  uint64_t v116;
  char v117;
  char v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  void *v122;
  char v123;
  _BYTE v124[7];
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  _BYTE v129[7];
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v78 = a7;
  v79 = a8;
  v76 = a5;
  v77 = a6;
  v74 = a3;
  v75 = a4;
  v12 = type metadata accessor for LocalizedStringKey.StringInterpolation(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  LocalizedStringKey.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1, v15);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v16);
  v17._countAndFlagsBits = a1;
  v17._object = a2;
  LocalizedStringKey.StringInterpolation.appendInterpolation(_:)(v17);
  v18._countAndFlagsBits = 0;
  v18._object = (void *)0xE000000000000000;
  LocalizedStringKey.StringInterpolation.appendLiteral(_:)(v18);
  v19 = LocalizedStringKey.init(stringInterpolation:)(v14);
  v20 = Text.init(_:tableName:bundle:comment:)(v19);
  v22 = v21;
  v24 = v23;
  v26 = v25 & 1;
  v27 = static Font.Weight.medium.getter(v20);
  v28 = Text.fontWeight(_:)(*(_QWORD *)&v27, 0, v20, v22, v26, v24);
  v84 = v29;
  v85 = v28;
  v83 = v30;
  v82 = v31 & 1;
  sub_10014BCF0(v20, v22, v26);
  swift_bridgeObjectRelease(v24);
  KeyPath = swift_getKeyPath(&unk_100466810, v32);
  v33 = static Axis.Set.horizontal.getter();
  LOBYTE(a1) = v33;
  v80 = v33;
  sub_1003B60DC(v75, v76, v77, v78, v79, (uint64_t)v104);
  v34 = *(_QWORD *)v104;
  v71 = *(_QWORD *)&v104[8];
  v35 = *(_QWORD *)&v104[24];
  v72 = v104[33];
  v73 = v104[32];
  v36 = *(_QWORD *)&v104[40];
  v78 = *(_QWORD *)&v104[64];
  v77 = *(_QWORD *)&v104[72];
  v75 = *(void **)&v104[48];
  v76 = *(_QWORD *)&v104[80];
  v37 = *(_QWORD *)&v104[96];
  v79 = *(_QWORD *)&v104[104];
  v38 = *(_QWORD *)&v104[112];
  v93 = v104[16];
  v89 = v104[56];
  v87 = v104[88];
  LOBYTE(a2) = v104[88];
  LOBYTE(v14) = v104[16];
  v69 = v104[16];
  v70 = v104[56];
  v74 = static Color.secondary.getter(v39);
  v41 = swift_getKeyPath(&unk_100466870, v40);
  LOBYTE(v95) = a1;
  v42 = *(_DWORD *)v94;
  *(_DWORD *)((char *)&v95 + 1) = *(_DWORD *)v94;
  DWORD1(v95) = *(_DWORD *)&v94[3];
  v43 = v34;
  v44 = v71;
  *((_QWORD *)&v95 + 1) = v34;
  *(_QWORD *)&v96 = v71;
  BYTE8(v96) = (_BYTE)v14;
  LODWORD(v34) = *(_DWORD *)v92;
  *(_DWORD *)((char *)&v96 + 9) = *(_DWORD *)v92;
  HIDWORD(v96) = *(_DWORD *)&v92[3];
  v45 = v35;
  *(_QWORD *)&v97 = v35;
  v47 = v72;
  v46 = v73;
  BYTE8(v97) = v73;
  BYTE9(v97) = v72;
  LODWORD(v35) = v90;
  *(_DWORD *)((char *)&v97 + 10) = v90;
  HIWORD(v97) = v91;
  v48 = v36;
  v49 = v75;
  v50 = v76;
  *(_QWORD *)&v98 = v36;
  *((_QWORD *)&v98 + 1) = v75;
  v51 = v70;
  LOBYTE(v99) = v70;
  LODWORD(v36) = *(_DWORD *)v88;
  *(_DWORD *)((char *)&v99 + 1) = *(_DWORD *)v88;
  DWORD1(v99) = *(_DWORD *)&v88[3];
  v52 = v77;
  v53 = v78;
  *((_QWORD *)&v99 + 1) = v78;
  *(_QWORD *)&v100 = v77;
  *((_QWORD *)&v100 + 1) = v76;
  LOBYTE(v101) = (_BYTE)a2;
  LOBYTE(a1) = (_BYTE)a2;
  LODWORD(a2) = *(_DWORD *)v86;
  *(_DWORD *)((char *)&v101 + 1) = *(_DWORD *)v86;
  DWORD1(v101) = *(_DWORD *)&v86[3];
  v54 = v37;
  v55 = v79;
  *((_QWORD *)&v101 + 1) = v37;
  *(_QWORD *)&v102 = v79;
  *((_QWORD *)&v102 + 1) = v38;
  v56 = v74;
  *(_QWORD *)&v103 = v41;
  *((_QWORD *)&v103 + 1) = v74;
  v57 = v82;
  v109 = v82;
  v107 = 0;
  v105 = 0;
  *(_OWORD *)&v104[135] = v103;
  *(_OWORD *)&v104[119] = v102;
  *(_OWORD *)&v104[103] = v101;
  *(_OWORD *)&v104[87] = v100;
  *(_OWORD *)&v104[7] = v95;
  *(_OWORD *)&v104[71] = v99;
  *(_OWORD *)&v104[55] = v98;
  *(_OWORD *)&v104[39] = v97;
  *(_OWORD *)&v104[23] = v96;
  *(_DWORD *)(a9 + 17) = *(_DWORD *)v108;
  *(_DWORD *)(a9 + 20) = *(_DWORD *)&v108[3];
  *(_DWORD *)(a9 + 49) = *(_DWORD *)v106;
  *(_DWORD *)(a9 + 52) = *(_DWORD *)&v106[3];
  *(_BYTE *)(a9 + 16) = v109;
  *(_QWORD *)(a9 + 40) = 2;
  *(_BYTE *)(a9 + 48) = v107;
  *(_QWORD *)(a9 + 56) = 0x4010000000000000;
  *(_BYTE *)(a9 + 64) = v105;
  v135 = v44;
  *(_OWORD *)(a9 + 193) = *(_OWORD *)&v104[128];
  *(_QWORD *)(a9 + 208) = *(_QWORD *)&v104[143];
  v59 = v84;
  v58 = v85;
  v60 = v83;
  *(_QWORD *)a9 = v85;
  *(_QWORD *)(a9 + 8) = v60;
  v61 = KeyPath;
  *(_QWORD *)(a9 + 24) = v59;
  *(_QWORD *)(a9 + 32) = v61;
  v62 = *(_OWORD *)&v104[112];
  *(_OWORD *)(a9 + 161) = *(_OWORD *)&v104[96];
  *(_OWORD *)(a9 + 177) = v62;
  v63 = *(_OWORD *)&v104[48];
  *(_OWORD *)(a9 + 97) = *(_OWORD *)&v104[32];
  *(_OWORD *)(a9 + 113) = v63;
  v64 = *(_OWORD *)&v104[80];
  *(_OWORD *)(a9 + 129) = *(_OWORD *)&v104[64];
  *(_OWORD *)(a9 + 145) = v64;
  v65 = *(_OWORD *)&v104[16];
  v66 = v135;
  *(_OWORD *)(a9 + 65) = *(_OWORD *)v104;
  *(_OWORD *)(a9 + 81) = v65;
  v110 = v80;
  *(_DWORD *)v111 = v42;
  *(_DWORD *)&v111[3] = *(_DWORD *)&v94[3];
  v112 = v43;
  v113 = v66;
  v114 = v69;
  *(_DWORD *)v115 = v34;
  *(_DWORD *)&v115[3] = *(_DWORD *)&v92[3];
  v116 = v45;
  v117 = v46;
  v118 = v47;
  v120 = v91;
  v119 = v35;
  v121 = v48;
  v122 = v49;
  v123 = v51;
  *(_DWORD *)v124 = v36;
  *(_DWORD *)&v124[3] = *(_DWORD *)&v88[3];
  v125 = v53;
  v126 = v52;
  v127 = v50;
  v128 = a1;
  *(_DWORD *)v129 = (_DWORD)a2;
  *(_DWORD *)&v129[3] = *(_DWORD *)&v86[3];
  v130 = v54;
  v131 = v55;
  v132 = v38;
  v133 = v41;
  v134 = v56;
  v67 = v58;
  v68 = v60;
  LOBYTE(a1) = v57;
  sub_10014BCE0(v58, v60, v57);
  swift_bridgeObjectRetain(v59);
  swift_retain(v61);
  sub_1003B69A0((uint64_t)&v95);
  sub_1003B6A74((uint64_t)&v110);
  sub_10014BCF0(v67, v68, a1);
  swift_release(v61);
  swift_bridgeObjectRelease(v59);
}

double sub_1003B60DC@<D0>(void *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t KeyPath;
  double result;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v11 = a1;
  v12 = sub_1003AD620(a2, a3, a4, a5);
  v14 = v13;

  v46 = v12;
  v47 = v14;
  v15 = sub_1001452E8();
  v16 = Text.init<A>(_:)(&v46, &type metadata for String, v15);
  v44 = v17;
  v45 = v16;
  v43 = v18;
  v42 = v19 & 1;
  v20 = v11;
  v21 = sub_1003AD784(a2, a3, a4, a5);
  v23 = v22;

  v46 = v21;
  v47 = v23;
  v24 = Text.init<A>(_:)(&v46, &type metadata for String, v15);
  v40 = v25;
  v41 = v26;
  LOBYTE(v23) = v27 & 1;
  v28 = v20;
  v29 = sub_1003AD784(a2, a3, a4, a5);
  v31 = v30;

  v46 = v29;
  v47 = v31;
  v32 = Text.init<A>(_:)(&v46, &type metadata for String, v15);
  v34 = v33;
  v36 = v35;
  LOBYTE(a2) = v37 & 1;
  KeyPath = swift_getKeyPath(&unk_100466840, v33);
  LOBYTE(v46) = v42;
  *(_QWORD *)a6 = v45;
  *(_QWORD *)(a6 + 8) = v44;
  *(_BYTE *)(a6 + 16) = v42;
  *(_QWORD *)(a6 + 24) = v43;
  *(_WORD *)(a6 + 32) = 257;
  *(_QWORD *)(a6 + 40) = v24;
  *(_QWORD *)(a6 + 48) = v40;
  *(_BYTE *)(a6 + 56) = v23;
  *(_QWORD *)(a6 + 64) = v41;
  *(_QWORD *)(a6 + 72) = v32;
  *(_QWORD *)(a6 + 80) = v34;
  *(_BYTE *)(a6 + 88) = a2;
  *(_QWORD *)(a6 + 96) = v36;
  *(_QWORD *)(a6 + 104) = KeyPath;
  *(_QWORD *)(a6 + 112) = 0x3FE999999999999ALL;
  sub_10014BCE0(v45, v44, v42);
  swift_bridgeObjectRetain(v43);
  sub_10014BCE0(v24, v40, v23);
  swift_bridgeObjectRetain(v41);
  sub_10014BCE0(v32, v34, a2);
  swift_bridgeObjectRetain(v36);
  swift_retain(KeyPath);
  sub_10014BCF0(v32, v34, a2);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v36);
  sub_10014BCF0(v24, v40, v23);
  swift_bridgeObjectRelease(v41);
  sub_10014BCF0(v45, v44, v46);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v43).n128_u64[0];
  return result;
}

uint64_t sub_1003B6320@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1003B5104(*(_QWORD *)v1, *(char **)(v1 + 8), a1);
}

uint64_t sub_1003B6328()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void *sub_1003B634C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1003B5268(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), a2);
}

unint64_t sub_1003B6354()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DBE50;
  if (!qword_1005DBE50)
  {
    v1 = sub_10001537C(&qword_1005DBE40);
    sub_1003B63C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005DBE50);
  }
  return result;
}

unint64_t sub_1003B63C0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DBE58;
  if (!qword_1005DBE58)
  {
    v1 = sub_10001537C(&qword_1005DBE60);
    sub_100016638(&qword_1005DBE68, &qword_1005DBE70, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_100016638(&qword_1005D5810, &qword_1005D5818, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1005DBE58);
  }
  return result;
}

unint64_t sub_1003B645C()
{
  unint64_t result;

  result = qword_1005DBE78;
  if (!qword_1005DBE78)
  {
    result = swift_getWitnessTable(&unk_100466440, &type metadata for GroupActivityDebugStatusController.GroupActivityIdentifier);
    atomic_store(result, (unint64_t *)&qword_1005DBE78);
  }
  return result;
}

void sub_1003B64A8(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_1003B64D0(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_1003B64F4(uint64_t result)
{
  *(_BYTE *)(result + 288) = 1;
  return result;
}

uint64_t sub_1003B6500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005DBE88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003B6548(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_BYTE *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 152);
  v10 = *(_BYTE *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 184);
  v16 = *(_QWORD *)(a1 + 176);
  v14 = *(_BYTE *)(a1 + 192);
  v17 = *(_QWORD *)(a1 + 200);
  v18 = *(_QWORD *)(a1 + 208);
  v19 = *(_QWORD *)(a1 + 224);
  v12 = *(_QWORD *)(a1 + 168);
  v13 = *(_QWORD *)(a1 + 232);
  sub_10014BCE0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_10014BCE0(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  sub_10014BCE0(v8, v9, v10);
  swift_bridgeObjectRetain(v12);
  sub_10014BCE0(v16, v15, v14);
  swift_retain(v13);
  swift_bridgeObjectRetain(v17);
  swift_retain(v18);
  swift_retain(v19);
  return a1;
}

uint64_t sub_1003B6658(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_BYTE *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  v15 = *(_QWORD *)(a1 + 160);
  v16 = *(_QWORD *)(a1 + 152);
  v14 = *(_BYTE *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 176);
  v18 = *(_QWORD *)(a1 + 184);
  v19 = *(_QWORD *)(a1 + 200);
  v12 = *(_QWORD *)(a1 + 144);
  v13 = *(_QWORD *)(a1 + 208);
  sub_10014BCE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_10014BCE0(v4, v5, v6);
  swift_bridgeObjectRetain(v7);
  sub_10014BCE0(v8, v9, v10);
  swift_bridgeObjectRetain(v12);
  sub_10014BCE0(v16, v15, v14);
  swift_retain(v13);
  swift_bridgeObjectRetain(v17);
  swift_retain(v18);
  swift_retain(v19);
  return a1;
}

uint64_t sub_1003B6768(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 104);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_BYTE *)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_QWORD *)(a1 + 152);
  v10 = *(_BYTE *)(a1 + 160);
  v12 = *(_QWORD *)(a1 + 168);
  v14 = *(_QWORD *)(a1 + 184);
  v15 = *(_QWORD *)(a1 + 176);
  v13 = *(_BYTE *)(a1 + 192);
  v17 = *(_QWORD *)(a1 + 208);
  v18 = *(_QWORD *)(a1 + 200);
  v16 = *(_QWORD *)(a1 + 224);
  v19 = *(_QWORD *)(a1 + 232);
  sub_10014BCF0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10014BCF0(v4, v5, v6);
  swift_bridgeObjectRelease(v7);
  sub_10014BCF0(v8, v9, v10);
  swift_bridgeObjectRelease(v12);
  sub_10014BCF0(v15, v14, v13);
  swift_release(v16);
  swift_release(v17);
  swift_bridgeObjectRelease(v18);
  swift_release(v19);
  return a1;
}

uint64_t sub_1003B687C(uint64_t result)
{
  *(_BYTE *)(result + 288) = 0;
  return result;
}

uint64_t sub_1003B6884(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_BYTE *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_BYTE *)(a1 + 136);
  v12 = *(_QWORD *)(a1 + 144);
  v14 = *(_QWORD *)(a1 + 160);
  v15 = *(_QWORD *)(a1 + 152);
  v13 = *(_BYTE *)(a1 + 168);
  v17 = *(_QWORD *)(a1 + 184);
  v18 = *(_QWORD *)(a1 + 176);
  v16 = *(_QWORD *)(a1 + 200);
  v19 = *(_QWORD *)(a1 + 208);
  sub_10014BCF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10014BCF0(v4, v5, v6);
  swift_bridgeObjectRelease(v7);
  sub_10014BCF0(v8, v9, v10);
  swift_bridgeObjectRelease(v12);
  sub_10014BCF0(v15, v14, v13);
  swift_release(v16);
  swift_release(v17);
  swift_bridgeObjectRelease(v18);
  swift_release(v19);
  return a1;
}

uint64_t sub_1003B69A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_BYTE *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 136);
  v14 = *(_QWORD *)(a1 + 128);
  sub_10014BCE0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRetain(v2);
  sub_10014BCE0(v3, v4, v5);
  swift_bridgeObjectRetain(v6);
  sub_10014BCE0(v7, v8, v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  swift_retain(v14);
  return a1;
}

uint64_t sub_1003B6A74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_BYTE *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)(a1 + 88);
  v9 = *(_BYTE *)(a1 + 96);
  v12 = *(_QWORD *)(a1 + 112);
  v13 = *(_QWORD *)(a1 + 104);
  v10 = *(_QWORD *)(a1 + 128);
  v14 = *(_QWORD *)(a1 + 136);
  sub_10014BCF0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease(v2);
  sub_10014BCF0(v3, v4, v5);
  swift_bridgeObjectRelease(v6);
  sub_10014BCF0(v7, v8, v9);
  swift_release(v10);
  swift_release(v12);
  swift_bridgeObjectRelease(v13);
  swift_release(v14);
  return a1;
}

uint64_t sub_1003B6B48()
{
  return sub_1001F6450(&qword_1005DBEB0, &qword_1005DBEB8, (void (*)(void))sub_1003B6B7C, (uint64_t)&protocol conformance descriptor for <A> A?);
}

uint64_t sub_1003B6B7C()
{
  return sub_1001F6450(&qword_1005DBEC0, &qword_1005DBE80, (void (*)(void))sub_1003B6354, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
}

uint64_t sub_1003B6BA4(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void (*v18)(char *, uint64_t);
  void (*v19)(_QWORD *, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _QWORD v26[3];
  uint64_t v27;
  void *v28;

  v2 = v1;
  v4 = type metadata accessor for UIListContentConfiguration(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v26[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v26[-1] - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v26[-1] - v12;
  if (objc_msgSend(v2, "ic_inSidebar"))
    static UIListContentConfiguration.sidebarHeader()();
  else
    static UIListContentConfiguration.prominentInsetGroupedHeader()();
  v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v14(v8, v13, v4);
  v16 = type metadata accessor for UICellConfigurationState(0, v15);
  v27 = v16;
  v28 = &protocol witness table for UICellConfigurationState;
  v17 = sub_10012D160(v26);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v17, a1, v16);
  UIListContentConfiguration.updated(for:)(v26);
  v18 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18(v8, v4);
  v18(v13, v4);
  sub_1000153C0(v26);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v13, v11, v4);
  v19 = (void (*)(_QWORD *, _QWORD))UIListContentConfiguration.directionalLayoutMargins.modify(v26);
  *(_QWORD *)(v20 + 8) = 0x4030000000000000;
  v19(v26, 0);
  v21 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes13TagHeaderCell_text];
  v22 = *(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes13TagHeaderCell_text + 8];
  swift_bridgeObjectRetain(v22);
  UIListContentConfiguration.text.setter(v21, v22);
  v27 = v4;
  v28 = &protocol witness table for UIListContentConfiguration;
  v23 = (char *)sub_10012D160(v26);
  v14(v23, v13, v4);
  UICollectionViewCell.contentConfiguration.setter(v26);
  return ((uint64_t (*)(char *, uint64_t))v18)(v13, v4);
}

uint64_t type metadata accessor for TagHeaderCell()
{
  return objc_opt_self(_TtC11MobileNotes13TagHeaderCell);
}

void sub_1003B6F34(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;

  v7 = (_QWORD *)(v4 + OBJC_IVAR___ICTagCell_displayText);
  v8 = *(_QWORD *)(v4 + OBJC_IVAR___ICTagCell_displayText + 8);
  *v7 = a1;
  v7[1] = a2;
  swift_bridgeObjectRetain(a2);
  objc_msgSend(*(id *)(v4 + OBJC_IVAR___ICTagCell_imageView), "setImage:", 0, swift_bridgeObjectRelease(v8).n128_f64[0]);
  sub_1003B9AFC(0);
  *(_BYTE *)(v4 + OBJC_IVAR___ICTagCell_includeSymbolPrefix) = a3;
  *(_BYTE *)(v4 + OBJC_IVAR___ICTagCell_hasGroupInset) = a4;
  sub_1003B7138();
  sub_1003B8EB4();
}

NSString sub_1003B6FC0()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_100601F30 = (uint64_t)result;
  return result;
}

void sub_1003B7138()
{
  char *v0;
  id v1;
  double v2;
  BOOL v3;
  double v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  void *v24;
  id v25;
  CGRect v26;

  v1 = objc_msgSend(v0, "superview");
  if (v1)
  {
    v25 = v1;
    if ((v0[OBJC_IVAR___ICTagCell_hasGroupInset] & 1) != 0)
    {
      v2 = 32.0;
    }
    else
    {
      v3 = objc_msgSend((id)objc_opt_self(UIDevice), "ic_isVision") == 0;
      v1 = v25;
      if (v3)
        v2 = 0.0;
      else
        v2 = 24.0;
    }
    objc_msgSend(v1, "bounds");
    v4 = CGRectGetWidth(v26) - v2;
    v5 = OBJC_IVAR___ICTagCell_maxWidthConstraint;
    v6 = *(void **)&v0[OBJC_IVAR___ICTagCell_maxWidthConstraint];
    if (v6)
    {
      objc_msgSend(v6, "setConstant:", v4);
    }
    else
    {
      v7 = objc_msgSend(v0, "contentView");
      v8 = objc_msgSend(v7, "widthAnchor");

      v9 = objc_msgSend(v8, "constraintLessThanOrEqualToConstant:", v4);
      v10 = *(void **)&v0[v5];
      *(_QWORD *)&v0[v5] = v9;

      v11 = *(void **)&v0[v5];
      if (v11)
        objc_msgSend(v11, "setActive:", 1);
    }
    v12 = objc_msgSend((id)objc_opt_self(UIFontMetrics), "defaultMetrics");
    v13 = objc_msgSend(v0, "traitCollection");
    v14 = 32.0;
    objc_msgSend(v12, "scaledValueForValue:compatibleWithTraitCollection:", v13, 32.0);
    v16 = v15;

    if (v16 > 32.0)
      v14 = v16;
    v17 = OBJC_IVAR___ICTagCell_minWidthConstraint;
    v18 = *(void **)&v0[OBJC_IVAR___ICTagCell_minWidthConstraint];
    if (v18)
    {
      v19 = v18;
      objc_msgSend(v19, "setConstant:", v14);
    }
    else
    {
      v20 = objc_msgSend(v0, "contentView");
      v21 = objc_msgSend(v20, "widthAnchor");

      v22 = objc_msgSend(v21, "constraintGreaterThanOrEqualToConstant:", v14);
      v23 = *(void **)&v0[v17];
      *(_QWORD *)&v0[v17] = v22;

      v24 = *(void **)&v0[v17];
      if (!v24)
      {
LABEL_19:

        return;
      }
      v19 = v24;
      objc_msgSend(v19, "setActive:", 1);
    }

    goto LABEL_19;
  }
}

void sub_1003B747C()
{
  char *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  int v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  double v29;

  v1 = objc_msgSend(v0, "contentView");
  if (*(_QWORD *)&v0[OBJC_IVAR___ICTagCell_displayImage])
  {
    v2 = sub_1003B8418();
LABEL_11:
    v3 = v2;
    goto LABEL_12;
  }
  if (v0[OBJC_IVAR___ICTagCell_isEmphasized] != 1)
  {
    if (v0[OBJC_IVAR___ICTagCell_isExcluded] == 1)
      v8 = OBJC_IVAR___ICTagCell_excludedBackgroundColor;
    else
      v8 = OBJC_IVAR___ICTagCell_unemphasizedBackgroundColor;
    v2 = *(id *)&v0[v8];
    goto LABEL_11;
  }
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v4 = objc_msgSend(v0, "traitCollection");
  v5 = objc_msgSend(v4, "accessibilityContrast");

  if (v5 == (id)1)
  {
    v6 = (id)ICAccessibilitySystemDarkenedColor(v3);
    if (!v6)
    {
LABEL_34:
      __break(1u);
      return;
    }
    v7 = v6;

    v3 = v7;
  }
LABEL_12:
  objc_msgSend(v1, "setBackgroundColor:", v3);

  v9 = *(void **)&v0[OBJC_IVAR___ICTagCell_textLabel];
  if (v0[OBJC_IVAR___ICTagCell_isEmphasized] != 1)
  {
    v11 = v0[OBJC_IVAR___ICTagCell_isExcluded];
    v12 = (id)objc_opt_self(UIColor);
    if (v11 == 1)
    {
      v10 = objc_msgSend(v12, "ICTintColor");
      v13 = objc_msgSend(v0, "traitCollection");
      v14 = objc_msgSend(v13, "accessibilityContrast");

      if (v14 != (id)1)
        goto LABEL_21;
      v12 = (id)ICAccessibilitySystemDarkenedColor(v10);
      if (v12)
      {
LABEL_20:
        v17 = v12;

        v10 = v17;
        goto LABEL_21;
      }
      __break(1u);
    }
    v10 = objc_msgSend(v12, "secondaryLabelColor");
    v15 = objc_msgSend(v0, "traitCollection");
    v16 = objc_msgSend(v15, "accessibilityContrast");

    if (v16 != (id)1)
      goto LABEL_21;
    v12 = (id)ICAccessibilitySystemDarkenedColor(v10);
    if (!v12)
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    goto LABEL_20;
  }
  v10 = *(id *)&v0[OBJC_IVAR___ICTagCell_emphasizedTextColor];
LABEL_21:
  objc_msgSend(v9, "setTextColor:", v10);

  v18 = objc_msgSend(v0, "contentView");
  v19 = objc_msgSend(v18, "layer");

  v20 = OBJC_IVAR___ICTagCell_isExcluded;
  if (v0[OBJC_IVAR___ICTagCell_isExcluded] != 1 || (v0[OBJC_IVAR___ICTagCell_isPreviewing] & 1) != 0)
  {
    v21 = 0;
    goto LABEL_28;
  }
  v22 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v23 = objc_msgSend(v0, "traitCollection");
  v24 = objc_msgSend(v23, "accessibilityContrast");

  if (v24 == (id)1)
  {
    v25 = (id)ICAccessibilitySystemDarkenedColor(v22);
    if (v25)
    {
      v26 = v25;

      v22 = v26;
      goto LABEL_27;
    }
    goto LABEL_33;
  }
LABEL_27:
  v21 = objc_msgSend(v22, "CGColor");

LABEL_28:
  objc_msgSend(v19, "setBorderColor:", v21);

  v27 = objc_msgSend(v0, "contentView");
  v28 = objc_msgSend(v27, "layer");

  if (v0[v20] != 1 || (v29 = 2.0, v0[OBJC_IVAR___ICTagCell_isPreviewing] == 1))
    v29 = 0.0;
  objc_msgSend(v28, "setBorderWidth:", v29);

  sub_1003B8EB4();
}

uint64_t TagCell.accessibilityLabel.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagCell_identifier);
  if (v1 && (v2 = objc_opt_self(ICTagNewTagItemIdentifier), swift_dynamicCastObjCClass(v1, v2)))
  {
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, 0, 0);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  }
  else
  {
    v6 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagCell_displayText);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICTagCell_displayText + 8));
  }
  return v6;
}

uint64_t (*TagCell.accessibilityLabel.modify(uint64_t *a1))(uint64_t)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + OBJC_IVAR___ICTagCell_identifier);
  if (v3 && (v4 = objc_opt_self(ICTagNewTagItemIdentifier), swift_dynamicCastObjCClass(v3, v4)))
  {
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

  }
  else
  {
    v11 = v1 + OBJC_IVAR___ICTagCell_displayText;
    v8 = *(_QWORD *)(v1 + OBJC_IVAR___ICTagCell_displayText);
    v10 = *(_QWORD *)(v11 + 8);
    swift_bridgeObjectRetain(v10);
  }
  *a1 = v8;
  a1[1] = v10;
  return j__s11MobileNotes10ActivityIDVwxx;
}

uint64_t TagCell.accessibilityValue.getter()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  uint64_t v4;

  if (*(_BYTE *)(v0 + OBJC_IVAR___ICTagCell_isExcluded) != 1)
    return 0;
  v1 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "localizedStringForKey:value:table:", v2, 0, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

uint64_t (*TagCell.accessibilityValue.modify(uint64_t *a1))(uint64_t)
{
  uint64_t v1;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(v1 + OBJC_IVAR___ICTagCell_isExcluded) == 1)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "localizedStringForKey:value:table:", v4, 0, 0);

    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  *a1 = v6;
  a1[1] = v8;
  return j__s11MobileNotes10ActivityIDVwxx;
}

UIAccessibilityTraits TagCell.accessibilityTraits.getter()
{
  void *v0;
  unint64_t v1;
  UIAccessibilityTraits v2;
  UIAccessibilityTraits v3;
  UIAccessibilityTraits v4;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)swift_getObjectType(v0);
  v1 = (unint64_t)objc_msgSendSuper2(&v6, "accessibilityTraits");
  v2 = UIAccessibilityTraitButton;
  if ((UIAccessibilityTraitButton & ~v1) == 0)
    v2 = 0;
  v3 = v2 | v1;
  v4 = -1;
  if (*((_BYTE *)v0 + OBJC_IVAR___ICTagCell_isExcluded))
    v4 = ~UIAccessibilityTraitSelected;
  return v3 & v4;
}

id TagCell.accessibilityTraits.setter(uint64_t a1)
{
  void *v1;
  objc_super v4;

  v4.receiver = v1;
  v4.super_class = (Class)swift_getObjectType(v1);
  return objc_msgSendSuper2(&v4, "setAccessibilityTraits:", a1);
}

void (*TagCell.accessibilityTraits.modify(objc_super **a1))(objc_super **a1, char a2)
{
  objc_class *v1;
  objc_super *v3;
  uint64_t ObjectType;
  unint64_t v5;
  UIAccessibilityTraits v6;
  UIAccessibilityTraits v7;
  UIAccessibilityTraits v8;

  v3 = (objc_super *)malloc(0x48uLL);
  *a1 = v3;
  v3[3].super_class = v1;
  ObjectType = swift_getObjectType(v1);
  v3[4].receiver = (id)ObjectType;
  v3->receiver = v1;
  v3->super_class = (Class)ObjectType;
  v5 = (unint64_t)-[objc_super accessibilityTraits](v3, "accessibilityTraits");
  v6 = UIAccessibilityTraitButton;
  if ((UIAccessibilityTraitButton & ~v5) == 0)
    v6 = 0;
  v7 = v6 | v5;
  v8 = -1;
  if (*((_BYTE *)v1 + OBJC_IVAR___ICTagCell_isExcluded))
    v8 = ~UIAccessibilityTraitSelected;
  v3[3].receiver = (id)(v7 & v8);
  return sub_1003B7F4C;
}

void sub_1003B7F4C(objc_super **a1, char a2)
{
  objc_super *v2;
  id receiver;
  objc_class *v4;
  Class super_class;
  objc_super *v6;
  objc_super *v7;

  v2 = *a1;
  receiver = (*a1)[3].receiver;
  super_class = (*a1)[3].super_class;
  v4 = (objc_class *)(*a1)[4].receiver;
  v6 = *a1;
  if ((a2 & 1) != 0)
  {
    v6[1].receiver = super_class;
    v7 = v6 + 1;
  }
  else
  {
    v6[2].receiver = super_class;
    v7 = v6 + 2;
  }
  v7->super_class = v4;
  -[objc_super setAccessibilityTraits:](v7, "setAccessibilityTraits:", receiver);
  free(v2);
}

id sub_1003B7FAC(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSString v7;

  v4 = a1;
  a3();
  v6 = v5;

  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
  }
  else
  {
    v7 = 0;
  }
  return v7;
}

uint64_t TagCell.accessibilityHint.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  id v10;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  sub_1003B8258((uint64_t)&v12);
  if (v13)
  {
    sub_10013B100(&v12, (uint64_t)v14);
    v2 = v15;
    v3 = v16;
    sub_10012D19C(v14, v15);
    v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))(v0, v2, v3);
    sub_1000153C0(v14);
    if ((v4 & 1) != 0)
      return 0;
  }
  else
  {
    sub_100012DDC((uint64_t)&v12, &qword_1005DBF18);
  }
  v5 = *(_QWORD *)(v1 + OBJC_IVAR___ICTagCell_identifier);
  if (!v5 || (v6 = objc_opt_self(ICTagNewTagItemIdentifier), !swift_dynamicCastObjCClass(v5, v6)))
  {
    v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, 0, 0);

    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    return v7;
  }
  return 0;
}

uint64_t TagCell.accessibilityHint.setter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRelease(a2);
}

double sub_1003B8258@<D0>(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  double result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  id v12;

  v12 = v1;
  v3 = sub_1000163BC(0, (unint64_t *)&qword_1005D8340, UIView_ptr);
  v4 = v12;
  v5 = sub_100012E18((uint64_t *)&unk_1005DBFD0);
  if ((swift_dynamicCast(&v9, &v12, v3, v5, 6) & 1) != 0)
  {
LABEL_2:
    sub_100012DDC((uint64_t)&v9, &qword_1005DBF18);
    goto LABEL_7;
  }
  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  sub_100012DDC((uint64_t)&v9, &qword_1005DBF18);
  v6 = objc_msgSend(v4, "superview");
  if (v6)
  {
    v7 = v6;
    do
    {

      v12 = v7;
      v4 = v7;
      v5 = sub_100012E18((uint64_t *)&unk_1005DBFD0);
      if ((swift_dynamicCast(&v9, &v12, v3, v5, 6) & 1) != 0)
        goto LABEL_2;
      v11 = 0;
      v9 = 0u;
      v10 = 0u;
      sub_100012DDC((uint64_t)&v9, &qword_1005DBF18);
      v7 = objc_msgSend(v4, "superview");
    }
    while (v7);
  }
LABEL_7:
  *(_QWORD *)&v9 = v4;
  if ((swift_dynamicCast(a1, &v9, v3, v5, 6) & 1) == 0)
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t (*TagCell.accessibilityHint.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v2;

  *a1 = TagCell.accessibilityHint.getter();
  a1[1] = v2;
  return destroy for ActivityID;
}

id sub_1003B8418()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  unsigned int v6;
  double v7;
  id v8;
  void *v9;
  id v10;

  v1 = OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor;
  v2 = *(void **)&v0[OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor];
  }
  else
  {
    v4 = objc_msgSend((id)objc_opt_self(UIColor), "tintColor");
    v5 = objc_msgSend(v0, "traitCollection");
    v6 = objc_msgSend(v5, "ic_isDark");

    v7 = 0.1;
    if (v6)
      v7 = 0.2;
    v8 = objc_msgSend(v4, "colorWithAlphaComponent:", v7);

    v9 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v8;
    v3 = v8;

    v2 = 0;
  }
  v10 = v2;
  return v3;
}

void sub_1003B8528(_BYTE *a1, uint64_t a2, char a3, _QWORD *a4, void (*a5)(void))
{
  _BYTE *v6;

  a1[*a4] = a3;
  v6 = a1;
  a5();

}

id TagCell.__allocating_init(frame:)(double a1, double a2, double a3, double a4)
{
  objc_class *v4;

  return objc_msgSend(objc_allocWithZone(v4), "initWithFrame:", a1, a2, a3, a4);
}

id TagCell.init(frame:)(double a1, double a2, double a3, double a4)
{
  _BYTE *v4;
  _BYTE *v5;
  objc_class *ObjectType;
  _QWORD *v11;
  uint64_t v12;
  id v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  objc_super v22;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType(v4);
  v11 = &v4[OBJC_IVAR___ICTagCell_displayText];
  *v11 = 0;
  v11[1] = 0;
  v4[OBJC_IVAR___ICTagCell_includeSymbolPrefix] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagCell_displayImage] = 0;
  v4[OBJC_IVAR___ICTagCell_hasGroupInset] = 1;
  v4[OBJC_IVAR___ICTagCell_isPreviewing] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICTagCell_identifier] = 0;
  v12 = OBJC_IVAR___ICTagCell_imageView;
  v13 = objc_allocWithZone((Class)UIImageView);
  v14 = v4;
  *(_QWORD *)&v5[v12] = objc_msgSend(v13, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v15 = OBJC_IVAR___ICTagCell_textLabel;
  *(_QWORD *)&v14[v15] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v16 = OBJC_IVAR___ICTagCell_unemphasizedBackgroundColor;
  v17 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)&v14[v16] = objc_msgSend(v17, "tertiarySystemFillColor");
  v18 = OBJC_IVAR___ICTagCell_excludedBackgroundColor;
  *(_QWORD *)&v14[v18] = objc_msgSend(v17, "systemBackgroundColor");
  *(_QWORD *)&v14[OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor] = 0;
  v19 = OBJC_IVAR___ICTagCell_emphasizedTextColor;
  *(_QWORD *)&v14[v19] = objc_msgSend(v17, "whiteColor");
  *(_QWORD *)&v14[OBJC_IVAR___ICTagCell_maxWidthConstraint] = 0;
  *(_QWORD *)&v14[OBJC_IVAR___ICTagCell_minWidthConstraint] = 0;
  v14[OBJC_IVAR___ICTagCell_isEmphasized] = 0;
  v14[OBJC_IVAR___ICTagCell_isExcluded] = 0;

  v22.receiver = v14;
  v22.super_class = ObjectType;
  v20 = objc_msgSendSuper2(&v22, "initWithFrame:", a1, a2, a3, a4);
  sub_1003B87C8();

  return v20;
}

id sub_1003B87C8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  double v10;
  double v11;
  id v12;
  id v13;
  id v14;
  id result;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;

  v1 = v0;
  v2 = sub_100012E18(&qword_1005D7610);
  __chkstk_darwin(v2);
  v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UIBackgroundConfiguration(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void **)&v0[OBJC_IVAR___ICTagCell_textLabel];
  LODWORD(v10) = 1148846080;
  objc_msgSend(v9, "setContentCompressionResistancePriority:forAxis:", 0, v10);
  LODWORD(v11) = 1148846080;
  objc_msgSend(v9, "setContentHuggingPriority:forAxis:", 0, v11);
  v12 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v13 = objc_msgSend(v1, "traitCollection");
  v14 = objc_msgSend(v13, "accessibilityContrast");

  if (v14 != (id)1)
    goto LABEL_4;
  result = (id)ICAccessibilitySystemDarkenedColor(v12);
  if (result)
  {
    v16 = result;

    v12 = v16;
LABEL_4:
    objc_msgSend(v9, "setTextColor:", v12);

    objc_msgSend(v9, "setLineBreakMode:", 5);
    objc_msgSend(v9, "setTextAlignment:", 1);
    v17 = objc_msgSend(v1, "contentView");
    objc_msgSend(v17, "addSubview:", v9);

    objc_msgSend(v9, "ic_addAnchorsToFillSuperviewWithHorizontalPadding:verticalPadding:usesSafeAreaLayoutGuide:", 0, 12.0, 8.0);
    v18 = *(void **)&v1[OBJC_IVAR___ICTagCell_imageView];
    objc_msgSend(v18, "setContentMode:", 4);
    v19 = objc_msgSend(v1, "contentView");
    objc_msgSend(v19, "addSubview:", v18);

    objc_msgSend(v18, "ic_addAnchorsToFillSuperviewWithHorizontalPadding:verticalPadding:usesSafeAreaLayoutGuide:", 0, 8.0, 0.0);
    v20 = objc_msgSend(v1, "contentView");
    objc_msgSend(v20, "ic_applyRoundedCornersWithRadius:", 8.0);

    sub_1003B747C();
    objc_msgSend(v1, "setIsAccessibilityElement:", 1);
    v21 = static UIBackgroundConfiguration.clear()(objc_msgSend(v1, "setFocusEffect:", 0));
    UIBackgroundConfiguration.cornerRadius.setter(v21, 8.0);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v4, v8, v5);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
    UICollectionViewCell.backgroundConfiguration.setter(v4);
    v22 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    objc_msgSend(v22, "addObserver:selector:name:object:", v1, "contentSizeCategoryDidChange:", UIContentSizeCategoryDidChangeNotification, 0);

    sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
    v23 = static UITraitCollection.systemTraitsAffectingColorAppearance.getter();
    v24 = UIView.registerForTraitChanges(_:action:)(v23, "updateColors");
    swift_unknownObjectRelease(v24, v25);
    v26 = swift_bridgeObjectRelease(v23);
    v27 = static UITraitCollection.traitsAffectingSize.getter(v26);
    v28 = UIView.registerForTraitChanges(_:action:)(v27, "updateWidthConstraints");
    swift_unknownObjectRelease(v28, v29);
    v30 = swift_bridgeObjectRelease(v27);
    return (id)(*(uint64_t (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v30);
  }
  __break(1u);
  return result;
}

id TagCell.__allocating_init(coder:)(void *a1)
{
  objc_class *v1;
  id v3;

  v3 = objc_msgSend(objc_allocWithZone(v1), "initWithCoder:", a1);

  return v3;
}

id TagCell.init(coder:)(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  objc_class *ObjectType;
  _QWORD *v5;
  uint64_t v6;
  id v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  v5 = &v2[OBJC_IVAR___ICTagCell_displayText];
  *v5 = 0;
  v5[1] = 0;
  v2[OBJC_IVAR___ICTagCell_includeSymbolPrefix] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICTagCell_displayImage] = 0;
  v2[OBJC_IVAR___ICTagCell_hasGroupInset] = 1;
  v2[OBJC_IVAR___ICTagCell_isPreviewing] = 0;
  *(_QWORD *)&v2[OBJC_IVAR___ICTagCell_identifier] = 0;
  v6 = OBJC_IVAR___ICTagCell_imageView;
  v7 = objc_allocWithZone((Class)UIImageView);
  v8 = v2;
  *(_QWORD *)&v2[v6] = objc_msgSend(v7, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v9 = OBJC_IVAR___ICTagCell_textLabel;
  *(_QWORD *)&v8[v9] = objc_msgSend(objc_allocWithZone((Class)UILabel), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v10 = OBJC_IVAR___ICTagCell_unemphasizedBackgroundColor;
  v11 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)&v8[v10] = objc_msgSend(v11, "tertiarySystemFillColor");
  v12 = OBJC_IVAR___ICTagCell_excludedBackgroundColor;
  *(_QWORD *)&v8[v12] = objc_msgSend(v11, "systemBackgroundColor");
  *(_QWORD *)&v8[OBJC_IVAR___ICTagCell____lazy_storage___imageViewBackgroundColor] = 0;
  v13 = OBJC_IVAR___ICTagCell_emphasizedTextColor;
  *(_QWORD *)&v8[v13] = objc_msgSend(v11, "whiteColor");
  *(_QWORD *)&v8[OBJC_IVAR___ICTagCell_maxWidthConstraint] = 0;
  *(_QWORD *)&v8[OBJC_IVAR___ICTagCell_minWidthConstraint] = 0;
  v8[OBJC_IVAR___ICTagCell_isEmphasized] = 0;
  v8[OBJC_IVAR___ICTagCell_isExcluded] = 0;

  v18.receiver = v8;
  v18.super_class = ObjectType;
  v14 = objc_msgSendSuper2(&v18, "initWithCoder:", a1);
  v15 = v14;
  if (v14)
  {
    v16 = v14;
    sub_1003B87C8();

  }
  return v15;
}

Swift::Void __swiftcall TagCell.layoutSubviews()()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, "layoutSubviews");
  sub_1003B7138();
}

void sub_1003B8EB4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  int v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  NSString *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSString *v18;
  unint64_t v19;
  id v20;
  NSString v21;
  Class isa;
  id v23;
  id v24;
  _BYTE v25[112];

  v1 = *(void **)(v0 + OBJC_IVAR___ICTagCell_textLabel);
  v2 = (void *)objc_opt_self(UIFont);
  v3 = objc_msgSend(v2, "ic_preferredFontForStyle:symbolicTraits:", UIFontTextStyleSubheadline, 2);
  if (!v3)
  {
    __break(1u);
    goto LABEL_13;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "ic_fontWithSingleLineA");

  if (!v5)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  objc_msgSend(v1, "setFont:", v5);

  v6 = *(_QWORD *)(v0 + OBJC_IVAR___ICTagCell_displayText + 8);
  if (!v6)
    return;
  v7 = *(unsigned __int8 *)(v0 + OBJC_IVAR___ICTagCell_includeSymbolPrefix);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICTagCell_displayText + 8));
  if (v7 == 1)
  {
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    v9 = objc_msgSend(v8, "ic_withHashtagPrefix");

    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v6 = v10;

  }
  if (*(_BYTE *)(v0 + OBJC_IVAR___ICTagCell_isExcluded) != 1)
  {
    objc_msgSend(v1, "setAttributedText:", 0);
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    objc_msgSend(v1, "setText:", v24);

    return;
  }
  v11 = sub_100012E18(&qword_1005D1B58);
  inited = swift_initStackObject(v11, v25);
  *(_OWORD *)(inited + 16) = xmmword_100454E90;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v13 = NSFontAttributeName;
  v14 = objc_msgSend(v2, "ic_preferredFontForStyle:symbolicTraits:", UIFontTextStyleSubheadline, 2);
  if (!v14)
    goto LABEL_14;
  v15 = v14;
  v16 = objc_msgSend(v14, "ic_fontWithSingleLineA");

  if (!v16)
  {
LABEL_15:
    __break(1u);
    return;
  }
  v17 = sub_1000163BC(0, (unint64_t *)&unk_1005DBFC0, UIFont_ptr);
  *(_QWORD *)(inited + 40) = v16;
  *(_QWORD *)(inited + 64) = v17;
  *(_QWORD *)(inited + 72) = NSStrikethroughStyleAttributeName;
  *(_QWORD *)(inited + 104) = &type metadata for Int;
  *(_QWORD *)(inited + 80) = 1;
  v18 = NSStrikethroughStyleAttributeName;
  v19 = sub_100135F1C(inited);
  v20 = objc_allocWithZone((Class)NSAttributedString);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  type metadata accessor for Key(0);
  sub_1001797A4();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  v23 = objc_msgSend(v20, "initWithString:attributes:", v21, isa);

  objc_msgSend(v1, "setAttributedText:", v23);
}

uint64_t TagCell.configurationState.getter()
{
  void *v0;
  id v1;
  char v2;
  id v3;
  char v5;
  _QWORD v6[5];
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)swift_getObjectType();
  v1 = objc_msgSendSuper2(&v7, "_bridgedConfigurationState");
  static UICellConfigurationState._unconditionallyBridgeFromObjectiveC(_:)(v1);

  v2 = *((_BYTE *)v0 + OBJC_IVAR___ICTagCell_isExcluded);
  if (qword_1005CEDB0 != -1)
    swift_once(&qword_1005CEDB0, sub_1003B6FC0);
  v5 = v2;
  v3 = (id)qword_100601F30;
  AnyHashable.init<A>(_:)(v6, &v5, &type metadata for Bool, &protocol witness table for Bool);
  return UICellConfigurationState.subscript.setter(v6, v3);
}

id TagCell.updateConfiguration(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  char v22;
  char v23;
  void (*v24)(char *, uint64_t);
  _BYTE *v25;
  char v26;
  uint64_t v28;
  _BYTE *v29;
  char v30;
  _QWORD v31[3];
  uint64_t v32;

  v3 = type metadata accessor for UICellConfigurationState(0, a2);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v28 - v8;
  v10 = type metadata accessor for UICellConfigurationState.DropState(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v28 - v16;
  UICellConfigurationState.cellDropState.getter(v15);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for UICellConfigurationState.DropState.targeted(_:), v10);
  v18 = static UICellConfigurationState.DropState.== infix(_:_:)(v17, v14);
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v10);
  v19(v17, v10);
  v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v21 = v20(v9, a1, v3);
  if ((v18 & 1) != 0)
  {
    v22 = 1;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    goto LABEL_13;
  }
  v23 = UICellConfigurationState.isSelected.getter(v21);
  v20(v7, (uint64_t)v9, v3);
  if ((v23 & 1) == 0)
  {
    v22 = 0;
    goto LABEL_12;
  }
  if (qword_1005CEDB0 != -1)
    swift_once(&qword_1005CEDB0, sub_1003B6FC0);
  UICellConfigurationState.subscript.getter(v31, qword_100601F30);
  if (!v32)
  {
    sub_100012DDC((uint64_t)v31, &qword_1005D5038);
    goto LABEL_11;
  }
  if ((swift_dynamicCast(&v30, v31, &type metadata for AnyHashable, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_11:
    v22 = 1;
    goto LABEL_12;
  }
  v22 = v30 ^ 1;
LABEL_12:
  v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24(v7, v3);
  v24(v9, v3);
LABEL_13:
  v25 = v29;
  v29[OBJC_IVAR___ICTagCell_isEmphasized] = v22 & 1;
  sub_1003B747C();
  if (qword_1005CEDB0 != -1)
    swift_once(&qword_1005CEDB0, sub_1003B6FC0);
  UICellConfigurationState.subscript.getter(v31, qword_100601F30);
  if (!v32)
  {
    sub_100012DDC((uint64_t)v31, &qword_1005D5038);
    goto LABEL_19;
  }
  if ((swift_dynamicCast(&v30, v31, &type metadata for AnyHashable, &type metadata for Bool, 6) & 1) == 0)
  {
LABEL_19:
    v26 = 0;
    goto LABEL_20;
  }
  v26 = v30;
LABEL_20:
  v25[OBJC_IVAR___ICTagCell_isExcluded] = v26;
  sub_1003B747C();
  return objc_msgSend(v25, "layoutIfNeeded");
}

UICollectionViewLayoutAttributes __swiftcall TagCell.preferredLayoutAttributesFitting(_:)(UICollectionViewLayoutAttributes a1)
{
  void *v1;
  objc_class *ObjectType;
  objc_super v5;

  ObjectType = (objc_class *)swift_getObjectType();
  sub_1003B7138();
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return (UICollectionViewLayoutAttributes)objc_msgSendSuper2(&v5, "preferredLayoutAttributesFittingAttributes:", a1.super.isa);
}

uint64_t type metadata accessor for TagCell()
{
  return objc_opt_self(ICTagCell);
}

void sub_1003B9AFC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  NSString v10;
  id v11;

  v2 = OBJC_IVAR___ICTagCell_displayImage;
  v3 = *(void **)(v1 + OBJC_IVAR___ICTagCell_displayImage);
  *(_QWORD *)(v1 + OBJC_IVAR___ICTagCell_displayImage) = a1;
  v4 = a1;

  v5 = *(void **)(v1 + v2);
  if (v5)
  {
    v6 = *(void **)(v1 + OBJC_IVAR___ICTagCell_imageView);
    v11 = v5;
    objc_msgSend(v6, "setImage:", v11);
    v7 = (_QWORD *)(v1 + OBJC_IVAR___ICTagCell_displayText);
    v8 = *(_QWORD *)(v1 + OBJC_IVAR___ICTagCell_displayText + 8);
    *v7 = 0;
    v7[1] = 0;
    swift_bridgeObjectRelease(v8);
    v9 = *(void **)(v1 + OBJC_IVAR___ICTagCell_textLabel);
    objc_msgSend(v9, "setAttributedText:", 0);
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setText:", v10);

    sub_1003B8EB4();
  }
}

BOOL ContentInsetViewController.Configuration.isEqual(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  BOOL v4;
  void *v6;
  _BYTE v7[24];
  uint64_t v8;

  sub_1001F83A4(a1, (uint64_t)v7);
  if (!v8)
  {
    sub_1000160C8((uint64_t)v7);
    return 0;
  }
  v2 = type metadata accessor for ContentInsetViewController.Configuration();
  if ((swift_dynamicCast(&v6, v7, (char *)&type metadata for Any + 8, v2, 6) & 1) == 0)
    return 0;
  v3 = v6;
  v4 = _s11MobileNotes26ContentInsetViewControllerC13ConfigurationC2eeoiySbAE_AEtFZ_0(v1, (uint64_t)v6);

  return v4;
}

uint64_t type metadata accessor for ContentInsetViewController.Configuration()
{
  return objc_opt_self(ICContentInsetViewControllerConfiguration);
}

void ContentInsetViewController.Configuration.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.Configuration", 25, "init()", 6, 0);
  __break(1u);
}

id ContentInsetViewController.Configuration.__deallocating_deinit()
{
  return sub_1002B86F4(type metadata accessor for ContentInsetViewController.Configuration);
}

void sub_1003B9F00(uint64_t a1)
{
  char *v1;
  char *v2;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;

  v2 = v1;
  v4 = *(void **)&v2[OBJC_IVAR___ICContentInsetViewController_configuration];
  type metadata accessor for ContentInsetViewController.Configuration();
  v5 = v4;
  LOBYTE(a1) = static NSObject.== infix(_:_:)(a1);

  if ((a1 & 1) == 0)
  {
    v6 = *(void **)&v2[OBJC_IVAR___ICContentInsetViewController_contentViewController];
    v7 = objc_msgSend(v6, "view");
    if (v7)
    {
      v8 = v7;
      objc_msgSend(v7, "removeFromSuperview");

      v9 = objc_msgSend(v2, "view");
      if (v9)
      {
        v10 = v9;
        v11 = objc_msgSend(v6, "view");
        if (v11)
        {
          v12 = v11;
          objc_msgSend(v10, "addSubview:", v11);

          sub_1003BA2F8();
          return;
        }
        goto LABEL_8;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_8:
    __break(1u);
  }
}

Swift::Void __swiftcall ContentInsetViewController.viewDidLoad()()
{
  void *v0;
  objc_super v1;

  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for ContentInsetViewController();
  objc_msgSendSuper2(&v1, "viewDidLoad");
  sub_1003BA1B0();
}

id sub_1003BA1B0()
{
  char *v0;
  id result;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  result = objc_msgSend(v0, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = result;
  v3 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  objc_msgSend(v2, "setBackgroundColor:", v3);

  v4 = *(void **)&v0[OBJC_IVAR___ICContentInsetViewController_contentViewController];
  objc_msgSend(v0, "addChildViewController:", v4);
  result = objc_msgSend(v4, "view");
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v5 = result;
  objc_msgSend(result, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v6 = result;
  result = objc_msgSend(v4, "view");
  if (result)
  {
    v7 = result;
    objc_msgSend(v6, "addSubview:", result);

    sub_1003BA2F8();
    return objc_msgSend(v4, "didMoveToParentViewController:", v0);
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_1003BA2F8()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;

  v1 = *(void **)(v0 + OBJC_IVAR___ICContentInsetViewController_contentViewController);
  v2 = objc_msgSend(v1, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_7;
  }
  v3 = v2;
  v4 = OBJC_IVAR___ICContentInsetViewController_configuration;
  objc_msgSend(v2, "ic_addAnchorsToFillSuperviewWithPaddingFromDirectionalEdgeInsets:usesSafeAreaLayoutGuide:", *(unsigned __int8 *)(*(_QWORD *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide), *(double *)(*(_QWORD *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets), *(double *)(*(_QWORD *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 8), *(double *)(*(_QWORD *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 16), *(double *)(*(_QWORD *)(v0 + OBJC_IVAR___ICContentInsetViewController_configuration)+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 24));

  v5 = objc_msgSend(v1, "view");
  if (!v5)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v6 = v5;
  objc_msgSend(v5, "ic_applyRoundedCornersWithRadius:", *(double *)(*(_QWORD *)(v0 + v4) + OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius));

  v7 = objc_msgSend(v1, "view");
  if (!v7)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v8 = v7;
  objc_msgSend(v7, "setNeedsLayout");

  v9 = objc_msgSend(v1, "view");
  if (v9)
  {
    v10 = v9;
    objc_msgSend(v9, "layoutIfNeeded");

    return;
  }
LABEL_9:
  __break(1u);
}

id ContentInsetViewController.__allocating_init(nibName:bundle:)(uint64_t a1, uint64_t a2, void *a3)
{
  objc_class *v3;
  objc_class *v4;
  NSString v7;
  id v8;

  v4 = v3;
  if (a2)
  {
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v7 = 0;
  }
  v8 = objc_msgSend(objc_allocWithZone(v4), "initWithNibName:bundle:", v7, a3);

  return v8;
}

void ContentInsetViewController.init(nibName:bundle:)()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.ContentInsetViewController", 38, "init(nibName:bundle:)", 21, 0);
  __break(1u);
}

id ContentInsetViewController.__deallocating_deinit()
{
  return sub_1002B86F4(type metadata accessor for ContentInsetViewController);
}

BOOL _s11MobileNotes26ContentInsetViewControllerC13ConfigurationC2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets), *(float64x2_t *)(a2+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 16), *(float64x2_t *)(a2+ OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets+ 16)))), 0xFuLL))) & 1) == 0)return 0;
  if (*(unsigned __int8 *)(a1 + OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide) == *(unsigned __int8 *)(a2 + OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide))
    return *(double *)(a1 + OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius) == *(double *)(a2 + OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius);
  return 0;
}

uint64_t type metadata accessor for ContentInsetViewController()
{
  return objc_opt_self(ICContentInsetViewController);
}

id sub_1003BA5E8(void *a1)
{
  char *v1;
  uint64_t v3;
  CGFloat bottom;
  CGFloat trailing;
  objc_class *v6;
  _BYTE *v7;
  CGFloat *v8;
  char *v9;
  id v10;
  __int128 v12;
  objc_super v13;
  objc_super v14;

  v3 = OBJC_IVAR___ICContentInsetViewController_configuration;
  v12 = *(_OWORD *)&NSDirectionalEdgeInsetsZero.top;
  bottom = NSDirectionalEdgeInsetsZero.bottom;
  trailing = NSDirectionalEdgeInsetsZero.trailing;
  v6 = (objc_class *)type metadata accessor for ContentInsetViewController.Configuration();
  v7 = objc_allocWithZone(v6);
  v8 = (CGFloat *)&v7[OBJC_IVAR___ICContentInsetViewControllerConfiguration_insets];
  *(_OWORD *)v8 = v12;
  v8[2] = bottom;
  v8[3] = trailing;
  v7[OBJC_IVAR___ICContentInsetViewControllerConfiguration_usesSafeAreaLayoutGuide] = 0;
  *(_QWORD *)&v7[OBJC_IVAR___ICContentInsetViewControllerConfiguration_cornerRadius] = 0;
  v14.receiver = v7;
  v14.super_class = v6;
  v9 = v1;
  *(_QWORD *)&v1[v3] = objc_msgSendSuper2(&v14, "init");
  *(_QWORD *)&v9[OBJC_IVAR___ICContentInsetViewController_contentViewController] = a1;
  v10 = a1;

  v13.receiver = v9;
  v13.super_class = (Class)type metadata accessor for ContentInsetViewController();
  return objc_msgSendSuper2(&v13, "initWithNibName:bundle:", 0, 0);
}

double AddFileAttachmentIntent.init()@<D0>(_OWORD *a1@<X8>)
{
  __int128 v2;
  double result;
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;

  sub_1003BB7BC((char **)v5);
  v2 = v5[1];
  *a1 = v5[0];
  a1[1] = v2;
  result = *(double *)&v6;
  v4 = v7;
  a1[2] = v6;
  a1[3] = v4;
  return result;
}

uint64_t AddFileAttachmentIntent.file.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100012E18(&qword_1005CF1F8);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003BC118(a1, (uint64_t)v4);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100012DDC(a1, &qword_1005CF1F8);
}

void *AddFileAttachmentIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static AddFileAttachmentIntent.persistentIdentifier;
}

unint64_t static AddFileAttachmentIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1003BA7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static AddFileAttachmentIntent.title);
  sub_10012A0B0(v10, (uint64_t)static AddFileAttachmentIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x656C694620646441, 0xE800000000000000);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t AddFileAttachmentIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEDB8 != -1)
    swift_once(&qword_1005CEDB8, sub_1003BA7C0);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static AddFileAttachmentIntent.title);
}

uint64_t static AddFileAttachmentIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEDB8 != -1)
    swift_once(&qword_1005CEDB8, sub_1003BA7C0);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static AddFileAttachmentIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static AddFileAttachmentIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x800000010048CDE0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static AddFileAttachmentIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005DC058);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005DC060);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B2870();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(8, 2, &type metadata for AddFileAttachmentIntent, v6);
  v7._countAndFlagsBits = 543450177;
  v7._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100466910, v8);
  v10 = sub_100012E18(&qword_1005DC068);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 544175136;
  v11._object = (void *)0xE400000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_100466938, v12);
  v14 = sub_100012E18(&qword_1005DC070);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for AddFileAttachmentIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for AddFileAttachmentIntent, v6);
}

uint64_t AddFileAttachmentIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for AttachmentEntity(0);
  v2[12] = v3;
  v4 = (*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v4);
  v2[14] = swift_task_alloc(v4);
  v2[15] = swift_task_alloc(v4);
  v2[16] = swift_task_alloc(v4);
  v5 = type metadata accessor for NoteID(0);
  v2[17] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[18] = v6;
  v2[19] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NoteEntity(0);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003BAE70, 0, 0);
}

uint64_t sub_1003BAE70()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  char *v9;

  v2 = v0[19];
  v1 = (_QWORD *)v0[20];
  v3 = v0[17];
  v4 = v0[18];
  AppDependency.wrappedValue.getter(v0 + 5);
  v5 = (void *)v0[5];
  v0[21] = objc_msgSend(v5, "modernManagedObjectContext");

  IntentParameter.wrappedValue.getter(v1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v4 + 16))(v2, v1, v3);
  sub_100145264((uint64_t)v1, type metadata accessor for NoteEntity);
  AppDependency.wrappedValue.getter(v0 + 6);
  v6 = v0[6];
  v0[22] = v6;
  v9 = (char *)&dword_1005D7890 + dword_1005D7890;
  v7 = (_QWORD *)swift_task_alloc(unk_1005D7894);
  v0[23] = v7;
  *v7 = v0;
  v7[1] = sub_1003BAF78;
  return ((uint64_t (*)(_QWORD, uint64_t))v9)(v0[19], v6);
}

uint64_t sub_1003BAF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)(*(_QWORD *)v1 + 176);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  v6 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  return swift_task_switch(sub_1003BAFF8, 0, 0);
}

uint64_t sub_1003BAFF8()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  id v8;
  id v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = (void *)v0[24];
  v2 = (void *)v0[21];
  v3 = (__int128 *)v0[11];
  v4 = swift_allocObject(&unk_10056D570, 96, 7);
  v0[25] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = *v3;
  v6 = v3[1];
  v7 = v3[3];
  *(_OWORD *)(v4 + 64) = v3[2];
  *(_OWORD *)(v4 + 80) = v7;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = v6;
  v8 = v1;
  v9 = v2;
  sub_1001FA7A0(v3);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to NSManagedObjectContext.perform<A>(_:)[1]);
  v0[26] = v10;
  v11 = sub_100012E18(&qword_1005D1230);
  *v10 = v0;
  v10[1] = sub_1001F935C;
  return NSManagedObjectContext.perform<A>(_:)(v0 + 7, sub_1003BC204, v4, v11);
}

void sub_1003BB0C8(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  NSURL *v52;
  void *v53;
  void *v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  void *v60;
  unsigned int v61;
  id v62;
  id v63;
  id v64;
  id v65;
  uint64_t v66;
  _QWORD v67[2];
  id v68;
  void *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  _BYTE v79[24];
  _QWORD v80[2];
  char v81;

  v76 = a3;
  v8 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  __chkstk_darwin(v8);
  v75 = (char *)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for IntentFile(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100012E18(&qword_1005CF1F8);
  __chkstk_darwin(v14);
  v16 = (_QWORD *)((char *)v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_100012E18(&qword_1005CEFD0);
  __chkstk_darwin(v17);
  v19 = (char *)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for URL(0);
  v21 = __chkstk_darwin(v20);
  v24 = (char *)v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_6;
  v70 = a4;
  v71 = v24;
  v73 = v22;
  v74 = v21;
  v72 = v4;
  v25 = a1;
  v69 = a2;
  v26 = objc_msgSend(a2, "objectWithID:", v25);
  v27 = objc_opt_self(ICNote);
  v28 = (void *)swift_dynamicCastObjCClass(v26, v27);
  if (!v28)
  {

LABEL_6:
    type metadata accessor for ICError(0);
    v35 = v34;
    v77 = 227;
    v36 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v37 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v38 = _BridgedStoredNSError.init(_:userInfo:)(&v78, &v77, v36, v35, v37);
    swift_willThrow(v38);
    return;
  }
  v29 = v28;
  if ((objc_msgSend(v28, "isPasswordProtectedAndLocked") & 1) != 0)
  {
    v30 = sub_10013F4E8();
    v31 = swift_allocError(&type metadata for AppIntentsError, v30, 0, 0);
    v33 = 11;
LABEL_13:
    *v32 = v33;
    swift_willThrow(v31);

    return;
  }
  if (!objc_msgSend(v29, "isEditable"))
  {
    v39 = sub_10013F4E8();
    v31 = swift_allocError(&type metadata for AppIntentsError, v39, 0, 0);
    v33 = 12;
    goto LABEL_13;
  }
  if (!objc_msgSend(v29, "canAddAttachment"))
  {
    v40 = sub_10013F4E8();
    v31 = swift_allocError(&type metadata for AppIntentsError, v40, 0, 0);
    v33 = 21;
    goto LABEL_13;
  }
  v68 = v25;
  v67[1] = *(_QWORD *)(v76 + 8);
  IntentParameter.wrappedValue.getter(v16);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10))
  {
    sub_100012DDC((uint64_t)v16, &qword_1005CF1F8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v73 + 56))(v19, 1, 1, v74);
LABEL_15:
    v44 = sub_100012DDC((uint64_t)v19, &qword_1005CEFD0);
    v45 = IntentParameter.projectedValue.getter(v44);
    v46 = type metadata accessor for IntentDialog(0);
    v47 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v75, 1, 1, v46);
    v48 = type metadata accessor for AppIntentError(0);
    v49 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v48, v49, 0, 0);
    IntentParameter.needsValueError(_:)(v47);
    swift_release(v45);
    v50 = sub_100012DDC(v47, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v50);

    return;
  }
  (*(void (**)(char *, _QWORD *, uint64_t))(v11 + 16))(v13, v16, v10);
  v41 = sub_100012DDC((uint64_t)v16, &qword_1005CF1F8);
  IntentFile.fileURL.getter(v41);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v43 = v73;
  v42 = v74;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v19, 1, v74) == 1)
    goto LABEL_15;
  v51 = v71;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v71, v19, v42);
  if (!URL.startAccessingSecurityScopedResource()())
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v42);
    goto LABEL_21;
  }
  URL._bridgeToObjectiveC()(v52);
  v54 = v53;
  v55 = objc_msgSend(v29, "addAttachmentWithFileURL:", v53);

  URL.stopAccessingSecurityScopedResource()();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v42);
  if (!v55)
  {
LABEL_21:

    *v70 = 0;
    return;
  }
  v56 = objc_allocWithZone((Class)ICAttachmentInsertionController);
  v57 = v55;
  v58 = objc_msgSend(v56, "initWithNote:", v29);
  sub_1001FAC4C(v76 + 24, (uint64_t)v79);
  sub_1001FAC4C((uint64_t)v79, (uint64_t)v80);
  if ((v81 & 1) != 0)
    v59 = objc_msgSend(v58, "addAttachment:", v57);
  else
    v59 = objc_msgSend(v58, "addAttachment:atTextRange:", v57, v80[0], v80[1]);
  v60 = v69;

  v78 = 0;
  v61 = objc_msgSend(v60, "save:", &v78);
  v62 = v78;
  if (v61)
  {
    v63 = v78;
    v64 = objc_msgSend(v57, "objectID");

    *v70 = v64;
  }
  else
  {
    v65 = v78;
    _convertNSErrorToError(_:)(v62);

    swift_willThrow(v66);
  }
}

uint64_t sub_1003BB74C(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  _QWORD *v6;

  v4 = v1[1];
  *(_OWORD *)(v2 + 16) = *v1;
  *(_OWORD *)(v2 + 32) = v4;
  v5 = v1[3];
  *(_OWORD *)(v2 + 48) = v1[2];
  *(_OWORD *)(v2 + 64) = v5;
  v6 = (_QWORD *)swift_task_alloc(dword_1005DC07C);
  *(_QWORD *)(v2 + 80) = v6;
  *v6 = v2;
  v6[1] = sub_1001F9DFC;
  return AddFileAttachmentIntent.perform()(a1);
}

uint64_t sub_1003BB7BC@<X0>(char **a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t, uint64_t);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64x2_t v68;
  int16x8_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t result;
  char **v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char **v87;
  unsigned int v88;
  void (*v89)(char *);
  uint64_t v90;
  char *v91;
  char *v92;
  void (*v93)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  unsigned __int32 v105;

  v87 = a1;
  v1 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v1);
  v86 = (char *)&v80 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005CF1F8);
  __chkstk_darwin(v3);
  v83 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = type metadata accessor for InputConnectionBehavior(0);
  v96 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98);
  v92 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v7 = __chkstk_darwin(v6);
  v85 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v91 = (char *)&v80 - v9;
  v10 = sub_100012E18(&qword_1005CEF00);
  __chkstk_darwin(v10);
  v84 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v12);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = v15;
  __chkstk_darwin(v15);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Locale(0);
  __chkstk_darwin(v20);
  v22 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v23);
  v25 = (char *)&v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for LocalizedStringResource(0);
  v27 = *(_QWORD *)(v26 - 8);
  v94 = v26;
  __chkstk_darwin(v26);
  v97 = (char *)&v80 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100012E18(&qword_1005CEF08);
  v29 = String.LocalizationValue.init(stringLiteral:)(1701667150, 0xE400000000000000);
  static Locale.current.getter(v29);
  v30 = *(void (**)(char *))(v16 + 104);
  v31 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v88 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v90 = v17;
  v30(v19);
  v89 = v30;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter title for Add File intent", 35, 2);
  v32 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100478930);
  static Locale.current.getter(v32);
  ((void (*)(char *, uint64_t, uint64_t))v30)(v19, v31, v17);
  v33 = v14;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter description for name", 30, 2);
  v93 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56);
  v93(v14, 0, 1, v26);
  v34 = type metadata accessor for String.IntentInputOptions(0);
  v101 = 0;
  v102 = 0;
  v35 = v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v84, 1, 1, v34);
  v36 = type metadata accessor for IntentDialog(0);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
  v38 = v91;
  v80 = v36;
  v37(v91, 1, 1, v36);
  v81 = v37;
  v95 = enum case for InputConnectionBehavior.default(_:);
  v96 = *(_QWORD *)(v96 + 104);
  v39 = v92;
  ((void (*)(char *))v96)(v92);
  v84 = (char *)IntentParameter<>.init(title:description:default:inputOptions:requestValueDialog:inputConnectionBehavior:)(v97, v33, &v101, v35, v38, v39);
  v82 = sub_100012E18(&qword_1005CF200);
  v40 = String.LocalizationValue.init(stringLiteral:)(1701603654, 0xE400000000000000);
  static Locale.current.getter(v40);
  v41 = v88;
  v43 = (void (*)(char *, uint64_t, uint64_t))v89;
  v42 = v90;
  ((void (*)(char *, _QWORD, uint64_t))v89)(v19, v88, v90);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter title for Add File intent", 35, 2);
  v44 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000029, 0x8000000100478A40);
  static Locale.current.getter(v44);
  v43(v19, v41, v42);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter description for file", 30, 2);
  v45 = v33;
  v93(v33, 0, 1, v94);
  v46 = type metadata accessor for IntentFile(0);
  v47 = v83;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v83, 1, 1, v46);
  v48 = v91;
  v37(v91, 1, 1, v36);
  v49 = sub_100012E18(&qword_1005CF208);
  v50 = type metadata accessor for UTType(0);
  v51 = swift_allocObject(v49, ((*(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v50 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v50 - 8) + 80) | 7);
  *(_OWORD *)(v51 + 16) = xmmword_100451C20;
  static UTType.item.getter();
  v52 = v92;
  ((void (*)(char *, _QWORD, uint64_t))v96)(v92, v95, v98);
  v53 = v47;
  v54 = v48;
  v83 = (char *)IntentParameter<>.init(title:description:default:supportedContentTypes:requestValueDialog:inputConnectionBehavior:)(v97, v45, v53, v51, v48, v52);
  v82 = sub_100012E18((uint64_t *)&unk_1005CEE90);
  v55 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v55);
  v56 = v88;
  v57 = (void (*)(char *, uint64_t, uint64_t))v89;
  v58 = v90;
  ((void (*)(char *, _QWORD, uint64_t))v89)(v19, v88, v90);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter title for Add File intent", 35, 2);
  v59 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000002CLL, 0x8000000100478A70);
  static Locale.current.getter(v59);
  v57(v19, v56, v58);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v25, 0, 0, v22, v19, "Parameter description for note", 30, 2);
  v93(v45, 0, 1, v94);
  v60 = type metadata accessor for NoteEntity(0);
  v61 = v86;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v86, 1, 1, v60);
  v62 = v80;
  v63 = v81;
  v81(v54, 1, 1, v80);
  v64 = v85;
  v63(v85, 1, 1, v62);
  v101 = sub_1001E9508();
  v102 = v65;
  v103 = v66;
  v104 = v67 & 1;
  v68 = (uint64x2_t)vdupq_n_s64(v67);
  v69 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v68, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v68, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v69.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v69), (int8x8_t)0x1000100010001);
  v105 = vmovn_s16(v69).u32[0];
  ((void (*)(char *, _QWORD, uint64_t))v96)(v52, v95, v98);
  v70 = sub_100127D40();
  v71 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v97, v45, v61, v54, v64, v52, &v101, &type metadata for VisibleNotesQuery, v70);
  sub_100012E18(&qword_1005CEE50);
  v99 = 0xD000000000000021;
  v100 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(&v101, &v99, &type metadata for String, &protocol witness table for String);
  v72 = type metadata accessor for AppDependencyManager(0);
  v73 = static AppDependencyManager.shared.getter(v72);
  v74 = AppDependency.__allocating_init(key:manager:)(&v101, v73);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v99 = 0xD000000000000024;
  v100 = 0x8000000100476B40;
  v75 = AnyHashable.init<A>(_:)(&v101, &v99, &type metadata for String, &protocol witness table for String);
  v76 = static AppDependencyManager.shared.getter(v75);
  result = AppDependency.__allocating_init(key:manager:)(&v101, v76);
  v78 = v87;
  v79 = v83;
  *v87 = v84;
  v78[1] = v79;
  v78[3] = 0;
  v78[4] = 0;
  v78[2] = (char *)v71;
  *((_BYTE *)v78 + 40) = 1;
  v78[6] = (char *)v74;
  v78[7] = (char *)result;
  return result;
}

uint64_t sub_1003BC118(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005CF1F8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003BC160@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003BC188@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003BC1B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

void sub_1003BC204(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_1003BB0C8(*(void **)(v1 + 16), *(void **)(v1 + 24), v1 + 32, a1);
}

unint64_t sub_1003BC224()
{
  unint64_t result;

  result = qword_1005DC080;
  if (!qword_1005DC080)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddFileAttachmentIntent, &type metadata for AddFileAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC080);
  }
  return result;
}

unint64_t sub_1003BC270()
{
  unint64_t result;

  result = qword_1005DC088;
  if (!qword_1005DC088)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddFileAttachmentIntent, &type metadata for AddFileAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC088);
  }
  return result;
}

unint64_t sub_1003BC2B8()
{
  unint64_t result;

  result = qword_1005DC090;
  if (!qword_1005DC090)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddFileAttachmentIntent, &type metadata for AddFileAttachmentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC090);
  }
  return result;
}

uint64_t sub_1003BC2FC(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of AddFileAttachmentIntent.perform()>>, 1)+ 8);
}

uint64_t sub_1003BC320(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static AddFileAttachmentIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for AddFileAttachmentIntent()
{
  return &type metadata for AddFileAttachmentIntent;
}

uint64_t sub_1003BC340()
{
  return sub_100016638(&qword_1005DC0A0, &qword_1005DC0A8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

double InsertAllMentionIntent.init()@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  sub_1003BD244((uint64_t)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void *InsertAllMentionIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static InsertAllMentionIntent.persistentIdentifier;
}

unint64_t static InsertAllMentionIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_1003BC3D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static InsertAllMentionIntent.title);
  sub_10012A0B0(v10, (uint64_t)static InsertAllMentionIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000012, 0x800000010048CE80);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t InsertAllMentionIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEDC0 != -1)
    swift_once(&qword_1005CEDC0, sub_1003BC3D4);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static InsertAllMentionIntent.title);
}

uint64_t static InsertAllMentionIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEDC0 != -1)
    swift_once(&qword_1005CEDC0, sub_1003BC3D4);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static InsertAllMentionIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static InsertAllMentionIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000051, 0x800000010048CE20);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t InsertAllMentionIntent.insertionRange.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

uint64_t InsertAllMentionIntent.insertionRange.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 8) = result;
  *(_QWORD *)(v3 + 16) = a2;
  *(_BYTE *)(v3 + 24) = a3 & 1;
  return result;
}

uint64_t InsertAllMentionIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[11] = a1;
  v2[12] = v1;
  v3 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v2[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NoteEntity(0);
  v2[15] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[16] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v7);
  v2[18] = swift_task_alloc(v7);
  return swift_task_switch(sub_1003BC8EC, 0, 0);
}

uint64_t sub_1003BC8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD **)(v0 + 112);
  v4 = *(_QWORD **)(v0 + 96);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 56));
  v5 = *(void **)(v0 + 56);
  v6 = objc_msgSend(v5, "modernManagedObjectContext");
  *(_QWORD *)(v0 + 152) = v6;

  v7 = swift_allocObject(&unk_10056D738, 24, 7);
  *(_QWORD *)(v0 + 160) = v7;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v0 + 168) = *v4;
  IntentParameter.wrappedValue.getter(v3);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v8 = *(_QWORD *)(v0 + 104);
    v9 = sub_100012DDC(*(_QWORD *)(v0 + 112), (uint64_t *)&unk_1005D0B60);
    v10 = IntentParameter.projectedValue.getter(v9);
    v11 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
    v12 = type metadata accessor for AppIntentError(0);
    v13 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v12, v13, 0, 0);
    IntentParameter.needsValueError(_:)(v8);
    swift_release(v10);
    v14 = sub_100012DDC(v8, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v14);
    swift_release(v7);

    v15 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_100243780(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 144));
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 64));
    v19 = *(_QWORD *)(v0 + 64);
    *(_QWORD *)(v0 + 176) = v19;
    v20 = unk_1005D0B54;
    v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D0B50 + dword_1005D0B50);
    swift_retain(v7);
    v21 = (_QWORD *)swift_task_alloc(v20);
    *(_QWORD *)(v0 + 184) = v21;
    *v21 = v0;
    v21[1] = sub_1003BCB38;
    return v22((uint64_t)v22, v19, (uint64_t)sub_100175158, v7);
  }
}

uint64_t sub_1003BCB38()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 184);
  *(_QWORD *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  v4 = *(void **)(v2 + 176);
  swift_release(*(_QWORD *)(v2 + 160));

  if (v0)
    v5 = sub_1003BD034;
  else
    v5 = sub_1003BCBB4;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003BCBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;

  *(_QWORD *)(v0 + 40) = 0;
  v1 = *(_QWORD *)(v0 + 160);
  *(_QWORD *)(v0 + 48) = 0;
  v2 = swift_beginAccess(v1 + 16, v0 + 16, 0, 0);
  v3 = *(void **)(v1 + 16);
  if (!v3)
  {
    v9 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 144);
    v12 = *(void **)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 104);
    v14 = IntentParameter.projectedValue.getter(v2);
    v15 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v13, 1, 1, v15);
    v16 = type metadata accessor for AppIntentError(0);
    v17 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v16, v17, 0, 0);
    IntentParameter.needsValueError(_:)(v13);
    swift_release(v14);
    v18 = sub_100012DDC(v13, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v18);

LABEL_6:
    v19 = v11;
LABEL_8:
    sub_10014FFE0(v19);
    goto LABEL_9;
  }
  v4 = v3;
  if (!objc_msgSend(v4, "ic_isModernNoteType"))
  {
    v20 = *(void **)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v21 = *(_QWORD *)(v0 + 144);
    v22 = sub_10013F4E8();
    v23 = swift_allocError(&type metadata for AppIntentsError, v22, 0, 0);
    *v24 = 3;
    swift_willThrow(v23);

    v19 = v21;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 96);
  v8 = (_QWORD *)swift_task_alloc(48);
  v8[2] = v6;
  v8[3] = v4;
  v8[4] = v0 + 40;
  v8[5] = v7;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1003BD71C, v8, (char *)&type metadata for () + 8);
  if (v5)
  {
    v10 = *(void **)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    sub_10014FFE0(*(_QWORD *)(v0 + 144));

    swift_task_dealloc(v8);
LABEL_9:
    sub_10033368C(*(void **)(v0 + 40), *(void **)(v0 + 48));
    swift_release(v9);
    v25 = *(_QWORD *)(v0 + 136);
    v27 = *(_QWORD *)(v0 + 104);
    v26 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  swift_task_dealloc(v8);
  v29 = *(void **)(v0 + 40);
  *(_QWORD *)(v0 + 200) = v29;
  if (!v29)
  {
    v35 = *(void **)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v11 = *(_QWORD *)(v0 + 144);
    type metadata accessor for ICError(0);
    v37 = v36;
    *(_QWORD *)(v0 + 80) = 227;
    v38 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v39 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v40 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 72), v0 + 80, v38, v37, v39);
    swift_willThrow(v40);

    goto LABEL_6;
  }
  v30 = *(void **)(v0 + 48);
  *(_QWORD *)(v0 + 208) = v30;
  sub_1003336B8(v29, v30);
  v31 = dword_1005D7854;
  v32 = v29;
  v33 = v30;
  v34 = (_QWORD *)swift_task_alloc(v31);
  *(_QWORD *)(v0 + 216) = v34;
  *v34 = v0;
  v34[1] = sub_1003BCEEC;
  return NoteEntity.init(for:in:)(*(_QWORD *)(v0 + 136), (uint64_t)v32, (uint64_t)v33);
}

uint64_t sub_1003BCEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003BD0A8;
  else
    v3 = sub_1003BCF50;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003BCF50()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = *(void **)(v0 + 200);
  v1 = *(void **)(v0 + 208);
  v3 = *(void **)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 112);
  v8 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 104);
  v9 = sub_100019C6C((unint64_t *)&qword_1005D0A80, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  static IntentResult.result<A>(value:)(v6, v8, v9);

  sub_10014FFE0(v6);
  sub_10014FFE0(v5);
  sub_10033368C(*(void **)(v0 + 40), *(void **)(v0 + 48));
  swift_release(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BD034()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);

  sub_10014FFE0(v2);
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BD0A8()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(void **)(v0 + 200);
  v1 = *(void **)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);

  sub_10014FFE0(v4);
  sub_10033368C(*(void **)(v0 + 40), *(void **)(v0 + 48));
  swift_release(v3);
  v5 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 104);
  v6 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003BD130(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;

  v5 = objc_msgSend(a1, "ic_existingObjectWithID:", a2);
  if (v5)
  {
    v6 = v5;
    v7 = objc_opt_self(ICNote);
    v8 = (void *)swift_dynamicCastObjCClass(v6, v7);
    if (v8)
    {
      v9 = sub_1003BD9C0(v8);
      v11 = v10;

      if (!v3)
      {
        v12 = *(void **)a3;
        v13 = *(void **)(a3 + 8);
        *(_QWORD *)a3 = v9;
        *(_QWORD *)(a3 + 8) = v11;
        sub_10033368C(v12, v13);
      }
    }
    else
    {

    }
  }
}

uint64_t sub_1003BD1D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  _QWORD *v5;

  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1005DC0B4);
  *(_QWORD *)(v2 + 56) = v5;
  *v5 = v2;
  v5[1] = sub_1001802C4;
  return InsertAllMentionIntent.perform()(a1);
}

uint64_t sub_1003BD244@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64x2_t v39;
  int16x8_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[2];
  _QWORD v57[3];
  char v58;
  unsigned __int32 v59;

  v55 = a1;
  v1 = type metadata accessor for InputConnectionBehavior(0);
  v53 = *(_QWORD *)(v1 - 8);
  v54 = v1;
  __chkstk_darwin(v1);
  v52 = (char *)&v48 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v4 = __chkstk_darwin(v3);
  v51 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v50 = (char *)&v48 - v6;
  v7 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v7);
  v49 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Locale(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for LocalizedStringResource(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v48 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100012E18(&qword_1005CEEC8);
  v26 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v26);
  v27 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 104);
  v28(v15, enum case for LocalizedStringResource.BundleDescription.main(_:), v12);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter title for note to add mention to", 42, 2);
  v29 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x8000000100478AA0);
  static Locale.current.getter(v29);
  v28(v15, v27, v12);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v21, 0, 0, v18, v15, "Parameter description for note", 30, 2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v11, 0, 1, v22);
  v30 = type metadata accessor for NoteEntity(0);
  v31 = v49;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v49, 1, 1, v30);
  v32 = type metadata accessor for IntentDialog(0);
  v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v34 = v50;
  v33(v50, 1, 1, v32);
  v35 = v51;
  v33(v51, 1, 1, v32);
  v57[0] = sub_1001E8EEC();
  v57[1] = v36;
  v57[2] = v37;
  v58 = v38 & 1;
  v39 = (uint64x2_t)vdupq_n_s64(v38);
  v40 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v39, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v40.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v40), (int8x8_t)0x1000100010001);
  v59 = vmovn_s16(v40).u32[0];
  v41 = v52;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v52, enum case for InputConnectionBehavior.default(_:), v54);
  v42 = sub_100127D40();
  v43 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v25, v11, v31, v34, v35, v41, v57, &type metadata for VisibleNotesQuery, v42);
  sub_100012E18(&qword_1005CEE50);
  v56[0] = 0xD000000000000021;
  v56[1] = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v57, v56, &type metadata for String, &protocol witness table for String);
  v44 = type metadata accessor for AppDependencyManager(0);
  v45 = static AppDependencyManager.shared.getter(v44);
  result = AppDependency.__allocating_init(key:manager:)(v57, v45);
  v47 = v55;
  *(_QWORD *)(v55 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  *(_QWORD *)v47 = v43;
  *(_BYTE *)(v47 + 24) = 1;
  *(_QWORD *)(v47 + 32) = result;
  return result;
}

uint64_t sub_1003BD6F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003BD71C()
{
  uint64_t v0;

  sub_1003BD130(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

unint64_t sub_1003BD73C()
{
  unint64_t result;

  result = qword_1005DC0B8;
  if (!qword_1005DC0B8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InsertAllMentionIntent, &type metadata for InsertAllMentionIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC0B8);
  }
  return result;
}

unint64_t sub_1003BD784()
{
  unint64_t result;

  result = qword_1005DC0C0;
  if (!qword_1005DC0C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InsertAllMentionIntent, &type metadata for InsertAllMentionIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC0C0);
  }
  return result;
}

uint64_t sub_1003BD7C8(uint64_t a1)
{
  return *(_QWORD *)(swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of InsertAllMentionIntent.perform()>>, 1)+ 8);
}

uint64_t sub_1003BD7EC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_1001B2A90();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppIntent.parameterSummary>>, 1);
}

uint64_t destroy for InsertAllMentionIntent(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[4]);
}

uint64_t initializeWithCopy for InsertAllMentionIntent(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v4 = a2[4];
  *(_QWORD *)(a1 + 32) = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for InsertAllMentionIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_OWORD *)(a2 + 1);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  *(_OWORD *)(a1 + 1) = v6;
  v7 = a2[4];
  v8 = a1[4];
  a1[4] = v7;
  swift_retain(v7);
  swift_release(v8);
  return a1;
}

uint64_t *assignWithTake for InsertAllMentionIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = a1[4];
  a1[4] = a2[4];
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for InsertAllMentionIntent()
{
  return &type metadata for InsertAllMentionIntent;
}

unint64_t sub_1003BD974()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D0AB0;
  if (!qword_1005D0AB0)
  {
    v1 = sub_10001537C(&qword_1005D0AB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_1005D0AB0);
  }
  return result;
}

id sub_1003BD9C0(void *a1)
{
  id v1;
  id v2;
  void *v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  id v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  NSString v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  NSString v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSString v27;
  unsigned __int8 v28;
  id v29;
  id v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;

  v1 = a1;
  v2 = objc_msgSend(a1, "managedObjectContext");
  if (v2)
  {
    v3 = v2;
    if (!objc_msgSend(v1, "isSharedViaICloud"))
    {
      v12 = sub_10013F4E8();
      v5 = (_QWORD *)swift_allocError(&type metadata for AppIntentsError, v12, 0, 0);
      v7 = 4;
      goto LABEL_7;
    }
    if ((objc_msgSend(v1, "isPasswordProtectedAndLocked") & 1) != 0)
    {
      v4 = sub_10013F4E8();
      v5 = (_QWORD *)swift_allocError(&type metadata for AppIntentsError, v4, 0, 0);
      v7 = 11;
LABEL_7:
      *v6 = v7;
LABEL_8:
      swift_willThrow(v5);

      return v1;
    }
    if (!objc_msgSend(v1, "isEditable"))
    {
      v31 = sub_10013F4E8();
      v5 = (_QWORD *)swift_allocError(&type metadata for AppIntentsError, v31, 0, 0);
      v7 = 12;
      goto LABEL_7;
    }
    v14 = objc_msgSend(v1, "textStorage");
    if (!v14)
    {
      type metadata accessor for ICError(0);
      v33 = v32;
      v1 = type metadata accessor for ICError;
      v37 = 227;
      v34 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
      v35 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
      v5 = _BridgedStoredNSError.init(_:userInfo:)(&v38, &v37, v34, v33, v35);
      goto LABEL_8;
    }
    v15 = v14;
    v16 = objc_msgSend(v14, "length");
    v17 = objc_msgSend(objc_allocWithZone((Class)ICAttachmentInsertionController), "initWithNote:", v1);
    v18 = (void *)objc_opt_self(ICMentionsController);
    v19 = objc_msgSend(v18, "allKeyword");
    if (!v19)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v22 = v21;
      v19 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v20 = swift_bridgeObjectRelease(v22).n128_u64[0];
    }
    v23 = objc_msgSend(v18, "allUserRecordName", v20);
    if (!v23)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v25 = v24;
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v25);
    }
    v26 = objc_msgSend((id)objc_opt_self(ICInlineAttachment), "createMentionAttachmentIfApplicableWithMentionText:userRecordName:note:parentAttachment:", v19, v23, v1, 0);

    if (v26)
    {

      v27 = String._bridgeToObjectiveC()();
      objc_msgSend(v26, "updateChangeCountWithReason:", v27);

    }
    objc_msgSend(v1, "updateModificationDateAndChangeCountAndSaveImmediately");
    v38 = 0;
    v28 = objc_msgSend(v3, "save:", &v38);
    v29 = v38;
    if ((v28 & 1) != 0)
    {
      v30 = v38;
      v1 = objc_msgSend(v1, "objectID");

    }
    else
    {
      v1 = v38;
      _convertNSErrorToError(_:)(v29);

      swift_willThrow(v36);
    }
  }
  else
  {
    type metadata accessor for ICError(0);
    v9 = v8;
    v37 = 225;
    v1 = (id)sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v10 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v11 = _BridgedStoredNSError.init(_:userInfo:)(&v38, &v37, v1, v9, v10);
    swift_willThrow(v11);
  }
  return v1;
}

char *sub_1003BDDEC(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  id v25;
  Class isa;
  void *v27;
  uint64_t v28;
  void *v29;
  char *v30;
  id v31;
  id v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  char *v45;
  uint64_t v46;
  Class v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  void *v58;
  char *v59;
  uint64_t v60;
  int v61;
  char *v62;
  Class v63;
  id v64;
  id v65;
  void *v66;
  id v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char *v75;
  void *v76;
  id v77;
  int v78;
  id v79;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t (*v87)(char *, uint64_t, uint64_t, uint64_t);
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  _BYTE v99[24];
  _BYTE v100[24];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v91 = a6;
  v93 = (_QWORD *)a5;
  v88 = a4;
  v90 = a3;
  v89 = a2;
  v9 = _s14AudioRecordingV8FragmentVMa(0);
  v85 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v98 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v12 = __chkstk_darwin(v11);
  v84 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v86 = (char *)&v82 - v15;
  __chkstk_darwin(v14);
  v17 = (char *)&v82 - v16;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v97 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v23 = (char *)&v82 - v22;
  v24 = objc_msgSend(a1, "document");
  UUID.init()(v24);
  v25 = objc_allocWithZone((Class)ICTTAudioRecording);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v27 = v25;
  v28 = v18;
  v29 = a1;
  v30 = (char *)objc_msgSend(v27, "initWithDocument:identity:", v24, isa);

  v92 = *(void (**)(char *, uint64_t))(v19 + 8);
  v92(v23, v28);
  v31 = objc_msgSend(v29, "document");
  v32 = objc_msgSend(v31, "replica");

  v94 = v28;
  if (v32)
  {
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

    v33 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v33(v17, v23, v28);
    v87 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v87(v17, 0, 1, v28);
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v28);
    if ((_DWORD)v34 != 1)
    {
      v33(v97, v17, v28);
      v36 = v95;
      v35 = v96;
      goto LABEL_6;
    }
  }
  else
  {
    v87 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v34 = v87(v17, 1, 1, v28);
  }
  v36 = v95;
  v35 = v96;
  UUID.init()(v34);
  sub_1002AF3DC((uint64_t)v17);
LABEL_6:
  sub_10014BD1C(v35, (uint64_t)v100, &qword_1005DC0D0);
  sub_10014BD1C((uint64_t)v100, (uint64_t)&v101, &qword_1005DC0D0);
  v37 = v102;
  if (v102)
  {
    v38 = v101;
    v39 = v103;
    v40 = sub_100136248((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_1003EDB20(v40);
    v81 = v39;
    v42 = v91;
    v43 = sub_100255710(v41, v89, v90, v88 & 0x101, (uint64_t)v93, v91, a7, v38, v37, v81);
    if (v36)
    {
LABEL_18:
      swift_release(v41);
      v92(v97, v94);

      swift_bridgeObjectRelease(v40);
      return v30;
    }
    v44 = v43;
    swift_bridgeObjectRelease(v40);
    swift_release(v41);
    v45 = v86;
    v46 = v94;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v86, v97, v94);
    v87(v45, 0, 1, v46);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v45, 1, v46) == 1)
    {
      v47 = 0;
    }
    else
    {
      v47 = UUID._bridgeToObjectiveC()().super.isa;
      v92(v45, v46);
    }
    v35 = v96;
    v48 = objc_msgSend(objc_allocWithZone((Class)ICTTMergeableAttributedString), "initWithReplicaID:", v47);

    objc_msgSend(v30, "setTopLineSummary:", v48);
    v86 = v30;
    v49 = objc_msgSend(v30, "topLineSummary");
    if (v49)
    {
      v50 = v49;
      ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)v44, 0);

    }
    v83 = v29;

  }
  else
  {
    v86 = v30;
    v83 = v29;
    v42 = v91;
  }
  sub_10014BD1C(v35 + 24, (uint64_t)v99, &qword_1005DC0D0);
  sub_10014BD1C((uint64_t)v99, (uint64_t)&v104, &qword_1005DC0D0);
  v51 = v105;
  v52 = (uint64_t)v93;
  if (v105)
  {
    v53 = v104;
    v54 = v42;
    v55 = v106;
    v40 = sub_100136248((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_1003EDB20(v40);
    v56 = sub_100255710(v41, v89, v90, v88 & 0x101, v52, v54, a7, v53, v51, v55);
    if (v36)
    {
      v30 = v86;
      goto LABEL_18;
    }
    v58 = v56;
    swift_bridgeObjectRelease(v40);
    swift_release(v41);
    v59 = v84;
    v60 = v94;
    (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v84, v97, v94);
    v87(v59, 0, 1, v60);
    v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v59, 1, v60);
    v35 = v96;
    v62 = v86;
    if (v61 == 1)
    {
      v63 = 0;
    }
    else
    {
      v63 = UUID._bridgeToObjectiveC()().super.isa;
      v92(v59, v60);
    }
    v64 = objc_msgSend(objc_allocWithZone((Class)ICTTMergeableAttributedString), "initWithReplicaID:", v63);

    objc_msgSend(v62, "setSummary:", v64);
    v65 = objc_msgSend(v62, "summary");
    if (v65)
    {
      v66 = v65;
      ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)v58, 0);

    }
    if ((*(_BYTE *)(v35 + 56) & 1) != 0)
      v67 = 0;
    else
      v67 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)(v35 + 48));
    v57 = (uint64_t)v98;
    objc_msgSend(v62, "setSummaryVersion:", v67);

  }
  else
  {
    v57 = (uint64_t)v98;
  }
  v68 = *(_QWORD *)(v35 + 64);
  if (v68)
    v69 = *(_QWORD **)(v35 + 64);
  else
    v69 = _swiftEmptyArrayStorage;
  v70 = v69[2];
  if (v70)
  {
    v95 = v36;
    v71 = (*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80);
    v93 = v69;
    v72 = (uint64_t)v69 + v71;
    v73 = *(_QWORD *)(v85 + 72);
    swift_bridgeObjectRetain(v68);
    v74 = v83;
    v75 = v86;
    do
    {
      sub_100145220(v72, v57, _s14AudioRecordingV8FragmentVMa);
      v76 = sub_1003BEF4C(v74);
      v77 = objc_msgSend(v75, "fragments");
      objc_msgSend(v77, "addObject:", v76);

      v57 = (uint64_t)v98;
      sub_100145264(v57, _s14AudioRecordingV8FragmentVMa);
      v72 += v73;
      --v70;
    }
    while (v70);
    swift_bridgeObjectRelease(v93);
    v35 = v96;
    v30 = v75;
  }
  else
  {
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRelease(v69);
    v30 = v86;
  }
  v78 = *(unsigned __int8 *)(v35 + 72);
  if (v78 == 2)
    v79 = 0;
  else
    v79 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithBool:", v78 & 1);
  objc_msgSend(v30, "setCallRecording:", v79);

  v92(v97, v94);
  return v30;
}

uint64_t sub_1003BE62C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  _BYTE v21[24];
  _BYTE v22[8];
  _BYTE v23[24];
  _BYTE v24[24];

  v3 = v1;
  v5 = sub_100012E18(&qword_1005DC230);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1003C1F8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14AudioRecordingV10CodingKeysON, &_s14AudioRecordingV10CodingKeysON, v11, v9, v10);
  sub_10014BD1C(v3, (uint64_t)v24, &qword_1005DC0D0);
  sub_10014BD1C((uint64_t)v24, (uint64_t)v21, &qword_1005DC0D0);
  v20 = 0;
  v12 = sub_1001F64B4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &_s16AttributedStringVN, v12);
  if (!v2)
  {
    sub_10014BD1C(v3 + 24, (uint64_t)v23, &qword_1005DC0D0);
    sub_10014BD1C((uint64_t)v23, (uint64_t)v21, &qword_1005DC0D0);
    v20 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, &_s16AttributedStringVN, v12);
    v13 = *(_QWORD *)(v3 + 48);
    v14 = *(unsigned __int8 *)(v3 + 56);
    v21[0] = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, v21, v5);
    sub_10014BD1C(v3 + 64, (uint64_t)v22, &qword_1005DC238);
    sub_10014BD1C((uint64_t)v22, (uint64_t)v21, &qword_1005DC238);
    v20 = 3;
    v15 = sub_100012E18(&qword_1005DC218);
    v16 = sub_1003C1FD0(&qword_1005DC240, &qword_1005DC248, (uint64_t)&unk_100466CB0, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v20, v5, v15, v16);
    v17 = *(unsigned __int8 *)(v3 + 72);
    v21[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003BE890()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003BE8CC + 4 * byte_100466C00[*v0]))(0x53656E694C706F74, 0xEE007972616D6D75);
}

uint64_t sub_1003BE8CC()
{
  return 0x7972616D6D7573;
}

uint64_t sub_1003BE8E4()
{
  return 0x567972616D6D7573;
}

uint64_t sub_1003BE908()
{
  return 0x746E656D67617266;
}

uint64_t sub_1003BE924()
{
  return 0x65526C6C61437369;
}

uint64_t sub_1003BE948@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003C18C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003BE96C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C1F8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003BE994(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C1F8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

__n128 sub_1003BE9BC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[3];
  _OWORD v7[2];

  sub_1003C1B54(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v7[0];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 57) = *(_OWORD *)((char *)v7 + 9);
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1003BEA04(_QWORD *a1)
{
  return sub_1003BE62C(a1);
}

void sub_1003BEA44(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  double v41;
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  id v54;
  void *v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  _QWORD *v70;

  v4 = _s14AudioRecordingV17TranscriptSegmentVMa(0);
  v66 = *(_QWORD *)(v4 - 8);
  v67 = v4;
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v57 - v11;
  v13 = type metadata accessor for Date(0);
  v14 = 1;
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v69 = v13;
  v68(a2, 1, 1);
  v15 = _s14AudioRecordingV8FragmentVMa(0);
  v16 = *(int *)(v15 + 20);
  *(_QWORD *)(a2 + v16) = 0;
  v17 = a2 + *(int *)(v15 + 24);
  *(_QWORD *)v17 = 0;
  *(_BYTE *)(v17 + 8) = 1;
  v18 = objc_msgSend(a1, "createdDate");
  if (v18)
  {
    v19 = v18;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v18);

    v14 = 0;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v68)(v12, v14, 1, v69);
  sub_1001CE964((uint64_t)v12, a2);
  v20 = objc_msgSend(a1, "transcript");
  v21 = objc_msgSend(v20, "allObjects");

  v22 = type metadata accessor for ICTTTranscriptSegment(0);
  v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0)
      v53 = v23;
    else
      v53 = v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v24 = _CocoaArrayWrapper.endIndex.getter(v53);
    swift_bridgeObjectRelease(v23);
    if (v24)
      goto LABEL_5;
LABEL_30:
    swift_bridgeObjectRelease(v23);
    v26 = _swiftEmptyArrayStorage;
    goto LABEL_31;
  }
  v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v24)
    goto LABEL_30;
LABEL_5:
  v70 = _swiftEmptyArrayStorage;
  sub_1001373C4(0, v24 & ~(v24 >> 63), 0);
  if (v24 < 0)
  {
    __break(1u);
    return;
  }
  v58 = v16;
  v59 = v17;
  v60 = a2;
  v61 = a1;
  v25 = 0;
  v62 = v23 & 0xC000000000000001;
  v63 = v24;
  v26 = v70;
  v64 = v23;
  v65 = v10;
  do
  {
    if (v62)
      v27 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v23);
    else
      v27 = *(id *)(v23 + 8 * v25 + 32);
    v28 = v27;
    v29 = v67;
    v30 = (uint64_t)v6 + *(int *)(v67 + 20);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v68)(v30, 1, 1, v69);
    v31 = (char *)v6 + *(int *)(v29 + 24);
    *(_QWORD *)v31 = 0;
    v31[8] = 1;
    v32 = (uint64_t *)((char *)v6 + *(int *)(v29 + 28));
    *v32 = 0;
    v32[1] = 0;
    v33 = objc_msgSend(v28, "text");
    if (v33)
    {
      v34 = v33;
      v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v37 = v36;

    }
    else
    {
      v35 = 0;
      v37 = 0;
    }
    v38 = (uint64_t)v65;
    *v6 = v35;
    v6[1] = v37;
    v39 = objc_msgSend(v28, "timestamp");
    if (v39)
    {
      v40 = v39;
      objc_msgSend(v39, "doubleValue");
      Date.init(timeIntervalSince1970:)(v41);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v68)(v38, 0, 1, v69);

    }
    else
    {
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v68)(v38, 1, 1, v69);
    }
    sub_1001CE964(v38, v30);
    v42 = objc_msgSend(v28, "duration");
    v43 = v42;
    if (v42)
    {
      objc_msgSend(v42, "doubleValue");
      v45 = v44;

    }
    else
    {
      v45 = 0;
    }
    *(_QWORD *)v31 = v45;
    v31[8] = v43 == 0;
    v46 = objc_msgSend(v28, "speaker");
    if (v46)
    {
      v47 = v46;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v50 = v49;

    }
    else
    {

      v48 = 0;
      v50 = 0;
    }
    swift_bridgeObjectRelease(v32[1]);
    *v32 = v48;
    v32[1] = v50;
    v70 = v26;
    v52 = v26[2];
    v51 = v26[3];
    if (v52 >= v51 >> 1)
    {
      sub_1001373C4(v51 > 1, v52 + 1, 1);
      v26 = v70;
    }
    ++v25;
    v26[2] = v52 + 1;
    sub_10013B170((uint64_t)v6, (uint64_t)v26+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(_QWORD *)(v66 + 72) * v52, _s14AudioRecordingV17TranscriptSegmentVMa);
    v23 = v64;
  }
  while (v63 != v25);
  swift_bridgeObjectRelease(v64);
  a2 = v60;
  a1 = v61;
  v16 = v58;
  v17 = v59;
LABEL_31:
  swift_bridgeObjectRelease(*(_QWORD *)(a2 + v16));
  *(_QWORD *)(a2 + v16) = v26;
  v54 = objc_msgSend(a1, "transcriptVersion");
  v55 = v54;
  if (v54)
  {
    v56 = objc_msgSend(v54, "integerValue");

  }
  else
  {
    v56 = 0;
  }

  *(_QWORD *)v17 = v56;
  *(_BYTE *)(v17 + 8) = v55 == 0;
}

void *sub_1003BEF4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  Class isa;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v2 = v1;
  v4 = _s14AudioRecordingV17TranscriptSegmentVMa(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ICTTAudioRecording.Fragment(0);
  v14 = a1;
  UUID.init()(v14);
  v15 = (void *)ICTTAudioRecording.Fragment.__allocating_init(document:identity:)(v14, v13);
  sub_1001CE8D4(v2, (uint64_t)v10);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v16);
  }
  objc_msgSend(v15, "setCreatedDate:", isa);

  v19 = _s14AudioRecordingV8FragmentVMa(0);
  v20 = *(_QWORD *)(v2 + *(int *)(v19 + 20));
  if (v20)
    v21 = *(_QWORD **)(v2 + *(int *)(v19 + 20));
  else
    v21 = _swiftEmptyArrayStorage;
  v22 = v21[2];
  if (v22)
  {
    v35 = v19;
    v36 = v2;
    v23 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v34 = v21;
    v24 = (uint64_t)v21 + v23;
    v25 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(v20);
    do
    {
      sub_100145220(v24, (uint64_t)v7, _s14AudioRecordingV17TranscriptSegmentVMa);
      v26 = sub_1003BF808(v14);
      v27 = v14;
      v28 = v15;
      v29 = objc_msgSend(v15, "transcript");
      objc_msgSend(v29, "addObject:", v26);

      v15 = v28;
      v14 = v27;
      sub_100145264((uint64_t)v7, _s14AudioRecordingV17TranscriptSegmentVMa);
      v24 += v25;
      --v22;
    }
    while (v22);
    swift_bridgeObjectRelease(v34);
    v19 = v35;
    v2 = v36;
  }
  else
  {
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v21);
  }
  v30 = v2 + *(int *)(v19 + 24);
  if ((*(_BYTE *)(v30 + 8) & 1) != 0)
    v31 = 0;
  else
    v31 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", *(_QWORD *)v30);
  objc_msgSend(v15, "setTranscriptVersion:", v31);

  return v15;
}

uint64_t sub_1003BF218(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005DC290);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1003C2098();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14AudioRecordingV8FragmentV10CodingKeysON, &_s14AudioRecordingV8FragmentV10CodingKeysON, v11, v9, v10);
  v25 = 0;
  v12 = type metadata accessor for Date(0);
  v13 = sub_100019C6C(&qword_1005D37B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v3, &v25, v5, v12, v13);
  if (!v2)
  {
    v14 = _s14AudioRecordingV8FragmentVMa(0);
    v24 = *(_QWORD *)(v3 + *(int *)(v14 + 20));
    v23 = 1;
    v15 = sub_100012E18(&qword_1005DC278);
    v16 = sub_1003C20DC(&qword_1005DC298, &qword_1005DC2A0, (uint64_t)&unk_100466D00, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v24, &v23, v5, v15, v16);
    v17 = (uint64_t *)(v3 + *(int *)(v14 + 24));
    v18 = *v17;
    v19 = *((unsigned __int8 *)v17 + 8);
    v22 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v22, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003BF3E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;

  v33 = a2;
  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v3);
  v35 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100012E18(&qword_1005DC268);
  v34 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s14AudioRecordingV8FragmentVMa(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  v11 = *(int *)(v7 + 20);
  *(_QWORD *)&v9[v11] = 0;
  v12 = &v9[*(int *)(v7 + 24)];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = a1[3];
  v14 = a1[4];
  sub_10012D19C(a1, v13);
  v15 = sub_1003C2098();
  v36 = v6;
  v16 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14AudioRecordingV8FragmentV10CodingKeysON, &_s14AudioRecordingV8FragmentV10CodingKeysON, v15, v13, v14);
  if (v16)
  {
    sub_1000153C0(a1);
  }
  else
  {
    v31 = (uint64_t *)v12;
    v32 = v11;
    v38 = a1;
    v17 = v34;
    v42 = 0;
    v18 = sub_100019C6C(&qword_1005D36E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v19 = (uint64_t)v35;
    v20 = v36;
    v21 = v37;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v10, &v42, v37, v10, v18);
    sub_1001CE964(v19, (uint64_t)v9);
    v22 = sub_100012E18(&qword_1005DC278);
    v41 = 1;
    v23 = sub_1003C20DC(&qword_1005DC280, &qword_1005DC288, (uint64_t)&unk_100466D28, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, &v41, v21, v22, v23);
    v25 = v39;
    v26 = v32;
    swift_bridgeObjectRelease(*(_QWORD *)&v9[v32]);
    *(_QWORD *)&v9[v26] = v25;
    v40 = 2;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v40, v21);
    LOBYTE(v21) = v28;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v37);
    v29 = v31;
    *v31 = v27;
    *((_BYTE *)v29 + 8) = v21 & 1;
    sub_100145220((uint64_t)v9, v33, _s14AudioRecordingV8FragmentVMa);
    sub_1000153C0(v38);
  }
  return sub_100145264((uint64_t)v9, _s14AudioRecordingV8FragmentVMa);
}

uint64_t sub_1003BF704()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x697263736E617274;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0x4164657461657263;
}

uint64_t sub_1003BF76C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003C264C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003BF790(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C2098();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003BF7B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C2098();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003BF7E0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003BF3E4(a1, a2);
}

uint64_t sub_1003BF7F4(_QWORD *a1)
{
  return sub_1003BF218(a1);
}

void *sub_1003BF808(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  NSString v16;
  int *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSString v22;
  uint64_t v24;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ICTTTranscriptSegment(0);
  v14 = a1;
  UUID.init()(v14);
  v15 = (void *)ICTTTranscriptSegment.__allocating_init(document:identity:)(v14, v13);
  if (*(_QWORD *)(v2 + 8))
    v16 = String._bridgeToObjectiveC()();
  else
    v16 = 0;
  objc_msgSend(v15, "setText:", v16);

  v17 = (int *)_s14AudioRecordingV17TranscriptSegmentVMa(0);
  sub_1001CE8D4(v2 + v17[5], (uint64_t)v10);
  v18 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) != 1)
  {
    v19 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    v18 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", Date.timeIntervalSince1970.getter(v19));
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  objc_msgSend(v15, "setTimestamp:", v18);

  v20 = v2 + v17[6];
  if ((*(_BYTE *)(v20 + 8) & 1) != 0)
    v21 = 0;
  else
    v21 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithDouble:", *(double *)v20);
  objc_msgSend(v15, "setDuration:", v21);

  if (*(_QWORD *)(v2 + v17[7] + 8))
    v22 = String._bridgeToObjectiveC()();
  else
    v22 = 0;
  objc_msgSend(v15, "setSpeaker:", v22);

  return v15;
}

uint64_t sub_1003BFA8C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005DC260);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1003C2054();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON, &_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v29 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v29, v5);
  if (!v2)
  {
    v14 = (int *)_s14AudioRecordingV17TranscriptSegmentVMa(0);
    v15 = (char *)v3 + v14[5];
    v28 = 1;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100019C6C(&qword_1005D37B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v28, v5, v16, v17);
    v18 = (char *)v3 + v14[6];
    v19 = *(_QWORD *)v18;
    v20 = v18[8];
    v27 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v27, v5);
    v21 = (uint64_t *)((char *)v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    v26 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003BFC48@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  char v43;
  char v44;
  char v45;

  v35 = a2;
  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v3);
  v38 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100012E18(&qword_1005DC250);
  v37 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = _s14AudioRecordingV17TranscriptSegmentVMa(0);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t **)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v10 = 0;
  v10[1] = 0;
  v11 = (uint64_t)v10 + *(int *)(v8 + 20);
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v36 = v11;
  v13(v11, 1, 1, v12);
  v14 = (_QWORD *)((char *)v10 + *(int *)(v7 + 24));
  *v14 = 0;
  *((_BYTE *)v14 + 8) = 1;
  v15 = (_QWORD *)((char *)v10 + *(int *)(v7 + 28));
  *v15 = 0;
  v15[1] = 0;
  v17 = a1[3];
  v16 = a1[4];
  sub_10012D19C(a1, v17);
  v18 = sub_1003C2054();
  v39 = v6;
  v19 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON, &_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON, v18, v17, v16);
  if (v19)
  {
    sub_1000153C0(a1);
  }
  else
  {
    v41 = v14;
    v34 = v15;
    v20 = v37;
    v21 = (uint64_t)v38;
    v45 = 0;
    *v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v45, v40);
    v10[1] = v22;
    v44 = 1;
    v23 = sub_100019C6C(&qword_1005D36E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v12, &v44, v40, v12, v23);
    sub_1001CE964(v21, v36);
    v43 = 2;
    v25 = v39;
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v40, v26);
    v28 = v41;
    *v41 = v27;
    *((_BYTE *)v28 + 8) = v29 & 1;
    v42 = 3;
    v30 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v42, v40);
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v40);
    v33 = v34;
    swift_bridgeObjectRelease(v34[1]);
    *v33 = v30;
    v33[1] = v32;
    sub_100145220((uint64_t)v10, v35, _s14AudioRecordingV17TranscriptSegmentVMa);
    sub_1000153C0(0);
  }
  return sub_100145264((uint64_t)v10, _s14AudioRecordingV17TranscriptSegmentVMa);
}

uint64_t sub_1003BFF4C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003BFF74 + 4 * byte_100466C05[*v0]))(1954047348, 0xE400000000000000);
}

uint64_t sub_1003BFF74()
{
  return 0x6D617473656D6974;
}

uint64_t sub_1003BFF90()
{
  return 0x6E6F697461727564;
}

uint64_t sub_1003BFFA8()
{
  return 0x72656B61657073;
}

uint64_t sub_1003BFFC0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003C27B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003BFFE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C2054();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C000C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C2054();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003C0034@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003BFC48(a1, a2);
}

uint64_t sub_1003C0048(_QWORD *a1)
{
  return sub_1003BFA8C(a1);
}

uint64_t sub_1003C005C@<X0>(void *a1@<X0>, void *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  void *v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  double v40;
  id v41;
  id v42;
  uint64_t v43;
  void *v44;
  unsigned __int8 v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;

  v8 = _s14AudioRecordingV8FragmentVMa(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(a1, "topLineSummary");
  if (v12)
  {
    v13 = a2;
    sub_1001F40D4(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F410C);
    v14 = sub_10025B504(v12, v13, (uint64_t)a3);
    v12 = v15;
    v17 = v16;
    sub_1001F40D4(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
  }
  else
  {
    v14 = 0;
    v17 = 0;
  }
  v60 = (uint64_t)v12;
  sub_100261E54((uint64_t)v14, (uint64_t)v12, v17);
  v18 = objc_msgSend(a1, "summary");
  v61 = a2;
  if (v18)
  {
    v18 = sub_10025B504(v18, a2, (uint64_t)a3);
    v20 = v19;
    v22 = v21;
    sub_1001F40D4(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
    v23 = v22;
    v24 = v20;
  }
  else
  {
    sub_1001F40D4(a3, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
    v24 = 0;
    v23 = 0;
  }
  v55 = v23;
  v56 = v24;
  sub_100261E54((uint64_t)v18, v24, v23);
  v25 = objc_msgSend(a1, "summaryVersion");
  v59 = v17;
  v57 = (uint64_t)v18;
  v53 = v25;
  if (v25)
  {
    v26 = v25;
    v54 = objc_msgSend(v25, "integerValue");

  }
  else
  {
    v54 = 0;
  }
  v27 = v61;
  v58 = a1;
  v28 = objc_msgSend(a1, "fragments");
  v29 = objc_msgSend(v28, "allObjects");

  v30 = type metadata accessor for ICTTAudioRecording.Fragment(0);
  v31 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v29, v30);

  if ((unint64_t)v31 >> 62)
  {
    if (v31 < 0)
      v39 = v31;
    else
      v39 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v32 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v31);
    if (v32)
      goto LABEL_12;
LABEL_25:
    swift_bridgeObjectRelease(v31);
    v35 = _swiftEmptyArrayStorage;
    goto LABEL_26;
  }
  v32 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v32)
    goto LABEL_25;
LABEL_12:
  v62 = _swiftEmptyArrayStorage;
  result = sub_10013715C(0, v32 & ~(v32 >> 63), 0);
  if (v32 < 0)
  {
    __break(1u);
    return result;
  }
  v51 = v14;
  v52 = a4;
  v34 = 0;
  v35 = v62;
  do
  {
    if ((v31 & 0xC000000000000001) != 0)
      v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v34, v31);
    else
      v36 = *(id *)(v31 + 8 * v34 + 32);
    sub_1003BEA44(v36, (uint64_t)v11);
    v62 = v35;
    v38 = v35[2];
    v37 = v35[3];
    if (v38 >= v37 >> 1)
    {
      sub_10013715C(v37 > 1, v38 + 1, 1);
      v35 = v62;
    }
    ++v34;
    v35[2] = v38 + 1;
    sub_10013B170((uint64_t)v11, (uint64_t)v35+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v38, _s14AudioRecordingV8FragmentVMa);
  }
  while (v32 != v34);
  swift_bridgeObjectRelease(v31);
  v14 = v51;
  a4 = v52;
  v27 = v61;
LABEL_26:
  *(_QWORD *)&v40 = swift_bridgeObjectRetain(v35).n128_u64[0];
  v41 = v58;
  v42 = objc_msgSend(v58, "callRecording", v40);
  v43 = v59;
  if (v42)
  {
    v44 = v42;
    v45 = objc_msgSend(v42, "BOOLValue");

  }
  else
  {

    v45 = 2;
  }
  v46 = v53 == 0;
  v47 = v60;
  sub_100261E54((uint64_t)v14, v60, v43);
  v49 = v56;
  v48 = v57;
  v50 = v55;
  sub_100261E54(v57, v56, v55);
  sub_1001F41A0(v48, v49, v50);
  sub_1001F41A0((uint64_t)v14, v47, v43);
  sub_1001F41A0((uint64_t)v14, v47, v43);
  sub_1001F41A0(v48, v49, v50);
  result = swift_bridgeObjectRelease(v35);
  *(_QWORD *)a4 = v14;
  *(_QWORD *)(a4 + 8) = v47;
  *(_QWORD *)(a4 + 16) = v43;
  *(_QWORD *)(a4 + 24) = v48;
  *(_QWORD *)(a4 + 32) = v49;
  *(_QWORD *)(a4 + 40) = v50;
  *(_QWORD *)(a4 + 48) = v54;
  *(_BYTE *)(a4 + 56) = v46;
  *(_QWORD *)(a4 + 64) = v35;
  *(_BYTE *)(a4 + 72) = v45;
  return result;
}

uint64_t _s14AudioRecordingV8FragmentVMa(uint64_t a1)
{
  return sub_100010414(a1, qword_1005DC1C8, (uint64_t)&_s14AudioRecordingV8FragmentVMn);
}

uint64_t _s14AudioRecordingV17TranscriptSegmentVMa(uint64_t a1)
{
  return sub_100010414(a1, qword_1005DC130, (uint64_t)&_s14AudioRecordingV17TranscriptSegmentVMn);
}

uint64_t _s14AudioRecordingVwxx(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[2]);
  }
  v3 = a1[4];
  if (v3)
  {
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(a1[5]);
  }
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t _s14AudioRecordingVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 32);
    if (v6)
      goto LABEL_3;
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v6 = *(_QWORD *)(a2 + 32);
  if (!v6)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
LABEL_6:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t _s14AudioRecordingVwca(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *((_QWORD *)a2 + 1);
  if (v4)
  {
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease(v4);
      v7 = *((_QWORD *)a2 + 2);
      v8 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v7;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      sub_1001F5704(a1);
      v11 = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = v11;
    }
  }
  else if (v5)
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    v9 = *((_QWORD *)a2 + 1);
    *(_QWORD *)(a1 + 8) = v9;
    v10 = *((_QWORD *)a2 + 2);
    *(_QWORD *)(a1 + 16) = v10;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    v12 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v12;
  }
  v13 = (_OWORD *)(a1 + 24);
  v14 = (__int128 *)((char *)a2 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  v16 = *((_QWORD *)a2 + 4);
  if (v15)
  {
    if (v16)
    {
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
      v17 = *((_QWORD *)a2 + 4);
      *(_QWORD *)(a1 + 32) = v17;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRelease(v15);
      v18 = *((_QWORD *)a2 + 5);
      v19 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
    }
    else
    {
      sub_1001F5704(a1 + 24);
      v22 = *((_QWORD *)a2 + 5);
      *v13 = *v14;
      *(_QWORD *)(a1 + 40) = v22;
    }
  }
  else if (v16)
  {
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
    v20 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v20;
    v21 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 40) = v21;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
  }
  else
  {
    v23 = *v14;
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *v13 = v23;
  }
  v24 = *((_QWORD *)a2 + 6);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(_QWORD *)(a1 + 48) = v24;
  v25 = *(_QWORD *)(a1 + 64);
  v26 = *((_QWORD *)a2 + 8);
  *(_QWORD *)(a1 + 64) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v25);
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  return a1;
}

__n128 _s14AudioRecordingVwtk(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t _s14AudioRecordingVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(_QWORD *)(a2 + 8);
    if (v5)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v5;
      swift_bridgeObjectRelease(v4);
      v6 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRelease(v6);
      goto LABEL_6;
    }
    sub_1001F5704(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
LABEL_6:
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
  {
LABEL_10:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(a2 + 32);
  if (!v8)
  {
    sub_1001F5704(a1 + 24);
    goto LABEL_10;
  }
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v7);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v9);
LABEL_11:
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  return a1;
}

uint64_t _s14AudioRecordingVwet(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 73))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t _s14AudioRecordingVwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 72) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 73) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *_s14AudioRecordingVMa()
{
  return &_s14AudioRecordingVN;
}

uint64_t *sub_1003C098C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[6];
    v18 = a3[7];
    v19 = (char *)v4 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = (uint64_t *)((char *)v4 + v18);
    v22 = (uint64_t *)((char *)a2 + v18);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v23);
  }
  return v4;
}

uint64_t sub_1003C0AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 28) + 8));
}

_QWORD *sub_1003C0B48(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[6];
  v16 = a3[7];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  v19 = (_QWORD *)((char *)a1 + v16);
  v20 = (_QWORD *)((char *)a2 + v16);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

_QWORD *sub_1003C0C54(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  v21 = a3[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  return a1;
}

_OWORD *sub_1003C0DCC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  return a1;
}

_QWORD *sub_1003C0EBC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[6];
  v18 = a3[7];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  v21 = (_QWORD *)((char *)a1 + v18);
  v22 = (_QWORD *)((char *)a2 + v18);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_1003C1010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003C101C);
}

uint64_t sub_1003C101C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_1003C10A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003C10B4);
}

uint64_t sub_1003C10B4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

void sub_1003C112C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100466C58;
  sub_100019C18(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100466C70;
    v4[3] = &unk_100466C58;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

uint64_t *sub_1003C11AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v10);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    v11 = *(int *)(a3 + 20);
    v12 = *(int *)(a3 + 24);
    v13 = *(uint64_t *)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = v13;
    v14 = (char *)a1 + v12;
    v15 = (char *)a2 + v12;
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v14[8] = v15[8];
    swift_bridgeObjectRetain(v13);
  }
  return a1;
}

uint64_t sub_1003C12B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4))
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

char *sub_1003C1318(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 20);
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)&a2[v9];
  *(_QWORD *)&a1[v9] = v11;
  v12 = &a1[v10];
  v13 = &a2[v10];
  *(_QWORD *)v12 = *(_QWORD *)v13;
  v12[8] = v13[8];
  swift_bridgeObjectRetain(v11);
  return a1;
}

char *sub_1003C13F0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  v14 = *(_QWORD *)&a2[v12];
  *(_QWORD *)&a1[v12] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v13);
  v15 = *(int *)(a3 + 24);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = *(_QWORD *)v17;
  v16[8] = v17[8];
  *(_QWORD *)v16 = v18;
  return a1;
}

char *sub_1003C1524(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  v9 = *(int *)(a3 + 24);
  *(_QWORD *)&a1[*(int *)(a3 + 20)] = *(_QWORD *)&a2[*(int *)(a3 + 20)];
  v10 = &a1[v9];
  v11 = &a2[v9];
  *(_QWORD *)v10 = *(_QWORD *)v11;
  v10[8] = v11[8];
  return a1;
}

char *sub_1003C15F8(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  v12 = *(int *)(a3 + 20);
  v13 = *(_QWORD *)&a1[v12];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 24);
  v15 = &a1[v14];
  v16 = &a2[v14];
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  return a1;
}

uint64_t sub_1003C1724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003C1730);
}

uint64_t sub_1003C1730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1003C17BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003C17C8);
}

uint64_t sub_1003C17C8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

void sub_1003C1844(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_100019C18(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    v4[2] = &unk_100466C70;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t sub_1003C18C0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x53656E694C706F74 && a2 == 0xEE007972616D6D75)
  {
    v5 = 0xEE007972616D6D75;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x53656E694C706F74, 0xEE007972616D6D75, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7972616D6D7573 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7972616D6D7573, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x567972616D6D7573 && a2 == 0xEE006E6F69737265)
  {
    v8 = 0xEE006E6F69737265;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x567972616D6D7573, 0xEE006E6F69737265, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746E656D67617266 && a2 == 0xE900000000000073)
  {
    v9 = 0xE900000000000073;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E656D67617266, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x65526C6C61437369 && a2 == 0xEF676E6964726F63)
  {
    swift_bridgeObjectRelease(0xEF676E6964726F63);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65526C6C61437369, 0xEF676E6964726F63, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void sub_1003C1B54(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  char v37;

  v5 = sub_100012E18(&qword_1005DC208);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1003C1F8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&_s14AudioRecordingV10CodingKeysON, &_s14AudioRecordingV10CodingKeysON, v11, v9, v10);
  if (v2)
  {
    sub_1000153C0(a1);
    sub_1001F41A0(0, 0, 0);
    sub_1001F41A0(0, 0, 0);
    swift_bridgeObjectRelease(0);
  }
  else
  {
    v37 = 0;
    v12 = sub_1001F66F8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s16AttributedStringVN, &v37, v5, &_s16AttributedStringVN, v12);
    v13 = v33;
    v37 = 1;
    v31 = v34;
    v32 = v35;
    sub_100261E54(v33, v34, v35);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s16AttributedStringVN, &v37, v5, &_s16AttributedStringVN, v12);
    v29 = a2;
    v30 = v13;
    v15 = v33;
    v14 = v34;
    LOBYTE(v33) = 2;
    v16 = v35;
    sub_100261E54(v15, v34, v35);
    v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
    v28 = v16;
    v36 = v17;
    v18 = sub_100012E18(&qword_1005DC218);
    v37 = 3;
    v19 = sub_1003C1FD0(&qword_1005DC220, &qword_1005DC228, (uint64_t)&unk_100466CD8, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v37, v5, v18, v19);
    v20 = v33;
    LOBYTE(v33) = 4;
    swift_bridgeObjectRetain(v20);
    LODWORD(v18) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v33, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    v22 = v30;
    v21 = v31;
    v23 = v32;
    sub_100261E54(v30, v31, v32);
    HIDWORD(v26) = v18;
    v24 = v28;
    sub_100261E54(v15, v14, v28);
    sub_1001F41A0(v15, v14, v24);
    sub_1001F41A0(v22, v21, v23);
    sub_1000153C0(a1);
    sub_1001F41A0(v22, v21, v23);
    sub_1001F41A0(v15, v14, v24);
    swift_bridgeObjectRelease(v20);
    v25 = v29;
    *v29 = v22;
    v25[1] = v21;
    v25[2] = v23;
    v25[3] = v15;
    v25[4] = v14;
    v25[5] = v24;
    v25[6] = v27;
    *((_BYTE *)v25 + 56) = v36 & 1;
    v25[8] = v20;
    *((_BYTE *)v25 + 72) = BYTE4(v26);
  }
}

unint64_t sub_1003C1F8C()
{
  unint64_t result;

  result = qword_1005DC210;
  if (!qword_1005DC210)
  {
    result = swift_getWitnessTable(&unk_100467074, &_s14AudioRecordingV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC210);
  }
  return result;
}

uint64_t sub_1003C1FD0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001537C(&qword_1005DC218);
    sub_100019C6C(a2, _s14AudioRecordingV8FragmentVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003C2054()
{
  unint64_t result;

  result = qword_1005DC258;
  if (!qword_1005DC258)
  {
    result = swift_getWitnessTable(&unk_100467024, &_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC258);
  }
  return result;
}

unint64_t sub_1003C2098()
{
  unint64_t result;

  result = qword_1005DC270;
  if (!qword_1005DC270)
  {
    result = swift_getWitnessTable(&unk_100466FD4, &_s14AudioRecordingV8FragmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC270);
  }
  return result;
}

uint64_t sub_1003C20DC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001537C(&qword_1005DC278);
    sub_100019C6C(a2, _s14AudioRecordingV17TranscriptSegmentVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s14AudioRecordingV8FragmentV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003C21AC + 4 * byte_100466C0E[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003C21E0 + 4 * byte_100466C09[v4]))();
}

uint64_t sub_1003C21E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C21E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003C21F0);
  return result;
}

uint64_t sub_1003C21FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003C2204);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003C2208(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C2210(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14AudioRecordingV8FragmentV10CodingKeysOMa()
{
  return &_s14AudioRecordingV8FragmentV10CodingKeysON;
}

uint64_t _s14AudioRecordingV17TranscriptSegmentV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1003C2278 + 4 * byte_100466C18[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003C22AC + 4 * byte_100466C13[v4]))();
}

uint64_t sub_1003C22AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C22B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003C22BCLL);
  return result;
}

uint64_t sub_1003C22C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003C22D0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1003C22D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C22DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14AudioRecordingV17TranscriptSegmentV10CodingKeysOMa()
{
  return &_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON;
}

uint64_t _s14AudioRecordingV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1003C2344 + 4 * byte_100466C22[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1003C2378 + 4 * byte_100466C1D[v4]))();
}

uint64_t sub_1003C2378(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C2380(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003C2388);
  return result;
}

uint64_t sub_1003C2394(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003C239CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1003C23A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C23A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14AudioRecordingV10CodingKeysOMa()
{
  return &_s14AudioRecordingV10CodingKeysON;
}

unint64_t sub_1003C23C8()
{
  unint64_t result;

  result = qword_1005DC2A8;
  if (!qword_1005DC2A8)
  {
    result = swift_getWitnessTable(&unk_100466E3C, &_s14AudioRecordingV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2A8);
  }
  return result;
}

unint64_t sub_1003C2410()
{
  unint64_t result;

  result = qword_1005DC2B0;
  if (!qword_1005DC2B0)
  {
    result = swift_getWitnessTable(&unk_100466EF4, &_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2B0);
  }
  return result;
}

unint64_t sub_1003C2458()
{
  unint64_t result;

  result = qword_1005DC2B8;
  if (!qword_1005DC2B8)
  {
    result = swift_getWitnessTable(&unk_100466FAC, &_s14AudioRecordingV8FragmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2B8);
  }
  return result;
}

unint64_t sub_1003C24A0()
{
  unint64_t result;

  result = qword_1005DC2C0;
  if (!qword_1005DC2C0)
  {
    result = swift_getWitnessTable(&unk_100466F1C, &_s14AudioRecordingV8FragmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2C0);
  }
  return result;
}

unint64_t sub_1003C24E8()
{
  unint64_t result;

  result = qword_1005DC2C8;
  if (!qword_1005DC2C8)
  {
    result = swift_getWitnessTable(&unk_100466F44, &_s14AudioRecordingV8FragmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2C8);
  }
  return result;
}

unint64_t sub_1003C2530()
{
  unint64_t result;

  result = qword_1005DC2D0;
  if (!qword_1005DC2D0)
  {
    result = swift_getWitnessTable(&unk_100466E64, &_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2D0);
  }
  return result;
}

unint64_t sub_1003C2578()
{
  unint64_t result;

  result = qword_1005DC2D8;
  if (!qword_1005DC2D8)
  {
    result = swift_getWitnessTable(&unk_100466E8C, &_s14AudioRecordingV17TranscriptSegmentV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2D8);
  }
  return result;
}

unint64_t sub_1003C25C0()
{
  unint64_t result;

  result = qword_1005DC2E0;
  if (!qword_1005DC2E0)
  {
    result = swift_getWitnessTable(&unk_100466DAC, &_s14AudioRecordingV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2E0);
  }
  return result;
}

unint64_t sub_1003C2608()
{
  unint64_t result;

  result = qword_1005DC2E8;
  if (!qword_1005DC2E8)
  {
    result = swift_getWitnessTable(&unk_100466DD4, &_s14AudioRecordingV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1005DC2E8);
  }
  return result;
}

uint64_t sub_1003C264C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074)
  {
    v5 = 0xE900000000000074;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x697263736E617274 && a2 == 0xEA00000000007470)
  {
    v7 = 0xEA00000000007470;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x697263736E617274, 0xEA00000000007470, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x800000010048CEA0)
  {
    swift_bridgeObjectRelease(0x800000010048CEA0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010048CEA0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1003C27B4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v7 = 0xE900000000000070;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E6F697461727564 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x72656B61657073 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x72656B61657073, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

double AddOrRemoveNoteLockIntent.init()@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  sub_1003C4E80((uint64_t *)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void *AddOrRemoveNoteLockIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static AddOrRemoveNoteLockIntent.persistentIdentifier;
}

unint64_t static AddOrRemoveNoteLockIntent.persistentIdentifier.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_1003C29D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static AddOrRemoveNoteLockIntent.title);
  sub_10012A0B0(v10, (uint64_t)static AddOrRemoveNoteLockIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000017, 0x800000010048CFB0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t AddOrRemoveNoteLockIntent.title.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CEDC8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static AddOrRemoveNoteLockIntent.title, (uint64_t)sub_1003C29D0);
}

uint64_t static AddOrRemoveNoteLockIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CEDC8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static AddOrRemoveNoteLockIntent.title, (uint64_t)sub_1003C29D0, a1);
}

void *AddOrRemoveNoteLockIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static AddOrRemoveNoteLockIntent.openAppWhenRun;
}

uint64_t static AddOrRemoveNoteLockIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000093, 0x800000010048CEE0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static AddOrRemoveNoteLockIntent.parameterSummary.getter(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_1004670E0, a2);
  v3 = sub_100012E18(&qword_1005DC2F0);
  v4 = sub_1001B28B4();
  v5 = sub_100016638(&qword_1005DC2F8, &qword_1005DC2F0, (uint64_t)&protocol conformance descriptor for ParameterSummaryTupleCaseCondition<A, B, C>);
  return ParameterSummarySwitchCondition.init(_:_:)(KeyPath, sub_1003C2E40, 0, v3, v4, v5);
}

uint64_t sub_1003C2E40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  unint64_t v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;

  v42 = a1;
  v1 = sub_100012E18(&qword_1005DC398);
  v2 = *(_QWORD *)(v1 - 8);
  v40 = v1;
  v41 = v2;
  v3 = __chkstk_darwin(v1);
  v38 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v39 = (char *)&v32 - v5;
  v6 = sub_100012E18(&qword_1005DC3A0);
  v36 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v32 - v11;
  __chkstk_darwin(v10);
  v37 = (char *)&v32 - v13;
  v44 = 0;
  v14 = sub_100012E18(&qword_1005DC3A8);
  v15 = sub_1001B28B4();
  v34 = v15;
  v16 = sub_1001B40AC();
  v33 = v16;
  v17 = sub_100016638(&qword_1005DC3B0, &qword_1005DC3A8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  v32 = v17;
  ParameterSummaryCaseCondition.init(_:_:)(&v44, sub_1003C31B4, 0, &type metadata for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent.LockOperation, v14, v15, v16, v17);
  v18 = sub_100016638(&qword_1005DC3B8, &qword_1005DC3A0, (uint64_t)&protocol conformance descriptor for ParameterSummaryCaseCondition<A, B, C>);
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v12, &type metadata for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent.LockOperation, v6, v18);
  v19 = *(void (**)(char *, uint64_t))(v36 + 8);
  v19(v12, v6);
  v43 = 1;
  v35 = v14;
  v21 = v33;
  v20 = v34;
  ParameterSummaryCaseCondition.init(_:_:)(&v43, sub_1003C31D4, 0, &type metadata for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent.LockOperation, v14, v34, v33, v17);
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v9, &type metadata for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent.LockOperation, v6, v18);
  v19(v9, v6);
  v22 = v38;
  v23 = v21;
  v24 = v32;
  ParameterSummaryDefaultCaseCondition.init(_:)(sub_1003C3478, 0, &type metadata for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent.LockOperation, v14, v20, v21, v32);
  v25 = sub_100016638(&qword_1005DC3C0, &qword_1005DC398, (uint64_t)&protocol conformance descriptor for ParameterSummaryDefaultCaseCondition<A, B, C>);
  v27 = v39;
  v26 = v40;
  static ParameterSummaryCaseBuilder.buildExpression<A>(_:)(v22, &type metadata for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent.LockOperation, v40, v25);
  v28 = *(void (**)(char *, uint64_t))(v41 + 8);
  v28(v22, v26);
  v31 = v24;
  v29 = v37;
  static ParameterSummaryCaseBuilder.buildBlock<A, B, C>(_:_:_:)(v37, v12, v27, &type metadata for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent.LockOperation, v6, v6, v35, v23, v18, v18, v31);
  v28(v27, v26);
  v19(v12, v6);
  return ((uint64_t (*)(char *, uint64_t))v19)(v29, v6);
}

uint64_t sub_1003C31B4@<X0>(uint64_t a1@<X8>)
{
  return sub_1003C31F8(9, 0x6F74206B636F6C20, (void *)0xE900000000000020, a1);
}

uint64_t sub_1003C31D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1003C31F8(11, 0x7266206B636F6C20, (void *)0xEB00000000206D6FLL, a1);
}

uint64_t sub_1003C31F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::String v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a3;
  v34 = a4;
  v6 = sub_100012E18(&qword_1005DC3C8);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100012E18(&qword_1005DC3D0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012E18(&qword_1005DC3A8);
  v33 = *(_QWORD *)(v12 - 8);
  v13 = __chkstk_darwin(v12);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v31 - v16;
  v18 = sub_1001B28B4();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(a1, 2, &type metadata for AddOrRemoveNoteLockIntent, v18);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v19);
  KeyPath = swift_getKeyPath(&unk_1004670E0, v20);
  v22 = sub_100012E18(&qword_1005DC3D8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v9, v22);
  swift_release(KeyPath);
  v23._countAndFlagsBits = a2;
  v23._object = v32;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v23);
  v25 = swift_getKeyPath(&unk_1004674C8, v24);
  v26 = sub_100012E18((uint64_t *)&unk_1005DC3E0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v25, v9, v26);
  swift_release(v25);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v27);
  ParameterSummaryString.init(stringInterpolation:)(v11, &type metadata for AddOrRemoveNoteLockIntent, v18);
  IntentParameterSummary.init(_:table:)(v8, 0, 0, &type metadata for AddOrRemoveNoteLockIntent, v18);
  v28 = sub_100016638(&qword_1005DC3B0, &qword_1005DC3A8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
  static ParameterSummaryBuilder.buildExpression<A>(_:)(v15, &type metadata for AddOrRemoveNoteLockIntent, v12, v28);
  v29 = *(void (**)(char *, uint64_t))(v33 + 8);
  v29(v15, v12);
  static ParameterSummaryBuilder.buildBlock<A>(_:)(v17, &type metadata for AddOrRemoveNoteLockIntent, v12, v28);
  return ((uint64_t (*)(char *, uint64_t))v29)(v17, v12);
}

uint64_t sub_1003C3478@<X0>(uint64_t a1@<X8>)
{
  return sub_1003C31F8(9, 0x6E6F206B636F6C20, (void *)0xE900000000000020, a1);
}

uint64_t AddOrRemoveNoteLockIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[18] = a1;
  v2[19] = v1;
  v3 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NoteEntity(0);
  v2[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[22] = v5;
  v2[23] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  v2[24] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003C3540, 0, 0);
}

uint64_t sub_1003C3540()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t *v12;
  id v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD **)(v0 + 152);
  v2 = (void *)v1[4];
  *(_QWORD *)(v0 + 200) = v2;
  if (v2)
  {
    v3 = *(_QWORD **)(v0 + 192);
    v4 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 176);
    *(_QWORD *)(v0 + 208) = v1[2];
    v6 = v2;
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 104));
    v7 = *(void **)(v0 + 104);
    *(_QWORD *)(v0 + 216) = objc_msgSend(v7, "modernManagedObjectContext");

    v8 = swift_allocObject(&unk_10056DB88, 24, 7);
    *(_QWORD *)(v0 + 224) = v8;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v0 + 232) = v1[1];
    IntentParameter.wrappedValue.getter(v3);
    if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4))
    {
      v30 = *(_QWORD *)(v0 + 192);
      sub_10014FF9C(v30, *(_QWORD *)(v0 + 184));
      sub_100012DDC(v30, (uint64_t *)&unk_1005D0B60);
      AppDependency.wrappedValue.getter((_QWORD *)(v0 + 120));
      v31 = *(_QWORD *)(v0 + 120);
      *(_QWORD *)(v0 + 240) = v31;
      v32 = unk_1005D0B54;
      v52 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005D0B50 + dword_1005D0B50);
      swift_retain(v8);
      v33 = (_QWORD *)swift_task_alloc(v32);
      *(_QWORD *)(v0 + 248) = v33;
      *v33 = v0;
      v33[1] = sub_1003C3940;
      return v52((uint64_t)v52, v31, (uint64_t)sub_100175158, v8);
    }
    sub_100012DDC(*(_QWORD *)(v0 + 192), (uint64_t *)&unk_1005D0B60);
    *(_QWORD *)(v0 + 264) = 0;
    v9 = *(_QWORD *)(v0 + 224);
    v10 = swift_beginAccess(v9 + 16, v0 + 80, 0, 0);
    v11 = *(void **)(v9 + 16);
    *(_QWORD *)(v0 + 272) = v11;
    if (v11)
    {
      v12 = *(uint64_t **)(v0 + 152);
      v13 = v11;
      v14 = objc_msgSend(v13, "ic_isModernNoteType");
      v15 = *v12;
      *(_QWORD *)(v0 + 280) = v15;
      if (v14)
      {
        v16 = *(_QWORD *)(v0 + 232);
        v17 = *(_QWORD *)(v0 + 208);
        v18 = *(void **)(v0 + 216);
        v19 = *(void **)(v0 + 200);
        v20 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + 24);
        *(_QWORD *)(v0 + 288) = v20;
        v21 = v19;
        v22 = v13;
        v23 = v18;
        swift_retain(v15);
        swift_retain(v16);
        swift_retain(v17);
        swift_retain(v20);
        return swift_task_switch(sub_1003C3BFC, 0, 0);
      }
      IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 304));
      v44 = *(unsigned __int8 *)(v0 + 304);
      v45 = sub_10013F4E8();
      v46 = swift_allocError(&type metadata for AppIntentsError, v45, 0, 0);
      v35 = *(void **)(v0 + 216);
      v48 = *(_QWORD *)(v0 + 224);
      v36 = *(void **)(v0 + 200);
      if (v44 == 1)
        v49 = 20;
      else
        v49 = 17;
      *v47 = v49;
      swift_willThrow(v46);

      v43 = v48;
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 224);
      v35 = *(void **)(v0 + 216);
      v36 = *(void **)(v0 + 200);
      v37 = *(_QWORD *)(v0 + 160);
      v38 = IntentParameter.projectedValue.getter(v10);
      v39 = type metadata accessor for IntentDialog(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v37, 1, 1, v39);
      v40 = type metadata accessor for AppIntentError(0);
      v41 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
      swift_allocError(v40, v41, 0, 0);
      IntentParameter.needsValueError(_:)(v37);
      swift_release(v38);
      v42 = sub_100012DDC(v37, (uint64_t *)&unk_1005CEE20);
      swift_willThrow(v42);
      v43 = v34;
    }
    swift_release(v43);

  }
  else
  {
    type metadata accessor for ICError(0);
    v26 = v25;
    *(_QWORD *)(v0 + 112) = 222;
    v27 = sub_100174AD0((uint64_t)_swiftEmptyArrayStorage);
    v28 = sub_100019C6C((unint64_t *)&qword_1005CF520, (uint64_t (*)(uint64_t))type metadata accessor for ICError, (uint64_t)&unk_100452864);
    v29 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 136), v0 + 112, v27, v26, v28);
    swift_willThrow(v29);
  }
  v50 = *(_QWORD *)(v0 + 184);
  v51 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003C3940()
{
  uint64_t v0;
  uint64_t **v1;
  uint64_t *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = (*v1)[31];
  (*v1)[32] = v0;
  swift_task_dealloc(v3);
  v4 = (void *)v2[30];
  v5 = v2[28];
  sub_10014FFE0(v2[23]);
  swift_release(v5);

  if (v0)
    v6 = sub_1003C3EF8;
  else
    v6 = sub_1003C39C8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1003C39C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  id v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  *(_QWORD *)(v0 + 264) = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 224);
  v2 = swift_beginAccess(v1 + 16, v0 + 80, 0, 0);
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v0 + 272) = v3;
  if (v3)
  {
    v4 = *(uint64_t **)(v0 + 152);
    v5 = v3;
    v6 = objc_msgSend(v5, "ic_isModernNoteType");
    v7 = *v4;
    *(_QWORD *)(v0 + 280) = v7;
    if (v6)
    {
      v8 = *(_QWORD *)(v0 + 232);
      v9 = *(_QWORD *)(v0 + 208);
      v10 = *(void **)(v0 + 216);
      v11 = *(void **)(v0 + 200);
      v12 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + 24);
      *(_QWORD *)(v0 + 288) = v12;
      v13 = v11;
      v14 = v5;
      v15 = v10;
      swift_retain(v7);
      swift_retain(v8);
      swift_retain(v9);
      swift_retain(v12);
      return swift_task_switch(sub_1003C3BFC, 0, 0);
    }
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 304));
    v26 = *(unsigned __int8 *)(v0 + 304);
    v27 = sub_10013F4E8();
    v28 = swift_allocError(&type metadata for AppIntentsError, v27, 0, 0);
    v18 = *(void **)(v0 + 216);
    v17 = *(_QWORD *)(v0 + 224);
    v19 = *(void **)(v0 + 200);
    if (v26 == 1)
      v30 = 20;
    else
      v30 = 17;
    *v29 = v30;
    swift_willThrow(v28);

  }
  else
  {
    v17 = *(_QWORD *)(v0 + 224);
    v18 = *(void **)(v0 + 216);
    v19 = *(void **)(v0 + 200);
    v20 = *(_QWORD *)(v0 + 160);
    v21 = IntentParameter.projectedValue.getter(v2);
    v22 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v20, 1, 1, v22);
    v23 = type metadata accessor for AppIntentError(0);
    v24 = sub_100019C6C((unint64_t *)&unk_1005D6AD0, (uint64_t (*)(uint64_t))&type metadata accessor for AppIntentError, (uint64_t)&protocol conformance descriptor for AppIntentError);
    swift_allocError(v23, v24, 0, 0);
    IntentParameter.needsValueError(_:)(v20);
    swift_release(v21);
    v25 = sub_100012DDC(v20, (uint64_t *)&unk_1005CEE20);
    swift_willThrow(v25);
  }
  swift_release(v17);

  v31 = *(_QWORD *)(v0 + 184);
  v32 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003C3BFC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = v0 + 2;
  v2 = v0[33];
  v3 = v0[34];
  v4 = v0[27];
  v5 = v0[25];
  v6 = v0[19];
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_1003C3CE8;
  v7 = swift_continuation_init(v0 + 2, 1);
  v8 = (_QWORD *)swift_task_alloc(64);
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v6;
  v8[5] = v5;
  v8[6] = v7;
  NSManagedObjectContext.performAndWait<A>(_:)(sub_1003C5588, v8, (char *)&type metadata for () + 8);
  swift_task_dealloc(v8);
  if (v2)
  {
    v9 = sub_100012E18(&qword_1005D7A90);
    v10 = swift_allocError(v9, &protocol self-conformance witness table for Error, 0, 0);
    *v11 = v2;
    swift_continuation_throwingResumeWithError(v7, v10);
  }
  return swift_continuation_await(v1);
}

uint64_t sub_1003C3CE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 296) = v3;
  if (v3)
  {
    swift_willThrow(a1);
    v4 = sub_1003C3DAC;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 280);
    v6 = *(_QWORD *)(v2 + 288);
    v7 = *(void **)(v2 + 272);
    v8 = *(_QWORD *)(v2 + 232);
    v9 = *(_QWORD *)(v2 + 208);
    v10 = *(void **)(v2 + 200);
    v11 = *(void **)(v2 + 128);

    swift_release(v5);
    swift_release(v8);
    swift_release(v9);
    swift_release(v6);

    v4 = sub_1003C3E6C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003C3DAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 288);
  v4 = *(void **)(v1 + 272);
  v3 = *(_QWORD *)(v1 + 280);
  v6 = *(_QWORD *)(v1 + 224);
  v5 = *(_QWORD *)(v1 + 232);
  v7 = *(_QWORD *)(v1 + 208);
  v8 = *(void **)(v1 + 216);
  v9 = *(void **)(v1 + 200);
  swift_willThrow(a1);

  swift_release(v3);
  swift_release(v5);
  swift_release(v7);
  swift_release(v2);

  swift_release(v6);
  v10 = *(_QWORD *)(v1 + 184);
  v11 = *(_QWORD *)(v1 + 160);
  swift_task_dealloc(*(_QWORD *)(v1 + 192));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003C3E6C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(void **)(v1 + 272);
  v4 = *(void **)(v1 + 216);
  v3 = *(_QWORD *)(v1 + 224);
  v5 = *(_QWORD *)(v1 + 192);
  v6 = *(void **)(v1 + 200);
  v7 = *(_QWORD *)(v1 + 184);
  v8 = *(_QWORD *)(v1 + 160);
  static IntentResult.result<>()(a1);

  swift_release(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003C3EF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(void **)(v0 + 200);

  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003C3F60(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int v16;
  id v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void *v27;
  uint64_t (*v28)(int);
  uint64_t v29;

  v7 = objc_msgSend(a1, "ic_existingObjectWithID:", a2);
  if (v7)
  {
    v8 = v7;
    v9 = objc_opt_self(ICNote);
    v10 = swift_dynamicCastObjCClass(v8, v9);
    if (!v10)
    {

      return;
    }
    v11 = (void *)v10;
    IntentParameter.wrappedValue.getter(&v24);
    if ((_BYTE)v24)
    {
      if (v24 == 1)
      {
        if ((objc_msgSend(v11, "isPasswordProtected") & 1) != 0)
        {
          v12 = 19;
LABEL_10:
          v13 = sub_10013F4E8();
          v14 = swift_allocError(&type metadata for AppIntentsError, v13, 0, 0);
          *v15 = v12;
          swift_willThrow(v14);

          return;
        }
        v16 = 0;
      }
      else
      {
        v16 = objc_msgSend(v11, "isPasswordProtected") ^ 1;
      }
    }
    else
    {
      if ((objc_msgSend(v11, "isPasswordProtected") & 1) != 0)
      {
        v12 = 18;
        goto LABEL_10;
      }
      v16 = 1;
    }
    v17 = objc_msgSend(objc_allocWithZone((Class)ICNoteLockManager), "initWithNote:", v11);
    objc_msgSend(v17, "setWindow:", a4);
    if (v16)
    {
      v18 = swift_allocObject(&unk_10056DD20, 32, 7);
      *(_QWORD *)(v18 + 16) = a5;
      *(_QWORD *)(v18 + 24) = v17;
      v28 = sub_1003C5D04;
      v29 = v18;
      v24 = _NSConcreteStackBlock;
      v25 = 1107296256;
      v26 = sub_100343CD8;
      v27 = &unk_10056DD38;
      v19 = _Block_copy(&v24);
      v20 = v29;
      v21 = v17;
      objc_msgSend(v21, "addLockWithCompletionHandler:", v19, swift_release(v20).n128_f64[0]);
    }
    else
    {
      v22 = swift_allocObject(&unk_10056DCD0, 32, 7);
      *(_QWORD *)(v22 + 16) = a5;
      *(_QWORD *)(v22 + 24) = v17;
      v28 = sub_1003C5C94;
      v29 = v22;
      v24 = _NSConcreteStackBlock;
      v25 = 1107296256;
      v26 = sub_100343CD8;
      v27 = &unk_10056DCE8;
      v19 = _Block_copy(&v24);
      v23 = v29;
      v21 = v17;
      objc_msgSend(v21, "removeLockWithCompletionHandler:", v19, swift_release(v23).n128_f64[0]);
    }

    _Block_release(v19);
  }
}

uint64_t sub_1003C41E0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0x6F6974617265704FLL, 0xE90000000000006ELL);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Title for enum representing locking operations", 46, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CEDD0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation, (uint64_t)sub_1003C41E0);
}

uint64_t static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CEDD0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation, (uint64_t)sub_1003C41E0, a1);
}

unint64_t sub_1003C443C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  unint64_t result;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  void (*v45)(char *);
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  char *v56;

  v0 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v0);
  v49 = (char *)&v42 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v56 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100012E18(&qword_1005DC390);
  v17 = sub_100012E18(&qword_1005D0190);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v47 = v17;
  v48 = 2 * v19;
  v22 = swift_allocObject(v16, v21 + 3 * v19, v20 | 7);
  v50 = v22;
  *(_OWORD *)(v22 + 16) = xmmword_100456A10;
  v55 = v22 + v21;
  v44 = v22 + v21 + *(int *)(v17 + 48);
  *(_BYTE *)(v22 + v21) = 0;
  v23 = v12;
  v24 = String.LocalizationValue.init(stringLiteral:)(6579265, 0xE300000000000000);
  static Locale.current.getter(v24);
  v46 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v45 = *(void (**)(char *))(v4 + 104);
  v25 = v6;
  v26 = v52;
  v45(v6);
  v27 = v15;
  v28 = v9;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v9, v6, "Link enum value", 15, 2);
  v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v29 = v56;
  v30 = v51;
  v43(v56, 1, 1, v51);
  v31 = type metadata accessor for DisplayRepresentation.Image(0);
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v54 = v31;
  v32 = v49;
  v53(v49, 1, 1, v31);
  DisplayRepresentation.init(title:subtitle:image:)(v27, v29, v32);
  v44 = v55 + v19 + *(int *)(v47 + 48);
  *(_BYTE *)(v55 + v19) = 1;
  v33 = String.LocalizationValue.init(stringLiteral:)(0x65766F6D6552, 0xE600000000000000);
  static Locale.current.getter(v33);
  v34 = v46;
  v35 = (void (*)(char *, uint64_t, uint64_t))v45;
  ((void (*)(char *, _QWORD, uint64_t))v45)(v25, v46, v26);
  v36 = v27;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v28, v25, "Link enum value", 15, 2);
  v37 = v56;
  v38 = v30;
  v39 = v43;
  v43(v56, 1, 1, v38);
  v53(v32, 1, 1, v54);
  DisplayRepresentation.init(title:subtitle:image:)(v36, v37, v32);
  *(_BYTE *)(v55 + v48) = 2;
  v40 = String.LocalizationValue.init(stringLiteral:)(0x656C67676F54, 0xE600000000000000);
  static Locale.current.getter(v40);
  v35(v25, v34, v52);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v23, 0, 0, v28, v25, "Link enum value", 15, 2);
  v39(v37, 1, 1, v51);
  v53(v32, 1, 1, v54);
  DisplayRepresentation.init(title:subtitle:image:)(v36, v37, v32);
  result = sub_100136B98(v50);
  static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations = result;
  return result;
}

uint64_t *AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_1005CEDD8 != -1)
    swift_once(&qword_1005CEDD8, sub_1003C443C);
  return &static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations;
}

double static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_1005CEDD8 != -1)
    swift_once(&qword_1005CEDD8, sub_1003C443C);
  swift_beginAccess(&static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations).n128_u64[0];
  return result;
}

double static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations.setter(uint64_t a1)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  if (qword_1005CEDD8 != -1)
    swift_once(&qword_1005CEDD8, sub_1003C443C);
  swift_beginAccess(&static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations, v4, 1, 0);
  v2 = static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations;
  static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations = a1;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t (*static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations.modify(uint64_t a1))(_QWORD)
{
  if (qword_1005CEDD8 != -1)
    swift_once(&qword_1005CEDD8, sub_1003C443C);
  swift_beginAccess(&static AddOrRemoveNoteLockIntent.LockOperation.caseDisplayRepresentations, a1, 33, 0);
  return j__swift_endAccess;
}

_UNKNOWN **static AddOrRemoveNoteLockIntent.LockOperation.allCases.getter()
{
  return &off_100557598;
}

uint64_t AddOrRemoveNoteLockIntent.LockOperation.rawValue.getter(char a1)
{
  if (!a1)
    return 6579297;
  if (a1 == 1)
    return 0x65766F6D6572;
  return 0x656C67676F74;
}

uint64_t sub_1003C4AA8(char *a1, unsigned __int8 *a2)
{
  return sub_1002153F8(*a1, *a2);
}

unint64_t sub_1003C4AB4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s11MobileNotes25AddOrRemoveNoteLockIntentV0G9OperationO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1003C4AE0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE300000000000000;
  v4 = 0x65766F6D6572;
  if (v2 != 1)
    v4 = 0x656C67676F74;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 6579297;
  if (!v5)
    v3 = 0xE600000000000000;
  *a1 = v6;
  a1[1] = v3;
}

Swift::Int sub_1003C4B30()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 0x65766F6D6572;
  if (v1 != 1)
    v2 = 0x656C67676F74;
  if (v1)
    v3 = v2;
  else
    v3 = 6579297;
  if (v1)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1003C4BC0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 0x65766F6D6572;
  if (*v1 != 1)
    v2 = 0x656C67676F74;
  if (*v1)
    v3 = v2;
  else
    v3 = 6579297;
  if (*v1)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE300000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_1003C4C2C(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 0x65766F6D6572;
  if (v2 != 1)
    v3 = 0x656C67676F74;
  if (v2)
    v4 = v3;
  else
    v4 = 6579297;
  if (v2)
    v5 = 0xE600000000000000;
  else
    v5 = 0xE300000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1003C4CB8@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CEDD0, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static AddOrRemoveNoteLockIntent.LockOperation.typeDisplayRepresentation, (uint64_t)sub_1003C41E0, a1);
}

uint64_t sub_1003C4CDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100128884();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1003C4D14(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003C57A8();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_1003C4D4C(_QWORD *a1@<X8>)
{
  *a1 = &off_100555B48;
}

uint64_t sub_1003C4D5C@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CEDC8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static AddOrRemoveNoteLockIntent.title, (uint64_t)sub_1003C29D0, a1);
}

uint64_t sub_1003C4D80(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;

  KeyPath = swift_getKeyPath(&unk_1004670E0, a2);
  v4 = sub_100012E18(&qword_1005DC2F0);
  v5 = sub_100016638(&qword_1005DC2F8, &qword_1005DC2F0, (uint64_t)&protocol conformance descriptor for ParameterSummaryTupleCaseCondition<A, B, C>);
  return ParameterSummarySwitchCondition.init(_:_:)(KeyPath, sub_1003C2E40, 0, v4, a2, v5);
}

uint64_t sub_1003C4E10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  _QWORD *v5;

  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1005DC304);
  *(_QWORD *)(v2 + 56) = v5;
  *v5 = v2;
  v5[1] = sub_1001802C4;
  return AddOrRemoveNoteLockIntent.perform()(a1);
}

uint64_t sub_1003C4E80@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64x2_t v46;
  int16x8_t v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t result;
  uint64_t *v57;
  char *v58;
  unsigned int v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  void (*v62)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  void (*v66)(char *);
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD v77[3];
  char v78;
  unsigned __int32 v79;

  v70 = a1;
  v1 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v1);
  v69 = (char *)&v58 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for InputConnectionBehavior(0);
  v68 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74);
  v73 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v5 = __chkstk_darwin(v4);
  v67 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v72 = (char *)&v58 - v7;
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v10 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Locale(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for LocalizedStringResource(0);
  v22 = *(_QWORD *)(v21 - 8);
  v63 = v21;
  __chkstk_darwin(v21);
  v71 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100012E18(&qword_1005CF210);
  v24 = String.LocalizationValue.init(stringLiteral:)(0x6F6974617265704FLL, 0xE90000000000006ELL);
  static Locale.current.getter(v24);
  v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 104);
  v59 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v61 = v11;
  v26(v14, enum case for LocalizedStringResource.BundleDescription.main(_:), v11);
  v60 = v26;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for Add or Remove Note Lock intent", 50, 2);
  v27 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000039, 0x8000000100478B10);
  static Locale.current.getter(v27);
  v26(v14, v25, v11);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for operation", 35, 2);
  v62 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
  v58 = v10;
  v62(v10, 0, 1, v21);
  LOBYTE(v77[0]) = 3;
  v28 = type metadata accessor for IntentDialog(0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v30 = v72;
  v29(v72, 1, 1, v28);
  v31 = v67;
  v29(v67, 1, 1, v28);
  v65 = enum case for InputConnectionBehavior.default(_:);
  v66 = *(void (**)(char *))(v68 + 104);
  v32 = v73;
  v66(v73);
  v33 = sub_100128884();
  v68 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v71, v10, v77, v30, v31, v32, &off_100555D18, v33);
  v64 = sub_100012E18(&qword_1005CEEC8);
  v34 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v34);
  v35 = v59;
  v36 = v61;
  v37 = v60;
  v60(v14, v59, v61);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter title for note", 24, 2);
  v38 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000035, 0x8000000100478B50);
  static Locale.current.getter(v38);
  v37(v14, v35, v36);
  v39 = v58;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v20, 0, 0, v17, v14, "Parameter description for note", 30, 2);
  v62(v39, 0, 1, v63);
  v40 = type metadata accessor for NoteEntity(0);
  v41 = v69;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v69, 1, 1, v40);
  v42 = v72;
  v29(v72, 1, 1, v28);
  v29(v31, 1, 1, v28);
  v77[0] = sub_1001E9508();
  v77[1] = v43;
  v77[2] = v44;
  v78 = v45 & 1;
  v46 = (uint64x2_t)vdupq_n_s64(v45);
  v47 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v46, (uint64x2_t)xmmword_100451C10), (int32x4_t)vshlq_u64(v46, (uint64x2_t)xmmword_100451C00));
  *(int8x8_t *)v47.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v47), (int8x8_t)0x1000100010001);
  v79 = vmovn_s16(v47).u32[0];
  v48 = v73;
  ((void (*)(char *, _QWORD, uint64_t))v66)(v73, v65, v74);
  v49 = sub_100127D40();
  v50 = IntentParameter<>.init<A>(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:query:)(v71, v39, v41, v42, v31, v48, v77, &type metadata for VisibleNotesQuery, v49);
  sub_100012E18(&qword_1005CEE50);
  v75 = 0xD000000000000021;
  v76 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v77, &v75, &type metadata for String, &protocol witness table for String);
  v51 = type metadata accessor for AppDependencyManager(0);
  v52 = static AppDependencyManager.shared.getter(v51);
  v53 = AppDependency.__allocating_init(key:manager:)(v77, v52);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v75 = 0xD000000000000024;
  v76 = 0x8000000100476B40;
  v54 = AnyHashable.init<A>(_:)(v77, &v75, &type metadata for String, &protocol witness table for String);
  v55 = static AppDependencyManager.shared.getter(v54);
  result = AppDependency.__allocating_init(key:manager:)(v77, v55);
  v57 = v70;
  *v70 = v68;
  v57[1] = v50;
  v57[2] = v53;
  v57[3] = result;
  v57[4] = 0;
  return result;
}

uint64_t sub_1003C5564()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003C5588()
{
  uint64_t v0;

  sub_1003C3F60(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

unint64_t _s11MobileNotes25AddOrRemoveNoteLockIntentV0G9OperationO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100557530, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1003C55F4()
{
  unint64_t result;

  result = qword_1005DC308;
  if (!qword_1005DC308)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC308);
  }
  return result;
}

unint64_t sub_1003C563C()
{
  unint64_t result;

  result = qword_1005DC310;
  if (!qword_1005DC310)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC310);
  }
  return result;
}

unint64_t sub_1003C5684()
{
  unint64_t result;

  result = qword_1005DC318;
  if (!qword_1005DC318)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC318);
  }
  return result;
}

unint64_t sub_1003C56CC()
{
  unint64_t result;

  result = qword_1005DC320;
  if (!qword_1005DC320)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC320);
  }
  return result;
}

unint64_t sub_1003C5714()
{
  unint64_t result;

  result = qword_1005DC328;
  if (!qword_1005DC328)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC328);
  }
  return result;
}

unint64_t sub_1003C575C()
{
  unint64_t result;

  result = qword_1005DC330;
  if (!qword_1005DC330)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC330);
  }
  return result;
}

unint64_t sub_1003C57A8()
{
  unint64_t result;

  result = qword_1005DC338;
  if (!qword_1005DC338)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC338);
  }
  return result;
}

uint64_t sub_1003C57EC(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100128884();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_1003C5830()
{
  unint64_t result;

  result = qword_1005DC340;
  if (!qword_1005DC340)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC340);
  }
  return result;
}

unint64_t sub_1003C5878()
{
  unint64_t result;

  result = qword_1005DC348;
  if (!qword_1005DC348)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC348);
  }
  return result;
}

unint64_t sub_1003C58C0()
{
  unint64_t result;

  result = qword_1005DC350;
  if (!qword_1005DC350)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent.LockOperation, &type metadata for AddOrRemoveNoteLockIntent.LockOperation);
    atomic_store(result, (unint64_t *)&qword_1005DC350);
  }
  return result;
}

uint64_t sub_1003C5904()
{
  return sub_100016638(&qword_1005DC358, &qword_1005DC360, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1003C5934()
{
  unint64_t result;

  result = qword_1005DC368;
  if (!qword_1005DC368)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC368);
  }
  return result;
}

unint64_t sub_1003C597C()
{
  unint64_t result;

  result = qword_1005DC370;
  if (!qword_1005DC370)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AddOrRemoveNoteLockIntent, &type metadata for AddOrRemoveNoteLockIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC370);
  }
  return result;
}

uint64_t sub_1003C59C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of AddOrRemoveNoteLockIntent.perform()>>, 1);
}

uint64_t sub_1003C59D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static AddOrRemoveNoteLockIntent.parameterSummary>>, 1);
}

void destroy for AddOrRemoveNoteLockIntent(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  swift_release(*(_QWORD *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  swift_release(*(_QWORD *)(a1 + 24));

}

uint64_t *initializeWithCopy for AddOrRemoveNoteLockIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  v7 = (void *)a2[4];
  a1[4] = (uint64_t)v7;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  v8 = v7;
  return a1;
}

uint64_t *assignWithCopy for AddOrRemoveNoteLockIntent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = (void *)a1[4];
  v13 = (void *)a2[4];
  a1[4] = (uint64_t)v13;
  v14 = v13;

  return a1;
}

_QWORD *assignWithTake for AddOrRemoveNoteLockIntent(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  v6 = (void *)a1[4];
  a1[4] = *(_QWORD *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for AddOrRemoveNoteLockIntent()
{
  return &type metadata for AddOrRemoveNoteLockIntent;
}

uint64_t storeEnumTagSinglePayload for AddOrRemoveNoteLockIntent.LockOperation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003C5BE8 + 4 * byte_1004670D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003C5C1C + 4 * byte_1004670D0[v4]))();
}

uint64_t sub_1003C5C1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C5C24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003C5C2CLL);
  return result;
}

uint64_t sub_1003C5C38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003C5C40);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003C5C44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003C5C4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AddOrRemoveNoteLockIntent.LockOperation()
{
  return &type metadata for AddOrRemoveNoteLockIntent.LockOperation;
}

uint64_t sub_1003C5C68()
{
  return sub_100016638(&qword_1005DC380, &qword_1005DC388, (uint64_t)&protocol conformance descriptor for ParameterSummarySwitchCondition<A, B, C>);
}

uint64_t sub_1003C5C94(int a1)
{
  uint64_t v1;

  return sub_1001749E0(a1, *(_QWORD *)(v1 + 16), *(id *)(v1 + 24));
}

uint64_t sub_1003C5CAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003C5CD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

char *sub_1003C5D08()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char *v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  void *v17;
  id v18;

  v1 = OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView;
  v2 = *(void **)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView);
  if (v2)
  {
    v3 = *(char **)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView);
  }
  else
  {
    v4 = v0;
    v5 = *(void **)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder);
    v6 = v5;
    v7 = sub_1003C5EA8();
    v9 = v8;
    v10 = swift_allocObject(&unk_10056DF80, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16, v4);
    v11 = swift_allocObject(&unk_10056DF80, 24, 7);
    swift_unknownObjectWeakInit(v11 + 16, v4);
    v12 = swift_allocObject(&unk_10056DF80, 24, 7);
    swift_unknownObjectWeakInit(v12 + 16, v4);
    v13 = swift_allocObject(&unk_10056DF80, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, v4);
    v14 = swift_allocObject(&unk_10056DF80, 24, 7);
    swift_unknownObjectWeakInit(v14 + 16, v4);
    v15 = objc_allocWithZone((Class)type metadata accessor for SmartFolderComposerCollectionView());
    v16 = sub_1003A14F4(v5, v7, v9, (uint64_t)sub_1003C9668, v10, (uint64_t)sub_1003C9670, v11, (uint64_t)sub_1003C9678, v12, (uint64_t)sub_1003C9680, v13, (uint64_t)sub_1003C9688, v14);
    v17 = *(void **)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v16;
    v3 = v16;

    v2 = 0;
  }
  v18 = v2;
  return v3;
}

uint64_t sub_1003C5EA8()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;

  v1 = *(void **)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder);
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v2, "title");
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);

  }
  else
  {
    v5 = (void *)objc_opt_self(ICFolder);
    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "localizedStringForKey:value:table:", v7, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v10 = v9;

    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    v3 = objc_msgSend(v5, "deduplicatingTitle:account:", v11, *(_QWORD *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_account));

    if (!v3)
      return 0;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  }

  return v4;
}

void sub_1003C6020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t Strong;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char v22[24];

  v6 = type metadata accessor for CharacterSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a3 + 16;
  swift_beginAccess(v10, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v10);
  if (Strong)
  {
    v12 = (char *)Strong;
    if (a2)
    {
      v20 = a1;
      v21 = a2;
      swift_bridgeObjectRetain(a2);
      static CharacterSet.whitespacesAndNewlines.getter(v13);
      v14 = sub_1001452E8();
      a1 = StringProtocol.trimmingCharacters(in:)(v9, &type metadata for String, v14);
      a2 = v15;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      swift_bridgeObjectRelease(v21);
    }
    v16 = (uint64_t *)&v12[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
    v17 = *(_QWORD *)&v12[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8];
    *v16 = a1;
    v16[1] = a2;

    swift_bridgeObjectRelease(v17);
  }
  swift_beginAccess(v10, &v20, 0, 0);
  v18 = (void *)swift_unknownObjectWeakLoadStrong(v10);
  if (v18)
  {
    v19 = v18;
    *((_BYTE *)v18 + OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges) = 1;
    objc_msgSend(v18, "setModalInPresentation:", 1);
    sub_1003C6880();

  }
}

void sub_1003C6184(char a1, uint64_t a2)
{
  uint64_t v3;
  void *Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = Strong;
    *((_BYTE *)Strong + OBJC_IVAR___ICSmartFolderComposerViewController_allowsRecentlyDeleted) = a1 & 1;
    *((_BYTE *)Strong + OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges) = 1;
    objc_msgSend(Strong, "setModalInPresentation:", 1);
    sub_1003C6880();

  }
}

void sub_1003C6208(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  void *v6;
  id v7;
  _BYTE v8[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(void **)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection);
    *(_QWORD *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection) = a1;
    v7 = a1;

    sub_1003C6968();
  }
}

void sub_1003C6288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  double v10;
  _BYTE v11[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (_BYTE *)Strong;
    v8 = (_QWORD *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_createTagText);
    v9 = *(_QWORD *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_createTagText + 8);
    *v8 = a1;
    v8[1] = a2;
    swift_bridgeObjectRetain(a2);
    *(_QWORD *)&v10 = swift_bridgeObjectRelease(v9).n128_u64[0];
    v7[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 1;
    objc_msgSend(v7, "setModalInPresentation:", 1, v10);
    sub_1003C6880();

  }
}

void sub_1003C6330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    sub_1003C63A4(a1, a2, 0, 0);

  }
}

void sub_1003C63A4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, __n128), uint64_t a4)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  NSString v23;
  id v24;
  id v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD **v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  double v37;
  uint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char **v47;
  _QWORD *v48;
  uint64_t v49;
  double v50;
  char *v51;
  uint64_t v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  id v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v5 = v4;
  v10 = type metadata accessor for CharacterSet(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v61 = a1;
    v62 = a2;
    swift_bridgeObjectRetain(a2);
    static CharacterSet.whitespacesAndNewlines.getter(v16);
    v17 = sub_1001452E8();
    v18 = StringProtocol.trimmingCharacters(in:)(v15, &type metadata for String, v17);
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    swift_bridgeObjectRelease(v62);
    v21 = HIBYTE(v20) & 0xF;
    if ((v20 & 0x2000000000000000) == 0)
      v21 = v18 & 0xFFFFFFFFFFFFLL;
    if (v21)
    {
      v22 = *(id *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_account];
      v23 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      v24 = objc_msgSend((id)objc_opt_self(ICHashtag), "hashtagWithDisplayText:account:createIfNecessary:", v23, v22, 1);

      if (v24)
      {
        v25 = objc_msgSend(v24, "managedObjectContext");
        objc_msgSend(v25, "ic_save");

        v26 = objc_msgSend(v24, "standardizedContent");
        if (v26)
        {
          v27 = v26;
          v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v30 = v29;

          v31 = (_QWORD **)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers];
          swift_beginAccess(&v5[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers], &v61, 33, 0);
          v32 = *v31;
          swift_bridgeObjectRetain(v30);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
          *v31 = v32;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v32 = sub_10016ACE0(0, v32[2] + 1, 1, v32);
            *v31 = v32;
          }
          v35 = v32[2];
          v34 = v32[3];
          if (v35 >= v34 >> 1)
          {
            v32 = sub_10016ACE0((_QWORD *)(v34 > 1), v35 + 1, 1, v32);
            *v31 = v32;
          }
          v32[2] = v35 + 1;
          v36 = &v32[2 * v35];
          v36[4] = v28;
          v36[5] = v30;
          *(_QWORD *)&v37 = swift_endAccess(&v61).n128_u64[0];
          v38 = OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges;
          v5[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 1;
          objc_msgSend(v5, "setModalInPresentation:", 1, v37);
          sub_1003C6880();
          v39 = (char *)sub_1003C5D08();
          v40 = *(void **)&v39[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
          if (v40)
          {
            v41 = v40;
            v42 = sub_100347CA4();
            if (v42)
            {
              v43 = (char *)v42;
              v44 = (char *)sub_100376928();
              v60 = v30;
              v45 = v28;
              v46 = v44;
              objc_msgSend(v44, "setText:", 0);

              v39 = v43;
              v41 = v46;
              v28 = v45;
              v30 = v60;
            }
            v47 = &selRef_setEditing_animated_;

            v39 = v41;
          }
          else
          {
            v47 = &selRef_setEditing_animated_;
          }

          v48 = &v5[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText];
          v49 = *(_QWORD *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText + 8];
          *v48 = 0;
          v48[1] = 0;
          *(_QWORD *)&v50 = swift_bridgeObjectRelease(v49).n128_u64[0];
          v5[v38] = 1;
          objc_msgSend(v5, v47[218], 1, v50);
          sub_1003C6880();
          v51 = (char *)sub_1003C5D08();
          v52 = swift_allocObject(&unk_10056DF80, 24, 7);
          swift_unknownObjectWeakInit(v52 + 16, v5);
          v53 = (_QWORD *)swift_allocObject(&unk_10056E070, 56, 7);
          v53[2] = v52;
          v53[3] = v28;
          v53[4] = v30;
          v53[5] = a3;
          v53[6] = a4;
          v54 = *(void **)&v51[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
          if (v54)
          {
            v55 = swift_allocObject(&unk_10056E098, 24, 7);
            swift_unknownObjectWeakInit(v55 + 16, v51);
            v56 = (_QWORD *)swift_allocObject(&unk_10056E0C0, 40, 7);
            v56[2] = v55;
            v56[3] = sub_1003C96CC;
            v56[4] = v53;
            swift_retain(v52);
            sub_100166B74((uint64_t)a3, a4);
            swift_retain(v55);
            swift_retain(v53);
            v57 = v54;
            sub_100347140(0);
            v58 = sub_100347CB4();
            if (v58)
            {
              v59 = (void *)v58;
              sub_1002296C8(1, (uint64_t)sub_1001EDA8C, (uint64_t)v56);
              swift_release(v55);
              swift_release(v56);

            }
            else
            {
              swift_release(v55);
              swift_release(v56);
            }
            swift_release(v52);
            swift_release(v53);

          }
          else
          {
            swift_retain(v52);
            sub_100166B74((uint64_t)a3, a4);
            swift_release(v52);
            swift_release(v53);
          }

        }
        else
        {

        }
        return;
      }
    }
    else
    {
      v13 = swift_bridgeObjectRelease(v20);
    }
  }
  if (a3)
    a3(v12, v13);
}

void sub_1003C6880()
{
  uint64_t v0;
  id v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  id v7;

  v1 = sub_1001EC434(&OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___doneBarButtonItem, &selRef_doneActionWithSender_, 0);
  v7 = v1;
  if ((*(_BYTE *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag) & 1) == 0
    && (v2 = *(_QWORD *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8)) != 0
    && ((v2 & 0x2000000000000000) != 0
      ? (v3 = HIBYTE(v2) & 0xF)
      : (v3 = *(_QWORD *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle) & 0xFFFFFFFFFFFFLL),
        v3))
  {
    if (objc_msgSend(*(id *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection), "isEmpty"))
    {
      v4 = *(_QWORD *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_createTagText + 8);
      if (v4)
      {
        if ((v4 & 0x2000000000000000) != 0)
          v5 = HIBYTE(v4) & 0xF;
        else
          v5 = *(_QWORD *)(v0 + OBJC_IVAR___ICSmartFolderComposerViewController_createTagText) & 0xFFFFFFFFFFFFLL;
        v6 = v5 != 0;
      }
      else
      {
        v6 = 0;
      }
    }
    else
    {
      v6 = 1;
    }
    v1 = v7;
  }
  else
  {
    v6 = 0;
  }
  objc_msgSend(v1, "setEnabled:", v6);

}

void sub_1003C6968()
{
  _BYTE *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  char *v6;

  v0[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 1;
  objc_msgSend(v0, "setModalInPresentation:", 1);
  sub_1003C6880();
  v1 = (void *)sub_1003C5D08();
  objc_msgSend(v1, "endEditing:", 1);

  v6 = (char *)sub_1003C5D08();
  v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection], "selectedTagCount");
  v3 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
  if (v3)
  {
    v4 = v3;
    sub_100347E78((uint64_t)v2);

    v5 = v4;
  }
  else
  {
    v5 = v6;
  }

}

void sub_1003C6A2C(void *a1)
{
  _BYTE *v1;
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___cancelBarButtonItem] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___doneBarButtonItem] = 0;
  v1[OBJC_IVAR___ICSmartFolderComposerViewController_allowsRecentlyDeleted] = 0;
  v2 = &v1[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText];
  *v2 = 0;
  v2[1] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers] = _swiftEmptyArrayStorage;
  v3 = &v1[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
  *v3 = 0;
  v3[1] = 0;
  v1[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 0;
  v1[OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_scrollViewKeyboardResizer] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002ELL, 0x8000000100485620, "MobileNotes/SmartFolderComposerViewController.swift", 51, 2, 108, 0);
  __break(1u);
}

char *sub_1003C6B38(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  _BYTE *v5;
  objc_class *ObjectType;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  char *v18;
  void *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  objc_super v31;

  v5 = v4;
  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___cancelBarButtonItem] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___doneBarButtonItem] = 0;
  v5[OBJC_IVAR___ICSmartFolderComposerViewController_allowsRecentlyDeleted] = 0;
  v11 = &v5[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText];
  *v11 = 0;
  v11[1] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers] = _swiftEmptyArrayStorage;
  v12 = &v5[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
  *v12 = 0;
  v12[1] = 0;
  v5[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 0;
  v5[OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_scrollViewKeyboardResizer] = 0;
  v13 = OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder;
  *(_QWORD *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder] = 0;
  *(_QWORD *)&v5[OBJC_IVAR___ICSmartFolderComposerViewController_account] = a1;
  v14 = *(void **)&v5[v13];
  *(_QWORD *)&v5[v13] = a2;
  v15 = v5;
  v16 = a1;
  v17 = a2;

  v18 = &v15[OBJC_IVAR___ICSmartFolderComposerViewController_completion];
  *(_QWORD *)v18 = a3;
  *((_QWORD *)v18 + 1) = a4;
  v19 = (void *)objc_opt_self(ICNoteContext);
  swift_retain(a4);
  v20 = objc_msgSend(v19, "sharedContext");
  if (v20)
  {
    v21 = v20;
    v22 = objc_msgSend(v20, "managedObjectContext");

  }
  else
  {
    v22 = 0;
  }
  v23 = objc_msgSend(objc_allocWithZone((Class)ICTagSelection), "initWithManagedObjectContext:", v22);

  *(_QWORD *)&v15[OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection] = v23;
  v31.receiver = v15;
  v31.super_class = ObjectType;
  v24 = (char *)objc_msgSendSuper2(&v31, "initWithNibName:bundle:", 0, 0);
  v25 = sub_1003C5EA8();
  v27 = v26;

  swift_release(a4);
  v28 = (uint64_t *)&v24[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
  v29 = *(_QWORD *)&v24[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8];
  *v28 = v25;
  v28[1] = v27;
  swift_bridgeObjectRelease(v29);
  return v24;
}

void sub_1003C6DD4(uint64_t a1, uint64_t a2, uint64_t a3, NSString a4, uint64_t a5)
{
  id v8;

  if (a4)
    a4 = String._bridgeToObjectiveC()();
  v8 = a4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a5 + 16))(a5, a1, a2);

}

void sub_1003C6E38()
{
  char *v0;
  id v1;
  void *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  id v7;
  NSString v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;

  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = sub_1003C5D08();
    objc_msgSend(v2, "addSubview:", v3);

    v4 = sub_1003C5D08();
    objc_msgSend(v4, "ic_addAnchorsToFillSuperview");

    v5 = sub_1003C5D08();
    objc_msgSend(v5, "setDelegate:", v0);

    v6 = *(_QWORD *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder];
    v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if (v6)
    {
      v8 = String._bridgeToObjectiveC()();
      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(v7, "localizedStringForKey:value:table:", v8, v9, 0);

      v7 = v8;
    }
    else
    {
      v9 = String._bridgeToObjectiveC()();
      v10 = objc_msgSend(v7, "localizedStringForKey:value:table:", v9, 0, 0);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v12 = v11;

    v13 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "setTitle:", v13, swift_bridgeObjectRelease(v12).n128_f64[0]);

    v14 = objc_msgSend(v0, "navigationItem");
    v15 = sub_1001EC434(&OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___cancelBarButtonItem, &selRef_cancelActionWithSender_, 1);
    objc_msgSend(v14, "setLeftBarButtonItem:", v15);

    v16 = objc_msgSend(v0, "navigationItem");
    v17 = sub_1001EC434(&OBJC_IVAR___ICSmartFolderComposerViewController____lazy_storage___doneBarButtonItem, &selRef_doneActionWithSender_, 0);
    objc_msgSend(v16, "setRightBarButtonItem:", v17);

    sub_1003C6880();
    v18 = objc_msgSend(v0, "navigationController");
    if (v18)
    {
      v19 = v18;
      v20 = objc_msgSend(v18, "presentationController");

      if (v20)
      {
        objc_msgSend(v20, "setDelegate:", v0);

      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1003C71BC(char a1)
{
  char *v1;
  void *v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  objc_super v11;

  v11.receiver = v1;
  v11.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v11, "viewWillAppear:", a1 & 1);
  v3 = *(void **)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_scrollViewKeyboardResizer];
  if (v3)
    objc_msgSend(v3, "startAutoResizing");
  v4 = sub_1003C5D08();
  objc_msgSend(v4, "layoutIfNeeded");

  sub_1003C72B8();
  if (!*(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder])
  {
    v5 = sub_1003C5D08();
    v6 = *(void **)&v5[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    if (v6)
    {
      v7 = v6;
      v8 = sub_100347388();
      if (v8)
      {
        v9 = (void *)v8;
        v10 = sub_100376928();

        objc_msgSend(v10, "becomeFirstResponder");
        v5 = v7;
        v7 = (char *)v10;
      }

      v5 = v7;
    }

  }
}

void sub_1003C72B8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  void *v35;
  Class isa;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void *v50;
  void *v51;
  char *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  id v59;
  uint64_t v60;
  id v61;
  id v62;
  double v63;
  void *v64;
  const void *v65;
  char *v66;
  double v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  __n128 v74;
  char v75;
  char *v76;
  void *v77;
  id v78;
  uint64_t v79;
  void *v80;
  id v81;
  void *v82;
  uint64_t v83;
  id v84;
  void *v85;
  id v86;
  void *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  uint64_t v92;
  id v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  char *v100;
  _QWORD aBlock[5];
  uint64_t v102;

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D6350);
  __chkstk_darwin(v2);
  v95 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for IndexPath(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ICQueryType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder];
  if (v12)
  {
    v94 = v7;
    v93 = v12;
    v13 = objc_msgSend(v93, "smartFolderQueryObjC");
    if (!v13)
    {

      return;
    }
    v14 = v13;
    v98 = v4;
    dispatch thunk of ICQuery.type.getter(v13);
    v15 = objc_msgSend(v93, "managedObjectContext");
    v16 = (void *)ICQueryType.tagSelection(managedObjectContext:)();

    v17 = objc_msgSend(v16, "tagIdentifiers");
    v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v17, &type metadata for String);

    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v97 = v5;
      v87 = v14;
      v88 = v11;
      v89 = v9;
      v90 = v8;
      v20 = v19 - 1;
      v21 = (char *)(v18 + 40);
      v22 = (uint64_t)v95;
      v96 = v18;
      while (1)
      {
        v23 = *(_QWORD *)v21;
        v99 = (id)*((_QWORD *)v21 - 1);
        swift_bridgeObjectRetain(v23);
        v24 = sub_1003C5D08();
        v25 = swift_allocObject(&unk_10056E228, 24, 7);
        *(_QWORD *)(v25 + 16) = v1;
        v26 = *(void **)&v24[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
        if (!v26)
        {
          v32 = v1;
          swift_bridgeObjectRelease(v23);

          swift_release(v25);
          if (!v20)
            goto LABEL_30;
          goto LABEL_29;
        }
        v100 = v21;
        v27 = v20;
        LOBYTE(aBlock[0]) = 2;
        v28 = v1;
        v29 = v26;
        dispatch thunk of UICollectionViewDiffableDataSource.indexPath(for:)(aBlock);
        v31 = v97;
        v30 = v98;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v22, 1, v98) == 1)
        {
          sub_100012DDC(v22, (uint64_t *)&unk_1005D6350);
          swift_bridgeObjectRelease(v23);

          swift_release(v25);
          v18 = v96;
          v20 = v27;
          v21 = v100;
          if (!v20)
            goto LABEL_30;
          goto LABEL_29;
        }
        v33 = v1;
        v34 = v94;
        (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v94, v22, v30);
        v35 = *(void **)&v29[qword_1005D9FF8];
        if ((v29[qword_1005DA008] & 1) != 0)
        {
          isa = IndexPath._bridgeToObjectiveC()().super.isa;
          v37 = (char *)objc_msgSend(v35, "cellForItemAtIndexPath:", isa);

          (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v98);
          v1 = v33;
          v20 = v27;
          v21 = v100;
          v38 = v24;
          v39 = v23;
          if (!v37)
          {
            swift_bridgeObjectRelease(v23);

            goto LABEL_27;
          }
        }
        else
        {
          v37 = (char *)dispatch thunk of UICollectionViewDiffableDataSource.collectionView(_:cellForItemAt:)(*(_QWORD *)&v29[qword_1005D9FF8], v34);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v34, v98);
          v1 = v33;
          v20 = v27;
          v21 = v100;
          v38 = v24;
          v39 = v23;
        }
        v40 = type metadata accessor for TagContainerCell();
        if (!swift_dynamicCastClass(v37, v40))
        {
          swift_bridgeObjectRelease(v39);

          swift_release(v25);
          goto LABEL_28;
        }
        v100 = v38;
        v41 = sub_100228DBC();
        v42 = OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource;
        v43 = *(void **)&v41[OBJC_IVAR____TtC11MobileNotes17TagCollectionView_tagDataSource];
        if (v43)
        {
          v92 = v25;
          v44 = v41;
          v45 = objc_msgSend(v43, "indexer");
          if (v45)
          {
            v46 = v45;
            v47 = objc_opt_self(ICTagCoreDataIndexer);
            v91 = v46;
            v48 = swift_dynamicCastObjCClass(v46, v47);
            v49 = v44;
            if (v48)
            {
              v50 = *(void **)&v44[v42];
              if (v50)
              {
                v51 = (void *)v48;
                v52 = v50;
                v53 = objc_msgSend(v51, "objectIDs");
                v54 = sub_1000163BC(0, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
                v86 = (id)static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, v54);

                v82 = *(void **)&v52[OBJC_IVAR____TtC11MobileNotes13TagDataSource_modernViewContext];
                v84 = v52;
                v55 = swift_allocObject(&unk_10056E250, 24, 7);
                swift_unknownObjectWeakInit(v55 + 16, v49);
                v56 = swift_allocObject(&unk_10056E278, 88, 7);
                v57 = v86;
                *(_QWORD *)(v56 + 16) = v55;
                *(_QWORD *)(v56 + 24) = v57;
                v58 = v82;
                v59 = v99;
                *(_QWORD *)(v56 + 32) = v82;
                *(_QWORD *)(v56 + 40) = v59;
                *(_QWORD *)(v56 + 48) = v39;
                *(_QWORD *)(v56 + 56) = v52;
                *(_BYTE *)(v56 + 64) = 0;
                v60 = v92;
                *(_QWORD *)(v56 + 72) = sub_1003C98D0;
                *(_QWORD *)(v56 + 80) = v60;
                aBlock[4] = sub_1001ED4E0;
                v102 = v56;
                aBlock[0] = _NSConcreteStackBlock;
                aBlock[1] = 1107296256;
                aBlock[2] = sub_100206734;
                aBlock[3] = &unk_10056E290;
                v85 = _Block_copy(aBlock);
                v83 = v102;
                v61 = v58;
                swift_bridgeObjectRetain(v39);
                v99 = v84;
                v62 = v61;
                v86 = v62;
                swift_retain(v60);
                *(_QWORD *)&v63 = swift_release(v83).n128_u64[0];
                v64 = v62;
                v65 = v85;
                objc_msgSend(v64, "performBlock:", v85, v63);
                _Block_release(v65);
                swift_bridgeObjectRelease(v39);

                swift_release(v60);
                v22 = (uint64_t)v95;
                v18 = v96;
                if (!v20)
                  goto LABEL_30;
                goto LABEL_29;
              }
            }

            v37 = v44;
            v66 = (char *)v91;
            v25 = v92;
          }
          else
          {
            v66 = v44;
            v25 = v92;
          }
        }
        else
        {
          v66 = v41;
        }

        swift_bridgeObjectRelease(v39);
LABEL_27:
        swift_release(v25);

LABEL_28:
        v22 = (uint64_t)v95;
        v18 = v96;
        if (!v20)
        {
LABEL_30:
          *(_QWORD *)&v67 = swift_bridgeObjectRelease(v18).n128_u64[0];
          v9 = v89;
          v8 = v90;
          v11 = v88;
          v14 = v87;
          goto LABEL_33;
        }
LABEL_29:
        v21 += 16;
        --v20;
      }
    }
    *(_QWORD *)&v67 = swift_bridgeObjectRelease(v18).n128_u64[0];
LABEL_33:
    v68 = objc_msgSend(v93, "title", v67);
    v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v68);
    v71 = v70;

    v72 = (uint64_t *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
    v73 = *(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8];
    *v72 = v69;
    v72[1] = v71;
    v74 = swift_bridgeObjectRelease(v73);
    v75 = ICQueryType.allowsDeleted.getter(v74);
    v76 = sub_1003C5D08();
    v77 = *(void **)&v76[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    if (v77)
    {
      v78 = v77;
      v79 = sub_100347CC4();
      if (v79)
      {
        v80 = (void *)v79;
        v81 = sub_1003E7C70();
        objc_msgSend(v81, "setOn:", v75 & 1);

LABEL_39:
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
        return;
      }

      v76 = (char *)v93;
    }
    else
    {
      v78 = v93;
    }

    goto LABEL_39;
  }
}

void sub_1003C7AD4(char a1)
{
  char *v1;
  char *v3;
  void *v4;
  id v5;
  uint64_t v6;
  char *v7;
  id v8;
  objc_super v9;

  v9.receiver = v1;
  v9.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v9, "viewDidAppear:", a1 & 1);
  if (!*(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder])
  {
    v3 = sub_1003C5D08();
    v4 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    if (v4)
    {
      v5 = v4;
      v6 = sub_100347388();
      if (v6)
      {
        v7 = (char *)v6;
        v8 = sub_100376928();
        objc_msgSend(v8, "selectAll:", 0);

        v3 = v7;
        v5 = v8;
      }

      v3 = (char *)v5;
    }

  }
}

void sub_1003C7C58(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  _QWORD aBlock[5];
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];

  if ((a1 & 1) != 0)
  {
    v2 = a2 + 16;
    swift_beginAccess(a2 + 16, v15, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v2);
    if (Strong)
    {
      v4 = (void *)Strong;
      sub_1003C7DB4();

    }
    swift_beginAccess(v2, v14, 0, 0);
    v5 = (void *)swift_unknownObjectWeakLoadStrong(v2);
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, "navigationController");

      if (v7)
      {
        v8 = swift_allocObject(&unk_10056DF80, 24, 7);
        swift_beginAccess(v2, v13, 0, 0);
        v9 = (void *)swift_unknownObjectWeakLoadStrong(v2);
        swift_unknownObjectWeakInit(v8 + 16, v9);

        aBlock[4] = sub_1003C95DC;
        v12 = v8;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100206734;
        aBlock[3] = &unk_10056E150;
        v10 = _Block_copy(aBlock);
        objc_msgSend(v7, "dismissViewControllerAnimated:completion:", 1, v10, swift_release(v12).n128_f64[0]);
        _Block_release(v10);

      }
    }
  }
}

void sub_1003C7DB4()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  char *v8;
  id v9;
  _QWORD aBlock[5];
  uint64_t v11;
  char v12[24];

  v1 = &v0[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers];
  swift_beginAccess(&v0[OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers], v12, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v1 + 16))
  {
    v2 = objc_msgSend(*(id *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_account], "managedObjectContext");
    if (v2)
    {
      v3 = v2;
      v4 = swift_allocObject(&unk_10056E0E8, 32, 7);
      *(_QWORD *)(v4 + 16) = v0;
      *(_QWORD *)(v4 + 24) = v3;
      v5 = swift_allocObject(&unk_10056E110, 32, 7);
      *(_QWORD *)(v5 + 16) = sub_1003C970C;
      *(_QWORD *)(v5 + 24) = v4;
      aBlock[4] = sub_1000165D0;
      v11 = v5;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100016618;
      aBlock[3] = &unk_10056E128;
      v6 = _Block_copy(aBlock);
      v7 = v11;
      v8 = v0;
      v9 = v3;
      swift_retain(v5);
      objc_msgSend(v9, "performBlockAndWait:", v6, swift_release(v7).n128_f64[0]);

      _Block_release(v6);
      LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v5, "", 119, 195, 45, 1);
      swift_release(v4);
      swift_release(v5);
      if ((v9 & 1) != 0)
        __break(1u);
    }
  }
}

uint64_t sub_1003C7F38(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD, _QWORD, _QWORD);
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v5 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(result
                                                               + OBJC_IVAR___ICSmartFolderComposerViewController_completion);
    v4 = *(_QWORD *)(result + OBJC_IVAR___ICSmartFolderComposerViewController_completion + 8);
    swift_retain(v4);

    v5(0, 0, 0, 0);
    return swift_release(v4);
  }
  return result;
}

void sub_1003C8038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  _QWORD v10[5];
  _QWORD *v11;

  v6 = swift_allocObject(&unk_10056DF80, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16, a1);
  v7 = (_QWORD *)swift_allocObject(&unk_10056E1B0, 40, 7);
  v7[2] = v6;
  v7[3] = a2;
  v7[4] = a3;
  v10[4] = sub_1003C9898;
  v11 = v7;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_100206734;
  v10[3] = &unk_10056E1C8;
  v8 = _Block_copy(v10);
  v9 = v11;
  sub_100166B74(a2, a3);
  swift_release(v9);
  dispatchMainAfterDelay(v8, 0.5);
  _Block_release(v8);
}

void sub_1003C811C(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    *(_BYTE *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag) = 0;
    sub_1003C6880();

  }
  if (a2)
    a2();
}

id sub_1003C8194(uint64_t a1, void *a2)
{
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  Class isa;
  _BYTE v9[24];

  v3 = *(void **)(a1 + OBJC_IVAR___ICSmartFolderComposerViewController_account);
  v4 = (uint64_t *)(a1 + OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers);
  swift_beginAccess(a1 + OBJC_IVAR___ICSmartFolderComposerViewController_discardableTagIdentifiers, v9, 0, 0);
  v5 = *v4;
  v6 = v3;
  swift_bridgeObjectRetain(v5);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  objc_msgSend(v6, "deleteUnusedHashtagsWithStandardizedContent:", isa);

  return objc_msgSend(a2, "ic_save");
}

uint64_t sub_1003C8244()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  NSString v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;

  v1 = v0;
  v2 = &v0[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle];
  v3 = *(_QWORD *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8];
  if (!v3)
    return 0;
  v4 = *(_QWORD *)v2;
  v5 = *(void **)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder];
  if (v5)
  {
    v6 = objc_msgSend(v5, "title", swift_bridgeObjectRetain(v3).n128_f64[0]);
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v9 = v8;

    if (v7 == v4 && v3 == v9)
    {
      swift_bridgeObjectRelease(v3);
      v12 = v9;
      goto LABEL_13;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v4, v3, 0);
    swift_bridgeObjectRelease(v9);
    if ((v11 & 1) != 0)
    {
      v12 = v3;
LABEL_13:
      swift_bridgeObjectRelease(v12);
      return 1;
    }
  }
  else
  {
    swift_bridgeObjectRetain(v3);
  }
  v13 = (void *)objc_opt_self(ICFolder);
  v14 = String._bridgeToObjectiveC()();
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v3).n128_u64[0];
  v16 = *(_QWORD *)&v1[OBJC_IVAR___ICSmartFolderComposerViewController_account];
  *(_QWORD *)&v48 = 0;
  LODWORD(v13) = objc_msgSend(v13, "isTitleValid:account:parentFolder:error:", v14, v16, 0, &v48, v15);

  v17 = v48;
  if ((_DWORD)v13)
  {
    v18 = (id)v48;
    return 1;
  }
  v20 = (id)v48;
  v21 = _convertNSErrorToError(_:)(v17);

  swift_willThrow(v22);
  v47 = v21;
  v23 = sub_100012E18(&qword_1005D7A90);
  v24 = sub_1000163BC(0, (unint64_t *)&unk_1005D6A80, NSError_ptr);
  swift_dynamicCast(&v46, &v47, v23, v24, 0);
  v25 = v46;
  v26 = objc_msgSend(v46, "userInfo");
  v27 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v26, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  v30 = v29;
  if (*(_QWORD *)(v27 + 16) && (v31 = sub_100248A98(v28, v29), (v32 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(v27 + 56) + 32 * v31, (uint64_t)&v48);
  }
  else
  {
    v48 = 0u;
    v49 = 0u;
  }
  swift_bridgeObjectRelease(v30);
  if (*((_QWORD *)&v49 + 1))
  {
    if ((swift_dynamicCast(&v44, &v48, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
    {
      v40 = v27;
      goto LABEL_33;
    }
    v33 = v45;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedRecoverySuggestionErrorKey);
    v36 = v35;
    if (*(_QWORD *)(v27 + 16) && (v37 = sub_100248A98(v34, v35), (v38 & 1) != 0))
    {
      sub_100128424(*(_QWORD *)(v27 + 56) + 32 * v37, (uint64_t)&v48);
    }
    else
    {
      v48 = 0u;
      v49 = 0u;
    }
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v27);
    if (*((_QWORD *)&v49 + 1))
    {
      if ((swift_dynamicCast(&v44, &v48, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
      {
        v41 = v45;
        v42 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v33);
        v43 = String._bridgeToObjectiveC()();
        objc_msgSend(v1, "ic_showSingleButtonAlertWithTitle:message:", v42, v43, swift_bridgeObjectRelease(v41).n128_f64[0]);

LABEL_34:
        goto LABEL_35;
      }
      v40 = v33;
LABEL_33:
      swift_bridgeObjectRelease(v40);
      goto LABEL_34;
    }
    v39 = v33;
  }
  else
  {
    v39 = v27;
  }
  swift_bridgeObjectRelease(v39);

  sub_100012DDC((uint64_t)&v48, &qword_1005CF190);
LABEL_35:
  swift_errorRelease(v47);
  return 0;
}

void sub_1003C8610(uint64_t a1)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  id v5;
  void *v6;
  uint64_t v7;
  _QWORD aBlock[5];
  uint64_t v9;
  _BYTE v10[24];

  v2 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = objc_msgSend(Strong, "navigationController");

    if (v5)
    {
      aBlock[4] = sub_1003C98A4;
      v9 = a1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100206734;
      aBlock[3] = &unk_10056E1F0;
      v6 = _Block_copy(aBlock);
      v7 = v9;
      swift_retain(a1);
      objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, v6, swift_release(v7).n128_f64[0]);
      _Block_release(v6);

    }
  }
}

void sub_1003C8700(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  char v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void (*v24)(void *, id, uint64_t, uint64_t);
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v33, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = *(id *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection);

    v5 = objc_msgSend(v4, "selectedTagCount");
  }
  else
  {
    v5 = 0;
  }
  swift_beginAccess(v1, v32, 0, 0);
  v6 = swift_unknownObjectWeakLoadStrong(v1);
  if (v6)
  {
    v7 = (char *)v6;
    v8 = OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection;
    if (objc_msgSend(*(id *)(v6 + OBJC_IVAR___ICSmartFolderComposerViewController_tagSelection), "isNonEmpty"))
    {
      type metadata accessor for ICQuery(0);
      v9 = *(id *)&v7[v8];
      v10 = (void *)static ICQuery.makeQueryForNotesMatching(_:)();

      goto LABEL_9;
    }

  }
  v10 = 0;
LABEL_9:
  swift_beginAccess(v1, v31, 0, 0);
  v11 = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (v11)
  {
    v12 = v11;
    v13 = *(void **)&v11[OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder];
    if (v13)
    {
      v14 = v13;

      v15 = objc_msgSend(v14, "smartFolderQueryObjC");
      if (!v10)
        goto LABEL_12;
      goto LABEL_16;
    }

  }
  v15 = 0;
  if (!v10)
  {
LABEL_12:
    if (!v15)
    {
      v16 = 0;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_16:
  if (!v15
    || (type metadata accessor for ICQuery(0),
        v17 = v15,
        v18 = v10,
        v19 = static NSObject.== infix(_:_:)(),
        v18,
        v17,
        v16 = 0,
        (v19 & 1) == 0))
  {
LABEL_18:
    v20 = v10;
    v16 = v10;
  }
LABEL_19:
  swift_beginAccess(v1, v30, 0, 0);
  v21 = swift_unknownObjectWeakLoadStrong(v1);
  if (v21)
  {
    v22 = (void *)v21;
    v24 = *(void (**)(void *, id, uint64_t, uint64_t))(v21
                                                              + OBJC_IVAR___ICSmartFolderComposerViewController_completion);
    v23 = *(_QWORD *)(v21 + OBJC_IVAR___ICSmartFolderComposerViewController_completion + 8);
    swift_retain(v23);

    swift_beginAccess(v1, v29, 0, 0);
    v25 = swift_unknownObjectWeakLoadStrong(v1);
    if (v25)
    {
      v26 = (void *)v25;
      v28 = *(_QWORD *)(v25 + OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle);
      v27 = *(_QWORD *)(v25 + OBJC_IVAR___ICSmartFolderComposerViewController_folderTitle + 8);
      swift_bridgeObjectRetain(v27);

    }
    else
    {
      v28 = 0;
      v27 = 0;
    }
    v24(v16, v5, v28, v27);
    swift_release(v23);

    swift_bridgeObjectRelease(v27);
  }
  else
  {

  }
}

uint64_t sub_1003C89E8(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  char *v8;
  void *v9;
  char *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _BYTE v15[24];

  if ((a2 & 1) != 0)
  {
    v5 = a3 + 16;
    swift_beginAccess(a3 + 16, v15, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v5);
    if (Strong)
    {
      v7 = (void *)Strong;
      if (!*(_QWORD *)(Strong + OBJC_IVAR___ICSmartFolderComposerViewController_smartFolder))
      {
        v8 = sub_1003C5D08();
        v9 = *(void **)&v8[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
        if (v9)
        {
          v10 = v9;
          v11 = sub_100347388();
          if (v11)
          {
            v12 = (void *)v11;
            v13 = sub_100376928();

            objc_msgSend(v13, "becomeFirstResponder");
            v7 = v8;
            v8 = v10;
            v10 = (char *)v13;
          }

          v7 = v8;
          v8 = v10;
        }

        v7 = v8;
      }

    }
  }
  return a4(0);
}

void sub_1003C8AEC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v7;
  uint64_t Strong;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char v16[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v16, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v7);
  if (Strong)
  {
    v9 = (void *)Strong;
    v10 = (char *)sub_1003C5D08();

    v11 = *(void **)&v10[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    if (v11)
    {
      v12 = v11;
      v13 = sub_100347CB4();
      if (v13)
      {
        v14 = (char *)v13;
        v15 = sub_100228DBC();
        sub_1002FAC28(a2, a3, 1, 0, 0);

        v10 = v14;
        v12 = v15;
      }

      v10 = v12;
    }

  }
  if (a4)
    a4();
}

uint64_t type metadata accessor for SmartFolderComposerViewController()
{
  return objc_opt_self(ICSmartFolderComposerViewController);
}

uint64_t sub_1003C8F68()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003C8F8C(uint64_t a1, void *a2, uint64_t a3)
{
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  char v16;
  void *Strong;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  NSString v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  NSString v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSString v43;
  void *v44;
  id v45;
  id v46;
  void *v47;
  uint64_t v48;
  void **aBlock;
  uint64_t v50;
  void *v51;
  void *v52;
  void *v53;
  uint64_t v54;
  _BYTE v55[24];
  _BYTE v56[24];
  _BYTE v57[24];

  if (*((_BYTE *)a2 + OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges) == 1)
  {
    swift_retain(a3);
    v6 = sub_1003C5D08();
    v7 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
    v48 = a1;
    if (v7)
    {
      v8 = v7;
      v9 = sub_100347388();
      if (v9)
      {
        v10 = (void *)v9;
        v11 = sub_100376928();

        LOBYTE(v10) = objc_msgSend(v11, "isFirstResponder");
        if ((v10 & 1) == 0)
        {
          v16 = 0;
          goto LABEL_19;
        }
        v6 = sub_1003C5D08();
        v12 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes33SmartFolderComposerCollectionView_smartFolderComposerDataSource];
        if (!v12)
        {
          v16 = 1;
          goto LABEL_17;
        }
        v8 = v12;
        v13 = sub_100347388();
        if (v13)
        {
          v14 = (void *)v13;
          v15 = sub_100376928();

          objc_msgSend(v15, "resignFirstResponder");
          v16 = 1;
          v6 = (char *)v8;
          v8 = v15;
        }
        else
        {
          v16 = 1;
        }
      }
      else
      {
        v16 = 0;
      }

      v6 = (char *)v8;
    }
    else
    {
      v16 = 0;
    }
LABEL_17:

LABEL_19:
    v24 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", 0, 0, 0);
    v25 = (void *)objc_opt_self(NSBundle);
    v26 = objc_msgSend(v25, "mainBundle");
    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend(v26, "localizedStringForKey:value:table:", v27, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v30 = v29;

    v31 = swift_allocObject(&unk_10056DF80, 24, 7);
    swift_unknownObjectWeakInit(v31 + 16, a2);
    v32 = swift_allocObject(&unk_10056DFD0, 48, 7);
    *(_BYTE *)(v32 + 16) = v16;
    *(_QWORD *)(v32 + 24) = v31;
    *(_QWORD *)(v32 + 32) = sub_1003C95D4;
    *(_QWORD *)(v32 + 40) = a3;
    swift_retain(v31);
    swift_retain(a3);
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    v53 = sub_1003C9610;
    v54 = v32;
    aBlock = _NSConcreteStackBlock;
    v50 = 1107296256;
    v51 = sub_1002489AC;
    v52 = &unk_10056DFE8;
    v34 = _Block_copy(&aBlock);
    swift_release(v54);
    v35 = (void *)objc_opt_self(UIAlertAction);
    v36 = objc_msgSend(v35, "actionWithTitle:style:handler:", v33, 1, v34);
    _Block_release(v34);
    swift_release(v31);

    objc_msgSend(v24, "addAction:", v36);
    v37 = objc_msgSend(v25, "mainBundle");
    v38 = String._bridgeToObjectiveC()();
    v39 = objc_msgSend(v37, "localizedStringForKey:value:table:", v38, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v41 = v40;

    v42 = swift_allocObject(&unk_10056E020, 32, 7);
    *(_QWORD *)(v42 + 16) = sub_1003C95D4;
    *(_QWORD *)(v42 + 24) = a3;
    swift_retain(a3);
    v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    v53 = sub_1003C9644;
    v54 = v42;
    aBlock = _NSConcreteStackBlock;
    v50 = 1107296256;
    v51 = sub_1002489AC;
    v52 = &unk_10056E038;
    v44 = _Block_copy(&aBlock);
    v45 = objc_msgSend(v35, "actionWithTitle:style:handler:", v43, 2, v44, swift_release(v54).n128_f64[0]);
    _Block_release(v44);

    objc_msgSend(v24, "addAction:", v45);
    v46 = objc_msgSend(v24, "popoverPresentationController");
    if (v46)
    {
      v47 = v46;
      objc_msgSend(v46, "setBarButtonItem:", v48);

    }
    objc_msgSend(a2, "presentViewController:animated:completion:", v24, 1, 0, v48);
    swift_release(a3);

    return;
  }
  swift_beginAccess(a3 + 16, v57, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(a3 + 16);
  swift_retain(a3);
  if (Strong)
  {
    sub_1003C7DB4();

  }
  swift_beginAccess(a3 + 16, v56, 0, 0);
  v18 = (void *)swift_unknownObjectWeakLoadStrong(a3 + 16);
  if (v18
    && (v19 = v18,
        v20 = objc_msgSend(v18, "navigationController"),
        v19,
        v20))
  {
    v21 = swift_allocObject(&unk_10056DF80, 24, 7);
    swift_beginAccess(a3 + 16, v55, 0, 0);
    v22 = (void *)swift_unknownObjectWeakLoadStrong(a3 + 16);
    swift_unknownObjectWeakInit(v21 + 16, v22);

    v53 = sub_1003C95DC;
    v54 = v21;
    aBlock = _NSConcreteStackBlock;
    v50 = 1107296256;
    v51 = sub_100206734;
    v52 = &unk_10056DF98;
    v23 = _Block_copy(&aBlock);
    objc_msgSend(v20, "dismissViewControllerAnimated:completion:", 1, v23, swift_release(v54).n128_f64[0]);
    _Block_release(v23);
    swift_release(a3);

  }
  else
  {
    swift_release(a3);
  }
}

void sub_1003C95D4(char a1)
{
  uint64_t v1;

  sub_1003C7C58(a1, v1);
}

uint64_t sub_1003C95DC()
{
  uint64_t v0;

  return sub_1003C7F38(v0);
}

uint64_t sub_1003C95E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1003C9610(uint64_t a1)
{
  uint64_t v1;

  return sub_1003C89E8(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(_QWORD))(v1 + 32));
}

uint64_t sub_1003C9620()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003C9644()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

void sub_1003C9668(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1003C6020(a1, a2, v2);
}

void sub_1003C9670(char a1)
{
  uint64_t v1;

  sub_1003C6184(a1, v1);
}

void sub_1003C9678(void *a1)
{
  uint64_t v1;

  sub_1003C6208(a1, v1);
}

void sub_1003C9680(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1003C6288(a1, a2, v2);
}

void sub_1003C9688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1003C6330(a1, a2, v2);
}

uint64_t sub_1003C9690()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  if (v0[5])
    swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_1003C96CC()
{
  uint64_t v0;

  sub_1003C8AEC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(void))(v0 + 40));
}

uint64_t sub_1003C96E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1003C970C()
{
  uint64_t v0;

  return sub_1003C8194(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1003C9714()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1003C9724()
{
  _BYTE *v0;
  double result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;

  if ((sub_1003C8244() & 1) != 0)
  {
    v2 = swift_allocObject(&unk_10056DF80, 24, 7);
    swift_unknownObjectWeakInit(v2 + 16, v0);
    v3 = *(_QWORD *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText + 8];
    if (v3)
    {
      v4 = *(_QWORD *)&v0[OBJC_IVAR___ICSmartFolderComposerViewController_createTagText];
      v0[OBJC_IVAR___ICSmartFolderComposerViewController_isCreatingTag] = 1;
      swift_bridgeObjectRetain(v3);
      swift_retain(v2);
      sub_1003C6880();
      v5 = (_QWORD *)swift_allocObject(&unk_10056E188, 40, 7);
      v5[2] = v0;
      v5[3] = sub_1003C984C;
      v5[4] = v2;
      v6 = v0;
      swift_retain(v2);
      sub_1003C63A4(v4, v3, (void (*)(uint64_t, __n128))sub_1003C9888, (uint64_t)v5);
      swift_release_n(v2, 2);
      swift_bridgeObjectRelease(v3);
      v2 = (uint64_t)v5;
    }
    else
    {
      v7 = swift_retain(v2);
      sub_1003C8610(v7);
      swift_release(v2);
    }
    *(_QWORD *)&result = swift_release(v2).n128_u64[0];
  }
  return result;
}

void sub_1003C984C()
{
  uint64_t v0;

  sub_1003C8610(v0);
}

uint64_t sub_1003C9854()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1003C9888()
{
  uint64_t *v0;

  sub_1003C8038(v0[2], v0[3], v0[4]);
}

void sub_1003C9898()
{
  uint64_t v0;

  sub_1003C811C(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

void sub_1003C98A4()
{
  uint64_t v0;

  sub_1003C8700(v0);
}

uint64_t sub_1003C98AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003C98D0()
{
  uint64_t v0;
  _BYTE *v1;

  v1 = *(_BYTE **)(v0 + 16);
  v1[OBJC_IVAR___ICSmartFolderComposerViewController_hasChanges] = 0;
  objc_msgSend(v1, "setModalInPresentation:", 0);
  sub_1003C6880();
}

uint64_t sub_1003C9910()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  if (*(_QWORD *)(v0 + 72))
    swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1003C9964()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003C9988(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;

  sub_1003C6DD4(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

void sub_1003C9A40(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  _QWORD v15[5];
  uint64_t v16;
  objc_super v17;

  v17.receiver = v1;
  v17.super_class = (Class)type metadata accessor for MathNotesSceneDelegate();
  objc_msgSendSuper2(&v17, "sceneWillEnterForeground:", a1);
  v3 = objc_opt_self(UIWindowScene);
  v4 = swift_dynamicCastObjCClass(a1, v3);
  if (v4)
  {
    v5 = v4;
    v6 = (void *)objc_opt_self(ICNAController);
    v7 = a1;
    v8 = objc_msgSend(v6, "sharedController");
    if (v8)
    {
      v9 = v8;
      v10 = (void *)ICNASessionTypeNotes;
      v11 = swift_allocObject(&unk_10056E2F0, 24, 7);
      *(_QWORD *)(v11 + 16) = v5;
      v15[4] = sub_1003C9F18;
      v16 = v11;
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 1107296256;
      v15[2] = sub_100206734;
      v15[3] = &unk_10056E308;
      v12 = _Block_copy(v15);
      v13 = v16;
      v14 = v7;
      v7 = v10;
      objc_msgSend(v9, "startWindowSceneSessionWithType:windowScene:successHandler:", v7, v5, v12, swift_release(v13).n128_f64[0]);

      _Block_release(v12);
    }

  }
}

void sub_1003C9BA4(void *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  _QWORD v6[5];
  uint64_t v7;

  v2 = swift_allocObject(&unk_10056E340, 24, 7);
  *(_QWORD *)(v2 + 16) = a1;
  v6[4] = sub_1003C9F20;
  v7 = v2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1107296256;
  v6[2] = sub_100206734;
  v6[3] = &unk_10056E358;
  v3 = _Block_copy(v6);
  v4 = v7;
  v5 = a1;
  swift_release(v4);
  performBlockOnMainThread(v3);
  _Block_release(v3);
}

void sub_1003C9C4C(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend((id)objc_opt_self(ICNAWindowSceneReportingManager), "sharedManager");
  objc_msgSend(v2, "windowSceneWillBegin:", a1);

}

void sub_1003C9CFC(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  objc_super v12;

  v12.receiver = v1;
  v12.super_class = (Class)type metadata accessor for MathNotesSceneDelegate();
  objc_msgSendSuper2(&v12, "sceneDidEnterBackground:", a1);
  v3 = objc_opt_self(UIWindowScene);
  v4 = swift_dynamicCastObjCClass(a1, v3);
  if (v4)
  {
    v5 = v4;
    v6 = (void *)objc_opt_self(ICNAWindowSceneReportingManager);
    v7 = a1;
    v8 = objc_msgSend(v6, "sharedManager");
    objc_msgSend(v8, "windowSceneDidEnd:", v5);

    v9 = objc_msgSend((id)objc_opt_self(ICNAController), "sharedController");
    if (v9)
    {
      v10 = v9;
      v11 = ICNASessionTypeNotes;
      objc_msgSend(v10, "endWindowSceneSessionSynchronously:forSessionType:endReason:windowScene:", 0, v11, 1, v5);

    }
  }
}

id sub_1003C9EA4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MathNotesSceneDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MathNotesSceneDelegate()
{
  return objc_opt_self(ICMathNotesWindowSceneDelegate);
}

uint64_t sub_1003C9EF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003C9F18()
{
  uint64_t v0;

  sub_1003C9BA4(*(void **)(v0 + 16));
}

void sub_1003C9F20()
{
  uint64_t v0;

  sub_1003C9C4C(*(_QWORD *)(v0 + 16));
}

void sub_1003C9F28(uint64_t a1)
{
  void *v1;
  void *v2;
  char v4;
  id v5;
  NSString v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  id v11;
  id v12;
  _QWORD v13[2];
  char v14;
  ValueMetadata *v15;
  unint64_t v16;

  v2 = v1;
  v15 = &type metadata for NotesFeature;
  v16 = sub_1000199D4();
  v13[0] = "GreyParrot";
  v13[1] = 10;
  v14 = 2;
  v4 = isFeatureEnabled(_:)(v13);
  sub_1000153C0(v13);
  if ((v4 & 1) != 0)
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)ICWindowStateArchive), "init");
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "setWindowIdentifier:", v6);

    v7 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "setToolPickerIdentifier:", v7);

    UIScene.hostApplicationIdentifier.getter();
    if (v8)
    {
      v9 = v8;
      v10 = String._bridgeToObjectiveC()();
      objc_msgSend(v5, "setHostApplicationIdentifier:", v10, swift_bridgeObjectRelease(v9).n128_f64[0]);

      v11 = objc_msgSend(objc_allocWithZone((Class)ICWindow), "initWithWindowScene:behavior:", a1, 1);
      v12 = objc_msgSend(objc_allocWithZone((Class)ICViewControllerManager), "init");
      objc_msgSend(v12, "setupWithWindow:stateRestoreArchive:completion:", v11, v5, 0);
      objc_msgSend(v11, "makeKeyAndVisible");
      objc_msgSend(v11, "setViewControllerManager:", v12);
      objc_msgSend(v2, "setIcWindow:", v11);

      return;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000017, 0x800000010048D250, "MobileNotes/MathNotesWindowSceneDelegate.swift", 46, 2, 37, 0);
  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000013, 0x800000010048D1C0, "MobileNotes/MathNotesWindowSceneDelegate.swift", 46, 2, 26, 0);
  }
  __break(1u);
}

int64_t sub_1003CA190(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  int64_t result;
  int64_t v10;
  int v11;
  int v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v3 = type metadata accessor for Participant(0);
  v34 = *(_QWORD *)(v3 - 8);
  v35 = v3;
  v4 = __chkstk_darwin(v3);
  v33 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v32 = (char *)v29 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (!v7)
    return (int64_t)v8;
  v29[1] = v1;
  v36 = _swiftEmptyArrayStorage;
  sub_100137028(0, v7, 0);
  result = sub_100242C1C(a1);
  v10 = result;
  v12 = v11;
  v14 = v13 & 1;
  v30 = a1;
  v31 = a1 + 56;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v31 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a1 + 36) != v12)
      goto LABEL_16;
    v15 = *(_QWORD *)(a1 + 48);
    v17 = v34;
    v16 = v35;
    v18 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v32, v15 + *(_QWORD *)(v34 + 72) * v10, v35);
    v19 = v33;
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v33, v18, v16);
    v21 = Participant.handle.getter(v20);
    v23 = v22;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    v8 = v36;
    if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
    {
      sub_100137028(0, v8[2] + 1, 1);
      v8 = v36;
    }
    v25 = v8[2];
    v24 = v8[3];
    if (v25 >= v24 >> 1)
    {
      sub_100137028(v24 > 1, v25 + 1, 1);
      v8 = v36;
    }
    v8[2] = v25 + 1;
    v26 = &v8[2 * v25];
    v26[4] = v21;
    v26[5] = v23;
    a1 = v30;
    result = sub_1003CCBC4(v10, v12, v14 & 1, v30);
    v10 = result;
    v12 = v27;
    v14 = v28 & 1;
    if (!--v7)
    {
      sub_1001EDA28(result, v27, v28 & 1);
      return (int64_t)v8;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_1003CA3D0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  KeyPath = swift_getKeyPath(&unk_1004675E8, a2);
  v4 = swift_getKeyPath(&unk_100467610, v3);
  static Published.subscript.getter(&v6);
  swift_release(KeyPath);
  swift_release(v4);
  return v6;
}

void sub_1003CA440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t KeyPath;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v1 = v0;
  v2 = sub_100012E18(&qword_1005D4AF0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource_groupSession);
  if (v7)
  {
    v8 = swift_retain(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource_groupSession));
    v9 = GroupSession.activeParticipants.getter(v8);
    sub_1003CADE4(v9, v10);
    v11 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v9;
    v12 = swift_bridgeObjectRelease(v11);
    GroupSession.$activeParticipants.getter(v12);
    v13 = swift_allocObject(&unk_10056E3E0, 24, 7);
    swift_weakInit(v13 + 16, v0);
    v14 = sub_100016638(&qword_1005D4AF8, &qword_1005D4AF0, (uint64_t)&protocol conformance descriptor for Published<A>.Publisher);
    v15 = Publisher<>.sink(receiveValue:)(sub_1003CD6E8, v13, v2, v14);
    swift_release(v7);
    v16 = swift_release(v13);
    (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v16);
    v17 = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v15;
    swift_release(v17);
  }
  else
  {
    sub_1003CADE4((uint64_t)&_swiftEmptySetSingleton, v4);
    v18 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 24) = &_swiftEmptySetSingleton;
    swift_bridgeObjectRelease(v18);
    v19 = *(_QWORD *)(v0 + 32);
    *(_QWORD *)(v0 + 32) = 0;
    swift_release(v19);
    KeyPath = swift_getKeyPath(&unk_1004675E8, v20);
    v23 = swift_getKeyPath(&unk_100467610, v22);
    v25 = _swiftEmptyArrayStorage;
    swift_retain(v1);
    static Published.subscript.setter(&v25, v1, KeyPath, v23);
  }
}

double sub_1003CA600(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    swift_bridgeObjectRetain(v2);
    sub_1003CADE4(v7, v8);
    v9 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = v2;
    swift_release(v6);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  }
  return result;
}

_QWORD *sub_1003CA678(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v3 = sub_100012E18(&qword_1005D84C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[3] = &_swiftEmptySetSingleton;
  v1[4] = 0;
  v7 = (char *)v1 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource__cleanedUpParticipants;
  v15 = _swiftEmptyArrayStorage;
  v8 = sub_100012E18(&qword_1005D3D70);
  Published.init(initialValue:)(&v15, v8);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v6, v3);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource_groupSession) = 0;
  v1[2] = a1;
  v9 = (void *)objc_opt_self(NSNotificationCenter);
  v10 = a1;
  v11 = objc_msgSend(v9, "defaultCenter");
  v12 = qword_1005CEBE0;
  swift_retain(v1);
  if (v12 != -1)
    swift_once(&qword_1005CEBE0, sub_1002A579C);
  objc_msgSend(v11, "addObserver:selector:name:object:", v1, "realtimeCollaborationControllerGroupActivityDidChange:", qword_100601AC0, 0);

  swift_release(v1);
  return v1;
}

uint64_t sub_1003CA7F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v5 - 8);
  v28 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Notification(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000163BC(0, (unint64_t *)&qword_1005CEF30, OS_dispatch_queue_ptr);
  v13 = (void *)static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  v14 = *(unsigned __int8 *)(v9 + 80);
  v15 = (v14 + 16) & ~v14;
  v16 = (v10 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v17 = swift_allocObject(&unk_10056E390, v16 + 8, v14 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v17 + v15, v11, v8);
  v18 = v26;
  *(_QWORD *)(v17 + v16) = v26;
  aBlock[4] = sub_1003CD684;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100206734;
  aBlock[3] = &unk_10056E3A8;
  v19 = _Block_copy(aBlock);
  v20 = v31;
  swift_retain(v18);
  swift_release(v20);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_100019C6C((unint64_t *)&qword_1005D6380, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_100012E18((uint64_t *)&unk_1005D8530);
  v24 = sub_100016638((unint64_t *)&qword_1005D6390, (uint64_t *)&unk_1005D8530, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v2, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v4, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v7, v28);
}

double sub_1003CAA88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  _QWORD v25[5];
  __int128 v26;
  __int128 v27;

  v3 = Notification.userInfo.getter(a1);
  if (!v3)
  {
    v26 = 0u;
    v27 = 0u;
LABEL_13:
    sub_100012DDC((uint64_t)&v26, &qword_1005CF190);
    return result;
  }
  v4 = v3;
  v24[0] = 0xD000000000000011;
  v24[1] = 0x8000000100485C70;
  AnyHashable.init<A>(_:)(v25, v24, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_100248ECC((uint64_t)v25), (v6 & 1) != 0))
  {
    sub_100128424(*(_QWORD *)(v4 + 56) + 32 * v5, (uint64_t)&v26);
  }
  else
  {
    v26 = 0u;
    v27 = 0u;
  }
  swift_bridgeObjectRelease(v4);
  sub_10018550C((uint64_t)v25);
  if (!*((_QWORD *)&v27 + 1))
    goto LABEL_13;
  if ((swift_dynamicCast(v25, &v26, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
  {
    v9 = v25[0];
    v8 = v25[1];
    v10 = objc_msgSend(*(id *)(a2 + 16), "identifier");
    if (!v10)
    {
      *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
      return result;
    }
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

    if (v9 == v12 && v8 == v14)
    {
      v15 = swift_bridgeObjectRelease_n(v8, 2);
      goto LABEL_17;
    }
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v8, v12, v14, 0);
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v14).n128_u64[0];
    if ((v16 & 1) != 0)
    {
LABEL_17:
      v17 = Notification.userInfo.getter(v15);
      if (v17)
      {
        v18 = v17;
        *(_QWORD *)&v26 = 0x70756F7247434352;
        *((_QWORD *)&v26 + 1) = 0xEF6E6F6973736553;
        AnyHashable.init<A>(_:)(v25, &v26, &type metadata for String, &protocol witness table for String);
        if (*(_QWORD *)(v18 + 16) && (v19 = sub_100248ECC((uint64_t)v25), (v20 & 1) != 0))
        {
          sub_100128424(*(_QWORD *)(v18 + 56) + 32 * v19, (uint64_t)&v26);
        }
        else
        {
          v26 = 0u;
          v27 = 0u;
        }
        swift_bridgeObjectRelease(v18);
        sub_10018550C((uint64_t)v25);
        if (*((_QWORD *)&v27 + 1))
        {
          v21 = sub_100012E18(&qword_1005D4AC0);
          if (swift_dynamicCast(v25, &v26, (char *)&type metadata for Any + 8, v21, 6))
            v22 = v25[0];
          else
            v22 = 0;
          goto LABEL_28;
        }
      }
      else
      {
        v26 = 0u;
        v27 = 0u;
      }
      sub_100012DDC((uint64_t)&v26, &qword_1005CF190);
      v22 = 0;
LABEL_28:
      v23 = *(_QWORD *)(a2 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource_groupSession);
      *(_QWORD *)(a2 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource_groupSession) = v22;
      swift_retain(v22);
      swift_release(v23);
      sub_1003CA440();
      *(_QWORD *)&result = swift_release(v22).n128_u64[0];
    }
  }
  return result;
}

void sub_1003CADE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;

  v3 = v2;
  KeyPath = swift_getKeyPath(&unk_1004675E8, a2);
  v7 = swift_getKeyPath(&unk_100467610, v6);
  static Published.subscript.getter(&v31);
  swift_release(KeyPath);
  swift_release(v7);
  v8 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(v8 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
  {
    v30 = (void *)a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v8);
    sub_1003CB698(v11);
    swift_bridgeObjectRelease(v8);
    v10 = a1;
  }
  else
  {
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v8);
    v10 = (uint64_t)sub_1003CBE4C(v9, a1);
    swift_bridgeObjectRelease(v8);
  }
  swift_retain(v3);
  v12 = sub_1003CCCA8(v10, v3);
  swift_bridgeObjectRelease(v10);
  swift_release(v3);
  sub_10026CD44(0, 0, v12);
  v13 = *(_QWORD *)(v3 + 24);
  if (*(_QWORD *)(a1 + 16) <= *(_QWORD *)(v13 + 16) >> 3)
  {
    v30 = *(void **)(v3 + 24);
    swift_bridgeObjectRetain(v13);
    sub_1003CB698(a1);
    v14 = v30;
  }
  else
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + 24));
    v14 = sub_1003CBE4C(a1, v13);
  }
  v15 = sub_1003CA190((uint64_t)v14);
  swift_bridgeObjectRelease(v14);
  v16 = sub_10020C330(v15);
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRetain(v16);
  v17 = sub_1003CD1C0((uint64_t *)&v31, v16);
  swift_bridgeObjectRelease(v16);
  v18 = v31;
  if (v31 >> 62)
  {
    if ((v31 & 0x8000000000000000) != 0)
      v29 = v31;
    else
      v29 = v31 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v31);
    v19 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v18);
    if (v19 >= v17)
      goto LABEL_9;
  }
  else
  {
    v19 = *(_QWORD *)((v31 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v19 >= v17)
    {
LABEL_9:
      sub_10026F884(v17, v19);
      swift_bridgeObjectRelease(v16);
      v20 = v31;
      v21 = sub_100012E18(&qword_1005D3D70);
      v22 = sub_100016638(&qword_1005DC7B8, &qword_1005D3D70, (uint64_t)&protocol conformance descriptor for [A]);
      v23 = sub_1001452A0((unint64_t *)&qword_1005D4AC8, &qword_1005D8540, CKShareParticipant_ptr);
      v24 = Sequence<>.uniqued()(v21, v22, v23);
      swift_bridgeObjectRelease(v20);
      v26 = swift_getKeyPath(&unk_1004675E8, v25);
      v28 = swift_getKeyPath(&unk_100467610, v27);
      v30 = (void *)v24;
      swift_retain(v3);
      static Published.subscript.setter(&v30, v3, v26, v28);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1003CB0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v1 = v0 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource__cleanedUpParticipants;
  v2 = sub_100012E18(&qword_1005D84C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC11MobileNotes34CollaborationParticipantDataSource_groupSession));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1003CB13C()
{
  return type metadata accessor for CollaborationParticipantDataSource(0);
}

uint64_t type metadata accessor for CollaborationParticipantDataSource(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DC670;
  if (!qword_1005DC670)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CollaborationParticipantDataSource);
  return result;
}

void sub_1003CB180(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = "\b";
  sub_1003CB214(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = "\b";
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_1003CB214(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1005D8478)
  {
    v2 = sub_10001537C(&qword_1005D3D70);
    v3 = type metadata accessor for Published(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1005D8478);
  }
}

uint64_t sub_1003CB26C@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = type metadata accessor for CollaborationParticipantDataSource(0);
  result = ObservableObject<>.objectWillChange.getter(v4, a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003CB2A8@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t KeyPath;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  KeyPath = swift_getKeyPath(&unk_1004675E8, a1);
  v5 = swift_getKeyPath(&unk_100467610, v4);
  static Published.subscript.getter(&v7);
  swift_release(KeyPath);
  result = swift_release(v5);
  *a2 = v7;
  return result;
}

uint64_t sub_1003CB328(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  KeyPath = swift_getKeyPath(&unk_1004675E8, a2);
  v6 = swift_getKeyPath(&unk_100467610, v5);
  v8 = v2;
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return static Published.subscript.setter(&v8, v3, KeyPath, v6);
}

void sub_1003CB3A4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[6];

  v3 = *v1;
  if ((*v1 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)(v3 + 16))
      return;
LABEL_8:
    if ((a1 & 0xC000000000000001) != 0)
    {
      if (a1 < 0)
        v5 = a1;
      else
        v5 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v6 = __CocoaSet.makeIterator()(v5);
      v7 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
      v8 = sub_1001452A0(&qword_1005D4160, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
      v9 = Set.Iterator.init(_cocoa:)(v6, v7, v8);
      a1 = v31[1];
      v29 = v31[2];
      v10 = v31[3];
      v11 = v31[4];
      v12 = v31[5];
    }
    else
    {
      v13 = -1 << *(_BYTE *)(a1 + 32);
      v29 = a1 + 56;
      v10 = ~v13;
      v14 = -v13;
      if (v14 < 64)
        v15 = ~(-1 << v14);
      else
        v15 = -1;
      v12 = v15 & *(_QWORD *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      v11 = 0;
    }
    v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0)
      goto LABEL_20;
    while (1)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v11 << 6);
        v19 = v11;
      }
      else
      {
        v25 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
          __break(1u);
          return;
        }
        if (v25 >= v16)
          goto LABEL_42;
        v26 = *(_QWORD *)(v29 + 8 * v25);
        v19 = v11 + 1;
        if (!v26)
        {
          v19 = v11 + 2;
          if (v11 + 2 >= v16)
            goto LABEL_42;
          v26 = *(_QWORD *)(v29 + 8 * v19);
          if (!v26)
          {
            v19 = v11 + 3;
            if (v11 + 3 >= v16)
              goto LABEL_42;
            v26 = *(_QWORD *)(v29 + 8 * v19);
            if (!v26)
            {
              v19 = v11 + 4;
              if (v11 + 4 >= v16)
                goto LABEL_42;
              v26 = *(_QWORD *)(v29 + 8 * v19);
              if (!v26)
              {
                v19 = v11 + 5;
                if (v11 + 5 >= v16)
                  goto LABEL_42;
                v26 = *(_QWORD *)(v29 + 8 * v19);
                if (!v26)
                {
                  v27 = v11 + 6;
                  while (v16 != v27)
                  {
                    v26 = *(_QWORD *)(v29 + 8 * v27++);
                    if (v26)
                    {
                      v19 = v27 - 1;
                      goto LABEL_38;
                    }
                  }
LABEL_42:
                  sub_1001452E0(a1);
                  return;
                }
              }
            }
          }
        }
LABEL_38:
        v17 = (v26 - 1) & v26;
        v18 = __clz(__rbit64(v26)) + (v19 << 6);
      }
      v23 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v18);
      if (!v23)
        goto LABEL_42;
      while (1)
      {
        v28 = (void *)sub_100309B8C(v23);

        v11 = v19;
        v12 = v17;
        if ((a1 & 0x8000000000000000) == 0)
          break;
LABEL_20:
        v20 = __CocoaSet.Iterator.next()(v9);
        if (v20)
        {
          v21 = v20;
          v30 = v20;
          v22 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
          swift_unknownObjectRetain(v21);
          swift_dynamicCast(v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
          v23 = (id)v31[0];
          swift_unknownObjectRelease(v21, v24);
          v19 = v11;
          v17 = v12;
          if (v23)
            continue;
        }
        goto LABEL_42;
      }
    }
  }
  if (v3 < 0)
    v4 = *v1;
  else
    v4 = v3 & 0xFFFFFFFFFFFFFF8;
  if (__CocoaSet.count.getter(v4))
    goto LABEL_8;
}

void sub_1003CB698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_100012E18(&qword_1005D4AE8);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Participant(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v24 - v11;
  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v13 = *(_QWORD *)(a1 + 56);
  v25 = a1 + 56;
  v14 = 1 << *(_BYTE *)(a1 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v18 = 0;
  while (1)
  {
    if (v16)
    {
      v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v21 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v17)
        goto LABEL_24;
      v22 = *(_QWORD *)(v25 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v17)
          goto LABEL_24;
        v22 = *(_QWORD *)(v25 + 8 * v18);
        if (!v22)
        {
          v18 = v21 + 3;
          if (v21 + 3 >= v17)
            goto LABEL_24;
          v22 = *(_QWORD *)(v25 + 8 * v18);
          if (!v22)
            break;
        }
      }
    }
LABEL_23:
    v16 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_6:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v12, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v7 + 72) * v20, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    sub_100309D90((uint64_t)v10, (uint64_t)v5);
    sub_100012DDC((uint64_t)v5, &qword_1005D4AE8);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  v23 = v21 + 4;
  if (v23 >= v17)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v22 = *(_QWORD *)(v25 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_23;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v17)
      goto LABEL_24;
    v22 = *(_QWORD *)(v25 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

void *sub_1003CB8FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  char v29;
  uint64_t v30;
  id v31;
  char v32;
  int64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  uint64_t isStackAllocationSafe;
  char v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;

  v2 = a2;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v3 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = __CocoaSet.makeIterator()(v4);
    v6 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v7 = sub_1001452A0(&qword_1005D4160, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v8 = Set.Iterator.init(_cocoa:)(v5, v6, v7);
    v3 = v56;
    v9 = v57;
    v11 = v58;
    v10 = v59;
    v12 = v60;
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v9 = a1 + 56;
    v11 = ~v13;
    v14 = -v13;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v12 = v15 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = 0;
  }
  v51 = v3;
  v52 = v9;
  v53 = v11;
  v54 = v10;
  v55 = v12;
  v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v12)
      {
        v17 = (v12 - 1) & v12;
        v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        v19 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v18);
        v20 = v19;
        goto LABEL_18;
      }
      v33 = v10 + 1;
      if (__OFADD__(v10, 1))
        __break(1u);
      v34 = (unint64_t)(v11 + 64) >> 6;
      if (v33 >= v34)
      {
        v19 = 0;
        v17 = 0;
        goto LABEL_18;
      }
      v35 = *(_QWORD *)(v52 + 8 * v33);
      if (v35)
      {
LABEL_31:
        v17 = (v35 - 1) & v35;
        v18 = __clz(__rbit64(v35)) + (v33 << 6);
        v10 = v33;
        goto LABEL_17;
      }
      v36 = v10 + 2;
      if (v10 + 2 >= v34)
        goto LABEL_47;
      v35 = *(_QWORD *)(v52 + 8 * v36);
      if (v35)
      {
LABEL_35:
        v33 = v36;
        goto LABEL_31;
      }
      if (v10 + 3 < v34)
      {
        v35 = *(_QWORD *)(v52 + 8 * (v10 + 3));
        if (v35)
        {
          v33 = v10 + 3;
          goto LABEL_31;
        }
        v36 = v10 + 4;
        if (v10 + 4 >= v34)
        {
          v19 = 0;
          v17 = 0;
          v10 += 3;
LABEL_18:
          v54 = v10;
          v55 = v17;
          if (!v19)
            goto LABEL_56;
          goto LABEL_22;
        }
        v35 = *(_QWORD *)(v52 + 8 * v36);
        if (v35)
          goto LABEL_35;
        v33 = v10 + 5;
        if (v10 + 5 < v34)
        {
          v35 = *(_QWORD *)(v52 + 8 * v33);
          if (v35)
            goto LABEL_31;
          v33 = v34 - 1;
          v37 = v10 + 6;
          while (v34 != v37)
          {
            v35 = *(_QWORD *)(v52 + 8 * v37++);
            if (v35)
            {
              v33 = v37 - 1;
              goto LABEL_31;
            }
          }
LABEL_47:
          v19 = 0;
          v17 = 0;
          v10 = v33;
          goto LABEL_18;
        }
      }
      v19 = 0;
      v17 = 0;
      v10 = v36;
      goto LABEL_18;
    }
    v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21)
      goto LABEL_57;
    v22 = v21;
    v49 = v21;
    v23 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    swift_unknownObjectRetain(v22);
    swift_dynamicCast(&v50, &v49, (char *)&type metadata for Swift.AnyObject + 8, v23, 7);
    v19 = v50;
    swift_unknownObjectRelease(v22, v24);
    if (!v19)
    {
LABEL_56:
      v3 = v51;
LABEL_57:
      sub_1001452E0(v3);
      return (void *)v2;
    }
LABEL_22:
    v25 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
    v26 = -1 << *(_BYTE *)(v2 + 32);
    v27 = v25 & ~v26;
    if (((*(_QWORD *)(v16 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
      goto LABEL_13;
    sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
    v28 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v27);
    v29 = static NSObject.== infix(_:_:)(v28);

    if ((v29 & 1) != 0)
      break;
    v30 = ~v26;
    while (1)
    {
      v27 = (v27 + 1) & v30;
      if (((*(_QWORD *)(v16 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
        break;
      v31 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * v27);
      v32 = static NSObject.== infix(_:_:)(v31);

      if ((v32 & 1) != 0)
        goto LABEL_50;
    }
LABEL_13:

    v3 = v51;
    v11 = v53;
    v10 = v54;
    v12 = v55;
  }
LABEL_50:

  v39 = *(_BYTE *)(v2 + 32);
  v40 = v39 & 0x3F;
  v41 = (1 << v39) + 63;
  v42 = v41 >> 6;
  v43 = 8 * (v41 >> 6);
  if (v40 < 0xE
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v41 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v49 - ((v43 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v43);
    sub_1003CC408((unint64_t *)((char *)&v49 - ((v43 + 15) & 0x3FFFFFFFFFFFFFF0)), v42, v2, v27, &v51);
    v45 = v44;
    swift_release(v2);
    sub_1001452E0(v51);
  }
  else
  {
    v46 = (void *)swift_slowAlloc(v43, -1);
    memcpy(v46, (const void *)(v2 + 56), v43);
    sub_1003CC408((unint64_t *)v46, v42, v2, v27, &v51);
    v45 = v47;
    swift_release(v2);
    sub_1001452E0(v51);
    swift_slowDealloc(v46, -1, -1);
  }
  return (void *)v45;
}

void *sub_1003CBE4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  uint64_t isStackAllocationSafe;
  char v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  size_t v51;
  void *v52;
  void *v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  int64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  unint64_t v66;

  v4 = sub_100012E18(&qword_1005D4AE8);
  __chkstk_darwin(v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Participant(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v61 = (char *)&v55 - v12;
  if (!*(_QWORD *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }
  v13 = -1 << *(_BYTE *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 56);
  v15 = ~v13;
  v16 = -v13;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  else
    v17 = -1;
  v62 = a1;
  v63 = a1 + 56;
  v18 = a1;
  v19 = a1 + 56;
  v20 = v17 & v14;
  v21 = v15;
  v64 = v15;
  v65 = 0;
  v66 = v17 & v14;
  v60 = (char *)(a2 + 56);
  v22 = v18;
  v23 = swift_bridgeObjectRetain(v18);
  v24 = 0;
  v56 = v6;
  v59 = a2;
  v57 = v20;
  v58 = 0;
  if (!v20)
    goto LABEL_8;
LABEL_6:
  v25 = (v20 - 1) & v20;
  v26 = __clz(__rbit64(v20)) | (v24 << 6);
  v27 = v24;
  v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))(v6, *(_QWORD *)(v22 + 48) + *(_QWORD *)(v8 + 72) * v26, v7, v23);
  v29 = 0;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1, v7);
    v62 = v22;
    v63 = v28;
    v64 = v21;
    v65 = v27;
    v66 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_1001452E0(v22);
      sub_100012DDC((uint64_t)v6, &qword_1005D4AE8);
      return (void *)v59;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v61, v6, v7);
    v33 = v59;
    v34 = *(_QWORD *)(v59 + 40);
    v35 = sub_100019C6C(&qword_1005D89D8, (uint64_t (*)(uint64_t))&type metadata accessor for Participant, (uint64_t)&protocol conformance descriptor for Participant);
    v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    v37 = -1 << *(_BYTE *)(v33 + 32);
    v38 = v36 & ~v37;
    if (((*(_QWORD *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) != 0)
      break;
    v45 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v45(v61, v7);
    v24 = v65;
    v20 = v66;
    v22 = v62;
    v19 = v63;
    v21 = v64;
    v6 = v56;
    v57 = v66;
    v58 = v65;
    if (v66)
      goto LABEL_6;
LABEL_8:
    v27 = v24 + 1;
    if (__OFADD__(v24, 1))
      __break(1u);
    v28 = v19;
    v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30)
      goto LABEL_26;
    v31 = *(_QWORD *)(v19 + 8 * v27);
    if (v31)
      goto LABEL_11;
    v24 += 2;
    if (v27 + 1 >= v30)
      goto LABEL_36;
    v31 = *(_QWORD *)(v19 + 8 * v24);
    if (v31)
      goto LABEL_14;
    if (v27 + 2 >= v30)
    {
LABEL_26:
      v25 = 0;
      v29 = 1;
      v27 = v24;
    }
    else
    {
      v31 = *(_QWORD *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2;
        goto LABEL_11;
      }
      v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        v25 = 0;
        v29 = 1;
        v27 += 2;
      }
      else
      {
        v31 = *(_QWORD *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          v27 = v24;
LABEL_11:
          v25 = (v31 - 1) & v31;
          v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }
        v27 += 4;
        if (v27 >= v30)
          goto LABEL_26;
        v31 = *(_QWORD *)(v19 + 8 * v27);
        if (v31)
          goto LABEL_11;
        v27 = v30 - 1;
        v32 = v58 + 6;
        while (v30 != v32)
        {
          v31 = *(_QWORD *)(v19 + 8 * v32++);
          if (v31)
          {
            v27 = v32 - 1;
            goto LABEL_11;
          }
        }
LABEL_36:
        v25 = 0;
        v29 = 1;
      }
    }
  }
  v39 = v33;
  v40 = ~v37;
  v41 = *(_QWORD *)(v8 + 72);
  v42 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  while (1)
  {
    v42(v11, *(_QWORD *)(v39 + 48) + v41 * v38, v7);
    v43 = sub_100019C6C(&qword_1005D89E8, (uint64_t (*)(uint64_t))&type metadata accessor for Participant, (uint64_t)&protocol conformance descriptor for Participant);
    v44 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v61, v7, v43);
    v45 = *(void (**)(char *, uint64_t))(v8 + 8);
    v45(v11, v7);
    if ((v44 & 1) != 0)
      break;
    v38 = (v38 + 1) & v40;
    if (((*(_QWORD *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8] >> v38) & 1) == 0)
      goto LABEL_34;
  }
  isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v45)(v61, v7);
  v47 = *(_BYTE *)(v39 + 32);
  v48 = v47 & 0x3F;
  v49 = (1 << v47) + 63;
  v50 = v49 >> 6;
  v51 = 8 * (v49 >> 6);
  if (v48 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v49 >> 6), 8), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0), v60, v51);
    v52 = sub_1003CC77C((unint64_t *)((char *)&v55 - ((v51 + 15) & 0x3FFFFFFFFFFFFFF0)), v50, v39, v38, &v62);
    swift_release(v39);
    sub_1001452E0(v62);
  }
  else
  {
    v54 = (void *)swift_slowAlloc(v51, -1);
    memcpy(v54, v60, v51);
    v52 = sub_1003CC77C((unint64_t *)v54, v50, v39, v38, &v62);
    swift_release(v39);
    sub_1001452E0(v62);
    swift_slowDealloc(v54, -1, -1);
  }
  return v52;
}

void sub_1003CC408(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  char v25;
  uint64_t v26;
  unint64_t i;
  unint64_t v28;
  id v29;
  char v30;
  int64_t v31;
  int64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v38;
  uint64_t v41;
  uint64_t v42;
  void *v43;

  v5 = a5;
  v7 = *(_QWORD *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  v8 = v7 - 1;
  v41 = a3 + 56;
  while (2)
  {
    v38 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000) == 0)
        {
          v10 = v5[3];
          v9 = v5[4];
          if (v9)
          {
            v11 = (v9 - 1) & v9;
            v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            v13 = *(void **)(*(_QWORD *)(*v5 + 48) + 8 * v12);
            v14 = v13;
            goto LABEL_8;
          }
          v31 = v10 + 1;
          if (__OFADD__(v10, 1))
          {
            __break(1u);
            goto LABEL_47;
          }
          v32 = (unint64_t)(v5[2] + 64) >> 6;
          if (v31 >= v32)
          {
            v13 = 0;
            v11 = 0;
            goto LABEL_8;
          }
          v33 = v5[1];
          v34 = *(_QWORD *)(v33 + 8 * v31);
          if (v34)
          {
LABEL_22:
            v11 = (v34 - 1) & v34;
            v12 = __clz(__rbit64(v34)) + (v31 << 6);
            v10 = v31;
            goto LABEL_7;
          }
          if (v10 + 2 < v32)
          {
            v34 = *(_QWORD *)(v33 + 8 * (v10 + 2));
            if (v34)
            {
              v31 = v10 + 2;
              goto LABEL_22;
            }
            if (v10 + 3 >= v32)
            {
              v13 = 0;
              v11 = 0;
              v10 += 2;
              goto LABEL_8;
            }
            v34 = *(_QWORD *)(v33 + 8 * (v10 + 3));
            if (v34)
            {
              v31 = v10 + 3;
              goto LABEL_22;
            }
            v31 = v10 + 4;
            if (v10 + 4 >= v32)
            {
              v13 = 0;
              v11 = 0;
              v10 += 3;
LABEL_8:
              v5[3] = v10;
              v5[4] = v11;
              if (!v13)
                goto LABEL_45;
              goto LABEL_12;
            }
            v34 = *(_QWORD *)(v33 + 8 * v31);
            if (v34)
              goto LABEL_22;
            v31 = v32 - 1;
            v36 = v10 + 5;
            while (v32 != v36)
            {
              v34 = *(_QWORD *)(v33 + 8 * v36++);
              if (v34)
              {
                v31 = v36 - 1;
                goto LABEL_22;
              }
            }
          }
          v13 = 0;
          v11 = 0;
          v10 = v31;
          goto LABEL_8;
        }
        v15 = __CocoaSet.Iterator.next()(a1);
        if (!v15
          || (v16 = v15,
              v42 = v15,
              v17 = sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr),
              swift_unknownObjectRetain(v16),
              swift_dynamicCast(&v43, &v42, (char *)&type metadata for Swift.AnyObject + 8, v17, 7),
              v13 = v43,
              swift_unknownObjectRelease(v16, v18),
              !v13))
        {
LABEL_45:
          swift_retain(a3);
          sub_10030AB60(a1, a2, v38, a3);
          return;
        }
LABEL_12:
        v19 = NSObject._rawHashValue(seed:)(*(_QWORD *)(a3 + 40));
        v20 = -1 << *(_BYTE *)(a3 + 32);
        v21 = v19 & ~v20;
        v22 = v21 >> 6;
        v23 = 1 << v21;
        if (((1 << v21) & *(_QWORD *)(v41 + 8 * (v21 >> 6))) == 0)
          goto LABEL_3;
        sub_1000163BC(0, (unint64_t *)&qword_1005D86F0, ICHashtag_ptr);
        v24 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v21);
        v25 = static NSObject.== infix(_:_:)(v24);

        if ((v25 & 1) != 0)
          break;
        v26 = ~v20;
        for (i = v21 + 1; ; i = v28 + 1)
        {
          v28 = i & v26;
          if (((*(_QWORD *)(v41 + (((i & v26) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v26)) & 1) == 0)
            break;
          v29 = *(id *)(*(_QWORD *)(a3 + 48) + 8 * v28);
          v30 = static NSObject.== infix(_:_:)(v29);

          if ((v30 & 1) != 0)
          {

            v22 = v28 >> 6;
            v23 = 1 << v28;
            goto LABEL_25;
          }
        }
LABEL_3:

        v5 = a5;
      }

LABEL_25:
      v5 = a5;
      v35 = a1[v22];
      a1[v22] = v35 & ~v23;
    }
    while ((v23 & v35) == 0);
    v8 = v38 - 1;
    if (__OFSUB__(v38, 1))
    {
LABEL_47:
      __break(1u);
      return;
    }
    if (v38 != 1)
      continue;
    break;
  }
}

void *sub_1003CC77C(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  char v42;
  int64_t v43;
  int64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;

  v51 = a2;
  v9 = sub_100012E18(&qword_1005D4AE8);
  __chkstk_darwin(v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Participant(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (void *)__chkstk_darwin(v14);
  v59 = (char *)&v50 - v18;
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8;
  v21 = *(unint64_t *)((char *)a1 + v20) & ((-1 << a4) - 1);
  v53 = a1;
  v54 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  v22 = v19 - 1;
  v57 = a3 + 56;
  v58 = a3;
  v55 = a5;
  while (2)
  {
    v52 = v22;
    do
    {
      while (1)
      {
        v24 = *a5;
        v25 = a5[1];
        v27 = a5[2];
        v26 = a5[3];
        v28 = a5[4];
        v56 = v27;
        if (v28)
        {
          v29 = (v28 - 1) & v28;
          v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v13 + 72) * v30, v12);
          v31 = 0;
          goto LABEL_8;
        }
        v43 = v26 + 1;
        if (__OFADD__(v26, 1))
        {
          __break(1u);
          goto LABEL_42;
        }
        v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          v29 = 0;
          v31 = 1;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * v43);
        if (v45)
          goto LABEL_17;
        if (v26 + 2 >= v44)
          goto LABEL_34;
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 2));
        if (v45)
        {
          v43 = v26 + 2;
LABEL_17:
          v29 = (v45 - 1) & v45;
          v30 = __clz(__rbit64(v45)) + (v43 << 6);
          v26 = v43;
          goto LABEL_7;
        }
        if (v26 + 3 >= v44)
        {
          v29 = 0;
          v31 = 1;
          v26 += 2;
          goto LABEL_8;
        }
        v45 = *(_QWORD *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          v43 = v26 + 3;
          goto LABEL_17;
        }
        v43 = v26 + 4;
        if (v26 + 4 < v44)
        {
          v45 = *(_QWORD *)(v25 + 8 * v43);
          if (v45)
            goto LABEL_17;
          v43 = v44 - 1;
          v48 = v26 + 5;
          while (v44 != v48)
          {
            v45 = *(_QWORD *)(v25 + 8 * v48++);
            if (v45)
            {
              v43 = v48 - 1;
              goto LABEL_17;
            }
          }
LABEL_34:
          v29 = 0;
          v31 = 1;
          v26 = v43;
          goto LABEL_8;
        }
        v29 = 0;
        v31 = 1;
        v26 += 3;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
        {
          sub_100012DDC((uint64_t)v11, &qword_1005D4AE8);
          v49 = v58;
          swift_retain(v58);
          return (void *)sub_10030ADBC(v53, v51, v52, v49);
        }
        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        v32 = v58;
        v33 = *(_QWORD *)(v58 + 40);
        v34 = sub_100019C6C(&qword_1005D89D8, (uint64_t (*)(uint64_t))&type metadata accessor for Participant, (uint64_t)&protocol conformance descriptor for Participant);
        v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        v36 = -1 << *(_BYTE *)(v32 + 32);
        v37 = v35 & ~v36;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) != 0)
          break;
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        result = (void *)v23(v59, v12);
        v11 = v54;
        a5 = v55;
      }
      v38 = ~v36;
      v39 = *(_QWORD *)(v13 + 72);
      v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(_QWORD *)(v58 + 48) + v39 * v37, v12);
        v41 = sub_100019C6C(&qword_1005D89E8, (uint64_t (*)(uint64_t))&type metadata accessor for Participant, (uint64_t)&protocol conformance descriptor for Participant);
        v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59, v12, v41);
        v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_4;
      }
      result = (void *)v23(v59, v12);
      v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v11 = v54;
      v47 = *(unint64_t *)((char *)v53 + v46);
      *(unint64_t *)((char *)v53 + v46) = v47 & ~(1 << v37);
      a5 = v55;
    }
    while ((v47 & (1 << v37)) == 0);
    v22 = v52 - 1;
    if (__OFSUB__(v52, 1))
    {
LABEL_42:
      __break(1u);
      return result;
    }
    if (v52 != 1)
      continue;
    return &_swiftEmptySetSingleton;
  }
}

int64_t sub_1003CCBC4(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1003CCCA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v33 = a2;
  v3 = type metadata accessor for Participant(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v32 = (char *)&v29 - v8;
  v35 = (unint64_t)_swiftEmptyArrayStorage;
  v9 = *(_QWORD *)(a1 + 56);
  v30 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v31 = (unint64_t)(v10 + 63) >> 6;
  v34 = a1;
  result = swift_bridgeObjectRetain(a1);
  v14 = 0;
  while (v12)
  {
    v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v16 = v15 | (v14 << 6);
LABEL_22:
    v20 = v32;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v32, *(_QWORD *)(v34 + 48) + *(_QWORD *)(v4 + 72) * v16, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v20, v3);
    v21 = *(id *)(v33 + 16);
    Participant.handle.getter();
    v23 = v22;
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    v25 = objc_msgSend(v21, "participantForHandle:", v24);

    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    if (v25)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(result);
      v27 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v26 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v27 >= v26 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
      v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, v25);
      result = specialized Array._endMutation()(v28);
    }
  }
  v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v17 >= v31)
    goto LABEL_26;
  v18 = *(_QWORD *)(v30 + 8 * v17);
  ++v14;
  if (v18)
    goto LABEL_21;
  v14 = v17 + 1;
  if (v17 + 1 >= v31)
    goto LABEL_26;
  v18 = *(_QWORD *)(v30 + 8 * v14);
  if (v18)
    goto LABEL_21;
  v14 = v17 + 2;
  if (v17 + 2 >= v31)
    goto LABEL_26;
  v18 = *(_QWORD *)(v30 + 8 * v14);
  if (v18)
    goto LABEL_21;
  v14 = v17 + 3;
  if (v17 + 3 >= v31)
    goto LABEL_26;
  v18 = *(_QWORD *)(v30 + 8 * v14);
  if (v18)
  {
LABEL_21:
    v12 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_22;
  }
  v19 = v17 + 4;
  if (v19 >= v31)
  {
LABEL_26:
    swift_release(v34);
    return v35;
  }
  v18 = *(_QWORD *)(v30 + 8 * v19);
  if (v18)
  {
    v14 = v19;
    goto LABEL_21;
  }
  while (1)
  {
    v14 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v14 >= v31)
      goto LABEL_26;
    v18 = *(_QWORD *)(v30 + 8 * v14);
    ++v19;
    if (v18)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1003CCF90(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char **v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v3)
  {
    v4 = 0;
    v5 = &selRef_updateHeaderViewMargins;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
      else
        v6 = *(id *)(a1 + 8 * v4 + 32);
      v7 = v6;
      v8 = objc_msgSend(v6, v5[109]);
      v9 = objc_msgSend(v8, "lookupInfo");

      if (v9)
      {
        v10 = objc_msgSend(v9, "emailAddress");

        if (v10)
        {
          v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v13 = v12;

          LOBYTE(v11) = sub_10037A140(v11, v13, a2);
          v14 = v13;
          v5 = &selRef_updateHeaderViewMargins;
          swift_bridgeObjectRelease(v14);
          if ((v11 & 1) != 0)
          {

            return v4;
          }
        }
      }
      v15 = objc_msgSend(v7, v5[109]);
      v16 = objc_msgSend(v15, "lookupInfo");

      if (v16 && (v17 = objc_msgSend(v16, "phoneNumber"), v16, v17))
      {
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        v20 = v19;

        LOBYTE(v18) = sub_10037A140(v18, v20, a2);
        v21 = v20;
        v5 = &selRef_updateHeaderViewMargins;
        swift_bridgeObjectRelease(v21);
        if ((v18 & 1) != 0)
          return v4;
      }
      else
      {

      }
      v22 = v4 + 1;
      if (__OFADD__(v4, 1))
        break;
      ++v4;
      if (v22 == v3)
        return 0;
    }
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v23 = a1;
    else
      v23 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_1003CD1C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char **v11;
  unint64_t v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  v7 = sub_1003CCF90(v6, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  if (v2)
    return v7;
  if ((v9 & 1) == 0)
  {
    v10 = v7 + 1;
    if (__OFADD__(v7, 1))
      goto LABEL_65;
    v9 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_66:
      if ((v9 & 0x8000000000000000) != 0)
        v47 = v9;
      else
        v47 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v9);
      v48 = _CocoaArrayWrapper.endIndex.getter(v47);
      swift_bridgeObjectRelease(v9);
      if (v10 != v48)
        goto LABEL_6;
    }
    else if (v10 != *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v10 = v7 + 5;
      v11 = &selRef_updateHeaderViewMargins;
      while (1)
      {
        v9 = v10 - 4;
        v12 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v13 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v12);
        }
        else
        {
          if ((v9 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
LABEL_64:
            __break(1u);
LABEL_65:
            __break(1u);
            goto LABEL_66;
          }
          if (v9 >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_56;
          v13 = *(id *)(v12 + 8 * v10);
        }
        v14 = v13;
        v15 = objc_msgSend(v13, v11[109]);
        v16 = objc_msgSend(v15, "lookupInfo");

        if (v16)
        {
          v17 = objc_msgSend(v16, "emailAddress");

          if (v17)
          {
            v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
            v20 = v19;

            LOBYTE(v18) = sub_10037A140(v18, v20, a2);
            v21 = v20;
            v11 = &selRef_updateHeaderViewMargins;
            swift_bridgeObjectRelease(v21);
            if ((v18 & 1) != 0)
            {

              goto LABEL_40;
            }
          }
        }
        v22 = objc_msgSend(v14, v11[109]);
        v23 = objc_msgSend(v22, "lookupInfo");

        if (!v23)
          break;
        v24 = objc_msgSend(v23, "phoneNumber");

        if (!v24)
          break;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
        v27 = v26;

        LOBYTE(v25) = sub_10037A140(v25, v27, a2);
        v28 = v27;
        v11 = &selRef_updateHeaderViewMargins;
        swift_bridgeObjectRelease(v28);
        if ((v25 & 1) != 0)
          goto LABEL_40;
        if (v9 != v7)
          goto LABEL_21;
LABEL_39:
        if (__OFADD__(v7++, 1))
          goto LABEL_58;
LABEL_40:
        v41 = v10 - 3;
        if (__OFADD__(v9, 1))
          goto LABEL_57;
        v42 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v42 < 0)
            v44 = *a1;
          else
            v44 = v42 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v43 = _CocoaArrayWrapper.endIndex.getter(v44);
          swift_bridgeObjectRelease(v42);
        }
        else
        {
          v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        ++v10;
        if (v41 == v43)
          return v7;
      }

      if (v9 == v7)
        goto LABEL_39;
LABEL_21:
      v29 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, *a1);
        v29 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_25:
          if ((v9 & 0x8000000000000000) != 0)
            goto LABEL_61;
          if (v9 >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_62;
          v31 = *(id *)(v29 + 8 * v10);
          goto LABEL_28;
        }
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_59;
        if (v7 >= *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_60;
        v30 = *(id *)(v29 + 8 * v7 + 32);
        if ((v29 & 0xC000000000000001) == 0)
          goto LABEL_25;
      }
      v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10 - 4, v29);
      v29 = *a1;
LABEL_28:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v29);
      *a1 = v29;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v29 < 0 || (v29 & 0x4000000000000000) != 0)
      {
        v29 = sub_10026C694(v29);
        *a1 = v29;
      }
      v33 = *(void **)((v29 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20);
      *(_QWORD *)((v29 & 0xFFFFFFFFFFFFFF8) + 8 * v7 + 0x20) = v31;

      specialized Array._endMutation()(v34);
      v35 = *a1;
      v36 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v35;
      if (!v36 || v35 < 0 || (v35 & 0x4000000000000000) != 0)
      {
        v35 = sub_10026C694(v35);
        *a1 = v35;
      }
      if ((v9 & 0x8000000000000000) != 0)
        goto LABEL_63;
      v37 = v35 & 0xFFFFFFFFFFFFFF8;
      if (v9 >= *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_64;
      v38 = *(void **)(v37 + 8 * v10);
      *(_QWORD *)(v37 + 8 * v10) = v30;

      specialized Array._endMutation()(v39);
      goto LABEL_39;
    }
    return v7;
  }
  v45 = *a1;
  if (!((unint64_t)v45 >> 62))
    return *(_QWORD *)((v45 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v45 < 0)
    v49 = v45;
  else
    v49 = v45 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v45);
  v50 = _CocoaArrayWrapper.endIndex.getter(v49);
  swift_bridgeObjectRelease(v45);
  return v50;
}

uint64_t sub_1003CD610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Notification(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

double sub_1003CD684()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for Notification(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1003CAA88(v0 + v2, *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1003CD6C4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1003CD6E8(uint64_t *a1)
{
  uint64_t v1;

  return sub_1003CA600(a1, v1);
}

void sub_1003CD6F0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD v5[2];

  v2 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10015662C(v3);
  v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  sub_1003CF61C(v5);
  *a1 = v3;
}

uint64_t sub_1003CD770()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR___ICAppStoreRatingController_didRequestRating);
}

uint64_t sub_1003CD780(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  if (qword_1005CEDE0 != -1)
    swift_once(&qword_1005CEDE0, sub_1003CDEBC);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10012A0B0(v5, (uint64_t)qword_1005DC7C0);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = _typeName(_:qualified:)(ObjectType, 0);
    v13 = v12;
    v15 = sub_1003A4190(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v9 + 12) = 2048;
    v15 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: updateTotalNoteCount: %ld", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  *(_QWORD *)(v2 + OBJC_IVAR___ICAppStoreRatingController_totalNoteCount) = a1;
  return sub_1003CEB70();
}

void sub_1003CD93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23[3];

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v3);
  v5 = (char *)&v23[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1005CEDE0 != -1)
    swift_once(&qword_1005CEDE0, sub_1003CDEBC);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10012A0B0(v6, (uint64_t)qword_1005DC7C0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v23[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = _typeName(_:qualified:)(ObjectType, 0);
    v14 = v13;
    v22 = sub_1003A4190(v12, v13, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23, v10 + 4);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: didEdit", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  static Date.now.getter(v15);
  v16 = type metadata accessor for Date(0);
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v5, 0, 1, v16);
  v18 = v1 + OBJC_IVAR___ICAppStoreRatingController_lastEditDate;
  swift_beginAccess(v1 + OBJC_IVAR___ICAppStoreRatingController_lastEditDate, v23, 33, 0);
  sub_1001CE964((uint64_t)v5, v18);
  swift_endAccess(v23);
  v19 = sub_1003CEB70();
  static Date.now.getter(v19);
  v17(v5, 0, 1, v16);
  v20 = v1 + OBJC_IVAR___ICAppStoreRatingController_lastInteractionDate;
  swift_beginAccess(v1 + OBJC_IVAR___ICAppStoreRatingController_lastInteractionDate, v23, 33, 0);
  sub_1001CE964((uint64_t)v5, v20);
  swift_endAccess(v23);
  v21 = sub_1003CE790();
  objc_msgSend(v21, "requestFire");

}

uint64_t sub_1003CDBD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  Class isa;
  NSString v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1005CEDE0 != -1)
    swift_once(&qword_1005CEDE0, sub_1003CDEBC);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10012A0B0(v7, (uint64_t)qword_1005DC7C0);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v28 = v3;
    v13 = v12;
    v30 = v12;
    *(_DWORD *)v11 = 136315138;
    v14 = _typeName(_:qualified:)(ObjectType, 0);
    v16 = v15;
    v29 = sub_1003A4190(v14, v15, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v11 + 4);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s: didLaunch", v11, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v17 = v13;
    v3 = v28;
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  v18 = (unint64_t)sub_1003CE170();
  static Date.now.getter(v18);
  if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
    v18 = sub_10016B9B4(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
  v20 = *(_QWORD *)(v18 + 16);
  v19 = *(_QWORD *)(v18 + 24);
  if (v20 >= v19 >> 1)
    v18 = sub_10016B9B4(v19 > 1, v20 + 1, 1, v18);
  *(_QWORD *)(v18 + 16) = v20 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v18+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v20, v6, v3);
  sub_1003CE850(v18);
  v22 = v21;
  swift_bridgeObjectRelease(v18);
  v23 = *(void **)(v1 + OBJC_IVAR___ICAppStoreRatingController_userDefaults);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setObject:forKey:", isa, v25);

  return sub_1003CEB70();
}

uint64_t sub_1003CDEBC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005DC7C0);
  sub_10012A0B0(v0, (uint64_t)qword_1005DC7C0);
  return static Logger.application.getter();
}

uint64_t sub_1003CDFF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  NSString v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)(v1 + OBJC_IVAR___ICAppStoreRatingController_userDefaults);
  sub_1001CE8D4(a1, (uint64_t)v5);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v5, v7);
  }
  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setObject:forKey:", isa, v10);
  swift_unknownObjectRelease(isa, v11);

  return sub_100012DDC(a1, (uint64_t *)&unk_1005D7B20);
}

_QWORD *sub_1003CE170()
{
  uint64_t v0;
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _OWORD v9[2];
  _QWORD v10[4];

  v1 = *(void **)(v0 + OBJC_IVAR___ICAppStoreRatingController_userDefaults);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v9, v3);
    swift_unknownObjectRelease(v3, v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_1001CBB70((uint64_t)v9, (uint64_t)v10);
  if (v10[3])
  {
    v5 = sub_100012E18(&qword_1005DC850);
    if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v5, 6) & 1) != 0)
    {
      v6 = v8;
      v10[0] = v8;
      swift_bridgeObjectRetain(v8);
      sub_1003CD6F0(v10);
      swift_bridgeObjectRelease(v6);
      return (_QWORD *)v10[0];
    }
  }
  else
  {
    sub_100012DDC((uint64_t)v10, &qword_1005CF190);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1003CE368@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  void *v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  v3 = *(void **)(v1 + OBJC_IVAR___ICAppStoreRatingController_userDefaults);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "objectForKey:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v11, v5);
    swift_unknownObjectRelease(v5, v6);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_1001CBB70((uint64_t)v11, (uint64_t)v12);
  if (v13)
  {
    v7 = type metadata accessor for Date(0);
    v8 = swift_dynamicCast(a1, v12, (char *)&type metadata for Any + 8, v7, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, v8 ^ 1u, 1, v7);
  }
  else
  {
    sub_100012DDC((uint64_t)v12, &qword_1005CF190);
    v10 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
}

Class sub_1003CE5AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  _BYTE v14[24];

  v5 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v5);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = a1 + *a3;
  swift_beginAccess(v8, v14, 0, 0);
  sub_1001CE8D4(v8, (uint64_t)v7);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
  }
  return isa;
}

void sub_1003CE694(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _BYTE v15[24];

  v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (a3)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(a3);
    v10 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    v11 = type metadata accessor for Date(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 1, 1, v11);
  }
  v12 = (uint64_t)a1 + *a4;
  swift_beginAccess(v12, v15, 33, 0);
  v13 = a1;
  sub_1001CE964((uint64_t)v9, v12);
  swift_endAccess(v15);

}

id sub_1003CE790()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR___ICAppStoreRatingController____lazy_storage___interactionSelectorDelayer;
  v2 = *(void **)(v0 + OBJC_IVAR___ICAppStoreRatingController____lazy_storage___interactionSelectorDelayer);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR___ICAppStoreRatingController____lazy_storage___interactionSelectorDelayer);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)ICSelectorDelayer), "initWithTarget:selector:delay:waitToFireUntilRequestsStop:callOnMainThread:", v0, "didStopInteracting", 1, 1, *(double *)(v0 + OBJC_IVAR___ICAppStoreRatingController_noteEditRequirement));
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_1003CE850(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v2 = v1;
  ObjectType = swift_getObjectType(v1);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = OBJC_IVAR___ICAppStoreRatingController_maximumPersistedLaunchDaysCount;
  v11 = *(_QWORD *)&v1[OBJC_IVAR___ICAppStoreRatingController_maximumPersistedLaunchDaysCount];
  if (v11 >= v9)
  {
    swift_bridgeObjectRetain(a1);
    return;
  }
  if (v11 >= 1)
  {
    if (qword_1005CEDE0 != -1)
      swift_once(&qword_1005CEDE0, sub_1003CDEBC);
    v12 = type metadata accessor for Logger(0);
    sub_10012A0B0(v12, (uint64_t)qword_1005DC7C0);
    v13 = v1;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter();
    LODWORD(v42) = v15;
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v41 = v5;
      v17 = v16;
      v40 = swift_slowAlloc(32, -1);
      v44 = v40;
      *(_DWORD *)v17 = 136315394;
      v39 = v17 + 4;
      v18 = _typeName(_:qualified:)(ObjectType, 0);
      v20 = v19;
      v43 = sub_1003A4190(v18, v19, &v44);
      v38 = &v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v39);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v17 + 12) = 2048;
      v39 = v17 + 14;
      v21 = v14;
      v22 = *(_QWORD *)&v2[v10];

      v43 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v38, v39);

      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v42, "%s: Limiting persisted launch days to maximum: %ld", (uint8_t *)v17, 0x16u);
      v23 = v40;
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      v24 = v17;
      v5 = v41;
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

    }
    if (v9)
    {
      v25 = *(unsigned __int8 *)(v6 + 80);
      v26 = (v25 + 32) & ~v25;
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      v27(v8, a1 + v26, v5);
      v28 = *(_QWORD *)&v2[v10];
      if (!__OFSUB__(v28, 1))
      {
        v42 = sub_1003790F0(v28 - 1, a1);
        v30 = v29;
        v32 = v31;
        v34 = v33;
        v35 = sub_100012E18(&qword_1005D0D78);
        v36 = swift_allocObject(v35, *(_QWORD *)(v6 + 72) + v26, v25 | 7);
        *(_OWORD *)(v36 + 16) = xmmword_100451C20;
        v27((char *)(v36 + v26), (uint64_t)v8, v5);
        v44 = v36;
        swift_bridgeObjectRetain(a1);
        sub_1001D9EC4(v42, v30, v32, v34);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1003CEB70()
{
  _BYTE *v0;
  _BYTE *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void **p_cache;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_1003CF1B8();
  if ((result & 1) != 0)
  {
    v7 = OBJC_IVAR___ICAppStoreRatingController_didRequestRating;
    if ((v0[OBJC_IVAR___ICAppStoreRatingController_didRequestRating] & 1) == 0)
    {
      if (qword_1005CEDE0 != -1)
        swift_once(&qword_1005CEDE0, sub_1003CDEBC);
      v8 = type metadata accessor for Logger(0);
      sub_10012A0B0(v8, (uint64_t)qword_1005DC7C0);
      v9 = v0;
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.info.getter();
      p_cache = &OBJC_METACLASS___ICContentInsetViewController.cache;
      if (os_log_type_enabled(v10, v11))
      {
        v13 = swift_slowAlloc(22, -1);
        v29 = v7;
        v14 = v13;
        v27 = (_QWORD *)swift_slowAlloc(8, -1);
        v28 = swift_slowAlloc(32, -1);
        v31 = v28;
        *(_DWORD *)v14 = 136315394;
        v15 = _typeName(_:qualified:)(ObjectType, 0);
        v17 = v16;
        v30 = sub_1003A4190(v15, v16, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 4);
        swift_bridgeObjectRelease(v17);
        *(_WORD *)(v14 + 12) = 2112;
        v18 = *(void **)&v9[OBJC_IVAR___ICAppStoreRatingController_windowScene];
        v30 = (uint64_t)v18;
        v19 = v18;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 14);
        v20 = v27;
        *v27 = v18;
        p_cache = (void **)(&OBJC_METACLASS___ICContentInsetViewController + 16);

        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: Requesting App Store review in windowScene: %@", (uint8_t *)v14, 0x16u);
        v21 = sub_100012E18(&qword_1005D3A30);
        swift_arrayDestroy(v20, 1, v21);
        swift_slowDealloc(v20, -1, -1);
        v22 = v28;
        swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        v23 = v14;
        v7 = v29;
        swift_slowDealloc(v23, -1, -1);

      }
      else
      {

      }
      objc_msgSend((id)objc_opt_self(SKStoreReviewController), "requestReviewInScene:", *(_QWORD *)((char *)p_cache[253] + (_QWORD)v9));
      v24 = objc_msgSend(*(id *)&v9[OBJC_IVAR___ICAppStoreRatingController_eventReporter], "submitAppReviewPromptRequestEvent");
      v1[v7] = 1;
      static Date.now.getter(v24);
      v25 = type metadata accessor for Date(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v5, 0, 1, v25);
      return sub_1003CDFF8((uint64_t)v5);
    }
  }
  return result;
}

uint64_t sub_1003CEFFC()
{
  uint64_t ObjectType;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  ObjectType = swift_getObjectType();
  if (qword_1005CEDE0 != -1)
    swift_once(&qword_1005CEDE0, sub_1003CDEBC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10012A0B0(v1, (uint64_t)qword_1005DC7C0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v12 = v6;
    *(_DWORD *)v5 = 136315138;
    v7 = _typeName(_:qualified:)(ObjectType, 0);
    v9 = v8;
    v11 = sub_1003A4190(v7, v8, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: didStopInteracting", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  return sub_1003CEB70();
}

BOOL sub_1003CF1B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _BYTE v23[24];
  _BYTE v24[24];

  v1 = v0;
  v2 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v2);
  v4 = &v23[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = _s19NoteEditRequirementV5DatesVMa(0);
  __chkstk_darwin(v5);
  v7 = &v23[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(v0 + OBJC_IVAR___ICAppStoreRatingController_cohortRequirement);
  if (v8 != 100)
  {
    v9 = *(_QWORD *)(v0 + OBJC_IVAR___ICAppStoreRatingController_cohort);
    swift_retain(*(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingController_cohort));
    v10 = sub_100345CC0();
    swift_release(v9);
    if (v8 < v10)
      return 0;
  }
  v11 = *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingController_launchRequirement);
  v12 = *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingController_launchRequirement + 8);
  v13 = *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingController_launchRequirement + 16);
  v14 = sub_1003CE170();
  LOBYTE(v11) = sub_100378DA8((uint64_t)v14, v11, v12, v13);
  swift_bridgeObjectRelease(v14);
  if ((v11 & 1) == 0)
    return 0;
  v15 = *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingController_noteCountRequirement);
  if (v15 && *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingController_totalNoteCount) < v15)
    return 0;
  v17 = *(double *)(v1 + OBJC_IVAR___ICAppStoreRatingController_noteEditRequirement);
  v18 = v1 + OBJC_IVAR___ICAppStoreRatingController_lastEditDate;
  swift_beginAccess(v1 + OBJC_IVAR___ICAppStoreRatingController_lastEditDate, v24, 0, 0);
  sub_1001CE8D4(v18, (uint64_t)v7);
  v19 = v1 + OBJC_IVAR___ICAppStoreRatingController_lastInteractionDate;
  swift_beginAccess(v1 + OBJC_IVAR___ICAppStoreRatingController_lastInteractionDate, v23, 0, 0);
  sub_1001CE8D4(v19, (uint64_t)&v7[*(int *)(v5 + 20)]);
  LOBYTE(v19) = sub_100379224((uint64_t)v7, v17);
  sub_1003CF5E0((uint64_t)v7);
  if ((v19 & 1) != 0)
  {
    v20 = *(_QWORD *)(v1 + OBJC_IVAR___ICAppStoreRatingController_requestRequirement);
    sub_1003CE368((uint64_t)v4);
    v21 = sub_100379458((uint64_t)v4, v20);
    sub_100012DDC((uint64_t)v4, (uint64_t *)&unk_1005D7B20);
  }
  else
  {
    return 0;
  }
  return v21;
}

void AppStoreRatingController.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("MobileNotes.AppStoreRatingController", 36, "init()", 6, 0);
  __break(1u);
}

uint64_t sub_1003CF4D8()
{
  return type metadata accessor for AppStoreRatingController(0);
}

uint64_t type metadata accessor for AppStoreRatingController(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DC840;
  if (!qword_1005DC840)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppStoreRatingController);
  return result;
}

void sub_1003CF51C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = &unk_100467650;
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100019C18(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = (char *)&value witness table for Builtin.Int64 + 64;
    v8 = &unk_100467668;
    v9 = (char *)&value witness table for Builtin.Int64 + 64;
    v10 = (char *)&value witness table for Builtin.Int64 + 64;
    v11 = (char *)&value witness table for Builtin.Int64 + 64;
    v12 = (char *)&value witness table for Builtin.Int64 + 64;
    v13 = &unk_100467680;
    swift_updateClassMetadata2(a1, 256, 16, v4, a1 + 80);
  }
}

uint64_t sub_1003CF5E0(uint64_t a1)
{
  uint64_t v2;

  v2 = _s19NoteEditRequirementV5DatesVMa(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1003CF61C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  Swift::Int v34;
  Swift::Int v35;
  Swift::Int v36;
  char *v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  Swift::Int v44;
  int64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  Swift::Int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  Swift::Int v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  void (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  unint64_t v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(char *, char *, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  int64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  unint64_t v132;
  char *v133;
  _QWORD *v134;
  _QWORD *v135;
  Swift::Int v136;
  char *v137;
  Swift::Int v138;
  char *v139;
  int64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(char *, uint64_t, uint64_t);
  char *v146;
  char *v147;
  _QWORD *v148;
  int64_t v149;
  char *v150;
  Swift::Int v151;
  int64_t v152;
  uint64_t v153;

  v3 = type metadata accessor for Date(0);
  v153 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v139 = (char *)&v135 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v150 = (char *)&v135 - v7;
  v8 = __chkstk_darwin(v6);
  v147 = (char *)&v135 - v9;
  __chkstk_darwin(v8);
  v146 = (char *)&v135 - v10;
  v11 = a1[1];
  v12 = _minimumMergeRunLength(_:)(v11);
  if (v12 >= v11)
  {
    if (v11 < 0)
      goto LABEL_143;
    if (v11)
      sub_1003D0034(0, v11, 1, a1);
    return;
  }
  if (v11 >= 0)
    v13 = v11;
  else
    v13 = v11 + 1;
  if (v11 < -1)
    goto LABEL_151;
  v136 = v12;
  v142 = v1;
  if (v11 < 2)
  {
    v17 = _swiftEmptyArrayStorage;
    v141 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v153 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v153 + 80));
    if (v11 != 1)
    {
      v20 = _swiftEmptyArrayStorage[2];
      v19 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      v135 = v17;
      if (v20 >= 2)
      {
        v125 = *a1;
        do
        {
          v126 = v20 - 2;
          if (v20 < 2)
            goto LABEL_138;
          if (!v125)
            goto LABEL_150;
          v118 = v19;
          v127 = v19 + 32;
          v128 = *(_QWORD *)&v19[16 * v126 + 32];
          v129 = *(_QWORD *)&v19[16 * v20 + 24];
          v130 = v142;
          sub_1003D0294(v125 + *(_QWORD *)(v153 + 72) * v128, v125 + *(_QWORD *)(v153 + 72) * *(_QWORD *)&v127[16 * v20 - 16], v125 + *(_QWORD *)(v153 + 72) * v129, v141);
          v142 = v130;
          if (v130)
            goto LABEL_117;
          if (v129 < v128)
            goto LABEL_139;
          if ((swift_isUniquelyReferenced_nonNull_native(v118) & 1) == 0)
            v118 = sub_1001562F4((uint64_t)v118);
          if (v126 >= *((_QWORD *)v118 + 2))
            goto LABEL_140;
          v131 = &v118[16 * v126 + 32];
          *(_QWORD *)v131 = v128;
          *((_QWORD *)v131 + 1) = v129;
          v132 = *((_QWORD *)v118 + 2);
          if (v20 > v132)
            goto LABEL_141;
          v19 = v118;
          memmove(&v118[16 * v20 + 16], &v118[16 * v20 + 32], 16 * (v132 - v20));
          *((_QWORD *)v118 + 2) = v132 - 1;
          v20 = v132 - 1;
        }
        while (v132 > 2);
      }
      v133 = v19;
LABEL_119:
      swift_bridgeObjectRelease(v133);
      v134 = v135;
      v135[2] = 0;
      swift_bridgeObjectRelease(v134);
      return;
    }
    v135 = _swiftEmptyArrayStorage;
  }
  else
  {
    v14 = v13 >> 1;
    v15 = static Array._allocateBufferUninitialized(minimumCapacity:)(v13 >> 1, v3);
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(v153 + 80);
    v135 = (_QWORD *)v15;
    v141 = v15 + ((v16 + 32) & ~v16);
  }
  v18 = 0;
  v19 = (char *)_swiftEmptyArrayStorage;
  v148 = a1;
  while (1)
  {
    v21 = v18;
    v22 = v18 + 1;
    v140 = v18;
    if (v18 + 1 >= v11)
    {
      v34 = v18 + 1;
      v41 = v142;
    }
    else
    {
      v144 = *a1;
      v23 = v144;
      v151 = v11;
      v24 = v18;
      v25 = v153;
      v26 = *(_QWORD *)(v153 + 72);
      v27 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 16);
      v28 = v146;
      v27(v146, v144 + v26 * v22, v3);
      v29 = v23 + v26 * v24;
      v30 = v147;
      v27(v147, v29, v3);
      v149 = sub_1003D07B4();
      LODWORD(v145) = dispatch thunk of static Comparable.< infix(_:_:)(v28, v30, v3, v149);
      v31 = *(void (**)(char *, uint64_t))(v25 + 8);
      v32 = v30;
      v33 = v144;
      v31(v32, v3);
      v31(v28, v3);
      v34 = v24 + 2;
      v11 = v151;
      v152 = v26;
      if (v34 >= v151)
      {
        v41 = v142;
        v40 = v26;
      }
      else
      {
        v137 = v19;
        v143 = v26 * v22;
        v35 = v26 * v34;
        while (1)
        {
          v36 = v34;
          v37 = v146;
          v27(v146, v33 + v35, v3);
          v38 = v147;
          v27(v147, v33 + v143, v3);
          v39 = dispatch thunk of static Comparable.< infix(_:_:)(v37, v38, v3, v149);
          v31(v38, v3);
          v31(v37, v3);
          if (((v145 ^ v39) & 1) != 0)
            break;
          v34 = v36 + 1;
          v11 = v151;
          v40 = v152;
          v33 += v152;
          if (v151 == v34)
          {
            v34 = v151;
            v41 = v142;
            v19 = v137;
            goto LABEL_25;
          }
        }
        v41 = v142;
        v19 = v137;
        v34 = v36;
        v11 = v151;
        v40 = v152;
      }
LABEL_25:
      a1 = v148;
      v21 = v140;
      if ((v145 & 1) != 0)
      {
        if (v34 < v140)
          goto LABEL_144;
        if (v140 < v34)
        {
          v137 = v19;
          v42 = 0;
          v43 = v40 * (v34 - 1);
          v44 = v34 * v40;
          v45 = v140;
          v46 = v140 * v40;
          v149 = v34;
          do
          {
            if (v45 != v34 + v42 - 1)
            {
              if (!v144)
                goto LABEL_149;
              v47 = v41;
              v48 = v144 + v46;
              v49 = (char *)(v144 + v43);
              v145 = *(void (**)(char *, uint64_t, uint64_t))(v153 + 32);
              v145(v139, v144 + v46, v3);
              if (v46 < v43 || v48 >= v144 + v44)
              {
                swift_arrayInitWithTakeFrontToBack(v48, v49);
              }
              else if (v46 != v43)
              {
                swift_arrayInitWithTakeBackToFront(v48, v49);
              }
              v145(v49, (uint64_t)v139, v3);
              v41 = v47;
              a1 = v148;
              v34 = v149;
              v40 = v152;
            }
            ++v45;
            --v42;
            v43 -= v40;
            v44 -= v40;
            v46 += v40;
          }
          while (v45 < v34 + v42);
          v19 = v137;
          v21 = v140;
          v11 = v151;
        }
      }
    }
    if (v34 >= v11)
      goto LABEL_57;
    if (__OFSUB__(v34, v21))
      goto LABEL_142;
    if (v34 - v21 >= v136)
      goto LABEL_57;
    if (__OFADD__(v21, v136))
      goto LABEL_145;
    v50 = v21 + v136 >= v11 ? v11 : v21 + v136;
    if (v50 < v21)
      break;
    if (v34 != v50)
    {
      v137 = v19;
      v138 = v50;
      v51 = *(_QWORD *)(v153 + 72);
      v52 = *(char **)(v153 + 16);
      v142 = v41;
      v143 = (uint64_t)v52;
      v53 = v51 * (v34 - 1);
      v144 = v51;
      v54 = v34 * v51;
      do
      {
        v56 = 0;
        v149 = v34;
        v145 = (void (*)(char *, uint64_t, uint64_t))v54;
        while (1)
        {
          v57 = *a1;
          v151 = v54 + v56;
          v152 = v21;
          v58 = (char *)(v54 + v56 + v57);
          v59 = v146;
          v60 = (void (*)(char *, uint64_t, uint64_t))v143;
          ((void (*)(char *, char *, uint64_t))v143)(v146, v58, v3);
          v61 = v53;
          v62 = v53 + v56 + v57;
          v63 = a1;
          v64 = v147;
          v60(v147, v62, v3);
          v65 = sub_1003D07B4();
          LOBYTE(v57) = dispatch thunk of static Comparable.< infix(_:_:)(v59, v64, v3, v65);
          v66 = *(void (**)(char *, uint64_t))(v153 + 8);
          v66(v64, v3);
          v66(v59, v3);
          if ((v57 & 1) == 0)
            break;
          v67 = *v63;
          if (!*v63)
            goto LABEL_147;
          v54 = (Swift::Int)v145;
          v68 = (char *)v145 + v67 + v56;
          v53 = v61;
          v69 = (char *)(v67 + v61 + v56);
          v70 = *(void (**)(char *, char *, uint64_t))(v153 + 32);
          v70(v150, v68, v3);
          swift_arrayInitWithTakeFrontToBack(v68, v69);
          v70(v69, v150, v3);
          v56 -= v144;
          v21 = v152 + 1;
          a1 = v148;
          v55 = v149;
          if (v149 == v152 + 1)
            goto LABEL_50;
        }
        v55 = v149;
        a1 = v63;
        v53 = v61;
        v54 = (Swift::Int)v145;
LABEL_50:
        v34 = v55 + 1;
        v53 += v144;
        v54 += v144;
        v21 = v140;
      }
      while (v34 != v138);
      v34 = v138;
      v41 = v142;
      v19 = v137;
    }
LABEL_57:
    if (v34 < v21)
      goto LABEL_137;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
    v142 = v41;
    v149 = v34;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v19 = sub_100155E58(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
    v73 = *((_QWORD *)v19 + 2);
    v72 = *((_QWORD *)v19 + 3);
    v20 = v73 + 1;
    if (v73 >= v72 >> 1)
      v19 = sub_100155E58((char *)(v72 > 1), v73 + 1, 1, v19);
    *((_QWORD *)v19 + 2) = v20;
    v74 = v19 + 32;
    v75 = &v19[16 * v73 + 32];
    v76 = v149;
    *(_QWORD *)v75 = v21;
    *((_QWORD *)v75 + 1) = v76;
    if (v73)
    {
      while (1)
      {
        v77 = v20 - 1;
        if (v20 >= 4)
        {
          v82 = &v74[16 * v20];
          v83 = *((_QWORD *)v82 - 8);
          v84 = *((_QWORD *)v82 - 7);
          v88 = __OFSUB__(v84, v83);
          v85 = v84 - v83;
          if (v88)
            goto LABEL_126;
          v87 = *((_QWORD *)v82 - 6);
          v86 = *((_QWORD *)v82 - 5);
          v88 = __OFSUB__(v86, v87);
          v80 = v86 - v87;
          v81 = v88;
          if (v88)
            goto LABEL_127;
          v89 = v20 - 2;
          v90 = &v74[16 * v20 - 32];
          v92 = *(_QWORD *)v90;
          v91 = *((_QWORD *)v90 + 1);
          v88 = __OFSUB__(v91, v92);
          v93 = v91 - v92;
          if (v88)
            goto LABEL_129;
          v88 = __OFADD__(v80, v93);
          v94 = v80 + v93;
          if (v88)
            goto LABEL_132;
          if (v94 >= v85)
          {
            v112 = &v74[16 * v77];
            v114 = *(_QWORD *)v112;
            v113 = *((_QWORD *)v112 + 1);
            v88 = __OFSUB__(v113, v114);
            v115 = v113 - v114;
            if (v88)
              goto LABEL_136;
            v105 = v80 < v115;
            goto LABEL_94;
          }
        }
        else
        {
          if (v20 != 3)
          {
            v106 = *((_QWORD *)v19 + 4);
            v107 = *((_QWORD *)v19 + 5);
            v88 = __OFSUB__(v107, v106);
            v99 = v107 - v106;
            v100 = v88;
            goto LABEL_88;
          }
          v79 = *((_QWORD *)v19 + 4);
          v78 = *((_QWORD *)v19 + 5);
          v88 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          v81 = v88;
        }
        if ((v81 & 1) != 0)
          goto LABEL_128;
        v89 = v20 - 2;
        v95 = &v74[16 * v20 - 32];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v98 = __OFSUB__(v96, v97);
        v99 = v96 - v97;
        v100 = v98;
        if (v98)
          goto LABEL_131;
        v101 = &v74[16 * v77];
        v103 = *(_QWORD *)v101;
        v102 = *((_QWORD *)v101 + 1);
        v88 = __OFSUB__(v102, v103);
        v104 = v102 - v103;
        if (v88)
          goto LABEL_134;
        if (__OFADD__(v99, v104))
          goto LABEL_135;
        if (v99 + v104 >= v80)
        {
          v105 = v80 < v104;
LABEL_94:
          if (v105)
            v77 = v89;
          goto LABEL_96;
        }
LABEL_88:
        if ((v100 & 1) != 0)
          goto LABEL_130;
        v108 = &v74[16 * v77];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v88 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v88)
          goto LABEL_133;
        if (v111 < v99)
          goto LABEL_15;
LABEL_96:
        v116 = v77 - 1;
        if (v77 - 1 >= v20)
        {
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
          goto LABEL_146;
        }
        v117 = *a1;
        if (!*a1)
          goto LABEL_148;
        v118 = v19;
        v119 = &v74[16 * v116];
        v120 = *(_QWORD *)v119;
        v121 = &v74[16 * v77];
        v122 = *((_QWORD *)v121 + 1);
        v123 = v142;
        sub_1003D0294(v117 + *(_QWORD *)(v153 + 72) * *(_QWORD *)v119, v117 + *(_QWORD *)(v153 + 72) * *(_QWORD *)v121, v117 + *(_QWORD *)(v153 + 72) * v122, v141);
        v142 = v123;
        if (v123)
        {
LABEL_117:
          v133 = v118;
          goto LABEL_119;
        }
        if (v122 < v120)
          goto LABEL_123;
        if (v77 > *((_QWORD *)v118 + 2))
          goto LABEL_124;
        *(_QWORD *)v119 = v120;
        *(_QWORD *)&v74[16 * v116 + 8] = v122;
        v124 = *((_QWORD *)v118 + 2);
        if (v77 >= v124)
          goto LABEL_125;
        v19 = v118;
        v20 = v124 - 1;
        memmove(&v74[16 * v77], v121 + 16, 16 * (v124 - 1 - v77));
        *((_QWORD *)v118 + 2) = v124 - 1;
        a1 = v148;
        if (v124 <= 2)
          goto LABEL_15;
      }
    }
    v20 = 1;
LABEL_15:
    v11 = a1[1];
    v18 = v149;
    if (v149 >= v11)
    {
      v17 = v135;
      goto LABEL_105;
    }
  }
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_1003D0034(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, uint64_t, uint64_t);
  char *v20;
  unint64_t v21;
  void (*v22)(char *, uint64_t);
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v30 = a1;
  v7 = type metadata accessor for Date(0);
  v38 = *(_QWORD **)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v37 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v34 = (char *)&v28 - v11;
  result = __chkstk_darwin(v10);
  v33 = (char *)&v28 - v13;
  v36 = a3;
  v29 = a2;
  if (a3 != a2)
  {
    v14 = v38[9];
    v31 = (void (*)(char *, uint64_t, uint64_t))v38[2];
    v32 = a4;
    v40 = v14 * (v36 - 1);
    v35 = v14;
    v39 = v14 * v36;
LABEL_5:
    v15 = 0;
    v16 = v30;
    while (1)
    {
      v17 = *a4;
      v18 = v33;
      v19 = v31;
      v31(v33, v39 + v15 + *a4, v7);
      v20 = v34;
      v19(v34, v40 + v15 + v17, v7);
      v21 = sub_1003D07B4();
      LOBYTE(v17) = dispatch thunk of static Comparable.< infix(_:_:)(v18, v20, v7, v21);
      v22 = (void (*)(char *, uint64_t))v38[1];
      v23 = v20;
      a4 = v32;
      v22(v23, v7);
      result = ((uint64_t (*)(char *, uint64_t))v22)(v18, v7);
      if ((v17 & 1) == 0)
      {
LABEL_4:
        v40 += v35;
        v39 += v35;
        if (++v36 == v29)
          return result;
        goto LABEL_5;
      }
      v24 = *a4;
      if (!*a4)
        break;
      v25 = v24 + v39 + v15;
      v26 = v24 + v40 + v15;
      v27 = (void (*)(char *, uint64_t, uint64_t))v38[4];
      v27(v37, v25, v7);
      swift_arrayInitWithTakeFrontToBack(v25, v26);
      result = ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v26, v37, v7);
      v15 -= v35;
      if (v36 == ++v16)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003D0294(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v19)(char *, unint64_t, uint64_t);
  unint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char *v33;
  void (*v34)(char *, unint64_t, uint64_t);
  unint64_t v35;
  char *v36;
  unint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, unint64_t, uint64_t);
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD **)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v52 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v51 = (char *)&v45 - v12;
  v53 = v9[9];
  if (!v53)
  {
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  if (a2 - a1 == 0x8000000000000000 && v53 == -1)
    goto LABEL_63;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v53 == -1)
    goto LABEL_64;
  v14 = (uint64_t)(a2 - a1) / v53;
  v56 = a1;
  v55 = a4;
  v15 = v13 / v53;
  if (v14 >= v13 / v53)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v53;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v29 = a4 + v17;
      v54 = a4 + v17;
      v56 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v31 = -v53;
        v32 = (void (*)(char *, unint64_t, uint64_t))v9[2];
        v46 = -v53;
        v47 = v32;
        v49 = a4;
        v50 = a1;
        v48 = v9;
        do
        {
          v53 = a3 + v31;
          v33 = v51;
          v34 = v47;
          v47(v51, v29 + v31, v8);
          v35 = a2 + v31;
          v36 = v52;
          v34(v52, a2 + v31, v8);
          v37 = sub_1003D07B4();
          LOBYTE(v34) = dispatch thunk of static Comparable.< infix(_:_:)(v33, v36, v8, v37);
          v38 = (void (*)(char *, uint64_t))v9[1];
          v38(v36, v8);
          v38(v33, v8);
          if ((v34 & 1) != 0)
          {
            v39 = v53;
            if (a3 < a2 || v53 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v53, a2 + v31);
              v9 = v48;
              v40 = v49;
              v41 = v50;
            }
            else
            {
              v9 = v48;
              v40 = v49;
              v41 = v50;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v53, a2 + v31);
            }
            v31 = v46;
            v56 += v46;
          }
          else
          {
            v39 = v53;
            v42 = v54;
            v43 = v54 + v31;
            v54 += v31;
            if (a3 < v42 || v53 >= v42)
            {
              swift_arrayInitWithTakeFrontToBack(v53, v43);
              v35 = a2;
              v9 = v48;
              v40 = v49;
              v41 = v50;
            }
            else
            {
              v9 = v48;
              v40 = v49;
              v41 = v50;
              if (a3 != v42)
                swift_arrayInitWithTakeBackToFront(v53, v43);
              v35 = a2;
            }
            v31 = v46;
          }
          v29 = v54;
          if (v54 <= v40)
            break;
          a2 = v35;
          a3 = v39;
        }
        while (v35 > v41);
      }
      goto LABEL_61;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v53;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v50 = a4 + v16;
    v54 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v19 = (void (*)(char *, unint64_t, uint64_t))v9[2];
      do
      {
        v20 = a3;
        v21 = v51;
        v19(v51, a2, v8);
        v22 = v52;
        v19(v52, a4, v8);
        v23 = sub_1003D07B4();
        v24 = dispatch thunk of static Comparable.< infix(_:_:)(v21, v22, v8, v23);
        v25 = (void (*)(char *, uint64_t))v9[1];
        v25(v22, v8);
        v25(v21, v8);
        v26 = v56;
        if ((v24 & 1) != 0)
        {
          v27 = a2 + v53;
          if (v56 < a2 || v56 >= v27)
          {
            swift_arrayInitWithTakeFrontToBack(v56, a2);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v56 == a2)
              v26 = a2;
            else
              swift_arrayInitWithTakeBackToFront(v56, a2);
          }
        }
        else
        {
          v28 = v55 + v53;
          if (v56 < v55 || v56 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v56, v55);
            a3 = v20;
          }
          else
          {
            a3 = v20;
            if (v56 != v55)
              swift_arrayInitWithTakeBackToFront(v56, v55);
          }
          v55 = v28;
          v27 = a2;
        }
        v56 = v26 + v53;
        a4 = v55;
        if (v55 >= v50)
          break;
        a2 = v27;
      }
      while (v27 < a3);
    }
LABEL_61:
    sub_1001561DC(&v56, &v55, (uint64_t *)&v54);
    return 1;
  }
LABEL_65:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

unint64_t sub_1003D07B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DC858;
  if (!qword_1005DC858)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1005DC858);
  }
  return result;
}

id sub_1003D07FC(void *a1, uint64_t a2, void *a3, void *a4)
{
  _BYTE *v4;
  objc_class *ObjectType;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, uint64_t, uint64_t, uint64_t);
  char *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  NSString v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  char *v28;
  id v29;
  uint64_t v30;
  id v31;
  objc_super v33;
  objc_class *v34;

  ObjectType = (objc_class *)swift_getObjectType(v4);
  v4[OBJC_IVAR___ICAppStoreRatingController_didRequestRating] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICAppStoreRatingController_totalNoteCount] = 0;
  v10 = &v4[OBJC_IVAR___ICAppStoreRatingController_lastEditDate];
  v11 = type metadata accessor for Date(0);
  v12 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v12(v10, 1, 1, v11);
  v12(&v4[OBJC_IVAR___ICAppStoreRatingController_lastInteractionDate], 1, 1, v11);
  *(_QWORD *)&v4[OBJC_IVAR___ICAppStoreRatingController_maximumPersistedLaunchDaysCount] = 100;
  *(_QWORD *)&v4[OBJC_IVAR___ICAppStoreRatingController____lazy_storage___interactionSelectorDelayer] = 0;
  *(_QWORD *)&v4[OBJC_IVAR___ICAppStoreRatingController_cloudConfiguration] = a1;
  *(_QWORD *)&v4[OBJC_IVAR___ICAppStoreRatingController_cohort] = a2;
  *(_QWORD *)&v4[OBJC_IVAR___ICAppStoreRatingController_userDefaults] = a3;
  *(_QWORD *)&v4[OBJC_IVAR___ICAppStoreRatingController_windowScene] = a4;
  v34 = ObjectType;
  v13 = v4;
  v14 = a1;
  swift_retain(a2);
  v15 = a3;
  v16 = a4;
  v17 = sub_100012E18(&qword_1005DC860);
  String.init<A>(describing:)(&v34, v17);
  v19 = v18;
  v20 = objc_allocWithZone((Class)ICNAEventReporter);
  v21 = v16;
  v22 = String._bridgeToObjectiveC()();
  v23 = objc_msgSend(v20, "initWithSubTrackerName:windowScene:", v22, v21, swift_bridgeObjectRelease(v19).n128_f64[0]);

  *(_QWORD *)&v13[OBJC_IVAR___ICAppStoreRatingController_eventReporter] = v23;
  v24 = objc_msgSend(v14, "appStoreRatingCohortPercentage");
  *(_QWORD *)&v13[OBJC_IVAR___ICAppStoreRatingController_cohortRequirement] = v24;
  v25 = objc_msgSend(v14, "appStoreRatingLaunchCount");
  v26 = objc_msgSend(v14, "appStoreRatingLaunchDayPeriod");
  v27 = objc_msgSend(v14, "appStoreRatingOldestLaunchDayPeriod");
  v28 = &v13[OBJC_IVAR___ICAppStoreRatingController_launchRequirement];
  *(_QWORD *)v28 = v25;
  *((_QWORD *)v28 + 1) = v26;
  *((_QWORD *)v28 + 2) = v27;
  v29 = objc_msgSend(v14, "appStoreRatingNoteCount");
  *(_QWORD *)&v13[OBJC_IVAR___ICAppStoreRatingController_noteCountRequirement] = v29;
  objc_msgSend(v14, "appStoreRatingIdleTimeInterval");
  *(_QWORD *)&v13[OBJC_IVAR___ICAppStoreRatingController_noteEditRequirement] = v30;
  v31 = objc_msgSend(v14, "appStoreRatingRequestDayPeriod");
  *(_QWORD *)&v13[OBJC_IVAR___ICAppStoreRatingController_requestRequirement] = v31;

  v33.receiver = v13;
  v33.super_class = ObjectType;
  return objc_msgSendSuper2(&v33, "init");
}

id sub_1003D0A88(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  Class isa;
  id v13;
  _QWORD v15[5];
  uint64_t v16;

  v5 = sub_100012E18(&qword_1005CF6F0);
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100456F30;
  if (a1)
  {
    v15[4] = a1;
    v16 = a2;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10023ABC8;
    v15[3] = &unk_10056E440;
    a1 = _Block_copy(v15);
    v7 = v16;
    swift_retain(a2);
    swift_release(v7);
  }
  v8 = (void *)objc_opt_self(UIMenu);
  v9 = objc_msgSend(v2, "actionWithCompletion:", a1);
  _Block_release(a1);
  *(_QWORD *)(v6 + 32) = v9;
  v15[0] = v6;
  specialized Array._endMutation()(v10);
  v11 = v15[0];
  sub_100343460();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend(v8, "ic_inlineMenuWithChildren:", isa);

  return v13;
}

uint64_t sub_1003D0E04(void (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v1;
  void *Strong;
  void *v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR___ICRecentlyDeletedMathNotesActivity_viewControllerManager);
  if (Strong)
  {
    v4 = Strong;
    objc_msgSend(Strong, "showRecentlyDeletedMathNotes");

  }
  v5 = String._bridgeToObjectiveC()();
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  if (a1)
    a1(1, v6, v8);
  return swift_bridgeObjectRelease(v8);
}

uint64_t type metadata accessor for RecentlyDeletedMathNotesActivity()
{
  return objc_opt_self(ICRecentlyDeletedMathNotesActivity);
}

uint64_t sub_1003D1060()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t *sub_1003D1088(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    a1[1] = a2[1];
    v7 = a3[6];
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[7];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    v17 = *((_QWORD *)v16 + 1);
    if (v17 == 1)
    {
      v18 = *((_OWORD *)v16 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v18;
      *((_OWORD *)v15 + 2) = *((_OWORD *)v16 + 2);
    }
    else
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      *((_QWORD *)v15 + 1) = v17;
      v19 = *((_QWORD *)v16 + 3);
      *((_QWORD *)v15 + 2) = *((_QWORD *)v16 + 2);
      *((_QWORD *)v15 + 3) = v19;
      v20 = *((_QWORD *)v16 + 5);
      *((_QWORD *)v15 + 4) = *((_QWORD *)v16 + 4);
      *((_QWORD *)v15 + 5) = v20;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v19);
      swift_bridgeObjectRetain(v20);
    }
    v21 = a3[8];
    v22 = a3[9];
    v23 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)v4 + v21) = v23;
    v24 = *(uint64_t *)((char *)a2 + v22);
    *(uint64_t *)((char *)v4 + v22) = v24;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
  }
  return v4;
}

uint64_t sub_1003D1200(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = (_QWORD *)(a1 + a2[7]);
  v8 = v7[1];
  if (v8 != 1)
  {
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRelease(v7[3]);
    swift_bridgeObjectRelease(v7[5]);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t sub_1003D12AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = *(_QWORD *)(v14 + 8);
  if (v15 == 1)
  {
    v16 = *(_OWORD *)(v14 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *(_OWORD *)(v13 + 16) = v16;
    *(_OWORD *)(v13 + 32) = *(_OWORD *)(v14 + 32);
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = v15;
    v17 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v13 + 24) = v17;
    v18 = *(_QWORD *)(v14 + 40);
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
    *(_QWORD *)(v13 + 40) = v18;
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v21;
  v22 = *(_QWORD *)(a2 + v20);
  *(_QWORD *)(a1 + v20) = v22;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_1003D13F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = (__int128 *)(a2 + v15);
  v18 = *(_QWORD *)(a1 + v15 + 8);
  v19 = *(_QWORD *)(a2 + v15 + 8);
  if (v18 == 1)
  {
    if (v19 == 1)
    {
      v20 = *v17;
      v21 = v17[2];
      *(_OWORD *)(v16 + 16) = v17[1];
      *(_OWORD *)(v16 + 32) = v21;
      *(_OWORD *)v16 = v20;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v24 = *((_QWORD *)v17 + 1);
      *(_QWORD *)(v16 + 8) = v24;
      *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
      v25 = *((_QWORD *)v17 + 3);
      *(_QWORD *)(v16 + 24) = v25;
      *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
      v26 = *((_QWORD *)v17 + 5);
      *(_QWORD *)(v16 + 40) = v26;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v26);
    }
  }
  else if (v19 == 1)
  {
    sub_10036F464((_QWORD *)v16);
    v23 = v17[1];
    v22 = v17[2];
    *(_OWORD *)v16 = *v17;
    *(_OWORD *)(v16 + 16) = v23;
    *(_OWORD *)(v16 + 32) = v22;
  }
  else
  {
    *(_QWORD *)v16 = *(_QWORD *)v17;
    v27 = *((_QWORD *)v17 + 1);
    *(_QWORD *)(v16 + 8) = v27;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v18);
    *(_QWORD *)(v16 + 16) = *((_QWORD *)v17 + 2);
    v28 = *((_QWORD *)v17 + 3);
    v29 = *(_QWORD *)(v16 + 24);
    *(_QWORD *)(v16 + 24) = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease(v29);
    *(_QWORD *)(v16 + 32) = *((_QWORD *)v17 + 4);
    v30 = *((_QWORD *)v17 + 5);
    v31 = *(_QWORD *)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
  }
  v32 = a3[8];
  v33 = *(_QWORD *)(a1 + v32);
  v34 = *(_QWORD *)(a2 + v32);
  *(_QWORD *)(a1 + v32) = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease(v33);
  v35 = a3[9];
  v36 = *(_QWORD *)(a1 + v35);
  v37 = *(_QWORD *)(a2 + v35);
  *(_QWORD *)(a1 + v35) = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t sub_1003D1650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = a3[8];
  v14 = (_OWORD *)(a1 + v12);
  v15 = (_OWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v14[2] = v15[2];
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1003D1754(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = *(_QWORD *)(a1 + v15 + 8);
  if (v18 != 1)
  {
    v19 = v17[1];
    if (v19 != 1)
    {
      *v16 = *v17;
      v16[1] = v19;
      swift_bridgeObjectRelease(v18);
      v21 = v17[3];
      v22 = v16[3];
      v16[2] = v17[2];
      v16[3] = v21;
      swift_bridgeObjectRelease(v22);
      v23 = v17[5];
      v24 = v16[5];
      v16[4] = v17[4];
      v16[5] = v23;
      swift_bridgeObjectRelease(v24);
      goto LABEL_12;
    }
    sub_10036F464(v16);
  }
  v20 = *((_OWORD *)v17 + 1);
  *(_OWORD *)v16 = *(_OWORD *)v17;
  *((_OWORD *)v16 + 1) = v20;
  *((_OWORD *)v16 + 2) = *((_OWORD *)v17 + 2);
LABEL_12:
  v25 = a3[8];
  v26 = *(_QWORD *)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(a2 + v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = *(_QWORD *)(a1 + v27);
  *(_QWORD *)(a1 + v27) = *(_QWORD *)(a2 + v27);
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_1003D1908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003D1914);
}

uint64_t sub_1003D1914(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1003D19A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003D19B0);
}

uint64_t sub_1003D19B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 24), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = a2;
  return result;
}

uint64_t type metadata accessor for ICArchiveModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DC8F0;
  if (!qword_1005DC8F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ICArchiveModel);
  return result;
}

void sub_1003D1A6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_1004676F0;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_100019C18(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_100467708;
    v4[4] = &unk_100467720;
    v4[5] = &unk_100467720;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_1003D1B00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v26[3];
  char v27;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005DC950);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1003D2370();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICArchiveModel.CodingKeys, &type metadata for ICArchiveModel.CodingKeys, v11, v9, v10);
  LOBYTE(v26[0]) = *(_BYTE *)v3;
  v27 = 0;
  v12 = sub_1001F62D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v26, &v27, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    LOBYTE(v26[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v26, v5);
    v14 = (int *)type metadata accessor for ICArchiveModel(0);
    v15 = v3 + v14[6];
    LOBYTE(v26[0]) = 2;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100019C6C(&qword_1005D37B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, v26, v5, v16, v17);
    v18 = (_OWORD *)(v3 + v14[7]);
    v19 = v18[1];
    v26[0] = *v18;
    v26[1] = v19;
    v26[2] = v18[2];
    v27 = 3;
    v20 = sub_1003D243C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, &type metadata for ICArchiveCreator, v20);
    *(_QWORD *)&v26[0] = *(_QWORD *)(v3 + v14[8]);
    v27 = 4;
    v21 = sub_100012E18(&qword_1005D47B0);
    v22 = sub_1003D2480(&qword_1005D47B8, &qword_1005D47C0, (uint64_t)&unk_100459880, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v21, v22);
    *(_QWORD *)&v26[0] = *(_QWORD *)(v3 + v14[9]);
    v27 = 5;
    v23 = sub_100012E18(&qword_1005D39A8);
    v24 = sub_1001F673C(&qword_1005D4348, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v26, &v27, v5, v23, v24);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003D1DC0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _QWORD *v50;
  _BYTE *v51;
  __int128 v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  char v56;

  v45 = a2;
  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v3);
  *(_QWORD *)&v48 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100012E18(&qword_1005DC938);
  v47 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for ICArchiveModel(0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v10 = 0;
  *((_QWORD *)v10 + 1) = 1;
  v11 = (uint64_t)&v10[*(int *)(v8 + 24)];
  Date.init()(v8);
  v12 = type metadata accessor for Date(0);
  v13 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v46 = v11;
  v13(v11, 0, 1, v12);
  v14 = (uint64_t *)&v10[v7[7]];
  *(_OWORD *)v14 = xmmword_10045A5A0;
  *((_OWORD *)v14 + 1) = 0u;
  *((_OWORD *)v14 + 2) = 0u;
  v15 = v7[8];
  *(_QWORD *)&v10[v15] = 0;
  v16 = v7[9];
  v50 = a1;
  v51 = v10;
  *(_QWORD *)&v10[v16] = 0;
  v17 = a1[3];
  v18 = a1[4];
  sub_10012D19C(a1, v17);
  v19 = sub_1003D2370();
  v20 = v52;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICArchiveModel.CodingKeys, &type metadata for ICArchiveModel.CodingKeys, v19, v17, v18);
  if (v20)
  {
    v41 = v50;
    v26 = (uint64_t)v51;
  }
  else
  {
    *(_QWORD *)&v52 = v12;
    v43 = v15;
    v44 = v14;
    v22 = v47;
    v21 = v48;
    v42 = v16;
    v56 = 0;
    v23 = sub_1001F6580();
    v24 = v49;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v53, &type metadata for ICArchiveModels, &v56, v49, &type metadata for ICArchiveModels, v23);
    v26 = (uint64_t)v51;
    *v51 = v53[0];
    LOBYTE(v53[0]) = 1;
    *(_QWORD *)(v26 + 8) = KeyedDecodingContainer.decode(_:forKey:)(v53, v24);
    LOBYTE(v53[0]) = 2;
    v27 = sub_100019C6C(&qword_1005D36E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v52, v53, v24, v52, v27);
    sub_1001CE964(v21, v46);
    v56 = 3;
    v28 = sub_1003D23B4();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICArchiveCreator, &v56, v24, &type metadata for ICArchiveCreator, v28);
    v52 = v53[0];
    v48 = v53[1];
    v30 = v54;
    v29 = v55;
    v31 = v44;
    sub_1001F3EFC(*v44, v44[1], v44[2], v44[3], v44[4], v44[5]);
    v32 = v48;
    *(_OWORD *)v31 = v52;
    *((_OWORD *)v31 + 1) = v32;
    v31[4] = v30;
    v31[5] = v29;
    v33 = sub_100012E18(&qword_1005D47B0);
    v56 = 4;
    v34 = sub_1003D2480(&qword_1005D47D0, &qword_1005D36D0, (uint64_t)&unk_10045970C, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &v56, v24, v33, v34);
    v35 = *(_QWORD *)&v53[0];
    v36 = v43;
    swift_bridgeObjectRelease(*(_QWORD *)(v26 + v43));
    *(_QWORD *)(v26 + v36) = v35;
    v37 = sub_100012E18(&qword_1005D39A8);
    v56 = 5;
    v38 = sub_1001F673C(&qword_1005D43B0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v56, v24, v37, v38);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v24);
    v39 = *(_QWORD *)&v53[0];
    v40 = v42;
    swift_bridgeObjectRelease(*(_QWORD *)(v26 + v42));
    *(_QWORD *)(v26 + v40) = v39;
    sub_1003D23F8(v26, v45);
    v41 = v50;
  }
  sub_1000153C0(v41);
  return sub_10036F6E4(v26);
}

uint64_t sub_1003D2218()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003D2254 + 4 * byte_1004676C8[*v0]))(0x6E65644965707974, 0xEE00726569666974);
}

uint64_t sub_1003D2254()
{
  return 0x6E6F697369766572;
}

uint64_t sub_1003D226C()
{
  return 0x4164657461657263;
}

uint64_t sub_1003D2288()
{
  return 0x4264657461657263;
}

uint64_t sub_1003D22A8()
{
  return 1936154996;
}

unint64_t sub_1003D22B8()
{
  return 0xD000000000000011;
}

uint64_t sub_1003D22D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003D26A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003D22F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003D2370();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003D2320(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003D2370();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003D2348@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003D1DC0(a1, a2);
}

uint64_t sub_1003D235C(_QWORD *a1)
{
  return sub_1003D1B00(a1);
}

unint64_t sub_1003D2370()
{
  unint64_t result;

  result = qword_1005DC940;
  if (!qword_1005DC940)
  {
    result = swift_getWitnessTable(&unk_10046784C, &type metadata for ICArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005DC940);
  }
  return result;
}

unint64_t sub_1003D23B4()
{
  unint64_t result;

  result = qword_1005DC948;
  if (!qword_1005DC948)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveCreator, &type metadata for ICArchiveCreator);
    atomic_store(result, (unint64_t *)&qword_1005DC948);
  }
  return result;
}

uint64_t sub_1003D23F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ICArchiveModel(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1003D243C()
{
  unint64_t result;

  result = qword_1005DC958;
  if (!qword_1005DC958)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ICArchiveCreator, &type metadata for ICArchiveCreator);
    atomic_store(result, (unint64_t *)&qword_1005DC958);
  }
  return result;
}

uint64_t sub_1003D2480(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001537C(&qword_1005D47B0);
    sub_100019C6C(a2, _s3TagVMa, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ICArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1003D2550 + 4 * byte_1004676D3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1003D2584 + 4 * byte_1004676CE[v4]))();
}

uint64_t sub_1003D2584(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003D258C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003D2594);
  return result;
}

uint64_t sub_1003D25A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003D25A8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1003D25AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003D25B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICArchiveModel.CodingKeys()
{
  return &type metadata for ICArchiveModel.CodingKeys;
}

unint64_t sub_1003D25D4()
{
  unint64_t result;

  result = qword_1005DC960;
  if (!qword_1005DC960)
  {
    result = swift_getWitnessTable(&unk_100467824, &type metadata for ICArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005DC960);
  }
  return result;
}

unint64_t sub_1003D261C()
{
  unint64_t result;

  result = qword_1005DC968;
  if (!qword_1005DC968)
  {
    result = swift_getWitnessTable(&unk_100467794, &type metadata for ICArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005DC968);
  }
  return result;
}

unint64_t sub_1003D2664()
{
  unint64_t result;

  result = qword_1005DC970;
  if (!qword_1005DC970)
  {
    result = swift_getWitnessTable(&unk_1004677BC, &type metadata for ICArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005DC970);
  }
  return result;
}

uint64_t sub_1003D26A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974)
  {
    v5 = 0xEE00726569666974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F697369766572 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697369766572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074)
  {
    v8 = 0xE900000000000074;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x4264657461657263 && a2 == 0xE900000000000079)
  {
    v9 = 0xE900000000000079;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4264657461657263, 0xE900000000000079, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 1936154996 && a2 == 0xE400000000000000)
  {
    v10 = 0xE400000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1936154996, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100482D20)
  {
    swift_bridgeObjectRelease(0x8000000100482D20);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100482D20, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void sub_1003D2948(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;

  v6 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, _QWORD, id))(a4 + 16))(a4, a1 & 1, v6);

}

void sub_1003D2B58(uint64_t a1, uint64_t a2, void *a3, char *a4, void *a5)
{
  id v10;
  void *v11;
  _QWORD *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  char *v17;
  id v18;
  id v19;
  char isEscapingClosureAtFileLocation;
  _QWORD v21[5];
  uint64_t v22;

  v10 = objc_msgSend(*(id *)&a4[OBJC_IVAR___ICEditSmartFolderActivity_smartFolder], "managedObjectContext");
  if (v10)
  {
    v11 = v10;
    v12 = (_QWORD *)swift_allocObject(&unk_10056E680, 64, 7);
    v12[2] = a4;
    v12[3] = v11;
    v12[4] = a3;
    v12[5] = a1;
    v12[6] = a2;
    v12[7] = a5;
    v13 = swift_allocObject(&unk_10056E6A8, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_1003D3378;
    *(_QWORD *)(v13 + 24) = v12;
    v21[4] = sub_1000165D0;
    v22 = v13;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 1107296256;
    v21[2] = sub_100016618;
    v21[3] = &unk_10056E6C0;
    v14 = _Block_copy(v21);
    v15 = v22;
    swift_bridgeObjectRetain(a2);
    v16 = a5;
    swift_retain(v13);
    v17 = a4;
    v18 = v11;
    v19 = a3;
    objc_msgSend(v18, "performBlockAndWait:", v14, swift_release(v15).n128_f64[0]);

    _Block_release(v14);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v13, "", 110, 43, 49, 1);
    swift_release(v12);
    swift_release(v13);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
}

id sub_1003D2CEC(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  void *v10;
  _QWORD *v11;
  _QWORD *v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  NSString v17;
  NSString v18;
  Class isa;

  v10 = *(void **)(a1 + OBJC_IVAR___ICEditSmartFolderActivity_smartFolder);
  v11 = objc_msgSend(v10, "smartFolderQueryObjC");
  v12 = v11;
  if (v11)
  {
    v13 = objc_msgSend(v11, "tagSelectionWithManagedObjectContext:", a2);

    v14 = objc_msgSend(v13, "includedTagIdentifiers");
    v12 = (_QWORD *)static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, &type metadata for String);

  }
  if (a3)
  {
    type metadata accessor for ICQuery(0);
    v15 = a3;
    v16 = (void *)static ICQuery.makeQueryForNotesMatching(_:)();
    objc_msgSend(v10, "setSmartFolderQueryObjC:", v16);

  }
  if (a5)
  {
    v17 = String._bridgeToObjectiveC()();
    objc_msgSend(v10, "setTitle:", v17);

  }
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "updateChangeCountWithReason:", v18);

  if (v12)
  {
    if (v12[2])
    {
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v12);
      objc_msgSend(a6, "deleteUnusedHashtagsWithStandardizedContent:", isa);

    }
    else
    {
      swift_bridgeObjectRelease(v12);
    }
  }
  return objc_msgSend(a2, "ic_save");
}

uint64_t type metadata accessor for EditSmartFolderActivity()
{
  return objc_opt_self(ICEditSmartFolderActivity);
}

uint64_t sub_1003D3000()
{
  id v0;
  NSString v1;
  NSString v2;
  id v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, v2, 0);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  return v4;
}

void sub_1003D30D8()
{
  char *v0;
  uint64_t Strong;
  void *v2;
  void *v3;
  id v4;
  uint64_t v5;
  id v6;
  char *v7;
  id v8;
  char *v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[5];
  uint64_t v16;

  Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR___ICEditSmartFolderActivity_presentingViewController]);
  if (Strong)
  {
    v2 = (void *)Strong;
    v3 = *(void **)&v0[OBJC_IVAR___ICEditSmartFolderActivity_smartFolder];
    v4 = objc_msgSend(v3, "account");
    v5 = swift_allocObject(&unk_10056E608, 32, 7);
    *(_QWORD *)(v5 + 16) = v0;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = v3;
    v7 = v0;
    v8 = v4;
    v9 = sub_10028CCCC(v6, (uint64_t)sub_1003D32F4, v5);
    v10 = objc_msgSend(v9, "ic_embedInNavigationControllerForModalPresentation");
    v11 = swift_allocObject(&unk_10056E630, 24, 7);
    *(_QWORD *)(v11 + 16) = v7;
    v15[4] = sub_1003D3320;
    v16 = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_100206734;
    v15[3] = &unk_10056E648;
    v12 = _Block_copy(v15);
    v13 = v16;
    v14 = v7;
    objc_msgSend(v2, "presentViewController:animated:completion:", v10, 1, v12, swift_release(v13).n128_f64[0]);
    _Block_release(v12);

  }
}

uint64_t sub_1003D3254()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003D3278(char a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = String._bridgeToObjectiveC()();
  (*(void (**)(uint64_t, _QWORD, id))(v3 + 16))(v3, a1 & 1, v4);

}

uint64_t sub_1003D32C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1003D32F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_1003D2B58(a1, a2, a3, *(char **)(v3 + 16), *(void **)(v3 + 24));
}

uint64_t sub_1003D32FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1003D3320()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "activityDidFinish:", 1);
}

uint64_t sub_1003D3334()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 64, 7);
}

id sub_1003D3378()
{
  uint64_t v0;

  return sub_1003D2CEC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(void **)(v0 + 56));
}

uint64_t sub_1003D3388()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t ShowQuickNoteIntent.init()()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitorConfiguration), "configurationForDefaultMainDisplayMonitor");
  v1 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitor), "monitorWithConfiguration:", v0);

  v2 = type metadata accessor for ShowQuickNoteIntent.LayoutMonitorBox();
  result = swift_allocObject(v2, 24, 7);
  *(_QWORD *)(result + 16) = v1;
  return result;
}

uint64_t type metadata accessor for ShowQuickNoteIntent.LayoutMonitorBox()
{
  return objc_opt_self(_TtCV11MobileNotes19ShowQuickNoteIntent16LayoutMonitorBox);
}

void *ShowQuickNoteIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static ShowQuickNoteIntent.persistentIdentifier;
}

unint64_t static ShowQuickNoteIntent.persistentIdentifier.getter()
{
  return 0xD000000000000013;
}

uint64_t sub_1003D3464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static ShowQuickNoteIntent.title);
  sub_10012A0B0(v10, (uint64_t)static ShowQuickNoteIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0x69755120776F6853, 0xEF65746F4E206B63);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t ShowQuickNoteIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEDE8 != -1)
    swift_once(&qword_1005CEDE8, sub_1003D3464);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static ShowQuickNoteIntent.title);
}

uint64_t static ShowQuickNoteIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEDE8 != -1)
    swift_once(&qword_1005CEDE8, sub_1003D3464);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static ShowQuickNoteIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static ShowQuickNoteIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000021, 0x800000010048D7B0);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static ShowQuickNoteIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v5;

  v0 = sub_100012E18(&qword_1005DC9B0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1001B282C();
  ParameterSummaryString.init(stringLiteral:)(0x69755120776F6853, 0xEF65746F4E206B63, &type metadata for ShowQuickNoteIntent, v3);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for ShowQuickNoteIntent, v3);
}

uint64_t ShowQuickNoteIntent.perform()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_1003D3984, 0, 0);
}

uint64_t sub_1003D3984()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1005DC9C4);
  *(_QWORD *)(v0 + 32) = v1;
  *v1 = v0;
  v1[1] = sub_1003D39D0;
  return sub_1003D3CD0();
}

uint64_t sub_1003D39D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 32);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
    return (*(uint64_t (**)(void))(v4 + 8))();
  v6 = (_QWORD *)swift_task_alloc(dword_1005DC9CC);
  *(_QWORD *)(v2 + 40) = v6;
  *v6 = v4;
  v6[1] = sub_1003D3A64;
  v6[42] = *(_QWORD *)(v2 + 24);
  return swift_task_switch(sub_1003D401C, 0, 0);
}

uint64_t sub_1003D3A64()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_1003D3AD0, 0, 0);
}

uint64_t sub_1003D3AD0()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  uint64_t v11;
  _QWORD *v13;

  v1 = (void *)objc_claimAutoreleasedReturnValue(+[UIDevice currentDevice](UIDevice, "currentDevice"));
  v2 = (unint64_t)objc_msgSend(v1, "userInterfaceIdiom");

  if ((v2 & 0xFFFFFFFFFFFFFFFBLL) == 1)
  {
    v4 = (id)ICNotesAppBundleIdentifier(v3);
    static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v6 = v5;

    v7 = objc_allocWithZone((Class)SBSSystemNotesPresentationConfiguration);
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "initWithSceneBundleIdentifier:userActivity:preferredPresentationMode:", v8, 0, 0, swift_bridgeObjectRelease(v6).n128_f64[0]);

    v10 = objc_msgSend(objc_allocWithZone((Class)SBSSystemNotesPresentationHandle), "initWithConfiguration:", v9);
    objc_msgSend(v10, "activate");

LABEL_4:
    static IntentResult.result<>()(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v11 = sub_1003D43A4(*(_QWORD *)(v0 + 24));
  if ((v11 & 1) != 0)
    goto LABEL_4;
  v13 = (_QWORD *)swift_task_alloc(dword_1005DC9D4);
  *(_QWORD *)(v0 + 48) = v13;
  *v13 = v0;
  v13[1] = sub_1003D3C30;
  return swift_task_switch(sub_1003D4EFC, 0, 0);
}

uint64_t sub_1003D3C30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_1003D3C9C, 0, 0);
}

uint64_t sub_1003D3C9C(uint64_t a1)
{
  uint64_t v1;

  static IntentResult.result<>()(a1);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003D3CD0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[7] = v0;
  v2 = type metadata accessor for ContinuousClock.Instant(0);
  v1[8] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[9] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[10] = swift_task_alloc(v4);
  v1[11] = swift_task_alloc(v4);
  v5 = type metadata accessor for ContinuousClock(0);
  v1[12] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[13] = v6;
  v1[14] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003D3D68, 0, 0);
}

uint64_t sub_1003D3D68()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  _QWORD *v12;

  v1 = objc_msgSend(*(id *)(v0 + 56), "currentLayout");

  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 80);
    v3 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 112));
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 64);
    ContinuousClock.init()();
    *(_OWORD *)(v0 + 40) = xmmword_1004678C0;
    *(_QWORD *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 16) = 0;
    *(_BYTE *)(v0 + 32) = 1;
    v9 = sub_100019C6C(&qword_1005DBB98, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
    dispatch thunk of Clock.now.getter(v5, v9);
    v10 = sub_100019C6C(&qword_1005DCAA8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)(v0 + 40, v8, v10);
    v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    *(_QWORD *)(v0 + 120) = v11;
    v11(v6, v8);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
    *(_QWORD *)(v0 + 128) = v12;
    *v12 = v0;
    v12[1] = sub_1003D3F00;
    return dispatch thunk of Clock.sleep(until:tolerance:)(*(_QWORD *)(v0 + 88), v0 + 16, *(_QWORD *)(v0 + 96), v9);
  }
}

uint64_t sub_1003D3F00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 120))(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 64));
    v4 = sub_1003D3FA0;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 112);
    v6 = *(_QWORD *)(v2 + 96);
    v7 = *(_QWORD *)(v2 + 104);
    (*(void (**)(_QWORD, _QWORD))(v2 + 120))(*(_QWORD *)(v2 + 88), *(_QWORD *)(v2 + 64));
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    v4 = sub_1003D3D68;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003D3FA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 104) + 8))(v1, *(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D4004(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 336) = a1;
  return swift_task_switch(sub_1003D401C, 0, 0);
}

uint64_t sub_1003D401C()
{
  uint64_t v0;
  __n128 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t inited;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Class isa;
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  NSString v14;

  if ((sub_1003D472C(*(_QWORD *)(v0 + 336)) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 336);
    v3 = sub_100012E18((uint64_t *)&unk_1005D86E0);
    inited = swift_initStackObject(v3, v0 + 80);
    *(_OWORD *)(inited + 16) = xmmword_100454E90;
    *(_QWORD *)(v0 + 296) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyUnlockDevice);
    *(_QWORD *)(v0 + 304) = v5;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), v0 + 296, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for Bool;
    *(_BYTE *)(inited + 72) = 1;
    *(_QWORD *)(v0 + 312) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
    *(_QWORD *)(v0 + 320) = v6;
    AnyHashable.init<A>(_:)((_QWORD *)(inited + 104), v0 + 312, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 168) = &type metadata for Bool;
    *(_BYTE *)(inited + 144) = 1;
    v7 = sub_100136444(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    v9 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationOptions), "optionsWithDictionary:", isa);
    *(_QWORD *)(v0 + 344) = v9;

    sub_1003D49C8(v2);
    if (v10)
      v11 = v10;
    else
      v11 = 0x800000010048D850;
    v12 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationService), "serviceWithDefaultShellEndpoint");
    *(_QWORD *)(v0 + 352) = v12;
    if (v12)
    {
      v13 = v12;
      v14 = String._bridgeToObjectiveC()();
      *(_QWORD *)(v0 + 360) = v14;
      swift_bridgeObjectRelease(v11);
      *(_QWORD *)(v0 + 56) = v0 + 328;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1003D42A8;
      *(_QWORD *)(v0 + 288) = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 256) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 264) = 0x40000000;
      *(_QWORD *)(v0 + 272) = sub_1003D4B7C;
      *(_QWORD *)(v0 + 280) = &unk_10056E720;
      objc_msgSend(v13, "openApplication:withOptions:completion:", v14, v9, v0 + 256);
      return swift_continuation_await(v0 + 16);
    }

    v1 = swift_bridgeObjectRelease(v11);
  }
  return (*(uint64_t (**)(__n128))(v0 + 8))(v1);
}

uint64_t sub_1003D42A8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 368) = v1;
  if (v1)
    v2 = sub_1003D4350;
  else
    v2 = sub_1003D4308;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_1003D4308()
{
  uint64_t v0;
  void *v1;
  void *v2;

  v1 = *(void **)(v0 + 352);
  v2 = *(void **)(v0 + 360);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D4350(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(v1 + 360);
  v4 = *(void **)(v1 + 344);
  v3 = *(void **)(v1 + 352);
  swift_willThrow(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003D43A4(uint64_t a1)
{
  uint64_t result;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 16), "currentLayout");
  if (result)
  {
    v2 = (void *)result;
    v3 = objc_msgSend((id)result, "elements");

    v4 = sub_1003D5114();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
      goto LABEL_19;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      v7 = 4;
      while (1)
      {
        v8 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v5)
           : *(id *)(v5 + 8 * v7);
        v9 = v8;
        v10 = v7 - 3;
        if (__OFADD__(v7 - 4, 1))
          break;
        v11 = objc_msgSend(v8, "identifier");
        v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        v14 = v13;

        if (v12 == 0xD000000000000020 && v14 == 0x800000010048D820)
        {
          swift_bridgeObjectRelease(v5);
          swift_bridgeObjectRelease(0x800000010048D820);

          return 1;
        }
        v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, 0xD000000000000020, 0x800000010048D820, 0);
        swift_bridgeObjectRelease(v14);

        if ((v15 & 1) != 0)
        {
          swift_bridgeObjectRelease(v5);
          return 1;
        }
        ++v7;
        if (v10 == v6)
          goto LABEL_13;
      }
      __break(1u);
LABEL_19:
      if (v5 < 0)
        v16 = v5;
      else
        v16 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(v5);
    }
LABEL_13:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  return result;
}

uint64_t sub_1003D4584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = sub_100012E18(&qword_1005DC9B0);
  __chkstk_darwin(v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.init(stringLiteral:)(0x69755120776F6853, 0xEF65746F4E206B63, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

uint64_t sub_1003D463C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *v1;
  v5 = (_QWORD *)swift_task_alloc(dword_1005DC9BC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100130768;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_1003D3984, 0, 0);
}

uint64_t sub_1003D46A0@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitorConfiguration), "configurationForDefaultMainDisplayMonitor");
  v3 = objc_msgSend((id)objc_opt_self(FBSDisplayLayoutMonitor), "monitorWithConfiguration:", v2);

  v4 = type metadata accessor for ShowQuickNoteIntent.LayoutMonitorBox();
  result = swift_allocObject(v4, 24, 7);
  *(_QWORD *)(result + 16) = v3;
  *a1 = result;
  return result;
}

uint64_t sub_1003D472C(uint64_t a1)
{
  uint64_t result;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 16), "currentLayout");
  if (result)
  {
    v2 = (void *)result;
    v3 = objc_msgSend((id)result, "elements");

    v4 = sub_1003D5114();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
      goto LABEL_30;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      v7 = FBSDisplayLayoutElementLockScreenIdentifier;
      v31 = SBSDisplayLayoutElementAppSwitcherIdentifier;
      v30 = FBSDisplayLayoutElementControlCenterIdentifier;
      v8 = 4;
      while (1)
      {
        v9 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v5)
           : *(id *)(v5 + 8 * v8);
        v10 = v9;
        v11 = v8 - 3;
        if (__OFADD__(v8 - 4, 1))
          break;
        v12 = objc_msgSend(v9, "identifier");
        v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v15 = v14;

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
        if (v16 == v13 && v17 == v15)
          goto LABEL_22;
        v19 = v17;
        v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v13, v15, 0);
        swift_bridgeObjectRelease(v19);
        if ((v20 & 1) != 0)
          goto LABEL_23;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v23 = v22;
        if (v21 == v13 && v22 == v15)
        {
LABEL_22:
          swift_bridgeObjectRelease(v5);
          v5 = v15;
LABEL_23:
          swift_bridgeObjectRelease(v15);
          swift_bridgeObjectRelease(v5);
LABEL_24:

          return 1;
        }
        v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v13, v15, 0);
        swift_bridgeObjectRelease(v23);
        if ((v24 & 1) != 0)
          goto LABEL_23;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v27 = v26;
        if (v25 == v13 && v26 == v15)
        {
          swift_bridgeObjectRelease(v5);
          swift_bridgeObjectRelease_n(v15, 2);
          goto LABEL_24;
        }
        v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v13, v15, 0);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v27);

        if ((v28 & 1) != 0)
        {
          swift_bridgeObjectRelease(v5);
          return 1;
        }
        ++v8;
        if (v11 == v6)
          goto LABEL_21;
      }
      __break(1u);
LABEL_30:
      if (v5 < 0)
        v29 = v5;
      else
        v29 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v29);
      swift_bridgeObjectRelease(v5);
    }
LABEL_21:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  return result;
}

void *sub_1003D49C8(uint64_t a1)
{
  id v1;
  void *v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;

  v1 = objc_msgSend(*(id *)(a1 + 16), "currentLayout");
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "elements");

    v4 = sub_1003D5114();
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    if ((unint64_t)v5 >> 62)
      goto LABEL_19;
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (v6)
    {
      for (i = 4; ; ++i)
      {
        v8 = (v5 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v5)
           : *(id *)(v5 + 8 * i);
        v9 = v8;
        v10 = i - 3;
        if (__OFADD__(i - 4, 1))
          break;
        if (objc_msgSend(v8, "isUIApplicationElement") && objc_msgSend(v9, "layoutRole") == (id)1)
        {
          v11 = objc_msgSend(v9, "bundleIdentifier", swift_bridgeObjectRelease(v5).n128_f64[0]);
          if (v11)
          {
            v12 = v11;
            v2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v11);

            return v2;
          }

          return 0;
        }

        if (v10 == v6)
        {
          swift_bridgeObjectRelease(v5);
          return 0;
        }
      }
      __break(1u);
LABEL_19:
      if (v5 < 0)
        v13 = v5;
      else
        v13 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v6 = _CocoaArrayWrapper.endIndex.getter(v13);
      swift_bridgeObjectRelease(v5);
    }
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  return v2;
}

uint64_t sub_1003D4B7C(uint64_t result, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  id v9;

  v3 = *(_QWORD *)(result + 32);
  if (a3)
  {
    v5 = sub_100012E18(&qword_1005D7A90);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else if (a2)
  {
    **(_QWORD **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    v9 = a2;
    return swift_continuation_throwingResume(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003D4C08()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, "invalidate");

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_1003D4C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_1003D4CE8, 0, 0);
}

uint64_t sub_1003D4CE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100019C6C(&qword_1005DBB98, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100019C6C(&qword_1005DCAA8, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_1003D4E00;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_1003D4E00()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  v2 = *(_QWORD *)(*v1 + 104);
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 112) = v0;
  swift_task_dealloc(v2);
  v3(v4, v5);
  if (v0)
    return swift_task_switch(sub_1003D4EAC, 0, 0);
  v8 = *(_QWORD *)(v6 + 80);
  swift_task_dealloc(*(_QWORD *)(v6 + 88));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1003D4EAC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D4EE8()
{
  return swift_task_switch(sub_1003D4EFC, 0, 0);
}

uint64_t sub_1003D4EFC()
{
  uint64_t v0;
  id v1;
  NSString v2;
  NSString v3;
  id v4;
  id v5;
  id v6;
  id v7;

  v1 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
  v2 = String._bridgeToObjectiveC()();
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v1, "initWithServiceName:viewControllerClassName:", v2, v3);

  v5 = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext), "init");
  v6 = objc_msgSend((id)objc_opt_self(SBSRemoteAlertHandle), "newHandleWithDefinition:configurationContext:", v4, v5);
  v7 = objc_msgSend(objc_allocWithZone((Class)SBSRemoteAlertActivationContext), "init");
  objc_msgSend(v6, "activateWithContext:", v7);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1003D502C()
{
  unint64_t result;

  result = qword_1005DC9D8;
  if (!qword_1005DC9D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowQuickNoteIntent, &type metadata for ShowQuickNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC9D8);
  }
  return result;
}

unint64_t sub_1003D5074()
{
  unint64_t result;

  result = qword_1005DC9E0;
  if (!qword_1005DC9E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ShowQuickNoteIntent, &type metadata for ShowQuickNoteIntent);
    atomic_store(result, (unint64_t *)&qword_1005DC9E0);
  }
  return result;
}

uint64_t sub_1003D50B8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ShowQuickNoteIntent.perform()>>, 1);
}

uint64_t sub_1003D50C8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static ShowQuickNoteIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for ShowQuickNoteIntent()
{
  return &type metadata for ShowQuickNoteIntent;
}

uint64_t sub_1003D50E8()
{
  return sub_100016638(&qword_1005DCA90, &qword_1005DCA98, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

unint64_t sub_1003D5114()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DCAA0;
  if (!qword_1005DCAA0)
  {
    v1 = objc_opt_self(FBSDisplayLayoutElement);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005DCAA0);
  }
  return result;
}

uint64_t sub_1003D5150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = a3;
  v5 = type metadata accessor for URL(0);
  *(_QWORD *)(v3 + 88) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 96) = v6;
  *(_QWORD *)(v3 + 104) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D1648);
  *(_QWORD *)(v3 + 112) = v7;
  *(_QWORD *)(v3 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  *(_QWORD *)(v3 + 128) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005CEFD0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 144) = swift_task_alloc(v9);
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v9);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 160) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 176) = v10;
  *(_BYTE *)(v3 + 248) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 40);
  v11 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v3 + 208) = static MainActor.shared.getter(v11);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(v11, &protocol witness table for MainActor, v12);
  *(_QWORD *)(v3 + 216) = v13;
  *(_QWORD *)(v3 + 224) = v14;
  return swift_task_switch(sub_1003D528C, v13, v14);
}

uint64_t sub_1003D528C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  void (*v41)(uint64_t, uint64_t);
  id v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  __int128 v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  void *v53;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 168);
  v4 = *(void **)(v0 + 80);
  swift_retain(*(_QWORD *)(v0 + 160));
  swift_retain(v3);
  swift_retain(v1);
  swift_retain(v2);
  v5 = objc_msgSend(v4, "note");
  if (!v5)
    goto LABEL_15;
  v6 = v5;
  v7 = *(_QWORD **)(v0 + 128);
  IntentParameter.wrappedValue.getter(v7);
  v8 = type metadata accessor for NoteEntity(0);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v7, 1, v8);
  v10 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 88);
  v13 = *(_QWORD *)(v0 + 96);
  if (v9)
  {
    sub_100012DDC(*(_QWORD *)(v0 + 128), (uint64_t *)&unk_1005D0B60);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v14(v10, 1, 1, v12);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v13 + 16))(*(_QWORD *)(v0 + 152), v11 + *(int *)(v8 + 20), *(_QWORD *)(v0 + 88));
    sub_100012DDC(v11, (uint64_t *)&unk_1005D0B60);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v14(v10, 0, 1, v12);
  }
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 152);
  v17 = *(_QWORD *)(v0 + 112);
  v18 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 96);
  v53 = v6;
  v21 = objc_msgSend(v6, "objectID");
  v22 = objc_msgSend(v21, "URIRepresentation");

  static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v14(v15, 0, 1, v19);
  v23 = v18 + *(int *)(v17 + 48);
  sub_100179888(v16, v18);
  sub_100179888(v15, v23);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  if (v24(v18, 1, v19) == 1)
  {
    v25 = *(_QWORD *)(v0 + 152);
    v26 = *(_QWORD *)(v0 + 88);
    sub_100012DDC(*(_QWORD *)(v0 + 144), &qword_1005CEFD0);
    sub_100012DDC(v25, &qword_1005CEFD0);
    v27 = v53;
    if (v24(v23, 1, v26) == 1)
    {
      sub_100012DDC(*(_QWORD *)(v0 + 120), &qword_1005CEFD0);
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  v28 = *(_QWORD *)(v0 + 88);
  sub_100179888(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 136));
  v29 = v24(v23, 1, v28);
  v31 = *(_QWORD *)(v0 + 144);
  v30 = *(_QWORD *)(v0 + 152);
  v32 = *(_QWORD *)(v0 + 136);
  if (v29 == 1)
  {
    v34 = *(_QWORD *)(v0 + 88);
    v33 = *(_QWORD *)(v0 + 96);
    sub_100012DDC(*(_QWORD *)(v0 + 144), &qword_1005CEFD0);
    sub_100012DDC(v30, &qword_1005CEFD0);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
    v27 = v53;
LABEL_10:
    sub_100012DDC(*(_QWORD *)(v0 + 120), &qword_1005D1648);
LABEL_14:

LABEL_15:
    v47 = *(_BYTE *)(v0 + 248);
    v48 = *(_OWORD *)(v0 + 176);
    goto LABEL_16;
  }
  v35 = *(_QWORD *)(v0 + 120);
  v36 = *(_QWORD *)(v0 + 96);
  v37 = *(_QWORD *)(v0 + 104);
  v38 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 32))(v37, v23, v38);
  v39 = sub_1003D5A24();
  v40 = dispatch thunk of static Equatable.== infix(_:_:)(v32, v37, v38, v39);
  v41 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
  v41(v37, v38);
  sub_100012DDC(v31, &qword_1005CEFD0);
  sub_100012DDC(v30, &qword_1005CEFD0);
  v41(v32, v38);
  sub_100012DDC(v35, &qword_1005CEFD0);
  v27 = v53;
  if ((v40 & 1) == 0)
    goto LABEL_14;
LABEL_12:
  v42 = objc_msgSend(*(id *)(v0 + 80), "textView");
  if (!v42)
    goto LABEL_14;
  v43 = v42;
  v44 = objc_msgSend(v42, "selectedRange");
  v46 = v45;

  v47 = 0;
  *(_QWORD *)&v48 = v44;
  *((_QWORD *)&v48 + 1) = v46;
LABEL_16:
  v49 = *(_QWORD **)(v0 + 72);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 32) = v48;
  *(_BYTE *)(v0 + 48) = v47;
  *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 192);
  v49[3] = sub_100012E18(&qword_1005D0AB8);
  v49[4] = sub_1003D59D8();
  v50 = sub_10012D160(v49);
  v51 = (_QWORD *)swift_task_alloc(dword_1005D952C);
  *(_QWORD *)(v0 + 232) = v51;
  *v51 = v0;
  v51[1] = sub_1003D568C;
  return InsertNoteLinkIntent.perform()((uint64_t)v50);
}

uint64_t sub_1003D568C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 232);
  *(_QWORD *)(*v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1003D57AC;
  else
    v4 = sub_1003D56EC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 216), *(_QWORD *)(v2 + 224));
}

uint64_t sub_1003D56EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 104);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(v4);
  swift_release(v3);
  swift_release(v1);
  swift_release(v2);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D57AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 168);
  v6 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD **)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 160));
  swift_release(v4);
  swift_release(v3);
  swift_release(v1);
  swift_release(v2);
  sub_100185FE0(v9);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D594C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003D5970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1005DCABC);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100130768;
  return sub_1003D5150(a1, a2, v6);
}

unint64_t sub_1003D59D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DCAC8;
  if (!qword_1005DCAC8)
  {
    v1 = sub_10001537C(&qword_1005D0AB8);
    result = swift_getWitnessTable(&protocol conformance descriptor for IntentResultContainer<A, B, C, D>, v1);
    atomic_store(result, (unint64_t *)&qword_1005DCAC8);
  }
  return result;
}

unint64_t sub_1003D5A24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D8A60;
  if (!qword_1005D8A60)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_1005D8A60);
  }
  return result;
}

void *ChangeSettingIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static ChangeSettingIntent.persistentIdentifier;
}

unint64_t static ChangeSettingIntent.persistentIdentifier.getter()
{
  return 0xD000000000000017;
}

uint64_t sub_1003D5A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static ChangeSettingIntent.title);
  sub_10012A0B0(v10, (uint64_t)static ChangeSettingIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000014, 0x800000010048D980);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t ChangeSettingIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEDF0 != -1)
    swift_once(&qword_1005CEDF0, sub_1003D5A98);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static ChangeSettingIntent.title);
}

uint64_t static ChangeSettingIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEDF0 != -1)
    swift_once(&qword_1005CEDF0, sub_1003D5A98);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static ChangeSettingIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

uint64_t static ChangeSettingIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000025, 0x800000010048D890);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static ChangeSettingIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;

  v0 = sub_100012E18(&qword_1005DCAD0);
  __chkstk_darwin(v0);
  v2 = (char *)&v17 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005DCAD8);
  __chkstk_darwin(v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B28F8();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(13, 2, &type metadata for ChangeSettingIntent, v6);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_1004679E0, v8);
  v10 = sub_100012E18(&qword_1005DCAE0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x2065687420;
  v11._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_100467A08, v12);
  v14 = sub_100012E18(&qword_1005DCAE8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._countAndFlagsBits = 0x676E697474657320;
  v15._object = (void *)0xE800000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for ChangeSettingIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for ChangeSettingIntent, v6);
}

uint64_t ChangeSettingIntent.perform()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v5[31] = a4;
  v5[32] = a5;
  v5[29] = a2;
  v5[30] = a3;
  v5[28] = a1;
  v6 = type metadata accessor for ConfirmationActionName(0);
  v5[33] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[34] = v7;
  v5[35] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012E18((uint64_t *)&unk_1005DA580);
  v5[36] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[37] = v9;
  v5[38] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v5[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for IntentDialog(0);
  v5[40] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v5[41] = v12;
  v5[42] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Logger(0);
  v5[43] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[44] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[45] = swift_task_alloc(v15);
  v5[46] = swift_task_alloc(v15);
  v5[47] = swift_task_alloc(v15);
  v5[48] = swift_task_alloc(v15);
  v16 = type metadata accessor for ChangeOperation(0);
  v5[49] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[50] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[51] = swift_task_alloc(v18);
  v5[52] = swift_task_alloc(v18);
  return swift_task_switch(sub_1003D61F4, 0, 0);
}

uint64_t sub_1003D61F4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, os_log_t log, char a19)
{
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _DWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  os_log_t v94;
  uint64_t v95;

  v20 = *(_QWORD **)(v19 + 416);
  v21 = *(_QWORD *)(v19 + 392);
  v22 = *(_QWORD *)(v19 + 400);
  IntentParameter.wrappedValue.getter(v20);
  v23 = (*(uint64_t (**)(_QWORD *, uint64_t))(v22 + 88))(v20, v21);
  v24 = v23;
  v25 = enum case for ChangeOperation.disable(_:);
  if (v23 == enum case for ChangeOperation.disable(_:))
  {
    v92 = enum case for ChangeOperation.disable(_:);
    v35 = *(_QWORD *)(v19 + 248);
    v34 = *(_QWORD *)(v19 + 256);
    v37 = *(_QWORD *)(v19 + 232);
    v36 = *(_QWORD *)(v19 + 240);
    swift_retain(v37);
    swift_retain(v36);
    swift_retain(v35);
    swift_retain(v34);
    AppDependency.wrappedValue.getter((_QWORD *)(v19 + 48));
    Logger.init(subsystem:category:)(*(_QWORD *)(v19 + 48), *(_QWORD *)(v19 + 56), *(_QWORD *)(v19 + 64), *(_QWORD *)(v19 + 72));
    swift_release(v34);
    swift_release(v35);
    swift_release(v36);
    swift_release(v37);
    swift_retain_n(v37, 2);
    swift_retain_n(v36, 2);
    swift_retain_n(v35, 2);
    v38 = swift_retain_n(v34, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.debug.getter();
    v93 = v24;
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (_DWORD *)swift_slowAlloc(12, -1);
      v95 = swift_slowAlloc(32, -1);
      *v41 = 136446210;
      IntentParameter.wrappedValue.getter((_QWORD *)(v19 + 467));
      __asm { BR              X10 }
    }
    v44 = *(_QWORD *)(v19 + 384);
    v45 = *(_QWORD *)(v19 + 344);
    v46 = *(_QWORD *)(v19 + 352);
    v48 = *(_QWORD *)(v19 + 248);
    v47 = *(_QWORD *)(v19 + 256);
    v50 = *(_QWORD *)(v19 + 232);
    v49 = *(_QWORD *)(v19 + 240);

    swift_release_n(v47, 2);
    v51 = v48;
LABEL_11:
    swift_release_n(v51, 2);
    swift_release_n(v49, 2);
    swift_release_n(v50, 2);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v44, v45);
    *(_BYTE *)(v19 + 470) = v93 != v92;
    IntentParameter.wrappedValue.getter((_QWORD *)(v19 + 465));
    __asm { BR              X10 }
  }
  if (v23 == enum case for ChangeOperation.enable(_:))
  {
    v93 = v23;
    v27 = *(_QWORD *)(v19 + 248);
    v26 = *(_QWORD *)(v19 + 256);
    v29 = *(_QWORD *)(v19 + 232);
    v28 = *(_QWORD *)(v19 + 240);
    swift_retain(v29);
    swift_retain(v28);
    swift_retain(v27);
    swift_retain(v26);
    AppDependency.wrappedValue.getter((_QWORD *)(v19 + 80));
    Logger.init(subsystem:category:)(*(_QWORD *)(v19 + 80), *(_QWORD *)(v19 + 88), *(_QWORD *)(v19 + 96), *(_QWORD *)(v19 + 104));
    swift_release(v26);
    swift_release(v27);
    swift_release(v28);
    swift_release(v29);
    swift_retain_n(v29, 2);
    swift_retain_n(v28, 2);
    swift_retain_n(v27, 2);
    v30 = swift_retain_n(v26, 2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    v92 = v25;
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (_DWORD *)swift_slowAlloc(12, -1);
      v95 = swift_slowAlloc(32, -1);
      *v33 = 136446210;
      IntentParameter.wrappedValue.getter((_QWORD *)(v19 + 468));
      __asm { BR              X10 }
    }
    v44 = *(_QWORD *)(v19 + 376);
    v45 = *(_QWORD *)(v19 + 344);
    v46 = *(_QWORD *)(v19 + 352);
    v53 = *(_QWORD *)(v19 + 248);
    v52 = *(_QWORD *)(v19 + 256);
    v50 = *(_QWORD *)(v19 + 232);
    v49 = *(_QWORD *)(v19 + 240);

    swift_release_n(v52, 2);
    v51 = v53;
    goto LABEL_11;
  }
  if (v23 == enum case for ChangeOperation.toggle(_:))
  {
    v42 = swift_task_alloc(dword_1005DCAFC);
    *(_QWORD *)(v19 + 424) = v42;
    *(_QWORD *)v42 = v19;
    *(_QWORD *)(v42 + 8) = sub_1003D6F10;
    v43 = *(_OWORD *)(v19 + 232);
    *(_OWORD *)(v42 + 40) = *(_OWORD *)(v19 + 248);
    *(_OWORD *)(v42 + 24) = v43;
    return swift_task_switch(sub_1003D7B30, 0, 0);
  }
  else
  {
    v55 = *(_QWORD *)(v19 + 248);
    v54 = *(_QWORD *)(v19 + 256);
    v57 = *(_QWORD *)(v19 + 232);
    v56 = *(_QWORD *)(v19 + 240);
    swift_retain(v57);
    swift_retain(v56);
    swift_retain(v55);
    swift_retain(v54);
    AppDependency.wrappedValue.getter((_QWORD *)(v19 + 16));
    Logger.init(subsystem:category:)(*(_QWORD *)(v19 + 16), *(_QWORD *)(v19 + 24), *(_QWORD *)(v19 + 32), *(_QWORD *)(v19 + 40));
    swift_release(v54);
    swift_release(v55);
    swift_release(v56);
    swift_release(v57);
    swift_retain_n(v57, 4);
    swift_retain_n(v56, 4);
    swift_retain_n(v55, 4);
    v58 = swift_retain_n(v54, 4);
    v59 = Logger.logObject.getter(v58);
    LOBYTE(v54) = static os_log_type_t.error.getter(v59, v60);
    if (os_log_type_enabled(v59, (os_log_type_t)v54))
    {
      v61 = *(_QWORD *)(v19 + 400);
      v62 = *(_QWORD **)(v19 + 408);
      v91 = *(_QWORD *)(v19 + 392);
      v88 = *(_QWORD *)(v19 + 256);
      v89 = *(_QWORD *)(v19 + 248);
      v63 = *(_QWORD *)(v19 + 232);
      v90 = *(_QWORD *)(v19 + 240);
      v64 = swift_slowAlloc(22, -1);
      v95 = swift_slowAlloc(64, -1);
      *(_DWORD *)v64 = 136446466;
      v65 = IntentParameter.wrappedValue.getter(v62);
      v66 = ChangeOperation.rawValue.getter(v65);
      v68 = v67;
      (*(void (**)(_QWORD *, uint64_t))(v61 + 8))(v62, v91);
      *(_QWORD *)(v19 + 192) = sub_1003A4190(v66, v68, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v19 + 192, v19 + 200, v64 + 4);
      swift_release_n(v88, 2);
      swift_release_n(v89, 2);
      swift_release_n(v90, 2);
      swift_release_n(v63, 2);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v64 + 12) = 2082;
      IntentParameter.wrappedValue.getter((_QWORD *)(v19 + 464));
      __asm { BR              X10 }
    }
    v69 = *(_QWORD *)(v19 + 400);
    v71 = *(_QWORD *)(v19 + 352);
    v70 = *(_QWORD *)(v19 + 360);
    v72 = *(_QWORD *)(v19 + 344);
    v74 = *(_QWORD *)(v19 + 248);
    v73 = *(_QWORD *)(v19 + 256);
    v76 = *(_QWORD *)(v19 + 232);
    v75 = *(_QWORD *)(v19 + 240);

    swift_release_n(v73, 4);
    swift_release_n(v74, 4);
    swift_release_n(v75, 4);
    swift_release_n(v76, 4);
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
    v78 = (*(uint64_t (**)(_QWORD, _QWORD))(v69 + 8))(*(_QWORD *)(v19 + 416), *(_QWORD *)(v19 + 392));
    v79 = *(_QWORD *)(v19 + 408);
    v80 = *(_QWORD *)(v19 + 416);
    v82 = *(_QWORD *)(v19 + 376);
    v81 = *(_QWORD *)(v19 + 384);
    v84 = *(_QWORD *)(v19 + 360);
    v83 = *(_QWORD *)(v19 + 368);
    v85 = *(_QWORD *)(v19 + 336);
    v87 = *(_QWORD *)(v19 + 304);
    v86 = *(_QWORD *)(v19 + 312);
    v94 = *(os_log_t *)(v19 + 280);
    static IntentResult.result<>()(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v94);
    return (*(uint64_t (**)(void))(v19 + 8))();
  }
}

uint64_t sub_1003D6F10(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_BYTE *)(*(_QWORD *)v1 + 469) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003D6F6C, 0, 0);
}

void sub_1003D6F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 240);
  swift_retain(v4);
  swift_retain(v3);
  swift_retain(v2);
  swift_retain(v1);
  AppDependency.wrappedValue.getter((_QWORD *)(v0 + 144));
  Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_retain_n(v4, 2);
  swift_retain_n(v3, 2);
  swift_retain_n(v2, 2);
  v5 = swift_retain_n(v1, 2);
  v6 = Logger.logObject.getter(v5);
  LOBYTE(v1) = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, (os_log_type_t)v1))
  {
    v7 = (_DWORD *)swift_slowAlloc(22, -1);
    swift_slowAlloc(64, -1);
    *v7 = 136446466;
    IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 466));
    __asm { BR              X10 }
  }
  v8 = *(_QWORD *)(v0 + 368);
  v9 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 248);
  v11 = *(_QWORD *)(v0 + 256);
  v14 = *(_QWORD *)(v0 + 232);
  v13 = *(_QWORD *)(v0 + 240);

  swift_release_n(v11, 2);
  swift_release_n(v12, 2);
  swift_release_n(v13, 2);
  swift_release_n(v14, 2);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  *(_BYTE *)(v0 + 470) = *(_BYTE *)(v0 + 469) ^ 1;
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 465));
  __asm { BR              X10 }
}

uint64_t sub_1003D7350()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  id v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = _stringCompareWithSmolCheck(_:_:expecting:)(v2 + 1, 0x8000000100476740, 0x6363416C61636F6CLL, 0xEC000000746E756FLL, 0);
  swift_bridgeObjectRelease(0x8000000100476740);
  if ((v3 & v0) == 1
    && (v4 = objc_msgSend((id)objc_opt_self(ICAccountUtilities), "sharedInstance"),
        v5 = objc_msgSend(v4, "hasSyncingAccount"),
        v4,
        (v5 & 1) == 0))
  {
    v10 = sub_10013F4E8();
    v11 = swift_allocError(&type metadata for AppIntentsError, v10, 0, 0);
    *v12 = 10;
    swift_willThrow(v11);
    v13 = *(_QWORD *)(v1 + 408);
    v15 = *(_QWORD *)(v1 + 376);
    v14 = *(_QWORD *)(v1 + 384);
    v17 = *(_QWORD *)(v1 + 360);
    v16 = *(_QWORD *)(v1 + 368);
    v18 = *(_QWORD *)(v1 + 336);
    v20 = *(_QWORD *)(v1 + 304);
    v19 = *(_QWORD *)(v1 + 312);
    v21 = *(_QWORD *)(v1 + 280);
    swift_task_dealloc(*(_QWORD *)(v1 + 416));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v6 = swift_task_alloc(dword_1005DCB04);
    *(_QWORD *)(v1 + 432) = v6;
    *(_QWORD *)v6 = v1;
    *(_QWORD *)(v6 + 8) = sub_1003D7570;
    v7 = *(_QWORD *)(v1 + 312);
    v8 = *(_OWORD *)(v1 + 248);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)(v1 + 232);
    *(_OWORD *)(v6 + 48) = v8;
    *(_QWORD *)(v6 + 24) = v7;
    return swift_task_switch(sub_1003D7D58, 0, 0);
  }
}

uint64_t sub_1003D7570()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 432));
  return swift_task_switch(sub_1003D75C4, 0, 0);
}

uint64_t sub_1003D75C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 312);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100012DDC(v3, (uint64_t *)&unk_1005CEE20);
    v4 = swift_task_alloc(dword_1005DCB0C);
    *(_QWORD *)(v0 + 456) = v4;
    *(_QWORD *)v4 = v0;
    *(_QWORD *)(v4 + 8) = sub_1003D788C;
    v5 = *(_BYTE *)(v0 + 470);
    v6 = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v4 + 24) = v6;
    *(_BYTE *)(v4 + 89) = v5;
    return swift_task_switch(sub_1003D7F78, 0, 0);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 336);
    v13 = *(_OWORD *)(v0 + 248);
    v14 = *(_OWORD *)(v0 + 232);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v8, v3, v1);
    *(_OWORD *)(v0 + 112) = v14;
    *(_OWORD *)(v0 + 128) = v13;
    v9 = static IntentResult.result<>(dialog:)(v8);
    static ConfirmationActionName.continue.getter(v9);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)[1]);
    *(_QWORD *)(v0 + 440) = v10;
    v11 = sub_1001B28F8();
    v12 = sub_100016638(&qword_1005D9090, (uint64_t *)&unk_1005DA580, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
    *v10 = v0;
    v10[1] = sub_1003D7758;
    return AppIntent.requestConfirmation<A>(result:confirmationActionName:showPrompt:)(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 280), 1, &type metadata for ChangeSettingIntent, *(_QWORD *)(v0 + 288), v11, v12);
  }
}

uint64_t sub_1003D7758()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[37];
    v4 = v2[38];
    v6 = v2[36];
    (*(void (**)(_QWORD, _QWORD))(v2[34] + 8))(v2[35], v2[33]);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = sub_1003D7A4C;
  }
  else
  {
    v9 = v2[37];
    v8 = v2[38];
    v10 = v2[36];
    (*(void (**)(_QWORD, _QWORD))(v2[34] + 8))(v2[35], v2[33]);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v7 = sub_1003D780C;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1003D780C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int128 v3;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
  v1 = swift_task_alloc(dword_1005DCB0C);
  *(_QWORD *)(v0 + 456) = v1;
  *(_QWORD *)v1 = v0;
  *(_QWORD *)(v1 + 8) = sub_1003D788C;
  v2 = *(_BYTE *)(v0 + 470);
  v3 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v1 + 40) = *(_OWORD *)(v0 + 248);
  *(_OWORD *)(v1 + 24) = v3;
  *(_BYTE *)(v1 + 89) = v2;
  return swift_task_switch(sub_1003D7F78, 0, 0);
}

uint64_t sub_1003D788C()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 456);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_1003D798C, 0, 0);
  v6 = v2[51];
  v5 = v2[52];
  v8 = v2[47];
  v7 = v2[48];
  v10 = v2[45];
  v9 = v2[46];
  v11 = v2[42];
  v12 = v2[39];
  v15 = v2[38];
  v13 = v2[35];
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v15);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1003D798C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 + 408);
  v3 = *(_QWORD *)(v1 + 416);
  v5 = *(_QWORD *)(v1 + 376);
  v4 = *(_QWORD *)(v1 + 384);
  v7 = *(_QWORD *)(v1 + 360);
  v6 = *(_QWORD *)(v1 + 368);
  v8 = *(_QWORD *)(v1 + 336);
  v10 = *(_QWORD *)(v1 + 304);
  v9 = *(_QWORD *)(v1 + 312);
  v12 = *(_QWORD *)(v1 + 280);
  static IntentResult.result<>()(a1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003D7A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 328) + 8))(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 320));
  v1 = *(_QWORD *)(v0 + 408);
  v3 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 416));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D7B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_1003D7B30, 0, 0);
}

void sub_1003D7B30()
{
  uint64_t v0;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 80));
  __asm { BR              X10 }
}

uint64_t sub_1003D7B70()
{
  uint64_t v0;
  unsigned __int8 v1;

  v1 = objc_msgSend((id)objc_opt_self(ICHashtagController), "shouldAutoConvertToTag");
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v1 & 1);
}

uint64_t sub_1003D7CA8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_release(v1);
  return swift_task_switch(sub_1003D7D04, 0, 0);
}

uint64_t sub_1003D7D04()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 81));
}

uint64_t sub_1003D7D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  return swift_task_switch(sub_1003D7D58, 0, 0);
}

uint64_t sub_1003D7D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 88));
  if (*(_BYTE *)(v0 + 88) == 2)
  {
    v2 = *(_QWORD *)(v0 + 48);
    v1 = *(_QWORD *)(v0 + 56);
    v4 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 16));
    v5 = *(void **)(v0 + 16);
    v6 = objc_msgSend(v5, "modernManagedObjectContext");
    *(_QWORD *)(v0 + 64) = v6;

    v7 = (_QWORD *)swift_allocObject(&unk_10056E998, 56, 7);
    *(_QWORD *)(v0 + 72) = v7;
    v7[2] = v6;
    v7[3] = v4;
    v7[4] = v3;
    v7[5] = v2;
    v7[6] = v1;
    v8 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    v6;
    swift_retain(v4);
    swift_retain(v3);
    swift_retain(v2);
    swift_retain(v1);
    v9 = (_QWORD *)swift_task_alloc(v8);
    *(_QWORD *)(v0 + 80) = v9;
    v10 = sub_100012E18((uint64_t *)&unk_1005CEE20);
    *v9 = v0;
    v9[1] = sub_1003D7ECC;
    return NSManagedObjectContext.perform<A>(_:)(*(_QWORD *)(v0 + 24), sub_1003DA27C, v7, v10);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 24);
    v13 = type metadata accessor for IntentDialog(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1003D7ECC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_1003D7F28, 0, 0);
}

uint64_t sub_1003D7F28()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D7F58(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 40) = a4;
  *(_QWORD *)(v5 + 48) = a5;
  *(_QWORD *)(v5 + 24) = a2;
  *(_QWORD *)(v5 + 32) = a3;
  *(_BYTE *)(v5 + 89) = a1;
  return swift_task_switch(sub_1003D7F78, 0, 0);
}

void sub_1003D7F78()
{
  uint64_t v0;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 88));
  __asm { BR              X10 }
}

void sub_1003D7FB8()
{
  uint64_t v0;

  objc_msgSend((id)objc_opt_self(ICHashtagController), "setShouldAutoConvertToTag:", *(unsigned __int8 *)(v0 + 89));
  __asm { BR              X0 }
}

uint64_t sub_1003D8188()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_1003D81E4, 0, 0);
}

uint64_t sub_1003D81E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D8218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  id v30;
  NSString v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  double v43;
  id v44;
  NSString v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  Swift::String v59;
  Swift::String v60;
  void *v61;
  Swift::String v62;
  char *v63;
  Swift::String v64;
  Swift::String v65;
  Swift::String v66;
  char *v67;
  uint64_t v68;
  uint64_t v70;
  unint64_t v71;
  __int128 v72;
  id v73;
  void *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;

  v4 = type metadata accessor for LocalizedStringResource(0);
  v5 = __chkstk_darwin(v4);
  v77 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v76 = (char *)&v70 - v7;
  v8 = type metadata accessor for String.LocalizationValue.StringInterpolation(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v70 - v12;
  v14 = type metadata accessor for ChangeOperation(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v70 - v19;
  v21 = objc_msgSend((id)objc_opt_self(ICAccount), "localAccountInContext:", a1);
  if (v21)
  {
    v22 = v21;
    v78 = a2;
    if ((uint64_t)objc_msgSend(v21, "visibleNotesCount") > 0)
    {
      IntentParameter.wrappedValue.getter(v20);
      (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for ChangeOperation.enable(_:), v14);
      v23 = sub_10017BAF8(&qword_1005DCB58, (uint64_t)&protocol conformance descriptor for ChangeOperation);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v18, v14, v23);
      v25 = *(void (**)(char *, uint64_t))(v15 + 8);
      v25(v18, v14);
      v25(v20, v14);
      if ((v24 & 1) == 0)
      {
        v73 = (id)objc_opt_self(NSBundle);
        v30 = objc_msgSend(v73, "mainBundle");
        v31 = String._bridgeToObjectiveC()();
        v32 = objc_msgSend(v30, "localizedStringForKey:value:table:", v31, 0, 0);

        v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v34 = v33;

        v35 = sub_100012E18((uint64_t *)&unk_1005D5630);
        v36 = swift_allocObject(v35, 72, 7);
        v72 = xmmword_100451C20;
        *(_OWORD *)(v36 + 16) = xmmword_100451C20;
        v37 = objc_msgSend(v22, "localizedName");
        v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        v40 = v39;

        *(_QWORD *)(v36 + 56) = &type metadata for String;
        v71 = sub_1001797EC();
        *(_QWORD *)(v36 + 64) = v71;
        *(_QWORD *)(v36 + 32) = v38;
        *(_QWORD *)(v36 + 40) = v40;
        v41 = static String.localizedStringWithFormat(_:_:)(v75, v34, v36);
        v74 = v42;
        v75 = v41;
        swift_bridgeObjectRelease(v36);
        *(_QWORD *)&v43 = swift_bridgeObjectRelease(v34).n128_u64[0];
        v44 = objc_msgSend(v73, "mainBundle", v43);
        v45 = String._bridgeToObjectiveC()();
        v46 = objc_msgSend(v44, "localizedStringForKey:value:table:", v45, 0, 0);

        v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
        v49 = v48;

        v50 = swift_allocObject(v35, 72, 7);
        *(_OWORD *)(v50 + 16) = v72;
        v51 = objc_msgSend(v22, "localizedName");
        v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
        v54 = v53;

        v55 = v71;
        *(_QWORD *)(v50 + 56) = &type metadata for String;
        *(_QWORD *)(v50 + 64) = v55;
        *(_QWORD *)(v50 + 32) = v52;
        *(_QWORD *)(v50 + 40) = v54;
        v56 = static String.localizedStringWithFormat(_:_:)(v47, v49, v50);
        v58 = v57;
        swift_bridgeObjectRelease(v50);
        swift_bridgeObjectRelease(v49);
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
        v59._countAndFlagsBits = 0;
        v59._object = (void *)0xE000000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v59);
        v61 = v74;
        v60._countAndFlagsBits = v75;
        v60._object = v74;
        String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v60);
        swift_bridgeObjectRelease(v61);
        v62._countAndFlagsBits = 0;
        v62._object = (void *)0xE000000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v62);
        v63 = v76;
        LocalizedStringResource.init(stringInterpolation:)(v13);
        String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(0, 1);
        v64._countAndFlagsBits = 0;
        v64._object = (void *)0xE000000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v64);
        v65._countAndFlagsBits = v56;
        v65._object = v58;
        String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v65);
        swift_bridgeObjectRelease(v58);
        v66._countAndFlagsBits = 0;
        v66._object = (void *)0xE000000000000000;
        String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v66);
        v67 = v77;
        LocalizedStringResource.init(stringInterpolation:)(v11);
        v68 = v78;
        IntentDialog.init(full:supporting:)(v63, v67);

        v26 = type metadata accessor for IntentDialog(0);
        v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
        v28 = v68;
        v29 = 0;
        return v27(v28, v29, 1, v26);
      }
    }

    v26 = type metadata accessor for IntentDialog(0);
    v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = v78;
  }
  else
  {
    v26 = type metadata accessor for IntentDialog(0);
    v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v28 = a2;
  }
  v29 = 1;
  return v27(v28, v29, 1, v26);
}

void sub_1003D8768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  void **aBlock;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  void *v30;
  uint64_t (*v31)();
  uint64_t v32;
  void *v33;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(ICNoteContext), "sharedContext");
  if (v12
    && (v13 = v12,
        v14 = objc_msgSend(v12, "managedObjectContext"),
        v13,
        v14))
  {
    v33 = 0;
    v15 = swift_allocObject(&unk_10056E920, 32, 7);
    *(_QWORD *)(v15 + 16) = &v33;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = swift_allocObject(&unk_10056E948, 32, 7);
    *(_QWORD *)(v16 + 16) = sub_1003DA21C;
    *(_QWORD *)(v16 + 24) = v15;
    v31 = sub_1000165D0;
    v32 = v16;
    aBlock = _NSConcreteStackBlock;
    v28 = 1107296256;
    v29 = sub_100016618;
    v30 = &unk_10056E960;
    v17 = _Block_copy(&aBlock);
    v18 = v32;
    v19 = v14;
    swift_retain(v16);
    objc_msgSend(v19, "performBlockAndWait:", v17, swift_release(v18).n128_f64[0]);

    _Block_release(v17);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation(v16, "", 110, 161, 51, 1);
    swift_release(v16);
    if ((v17 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v20 = v33;
      swift_release(v15);
      if (v20)

    }
  }
  else
  {
    swift_retain(a1);
    swift_retain(a2);
    swift_retain(a3);
    swift_retain(a4);
    AppDependency.wrappedValue.getter(&aBlock);
    Logger.init(subsystem:category:)(aBlock, v28, v29, v30);
    swift_release(a4);
    swift_release(a3);
    swift_release(a2);
    swift_release(a1);
    v22 = Logger.logObject.getter(v21);
    v24 = static os_log_type_t.error.getter(v22, v23);
    if (os_log_type_enabled(v22, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v24, "Cannot get modern managed object context — returning false for local account setting", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_1003D8A34(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v5 + 72) = a4;
  *(_QWORD *)(v5 + 80) = a5;
  *(_QWORD *)(v5 + 56) = a2;
  *(_QWORD *)(v5 + 64) = a3;
  *(_BYTE *)(v5 + 128) = a1;
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v5 + 88) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003D8A9C, 0, 0);
}

uint64_t sub_1003D8A9C()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  __int128 v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(unsigned __int8 *)(v0 + 128);
  sub_1003D8768(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  if (v1 == (v2 & 1))
  {
    v7 = *(_QWORD *)(v0 + 72);
    v6 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 56);
    v8 = *(_QWORD *)(v0 + 64);
    swift_retain(v9);
    swift_retain(v8);
    swift_retain(v7);
    swift_retain(v6);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 16));
    Logger.init(subsystem:category:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
    swift_release(v9);
    swift_release(v8);
    swift_release(v7);
    swift_release(v6);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter();
    v13 = os_log_type_enabled(v11, v12);
    v15 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 88);
    if (v13)
    {
      v26 = *(_QWORD *)(v0 + 104);
      v17 = *(unsigned __int8 *)(v0 + 128);
      v25 = *(_QWORD *)(v0 + 88);
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      *(_DWORD *)v18 = 136315138;
      v27 = v19;
      if (v17)
        v20 = 0x64656C62616E65;
      else
        v20 = 0x64656C6261736964;
      if (v17)
        v21 = 0xE700000000000000;
      else
        v21 = 0xE800000000000000;
      *(_QWORD *)(v0 + 48) = sub_1003A4190(v20, v21, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v18 + 4);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Local account is already %s, so no work is needed", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v26, v25);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    }
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    if (*(_BYTE *)(v0 + 128) == 1)
    {
      v3 = swift_task_alloc(dword_1005DCB54);
      *(_QWORD *)(v0 + 112) = v3;
      *(_QWORD *)v3 = v0;
      *(_QWORD *)(v3 + 8) = sub_1003D8D84;
      v4 = *(_OWORD *)(v0 + 56);
      *(_OWORD *)(v3 + 40) = *(_OWORD *)(v0 + 72);
      *(_OWORD *)(v3 + 24) = v4;
      v5 = sub_1003D8E84;
    }
    else
    {
      v22 = swift_task_alloc(dword_1005DCB4C);
      *(_QWORD *)(v0 + 120) = v22;
      *(_QWORD *)v22 = v0;
      *(_QWORD *)(v22 + 8) = sub_1003D8DD0;
      v23 = *(_OWORD *)(v0 + 56);
      *(_OWORD *)(v22 + 40) = *(_OWORD *)(v0 + 72);
      *(_OWORD *)(v22 + 24) = v23;
      v5 = sub_1003D9084;
    }
    return swift_task_switch(v5, 0, 0);
  }
}

uint64_t sub_1003D8D84()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_task_dealloc(*(_QWORD *)(v1 + 104));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003D8DD0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 120));
  swift_task_dealloc(*(_QWORD *)(v1 + 104));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

void sub_1003D8E1C(void **a1, uint64_t a2)
{
  id v3;
  void *v4;

  v3 = objc_msgSend((id)objc_opt_self(ICAccount), "localAccountInContext:", a2);
  v4 = *a1;
  *a1 = v3;

}

uint64_t sub_1003D8E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_1003D8E84, 0, 0);
}

uint64_t sub_1003D8E84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  AppDependency.wrappedValue.getter(v0 + 2);
  v5 = (void *)v0[2];
  v6 = objc_msgSend(v5, "modernManagedObjectContext");
  v0[7] = v6;

  v7 = (_QWORD *)swift_allocObject(&unk_10056E8D0, 56, 7);
  v0[8] = v7;
  v7[2] = v6;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v2;
  v7[6] = v1;
  v8 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v6;
  swift_retain(v4);
  swift_retain(v3);
  swift_retain(v2);
  swift_retain(v1);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_1003D8F8C;
  return NSManagedObjectContext.perform<A>(_:)(v9, sub_1003DA198, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_1003D8F8C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003D902C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_1003D8FF8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003D8FF8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D902C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);

  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D9068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_1003D9084, 0, 0);
}

uint64_t sub_1003D9084()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = v0[5];
  v1 = v0[6];
  v4 = v0[3];
  v3 = v0[4];
  AppDependency.wrappedValue.getter(v0 + 2);
  v5 = (void *)v0[2];
  v6 = objc_msgSend(v5, "modernManagedObjectContext");
  v0[7] = v6;

  v7 = (_QWORD *)swift_allocObject(&unk_10056E8F8, 56, 7);
  v0[8] = v7;
  v7[2] = v6;
  v7[3] = v4;
  v7[4] = v3;
  v7[5] = v2;
  v7[6] = v1;
  v8 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
  v6;
  swift_retain(v4);
  swift_retain(v3);
  swift_retain(v2);
  swift_retain(v1);
  v9 = (_QWORD *)swift_task_alloc(v8);
  v0[9] = v9;
  *v9 = v0;
  v9[1] = sub_1003D918C;
  return NSManagedObjectContext.perform<A>(_:)(v9, sub_1003DA1B8, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_1003D918C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 72);
  *(_QWORD *)(*v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003DA3CC;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 64));
    v4 = sub_1003DA3C8;
  }
  return swift_task_switch(v4, 0, 0);
}

void sub_1003D91F8(void *a1)
{
  void *v2;
  id v3;
  unsigned int v4;
  id v5;
  void *v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v13;

  v2 = (void *)objc_opt_self(ICAccount);
  v3 = objc_msgSend(v2, "localAccountInContext:", a1);
  if (v3)
  {

  }
  else
  {

    v13 = 0;
    v4 = objc_msgSend(a1, "save:", &v13);
    v5 = v13;
    if (v4)
    {
      v6 = (void *)objc_opt_self(ICSettingsUtilities);
      v7 = v5;
      v8 = String._bridgeToObjectiveC()();
      objc_msgSend(v6, "setBool:forKey:", 1, v8);

      objc_msgSend((id)objc_opt_self(ICQuickNoteSessionSettings), "updateNotesOnLockScreenWhenAccountSupportingLockScreenAdded");
      AppDependency.wrappedValue.getter(&v13);
      v9 = v13;
      v10 = objc_msgSend(v13, "modernCrossProcessChangeCoordinator");

      objc_msgSend(v10, "postAccountDidChangeNotification");
    }
    else
    {
      v11 = v13;
      _convertNSErrorToError(_:)(v5);

      swift_willThrow(v12);
    }
  }
}

void sub_1003D9394(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  unsigned int v24;
  id v25;
  void *v26;
  id v27;
  NSString v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD v33[2];
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _QWORD v38[3];

  v36 = a4;
  v35 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (void *)objc_opt_self(ICAccount);
  v14 = objc_msgSend(v13, "localAccountInContext:", a1);
  if (v14)
  {
    v15 = v14;
    v33[1] = v5;
    v34 = a1;
    v16 = (uint64_t)objc_msgSend(v14, "visibleNotesCount");
    if (v16 >= 1)
    {
      v17 = (void *)v16;
      swift_retain(a2);
      swift_retain(a3);
      v18 = v36;
      swift_retain(v36);
      swift_retain(a5);
      AppDependency.wrappedValue.getter(&v37);
      Logger.init(subsystem:category:)(v37, v38[0], v38[1], v38[2]);
      swift_release(a5);
      swift_release(v18);
      swift_release(a3);
      v19 = swift_release(a2);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v22 = 134217984;
        v37 = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v22 + 4);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Local account has %ld note(s). Deleting notes and local account.", v22, 0xCu);
        swift_slowDealloc(v22, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v35);
    }
    v23 = v15;
    objc_msgSend(v13, "deleteAccount:", v23);
    v37 = 0;
    v24 = objc_msgSend(v34, "save:", &v37);
    v25 = v37;
    if (v24)
    {
      v26 = (void *)objc_opt_self(ICSettingsUtilities);
      v27 = v25;
      v28 = String._bridgeToObjectiveC()();
      objc_msgSend(v26, "setBool:forKey:", 0, v28);

      objc_msgSend(v26, "setBool:forKey:", 1, kICDefaultsKeyDidMigrateLocalAccount);
      objc_msgSend((id)objc_opt_self(ICQuickNoteSessionSettings), "disableNotesOnLockScreenIfNecessary");
      AppDependency.wrappedValue.getter(&v37);
      v29 = v37;
      v30 = objc_msgSend(v37, "modernCrossProcessChangeCoordinator");

      objc_msgSend(v30, "postAccountDidChangeNotification");
    }
    else
    {
      v31 = v37;
      _convertNSErrorToError(_:)(v25);

      swift_willThrow(v32);
    }

  }
}

void sub_1003D96E0(uint64_t a1@<X0>, unsigned __int8 *a2@<X8>)
{
  id v3;
  void *v4;
  id v5;
  unsigned __int8 v6;

  v3 = objc_msgSend((id)objc_opt_self(ICAccount), "defaultAccountInContext:", a1);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend((id)objc_opt_self(ICCloudNotificationsController), "sharedController");
    v6 = objc_msgSend(v5, "isSubscribedToMentionNotificationsForAccount:", v4);

  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

void sub_1003D9790(uint64_t a1, char a2)
{
  id v3;
  void *v4;
  id v5;

  v3 = objc_msgSend((id)objc_opt_self(ICAccount), "defaultAccountInContext:", a1);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend((id)objc_opt_self(ICCloudNotificationsController), "sharedController");
    objc_msgSend(v5, "updateSubscriptionPreferenceForMentionNotifications:forAccount:", a2 & 1, v4);

  }
}

uint64_t sub_1003D9834(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *v1;
  v5 = v1[1];
  v7 = v1[2];
  v6 = v1[3];
  v8 = (_QWORD *)swift_task_alloc(dword_1005DCAF4);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100130768;
  return ChangeSettingIntent.perform()(a1, v4, v5, v7, v6);
}

char *sub_1003D98AC@<X0>(char **a1@<X8>)
{
  char *result;
  char *v3;
  char *v4;
  char *v5;

  result = _s11MobileNotes19ChangeSettingIntentVACycfC_0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

char *_s11MobileNotes19ChangeSettingIntentVACycfC_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t, uint64_t);
  char *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void (*v56)(char *, uint64_t, uint64_t);
  unsigned int v57;
  void (*v58)(char *, uint64_t, uint64_t, uint64_t);
  char *v59;
  unsigned int v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  _QWORD v72[7];

  v69 = type metadata accessor for InputConnectionBehavior(0);
  v64 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v68 = (char *)&v53 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v2 = __chkstk_darwin(v1);
  v67 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v66 = (char *)&v53 - v4;
  v5 = sub_100012E18(&qword_1005CEED0);
  __chkstk_darwin(v5);
  v65 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v7);
  v59 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Locale(0);
  __chkstk_darwin(v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v16);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for LocalizedStringResource(0);
  v20 = *(_QWORD *)(v19 - 8);
  v62 = v19;
  __chkstk_darwin(v19);
  v54 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_100012E18(&qword_1005CEED8);
  v22 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x8000000100478B90);
  static Locale.current.getter(v22);
  v23 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 104);
  v57 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v55 = v9;
  v24(v12, enum case for LocalizedStringResource.BundleDescription.main(_:), v9);
  v56 = v24;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter for Change Notes Setting intent", 41, 2);
  v25 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001FLL, 0x8000000100477080);
  static Locale.current.getter(v25);
  v24(v12, v23, v9);
  v26 = v59;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for change operation", 42, 2);
  v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v61(v26, 0, 1, v19);
  v27 = type metadata accessor for ChangeOperation(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v65, 1, 1, v27);
  v28 = type metadata accessor for IntentDialog(0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v58 = v29;
  v30 = v66;
  v29(v66, 1, 1, v28);
  v31 = v67;
  v29(v67, 1, 1, v28);
  v60 = enum case for InputConnectionBehavior.default(_:);
  v64 = *(_QWORD *)(v64 + 104);
  v32 = v68;
  ((void (*)(char *))v64)(v68);
  v33 = sub_10017BAF8(&qword_1005CEEE0, (uint64_t)&protocol conformance descriptor for ChangeOperation);
  dispatch thunk of static CaseIterable.allCases.getter(v72, v27, v33);
  v34 = v72[0];
  v35 = sub_10017BAF8(&qword_1005CEEE8, (uint64_t)&protocol conformance descriptor for ChangeOperation);
  v36 = v54;
  v65 = (char *)IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v54, v26, v65, v30, v31, v32, v34, v35);
  v63 = sub_100012E18(&qword_1005CF220);
  v37 = String.LocalizationValue.init(stringLiteral:)(0x676E6974746553, 0xE700000000000000);
  static Locale.current.getter(v37);
  v38 = v57;
  v39 = v55;
  v40 = v56;
  v56(v12, v57, v55);
  v41 = v36;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter for Change Notes Setting intent", 41, 2);
  v42 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000020, 0x80000001004770D0);
  static Locale.current.getter(v42);
  v40(v12, v38, v39);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v18, 0, 0, v15, v12, "Parameter description for setting", 33, 2);
  v61(v26, 0, 1, v62);
  LOBYTE(v72[0]) = 5;
  v43 = v66;
  v44 = v58;
  v58(v66, 1, 1, v28);
  v45 = v67;
  v44(v67, 1, 1, v28);
  v46 = v68;
  ((void (*)(char *, _QWORD, uint64_t))v64)(v68, v60, v69);
  v47 = sub_1001288C8();
  IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v41, v26, v72, v43, v45, v46, &off_100555E08, v47);
  sub_100012E18(&qword_1005CEE50);
  v70 = 0xD000000000000021;
  v71 = 0x8000000100476B70;
  AnyHashable.init<A>(_:)(v72, &v70, &type metadata for String, &protocol witness table for String);
  v48 = type metadata accessor for AppDependencyManager(0);
  v49 = static AppDependencyManager.shared.getter(v48);
  AppDependency.__allocating_init(key:manager:)(v72, v49);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v70 = 0xD000000000000024;
  v71 = 0x8000000100476B40;
  v50 = AnyHashable.init<A>(_:)(v72, &v70, &type metadata for String, &protocol witness table for String);
  v51 = static AppDependencyManager.shared.getter(v50);
  AppDependency.__allocating_init(key:manager:)(v72, v51);
  return v65;
}

uint64_t sub_1003D9F9C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003D9FC4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

unint64_t sub_1003D9FF0()
{
  unint64_t result;

  result = qword_1005DCB10;
  if (!qword_1005DCB10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChangeSettingIntent, &type metadata for ChangeSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1005DCB10);
  }
  return result;
}

unint64_t sub_1003DA040()
{
  unint64_t result;

  result = qword_1005DCB18;
  if (!qword_1005DCB18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChangeSettingIntent, &type metadata for ChangeSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1005DCB18);
  }
  return result;
}

unint64_t sub_1003DA088()
{
  unint64_t result;

  result = qword_1005DCB20;
  if (!qword_1005DCB20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ChangeSettingIntent, &type metadata for ChangeSettingIntent);
    atomic_store(result, (unint64_t *)&qword_1005DCB20);
  }
  return result;
}

uint64_t sub_1003DA0CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ChangeSettingIntent.perform()>>, 1);
}

uint64_t sub_1003DA0DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static ChangeSettingIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for ChangeSettingIntent()
{
  return &type metadata for ChangeSettingIntent;
}

uint64_t sub_1003DA0FC()
{
  return sub_100016638(&qword_1005DCB30, &qword_1005DCB38, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_1003DA128()
{
  return sub_100016638((unint64_t *)&qword_1005D1B40, (uint64_t *)&unk_1005D0690, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1003DA154()
{
  uint64_t v0;

  return swift_deallocObject(v0, 25, 7);
}

void sub_1003DA178()
{
  uint64_t v0;

  sub_1003D9790(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1003DA198()
{
  return sub_1003DA1D4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D91F8);
}

uint64_t sub_1003DA1B8()
{
  return sub_1003DA1D4((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1003D9394);
}

uint64_t sub_1003DA1D4(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003DA1F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1003DA21C()
{
  uint64_t v0;

  sub_1003D8E1C(*(void ***)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1003DA224()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003DA238()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1003DA27C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1003D8218(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1003DA29C()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  unsigned __int8 v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v0 = (void *)objc_opt_self(ICSettingsUtilities);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2, v3);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_1001CBB70((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, &type metadata for Bool, 6))
      return v5;
  }
  else
  {
    sub_100012DDC((uint64_t)v7, &qword_1005CF190);
  }
  return 1;
}

uint64_t sub_1003DA38C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003DA3B0(unsigned __int8 *a1@<X8>)
{
  uint64_t v1;

  sub_1003D96E0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1003DA3D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t sub_1003DA3F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(__int128 *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v10;
  __int128 v12;
  __int128 v13;

  v9 = *(void (**)(__int128 *, uint64_t, uint64_t, uint64_t, __n128))(a1 + 32);
  if (a2)
  {
    *((_QWORD *)&v13 + 1) = swift_getObjectType(a2);
    *(_QWORD *)&v12 = a2;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  v10 = swift_unknownObjectRetain(a2);
  v9(&v12, a3, a4, a5, v10);
  return sub_1000160C8((uint64_t)&v12);
}

void sub_1003DA47C(uint64_t a1, uint64_t a2)
{
  sub_1003DA508(a1, a2, (unint64_t *)&qword_1005D2500, NSManagedObjectID_ptr);
}

uint64_t sub_1003DA490(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  v3 = a1;
  if (*(unsigned __int8 *)(a2 + 32) == a1)
    return 0;
  result = 0;
  v5 = v2 - 1;
  while (v5 != result)
  {
    v6 = *(unsigned __int8 *)(a2 + 33 + result++);
    if (v6 == v3)
      return result;
  }
  return 0;
}

void sub_1003DA4F4(uint64_t a1, uint64_t a2)
{
  sub_1003DA508(a1, a2, (unint64_t *)&unk_1005D6450, UISheetPresentationControllerDetent_ptr);
}

void sub_1003DA508(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v7;
  id v8;
  void *v9;
  char v10;
  uint64_t i;
  id v12;
  void *v13;
  char v14;
  uint64_t v15;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v7 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v8 = *(id *)(a2 + 32);
      }
      v9 = v8;
      a4 = (_QWORD *)sub_1000163BC(0, a3, a4);
      v10 = static NSObject.== infix(_:_:)(v9);

      if ((v10 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          a3 = (unint64_t *)(i + 1);
          if (__OFADD__(i, 1))
            break;
          if (a3 == (unint64_t *)v7)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i + 1, a2);
          }
          else
          {
            if (((unint64_t)a3 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if ((unint64_t)a3 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v12 = *(id *)(a2 + 32 + 8 * (_QWORD)a3);
          }
          v13 = v12;
          v14 = static NSObject.== infix(_:_:)(v12);

          if ((v14 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        v15 = a2 < 0 ? a2 : a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a2);
        v7 = _CocoaArrayWrapper.endIndex.getter(v15);
        swift_bridgeObjectRelease(a2);
        if (v7)
          continue;
      }
      return;
    }
  }
}

void sub_1003DA6A0(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  objc_class *ObjectType;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  unint64_t v19;
  id v20;
  id v21;
  double v22;
  NSString *v23;
  char *v24;
  uint64_t v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v32;
  NSString *v33;
  id v34;
  char v35;
  Class isa;
  id v37;
  uint64_t v38;
  id v39;
  _OWORD v40[2];
  __int128 v41;
  void *v42;
  objc_super v43;

  v2 = v1;
  ObjectType = (objc_class *)swift_getObjectType(v1);
  sub_1003DAEA8();
  if (a1)
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)NSMutableAttributedString), "initWithAttributedString:", a1);
    v6 = objc_msgSend(v5, "string");
    static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    v8 = v7;

    v9 = objc_allocWithZone((Class)NSString);
    v10 = String._bridgeToObjectiveC()();
    v11 = objc_msgSend(v9, "initWithString:", v10, swift_bridgeObjectRelease(v8).n128_f64[0]);

    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "rangeOfString:", v12);
    v15 = v14;

    if (v13 == (id)NSNotFound.getter(v16)
      || !*(_QWORD *)&v2[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menu])
    {
      if (v2[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_preservesMenuLineHeight] == 1)
      {
        v19 = sub_100135F1C((uint64_t)_swiftEmptyArrayStorage);
        v20 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
        v21 = sub_1003DB164();
        v22 = sub_10017BB38();

        objc_msgSend(v20, "setMinimumLineHeight:", v22);
        v23 = NSBaselineOffsetAttributeName;
        v24 = (char *)sub_1003DB164();
        v25 = OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font;
        objc_msgSend(*(id *)&v24[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font], "lineHeight");
        v27 = *(double *)&v24[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_minimumHeight];
        if (v26 + 8.0 >= v27)
        {

          v30 = 4.0;
        }
        else
        {
          objc_msgSend(*(id *)&v24[v25], "lineHeight");
          v29 = v28;

          v30 = (v27 - v29) * 0.5;
        }
        v42 = &type metadata for CGFloat;
        *(double *)&v41 = v30;
        sub_1000160B8(&v41, v40);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
        sub_10024E914(v40, v23, isUniquelyReferenced_nonNull_native);
        v32 = v19;

        swift_bridgeObjectRelease(0x8000000000000000);
        v42 = (void *)sub_1000163BC(0, &qword_1005DCBC0, NSMutableParagraphStyle_ptr);
        *(_QWORD *)&v41 = v20;
        sub_1000160B8(&v41, v40);
        v33 = NSParagraphStyleAttributeName;
        v34 = v20;
        v35 = swift_isUniquelyReferenced_nonNull_native(v32);
        sub_10024E914(v40, v33, v35);

        swift_bridgeObjectRelease(0x8000000000000000);
        type metadata accessor for Key(0);
        sub_1001797A4();
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        v37 = objc_msgSend(v5, "ic_range", swift_bridgeObjectRelease(v32).n128_f64[0]);
        objc_msgSend(v5, "addAttributes:range:", isa, v37, v38);

      }
    }
    else
    {
      v17 = sub_1003DB164();
      v18 = objc_msgSend((id)objc_opt_self(NSAttributedString), "attributedStringWithAttachment:", v17);

      objc_msgSend(v5, "replaceCharactersInRange:withAttributedString:", v13, v15, v18);
    }
    v43.receiver = v2;
    v43.super_class = ObjectType;
    v39 = v5;
    objc_msgSendSuper2(&v43, "setAttributedText:", v39);

  }
  else
  {
    __break(1u);
  }
}

id sub_1003DAA9C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v14;
  char *v15;
  void *v16;
  char *v17;
  id v18;
  char *v19;
  id v20;
  id v21;
  id v22;
  double left;
  double bottom;
  double right;
  id v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  objc_class *ObjectType;
  objc_super v33;

  v7 = v6;
  ObjectType = (objc_class *)swift_getObjectType(v7);
  v14 = OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menu;
  *(_QWORD *)&v7[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menu] = 0;
  v7[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_preservesMenuLineHeight] = 0;
  v15 = &v7[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_fontSymbolicTraits];
  *(_DWORD *)v15 = 0;
  v15[4] = 1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment] = 0;
  v16 = *(void **)&v7[v14];
  *(_QWORD *)&v7[v14] = a1;
  v17 = v7;
  v18 = a1;

  v19 = &v17[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menuReplacementSubstring];
  *(_QWORD *)v19 = a2;
  *((_QWORD *)v19 + 1) = a3;
  *(_QWORD *)&v17[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_textStyle] = a4;
  *(_DWORD *)v15 = a5;
  v15[4] = BYTE4(a5) & 1;
  *(_QWORD *)&v17[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_foregroundColor] = a6;
  v20 = a4;
  v21 = a6;

  v33.receiver = v17;
  v33.super_class = ObjectType;
  v22 = objc_msgSendSuper2(&v33, "initWithFrame:textContainer:", 0, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v22, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v22, "setEditable:", 0);
  objc_msgSend(v22, "setSelectable:", 0);
  objc_msgSend(v22, "setScrollEnabled:", 0);
  objc_msgSend(v22, "setShowsHorizontalScrollIndicator:", 0);
  objc_msgSend(v22, "setShowsVerticalScrollIndicator:", 0);
  objc_msgSend(v22, "setAdjustsFontForContentSizeCategory:", 0);
  objc_msgSend(v22, "setInsetsLayoutMarginsFromSafeArea:", 0);
  left = UIEdgeInsetsZero.left;
  bottom = UIEdgeInsetsZero.bottom;
  right = UIEdgeInsetsZero.right;
  objc_msgSend(v22, "setContentInset:", UIEdgeInsetsZero.top, left, bottom, right);
  objc_msgSend(v22, "setContentInsetAdjustmentBehavior:", 2);
  v26 = objc_msgSend(v22, "textContainer");
  objc_msgSend(v26, "setLineFragmentPadding:", 0.0);

  v27 = (void *)objc_opt_self(UIColor);
  v28 = v22;
  v29 = objc_msgSend(v27, "clearColor");
  objc_msgSend(v28, "setBackgroundColor:", v29);

  v30 = v28;
  objc_msgSend(v30, "setTextContainerInset:", UIEdgeInsetsZero.top, left, bottom, right);

  return v30;
}

void sub_1003DAEA8()
{
  char *v0;
  id v1;
  void *v2;
  char *v3;
  id v4;
  void *v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  char *v14;
  void *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;

  v1 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InlineMenuButtonTextAttachment()), "init");
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment];
  *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment] = v1;

  v3 = (char *)sub_1003DB164();
  v4 = objc_msgSend(v0, "traitCollection");
  v5 = *(void **)&v3[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_traitCollection];
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_traitCollection] = v4;

  if ((v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_fontSymbolicTraits + 4] & 1) != 0)
  {
    v6 = (char *)sub_1003DB164();
    v7 = objc_msgSend((id)objc_opt_self(UIFont), "preferredFontForTextStyle:", *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_textStyle]);
LABEL_4:
    v9 = *(void **)&v6[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font];
    *(_QWORD *)&v6[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_font] = v7;

    v10 = (char *)sub_1003DB164();
    v11 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_foregroundColor];
    v12 = *(void **)&v10[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_foregroundColor];
    *(_QWORD *)&v10[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_foregroundColor] = v11;
    v13 = v11;

    v14 = (char *)sub_1003DB164();
    v15 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_menu];
    v16 = *(void **)&v14[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_menu];
    *(_QWORD *)&v14[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_menu] = v15;
    v17 = v15;

    v32 = (char *)sub_1003DB164();
    v18 = OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_textStyle;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_textStyle]);
    v21 = v20;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIFontTextStyleSubheadline);
    v24 = v22;
    if (v19 == v23 && (v25 = 28.0, v21 == v22))
    {
      v26 = v21;
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v22, 0);
      swift_bridgeObjectRelease(v21);
      swift_bridgeObjectRelease(v24);
      v25 = 28.0;
      if ((v27 & 1) != 0)
      {
LABEL_14:
        *(double *)&v32[OBJC_IVAR____TtC11MobileNotes30InlineMenuButtonTextAttachment_minimumHeight] = v25;

        return;
      }
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)&v0[v18]);
      v21 = v29;
      v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIFontTextStyleFootnote);
      v26 = v30;
      if (v28 != v31 || (v25 = 26.0, v21 != v30))
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v28, v21, v31, v30, 0) & 1) != 0)
          v25 = 26.0;
        else
          v25 = 0.0;
      }
    }
    swift_bridgeObjectRelease(v21);
    swift_bridgeObjectRelease(v26);
    goto LABEL_14;
  }
  v8 = *(unsigned int *)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_fontSymbolicTraits];
  v6 = (char *)sub_1003DB164();
  v7 = objc_msgSend((id)objc_opt_self(UIFont), "ic_preferredFontForStyle:symbolicTraits:", *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView_textStyle], v8);
  if (v7)
    goto LABEL_4;
  __break(1u);
}

id sub_1003DB164()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes24InlineMenuButtonTextView____lazy_storage___menuAttachment);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for InlineMenuButtonTextAttachment()), "init");
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

void sub_1003DB2C0()
{
  void *v0;
  objc_class *ObjectType;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  double v28;
  _QWORD v29[5];
  uint64_t v30;
  objc_super v31;
  objc_super v32;
  uint64_t v33;
  char v34;
  objc_super v35;

  ObjectType = (objc_class *)swift_getObjectType();
  v35.receiver = v0;
  v35.super_class = ObjectType;
  v2 = objc_msgSendSuper2(&v35, "attributedText");
  if (!v2)
    goto LABEL_11;
  v3 = v2;
  v4 = objc_msgSend(v2, "string");

  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  v7 = objc_allocWithZone((Class)NSMutableAttributedString);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithString:", v8, swift_bridgeObjectRelease(v6).n128_f64[0]);

  v10 = sub_1003DB5A0();
  if (!v10)
    return;
  v11 = (void *)v10;
  v32.super_class = ObjectType;
  v33 = 0;
  v34 = 1;
  v32.receiver = v0;
  v12 = objc_msgSendSuper2(&v32, "attributedText");
  if (!v12)
    goto LABEL_12;
  v13 = v12;
  v14 = objc_msgSend(v12, "string");

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v18 = String.count.getter(v15, v17);
  *(_QWORD *)&v19 = swift_bridgeObjectRelease(v17).n128_u64[0];
  v31.receiver = v0;
  v31.super_class = ObjectType;
  v20 = objc_msgSendSuper2(&v31, "attributedText", v19);
  if (!v20)
  {
LABEL_13:
    __break(1u);
    return;
  }
  v21 = v20;
  v22 = swift_allocObject(&unk_10056EB70, 24, 7);
  *(_QWORD *)(v22 + 16) = &v33;
  v23 = swift_allocObject(&unk_10056EB98, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_1003DC010;
  *(_QWORD *)(v23 + 24) = v22;
  v29[4] = sub_1001F789C;
  v30 = v23;
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 1107296256;
  v29[2] = sub_1003DA3F0;
  v29[3] = &unk_10056EBB0;
  v24 = _Block_copy(v29);
  v25 = v30;
  swift_retain(v23);
  objc_msgSend(v21, "enumerateAttribute:inRange:options:usingBlock:", NSAttachmentAttributeName, 0, v18, 0, v24, swift_release(v25).n128_f64[0]);

  _Block_release(v24);
  LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v23, "", 96, 188, 89, 1);
  swift_release(v23);
  if ((v21 & 1) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v26 = v33;
  v27 = v34;
  *(_QWORD *)&v28 = swift_release(v22).n128_u64[0];
  if ((v27 & 1) == 0)
    objc_msgSend(v9, "addAttribute:value:range:", UIAccessibilityTokenAttachment, v11, v26, 1, v28);

}

uint64_t sub_1003DB5A0()
{
  void *v0;
  objc_class *ObjectType;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char isEscapingClosureAtFileLocation;
  uint64_t v17;
  char v18;
  double v19;
  id v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v28;
  objc_super v29;
  objc_super v30;
  uint64_t v31;
  char v32;

  ObjectType = (objc_class *)swift_getObjectType();
  v31 = 0;
  v32 = 1;
  v30.receiver = v0;
  v30.super_class = ObjectType;
  v2 = objc_msgSendSuper2(&v30, "attributedText");
  if (!v2)
    goto LABEL_13;
  v3 = v2;
  v4 = objc_msgSend(v2, "string");

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;

  v8 = String.count.getter(v5, v7);
  *(_QWORD *)&v9 = swift_bridgeObjectRelease(v7).n128_u64[0];
  v29.receiver = v0;
  v29.super_class = ObjectType;
  v10 = objc_msgSendSuper2(&v29, "attributedText", v9);
  if (!v10)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v11 = v10;
  v12 = swift_allocObject(&unk_10056EAF8, 24, 7);
  *(_QWORD *)(v12 + 16) = &v31;
  v13 = swift_allocObject(&unk_10056EB20, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1003DBFD8;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_1000165D8;
  v28 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003DA3F0;
  aBlock[3] = &unk_10056EB38;
  v14 = _Block_copy(aBlock);
  v15 = v28;
  swift_retain(v13);
  objc_msgSend(v11, "enumerateAttribute:inRange:options:usingBlock:", NSAttachmentAttributeName, 0, v8, 0, v14, swift_release(v15).n128_f64[0]);

  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v13, "", 96, 188, 89, 1);
  swift_release(v13);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v17 = v31;
  v18 = v32;
  *(_QWORD *)&v19 = swift_release(v12).n128_u64[0];
  if ((v18 & 1) != 0)
    return 0;
  v20 = objc_msgSend(v0, "layoutManager", v19);
  v21 = sub_1003DB164();
  if (v17 < 0)
  {
LABEL_15:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    return result;
  }
  v22 = v21;
  v23 = objc_msgSend(v20, "viewProviderForTextAttachment:characterIndex:", v21, v17);

  if (v23)
  {
    v24 = objc_msgSend(v23, "view");

    if (v24)
    {
      v25 = objc_opt_self(UIButton);
      result = swift_dynamicCastObjCClass(v24, v25);
      if (result)
        return result;

    }
  }
  return 0;
}

uint64_t sub_1003DB8F0()
{
  void *v0;
  objc_class *ObjectType;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t countAndFlagsBits;
  id v7;
  uint64_t v8;
  objc_super v10;
  Swift::String v11;

  ObjectType = (objc_class *)swift_getObjectType();
  v2 = (void *)sub_1003DB5A0();

  if (v2)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v11._countAndFlagsBits = 0xD000000000000035;
    v11._object = (void *)0x800000010048DC10;
    v4._object = (void *)0x800000010048DBE0;
    v4._countAndFlagsBits = 0xD000000000000025;
    v5._countAndFlagsBits = 0;
    v5._object = (void *)0xE000000000000000;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v11)._countAndFlagsBits;
  }
  else
  {
    v10.receiver = v0;
    v10.super_class = ObjectType;
    v7 = objc_msgSendSuper2(&v10, "accessibilityHint");
    if (!v7)
      return 0;
    v3 = v7;
    countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  }
  v8 = countAndFlagsBits;

  return v8;
}

void sub_1003DBAC0()
{
  void *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v0 = (void *)sub_1003DB5A0();
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "menu");
    if (!v2)
    {

      return;
    }
    v3 = v2;
    v4 = objc_msgSend(v2, "children");
    v5 = sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

    v7 = objc_msgSend(v3, "selectedElements");
    v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v7, v5);

    if ((unint64_t)v8 >> 62)
    {
      if (v8 < 0)
        v19 = v8;
      else
        v19 = v8 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v8);
      v9 = (void *)_CocoaArrayWrapper.endIndex.getter(v19);
      swift_bridgeObjectRelease(v8);
      if (v9)
      {
LABEL_5:
        if ((v8 & 0xC000000000000001) != 0)
        {
          v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v8);
        }
        else
        {
          v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v10)
          {
            __break(1u);
            goto LABEL_31;
          }
          v11 = *(id *)(v8 + 32);
        }
        v9 = v11;
        swift_bridgeObjectRelease(v8);
        sub_1003DA508((uint64_t)v9, v6, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
        if ((v13 & 1) != 0)
        {

          swift_bridgeObjectRelease(v6);
          return;
        }
        v10 = v12 + 1;
        if (!__OFADD__(v12, 1))
        {
          if (!((unint64_t)v6 >> 62))
          {
            v14 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (v14)
            {
LABEL_12:
              if (v10 == 0x8000000000000000 && v14 == -1)
                goto LABEL_40;
              v12 = v10 % v14;
              if ((v6 & 0xC000000000000001) == 0)
              {
                if ((v12 & 0x8000000000000000) != 0)
                {
                  __break(1u);
                }
                else if (v12 < *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
                {
                  v15 = *(id *)(v6 + 8 * v12 + 32);
                  goto LABEL_18;
                }
                __break(1u);
LABEL_40:
                __break(1u);
                return;
              }
LABEL_37:
              v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v6);
LABEL_18:
              v16 = v15;
              swift_bridgeObjectRelease(v6);
              v17 = objc_opt_self(UIAction);
              v18 = swift_dynamicCastObjCClass(v16, v17);
              if (v18)
              {
                objc_msgSend(v1, "sendAction:", v18);

              }
              else
              {

              }
              return;
            }
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
LABEL_32:
          if (v6 < 0)
            v20 = v6;
          else
            v20 = v6 & 0xFFFFFFFFFFFFFF8;
          v21 = v10;
          swift_bridgeObjectRetain(v6);
          v14 = _CocoaArrayWrapper.endIndex.getter(v20);
          swift_bridgeObjectRelease(v6);
          v10 = v21;
          if (v14)
            goto LABEL_12;
          goto LABEL_36;
        }
LABEL_31:
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      v9 = *(void **)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9)
        goto LABEL_5;
    }

    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v8);
  }
}

void sub_1003DBE4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  id v8;
  _BYTE v9[24];
  uint64_t v10;

  sub_1001F83A4(a1, (uint64_t)v9);
  if (v10)
  {
    v7 = sub_1000163BC(0, (unint64_t *)&unk_1005D8F50, NSTextAttachment_ptr);
    if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v7, 6) & 1) != 0)
    {

      *(_QWORD *)a5 = a2;
      *(_BYTE *)(a5 + 8) = 0;
    }
  }
  else
  {
    sub_1000160C8((uint64_t)v9);
  }
}

uint64_t type metadata accessor for InlineMenuButtonTextView()
{
  return objc_opt_self(_TtC11MobileNotes24InlineMenuButtonTextView);
}

uint64_t sub_1003DBFC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003DBFD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  sub_1003DBE4C(a1, a2, a3, a4, *(_QWORD *)(v4 + 16));
}

uint64_t sub_1003DBFE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003DBFF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003DC000()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

objc_class *sub_1003DC01C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  objc_class *v3;
  uint64_t v4;
  uint64_t v5;
  UIMenuElementSize preferredElementSize;
  id v7;
  Swift::String v8;
  Class isa;
  UIMenuElementSize v10;
  id v11;
  Swift::String v12;
  UIMenu v13;
  void *v14;
  id v15;
  Swift::OpaquePointer v17;
  Swift::OpaquePointer v18;
  UIImage_optional v19;
  UIImage_optional v20;

  v1 = OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menu;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menu);
  if (v2)
  {
    v3 = *(objc_class **)(v0 + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menu);
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005D8A40, UIMenu_ptr);
    v5 = sub_100012E18(&qword_1005CF6F0);
    preferredElementSize = swift_allocObject(v5, 48, 7);
    *(_OWORD *)(preferredElementSize + 16) = xmmword_100451BF0;
    *(_QWORD *)(preferredElementSize + 32) = sub_1003DC3BC();
    v7 = sub_1003DC520();
    *(_QWORD *)(preferredElementSize + 40) = v7;
    specialized Array._endMutation()(v7);
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v19.value.super.isa = 0;
    v19.is_nil = 0;
    isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v8, (Swift::String_optional)0, v19, (UIMenuIdentifier_optional)1, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v17).super.super.isa;
    v10 = swift_allocObject(v5, 48, 7);
    *(_OWORD *)(v10 + 16) = xmmword_100451BF0;
    v11 = sub_1003DC260();
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(v10 + 40) = isa;
    specialized Array._endMutation()(v11);
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v20.value.super.isa = 0;
    v20.is_nil = 0;
    v13.super.super.isa = UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v12, (Swift::String_optional)0, v20, 0, 0xFFFFFFFFFFFFFFFFLL, v10, v18).super.super.isa;
    v14 = *(void **)(v0 + v1);
    *(UIMenu *)(v4 + v1) = v13;
    v3 = v13.super.super.isa;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

void sub_1003DC188()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  unsigned int v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  id v12;

  v1 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  if (v1)
  {
    v2 = objc_opt_self(ICInclusionFilterTypeSelection);
    v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
    if (v3)
    {
      v1 = objc_msgSend(v3, "inclusionType");
      v4 = 0;
      goto LABEL_6;
    }
    v1 = 0;
  }
  v4 = 1;
LABEL_6:
  v5 = (void *)sub_1003DC260();
  objc_msgSend(v5, "setState:", v4);

  v6 = sub_1003DC3BC();
  v7 = v6;
  v8 = v4 ^ 1;
  if (v1)
    v9 = 0;
  else
    v9 = v8;
  objc_msgSend(v6, "setState:", v9);

  v10 = sub_1003DC520();
  v12 = v10;
  if (v1 == (id)1)
    v11 = v8;
  else
    v11 = 0;
  objc_msgSend(v10, "setState:", v11);

}

id sub_1003DC260()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056EC50, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003DCB74, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_1003DC3BC()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056EC28, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003DCB6C, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

id sub_1003DC520()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  char *v4;
  id v5;
  NSString v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;

  v1 = OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude];
  }
  else
  {
    v4 = v0;
    sub_1000163BC(0, (unint64_t *)&unk_1005CF6E0, UIAction_ptr);
    v5 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v6 = String._bridgeToObjectiveC()();
    v7 = objc_msgSend(v5, "localizedStringForKey:value:table:", v6, 0, 0);

    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = swift_allocObject(&unk_10056EC00, 24, 7);
    *(_QWORD *)(v11 + 16) = v0;
    v12 = v0;
    v13 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)(v8, v10, 0, 0, 0, 0, 0, 0, 0, 0, 0, sub_1003DCB64, v11);
    v14 = *(void **)&v0[v1];
    *(_QWORD *)&v4[v1] = v13;
    v3 = v13;

    v2 = 0;
  }
  v15 = v2;
  return v3;
}

uint64_t sub_1003DC684()
{
  return sub_1000163BC(0, (unint64_t *)&unk_1005DCC10, ICInclusionFilterTypeSelection_ptr);
}

void sub_1003DC6AC(uint64_t a1, char *a2)
{
  void *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v3 = *(void **)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection];
  *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  sub_1003DC188();
  v4 = *(void (**)(uint64_t))&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  if (v4)
  {
    v5 = *(_QWORD *)&a2[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange + 8];
    v6 = swift_retain(v5);
    v4(v6);
    sub_100012C50((uint64_t)v4, v5);
  }
}

uint64_t sub_1003DC730(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x1D0))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithInclusionType:", 0);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_1003DC188();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

uint64_t sub_1003DC800(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  uint64_t result;
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0x1D0))();
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v3)), "initWithInclusionType:", 1);
  v5 = *(void **)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection);
  *(_QWORD *)((char *)a2 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection) = v4;
  v6 = v4;

  objc_msgSend(a2, "setNeedsUpdateConfiguration");
  result = sub_1003DC188();
  v8 = *(void (**)(uint64_t))((char *)a2
                                      + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange);
  if (v8)
  {
    v9 = *(_QWORD *)((char *)a2
                   + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange
                   + 8);
    v10 = swift_retain(v9);
    v8(v10);
    return sub_100012C50((uint64_t)v8, v9);
  }
  return result;
}

id sub_1003DC96C(void *a1)
{
  char *v1;
  id v3;
  objc_super v5;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menu] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude] = 0;
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for FolderComposerFilterCellInclusion();
  v3 = objc_msgSendSuper2(&v5, "initWithCoder:", a1);

  return v3;
}

void sub_1003DCA0C()
{
  uint64_t v0;

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionOff));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionInclude));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC11MobileNotes33FolderComposerFilterCellInclusion____lazy_storage___menuActionExclude));
}

id sub_1003DCA58()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCellInclusion();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCellInclusion()
{
  return objc_opt_self(_TtC11MobileNotes33FolderComposerFilterCellInclusion);
}

objc_class *sub_1003DCB00()
{
  return sub_1003DC01C();
}

void sub_1003DCB20()
{
  sub_1003DC188();
}

uint64_t sub_1003DCB40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003DCB64(uint64_t a1)
{
  uint64_t v1;

  return sub_1003DC800(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_1003DCB6C(uint64_t a1)
{
  uint64_t v1;

  return sub_1003DC730(a1, *(_QWORD **)(v1 + 16));
}

void sub_1003DCB74(uint64_t a1)
{
  uint64_t v1;

  sub_1003DC6AC(a1, *(char **)(v1 + 16));
}

void sub_1003DCB84(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  id v6;
  int *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  id v19;
  unsigned __int8 v20;

  v4 = sub_1000163BC(0, (unint64_t *)&unk_1005D90A0, ICFolder_ptr);
  ICFolderObject<>.entityIdentifier.getter(v4);
  v5 = objc_msgSend(a1, "objectID");
  v6 = objc_msgSend(v5, "URIRepresentation");

  v7 = (int *)type metadata accessor for FolderEntity(0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v6);

  v8 = objc_msgSend(a1, "localizedTitle");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = (uint64_t *)(a2 + v7[6]);
  *v12 = v9;
  v12[1] = v11;
  v13 = objc_msgSend(a1, "account");
  v14 = objc_msgSend(v13, "localizedName");

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xE000000000000000;
  }
  v18 = (uint64_t *)(a2 + v7[7]);
  *v18 = v15;
  v18[1] = v17;
  v19 = a1;
  *(_BYTE *)(a2 + v7[9]) = objc_msgSend(v19, "folderType") == 2;
  v20 = objc_msgSend(v19, "isSharedViaICloud");

  *(_BYTE *)(a2 + v7[8]) = v20;
}

void sub_1003DCD14(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  id v6;
  int *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  v4 = sub_100012E18(qword_1005DCCA0);
  ICFolderObject<>.entityIdentifier.getter(v4);
  v5 = objc_msgSend(a1, "objectID");
  v6 = objc_msgSend(v5, "URIRepresentation");

  v7 = (int *)type metadata accessor for FolderEntity(0);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v6);

  v8 = objc_msgSend(a1, "localizedTitle");
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  v12 = (uint64_t *)(a2 + v7[6]);
  *v12 = v9;
  v12[1] = v11;
  v13 = objc_msgSend(a1, "account");
  v14 = objc_msgSend(v13, "localizedName");

  if (v14)
  {
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0xE000000000000000;
  }
  v18 = (uint64_t *)(a2 + v7[7]);
  *v18 = v15;
  v18[1] = v17;
  v19 = objc_opt_self(ICFolder);
  v20 = swift_dynamicCastObjCClass(a1, v19);
  if (v20)
  {
    v21 = (void *)v20;
    v22 = a1;
    *(_BYTE *)(a2 + v7[9]) = objc_msgSend(v21, "folderType") == 2;
    LOBYTE(v21) = objc_msgSend(v21, "isSharedViaICloud");

    *(_BYTE *)(a2 + v7[8]) = (_BYTE)v21;
  }
  else
  {

    *(_BYTE *)(a2 + v7[9]) = 0;
    *(_BYTE *)(a2 + v7[8]) = 0;
  }
}

uint64_t sub_1003DCED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v4 + 72) = a3;
  *(_QWORD *)(v4 + 80) = a4;
  *(_QWORD *)(v4 + 64) = a1;
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_100012E18(&qword_1005D1EB0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 88) = swift_task_alloc(v6);
  *(_QWORD *)(v4 + 96) = swift_task_alloc(v6);
  *(_QWORD *)(v4 + 104) = swift_task_alloc(v6);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v4 + 32) = v7;
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 32);
  v8 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v4 + 112) = static MainActor.shared.getter(v8);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor, v9);
  *(_QWORD *)(v4 + 120) = v10;
  *(_QWORD *)(v4 + 128) = v11;
  return swift_task_switch(sub_1003DCF98, v10, v11);
}

uint64_t sub_1003DCF98()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  v1 = *(_QWORD **)(v0 + 104);
  IntentParameter.wrappedValue.getter(v1);
  v2 = type metadata accessor for FolderEntity(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2);
  v5 = sub_1003DEAFC((uint64_t)v1);
  if (v4 == 1)
  {
    v6 = (*(uint64_t (**)(uint64_t))(v0 + 72))(v5);
    if (v6)
    {
      v7 = (void *)v6;
      *(_QWORD *)(v0 + 56) = &OBJC_PROTOCOL___ICFolderObject;
      v8 = swift_dynamicCastObjCProtocolConditional(v6, 1, v0 + 56);
      if (v8)
      {
        v9 = (void *)v8;
        v11 = *(_QWORD *)(v0 + 88);
        v10 = *(_QWORD *)(v0 + 96);
        v12 = v7;
        sub_1003DCD14(v9, v10);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v10, 0, 1, v2);
        sub_1003DEB3C(v10, v11);
        IntentParameter.wrappedValue.setter(v11);
        sub_1003DEAFC(v10);
      }

    }
  }
  v13 = *(_QWORD **)(v0 + 64);
  v13[3] = sub_100012E18(&qword_1005D1F90);
  v13[4] = sub_100016638(&qword_1005DCC98, &qword_1005D1F90, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
  v14 = sub_10012D160(v13);
  v15 = (_QWORD *)swift_task_alloc(dword_1005D1EBC);
  *(_QWORD *)(v0 + 136) = v15;
  *v15 = v0;
  v15[1] = sub_1003DD110;
  return CreateNoteIntent.perform()((uint64_t)v14);
}

uint64_t sub_1003DD110()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1003DD1C8;
  else
    v4 = sub_1003DD170;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 120), *(_QWORD *)(v2 + 128));
}

uint64_t sub_1003DD170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003DD1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(_QWORD **)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 112));
  sub_100185FE0(v4);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003DD320(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a1;
  v4[3] = a3;
  v5 = *a2;
  v4[4] = a4;
  v4[5] = v5;
  return swift_task_switch(sub_1003DD340, 0, 0);
}

uint64_t sub_1003DD340()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;

  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 84));
  *(_DWORD *)(v0 + 80) = ParagraphStyle.namedStyle.getter(*(_BYTE *)(v0 + 84));
  v1 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 48) = v1;
  *(_QWORD *)(v0 + 56) = static MainActor.shared.getter(v1);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor, v2);
  return swift_task_switch(sub_1003DD3C4, v3, v4);
}

uint64_t sub_1003DD3C4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, __n128);
  __n128 v3;

  v1 = *(unsigned int *)(v0 + 80);
  v2 = *(void (**)(uint64_t, __n128))(v0 + 24);
  v3 = swift_release(*(_QWORD *)(v0 + 56));
  v2(v1, v3);
  return swift_task_switch(sub_1003DD418, 0, 0);
}

uint64_t sub_1003DD418()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[6];
  v2 = (_QWORD *)v0[2];
  v2[3] = sub_100012E18((uint64_t *)&unk_1005D0690);
  v2[4] = sub_100016638((unint64_t *)&qword_1005D1B40, (uint64_t *)&unk_1005D0690, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
  v3 = sub_10012D160(v2);
  v0[8] = v3;
  v0[9] = static MainActor.shared.getter(v3);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v1, &protocol witness table for MainActor, v4);
  return swift_task_switch(sub_1003DD4C0, v5, v6);
}

uint64_t sub_1003DD4C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 72));
  static IntentResult.result<>()(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003DD5F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[3] = a3;
  v4[4] = a4;
  v4[2] = a1;
  v6 = type metadata accessor for AttributedString(0);
  v7 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a2;
  v4[5] = v7;
  v4[6] = v8;
  return swift_task_switch(sub_1003DD654, 0, 0);
}

uint64_t sub_1003DD654()
{
  _QWORD *v0;
  _QWORD *v1;
  void (*v2)(void);
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (_QWORD *)v0[5];
  v2 = (void (*)(void))v0[3];
  v3 = (_QWORD *)v0[2];
  sub_1000163BC(0, &qword_1005DCC60, NSAttributedString_ptr);
  IntentParameter.wrappedValue.getter(v1);
  v4 = (void *)NSAttributedString.init(_:)(v1);
  v2();

  v3[3] = sub_100012E18((uint64_t *)&unk_1005D0690);
  v3[4] = sub_100016638((unint64_t *)&qword_1005D1B40, (uint64_t *)&unk_1005D0690, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
  v0[7] = sub_10012D160(v3);
  v5 = type metadata accessor for MainActor(0);
  v0[8] = static MainActor.shared.getter(v5);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor, v6);
  return swift_task_switch(sub_1003DD754, v7, v8);
}

uint64_t sub_1003DD754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_release(*(_QWORD *)(v0 + 64));
  static IntentResult.result<>()(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003DD890()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = objc_msgSend(v0, "interactions");
  v2 = sub_100012E18(&qword_1005D1FF0);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_15:
    swift_bridgeObjectRelease(v3);
    return;
  }
  if (v3 < 0)
    v10 = v3;
  else
    v10 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  v4 = _CocoaArrayWrapper.endIndex.getter(v10);
  swift_bridgeObjectRelease(v3);
  if (!v4)
    goto LABEL_15;
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
      {
        v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      }
      else
      {
        v6 = *(_QWORD *)(v3 + 8 * i + 32);
        swift_unknownObjectRetain(v6);
      }
      v7 = type metadata accessor for UIAppIntentInteraction(0);
      v8 = swift_dynamicCastClass(v6, v7);
      if (v8)
        objc_msgSend(v0, "removeInteraction:", v8);
      swift_unknownObjectRelease(v6, v9);
    }
    goto LABEL_15;
  }
  __break(1u);
}

void sub_1003DD9F8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t ObjectType;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;
  ValueMetadata *v20;
  unint64_t v21;

  v2 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NoteID(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &type metadata for AppIntentsFeature;
  v21 = sub_10013F998();
  v18[0] = "viewActions";
  v18[1] = 11;
  v19 = 2;
  v8 = isFeatureEnabled(_:)(v18);
  sub_1000153C0(v18);
  if ((v8 & 1) != 0)
  {
    if (a1)
    {
      ObjectType = swift_getObjectType();
      v10 = a1;
      ICSearchIndexableNote<>.entityIdentifier.getter(ObjectType);
      v18[0] = _swiftEmptyArrayStorage;
      v11 = sub_100019C6C(&qword_1005DCC28, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
      v12 = sub_100012E18(&qword_1005DCC30);
      v13 = sub_100016638(&qword_1005DCC38, &qword_1005DCC30, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v18, v12, v13, v2, v11);
      v14 = type metadata accessor for NoteEntity(0);
      objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
      v15 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
      v16 = (void *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v14, v7, v4, v14, v15);
      UIView.annotate(with:)();

    }
    else
    {
      UIView.removeAnnotation()();
    }
  }
}

void sub_1003DDC58(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t ObjectType;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;
  ValueMetadata *v20;
  unint64_t v21;

  v2 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for FolderID(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &type metadata for AppIntentsFeature;
  v21 = sub_10013F998();
  v18[0] = "viewActions";
  v18[1] = 11;
  v19 = 2;
  v8 = isFeatureEnabled(_:)(v18);
  sub_1000153C0(v18);
  if ((v8 & 1) != 0)
  {
    if (a1)
    {
      ObjectType = swift_getObjectType();
      v10 = a1;
      ICFolderObject<>.entityIdentifier.getter(ObjectType);
      v18[0] = _swiftEmptyArrayStorage;
      v11 = sub_100019C6C(&qword_1005DCC28, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
      v12 = sub_100012E18(&qword_1005DCC30);
      v13 = sub_100016638(&qword_1005DCC38, &qword_1005DCC30, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v18, v12, v13, v2, v11);
      v14 = type metadata accessor for FolderEntity(0);
      objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
      v15 = sub_100019C6C((unint64_t *)&qword_1005D7870, type metadata accessor for FolderEntity, (uint64_t)&protocol conformance descriptor for FolderEntity);
      v16 = (void *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v14, v7, v4, v14, v15);
      UIView.annotate(with:)();

    }
    else
    {
      UIView.removeAnnotation()();
    }
  }
}

void sub_1003DDEB8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t ObjectType;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;
  ValueMetadata *v20;
  unint64_t v21;

  v2 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AccountID(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &type metadata for AppIntentsFeature;
  v21 = sub_10013F998();
  v18[0] = "viewActions";
  v18[1] = 11;
  v19 = 2;
  v8 = isFeatureEnabled(_:)(v18);
  sub_1000153C0(v18);
  if ((v8 & 1) != 0)
  {
    if (a1)
    {
      ObjectType = swift_getObjectType();
      v10 = a1;
      ICAccountObject<>.entityIdentifier.getter(ObjectType);
      v18[0] = _swiftEmptyArrayStorage;
      v11 = sub_100019C6C(&qword_1005DCC28, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
      v12 = sub_100012E18(&qword_1005DCC30);
      v13 = sub_100016638(&qword_1005DCC38, &qword_1005DCC30, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v18, v12, v13, v2, v11);
      v14 = type metadata accessor for AccountEntity(0);
      objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
      v15 = sub_100019C6C((unint64_t *)&unk_1005CEE40, type metadata accessor for AccountEntity, (uint64_t)&protocol conformance descriptor for AccountEntity);
      v16 = (void *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v14, v7, v4, v14, v15);
      UIView.annotate(with:)();

    }
    else
    {
      UIView.removeAnnotation()();
    }
  }
}

void sub_1003DE118(uint64_t a1)
{
  void *v1;
  char v3;
  uint64_t v4;
  uint64_t v5;
  __objc2_prot *v6;
  __objc2_prot *v7;
  _QWORD v8[2];
  char v9;
  ValueMetadata *v10;
  unint64_t v11;

  v10 = &type metadata for AppIntentsFeature;
  v11 = sub_10013F998();
  v8[0] = "viewActions";
  v8[1] = 11;
  v9 = 2;
  v3 = isFeatureEnabled(_:)(v8);
  sub_1000153C0(v8);
  if ((v3 & 1) != 0)
  {
    if (!a1)
      goto LABEL_8;
    v7 = &OBJC_PROTOCOL___ICFolderObject;
    v4 = swift_dynamicCastObjCProtocolConditional(a1, 1, &v7);
    if (v4)
    {
      objc_msgSend(v1, "ic_annotateWithFolder:", v4);
      return;
    }
    v6 = &OBJC_PROTOCOL___ICAccountObject;
    v5 = swift_dynamicCastObjCProtocolConditional(a1, 1, &v6);
    if (v5)
      objc_msgSend(v1, "ic_annotateWithAccount:", v5);
    else
LABEL_8:
      UIView.removeAnnotation()();
  }
}

void sub_1003DE250(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD v17[2];
  char v18;
  ValueMetadata *v19;
  unint64_t v20;

  v2 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TagID(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &type metadata for AppIntentsFeature;
  v20 = sub_10013F998();
  v17[0] = "viewActions";
  v17[1] = 11;
  v18 = 2;
  v8 = isFeatureEnabled(_:)(v17);
  sub_1000153C0(v17);
  if ((v8 & 1) != 0)
  {
    if (a1)
    {
      v9 = a1;
      ICHashtag.entityIdentifier.getter();
      v17[0] = _swiftEmptyArrayStorage;
      v10 = sub_100019C6C(&qword_1005DCC28, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
      v11 = sub_100012E18(&qword_1005DCC30);
      v12 = sub_100016638(&qword_1005DCC38, &qword_1005DCC30, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v17, v11, v12, v2, v10);
      v13 = type metadata accessor for TagEntity(0);
      objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
      v14 = sub_100019C6C((unint64_t *)&unk_1005CEE70, type metadata accessor for TagEntity, (uint64_t)&protocol conformance descriptor for TagEntity);
      v15 = (void *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v13, v7, v4, v13, v14);
      UIView.annotate(with:)();

    }
    else
    {
      UIView.removeAnnotation()();
    }
  }
}

void sub_1003DE4A0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t ObjectType;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;
  ValueMetadata *v20;
  unint64_t v21;

  v2 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for AttachmentID(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &type metadata for AppIntentsFeature;
  v21 = sub_10013F998();
  v18[0] = "viewActions";
  v18[1] = 11;
  v19 = 2;
  v8 = isFeatureEnabled(_:)(v18);
  sub_1000153C0(v18);
  if ((v8 & 1) != 0)
  {
    if (a1)
    {
      ObjectType = swift_getObjectType();
      v10 = a1;
      ICAttachmentObject<>.entityIdentifier.getter(ObjectType);
      v18[0] = _swiftEmptyArrayStorage;
      v11 = sub_100019C6C(&qword_1005DCC28, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
      v12 = sub_100012E18(&qword_1005DCC30);
      v13 = sub_100016638(&qword_1005DCC38, &qword_1005DCC30, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v18, v12, v13, v2, v11);
      v14 = type metadata accessor for AttachmentEntity(0);
      objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
      v15 = sub_100019C6C((unint64_t *)&qword_1005D2C60, type metadata accessor for AttachmentEntity, (uint64_t)&protocol conformance descriptor for AttachmentEntity);
      v16 = (void *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v14, v7, v4, v14, v15);
      UIView.annotate(with:)();

    }
    else
    {
      UIView.removeAnnotation()();
    }
  }
}

void sub_1003DE700(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t ObjectType;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _QWORD v18[2];
  char v19;
  ValueMetadata *v20;
  unint64_t v21;

  v2 = type metadata accessor for AppEntityVisualState(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TableID(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = &type metadata for AppIntentsFeature;
  v21 = sub_10013F998();
  v18[0] = "viewActions";
  v18[1] = 11;
  v19 = 2;
  v8 = isFeatureEnabled(_:)(v18);
  sub_1000153C0(v18);
  if ((v8 & 1) != 0)
  {
    if (a1)
    {
      ObjectType = swift_getObjectType();
      v10 = a1;
      ICTableObject<>.tableEntityIdentifier.getter(ObjectType);
      v18[0] = _swiftEmptyArrayStorage;
      v11 = sub_100019C6C(&qword_1005DCC28, (uint64_t (*)(uint64_t))&type metadata accessor for AppEntityVisualState, (uint64_t)&protocol conformance descriptor for AppEntityVisualState);
      v12 = sub_100012E18(&qword_1005DCC30);
      v13 = sub_100016638(&qword_1005DCC38, &qword_1005DCC30, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v18, v12, v13, v2, v11);
      v14 = type metadata accessor for TableEntity(0);
      objc_allocWithZone((Class)type metadata accessor for AppEntityViewAnnotation(0));
      v15 = sub_100019C6C(&qword_1005DCC40, type metadata accessor for TableEntity, (uint64_t)&protocol conformance descriptor for TableEntity);
      v16 = (void *)AppEntityViewAnnotation.init<A>(entityType:identifier:state:)(v14, v7, v4, v14, v15);
      UIView.annotate(with:)();

    }
    else
    {
      UIView.removeAnnotation()();
    }
  }
}

uint64_t sub_1003DE960()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003DE984(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1005DCC4C);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100145358;
  return sub_1003DD5F0(a1, a2, v7, v6);
}

uint64_t sub_1003DE9F0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __int128 v7;

  v6 = swift_task_alloc(dword_1005DCC6C);
  v7 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = sub_100145358;
  *(_OWORD *)(v6 + 24) = v7;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 40) = *a2;
  return swift_task_switch(sub_1003DD340, 0, 0);
}

uint64_t sub_1003DEA6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003DEA90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc(dword_1005DCC84);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100130768;
  return sub_1003DCED4(a1, a2, v7, v6);
}

uint64_t sub_1003DEAFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18(&qword_1005D1EB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003DEB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012E18(&qword_1005D1EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AsyncBufferedQueue.__allocating_init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1003DF578(a1);
  v4 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy(0, *(_QWORD *)(v1 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return v3;
}

uint64_t AsyncBufferedQueue.enqueue(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  __chkstk_darwin(a1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  v6 = type metadata accessor for AsyncStream.Continuation(0, v2);
  return AsyncStream.Continuation.yield(_:)(v4, v6);
}

uint64_t AsyncBufferedQueue.makeAsyncIterator()()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for AsyncStream(0, *(_QWORD *)(*(_QWORD *)v0 + 80));
  return AsyncStream.makeAsyncIterator()(v1);
}

_QWORD *AsyncBufferedMulticastManager.makeAsyncStream(bufferingPolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  os_unfair_lock_s *v9;

  v6 = type metadata accessor for AsyncBufferedQueue(0, a3, a3, a4);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = (_QWORD *)sub_1003DF380(a1);
  type metadata accessor for Array(0, v6);
  v8 = a2 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)a2 + 16);
  v9 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  sub_1003DF2E8(v8, v7);
  os_unfair_lock_unlock(v9);
  return v7;
}

uint64_t BidirectionalAsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for AsyncBufferedQueue(0, a2, a3, a4);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = sub_1003DF380(a1);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  sub_1003DF380(a1);
  v8 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a1, v8);
  return v7;
}

Swift::Void __swiftcall BidirectionalAsyncBufferedQueue.finish()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  type metadata accessor for AsyncStream.Continuation(0, *(_QWORD *)(*(_QWORD *)v0 + 80));
  AsyncStream.Continuation.finish()();
  type metadata accessor for AsyncStream.Continuation(0, *(_QWORD *)(*(_QWORD *)v2 + 80));
  AsyncStream.Continuation.finish()();
}

Swift::Void __swiftcall AsyncBufferedMulticastManager.finish()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  os_unfair_lock_s *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  _QWORD v14[6];

  v4 = v1;
  v5 = v0;
  v6 = type metadata accessor for AsyncBufferedQueue(255, v1, v2, v3);
  v7 = type metadata accessor for Array(0, v6);
  v8 = (uint64_t *)(v5 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)v5 + 16));
  v9 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(_QWORD *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  v10 = *v8;
  swift_bridgeObjectRetain(*v8);
  sub_1003DF344(v8, v4, v11, v12);
  os_unfair_lock_unlock(v9);
  v14[4] = v10;
  v14[2] = v4;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v7);
  Sequence.forEach(_:)(sub_1003DF5BC, v14, v7, WitnessTable);
  swift_bridgeObjectRelease(v10);
}

Swift::Void __swiftcall AsyncBufferedQueue.finish()()
{
  uint64_t v0;

  type metadata accessor for AsyncStream.Continuation(0, *(_QWORD *)(*(_QWORD *)v0 + 80));
  AsyncStream.Continuation.finish()();
}

double AsyncBufferedMulticastManager.enqueue(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Bool IsNativeType;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  double result;
  uint64_t v23;

  v6 = type metadata accessor for AsyncStream.Continuation.YieldResult(0, a3);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v23 - v8;
  v12 = type metadata accessor for AsyncBufferedQueue(255, a3, v10, v11);
  type metadata accessor for Array(0, v12);
  v13 = *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)a2 + 16);
  v14 = (os_unfair_lock_s *)(a2 + ((*(unsigned int *)(*(_QWORD *)a2 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v14);
  v15 = *(_QWORD *)(a2 + v13);
  swift_bridgeObjectRetain(v15);
  os_unfair_lock_unlock(v14);
  if (Array.endIndex.getter(v15, v12))
  {
    v16 = 4;
    do
    {
      v17 = v16 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)(v16 - 4, IsNativeType, v15, v12);
      if (IsNativeType)
      {
        v19 = *(_QWORD *)(v15 + 8 * v16);
        swift_retain(v19);
        v20 = v16 - 3;
        if (__OFADD__(v17, 1))
          goto LABEL_9;
      }
      else
      {
        v19 = _ArrayBuffer._getElementSlowPath(_:)(v16 - 4, v15, v12);
        v20 = v16 - 3;
        if (__OFADD__(v17, 1))
        {
LABEL_9:
          __break(1u);
          break;
        }
      }
      AsyncBufferedQueue.enqueue(_:)(a1);
      v21 = swift_release(v19);
      (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v9, v6, v21);
      ++v16;
    }
    while (v20 != Array.endIndex.getter(v15, v12));
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v15).n128_u64[0];
  return result;
}

uint64_t AsyncBufferedQueue.init(bufferingPolicy:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = sub_1003DF380(a1);
  v5 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy(0, *(_QWORD *)(v3 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return v4;
}

uint64_t sub_1003DF18C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = type metadata accessor for AsyncStream.Continuation(255, a3);
  v6 = type metadata accessor for Optional(0, v5);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  v7 = *(_QWORD *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v5);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a2, 0, 1, v5);
}

uint64_t AsyncBufferedQueue.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v3 = type metadata accessor for AsyncStream.Continuation(0, v2);
  AsyncStream.Continuation.finish()();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v3);
  v4 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 96);
  v5 = type metadata accessor for AsyncStream(0, v2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return v1;
}

uint64_t AsyncBufferedQueue.__deallocating_deinit()
{
  uint64_t v0;

  AsyncBufferedQueue.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

double sub_1003DF2C4()
{
  uint64_t *v0;
  uint64_t v1;
  double result;

  v1 = *v0;
  AsyncBufferedQueue.makeAsyncIterator()();
  *(_QWORD *)&result = swift_release(v1).n128_u64[0];
  return result;
}

uint64_t sub_1003DF2E8(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v3 = *a2;
  v6 = a2;
  v4 = type metadata accessor for Array(0, v3);
  swift_retain(a2);
  return Array.append(_:)(&v6, v4);
}

double sub_1003DF344(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v5 = type metadata accessor for AsyncBufferedQueue(0, a2, a3, a4);
  v6 = static Array._allocateUninitialized(_:)(0, v5);
  v7 = *a1;
  *a1 = v6;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

uint64_t sub_1003DF380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25[16];
  uint64_t v26;
  char *v27;

  v24 = a1;
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy(0, v2);
  v20 = *(_QWORD *)(v3 - 8);
  v21 = v3;
  __chkstk_darwin(v3);
  v5 = (char *)&v19 - v4;
  v6 = type metadata accessor for AsyncStream(0, v2);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v19 - v7;
  v9 = type metadata accessor for AsyncStream.Continuation(255, v2);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v19 - v15;
  v17 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))((char *)&v19 - v15, 1, 1, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v5, v24, v21);
  v26 = v2;
  v27 = v16;
  AsyncStream.init(_:bufferingPolicy:_:)(v2, v5, sub_1003DF6BC, v25, v2);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 96), v8, v23);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v16, v10);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v9);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v1 + *(_QWORD *)(*(_QWORD *)v1 + 88), v14, v9);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    return v1;
  }
  return result;
}

uint64_t sub_1003DF578(uint64_t a1)
{
  uint64_t v1;

  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  return sub_1003DF380(a1);
}

uint64_t type metadata accessor for AsyncBufferedQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncBufferedQueue);
}

void sub_1003DF5BC(uint64_t a1)
{
  type metadata accessor for AsyncStream.Continuation(0, *(_QWORD *)(**(_QWORD **)a1 + 80));
  AsyncStream.Continuation.finish()();
}

uint64_t sub_1003DF5F8(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for AsyncStream<A>.Iterator, a1);
}

uint64_t sub_1003DF608(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  v2 = *(_QWORD *)(a1 + 80);
  result = type metadata accessor for AsyncStream.Continuation(319, v2);
  if (v4 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AsyncStream(319, v2);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 2, v6, a1 + 88);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_1003DF69C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for BidirectionalAsyncBufferedQueue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BidirectionalAsyncBufferedQueue);
}

uint64_t type metadata accessor for AsyncBufferedMulticastManager(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncBufferedMulticastManager);
}

uint64_t sub_1003DF6BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1003DF18C(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1003DF6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  return swift_task_switch(sub_1003DF6E0, 0, 0);
}

uint64_t sub_1003DF6E0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + 2;
  v2 = v0[13];
  v3 = (void *)v0[14];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_1003DF778;
  v4 = swift_continuation_init(v0 + 2, 1);
  v5 = swift_allocObject(&unk_10056EEF0, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  CKSerializeRecordModificationsOperation.serializeResultBlock.setter(sub_1003DF9AC, v5);
  objc_msgSend(v3, "addOperation:", v2);
  return swift_continuation_await(v1);
}

uint64_t sub_1003DF778(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*(_QWORD *)(v2 + 48))
    swift_willThrow(a1);
  else
    *(_OWORD *)*(_QWORD *)(v2 + 96) = *(_OWORD *)(v2 + 80);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1003DF7DC(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  if ((a3 & 1) != 0)
  {
    v19 = a1;
    swift_errorRetain(a1);
    v9 = sub_100012E18(&qword_1005D7A90);
    swift_willThrowTypedImpl(&v19, v9, &protocol self-conformance witness table for Error);
    _s3__C4CodeOMa_0(0);
    v11 = v10;
    v19 = 20;
    swift_errorRetain(a1);
    v12 = sub_100019C6C(&qword_1005CFA38, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1004537E8);
    LOBYTE(v11) = static _ErrorCodeProtocol.~= infix(_:_:)(&v19, a1, v11, v12);
    sub_1003DF9B8(a1, a2, 1);
    if ((v11 & 1) != 0)
    {
      sub_1003DF9B8(a1, a2, 1);
      v13 = type metadata accessor for CancellationError(0);
      v14 = sub_100019C6C(&qword_1005D7A60, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
      v15 = swift_allocError(v13, v14, 0, 0);
      CancellationError.init()();
      v16 = swift_allocError(v9, &protocol self-conformance witness table for Error, 0, 0);
      *v17 = v15;
    }
    else
    {
      v16 = swift_allocError(v9, &protocol self-conformance witness table for Error, 0, 0);
      *v18 = a1;
    }
    return swift_continuation_throwingResumeWithError(a4, v16);
  }
  else
  {
    sub_10013DCA0(a1, a2);
    v7 = *(uint64_t **)(*(_QWORD *)(a4 + 64) + 40);
    *v7 = a1;
    v7[1] = a2;
    return swift_continuation_throwingResume(a4);
  }
}

id sub_1003DF990(void *a1)
{
  return objc_msgSend(a1, "cancel");
}

uint64_t sub_1003DF99C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003DF9AC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1003DF7DC(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1003DF9B8(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return sub_10013DD30(a1, a2);
}

uint64_t sub_1003DF9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[13] = a2;
  v3[14] = a3;
  v3[12] = a1;
  return swift_task_switch(sub_1003DF9E0, 0, 0);
}

uint64_t sub_1003DF9E0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0 + 2;
  v2 = v0[13];
  v3 = (void *)v0[14];
  v0[7] = v0 + 10;
  v0[2] = v0;
  v0[3] = sub_1003DF778;
  v4 = swift_continuation_init(v0 + 2, 1);
  v5 = swift_allocObject(&unk_10056EF18, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  CKDeserializeRecordModificationsOperation.deserializeResultBlock.setter(sub_1003DFC40, v5);
  objc_msgSend(v3, "addOperation:", v2);
  return swift_continuation_await(v1);
}

uint64_t sub_1003DFA78(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;

  if ((a3 & 1) != 0)
  {
    v19 = a1;
    swift_errorRetain(a1);
    v9 = sub_100012E18(&qword_1005D7A90);
    swift_willThrowTypedImpl(&v19, v9, &protocol self-conformance witness table for Error);
    _s3__C4CodeOMa_0(0);
    v11 = v10;
    v19 = 20;
    swift_errorRetain(a1);
    v12 = sub_100019C6C(&qword_1005CFA38, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1004537E8);
    LOBYTE(v11) = static _ErrorCodeProtocol.~= infix(_:_:)(&v19, a1, v11, v12);
    sub_1003DFC4C(a1, a2, 1);
    if ((v11 & 1) != 0)
    {
      sub_1003DFC4C(a1, a2, 1);
      v13 = type metadata accessor for CancellationError(0);
      v14 = sub_100019C6C(&qword_1005D7A60, (uint64_t (*)(uint64_t))&type metadata accessor for CancellationError, (uint64_t)&protocol conformance descriptor for CancellationError);
      v15 = swift_allocError(v13, v14, 0, 0);
      CancellationError.init()();
      v16 = swift_allocError(v9, &protocol self-conformance witness table for Error, 0, 0);
      *v17 = v15;
    }
    else
    {
      v16 = swift_allocError(v9, &protocol self-conformance witness table for Error, 0, 0);
      *v18 = a1;
    }
    return swift_continuation_throwingResumeWithError(a4, v16);
  }
  else
  {
    v7 = *(uint64_t **)(*(_QWORD *)(a4 + 64) + 40);
    *v7 = a1;
    v7[1] = a2;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    return swift_continuation_throwingResume(a4);
  }
}

uint64_t sub_1003DFC30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003DFC40(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1003DFA78(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16));
}

uint64_t sub_1003DFC4C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  swift_bridgeObjectRelease(a1);
  return swift_bridgeObjectRelease(a2);
}

void sub_1003DFC7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t *v10;
  int64_t *v11;
  int64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  id v20;
  void **v21;
  void *v22;
  uint64_t v23;
  id v24;
  id v25;
  id v26;
  double v27;
  double v28;
  uint64_t v29;
  _BYTE v30[24];

  v1 = v0;
  v2 = sub_100012E18(&qword_1005DCE90);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v30[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  type metadata accessor for FilterType(0);
  v7 = v6;
  v8 = sub_1003E094C();
  v9 = sub_1003E0990();
  NSDiffableDataSourceSnapshot.init()(&type metadata for LearnMoreSmartFoldersFiltersView.FilterSection, v7, v8, v9);
  NSDiffableDataSourceSnapshot.appendSections(_:)((Swift::OpaquePointer)&off_100555580);
  if ((ICFilterTypeCount & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v29 = v3;
    v10 = sub_10016BAD4(0, ICFilterTypeCount);
    v11 = v10;
    v12 = v10[2];
    if (v12)
    {
      v13 = v10 + 4;
      v14 = _swiftEmptyArrayStorage;
      do
      {
        v16 = *v13++;
        v15 = v16;
        if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
          v14 = sub_10016AA6C(0, v14[2] + 1, 1, v14);
        v18 = v14[2];
        v17 = v14[3];
        if (v18 >= v17 >> 1)
          v14 = sub_10016AA6C((_QWORD *)(v17 > 1), v18 + 1, 1, v14);
        v14[2] = v18 + 1;
        v14[v18 + 4] = v15;
        --v12;
      }
      while (v12);
    }
    else
    {
      v14 = _swiftEmptyArrayStorage;
    }
    swift_release(v11);
    v30[0] = 0;
    NSDiffableDataSourceSnapshot.appendItems(_:toSection:)(v14, v30, v2);
    swift_bridgeObjectRelease(v14);
    v19 = *(void **)(v1 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource);
    if (v19)
    {
      v20 = v19;
      dispatch thunk of UICollectionViewDiffableDataSource.applySnapshotUsingReloadData(_:completion:)(v5, 0, 0);

    }
    v21 = (void **)(v1 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_heightConstraint);
    swift_beginAccess(v1 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_heightConstraint, v30, 32, 0);
    v22 = *v21;
    v23 = v29;
    if (v22)
    {
      swift_endAccess(v30);
      v24 = v22;
      v25 = sub_1003DFF18();
      v26 = objc_msgSend(v25, "collectionViewLayout");

      objc_msgSend(v26, "collectionViewContentSize");
      v28 = v27;

      objc_msgSend(v24, "setConstant:", v28);
      (*(void (**)(_BYTE *, uint64_t))(v23 + 8))(v5, v2);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v29 + 8))(v5, v2);
      swift_endAccess(v30);
    }
  }
}

id sub_1003DFF18()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView____lazy_storage___collectionView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView____lazy_storage___collectionView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView____lazy_storage___collectionView);
  }
  else
  {
    v4 = sub_1003E066C();
    v5 = objc_msgSend(objc_allocWithZone((Class)UICollectionView), "initWithFrame:collectionViewLayout:", v4, 0.0, 0.0, 0.0, 0.0);

    objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v5, "setUserInteractionEnabled:", 0);
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

double sub_1003DFFDC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id *v25;
  id v26;
  double result;
  _BYTE v28[24];
  char v29[24];

  v1 = v0;
  v2 = sub_100012E18(&qword_1005DCE80);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = __chkstk_darwin(v2);
  v6 = &v28[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v5);
  v8 = &v28[-v7];
  v9 = type metadata accessor for LearnMoreSmartFoldersFiltersCell();
  type metadata accessor for FilterType(0);
  UICollectionView.CellRegistration.init(handler:)(sub_1003E03D0, 0, v9, v10);
  v11 = sub_1003DFF18();
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v3 + 16))(v6, v8, v2);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = swift_allocObject(&unk_10056EFD0, v13 + v4, v12 | 7);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v3 + 32))(v14 + v13, v6, v2);
  v15 = objc_allocWithZone((Class)sub_100012E18(&qword_1005DCE88));
  v16 = UICollectionViewDiffableDataSource.init(collectionView:cellProvider:)(v11, sub_1003E0614, v14);
  v17 = OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource;
  v18 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource];
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource] = v16;

  v19 = sub_1003DFF18();
  objc_msgSend(v19, "setDataSource:", *(_QWORD *)&v1[v17]);

  v20 = sub_1003DFF18();
  objc_msgSend(v1, "addSubview:", v20);

  v21 = sub_1003DFF18();
  objc_msgSend(v21, "ic_addAnchorsToFillSuperview");

  v22 = sub_1003DFF18();
  v23 = objc_msgSend(v22, "heightAnchor");

  v24 = objc_msgSend(v23, "constraintEqualToConstant:", 34.0);
  v25 = (id *)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_heightConstraint];
  swift_beginAccess(v25, v29, 1, 0);
  v26 = *v25;
  *v25 = v24;

  swift_beginAccess(v25, v28, 32, 0);
  if (*v25)
  {
    objc_msgSend(*v25, "setActive:", 1, swift_endAccess(v28).n128_f64[0]);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v8, v2);
    *(_QWORD *)&result = swift_endAccess(v28).n128_u64[0];
  }
  return result;
}

id sub_1003E031C(void *a1)
{
  char *v1;
  objc_class *ObjectType;
  id v4;
  id v5;
  id v6;
  objc_super v8;

  ObjectType = (objc_class *)swift_getObjectType();
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_heightConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView____lazy_storage___collectionView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes32LearnMoreSmartFoldersFiltersView_diffableDataSource] = 0;
  v8.receiver = v1;
  v8.super_class = ObjectType;
  v4 = objc_msgSendSuper2(&v8, "initWithCoder:", a1);
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    sub_1003DFFDC();

  }
  return v5;
}

void sub_1003E03D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_10017A954(*a3);
}

uint64_t sub_1003E03F4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v9 = *a3;
  v10 = 0;
  v6 = type metadata accessor for LearnMoreSmartFoldersFiltersCell();
  type metadata accessor for FilterType(0);
  return UICollectionView.dequeueConfiguredReusableCell<A, B>(using:for:item:)(a4, a2, &v9, v6, v7);
}

uint64_t type metadata accessor for LearnMoreSmartFoldersFiltersView()
{
  return objc_opt_self(_TtC11MobileNotes32LearnMoreSmartFoldersFiltersView);
}

uint64_t storeEnumTagSinglePayload for LearnMoreSmartFoldersFiltersView.FilterSection(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1003E050C + 4 * byte_100467D50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1003E052C + 4 * byte_100467D55[v4]))();
}

_BYTE *sub_1003E050C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1003E052C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003E0534(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003E053C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1003E0544(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1003E054C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LearnMoreSmartFoldersFiltersView.FilterSection()
{
  return &type metadata for LearnMoreSmartFoldersFiltersView.FilterSection;
}

unint64_t sub_1003E056C()
{
  unint64_t result;

  result = qword_1005DCE78;
  if (!qword_1005DCE78)
  {
    result = swift_getWitnessTable(&unk_100467DD0, &type metadata for LearnMoreSmartFoldersFiltersView.FilterSection);
    atomic_store(result, (unint64_t *)&qword_1005DCE78);
  }
  return result;
}

uint64_t sub_1003E05B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_100012E18(&qword_1005DCE80);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003E0614(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_100012E18(&qword_1005DCE80) - 8) + 80);
  return sub_1003E03F4(a1, a2, a3, v3 + ((v7 + 16) & ~v7));
}

id sub_1003E066C()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  Class isa;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v19;

  v0 = (void *)objc_opt_self(NSCollectionLayoutDimension);
  v1 = objc_msgSend(v0, "estimatedDimension:", 48.0);
  v2 = objc_msgSend(v0, "estimatedDimension:", 34.0);
  v3 = (void *)objc_opt_self(NSCollectionLayoutSize);
  v4 = objc_msgSend(v3, "sizeWithWidthDimension:heightDimension:", v1, v2);

  v5 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutItem), "itemWithLayoutSize:", v4);
  v6 = objc_msgSend(v0, "fractionalWidthDimension:", 1.0);
  v7 = objc_msgSend(v0, "estimatedDimension:", 34.0);
  v8 = objc_msgSend(v3, "sizeWithWidthDimension:heightDimension:", v6, v7);

  v9 = (void *)objc_opt_self(NSCollectionLayoutGroup);
  v10 = sub_100012E18(&qword_1005CF6F0);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_100456F30;
  *(_QWORD *)(v11 + 32) = v5;
  v19 = v11;
  specialized Array._endMutation()(v11);
  sub_1003E0910();
  v12 = v5;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  v14 = objc_msgSend(v9, "horizontalGroupWithLayoutSize:subitems:", v8, isa);

  v15 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSpacing), "fixedSpacing:", 8.0);
  objc_msgSend(v14, "setInterItemSpacing:", v15);

  v16 = objc_msgSend((id)objc_opt_self(NSCollectionLayoutSection), "sectionWithGroup:", v14);
  objc_msgSend(v16, "setInterGroupSpacing:", 8.0);
  v17 = objc_msgSend(objc_allocWithZone((Class)UICollectionViewCompositionalLayout), "initWithSection:", v16);

  return v17;
}

unint64_t sub_1003E0910()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005D89B8;
  if (!qword_1005D89B8)
  {
    v1 = objc_opt_self(NSCollectionLayoutItem);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1005D89B8);
  }
  return result;
}

unint64_t sub_1003E094C()
{
  unint64_t result;

  result = qword_1005DCE98;
  if (!qword_1005DCE98)
  {
    result = swift_getWitnessTable(&unk_100467D90, &type metadata for LearnMoreSmartFoldersFiltersView.FilterSection);
    atomic_store(result, (unint64_t *)&qword_1005DCE98);
  }
  return result;
}

unint64_t sub_1003E0990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DCEA0;
  if (!qword_1005DCEA0)
  {
    type metadata accessor for FilterType(255);
    result = swift_getWitnessTable(&unk_100452728, v1);
    atomic_store(result, (unint64_t *)&qword_1005DCEA0);
  }
  return result;
}

uint64_t sub_1003E09D8()
{
  _QWORD *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8))();
  v2 = (id)ICLocalizedStringForICFilterType(v1);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

  return v3;
}

id sub_1003E0A3C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView);
  }
  else
  {
    v4 = sub_1003E2378();
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

id sub_1003E0A9C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  id v13;
  double v14;
  id v15;
  void *v16;
  void *v17;
  id v18;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for UIListContentConfiguration(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView;
  v6 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView];
  if (v6)
  {
    v7 = *(id *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView];
  }
  else
  {
    v8 = sub_1000163BC(0, (unint64_t *)&qword_1005D7618, UIListContentView_ptr);
    static UIListContentConfiguration.cell()(v8);
    v9 = (void *)UIListContentView.init(configuration:)(v4);
    objc_msgSend(v9, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    LODWORD(v10) = 1148846080;
    objc_msgSend(v9, "setContentCompressionResistancePriority:forAxis:", 0, v10);
    LODWORD(v11) = 1148846080;
    objc_msgSend(v9, "setContentCompressionResistancePriority:forAxis:", 1, v11);
    LODWORD(v12) = 1132068864;
    objc_msgSend(v9, "setContentHuggingPriority:forAxis:", 0, v12);
    v13 = objc_msgSend(v9, "widthAnchor");
    objc_msgSend(v1, "frame");
    v15 = objc_msgSend(v13, "constraintLessThanOrEqualToConstant:", v14);

    v16 = *(void **)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint];
    *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint] = v15;

    v17 = *(void **)&v1[v5];
    *(_QWORD *)&v1[v5] = v9;
    v7 = v9;

    v6 = 0;
  }
  v18 = v6;
  return v7;
}

void sub_1003E0C38()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  void *v17;
  id v18;

  v1 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___image;
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___image);
  if (v2 != (void *)1)
  {
LABEL_7:
    sub_1003E2690(v2);
    return;
  }
  v3 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8))();
  v4 = (id)ICSymbolImageNameForICFilterType(v3);
  static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v6 = v5;

  v7 = (id)ICTintColorForICFilterType(v3);
  v8 = objc_msgSend((id)objc_opt_self(UIFont), "systemFontOfSize:", 17.0);
  v9 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithFont:", v8);

  v10 = v9;
  swift_bridgeObjectRetain(v6);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  v12 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:withConfiguration:", v11, v10);

  if (v12)
  {
    v13 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
    v14 = objc_msgSend(v12, "imageWithTintColor:", v13);

    if (v7)
    {
      v15 = v7;
      v16 = objc_msgSend(v14, "ic_imageCenteredWithBackgroundColor:size:", v15, 28.0, 28.0);
      swift_bridgeObjectRelease(v6);

      v14 = v16;
    }
    else
    {
      swift_bridgeObjectRelease(v6);
    }

    v17 = *(void **)((char *)v0 + v1);
    *(_QWORD *)((char *)v0 + v1) = v14;
    v18 = v14;
    sub_1003E2680(v17);
    goto LABEL_7;
  }
  __break(1u);
}

id sub_1003E0E5C()
{
  char *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  double v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel;
  v2 = *(void **)&v0[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel];
  if (v2)
  {
    v3 = *(id *)&v0[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel];
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UILabel), "init");
    objc_msgSend(v4, "setAdjustsFontForContentSizeCategory:", 1);
    objc_msgSend(v4, "setTextAlignment:", 2 * (objc_msgSend(v0, "effectiveUserInterfaceLayoutDirection") != (id)1));
    LODWORD(v5) = 1148846080;
    objc_msgSend(v4, "setContentHuggingPriority:forAxis:", 0, v5);
    v6 = *(void **)&v0[v1];
    *(_QWORD *)&v0[v1] = v4;
    v3 = v4;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

uint64_t sub_1003E0F28()
{
  return -1;
}

id sub_1003E0F30(double a1, double a2, double a3, double a4)
{
  char *v4;
  char *v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  objc_super v16;

  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_accountObjectID] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;
  v9 = &v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView] = 0;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___image] = 1;
  *(_QWORD *)&v4[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel] = 0;
  v16.receiver = v4;
  v16.super_class = (Class)type metadata accessor for FolderComposerFilterCell();
  v10 = objc_msgSendSuper2(&v16, "initWithFrame:", a1, a2, a3, a4);
  sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
  v11 = v10;
  v12 = static UITraitCollection.traitsAffectingSizeAndColor.getter();
  v13 = UIView.registerForTraitChanges(_:action:)(v12, "setNeedsUpdateConfiguration");

  swift_unknownObjectRelease(v13, v14);
  swift_bridgeObjectRelease(v12);
  return v11;
}

id sub_1003E1090(void *a1)
{
  char *v1;
  char *v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_super v10;

  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_accountObjectID] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelection] = 0;
  v3 = &v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_filterTypeSelectionDidChange];
  *(_QWORD *)v3 = 0;
  *((_QWORD *)v3 + 1) = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___horizontalStackView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___listContentView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___image] = 1;
  *(_QWORD *)&v1[OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell____lazy_storage___menuLabel] = 0;
  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for FolderComposerFilterCell();
  v4 = objc_msgSendSuper2(&v10, "initWithCoder:", a1);
  if (v4)
  {
    sub_1000163BC(0, (unint64_t *)&qword_1005CFF40, UITraitCollection_ptr);
    v5 = v4;
    v6 = static UITraitCollection.traitsAffectingSizeAndColor.getter();
    v7 = UIView.registerForTraitChanges(_:action:)(v6, "setNeedsUpdateConfiguration");

    swift_unknownObjectRelease(v7, v8);
    swift_bridgeObjectRelease(v6);
  }
  else
  {

  }
  return v4;
}

void sub_1003E11E4(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  double v31;
  uint64_t v32;
  uint64_t inited;
  NSString *v34;
  id v35;
  unint64_t v36;
  id v37;
  NSString v38;
  Class isa;
  id v40;
  uint64_t v41;
  void (*v42)(__int128 *, _QWORD);
  void (*v43)(__int128 *, _QWORD);
  void (*v44)(__int128 *, _QWORD);
  uint64_t v45;
  void (*v46)(__int128 *, _QWORD);
  void (*v47)(__int128 *, _QWORD);
  uint64_t v48;
  void (*v49)(__int128 *, _QWORD);
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  void (**v55)(_QWORD, void *);
  uint64_t v56;
  uint64_t (**v57)(_QWORD, void *);
  void *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t (**v71)(_QWORD, void *);
  void *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  __n128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  uint64_t v91;
  void *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  id v98;
  double v99;
  double v100;
  double v101;
  double v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  id v107;
  id v108;
  id v109;
  id v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  id v116;
  id v117;
  id v118;
  id v119;
  id v120;
  id v121;
  id v122;
  uint64_t v123;
  id v124;
  id v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  uint64_t v133;
  Class v134;
  uint64_t v135;
  uint64_t v136;
  id v137;
  uint64_t v138;
  void *v139;
  void *v140;
  id v141;
  double v142;
  id v143;
  id v144;
  char *v145;
  uint64_t v146;
  void *v147;
  void (*v148)(char *, uint64_t);
  uint64_t v149;
  id v150;
  uint64_t v151;
  void *v152;
  id v153;
  double v154;
  NSString v155;
  id v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  void (*v160)(char *, uint64_t);
  void (**v161)(_QWORD, void *);
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181[72];
  __int128 v182;
  __int128 v183;
  uint64_t v184;
  __int128 v185;
  __int128 v186;
  void (**v187)(_QWORD, void *);

  v2 = v1;
  v176 = type metadata accessor for UIListContentConfiguration.TextProperties(0);
  v174 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176);
  v175 = (char *)&v162 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012E18(&qword_1005CFE60);
  __chkstk_darwin(v5);
  v165 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v170 = type metadata accessor for UICellAccessory.PopUpMenuOptions(0);
  v169 = *(_QWORD *)(v170 - 8);
  __chkstk_darwin(v170);
  v168 = (char *)&v162 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = type metadata accessor for UICellAccessory.DisplayedState(0);
  v164 = *(_QWORD *)(v166 - 8);
  __chkstk_darwin(v166);
  v9 = (char *)&v162 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for UICellAccessory(0);
  v167 = *(_QWORD *)(v172 - 8);
  __chkstk_darwin(v172);
  v171 = (char *)&v162 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UIListContentConfiguration(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v162 - v17;
  static UIListContentConfiguration.valueCell()(v16);
  v20 = type metadata accessor for UICellConfigurationState(0, v19);
  *((_QWORD *)&v186 + 1) = v20;
  v187 = (void (**)(_QWORD, void *))&protocol witness table for UICellConfigurationState;
  v21 = sub_10012D160(&v185);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v21, a1, v20);
  UIListContentConfiguration.updated(for:)(&v185);
  v180 = v12;
  v177 = *(void (**)(char *, uint64_t))(v12 + 8);
  v177(v15, v11);
  v22 = sub_1000153C0(&v185);
  v23 = UIListContentConfiguration.directionalLayoutMargins.getter(v22);
  v25 = v24;
  v27 = v26;
  (*(void (**)(double))((swift_isaMask & *v2) + 0xC0))(v23);
  if (v28)
  {
    v29 = v28;
    v30 = objc_msgSend(objc_allocWithZone((Class)NSMutableParagraphStyle), "init");
    LODWORD(v31) = 1.0;
    objc_msgSend(v30, "setHyphenationFactor:", v31);
    v32 = sub_100012E18(&qword_1005D1B58);
    inited = swift_initStackObject(v32, v181);
    *(_OWORD *)(inited + 16) = xmmword_100451C20;
    *(_QWORD *)(inited + 32) = NSParagraphStyleAttributeName;
    *(_QWORD *)(inited + 64) = sub_1000163BC(0, &qword_1005DCBC0, NSMutableParagraphStyle_ptr);
    *(_QWORD *)(inited + 40) = v30;
    v34 = NSParagraphStyleAttributeName;
    v35 = v30;
    v36 = sub_100135F1C(inited);
    v37 = objc_allocWithZone((Class)NSAttributedString);
    v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    type metadata accessor for Key(0);
    sub_1001797A4();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v40 = objc_msgSend(v37, "initWithString:attributes:", v38, isa, swift_bridgeObjectRelease(v36).n128_f64[0]);

    UIListContentConfiguration.attributedText.setter(v40);
  }
  sub_1003E0C38();
  UIListContentConfiguration.image.setter(v41);
  v42 = (void (*)(__int128 *, _QWORD))UIListContentConfiguration.imageProperties.modify(&v185);
  UIListContentConfiguration.ImageProperties.cornerRadius.setter(8.0);
  v42(&v185, 0);
  v43 = (void (*)(__int128 *, _QWORD))UIListContentConfiguration.imageProperties.modify(&v185);
  v44 = (void (*)(__int128 *, _QWORD))UIListContentConfiguration.ImageProperties.reservedLayoutSize.modify(&v182);
  *(_QWORD *)(v45 + 8) = 0x4036000000000000;
  v44(&v182, 0);
  v43(&v185, 0);
  v46 = (void (*)(__int128 *, _QWORD))UIListContentConfiguration.textProperties.modify(&v185);
  UIListContentConfiguration.TextProperties.numberOfLines.setter(0);
  v46(&v185, 0);
  v47 = (void (*)(__int128 *, _QWORD))UIListContentConfiguration.directionalLayoutMargins.modify(&v185);
  *(_QWORD *)(v48 + 8) = 0;
  v47(&v185, 0);
  v49 = (void (*)(__int128 *, _QWORD))UIListContentConfiguration.directionalLayoutMargins.modify(&v185);
  *(_QWORD *)(v50 + 24) = 0;
  v49(&v185, 0);
  *(_QWORD *)&v185 = v2;
  v51 = type metadata accessor for FolderComposerFilterCell();
  v52 = v2;
  v53 = sub_100012E18(&qword_1005DCF18);
  v178 = v51;
  v179 = v53;
  if ((swift_dynamicCast(&v182, &v185, v51, v53, 6) & 1) == 0)
  {
    v184 = 0;
    v182 = 0u;
    v183 = 0u;
    goto LABEL_12;
  }
  if (!*((_QWORD *)&v183 + 1))
  {
LABEL_12:
    sub_1003E2614((uint64_t)&v182);
    v66 = 0;
    v67 = 0;
    goto LABEL_19;
  }
  sub_10013B100(&v182, (uint64_t)&v185);
  v54 = *((_QWORD *)&v186 + 1);
  v55 = v187;
  sub_10012D19C(&v185, *((uint64_t *)&v186 + 1));
  v55[2](v54, v55);
  v56 = *((_QWORD *)&v186 + 1);
  v57 = (uint64_t (**)(_QWORD, void *))v187;
  sub_10012D19C(&v185, *((uint64_t *)&v186 + 1));
  v58 = (void *)v57[1](v56, v57);
  v59 = objc_msgSend(v58, "selectedElements");

  v60 = sub_1000163BC(0, (unint64_t *)&qword_1005D8A30, UIMenuElement_ptr);
  v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v59, v60);

  if ((unint64_t)v61 >> 62)
  {
    if (v61 < 0)
      v68 = v61;
    else
      v68 = v61 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v61);
    v69 = _CocoaArrayWrapper.endIndex.getter(v68);
    swift_bridgeObjectRelease(v61);
    if (v69)
      goto LABEL_7;
  }
  else if (*(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_7:
    if ((v61 & 0xC000000000000001) != 0)
    {
      v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v61);
    }
    else
    {
      if (!*(_QWORD *)((v61 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        return;
      }
      v62 = *(id *)(v61 + 32);
    }
    v63 = v62;
    v64 = objc_msgSend(v62, "title", swift_bridgeObjectRelease(v61).n128_f64[0]);

    v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v173 = v65;

    goto LABEL_18;
  }
  swift_bridgeObjectRelease(v61);
  v163 = 0;
  v173 = 0;
LABEL_18:
  v70 = *((_QWORD *)&v186 + 1);
  v71 = (uint64_t (**)(_QWORD, void *))v187;
  sub_10012D19C(&v185, *((uint64_t *)&v186 + 1));
  v72 = (void *)v71[1](v70, v71);
  v73 = swift_allocObject(&unk_10056F038, 24, 7);
  swift_unknownObjectWeakInit(v73 + 16, v52);
  v74 = v164;
  v75 = v9;
  v76 = v9;
  v77 = v166;
  (*(void (**)(char *, _QWORD, uint64_t))(v164 + 104))(v76, enum case for UICellAccessory.DisplayedState.always(_:), v166);
  v78 = type metadata accessor for UICellAccessory.LayoutDimension(0);
  v79 = v165;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v165, 1, 1, v78);
  swift_retain(v73);
  v80 = v168;
  UICellAccessory.PopUpMenuOptions.init(isHidden:reservedLayoutWidth:tintColor:)(2, v79, 0);
  v81 = v171;
  static UICellAccessory.popUpMenu(_:displayed:options:selectedElementDidChangeHandler:)(v72, v75, v80, sub_1003E2678, v73);

  v82 = swift_release(v73);
  (*(void (**)(char *, uint64_t, __n128))(v169 + 8))(v80, v170, v82);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v77);
  swift_release(v73);
  v83 = sub_100012E18(&qword_1005CFE70);
  v84 = v167;
  v85 = *(unsigned __int8 *)(v167 + 80);
  v86 = (v85 + 32) & ~v85;
  v87 = swift_allocObject(v83, v86 + *(_QWORD *)(v167 + 72), v85 | 7);
  *(_OWORD *)(v87 + 16) = xmmword_100451C20;
  v88 = v172;
  (*(void (**)(uint64_t, char *, uint64_t))(v84 + 16))(v87 + v86, v81, v172);
  UICollectionViewListCell.accessories.setter(v87);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v81, v88);
  sub_1000153C0(&v185);
  v66 = v163;
  v67 = v173;
LABEL_19:
  v89 = sub_1003E0A3C();
  v90 = objc_msgSend(v89, "superview");

  if (!v90)
  {
    v96 = objc_msgSend(v52, "contentView");
    v97 = sub_1003E0A3C();
    objc_msgSend(v96, "addSubview:", v97);

    LODWORD(v96) = objc_msgSend(v52, "ic_isRTL");
    v98 = objc_msgSend(v52, "contentView");
    objc_msgSend(v98, "layoutMargins");
    v100 = v99;
    v102 = v101;

    if ((_DWORD)v96)
      v103 = v102;
    else
      v103 = v100;
    if (v103 > v25)
      v104 = v103;
    else
      v104 = v25;
    v105 = sub_100012E18(&qword_1005CF6F0);
    v106 = swift_allocObject(v105, 56, 7);
    *(_OWORD *)(v106 + 16) = xmmword_100454060;
    v107 = sub_1003E0A3C();
    v173 = v67;
    v108 = objc_msgSend(v107, "topAnchor");

    v109 = objc_msgSend(v52, "contentView");
    v110 = objc_msgSend(v109, "topAnchor");

    v111 = objc_msgSend(v108, "constraintEqualToAnchor:", v110);
    *(_QWORD *)(v106 + 32) = v111;
    v112 = sub_1003E0A3C();
    v113 = objc_msgSend(v112, "leadingAnchor");

    v114 = objc_msgSend(v52, "contentView");
    v115 = objc_msgSend(v114, "safeAreaLayoutGuide");

    v116 = objc_msgSend(v115, "leadingAnchor");
    v117 = objc_msgSend(v113, "constraintEqualToAnchor:constant:", v116, v104);

    *(_QWORD *)(v106 + 40) = v117;
    v118 = sub_1003E0A3C();
    v119 = objc_msgSend(v118, "trailingAnchor");

    v120 = objc_msgSend(v52, "contentView");
    v121 = objc_msgSend(v120, "trailingAnchor");

    v122 = objc_msgSend(v119, "constraintEqualToAnchor:constant:", v121, -v27);
    v67 = v173;
    *(_QWORD *)(v106 + 48) = v122;
    *(_QWORD *)&v185 = v106;
    specialized Array._endMutation()(v123);
    v124 = sub_1003E0A3C();
    v125 = objc_msgSend(v124, "bottomAnchor");

    v126 = objc_msgSend(v52, "contentView");
    v127 = objc_msgSend(v126, "bottomAnchor");

    v128 = objc_msgSend(v125, "constraintEqualToAnchor:", v127);
    v129 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint;
    v130 = *(void **)((char *)v52
                    + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint);
    *(_QWORD *)((char *)v52 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint) = v128;

    *(_QWORD *)&v182 = *(_QWORD *)((char *)v52 + v129);
    v131 = sub_100012E18(&qword_1005DCF28);
    Array.appendNonNil(_:)(&v182, v131);
    v132 = (void *)objc_opt_self(NSLayoutConstraint);
    v133 = v185;
    sub_1000163BC(0, (unint64_t *)&qword_1005D8F60, NSLayoutConstraint_ptr);
    v134 = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v132, "activateConstraints:", v134, swift_bridgeObjectRelease(v133).n128_f64[0]);

    if (ICAccessibilityAccessibilityLargerTextSizesEnabled(v135))
      goto LABEL_21;
LABEL_31:
    v136 = v67;
    v137 = sub_1003E0A3C();
    objc_msgSend(v137, "setSpacing:", v25);

    objc_msgSend(*(id *)((char *)v52 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_horizontalStackViewBottomConstraint), "setConstant:", 0.0);
    v138 = OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint;
    v139 = *(void **)((char *)v52
                    + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint);
    if (v139)
    {
      objc_msgSend(v139, "setActive:", 1);
      v140 = *(void **)((char *)v52 + v138);
      if (v140)
      {
        v141 = v140;
        objc_msgSend(v52, "frame");
        objc_msgSend(v141, "setConstant:", v142 * 0.6);

      }
    }
    v143 = sub_1003E0E5C();
    objc_msgSend(v143, "setHidden:", 0);

    v144 = sub_1003E0E5C();
    v145 = v175;
    v146 = UIListContentConfiguration.textProperties.getter(v144);
    v147 = (void *)UIListContentConfiguration.TextProperties.font.getter(v146);
    v148 = *(void (**)(char *, uint64_t))(v174 + 8);
    v149 = v176;
    v148(v145, v176);
    objc_msgSend(v144, "setFont:", v147);

    v150 = sub_1003E0E5C();
    v151 = UIListContentConfiguration.secondaryTextProperties.getter();
    v152 = (void *)UIListContentConfiguration.TextProperties.color.getter(v151);
    v148(v145, v149);
    objc_msgSend(v150, "setTextColor:", v152);

    v153 = sub_1003E0E5C();
    if (v136)
    {
      v155 = String._bridgeToObjectiveC()();
      *(_QWORD *)&v154 = swift_bridgeObjectRelease(v136).n128_u64[0];
    }
    else
    {
      v155 = 0;
    }
    objc_msgSend(v153, "setText:", v155, v154);

    v94 = 0;
    v95 = 0;
    goto LABEL_38;
  }
  if (!ICAccessibilityAccessibilityLargerTextSizesEnabled(v91))
    goto LABEL_31;
LABEL_21:
  v92 = *(void **)((char *)v52 + OBJC_IVAR____TtC11MobileNotes24FolderComposerFilterCell_listContentViewWidthConstraint);
  if (v92)
    objc_msgSend(v92, "setActive:", 0);
  v93 = sub_1003E0E5C();
  objc_msgSend(v93, "setHidden:", 1);

  v94 = v66;
  v95 = v67;
LABEL_38:
  UIListContentConfiguration.secondaryText.setter(v94, v95);
  v156 = sub_1003E0A9C();
  *((_QWORD *)&v186 + 1) = v11;
  v187 = (void (**)(_QWORD, void *))&protocol witness table for UIListContentConfiguration;
  v157 = sub_10012D160(&v185);
  (*(void (**)(_QWORD *, char *, uint64_t))(v180 + 16))(v157, v18, v11);
  UIListContentView.configuration.setter(&v185);

  *(_QWORD *)&v182 = v52;
  v158 = v52;
  if ((swift_dynamicCast(&v185, &v182, v178, v179, 6) & 1) != 0)
  {
    v159 = *((_QWORD *)&v186 + 1);
    v160 = v177;
    if (*((_QWORD *)&v186 + 1))
    {
      v161 = v187;
      sub_10012D19C(&v185, *((uint64_t *)&v186 + 1));
      v161[2](v159, v161);
      v160(v18, v11);
      sub_1000153C0(&v185);
      return;
    }
  }
  else
  {
    v187 = 0;
    v185 = 0u;
    v186 = 0u;
    v160 = v177;
  }
  v160(v18, v11);
  sub_1003E2614((uint64_t)&v185);
}

void sub_1003E2154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    objc_msgSend(Strong, "setNeedsUpdateConfiguration");

  }
}

void sub_1003E2248()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  objc_super v7;

  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for FolderComposerFilterCell();
  objc_msgSendSuper2(&v7, "updateConstraints");
  v1 = sub_1003E0A9C();
  v2 = objc_msgSend(v1, "textLayoutGuide");

  if (v2)
  {
    v3 = objc_msgSend(v0, "separatorLayoutGuide");
    v4 = objc_msgSend(v3, "leadingAnchor");

    v5 = objc_msgSend(v2, "leadingAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);

    objc_msgSend(v6, "setActive:", 1);
  }
}

id sub_1003E2378()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  id v3;
  Class isa;
  id v5;

  v0 = sub_100012E18(&qword_1005CF6F0);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100451BF0;
  *(_QWORD *)(v1 + 32) = sub_1003E0A9C();
  v2 = sub_1003E0E5C();
  *(_QWORD *)(v1 + 40) = v2;
  specialized Array._endMutation()(v2);
  v3 = objc_allocWithZone((Class)UIStackView);
  sub_1000163BC(0, (unint64_t *)&qword_1005D8340, UIView_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v5 = objc_msgSend(v3, "initWithArrangedSubviews:", isa, swift_bridgeObjectRelease(v1).n128_f64[0]);

  objc_msgSend(v5, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v5, "setAxis:", 0);
  objc_msgSend(v5, "setAlignment:", 3);
  return v5;
}

id sub_1003E2488()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerFilterCell();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerFilterCell()
{
  return objc_opt_self(_TtC11MobileNotes24FolderComposerFilterCell);
}

uint64_t sub_1003E2614(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012E18(&qword_1005DCF20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003E2654()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1003E2678(uint64_t a1)
{
  uint64_t v1;

  sub_1003E2154(a1, v1);
}

void sub_1003E2680(id a1)
{
  if (a1 != (id)1)

}

id sub_1003E2690(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

void sub_1003E26A0(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD aBlock[5];
  uint64_t v12;

  v3 = objc_msgSend(a1, "presentedViewController");

  if (v3)
  {
    v4 = objc_msgSend(a1, "presentedViewController");
    if (v4)
    {
      v5 = v4;
      v6 = swift_allocObject(&unk_10056F088, 32, 7);
      *(_QWORD *)(v6 + 16) = a1;
      *(_QWORD *)(v6 + 24) = v1;
      aBlock[4] = sub_1003E3F18;
      v12 = v6;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100206734;
      aBlock[3] = &unk_10056F0A0;
      v7 = _Block_copy(aBlock);
      v8 = v12;
      v9 = a1;
      swift_release(v8);
      objc_msgSend(v5, "dismissViewControllerAnimated:completion:", 1, v7);
      _Block_release(v7);

    }
  }
  else
  {
    v10 = (id)sub_1003E3DBC();
    objc_msgSend(a1, "presentViewController:animated:completion:", v10, 1, 0);

  }
}

void sub_1003E27D4()
{
  _QWORD *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double left;
  uint64_t v6;
  double bottom;
  double right;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSString v29;
  id v30;
  id v31;
  void *v32;
  void *v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v1 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8))();
  v3 = v2;
  v36 = *(_QWORD *)(v2 + 16);
  if (v36)
  {
    v34 = v2;
    v4 = v2 + 56;
    left = UIEdgeInsetsZero.left;
    v6 = 1;
    bottom = UIEdgeInsetsZero.bottom;
    right = UIEdgeInsetsZero.right;
    v35 = v1;
    while (1)
    {
      v37 = v6;
      v9 = *(_QWORD *)(v4 - 16);
      v10 = *(_QWORD *)(v4 - 8);
      v11 = *(id *)(v4 - 24);
      swift_bridgeObjectRetain_n(v10, 2);
      v12 = v11;
      v13 = objc_msgSend(v12, "text");
      if (!v13)
        break;
      v14 = v13;
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v17 = v16;

      v41 = v15;
      v42 = v17;
      v39 = v9;
      v40 = v10;
      v18 = sub_1001452E8();
      LOBYTE(v14) = StringProtocol.contains<A>(_:)(&v39, &type metadata for String, &type metadata for String, v18, v18);
      swift_bridgeObjectRelease(v17);
      if ((v14 & 1) != 0)
      {
        v19 = sub_1003E312C();
        v21 = v20;
        v22 = objc_msgSend(v12, "text");
        if (!v22)
          goto LABEL_16;
        v23 = v22;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        v26 = v25;

        v41 = v24;
        v42 = v26;
        v39 = v9;
        v40 = v10;
        v38[0] = v19;
        v38[1] = v21;
        StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)(&v39, v38, 0, 0, 0, 1, &type metadata for String, &type metadata for String, &type metadata for String, v18, v18, v18);
        v28 = v27;
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v26);
        v29 = String._bridgeToObjectiveC()();
        objc_msgSend(v12, "setText:", v29, swift_bridgeObjectRelease(v28).n128_f64[0]);

        objc_msgSend(v12, "setSelectable:", 1);
        objc_msgSend(v12, "_setInteractiveTextSelectionDisabled:", 1);
        objc_msgSend(v12, "setTextContainerInset:", UIEdgeInsetsZero.top, left, bottom, right);
        v30 = objc_msgSend(v12, "textContainer");
        objc_msgSend(v30, "setLineFragmentPadding:", 0.0);

        v31 = objc_msgSend(v12, "attributedText");
        if (!v31)
          goto LABEL_17;
        v32 = v31;
        __chkstk_darwin(v31);
        v1 = v35;
        v33 = (void *)NSAttributedString.withMutations(_:)(sub_1003E3DB0);

        objc_msgSend(v12, "setAttributedText:", v33, swift_bridgeObjectRelease(v21).n128_f64[0]);
        swift_bridgeObjectRelease(v10);

      }
      else
      {

        swift_bridgeObjectRelease_n(v10, 2);
      }
      if (v36 == v37)
        goto LABEL_13;
      v4 += 32;
      v6 = v37 + 1;
      if (__OFADD__(v37, 1))
      {
        __break(1u);
LABEL_13:

        swift_bridgeObjectRelease(v34);
        return;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
  }
  else
  {

    swift_bridgeObjectRelease(v3);
  }
}

void sub_1003E2B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;

  v14 = v0;
  v15 = objc_msgSend((id)objc_opt_self(_UIImageSymbolConfiguration), "configurationWithFont:", *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViewFont));
  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews);
  if (v1)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v1 >> 62)
    {
LABEL_13:
      if (v1 >= 0)
        v13 = v2;
      else
        v13 = v1;
      swift_bridgeObjectRetain(v1);
      v3 = _CocoaArrayWrapper.endIndex.getter(v13);
      if (v3)
      {
LABEL_4:
        v4 = 4;
        while (1)
        {
          if ((v1 & 0xC000000000000001) != 0)
            v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v1);
          else
            v5 = *(id *)(v1 + 8 * v4);
          v6 = v5;
          v7 = v4 - 3;
          if (__OFADD__(v4 - 4, 1))
          {
            __break(1u);
            goto LABEL_13;
          }
          v8 = objc_msgSend(v5, "attributedText");
          if (!v8)
            break;
          v9 = v8;
          v10 = swift_allocObject(&unk_10056F060, 24, 7);
          v11 = swift_unknownObjectWeakInit(v10 + 16, v14);
          __chkstk_darwin(v11);
          v12 = (void *)NSAttributedString.withMutations(_:)(sub_1003E3DA8);

          objc_msgSend(v6, "setAttributedText:", v12, swift_release(v10).n128_f64[0]);
          ++v4;
          if (v7 == v3)
            goto LABEL_11;
        }
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews));
      if (v3)
        goto LABEL_4;
    }
LABEL_11:

    swift_bridgeObjectRelease(v1);
    return;
  }
LABEL_19:
  __break(1u);
}

void sub_1003E2D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_headerLabels);
  if (!v1)
    goto LABEL_30;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 >= 0)
      v7 = v1 & 0xFFFFFFFFFFFFFF8;
    else
      v7 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_headerLabels);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_headerLabels));
    v2 = _CocoaArrayWrapper.endIndex.getter(v7);
    if (!v2)
      goto LABEL_14;
  }
  else
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_headerLabels));
    if (!v2)
      goto LABEL_14;
  }
  if (v2 < 1)
  {
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v3 = 0;
  v4 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_headerFont);
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, v1);
    else
      v5 = *(id *)(v1 + 8 * v3 + 32);
    v6 = v5;
    ++v3;
    objc_msgSend(v5, "setFont:", v4);

  }
  while (v2 != v3);
LABEL_14:
  swift_bridgeObjectRelease(v1);
  v8 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews);
  if (v8)
  {
    if ((unint64_t)v8 >> 62)
    {
      if (v8 >= 0)
        v15 = v8 & 0xFFFFFFFFFFFFFF8;
      else
        v15 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews));
      v9 = _CocoaArrayWrapper.endIndex.getter(v15);
      if (v9)
      {
LABEL_17:
        if (v9 >= 1)
        {
          v10 = 0;
          v11 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViewFont);
          do
          {
            if ((v8 & 0xC000000000000001) != 0)
              v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, v8);
            else
              v12 = *(id *)(v8 + 8 * v10 + 32);
            v13 = v12;
            ++v10;
            objc_msgSend(v12, "setFont:", v11);
            v14 = objc_msgSend(v13, "textContainer");
            objc_msgSend(v14, "setLineFragmentPadding:", 0.0);

          }
          while (v9 != v10);
          goto LABEL_27;
        }
        goto LABEL_29;
      }
    }
    else
    {
      v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews));
      if (v9)
        goto LABEL_17;
    }
LABEL_27:
    swift_bridgeObjectRelease(v8);
    return;
  }
LABEL_31:
  __break(1u);
}

void sub_1003E2F60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  uint64_t v11;
  id v12;

  v12 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
  v1 = *(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews);
  if (v1)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFF8;
    if ((unint64_t)v1 >> 62)
    {
LABEL_13:
      if (v1 >= 0)
        v11 = v2;
      else
        v11 = v1;
      swift_bridgeObjectRetain(v1);
      v3 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (v3)
      {
LABEL_4:
        v4 = 4;
        while (1)
        {
          if ((v1 & 0xC000000000000001) != 0)
            v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v1);
          else
            v5 = *(id *)(v1 + 8 * v4);
          v6 = v5;
          v7 = v4 - 3;
          if (__OFADD__(v4 - 4, 1))
          {
            __break(1u);
            goto LABEL_13;
          }
          v8 = objc_msgSend(v5, "attributedText");
          if (!v8)
            break;
          v9 = v8;
          __chkstk_darwin(v8);
          v10 = (void *)NSAttributedString.withMutations(_:)(sub_1003E3D7C);

          objc_msgSend(v6, "setAttributedText:", v10);
          ++v4;
          if (v7 == v3)
            goto LABEL_11;
        }
        __break(1u);
        goto LABEL_19;
      }
    }
    else
    {
      v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(*(_QWORD *)(v0 + OBJC_IVAR___ICLearnMoreViewController_textViews));
      if (v3)
        goto LABEL_4;
    }
LABEL_11:
    swift_bridgeObjectRelease(v1);

    return;
  }
LABEL_19:
  __break(1u);
}

unint64_t sub_1003E3120()
{
  return sub_100135808((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1003E312C()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "localizedStringForKey:value:table:", v1, 0, 0);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

Class sub_1003E3300(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, _QWORD *a5)
{
  uint64_t v5;
  NSArray v6;

  v5 = *(_QWORD *)(a1 + *a3);
  if (v5)
  {
    sub_1000163BC(0, a4, a5);
    swift_bridgeObjectRetain(v5);
    v6.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6.super.isa = 0;
  }
  return v6.super.isa;
}

double sub_1003E337C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, _QWORD *a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  if (a3)
  {
    v9 = sub_1000163BC(0, a4, a5);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a3, v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + *a6);
  *(_QWORD *)(a1 + *a6) = v10;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
  return result;
}

id sub_1003E3518(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id result;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;

  result = objc_msgSend(a1, "string");
  if (result)
  {
    v7 = result;
    v8 = String._bridgeToObjectiveC()();
    v9 = objc_msgSend(v7, "rangeOfString:", v8);
    v11 = v10;

    result = (id)NSNotFound.getter();
    if (v9 != result)
    {
      v12 = String._bridgeToObjectiveC()();
      objc_msgSend(a1, "addAttribute:value:range:", NSLinkAttributeName, v12, v9, v11);

      return objc_msgSend(a1, "addAttribute:value:range:", NSForegroundColorAttributeName, a4, v9, v11);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003E3630(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  id v21;
  NSString v22;
  id v23;
  id v24;
  id v25;
  Swift::String v26;
  void *v27;
  uint64_t v28;
  int64_t v29;
  _BYTE v30[24];

  v4 = a2 + 16;
  swift_beginAccess(a2 + 16, v30, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (!result)
    return result;
  v27 = (void *)result;
  result = (*(uint64_t (**)(void))((swift_isaMask & *(_QWORD *)result) + 0xE0))();
  v6 = result;
  v7 = 0;
  v28 = result + 64;
  v8 = 1 << *(_BYTE *)(result + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(result + 64);
  v29 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_22;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v29)
      goto LABEL_25;
    v14 = *(_QWORD *)(v28 + 8 * v13);
    ++v7;
    if (!v14)
    {
      v7 = v13 + 1;
      if (v13 + 1 >= v29)
        goto LABEL_25;
      v14 = *(_QWORD *)(v28 + 8 * v7);
      if (!v14)
      {
        v7 = v13 + 2;
        if (v13 + 2 >= v29)
          goto LABEL_25;
        v14 = *(_QWORD *)(v28 + 8 * v7);
        if (!v14)
          break;
      }
    }
LABEL_21:
    v10 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_22:
    v16 = 16 * v12;
    v17 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + v16 + 8);
    v18 = (uint64_t *)(*(_QWORD *)(v6 + 56) + v16);
    v19 = *v18;
    v20 = (void *)v18[1];
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v20);
    v21 = a3;
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    v23 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v22, v21);

    if (v23)
    {
      v24 = objc_msgSend((id)objc_opt_self(UIColor), "ICTintColor");
      v25 = objc_msgSend(v23, "imageWithTintColor:", v24);

      if (v25)
      {
        v26._countAndFlagsBits = v19;
        v26._object = v20;
        NSMutableAttributedString.replace(placeholder:with:)(v26, (UIImage)v25);

      }
    }
    result = swift_bridgeObjectRelease(v20);
  }
  v15 = v13 + 3;
  if (v15 >= v29)
  {
LABEL_25:

    return swift_release(v6);
  }
  v14 = *(_QWORD *)(v28 + 8 * v15);
  if (v14)
  {
    v7 = v15;
    goto LABEL_21;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v29)
      goto LABEL_25;
    v14 = *(_QWORD *)(v28 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_21;
  }
LABEL_28:
  __break(1u);
  return result;
}

double sub_1003E38E4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  NSString *v8;
  id v9;
  NSString *v10;
  id v11;
  unint64_t v12;
  double result;
  uint64_t v14;

  v5 = sub_100012E18(&qword_1005D1B58);
  inited = swift_initStackObject(v5, &v14);
  *(_OWORD *)(inited + 16) = xmmword_100454E90;
  *(_QWORD *)(inited + 32) = NSFontAttributeName;
  v7 = sub_1000163BC(0, (unint64_t *)&unk_1005DBFC0, UIFont_ptr);
  *(_QWORD *)(inited + 40) = a2;
  *(_QWORD *)(inited + 64) = v7;
  *(_QWORD *)(inited + 72) = NSForegroundColorAttributeName;
  *(_QWORD *)(inited + 104) = sub_1000163BC(0, &qword_1005CFF50, UIColor_ptr);
  *(_QWORD *)(inited + 80) = a3;
  v8 = NSFontAttributeName;
  v9 = a2;
  v10 = NSForegroundColorAttributeName;
  v11 = a3;
  v12 = sub_100135F1C(inited);
  NSMutableAttributedString.formatHashtags(with:)((Swift::OpaquePointer)v12);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  return result;
}

id sub_1003E39C8(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  void *v8;
  char *v9;
  id v10;
  Class isa;
  uint64_t v12;
  NSString v13;
  id v14;
  objc_super v16;

  v4 = v3;
  swift_unknownObjectWeakInit(&v3[OBJC_IVAR___ICLearnMoreViewController_scrollView], 0);
  *(_QWORD *)&v3[OBJC_IVAR___ICLearnMoreViewController_headerLabels] = 0;
  *(_QWORD *)&v3[OBJC_IVAR___ICLearnMoreViewController_textViews] = 0;
  v7 = OBJC_IVAR___ICLearnMoreViewController_headerFont;
  v8 = (void *)objc_opt_self(UIFont);
  v9 = v3;
  v10 = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  isa = UIFont.withBoldTrait()().super.isa;

  *(_QWORD *)&v4[v7] = isa;
  v12 = OBJC_IVAR___ICLearnMoreViewController_textViewFont;
  *(_QWORD *)&v9[v12] = objc_msgSend(v8, "preferredFontForTextStyle:", UIFontTextStyleBody);

  if (a2)
  {
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v13 = 0;
  }
  v16.receiver = v9;
  v16.super_class = (Class)type metadata accessor for LearnMoreViewController();
  v14 = objc_msgSendSuper2(&v16, "initWithNibName:bundle:", v13, a3);

  return v14;
}

id sub_1003E3B80(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  void *v5;
  char *v6;
  id v7;
  Class isa;
  uint64_t v9;
  id v10;
  objc_super v12;

  v2 = v1;
  swift_unknownObjectWeakInit(&v1[OBJC_IVAR___ICLearnMoreViewController_scrollView], 0);
  *(_QWORD *)&v1[OBJC_IVAR___ICLearnMoreViewController_headerLabels] = 0;
  *(_QWORD *)&v1[OBJC_IVAR___ICLearnMoreViewController_textViews] = 0;
  v4 = OBJC_IVAR___ICLearnMoreViewController_headerFont;
  v5 = (void *)objc_opt_self(UIFont);
  v6 = v1;
  v7 = objc_msgSend(v5, "preferredFontForTextStyle:", UIFontTextStyleTitle3);
  isa = UIFont.withBoldTrait()().super.isa;

  *(_QWORD *)&v2[v4] = isa;
  v9 = OBJC_IVAR___ICLearnMoreViewController_textViewFont;
  *(_QWORD *)&v6[v9] = objc_msgSend(v5, "preferredFontForTextStyle:", UIFontTextStyleBody);

  v12.receiver = v6;
  v12.super_class = (Class)type metadata accessor for LearnMoreViewController();
  v10 = objc_msgSendSuper2(&v12, "initWithCoder:", a1);

  return v10;
}

id sub_1003E3CC4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LearnMoreViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LearnMoreViewController()
{
  return objc_opt_self(ICLearnMoreViewController);
}

double sub_1003E3D7C(uint64_t a1)
{
  uint64_t v1;

  return sub_1003E38E4(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1003E3D84()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003E3DA8(uint64_t a1)
{
  uint64_t v1;

  return sub_1003E3630(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24));
}

id sub_1003E3DB0(void *a1)
{
  uint64_t *v1;

  return sub_1003E3518(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003E3DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjCClassFromMetadata;
  id v4;
  NSString v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  _QWORD v11[4];

  _typeName(_:qualified:)(v0, 0);
  v2 = v1;
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v0);
  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend((id)objc_opt_self(UIStoryboard), "storyboardWithName:bundle:", v5, v4);

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v8 = objc_msgSend(v6, "instantiateViewControllerWithIdentifier:", v7);

  v11[3] = sub_1000163BC(0, &qword_1005D3D50, UIViewController_ptr);
  v11[0] = v8;
  v9 = sub_100169C5C((uint64_t)v11);

  sub_1000153C0(v11);
  return v9;
}

uint64_t sub_1003E3EF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_1003E3F18()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 16);
  v2 = (id)sub_1003E3DBC();
  objc_msgSend(v1, "presentViewController:animated:completion:", v2, 1, 0);

}

uint64_t destroy for LearnMoreViewController.TextViewAction(uint64_t a1)
{

  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for LearnMoreViewController.TextViewAction(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = v3;
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for LearnMoreViewController.TextViewAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for LearnMoreViewController.TextViewAction(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for LearnMoreViewController.TextViewAction(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for LearnMoreViewController.TextViewAction(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LearnMoreViewController.TextViewAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for LearnMoreViewController.TextViewAction()
{
  return &type metadata for LearnMoreViewController.TextViewAction;
}

uint64_t storeEnumTagSinglePayload for LearnMoreViewController.PlaceholderType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003E4180 + 4 * byte_100467E95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003E41B4 + 4 * asc_100467E90[v4]))();
}

uint64_t sub_1003E41B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E41BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003E41C4);
  return result;
}

uint64_t sub_1003E41D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003E41D8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003E41DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E41E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LearnMoreViewController.PlaceholderType()
{
  return &type metadata for LearnMoreViewController.PlaceholderType;
}

unint64_t sub_1003E4204()
{
  unint64_t result;

  result = qword_1005DCF88;
  if (!qword_1005DCF88)
  {
    result = swift_getWitnessTable(&unk_100467F18, &type metadata for LearnMoreViewController.PlaceholderType);
    atomic_store(result, (unint64_t *)&qword_1005DCF88);
  }
  return result;
}

double SetChecklistItemsCheckedIntent.init()@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  sub_1003E68E0((uint64_t *)v4);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t SetChecklistItemsCheckedIntent.note.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v2 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v2);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012CE8(a1, (uint64_t)v4, (uint64_t *)&unk_1005D0B60);
  IntentParameter.wrappedValue.setter(v4);
  return sub_100012DDC(a1, (uint64_t *)&unk_1005D0B60);
}

void *SetChecklistItemsCheckedIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static SetChecklistItemsCheckedIntent.persistentIdentifier;
}

unint64_t static SetChecklistItemsCheckedIntent.persistentIdentifier.getter()
{
  return 0xD000000000000023;
}

uint64_t sub_1003E433C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static SetChecklistItemsCheckedIntent.title);
  sub_10012A0B0(v10, (uint64_t)static SetChecklistItemsCheckedIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000001BLL, 0x800000010048DFC0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t SetChecklistItemsCheckedIntent.title.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CEDF8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetChecklistItemsCheckedIntent.title, (uint64_t)sub_1003E433C);
}

uint64_t static SetChecklistItemsCheckedIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CEDF8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetChecklistItemsCheckedIntent.title, (uint64_t)sub_1003E433C, a1);
}

uint64_t static SetChecklistItemsCheckedIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000028, 0x800000010048DF70);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static SetChecklistItemsCheckedIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v21;

  v0 = sub_100012E18(&qword_1005DCF90);
  __chkstk_darwin(v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100012E18(&qword_1005DCF98);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1001B2BE4();
  ParameterSummaryString.StringInterpolation.init(literalCapacity:interpolationCount:)(25, 3, &type metadata for SetChecklistItemsCheckedIntent, v6);
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_100467F50, v8);
  v10 = sub_100012E18(&qword_1005DCFA8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(KeyPath, v3, v10);
  swift_release(KeyPath);
  v11._countAndFlagsBits = 0x2065687420;
  v11._object = (void *)0xE500000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v11);
  v13 = swift_getKeyPath(&unk_100467F78, v12);
  v14 = sub_100012E18(&qword_1005DCFB0);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v13, v3, v14);
  swift_release(v13);
  v15._object = (void *)0x800000010048DFA0;
  v15._countAndFlagsBits = 0xD000000000000014;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v15);
  v17 = swift_getKeyPath(&unk_100467FA0, v16);
  v18 = sub_100012E18(&qword_1005DCFB8);
  ParameterSummaryString.StringInterpolation.appendInterpolation<A, B>(_:)(v17, v3, v18);
  swift_release(v17);
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  ParameterSummaryString.StringInterpolation.appendLiteral(_:)(v19);
  ParameterSummaryString.init(stringInterpolation:)(v5, &type metadata for SetChecklistItemsCheckedIntent, v6);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for SetChecklistItemsCheckedIntent, v6);
}

uint64_t SetChecklistItemsCheckedIntent.perform()(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2[6] = a1;
  v2[7] = v1;
  v3 = *(_QWORD *)(type metadata accessor for ChecklistItemEntity(0) - 8);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 + 64);
  v2[9] = v4;
  v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_1003E4978, 0, 0);
}

uint64_t sub_1003E4978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(v0 + 96) = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 8);
  IntentParameter.wrappedValue.getter((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 104) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 112) = v2;
  if (v2)
  {
    v4 = *(_QWORD **)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 64);
    v5 = v4[4];
    *(_QWORD *)(v0 + 120) = v5;
    v37 = *v4;
    *(_QWORD *)(v0 + 128) = *v4;
    v38 = v4[2];
    *(_QWORD *)(v0 + 136) = v38;
    v39 = v4[3];
    *(_QWORD *)(v0 + 144) = v39;
    LODWORD(v6) = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 256) = v6;
    v6 = v6;
    v7 = (v6 + 16) & ~v6;
    v8 = *(_QWORD *)(v0 + 80);
    v9 = (*(_QWORD *)(v0 + 72) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v0 + 152) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 160) = 0;
    v10 = *(_QWORD *)(v0 + 88);
    v36 = *(_QWORD *)(v0 + 96);
    v11 = v6 | 7;
    sub_100147414(v1 + ((v6 + 32) & ~v6), v10);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 32));
    v12 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 168) = objc_msgSend(v12, "modernManagedObjectContext");

    sub_100147414(v10, v8);
    v13 = swift_allocObject(&unk_10056F238, v9 + 40, v11);
    *(_QWORD *)(v0 + 176) = v13;
    sub_100147570(v8, v13 + v7);
    v14 = v13 + v9;
    v15 = v4[4];
    v16 = *((_OWORD *)v4 + 1);
    *(_OWORD *)v14 = *(_OWORD *)v4;
    *(_OWORD *)(v14 + 16) = v16;
    *(_QWORD *)(v14 + 32) = v15;
    v17 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v37);
    swift_retain(v36);
    swift_retain(v38);
    swift_retain(v39);
    swift_retain(v5);
    v18 = (_QWORD *)swift_task_alloc(v17);
    *(_QWORD *)(v0 + 184) = v18;
    v19 = (char *)sub_100012E18((uint64_t *)&unk_1005D0640);
    *v18 = v0;
    v18[1] = sub_1003E4C48;
    v20 = sub_1003E72C8;
    v21 = (_QWORD *)(v0 + 24);
    v22 = v13;
  }
  else
  {
    v23 = *(_QWORD *)(v0 + 56);
    swift_bridgeObjectRelease(v1);
    v24 = *(_QWORD *)(v23 + 32);
    v25 = *(_QWORD *)(v0 + 96);
    v26 = *(_QWORD **)(v0 + 56);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 40));
    v27 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 224) = objc_msgSend(v27, "modernManagedObjectContext");

    v28 = *v26;
    v29 = v26[2];
    v30 = v26[3];
    v31 = swift_allocObject(&unk_10056F260, 56, 7);
    *(_QWORD *)(v0 + 232) = v31;
    v32 = v26[4];
    v33 = *((_OWORD *)v26 + 1);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)v26;
    *(_OWORD *)(v31 + 32) = v33;
    *(_QWORD *)(v31 + 48) = v32;
    v34 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v25);
    swift_retain(v28);
    swift_retain(v29);
    swift_retain(v30);
    swift_retain(v24);
    v21 = (_QWORD *)swift_task_alloc(v34);
    *(_QWORD *)(v0 + 240) = v21;
    *v21 = v0;
    v21[1] = sub_1003E53F4;
    v19 = (char *)&type metadata for () + 8;
    v20 = sub_1003E7368;
    v22 = v31;
  }
  return NSManagedObjectContext.perform<A>(_:)(v21, v20, v22, v19);
}

uint64_t sub_1003E4C48()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  v2 = *(void **)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release(v1);

  return swift_task_switch(sub_1003E4CAC, 0, 0);
}

uint64_t sub_1003E4CAC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  char *v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v1 = *(void **)(v0 + 24);
  *(_QWORD *)(v0 + 192) = v1;
  if (!v1)
    goto LABEL_6;
  v2 = objc_opt_self(ICNote);
  v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
  {

LABEL_6:
    sub_10014763C(*(_QWORD *)(v0 + 88));
    goto LABEL_8;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "managedObjectContext");
  *(_QWORD *)(v0 + 200) = v5;
  if (v5)
  {
    v6 = *(unsigned __int8 *)(v0 + 256);
    v53 = *(_QWORD *)(v0 + 136);
    v55 = *(_QWORD *)(v0 + 144);
    v57 = *(_QWORD *)(v0 + 120);
    v50 = *(_QWORD *)(v0 + 128);
    v52 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 80);
    v8 = *(_QWORD *)(v0 + 56);
    v9 = (v6 + 24) & ~v6;
    v10 = (v9 + *(_QWORD *)(v0 + 72) + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = v6 | 7;
    sub_100147414(*(_QWORD *)(v0 + 88), v7);
    v12 = swift_allocObject(&unk_10056F288, v10 + 40, v11);
    *(_QWORD *)(v0 + 208) = v12;
    *(_QWORD *)(v12 + 16) = v4;
    sub_100147570(v7, v12 + v9);
    v13 = v12 + v10;
    v14 = *(_QWORD *)(v8 + 32);
    v15 = *(_OWORD *)(v8 + 16);
    *(_OWORD *)v13 = *(_OWORD *)v8;
    *(_OWORD *)(v13 + 16) = v15;
    *(_QWORD *)(v13 + 32) = v14;
    v16 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v50);
    swift_retain(v52);
    swift_retain(v53);
    swift_retain(v55);
    swift_retain(v57);
    v17 = v1;
    v18 = (_QWORD *)swift_task_alloc(v16);
    *(_QWORD *)(v0 + 216) = v18;
    v19 = (char *)sub_100012E18((uint64_t *)&unk_1005D68A0);
    *v18 = v0;
    v18[1] = sub_1003E50D0;
    v20 = sub_1003E74B0;
    v21 = (_QWORD *)(v0 + 260);
    v22 = v12;
    return NSManagedObjectContext.perform<A>(_:)(v21, v20, v22, v19);
  }
  sub_10014763C(*(_QWORD *)(v0 + 88));

LABEL_8:
  v23 = *(_QWORD *)(v0 + 160) + 1;
  if (v23 == *(_QWORD *)(v0 + 112))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    v24 = *(_QWORD *)(v0 + 120);
    v25 = *(_QWORD *)(v0 + 96);
    v26 = *(_QWORD **)(v0 + 56);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 40));
    v27 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 224) = objc_msgSend(v27, "modernManagedObjectContext");

    v28 = *v26;
    v29 = v26[2];
    v30 = v26[3];
    v31 = swift_allocObject(&unk_10056F260, 56, 7);
    *(_QWORD *)(v0 + 232) = v31;
    v32 = v26[4];
    v33 = *((_OWORD *)v26 + 1);
    *(_OWORD *)(v31 + 16) = *(_OWORD *)v26;
    *(_OWORD *)(v31 + 32) = v33;
    *(_QWORD *)(v31 + 48) = v32;
    v34 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v25);
    swift_retain(v28);
    swift_retain(v29);
    swift_retain(v30);
    swift_retain(v24);
    v21 = (_QWORD *)swift_task_alloc(v34);
    *(_QWORD *)(v0 + 240) = v21;
    *v21 = v0;
    v21[1] = sub_1003E53F4;
    v19 = (char *)&type metadata for () + 8;
    v20 = sub_1003E7368;
    v22 = v31;
  }
  else
  {
    *(_QWORD *)(v0 + 160) = v23;
    v35 = *(unsigned __int8 *)(v0 + 256);
    v59 = *(_QWORD *)(v0 + 144);
    v58 = *(_QWORD *)(v0 + 136);
    v36 = *(_QWORD *)(v0 + 120);
    v54 = *(_QWORD *)(v0 + 128);
    v56 = *(_QWORD *)(v0 + 96);
    v37 = *(_QWORD *)(v0 + 80);
    v38 = *(_QWORD *)(v0 + 88);
    v39 = *(_QWORD *)(v0 + 56);
    v40 = (v35 + 16) & ~v35;
    v41 = (v40 + *(_QWORD *)(v0 + 72) + 7) & 0xFFFFFFFFFFFFFFF8;
    v51 = v35 | 7;
    sub_100147414(*(_QWORD *)(v0 + 104) + ((v35 + 32) & ~v35) + *(_QWORD *)(v0 + 152) * v23, v38);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 32));
    v42 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 168) = objc_msgSend(v42, "modernManagedObjectContext");

    sub_100147414(v38, v37);
    v43 = swift_allocObject(&unk_10056F238, v41 + 40, v51);
    *(_QWORD *)(v0 + 176) = v43;
    sub_100147570(v37, v43 + v40);
    v44 = v43 + v41;
    v45 = *(_QWORD *)(v39 + 32);
    v46 = *(_OWORD *)(v39 + 16);
    *(_OWORD *)v44 = *(_OWORD *)v39;
    *(_OWORD *)(v44 + 16) = v46;
    *(_QWORD *)(v44 + 32) = v45;
    v47 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v54);
    swift_retain(v56);
    swift_retain(v58);
    swift_retain(v59);
    swift_retain(v36);
    v48 = (_QWORD *)swift_task_alloc(v47);
    *(_QWORD *)(v0 + 184) = v48;
    v19 = (char *)sub_100012E18((uint64_t *)&unk_1005D0640);
    *v48 = v0;
    v48[1] = sub_1003E4C48;
    v20 = sub_1003E72C8;
    v21 = (_QWORD *)(v0 + 24);
    v22 = v43;
  }
  return NSManagedObjectContext.perform<A>(_:)(v21, v20, v22, v19);
}

uint64_t sub_1003E50D0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  v2 = *(void **)(*(_QWORD *)v0 + 200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release(v1);

  return swift_task_switch(sub_1003E5134, 0, 0);
}

uint64_t sub_1003E5134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 88);

  sub_10014763C(v1);
  v2 = *(_QWORD *)(v0 + 160) + 1;
  if (v2 == *(_QWORD *)(v0 + 112))
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 96);
    v5 = *(_QWORD **)(v0 + 56);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 40));
    v6 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 224) = objc_msgSend(v6, "modernManagedObjectContext");

    v7 = *v5;
    v8 = v5[2];
    v9 = v5[3];
    v10 = swift_allocObject(&unk_10056F260, 56, 7);
    *(_QWORD *)(v0 + 232) = v10;
    v11 = v5[4];
    v12 = *((_OWORD *)v5 + 1);
    *(_OWORD *)(v10 + 16) = *(_OWORD *)v5;
    *(_OWORD *)(v10 + 32) = v12;
    *(_QWORD *)(v10 + 48) = v11;
    v13 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v4);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    swift_retain(v3);
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 240) = v14;
    *v14 = v0;
    v14[1] = sub_1003E53F4;
    v15 = (char *)&type metadata for () + 8;
    v16 = sub_1003E7368;
    v17 = v10;
  }
  else
  {
    *(_QWORD *)(v0 + 160) = v2;
    v18 = *(unsigned __int8 *)(v0 + 256);
    v37 = *(_QWORD *)(v0 + 144);
    v36 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 120);
    v34 = *(_QWORD *)(v0 + 128);
    v35 = *(_QWORD *)(v0 + 96);
    v20 = *(_QWORD *)(v0 + 80);
    v21 = *(_QWORD *)(v0 + 88);
    v22 = *(_QWORD *)(v0 + 56);
    v23 = (v18 + 16) & ~v18;
    v24 = (v23 + *(_QWORD *)(v0 + 72) + 7) & 0xFFFFFFFFFFFFFFF8;
    v33 = v18 | 7;
    sub_100147414(*(_QWORD *)(v0 + 104) + ((v18 + 32) & ~v18) + *(_QWORD *)(v0 + 152) * v2, v21);
    AppDependency.wrappedValue.getter((_QWORD *)(v0 + 32));
    v25 = *(void **)(v0 + 32);
    *(_QWORD *)(v0 + 168) = objc_msgSend(v25, "modernManagedObjectContext");

    sub_100147414(v21, v20);
    v26 = swift_allocObject(&unk_10056F238, v24 + 40, v33);
    *(_QWORD *)(v0 + 176) = v26;
    sub_100147570(v20, v26 + v23);
    v27 = v26 + v24;
    v28 = *(_QWORD *)(v22 + 32);
    v29 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)v27 = *(_OWORD *)v22;
    *(_OWORD *)(v27 + 16) = v29;
    *(_QWORD *)(v27 + 32) = v28;
    v30 = async function pointer to NSManagedObjectContext.perform<A>(_:)[1];
    swift_retain(v34);
    swift_retain(v35);
    swift_retain(v36);
    swift_retain(v37);
    swift_retain(v19);
    v31 = (_QWORD *)swift_task_alloc(v30);
    *(_QWORD *)(v0 + 184) = v31;
    v15 = (char *)sub_100012E18((uint64_t *)&unk_1005D0640);
    *v31 = v0;
    v31[1] = sub_1003E4C48;
    v16 = sub_1003E72C8;
    v14 = (_QWORD *)(v0 + 24);
    v17 = v26;
  }
  return NSManagedObjectContext.perform<A>(_:)(v14, v16, v17, v15);
}

uint64_t sub_1003E53F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 240);
  *(_QWORD *)(*v1 + 248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003E54AC;
  }
  else
  {
    v5 = *(void **)(v2 + 224);
    swift_release(*(_QWORD *)(v2 + 232));

    v4 = sub_1003E5464;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003E5464(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  static IntentResult.result<>()(a1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003E54AC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(void **)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 232));

  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1003E5500(_QWORD *a1@<X8>)
{
  void *v2;
  id v3;
  void *v4;

  AppDependency.wrappedValue.getter(&v4);
  v2 = v4;
  v3 = ChecklistItemEntity.note(in:)(v4);

  *a1 = v3;
}

void sub_1003E5560(void *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  id v33;
  double v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  _QWORD aBlock[5];
  uint64_t v47;
  uint64_t v48;

  v9 = type metadata accessor for ChecklistItemEntity(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a1, "textStorage");
  if (!v13)
    goto LABEL_3;
  v14 = v13;
  v45 = ICTTAttributeNameParagraphStyle;
  v15 = objc_msgSend(v14, "ic_range");
  v43 = v16;
  v44 = v15;
  sub_100147414(a2, (uint64_t)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = a3[1];
  v38 = *a3;
  v39 = v17;
  v18 = a3[3];
  v40 = a3[2];
  v41 = v18;
  v42 = a3[4];
  v19 = *(unsigned __int8 *)(v10 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v11 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = a1;
  v22 = a4;
  v23 = (v21 + 47) & 0xFFFFFFFFFFFFFFF8;
  v48 = v4;
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_10056F3D0, v24 + 8, v19 | 7);
  sub_100147570((uint64_t)v12, v25 + v20);
  v26 = v25 + v21;
  v27 = *((_OWORD *)a3 + 1);
  *(_OWORD *)v26 = *(_OWORD *)a3;
  *(_OWORD *)(v26 + 16) = v27;
  *(_QWORD *)(v26 + 32) = a3[4];
  *(_QWORD *)(v25 + v23) = v14;
  a4 = v22;
  v28 = v37;
  *(_QWORD *)(v25 + v24) = v37;
  v29 = swift_allocObject(&unk_10056F3F8, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_1003E7BD0;
  *(_QWORD *)(v29 + 24) = v25;
  aBlock[4] = sub_100147B3C;
  v47 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1003DA3F0;
  aBlock[3] = &unk_10056F410;
  v30 = _Block_copy(aBlock);
  v31 = v47;
  swift_retain(v38);
  swift_retain(v39);
  swift_retain(v40);
  swift_retain(v41);
  swift_retain(v42);
  v32 = v14;
  v33 = v28;
  swift_retain(v29);
  *(_QWORD *)&v34 = swift_release(v31).n128_u64[0];
  v35 = v45;
  objc_msgSend(v32, "enumerateAttribute:inRange:options:usingBlock:", v45, v44, v43, 0, v30, v34);

  _Block_release(v30);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation(v29, "", 121, 52, 157, 1);
  swift_release(v25);
  swift_release(v29);
  if ((v30 & 1) != 0)
    __break(1u);
  else
LABEL_3:
    *a4 = 0;
}

void sub_1003E5804(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, void *a7, void *a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  int v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  id v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void *v46;
  unsigned int v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t inited;
  void *v52;
  id v53;
  id v54;
  unint64_t v55;
  Class isa;
  double v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t, uint64_t, uint64_t);
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  id v65;
  _BYTE *v66;
  _BYTE v67[72];
  id v68;
  _QWORD v69[5];

  v65 = a8;
  v66 = a4;
  v63 = a7;
  v64 = a3;
  v61 = a6;
  v62 = a2;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100012E18((uint64_t *)&unk_1005D8C60);
  __chkstk_darwin(v14);
  v16 = (char *)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v23 = (char *)&v58 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v58 - v24;
  sub_100012CE8(a1, (uint64_t)v69, &qword_1005CF190);
  if (!v69[3])
  {
    sub_100012DDC((uint64_t)v69, &qword_1005CF190);
    return;
  }
  v26 = sub_1000163BC(0, (unint64_t *)&qword_1005D06B0, ICTTParagraphStyle_ptr);
  if ((swift_dynamicCast(&v68, v69, (char *)&type metadata for Any + 8, v26, 6) & 1) == 0)
    return;
  v27 = v68;
  if (objc_msgSend(v68, "style") == 103)
  {
    v28 = type metadata accessor for ChecklistItemID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v25, a5 + *(int *)(v28 + 20), v10);
    v29 = 1;
    v59 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v59(v25, 0, 1, v10);
    v60 = v27;
    v30 = objc_msgSend(v27, "uuid");
    if (v30)
    {
      v31 = v30;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

      v29 = 0;
    }
    v59(v23, v29, 1, v10);
    v32 = (uint64_t)&v16[*(int *)(v14 + 48)];
    sub_100012CE8((uint64_t)v25, (uint64_t)v16, (uint64_t *)&unk_1005D06A0);
    sub_100012CE8((uint64_t)v23, v32, (uint64_t *)&unk_1005D06A0);
    v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
    v34 = v33(v16, 1, v10);
    v27 = v60;
    if (v34 == 1)
    {
      sub_100012DDC((uint64_t)v23, (uint64_t *)&unk_1005D06A0);
      sub_100012DDC((uint64_t)v25, (uint64_t *)&unk_1005D06A0);
      if (v33((char *)v32, 1, v10) == 1)
      {
        sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D06A0);
        goto LABEL_14;
      }
      goto LABEL_12;
    }
    sub_100012CE8((uint64_t)v16, (uint64_t)v20, (uint64_t *)&unk_1005D06A0);
    if (v33((char *)v32, 1, v10) == 1)
    {
      sub_100012DDC((uint64_t)v23, (uint64_t *)&unk_1005D06A0);
      sub_100012DDC((uint64_t)v25, (uint64_t *)&unk_1005D06A0);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v20, v10);
LABEL_12:
      sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D8C60);
      goto LABEL_30;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v13, v32, v10);
    v35 = sub_100019C6C((unint64_t *)&unk_1005D1B70, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of static Equatable.== infix(_:_:)(v20, v13, v10, v35);
    v37 = *(void (**)(char *, uint64_t))(v11 + 8);
    v37(v13, v10);
    sub_100012DDC((uint64_t)v23, (uint64_t *)&unk_1005D06A0);
    sub_100012DDC((uint64_t)v25, (uint64_t *)&unk_1005D06A0);
    v37(v20, v10);
    v27 = v60;
    sub_100012DDC((uint64_t)v16, (uint64_t *)&unk_1005D06A0);
    if ((v36 & 1) != 0)
    {
LABEL_14:
      v38 = objc_msgSend(v27, "mutableCopy");
      if (!v38)
      {
LABEL_29:
        *v66 = 1;
        goto LABEL_30;
      }
      v39 = v38;
      IntentParameter.wrappedValue.getter(v69);
      if (LOBYTE(v69[0]))
      {
        if (LOBYTE(v69[0]) == 1)
        {
          v40 = objc_msgSend(v27, "todo");
          if (v40)
          {
            v41 = v40;
            v42 = objc_msgSend(v40, "todoWithDone:", 0);
LABEL_27:
            v49 = v42;

            goto LABEL_28;
          }
        }
        else
        {
          v44 = objc_msgSend(v27, "todo");
          if (v44)
          {
            v41 = v44;
            v45 = objc_msgSend(v27, "todo");
            if (v45)
            {
              v46 = v45;
              v47 = objc_msgSend(v45, "done");

              v48 = v47 ^ 1;
            }
            else
            {
              v48 = 1;
            }
            v42 = objc_msgSend(v41, "todoWithDone:", v48);
            goto LABEL_27;
          }
        }
      }
      else
      {
        v43 = objc_msgSend(v27, "todo");
        if (v43)
        {
          v41 = v43;
          v42 = objc_msgSend(v43, "todoWithDone:", 1);
          goto LABEL_27;
        }
      }
      v49 = 0;
LABEL_28:
      objc_msgSend(v39, "setTodo:", v49);

      v50 = sub_100012E18(&qword_1005D1B58);
      inited = swift_initStackObject(v50, v67);
      *(_OWORD *)(inited + 16) = xmmword_100451C20;
      v52 = (void *)ICTTAttributeNameParagraphStyle;
      *(_QWORD *)(inited + 32) = ICTTAttributeNameParagraphStyle;
      *(_QWORD *)(inited + 64) = sub_1000163BC(0, (unint64_t *)&qword_1005D1B60, ICTTMutableParagraphStyle_ptr);
      *(_QWORD *)(inited + 40) = v39;
      v53 = v52;
      v54 = v39;
      v55 = sub_100135F1C(inited);
      type metadata accessor for Key(0);
      sub_100019C6C((unint64_t *)&qword_1005CF5E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_100452820);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v57 = swift_bridgeObjectRelease(v55).n128_u64[0];
      objc_msgSend(v63, "setAttributes:range:", isa, v62, v64, v57);

      objc_msgSend(v65, "updateModificationDateAndChangeCount");
      goto LABEL_29;
    }
  }
LABEL_30:

}

id sub_1003E5E28()
{
  id v0;
  id v1;
  unsigned int v2;
  id v3;
  id v5;
  uint64_t v6;
  id v7;

  AppDependency.wrappedValue.getter(&v7);
  v0 = v7;
  v1 = objc_msgSend(v7, "modernManagedObjectContext");

  v7 = 0;
  v2 = objc_msgSend(v1, "save:", &v7);

  v3 = v7;
  if (v2)
    return v7;
  v5 = v7;
  _convertNSErrorToError(_:)(v3);

  return (id)swift_willThrow(v6);
}

uint64_t sub_1003E5F04()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v0 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v3 = *(_QWORD *)(v19[0] - 8);
  __chkstk_darwin(v19[0]);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Locale(0);
  __chkstk_darwin(v6);
  v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v9);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TypeDisplayRepresentation(0);
  sub_10012B334(v16, static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation);
  sub_10012A0B0(v16, (uint64_t)static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation);
  v17 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000010, 0x8000000100478B90);
  static Locale.current.getter(v17);
  (*(void (**)(char *, _QWORD, _QWORD))(v3 + 104))(v5, enum case for LocalizedStringResource.BundleDescription.main(_:), v19[0]);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v11, 0, 0, v8, v5, "Title for enum representing formatting change operations", 56, 2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v2, 1, 1, v12);
  return TypeDisplayRepresentation.init(name:numericFormat:)(v15, v2);
}

uint64_t SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation.unsafeMutableAddressor()
{
  return sub_100171BF8(&qword_1005CEE00, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation, (uint64_t)sub_1003E5F04);
}

uint64_t static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100171C60(&qword_1005CEE00, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation, (uint64_t)sub_1003E5F04, a1);
}

unint64_t sub_1003E6160()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  unint64_t result;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  char *v55;

  v0 = sub_100012E18((uint64_t *)&unk_1005D1070);
  __chkstk_darwin(v0);
  v55 = (char *)&v41 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v54 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v4 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin(v53);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Locale(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for LocalizedStringResource(0);
  v13 = *(_QWORD *)(v49 - 8);
  __chkstk_darwin(v49);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100012E18(&qword_1005DD068);
  v17 = sub_100012E18(&qword_1005DD070);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 72);
  v20 = *(unsigned __int8 *)(v18 + 80);
  v21 = (v20 + 32) & ~v20;
  v46 = v17;
  v47 = 2 * v19;
  v22 = swift_allocObject(v16, v21 + 3 * v19, v20 | 7);
  v48 = v22;
  *(_OWORD *)(v22 + 16) = xmmword_100456A10;
  v43 = v22 + v21 + *(int *)(v17 + 48);
  v44 = v22 + v21;
  *(_BYTE *)(v22 + v21) = 0;
  v23 = String.LocalizationValue.init(stringLiteral:)(0x6B63656843, 0xE500000000000000);
  static Locale.current.getter(v23);
  v52 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v45 = *(void (**)(char *))(v4 + 104);
  v24 = v53;
  v45(v6);
  v25 = v6;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v6, "Link enum value", 15, 2);
  v42 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v26 = v54;
  v27 = v49;
  v42(v54, 1, 1, v49);
  v28 = type metadata accessor for DisplayRepresentation.Image(0);
  v50 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v51 = v28;
  v29 = v55;
  v50(v55, 1, 1, v28);
  DisplayRepresentation.init(title:subtitle:image:)(v15, v26, v29);
  v30 = v44;
  v43 = v44 + v19 + *(int *)(v46 + 48);
  *(_BYTE *)(v44 + v19) = 1;
  v31 = String.LocalizationValue.init(stringLiteral:)(0x6B636568636E55, 0xE700000000000000);
  static Locale.current.getter(v31);
  v32 = v45;
  ((void (*)(char *, _QWORD, uint64_t))v45)(v25, v52, v24);
  v33 = v15;
  v34 = v25;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v25, "Link enum value", 15, 2);
  v35 = v54;
  v36 = v27;
  v37 = v42;
  v42(v54, 1, 1, v36);
  v38 = v55;
  v50(v55, 1, 1, v51);
  DisplayRepresentation.init(title:subtitle:image:)(v33, v35, v38);
  *(_BYTE *)(v30 + v47) = 2;
  v39 = String.LocalizationValue.init(stringLiteral:)(0x656C67676F54, 0xE600000000000000);
  static Locale.current.getter(v39);
  ((void (*)(char *, _QWORD, uint64_t))v32)(v34, v52, v53);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v12, 0, 0, v9, v34, "Link enum value", 15, 2);
  v37(v35, 1, 1, v49);
  v50(v38, 1, 1, v51);
  DisplayRepresentation.init(title:subtitle:image:)(v33, v35, v38);
  result = sub_100136BB4(v48);
  static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations = result;
  return result;
}

uint64_t *SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations.unsafeMutableAddressor()
{
  if (qword_1005CEE08 != -1)
    swift_once(&qword_1005CEE08, sub_1003E6160);
  return &static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations;
}

double static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_1005CEE08 != -1)
    swift_once(&qword_1005CEE08, sub_1003E6160);
  swift_beginAccess(&static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations).n128_u64[0];
  return result;
}

double static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations.setter(uint64_t a1)
{
  uint64_t v2;
  double result;
  _BYTE v4[24];

  if (qword_1005CEE08 != -1)
    swift_once(&qword_1005CEE08, sub_1003E6160);
  swift_beginAccess(&static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations, v4, 1, 0);
  v2 = static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations;
  static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations = a1;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  return result;
}

uint64_t (*static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations.modify(uint64_t a1))(_QWORD)
{
  if (qword_1005CEE08 != -1)
    swift_once(&qword_1005CEE08, sub_1003E6160);
  swift_beginAccess(&static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.caseDisplayRepresentations, a1, 33, 0);
  return j__swift_endAccess;
}

_UNKNOWN **static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.allCases.getter()
{
  return &off_100557678;
}

unint64_t sub_1003E6774@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s11MobileNotes30SetChecklistItemsCheckedIntentV0F19ChangeOperationTypeO8rawValueAESgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003E67A0@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CEE00, (uint64_t (*)(_QWORD))&type metadata accessor for TypeDisplayRepresentation, (uint64_t)static SetChecklistItemsCheckedIntent.CheckedChangeOperationType.typeDisplayRepresentation, (uint64_t)sub_1003E5F04, a1);
}

uint64_t sub_1003E67C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100128B90();
  return static AppEnum.defaultResolverSpecification.getter(a1, v2);
}

uint64_t sub_1003E67FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003E7710();
  return CaseDisplayRepresentable.localizedStringResource.getter(a1, v2);
}

void sub_1003E6834(_QWORD *a1@<X8>)
{
  *a1 = &off_100555C10;
}

uint64_t sub_1003E6844@<X0>(uint64_t a1@<X8>)
{
  return sub_10017262C(&qword_1005CEDF8, (uint64_t (*)(_QWORD))&type metadata accessor for LocalizedStringResource, (uint64_t)static SetChecklistItemsCheckedIntent.title, (uint64_t)sub_1003E433C, a1);
}

uint64_t sub_1003E6870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  _QWORD *v5;

  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1005DCFC4);
  *(_QWORD *)(v2 + 56) = v5;
  *v5 = v2;
  v5[1] = sub_1001802C4;
  return SetChecklistItemsCheckedIntent.perform()(a1);
}

uint64_t sub_1003E68E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *);
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t result;
  uint64_t *v68;
  uint64_t v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  unsigned int v75;
  void (*v76)(char *);
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  char *v85;
  char *v86;
  char *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD v90[7];

  v74 = a1;
  v1 = sub_100012E18((uint64_t *)&unk_1005D0B60);
  __chkstk_darwin(v1);
  v73 = (char *)v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for InputConnectionBehavior(0);
  v83 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin(v80);
  v87 = (char *)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100012E18((uint64_t *)&unk_1005CEE20);
  v5 = __chkstk_darwin(v4);
  v86 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v79 = (char *)v70 - v7;
  v8 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v8);
  v78 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Locale(0);
  __chkstk_darwin(v14);
  v16 = (char *)v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v17);
  v19 = (char *)v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for LocalizedStringResource(0);
  v21 = *(_QWORD *)(v20 - 8);
  v82 = v20;
  __chkstk_darwin(v20);
  v85 = (char *)v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100012E18(&qword_1005CF230);
  v23 = String.LocalizationValue.init(stringLiteral:)(0x65676E616843, 0xE600000000000000);
  static Locale.current.getter(v23);
  v24 = *(void (**)(char *))(v11 + 104);
  v25 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v75 = enum case for LocalizedStringResource.BundleDescription.main(_:);
  v77 = v10;
  v24(v13);
  v76 = v24;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Parameter title for Set Checklist Items Checked intent", 54, 2);
  v26 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000051, 0x8000000100478C10);
  static Locale.current.getter(v26);
  ((void (*)(char *, uint64_t, uint64_t))v24)(v13, v25, v10);
  v27 = v78;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Parameter description for operation", 35, 2);
  v81 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56);
  v81(v27, 0, 1, v20);
  LOBYTE(v90[0]) = 2;
  v28 = type metadata accessor for IntentDialog(0);
  v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v70[0] = v29;
  v30 = v79;
  v29(v79, 1, 1, v28);
  v31 = v86;
  v29(v86, 1, 1, v28);
  v84 = enum case for InputConnectionBehavior.default(_:);
  v83 = *(_QWORD *)(v83 + 104);
  v32 = v87;
  v33 = v80;
  ((void (*)(char *))v83)(v87);
  v34 = sub_100128B90();
  v35 = v27;
  v36 = v30;
  v72 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:supportedValues:)(v85, v35, v90, v30, v31, v32, &off_100555EA8, v34);
  v71 = sub_100012E18((uint64_t *)&unk_1005D1B80);
  v37 = String.LocalizationValue.init(stringLiteral:)(0x73696C6B63656843, 0xEE006D6574492074);
  static Locale.current.getter(v37);
  v38 = v75;
  v39 = (void (*)(char *, uint64_t, uint64_t))v76;
  v40 = v77;
  ((void (*)(char *, _QWORD, uint64_t))v76)(v13, v75, v77);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Parameter title for Set Checklist Items Checked intent", 54, 2);
  v41 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003CLL, 0x8000000100478C70);
  static Locale.current.getter(v41);
  v39(v13, v38, v40);
  v42 = v78;
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Parameter description for checklist item", 40, 2);
  v81(v42, 0, 1, v82);
  v90[0] = 0;
  v43 = v36;
  v44 = v36;
  v45 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v70[0];
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v70[0])(v44, 1, 1, v28);
  v46 = v86;
  v45(v86, 1, 1, v28);
  v47 = v87;
  ((void (*)(char *, _QWORD, uint64_t))v83)(v87, v84, v33);
  v48 = sub_100019C6C((unint64_t *)&unk_1005CEE80, type metadata accessor for ChecklistItemEntity, (uint64_t)&protocol conformance descriptor for ChecklistItemEntity);
  v71 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v85, v42, v90, v43, v46, v47, v48);
  v70[1] = sub_100012E18(&qword_1005CEEC8);
  v49 = String.LocalizationValue.init(stringLiteral:)(1702129486, 0xE400000000000000);
  static Locale.current.getter(v49);
  v50 = v75;
  v52 = (void (*)(char *, uint64_t, uint64_t))v76;
  v51 = v77;
  ((void (*)(char *, _QWORD, uint64_t))v76)(v13, v75, v77);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Parameter title for note to update checklist items in", 53, 2);
  v53 = String.LocalizationValue.init(stringLiteral:)(0xD00000000000003ELL, 0x8000000100478CF0);
  static Locale.current.getter(v53);
  v52(v13, v50, v51);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v19, 0, 0, v16, v13, "Parameter description", 21, 2);
  v54 = v42;
  v81(v42, 0, 1, v82);
  v55 = type metadata accessor for NoteEntity(0);
  v56 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v73, 1, 1);
  v57 = v79;
  v45(v79, 1, 1, v28);
  v58 = v86;
  v45(v86, 1, 1, v28);
  v59 = v87;
  ((void (*)(char *, _QWORD, uint64_t))v83)(v87, v84, v80);
  v60 = sub_100019C6C((unint64_t *)&qword_1005D0B70, type metadata accessor for NoteEntity, (uint64_t)&protocol conformance descriptor for NoteEntity);
  v61 = IntentParameter<>.init(title:description:default:requestValueDialog:requestDisambiguationDialog:inputConnectionBehavior:)(v85, v54, v56, v57, v58, v59, v60);
  sub_100012E18((uint64_t *)&unk_1005D06C0);
  v88 = 0xD000000000000024;
  v89 = 0x8000000100476B40;
  AnyHashable.init<A>(_:)(v90, &v88, &type metadata for String, &protocol witness table for String);
  v62 = type metadata accessor for AppDependencyManager(0);
  v63 = static AppDependencyManager.shared.getter(v62);
  v64 = AppDependency.__allocating_init(key:manager:)(v90, v63);
  sub_100012E18(&qword_1005CEE50);
  v88 = 0xD000000000000021;
  v89 = 0x8000000100476B70;
  v65 = AnyHashable.init<A>(_:)(v90, &v88, &type metadata for String, &protocol witness table for String);
  v66 = static AppDependencyManager.shared.getter(v65);
  result = AppDependency.__allocating_init(key:manager:)(v90, v66);
  v68 = v74;
  v69 = v71;
  *v74 = v72;
  v68[1] = v69;
  v68[2] = v61;
  v68[3] = v64;
  v68[4] = result;
  return result;
}

uint64_t sub_1003E714C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003E7174@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = IntentParameter.projectedValue.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1003E71A0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for ChecklistItemEntity(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + *(int *)(type metadata accessor for ChecklistItemID(0) + 20);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v9(v7 + v1[5], v8);
  swift_release(*(_QWORD *)(v7 + v1[6]));
  swift_release(*(_QWORD *)(v7 + v1[7]));
  swift_release(*(_QWORD *)(v7 + v1[8]));
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 16));
  swift_release(*(_QWORD *)(v0 + v6 + 24));
  swift_release(*(_QWORD *)(v0 + v6 + 32));
  return swift_deallocObject(v0, v6 + 40, v5);
}

void sub_1003E72C8(_QWORD *a1@<X8>)
{
  type metadata accessor for ChecklistItemEntity(0);
  sub_1003E5500(a1);
}

uint64_t sub_1003E7324()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

id sub_1003E7368()
{
  return sub_1003E5E28();
}

uint64_t sub_1003E7380()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for ChecklistItemEntity(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + *(int *)(type metadata accessor for ChecklistItemID(0) + 20);
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v9(v7 + v1[5], v8);
  swift_release(*(_QWORD *)(v7 + v1[6]));
  swift_release(*(_QWORD *)(v7 + v1[7]));
  swift_release(*(_QWORD *)(v7 + v1[8]));
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 16));
  swift_release(*(_QWORD *)(v0 + v6 + 24));
  swift_release(*(_QWORD *)(v0 + v6 + 32));
  return swift_deallocObject(v0, v6 + 40, v5);
}

void sub_1003E74B0(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for ChecklistItemEntity(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1003E5560(*(void **)(v1 + 16), v1 + v4, (_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)), a1);
}

unint64_t _s11MobileNotes30SetChecklistItemsCheckedIntentV0F19ChangeOperationTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100557610, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1003E755C()
{
  unint64_t result;

  result = qword_1005DCFC8;
  if (!qword_1005DCFC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DCFC8);
  }
  return result;
}

unint64_t sub_1003E75A4()
{
  unint64_t result;

  result = qword_1005DCFD0;
  if (!qword_1005DCFD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DCFD0);
  }
  return result;
}

unint64_t sub_1003E75EC()
{
  unint64_t result;

  result = qword_1005DCFD8;
  if (!qword_1005DCFD8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DCFD8);
  }
  return result;
}

unint64_t sub_1003E7634()
{
  unint64_t result;

  result = qword_1005DCFE0;
  if (!qword_1005DCFE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DCFE0);
  }
  return result;
}

unint64_t sub_1003E767C()
{
  unint64_t result;

  result = qword_1005DCFE8;
  if (!qword_1005DCFE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DCFE8);
  }
  return result;
}

unint64_t sub_1003E76C4()
{
  unint64_t result;

  result = qword_1005DCFF0;
  if (!qword_1005DCFF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DCFF0);
  }
  return result;
}

unint64_t sub_1003E7710()
{
  unint64_t result;

  result = qword_1005DD000;
  if (!qword_1005DD000)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DD000);
  }
  return result;
}

uint64_t sub_1003E7754(uint64_t a1, uint64_t a2)
{
  _QWORD v3[2];

  v3[0] = a2;
  v3[1] = sub_100128B90();
  return swift_getOpaqueTypeConformance2(v3, &opaque type descriptor for <<opaque return type of static AppEnum.defaultResolverSpecification>>, 1);
}

unint64_t sub_1003E7798()
{
  unint64_t result;

  result = qword_1005DD010;
  if (!qword_1005DD010)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DD010);
  }
  return result;
}

unint64_t sub_1003E77E0()
{
  unint64_t result;

  result = qword_1005DD018;
  if (!qword_1005DD018)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DD018);
  }
  return result;
}

unint64_t sub_1003E7828()
{
  unint64_t result;

  result = qword_1005DD020;
  if (!qword_1005DD020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType, &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType);
    atomic_store(result, (unint64_t *)&qword_1005DD020);
  }
  return result;
}

uint64_t sub_1003E786C()
{
  return sub_100016638(&qword_1005DD028, &qword_1005DD030, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_1003E789C()
{
  unint64_t result;

  result = qword_1005DD038;
  if (!qword_1005DD038)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent, &type metadata for SetChecklistItemsCheckedIntent);
    atomic_store(result, (unint64_t *)&qword_1005DD038);
  }
  return result;
}

unint64_t sub_1003E78E4()
{
  unint64_t result;

  result = qword_1005DD040;
  if (!qword_1005DD040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SetChecklistItemsCheckedIntent, &type metadata for SetChecklistItemsCheckedIntent);
    atomic_store(result, (unint64_t *)&qword_1005DD040);
  }
  return result;
}

uint64_t sub_1003E7928(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of SetChecklistItemsCheckedIntent.perform()>>, 1);
}

uint64_t sub_1003E7938(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static SetChecklistItemsCheckedIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for SetChecklistItemsCheckedIntent()
{
  return &type metadata for SetChecklistItemsCheckedIntent;
}

uint64_t storeEnumTagSinglePayload for SetChecklistItemsCheckedIntent.CheckedChangeOperationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003E79A4 + 4 * byte_100467F45[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003E79D8 + 4 * byte_100467F40[v4]))();
}

uint64_t sub_1003E79D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E79E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003E79E8);
  return result;
}

uint64_t sub_1003E79F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003E79FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003E7A00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E7A08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SetChecklistItemsCheckedIntent.CheckedChangeOperationType()
{
  return &type metadata for SetChecklistItemsCheckedIntent.CheckedChangeOperationType;
}

uint64_t sub_1003E7A24()
{
  return sub_100016638(&qword_1005DD050, (uint64_t *)&unk_1005DD058, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_1003E7A50()
{
  return sub_100016638((unint64_t *)&qword_1005D1B40, (uint64_t *)&unk_1005D0690, (uint64_t)&protocol conformance descriptor for IntentResultContainer<A, B, C, D>);
}

uint64_t sub_1003E7A7C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = (int *)type metadata accessor for ChecklistItemEntity(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v14 = v3 | 7;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 47) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v4;
  v9 = type metadata accessor for URL(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v11 = v8 + *(int *)(type metadata accessor for ChecklistItemID(0) + 20);
  v12 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v10(v8 + v1[5], v9);
  swift_release(*(_QWORD *)(v8 + v1[6]));
  swift_release(*(_QWORD *)(v8 + v1[7]));
  swift_release(*(_QWORD *)(v8 + v1[8]));
  swift_release(*(_QWORD *)(v0 + v5));
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 16));
  swift_release(*(_QWORD *)(v0 + v5 + 24));
  swift_release(*(_QWORD *)(v0 + v5 + 32));

  return swift_deallocObject(v0, v7 + 8, v14);
}

void sub_1003E7BD0(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for ChecklistItemEntity(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1003E5804(a1, a2, a3, a4, v4 + v10, v4 + v11, *(void **)(v4 + ((v11 + 47) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v4 + ((((v11 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1003E7C60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_1003E7C70()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  id v6;

  v1 = OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell____lazy_storage___switchView;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell____lazy_storage___switchView);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell____lazy_storage___switchView);
  }
  else
  {
    v4 = objc_msgSend(objc_allocWithZone((Class)UISwitch), "init");
    objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    objc_msgSend(v4, "addTarget:action:forControlEvents:", v0, "onDidChangeWithSender:", 4096);
    v5 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v4;
    v3 = v4;

    v2 = 0;
  }
  v6 = v2;
  return v3;
}

uint64_t sub_1003E7D14()
{
  char *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  _QWORD v33[5];

  v1 = v0;
  v2 = type metadata accessor for UIListContentConfiguration(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v33[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  UICollectionViewListCell.defaultContentConfiguration()(v4);
  v7 = &v0[OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell_text];
  v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC11MobileNotes29SmartFolderComposerSwitchCell_text];
  v9 = *((_QWORD *)v7 + 1);
  swift_bridgeObjectRetain(v9);
  UIListContentConfiguration.text.setter(v8, v9);
  v33[3] = v2;
  v33[4] = &protocol witness table for UIListContentConfiguration;
  v10 = sub_10012D160(v33);
  (*(void (**)(_QWORD *, char *, uint64_t))(v3 + 16))(v10, v6, v2);
  UICollectionViewCell.contentConfiguration.setter(v33);
  v11 = sub_1003E7C70();
  v12 = objc_msgSend(v11, "superview");

  if (!v12)
  {
    v13 = objc_msgSend(v1, "contentView");
    v14 = sub_1003E7C70();
    objc_msgSend(v13, "addSubview:", v14);

    v15 = (void *)objc_opt_self(NSLayoutConstraint);
    v16 = sub_100012E18(&qword_1005CF6F0);
    v17 = swift_allocObject(v16, 48, 7);
    *(_OWORD *)(v17 + 16) = xmmword_100451BF0;
    v18 = sub_1003E7C70();
    v19 = objc_msgSend(v18, "trailingAnchor");

    v20 = objc_msgSend(v1, "contentView");
    v21 = objc_msgSend(v20, "trailingAnchor");

    v22 = objc_msgSend(v19, "constraintEqualToAnchor:constant:", v21, -UIListContentConfiguration.imageToTextPadding.getter());
    *(_QWORD *)(v17 + 32) = v22;
    v23 = sub_1003E7C70();
    v24 = objc_msgSend(v23, "centerYAnchor");

    v25 = objc_msgSend(v1, "contentView");
    v26 = objc_msgSend(v25, "centerYAnchor");

    v27 = objc_msgSend(v24, "constraintEqualToAnchor:", v26);
    *(_QWORD *)(v17 + 40) = v27;
    v33[0] = v17;
    specialized Array._endMutation()(v28);
    v29 = v33[0];
    sub_10022A99C();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v15, "activateConstraints:", isa, swift_bridgeObjectRelease(v29).n128_f64[0]);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t type metadata accessor for SmartFolderComposerSwitchCell()
{
  return objc_opt_self(_TtC11MobileNotes29SmartFolderComposerSwitchCell);
}

void *ScanDocumentIntent.persistentIdentifier.unsafeMutableAddressor()
{
  return &static ScanDocumentIntent.persistentIdentifier;
}

unint64_t static ScanDocumentIntent.persistentIdentifier.getter()
{
  return 0xD000000000000016;
}

uint64_t sub_1003E82D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[16];

  v0 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for Locale(0);
  __chkstk_darwin(v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v7);
  v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = type metadata accessor for LocalizedStringResource(0);
  sub_10012B334(v10, static ScanDocumentIntent.title);
  sub_10012A0B0(v10, (uint64_t)static ScanDocumentIntent.title);
  v11 = String.LocalizationValue.init(stringLiteral:)(0xD000000000000016, 0x800000010048E0E0);
  static Locale.current.getter(v11);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for LocalizedStringResource.BundleDescription.main(_:), v0);
  return LocalizedStringResource.init(_:table:locale:bundle:comment:)(v9, 0, 0, v6, v3, "Intent title", 12, 2);
}

uint64_t ScanDocumentIntent.title.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_1005CEE10 != -1)
    swift_once(&qword_1005CEE10, sub_1003E82D4);
  v0 = type metadata accessor for LocalizedStringResource(0);
  return sub_10012A0B0(v0, (uint64_t)static ScanDocumentIntent.title);
}

uint64_t static ScanDocumentIntent.title.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_1005CEE10 != -1)
    swift_once(&qword_1005CEE10, sub_1003E82D4);
  v2 = type metadata accessor for LocalizedStringResource(0);
  v3 = sub_10012A0B0(v2, (uint64_t)static ScanDocumentIntent.title);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

void *ScanDocumentIntent.openAppWhenRun.unsafeMutableAddressor()
{
  return &static ScanDocumentIntent.openAppWhenRun;
}

uint64_t static ScanDocumentIntent.description.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[16];

  v2 = sub_100012E18(&qword_1005CEE30);
  __chkstk_darwin(v2);
  v4 = &v22[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for LocalizedStringResource.BundleDescription(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v22[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for Locale(0);
  __chkstk_darwin(v9);
  v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for String.LocalizationValue(0);
  __chkstk_darwin(v12);
  v14 = &v22[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for LocalizedStringResource(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v22[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = String.LocalizationValue.init(stringLiteral:)(0x100000000000004ELL, 0x800000010048E070);
  static Locale.current.getter(v19);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizedStringResource.BundleDescription.main(_:), v5);
  LocalizedStringResource.init(_:table:locale:bundle:comment:)(v14, 0, 0, v11, v8, "Intent description", 18, 2);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v4, 1, 1, v15);
  IntentDescription.init(_:categoryName:searchKeywords:)(v18, v4, _swiftEmptyArrayStorage);
  v20 = type metadata accessor for IntentDescription(0);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a1, 0, 1, v20);
}

uint64_t static ScanDocumentIntent.parameterSummary.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v5;

  v0 = sub_100012E18(&qword_1005DD0C0);
  __chkstk_darwin(v0);
  v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_100185DE4();
  ParameterSummaryString.init(stringLiteral:)(0xD000000000000017, 0x800000010048E0C0, &type metadata for ScanDocumentIntent, v3);
  return IntentParameterSummary.init(_:table:)(v2, 0, 0, &type metadata for ScanDocumentIntent, v3);
}

uint64_t sub_1003E87D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = sub_100012E18(&qword_1005DD0C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  ParameterSummaryString.init(stringLiteral:)(0xD000000000000017, 0x800000010048E0C0, a1, a2);
  return IntentParameterSummary.init(_:table:)(v6, 0, 0, a1, a2);
}

unint64_t sub_1003E888C()
{
  unint64_t result;

  result = qword_1005DD0C8;
  if (!qword_1005DD0C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScanDocumentIntent, &type metadata for ScanDocumentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DD0C8);
  }
  return result;
}

unint64_t sub_1003E88D4()
{
  unint64_t result;

  result = qword_1005DD0D0;
  if (!qword_1005DD0D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ScanDocumentIntent, &type metadata for ScanDocumentIntent);
    atomic_store(result, (unint64_t *)&qword_1005DD0D0);
  }
  return result;
}

uint64_t sub_1003E8918(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of ScanDocumentIntent.perform()>>, 1);
}

uint64_t sub_1003E8928(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &opaque type descriptor for <<opaque return type of static ScanDocumentIntent.parameterSummary>>, 1);
}

ValueMetadata *type metadata accessor for ScanDocumentIntent()
{
  return &type metadata for ScanDocumentIntent;
}

uint64_t sub_1003E8948()
{
  return sub_100016638(&qword_1005DD0E0, &qword_1005DD0E8, (uint64_t)&protocol conformance descriptor for IntentParameterSummary<A>);
}

uint64_t sub_1003E8974(uint64_t a1, char *a2, int a3, uint64_t a4, void (*a5)(char *, uint64_t), double a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t ObjectType;
  void *v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  Class isa;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  void (*v69)(char *, uint64_t);
  Class v70;
  NSString v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  _QWORD v76[2];
  char *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  uint64_t (*v93)(uint64_t, uint64_t, uint64_t);
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  char *v97;
  void *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;

  v95 = a4;
  v94 = a5;
  LODWORD(v93) = a3;
  v92 = a2;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v100 = v8;
  v101 = v9;
  __chkstk_darwin(v8);
  v97 = (char *)v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100012E18(&qword_1005DD110);
  v12 = __chkstk_darwin(v11);
  v99 = (char *)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v14 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v15 = __chkstk_darwin(v14);
  v84 = (char *)v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v85 = (char *)v76 - v18;
  v19 = __chkstk_darwin(v17);
  v91 = (char *)v76 - v20;
  v21 = __chkstk_darwin(v19);
  v83 = (char *)v76 - v22;
  v23 = __chkstk_darwin(v21);
  v90 = (char *)v76 - v24;
  v25 = __chkstk_darwin(v23);
  v82 = (char *)v76 - v26;
  v27 = __chkstk_darwin(v25);
  v89 = (char *)v76 - v28;
  v29 = __chkstk_darwin(v27);
  v81 = (char *)v76 - v30;
  v31 = __chkstk_darwin(v29);
  v88 = (char *)v76 - v32;
  v33 = __chkstk_darwin(v31);
  v80 = (char *)v76 - v34;
  v35 = __chkstk_darwin(v33);
  v37 = (void (*)(char *, uint64_t))((char *)v76 - v36);
  __chkstk_darwin(v35);
  v87 = (uint64_t)v76 - v38;
  v86 = type metadata accessor for Date(0);
  v39 = *(_QWORD *)(v86 - 8);
  v40 = __chkstk_darwin(v86);
  v42 = (char *)v76 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v40);
  v45 = (char *)v76 - v44;
  v46 = __chkstk_darwin(v43);
  v48 = (char *)v76 - v47;
  v49 = __chkstk_darwin(v46);
  v51 = (char *)v76 - v50;
  __chkstk_darwin(v49);
  v53 = (char *)v76 - v52;
  ObjectType = swift_getObjectType(a1);
  v55 = v98;
  result = (*((uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, void (*)(char *, uint64_t), uint64_t, double))v92
            + 4))(*(_QWORD *)(v96 + 8), *(_QWORD *)(v96 + 16), (unsigned __int16)v93 & 0x101, v95, v94, ObjectType, a6);
  if (!v55)
  {
    v77 = v45;
    v78 = v48;
    v94 = v37;
    v92 = v42;
    v98 = (void *)result;
    v79 = type metadata accessor for ICNoteArchiveModel(0);
    v57 = v87;
    sub_100012CE8(v96 + *(int *)(v79 + 40), v87, (uint64_t *)&unk_1005D7B20);
    v58 = v86;
    v93 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
    v59 = v93(v57, 1, v86);
    v60 = v39;
    v76[1] = 0;
    if ((_DWORD)v59 == 1)
    {
      Date.init()(v59);
      sub_100012DDC(v57, (uint64_t *)&unk_1005D7B20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v51, v57, v58);
    }
    v61 = v98;
    v62 = (uint64_t)v94;
    static Date.+ infix(_:_:)(v51, a6);
    v63 = *(void (**)(char *, uint64_t))(v60 + 8);
    v63(v51, v58);
    isa = Date._bridgeToObjectiveC()().super.isa;
    v94 = v63;
    v63(v53, v58);
    objc_msgSend(v61, "setCreationDate:", isa);

    v65 = (int *)v79;
    sub_100012CE8(v96 + *(int *)(v79 + 44), v62, (uint64_t *)&unk_1005D7B20);
    v66 = v93(v62, 1, v58);
    v67 = v77;
    if ((_DWORD)v66 == 1)
    {
      Date.init()(v66);
      sub_100012DDC(v62, (uint64_t *)&unk_1005D7B20);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v77, v62, v58);
    }
    v68 = v78;
    static Date.+ infix(_:_:)(v67, a6);
    v69 = v94;
    v94(v67, v58);
    v70 = Date._bridgeToObjectiveC()().super.isa;
    v69(v68, v58);
    objc_msgSend(v61, "setModificationDate:", v70);

    if (*(_QWORD *)(v96 + v65[12] + 8))
      v71 = String._bridgeToObjectiveC()();
    else
      v71 = 0;
    objc_msgSend(v61, "setTitle:", v71);

    v72 = v96;
    objc_msgSend(v61, "setIsPinned:", *(_BYTE *)(v96 + v65[13]) & 1);
    objc_msgSend(v61, "setIsSystemPaper:", *(_BYTE *)(v72 + v65[14]) & 1);
    objc_msgSend(v61, "setPaperStyleType:", word_1004D6990[*(char *)(v72 + v65[15])]);
    v73 = *(unsigned __int8 *)(v72 + v65[16]);
    if ((v73 & 1) != 0)
      v74 = 2;
    else
      v74 = 1;
    if (v73 == 2)
      v75 = 0;
    else
      v75 = v74;
    objc_msgSend(v61, "setPreferredBackgroundType:", v75);
    __asm { BR              X10 }
  }
  return result;
}

id sub_1003E99C4(id a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  unint64_t v40;
  uint64_t v41;
  Class isa;
  id result;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  id v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  id v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  unint64_t _;
  void *_a;
  _QWORD aBlock[5];
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;

  v14 = type metadata accessor for ICNoteArchiveModel(0);
  v15 = (uint64_t *)(v6 + *(int *)(v14 + 100));
  v16 = v15[1];
  if (!v16)
  {
    v21 = (uint64_t *)(v6 + *(int *)(v14 + 96));
    v22 = v21[10];
    if (!v22)
      return 0;
    v23 = v21[1];
    v24 = v21[2];
    v25 = v21[3];
    v26 = v21[4];
    v27 = v21[5];
    v63 = a1;
    v29 = v21[6];
    v28 = v21[7];
    v31 = v21[8];
    v30 = v21[9];
    v32 = v21[11];
    v33 = v21[12];
    v65 = *v21;
    v73 = *v21;
    v74 = v23;
    v75 = v24;
    v76 = v25;
    v77 = v26;
    v78 = v27;
    v79 = v29;
    v80 = v28;
    v81 = v31;
    v82 = v30;
    v61 = v23;
    v62 = v30;
    v83 = v22;
    v84 = v32;
    v85 = v33;
    _ = v24;
    sub_10013DCA0(v23, v24);
    v66 = v26;
    v67 = v25;
    v34 = v26;
    v35 = v27;
    sub_10013DCA0(v25, v34);
    v64 = v29;
    v36 = v29;
    v37 = v28;
    sub_10013DCA0(v27, v36);
    sub_10013DCA0(v28, v31);
    swift_bridgeObjectRetain(v22);
    sub_10013DCA0(v32, v33);
    sub_10013D5A8(v63);
    v38 = objc_msgSend(v63, "noteData");
    if (v38)
    {
      v39 = v38;
      v40 = v33;
      v41 = v32;
      isa = Data._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v39, "setData:", isa);

      v32 = v41;
      v33 = v40;
    }
    a1 = objc_msgSend(v63, "noteData");
    sub_1003EE9D8(v65, v61, _, v67, v66, v35, v64, v37, v31, v62, v22, v32, v33);
    return a1;
  }
  v17 = v15[2];
  v18 = *v15;
  v19 = sub_1003EDB20(a2);
  v20 = sub_100255710(v19, (uint64_t)a1, (uint64_t)&off_100565710, a3 & 0x101, a4, a5, a6, v18, v16, v17);
  swift_release(v19);
  if (v7)
    return a1;
  _a = v20;
  result = objc_msgSend(a1, "textStorage");
  if (result)
  {
    v44 = result;
    objc_msgSend(result, "beginSkippingTimestampUpdates");
    v45 = objc_msgSend(v44, "mergeableString");
    v46 = objc_msgSend(v44, "ic_range");
    v48 = v47;
    v49 = objc_msgSend(objc_allocWithZone((Class)NSAttributedString), "init");
    objc_msgSend(v45, "replaceCharactersInRange:withAttributedString:", v46, v48, v49);

    v50 = objc_msgSend(v44, "mergeableString");
    ICTTMergeableAttributedString.insertAuthorAttributedString(_:at:)((NSAttributedString)_a, 0);

    v51 = objc_msgSend(v44, "mergeableString");
    v68 = objc_msgSend(v44, "ic_range");
    v53 = v52;
    v54 = swift_allocObject(&unk_10056F798, 24, 7);
    *(_QWORD *)(v54 + 16) = a1;
    v55 = swift_allocObject(&unk_10056F7C0, 32, 7);
    *(_QWORD *)(v55 + 16) = sub_1003EEAB4;
    *(_QWORD *)(v55 + 24) = v54;
    aBlock[4] = sub_1000165D8;
    v72 = v55;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1003ED1E8;
    aBlock[3] = &unk_10056F7D8;
    v56 = _Block_copy(aBlock);
    v57 = v72;
    v58 = a1;
    swift_retain(v55);
    swift_release(v57);
    objc_msgSend(v51, "enumerateEditsInRange:usingBlock:", v68, v53, v56);

    _Block_release(v56);
    LOBYTE(v56) = swift_isEscapingClosureAtFileLocation(v55, "", 107, 144, 81, 1);
    result = (id)swift_release(v55);
    if ((v56 & 1) == 0)
    {
      objc_msgSend(v44, "endSkippingTimestampUpdates");
      v59 = objc_msgSend(v58, "noteData");
      if (v59)
      {
        v60 = v59;
        objc_msgSend(v59, "setNeedsToBeSaved:", 1);

      }
      a1 = objc_msgSend(v58, "noteData");
      swift_release(v54);

      return a1;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003E9E74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t IsAlexandriaDemoModeEnabled;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD v40[3];
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;

  v3 = v2;
  v5 = sub_100012E18(&qword_1005D4DF8);
  __chkstk_darwin(v5);
  v45 = (uint64_t)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18(&qword_1005D4E00);
  __chkstk_darwin(v7);
  v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PersistedActivityEvent(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v42 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = _s8ActivityVMa(0);
  v13 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v15 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + *(int *)(type metadata accessor for ICNoteArchiveModel(0) + 108));
  if (!v16)
    return 0;
  v48 = (unint64_t)_swiftEmptyArrayStorage;
  v17 = *(_QWORD *)(v16 + 16);
  if (!v17)
    goto LABEL_13;
  v40[1] = a1;
  v40[2] = v3;
  v18 = v16 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v44 = *(_QWORD *)(v13 + 72);
  v40[0] = v16;
  swift_bridgeObjectRetain(v16);
  v47 = v15;
  do
  {
    v46 = v17;
    v33 = sub_100145220(v18, (uint64_t)v15, _s8ActivityVMa);
    IsAlexandriaDemoModeEnabled = ICInternalSettingsIsAlexandriaDemoModeEnabled(v33);
    ICInternalSettingsIsAlexandriaDemoModeEnabled(IsAlexandriaDemoModeEnabled);
    sub_100220CC8((uint64_t)v9, 0.0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100012DDC((uint64_t)v9, &qword_1005D4E00);
      v43 = sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
      v19 = &v15[*(int *)(v41 + 44)];
      v20 = v10;
      v22 = *(_QWORD *)v19;
      v21 = *((_QWORD *)v19 + 1);
      v23 = v11;
      v24 = v9;
      v25 = v45;
      sub_100221268(v45, 0.0);
      v26 = v22;
      v10 = v20;
      v27 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(forData:fallback:)(v26, v21, v25);
      v28 = v25;
      v9 = v24;
      v11 = v23;
      v15 = v47;
      sub_100012DDC(v28, &qword_1005D4DF8);
      v29 = sub_100145264((uint64_t)v15, _s8ActivityVMa);
    }
    else
    {
      v35 = v42;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v42, v9, v10);
      sub_1000163BC(0, (unint64_t *)&qword_1005D9080, ICCloudSyncingObject_ptr);
      v36 = v45;
      sub_100221268(v45, 0.0);
      v27 = static ICCloudSyncingObject.cloudSyncingObjectActivityEvent(for:fallback:)(v35, v36);
      sub_100012DDC(v36, &qword_1005D4DF8);
      v37 = v35;
      v15 = v47;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v37, v10);
      v29 = sub_100145264((uint64_t)v15, _s8ActivityVMa);
      if (!v27)
        goto LABEL_8;
    }
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v29);
    v31 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v30 = *(_QWORD *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v31 >= v30 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, v31 + 1, 1);
    v32 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v31, v27);
    specialized Array._endMutation()(v32);
LABEL_8:
    v18 += v44;
    v17 = v46 - 1;
  }
  while (v46 != 1);
  swift_bridgeObjectRelease(v40[0]);
LABEL_13:
  v38 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.setter();
  return ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter(v38);
}

void sub_1003EA248(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(void);
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 v49;
  unsigned int v50;
  char v51;
  char v52;
  id v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  void *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  id v79;
  void *v80;
  uint64_t v81;
  unsigned int v82;
  char *v83;
  id v84;
  void *v85;
  char *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  NSObject *v95;
  uint64_t v96;
  os_log_type_t v97;
  uint8_t *v98;
  uint64_t v99;
  id v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  id v105;
  void *v106;
  id v107;
  id v108;
  id v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  id v115;
  void *v116;
  id v117;
  id v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  NSObject *v128;
  uint64_t v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  id v133;
  void *v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  id v145;
  void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  id v151;
  id v152;
  uint64_t v153;
  uint64_t v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  uint64_t v164;
  objc_class *v165;
  Class isa;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  uint64_t v170;
  id v171;
  Class v172;
  id v173;
  id v174;
  uint64_t v175;
  uint64_t v176;
  id v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  id v183;
  void *v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  id v188;
  void *v189;
  id v190;
  uint64_t v191;
  uint64_t v192;
  id v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  uint64_t v227;
  id v228;
  _QWORD *v229;
  char v230[8];
  _OWORD v231[6];
  uint64_t v232;

  v225 = a2;
  v228 = a1;
  v224 = type metadata accessor for UUID(0);
  v204 = *(_QWORD *)(v224 - 8);
  __chkstk_darwin(v224);
  v226 = (char *)&v199 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = _s8ActivityVMa(0);
  v200 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v223 = (char *)&v199 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v8 = __chkstk_darwin(v7);
  v214 = (char *)&v199 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  *(_QWORD *)&v222 = (char *)&v199 - v11;
  v12 = __chkstk_darwin(v10);
  v213 = (char *)&v199 - v13;
  v14 = __chkstk_darwin(v12);
  v211 = (char *)&v199 - v15;
  v16 = __chkstk_darwin(v14);
  v208 = (char *)&v199 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v199 - v19;
  __chkstk_darwin(v18);
  v22 = (char *)&v199 - v21;
  *(_BYTE *)a3 = 3;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_WORD *)(a3 + 56) = 514;
  v23 = (int *)type metadata accessor for ICNoteArchiveModel(0);
  v24 = a3 + v23[10];
  v25 = type metadata accessor for Date(0);
  v26 = *(void (**)(void))(*(_QWORD *)(v25 - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v24, 1, 1, v25);
  *(_QWORD *)&v217 = a3 + v23[11];
  v26();
  v27 = (uint64_t *)(a3 + v23[12]);
  *v27 = 0;
  v27[1] = 0;
  v205 = v27;
  v216 = v23[13];
  *(_BYTE *)(a3 + v216) = 2;
  *(_QWORD *)&v218 = v23[14];
  *(_BYTE *)(a3 + v218) = 2;
  *(_QWORD *)&v219 = v23[15];
  *(_BYTE *)(a3 + v219) = 7;
  *(_QWORD *)&v220 = v23[16];
  *(_BYTE *)(a3 + v220) = 2;
  *(_QWORD *)&v221 = v23[17];
  *(_BYTE *)(a3 + v221) = 3;
  v28 = (uint64_t *)(a3 + v23[18]);
  *v28 = 0;
  v28[1] = 0;
  v206 = a3 + v23[19];
  v26();
  v207 = a3 + v23[20];
  v26();
  v209 = a3 + v23[21];
  v26();
  v210 = a3 + v23[22];
  v26();
  v212 = a3 + v23[23];
  v26();
  v29 = a3 + v23[24];
  *(_QWORD *)(v29 + 96) = 0;
  *(_OWORD *)(v29 + 64) = 0u;
  *(_OWORD *)(v29 + 80) = 0u;
  *(_OWORD *)(v29 + 32) = 0u;
  *(_OWORD *)(v29 + 48) = 0u;
  *(_OWORD *)v29 = 0u;
  *(_OWORD *)(v29 + 16) = 0u;
  v30 = (uint64_t *)(a3 + v23[25]);
  *v30 = 0;
  v30[1] = 0;
  v201 = v30;
  v30[2] = 0;
  v215 = v23[26];
  *(_QWORD *)(a3 + v215) = 0;
  v202 = v23[27];
  *(_QWORD *)(a3 + v202) = 0;
  v31 = v23[28];
  v227 = a3;
  v203 = v31;
  *(_QWORD *)(a3 + v31) = 0;
  v32 = objc_msgSend(v228, "identifier");
  if (v32)
  {
    v33 = v32;
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
    v36 = v35;

  }
  else
  {
    v34 = 0;
    v36 = 0xE000000000000000;
  }
  v38 = v227;
  v37 = v228;
  *(_QWORD *)(v227 + 8) = v34;
  *(_QWORD *)(v38 + 16) = v36;
  v39 = v38;
  v40 = objc_msgSend(v37, "creationDate");
  if (v40)
  {
    v41 = v40;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v40);

    v42 = 0;
  }
  else
  {
    v42 = 1;
  }
  v43 = 1;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v26)(v22, v42, 1, v25);
  sub_1001CE964((uint64_t)v22, v24);
  v44 = v228;
  v45 = objc_msgSend(v228, "modificationDate");
  if (v45)
  {
    v46 = v45;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v45);

    v43 = 0;
  }
  v47 = v218;
  v48 = v217;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v26)(v20, v43, 1, v25);
  sub_1001CE964((uint64_t)v20, v48);
  v49 = objc_msgSend(v44, "isPinned");
  *(_BYTE *)(v39 + v216) = v49;
  *(_BYTE *)(v39 + v47) = objc_msgSend(v44, "isSystemPaper");
  v50 = objc_msgSend(v44, "paperStyleType");
  if ((v50 & 0x80000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    swift_bridgeObjectRelease(v43);
    swift_release(v229);
    __break(1u);
  }
  else
  {
    *(_BYTE *)(v39 + v219) = sub_1003EE400((unsigned __int16)v50);
    v51 = sub_1003EE4F4((unsigned __int16)objc_msgSend(v44, "preferredBackgroundType"));
    *(_BYTE *)(v39 + v220) = v51;
    v52 = sub_1003EE2E8((uint64_t)objc_msgSend(v44, "attachmentViewType"));
    *(_BYTE *)(v39 + v221) = v52;
    v53 = objc_msgSend(v44, "hostApplicationIdentifier");
    v54 = v222;
    if (v53)
    {
      v55 = v53;
      v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v58 = v57;

    }
    else
    {
      v56 = 0;
      v58 = 0;
    }
    swift_bridgeObjectRelease(v28[1]);
    *v28 = v56;
    v28[1] = v58;
    v59 = v225;
    if ((*(_BYTE *)(v225 + 50) & 1) != 0 || (*(_BYTE *)(v225 + 51) & 1) != 0)
    {
      v60 = objc_msgSend(v44, "lastOpenedDate");
      if (v60)
      {
        v61 = v60;
        v62 = v208;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v60);

        v63 = (uint64_t)v62;
        v64 = 0;
        v65 = v211;
      }
      else
      {
        v64 = 1;
        v65 = v211;
        v63 = (uint64_t)v208;
      }
      v66 = 1;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v63, v64, 1, v25);
      sub_1001CE964(v63, v206);
      v67 = objc_msgSend(v44, "lastActivitySummaryViewedDate");
      if (v67)
      {
        v68 = v67;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v67);

        v66 = 0;
      }
      v69 = (uint64_t)v65;
      v70 = 1;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v69, v66, 1, v25);
      sub_1001CE964(v69, v207);
      v71 = objc_msgSend(v44, "lastActivityRecentUpdatesViewedDate");
      if (v71)
      {
        v72 = v71;
        v73 = v213;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v71);

        v74 = (uint64_t)v73;
        v70 = 0;
      }
      else
      {
        v74 = (uint64_t)v213;
      }
      v75 = 1;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v74, v70, 1, v25);
      sub_1001CE964(v74, v209);
      v76 = objc_msgSend(v44, "recentUpdatesGenerationDate");
      if (v76)
      {
        v77 = v76;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v76);

        v75 = 0;
      }
      v78 = 1;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v54, v75, 1, v25);
      sub_1001CE964(v54, v210);
      v79 = objc_msgSend(v44, "lastAttributionsViewedDate");
      if (v79)
      {
        v80 = v79;
        v81 = (uint64_t)v214;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v79);

        v78 = 0;
      }
      else
      {
        v81 = (uint64_t)v214;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v26)(v81, v78, 1, v25);
      sub_1001CE964(v81, v212);
    }
    if ((*(_BYTE *)(v59 + 52) & 1) != 0)
    {
      v91 = objc_msgSend(v44, "isPasswordProtectedAndLocked");
      v83 = v226;
      v92 = (uint64_t)v223;
      if ((v91 & 1) == 0)
      {
        v115 = objc_msgSend(v44, "textStorage");
        if (!v115)
        {
          v125 = (uint64_t)v83;
          if (qword_1005CEE18 != -1)
            swift_once(&qword_1005CEE18, sub_1003EB6EC);
          v138 = type metadata accessor for Logger(0);
          sub_10012A0B0(v138, (uint64_t)qword_1005DD0F0);
          v127 = v44;
          v128 = Logger.logObject.getter(v127);
          v130 = static os_log_type_t.error.getter(v128, v139);
          if (!os_log_type_enabled(v128, v130))
            goto LABEL_56;
          v131 = (uint8_t *)swift_slowAlloc(12, -1);
          v132 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v231[0] = v132;
          *(_DWORD *)v131 = 136315138;
          v133 = objc_msgSend(v127, "identifier");
          if (!v133)
            goto LABEL_54;
          goto LABEL_49;
        }
        v116 = v115;
        v117 = objc_msgSend(v115, "mergeableString");
        v118 = v44;
        sub_1001F40D4((_QWORD *)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F410C);
        v119 = sub_10025B504(v117, v118, v59);
        v121 = v120;
        v123 = v122;
        sub_1001F40D4((_QWORD *)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);

        v124 = v201;
        sub_1001F41A0(*v201, v201[1], v201[2]);
        *v124 = (uint64_t)v119;
        v124[1] = v121;
        v124[2] = v123;
        v39 = v227;
        goto LABEL_63;
      }
      sub_1001F40D4((_QWORD *)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
      if (qword_1005CEE18 != -1)
        swift_once(&qword_1005CEE18, sub_1003EB6EC);
      v93 = type metadata accessor for Logger(0);
      sub_10012A0B0(v93, (uint64_t)qword_1005DD0F0);
      v94 = v44;
      v95 = Logger.logObject.getter(v94);
      v97 = static os_log_type_t.error.getter(v95, v96);
      if (os_log_type_enabled(v95, v97))
      {
        v98 = (uint8_t *)swift_slowAlloc(12, -1);
        v99 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v231[0] = v99;
        *(_DWORD *)v98 = 136315138;
        v100 = objc_msgSend(v94, "identifier");
        if (v100)
        {
          v101 = v100;
          v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(v100);
          v104 = v103;

        }
        else
        {
          v102 = 9732322;
          v104 = 0xA300000000000000;
        }
        v229 = (_QWORD *)sub_1003A4190(v102, v104, (uint64_t *)v231);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v98 + 4);

        swift_bridgeObjectRelease(v104);
        _os_log_impl((void *)&_mh_execute_header, v95, v97, "Pages Handoff: Note is locked — skipping {identifier: %s}", v98, 0xCu);
        swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v99, -1, -1);
        swift_slowDealloc(v98, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v82 = objc_msgSend(v44, "isPasswordProtected");
      v83 = v226;
      if (v82)
      {
        v84 = objc_msgSend(v44, "noteData");
        if (v84)
        {
          v85 = v84;
          v86 = v83;
          v87 = objc_msgSend(v84, "data");

          if (v87)
          {
            v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v87);
            v90 = v89;

          }
          else
          {
            v88 = 0;
            v90 = 0xC000000000000000;
          }
          v83 = v86;
        }
        else
        {
          v88 = 0;
          v90 = 0xC000000000000000;
        }
        v140 = v44;
        sub_10013DAC8(v140, v88, v90, v231);
        v222 = v231[0];
        v221 = v231[1];
        v220 = v231[2];
        v219 = v231[3];
        v218 = v231[4];
        v217 = v231[5];
        v141 = v232;

        sub_1003EE9D8(*(_QWORD *)v29, *(_QWORD *)(v29 + 8), *(_QWORD *)(v29 + 16), *(_QWORD *)(v29 + 24), *(_QWORD *)(v29 + 32), *(_QWORD *)(v29 + 40), *(_QWORD *)(v29 + 48), *(_QWORD *)(v29 + 56), *(_QWORD *)(v29 + 64), *(_QWORD *)(v29 + 72), *(_QWORD *)(v29 + 80), *(_QWORD *)(v29 + 88), *(_QWORD *)(v29 + 96));
        v142 = v221;
        *(_OWORD *)v29 = v222;
        *(_OWORD *)(v29 + 16) = v142;
        v143 = v219;
        *(_OWORD *)(v29 + 32) = v220;
        *(_OWORD *)(v29 + 48) = v143;
        v144 = v217;
        *(_OWORD *)(v29 + 64) = v218;
        *(_OWORD *)(v29 + 80) = v144;
        *(_QWORD *)(v29 + 96) = v141;
        v145 = objc_msgSend(v140, "title");
        if (v145)
        {
          v146 = v145;
          v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v145);
          v149 = v148;

        }
        else
        {
          v147 = 0;
          v149 = 0;
        }
        v39 = v227;
        v92 = (uint64_t)v223;
        v150 = v205;
        swift_bridgeObjectRelease(v205[1]);
        *v150 = v147;
        v150[1] = v149;
      }
      else
      {
        v105 = objc_msgSend(v44, "textStorage");
        if (!v105)
        {
          v125 = (uint64_t)v83;
          v92 = (uint64_t)v223;
          if (qword_1005CEE18 != -1)
            goto LABEL_109;
          goto LABEL_47;
        }
        v106 = v105;
        v107 = objc_msgSend(v105, "mergeableString");
        v108 = v44;
        sub_1001F40D4((_QWORD *)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F410C);
        v109 = sub_10025B504(v107, v108, v59);
        v111 = v110;
        v113 = v112;
        sub_1001F40D4((_QWORD *)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);

        v114 = v201;
        sub_1001F41A0(*v201, v201[1], v201[2]);
        *v114 = (uint64_t)v109;
        v114[1] = v111;
        v114[2] = v113;
        v39 = v227;
        v92 = (uint64_t)v223;
      }
LABEL_63:
      while (1)
      {
        v151 = objc_msgSend(v44, "outlineState");
        v152 = objc_msgSend(v151, "collapsedUUIDs");

        v153 = sub_100019C6C((unint64_t *)&qword_1005D8AD0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v125 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v152, v224, v153);

        v154 = v215;
        swift_bridgeObjectRelease(*(_QWORD *)(v39 + v215));
        *(_QWORD *)(v39 + v154) = v125;
        if ((*(_BYTE *)(v59 + 48) & 1) == 0)
          break;
        v155 = v44;
        v156 = ICCloudSyncingObject.cloudSyncingObjectActivityEvents.getter(v155);

        if ((unint64_t)v156 >> 62)
        {
          if (v156 < 0)
            v125 = v156;
          else
            v125 = v156 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v156);
          v39 = _CocoaArrayWrapper.endIndex.getter(v125);
          swift_bridgeObjectRelease(v156);
          if (!v39)
          {
LABEL_81:
            swift_bridgeObjectRelease(v156);
            v158 = _swiftEmptyArrayStorage;
LABEL_82:
            v39 = v227;
            v164 = v202;
            swift_bridgeObjectRelease(*(_QWORD *)(v227 + v202));
            *(_QWORD *)(v39 + v164) = v158;
            break;
          }
        }
        else
        {
          v39 = *(_QWORD *)((v156 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v39)
            goto LABEL_81;
        }
        v229 = _swiftEmptyArrayStorage;
        sub_1001372E4(0, v39 & ~(v39 >> 63), 0);
        if ((v39 & 0x8000000000000000) == 0)
        {
          v157 = 0;
          v158 = v229;
          v159 = v200;
          do
          {
            if ((v156 & 0xC000000000000001) != 0)
              v160 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v157, v156);
            else
              v160 = *(id *)(v156 + 8 * v157 + 32);
            sub_10021FE60(v160, v92);
            v229 = v158;
            v161 = v92;
            v163 = v158[2];
            v162 = v158[3];
            if (v163 >= v162 >> 1)
            {
              sub_1001372E4(v162 > 1, v163 + 1, 1);
              v159 = v200;
              v158 = v229;
            }
            ++v157;
            v158[2] = v163 + 1;
            sub_10033F2FC(v161, (uint64_t)v158+ ((*(unsigned __int8 *)(v159 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v159 + 80))+ *(_QWORD *)(v159 + 72) * v163);
            v92 = v161;
          }
          while (v39 != v157);
          swift_bridgeObjectRelease(v156);
          v59 = v225;
          v83 = v226;
          goto LABEL_82;
        }
        __break(1u);
LABEL_109:
        swift_once(&qword_1005CEE18, sub_1003EB6EC);
LABEL_47:
        v126 = type metadata accessor for Logger(0);
        sub_10012A0B0(v126, (uint64_t)qword_1005DD0F0);
        v127 = v44;
        v128 = Logger.logObject.getter(v127);
        v130 = static os_log_type_t.error.getter(v128, v129);
        if (os_log_type_enabled(v128, v130))
        {
          v131 = (uint8_t *)swift_slowAlloc(12, -1);
          v132 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v231[0] = v132;
          *(_DWORD *)v131 = 136315138;
          v133 = objc_msgSend(v127, "identifier");
          if (v133)
          {
LABEL_49:
            v134 = v133;
            v135 = static String._unconditionallyBridgeFromObjectiveC(_:)(v133);
            v137 = v136;

          }
          else
          {
LABEL_54:
            v135 = 9732322;
            v137 = 0xA300000000000000;
          }
          v229 = (_QWORD *)sub_1003A4190(v135, v137, (uint64_t *)v231);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v131 + 4);

          swift_bridgeObjectRelease(v137);
          _os_log_impl((void *)&_mh_execute_header, v128, v130, "Note doesn't have a text storage — skipping {identifier: %s}", v131, 0xCu);
          swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v132, -1, -1);
          swift_slowDealloc(v131, -1, -1);

          v39 = v227;
          v44 = v228;
          v83 = v226;
        }
        else
        {
LABEL_56:

          v83 = (char *)v125;
        }
      }
      if ((*(_BYTE *)(v59 + 49) & 1) != 0)
      {
        v165 = (objc_class *)objc_msgSend(v44, "replicaIDToUserIDDictData");
        isa = v165;
        if (v165)
        {
          v167 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v165);
          v169 = v168;

          UUID.init()(v170);
          if (v169 >> 60 == 15)
          {
            isa = 0;
          }
          else
          {
            isa = Data._bridgeToObjectiveC()().super.isa;
            sub_1001672D8(v167, v169);
          }
        }
        else
        {
          UUID.init()(0);
        }
        v171 = objc_allocWithZone((Class)ICMergeableDictionary);
        v172 = UUID._bridgeToObjectiveC()().super.isa;
        v173 = objc_msgSend(v171, "initWithData:replicaID:", isa, v172);

        (*(void (**)(char *, uint64_t))(v204 + 8))(v83, v224);
        v174 = objc_msgSend(v173, "allKeys");
        v175 = sub_1000163BC(0, (unint64_t *)&qword_1005CFE78, NSString_ptr);
        v176 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v174, v175);

        v177 = v44;
        v178 = sub_1003EDDD8(v176, v177);
        swift_bridgeObjectRelease(v176);

        v179 = v178[2];
        if (v179)
        {
          sub_100012E18(&qword_1005D0220);
          v180 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v179);
        }
        else
        {
          v180 = &_swiftEmptyDictionarySingleton;
        }
        v229 = v180;
        sub_1003EE5E8((uint64_t)v178, 1, &v229);

        swift_bridgeObjectRelease(v178);
        v181 = v229;
        v39 = v227;
        v182 = v203;
        swift_bridgeObjectRelease(*(_QWORD *)(v227 + v203));
        sub_1001F40D4((_QWORD *)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
        *(_QWORD *)(v39 + v182) = v181;
        if ((*(_BYTE *)(v59 + 51) & 1) == 0)
          goto LABEL_85;
      }
      else
      {
        sub_1001F40D4((_QWORD *)v59, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001F3EFC);
        if ((*(_BYTE *)(v59 + 51) & 1) == 0)
        {
LABEL_85:

          return;
        }
      }
      v183 = objc_msgSend(v44, "folder");
      v184 = v183;
      if (v183)
      {
        v185 = objc_msgSend(v183, "identifier");

        if (v185)
        {
          v184 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v185);
          v187 = v186;

        }
        else
        {
          v184 = 0;
          v187 = 0;
        }
        v39 = v227;
      }
      else
      {
        v187 = 0;
      }
      swift_bridgeObjectRelease(*(_QWORD *)(v39 + 32));
      *(_QWORD *)(v39 + 24) = v184;
      *(_QWORD *)(v39 + 32) = v187;
      v188 = objc_msgSend(v44, "folder");
      v189 = v188;
      if (v188)
      {
        v190 = objc_msgSend(v188, "title");

        v189 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v190);
        v192 = v191;

      }
      else
      {
        v192 = 0;
      }
      swift_bridgeObjectRelease(*(_QWORD *)(v39 + 48));
      *(_QWORD *)(v39 + 40) = v189;
      *(_QWORD *)(v39 + 48) = v192;
      v193 = objc_msgSend(v44, "title");
      if (v193)
      {
        v194 = v193;
        v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v193);
        v197 = v196;

      }
      else
      {
        v195 = 0;
        v197 = 0;
      }
      v198 = v205;
      swift_bridgeObjectRelease(v205[1]);
      *v198 = v195;
      v198[1] = v197;
      *(_BYTE *)(v39 + 56) = objc_msgSend(v44, "markedForDeletion");
      LOBYTE(v198) = objc_msgSend(v44, "isPasswordProtected");

      *(_BYTE *)(v39 + 57) = (_BYTE)v198;
    }
  }
}

uint64_t sub_1003EB6EC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_10012B334(v0, qword_1005DD0F0);
  sub_10012A0B0(v0, (uint64_t)qword_1005DD0F0);
  return static Logger.archiving.getter();
}

uint64_t sub_1003EB734(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1003EB774 + 4 * byte_1004684F0[a1]))(0x6E65644965707974, 0xEE00726569666974);
}

uint64_t sub_1003EB774()
{
  return 0x696669746E656469;
}

unint64_t sub_1003EB794()
{
  return 0xD000000000000010;
}

uint64_t sub_1003EB9E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  __int128 *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  char v65;

  v3 = v1;
  v5 = sub_100012E18(&qword_1005DD248);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10012D19C(a1, v9);
  v11 = sub_1003F0EAC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ICNoteArchiveModel.CodingKeys, &type metadata for ICNoteArchiveModel.CodingKeys, v11, v9, v10);
  LOBYTE(v58) = *(_BYTE *)v3;
  v65 = 0;
  v12 = sub_1001F62D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v58, &v65, v5, &type metadata for ICArchiveModels, v12);
  if (!v2)
  {
    v13 = *(_QWORD *)(v3 + 8);
    v14 = *(_QWORD *)(v3 + 16);
    LOBYTE(v58) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v58, v5);
    v15 = *(_QWORD *)(v3 + 24);
    v16 = *(_QWORD *)(v3 + 32);
    LOBYTE(v58) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v58, v5);
    v17 = *(_QWORD *)(v3 + 40);
    v18 = *(_QWORD *)(v3 + 48);
    LOBYTE(v58) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v58, v5);
    v19 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v58) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, &v58, v5);
    v20 = *(unsigned __int8 *)(v3 + 57);
    LOBYTE(v58) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, &v58, v5);
    v21 = (int *)type metadata accessor for ICNoteArchiveModel(0);
    v22 = v3 + v21[10];
    LOBYTE(v58) = 6;
    v23 = type metadata accessor for Date(0);
    v24 = sub_100019C6C(&qword_1005D37B0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v58, v5, v23, v24);
    v25 = v3 + v21[11];
    LOBYTE(v58) = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v25, &v58, v5, v23, v24);
    v26 = (uint64_t *)(v3 + v21[12]);
    v27 = *v26;
    v28 = v26[1];
    LOBYTE(v58) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v58, v5);
    v29 = *(unsigned __int8 *)(v3 + v21[13]);
    LOBYTE(v58) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, &v58, v5);
    v30 = *(unsigned __int8 *)(v3 + v21[14]);
    LOBYTE(v58) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, &v58, v5);
    LOBYTE(v58) = *(_BYTE *)(v3 + v21[15]);
    v65 = 11;
    v31 = sub_1003F0EF0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &type metadata for ICNoteArchiveModel.PaperStyles, v31);
    LOBYTE(v58) = *(_BYTE *)(v3 + v21[16]);
    v65 = 12;
    v32 = sub_1003F0F34();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &type metadata for ICNoteArchiveModel.Backgrounds, v32);
    LOBYTE(v58) = *(_BYTE *)(v3 + v21[17]);
    v65 = 13;
    v33 = sub_1001F64F8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &type metadata for ICNoteArchiveModel.AttachmentViewTypes, v33);
    v34 = (uint64_t *)(v3 + v21[18]);
    v35 = *v34;
    v36 = v34[1];
    LOBYTE(v58) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v58, v5);
    v37 = v3 + v21[19];
    LOBYTE(v58) = 15;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, &v58, v5, v23, v24);
    v38 = v3 + v21[20];
    LOBYTE(v58) = 16;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v38, &v58, v5, v23, v24);
    v39 = v3 + v21[21];
    LOBYTE(v58) = 17;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v39, &v58, v5, v23, v24);
    v40 = v3 + v21[22];
    LOBYTE(v58) = 18;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v58, v5, v23, v24);
    v41 = v3 + v21[23];
    LOBYTE(v58) = 19;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v41, &v58, v5, v23, v24);
    v42 = (__int128 *)(v3 + v21[24]);
    v43 = *((_QWORD *)v42 + 12);
    v44 = v42[1];
    v58 = *v42;
    v59 = v44;
    v45 = v42[3];
    v60 = v42[2];
    v61 = v45;
    v46 = v42[5];
    v62 = v42[4];
    v63 = v46;
    v64 = v43;
    v65 = 20;
    v47 = sub_1003F0F78();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &_s13EncryptedDataVN, v47);
    v48 = (__int128 *)(v3 + v21[25]);
    v49 = *((_QWORD *)v48 + 2);
    v58 = *v48;
    *(_QWORD *)&v59 = v49;
    v65 = 21;
    v50 = sub_1001F64B4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, &_s16AttributedStringVN, v50);
    *(_QWORD *)&v58 = *(_QWORD *)(v3 + v21[26]);
    v65 = 22;
    v51 = sub_100012E18(&qword_1005DD270);
    v52 = sub_1003F110C(&qword_1005DD278, &qword_1005D6028, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, v51, v52);
    *(_QWORD *)&v58 = *(_QWORD *)(v3 + v21[27]);
    v65 = 23;
    v53 = sub_100012E18(&qword_1005D9C20);
    v54 = sub_100340A7C(&qword_1005D9C28, &qword_1005D9C30, (uint64_t)&unk_10045C860, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, v53, v54);
    *(_QWORD *)&v58 = *(_QWORD *)(v3 + v21[28]);
    v65 = 24;
    v55 = sub_100012E18(&qword_1005DD280);
    v56 = sub_1003F0FBC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v58, &v65, v5, v55, v56);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1003EC0C4(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void (*v25)(void);
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  char v50;
  char v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  __int128 v99;
  uint64_t *v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  char v121;

  v88 = a2;
  v3 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  v4 = __chkstk_darwin(v3);
  v87 = (uint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v86 = (uint64_t)&v83 - v7;
  v8 = __chkstk_darwin(v6);
  v85 = (uint64_t)&v83 - v9;
  v10 = __chkstk_darwin(v8);
  v84 = (uint64_t)&v83 - v11;
  v12 = __chkstk_darwin(v10);
  v89 = (uint64_t)&v83 - v13;
  v14 = __chkstk_darwin(v12);
  *(_QWORD *)&v94 = (char *)&v83 - v15;
  __chkstk_darwin(v14);
  *(_QWORD *)&v95 = (char *)&v83 - v16;
  v97 = sub_100012E18(&qword_1005DD290);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97);
  v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for ICNoteArchiveModel(0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v22 = 3;
  *(_OWORD *)(v22 + 40) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *((_WORD *)v22 + 28) = 514;
  v23 = &v22[*(int *)(v20 + 40)];
  v24 = type metadata accessor for Date(0);
  v25 = *(void (**)(void))(*(_QWORD *)(v24 - 8) + 56);
  v113 = (uint64_t)v23;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v25)(v23, 1, 1, v24);
  v112 = &v22[v19[11]];
  v25();
  v26 = &v22[v19[12]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v111 = v26;
  *(_QWORD *)&v93 = v19[13];
  v22[v93] = 2;
  *(_QWORD *)&v92 = v19[14];
  v22[v92] = 2;
  *(_QWORD *)&v91 = v19[15];
  v22[v91] = 7;
  v90 = v19[16];
  v22[v90] = 2;
  v27 = v19[17];
  v22[v27] = 3;
  v28 = &v22[v19[18]];
  *(_QWORD *)v28 = 0;
  *((_QWORD *)v28 + 1) = 0;
  v107 = v28;
  v108 = &v22[v19[19]];
  v25();
  v105 = &v22[v19[20]];
  v25();
  v103 = &v22[v19[21]];
  v25();
  v102 = &v22[v19[22]];
  v25();
  v101 = &v22[v19[23]];
  v25();
  v29 = &v22[v19[24]];
  *((_QWORD *)v29 + 12) = 0;
  *((_OWORD *)v29 + 4) = 0u;
  *((_OWORD *)v29 + 5) = 0u;
  *((_OWORD *)v29 + 2) = 0u;
  *((_OWORD *)v29 + 3) = 0u;
  *(_OWORD *)v29 = 0u;
  *((_OWORD *)v29 + 1) = 0u;
  v30 = (uint64_t *)&v22[v19[25]];
  *v30 = 0;
  v30[1] = 0;
  v100 = v30;
  v30[2] = 0;
  v104 = v19[26];
  *(_QWORD *)&v22[v104] = 0;
  v106 = v19[27];
  *(_QWORD *)&v22[v106] = 0;
  v109 = v19[28];
  v110 = a1;
  *(_QWORD *)&v22[v109] = 0;
  v31 = a1[3];
  v32 = a1[4];
  sub_10012D19C(a1, v31);
  v33 = sub_1003F0EAC();
  v98 = v18;
  v34 = v99;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ICNoteArchiveModel.CodingKeys, &type metadata for ICNoteArchiveModel.CodingKeys, v33, v31, v32);
  if (v34)
  {
    v36 = (uint64_t)v112;
    v35 = v113;
    sub_1000153C0(v110);
    v41 = v109;
    swift_bridgeObjectRelease(*((_QWORD *)v22 + 4));
    swift_bridgeObjectRelease(*((_QWORD *)v22 + 6));
    sub_100012DDC(v35, (uint64_t *)&unk_1005D7B20);
    sub_100012DDC(v36, (uint64_t *)&unk_1005D7B20);
    swift_bridgeObjectRelease(*((_QWORD *)v111 + 1));
    swift_bridgeObjectRelease(*((_QWORD *)v107 + 1));
    sub_100012DDC((uint64_t)v108, (uint64_t *)&unk_1005D7B20);
    sub_100012DDC((uint64_t)v105, (uint64_t *)&unk_1005D7B20);
    sub_100012DDC((uint64_t)v103, (uint64_t *)&unk_1005D7B20);
    sub_100012DDC((uint64_t)v102, (uint64_t *)&unk_1005D7B20);
    sub_100012DDC((uint64_t)v101, (uint64_t *)&unk_1005D7B20);
    sub_1003EE9D8(*(_QWORD *)v29, *((_QWORD *)v29 + 1), *((_QWORD *)v29 + 2), *((_QWORD *)v29 + 3), *((_QWORD *)v29 + 4), *((_QWORD *)v29 + 5), *((_QWORD *)v29 + 6), *((_QWORD *)v29 + 7), *((_QWORD *)v29 + 8), *((_QWORD *)v29 + 9), *((_QWORD *)v29 + 10), *((_QWORD *)v29 + 11), *((_QWORD *)v29 + 12));
    sub_1001F41A0(*v100, v100[1], v100[2]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v104]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v106]);
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v41]);
  }
  else
  {
    *(_QWORD *)&v99 = v27;
    v121 = 0;
    v37 = sub_1001F6580();
    v38 = v97;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v114, &type metadata for ICArchiveModels, &v121, v97, &type metadata for ICArchiveModels, v37);
    v40 = (uint64_t)v112;
    v39 = v113;
    *v22 = v114;
    LOBYTE(v114) = 1;
    *((_QWORD *)v22 + 1) = KeyedDecodingContainer.decode(_:forKey:)(&v114, v38);
    *((_QWORD *)v22 + 2) = v42;
    LOBYTE(v114) = 2;
    *((_QWORD *)v22 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v114, v38);
    *((_QWORD *)v22 + 4) = v43;
    LOBYTE(v114) = 3;
    *((_QWORD *)v22 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v114, v38);
    *((_QWORD *)v22 + 6) = v44;
    LOBYTE(v114) = 4;
    v22[56] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v114, v38);
    LOBYTE(v114) = 5;
    v22[57] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v114, v38);
    LOBYTE(v114) = 6;
    v83 = sub_100019C6C(&qword_1005D36E8, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v114, v38, v24, v83);
    sub_1001CE964(v95, v39);
    LOBYTE(v114) = 7;
    v45 = v83;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v114, v38, v24, v83);
    sub_1001CE964(v94, v40);
    LOBYTE(v114) = 8;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v114, v38);
    v48 = v47;
    v49 = (uint64_t *)v111;
    swift_bridgeObjectRelease(*((_QWORD *)v111 + 1));
    *v49 = v46;
    v49[1] = v48;
    LOBYTE(v114) = 9;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v114, v97);
    v22[v93] = v50;
    LOBYTE(v114) = 10;
    v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v114, v97);
    v22[v92] = v51;
    v121 = 11;
    v52 = sub_1003F1040();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICNoteArchiveModel.PaperStyles, &v121, v97, &type metadata for ICNoteArchiveModel.PaperStyles, v52);
    v22[v91] = v114;
    v121 = 12;
    v53 = sub_1003F1084();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICNoteArchiveModel.Backgrounds, &v121, v97, &type metadata for ICNoteArchiveModel.Backgrounds, v53);
    v22[v90] = v114;
    v121 = 13;
    v54 = sub_1001F679C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for ICNoteArchiveModel.AttachmentViewTypes, &v121, v97, &type metadata for ICNoteArchiveModel.AttachmentViewTypes, v54);
    v22[v99] = v114;
    LOBYTE(v114) = 14;
    v55 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v114, v97);
    v57 = v56;
    v58 = (uint64_t *)v107;
    swift_bridgeObjectRelease(*((_QWORD *)v107 + 1));
    *v58 = v55;
    v58[1] = v57;
    LOBYTE(v114) = 15;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v114, v97, v24, v45);
    sub_1001CE964(v89, (uint64_t)v108);
    LOBYTE(v114) = 16;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v114, v97, v24, v45);
    sub_1001CE964(v84, (uint64_t)v105);
    LOBYTE(v114) = 17;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v114, v97, v24, v45);
    sub_1001CE964(v85, (uint64_t)v103);
    LOBYTE(v114) = 18;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v114, v97, v24, v45);
    sub_1001CE964(v86, (uint64_t)v102);
    LOBYTE(v114) = 19;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v24, &v114, v97, v24, v45);
    sub_1001CE964(v87, (uint64_t)v101);
    v121 = 20;
    v59 = sub_1003F10C8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s13EncryptedDataVN, &v121, v97, &_s13EncryptedDataVN, v59);
    v99 = v114;
    v95 = v115;
    v94 = v116;
    v93 = v117;
    v92 = v118;
    v91 = v119;
    v60 = v120;
    sub_1003EE9D8(*(_QWORD *)v29, *((_QWORD *)v29 + 1), *((_QWORD *)v29 + 2), *((_QWORD *)v29 + 3), *((_QWORD *)v29 + 4), *((_QWORD *)v29 + 5), *((_QWORD *)v29 + 6), *((_QWORD *)v29 + 7), *((_QWORD *)v29 + 8), *((_QWORD *)v29 + 9), *((_QWORD *)v29 + 10), *((_QWORD *)v29 + 11), *((_QWORD *)v29 + 12));
    v61 = v95;
    *(_OWORD *)v29 = v99;
    *((_OWORD *)v29 + 1) = v61;
    v62 = v93;
    *((_OWORD *)v29 + 2) = v94;
    *((_OWORD *)v29 + 3) = v62;
    v63 = v91;
    *((_OWORD *)v29 + 4) = v92;
    *((_OWORD *)v29 + 5) = v63;
    *((_QWORD *)v29 + 12) = v60;
    v121 = 21;
    v64 = sub_1001F66F8();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&_s16AttributedStringVN, &v121, v97, &_s16AttributedStringVN, v64);
    v99 = v114;
    v65 = v115;
    v66 = v100;
    sub_1001F41A0(*v100, v100[1], v100[2]);
    *(_OWORD *)v66 = v99;
    v66[2] = v65;
    v67 = sub_100012E18(&qword_1005DD270);
    v121 = 22;
    v68 = sub_1003F110C(&qword_1005DD2B0, &qword_1005D6018, (uint64_t)&protocol conformance descriptor for UUID, (uint64_t)&protocol conformance descriptor for <> Set<A>);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v67, &v121, v97, v67, v68);
    v69 = v114;
    v70 = v104;
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v104]);
    *(_QWORD *)&v22[v70] = v69;
    v71 = sub_100012E18(&qword_1005D9C20);
    v121 = 23;
    v72 = sub_100340A7C(&qword_1005D9C48, &qword_1005D9C50, (uint64_t)&unk_10045C888, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v71, &v121, v97, v71, v72);
    v73 = v114;
    v74 = v106;
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v106]);
    *(_QWORD *)&v22[v74] = v73;
    v75 = sub_100012E18(&qword_1005DD280);
    v121 = 24;
    v76 = sub_1003F1190();
    v77 = v75;
    v78 = v97;
    v79 = v75;
    v80 = v98;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v77, &v121, v97, v79, v76);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v80, v78);
    v81 = v114;
    v82 = v109;
    swift_bridgeObjectRelease(*(_QWORD *)&v22[v109]);
    *(_QWORD *)&v22[v82] = v81;
    sub_100145220((uint64_t)v22, v88, type metadata accessor for ICNoteArchiveModel);
    sub_1000153C0(v110);
    sub_100145264((uint64_t)v22, type metadata accessor for ICNoteArchiveModel);
  }
}

uint64_t sub_1003ECF3C()
{
  unsigned __int8 *v0;

  return sub_1003EB734(*v0);
}

uint64_t sub_1003ECF44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1003F17B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003ECF68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003F0EAC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003ECF90(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1003F0EAC();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1003ECFB8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003EC0C4(a1, a2);
}

uint64_t sub_1003ECFCC(_QWORD *a1)
{
  return sub_1003EB9E4(a1);
}

void sub_1003ECFE0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  Class isa;
  id v19;
  Class v20;
  uint64_t v21;

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012E18((uint64_t *)&unk_1005D7B20);
  __chkstk_darwin(v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(a1, "timestamp");
  if (v16)
  {
    v17 = v16;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v16);

    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) != 1)
    {
      sub_100012DDC((uint64_t)v15, (uint64_t *)&unk_1005D7B20);
      isa = Int64._bridgeToObjectiveC()().super.super.isa;
      v19 = objc_msgSend(a1, "replicaID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

      v20 = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      objc_msgSend(a3, "setNotesVersion:forReplicaID:", isa, v20);

      return;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v15, 1, 1, v9);
  }
  sub_100012DDC((uint64_t)v15, (uint64_t *)&unk_1005D7B20);
}

void sub_1003ED1E8(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

void sub_1003ED22C(char *a1)
{
  sub_100215F28(*a1);
}

void sub_1003ED238()
{
  char *v0;

  sub_1001FB5B0(0, *v0);
}

void sub_1003ED244()
{
  __asm { BR              X10 }
}

uint64_t sub_1003ED278(uint64_t a1)
{
  String.hash(into:)(a1, 0x52475F4C4C414D53, 0xEA00000000004449);
  return swift_bridgeObjectRelease(0xEA00000000004449);
}

void sub_1003ED328(uint64_t a1)
{
  char *v1;

  sub_1001FB5B0(a1, *v1);
}

unint64_t sub_1003ED330@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003F2290(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003ED35C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1003ED384 + 4 * byte_100468510[*v0]))();
}

void sub_1003ED384(_QWORD *a1@<X8>)
{
  *a1 = 0x52475F4C4C414D53;
  a1[1] = 0xEA00000000004449;
}

void sub_1003ED3A4(_QWORD *a1@<X8>)
{
  *a1 = 0x475F4D554944454DLL;
  a1[1] = 0xEB00000000444952;
}

void sub_1003ED3C8(_QWORD *a1@<X8>)
{
  *a1 = 0x52475F454752414CLL;
  a1[1] = 0xEA00000000004449;
}

void sub_1003ED3E8(_QWORD *a1@<X8>)
{
  *a1 = 0x494C5F4C4C414D53;
  a1[1] = 0xEB0000000053454ELL;
}

void sub_1003ED440(_QWORD *a1@<X8>)
{
  *a1 = &off_100555990;
}

uint64_t sub_1003ED450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1003F21C4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003ED4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1003F21C4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1003ED4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2C5C(a1, a2, a3, a4, (uint64_t (*)(void))sub_1003F22D8, (uint64_t (*)(void))sub_1003F21C4);
}

uint64_t sub_1003ED50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2CE8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1003F22D8, (uint64_t (*)(void))sub_1003F21C4);
}

uint64_t sub_1003ED520(char *a1, char *a2)
{
  return sub_100216104(*a1, *a2);
}

Swift::Int sub_1003ED52C()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  if (v1)
    v2 = 0x544847494CLL;
  else
    v2 = 0x544C5541464544;
  if (v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1003ED5A8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x544847494CLL;
  else
    v2 = 0x544C5541464544;
  if (*v1)
    v3 = 0xE500000000000000;
  else
    v3 = 0xE700000000000000;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_1003ED600(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2)
    v3 = 0x544847494CLL;
  else
    v3 = 0x544C5541464544;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_1003ED678@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100557768, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_1003ED6D4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x544C5541464544;
  if (*v1)
    v2 = 0x544847494CLL;
  v3 = 0xE700000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

void sub_1003ED710(_QWORD *a1@<X8>)
{
  *a1 = &off_100555968;
}

uint64_t sub_1003ED720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1003F2208();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003ED77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1003F2208();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1003ED7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2C5C(a1, a2, a3, a4, (uint64_t (*)(void))sub_1003F224C, (uint64_t (*)(void))sub_1003F2208);
}

uint64_t sub_1003ED7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2CE8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1003F224C, (uint64_t (*)(void))sub_1003F2208);
}

uint64_t sub_1003ED7F0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_100215E10(*a1, *a2);
}

Swift::Int sub_1003ED7FC()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE90000000000004CLL;
  v3 = 0x49414E424D554854;
  if (v1 != 1)
  {
    v3 = 0x4D554944454DLL;
    v2 = 0xE600000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x57454956455250;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1003ED89C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE90000000000004CLL;
  v3 = 0x49414E424D554854;
  if (*v1 != 1)
  {
    v3 = 0x4D554944454DLL;
    v2 = 0xE600000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x57454956455250;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1003ED918(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE90000000000004CLL;
  v4 = 0x49414E424D554854;
  if (v2 != 1)
  {
    v4 = 0x4D554944454DLL;
    v3 = 0xE600000000000000;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 0x57454956455250;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE700000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1003ED9B4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1003F231C(*a1);
  *a2 = result;
  return result;
}

void sub_1003ED9E0(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE90000000000004CLL;
  v5 = 0x49414E424D554854;
  if (v2 != 1)
  {
    v5 = 0x4D554944454DLL;
    v4 = 0xE600000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x57454956455250;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

void sub_1003EDA40(_QWORD *a1@<X8>)
{
  *a1 = &off_1005559B8;
}

uint64_t sub_1003EDA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1003F176C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003EDAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1003F176C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1003EDAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2C5C(a1, a2, a3, a4, (uint64_t (*)(void))sub_1003F2364, (uint64_t (*)(void))sub_1003F176C);
}

uint64_t sub_1003EDB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001F2CE8(a1, a2, a3, a4, (uint64_t (*)(void))sub_1003F2364, (uint64_t (*)(void))sub_1003F176C);
}

uint64_t sub_1003EDB20(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t i;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;

  sub_100012E18(&qword_1005D41A0);
  result = static _DictionaryStorage.copy(original:)(a1);
  v3 = 0;
  v38 = (_QWORD *)result;
  v39 = a1;
  v6 = *(_QWORD *)(a1 + 64);
  v5 = a1 + 64;
  v4 = v6;
  v7 = 1 << *(_BYTE *)(v5 - 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & v4;
  v35 = v5;
  v36 = (unint64_t)(v7 + 63) >> 6;
  v37 = result + 64;
  if ((v8 & v4) == 0)
    goto LABEL_5;
LABEL_4:
  v10 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v40 = v3;
  for (i = v10 | (v3 << 6); ; i = __clz(__rbit64(v13)) + (v14 << 6))
  {
    v16 = (uint64_t *)(*(_QWORD *)(v39 + 48) + 16 * i);
    v17 = v16[1];
    v41 = *v16;
    v18 = *(void **)(*(_QWORD *)(v39 + 56) + 8 * i);
    swift_bridgeObjectRetain(v17);
    v19 = v18;
    v20 = objc_msgSend(v19, "identifier");
    if (v20)
    {
      v21 = v20;
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v24 = v23;

    }
    else
    {
      v22 = 0;
      v24 = 0xE000000000000000;
    }
    v25 = objc_msgSend(v19, "typeUTI");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

    }
    else
    {
      v27 = 0;
      v29 = 0;
    }
    sub_1000163BC(0, (unint64_t *)&qword_1005D41A8, ICTTAttachment_ptr);
    v30 = ICTTAttachment.init(identifier:universalTypeIdentifier:)(v22, v24, v27, v29);

    result = (uint64_t)v38;
    *(_QWORD *)(v37 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    v31 = (_QWORD *)(v38[6] + 16 * i);
    *v31 = v41;
    v31[1] = v17;
    *(_QWORD *)(v38[7] + 8 * i) = v30;
    v32 = v38[2];
    v33 = __OFADD__(v32, 1);
    v34 = v32 + 1;
    if (v33)
    {
      __break(1u);
LABEL_30:
      __break(1u);
      goto LABEL_31;
    }
    v38[2] = v34;
    v3 = v40;
    if (v9)
      goto LABEL_4;
LABEL_5:
    v12 = v3 + 1;
    if (__OFADD__(v3, 1))
      goto LABEL_30;
    if (v12 >= v36)
      return result;
    v13 = *(_QWORD *)(v35 + 8 * v12);
    v14 = v3 + 1;
    if (!v13)
    {
      v14 = v3 + 2;
      if (v3 + 2 >= v36)
        return result;
      v13 = *(_QWORD *)(v35 + 8 * v14);
      if (!v13)
      {
        v14 = v3 + 3;
        if (v3 + 3 >= v36)
          return result;
        v13 = *(_QWORD *)(v35 + 8 * v14);
        if (!v13)
          break;
      }
    }
LABEL_18:
    v9 = (v13 - 1) & v13;
    v40 = v14;
  }
  v15 = v3 + 4;
  if (v3 + 4 >= v36)
    return result;
  v13 = *(_QWORD *)(v35 + 8 * v15);
  if (v13)
  {
    v14 = v3 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    v14 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v14 >= v36)
      return result;
    v13 = *(_QWORD *)(v35 + 8 * v14);
    ++v15;
    if (v13)
      goto LABEL_18;
  }
LABEL_31:
  __break(1u);
  return result;
}

_QWORD *sub_1003EDDD8(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  char v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  id v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;

  v3 = v2;
  v58 = a2;
  v5 = sub_100012E18((uint64_t *)&unk_1005D06A0);
  __chkstk_darwin(v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v57 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v62 = (char *)&v51 - v12;
  v13 = sub_100012E18(&qword_1005DD108);
  __chkstk_darwin(v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100012E18(&qword_1005D0218);
  v17 = *(_QWORD *)(v16 - 8);
  v64 = v16;
  v65 = v17;
  v18 = __chkstk_darwin(v16);
  v63 = (uint64_t)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v56 = (uint64_t)&v51 - v20;
  if ((unint64_t)a1 >> 62)
    goto LABEL_26;
  v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v21)
  {
    v51 = v3;
    v61 = a1 & 0xC000000000000001;
    v22 = _swiftEmptyArrayStorage;
    v23 = 4;
    v54 = v7;
    v55 = a1;
    v52 = v15;
    v53 = v9;
    v60 = v21;
    while (1)
    {
      v67 = v22;
      v24 = v61 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23 - 4, a1) : *(id *)(a1 + 8 * v23);
      v25 = v24;
      if (__OFADD__(v23 - 4, 1))
        break;
      v66 = v23 - 3;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v28 = v27;
      UUID.init(uuidString:)(v26, v27);
      swift_bridgeObjectRelease(v28);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
      {
        sub_100012DDC((uint64_t)v7, (uint64_t *)&unk_1005D06A0);
        v29 = 1;
      }
      else
      {
        v59 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
        v59(v62, v7, v8);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v31 = objc_msgSend(v58, "userIDForReplicaID:", isa);

        v32 = v9;
        v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v35 = v34;

        v36 = objc_msgSend((id)objc_opt_self(NSUUID), "CR_unknown");
        v37 = v57;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

        v39 = UUID.uuidString.getter(v38);
        v41 = v40;
        v42 = *(void (**)(char *, uint64_t))(v32 + 8);
        v42(v37, v8);
        if (v33 == v39 && v35 == v41)
        {
          swift_bridgeObjectRelease(v35);
        }
        else
        {
          v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v39, v41, 0);
          swift_bridgeObjectRelease(v41);
          if ((v43 & 1) == 0)
          {
            v15 = v52;
            v44 = (uint64_t *)&v52[*(int *)(v64 + 48)];
            v59(v52, v62, v8);
            v29 = 0;
            *v44 = v33;
            v44[1] = v35;
            v7 = v54;
            a1 = v55;
            v9 = v53;
            goto LABEL_18;
          }
        }
        v42(v62, v8);
        swift_bridgeObjectRelease(v35);
        v29 = 1;
        v7 = v54;
        a1 = v55;
        v15 = v52;
        v9 = v53;
      }
LABEL_18:
      v3 = v64;
      v45 = v65;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v65 + 56))(v15, v29, 1, v64);

      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v15, 1, v3) == 1)
      {
        sub_100012DDC((uint64_t)v15, &qword_1005DD108);
        v22 = v67;
      }
      else
      {
        v46 = v56;
        sub_10014BD1C((uint64_t)v15, v56, &qword_1005D0218);
        sub_10014BD1C(v46, v63, &qword_1005D0218);
        v22 = v67;
        if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0)
          v22 = (_QWORD *)sub_10016B610(0, v22[2] + 1, 1, (unint64_t)v22);
        v48 = v22[2];
        v47 = v22[3];
        v3 = v48 + 1;
        if (v48 >= v47 >> 1)
          v22 = (_QWORD *)sub_10016B610(v47 > 1, v48 + 1, 1, (unint64_t)v22);
        v22[2] = v3;
        sub_10014BD1C(v63, (uint64_t)v22+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(_QWORD *)(v65 + 72) * v48, &qword_1005D0218);
      }
      ++v23;
      if (v66 == v60)
      {
        swift_bridgeObjectRelease(a1);
        return v22;
      }
    }
    __break(1u);
LABEL_26:
    if (a1 < 0)
      v49 = a1;
    else
      v49 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v21 = _CocoaArrayWrapper.endIndex.getter(v49);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1003EE2E8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if ((unsigned __int16)result >= 3u)
  {
    if (qword_1005CEE18 != -1)
      swift_once(&qword_1005CEE18, sub_1003EB6EC);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10012A0B0(v1, (uint64_t)qword_1005DD0F0);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.fault.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unknown attachment view type — returning default", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    return 0;
  }
  return result;
}

uint64_t type metadata accessor for ICNoteArchiveModel(uint64_t a1)
{
  uint64_t result;

  result = qword_1005DD178;
  if (!qword_1005DD178)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ICNoteArchiveModel);
  return result;
}

unint64_t sub_1003EE400(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 < 8)
    return 0x605040302010007uLL >> (8 * a1);
  if (qword_1005CEE18 != -1)
    swift_once(&qword_1005CEE18, sub_1003EB6EC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005DD0F0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown paper style — returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 7;
}

uint64_t sub_1003EE4F4(unsigned __int16 a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (a1 < 3u)
    return 0x10002u >> (8 * a1);
  if (qword_1005CEE18 != -1)
    swift_once(&qword_1005CEE18, sub_1003EB6EC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10012A0B0(v2, (uint64_t)qword_1005DD0F0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.fault.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown preferred background color — returning nil", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return 2;
}

uint64_t sub_1003EE5E8(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(unint64_t, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  char v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(unint64_t, char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100012E18(&qword_1005D0218);
  result = __chkstk_darwin(v11);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v65 = v3;
    v17 = &v15[*(int *)(result + 48)];
    v63 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v18 = a1 + v63;
    v70 = *(_QWORD *)(v13 + 72);
    v67 = a1;
    swift_bridgeObjectRetain(a1);
    sub_100012CE8(v18, (uint64_t)v15, &qword_1005D0218);
    v71 = v8;
    v19 = *(void (**)(unint64_t, char *, uint64_t))(v8 + 32);
    v69 = v15;
    v74 = v7;
    v64 = v19;
    v19((unint64_t)v10, v15, v7);
    v20 = *(_QWORD *)v17;
    v21 = *((_QWORD *)v17 + 1);
    v68 = v17;
    v72 = a3;
    v22 = *a3;
    v24 = sub_100248A00((uint64_t)v10);
    v25 = *(_QWORD *)(v22 + 16);
    v26 = (v23 & 1) == 0;
    v27 = v25 + v26;
    if (__OFADD__(v25, v26))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v28 = v23;
    v29 = *(_QWORD *)(v22 + 24);
    v73 = v10;
    v66 = v20;
    if (v29 < v27)
    {
      sub_10024D2B0(v27, a2 & 1);
      v30 = sub_100248A00((uint64_t)v10);
      if ((v28 & 1) != (v31 & 1))
      {
LABEL_28:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v74);
        __break(1u);
        return result;
      }
      v24 = v30;
      v33 = v71;
      v32 = v72;
      v34 = v74;
      if ((v28 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      (*(void (**)(char *, uint64_t))(v33 + 8))(v73, v34);
      v35 = (_QWORD *)(*(_QWORD *)(*v32 + 56) + 16 * v24);
      swift_bridgeObjectRelease(v35[1]);
      *v35 = v66;
      v35[1] = v21;
      v36 = v16 - 1;
      if (v16 == 1)
        return swift_bridgeObjectRelease(v67);
LABEL_16:
      v42 = v67 + v70 + v63;
      while (1)
      {
        v44 = (uint64_t)v69;
        sub_100012CE8(v42, (uint64_t)v69, &qword_1005D0218);
        v45 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 32);
        v46 = (uint64_t)v73;
        v45(v73, v44, v34);
        v47 = *(_QWORD *)v68;
        v48 = *((_QWORD *)v68 + 1);
        v49 = *v32;
        v51 = sub_100248A00(v46);
        v52 = *(_QWORD *)(v49 + 16);
        v53 = (v50 & 1) == 0;
        v54 = v52 + v53;
        if (__OFADD__(v52, v53))
          goto LABEL_26;
        v55 = v50;
        if (*(_QWORD *)(v49 + 24) < v54)
        {
          sub_10024D2B0(v54, 1);
          v56 = sub_100248A00(v46);
          if ((v55 & 1) != (v57 & 1))
            goto LABEL_28;
          v51 = v56;
        }
        v32 = v72;
        if ((v55 & 1) != 0)
        {
          v33 = v71;
          (*(void (**)(char *, uint64_t))(v71 + 8))(v73, v74);
          v43 = (_QWORD *)(*(_QWORD *)(*v32 + 56) + 16 * v51);
          swift_bridgeObjectRelease(v43[1]);
          *v43 = v47;
          v43[1] = v48;
        }
        else
        {
          v58 = (_QWORD *)*v72;
          *(_QWORD *)(*v72 + 8 * (v51 >> 6) + 64) |= 1 << v51;
          v33 = v71;
          v45((char *)(v58[6] + *(_QWORD *)(v71 + 72) * v51), (uint64_t)v73, v74);
          v59 = (_QWORD *)(v58[7] + 16 * v51);
          *v59 = v47;
          v59[1] = v48;
          v60 = v58[2];
          v40 = __OFADD__(v60, 1);
          v61 = v60 + 1;
          if (v40)
            goto LABEL_27;
          v58[2] = v61;
        }
        v42 += v70;
        --v36;
        v34 = v74;
        if (!v36)
          return swift_bridgeObjectRelease(v67);
      }
    }
    v33 = v71;
    v32 = v72;
    v34 = v74;
    if ((a2 & 1) != 0)
    {
      if ((v23 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_100250B44();
      v32 = v72;
      if ((v28 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v37 = (_QWORD *)*v32;
    *(_QWORD *)(*v32 + 8 * (v24 >> 6) + 64) |= 1 << v24;
    v64(v37[6] + *(_QWORD *)(v33 + 72) * v24, v73, v34);
    v38 = (_QWORD *)(v37[7] + 16 * v24);
    *v38 = v66;
    v38[1] = v21;
    v39 = v37[2];
    v40 = __OFADD__(v39, 1);
    v41 = v39 + 1;
    if (v40)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v37[2] = v41;
    v34 = v74;
    v36 = v16 - 1;
    if (v16 == 1)
      return swift_bridgeObjectRelease(v67);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1003EE9D8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t result;

  if (a11)
  {
    sub_10013DD30(a2, a3);
    sub_10013DD30(a4, a5);
    sub_10013DD30(a6, a7);
    sub_10013DD30(a8, a9);
    swift_bridgeObjectRelease(a11);
    return sub_10013DD30(a12, a13);
  }
  return result;
}

uint64_t sub_1003EEA90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1003EEAB4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1003ECFE0(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_1003EEABC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

_QWORD *sub_1003EEACC(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *__dst;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v8;
    v9 = a2[5];
    v10 = a2[6];
    *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
    v11 = a3[10];
    __dst = (void *)(a1 + v11);
    v12 = (char *)a2 + v11;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v16 = v10;
    v17 = v15;
    v18 = swift_bridgeObjectRetain(v16);
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v15)(v12, 1, v13, v18))
    {
      v19 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v21 = a3[11];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    if (v17((char *)a2 + v21, 1, v13))
    {
      v24 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v22, v23, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v22, 0, 1, v13);
    }
    v25 = a3[12];
    v26 = a3[13];
    v27 = (_QWORD *)((char *)v4 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    *((_BYTE *)v4 + v26) = *((_BYTE *)a2 + v26);
    v30 = a3[15];
    *((_BYTE *)v4 + a3[14]) = *((_BYTE *)a2 + a3[14]);
    *((_BYTE *)v4 + v30) = *((_BYTE *)a2 + v30);
    v31 = a3[17];
    *((_BYTE *)v4 + a3[16]) = *((_BYTE *)a2 + a3[16]);
    *((_BYTE *)v4 + v31) = *((_BYTE *)a2 + v31);
    v32 = a3[18];
    v33 = a3[19];
    v34 = (_QWORD *)((char *)v4 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (char *)v4 + v33;
    v38 = (char *)a2 + v33;
    swift_bridgeObjectRetain(v29);
    v39 = swift_bridgeObjectRetain(v36);
    if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v17)(v38, 1, v13, v39))
    {
      v40 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v37, v38, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v37, 0, 1, v13);
    }
    v41 = a3[20];
    v42 = (char *)v4 + v41;
    v43 = (char *)a2 + v41;
    if (v17((char *)a2 + v41, 1, v13))
    {
      v44 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v42, v43, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v42, 0, 1, v13);
    }
    v45 = a3[21];
    v46 = (char *)v4 + v45;
    v47 = (char *)a2 + v45;
    if (v17((char *)a2 + v45, 1, v13))
    {
      v48 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v46, v47, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v46, 0, 1, v13);
    }
    v49 = a3[22];
    v50 = (char *)v4 + v49;
    v51 = (char *)a2 + v49;
    if (v17((char *)a2 + v49, 1, v13))
    {
      v52 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v50, v51, *(_QWORD *)(*(_QWORD *)(v52 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v50, v51, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v50, 0, 1, v13);
    }
    v53 = a3[23];
    v54 = (char *)v4 + v53;
    v55 = (char *)a2 + v53;
    if (v17((char *)a2 + v53, 1, v13))
    {
      v56 = sub_100012E18((uint64_t *)&unk_1005D7B20);
      memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v54, v55, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v54, 0, 1, v13);
    }
    v57 = a3[24];
    v58 = (_QWORD *)((char *)v4 + v57);
    v59 = (uint64_t *)((char *)a2 + v57);
    if (*(uint64_t *)((char *)a2 + v57 + 80))
    {
      v60 = v59[1];
      *v58 = *v59;
      v61 = v59[2];
      sub_10013DCA0(v60, v61);
      v58[1] = v60;
      v58[2] = v61;
      v62 = v59[3];
      v63 = v59[4];
      sub_10013DCA0(v62, v63);
      v58[3] = v62;
      v58[4] = v63;
      v64 = v59[5];
      v65 = v59[6];
      sub_10013DCA0(v64, v65);
      v58[5] = v64;
      v58[6] = v65;
      v66 = v59[7];
      v67 = v59[8];
      sub_10013DCA0(v66, v67);
      v58[7] = v66;
      v58[8] = v67;
      v68 = v59[10];
      v58[9] = v59[9];
      v58[10] = v68;
      v69 = v59[11];
      v70 = v59[12];
      swift_bridgeObjectRetain(v68);
      sub_10013DCA0(v69, v70);
      v58[11] = v69;
      v58[12] = v70;
    }
    else
    {
      v71 = *((_OWORD *)v59 + 5);
      *((_OWORD *)v58 + 4) = *((_OWORD *)v59 + 4);
      *((_OWORD *)v58 + 5) = v71;
      v58[12] = v59[12];
      v72 = *((_OWORD *)v59 + 1);
      *(_OWORD *)v58 = *(_OWORD *)v59;
      *((_OWORD *)v58 + 1) = v72;
      v73 = *((_OWORD *)v59 + 3);
      *((_OWORD *)v58 + 2) = *((_OWORD *)v59 + 2);
      *((_OWORD *)v58 + 3) = v73;
    }
    v74 = a3[25];
    v75 = (_QWORD *)((char *)v4 + v74);
    v76 = (uint64_t *)((char *)a2 + v74);
    v77 = v76[1];
    if (v77)
    {
      *v75 = *v76;
      v75[1] = v77;
      v78 = v76[2];
      v75[2] = v78;
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v78);
    }
    else
    {
      *(_OWORD *)v75 = *(_OWORD *)v76;
      v75[2] = v76[2];
    }
    v79 = a3[26];
    v80 = a3[27];
    v81 = *(uint64_t *)((char *)a2 + v79);
    *(_QWORD *)((char *)v4 + v79) = v81;
    v82 = *(uint64_t *)((char *)a2 + v80);
    *(_QWORD *)((char *)v4 + v80) = v82;
    v83 = a3[28];
    v84 = *(uint64_t *)((char *)a2 + v83);
    *(_QWORD *)((char *)v4 + v83) = v84;
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v84);
  }
  return v4;
}

double sub_1003EF040(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(char *, uint64_t, uint64_t);
  char *v8;
  __n128 v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  double result;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  v4 = (char *)a1 + a2[10];
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  v8 = (char *)a1 + a2[11];
  if (!v7(v8, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[12] + 8));
  v9 = swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[18] + 8));
  v10 = (char *)a1 + a2[19];
  if (!((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v7)(v10, 1, v5, v9))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  v11 = (char *)a1 + a2[20];
  if (!v7(v11, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  v12 = (char *)a1 + a2[21];
  if (!v7(v12, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
  v13 = (char *)a1 + a2[22];
  if (!v7(v13, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  v14 = (char *)a1 + a2[23];
  if (!v7(v14, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
  v15 = (_QWORD *)((char *)a1 + a2[24]);
  if (v15[10])
  {
    sub_10013DD30(v15[1], v15[2]);
    sub_10013DD30(v15[3], v15[4]);
    sub_10013DD30(v15[5], v15[6]);
    sub_10013DD30(v15[7], v15[8]);
    swift_bridgeObjectRelease(v15[10]);
    sub_10013DD30(v15[11], v15[12]);
  }
  v16 = (char *)a1 + a2[25];
  v17 = *((_QWORD *)v16 + 1);
  if (v17)
  {
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(*((_QWORD *)v16 + 2));
  }
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[26]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[27]));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[28])).n128_u64[0];
  return result;
}

uint64_t sub_1003EF26C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  unsigned int (*v16)(uint64_t, uint64_t, uint64_t);
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  const void *v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *__dst;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v10 = a3[10];
  __dst = (void *)(a1 + v10);
  v11 = (const void *)(a2 + v10);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v15 = v9;
  v16 = v14;
  v17 = swift_bridgeObjectRetain(v15);
  if (((unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v14)(v11, 1, v12, v17))
  {
    v18 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(__dst, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
  }
  v19 = a3[11];
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  if (v16(a2 + v19, 1, v12))
  {
    v22 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v20, v21, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v20, 0, 1, v12);
  }
  v23 = a3[12];
  v24 = a3[13];
  v25 = (_QWORD *)(a1 + v23);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  v28 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  v29 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v29) = *(_BYTE *)(a2 + v29);
  v30 = a3[18];
  v31 = a3[19];
  v32 = (_QWORD *)(a1 + v30);
  v33 = (_QWORD *)(a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (void *)(a1 + v31);
  v36 = (const void *)(a2 + v31);
  swift_bridgeObjectRetain(v27);
  v37 = swift_bridgeObjectRetain(v34);
  if (((unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v16)(v36, 1, v12, v37))
  {
    v38 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v35, v36, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v35, 0, 1, v12);
  }
  v39 = a3[20];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  if (v16(a2 + v39, 1, v12))
  {
    v42 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v40, v41, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v40, 0, 1, v12);
  }
  v43 = a3[21];
  v44 = (void *)(a1 + v43);
  v45 = (const void *)(a2 + v43);
  if (v16(a2 + v43, 1, v12))
  {
    v46 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v44, v45, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v44, 0, 1, v12);
  }
  v47 = a3[22];
  v48 = (void *)(a1 + v47);
  v49 = (const void *)(a2 + v47);
  if (v16(a2 + v47, 1, v12))
  {
    v50 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v48, v49, *(_QWORD *)(*(_QWORD *)(v50 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v48, v49, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v48, 0, 1, v12);
  }
  v51 = a3[23];
  v52 = (void *)(a1 + v51);
  v53 = (const void *)(a2 + v51);
  if (v16(a2 + v51, 1, v12))
  {
    v54 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v52, v53, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v52, 0, 1, v12);
  }
  v55 = a3[24];
  v56 = (_QWORD *)(a1 + v55);
  v57 = (_QWORD *)(a2 + v55);
  if (*(_QWORD *)(a2 + v55 + 80))
  {
    v58 = v57[1];
    *v56 = *v57;
    v59 = v57[2];
    sub_10013DCA0(v58, v59);
    v56[1] = v58;
    v56[2] = v59;
    v60 = v57[3];
    v61 = v57[4];
    sub_10013DCA0(v60, v61);
    v56[3] = v60;
    v56[4] = v61;
    v62 = v57[5];
    v63 = v57[6];
    sub_10013DCA0(v62, v63);
    v56[5] = v62;
    v56[6] = v63;
    v64 = v57[7];
    v65 = v57[8];
    sub_10013DCA0(v64, v65);
    v56[7] = v64;
    v56[8] = v65;
    v66 = v57[10];
    v56[9] = v57[9];
    v56[10] = v66;
    v67 = v57[11];
    v68 = v57[12];
    swift_bridgeObjectRetain(v66);
    sub_10013DCA0(v67, v68);
    v56[11] = v67;
    v56[12] = v68;
  }
  else
  {
    v69 = *((_OWORD *)v57 + 5);
    *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
    *((_OWORD *)v56 + 5) = v69;
    v56[12] = v57[12];
    v70 = *((_OWORD *)v57 + 1);
    *(_OWORD *)v56 = *(_OWORD *)v57;
    *((_OWORD *)v56 + 1) = v70;
    v71 = *((_OWORD *)v57 + 3);
    *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
    *((_OWORD *)v56 + 3) = v71;
  }
  v72 = a3[25];
  v73 = (_QWORD *)(a1 + v72);
  v74 = (_QWORD *)(a2 + v72);
  v75 = v74[1];
  if (v75)
  {
    *v73 = *v74;
    v73[1] = v75;
    v76 = v74[2];
    v73[2] = v76;
    swift_bridgeObjectRetain(v75);
    swift_bridgeObjectRetain(v76);
  }
  else
  {
    *(_OWORD *)v73 = *(_OWORD *)v74;
    v73[2] = v74[2];
  }
  v77 = a3[26];
  v78 = a3[27];
  v79 = *(_QWORD *)(a2 + v77);
  *(_QWORD *)(a1 + v77) = v79;
  v80 = *(_QWORD *)(a2 + v78);
  *(_QWORD *)(a1 + v78) = v80;
  v81 = a3[28];
  v82 = *(_QWORD *)(a2 + v81);
  *(_QWORD *)(a1 + v81) = v82;
  swift_bridgeObjectRetain(v79);
  swift_bridgeObjectRetain(v80);
  swift_bridgeObjectRetain(v82);
  return a1;
}

uint64_t sub_1003EF7B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  void *v39;
  void *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  void *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void *v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_BYTE *)(a1 + 57) = *(_BYTE *)(a2 + 57);
  v12 = a3[10];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = a3[11];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = v17((void *)(a1 + v21), 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v22, v23, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    v26 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v22, v23, v15);
LABEL_13:
  v27 = a3[12];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v32 = a3[18];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  v37 = swift_bridgeObjectRelease(v36);
  v38 = a3[19];
  v39 = (void *)(a1 + v38);
  v40 = (void *)(a2 + v38);
  v41 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))v17)(a1 + v38, 1, v15, v37);
  v42 = v17(v40, 1, v15);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v39, v40, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v39, 0, 1, v15);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v39, v15);
LABEL_18:
    v43 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v39, v40, v15);
LABEL_19:
  v44 = a3[20];
  v45 = (void *)(a1 + v44);
  v46 = (void *)(a2 + v44);
  v47 = v17((void *)(a1 + v44), 1, v15);
  v48 = v17(v46, 1, v15);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v45, v46, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v45, 0, 1, v15);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v48)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v45, v15);
LABEL_24:
    v49 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v45, v46, v15);
LABEL_25:
  v50 = a3[21];
  v51 = (void *)(a1 + v50);
  v52 = (void *)(a2 + v50);
  v53 = v17((void *)(a1 + v50), 1, v15);
  v54 = v17(v52, 1, v15);
  if (v53)
  {
    if (!v54)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v51, v52, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v51, 0, 1, v15);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v54)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v51, v15);
LABEL_30:
    v55 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v51, v52, v15);
LABEL_31:
  v56 = a3[22];
  v57 = (void *)(a1 + v56);
  v58 = (void *)(a2 + v56);
  v59 = v17((void *)(a1 + v56), 1, v15);
  v60 = v17(v58, 1, v15);
  if (v59)
  {
    if (!v60)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v57, v58, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v57, 0, 1, v15);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v60)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v57, v15);
LABEL_36:
    v61 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v57, v58, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v57, v58, v15);
LABEL_37:
  v62 = a3[23];
  v63 = (void *)(a1 + v62);
  v64 = (void *)(a2 + v62);
  v65 = v17((void *)(a1 + v62), 1, v15);
  v66 = v17(v64, 1, v15);
  if (v65)
  {
    if (!v66)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v63, v64, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v63, 0, 1, v15);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v66)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v63, v15);
LABEL_42:
    v67 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v63, v64, v15);
LABEL_43:
  v68 = a3[24];
  v69 = (_QWORD *)(a1 + v68);
  v70 = (_QWORD *)(a2 + v68);
  v71 = *(_QWORD *)(a1 + v68 + 80);
  v72 = *(_QWORD *)(a2 + v68 + 80);
  if (v71)
  {
    if (v72)
    {
      *v69 = *v70;
      v73 = v70[1];
      v74 = v70[2];
      sub_10013DCA0(v73, v74);
      v75 = v69[1];
      v76 = v69[2];
      v69[1] = v73;
      v69[2] = v74;
      sub_10013DD30(v75, v76);
      v77 = v70[3];
      v78 = v70[4];
      sub_10013DCA0(v77, v78);
      v79 = v69[3];
      v80 = v69[4];
      v69[3] = v77;
      v69[4] = v78;
      sub_10013DD30(v79, v80);
      v81 = v70[5];
      v82 = v70[6];
      sub_10013DCA0(v81, v82);
      v83 = v69[5];
      v84 = v69[6];
      v69[5] = v81;
      v69[6] = v82;
      sub_10013DD30(v83, v84);
      v85 = v70[7];
      v86 = v70[8];
      sub_10013DCA0(v85, v86);
      v87 = v69[7];
      v88 = v69[8];
      v69[7] = v85;
      v69[8] = v86;
      sub_10013DD30(v87, v88);
      v69[9] = v70[9];
      v89 = v70[10];
      v90 = v69[10];
      v69[10] = v89;
      swift_bridgeObjectRetain(v89);
      swift_bridgeObjectRelease(v90);
      v91 = v70[11];
      v92 = v70[12];
      sub_10013DCA0(v91, v92);
      v93 = v69[11];
      v94 = v69[12];
      v69[11] = v91;
      v69[12] = v92;
      sub_10013DD30(v93, v94);
    }
    else
    {
      sub_1003F00C0(v69);
      v107 = *((_OWORD *)v70 + 1);
      v106 = *((_OWORD *)v70 + 2);
      *(_OWORD *)v69 = *(_OWORD *)v70;
      *((_OWORD *)v69 + 1) = v107;
      *((_OWORD *)v69 + 2) = v106;
      v109 = *((_OWORD *)v70 + 4);
      v108 = *((_OWORD *)v70 + 5);
      v110 = *((_OWORD *)v70 + 3);
      v69[12] = v70[12];
      *((_OWORD *)v69 + 4) = v109;
      *((_OWORD *)v69 + 5) = v108;
      *((_OWORD *)v69 + 3) = v110;
    }
  }
  else if (v72)
  {
    *v69 = *v70;
    v95 = v70[1];
    v96 = v70[2];
    sub_10013DCA0(v95, v96);
    v69[1] = v95;
    v69[2] = v96;
    v97 = v70[3];
    v98 = v70[4];
    sub_10013DCA0(v97, v98);
    v69[3] = v97;
    v69[4] = v98;
    v99 = v70[5];
    v100 = v70[6];
    sub_10013DCA0(v99, v100);
    v69[5] = v99;
    v69[6] = v100;
    v101 = v70[7];
    v102 = v70[8];
    sub_10013DCA0(v101, v102);
    v69[7] = v101;
    v69[8] = v102;
    v69[9] = v70[9];
    v103 = v70[10];
    v69[10] = v103;
    v104 = v70[11];
    v105 = v70[12];
    swift_bridgeObjectRetain(v103);
    sub_10013DCA0(v104, v105);
    v69[11] = v104;
    v69[12] = v105;
  }
  else
  {
    v111 = *(_OWORD *)v70;
    v112 = *((_OWORD *)v70 + 2);
    *((_OWORD *)v69 + 1) = *((_OWORD *)v70 + 1);
    *((_OWORD *)v69 + 2) = v112;
    *(_OWORD *)v69 = v111;
    v113 = *((_OWORD *)v70 + 3);
    v114 = *((_OWORD *)v70 + 4);
    v115 = *((_OWORD *)v70 + 5);
    v69[12] = v70[12];
    *((_OWORD *)v69 + 4) = v114;
    *((_OWORD *)v69 + 5) = v115;
    *((_OWORD *)v69 + 3) = v113;
  }
  v116 = a3[25];
  v117 = (_QWORD *)(a1 + v116);
  v118 = (_QWORD *)(a2 + v116);
  v119 = *(_QWORD *)(a1 + v116 + 8);
  v120 = *(_QWORD *)(a2 + v116 + 8);
  if (v119)
  {
    if (v120)
    {
      *v117 = *v118;
      v121 = v118[1];
      v117[1] = v121;
      swift_bridgeObjectRetain(v121);
      swift_bridgeObjectRelease(v119);
      v122 = v118[2];
      v123 = v117[2];
      v117[2] = v122;
      swift_bridgeObjectRetain(v122);
      swift_bridgeObjectRelease(v123);
    }
    else
    {
      sub_1001F5704((uint64_t)v117);
      v126 = v118[2];
      *(_OWORD *)v117 = *(_OWORD *)v118;
      v117[2] = v126;
    }
  }
  else if (v120)
  {
    *v117 = *v118;
    v124 = v118[1];
    v117[1] = v124;
    v125 = v118[2];
    v117[2] = v125;
    swift_bridgeObjectRetain(v124);
    swift_bridgeObjectRetain(v125);
  }
  else
  {
    v127 = *(_OWORD *)v118;
    v117[2] = v118[2];
    *(_OWORD *)v117 = v127;
  }
  v128 = a3[26];
  v129 = *(_QWORD *)(a1 + v128);
  v130 = *(_QWORD *)(a2 + v128);
  *(_QWORD *)(a1 + v128) = v130;
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRelease(v129);
  v131 = a3[27];
  v132 = *(_QWORD *)(a1 + v131);
  v133 = *(_QWORD *)(a2 + v131);
  *(_QWORD *)(a1 + v131) = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease(v132);
  v134 = a3[28];
  v135 = *(_QWORD *)(a1 + v134);
  v136 = *(_QWORD *)(a2 + v134);
  *(_QWORD *)(a1 + v134) = v136;
  swift_bridgeObjectRetain(v136);
  swift_bridgeObjectRelease(v135);
  return a1;
}

_QWORD *sub_1003F00C0(_QWORD *a1)
{
  _s13EncryptedDataVwxx(a1);
  return a1;
}

uint64_t sub_1003F00F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v6 = a3[10];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[11];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11((const void *)(a2 + v13), 1, v9))
  {
    v16 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[15];
  *(_BYTE *)(a1 + a3[14]) = *(_BYTE *)(a2 + a3[14]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  v20 = a3[19];
  *(_OWORD *)(a1 + a3[18]) = *(_OWORD *)(a2 + a3[18]);
  v21 = (void *)(a1 + v20);
  v22 = (const void *)(a2 + v20);
  if (v11((const void *)(a2 + v20), 1, v9))
  {
    v23 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v21, v22, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v21, 0, 1, v9);
  }
  v24 = a3[20];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  if (v11((const void *)(a2 + v24), 1, v9))
  {
    v27 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v25, v26, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v25, 0, 1, v9);
  }
  v28 = a3[21];
  v29 = (void *)(a1 + v28);
  v30 = (const void *)(a2 + v28);
  if (v11((const void *)(a2 + v28), 1, v9))
  {
    v31 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v29, v30, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v29, 0, 1, v9);
  }
  v32 = a3[22];
  v33 = (void *)(a1 + v32);
  v34 = (const void *)(a2 + v32);
  if (v11((const void *)(a2 + v32), 1, v9))
  {
    v35 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v33, v34, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v33, 0, 1, v9);
  }
  v36 = a3[23];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  if (v11((const void *)(a2 + v36), 1, v9))
  {
    v39 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v37, v38, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v37, 0, 1, v9);
  }
  v40 = a3[24];
  v41 = a3[25];
  v42 = a1 + v40;
  v43 = a2 + v40;
  *(_QWORD *)(v42 + 96) = *(_QWORD *)(v43 + 96);
  v44 = *(_OWORD *)(v43 + 16);
  *(_OWORD *)v42 = *(_OWORD *)v43;
  *(_OWORD *)(v42 + 16) = v44;
  v45 = *(_OWORD *)(v43 + 80);
  *(_OWORD *)(v42 + 64) = *(_OWORD *)(v43 + 64);
  *(_OWORD *)(v42 + 80) = v45;
  v46 = *(_OWORD *)(v43 + 48);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v43 + 32);
  *(_OWORD *)(v42 + 48) = v46;
  v47 = a1 + v41;
  v48 = a2 + v41;
  *(_OWORD *)v47 = *(_OWORD *)v48;
  *(_QWORD *)(v47 + 16) = *(_QWORD *)(v48 + 16);
  v49 = a3[27];
  *(_QWORD *)(a1 + a3[26]) = *(_QWORD *)(a2 + a3[26]);
  *(_QWORD *)(a1 + v49) = *(_QWORD *)(a2 + v49);
  *(_QWORD *)(a1 + a3[28]) = *(_QWORD *)(a2 + a3[28]);
  return a1;
}

uint64_t sub_1003F0528(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  void *v43;
  void *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  void *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  v12 = a3[10];
  v13 = (void *)(a1 + v12);
  v14 = (void *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = a3[11];
  v22 = (void *)(a1 + v21);
  v23 = (void *)(a2 + v21);
  v24 = v17((void *)(a1 + v21), 1, v15);
  v25 = v17(v23, 1, v15);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v22, v23, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v22, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v22, v15);
LABEL_12:
    v26 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v22, v23, v15);
LABEL_13:
  v27 = a3[12];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  v34 = a3[16];
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  *(_BYTE *)(a1 + v34) = *(_BYTE *)(a2 + v34);
  v35 = a3[18];
  *(_BYTE *)(a1 + a3[17]) = *(_BYTE *)(a2 + a3[17]);
  v36 = (_QWORD *)(a1 + v35);
  v37 = (uint64_t *)(a2 + v35);
  v39 = *v37;
  v38 = v37[1];
  v40 = v36[1];
  *v36 = v39;
  v36[1] = v38;
  v41 = swift_bridgeObjectRelease(v40);
  v42 = a3[19];
  v43 = (void *)(a1 + v42);
  v44 = (void *)(a2 + v42);
  v45 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))v17)(a1 + v42, 1, v15, v41);
  v46 = v17(v44, 1, v15);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v43, v44, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v43, 0, 1, v15);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v43, v15);
LABEL_18:
    v47 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v43, v44, v15);
LABEL_19:
  v48 = a3[20];
  v49 = (void *)(a1 + v48);
  v50 = (void *)(a2 + v48);
  v51 = v17((void *)(a1 + v48), 1, v15);
  v52 = v17(v50, 1, v15);
  if (v51)
  {
    if (!v52)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v49, v50, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v49, 0, 1, v15);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  if (v52)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v49, v15);
LABEL_24:
    v53 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_25;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v49, v50, v15);
LABEL_25:
  v54 = a3[21];
  v55 = (void *)(a1 + v54);
  v56 = (void *)(a2 + v54);
  v57 = v17((void *)(a1 + v54), 1, v15);
  v58 = v17(v56, 1, v15);
  if (v57)
  {
    if (!v58)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v55, v56, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v55, 0, 1, v15);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (v58)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v55, v15);
LABEL_30:
    v59 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v55, v56, *(_QWORD *)(*(_QWORD *)(v59 - 8) + 64));
    goto LABEL_31;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v55, v56, v15);
LABEL_31:
  v60 = a3[22];
  v61 = (void *)(a1 + v60);
  v62 = (void *)(a2 + v60);
  v63 = v17((void *)(a1 + v60), 1, v15);
  v64 = v17(v62, 1, v15);
  if (v63)
  {
    if (!v64)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v61, v62, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v61, 0, 1, v15);
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v64)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v61, v15);
LABEL_36:
    v65 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
    goto LABEL_37;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v61, v62, v15);
LABEL_37:
  v66 = a3[23];
  v67 = (void *)(a1 + v66);
  v68 = (void *)(a2 + v66);
  v69 = v17((void *)(a1 + v66), 1, v15);
  v70 = v17(v68, 1, v15);
  if (v69)
  {
    if (!v70)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v67, v68, v15);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v67, 0, 1, v15);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v70)
  {
    (*(void (**)(void *, uint64_t))(v16 + 8))(v67, v15);
LABEL_42:
    v71 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    goto LABEL_43;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v67, v68, v15);
LABEL_43:
  v72 = a3[24];
  v73 = (_QWORD *)(a1 + v72);
  v74 = a2 + v72;
  if (*(_QWORD *)(a1 + v72 + 80))
  {
    if (*(_QWORD *)(v74 + 80))
    {
      v75 = *(_QWORD *)(v74 + 16);
      v76 = v73[1];
      v77 = v73[2];
      *(_OWORD *)v73 = *(_OWORD *)v74;
      v73[2] = v75;
      sub_10013DD30(v76, v77);
      v78 = v73[3];
      v79 = v73[4];
      *(_OWORD *)(v73 + 3) = *(_OWORD *)(v74 + 24);
      sub_10013DD30(v78, v79);
      v80 = v73[5];
      v81 = v73[6];
      *(_OWORD *)(v73 + 5) = *(_OWORD *)(v74 + 40);
      sub_10013DD30(v80, v81);
      v82 = v73[7];
      v83 = v73[8];
      *(_OWORD *)(v73 + 7) = *(_OWORD *)(v74 + 56);
      sub_10013DD30(v82, v83);
      v84 = *(_QWORD *)(v74 + 80);
      v85 = v73[10];
      v73[9] = *(_QWORD *)(v74 + 72);
      v73[10] = v84;
      swift_bridgeObjectRelease(v85);
      v86 = v73[11];
      v87 = v73[12];
      *(_OWORD *)(v73 + 11) = *(_OWORD *)(v74 + 88);
      sub_10013DD30(v86, v87);
      goto LABEL_48;
    }
    sub_1003F00C0(v73);
  }
  v88 = *(_OWORD *)(v74 + 80);
  *((_OWORD *)v73 + 4) = *(_OWORD *)(v74 + 64);
  *((_OWORD *)v73 + 5) = v88;
  v73[12] = *(_QWORD *)(v74 + 96);
  v89 = *(_OWORD *)(v74 + 16);
  *(_OWORD *)v73 = *(_OWORD *)v74;
  *((_OWORD *)v73 + 1) = v89;
  v90 = *(_OWORD *)(v74 + 48);
  *((_OWORD *)v73 + 2) = *(_OWORD *)(v74 + 32);
  *((_OWORD *)v73 + 3) = v90;
LABEL_48:
  v91 = a3[25];
  v92 = a1 + v91;
  v93 = a2 + v91;
  v94 = *(_QWORD *)(a1 + v91 + 8);
  if (!v94)
  {
LABEL_52:
    *(_OWORD *)v92 = *(_OWORD *)v93;
    *(_QWORD *)(v92 + 16) = *(_QWORD *)(v93 + 16);
    goto LABEL_53;
  }
  v95 = *(_QWORD *)(v93 + 8);
  if (!v95)
  {
    sub_1001F5704(v92);
    goto LABEL_52;
  }
  *(_QWORD *)v92 = *(_QWORD *)v93;
  *(_QWORD *)(v92 + 8) = v95;
  swift_bridgeObjectRelease(v94);
  v96 = *(_QWORD *)(v92 + 16);
  *(_QWORD *)(v92 + 16) = *(_QWORD *)(v93 + 16);
  swift_bridgeObjectRelease(v96);
LABEL_53:
  v97 = a3[26];
  v98 = *(_QWORD *)(a1 + v97);
  *(_QWORD *)(a1 + v97) = *(_QWORD *)(a2 + v97);
  swift_bridgeObjectRelease(v98);
  v99 = a3[27];
  v100 = *(_QWORD *)(a1 + v99);
  *(_QWORD *)(a1 + v99) = *(_QWORD *)(a2 + v99);
  swift_bridgeObjectRelease(v100);
  v101 = a3[28];
  v102 = *(_QWORD *)(a1 + v101);
  *(_QWORD *)(a1 + v101) = *(_QWORD *)(a2 + v101);
  swift_bridgeObjectRelease(v102);
  return a1;
}

uint64_t sub_1003F0C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003F0C64);
}

uint64_t sub_1003F0C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_1003F0CE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003F0CF0);
}

uint64_t sub_1003F0CF0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v7 = sub_100012E18((uint64_t *)&unk_1005D7B20);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

void sub_1003F0D68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  v4[0] = &unk_100468558;
  v4[1] = &unk_100468570;
  v4[2] = &unk_100468588;
  v4[3] = &unk_100468588;
  v4[4] = &unk_1004685A0;
  v4[5] = &unk_1004685A0;
  sub_100019C18(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_100468588;
    v8 = &unk_1004685A0;
    v9 = &unk_1004685A0;
    v10 = &unk_1004685B8;
    v11 = &unk_1004685A0;
    v12 = &unk_1004685D0;
    v13 = &unk_100468588;
    v14 = v5;
    v15 = v5;
    v16 = v5;
    v17 = v5;
    v18 = v5;
    v19 = &unk_1004685E8;
    v20 = &unk_100468600;
    v21 = &unk_100468618;
    v22 = &unk_100468618;
    v23 = &unk_100468618;
    swift_initStructMetadata(a1, 256, 25, v4, a1 + 16);
  }
}

uint64_t sub_1003F0E50(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100019C6C(&qword_1005D4DC8, type metadata accessor for ICNoteArchiveModel, (uint64_t)&unk_10046864C);
  result = sub_100019C6C(&qword_1005D76D0, type metadata accessor for ICNoteArchiveModel, (uint64_t)&unk_100468674);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003F0EAC()
{
  unint64_t result;

  result = qword_1005DD250;
  if (!qword_1005DD250)
  {
    result = swift_getWitnessTable(&unk_100468B9C, &type metadata for ICNoteArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005DD250);
  }
  return result;
}

unint64_t sub_1003F0EF0()
{
  unint64_t result;

  result = qword_1005DD258;
  if (!qword_1005DD258)
  {
    result = swift_getWitnessTable(&unk_100468B74, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1005DD258);
  }
  return result;
}

unint64_t sub_1003F0F34()
{
  unint64_t result;

  result = qword_1005DD260;
  if (!qword_1005DD260)
  {
    result = swift_getWitnessTable(&unk_100468B4C, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1005DD260);
  }
  return result;
}

unint64_t sub_1003F0F78()
{
  unint64_t result;

  result = qword_1005DD268;
  if (!qword_1005DD268)
  {
    result = swift_getWitnessTable(&unk_100454450, &_s13EncryptedDataVN);
    atomic_store(result, (unint64_t *)&qword_1005DD268);
  }
  return result;
}

unint64_t sub_1003F0FBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DD288;
  if (!qword_1005DD288)
  {
    v1 = sub_10001537C(&qword_1005DD280);
    sub_100019C6C(&qword_1005D6028, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1005DD288);
  }
  return result;
}

unint64_t sub_1003F1040()
{
  unint64_t result;

  result = qword_1005DD298;
  if (!qword_1005DD298)
  {
    result = swift_getWitnessTable(&unk_100468AFC, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1005DD298);
  }
  return result;
}

unint64_t sub_1003F1084()
{
  unint64_t result;

  result = qword_1005DD2A0;
  if (!qword_1005DD2A0)
  {
    result = swift_getWitnessTable(&unk_100468AD4, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1005DD2A0);
  }
  return result;
}

unint64_t sub_1003F10C8()
{
  unint64_t result;

  result = qword_1005DD2A8;
  if (!qword_1005DD2A8)
  {
    result = swift_getWitnessTable(&unk_100454478, &_s13EncryptedDataVN);
    atomic_store(result, (unint64_t *)&qword_1005DD2A8);
  }
  return result;
}

uint64_t sub_1003F110C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001537C(&qword_1005DD270);
    sub_100019C6C(a2, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003F1190()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1005DD2B8;
  if (!qword_1005DD2B8)
  {
    v1 = sub_10001537C(&qword_1005DD280);
    sub_100019C6C(&qword_1005D6018, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1005DD2B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ICNoteArchiveModel.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_1003F1260 + 4 * byte_10046851C[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_1003F1294 + 4 * byte_100468517[v4]))();
}

uint64_t sub_1003F1294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F129C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003F12A4);
  return result;
}

uint64_t sub_1003F12B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003F12B8);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_1003F12BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F12C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.CodingKeys()
{
  return &type metadata for ICNoteArchiveModel.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ICNoteArchiveModel.Backgrounds(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1003F132C + 4 * byte_100468526[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003F1360 + 4 * byte_100468521[v4]))();
}

uint64_t sub_1003F1360(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1368(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003F1370);
  return result;
}

uint64_t sub_1003F137C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003F1384);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1003F1388(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1390(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.Backgrounds()
{
  return &type metadata for ICNoteArchiveModel.Backgrounds;
}

uint64_t storeEnumTagSinglePayload for ICNoteArchiveModel.PaperStyles(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1003F13F8 + 4 * byte_100468530[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1003F142C + 4 * byte_10046852B[v4]))();
}

uint64_t sub_1003F142C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1434(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003F143CLL);
  return result;
}

uint64_t sub_1003F1448(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003F1450);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1003F1454(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F145C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.PaperStyles()
{
  return &type metadata for ICNoteArchiveModel.PaperStyles;
}

uint64_t storeEnumTagSinglePayload for ICNoteArchiveModel.AttachmentViewTypes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1003F14C4 + 4 * byte_10046853A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003F14F8 + 4 * byte_100468535[v4]))();
}

uint64_t sub_1003F14F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1500(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1003F1508);
  return result;
}

uint64_t sub_1003F1514(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1003F151CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1003F1520(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1528(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ICNoteArchiveModel.AttachmentViewTypes()
{
  return &type metadata for ICNoteArchiveModel.AttachmentViewTypes;
}

uint64_t sub_1003F1548()
{
  return sub_10012C9A4(&qword_1005DD2C0, &qword_1005DD2C8);
}

unint64_t sub_1003F1570()
{
  unint64_t result;

  result = qword_1005DD2D0;
  if (!qword_1005DD2D0)
  {
    result = swift_getWitnessTable(&unk_1004687C4, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1005DD2D0);
  }
  return result;
}

uint64_t sub_1003F15B8()
{
  return sub_10012C9A4(&qword_1005DD2D8, &qword_1005DD2E0);
}

unint64_t sub_1003F15E0()
{
  unint64_t result;

  result = qword_1005DD2E8;
  if (!qword_1005DD2E8)
  {
    result = swift_getWitnessTable(&unk_1004688DC, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1005DD2E8);
  }
  return result;
}

uint64_t sub_1003F1628()
{
  return sub_10012C9A4(&qword_1005DD2F0, &qword_1005DD2F8);
}

unint64_t sub_1003F1650()
{
  unint64_t result;

  result = qword_1005DD300;
  if (!qword_1005DD300)
  {
    result = swift_getWitnessTable(&unk_1004689F4, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1005DD300);
  }
  return result;
}

unint64_t sub_1003F1698()
{
  unint64_t result;

  result = qword_1005DD308;
  if (!qword_1005DD308)
  {
    result = swift_getWitnessTable(&unk_100468AAC, &type metadata for ICNoteArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005DD308);
  }
  return result;
}

unint64_t sub_1003F16E0()
{
  unint64_t result;

  result = qword_1005DD310;
  if (!qword_1005DD310)
  {
    result = swift_getWitnessTable(&unk_100468A1C, &type metadata for ICNoteArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005DD310);
  }
  return result;
}

unint64_t sub_1003F1728()
{
  unint64_t result;

  result = qword_1005DD318;
  if (!qword_1005DD318)
  {
    result = swift_getWitnessTable(&unk_100468A44, &type metadata for ICNoteArchiveModel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1005DD318);
  }
  return result;
}

unint64_t sub_1003F176C()
{
  unint64_t result;

  result = qword_1005DD320;
  if (!qword_1005DD320)
  {
    result = swift_getWitnessTable(&unk_10046874C, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1005DD320);
  }
  return result;
}

uint64_t sub_1003F17B0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;

  if (a1 == 0x6E65644965707974 && a2 == 0xEE00726569666974)
  {
    v5 = 0xEE00726569666974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644965707974, 0xEE00726569666974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v7 = 0xEA00000000007265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100482870)
  {
    v8 = 0x8000000100482870;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100482870, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6954746E65726170 && a2 == 0xEB00000000656C74)
  {
    v9 = 0xEB00000000656C74;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6954746E65726170, 0xEB00000000656C74, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000013)
  {
    v10 = 0x8000000100482890;
    if (a2 == 0x8000000100482890)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100482890, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD000000000000013)
  {
    v11 = 0x80000001004828B0;
    if (a2 == 0x80000001004828B0)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001004828B0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x4164657461657263 && a2 == 0xE900000000000074)
  {
    v12 = 0xE900000000000074;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263, 0xE900000000000074, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_42;
  }
  if (a1 == 0x6465696669646F6DLL && a2 == 0xEA00000000007441)
  {
    v13 = 0xEA00000000007441;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465696669646F6DLL, 0xEA00000000007441, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_48;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v14 = 0xE500000000000000;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_54;
  }
  if (a1 == 0x64656E6E69507369 && a2 == 0xE800000000000000)
  {
    v15 = 0xE800000000000000;
LABEL_60:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64656E6E69507369, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_60;
  }
  if (a1 == 0x4E6B636975517369 && a2 == 0xEB0000000065746FLL)
  {
    v16 = 0xEB0000000065746FLL;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6B636975517369, 0xEB0000000065746FLL, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_66;
  }
  if (a1 == 0x7974537265706170 && a2 == 0xEA0000000000656CLL)
  {
    v17 = 0xEA0000000000656CLL;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7974537265706170, 0xEA0000000000656CLL, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0xD000000000000013)
  {
    v18 = 0x800000010048E120;
    if (a2 == 0x800000010048E120)
      goto LABEL_77;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x800000010048E120, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010048E140)
  {
    v19 = 0x800000010048E140;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010048E140, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_83;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x800000010048E160)
  {
    v20 = 0x800000010048E160;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x800000010048E160, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_89;
  }
  if (a1 == 0x7441646577656976 && a2 == 0xE800000000000000)
  {
    v21 = 0xE800000000000000;
LABEL_95:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7441646577656976, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_95;
  }
  if (a1 == 0xD000000000000017)
  {
    v22 = 0x800000010048E180;
    if (a2 == 0x800000010048E180)
      goto LABEL_100;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010048E180, a1, a2, 0) & 1) != 0)
  {
    v22 = a2;
LABEL_100:
    swift_bridgeObjectRelease(v22);
    return 16;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x800000010048E1A0)
  {
    v23 = 0x800000010048E1A0;
LABEL_106:
    swift_bridgeObjectRelease(v23);
    return 17;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010048E1A0, a1, a2, 0) & 1) != 0)
  {
    v23 = a2;
    goto LABEL_106;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x800000010048E1C0)
  {
    v24 = 0x800000010048E1C0;
LABEL_112:
    swift_bridgeObjectRelease(v24);
    return 18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010048E1C0, a1, a2, 0) & 1) != 0)
  {
    v24 = a2;
    goto LABEL_112;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x800000010048E1E0)
  {
    v25 = 0x800000010048E1E0;
LABEL_118:
    swift_bridgeObjectRelease(v25);
    return 19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, 0x800000010048E1E0, a1, a2, 0) & 1) != 0)
  {
    v25 = a2;
    goto LABEL_118;
  }
  if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464)
  {
    v26 = 0xED00006174614464;
LABEL_124:
    swift_bridgeObjectRelease(v26);
    return 20;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xED00006174614464, a1, a2, 0) & 1) != 0)
  {
    v26 = a2;
    goto LABEL_124;
  }
  if (a1 == 0x746E65746E6F63 && a2 == 0xE700000000000000)
  {
    v27 = 0xE700000000000000;
LABEL_130:
    swift_bridgeObjectRelease(v27);
    return 21;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E65746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v27 = a2;
    goto LABEL_130;
  }
  if (a1 == 0xD000000000000017)
  {
    v28 = 0x800000010048E200;
    if (a2 == 0x800000010048E200)
      goto LABEL_135;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010048E200, a1, a2, 0) & 1) != 0)
  {
    v28 = a2;
LABEL_135:
    swift_bridgeObjectRelease(v28);
    return 22;
  }
  if (a1 == 0x6974697669746361 && a2 == 0xEA00000000007365)
  {
    v29 = 0xEA00000000007365;
LABEL_141:
    swift_bridgeObjectRelease(v29);
    return 23;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6974697669746361, 0xEA00000000007365, a1, a2, 0) & 1) != 0)
  {
    v29 = a2;
    goto LABEL_141;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x800000010048E220)
  {
    swift_bridgeObjectRelease(0x800000010048E220);
    return 24;
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x800000010048E220, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v30 & 1) != 0)
      return 24;
    else
      return 25;
  }
}

unint64_t sub_1003F21C4()
{
  unint64_t result;

  result = qword_1005DD328;
  if (!qword_1005DD328)
  {
    result = swift_getWitnessTable(&unk_100468864, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1005DD328);
  }
  return result;
}

unint64_t sub_1003F2208()
{
  unint64_t result;

  result = qword_1005DD330;
  if (!qword_1005DD330)
  {
    result = swift_getWitnessTable(&unk_10046897C, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1005DD330);
  }
  return result;
}

unint64_t sub_1003F224C()
{
  unint64_t result;

  result = qword_1005DD338;
  if (!qword_1005DD338)
  {
    result = swift_getWitnessTable(&unk_100468944, &type metadata for ICNoteArchiveModel.Backgrounds);
    atomic_store(result, (unint64_t *)&qword_1005DD338);
  }
  return result;
}

unint64_t sub_1003F2290(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005576A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t sub_1003F22D8()
{
  unint64_t result;

  result = qword_1005DD340;
  if (!qword_1005DD340)
  {
    result = swift_getWitnessTable(&unk_10046882C, &type metadata for ICNoteArchiveModel.PaperStyles);
    atomic_store(result, (unint64_t *)&qword_1005DD340);
  }
  return result;
}

unint64_t sub_1003F231C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1005577B8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_1003F2364()
{
  unint64_t result;

  result = qword_1005DD348;
  if (!qword_1005DD348)
  {
    result = swift_getWitnessTable(&unk_100468714, &type metadata for ICNoteArchiveModel.AttachmentViewTypes);
    atomic_store(result, (unint64_t *)&qword_1005DD348);
  }
  return result;
}

id sub_1003F23A8()
{
  return sub_1001EC434(&OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController____lazy_storage___cancelBarButtonItem, &selRef_cancelActionWithSender_, 1);
}

id sub_1003F23C0()
{
  return sub_1001EC434(&OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController____lazy_storage___doneBarButtonItem, &selRef_doneActionWithSender_, 0);
}

void sub_1003F23DC(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  void *v5;
  id v6;
  _QWORD *v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE v16[24];
  _BYTE v17[24];

  if ((a1 & 1) != 0)
  {
    v2 = a2 + 16;
    swift_beginAccess(a2 + 16, v17, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v2);
    if (!Strong
      || (v4 = (void *)Strong,
          v5 = *(void **)(Strong + OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection),
          v6 = v5,
          v4,
          !v5))
    {
      v6 = objc_msgSend(objc_allocWithZone((Class)ICFilterSelection), "init");
    }
    swift_beginAccess(v2, v16, 0, 0);
    v7 = (_QWORD *)swift_unknownObjectWeakLoadStrong(v2);
    if (v7)
    {
      v8 = v7;
      (*(void (**)(id))((swift_isaMask & *v7) + 0x70))(v6);

    }
    swift_beginAccess(v2, v15, 0, 0);
    v9 = (char *)swift_unknownObjectWeakLoadStrong(v2);
    if (v9)
    {
      v10 = *(void **)&v9[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection];
      *(_QWORD *)&v9[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection] = 0;

    }
    swift_beginAccess(v2, &v14, 0, 0);
    v11 = (void *)swift_unknownObjectWeakLoadStrong(v2);
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(v11, "navigationController");

      if (v13)
      {
        objc_msgSend(v13, "dismissViewControllerAnimated:completion:", 1, 0);

      }
    }

  }
}

id sub_1003F26E8(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  NSString v6;
  id v7;
  objc_super v9;

  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController_initialFilterSelection] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController____lazy_storage___cancelBarButtonItem] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC11MobileNotes32FolderComposerBaseViewController____lazy_storage___doneBarButtonItem] = 0;
  if (a2)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v6 = 0;
  }
  v9.receiver = v3;
  v9.super_class = (Class)type metadata accessor for FolderComposerBaseViewController();
  v7 = objc_msgSendSuper2(&v9, "initWithNibName:bundle:", v6, a3);

  return v7;
}

id sub_1003F284C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FolderComposerBaseViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FolderComposerBaseViewController()
{
  return objc_opt_self(_TtC11MobileNotes32FolderComposerBaseViewController);
}

uint64_t sub_1003F29D0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

double sub_1003F29F4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  double result;
  uint64_t v32;
  void **aBlock;
  uint64_t v34;
  void (*v35)(uint64_t, void *);
  void *v36;
  uint64_t (*v37)();
  uint64_t v38;

  v6 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0x98);
  v7 = swift_retain(a3);
  if ((v6(v7) & 1) != 0)
  {
    v32 = a1;
    v8 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", 0, 0, 0);
    v9 = (void *)objc_opt_self(NSBundle);
    v10 = objc_msgSend(v9, "mainBundle");
    v11 = String._bridgeToObjectiveC()();
    v12 = objc_msgSend(v10, "localizedStringForKey:value:table:", v11, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v14 = v13;

    v15 = swift_allocObject(&unk_10056FB98, 32, 7);
    *(_QWORD *)(v15 + 16) = sub_1003F2DF0;
    *(_QWORD *)(v15 + 24) = a3;
    swift_retain(a3);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    v37 = sub_1003F2E1C;
    v38 = v15;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_1002489AC;
    v36 = &unk_10056FBB0;
    v17 = _Block_copy(&aBlock);
    swift_release(v38);
    v18 = (void *)objc_opt_self(UIAlertAction);
    v19 = objc_msgSend(v18, "actionWithTitle:style:handler:", v16, 1, v17);
    _Block_release(v17);

    objc_msgSend(v8, "addAction:", v19);
    v20 = objc_msgSend(v9, "mainBundle");
    v21 = String._bridgeToObjectiveC()();
    v22 = objc_msgSend(v20, "localizedStringForKey:value:table:", v21, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v24 = v23;

    v25 = swift_allocObject(&unk_10056FBE8, 32, 7);
    *(_QWORD *)(v25 + 16) = sub_1003F2DF0;
    *(_QWORD *)(v25 + 24) = a3;
    swift_retain(a3);
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    v37 = sub_1003C9644;
    v38 = v25;
    aBlock = _NSConcreteStackBlock;
    v34 = 1107296256;
    v35 = sub_1002489AC;
    v36 = &unk_10056FC00;
    v27 = _Block_copy(&aBlock);
    v28 = objc_msgSend(v18, "actionWithTitle:style:handler:", v26, 2, v27, swift_release(v38).n128_f64[0]);
    _Block_release(v27);

    objc_msgSend(v8, "addAction:", v28);
    v29 = objc_msgSend(v8, "popoverPresentationController");
    if (v29)
    {
      v30 = v29;
      objc_msgSend(v29, "setBarButtonItem:", v32);

    }
    objc_msgSend(a2, "presentViewController:animated:completion:", v8, 1, 0);
    swift_release(a3);

  }
  else
  {
    sub_1003F23DC(1, a3);
    *(_QWORD *)&result = swift_release(a3).n128_u64[0];
  }
  return result;
}

void sub_1003F2DF0(char a1)
{
  uint64_t v1;

  sub_1003F23DC(a1, v1);
}

uint64_t sub_1003F2DF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003F2E1C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(0);
}

uint64_t sub_1003F2E4C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC11MobileNotesP33_EB85F12CF002C2192906883CAE1B588819ResourceBundleClass);
}

uint64_t sub_1003F2E7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  char *v10;
  uint64_t v11;

  *a6 = a1;
  v10 = (char *)a6 + *(int *)(type metadata accessor for UnsafeResumption(0, a3, a4, a5) + 44);
  v11 = type metadata accessor for Result(0, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a2, v11);
}

uint64_t sub_1003F2F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v12 = type metadata accessor for Result(0, a3, a4, a5);
  __chkstk_darwin(v12);
  v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))((char *)&v16 - v13, a2, a3);
  swift_storeEnumTagMultiPayload(v14, v12, 0);
  return sub_1003F2E7C(a1, (uint64_t)v14, a3, a4, a5, a6);
}

uint64_t sub_1003F2FD0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1003F2FEC((uint64_t)v1 + *(int *)(a1 + 44), *v1, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t sub_1003F2FEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  char *v26;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = a2;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = __chkstk_darwin(a1);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v10);
  v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Result(0, v17, v18, v19);
  __chkstk_darwin(v20);
  v22 = (char *)&v30 - v21;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))((char *)&v30 - v21, a1, v20);
  if (swift_getEnumCaseMultiPayload(v22, v20) == 1)
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v24(v16, v22, a4);
    v25 = swift_allocError(a4, a5, 0, 0);
    v24(v26, v16, a4);
    return swift_continuation_throwingResumeWithError(v31, v25);
  }
  else
  {
    v28 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v28(v12, v22, a3);
    v29 = v31;
    v28(*(char **)(*(_QWORD *)(v31 + 64) + 40), v12, a3);
    return swift_continuation_throwingResume(v29);
  }
}

uint64_t variable initialization expression of AsyncChannel.state(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v2 = sub_10040147C();
  v11 = v2;
  v12 = v3;
  v13 = v4;
  v14 = v5 & 1;
  v6 = type metadata accessor for AsyncChannel.State(0, a1, v4, v5);
  v9 = sub_100403350((uint64_t)&v11, v6, v7, v8);
  swift_bridgeObjectRelease(v2);
  return v9;
}

uint64_t type metadata accessor for UnsafeResumption(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for UnsafeResumption);
}

uint64_t sub_1003F31F4(_QWORD *a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  result = type metadata accessor for Result(319, a1[2], a1[3], a1[4]);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 5);
    return 0;
  }
  return result;
}

uint64_t *sub_1003F3270(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v6 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v7 = *(_QWORD *)(v4 + 64);
  else
    v7 = *(_QWORD *)(v5 + 64);
  if (v6 > 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || v7 + ((v6 + 8) & (unint64_t)~v6) + 1 > 0x18)
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain(v10);
  }
  else
  {
    *a1 = *a2;
    v11 = ((unint64_t)a1 + v6 + 8) & ~v6;
    v12 = *(unsigned __int8 *)((((unint64_t)a2 + v6 + 8) & ~v6) + v7);
    if (v12 >= 2)
    {
      if (v7 <= 3)
        v13 = v7;
      else
        v13 = 4;
      __asm { BR              X15 }
    }
    if (v12 == 1)
    {
      (*(void (**)(uint64_t))(v5 + 16))(v11);
      *(_BYTE *)(v11 + v7) = 1;
    }
    else
    {
      (*(void (**)(uint64_t))(v4 + 16))(v11);
      *(_BYTE *)(v11 + v7) = 0;
    }
  }
  return v3;
}

uint64_t sub_1003F33DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v2 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80) | *(unsigned __int8 *)(v3 + 80);
  v6 = (a1 + v5 + 8) & ~v5;
  v7 = *(_QWORD *)(v3 + 64);
  if (*(_QWORD *)(v4 + 64) > v7)
    v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned __int8 *)(v6 + v7);
  if (v8 < 2)
  {
    if (v8 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1003F3440 + 4 * byte_100468C85[v9]))();
  }
}

_QWORD *sub_1003F3494(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80) | *(unsigned __int8 *)(v5 + 80);
  v8 = v7 + 8;
  v9 = ~v7;
  v10 = ((unint64_t)a2 + v7 + 8) & ~v7;
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64);
  v12 = *(unsigned __int8 *)(v10 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X0 }
  }
  v14 = ((unint64_t)a1 + v8) & v9;
  v15 = v12 == 1;
  if (v12 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(unint64_t))(v5 + 16))(((unint64_t)a1 + v8) & v9);
  *(_BYTE *)(v14 + v11) = v15;
  return a1;
}

_QWORD *sub_1003F3594(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80) | *(unsigned __int8 *)(v6 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  if (v9 != v10)
  {
    if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
      v11 = *(_QWORD *)(v6 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64);
    v12 = *(unsigned __int8 *)(v9 + v11);
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
      v14 = *(_QWORD *)(v5 - 8);
    else
      v14 = *(_QWORD *)(v4 - 8);
    if (v12 == 1)
      v15 = *(_QWORD *)(a3 + 24);
    else
      v15 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v9, v15);
    v16 = *(unsigned __int8 *)(v10 + v11);
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = v16 == 1;
    if (v16 == 1)
      v19 = v7;
    else
      v19 = v6;
    if (v16 == 1)
      v20 = v5;
    else
      v20 = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v9, v10, v20);
    *(_BYTE *)(v9 + v11) = v18;
  }
  return a1;
}

_QWORD *sub_1003F373C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80) | *(unsigned __int8 *)(v5 + 80);
  v8 = v7 + 8;
  v9 = ~v7;
  v10 = ((unint64_t)a2 + v7 + 8) & ~v7;
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v11 = *(_QWORD *)(v5 + 64);
  else
    v11 = *(_QWORD *)(v6 + 64);
  v12 = *(unsigned __int8 *)(v10 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X0 }
  }
  v14 = ((unint64_t)a1 + v8) & v9;
  v15 = v12 == 1;
  if (v12 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(unint64_t))(v5 + 32))(((unint64_t)a1 + v8) & v9);
  *(_BYTE *)(v14 + v11) = v15;
  return a1;
}

_QWORD *sub_1003F383C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(v4 - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80) | *(unsigned __int8 *)(v6 + 80);
  v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  if (v9 != v10)
  {
    if (*(_QWORD *)(v7 + 64) <= *(_QWORD *)(v6 + 64))
      v11 = *(_QWORD *)(v6 + 64);
    else
      v11 = *(_QWORD *)(v7 + 64);
    v12 = *(unsigned __int8 *)(v9 + v11);
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X12 }
    }
    if (v12 == 1)
      v14 = *(_QWORD *)(v5 - 8);
    else
      v14 = *(_QWORD *)(v4 - 8);
    if (v12 == 1)
      v15 = *(_QWORD *)(a3 + 24);
    else
      v15 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v9, v15);
    v16 = *(unsigned __int8 *)(v10 + v11);
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X12 }
    }
    v18 = v16 == 1;
    if (v16 == 1)
      v19 = v7;
    else
      v19 = v6;
    if (v16 == 1)
      v20 = v5;
    else
      v20 = v4;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v9, v10, v20);
    *(_BYTE *)(v9 + v11) = v18;
  }
  return a1;
}

uint64_t sub_1003F39E4(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  int v13;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  if (!a2)
    return 0;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v8 = *(unsigned __int8 *)(v5 + 80) | *(unsigned __int8 *)(v3 + 80);
  v9 = v4 + ((v8 + 8) & ~v8) + 1;
  v10 = 8 * v9;
  if (v9 > 3)
    goto LABEL_10;
  v12 = (a2 - 0x7FFFFFFF + ~(-1 << v10)) >> v10;
  if (v12 > 0xFFFE)
  {
    v11 = *(_DWORD *)((char *)a1 + v9);
    if (!v11)
      goto LABEL_5;
    goto LABEL_19;
  }
  if (v12 <= 0xFE)
  {
    if (!v12)
      goto LABEL_5;
LABEL_10:
    v11 = *((unsigned __int8 *)a1 + v9);
    if (!*((_BYTE *)a1 + v9))
      goto LABEL_5;
    goto LABEL_19;
  }
  v11 = *(unsigned __int16 *)((char *)a1 + v9);
  if (!*(_WORD *)((char *)a1 + v9))
  {
LABEL_5:
    v6 = *a1;
    if (*a1 >= 0xFFFFFFFFuLL)
      LODWORD(v6) = -1;
    return (v6 + 1);
  }
LABEL_19:
  v13 = (v11 - 1) << v10;
  if (v9 > 3)
    v13 = 0;
  if (!(_DWORD)v9)
    return v13 ^ 0x80000000;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1003F3AE4 + 4 * byte_100468CA8[(v9 - 1)]))();
}

void sub_1003F3B14(_WORD *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_QWORD *)(v7 + 64) > v6)
    v6 = *(_QWORD *)(v7 + 64);
  v8 = *(unsigned __int8 *)(v7 + 80) | *(unsigned __int8 *)(v5 + 80);
  v9 = v6 + ((v8 + 8) & ~v8) + 1;
  if (a3 < 0)
  {
    if (v9 <= 3)
    {
      v11 = (a3 - 0x7FFFFFFF + ~(-1 << (8 * v9))) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        v10 = &dword_100000004;
        if (a2 < 0)
          goto LABEL_14;
      }
      else
      {
        if (v11 >= 0xFF)
          v10 = 2;
        else
          v10 = v11 != 0;
        if (a2 < 0)
          goto LABEL_14;
      }
    }
    else
    {
      v10 = &_mh_execute_header.magic + 1;
      if (a2 < 0)
      {
LABEL_14:
        v12 = a2 ^ 0x80000000;
        if (v9 < 4)
        {
          if ((_DWORD)v9)
          {
            v13 = a2 & ~(-1 << (8 * v9));
            bzero(a1, v9);
            if ((_DWORD)v9 == 3)
            {
              *a1 = v13;
              *((_BYTE *)a1 + 2) = BYTE2(v13);
            }
            else if ((_DWORD)v9 == 2)
            {
              *a1 = v13;
            }
            else
            {
              *(_BYTE *)a1 = v13;
            }
          }
        }
        else
        {
          bzero(a1, v9);
          *(_DWORD *)a1 = v12;
        }
        __asm { BR              X10 }
      }
    }
  }
  else
  {
    v10 = 0;
    if (a2 < 0)
      goto LABEL_14;
  }
  __asm { BR              X10 }
}

void sub_1003F3CC0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1003F3C70);
}

void sub_1003F3CC8()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1003F3C70);
}

void sub_1003F3CD0()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1003F3C70);
}

uint64_t sub_1003F3CDC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 0, 2, v4);
    return 0;
  }
  return result;
}

uint64_t *sub_1003F3D50(uint64_t *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
LABEL_18:
    swift_retain(v8);
    return v3;
  }
  v9 = *((unsigned __int8 *)a2 + v5);
  if (v9 >= 2)
  {
    if (v5 <= 3)
      v10 = v5;
    else
      v10 = 4;
    __asm { BR              X14 }
  }
  if (v9 == 1)
  {
    v8 = *a2;
    *v3 = *a2;
    *((_BYTE *)v3 + v5) = 1;
    goto LABEL_18;
  }
  (*(void (**)(uint64_t *))(v4 + 16))(__dst);
  *((_BYTE *)v3 + v5) = 0;
  return v3;
}

uint64_t sub_1003F3E78(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)
      return swift_release(*a1);
    else
      return (*(uint64_t (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    return ((uint64_t (*)(void))((char *)&loc_1003F3EC0 + 4 * byte_100468D25[v5]))();
  }
}

_BYTE *sub_1003F3F20(_BYTE *__dst, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    *(_QWORD *)__dst = *a2;
    __dst[v5] = 1;
    swift_retain(v8);
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_1003F400C(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = __dst[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release(*(_QWORD *)__dst);
    else
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = __src[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *(_QWORD *)__src;
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v7] = 1;
      swift_retain(v12);
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

_BYTE *sub_1003F41B8(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *(_QWORD *)__dst = *a2;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

unsigned __int8 *sub_1003F42A0(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = __dst[v7];
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      swift_release(*(_QWORD *)__dst);
    else
      (*(void (**)(unsigned __int8 *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = __src[v7];
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *(_QWORD *)__dst = *(_QWORD *)__src;
      __dst[v7] = 1;
    }
    else
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
      __dst[v7] = 0;
    }
  }
  return __dst;
}

uint64_t sub_1003F4448(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1003F450C + 4 * byte_100468D48[(v4 - 1)]))();
}

void sub_1003F4558(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1003F4700(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1003F4748 + 4 * byte_100468D56[v3]))();
}

void sub_1003F4790(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for PartialIteration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PartialIteration);
}

uint64_t sub_1003F4864@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v25 = a1;
  v26 = a3;
  v5 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(a2 + 32));
  v7 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v25 - v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(v3, a2);
  v11 = sub_10001537C(&qword_1005D7A90);
  v12 = type metadata accessor for Result(0, v7, v11, &protocol self-conformance witness table for Error);
  WitnessTable = swift_getWitnessTable(&unk_1004692B0, v12);
  v14 = v27;
  sub_1004033A4(v12, WitnessTable);
  if (v14)
  {
    v15 = swift_storeEnumTagMultiPayload(v3, a2, 2);
    return swift_willThrow(v15);
  }
  else
  {
    v27 = v3;
    v17 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, AssociatedTypeWitness);
    v19 = v26;
    if (v18 == 1)
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      v20 = 1;
      v21 = 2;
      v22 = v27;
    }
    else
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v26, v10, AssociatedTypeWitness);
      v23 = v5;
      v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16);
      v22 = v27;
      v24(v27, v25, v23);
      v21 = 0;
      v20 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, a2, v21);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v19, v20, 1, AssociatedTypeWitness);
  }
}

uint64_t sub_1003F4A48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v5 = (uint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v3 + 32))(v5, v1, a1);
  if (swift_getEnumCaseMultiPayload(v5, a1) == 1)
  {
    v6 = *v5;
    Task.cancel()();
    swift_release(v6);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v3 + 8))(v5, a1);
  }
  return swift_storeEnumTagMultiPayload(v1, a1, 2);
}

uint64_t sub_1003F4B10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, a1);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
      return 0x6C616E696D726574;
    v6 = 0x676E69646E6570;
  }
  else
  {
    v6 = 1701602409;
  }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return v6;
}

uint64_t static Task.select<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[9] = a5;
  v6[10] = a6;
  v6[7] = a3;
  v6[8] = a4;
  v6[5] = a1;
  v6[6] = a2;
  return swift_task_switch(sub_1003F4C10, 0, 0);
}

uint64_t sub_1003F4C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v16;
  char *v17;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  v16 = *(_QWORD *)(v0 + 40);
  v6 = type metadata accessor for Task(0, v5, v4, v1);
  v7 = static Array._allocateUninitialized(_:)(0, v6);
  *(_BYTE *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = v7;
  v8 = type metadata accessor for TaskSelectState(0, v5, v4, v1);
  v11 = sub_100403350(v0 + 16, v8, v9, v10);
  *(_QWORD *)(v0 + 88) = v11;
  swift_bridgeObjectRelease(v7);
  v12 = (_QWORD *)swift_task_alloc(64);
  *(_QWORD *)(v0 + 96) = v12;
  v12[2] = v5;
  v12[3] = v4;
  v12[4] = v3;
  v12[5] = v1;
  v12[6] = v2;
  v12[7] = v11;
  v13 = (_QWORD *)swift_task_alloc(80);
  *(_QWORD *)(v0 + 104) = v13;
  v13[2] = v5;
  v13[3] = v4;
  v13[4] = v3;
  v13[5] = v1;
  v13[6] = v2;
  v13[7] = v16;
  v13[8] = v11;
  v17 = (char *)&dword_1005DD540 + dword_1005DD540;
  v14 = (_QWORD *)swift_task_alloc(unk_1005DD544);
  *(_QWORD *)(v0 + 112) = v14;
  *v14 = v0;
  v14[1] = sub_1003F4D60;
  return ((uint64_t (*)(uint64_t, uint64_t (*)(), _QWORD *, void *, _QWORD *, uint64_t))v17)(v0 + 32, sub_1003F5CD8, v12, &unk_1005DD538, v13, v6);
}

uint64_t sub_1003F4D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003F4DC8, 0, 0);
}

uint64_t sub_1003F4DC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_1003F4DFC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_QWORD *)(v2 + 8);
  if (v4)
  {
    v8 = a1;
    v9 = v4;
    v5 = type metadata accessor for Task(255, a2[2], a2[3], a2[4]);
    v6 = type metadata accessor for Array(0, v5);
    swift_retain(v3);
    Array.append(_:)(&v8, v6);
    v3 = 0;
    *(_QWORD *)(v2 + 8) = v9;
  }
  else
  {
    swift_retain(a1);
  }
  return v3;
}

uint64_t sub_1003F4E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Bool IsNativeType;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v19[9];
  uint64_t v20;

  v19[2] = a2;
  v19[3] = a3;
  v19[4] = a4;
  v19[5] = a5;
  v19[6] = a6;
  type metadata accessor for TaskSelectState(0, a2, a3, a5);
  v10 = type metadata accessor for Task(255, a2, a3, a5);
  type metadata accessor for Array(0, v10);
  sub_10040328C((void (*)(uint64_t))sub_1003F6050, (uint64_t)v19, a1);
  v11 = v20;
  if (Array.endIndex.getter(v20, v10))
  {
    v12 = 4;
    do
    {
      v13 = v12 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)(v12 - 4, IsNativeType, v11, v10);
      if (IsNativeType)
      {
        v15 = *(_QWORD *)(v11 + 8 * v12);
        swift_retain(v15);
        v16 = __OFADD__(v13, 1);
        v17 = v12 - 3;
        if (v16)
          goto LABEL_9;
      }
      else
      {
        v15 = _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, v11, v10);
        v16 = __OFADD__(v13, 1);
        v17 = v12 - 3;
        if (v16)
        {
LABEL_9:
          __break(1u);
          return swift_bridgeObjectRelease(v11);
        }
      }
      Task.cancel()();
      swift_release(v15);
      ++v12;
    }
    while (v17 != Array.endIndex.getter(v11, v10));
  }
  return swift_bridgeObjectRelease(v11);
}

uint64_t sub_1003F4FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = v7;
  }
  else
  {
    v9 = type metadata accessor for Task(0, a2, a3, a4);
    v8 = static Array._allocateUninitialized(_:)(0, v9);
    v7 = 0;
  }
  *a5 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  swift_bridgeObjectRetain(v7);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_1003F5068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a3;
  v8[5] = a4;
  v8[2] = a1;
  v8[3] = a2;
  return swift_task_switch(sub_1003F508C, 0, 0);
}

uint64_t sub_1003F508C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  _QWORD *v4;
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = swift_task_alloc(80);
  *(_QWORD *)(v0 + 80) = v2;
  v6 = *(_OWORD *)(v0 + 64);
  v7 = *(_OWORD *)(v0 + 48);
  v3 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v7;
  *(_OWORD *)(v2 + 40) = v6;
  *(_OWORD *)(v2 + 56) = v3;
  v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005DDA90 + dword_1005DDA90);
  v4 = (_QWORD *)swift_task_alloc(unk_1005DDA94);
  *(_QWORD *)(v0 + 88) = v4;
  type metadata accessor for Task(0, v1, v7, v6);
  *v4 = v0;
  v4[1] = sub_1003F5158;
  return v8(*(_QWORD *)(v0 + 16), 0, 0, (uint64_t)sub_1003F5EC4, v2);
}

uint64_t sub_1003F5158()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 80);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1003F51AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedTypeWitness;
  uint64_t v20;
  char *v21;
  uint64_t AssociatedConformanceWitness;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  char *v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t ObjectType;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[4];
  uint64_t v69;

  v66 = a7;
  v67 = a3;
  v62 = a1;
  v13 = sub_100012E18(&qword_1005D4680);
  v14 = __chkstk_darwin(v13);
  v61 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a8);
  v53 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v21 = (char *)&v53 - v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a2, a6);
  dispatch thunk of Sequence.makeIterator()(a6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a8, a6, AssociatedTypeWitness, &protocol requirements base descriptor for Sequence, &associated conformance descriptor for Sequence.Sequence.Iterator: IteratorProtocol);
  v63 = v21;
  v64 = AssociatedTypeWitness;
  v60 = AssociatedConformanceWitness;
  dispatch thunk of IteratorProtocol.next()(AssociatedTypeWitness, AssociatedConformanceWitness);
  v23 = v69;
  if (v69)
  {
    v24 = type metadata accessor for TaskPriority(0);
    v25 = 0;
    v58 = *(_QWORD *)(v24 - 8);
    v59 = a6;
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v58 + 56);
    v56 = (char *)&type metadata for () + 8;
    v57 = v26;
    v54 = v24;
    v55 = a8;
    do
    {
      v65 = v25;
      v27 = v61;
      v57(v61, 1, 1, v24);
      v28 = (_QWORD *)swift_allocObject(&unk_10056FDC0, 96, 7);
      v28[2] = 0;
      v29 = v28 + 2;
      v28[3] = 0;
      v28[4] = a4;
      v30 = a4;
      v31 = a5;
      v28[5] = a5;
      v28[6] = a6;
      v32 = (uint64_t)v27;
      v28[7] = v66;
      v28[8] = a8;
      v33 = v67;
      v28[9] = v23;
      v28[10] = v33;
      v28[11] = v62;
      v34 = v58;
      LODWORD(v27) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 48))(v27, 1, v24);
      swift_retain(v23);
      v35 = swift_retain(v33);
      if ((_DWORD)v27 == 1)
      {
        sub_100343B2C(v32);
        v36 = 0;
      }
      else
      {
        v37 = TaskPriority.rawValue.getter(v35);
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v32, v24);
        v36 = v37;
      }
      a5 = v31;
      a4 = v30;
      v25 = v65;
      v38 = v66;
      v39 = *v29;
      if (*v29)
      {
        v40 = v28[3];
        ObjectType = swift_getObjectType();
        v42 = swift_unknownObjectRetain(v39);
        v43 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v40, v42);
        v45 = v44;
        swift_unknownObjectRelease(v39, v44);
      }
      else
      {
        v43 = 0;
        v45 = 0;
      }
      v46 = swift_allocObject(&unk_10056FDE8, 32, 7);
      *(_QWORD *)(v46 + 16) = &unk_1005DD5E8;
      *(_QWORD *)(v46 + 24) = v28;
      if (v45 | v43)
      {
        v68[0] = 0;
        v68[1] = 0;
        v47 = v68;
        v68[2] = v43;
        v68[3] = v45;
      }
      else
      {
        v47 = 0;
      }
      a8 = v55;
      v48 = swift_task_create(v36 | 0x1C00, v47, v56, &unk_1005D7DD8, v46);
      swift_release(v48);
      __chkstk_darwin(v49);
      *(&v53 - 6) = a4;
      *(&v53 - 5) = a5;
      a6 = v59;
      *(&v53 - 4) = v59;
      *(&v53 - 3) = v38;
      *(&v53 - 2) = a8;
      *(&v53 - 1) = v23;
      type metadata accessor for TaskSelectState(0, a4, a5, v38);
      v50 = type metadata accessor for Task(255, a4, a5, v38);
      type metadata accessor for Optional(0, v50);
      sub_10040328C((void (*)(uint64_t))sub_1003F5FE0, (uint64_t)(&v53 - 8), v67);
      v51 = v69;
      if (v69)
      {
        Task.cancel()();
        swift_release(v51);
      }
      swift_release(v23);
      v24 = v54;
      dispatch thunk of IteratorProtocol.next()(v64, v60);
      v23 = v69;
    }
    while (v69);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v63, v64);
}

uint64_t sub_1003F55C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8[9] = v18;
  v8[10] = v19;
  v8[7] = a8;
  v8[8] = v17;
  v8[5] = a6;
  v8[6] = a7;
  v8[3] = a4;
  v8[4] = a5;
  v12 = ((uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Result)(0, a7, a8);
  v8[11] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v8[12] = v13;
  v14 = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8[13] = v14;
  v15 = (_QWORD *)swift_task_alloc(async function pointer to Task.result.getter[1]);
  v8[14] = v15;
  *v15 = v8;
  v15[1] = sub_1003F568C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))Task.result.getter)(v14, a4, a7, a8);
}

uint64_t sub_1003F568C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch(sub_1003F56FC, 0, 0);
}

uint64_t sub_1003F56FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(64);
  v4 = *(_OWORD *)(v0 + 56);
  v5 = *(_OWORD *)(v0 + 72);
  *(_QWORD *)(v3 + 16) = v1;
  *(_OWORD *)(v3 + 24) = v4;
  *(_OWORD *)(v3 + 40) = v5;
  type metadata accessor for TaskSelectState(0, v1, v4, v5);
  sub_10040328C((void (*)(uint64_t))sub_1003F6038, v3, v2);
  swift_task_dealloc(v3);
  if (*(_BYTE *)(v0 + 120) == 1)
  {
    v6 = *(_QWORD *)(v0 + 24);
    *(_QWORD *)(v0 + 16) = v6;
    v7 = *(_QWORD *)(v0 + 40);
    v8 = type metadata accessor for Task(0, *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 72));
    swift_retain(v6);
    sub_10040083C(v0 + 16, v7, v8);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F57F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  char *v15;

  v15 = (char *)&dword_1005DD5D0 + dword_1005DD5D0;
  v13 = (_QWORD *)swift_task_alloc(unk_1005DD5D4);
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_100130768;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v15)(a1, a4, a5, a2, a3, 0, 0, a6);
}

uint64_t static Task.select(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;

  *(_QWORD *)(v4 + 16) = a1;
  v8 = (_QWORD *)swift_task_alloc(dword_1005DD52C);
  *(_QWORD *)(v4 + 24) = v8;
  v9 = type metadata accessor for Task(255, a2, a3, a4);
  v10 = type metadata accessor for Array(0, v9);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v10);
  *v8 = v4;
  v8[1] = sub_1003F5958;
  v8[9] = a4;
  v8[10] = WitnessTable;
  v8[7] = a3;
  v8[8] = v10;
  v8[5] = v4 + 16;
  v8[6] = a2;
  return swift_task_switch(sub_1003F4C10, 0, 0);
}

uint64_t sub_1003F5958(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_1003F59A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v17;
  _QWORD *v19;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (sub_100403584(2, 18, 0, 0))
  {
    v17 = (_QWORD *)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
    *(_QWORD *)(v8 + 24) = v17;
    *v17 = v8;
    v17[1] = sub_1003F5AE0;
    return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005DD5D8 + dword_1005DD5D8);
    v19 = (_QWORD *)swift_task_alloc(unk_1005DD5DC);
    *(_QWORD *)(v8 + 16) = v19;
    *v19 = v8;
    v19[1] = sub_100130768;
    return v20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1003F5AE0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 24));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1003F5B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t ObjectType;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  if (a6)
  {
    ObjectType = swift_getObjectType();
    v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a7, v10);
    v13 = v12;
  }
  else
  {
    v11 = 0;
    v13 = 0;
  }
  v7[7] = v11;
  v7[8] = v13;
  return swift_task_switch(sub_1003F5B98, v11, v13);
}

uint64_t sub_1003F5B98()
{
  _QWORD *v0;
  int *v1;
  _QWORD *v2;
  uint64_t (*v4)(_QWORD);

  v1 = (int *)v0[3];
  v0[9] = swift_task_addCancellationHandler(v0[5], v0[6]);
  v4 = (uint64_t (*)(_QWORD))((char *)v1 + *v1);
  v2 = (_QWORD *)swift_task_alloc(v1[1]);
  v0[10] = v2;
  *v2 = v0;
  v2[1] = sub_1003F5C04;
  return v4(v0[2]);
}

uint64_t sub_1003F5C04()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  *(_QWORD *)(*v1 + 88) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1003F5C64;
  else
    v4 = sub_1003F5C98;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_1003F5C64()
{
  uint64_t v0;

  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F5C98()
{
  uint64_t v0;

  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for TaskSelectState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TaskSelectState);
}

uint64_t sub_1003F5CD8()
{
  uint64_t *v0;

  return sub_1003F4E90(v0[7], v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1003F5CE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc(dword_1005DD534);
  v6 = *(_OWORD *)(v1 + 56);
  v7 = *(_OWORD *)(v1 + 16);
  v8 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100130768;
  *(_QWORD *)(v5 + 72) = v4;
  *(_OWORD *)(v5 + 56) = v8;
  *(_OWORD *)(v5 + 40) = v7;
  *(_OWORD *)(v5 + 24) = v6;
  *(_QWORD *)(v5 + 16) = a1;
  return swift_task_switch(sub_1003F508C, 0, 0);
}

uint64_t sub_1003F5D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1003F5DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_1003F5DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_1003F5E18(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_1003F5E74(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1003F5EC4(uint64_t a1)
{
  uint64_t *v1;

  return sub_1003F51AC(a1, v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003F5ED8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  swift_unknownObjectRelease(v2[2], a2);
  swift_release(v2[9]);
  swift_release(v2[10]);
  return swift_deallocObject(v2, 96, 7);
}

uint64_t sub_1003F5F0C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[9];
  v10 = v1[10];
  v9 = v1[11];
  v11 = (_QWORD *)swift_task_alloc(dword_1005DD5E4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100130768;
  return sub_1003F55C0(a1, v6, v7, v8, v10, v9, v4, v5);
}

uint64_t sub_1003F5FBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003F5FE0@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;

  v3 = v1[2];
  v4 = v1[3];
  v5 = v1[5];
  v6 = v1[7];
  v7 = (_QWORD *)type metadata accessor for TaskSelectState(0, v3, v4, v5);
  result = sub_1003F4DFC(v6, v7);
  *a1 = result;
  return result;
}

_BYTE *sub_1003F6038@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (*result & 1) == 0;
  *result = 1;
  return result;
}

uint64_t sub_1003F6050@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;

  return sub_1003F4FF4(a1, v2[2], v2[3], v2[5], a2);
}

uint64_t sub_1003F6074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ObjectType;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v22[4];

  v8 = type metadata accessor for TaskPriority(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_100343B2C(a1);
    v10 = 7168;
    v11 = *(_QWORD *)(a3 + 16);
    if (v11)
    {
LABEL_3:
      v12 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v11);
      v14 = swift_unknownObjectRetain(v11);
      v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v12, v14);
      v17 = v16;
      swift_unknownObjectRelease(v11, v16);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    v10 = v18 | 0x1C00;
    v11 = *(_QWORD *)(a3 + 16);
    if (v11)
      goto LABEL_3;
  }
  v15 = 0;
  v17 = 0;
LABEL_6:
  v19 = (_QWORD *)swift_allocObject(&unk_100570028, 40, 7);
  v19[2] = a4;
  v19[3] = a2;
  v19[4] = a3;
  if (v17 | v15)
  {
    v22[0] = 0;
    v22[1] = 0;
    v20 = v22;
    v22[2] = v15;
    v22[3] = v17;
  }
  else
  {
    v20 = 0;
  }
  return swift_task_create(v10, v20, a4, &unk_1005DD8B0, v19);
}

uint64_t merge<A, B>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _QWORD v23[4];

  v13 = *(_QWORD *)(a4 - 8);
  v14 = __chkstk_darwin(a1);
  v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v14);
  v20 = (char *)v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v18 + 16))(v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a2, a4);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(a7, v20, a3);
  v23[0] = a3;
  v23[1] = a4;
  v23[2] = a5;
  v23[3] = a6;
  v21 = type metadata accessor for AsyncMerge2Sequence(0, (uint64_t)v23);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a7 + *(int *)(v21 + 52), v16, a4);
}

uint64_t sub_1003F62CC@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>)
{
  _BYTE *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a5;
  *a9 = a2;
  a9[1] = a4;
  v26 = a6;
  v27 = a7;
  v28 = a8;
  v14 = &a9[*(int *)(type metadata accessor for Merge2StateMachine(0, (uint64_t)&v25) + 56)];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(v14, a1, AssociatedTypeWitness);
  v25 = a5;
  v26 = a6;
  v27 = a7;
  v28 = a8;
  v16 = type metadata accessor for Merge2StateMachine.Partial(255, (uint64_t)&v25);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a7, a5, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v18 = type metadata accessor for PartialIteration(0, AssociatedTypeWitness, v16, AssociatedConformanceWitness);
  swift_storeEnumTagMultiPayload(v14, v18, 0);
  v19 = swift_getAssociatedTypeWitness(255, a8);
  v20 = swift_getAssociatedConformanceWitness(a8, a6, v19, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v21 = type metadata accessor for PartialIteration(255, v19, v16, v20);
  v22 = &v14[*(int *)(swift_getTupleTypeMetadata2(0, v18, v21, 0, 0) + 48)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v22, a3, v19);
  return swift_storeEnumTagMultiPayload(v22, v21, 0);
}

uint64_t sub_1003F6484(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5[27] = a4;
  v5[28] = v4;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  v7 = a4[5];
  v5[29] = v7;
  v8 = a4[3];
  v5[30] = v8;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v7);
  v5[31] = AssociatedTypeWitness;
  v10 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v5[32] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v5[33] = v11;
  v5[34] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v5[35] = v12;
  v5[36] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_getAssociatedTypeWitness(0, v7);
  v5[37] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[38] = v14;
  v5[39] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001537C(&qword_1005D7A90);
  v16 = type metadata accessor for Result(0, v10, v15, &protocol self-conformance witness table for Error);
  v5[40] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v5[41] = v17;
  v5[42] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a4[4];
  v5[43] = v18;
  v19 = a4[2];
  v5[44] = v19;
  v20 = swift_getAssociatedTypeWitness(255, v18);
  v5[45] = v20;
  v21 = type metadata accessor for Optional(0, v20);
  v5[46] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v5[47] = v22;
  v5[48] = swift_task_alloc((*(_QWORD *)(v22 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *(_QWORD *)(v20 - 8);
  v5[49] = v23;
  v5[50] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = swift_getAssociatedTypeWitness(0, v18);
  v5[51] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v5[52] = v25;
  v5[53] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Result(0, v21, v15, &protocol self-conformance witness table for Error);
  v5[54] = v26;
  v27 = *(_QWORD *)(v26 - 8);
  v5[55] = v27;
  v5[56] = swift_task_alloc((*(_QWORD *)(v27 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5[2] = v19;
  v5[3] = v8;
  v5[4] = v18;
  v5[5] = v7;
  v28 = type metadata accessor for Merge2StateMachine.Partial(0, (uint64_t)(v5 + 2));
  v5[57] = v28;
  v5[58] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v28 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003F671C, 0, 0);
}

uint64_t sub_1003F671C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = v0[44];
  v20 = v0[43];
  v2 = v0[29];
  v3 = v0[30];
  v4 = v0[25];
  v5 = v0[26];
  v6 = type metadata accessor for Task(255, v0[57], &type metadata for Never, &protocol witness table for Never);
  v7 = type metadata accessor for Optional(255, v6);
  v8 = type metadata accessor for _ContiguousArrayStorage(0, v7);
  v9 = swift_allocObject(v8, 48, 7);
  v10 = static Array._adoptStorage(_:count:)(v9, 2);
  *v11 = v4;
  v11[1] = v5;
  v0[23] = sub_100400814(v10, v7);
  v12 = (_QWORD *)swift_task_alloc(48);
  v12[2] = v1;
  v12[3] = v3;
  v12[4] = v20;
  v12[5] = v2;
  v13 = type metadata accessor for Array(0, v7);
  swift_retain(v4);
  swift_retain(v5);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for [A], v13);
  v15 = Sequence.compactMap<A>(_:)(sub_1004007F8, v12, v13, v6, WitnessTable);
  v0[59] = v15;
  v0[60] = 0;
  swift_task_dealloc(v12);
  swift_bridgeObjectRelease(v0[23]);
  v0[22] = v15;
  v16 = (_QWORD *)swift_task_alloc(dword_1005DD52C);
  v0[61] = v16;
  v17 = type metadata accessor for Array(0, v6);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for [A], v17);
  *v16 = v0;
  v16[1] = sub_1003F68C4;
  return static Task.select<A>(_:)((uint64_t)(v0 + 22), v0[57], (uint64_t)&type metadata for Never, v17, (uint64_t)&protocol witness table for Never, v18);
}

uint64_t sub_1003F68C4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 488);
  v5 = *(_QWORD *)(*v1 + 472);
  v6 = *v1;
  *(_QWORD *)(*v1 + 496) = a1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease(v5);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to Task<>.value.getter[1]);
  v3[63] = v7;
  *v7 = v6;
  v7[1] = sub_1003F694C;
  return Task<>.value.getter(v3[58], a1, v3[57]);
}

uint64_t sub_1003F694C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 496);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 504));
  swift_release(v1);
  return swift_task_switch(sub_1003F69A8, 0, 0);
}

uint64_t sub_1003F69A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedConformanceWitness;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(void);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v98;
  uint64_t (*v99)();
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;

  v1 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v124 = *(_QWORD *)(v0 + 216);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v1);
  v128 = *(_QWORD *)(v0 + 480);
  if (EnumCaseMultiPayload == 1)
  {
    v101 = *(_QWORD *)(v0 + 352);
    v103 = *(_QWORD *)(v0 + 408);
    v4 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 320);
    v5 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 304);
    v8 = *(_QWORD *)(v0 + 312);
    v9 = *(_QWORD *)(v0 + 296);
    v110 = *(_QWORD *)(v0 + 240);
    v117 = *(_QWORD *)(v0 + 272);
    v106 = *(_QWORD *)(v0 + 232);
    v100 = *(_QWORD *)(v0 + 344);
    v10 = v2 + *(int *)(swift_getTupleTypeMetadata2(0, v6, v9, 0, 0) + 48);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v4, v2, v6);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v8, v10, v9);
    *(_DWORD *)(v0 + 564) = *(_DWORD *)(v124 + 56);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v100, v101, v103, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
    v12 = type metadata accessor for PartialIteration(255, v103, v1, AssociatedConformanceWitness);
    *(_QWORD *)(v0 + 536) = v12;
    v13 = swift_getAssociatedConformanceWitness(v106, v110, v9, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
    v14 = type metadata accessor for PartialIteration(255, v9, v1, v13);
    swift_getTupleTypeMetadata2(0, v12, v14, 0, 0);
    sub_1003F4864(v8, v14, v117);
    if (v128)
    {
      v15 = (uint64_t *)(v0 + 336);
      v129 = (uint64_t *)(v0 + 328);
      v16 = (uint64_t *)(v0 + 320);
      v17 = (uint64_t *)(v0 + 312);
      v18 = *(_QWORD *)(v0 + 536);
      v19 = (uint64_t *)(v0 + 304);
      v20 = (uint64_t *)(v0 + 296);
LABEL_6:
      v34 = sub_1003F4A48(v18);
      swift_willThrow(v34);
      v35 = *v15;
      v36 = *v16;
      v37 = *v129;
      v38 = *v17;
      v39 = *v20;
      v40 = *v19;
      v41 = *(_QWORD *)(v0 + 464);
      v42 = *(_QWORD *)(v0 + 448);
      v43 = *(_QWORD *)(v0 + 424);
      v44 = *(_QWORD *)(v0 + 400);
      v45 = *(_QWORD *)(v0 + 384);
      v46 = *(_QWORD *)(v0 + 336);
      v112 = *(_QWORD *)(v0 + 312);
      v119 = *(_QWORD *)(v0 + 288);
      v130 = *(_QWORD *)(v0 + 272);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v112);
      swift_task_dealloc(v119);
      swift_task_dealloc(v130);
      v47 = *(uint64_t (**)(void))(v0 + 8);
      return v47();
    }
    v48 = *(_QWORD *)(v0 + 272);
    v49 = *(_QWORD *)(v0 + 280);
    v50 = *(_QWORD *)(v0 + 248);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v48, 1, v50) == 1)
    {
      v51 = *(_QWORD *)(v0 + 224);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 264) + 8))(v48, *(_QWORD *)(v0 + 256));
      if (*(_BYTE *)(v51 + 1) == 1)
      {
        v113 = *(_QWORD *)(v0 + 352);
        v120 = *(_QWORD *)(v0 + 344);
        v52 = *(_QWORD *)(v0 + 328);
        v54 = *(_QWORD *)(v0 + 312);
        v53 = *(_QWORD *)(v0 + 320);
        v56 = *(_QWORD *)(v0 + 296);
        v55 = *(_QWORD *)(v0 + 304);
        v57 = *(_QWORD *)(v0 + 240);
        v104 = *(_QWORD *)(v0 + 232);
        v108 = *(_QWORD *)(v0 + 336);
        v125 = *(_QWORD *)(v0 + 192);
        v131 = v0 + 112;
        sub_1003F4A48(v12);
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v108, v53);
        *(_QWORD *)(v0 + 112) = v113;
        *(_QWORD *)(v0 + 120) = v57;
        *(_QWORD *)(v0 + 128) = v120;
        *(_QWORD *)(v0 + 136) = v104;
LABEL_13:
        v71 = type metadata accessor for Merge2StateMachine.Either(0, v131);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v125, 1, 1, v71);
LABEL_17:
        v89 = *(_QWORD *)(v0 + 448);
        v90 = *(_QWORD *)(v0 + 424);
        v91 = *(_QWORD *)(v0 + 400);
        v92 = *(_QWORD *)(v0 + 384);
        v93 = *(_QWORD *)(v0 + 336);
        v94 = *(_QWORD *)(v0 + 312);
        v95 = *(_QWORD *)(v0 + 288);
        v96 = *(_QWORD *)(v0 + 272);
        swift_task_dealloc(*(_QWORD *)(v0 + 464));
        swift_task_dealloc(v89);
        swift_task_dealloc(v90);
        swift_task_dealloc(v91);
        swift_task_dealloc(v92);
        swift_task_dealloc(v93);
        swift_task_dealloc(v94);
        swift_task_dealloc(v95);
        swift_task_dealloc(v96);
        v47 = *(uint64_t (**)(void))(v0 + 8);
        return v47();
      }
      v98 = (_QWORD *)swift_task_alloc(dword_1005DD5FC);
      v99 = sub_1003F72EC;
      *(_QWORD *)(v0 + 544) = v98;
      goto LABEL_21;
    }
    v72 = *(_QWORD *)(v0 + 336);
    v126 = *(_QWORD *)(v0 + 344);
    v74 = *(_QWORD *)(v0 + 320);
    v73 = *(_QWORD *)(v0 + 328);
    v75 = *(_QWORD *)(v0 + 288);
    v76 = *(_QWORD *)(v0 + 240);
    v115 = *(_QWORD *)(v0 + 232);
    v122 = *(_QWORD *)(v0 + 352);
    v77 = *(_QWORD *)(v0 + 192);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 296));
    (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
    v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 32);
    v78(v75, v48, v50);
    v78(v77, v75, v50);
    *(_QWORD *)(v0 + 144) = v122;
    *(_QWORD *)(v0 + 152) = v76;
    *(_QWORD *)(v0 + 160) = v126;
    *(_QWORD *)(v0 + 168) = v115;
    v79 = type metadata accessor for Merge2StateMachine.Either(0, v0 + 144);
    v80 = v77;
    v81 = v79;
    v82 = 1;
LABEL_16:
    swift_storeEnumTagMultiPayload(v80, v81, v82);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v77, 0, 1, v79);
    goto LABEL_17;
  }
  v22 = *(_QWORD *)(v0 + 440);
  v21 = *(_QWORD *)(v0 + 448);
  v24 = *(_QWORD *)(v0 + 424);
  v23 = *(_QWORD *)(v0 + 432);
  v26 = *(_QWORD *)(v0 + 408);
  v25 = *(_QWORD *)(v0 + 416);
  v111 = *(_QWORD *)(v0 + 352);
  v118 = *(_QWORD *)(v0 + 384);
  v107 = *(_QWORD *)(v0 + 344);
  v27 = v2 + *(int *)(swift_getTupleTypeMetadata2(0, v23, v26, 0, 0) + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32))(v21, v2, v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 32))(v24, v27, v26);
  *(_DWORD *)(v0 + 560) = *(_DWORD *)(v124 + 56);
  v28 = swift_getAssociatedConformanceWitness(v107, v111, v26, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v29 = type metadata accessor for PartialIteration(0, v26, v1, v28);
  *(_QWORD *)(v0 + 512) = v29;
  sub_1003F4864(v24, v29, v118);
  if (v128)
  {
    v129 = (uint64_t *)(v0 + 440);
    v16 = (uint64_t *)(v0 + 432);
    v17 = (uint64_t *)(v0 + 424);
    v19 = (uint64_t *)(v0 + 416);
    v20 = (uint64_t *)(v0 + 408);
    v30 = *(_QWORD *)(v0 + 512);
    v31 = *(_QWORD *)(v0 + 456);
    v32 = *(_QWORD *)(v0 + 296);
    v33 = swift_getAssociatedConformanceWitness(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), v32, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
    v18 = type metadata accessor for PartialIteration(255, v32, v31, v33);
    v15 = (uint64_t *)(v0 + 448);
    swift_getTupleTypeMetadata2(0, v30, v18, 0, 0);
    goto LABEL_6;
  }
  v58 = *(_QWORD *)(v0 + 384);
  v59 = *(_QWORD *)(v0 + 392);
  v60 = *(_QWORD *)(v0 + 360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v60) != 1)
  {
    v84 = *(_QWORD *)(v0 + 440);
    v83 = *(_QWORD *)(v0 + 448);
    v85 = *(_QWORD *)(v0 + 432);
    v86 = *(_QWORD *)(v0 + 400);
    v127 = *(_QWORD *)(v0 + 344);
    v87 = *(_QWORD *)(v0 + 240);
    v116 = *(_QWORD *)(v0 + 232);
    v123 = *(_QWORD *)(v0 + 352);
    v77 = *(_QWORD *)(v0 + 192);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 416) + 8))(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 408));
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v83, v85);
    v88 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32);
    v88(v86, v58, v60);
    v88(v77, v86, v60);
    *(_QWORD *)(v0 + 48) = v123;
    *(_QWORD *)(v0 + 56) = v87;
    *(_QWORD *)(v0 + 64) = v127;
    *(_QWORD *)(v0 + 72) = v116;
    v79 = type metadata accessor for Merge2StateMachine.Either(0, v0 + 48);
    v80 = v77;
    v81 = v79;
    v82 = 0;
    goto LABEL_16;
  }
  v61 = *(_BYTE **)(v0 + 224);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 376) + 8))(v58, *(_QWORD *)(v0 + 368));
  if (*v61 == 1)
  {
    v62 = *(_QWORD *)(v0 + 456);
    v63 = *(_QWORD *)(v0 + 424);
    v114 = *(_QWORD *)(v0 + 432);
    v121 = *(_QWORD *)(v0 + 448);
    v65 = *(_QWORD *)(v0 + 408);
    v64 = *(_QWORD *)(v0 + 416);
    v102 = *(_QWORD *)(v0 + 440);
    v105 = *(_QWORD *)(v0 + 352);
    v109 = *(_QWORD *)(v0 + 344);
    v66 = *(_QWORD *)(v0 + 296);
    v68 = *(_QWORD *)(v0 + 232);
    v67 = *(_QWORD *)(v0 + 240);
    v125 = *(_QWORD *)(v0 + 192);
    v131 = v0 + 80;
    v69 = swift_getAssociatedConformanceWitness(v68, v67, v66, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
    v70 = type metadata accessor for PartialIteration(255, v66, v62, v69);
    swift_getTupleTypeMetadata2(0, v29, v70, 0, 0);
    sub_1003F4A48(v70);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
    (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v121, v114);
    *(_QWORD *)(v0 + 80) = v105;
    *(_QWORD *)(v0 + 88) = v67;
    *(_QWORD *)(v0 + 96) = v109;
    *(_QWORD *)(v0 + 104) = v68;
    goto LABEL_13;
  }
  v98 = (_QWORD *)swift_task_alloc(dword_1005DD5FC);
  v99 = sub_1003F71B8;
  *(_QWORD *)(v0 + 520) = v98;
LABEL_21:
  *v98 = v0;
  v98[1] = v99;
  return sub_1003F7678(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 216));
}

uint64_t sub_1003F71B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  *(_QWORD *)(*(_QWORD *)v1 + 528) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003F7420;
  else
    v3 = sub_1003F721C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003F721C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 440);
  v1 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 432);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 416) + 8))(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 408));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F72EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003F757C;
  else
    v3 = sub_1003F7350;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003F7350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 328);
  v1 = *(_QWORD *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 320);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 304) + 8))(*(_QWORD *)(v0 + 312), *(_QWORD *)(v0 + 296));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 448);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 400);
  v7 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 336);
  v9 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 288);
  v11 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F7420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 512);
  v2 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 296);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240), v3, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v5 = type metadata accessor for PartialIteration(255, v3, v2, AssociatedConformanceWitness);
  swift_getTupleTypeMetadata2(0, v1, v5, 0, 0);
  v6 = sub_1003F4A48(v5);
  swift_willThrow(v6);
  v7 = *(_QWORD *)(v0 + 440);
  v8 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 424);
  v9 = *(_QWORD *)(v0 + 432);
  v11 = *(_QWORD *)(v0 + 464);
  v12 = *(_QWORD *)(v0 + 400);
  v13 = *(_QWORD *)(v0 + 384);
  v14 = *(_QWORD *)(v0 + 336);
  v15 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 288);
  v18 = *(_QWORD *)(v0 + 272);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 416) + 8))(v10, *(_QWORD *)(v0 + 408));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F757C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = sub_1003F4A48(*(_QWORD *)(v0 + 536));
  swift_willThrow(v1);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 424);
  v9 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 384);
  v12 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 272);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 304) + 8))(v5, *(_QWORD *)(v0 + 296));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F7678(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t TupleTypeMetadata2;
  unint64_t v29;

  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  v5 = a2[5];
  v3[33] = v5;
  v6 = a2[3];
  v3[34] = v6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v5);
  v3[35] = AssociatedTypeWitness;
  v8 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v3[36] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[37] = v9;
  v3[38] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3[39] = v10;
  v3[40] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2[4];
  v3[41] = v11;
  v12 = a2[2];
  v3[42] = v12;
  v13 = swift_getAssociatedTypeWitness(255, v11);
  v3[43] = v13;
  v14 = type metadata accessor for Optional(0, v13);
  v3[44] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[45] = v15;
  v3[46] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v13 - 8);
  v3[47] = v16;
  v3[48] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness(0, v5);
  v3[49] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[50] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[51] = swift_task_alloc(v19);
  v3[52] = swift_task_alloc(v19);
  v3[53] = swift_task_alloc(v19);
  v20 = swift_getAssociatedTypeWitness(0, v11);
  v3[54] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v3[55] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[56] = swift_task_alloc(v22);
  v3[57] = swift_task_alloc(v22);
  v3[58] = swift_task_alloc(v22);
  v3[2] = v12;
  v3[3] = v6;
  v3[4] = v11;
  v3[5] = v5;
  v23 = type metadata accessor for Merge2StateMachine.Partial(255, (uint64_t)(v3 + 2));
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v11, v12, v20, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v3[59] = AssociatedConformanceWitness;
  v25 = type metadata accessor for PartialIteration(255, v20, v23, AssociatedConformanceWitness);
  v3[60] = v25;
  v26 = swift_getAssociatedConformanceWitness(v5, v6, v17, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v3[61] = v26;
  v27 = type metadata accessor for PartialIteration(255, v17, v23, v26);
  v3[62] = v27;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v25, v27, 0, 0);
  v3[63] = TupleTypeMetadata2;
  v29 = (*(_QWORD *)(*(_QWORD *)(TupleTypeMetadata2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[64] = swift_task_alloc(v29);
  v3[65] = swift_task_alloc(v29);
  return swift_task_switch(sub_1003F7964, 0, 0);
}

uint64_t sub_1003F7964(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  int EnumCaseMultiPayload;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t (*v45)();
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t *, uint64_t);
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t *, uint64_t);
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t *, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t);
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, uint64_t *, uint64_t);
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;

  v2 = *(_QWORD *)(v1 + 248);
  v3 = *(_QWORD *)(v1 + 256);
  v4 = static Task<>.isCancelled.getter(a1);
  v5 = *(int *)(v2 + 56);
  *(_DWORD *)(v1 + 752) = v5;
  v6 = (uint64_t *)(v3 + v5);
  if ((v4 & 1) != 0)
  {
    v7 = *(_QWORD *)(v1 + 496);
    v9 = *(_QWORD *)(v1 + 328);
    v8 = *(_QWORD *)(v1 + 336);
    v11 = *(_QWORD *)(v1 + 264);
    v10 = *(_QWORD *)(v1 + 272);
    v12 = *(_QWORD *)(v1 + 240);
    sub_1003F4A48(*(_QWORD *)(v1 + 480));
    sub_1003F4A48(v7);
    *(_QWORD *)(v1 + 208) = v8;
    *(_QWORD *)(v1 + 216) = v10;
    *(_QWORD *)(v1 + 224) = v9;
    *(_QWORD *)(v1 + 232) = v11;
    v13 = type metadata accessor for Merge2StateMachine.Either(0, v1 + 208);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
LABEL_3:
    v14 = *(_QWORD *)(v1 + 512);
    v16 = *(_QWORD *)(v1 + 456);
    v15 = *(_QWORD *)(v1 + 464);
    v17 = *(_QWORD *)(v1 + 448);
    v19 = *(_QWORD *)(v1 + 416);
    v18 = *(_QWORD *)(v1 + 424);
    v20 = *(_QWORD *)(v1 + 408);
    v21 = *(_QWORD *)(v1 + 384);
    v22 = *(_QWORD *)(v1 + 368);
    v107 = *(_QWORD *)(v1 + 320);
    v111 = *(_QWORD *)(v1 + 304);
    swift_task_dealloc(*(_QWORD *)(v1 + 520));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v107);
    swift_task_dealloc(v111);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v24 = *(_QWORD *)(v1 + 520);
  v25 = *(_QWORD *)(v1 + 504);
  v26 = *(_QWORD *)(v1 + 512);
  v27 = *(_QWORD *)(v1 + 496);
  v28 = *(_QWORD *)(v1 + 480);
  v29 = *(int *)(v25 + 48);
  *(_DWORD *)(v1 + 756) = v29;
  v30 = v24 + v29;
  v31 = (uint64_t *)((char *)v6 + v29);
  v32 = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(v1 + 528) = v32;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v32 + 16))(v24, v6, v28);
  v33 = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(v1 + 536) = v33;
  v112 = v31;
  v34 = v31;
  v35 = v33;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v33 + 16))(v30, v34, v27);
  v36 = (uint64_t *)(v26 + *(int *)(v25 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v26, v24, v28);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v35 + 32))(v36, v30, v27);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v28);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v38 = *(uint64_t **)(v1 + 512);
      v39 = *(_QWORD *)(v1 + 496);
      v40 = *v38;
      *(_QWORD *)(v1 + 632) = *v38;
      v41 = swift_getEnumCaseMultiPayload(v36, v39);
      if (v41)
      {
        if (v41 != 1)
        {
          v72 = dword_1005DD894;
          swift_retain(v40);
          v73 = (_QWORD *)swift_task_alloc(v72);
          *(_QWORD *)(v1 + 688) = v73;
          *v73 = v1;
          v73[1] = sub_1003F89E0;
          v59 = *(_QWORD **)(v1 + 248);
          v60 = *(_QWORD *)(v1 + 240);
          v61 = v40;
          v66 = 0;
          return sub_1003F6484(v60, v61, v66, v59);
        }
        v42 = *v36;
        *(_QWORD *)(v1 + 664) = v42;
        v43 = dword_1005DD894;
        swift_retain(v40);
        swift_retain(v42);
        v44 = (_QWORD *)swift_task_alloc(v43);
        v45 = sub_1003F8880;
        *(_QWORD *)(v1 + 672) = v44;
      }
      else
      {
        v67 = *(_QWORD *)(v1 + 416);
        v68 = *(_QWORD *)(v1 + 336);
        v105 = *(_QWORD *)(v1 + 328);
        v109 = *(_QWORD *)(v1 + 480);
        v69 = *(_QWORD *)(v1 + 272);
        v102 = *(_QWORD *)(v1 + 264);
        (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)(v1 + 400) + 32))(v67, v36, *(_QWORD *)(v1 + 392));
        v42 = sub_100400330(v67, v68, v69, v105, v102);
        *(_QWORD *)(v1 + 640) = v42;
        (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v6, v109);
        *v6 = v40;
        swift_storeEnumTagMultiPayload(v6, v109, 1);
        v70 = *(void (**)(uint64_t *, uint64_t))(v35 + 8);
        swift_retain(v40);
        v70(v112, v39);
        *v112 = v42;
        swift_storeEnumTagMultiPayload(v112, v39, 1);
        v71 = dword_1005DD894;
        swift_retain(v40);
        swift_retain(v42);
        v44 = (_QWORD *)swift_task_alloc(v71);
        v45 = sub_1003F8714;
        *(_QWORD *)(v1 + 648) = v44;
      }
      *v44 = v1;
      v44[1] = v45;
      v59 = *(_QWORD **)(v1 + 248);
      v60 = *(_QWORD *)(v1 + 240);
      v61 = v40;
LABEL_17:
      v66 = v42;
      return sub_1003F6484(v60, v61, v66, v59);
    }
    v62 = swift_getEnumCaseMultiPayload(v36, *(_QWORD *)(v1 + 496));
    if (v62)
    {
      if (v62 != 1)
      {
        v95 = *(_QWORD *)(v1 + 328);
        v97 = *(_QWORD *)(v1 + 264);
        v96 = *(_QWORD *)(v1 + 272);
        v98 = *(_QWORD *)(v1 + 240);
        *(_QWORD *)(v1 + 48) = *(_QWORD *)(v1 + 336);
        *(_QWORD *)(v1 + 56) = v96;
        *(_QWORD *)(v1 + 64) = v95;
        *(_QWORD *)(v1 + 72) = v97;
        v99 = type metadata accessor for Merge2StateMachine.Either(0, v1 + 48);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v98, 1, 1, v99);
        goto LABEL_3;
      }
      v63 = *v36;
      *(_QWORD *)(v1 + 728) = *v36;
      v64 = dword_1005DD894;
      swift_retain(v63);
      v65 = (_QWORD *)swift_task_alloc(v64);
      *(_QWORD *)(v1 + 736) = v65;
      *v65 = v1;
      v65[1] = sub_1003F8E88;
      v59 = *(_QWORD **)(v1 + 248);
      v60 = *(_QWORD *)(v1 + 240);
      v61 = 0;
      v66 = v63;
      return sub_1003F6484(v60, v61, v66, v59);
    }
    v91 = *(_QWORD *)(v1 + 408);
    v92 = *(_QWORD *)(v1 + 392);
    v93 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v1 + 400) + 32);
    *(_QWORD *)(v1 + 704) = v93;
    v93(v91, v36, v92);
    v94 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v1 + 712) = v94;
    *v94 = v1;
    v94[1] = sub_1003F8B28;
    v88 = *(_QWORD *)(v1 + 488);
    v89 = *(_QWORD *)(v1 + 392);
    v90 = *(_QWORD *)(v1 + 304);
  }
  else
  {
    v46 = *(_QWORD *)(v1 + 496);
    v47 = swift_getEnumCaseMultiPayload(v36, v46);
    if (!v47)
    {
      v74 = *(_QWORD *)(v1 + 464);
      v75 = *(_QWORD *)(v1 + 424);
      v100 = *(_QWORD *)(v1 + 400);
      v101 = *(_QWORD *)(v1 + 392);
      v103 = *(_QWORD *)(v1 + 336);
      v106 = *(_QWORD *)(v1 + 328);
      v110 = *(_QWORD *)(v1 + 480);
      v76 = *(_QWORD *)(v1 + 264);
      v77 = *(_QWORD *)(v1 + 272);
      (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v1 + 440) + 32))(v74, *(_QWORD *)(v1 + 512), *(_QWORD *)(v1 + 432));
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(v100 + 32))(v75, v36, v101);
      v78 = sub_1004001A8(v74, v103, v77, v106, v76);
      *(_QWORD *)(v1 + 544) = v78;
      v79 = sub_100400330(v75, v103, v77, v106, v76);
      *(_QWORD *)(v1 + 552) = v79;
      (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v6, v110);
      *v6 = v78;
      swift_storeEnumTagMultiPayload(v6, v110, 1);
      v80 = *(void (**)(uint64_t *, uint64_t))(v35 + 8);
      swift_retain(v78);
      v80(v112, v46);
      *v112 = v79;
      swift_storeEnumTagMultiPayload(v112, v46, 1);
      v81 = dword_1005DD894;
      swift_retain(v78);
      swift_retain(v79);
      v82 = (_QWORD *)swift_task_alloc(v81);
      *(_QWORD *)(v1 + 560) = v82;
      *v82 = v1;
      v82[1] = sub_1003F80A8;
      v59 = *(_QWORD **)(v1 + 248);
      v60 = *(_QWORD *)(v1 + 240);
      v61 = v78;
      v66 = v79;
      return sub_1003F6484(v60, v61, v66, v59);
    }
    if (v47 == 1)
    {
      v48 = *(_QWORD *)(v1 + 512);
      v49 = *(_QWORD *)(v1 + 456);
      v50 = *(_QWORD *)(v1 + 432);
      v51 = *(_QWORD *)(v1 + 440);
      v52 = *(_QWORD *)(v1 + 336);
      v104 = *(_QWORD *)(v1 + 328);
      v108 = *(_QWORD *)(v1 + 480);
      v53 = *(_QWORD *)(v1 + 264);
      v54 = *(_QWORD *)(v1 + 272);
      v42 = *v36;
      *(_QWORD *)(v1 + 576) = v42;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32))(v49, v48, v50);
      v55 = sub_1004001A8(v49, v52, v54, v104, v53);
      *(_QWORD *)(v1 + 584) = v55;
      (*(void (**)(uint64_t *, uint64_t))(v32 + 8))(v6, v108);
      *v6 = v55;
      swift_storeEnumTagMultiPayload(v6, v108, 1);
      v56 = *(void (**)(uint64_t *, uint64_t))(v35 + 8);
      swift_retain(v55);
      v56(v112, v46);
      *v112 = v42;
      swift_storeEnumTagMultiPayload(v112, v46, 1);
      v57 = dword_1005DD894;
      swift_retain(v55);
      swift_retain(v42);
      v58 = (_QWORD *)swift_task_alloc(v57);
      *(_QWORD *)(v1 + 592) = v58;
      *v58 = v1;
      v58[1] = sub_1003F822C;
      v59 = *(_QWORD **)(v1 + 248);
      v60 = *(_QWORD *)(v1 + 240);
      v61 = v55;
      goto LABEL_17;
    }
    v83 = *(_QWORD *)(v1 + 512);
    v84 = *(_QWORD *)(v1 + 448);
    v85 = *(_QWORD *)(v1 + 432);
    v86 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 440) + 32);
    *(_QWORD *)(v1 + 608) = v86;
    v86(v84, v83, v85);
    v87 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v1 + 616) = v87;
    *v87 = v1;
    v87[1] = sub_1003F8398;
    v88 = *(_QWORD *)(v1 + 472);
    v89 = *(_QWORD *)(v1 + 432);
    v90 = *(_QWORD *)(v1 + 368);
  }
  return dispatch thunk of AsyncIteratorProtocol.next()(v90, v89, v88);
}

uint64_t sub_1003F80A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  *(_QWORD *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 544));
  if (v0)
    v4 = sub_1003F8FD0;
  else
    v4 = sub_1003F8114;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003F8114()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 552));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v8 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 464);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 424);
  v14 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 384);
  v16 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F822C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 592);
  *(_QWORD *)(*v1 + 600) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 584));
  if (v0)
    v4 = sub_1003F90F0;
  else
    v4 = sub_1003F8298;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003F8298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 440);
  swift_release(*(_QWORD *)(v0 + 576));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 512);
  v7 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 408);
  v12 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 368);
  v15 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F8398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  *(_QWORD *)(*(_QWORD *)v1 + 624) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003F91F8;
  else
    v3 = sub_1003F83FC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003F83FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = *(_QWORD *)(v0 + 344);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3);
  v5 = *(_QWORD *)(v0 + 432);
  if (v4 == 1)
  {
    v34 = *(_QWORD *)(v0 + 536);
    v6 = *(_QWORD *)(v0 + 528);
    v7 = *(_QWORD *)(v0 + 496);
    v8 = *(_QWORD *)(v0 + 480);
    v9 = *(_QWORD *)(v0 + 352);
    v10 = *(_QWORD *)(v0 + 360);
    v40 = *(_QWORD *)(v0 + 336);
    v42 = *(_QWORD *)(v0 + 328);
    v36 = *(_QWORD *)(v0 + 272);
    v38 = *(_QWORD *)(v0 + 264);
    v45 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 256) + *(int *)(v0 + 752);
    v12 = v11 + *(int *)(v0 + 756);
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v0 + 440) + 8))(*(_QWORD *)(v0 + 448), v5);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v1, v9);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v8);
    swift_storeEnumTagMultiPayload(v11, v8, 2);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v12, v7);
    swift_storeEnumTagMultiPayload(v12, v7, 2);
    *(_QWORD *)(v0 + 144) = v40;
    *(_QWORD *)(v0 + 152) = v36;
    *(_QWORD *)(v0 + 160) = v42;
    *(_QWORD *)(v0 + 168) = v38;
    v13 = type metadata accessor for Merge2StateMachine.Either(0, v0 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v45, 1, 1, v13);
  }
  else
  {
    v37 = *(_QWORD *)(v0 + 536);
    v14 = *(_QWORD *)(v0 + 528);
    v35 = *(_QWORD *)(v0 + 496);
    v15 = *(_QWORD *)(v0 + 480);
    v31 = *(_QWORD *)(v0 + 448);
    v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 608);
    v33 = *(_QWORD *)(v0 + 384);
    v43 = *(_QWORD *)(v0 + 336);
    v46 = *(_QWORD *)(v0 + 328);
    v39 = *(_QWORD *)(v0 + 272);
    v41 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 256) + *(int *)(v0 + 752);
    v18 = v17 + *(int *)(v0 + 756);
    v19 = *(void (**)(void))(v2 + 32);
    v19();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v15);
    v32(v17, v31, v5);
    swift_storeEnumTagMultiPayload(v17, v15, 0);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v18, v35);
    swift_storeEnumTagMultiPayload(v18, v35, 2);
    ((void (*)(uint64_t, uint64_t, uint64_t))v19)(v16, v33, v3);
    *(_QWORD *)(v0 + 176) = v43;
    *(_QWORD *)(v0 + 184) = v39;
    *(_QWORD *)(v0 + 192) = v46;
    *(_QWORD *)(v0 + 200) = v41;
    v20 = type metadata accessor for Merge2StateMachine.Either(0, v0 + 176);
    swift_storeEnumTagMultiPayload(v16, v20, 0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v16, 0, 1, v20);
  }
  v21 = *(_QWORD *)(v0 + 512);
  v23 = *(_QWORD *)(v0 + 456);
  v22 = *(_QWORD *)(v0 + 464);
  v24 = *(_QWORD *)(v0 + 448);
  v26 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 424);
  v27 = *(_QWORD *)(v0 + 408);
  v28 = *(_QWORD *)(v0 + 384);
  v29 = *(_QWORD *)(v0 + 368);
  v44 = *(_QWORD *)(v0 + 320);
  v47 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v44);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F8714()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 648);
  *(_QWORD *)(*v1 + 656) = v0;
  swift_task_dealloc(v3);
  swift_release(*(_QWORD *)(v2 + 632));
  if (v0)
    v4 = sub_1003F9358;
  else
    v4 = sub_1003F8780;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003F8780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 640));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 512);
  v7 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 408);
  v12 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 368);
  v15 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F8880()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 672);
  *(_QWORD *)(*v1 + 680) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003F9460;
  }
  else
  {
    v5 = *(_QWORD *)(v2 + 632);
    swift_release(*(_QWORD *)(v2 + 664));
    swift_release(v5);
    v4 = sub_1003F88F8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003F88F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 632);
  swift_release(*(_QWORD *)(v0 + 664));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F89E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 688);
  *(_QWORD *)(*v1 + 696) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003F9558;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 632));
    v4 = sub_1003F8A4C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003F8A4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 632));
  v1 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F8B28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 712);
  *(_QWORD *)(*(_QWORD *)v1 + 720) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003F9640;
  else
    v3 = sub_1003F8B8C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003F8B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v2 = *(_QWORD *)(v0 + 304);
  v1 = *(_QWORD *)(v0 + 312);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v2, 1, v3);
  v42 = *(_QWORD *)(v0 + 336);
  v44 = *(_QWORD *)(v0 + 328);
  if (v4 == 1)
  {
    v5 = *(_QWORD *)(v0 + 536);
    v6 = *(_QWORD *)(v0 + 528);
    v7 = *(_QWORD *)(v0 + 496);
    v8 = *(_QWORD *)(v0 + 480);
    v9 = *(_QWORD *)(v0 + 288);
    v10 = *(_QWORD *)(v0 + 296);
    v36 = *(_QWORD *)(v0 + 272);
    v38 = *(_QWORD *)(v0 + 264);
    v40 = *(_QWORD *)(v0 + 240);
    v11 = *(_QWORD *)(v0 + 256) + *(int *)(v0 + 752);
    v12 = v11 + *(int *)(v0 + 756);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 400) + 8))(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 392));
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, v9);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v11, v8);
    swift_storeEnumTagMultiPayload(v11, v8, 2);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v12, v7);
    swift_storeEnumTagMultiPayload(v12, v7, 2);
    *(_QWORD *)(v0 + 80) = v42;
    *(_QWORD *)(v0 + 88) = v36;
    *(_QWORD *)(v0 + 96) = v44;
    *(_QWORD *)(v0 + 104) = v38;
    v13 = type metadata accessor for Merge2StateMachine.Either(0, v0 + 80);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v40, 1, 1, v13);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 392);
    v33 = *(_QWORD *)(v0 + 536);
    v14 = *(_QWORD *)(v0 + 528);
    v15 = *(_QWORD *)(v0 + 496);
    v16 = *(_QWORD *)(v0 + 480);
    v34 = *(_QWORD *)(v0 + 408);
    v35 = *(_QWORD *)(v0 + 320);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
    v39 = *(_QWORD *)(v0 + 272);
    v41 = *(_QWORD *)(v0 + 264);
    v17 = *(_QWORD *)(v0 + 240);
    v18 = *(_QWORD *)(v0 + 256) + *(int *)(v0 + 752);
    v19 = v18 + *(int *)(v0 + 756);
    v20 = *(void (**)(void))(v1 + 32);
    v20();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v18, v16);
    swift_storeEnumTagMultiPayload(v18, v16, 2);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v19, v15);
    v37(v19, v34, v32);
    swift_storeEnumTagMultiPayload(v19, v15, 0);
    ((void (*)(uint64_t, uint64_t, uint64_t))v20)(v17, v35, v3);
    *(_QWORD *)(v0 + 112) = v42;
    *(_QWORD *)(v0 + 120) = v39;
    *(_QWORD *)(v0 + 128) = v44;
    *(_QWORD *)(v0 + 136) = v41;
    v21 = type metadata accessor for Merge2StateMachine.Either(0, v0 + 112);
    swift_storeEnumTagMultiPayload(v17, v21, 1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v17, 0, 1, v21);
  }
  v22 = *(_QWORD *)(v0 + 512);
  v24 = *(_QWORD *)(v0 + 456);
  v23 = *(_QWORD *)(v0 + 464);
  v25 = *(_QWORD *)(v0 + 448);
  v27 = *(_QWORD *)(v0 + 416);
  v26 = *(_QWORD *)(v0 + 424);
  v28 = *(_QWORD *)(v0 + 408);
  v29 = *(_QWORD *)(v0 + 384);
  v30 = *(_QWORD *)(v0 + 368);
  v43 = *(_QWORD *)(v0 + 320);
  v45 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F8E88()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 736);
  *(_QWORD *)(*v1 + 744) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1003F97A0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 728));
    v4 = sub_1003F8EF4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1003F8EF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release(*(_QWORD *)(v0 + 728));
  v1 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F8FD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 552));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v8 = *(_QWORD *)(v0 + 512);
  v10 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 464);
  v11 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 424);
  v14 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 384);
  v16 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F90F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 432);
  v4 = *(_QWORD *)(v0 + 440);
  swift_release(*(_QWORD *)(v0 + 576));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 512);
  v7 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 408);
  v12 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 368);
  v15 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F91F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 256) + *(int *)(v0 + 752);
  v8 = v7 + *(int *)(v0 + 756);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 528) + 8))(v7, v3);
  swift_storeEnumTagMultiPayload(v7, v3, 2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v2);
  v9 = swift_storeEnumTagMultiPayload(v8, v2, 2);
  swift_willThrow(v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v10 = *(_QWORD *)(v0 + 512);
  v12 = *(_QWORD *)(v0 + 456);
  v11 = *(_QWORD *)(v0 + 464);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 416);
  v14 = *(_QWORD *)(v0 + 424);
  v16 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 384);
  v18 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 632);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  swift_release(*(_QWORD *)(v0 + 640));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v5 = *(_QWORD *)(v0 + 512);
  v7 = *(_QWORD *)(v0 + 456);
  v6 = *(_QWORD *)(v0 + 464);
  v8 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 408);
  v12 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 368);
  v15 = *(_QWORD *)(v0 + 320);
  v16 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 632);
  swift_release_n(*(_QWORD *)(v0 + 664), 2);
  swift_release_n(v1, 2);
  v2 = *(_QWORD *)(v0 + 512);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release_n(*(_QWORD *)(v0 + 632), 2);
  v1 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9640()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 256) + *(int *)(v0 + 752);
  v8 = v7 + *(int *)(v0 + 756);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 528) + 8))(v7, v3);
  swift_storeEnumTagMultiPayload(v7, v3, 2);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v8, v2);
  v9 = swift_storeEnumTagMultiPayload(v8, v2, 2);
  swift_willThrow(v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v10 = *(_QWORD *)(v0 + 512);
  v12 = *(_QWORD *)(v0 + 456);
  v11 = *(_QWORD *)(v0 + 464);
  v13 = *(_QWORD *)(v0 + 448);
  v15 = *(_QWORD *)(v0 + 416);
  v14 = *(_QWORD *)(v0 + 424);
  v16 = *(_QWORD *)(v0 + 408);
  v17 = *(_QWORD *)(v0 + 384);
  v18 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F97A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  swift_release_n(*(_QWORD *)(v0 + 728), 2);
  v1 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 456);
  v2 = *(_QWORD *)(v0 + 464);
  v4 = *(_QWORD *)(v0 + 448);
  v6 = *(_QWORD *)(v0 + 416);
  v5 = *(_QWORD *)(v0 + 424);
  v7 = *(_QWORD *)(v0 + 408);
  v8 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a1;
  v8[11] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a7);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[17] = v12;
  v8[18] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_getAssociatedTypeWitness(0, a7);
  v8[19] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[20] = v14;
  v8[21] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003F9964, 0, 0);
}

uint64_t sub_1003F9964()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v5;

  v1 = v0[19];
  v2 = v0[14];
  v3 = v0[12];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[20] + 16))(v0[21], v0[11], v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, v1, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[22] = v5;
  *v5 = v0;
  v5[1] = sub_1003F9A04;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[18], v0[19], AssociatedConformanceWitness);
}

uint64_t sub_1003F9A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003F9B8C;
  else
    v3 = sub_1003F9A68;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003F9A68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = sub_10001537C(&qword_1005D7A90);
  v9 = type metadata accessor for Result(255, v5, v8, &protocol self-conformance witness table for Error);
  v10 = v7 + *(int *)(swift_getTupleTypeMetadata2(0, v9, v3, 0, 0) + 48);
  v14 = *(_OWORD *)(v0 + 112);
  v15 = *(_OWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v4, v5);
  swift_storeEnumTagMultiPayload(v7, v9, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v10, v1, v3);
  *(_OWORD *)(v0 + 48) = v15;
  *(_OWORD *)(v0 + 64) = v14;
  v11 = type metadata accessor for Merge2StateMachine.Partial(0, v0 + 48);
  swift_storeEnumTagMultiPayload(v7, v11, 0);
  v12 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD **)(v0 + 80);
  v7 = sub_10001537C(&qword_1005D7A90);
  v8 = type metadata accessor for Result(255, v5, v7, &protocol self-conformance witness table for Error);
  v9 = (char *)v6 + *(int *)(swift_getTupleTypeMetadata2(0, v8, v4, 0, 0) + 48);
  v13 = *(_OWORD *)(v0 + 112);
  v14 = *(_OWORD *)(v0 + 96);
  *v6 = v1;
  swift_storeEnumTagMultiPayload(v6, v8, 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v9, v2, v4);
  *(_OWORD *)(v0 + 16) = v14;
  *(_OWORD *)(v0 + 32) = v13;
  v10 = type metadata accessor for Merge2StateMachine.Partial(0, v0 + 16);
  swift_storeEnumTagMultiPayload(v6, v10, 0);
  v11 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8[14] = a7;
  v8[15] = a8;
  v8[12] = a5;
  v8[13] = a6;
  v8[10] = a1;
  v8[11] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a8);
  v11 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v8[16] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v8[17] = v12;
  v8[18] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_getAssociatedTypeWitness(0, a8);
  v8[19] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v8[20] = v14;
  v8[21] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1003F9D78, 0, 0);
}

uint64_t sub_1003F9D78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedConformanceWitness;
  _QWORD *v5;

  v1 = v0[19];
  v2 = v0[15];
  v3 = v0[13];
  (*(void (**)(_QWORD, _QWORD, uint64_t))(v0[20] + 16))(v0[21], v0[11], v1);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, v1, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[22] = v5;
  *v5 = v0;
  v5[1] = sub_1003F9E1C;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[18], v0[19], AssociatedConformanceWitness);
}

uint64_t sub_1003F9E1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003F9FA4;
  else
    v3 = sub_1003F9E80;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003F9E80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(v0 + 160);
  v1 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = sub_10001537C(&qword_1005D7A90);
  v9 = type metadata accessor for Result(255, v5, v8, &protocol self-conformance witness table for Error);
  v10 = v7 + *(int *)(swift_getTupleTypeMetadata2(0, v9, v3, 0, 0) + 48);
  v14 = *(_OWORD *)(v0 + 112);
  v15 = *(_OWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v7, v4, v5);
  swift_storeEnumTagMultiPayload(v7, v9, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v10, v1, v3);
  *(_OWORD *)(v0 + 48) = v15;
  *(_OWORD *)(v0 + 64) = v14;
  v11 = type metadata accessor for Merge2StateMachine.Partial(0, v0 + 48);
  swift_storeEnumTagMultiPayload(v7, v11, 1);
  v12 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9FA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;

  v1 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD **)(v0 + 80);
  v7 = sub_10001537C(&qword_1005D7A90);
  v8 = type metadata accessor for Result(255, v5, v7, &protocol self-conformance witness table for Error);
  v9 = (char *)v6 + *(int *)(swift_getTupleTypeMetadata2(0, v8, v4, 0, 0) + 48);
  v13 = *(_OWORD *)(v0 + 112);
  v14 = *(_OWORD *)(v0 + 96);
  *v6 = v1;
  swift_storeEnumTagMultiPayload(v6, v8, 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v9, v2, v4);
  *(_OWORD *)(v0 + 16) = v14;
  *(_OWORD *)(v0 + 32) = v13;
  v10 = type metadata accessor for Merge2StateMachine.Partial(0, v0 + 16);
  swift_storeEnumTagMultiPayload(v6, v10, 1);
  v11 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FA0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;

  __chkstk_darwin(a1);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v6 + 16))(v5);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a1 + 32));
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a2, v5, AssociatedTypeWitness);
}

uint64_t AsyncMerge2Sequence.Iterator.next()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v2[10] = a1;
  v3 = a2[2];
  v2[11] = v3;
  v4 = a2[3];
  v5 = a2[4];
  v2[12] = v5;
  v6 = a2[5];
  v2[2] = v3;
  v2[3] = v4;
  v2[4] = v5;
  v2[5] = v6;
  v7 = type metadata accessor for Merge2StateMachine.Either(255, (uint64_t)(v2 + 2));
  v2[13] = v7;
  v8 = type metadata accessor for Optional(0, v7);
  v2[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[15] = v9;
  v10 = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[16] = v10;
  v11 = (_QWORD *)swift_task_alloc(dword_1005DD5FC);
  v2[17] = v11;
  v2[6] = v3;
  v2[7] = v4;
  v2[8] = v5;
  v2[9] = v6;
  v12 = (_QWORD *)type metadata accessor for Merge2StateMachine(0, (uint64_t)(v2 + 6));
  *v11 = v2;
  v11[1] = sub_1003FA23C;
  return sub_1003F7678(v10, v12);
}

uint64_t sub_1003FA23C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1003FA388;
  else
    v3 = sub_1003FA2A0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003FA2A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;

  v2 = (uint64_t *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v1 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v1) == 1)
  {
    v4 = *(_QWORD *)(v0 + 120);
    v2 = (uint64_t *)(v0 + 112);
    v5 = 1;
  }
  else
  {
    sub_1003FA0B4(v1, *(_QWORD *)(v0 + 80));
    v5 = 0;
    v3 = *(_QWORD *)(v0 + 128);
  }
  v6 = *v2;
  v7 = *(_QWORD *)(v0 + 96);
  v8 = *(_QWORD *)(v0 + 80);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 56))(v8, v5, 1, AssociatedTypeWitness);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FA388()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for Merge2StateMachine.Either(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for Merge2StateMachine.Either);
}

uint64_t type metadata accessor for Merge2StateMachine(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for Merge2StateMachine);
}

uint64_t sub_1003FA3D4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1005DD5F4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100130768;
  return AsyncMerge2Sequence.Iterator.next()(a1, a2);
}

uint64_t sub_1003FA434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v6[2] = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a5 + 32));
  v6[3] = AssociatedTypeWitness;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6[4] = v13;
  v14 = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[5] = v14;
  v15 = (_QWORD *)swift_task_alloc(_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTu[1]);
  v6[6] = v15;
  *v15 = v6;
  v15[1] = sub_1003FA50C;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6, v14);
}

uint64_t sub_1003FA50C()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 48);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v5 = v2[5];
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v2[4] + 32))(v2[2], v5, v2[3]);
    swift_task_dealloc(v5);
  }
  else
  {
    swift_task_dealloc(v2[5]);
  }
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t AsyncMerge2Sequence.makeAsyncIterator()@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;

  v26 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(a1);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 40);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7);
  v9 = __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v23 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v9);
  v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = swift_getAssociatedTypeWitness(0, v16);
  __chkstk_darwin(v17);
  v19 = (char *)&v23 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v21 = v24;
  v20(v15, v24, v12);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v12, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v6, v21 + *(int *)(a1 + 52), v3);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v3, v7);
  return sub_1003F62CC((uint64_t)v19, 0, (uint64_t)v11, 0, v12, v3, v16, v7, v26);
}

uint64_t sub_1003FA748(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v4, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  return swift_getAssociatedConformanceWitness(AssociatedConformanceWitness, AssociatedTypeWitness, a1, &protocol requirements base descriptor for AsyncIteratorProtocol, &associated conformance descriptor for AsyncIteratorProtocol.AsyncIteratorProtocol.Failure: Error);
}

uint64_t sub_1003FA7D8(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for AsyncMerge2Sequence<A, B>.Iterator, a1);
}

uint64_t sub_1003FA7E8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  AsyncMerge2Sequence.makeAsyncIterator()(a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 8))(v2, a1);
}

uint64_t sub_1003FA818(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 0, 2, v5, a1 + 48);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1003FA8A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  uint64_t v14;

  v4 = a1;
  v5 = *(_QWORD *)(a3 + 24);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v7 = *(_QWORD *)(v5 - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(v6 + 64) + v8;
  v10 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v7 + 80));
  if (v10 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & (unint64_t)~v8) + *(_QWORD *)(v7 + 64) > 0x18)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v10 + 16) & ~v10));
    swift_retain(v13);
  }
  else
  {
    v14 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v6 + 16))(a1, a2);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9) & v14, ((unint64_t)a2 + v9) & v14, v5);
  }
  return v4;
}

uint64_t sub_1003FA974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v4 + 8))();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 8))((*(_QWORD *)(v4 + 64) + a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 80));
}

uint64_t sub_1003FA9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 16))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 16))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1003FAA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 24))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1003FAAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 32))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1003FAB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v6 + 40))();
  v7 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))((*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), (*(_QWORD *)(v6 + 64) + *(unsigned __int8 *)(v7 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t sub_1003FAB7C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  int v14;
  unsigned int v15;
  int v16;
  int v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= v5)
    v8 = *(_DWORD *)(v4 + 84);
  else
    v8 = *(_DWORD *)(v6 + 84);
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = *(_QWORD *)(v4 + 64) + v9;
  v11 = a2 - v8;
  if (a2 <= v8)
    goto LABEL_23;
  v12 = (v10 & ~v9) + *(_QWORD *)(v6 + 64);
  v13 = 8 * v12;
  if (v12 <= 3)
  {
    v15 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      v14 = *(_DWORD *)(a1 + v12);
      if (!v14)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 > 0xFF)
    {
      v14 = *(unsigned __int16 *)(a1 + v12);
      if (!*(_WORD *)(a1 + v12))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v15 < 2)
    {
LABEL_23:
      if (v8)
      {
        if (v5 >= v7)
          return (*(uint64_t (**)(void))(v4 + 48))();
        else
          return (*(uint64_t (**)(uint64_t))(v6 + 48))((v10 + a1) & ~v9);
      }
      return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + v12);
  if (!*(_BYTE *)(a1 + v12))
    goto LABEL_23;
LABEL_14:
  v16 = (v14 - 1) << v13;
  if (v12 > 3)
    v16 = 0;
  if (!(_DWORD)v12)
    return v8 + v16 + 1;
  if (v12 <= 3)
    v17 = (v10 & ~(_DWORD)v9) + *(_DWORD *)(v6 + 64);
  else
    v17 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1003FAC58 + 4 * byte_100468DE0[v17 - 1]))();
}

void sub_1003FACD4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 24) - 8);
  if (*(_DWORD *)(v6 + 84) <= *(_DWORD *)(v5 + 84))
    v7 = *(_DWORD *)(v5 + 84);
  else
    v7 = *(_DWORD *)(v6 + 84);
  v8 = ((*(_QWORD *)(v5 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
     + *(_QWORD *)(v6 + 64);
  if (a3 > v7)
  {
    if (v8 <= 3)
    {
      v11 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v11))
      {
        v9 = &dword_100000004;
      }
      else if (v11 >= 0x100)
      {
        v9 = 2;
      }
      else
      {
        v9 = v11 > 1;
      }
    }
    else
    {
      v9 = &_mh_execute_header.magic + 1;
    }
  }
  else
  {
    v9 = 0;
  }
  if (v7 < a2)
  {
    v10 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v12 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v12;
          *((_BYTE *)a1 + 2) = BYTE2(v12);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v12;
        }
        else
        {
          *(_BYTE *)a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for AsyncMerge2Sequence(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AsyncMerge2Sequence);
}

uint64_t sub_1003FAEE0(uint64_t a1)
{
  __int128 v2;
  uint64_t result;
  unint64_t v4;
  _OWORD v5[2];

  v2 = *(_OWORD *)(a1 + 32);
  v5[0] = *(_OWORD *)(a1 + 16);
  v5[1] = v2;
  result = type metadata accessor for Merge2StateMachine(319, (uint64_t)v5);
  if (v4 <= 0x3F)
  {
    *(_QWORD *)&v5[0] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 0, 1, v5, a1 + 48);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for AsyncMerge2Sequence.Iterator(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AsyncMerge2Sequence.Iterator);
}

uint64_t sub_1003FAF80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1003FAF88(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedConformanceWitness;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v16[4];
  _BYTE v17[32];
  _QWORD v18[3];

  v18[0] = &unk_100469018;
  v18[1] = &unk_100469018;
  v2 = a1[4];
  v3 = a1[2];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  v5 = a1[3];
  v6 = a1[5];
  v16[0] = v3;
  v16[1] = v5;
  v16[2] = v2;
  v16[3] = v6;
  v7 = type metadata accessor for Merge2StateMachine.Partial(255, (uint64_t)v16);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
  v9 = type metadata accessor for PartialIteration(319, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  if (v10 <= 0x3F)
  {
    v11 = swift_getAssociatedTypeWitness(255, v6);
    v12 = swift_getAssociatedConformanceWitness(v6, v5, v11, &protocol requirements base descriptor for AsyncSequence, &associated conformance descriptor for AsyncSequence.AsyncSequence.AsyncIterator: AsyncIteratorProtocol);
    v13 = type metadata accessor for PartialIteration(319, v11, v7, v12);
    if (v14 > 0x3F)
    {
      return v13;
    }
    else
    {
      swift_getTupleTypeLayout2(v17, *(_QWORD *)(v9 - 8) + 64, *(_QWORD *)(v13 - 8) + 64);
      v18[2] = v17;
      swift_initStructMetadata(a1, 0, 3, v18, a1 + 6);
      return 0;
    }
  }
  return v9;
}

uint64_t sub_1003FB118(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  unsigned int v28;
  uint64_t v29;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40)) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8 | 7;
  v12 = v10 | v8;
  v13 = (v10 | v8) & 0xF8 | 7u;
  v14 = ~v13;
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(v7 + 64);
  v16 = v15 + 1 + v11;
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v17 = 8;
  else
    v17 = *(_QWORD *)(v9 + 64);
  if ((v12 & 0x1000F8) != 0 || v17 + 1 + (v16 & ~v11) + ((v13 + 2) & (unint64_t)~v13) > 0x18)
  {
    v19 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v19 + ((v13 + 16) & v14);
LABEL_29:
    swift_retain(v19);
    return a1;
  }
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *((_BYTE *)a2 + 1);
  v20 = (_QWORD *)((a1 + 9) & v14);
  v21 = (uint64_t *)(((unint64_t)a2 + 9) & v14);
  v22 = *((unsigned __int8 *)v21 + v15);
  if (v22 >= 2)
  {
    if (v15 <= 3)
      v23 = v15;
    else
      v23 = 4;
    __asm { BR              X13 }
  }
  v24 = ~v11;
  if (v22 == 1)
  {
    v25 = *v21;
    *v20 = *v21;
    *((_BYTE *)v20 + v15) = 1;
    swift_retain(v25);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v7 + 16))(v20, v21, AssociatedTypeWitness);
    *((_BYTE *)v20 + v15) = 0;
  }
  v26 = (_QWORD *)(((unint64_t)v20 + v16) & v24);
  v27 = (uint64_t *)(((unint64_t)v21 + v16) & v24);
  v28 = *((unsigned __int8 *)v27 + v17);
  if (v28 >= 2)
  {
    if (v17 <= 3)
      v29 = v17;
    else
      v29 = 4;
    __asm { BR              X12 }
  }
  if (v28 == 1)
  {
    v19 = *v27;
    *v26 = *v27;
    *((_BYTE *)v26 + v17) = 1;
    goto LABEL_29;
  }
  (*(void (**)(unint64_t))(v9 + 16))(((unint64_t)v20 + v16) & v24);
  *((_BYTE *)v26 + v17) = 0;
  return a1;
}

uint64_t sub_1003FB3E8(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 32));
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 40)) - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = (v8 | v6) & 0xF8 | 7u;
  v10 = v8 & 0xF8;
  v11 = (a1 + v9 + 2) & ~v9;
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v12 = 8;
  else
    v12 = *(_QWORD *)(v5 + 64);
  v13 = *(unsigned __int8 *)(v11 + v12);
  if (v13 >= 2)
  {
    if (v12 <= 3)
      v14 = v12;
    else
      v14 = 4;
    __asm { BR              X13 }
  }
  v15 = v10 | 7;
  if (v13 == 1)
    swift_release(*(_QWORD *)v11);
  else
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v11, AssociatedTypeWitness);
  v16 = (_QWORD *)(((v11 | 1) + v12 + v15) & ~v15);
  v17 = *(_QWORD *)(v7 + 64);
  if (v17 <= 8)
    v17 = 8;
  v18 = *((unsigned __int8 *)v16 + v17);
  if (v18 >= 2)
  {
    if (v17 <= 3)
      v19 = v17;
    else
      v19 = 4;
    __asm { BR              X13 }
  }
  if (v18 == 1)
    return swift_release(*v16);
  else
    return (*(uint64_t (**)(void))(v7 + 8))();
}

_BYTE *sub_1003FB618(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  *a1 = *a2;
  a1[1] = a2[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40)) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8;
  v12 = (v10 | v8) & 0xF8 | 7u;
  v13 = (_QWORD *)((unint64_t)&a1[v12 + 2] & ~v12);
  v14 = (uint64_t *)((unint64_t)&a2[v12 + 2] & ~v12);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(v7 + 64);
  v16 = *((unsigned __int8 *)v14 + v15);
  if (v16 >= 2)
  {
    if (v15 <= 3)
      v17 = v15;
    else
      v17 = 4;
    __asm { BR              X13 }
  }
  v18 = v11 | 7;
  if (v16 == 1)
  {
    v19 = *v14;
    *v13 = *v14;
    *((_BYTE *)v13 + v15) = 1;
    swift_retain(v19);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t *, uint64_t))(v7 + 16))(v13, v14, AssociatedTypeWitness);
    *((_BYTE *)v13 + v15) = 0;
  }
  v20 = v15 + 1 + v18;
  v21 = (_QWORD *)(((unint64_t)v13 + v20) & ~v18);
  v22 = (uint64_t *)(((unint64_t)v14 + v20) & ~v18);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v23 = 8;
  else
    v23 = *(_QWORD *)(v9 + 64);
  v24 = *((unsigned __int8 *)v22 + v23);
  if (v24 >= 2)
  {
    if (v23 <= 3)
      v25 = v23;
    else
      v25 = 4;
    __asm { BR              X12 }
  }
  if (v24 == 1)
  {
    v26 = *v22;
    *v21 = *v22;
    *((_BYTE *)v21 + v23) = 1;
    swift_retain(v26);
  }
  else
  {
    (*(void (**)(_QWORD *))(v9 + 16))(v21);
    *((_BYTE *)v21 + v23) = 0;
  }
  return a1;
}

_BYTE *sub_1003FB8A0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;

  *a1 = *a2;
  a1[1] = a2[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 & 0xF8 | 7;
  v13 = (v11 | v8) & 0xF8 | 7u;
  v14 = (uint64_t *)((unint64_t)&a1[v13 + 2] & ~v13);
  v15 = (uint64_t *)((unint64_t)&a2[v13 + 2] & ~v13);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v16 = 8;
  else
    v16 = *(_QWORD *)(v7 + 64);
  if (v14 != v15)
  {
    v17 = *((unsigned __int8 *)v14 + v16);
    if (v17 >= 2)
    {
      if (v16 <= 3)
        v18 = v16;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
      swift_release(*v14);
    else
      (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v14, AssociatedTypeWitness);
    v19 = *((unsigned __int8 *)v15 + v16);
    if (v19 >= 2)
    {
      if (v16 <= 3)
        v20 = v16;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == 1)
    {
      v21 = *v15;
      *v14 = *v15;
      *((_BYTE *)v14 + v16) = 1;
      swift_retain(v21);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v14, v15, AssociatedTypeWitness);
      *((_BYTE *)v14 + v16) = 0;
    }
  }
  v22 = (uint64_t *)(((unint64_t)v14 + v12 + v16 + 1) & ~v12);
  v23 = (uint64_t *)(((unint64_t)v15 + v12 + v16 + 1) & ~v12);
  if (v22 != v23)
  {
    if (*(_QWORD *)(v10 + 64) <= 8uLL)
      v24 = 8;
    else
      v24 = *(_QWORD *)(v10 + 64);
    v25 = *((unsigned __int8 *)v22 + v24);
    if (v25 >= 2)
    {
      if (v24 <= 3)
        v26 = v24;
      else
        v26 = 4;
      __asm { BR              X12 }
    }
    if (v25 == 1)
      swift_release(*v22);
    else
      (*(void (**)(uint64_t *, uint64_t))(v10 + 8))(v22, v9);
    v27 = *((unsigned __int8 *)v23 + v24);
    if (v27 >= 2)
    {
      if (v24 <= 3)
        v28 = v24;
      else
        v28 = 4;
      __asm { BR              X12 }
    }
    if (v27 == 1)
    {
      v29 = *v23;
      *v22 = *v23;
      *((_BYTE *)v22 + v24) = 1;
      swift_retain(v29);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(v22, v23, v9);
      *((_BYTE *)v22 + v24) = 0;
    }
  }
  return a1;
}

_BYTE *sub_1003FBC74(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  *a1 = *a2;
  a1[1] = a2[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40)) - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v10 & 0xF8;
  v12 = (v10 | v8) & 0xF8 | 7u;
  v13 = (_QWORD *)((unint64_t)&a1[v12 + 2] & ~v12);
  v14 = (_QWORD *)((unint64_t)&a2[v12 + 2] & ~v12);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(v7 + 64);
  v16 = *((unsigned __int8 *)v14 + v15);
  if (v16 >= 2)
  {
    if (v15 <= 3)
      v17 = v15;
    else
      v17 = 4;
    __asm { BR              X13 }
  }
  v18 = v11 | 7;
  if (v16 == 1)
  {
    *v13 = *v14;
    *((_BYTE *)v13 + v15) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v13, v14, AssociatedTypeWitness);
    *((_BYTE *)v13 + v15) = 0;
  }
  v19 = v15 + 1 + v18;
  v20 = (_QWORD *)(((unint64_t)v13 + v19) & ~v18);
  v21 = (_QWORD *)(((unint64_t)v14 + v19) & ~v18);
  if (*(_QWORD *)(v9 + 64) <= 8uLL)
    v22 = 8;
  else
    v22 = *(_QWORD *)(v9 + 64);
  v23 = *((unsigned __int8 *)v21 + v22);
  if (v23 >= 2)
  {
    if (v22 <= 3)
      v24 = v22;
    else
      v24 = 4;
    __asm { BR              X12 }
  }
  if (v23 == 1)
  {
    *v20 = *v21;
    *((_BYTE *)v20 + v22) = 1;
  }
  else
  {
    (*(void (**)(_QWORD *))(v9 + 32))(v20);
    *((_BYTE *)v20 + v22) = 0;
  }
  return a1;
}

_BYTE *sub_1003FBEF4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;

  *a1 = *a2;
  a1[1] = a2[1];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 80);
  v9 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80);
  v12 = v11 & 0xF8 | 7;
  v13 = (v11 | v8) & 0xF8 | 7u;
  v14 = (_QWORD *)((unint64_t)&a1[v13 + 2] & ~v13);
  v15 = (_QWORD *)((unint64_t)&a2[v13 + 2] & ~v13);
  if (*(_QWORD *)(v7 + 64) <= 8uLL)
    v16 = 8;
  else
    v16 = *(_QWORD *)(v7 + 64);
  if (v14 != v15)
  {
    v17 = *((unsigned __int8 *)v14 + v16);
    if (v17 >= 2)
    {
      if (v16 <= 3)
        v18 = v16;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v17 == 1)
      swift_release(*v14);
    else
      (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v14, AssociatedTypeWitness);
    v19 = *((unsigned __int8 *)v15 + v16);
    if (v19 >= 2)
    {
      if (v16 <= 3)
        v20 = v16;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v19 == 1)
    {
      *v14 = *v15;
      *((_BYTE *)v14 + v16) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 32))(v14, v15, AssociatedTypeWitness);
      *((_BYTE *)v14 + v16) = 0;
    }
  }
  v21 = (_QWORD *)(((unint64_t)v14 + v12 + v16 + 1) & ~v12);
  v22 = (_QWORD *)(((unint64_t)v15 + v12 + v16 + 1) & ~v12);
  if (v21 != v22)
  {
    if (*(_QWORD *)(v10 + 64) <= 8uLL)
      v23 = 8;
    else
      v23 = *(_QWORD *)(v10 + 64);
    v24 = *((unsigned __int8 *)v21 + v23);
    if (v24 >= 2)
    {
      if (v23 <= 3)
        v25 = v23;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
      swift_release(*v21);
    else
      (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v21, v9);
    v26 = *((unsigned __int8 *)v22 + v23);
    if (v26 >= 2)
    {
      if (v23 <= 3)
        v27 = v23;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
      *v21 = *v22;
      *((_BYTE *)v21 + v23) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v10 + 32))(v21, v22, v9);
      *((_BYTE *)v21 + v23) = 0;
    }
  }
  return a1;
}

uint64_t sub_1003FC2C0(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  unsigned int v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  int v21;

  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32)) - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40)) - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= 8)
    v9 = 8;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_24;
  v10 = *(_DWORD *)(v8 + 80);
  v11 = v10 & 0xF8 | 7;
  v12 = (v10 | *(_DWORD *)(v6 + 80)) & 0xF8 | 7u;
  v13 = v9 + ((v7 + v11 + 1) & ~v11) + ((v12 + 2) & ~v12) + 1;
  v14 = 8 * v13;
  if (v13 <= 3)
  {
    v17 = ((a2 + ~(-1 << v14) - 254) >> v14) + 1;
    if (HIWORD(v17))
    {
      v15 = *(_DWORD *)&a1[v13];
      if (!v15)
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      v15 = *(unsigned __int16 *)&a1[v13];
      if (!*(_WORD *)&a1[v13])
        goto LABEL_24;
      goto LABEL_17;
    }
    if (v17 < 2)
    {
LABEL_24:
      v19 = *a1;
      v20 = v19 >= 2;
      v21 = (v19 + 2147483646) & 0x7FFFFFFF;
      if (v20)
        return (v21 + 1);
      else
        return 0;
    }
  }
  v15 = a1[v13];
  if (!a1[v13])
    goto LABEL_24;
LABEL_17:
  v18 = (v15 - 1) << v14;
  if (v13 > 3)
    v18 = 0;
  if ((_DWORD)v13)
  {
    if (v13 > 3)
      LODWORD(v13) = 4;
    __asm { BR              X11 }
  }
  return (v18 + 255);
}

void sub_1003FC494(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;

  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 32)) - 8);
  if (*(_QWORD *)(v8 + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 40)) - 8);
  v11 = *(_QWORD *)(v10 + 64);
  if (v11 <= 8)
    v11 = 8;
  v12 = *(_DWORD *)(v10 + 80);
  v13 = v12 & 0xF8 | 7;
  v14 = (v12 | *(_DWORD *)(v8 + 80)) & 0xF8 | 7u;
  v15 = v11 + ((v9 + v13 + 1) & ~v13) + ((v14 + 2) & ~v14) + 1;
  if (a3 < 0xFF)
  {
    v16 = 0;
  }
  else if (v15 <= 3)
  {
    v18 = ((a3 + ~(-1 << (8 * v15)) - 254) >> (8 * v15)) + 1;
    if (HIWORD(v18))
    {
      v16 = &dword_100000004;
    }
    else if (v18 >= 0x100)
    {
      v16 = 2;
    }
    else
    {
      v16 = v18 > 1;
    }
  }
  else
  {
    v16 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X10 }
  v17 = a2 - 255;
  if (v15 < 4)
  {
    if ((_DWORD)v15)
    {
      v19 = v17 & ~(-1 << (8 * v15));
      bzero(a1, v15);
      if ((_DWORD)v15 == 3)
      {
        *(_WORD *)a1 = v19;
        a1[2] = BYTE2(v19);
      }
      else if ((_DWORD)v15 == 2)
      {
        *(_WORD *)a1 = v19;
      }
      else
      {
        *a1 = v19;
      }
    }
  }
  else
  {
    bzero(a1, v15);
    *(_DWORD *)a1 = v17;
  }
  __asm { BR              X10 }
}

uint64_t type metadata accessor for Merge2StateMachine.Partial(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for Merge2StateMachine.Partial);
}

uint64_t sub_1003FC6E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE v16[32];
  _BYTE v17[32];
  _QWORD v18[2];

  v2 = *(_QWORD *)(a1 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v2);
  v4 = type metadata accessor for Optional(255, AssociatedTypeWitness);
  v5 = sub_10001537C(&qword_1005D7A90);
  v6 = type metadata accessor for Result(319, v4, v5, &protocol self-conformance witness table for Error);
  if (v7 <= 0x3F)
  {
    v8 = swift_getAssociatedTypeWitness(319, v2);
    if (v9 > 0x3F)
      return v8;
    swift_getTupleTypeLayout2(v17, *(_QWORD *)(v6 - 8) + 64, *(_QWORD *)(v8 - 8) + 64);
    v18[0] = v17;
    v10 = *(_QWORD *)(a1 + 40);
    v11 = swift_getAssociatedTypeWitness(255, v10);
    v12 = type metadata accessor for Optional(255, v11);
    v6 = type metadata accessor for Result(319, v12, v5, &protocol self-conformance witness table for Error);
    if (v13 > 0x3F)
      return v6;
    v8 = swift_getAssociatedTypeWitness(319, v10);
    if (v14 > 0x3F)
    {
      return v8;
    }
    else
    {
      swift_getTupleTypeLayout2(v16, *(_QWORD *)(v6 - 8) + 64, *(_QWORD *)(v8 - 8) + 64);
      v18[1] = v16;
      swift_initEnumMetadataMultiPayload(a1, 0, 2, v18);
      return 0;
    }
  }
  return v6;
}

_QWORD *sub_1003FC8A4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  char v37;
  size_t __n;
  size_t v40;
  uint64_t v41;
  uint64_t AssociatedTypeWitness;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v4 = *(_QWORD *)(a3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  if (*(_DWORD *)(v5 + 84))
    v6 = *(_QWORD *)(v5 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64) + 1;
  v7 = 8;
  v40 = v6;
  if (v6 <= 8)
    v8 = 8;
  else
    v8 = v6;
  v45 = swift_getAssociatedTypeWitness(0, v4);
  v46 = v8;
  v9 = *(_QWORD *)(v45 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v43 = v8 + v10 + 1;
  v44 = v9;
  v11 = (v43 & ~(unint64_t)v10) + *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(a3 + 40);
  v41 = swift_getAssociatedTypeWitness(0, v12);
  v13 = *(_QWORD *)(v41 - 8);
  if (*(_DWORD *)(v13 + 84))
    v14 = *(_QWORD *)(v13 + 64);
  else
    v14 = *(_QWORD *)(v13 + 64) + 1;
  __n = v14;
  if (v14 > 8)
    v7 = v14;
  v15 = swift_getAssociatedTypeWitness(0, v12);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_DWORD *)(v16 + 80);
  v18 = v7 + v17 + 1;
  v19 = *(_QWORD *)(v16 + 64);
  if ((v18 & (unint64_t)~v17) + v19 <= v11)
    v20 = v11;
  else
    v20 = (v18 & ~v17) + v19;
  v21 = *(_DWORD *)(v13 + 80) | *(_DWORD *)(v5 + 80);
  v22 = v10 | v17 | v21 & 0xF8;
  if (v22 > 7 || ((v21 | v10 | *(_DWORD *)(v16 + 80)) & 0x100000) != 0 || v20 + 1 > 0x18)
  {
    v25 = *a2;
    *a1 = *a2;
    v26 = (_QWORD *)(v25 + (((v22 | 7) + 16) & ~(unint64_t)(v22 | 7)));
    swift_retain(v25);
  }
  else
  {
    v27 = *((unsigned __int8 *)a2 + v20);
    if (v27 >= 2)
    {
      if (v20 <= 3)
        v28 = v20;
      else
        v28 = 4;
      __asm { BR              X13 }
    }
    if (v27 == 1)
    {
      v29 = *((unsigned __int8 *)a2 + v7);
      if (v29 >= 2)
      {
        if (v7 <= 3)
          v30 = v7;
        else
          v30 = 4;
        __asm { BR              X13 }
      }
      v47 = v15;
      v33 = ~v17;
      if (v29 == 1)
      {
        v34 = *a2;
        swift_errorRetain(*a2);
        *a1 = v34;
        v26 = a1;
        v35 = 1;
      }
      else
      {
        v26 = a1;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v13 + 48))(a2, 1, v41))
        {
          memcpy(a1, a2, __n);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v13 + 16))(a1, a2, v41);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v13 + 56))(a1, 0, 1, v41);
        }
        v35 = 0;
      }
      *((_BYTE *)v26 + v7) = v35;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 16))(((unint64_t)v26 + v18) & v33, ((unint64_t)a2 + v18) & v33, v47);
      *((_BYTE *)v26 + v20) = 1;
    }
    else
    {
      v31 = *((unsigned __int8 *)a2 + v46);
      if (v31 >= 2)
      {
        if (v46 <= 3)
          v32 = v46;
        else
          v32 = 4;
        __asm { BR              X12 }
      }
      if (v31 == 1)
      {
        v36 = *a2;
        swift_errorRetain(*a2);
        *a1 = v36;
        v26 = a1;
        v37 = 1;
      }
      else
      {
        v26 = a1;
        if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v5 + 48))(a2, 1, AssociatedTypeWitness))
        {
          memcpy(a1, a2, v40);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
          (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, AssociatedTypeWitness);
        }
        v37 = 0;
      }
      *((_BYTE *)v26 + v46) = v37;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v44 + 16))(((unint64_t)v26 + v43) & ~(unint64_t)v10, ((unint64_t)a2 + v43) & ~(unint64_t)v10, v45);
      *((_BYTE *)v26 + v20) = 0;
    }
  }
  return v26;
}

uint64_t sub_1003FCDB4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = *(_QWORD *)(a2 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v39 = v6;
  v40 = AssociatedTypeWitness;
  v8 = *(_QWORD *)(v6 + 64);
  if (v7)
    v9 = v8;
  else
    v9 = v8 + 1;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  v11 = swift_getAssociatedTypeWitness(0, v4);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v36 = v10;
  v41 = v11;
  v42 = v10 + v13 + 1;
  v14 = (v42 & ~v13) + *(_QWORD *)(v12 + 64);
  v15 = *(_QWORD *)(a2 + 40);
  v16 = swift_getAssociatedTypeWitness(0, v15);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_DWORD *)(v17 + 84);
  v37 = v17;
  v38 = v16;
  v19 = *(_QWORD *)(v17 + 64);
  if (v18)
    v20 = v19;
  else
    v20 = v19 + 1;
  v21 = swift_getAssociatedTypeWitness(0, v15);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(unsigned __int8 *)(v22 + 80);
  if (v20 <= 8)
    v24 = 8;
  else
    v24 = v20;
  v25 = v24 + v23 + 1;
  v26 = (v25 & ~v23) + *(_QWORD *)(v22 + 64);
  if (v26 <= v14)
    v26 = v14;
  v27 = *((unsigned __int8 *)a1 + v26);
  if (v27 >= 2)
  {
    if (v26 <= 3)
      v28 = v26;
    else
      v28 = 4;
    __asm { BR              X15 }
  }
  if (v27 == 1)
  {
    v29 = ~v23;
    v30 = *((unsigned __int8 *)a1 + v24);
    if (v30 >= 2)
    {
      if (v24 <= 3)
        v31 = v24;
      else
        v31 = 4;
      __asm { BR              X13 }
    }
    if (v30 == 1)
    {
      swift_errorRelease(*a1);
    }
    else if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v37 + 48))(a1, 1, v38))
    {
      (*(void (**)(_QWORD *, uint64_t))(v37 + 8))(a1, v38);
    }
    v12 = v22;
    v34 = v21;
  }
  else
  {
    v29 = ~v13;
    v32 = *((unsigned __int8 *)a1 + v36);
    if (v32 >= 2)
    {
      if (v36 <= 3)
        v33 = v36;
      else
        v33 = 4;
      __asm { BR              X12 }
    }
    v25 = v42;
    if (v32 == 1)
    {
      swift_errorRelease(*a1);
    }
    else if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v39 + 48))(a1, 1, v40))
    {
      (*(void (**)(_QWORD *, uint64_t))(v39 + 8))(a1, v40);
    }
    v34 = v41;
  }
  return (*(uint64_t (**)(unint64_t, uint64_t))(v12 + 8))(((unint64_t)a1 + v25) & v29, v34);
}

void sub_1003FD15C()
{
  unsigned int v0;
  unsigned __int16 *v1;

  if (v0 >= 4)
  {
    if ((*v1 | (*((unsigned __int8 *)v1 + 2) << 16)) != 0xFFFFFFFF)
      JUMPOUT(0x1003FD068);
    JUMPOUT(0x1003FD124);
  }
  JUMPOUT(0x1003FD10CLL);
}

_QWORD *sub_1003FD190(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  const void *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v43;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = *(_QWORD *)(a3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v49 = v8;
  v50 = AssociatedTypeWitness;
  v10 = *(_QWORD *)(v8 + 64);
  if (v9)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = 8;
  v46 = v11;
  if (v11 <= 8)
    v13 = 8;
  else
    v13 = v11;
  v53 = swift_getAssociatedTypeWitness(0, v6);
  v54 = v13;
  v14 = *(_QWORD *)(v53 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v51 = v14;
  v52 = v13 + v15 + 1;
  v16 = (v52 & ~v15) + *(_QWORD *)(v14 + 64);
  v17 = *(_QWORD *)(a3 + 40);
  v18 = swift_getAssociatedTypeWitness(0, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v19 + 84);
  v47 = v19;
  v48 = v18;
  v21 = *(_QWORD *)(v19 + 64);
  if (v20)
    v22 = v21;
  else
    v22 = v21 + 1;
  v23 = swift_getAssociatedTypeWitness(0, v17);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  if (v22 > 8)
    v12 = v22;
  v26 = v12 + v25 + 1;
  if ((v26 & (unint64_t)~v25) + *(_QWORD *)(v24 + 64) <= v16)
    v27 = v16;
  else
    v27 = (v26 & ~v25) + *(_QWORD *)(v24 + 64);
  v28 = a2;
  v29 = *((unsigned __int8 *)a2 + v27);
  if (v29 >= 2)
  {
    if (v27 <= 3)
      v30 = v27;
    else
      v30 = 4;
    __asm { BR              X13 }
  }
  v31 = a1;
  v32 = a2;
  if (v29 == 1)
  {
    v33 = ~v25;
    v34 = *((unsigned __int8 *)v28 + v12);
    if (v34 >= 2)
    {
      if (v12 <= 3)
        v35 = v12;
      else
        v35 = 4;
      __asm { BR              X12 }
    }
    if (v34 == 1)
    {
      v38 = *v28;
      swift_errorRetain(*v28);
      v39 = 1;
      *v31 = v38;
      v40 = v23;
      v41 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v47 + 48))(v28, 1, v48))
      {
        memcpy(v31, v32, v22);
        v39 = 0;
        v41 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, const void *, uint64_t))(v47 + 16))(v31, v32, v48);
        v41 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v31, 0, 1, v48);
        v39 = 0;
      }
      v40 = v23;
    }
  }
  else
  {
    v33 = ~v15;
    v12 = v54;
    v36 = *((unsigned __int8 *)v28 + v54);
    if (v36 >= 2)
    {
      if (v54 <= 3)
        v37 = v54;
      else
        v37 = 4;
      __asm { BR              X12 }
    }
    v26 = v52;
    if (v36 == 1)
    {
      v43 = *v28;
      swift_errorRetain(*v28);
      v41 = 0;
      *v31 = v43;
      v39 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v49 + 48))(v28, 1, v50))
      {
        memcpy(v31, v32, v46);
      }
      else
      {
        (*(void (**)(_QWORD *, const void *, uint64_t))(v49 + 16))(v31, v32, v50);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v31, 0, 1, v50);
      }
      v39 = 0;
      v41 = 0;
    }
    v40 = v53;
    v24 = v51;
  }
  *((_BYTE *)v31 + v12) = v39;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 16))(((unint64_t)v31 + v26) & v33, ((unint64_t)v32 + v26) & v33, v40);
  *((_BYTE *)v31 + v27) = v41;
  return v31;
}

_QWORD *sub_1003FD654(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  void (*v57)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v58;
  size_t __n;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  if (a1 == a2)
    return a1;
  v5 = *(_QWORD *)(a3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v64 = v7;
  v65 = AssociatedTypeWitness;
  v9 = *(_QWORD *)(v7 + 64);
  if (v8)
    v10 = v9;
  else
    v10 = v9 + 1;
  v62 = v10;
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = v10;
  v12 = swift_getAssociatedTypeWitness(0, v5);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11;
  v68 = ~v14;
  v69 = v11 + v14 + 1;
  v70 = v13;
  v16 = (v69 & ~v14) + *(_QWORD *)(v13 + 64);
  v17 = *(_QWORD *)(a3 + 40);
  v63 = swift_getAssociatedTypeWitness(0, v17);
  v18 = *(_QWORD *)(v63 - 8);
  v19 = *(_DWORD *)(v18 + 84);
  v20 = v18;
  v21 = *(_QWORD *)(v18 + 64);
  if (v19)
    v22 = v21;
  else
    v22 = v21 + 1;
  v23 = swift_getAssociatedTypeWitness(0, v17);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v67 = ~v25;
  __n = v22;
  if (v22 <= 8)
    v26 = 8;
  else
    v26 = v22;
  v27 = v26 + v25 + 1;
  v28 = (v27 & ~v25) + *(_QWORD *)(v24 + 64);
  if (v28 <= v16)
    v29 = v16;
  else
    v29 = v28;
  v30 = *((unsigned __int8 *)a1 + v29);
  if (v30 >= 2)
  {
    if (v29 <= 3)
      v31 = v29;
    else
      v31 = 4;
    __asm { BR              X12 }
  }
  v32 = v15;
  v33 = v12;
  v34 = v20;
  v35 = v23;
  if (v30 != 1)
  {
    v38 = *((unsigned __int8 *)a1 + v32);
    if (v38 >= 2)
    {
      if (v32 <= 3)
        v39 = v32;
      else
        v39 = 4;
      __asm { BR              X12 }
    }
    if (v38 == 1)
    {
      swift_errorRelease(*a1);
    }
    else
    {
      v45 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v64 + 48))(a1, 1, v65);
      v42 = v68;
      v41 = v69;
      v43 = v70;
      v44 = v12;
      if (v45)
        goto LABEL_43;
      (*(void (**)(_QWORD *, uint64_t))(v64 + 8))(a1, v65);
    }
    v42 = v68;
    v41 = v69;
    v43 = v70;
    v44 = v12;
    goto LABEL_43;
  }
  v36 = *((unsigned __int8 *)a1 + v26);
  if (v36 >= 2)
  {
    if (v26 <= 3)
      v37 = v26;
    else
      v37 = 4;
    __asm { BR              X12 }
  }
  if (v36 == 1)
  {
    swift_errorRelease(*a1);
LABEL_37:
    v41 = v27;
    v42 = v67;
    v43 = v24;
    v44 = v35;
    goto LABEL_43;
  }
  v40 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(a1, 1, v63);
  v41 = v27;
  v42 = v67;
  v43 = v24;
  v44 = v35;
  if (!v40)
  {
    (*(void (**)(_QWORD *, uint64_t))(v34 + 8))(a1, v63);
    goto LABEL_37;
  }
LABEL_43:
  (*(void (**)(unint64_t, uint64_t))(v43 + 8))(((unint64_t)a1 + v41) & v42, v44);
  v46 = *((unsigned __int8 *)a2 + v29);
  if (v46 >= 2)
  {
    if (v29 <= 3)
      v47 = v29;
    else
      v47 = 4;
    __asm { BR              X12 }
  }
  if (v46 == 1)
  {
    v48 = *((unsigned __int8 *)a2 + v26);
    if (v48 >= 2)
    {
      if (v26 <= 3)
        v49 = v26;
      else
        v49 = 4;
      __asm { BR              X12 }
    }
    if (v48 == 1)
    {
      v52 = *a2;
      swift_errorRetain(*a2);
      v53 = 1;
      v32 = v26;
      *a1 = v52;
      v54 = v67;
      v33 = v35;
      v55 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(a2, 1, v63))
      {
        memcpy(a1, a2, __n);
        v53 = 0;
        v55 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v34 + 16))(a1, a2, v63);
        v57 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56);
        v55 = 1;
        v57(a1, 0, 1, v63);
        v53 = 0;
      }
      v32 = v26;
      v54 = v67;
      v33 = v35;
    }
  }
  else
  {
    v50 = *((unsigned __int8 *)a2 + v32);
    if (v50 >= 2)
    {
      if (v32 <= 3)
        v51 = v32;
      else
        v51 = 4;
      __asm { BR              X12 }
    }
    v27 = v69;
    if (v50 == 1)
    {
      v58 = *a2;
      swift_errorRetain(*a2);
      v55 = 0;
      *a1 = v58;
      v53 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v64 + 48))(a2, 1, v65))
      {
        memcpy(a1, a2, v62);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v64 + 16))(a1, a2, v65);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v64 + 56))(a1, 0, 1, v65);
      }
      v53 = 0;
      v55 = 0;
    }
    v24 = v70;
    v54 = v68;
  }
  *((_BYTE *)a1 + v32) = v53;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 16))(((unint64_t)a1 + v27) & v54, ((unint64_t)a2 + v27) & v54, v33);
  *((_BYTE *)a1 + v29) = v55;
  return a1;
}

_QWORD *sub_1003FDDCC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  const void *v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  char v40;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = *(_QWORD *)(a3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6);
  v8 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v9 = *(_DWORD *)(v8 + 84);
  v46 = v8;
  v47 = AssociatedTypeWitness;
  v10 = *(_QWORD *)(v8 + 64);
  if (v9)
    v11 = v10;
  else
    v11 = v10 + 1;
  v12 = 8;
  v43 = v11;
  if (v11 <= 8)
    v13 = 8;
  else
    v13 = v11;
  v50 = swift_getAssociatedTypeWitness(0, v6);
  v51 = v13;
  v14 = *(_QWORD *)(v50 - 8);
  v15 = *(unsigned __int8 *)(v14 + 80);
  v48 = v14;
  v49 = v13 + v15 + 1;
  v16 = (v49 & ~v15) + *(_QWORD *)(v14 + 64);
  v17 = *(_QWORD *)(a3 + 40);
  v18 = swift_getAssociatedTypeWitness(0, v17);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_DWORD *)(v19 + 84);
  v44 = v19;
  v45 = v18;
  v21 = *(_QWORD *)(v19 + 64);
  if (v20)
    v22 = v21;
  else
    v22 = v21 + 1;
  v23 = swift_getAssociatedTypeWitness(0, v17);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  if (v22 > 8)
    v12 = v22;
  v26 = v12 + v25 + 1;
  if ((v26 & (unint64_t)~v25) + *(_QWORD *)(v24 + 64) <= v16)
    v27 = v16;
  else
    v27 = (v26 & ~v25) + *(_QWORD *)(v24 + 64);
  v28 = a2;
  v29 = *((unsigned __int8 *)a2 + v27);
  if (v29 >= 2)
  {
    if (v27 <= 3)
      v30 = v27;
    else
      v30 = 4;
    __asm { BR              X13 }
  }
  v31 = a1;
  v32 = a2;
  if (v29 == 1)
  {
    v33 = ~v25;
    v34 = *((unsigned __int8 *)v28 + v12);
    if (v34 >= 2)
    {
      if (v12 <= 3)
        v35 = v12;
      else
        v35 = 4;
      __asm { BR              X12 }
    }
    if (v34 == 1)
    {
      v38 = 1;
      *v31 = *v28;
    }
    else
    {
      if (!(*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v44 + 48))(v28, 1, v45))
      {
        (*(void (**)(_QWORD *, const void *, uint64_t))(v44 + 32))(v31, v32, v45);
        v40 = 1;
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v31, 0, 1, v45);
        v38 = 0;
        goto LABEL_45;
      }
      memcpy(v31, v32, v22);
      v38 = 0;
    }
    v40 = 1;
  }
  else
  {
    v33 = ~v15;
    v12 = v51;
    v36 = *((unsigned __int8 *)v28 + v51);
    if (v36 >= 2)
    {
      if (v51 <= 3)
        v37 = v51;
      else
        v37 = 4;
      __asm { BR              X12 }
    }
    v26 = v49;
    v23 = v50;
    v24 = v48;
    if (v36 == 1)
    {
      v40 = 0;
      *v31 = *v28;
      v38 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v46 + 48))(v28, 1, v47))
      {
        memcpy(v31, v32, v43);
      }
      else
      {
        (*(void (**)(_QWORD *, const void *, uint64_t))(v46 + 32))(v31, v32, v47);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v31, 0, 1, v47);
      }
      v38 = 0;
      v40 = 0;
    }
  }
LABEL_45:
  *((_BYTE *)v31 + v12) = v38;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 32))(((unint64_t)v31 + v26) & v33, ((unint64_t)v32 + v26) & v33, v23);
  *((_BYTE *)v31 + v27) = v40;
  return v31;
}

_QWORD *sub_1003FE274(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  void (*v54)(_QWORD *, _QWORD, uint64_t, uint64_t);
  uint64_t v55;
  size_t __n;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  if (a1 == a2)
    return a1;
  v5 = *(_QWORD *)(a3 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v5);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v60 = v7;
  v61 = AssociatedTypeWitness;
  v9 = *(_QWORD *)(v7 + 64);
  if (v8)
    v10 = v9;
  else
    v10 = v9 + 1;
  v58 = v10;
  if (v10 <= 8)
    v11 = 8;
  else
    v11 = v10;
  v12 = swift_getAssociatedTypeWitness(0, v5);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned __int8 *)(v13 + 80);
  v15 = v11;
  v64 = ~v14;
  v65 = v11 + v14 + 1;
  v66 = v13;
  v16 = (v65 & ~v14) + *(_QWORD *)(v13 + 64);
  v17 = *(_QWORD *)(a3 + 40);
  v59 = swift_getAssociatedTypeWitness(0, v17);
  v18 = *(_QWORD *)(v59 - 8);
  v19 = *(_DWORD *)(v18 + 84);
  v20 = v18;
  v21 = *(_QWORD *)(v18 + 64);
  if (v19)
    v22 = v21;
  else
    v22 = v21 + 1;
  v23 = swift_getAssociatedTypeWitness(0, v17);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(unsigned __int8 *)(v24 + 80);
  v63 = ~v25;
  __n = v22;
  if (v22 <= 8)
    v26 = 8;
  else
    v26 = v22;
  v27 = v26 + v25 + 1;
  v28 = (v27 & ~v25) + *(_QWORD *)(v24 + 64);
  if (v28 <= v16)
    v29 = v16;
  else
    v29 = v28;
  v30 = *((unsigned __int8 *)a1 + v29);
  if (v30 >= 2)
  {
    if (v29 <= 3)
      v31 = v29;
    else
      v31 = 4;
    __asm { BR              X12 }
  }
  v32 = v15;
  v33 = v12;
  v34 = v20;
  v35 = v23;
  if (v30 == 1)
  {
    v38 = *((unsigned __int8 *)a1 + v26);
    if (v38 >= 2)
    {
      if (v26 <= 3)
        v39 = v26;
      else
        v39 = 4;
      __asm { BR              X12 }
    }
    if (v38 == 1)
    {
      swift_errorRelease(*a1);
    }
    else
    {
      v45 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(a1, 1, v59);
      v41 = v27;
      v42 = v63;
      v43 = v24;
      v44 = v35;
      if (v45)
        goto LABEL_43;
      (*(void (**)(_QWORD *, uint64_t))(v34 + 8))(a1, v59);
    }
    v41 = v27;
    v42 = v63;
    v43 = v24;
    v44 = v35;
    goto LABEL_43;
  }
  v36 = *((unsigned __int8 *)a1 + v32);
  if (v36 >= 2)
  {
    if (v32 <= 3)
      v37 = v32;
    else
      v37 = 4;
    __asm { BR              X12 }
  }
  if (v36 == 1)
  {
    swift_errorRelease(*a1);
LABEL_37:
    v42 = v64;
    v41 = v65;
    v43 = v66;
    v44 = v12;
    goto LABEL_43;
  }
  v40 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v60 + 48))(a1, 1, v61);
  v42 = v64;
  v41 = v65;
  v43 = v66;
  v44 = v12;
  if (!v40)
  {
    (*(void (**)(_QWORD *, uint64_t))(v60 + 8))(a1, v61);
    goto LABEL_37;
  }
LABEL_43:
  (*(void (**)(unint64_t, uint64_t))(v43 + 8))(((unint64_t)a1 + v41) & v42, v44);
  v46 = *((unsigned __int8 *)a2 + v29);
  if (v46 >= 2)
  {
    if (v29 <= 3)
      v47 = v29;
    else
      v47 = 4;
    __asm { BR              X12 }
  }
  if (v46 == 1)
  {
    v48 = *((unsigned __int8 *)a2 + v26);
    if (v48 >= 2)
    {
      if (v26 <= 3)
        v49 = v26;
      else
        v49 = 4;
      __asm { BR              X12 }
    }
    if (v48 == 1)
    {
      v50 = 1;
      v32 = v26;
      *a1 = *a2;
      v55 = v63;
      v33 = v35;
      v51 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v34 + 48))(a2, 1, v59))
      {
        memcpy(a1, a2, __n);
        v50 = 0;
        v51 = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v34 + 32))(a1, a2, v59);
        v54 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56);
        v51 = 1;
        v54(a1, 0, 1, v59);
        v50 = 0;
      }
      v32 = v26;
      v55 = v63;
      v33 = v35;
    }
  }
  else
  {
    v52 = *((unsigned __int8 *)a2 + v32);
    if (v52 >= 2)
    {
      if (v32 <= 3)
        v53 = v32;
      else
        v53 = 4;
      __asm { BR              X12 }
    }
    v27 = v65;
    v24 = v66;
    if (v52 == 1)
    {
      v51 = 0;
      *a1 = *a2;
      v50 = 1;
    }
    else
    {
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v60 + 48))(a2, 1, v61))
      {
        memcpy(a1, a2, v58);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v60 + 32))(a1, a2, v61);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v60 + 56))(a1, 0, 1, v61);
      }
      v50 = 0;
      v51 = 0;
    }
    v55 = v64;
  }
  *((_BYTE *)a1 + v32) = v50;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v24 + 32))(((unint64_t)a1 + v27) & v55, ((unint64_t)a2 + v27) & v55, v33);
  *((_BYTE *)a1 + v29) = v51;
  return a1;
}

void sub_1003FE9A4()
{
  unsigned __int16 *v0;
  unsigned int v1;

  if (v1 >= 4)
  {
    if ((*v0 | (*((unsigned __int8 *)v0 + 2) << 16)) != 0xFFFFFFFF)
      JUMPOUT(0x1003FE804);
    JUMPOUT(0x1003FE948);
  }
  JUMPOUT(0x1003FE930);
}

uint64_t sub_1003FE9D8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t AssociatedTypeWitness;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  int v26;
  unsigned int v28;
  int v29;
  unsigned int v30;

  v4 = *(_QWORD *)(a3 + 32);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v4) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v4) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 64);
  v11 = *(_QWORD *)(a3 + 40);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v11) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = *(_QWORD *)(v12 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v11);
  if (v6)
    v16 = v7;
  else
    v16 = v7 + 1;
  v17 = 8;
  if (v16 <= 8)
    v16 = 8;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v19 = *(unsigned __int8 *)(v18 + 80);
  v20 = *(_QWORD *)(v18 + 64);
  v21 = ((v16 + v9 + 1) & ~v9) + v10;
  if (v13)
    v22 = v14;
  else
    v22 = v14 + 1;
  if (v22 > 8)
    v17 = v22;
  v23 = ((v17 + v19 + 1) & ~v19) + v20;
  if (v23 <= v21)
    v23 = v21;
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_31;
  v24 = v23 + 1;
  v25 = 8 * (v23 + 1);
  if ((v23 + 1) <= 3)
  {
    v28 = ((a2 + ~(-1 << v25) - 254) >> v25) + 1;
    if (HIWORD(v28))
    {
      v26 = *(_DWORD *)(a1 + v24);
      if (!v26)
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v28 > 0xFF)
    {
      v26 = *(unsigned __int16 *)(a1 + v24);
      if (!*(_WORD *)(a1 + v24))
        goto LABEL_31;
      goto LABEL_24;
    }
    if (v28 < 2)
    {
LABEL_31:
      v30 = *(unsigned __int8 *)(a1 + v23);
      if (v30 >= 2)
        return (v30 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v26 = *(unsigned __int8 *)(a1 + v24);
  if (!*(_BYTE *)(a1 + v24))
    goto LABEL_31;
LABEL_24:
  v29 = (v26 - 1) << v25;
  if (v24 > 3)
    v29 = 0;
  if ((_DWORD)v24)
  {
    if (v24 > 3)
      LODWORD(v24) = 4;
    __asm { BR              X11 }
  }
  return (v29 + 255);
}

void sub_1003FEC24(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t AssociatedTypeWitness;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  _BYTE *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;

  v5 = *(_QWORD *)(a4 + 32);
  v6 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v5) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v5) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_QWORD *)(a4 + 40);
  v13 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v12) - 8);
  v14 = *(_DWORD *)(v13 + 84);
  v15 = *(_QWORD *)(v13 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v12);
  if (v7)
    v17 = v8;
  else
    v17 = v8 + 1;
  v18 = 8;
  if (v17 <= 8)
    v17 = 8;
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = *(unsigned __int8 *)(v19 + 80);
  v21 = *(_QWORD *)(v19 + 64);
  v22 = ((v17 + v10 + 1) & ~v10) + v11;
  if (v14)
    v23 = v15;
  else
    v23 = v15 + 1;
  if (v23 > 8)
    v18 = v23;
  v24 = ((v18 + v20 + 1) & ~v20) + v21;
  if (v24 > v22)
    v22 = v24;
  v25 = v22 + 1;
  if (a3 < 0xFF)
  {
    v28 = 0;
    v26 = a1;
    v27 = a2;
  }
  else
  {
    v26 = a1;
    v27 = a2;
    if (v25 <= 3)
    {
      v30 = ((a3 + ~(-1 << (8 * v25)) - 254) >> (8 * v25)) + 1;
      if (HIWORD(v30))
      {
        v28 = &dword_100000004;
      }
      else if (v30 >= 0x100)
      {
        v28 = 2;
      }
      else
      {
        v28 = v30 > 1;
      }
    }
    else
    {
      v28 = &_mh_execute_header.magic + 1;
    }
  }
  if (v27 <= 0xFE)
    __asm { BR              X11 }
  v29 = v27 - 255;
  if (v25 < 4)
  {
    if ((_DWORD)v22 != -1)
    {
      v31 = v29 & ~(-1 << (8 * v25));
      bzero(v26, v25);
      if ((_DWORD)v25 == 3)
      {
        *(_WORD *)v26 = v31;
        v26[2] = BYTE2(v31);
      }
      else if ((_DWORD)v25 == 2)
      {
        *(_WORD *)v26 = v31;
      }
      else
      {
        *v26 = v31;
      }
    }
  }
  else
  {
    bzero(v26, v22 + 1);
    *(_DWORD *)v26 = v29;
  }
  __asm { BR              X10 }
}

uint64_t sub_1003FEEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v4) - 8);
  v6 = *(_DWORD *)(v5 + 84);
  v7 = *(_QWORD *)(v5 + 64);
  if (!v6)
    ++v7;
  if (v7 <= 8)
    v8 = 8;
  else
    v8 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4);
  v10 = ((v8 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v11) - 8);
  v13 = *(_DWORD *)(v12 + 84);
  v14 = *(_QWORD *)(v12 + 64);
  if (v13)
    v15 = v14;
  else
    v15 = v14 + 1;
  v16 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v11) - 8);
  v17 = *(unsigned __int8 *)(v16 + 80);
  v18 = *(_QWORD *)(v16 + 64);
  if (v15 <= 8)
    v19 = 8;
  else
    v19 = v15;
  v20 = ((v19 + v17 + 1) & ~v17) + v18;
  if (v20 <= v10)
    v20 = v10;
  result = *(unsigned __int8 *)(a1 + v20);
  if (result >= 2)
  {
    if (v20 <= 3)
      v22 = v20;
    else
      v22 = 4;
    __asm { BR              X12 }
  }
  return result;
}

uint64_t sub_1003FF0A0(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;
  unint64_t v19;
  size_t v20;
  char v21;
  int v22;

  v6 = *(_QWORD *)(a3 + 32);
  v7 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v6) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v9;
  if (v9 <= 8)
    v10 = 8;
  else
    v10 = v9;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6);
  v12 = ((v10 + *(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  v13 = *(_QWORD *)(a3 + 40);
  v14 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, v13) - 8);
  v15 = *(_DWORD *)(v14 + 84);
  v16 = *(_QWORD *)(v14 + 64);
  if (!v15)
    ++v16;
  if (v16 <= 8)
    v16 = 8;
  v17 = v16 + 1;
  result = swift_getAssociatedTypeWitness(0, v13);
  v19 = ((v17 + *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
      + *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
  if (a2 > 1)
  {
    if (v19 <= v12)
      v20 = v12;
    else
      v20 = ((v17 + *(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(result - 8) + 80))
          + *(_QWORD *)(*(_QWORD *)(result - 8) + 64);
    if (v20 <= 3)
      v21 = ((a2 - 2) >> (8 * v20)) + 2;
    else
      v21 = 2;
    a1[v20] = v21;
    if (v20 >= 4)
      v22 = 4;
    else
      v22 = v20;
    bzero(a1, v20);
    __asm { BR              X10 }
  }
  if (v19 <= v12)
    v19 = v12;
  a1[v19] = a2;
  return result;
}

uint64_t sub_1003FF284(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_getAssociatedTypeWitness(319, *(_QWORD *)(a1 + 32));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_getAssociatedTypeWitness(319, *(_QWORD *)(a1 + 40));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 0, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1003FF334(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v8)
    v11 = v8;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = (*(_BYTE *)(v10 + 80) | *(_BYTE *)(v7 + 80));
  if (v12 <= 7 && v11 + 1 <= 0x18 && ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0)
  {
    v16 = *((unsigned __int8 *)a2 + v11);
    if (v16 >= 2)
    {
      if (v11 <= 3)
        v17 = v11;
      else
        v17 = 4;
      __asm { BR              X13 }
    }
    if (v16 == 1)
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v10 + 16))(a1, a2, v9);
      *((_BYTE *)a1 + v11) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
      *((_BYTE *)a1 + v11) = 0;
    }
  }
  else
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain(v15);
  }
  return a1;
}

uint64_t sub_1003FF4C4(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 32));
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 40));
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  if (v9 <= v6)
    v9 = v6;
  v10 = *(unsigned __int8 *)(a1 + v9);
  if (v10 >= 2)
  {
    if (v9 <= 3)
      v11 = v9;
    else
      v11 = 4;
    __asm { BR              X14 }
  }
  if (v10 == 1)
  {
    v12 = v7;
  }
  else
  {
    v8 = v5;
    v12 = AssociatedTypeWitness;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v12);
}

uint64_t sub_1003FF5DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v8)
    v11 = v8;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = *(unsigned __int8 *)(a2 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X13 }
  }
  v14 = v12 == 1;
  if (v12 == 1)
  {
    v15 = v9;
  }
  else
  {
    v10 = v7;
    v15 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, a2, v15);
  *(_BYTE *)(a1 + v11) = v14;
  return a1;
}

uint64_t sub_1003FF70C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
    v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
    v10 = v9;
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) <= v8)
      v12 = v8;
    else
      v12 = *(_QWORD *)(v11 + 64);
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 1)
      v15 = *(_QWORD *)(v9 - 8);
    else
      v15 = v7;
    if (v13 == 1)
      v16 = v9;
    else
      v16 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v16);
    v17 = *(unsigned __int8 *)(a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = v17 == 1;
    if (v17 == 1)
      v20 = v11;
    else
      v20 = v7;
    if (v17 == 1)
      v21 = v10;
    else
      v21 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(a1, a2, v21);
    *(_BYTE *)(a1 + v12) = v19;
  }
  return a1;
}

uint64_t sub_1003FF8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
  v10 = *(_QWORD *)(v9 - 8);
  if (*(_QWORD *)(v10 + 64) <= v8)
    v11 = v8;
  else
    v11 = *(_QWORD *)(v10 + 64);
  v12 = *(unsigned __int8 *)(a2 + v11);
  if (v12 >= 2)
  {
    if (v11 <= 3)
      v13 = v11;
    else
      v13 = 4;
    __asm { BR              X13 }
  }
  v14 = v12 == 1;
  if (v12 == 1)
  {
    v15 = v9;
  }
  else
  {
    v10 = v7;
    v15 = AssociatedTypeWitness;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a1, a2, v15);
  *(_BYTE *)(a1 + v11) = v14;
  return a1;
}

uint64_t sub_1003FFA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  if (a1 != a2)
  {
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32));
    v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
    v8 = *(_QWORD *)(v7 + 64);
    v9 = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
    v10 = v9;
    v11 = *(_QWORD *)(v9 - 8);
    if (*(_QWORD *)(v11 + 64) <= v8)
      v12 = v8;
    else
      v12 = *(_QWORD *)(v11 + 64);
    v13 = *(unsigned __int8 *)(a1 + v12);
    if (v13 >= 2)
    {
      if (v12 <= 3)
        v14 = v12;
      else
        v14 = 4;
      __asm { BR              X12 }
    }
    if (v13 == 1)
      v15 = *(_QWORD *)(v9 - 8);
    else
      v15 = v7;
    if (v13 == 1)
      v16 = v9;
    else
      v16 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v16);
    v17 = *(unsigned __int8 *)(a2 + v12);
    if (v17 >= 2)
    {
      if (v12 <= 3)
        v18 = v12;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    v19 = v17 == 1;
    if (v17 == 1)
      v20 = v11;
    else
      v20 = v7;
    if (v17 == 1)
      v21 = v10;
    else
      v21 = AssociatedTypeWitness;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(a1, a2, v21);
    *(_BYTE *)(a1 + v12) = v19;
  }
  return a1;
}

uint64_t sub_1003FFBC4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t AssociatedTypeWitness;
  unint64_t v8;
  unint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32)) - 8) + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
  if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v6)
    v8 = v6;
  else
    v8 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_22;
  v9 = v8 + 1;
  v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    v13 = ((a2 + ~(-1 << v10) - 254) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      v15 = *(unsigned __int8 *)(a1 + v8);
      if (v15 >= 2)
        return (v15 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if ((_DWORD)v9)
  {
    if (v9 > 3)
      LODWORD(v9) = 4;
    __asm { BR              X11 }
  }
  return (v14 + 255);
}

void sub_1003FFD44(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 32)) - 8) + 64);
  v9 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a4 + 40)) - 8) + 64);
  if (v9 <= v8)
    v9 = v8;
  v10 = v9 + 1;
  if (a3 < 0xFF)
  {
    v11 = 0;
  }
  else if (v10 <= 3)
  {
    v13 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v13))
    {
      v11 = &dword_100000004;
    }
    else if (v13 >= 0x100)
    {
      v11 = 2;
    }
    else
    {
      v11 = v13 > 1;
    }
  }
  else
  {
    v11 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v12 = a2 - 255;
  if (v10 < 4)
  {
    if ((_DWORD)v9 != -1)
    {
      v14 = v12 & ~(-1 << (8 * v10));
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v14;
        a1[2] = BYTE2(v14);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v14;
      }
      else
      {
        *a1 = v14;
      }
    }
  }
  else
  {
    bzero(a1, v9 + 1);
    *(_DWORD *)a1 = v12;
  }
  __asm { BR              X10 }
}

uint64_t sub_1003FFF40(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 32)) - 8) + 64);
  v5 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a2 + 40)) - 8) + 64);
  if (v5 <= v4)
    v5 = v4;
  result = *(unsigned __int8 *)(a1 + v5);
  if (result >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X12 }
  }
  return result;
}

void sub_100400038(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t AssociatedTypeWitness;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;

  if (a2 > 1)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32)) - 8) + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40));
    if (*(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64) <= v8)
      v10 = v8;
    else
      v10 = *(_QWORD *)(*(_QWORD *)(AssociatedTypeWitness - 8) + 64);
    v11 = a2 - 2;
    if (v10 < 4)
    {
      v12 = v11 >> (8 * v10);
      v13 = v11 & ~(-1 << (8 * v10));
      a1[v10] = v12 + 2;
      bzero(a1, v10);
      if ((_DWORD)v10 == 3)
      {
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
      }
      else if ((_DWORD)v10 == 2)
      {
        *(_WORD *)a1 = v13;
      }
      else
      {
        *a1 = v13;
      }
    }
    else
    {
      a1[v10] = 2;
      bzero(a1, v10);
      *(_DWORD *)a1 = v11;
    }
  }
  else
  {
    v6 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 40)) - 8) + 64);
    v7 = *(_QWORD *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(a3 + 32)) - 8) + 64);
    if (v6 > v7)
      v7 = v6;
    a1[v7] = a2;
  }
}

uint64_t sub_1004001A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v25 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v13 = (char *)&v24 - v12;
  v14 = sub_100012E18(&qword_1005D4680);
  __chkstk_darwin(v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, AssociatedTypeWitness);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 64) & ~v18;
  v20 = (char *)swift_allocObject(&unk_100570000, v19 + v11, v18 | 7);
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  v21 = v25;
  *((_QWORD *)v20 + 6) = a4;
  *((_QWORD *)v20 + 7) = v21;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v20[v19], v13, AssociatedTypeWitness);
  v26[0] = a2;
  v26[1] = a3;
  v26[2] = a4;
  v26[3] = v21;
  v22 = type metadata accessor for Merge2StateMachine.Partial(0, (uint64_t)v26);
  return sub_1003F6074((uint64_t)v16, (uint64_t)&unk_1005DD8A0, (uint64_t)v20, v22);
}

uint64_t sub_100400330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];

  v25 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v13 = (char *)&v24 - v12;
  v14 = sub_100012E18(&qword_1005D4680);
  __chkstk_darwin(v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, AssociatedTypeWitness);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 64) & ~v18;
  v20 = (char *)swift_allocObject(&unk_100570050, v19 + v11, v18 | 7);
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = 0;
  *((_QWORD *)v20 + 4) = a2;
  *((_QWORD *)v20 + 5) = a3;
  v21 = v25;
  *((_QWORD *)v20 + 6) = v25;
  *((_QWORD *)v20 + 7) = a5;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v20[v19], v13, AssociatedTypeWitness);
  v26[0] = a2;
  v26[1] = a3;
  v26[2] = v21;
  v26[3] = a5;
  v22 = type metadata accessor for Merge2StateMachine.Partial(0, (uint64_t)v26);
  return sub_1003F6074((uint64_t)v16, (uint64_t)&unk_1005DD8C0, (uint64_t)v20, v22);
}

uint64_t sub_1004004B4()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v0 + 48));
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16), v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100400540(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, v6) - 8) + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = (uint64_t)v1 + ((v8 + 64) & ~v8);
  v12 = (_QWORD *)swift_task_alloc(dword_1005DD89C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100130768;
  return sub_1003F9888(a1, v9, v10, v11, v4, v5, v6, v7);
}

uint64_t sub_100400604()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100400628(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc(dword_1005DD8AC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100130768;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1005DD8A8 + dword_1005DD8A8))(a1, v4);
}

uint64_t sub_1004006A8()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 64) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16), v7);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100400734(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = v1[4];
  v5 = v1[5];
  v6 = v1[6];
  v7 = v1[7];
  v8 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, v7) - 8) + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = (uint64_t)v1 + ((v8 + 64) & ~v8);
  v12 = (_QWORD *)swift_task_alloc(dword_1005DD8BC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100145358;
  return sub_1003F9C9C(a1, v9, v10, v11, v4, v5, v6, v7);
}

uint64_t sub_1004007F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_100400814(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Array(0, a2);
  return a1;
}

uint64_t sub_10040083C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(*(_QWORD *)(*(_QWORD *)(a2 + 64) + 40), a1);
  return swift_continuation_resume(a2);
}

uint64_t sub_100400874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t ObjectType;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5[11] = a4;
  v5[12] = a5;
  v5[10] = a1;
  if (a2)
  {
    ObjectType = swift_getObjectType(a2);
    v9 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a3, v8);
    v11 = v10;
  }
  else
  {
    v9 = 0;
    v11 = 0;
  }
  return swift_task_switch(sub_1004008DC, v9, v11);
}

uint64_t sub_1004008DC()
{
  _QWORD *v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = (void (*)(uint64_t))v0[11];
  v0[7] = v0[10];
  v0[2] = v0;
  v0[3] = sub_100400938;
  v2 = swift_continuation_init(v0 + 2, 0);
  v1(v2);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_100400938()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  return (*(uint64_t (**)(void))(*v0 + 8))();
}

uint64_t AsyncChannel.Iterator.next()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[2] = a1;
  v3[3] = v2;
  v4 = *(_QWORD *)(a2 + 16);
  v3[4] = v4;
  v5 = type metadata accessor for Optional(0, v4);
  v3[5] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[6] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[7] = swift_task_alloc(v7);
  v3[8] = swift_task_alloc(v7);
  return swift_task_switch(sub_1004009F0, 0, 0);
}

uint64_t sub_1004009F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  char *v15;

  v1 = *(uint64_t **)(v0 + 24);
  if (*((_BYTE *)v1 + 8) == 1)
  {
    v2 = *(_QWORD *)(v0 + 32);
    v3 = *v1;
    *(_QWORD *)(v0 + 72) = *v1;
    v4 = swift_retain(v3);
    v8 = sub_100400C8C(v4, v5, v6, v7);
    swift_release(v3);
    v9 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 80) = v9;
    *(_QWORD *)(v9 + 16) = v3;
    *(_QWORD *)(v9 + 24) = v8;
    v10 = (_QWORD *)swift_task_alloc(48);
    *(_QWORD *)(v0 + 88) = v10;
    v10[2] = v2;
    v10[3] = v1;
    v10[4] = v8;
    v11 = unk_1005DD544;
    v15 = (char *)&dword_1005DD540 + dword_1005DD540;
    swift_retain(v3);
    v12 = (_QWORD *)swift_task_alloc(v11);
    *(_QWORD *)(v0 + 96) = v12;
    *v12 = v0;
    v12[1] = sub_100400B38;
    return ((uint64_t (*)(_QWORD, void (*)(), uint64_t, void *, _QWORD *, _QWORD))v15)(*(_QWORD *)(v0 + 64), sub_100400CF8, v9, &unk_1005DD8D8, v10, *(_QWORD *)(v0 + 40));
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 32) - 8) + 56))(*(_QWORD *)(v0 + 16), 1, 1);
    v14 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100400B38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release(v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100400BB0, 0, 0);
}

uint64_t sub_100400BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 32))(v1, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40));
  v3 = *(_QWORD *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v5 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 16);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 48) + 8))(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
    *(_BYTE *)(v5 + 8) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v6, 1, 1, v4);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 32);
    v8 = *(_QWORD *)(v0 + 16);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 32))(v8, *(_QWORD *)(v0 + 56), v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v8, 0, 1, v7);
  }
  v9 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100400C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = v4[2];
  v8 = *(_QWORD *)(*v4 + 80);
  type metadata accessor for AsyncChannel.State(0, v8, a3, a4);
  sub_10040328C((void (*)(uint64_t))sub_100402FFC, (uint64_t)&v7, v5);
  return v9;
}

void sub_100400CF8()
{
  uint64_t v0;

  sub_100400D1C(*(_QWORD *)(v0 + 24));
}

void sub_100400D1C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_QWORD *)(*v1 + 80);
  v4 = type metadata accessor for Optional(0, v3);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v13[-v6];
  v8 = v1[2];
  v14 = v3;
  v15 = a1;
  type metadata accessor for AsyncChannel.State(0, v3, v9, v10);
  v11 = type metadata accessor for UnsafeContinuation(255, v4, &type metadata for Never, &protocol witness table for Never);
  type metadata accessor for Optional(0, v11);
  sub_10040328C((void (*)(uint64_t))sub_100402FA0, (uint64_t)v13, v8);
  v12 = v16;
  if (v16)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v7, 1, 1, v3);
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(v5 + 32))(*(_QWORD *)(*(_QWORD *)(v12 + 64) + 40), v7, v4);
    swift_continuation_resume(v12);
  }
}

uint64_t sub_100400E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100400E54, 0, 0);
}

uint64_t sub_100400E54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = **(_QWORD ***)(v0 + 24);
  *(_QWORD *)(v0 + 40) = v1;
  v2 = dword_1005DDA9C;
  swift_retain(v1);
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 48) = v3;
  *v3 = v0;
  v3[1] = sub_100400EDC;
  v4 = *(_QWORD *)(v0 + 16);
  v3[3] = *(_QWORD *)(v0 + 32);
  v3[4] = v1;
  v3[2] = v4;
  v3[5] = *v1;
  return swift_task_switch(sub_100400FC4, 0, 0);
}

uint64_t sub_100400EDC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 40);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 48));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100400F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v6 = (_QWORD *)swift_task_alloc(dword_1005DD8D4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100145358;
  v6[3] = v5;
  v6[4] = v4;
  v6[2] = a1;
  return swift_task_switch(sub_100400E54, 0, 0);
}

uint64_t sub_100400FA0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  return swift_task_switch(sub_100400FC4, 0, 0);
}

uint64_t sub_100400FC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char *v8;

  v1 = v0[4];
  v2 = v0[5];
  v3 = v0[3];
  v4 = swift_task_alloc(32);
  v0[6] = v4;
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = v3;
  v8 = (char *)&dword_1005DDA90 + dword_1005DDA90;
  v5 = (_QWORD *)swift_task_alloc(unk_1005DDA94);
  v0[7] = v5;
  v6 = type metadata accessor for Optional(0, *(_QWORD *)(v2 + 80));
  *v5 = v0;
  v5[1] = sub_100401070;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, void (*)(uint64_t), uint64_t, uint64_t))v8)(v0[2], 0, 0, sub_100402F78, v4, v6);
}

uint64_t sub_100401070()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 48);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1004010C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1005DD8CC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100298040;
  return AsyncChannel.Iterator.next()(a1, a2);
}

uint64_t sub_100401120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v12;
  uint64_t v13;

  v12 = (_QWORD *)swift_task_alloc(_sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTu[1]);
  *(_QWORD *)(v6 + 16) = v12;
  *v12 = v6;
  v12[1] = sub_1004011A4;
  return _sScIsE4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKF(a1, a2, a3, a5, a6, v13);
}

uint64_t sub_1004011A4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_1004011F4(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

BOOL sub_100401218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1 == a4;
}

Swift::Int sub_100401224(Swift::UInt a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int sub_100401268()
{
  Swift::UInt *v0;

  return sub_100401224(*v0);
}

void sub_100401274(int a1)
{
  Swift::UInt *v1;

  sub_1004011F4(a1, *v1);
}

Swift::Int sub_100401280(uint64_t a1)
{
  Swift::UInt *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  sub_1004011F4((int)v3, *v1);
  return Hasher._finalize()();
}

BOOL sub_1004012C0(uint64_t *a1, uint64_t *a2)
{
  return sub_100401218(*a1, (uint64_t)a2, 0, *a2);
}

uint64_t sub_1004012D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t WitnessTable;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v25[2];
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[56];

  v5 = v4;
  v6 = *((unsigned __int8 *)v4 + 8);
  if ((_DWORD)v6)
  {
    if ((_DWORD)v6 == 1)
    {
      v29 = *v5;
      v8 = v29;
      v9 = *(_QWORD *)(a2 + 16);
      v25[0] = a1;
      v25[1] = 0;
      v26 = 0;
      v10 = type metadata accessor for AsyncChannel.Awaiting(255, v9, a3, a4);
      swift_bridgeObjectRetain(v29);
      WitnessTable = swift_getWitnessTable(&unk_1004691F8, v10);
      v12 = type metadata accessor for Set(0, v10, WitnessTable);
      Set.remove(_:)(&v27, v25, v12);
      if (v28 == 1)
        v6 = 0;
      else
        v6 = v28;
      v13 = v29;
      v14 = swift_bridgeObjectRetain(v29);
      v15 = Set.isEmpty.getter(v14);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v8);
      if ((v15 & 1) != 0)
      {
        swift_bridgeObjectRelease(v13);
        v13 = 0;
        v16 = 2;
      }
      else
      {
        v16 = 1;
      }
      *v5 = v13;
      *((_BYTE *)v5 + 8) = v16;
    }
    else
    {
      v17 = type metadata accessor for AsyncChannel.Awaiting(255, *(_QWORD *)(a2 + 16), a3, a4);
      v18 = type metadata accessor for _ContiguousArrayStorage(0, v17);
      inited = swift_initStackObject(v18, v30);
      v20 = static Array._adoptStorage(_:count:)(inited, 1);
      *(_QWORD *)v21 = a1;
      *(_QWORD *)(v21 + 8) = 0;
      *(_BYTE *)(v21 + 16) = 1;
      type metadata accessor for Array(0, v17);
      if (Array._getCount()())
      {
        v22 = swift_getWitnessTable(&unk_1004691F8, v17);
        v23 = (void *)sub_100402BEC(v20, v17, v22);
      }
      else
      {
        v23 = &_swiftEmptySetSingleton;
      }
      swift_bridgeObjectRelease(v20);
      v6 = 0;
      *v5 = (uint64_t)v23;
      *((_BYTE *)v5 + 8) = 1;
    }
  }
  return v6;
}

uint64_t sub_10040147C()
{
  return 0;
}

uint64_t AsyncChannel.__allocating_init(element:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = swift_allocObject(v0, 24, 7);
  AsyncChannel.init(element:)(v1, v2, v3, v4);
  return v1;
}

_QWORD *AsyncChannel.init(element:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;

  v5 = *(_QWORD *)(*v4 + 80);
  v11 = 0;
  v12 = 2;
  v13 = 0;
  v14 = 0;
  v6 = type metadata accessor for AsyncChannel.State(0, v5, a3, a4);
  v9 = sub_100403350((uint64_t)&v11, v6, v7, v8);
  swift_bridgeObjectRelease(0);
  v4[2] = v9;
  return v4;
}

void sub_100401528(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  __int16 v29;

  v6 = *(_QWORD *)(*a2 + 80);
  v7 = type metadata accessor for Optional(0, v6);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v17[-v9];
  v29 = 0;
  v11 = a2[2];
  v18 = v6;
  v19 = &v29;
  v20 = a3;
  v21 = a1;
  v22 = (char *)&v29 + 1;
  type metadata accessor for AsyncChannel.State(0, v6, v12, v13);
  v14 = type metadata accessor for UnsafeContinuation(255, v7, &type metadata for Never, &protocol witness table for Never);
  v15 = type metadata accessor for Optional(255, v14);
  v16 = type metadata accessor for UnsafeResumption(255, v15, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never);
  type metadata accessor for Optional(0, v16);
  sub_10040328C((void (*)(uint64_t))sub_100402F80, (uint64_t)v17, v11);
  if (v26)
  {
    v23 = v26;
    v24 = v27;
    v25 = v28 & 1;
    sub_1003F2FD0(v16);
  }
  if ((v29 & 0x100) != 0 || v29 == 1)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v10, 1, 1, v6);
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(v8 + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 40), v10, v7);
    swift_continuation_resume(a1);
  }
}

void sub_1004016D0(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v10;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char v39;
  char v40[56];
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;

  if (*(_BYTE *)(a1 + 24) == 1)
  {
    *a2 = 1;
LABEL_19:
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_BYTE *)(a7 + 16) = 0;
    return;
  }
  v10 = *(_QWORD *)a1;
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      v47 = *(_QWORD *)a1;
      v41 = a3;
      v42 = a4;
      v43 = 0;
      v13 = type metadata accessor for AsyncChannel.Awaiting(255, a6, a3, a4);
      swift_bridgeObjectRetain(v10);
      WitnessTable = swift_getWitnessTable(&unk_1004691F8, v13);
      v15 = type metadata accessor for Set(0, v13, WitnessTable);
      Set.update(with:)(&v44, &v41, v15);
      if (v45 != 1)
      {
        v41 = a3;
        v42 = 0;
        v43 = 0;
        Set.remove(_:)(&v44, &v41, v15);
        *a5 = 1;
      }
      v16 = v47;
      v17 = swift_bridgeObjectRetain(v47);
      v18 = Set.isEmpty.getter(v17);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v10);
      if ((v18 & 1) != 0)
      {
        swift_bridgeObjectRelease(v16);
        v16 = 0;
        v19 = 2;
      }
      else
      {
        v19 = 1;
      }
      *(_QWORD *)a1 = v16;
      *(_BYTE *)(a1 + 8) = v19;
    }
    else
    {
      v31 = type metadata accessor for AsyncChannel.Awaiting(255, a6, a3, a4);
      v32 = type metadata accessor for _ContiguousArrayStorage(0, v31);
      inited = swift_initStackObject(v32, v40);
      v34 = static Array._adoptStorage(_:count:)(inited, 1);
      *(_QWORD *)v35 = a3;
      *(_QWORD *)(v35 + 8) = a4;
      *(_BYTE *)(v35 + 16) = 0;
      type metadata accessor for Array(0, v31);
      if (Array._getCount()())
      {
        v36 = swift_getWitnessTable(&unk_1004691F8, v31);
        v37 = (void *)sub_100402BEC(v34, v31, v36);
      }
      else
      {
        v37 = &_swiftEmptySetSingleton;
      }
      swift_bridgeObjectRelease(v34);
      *(_QWORD *)a1 = v37;
      *(_BYTE *)(a1 + 8) = 1;
    }
    goto LABEL_19;
  }
  v41 = *(_QWORD *)a1;
  v20 = type metadata accessor for Optional(255, a6);
  v21 = type metadata accessor for UnsafeContinuation(255, v20, &type metadata for Never, &protocol witness table for Never);
  v22 = type metadata accessor for Optional(255, v21);
  v23 = type metadata accessor for UnsafeContinuation(255, v22, &type metadata for Never, &protocol witness table for Never);
  v24 = type metadata accessor for Array(0, v23);
  swift_bridgeObjectRetain(v10);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for [A], v24);
  RangeReplaceableCollection.removeFirst()(&v44, v24, v25);
  v26 = v44;
  v27 = v41;
  swift_bridgeObjectRetain(v41);
  v29 = Array.count.getter(v28, v23);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v10);
  if (v29)
  {
    v30 = 0;
  }
  else
  {
    swift_bridgeObjectRelease(v41);
    v27 = 0;
    v30 = 2;
  }
  *(_QWORD *)a1 = v27;
  *(_BYTE *)(a1 + 8) = v30;
  v47 = a4;
  sub_1003F2F00(v26, (uint64_t)&v47, v22, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, &v44);
  v38 = v45;
  v39 = v46;
  *(_QWORD *)a7 = v44;
  *(_QWORD *)(a7 + 8) = v38;
  *(_BYTE *)(a7 + 16) = v39;
}

void _s15AsyncAlgorithms0A7ChannelC6finishyyF_0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Bool IsNativeType;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41[16];
  uint64_t v42;
  _QWORD v43[2];

  v1 = *(_QWORD *)(*v0 + 80);
  v2 = type metadata accessor for Optional(0, v1);
  v40 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - v3;
  v5 = v0[2];
  v42 = v1;
  type metadata accessor for AsyncChannel.State(0, v1, v6, v7);
  v39 = v2;
  v8 = type metadata accessor for UnsafeContinuation(255, v2, &type metadata for Never, &protocol witness table for Never);
  v9 = type metadata accessor for Optional(255, v8);
  v10 = type metadata accessor for UnsafeContinuation(255, v9, &type metadata for Never, &protocol witness table for Never);
  v11 = type metadata accessor for Array(255, v10);
  v14 = type metadata accessor for AsyncChannel.Awaiting(255, v1, v12, v13);
  WitnessTable = swift_getWitnessTable(&unk_1004691F8, v14);
  v16 = type metadata accessor for Set(255, v14, WitnessTable);
  swift_getTupleTypeMetadata2(0, v11, v16, 0, 0);
  sub_10040328C((void (*)(uint64_t))sub_100402BC8, (uint64_t)v41, v5);
  v18 = v43[0];
  v17 = v43[1];
  if (Array.endIndex.getter(v43[0], v10))
  {
    v19 = 4;
    do
    {
      v20 = v19 - 4;
      IsNativeType = Array._hoistableIsNativeTypeChecked()();
      Array._checkSubscript(_:wasNativeTypeChecked:)(v19 - 4, IsNativeType, v18, v10);
      if (IsNativeType)
      {
        v22 = *(_QWORD *)(v18 + 8 * v19);
        v23 = v19 - 3;
        if (__OFADD__(v20, 1))
          goto LABEL_9;
      }
      else
      {
        v22 = _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v18, v10);
        swift_unknownObjectRelease(v22, v24);
        v23 = v19 - 3;
        if (__OFADD__(v20, 1))
        {
LABEL_9:
          __break(1u);
          break;
        }
      }
      v43[0] = 0;
      (*(void (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(*(_QWORD *)(*(_QWORD *)(v22 + 64) + 40), v43, v9);
      swift_continuation_resume(v22);
      ++v19;
    }
    while (v23 != Array.endIndex.getter(v18, v10));
  }
  v25 = swift_bridgeObjectRelease(v18);
  v26 = 0;
  v27 = v17 + 56;
  v28 = 1 << *(_BYTE *)(v17 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & *(_QWORD *)(v17 + 56);
  v31 = (unint64_t)(v28 + 63) >> 6;
  v32 = v39;
  while (v30)
  {
    v33 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    v34 = v33 | (v26 << 6);
LABEL_27:
    v38 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 24 * v34 + 8);
    if (v38)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v1 - 8) + 56))(v4, 1, 1, v1, v25);
      (*(void (**)(_QWORD, char *, uint64_t))(v40 + 32))(*(_QWORD *)(*(_QWORD *)(v38 + 64) + 40), v4, v32);
      swift_continuation_resume(v38);
    }
  }
  v35 = v26 + 1;
  if (__OFADD__(v26, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if (v35 >= v31)
    goto LABEL_29;
  v36 = *(_QWORD *)(v27 + 8 * v35);
  ++v26;
  if (v36)
    goto LABEL_26;
  v26 = v35 + 1;
  if (v35 + 1 >= v31)
    goto LABEL_29;
  v36 = *(_QWORD *)(v27 + 8 * v26);
  if (v36)
  {
LABEL_26:
    v30 = (v36 - 1) & v36;
    v34 = __clz(__rbit64(v36)) + (v26 << 6);
    goto LABEL_27;
  }
  v37 = v35 + 2;
  if (v37 >= v31)
  {
LABEL_29:
    swift_release(v17);
    return;
  }
  v36 = *(_QWORD *)(v27 + 8 * v37);
  if (v36)
  {
    v26 = v37;
    goto LABEL_26;
  }
  while (1)
  {
    v26 = v37 + 1;
    if (__OFADD__(v37, 1))
      break;
    if (v26 >= v31)
      goto LABEL_29;
    v36 = *(_QWORD *)(v27 + 8 * v26);
    ++v37;
    if (v36)
      goto LABEL_26;
  }
LABEL_31:
  __break(1u);
}

void sub_100401D60(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t WitnessTable;
  void *v19;

  if (*((_BYTE *)a1 + 24) != 1)
  {
    *((_BYTE *)a1 + 24) = 1;
    v7 = *a1;
    if (!*((_BYTE *)a1 + 8))
    {
      *a1 = 0;
      *((_BYTE *)a1 + 8) = 2;
      *a5 = v7;
      goto LABEL_6;
    }
    if (*((_BYTE *)a1 + 8) == 1)
    {
      *a1 = 0;
      *((_BYTE *)a1 + 8) = 2;
      v8 = type metadata accessor for Optional(255, a2);
      v9 = type metadata accessor for UnsafeContinuation(255, v8, &type metadata for Never, &protocol witness table for Never);
      v10 = type metadata accessor for Optional(255, v9);
      v11 = type metadata accessor for UnsafeContinuation(0, v10, &type metadata for Never, &protocol witness table for Never);
      *a5 = static Array._allocateUninitialized(_:)(0, v11);
      a5[1] = v7;
      return;
    }
  }
  v12 = type metadata accessor for Optional(255, a2);
  v13 = type metadata accessor for UnsafeContinuation(255, v12, &type metadata for Never, &protocol witness table for Never);
  v14 = type metadata accessor for Optional(255, v13);
  v15 = type metadata accessor for UnsafeContinuation(0, v14, &type metadata for Never, &protocol witness table for Never);
  *a5 = static Array._allocateUninitialized(_:)(0, v15);
LABEL_6:
  v16 = type metadata accessor for AsyncChannel.Awaiting(0, a2, a3, a4);
  v17 = static Array._allocateUninitialized(_:)(0, v16);
  if (Array._getCount()())
  {
    WitnessTable = swift_getWitnessTable(&unk_1004691F8, v16);
    v19 = (void *)sub_100402BEC(v17, v16, WitnessTable);
  }
  else
  {
    v19 = &_swiftEmptySetSingleton;
  }
  swift_bridgeObjectRelease(v17);
  a5[1] = v19;
}

uint64_t sub_100401F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch(sub_100401F24, 0, 0);
}

uint64_t sub_100401F24()
{
  int8x16_t *v0;
  int8x16_t *v1;
  int8x16_t **v2;

  v1 = (int8x16_t *)swift_task_alloc(32);
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  if (!sub_100403584(2, 18, 0, 0))
    return swift_task_switch(sub_100402058, 0, 0);
  v2 = (int8x16_t **)swift_task_alloc(async function pointer to withTaskCancellationHandler<A>(operation:onCancel:isolation:)[1]);
  v0[2].i64[1] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (int8x16_t *)sub_100401FEC;
  return withTaskCancellationHandler<A>(operation:onCancel:isolation:)(v2, &unk_1005DDA88, v1, j___s15AsyncAlgorithms0A7ChannelC6finishyyF, v0[1].i64[1], 0, 0, (char *)&type metadata for () + 8);
}

uint64_t sub_100401FEC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;

  v2 = *v1;
  result = swift_task_dealloc(*(_QWORD *)(*v1 + 40));
  if (!v0)
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 32));
    return swift_task_switch(sub_10029F7D4, 0, 0);
  }
  return result;
}

uint64_t sub_100402058()
{
  uint64_t *v0;
  uint64_t **v1;

  v0[6] = swift_task_addCancellationHandler(j___s15AsyncAlgorithms0A7ChannelC6finishyyF, v0[3]);
  v1 = (uint64_t **)swift_task_alloc(dword_1005DDA84);
  v0[7] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1004020B4;
  return sub_100402164((uint64_t)v1, v0[3], v0[2]);
}

uint64_t sub_1004020B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 56));
  if (v0)
    v2 = sub_10040215C;
  else
    v2 = sub_100402118;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100402118()
{
  uint64_t v0;

  swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return swift_task_switch(sub_10029F7D4, 0, 0);
}

uint64_t sub_10040215C()
{
  uint64_t v0;

  return swift_task_removeCancellationHandler(*(_QWORD *)(v0 + 48));
}

uint64_t sub_100402164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 80);
  v3[5] = v4;
  v5 = type metadata accessor for Optional(0, v4);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v3[8] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1004021D0, 0, 0);
}

uint64_t sub_1004021D0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[6];
  v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1005DDA90 + dword_1005DDA90);
  v2 = (_QWORD *)swift_task_alloc(unk_1005DDA94);
  v0[9] = v2;
  v3 = type metadata accessor for UnsafeContinuation(255, v1, &type metadata for Never, &protocol witness table for Never);
  type metadata accessor for Optional(0, v3);
  *v2 = v0;
  v2[1] = sub_100402280;
  return v5((uint64_t)(v0 + 2), 0, 0, (uint64_t)sub_100402F58, v0[3]);
}

uint64_t sub_100402280()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  return swift_task_switch(sub_1004022D4, 0, 0);
}

uint64_t sub_1004022D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 56);
    v2 = *(_QWORD *)(v0 + 64);
    v5 = *(_QWORD *)(v0 + 40);
    v4 = *(_QWORD *)(v0 + 48);
    v6 = *(_QWORD *)(v5 - 8);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v2, *(_QWORD *)(v0 + 32), v5);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v2, 0, 1, v5);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(*(_QWORD *)(*(_QWORD *)(v1 + 64) + 40), v2, v4);
    swift_continuation_resume(v1);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100402378(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = a2[2];
  v10 = *(_QWORD *)(*a2 + 80);
  v11 = a1;
  type metadata accessor for AsyncChannel.State(0, v10, a3, a4);
  v5 = type metadata accessor for Optional(255, v10);
  v6 = type metadata accessor for UnsafeContinuation(255, v5, &type metadata for Never, &protocol witness table for Never);
  v7 = type metadata accessor for Optional(255, v6);
  v8 = type metadata accessor for UnsafeResumption(255, v7, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never);
  type metadata accessor for Optional(0, v8);
  sub_10040328C((void (*)(uint64_t))sub_100402F60, (uint64_t)&v9, v4);
  if (v15)
  {
    v12 = v15;
    v13 = v16;
    v14 = v17 & 1;
    sub_1003F2FD0(v8);
  }
}

uint64_t sub_10040246C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t WitnessTable;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;

  if (*(_BYTE *)(a1 + 24) != 1)
  {
    v13 = *(_QWORD *)a1;
    if (*(_BYTE *)(a1 + 8))
    {
      if (*(_BYTE *)(a1 + 8) == 1)
      {
        v44 = *(_QWORD *)a1;
        v14 = type metadata accessor for AsyncChannel.Awaiting(255, a3, a3, a4);
        swift_bridgeObjectRetain(v13);
        WitnessTable = swift_getWitnessTable(&unk_1004691F8, v14);
        v16 = type metadata accessor for Set(0, v14, WitnessTable);
        Set.removeFirst()(&v41, v16);
        v39 = v42;
        v17 = v44;
        v18 = swift_bridgeObjectRetain(v44);
        v19 = Set.count.getter(v18);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v13);
        if (v19)
        {
          v20 = 1;
        }
        else
        {
          swift_bridgeObjectRelease(v17);
          v17 = 0;
          v20 = 2;
        }
        *(_QWORD *)a1 = v17;
        *(_BYTE *)(a1 + 8) = v20;
        v40 = v39;
        v35 = type metadata accessor for Optional(255, a3);
        v36 = type metadata accessor for UnsafeContinuation(255, v35, &type metadata for Never, &protocol witness table for Never);
        v10 = type metadata accessor for Optional(0, v36);
        v11 = &v40;
        goto LABEL_12;
      }
      v27 = type metadata accessor for Optional(255, a3);
      v28 = type metadata accessor for UnsafeContinuation(255, v27, &type metadata for Never, &protocol witness table for Never);
      v29 = type metadata accessor for Optional(255, v28);
      v30 = type metadata accessor for UnsafeContinuation(255, v29, &type metadata for Never, &protocol witness table for Never);
      v31 = type metadata accessor for _ContiguousArrayStorage(0, v30);
      v32 = swift_allocObject(v31, 40, 7);
      v33 = static Array._adoptStorage(_:count:)(v32, 1);
      *v34 = a2;
      result = type metadata accessor for Array(0, v30);
      *(_QWORD *)a1 = v33;
    }
    else
    {
      v41 = *(_QWORD *)a1;
      v44 = a2;
      v21 = type metadata accessor for Optional(255, a3);
      v22 = type metadata accessor for UnsafeContinuation(255, v21, &type metadata for Never, &protocol witness table for Never);
      v23 = type metadata accessor for Optional(255, v22);
      v24 = type metadata accessor for UnsafeContinuation(255, v23, &type metadata for Never, &protocol witness table for Never);
      v25 = type metadata accessor for Array(0, v24);
      result = Array.append(_:)(&v44, v25);
      *(_QWORD *)a1 = v41;
    }
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 0;
    return result;
  }
  v44 = 0;
  v8 = type metadata accessor for Optional(255, a3);
  v9 = type metadata accessor for UnsafeContinuation(255, v8, &type metadata for Never, &protocol witness table for Never);
  v10 = type metadata accessor for Optional(0, v9);
  v11 = &v44;
LABEL_12:
  result = sub_1003F2F00(a2, (uint64_t)v11, v10, (uint64_t)&type metadata for Never, (uint64_t)&protocol witness table for Never, &v41);
  v37 = v42;
  v38 = v43;
  *(_QWORD *)a5 = v41;
  *(_QWORD *)(a5 + 8) = v37;
  *(_BYTE *)(a5 + 16) = v38;
  return result;
}

uint64_t AsyncChannel.send(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1005DD8EC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100130768;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_100401F24, 0, 0);
}

uint64_t AsyncChannel.makeAsyncIterator()()
{
  uint64_t v0;

  return swift_retain(v0);
}

uint64_t AsyncChannel.deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t AsyncChannel.__deallocating_deinit()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

void sub_100402824(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1;
  v4 = AsyncChannel.makeAsyncIterator()();
  swift_release(v3);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t type metadata accessor for AsyncChannel.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel.State);
}

void *sub_100402874()
{
  return &protocol witness table for Never;
}

uint64_t sub_100402880(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for AsyncChannel<A>.Iterator, a1);
}

uint64_t sub_100402890(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.NativeObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 88);
}

uint64_t type metadata accessor for AsyncChannel(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel);
}

uint64_t sub_1004028E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_retain(v3);
  return a1;
}

uint64_t sub_100402914(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *sub_10040291C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *sub_100402968(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t sub_1004029A4(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1004029EC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for AsyncChannel.Iterator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel.Iterator);
}

uint64_t sub_100402A38(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t sub_100402A40(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *sub_100402A84(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v6);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

uint64_t *sub_100402AE0(uint64_t *a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;

  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  return a1;
}

uint64_t sub_100402B2C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_100402B80(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

void sub_100402BC8(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;

  sub_100401D60(a1, *(_QWORD *)(v4 + 16), a2, a3, a4);
}

uint64_t type metadata accessor for AsyncChannel.Awaiting(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel.Awaiting);
}

uint64_t sub_100402BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  Swift::Bool IsNativeType;
  void (*v21)(char *, unint64_t, uint64_t);
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  Swift::Int v45;
  void (*v46)(char *, char *, uint64_t);
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;

  v5 = a1;
  v50 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v49 = (char *)&v42 - v10;
  v42 = v11;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v42 - v13;
  v16 = Array.count.getter(v12, v15);
  if (v16)
  {
    v17 = v16;
    type metadata accessor for _SetStorage(0, a2, a3);
    v18 = (_QWORD *)static _SetStorage.allocate(capacity:)(v17);
  }
  else
  {
    v18 = &_swiftEmptySetSingleton;
  }
  v45 = Array._getCount()();
  if (!v45)
    return (uint64_t)v18;
  v19 = 0;
  v48 = (char *)(v18 + 7);
  v43 = v14;
  v44 = v5;
  while (1)
  {
    IsNativeType = Array._hoistableIsNativeTypeChecked()();
    Array._checkSubscript(_:wasNativeTypeChecked:)(v19, IsNativeType, v5, a2);
    if (IsNativeType)
    {
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v50 + 16);
      v21(v14, v5+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(_QWORD *)(v50 + 72) * v19, a2);
      v22 = __OFADD__(v19, 1);
      v23 = v19 + 1;
      if (v22)
        goto LABEL_20;
    }
    else
    {
      result = _ArrayBuffer._getElementSlowPath(_:)(v19, v5, a2);
      if (v42 != 8)
        goto LABEL_23;
      v40 = result;
      v51 = result;
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v50 + 16);
      v21(v14, (unint64_t)&v51, a2);
      swift_unknownObjectRelease(v40, v41);
      v22 = __OFADD__(v19, 1);
      v23 = v19 + 1;
      if (v22)
      {
LABEL_20:
        __break(1u);
        return (uint64_t)v18;
      }
    }
    v24 = v50;
    v46 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    v47 = v23;
    v46(v49, v14, a2);
    v25 = dispatch thunk of Hashable._rawHashValue(seed:)(v18[5], a2, a3);
    v26 = -1 << *((_BYTE *)v18 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    v29 = *(_QWORD *)&v48[8 * (v27 >> 6)];
    v30 = 1 << v27;
    v31 = *(_QWORD *)(v24 + 72);
    if (((1 << v27) & v29) != 0)
    {
      v32 = ~v26;
      do
      {
        v21(v8, v18[6] + v31 * v27, a2);
        v33 = a3;
        v34 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v49, a2, *(_QWORD *)(a3 + 8));
        v35 = *(void (**)(char *, uint64_t))(v50 + 8);
        v35(v8, a2);
        if ((v34 & 1) != 0)
        {
          v35(v49, a2);
          a3 = v33;
          v14 = v43;
          v5 = v44;
          goto LABEL_7;
        }
        v27 = (v27 + 1) & v32;
        v28 = v27 >> 6;
        v29 = *(_QWORD *)&v48[8 * (v27 >> 6)];
        v30 = 1 << v27;
        a3 = v33;
      }
      while ((v29 & (1 << v27)) != 0);
      v14 = v43;
      v5 = v44;
    }
    v36 = v49;
    *(_QWORD *)&v48[8 * v28] = v30 | v29;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v46)(v18[6] + v31 * v27, v36, a2);
    v38 = v18[2];
    v22 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v22)
      break;
    v18[2] = v39;
LABEL_7:
    v19 = v47;
    if (v47 == v45)
      return (uint64_t)v18;
  }
  __break(1u);
LABEL_23:
  __break(1u);
  return result;
}

uint64_t sub_100402EF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1005DDA84);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100130768;
  return sub_100402164(a1, v5, v4);
}

void sub_100402F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  sub_100402378(a1, v4, a3, a4);
}

uint64_t sub_100402F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;

  return sub_10040246C(a1, *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 16), a2, a3);
}

void sub_100402F78(uint64_t a1)
{
  uint64_t v1;

  sub_100401528(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100402F80(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  sub_1004016D0(a1, *(_BYTE **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE **)(v2 + 48), *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100402FA0@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  v7 = type metadata accessor for AsyncChannel.Emission(0, v5, a1, a2);
  result = sub_1004012D4(v6, v7, v8, v9);
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for AsyncChannel.Emission(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AsyncChannel.Emission);
}

uint64_t sub_100402FFC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 16);
  *a2 = v2;
  *(_QWORD *)(result + 16) = v2 + 1;
  return result;
}

uint64_t sub_100403010(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t sub_10040306C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

uint64_t sub_1004030C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 8);
}

uint64_t sub_1004030C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *sub_1004030FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t *sub_10040313C(uint64_t *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;

  v3 = *((_BYTE *)a2 + 8);
  v4 = *a1;
  *a1 = *a2;
  *((_BYTE *)a1 + 8) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_100403174(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t sub_1004031BC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100403200(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u)
    return *(unsigned __int8 *)(a1 + 8);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100403218(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 8) = a2;
  return result;
}

uint64_t sub_100403230(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1004691D0, a1);
}

uint64_t sub_10040324C(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, qword_1005DDBA0 + a1 + 8);
}

void sub_10040328C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  os_unfair_lock_s *v5;

  v4 = a3 + *(_QWORD *)(class metadata base offset for ManagedBuffer + *(_QWORD *)a3 + 16);
  v5 = (os_unfair_lock_s *)(a3 + ((*(unsigned int *)(*(_QWORD *)a3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_100403318()
{
  uint64_t v0;

  v0 = ManagedBuffer.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t type metadata accessor for ManagedCriticalState.LockedBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedCriticalState.LockedBuffer);
}

uint64_t type metadata accessor for ManagedCriticalState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014BDB0(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ManagedCriticalState);
}

uint64_t sub_100403350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v6[4];

  type metadata accessor for ManagedCriticalState.LockedBuffer(0, a2, a3, a4);
  v6[2] = a1;
  return static ManagedBuffer.create(minimumCapacity:makingHeaderWith:)(1, sub_10012957C, v6);
}

uint64_t sub_1004033A4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_1004033BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v5 = a1[3];
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(a1);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v18 - v11;
  __chkstk_darwin(v10);
  (*(void (**)(char *))(v14 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_1004034E8(a1, (uint64_t)v12, a2);
  if (v2)
  {
    v16 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v16(v9, v12, v5);
    swift_allocError(v5, a1[4], 0, 0);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v16)(v17, v9, v5);
  }
  return result;
}

uint64_t sub_1004034E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(v3, a1) != 1)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a1[2] - 8) + 32))(a3, v3);
  v7 = a1[3];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, v3, v7);
  return swift_willThrowTypedImpl(a2, v7, a1[4]);
}

uint64_t sub_10040357C()
{
  return sub_100403714(1);
}

uint64_t sub_100403584(int a1, int a2, int a3, int a4)
{
  BOOL v9;
  _DWORD v10[2];

  if (qword_100601548 == -1)
  {
    if (qword_100601550)
    {
LABEL_3:
      v10[0] = a1;
      v10[1] = (a2 << 16) | (a3 << 8) | a4;
      return _availability_version_check(1, v10);
    }
  }
  else
  {
    dispatch_once_f(&qword_100601548, 0, (dispatch_function_t)sub_10040370C);
    if (qword_100601550)
      goto LABEL_3;
  }
  if (qword_100601540 == -1)
  {
    v9 = dword_100601530 < a2;
    if (dword_100601530 > a2)
      return 1;
  }
  else
  {
    dispatch_once_f(&qword_100601540, 0, (dispatch_function_t)sub_10040357C);
    v9 = dword_100601530 < a2;
    if (dword_100601530 > a2)
      return 1;
  }
  if (v9)
    return 0;
  if (dword_100601534 > a3)
    return 1;
  return dword_100601534 >= a3 && dword_100601538 >= a4;
}

uint64_t sub_10040370C()
{
  return sub_100403714(0);
}

uint64_t sub_100403714(uint64_t result)
{
  void *v1;
  BOOL v2;
  unsigned __int8 *v4;
  uint64_t (*v5)(_QWORD);
  unint64_t v6;
  uint64_t (*v7)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t (*v8)(_QWORD, const char *, uint64_t, unsigned __int8 *);
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t (*v10)(uint64_t);
  uint64_t (*v11)(void);
  FILE *v12;
  FILE *v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  FILE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  FILE *v27;
  unsigned int (*v28)(uint64_t, char *, uint64_t, uint64_t);
  char v29[32];

  v1 = (void *)qword_100601550;
  if (qword_100601550)
    v2 = (_DWORD)result == 0;
  else
    v2 = 0;
  if (!v2)
  {
    if (&__availability_version_check)
    {
      qword_100601550 = (uint64_t)&__availability_version_check;
      v1 = &__availability_version_check;
    }
    if (!v1 || (_DWORD)result != 0)
    {
      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "kCFAllocatorNull");
      if (result)
      {
        v4 = *(unsigned __int8 **)result;
        result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDataCreateWithBytesNoCopy");
        if (result)
        {
          v5 = (uint64_t (*)(_QWORD))result;
          v6 = (unint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateWithData");
          result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFPropertyListCreateFromXMLData");
          if (v6 | result)
          {
            v7 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))result;
            result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringCreateWithCStringNoCopy");
            if (result)
            {
              v8 = (uint64_t (*)(_QWORD, const char *, uint64_t, unsigned __int8 *))result;
              result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFDictionaryGetValue");
              if (result)
              {
                v9 = (uint64_t (*)(uint64_t, uint64_t))result;
                result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFGetTypeID");
                if (result)
                {
                  v10 = (uint64_t (*)(uint64_t))result;
                  result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetTypeID");
                  if (result)
                  {
                    v11 = (uint64_t (*)(void))result;
                    result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFStringGetCString");
                    v28 = (unsigned int (*)(uint64_t, char *, uint64_t, uint64_t))result;
                    if (result)
                    {
                      result = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "CFRelease");
                      if (result)
                      {
                        v12 = (FILE *)result;
                        result = (uint64_t)fopen("/System/Library/CoreServices/SystemVersion.plist", "r");
                        if (result)
                        {
                          v13 = (FILE *)result;
                          v27 = v12;
                          fseek((FILE *)result, 0, 2);
                          v14 = ftell(v13);
                          if (v14 < 0)
                          {
                            v16 = 0;
                          }
                          else
                          {
                            v15 = v14;
                            rewind(v13);
                            v16 = malloc(v15);
                            if (v16)
                            {
                              v26 = v16;
                              if (fread(v16, 1uLL, v15, v13) == v15)
                              {
                                v17 = v5(0);
                                if (v17)
                                {
                                  v18 = v17;
                                  v19 = v13;
                                  if (v6)
                                    v20 = ((uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))v6)(0, v17, 0, 0, 0);
                                  else
                                    v20 = v7(0, v17, 0, 0);
                                  v21 = v20;
                                  if (v20)
                                  {
                                    v22 = v8(0, "ProductVersion", 1536, v4);
                                    if (v22)
                                    {
                                      v23 = v22;
                                      v24 = v9(v21, v22);
                                      ((void (*)(uint64_t))v27)(v23);
                                      if (v24)
                                      {
                                        v25 = v10(v24);
                                        if (v25 == v11())
                                        {
                                          if (v28(v24, v29, 32, 134217984))
                                            sscanf(v29, "%d.%d.%d", &dword_100601530, &dword_100601534, &dword_100601538);
                                        }
                                      }
                                    }
                                    ((void (*)(uint64_t))v27)(v21);
                                    v19 = v13;
                                  }
                                  ((void (*)(uint64_t))v27)(v18);
                                }
                                else
                                {
                                  v19 = v13;
                                }
                                v16 = v26;
                              }
                              else
                              {
                                v16 = v26;
                                v19 = v13;
                              }
                              goto LABEL_41;
                            }
                          }
                          v19 = v13;
LABEL_41:
                          free(v16);
                          return fclose(v19);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_100403A44(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "self.noteContainerViewMode should not be ICNoteContainerViewModeUnspecified.", v1, 2u);
}

void sub_100403A84()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100015ED0();
  sub_10001603C((void *)&_mh_execute_header, v0, v1, "Could not open application because %@", v2);
  sub_100015EC8();
}

void sub_100403AE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Attempting sync because we're missing the note", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100403B14(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100015EBC((void *)&_mh_execute_header, a3, (uint64_t)a3, "Showing note (%@) -- no sync was needed", (uint8_t *)a2);

  sub_100041B04();
}

void sub_100403B5C(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_10001603C((void *)&_mh_execute_header, a2, a3, "Unable to show note (%@) after syncing", (uint8_t *)&v4);
  sub_100015EC8();
}

void sub_100403BC8(uint64_t a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = objc_msgSend((id)sub_100041AF0(a1), "ic_loggingIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, a2, v5, "Showing note (%@) after syncing", v6);

  sub_100015F28();
}

void sub_100403C48()
{
  NSObject *v0;
  uint8_t v1[24];

  sub_100041AD8();
  sub_100015F34((void *)&_mh_execute_header, v0, (uint64_t)v0, "Unable to show note (%@) due to a syncing error: %@", v1);
  sub_100015EC8();
}

void sub_100403CB8(void *a1, void *a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a3 = 138412546;
  *(_QWORD *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  sub_100015F40((void *)&_mh_execute_header, a4, a3, "Attempting sync because we're missing the inline attachment (%@) or note (%@)", (uint8_t *)a3);

  sub_100041B04();
}

void sub_100403D18(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100015EBC((void *)&_mh_execute_header, a3, (uint64_t)a3, "Showing inline attachment (%@) -- no sync was needed", (uint8_t *)a2);

  sub_100041B04();
}

void sub_100403D60()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100041AD8();
  sub_100015F34((void *)&_mh_execute_header, v0, v1, "Unable to show inline attachment (%@) or note (%@) after syncing", v2);
  sub_100015EC8();
}

void sub_100403DCC(uint64_t a1, NSObject *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint8_t v6[24];

  v3 = objc_msgSend((id)sub_100041AF0(a1), "ic_loggingIdentifier");
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, a2, v5, "Showing note (%@) after syncing (couldn't find the inline attachment)", v6);

  sub_100015F28();
}

void sub_100403E4C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;

  v5 = objc_msgSend((id)sub_100041AF0(a1), "ic_loggingIdentifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 40), "ic_loggingIdentifier"));
  v9 = 138412546;
  v10 = v6;
  v11 = 2112;
  v12 = v7;
  sub_100015F40((void *)&_mh_execute_header, a3, v8, "Showing note (%@) or inline attachment (%@) after syncing", (uint8_t *)&v9);

  sub_100015EDC();
}

void sub_100403F00()
{
  __int16 v0;
  uint64_t v1;
  os_log_t v2;
  uint8_t v3[22];
  __int16 v4;
  uint64_t v5;

  sub_100041AD8();
  v4 = v0;
  v5 = v1;
  _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Unable to show inline attachment (%@) or note (%@) due to a syncing error: %@", v3, 0x20u);
}

void sub_100403F88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Dismissing already-presented attachment", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100403FB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Done dismissing already-presented attachment", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100403FE0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016058((void *)&_mh_execute_header, v0, v1, "Couldn't get FBSScene to dismiss system paper via BSAction/ICSystemPaperSceneViewController.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040400C(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "description"));
  sub_100015ED0();
  sub_10001603C((void *)&_mh_execute_header, a2, v4, "Error closing aux window: %@", v5);

  sub_100015F28();
}

void sub_10040408C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Aux scene destruction finished.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004040B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "About to open startup presenter", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004040E4(char a1, char a2, os_log_t log)
{
  _DWORD v3[2];
  __int16 v4;
  int v5;

  v3[0] = 67109376;
  v3[1] = a1 & 1;
  v4 = 1024;
  v5 = a2 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "willShowWelcomeScreen: %d forceWelcomeScreen=%d", (uint8_t *)v3, 0xEu);
  sub_100015EC8();
}

void sub_10040416C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412290;
  v5 = v3;
  sub_10001603C((void *)&_mh_execute_header, a2, a3, "Could not generate PDF %@", (uint8_t *)&v4);
  sub_100015EC8();
}

void sub_1004041D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote on lock screen", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404204()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote on lock screen after tapping action arrow", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404230()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote on lock screen after tapping iCloud sharing button", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040425C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote after tapping attachment", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404288(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "currentVirtualSmartFolderType"));
  sub_100015ED0();
  sub_10001603C((void *)&_mh_execute_header, a2, v4, "Invalid virtual smart folder type {type: %@}", v5);

  sub_100015F28();
}

void sub_10040430C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016058((void *)&_mh_execute_header, v0, v1, "The Notes today extension is not supported anymore.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404338(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingIdentifier"));
  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, a2, v4, "Setting isSystemPaper on newly created note: %@", v5);

  sub_100015F28();
}

void sub_1004043B8()
{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[14];
  uint64_t v3;

  sub_100041B0C();
  v3 = v0;
  sub_100015F34((void *)&_mh_execute_header, v1, (uint64_t)v1, "Failed to create new note for %@ with error: %@", v2);
  sub_100015EC8();
}

void sub_100404424(void *a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  uint8_t v7[14];
  uint64_t v8;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "localizedDescription"));
  sub_100041B0C();
  v8 = a2;
  sub_100015F34((void *)&_mh_execute_header, a3, v6, "Error %@ at URL (getting type identifier): %@", v7);

  sub_100015EDC();
}

void sub_1004044B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Transitioning to Notes from QuickNote after tapping Note Link", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004044DC()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, v0, v1, "Handling QuickNote URL: %@", v2);
  sub_100015EC8();
}

void sub_100404540()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Tried to provide feedback on a nil attachment.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040456C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Tried to provide feedback on something that wasn't an audio attachment.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404598()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Unable to ensure fallback audio exists", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004045C4()
{
  __assert_rtn("initFBSOpenApplicationService", "ICSoftLinkedFrameworks.h", 36, "classFBSOpenApplicationService");
}

void sub_1004045EC()
{
  __assert_rtn("FrontBoardServicesLibrary", "ICSoftLinkedFrameworks.h", 33, "frameworkLibrary");
}

void sub_100404614()
{
  __assert_rtn("initFBSOpenApplicationOptionKeyUnlockDevice", "ICSoftLinkedFrameworks.h", 42, "constant");
}

void sub_10040463C()
{
  __assert_rtn("initFBSOpenApplicationOptionKeyPromptUnlockDevice", "ICSoftLinkedFrameworks.h", 43, "constant");
}

void sub_100404664()
{
  __assert_rtn("initFBSOpenApplicationOptionKeyPayloadURL", "ICSoftLinkedFrameworks.h", 44, "constant");
}

void sub_10040468C()
{
  __assert_rtn("initFBSOpenApplicationOptions", "ICSoftLinkedFrameworks.h", 37, "classFBSOpenApplicationOptions");
}

void sub_1004046B4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Trying to create folder creation menu, but we have no accounts.", v1, 2u);
}

void sub_1004046F4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Couldn't find store URL for persistent container while performing integrity check", v1, 2u);
}

void sub_100404734(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error loading persistent store while performing integrity check: %@", (uint8_t *)&v2, 0xCu);
}

void sub_1004047A8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "About to run an integrity check on the database", v1, 2u);
}

void sub_1004047E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Enqueuing final sync after moving to the background", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Cloud context received application did enter background notification", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404840()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v0, "backgroundTimeRemaining");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Canceling all operations because our background sync assertion is expiring in %f seconds", v3, v4, v5, v6, 0);

  sub_100015F28();
}

void sub_1004048C8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[UIApplication sharedApplication](UIApplication, "sharedApplication"));
  objc_msgSend(v0, "backgroundTimeRemaining");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Background sync assertion is expiring in %f seconds but allowing operations to remain in sync bubble", v3, v4, v5, v6, 0);

  sub_100015F28();
}

void sub_100404950(char a1, uint64_t a2, os_log_t log)
{
  const __CFString *v3;
  int v4;
  const __CFString *v5;
  __int16 v6;
  uint64_t v7;

  v3 = CFSTR("YES");
  if ((a1 & 1) == 0)
    v3 = CFSTR("NO");
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Background sync task scheduled {success: %@, error: %@}", (uint8_t *)&v4, 0x16u);
}

void sub_1004049EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Finished final sync after moving to the background", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404A18()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Cloud context received application will enter foreground notification", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100404A44(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Invalid account type for account: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100404AB8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "An error has occurred in deleteSharesForObjects: %@", a5, a6, a7, a8, 2u);
}

void sub_100404B24(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "An error has occurred in deleteSharesIfNecessaryForContentsOfFolder: %@", a5, a6, a7, a8, 2u);
}

void sub_100404B90(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "note"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Trying to show unsupported note in note results thumbnail view {note: %@}", (uint8_t *)&v4, 0xCu);

}

void sub_100404C24(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Canceling search query in response to migrated note.", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_100404C54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Canceling search query because search view controller will disappear.", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_100404C84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Canceling search query due to scope change.", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_100404CB4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016058((void *)&_mh_execute_header, a1, a3, "self.targetNoteViewMode should not be ICNoteContainerViewModeUnspecified.", a5, a6, a7, a8, 0);
}

void sub_100404CE8(uint64_t a1, const char *a2, NSObject *a3)
{
  objc_class *v5;
  NSString *v6;
  void *v7;
  NSString *v8;
  void *v9;
  int v10;
  void *v11;
  __int16 v12;
  void *v13;

  v5 = (objc_class *)objc_opt_class(a1, a2);
  v6 = NSStringFromClass(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = NSStringFromSelector(a2);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = 138412546;
  v11 = v7;
  v12 = 2112;
  v13 = v9;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%@ %@ ranking strategy not found", (uint8_t *)&v10, 0x16u);

}

void sub_100404DAC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "taskIdentifier"));
  sub_100015EEC((void *)&_mh_execute_header, v2, v3, "Current Notes version is equal last run Notes version — skipping {taskIdentifier: %@}", v4, v5, v6, v7, 2u);

  sub_100015F28();
}

void sub_100404E28(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "taskIdentifier"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Current Notes version is greater than last run Notes version — skipping {taskIdentifier: %@}", (uint8_t *)&v4, 0xCu);

  sub_100015F28();
}

void sub_100404EB4(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "taskIdentifier"));
  sub_100015EEC((void *)&_mh_execute_header, v2, v3, "Last run Notes version for task before Spring 2022 — setting minimum {taskIdentifier: %@}", v4, v5, v6, v7, 2u);

  sub_100015F28();
}

void sub_100404F30(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error batch deleting orphaned HTML notes: %@", a5, a6, a7, a8, 2u);
}

void sub_100404F98(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "About to batch delete orphaned HTML notes", a5, a6, a7, a8, 0);
}

void sub_100404FCC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error batch deleting orphaned HTML attachments: %@", a5, a6, a7, a8, 2u);
}

void sub_100405034(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "About to batch delete orphaned HTML attachments", a5, a6, a7, a8, 0);
}

void sub_100405068(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Already ran %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_1004050CC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Haven't run %@ yet, running now", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100405130(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Running one time task (%@) if necessary", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100405194(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error importing note from file at %@: %@", (uint8_t *)&v3, 0x16u);
}

void sub_100405218(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "searchIndexingIdentifier"));
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "%@: An object hidden from search is retrieved from indexing: %@", (uint8_t *)&v6, 0x16u);

}

void sub_1004052C8(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ic_loggingDescription"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Moving owned, password protected note from shared folder into default folder: %@", a1, 0xCu);

}

void sub_10040533C(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(a1, "count")));
  v4 = 138412290;
  v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Found %@ owned, password protected note(s) in a shared folder.", (uint8_t *)&v4, 0xCu);

}

void sub_1004053E4(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortLoggingDescription"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "fixing minimum supported version for shared root folder %@", a1, 0xCu);

}

void sub_100405458(void *a1, NSObject *a2)
{
  int v3;
  id v4;

  v3 = 134217984;
  v4 = objc_msgSend(a1, "count");
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Found %lu shared root folders to check", (uint8_t *)&v3, 0xCu);
}

void sub_1004054E0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Starting fixing minimum supported version for shared folders", v1, 2u);
}

void sub_100405520(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error excluding %@ from backup %@", (uint8_t *)&v3, 0x16u);
  sub_100015EC8();
}

void sub_1004055A0(NSObject *a1)
{
  void *v2;
  uint64_t v3;
  uint8_t v4[24];

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[ICDebugUtilities stateOfTheWorld](ICDebugUtilities, "stateOfTheWorld"));
  sub_100015ED0();
  sub_10001603C((void *)&_mh_execute_header, a1, v3, "State of the world:\n%@", v4);

}

void sub_100405630()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Configuration override - not checking for shared notes or folders - requesting authorization for user notifications", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040565C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Notes became active and has shared notes or shared folders", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100405688()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Locking All PW Notes After Background Expired", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004056B4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "PW Notes Locked", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004056E0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Received remote notification: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100405740(uint64_t a1, NSObject *a2, double a3)
{
  int v3;
  double v4;
  __int16 v5;
  uint64_t v6;

  v3 = 134218242;
  v4 = a3;
  v5 = 2112;
  v6 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Failed to register for remote notifications. Retrying after %.0f seconds: %@", (uint8_t *)&v3, 0x16u);
  sub_100015EC8();
}

void sub_1004057BC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Retrying to register for remote notifications", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004057E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "applicationDidReceiveMemoryWarning", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100405814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Locking PW Notes from device locked notification", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100405840()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Background task created for %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004058A0(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412290;
  v5 = v3;
  sub_10001603C((void *)&_mh_execute_header, a2, a3, "Background task assertion for mention notification (%@) expired", (uint8_t *)&v4);
  sub_100015EC8();
}

void sub_10040590C()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100015ED0();
  sub_10001603C((void *)&_mh_execute_header, v0, v1, "Unbalanced calls to mentionNotificationWillSend/mentionNotificationDidSend for %@", v2);
  sub_100015EC8();
}

void sub_100405970()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Background task ended for %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004059D0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Finishing database-locking operation", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004059FC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Accounts did change notification received", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100405A28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Account will be deleted notification received", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100405A54(char a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  int v6;

  v3 = 134218240;
  v4 = a2;
  v5 = 1024;
  v6 = a1 & 1;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Password change count is %lu for isReset = %d", (uint8_t *)&v3, 0x12u);
  sub_100015EC8();
}

void sub_100405AD8(uint64_t a1, NSObject *a2)
{
  int v2;
  _DWORD v3[2];

  v2 = *(unsigned __int8 *)(a1 + 48);
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Instrumenting password changes for isReset = %d", (uint8_t *)v3, 8u);
  sub_100015EA8();
}

void sub_100405B4C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Notes dismissed startup screen and has shared notes or shared folders", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100405B78(uint8_t *buf, _BYTE *a2, os_log_t log)
{
  *buf = 0;
  *a2 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Setting note editor note to nil in resetMigrationStateForInternalSettingsAndShowMigrationScreenIfNecessary", buf, 2u);
}

void sub_100405BB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Will present user notification: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100405C14()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_100015ED0();
  v3 = 2112;
  v4 = v0;
  _os_log_debug_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Trying to show inline attachment (%@) in note (%@) after user tapped notification", v2, 0x16u);
  sub_100015EC8();
}

void sub_100405C90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Trying to show note (%@) after user tapped notification", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100405CF0()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100015EB0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "Couldn't find a valid object to show after user tapped notification", v1, 2u);
  sub_100015EA8();
}

void sub_100405D28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Received user notification response: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100405D88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Not requesting authorization to show notifications because the device is locked or we are on secure screen", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100405DB4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "No PNG gallery preview images to delete", v1, 2u);
}

void sub_100405DF4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _DWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = objc_msgSend((id)sub_100015F6C(a1, a2), "shortLoggingDescription");
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *v3 = 138412290;
  *v2 = v5;
  sub_100016068((void *)&_mh_execute_header, v6, v7, "Deleting PNG preview image for: %@");

  sub_100015FA8();
}

void sub_100405E44(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "We should never create import account operation on managed accounts", v1, 2u);
}

void sub_100405E84(id *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "legacyAccountObjectID"));
  sub_10006BD9C();
  sub_100015FB4((void *)&_mh_execute_header, v2, v3, "Error fetching legacy account being imported (%@): %@", v4, v5, v6, v7, v8);

  sub_100015EDC();
}

void sub_100405F08(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "legacyAccountObjectID"));
  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, a2, v4, "Starting migration for legacy account: %@", v5);

  sub_100015F28();
}

void sub_100405F88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error saving after importing legacy note batch: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100405FE8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error fetching legacy note while migrating: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100406048(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100015FC8((void *)&_mh_execute_header, a3, (uint64_t)a3, "No file URL or identifier for attachment", a1);
}

void sub_10040607C(uint64_t a1, void *a2, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)buf = 138412546;
  *(_QWORD *)(buf + 4) = a1;
  *((_WORD *)buf + 6) = 2112;
  *(_QWORD *)(buf + 14) = a2;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Imported note (%@) to folder (%@)", buf, 0x16u);

  sub_100041B04();
}

void sub_1004060DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error fetching legacy attachment during import: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_10040613C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Found a legacy note that has not yet been downloaded from the server or is just blank. Either way, we don't want it. (%@)", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_10040619C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "We have not imported this note (%@)", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004061FC(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100015EBC((void *)&_mh_execute_header, a3, (uint64_t)a3, "We have already imported this note, and the legacy content hash is the same as the one we imported (%@)", (uint8_t *)a2);

  sub_100041B04();
}

void sub_100406244(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100015EBC((void *)&_mh_execute_header, a3, (uint64_t)a3, "We have already imported this note, and the legacy modification date is the same as we the one we imported (%@)", (uint8_t *)a2);

  sub_100041B04();
}

void sub_10040628C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006BD8C(__stack_chk_guard);
  sub_100015F00();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "We have already imported a newer version of this note (%@)", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004062EC(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100015EBC((void *)&_mh_execute_header, a3, (uint64_t)a3, "We have imported this note, and the legacy version is newer than the one we imported, but the user has not edited this note since import (%@)", (uint8_t *)a2);

  sub_100041B04();
}

void sub_100406334()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Another device has deleted this legacy note (%@)", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100406394()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Another device has deleted this legacy note (%@), but we have a different version", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004063F4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Copying legacy note on import (%@)", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100406454()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error saving after importing legacy folders: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004064B4(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  sub_100015FC8((void *)&_mh_execute_header, a1, a3, "About to import all legacy folders", v3);
}

void sub_1004064EC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006BD8C(__stack_chk_guard);
  sub_100015F00();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Folder (%@) has parent folder", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_10040654C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006BD8C(__stack_chk_guard);
  sub_100015F00();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Importing legacy folder (%@)", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004065AC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_10006BD8C(__stack_chk_guard);
  sub_100015F00();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Found legacy tombstone for folder (%@), using default folder", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_10040660C(_QWORD *a1, NSObject *a2)
{
  objc_class *v3;
  NSString *v4;
  void *v5;
  uint8_t v6[24];

  v3 = (objc_class *)sub_10006BDB4(a1, (uint64_t)a2);
  v4 = NSStringFromClass(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100015ED0();
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not get a permanent ID for %@", v6, 0xCu);

  sub_100015F28();
}

void sub_100406694(_QWORD *a1, uint64_t a2)
{
  objc_class *v2;
  NSString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v2 = (objc_class *)sub_10006BDB4(a1, a2);
  v3 = NSStringFromClass(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  sub_10006BD9C();
  sub_100015FB4((void *)&_mh_execute_header, v5, v6, "Error obtaining permanent ID for %@: %@", v7, v8, v9, v10, v11);

  sub_100015EDC();
}

uint64_t sub_100406714()
{
  char *v0;
  uint64_t v1;

  v0 = dlerror();
  v1 = abort_report_np("%s", v0);
  return sub_100406734(v1);
}

void sub_100406734()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Cannot fetch in-app message {error: %@}", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100406794(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *a1;
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Error saving after notes zone deleted by user for account ID %@: %@", (uint8_t *)&v4, 0x16u);
  sub_100015EC8();
}

void sub_100406818(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error recreating default folder for CloudKit account after the user purged the zone for account ID %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100406880(void *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "className"));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordID"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "recordName"));
  sub_100015FE8();
  sub_100015FD4((void *)&_mh_execute_header, v5, v6, "%@ (%@) hasn't been fully pushed to the cloud. Not deleting.", v7, v8, v9, v10, v11);

  sub_100015EDC();
}

void sub_100406924(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "zoneName"));
  sub_100015ED0();
  sub_100015FD4((void *)&_mh_execute_header, v2, v3, "Received an error that a zone (%@) wasn't found. Re-uploading everything for that zone for accountID %@.", v4, v5, v6, v7, v8);

  sub_100015EDC();
}

void sub_1004069B0(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortLoggingDescription"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Re-uploading record (%@) after zone reset", a1, 0xCu);

}

void sub_100406A24(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "recordName"));
  sub_100015ED0();
  sub_100015FD4((void *)&_mh_execute_header, v2, v3, "Setting the user record name for the CloudKit account to %@ for account ID %@", v4, v5, v6, v7, v8);

  sub_100015EDC();
}

void sub_100406AB4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No CloudKit account, so no need to re-sync", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406AE0()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, v0, v1, "Found previous OS version dictionary: %@", v2);
  sub_100015EC8();
}

void sub_100406B44()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Checking if we need to re-sync password protected notes", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406B70()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No crypto data on user record", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406B9C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error fetching user record when checking for re-sync: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100406BFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Already updated iCloud account bags", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406C28()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Updating account bags for iCloud accounts", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406C54(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412290;
  v5 = v3;
  sub_100015EBC((void *)&_mh_execute_header, a2, a3, "Updated account bag for %@", (uint8_t *)&v4);
  sub_100015EC8();
}

void sub_100406CC0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Already fixed gallery sub attachments", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406CEC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Fixing gallery sub attachments", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406D18(void *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, a2, v4, "Parent attachment already set for: %@", v5);

}

void sub_100406DA0(void *a1, id *a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t v11;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "shortLoggingDescription"));
  sub_100015FE8();
  sub_100015FD4((void *)&_mh_execute_header, v5, v6, "Requesting sub attachment: %@ for: %@", v7, v8, v9, v10, v11);

  sub_100015EDC();
}

void sub_100406E34()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Stopping all CloudKit operations after deleting CloudKit account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406E60()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Updating cloud context state after accounts changed", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

uint64_t sub_100406E8C()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "ICQInAppMessaging");
  return sub_100406EB0(v0);
}

void sub_100406EB0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Creating active vacuum", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406EDC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Setting last vacuum date to %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100406F40(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Next vacuum date: %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100406FA4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "We're overdue for our next database vacuum. Scheduling one soon.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406FD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Starting database vacuum policy", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100406FFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Invalidating previous timer", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100407028()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Vacuum timer fired", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100407054()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Vacuuming modern database", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100407080(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Vacuuming HTML database at %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_1004070E4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Vacuumed HTML database at %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_10040714C(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error vaccuming HTML database at %@", (uint8_t *)&v3, 0xCu);
  sub_100015EC8();
}

void sub_1004071C0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Cannot create ICASLayoutTypeEnum for ICNoteContainerViewModeUnspecified: defaulting to ICASLayoutTypeEnum_list.", v1, 2u);
}

void sub_100407200(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error removing app data: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100407274(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error dumping state of the world: %@", a5, a6, a7, a8, 2u);
}

void sub_1004072DC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error writing state dump: %@", a5, a6, a7, a8, 2u);
}

void sub_100407344(void *a1, void *a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a3 = 138412546;
  *(_QWORD *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  sub_100015F40((void *)&_mh_execute_header, a4, a3, "Marked records as needing fetching {identifier: %@, #objects: %@}", (uint8_t *)a3);

}

void sub_1004073A8(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "modifiedAfterDateString"));
  v7 = 138412546;
  v8 = v4;
  v9 = 2112;
  v10 = v5;
  sub_100015F40((void *)&_mh_execute_header, a2, v6, "Marking records as needing fetching… {identifier: %@, modifiedAfterDate: %@}", (uint8_t *)&v7);

}

void sub_100407464(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Resetting replica IDs after backup restore…", v1, 2u);
}

void sub_1004074A4()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_100076B64();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 2u);
}

void sub_1004074E0(uint64_t a1)
{
  void *v1;
  objc_class *v2;
  NSString *v3;
  const char *v4;
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t v13;

  v2 = (objc_class *)objc_opt_class(a1);
  v3 = NSStringFromClass(v2);
  objc_claimAutoreleasedReturnValue(v3);
  v4 = (const char *)sub_100015F0C();
  v5 = NSStringFromSelector(v4);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100015FE8();
  sub_100015FD4((void *)&_mh_execute_header, v7, v8, "%@ %@ previous note was deleted", v9, v10, v11, v12, v13);

}

void sub_100407580(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "noteEditorViewController"));
  v2 = objc_msgSend((id)sub_100015F0C(), "noteEditorViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "note"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "shortLoggingDescription"));
  sub_100015FE8();
  sub_100015FD4((void *)&_mh_execute_header, v6, v7, "Begin session with noteEditor %@ note %@", v8, v9, v10, v11, v12);

  sub_100015F80();
}

void sub_100407634(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "noteEditorViewController"));
  v2 = objc_msgSend((id)sub_100015F0C(), "noteEditorViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "note"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "shortLoggingDescription"));
  sub_100015FE8();
  sub_100015FD4((void *)&_mh_execute_header, v6, v7, "Save session with noteEditor %@ note %@", v8, v9, v10, v11, v12);

  sub_100015F80();
}

void sub_1004076E8(void *a1)
{
  void *v1;
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t v12;

  objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "noteEditorViewController"));
  v2 = objc_msgSend((id)sub_100015F0C(), "noteEditorViewController");
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "note"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "shortLoggingDescription"));
  sub_100015FE8();
  sub_100015FD4((void *)&_mh_execute_header, v6, v7, "End session with noteEditor %@ note %@", v8, v9, v10, v11, v12);

  sub_100015F80();
}

void sub_10040779C()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_100076B64();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 8u);
}

void sub_100407810()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_100076B64();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0x12u);
}

void sub_100407890()
{
  void *v0;
  os_log_t v1;
  os_log_type_t v2;
  const char *v3;
  uint8_t *v4;

  sub_100076B64();
  _os_log_debug_impl(v0, v1, v2, v3, v4, 0xCu);
}

void sub_100407904(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Showing debug spinner", a5, a6, a7, a8, 0);
}

void sub_100407938(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Hiding debug spinner", a5, a6, a7, a8, 0);
}

void sub_10040796C(uint64_t a1, uint64_t a2, NSObject *a3)
{
  void *v5;
  int v6;
  void *v7;
  __int16 v8;
  uint64_t v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectID"));
  v6 = 138412546;
  v7 = v5;
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Couldn't delete shares for folder {folderID: %@, error: %@}", (uint8_t *)&v6, 0x16u);

}

void sub_100407A1C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error updating paper document scan attachment sections: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100407A90()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Cancelled current audio recording session after closing auxiliary window", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100407ABC(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error cancelling current audio recording session after closing auxiliary window {error: %@}", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100407B20()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "scene has not become foreground - returning scene session's stateRestorationActivity", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100407B4C(uint64_t a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v2 = 136315394;
  v3 = "-[ICWindowSceneDelegate scene:didFailToContinueUserActivityWithType:error:]";
  v4 = 2112;
  v5 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%s: Did fail to continue user activity with error: %@", (uint8_t *)&v2, 0x16u);
  sub_100015EC8();
}

void sub_100407BD0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Defaults set to launch to notes list", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100407BFC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Defaults not set to launch to notes list nor folder list -> launching to note editor", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100407C28(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a1, a3, "%s", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100407C98(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Received CKShareMetadata with no share URL. %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100407CFC(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "targetContentIdentifier"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "userActivity.targetContentIdentifier is not a valid URL: %@", a1, 0xCu);

}

void sub_100407D70(void *a1, NSObject *a2)
{
  int v3;
  id v4;

  v3 = 134217984;
  v4 = objc_msgSend(a1, "count");
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Found %ld deleted notes that aren't in the trash", (uint8_t *)&v3, 0xCu);
}

void sub_100407DF8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Looking for deleted notes that aren't in the trash and putting them there", v1, 2u);
}

void sub_100407E38(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Skipping because internet is not reachable", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_100407E68(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ic_loggingIdentifier"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_ERROR, "Skipping account because we were unable to save the MOC: %@", a1, 0xCu);

}

void sub_100407EDC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Calling final completion block", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_100407F0C(void *a1, void *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  __int16 v14;
  void *v15;
  __int16 v16;
  void *v17;
  __int16 v18;
  void *v19;
  __int16 v20;
  void *v21;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingIdentifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serverSideUpdateTaskLastCompletedBuild"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "currentBuild"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "platformName"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serverSideUpdateTaskContinuationToken"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ic_sha256"));
  v12 = 138413314;
  v13 = v6;
  v14 = 2112;
  v15 = v7;
  v16 = 2112;
  v17 = v8;
  v18 = 2112;
  v19 = v9;
  v20 = 2112;
  v21 = v11;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Running tasks for account %@ (previous=%@, current=%@, platform=%@, token=%@)", (uint8_t *)&v12, 0x34u);

}

void sub_100408044(id *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "ic_loggingIdentifier"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Aborting tasks for account (%@) because the MOC failed to save", (uint8_t *)&v4, 0xCu);

}

void sub_1004080DC(uint64_t a1, NSObject *a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;
  __int16 v11;
  uint64_t v12;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingIdentifier"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ic_sha256"));
  v6 = *(_QWORD *)(a1 + 64);
  v7 = 138412802;
  v8 = v4;
  v9 = 2112;
  v10 = v5;
  v11 = 2112;
  v12 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Task for account (%@) returned with token (%@) records: %@", (uint8_t *)&v7, 0x20u);

}

void sub_1004081AC(uint64_t a1, uint64_t *a2, NSObject *a3)
{
  void *v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingIdentifier"));
  v6 = *a2;
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error running task for account (%@): %@", (uint8_t *)&v7, 0x16u);

}

void sub_100408260(void *a1, uint64_t a2, NSObject *a3)
{
  void *v6;
  unsigned int v7;
  int v8;
  void *v9;
  void *v10;
  int v11;
  void *v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  void *v18;
  __int16 v19;
  void *v20;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingIdentifier"));
  v7 = objc_msgSend(a1, "serverSideUpdateTaskFailureCount");
  v8 = *(unsigned __int16 *)(a2 + 40);
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serverSideUpdateTaskLastAttemptedBuild"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "serverSideUpdateTaskLastCompletedBuild"));
  v11 = 138413314;
  v12 = v6;
  v13 = 1024;
  v14 = v7;
  v15 = 1024;
  v16 = v8;
  v17 = 2112;
  v18 = v9;
  v19 = 2112;
  v20 = v10;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Evaluating account (%@) (attempt=%hu/%hu) (lastAttempt=%@) (lastComplete=%@)", (uint8_t *)&v11, 0x2Cu);

}

void sub_10040836C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Reachability is being overridden to not reachable", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_10040839C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error updating inline drawing attachment sections: %@", (uint8_t *)&v2, 0xCu);
}

void sub_100408410(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "failed to execute JavaScript: %@\nJavaScript error: %@", (uint8_t *)&v4, 0x16u);
}

void sub_100408498()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Trying to create cloudSharingControllerForObject with empty accountID", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004084C4(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "shortLoggingDescription"));
  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, a2, v4, "No existing share for %@", v5);

  sub_100015F28();
}

void sub_100408548(uint64_t a1, id *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "shortLoggingDescription"));
  v6 = 138412546;
  v7 = a1;
  v8 = 2112;
  v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Hierarchical share exists, using share %@ for managing sharing for %@", (uint8_t *)&v6, 0x16u);

}

void sub_1004085F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Failed to save share with error %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100408658()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "presentSendNoteActivityViewController: At least one of sourceItem or sourceView must be non-nil", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408684()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "An error has occured in deleteSharesIfNecessaryForContentsOfFolder: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004086E4(uint64_t a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  uint8_t v5[24];

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "shortLoggingDescription"));
  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, a2, v4, "Showing cloud sharing service for %@", v5);

  sub_100015F28();
}

void sub_100408768(char a1, NSObject *a2, uint64_t a3)
{
  const __CFString *v3;
  int v4;
  const __CFString *v5;

  v3 = CFSTR("Off");
  if ((a1 & 1) != 0)
    v3 = CFSTR("On");
  v4 = 138412290;
  v5 = v3;
  sub_100015EBC((void *)&_mh_execute_header, a2, a3, "Cloud sharing controller did turn hide alerts: %@", (uint8_t *)&v4);
  sub_100015EC8();
}

void sub_1004087E8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "URL was nil, cannot fetch and accept share.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408814()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "cloudKitShareMetadata was nil, cannot accept share.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

uint64_t sub_100408840()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "LPLinkMetadata");
  return sub_100408864(v0);
}

void sub_100408864()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Continuing migration if necessary", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408890(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100015FC8((void *)&_mh_execute_header, a3, (uint64_t)a3, "Already finished with migration", a1);
}

void sub_1004088C4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Migration controller heard that another device started migrating. Migrating here as well.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004088F0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Cancelling migration operations in response to accounts change notification", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040891C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Setting migration state on ACAccount after setting current migration state", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408948()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Hiding the IMAP account because we don't have an ICAccount yet", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408974()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Starting migration for iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004089A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Refreshing data from CloudKit before importing for migration", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004089CC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Continuing migration for iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004089F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Done refreshing data before importing", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408A24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Not migrating local account because we have already migrated it", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408A50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Not migrating local account because there is no local account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408A7C(void *a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  void *v7;
  id v8;
  void *v9;
  uint64_t v10;
  int v11;
  id v12;
  __int16 v13;
  id v14;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "legacyAccountContext"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectID"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "allVisibleNotesForAccountWithObjectID:", v6));
  v8 = objc_msgSend(v7, "count");
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "folders"));
  v11 = 134218240;
  v12 = v8;
  v13 = 2048;
  v14 = objc_msgSend(v9, "count");
  sub_100015F40((void *)&_mh_execute_header, a3, v10, "Importing the local account to the new format. It has %ld note(s) in %ld folder(s).", (uint8_t *)&v11);

}

void sub_100408B74()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Not migrating local account because the user chose to not migrate it.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408BA0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Successfully imported the local account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408BCC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No legacy account when performing final import", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408BF8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Performing final import for iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408C24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Successfully performed final import for iCloud account.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408C50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Final import for iCloud account was cancelled", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408C7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No legacy account when importing notes from legacy iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408CA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Importing legacy notes from iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408CD4(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = objc_msgSend((id)sub_10008EFF0(a1), "objectIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100015ED0();
  sub_100015EEC((void *)&_mh_execute_header, v3, v4, "Cancelled importing notes for legacy account: %@", v5, v6, v7, v8, v9);

  sub_100015F28();
}

void sub_100408D4C(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = objc_msgSend((id)sub_10008EFF0(a1), "objectIdentifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100015ED0();
  sub_100015EEC((void *)&_mh_execute_header, v3, v4, "Finished importing notes for legacy account: %@", v5, v6, v7, v8, v9);

  sub_100015F28();
}

void sub_100408DC4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Cancelling migration operations", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408DF0(uint8_t *a1, _BYTE *a2, NSObject *a3)
{
  *a1 = 0;
  *a2 = 0;
  sub_100015FC8((void *)&_mh_execute_header, a3, (uint64_t)a3, "Importing the iCloud account again while refreshing", a1);
}

void sub_100408E24()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No legacy account performing final push to CloudKit", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408E50()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Performing final push to CloudKit for migration.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408E7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Finished final push to CloudKit during migration. Migration is now complete.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100408EA8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error pushing migration state: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100408F08()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error fetching user record when pushing migration state: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100408F68(void *a1, uint64_t a2, NSObject *a3)
{
  *(_DWORD *)a2 = 138412290;
  *(_QWORD *)(a2 + 4) = a1;
  sub_100015EBC((void *)&_mh_execute_header, a3, (uint64_t)a3, "Copying notes from a legacy account (%@) to iCloud account", (uint8_t *)a2);

}

void sub_100408FB4(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 40), "objectIdentifier"));
  sub_100015ED0();
  sub_100015EEC((void *)&_mh_execute_header, v2, v3, "Successfully copied notes from legacy account (%@) to iCloud account", v4, v5, v6, v7, v8);

  sub_100015F28();
}

void sub_100409038()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "The migration controller can now reach the internet", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100409064()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "The migration controller can no longer reach the internet", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100409090(const char *a1, NSObject *a2, double a3)
{
  NSString *v5;
  void *v6;
  uint64_t v7;
  uint8_t v8[12];
  __int16 v9;
  double v10;

  v5 = NSStringFromSelector(a1);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100015ED0();
  v9 = 2048;
  v10 = a3;
  sub_100015F40((void *)&_mh_execute_header, a2, v7, "Retrying %@ after a delay of %.0f seconds", v8);

}

void sub_100409130(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  sub_100015ED0();
  sub_100015EEC((void *)&_mh_execute_header, v2, v3, "Disabling Notes dataclass for account (%@)", v4, v5, v6, v7, v8);

  sub_100015F28();
}

void sub_1004091A8(uint64_t a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v1 = objc_msgSend((id)sub_10008EFF0(a1), "identifier");
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100015ED0();
  sub_100015EEC((void *)&_mh_execute_header, v3, v4, "Disabled note syncing for account (%@)", v5, v6, v7, v8, v9);

  sub_100015F28();
}

void sub_100409220(uint64_t a1, uint64_t a2, NSObject *a3)
{
  id v5;
  void *v6;
  uint8_t v7[12];
  __int16 v8;
  uint64_t v9;

  v5 = objc_msgSend((id)sub_10008EFF0(a1), "identifier");
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100015ED0();
  v8 = 2112;
  v9 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error disabling note syncing for account (%@): %@", v7, 0x16u);

}

void sub_1004092C8()
{
  NSObject *v0;
  uint64_t v1;
  uint8_t v2[24];

  sub_100015ED0();
  sub_100015EBC((void *)&_mh_execute_header, v0, v1, "Got unexpected Darwin notification %@", v2);
  sub_100015EC8();
}

void sub_10040932C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No legacy account handling Darwin notification", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100409358()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Completed legacy folder list refresh for iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100409384()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Completed legacy content refresh for iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004093B0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No legacy account performing final refresh", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004093DC()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Performing final refresh for iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100409408()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Cannot reach the internet. Performing final refresh after reachability changes", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100409434()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No legacy account refreshing folder list", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_100409460()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Refreshing folder list from DataAccess for iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040948C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "No legacy account when refreshing folder contents", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004094B8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Refreshing contents from DataAccess for iCloud account", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_1004094E4()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100015F18((void *)&_mh_execute_header, v0, v1, "Finished cancelling migration after going into the background.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

uint64_t sub_100409510()
{
  NSObject *v0;

  v0 = abort_report_np("Unable to find class %s", "DADConnection");
  return sub_100409534(v0);
}

void sub_100409534(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Resetting migration state", v1, 2u);
}

void sub_100409574(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Couldn't find parent ACAccount for reset migration for account ID %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_1004095D8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015F00();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Deleted record zones while resetting migration for account ID %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_10040963C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015F00();
  sub_100015F5C((void *)&_mh_execute_header, v0, v1, "Performed full sync while resetting migration for account ID %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004096A0()
{
  uint64_t v0;
  os_log_t v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  sub_100015F00();
  v3 = 2112;
  v4 = v0;
  _os_log_error_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_ERROR, "Error performing full sync while resetting migration for account ID %@: %@", v2, 0x16u);
  sub_100015EC8();
}

void sub_100409720()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015F00();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Couldn't find parent ACAccount for reset migration for account ID %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100409784(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error fetching invalid notes: %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_1004097E8(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v4 = *(_QWORD *)(a1 + 40);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a2, "loggingDescription"));
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Checking note for duplicates in account ID %@: %@", (uint8_t *)&v6, 0x16u);

}

void sub_100409898()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error dumping state of the world: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004098F8()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error writing state dump: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100409958()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Error syncing objects after resetting passphrases. Error: %@", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_1004099B8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Attempted to pre-fetch hashtags indexed by other apps in background", v1, 2u);
}

void sub_1004099F8()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100015ED0();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "all hashtags indexed by other apps: %@", v1, 0xCu);
  sub_100015EC8();
}

void sub_100409A64()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015ED0();
  sub_100015F4C((void *)&_mh_execute_header, v0, v1, "Cannot generate System Paper chrome thumbnail layers {error: %@}", v2, v3, v4, v5, v6);
  sub_100015EC8();
}

void sub_100409AC4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "We timed out waiting for device migration state and user has clicked continue.", v1, 2u);
}

void sub_100409B04(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "userInfo"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "No valid device check indicator found from timer.userInfo %@", (uint8_t *)&v4, 0xCu);

}

void sub_100409B98(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "WelcomeScreenDisclaimer.rtf is missing", v1, 2u);
}

void sub_100409BD8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Finished launch task %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100409C3C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "About to run launch task %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100409CA0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Skipping launch task %@, will retry on next launch", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100409D04(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Finished launch task %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_100409D6C(void *a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "identifier"));
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Undoably setting folder %@ to note %@.", (uint8_t *)&v7, 0x16u);

}

void sub_100409E2C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Tried to set the folder to be a smart folder, which really shouldn't contain notes per se. Reverted to the owning account's default folder.", v1, 2u);
}

void sub_100409E6C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "trashFolder"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "identifier"));
  v11 = 138412802;
  v12 = v4;
  v13 = 2112;
  v14 = v7;
  v15 = 2112;
  v16 = v9;
  sub_100016000((void *)&_mh_execute_header, a2, v10, "Undoably moving note %@ to the recently deleted folder %@ in account %@", (uint8_t *)&v11);

  sub_10001607C();
}

void sub_100409F6C(void *a1, NSObject *a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  int v11;
  void *v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  void *v16;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "trashFolder"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "identifier"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "identifier"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v11 = 138412802;
  v12 = v6;
  v13 = 2112;
  v14 = v8;
  v15 = 2112;
  v16 = v9;
  sub_100016000((void *)&_mh_execute_header, a2, v10, "Moving shared note as a participant to recently deleted folder %@ in account %@ for note %@", (uint8_t *)&v11);

  sub_10001607C();
}

void sub_10040A06C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Recap based test requested but running on device without framework", v1, 2u);
  sub_100015EA8();
}

void sub_10040A0A8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Performing flick scroll test", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_10040A0D8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 134217984;
  v4 = a1;
  sub_100015EBC((void *)&_mh_execute_header, a2, a3, "Flick scroll test iterations remaining: %lu", (uint8_t *)&v3);
}

void sub_10040A144(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Reindexing everything before search PPT starts", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_10040A174(uint64_t a1, NSObject *a2)
{
  void *v2;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
  sub_1000B98A4(v4, v5);
  v8 = 134217984;
  v9 = v6;
  sub_100015EBC((void *)&_mh_execute_header, a2, v7, "Reindexing for search PPT completed in %f", (uint8_t *)&v8);

  sub_100015EDC();
}

uint64_t sub_10040A208()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "RCPEventStream");
  return sub_10040A22C(v0);
}

uint64_t sub_10040A22C()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "RCPInlinePlayer");
  return sub_10040A250(v0);
}

uint64_t sub_10040A250()
{
  uint64_t v0;

  v0 = abort_report_np("Unable to find class %s", "RCPPlayerPlaybackOptions");
  return sub_10040A274(v0);
}

void sub_10040A274(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "typeUTI"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Trying to show an attachment in the images and movies scroll view, but it's not an image or movie. typeUTI=%@", (uint8_t *)&v4, 0xCu);

  sub_100015F28();
}

void sub_10040A300(uint64_t a1, uint64_t a2, NSObject *a3)
{
  id v5;
  int v6;
  id v7;
  __int16 v8;
  uint64_t v9;

  v6 = 138412546;
  v7 = (id)objc_opt_class(a1);
  v8 = 2112;
  v9 = a2;
  v5 = v7;
  _os_log_error_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_ERROR, "Error fetching from the fetched results controller on %@: %@", (uint8_t *)&v6, 0x16u);

  sub_100015F28();
}

void sub_10040A39C(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Attempting to move notes into a folder that doesn't allow moving contents in or out: %@", (uint8_t *)&v4, 0xCu);

}

void sub_10040A430(void *a1, void *a2, NSObject *a3)
{
  void *v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  __int16 v11;
  void *v12;
  __int16 v13;
  void *v14;

  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "account"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "identifier"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortLoggingDescription"));
  v9 = 138412802;
  v10 = a1;
  v11 = 2112;
  v12 = v7;
  v13 = 2112;
  v14 = v8;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Moving note from unowned, shared folder to folder %@ in account %@ for note %@", (uint8_t *)&v9, 0x20u);

}

void sub_10040A514(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "ic_loggingDescription"));
  sub_100015FB4((void *)&_mh_execute_header, v2, v3, "Cannot associate invitation with object because share URL is missing {share: %@, accountID: %@}", v4, v5, v6, v7, 2u);

  sub_100015EDC();
}

void sub_10040A5A4(id *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "ic_loggingDescription"));
  sub_100015FB4((void *)&_mh_execute_header, v2, v3, "Cannot associate invitation with object because root object or root object account is missing {share: %@, accountID: %@}", v4, v5, v6, v7, 2u);

  sub_100015EDC();
}

void sub_10040A63C(id *a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  int v7;
  void *v8;
  __int16 v9;
  void *v10;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "ic_loggingDescription"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectID"));
  v7 = 138412546;
  v8 = v5;
  v9 = 2112;
  v10 = v6;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Updated invitation and associated it with object {share: %@, objectID: %@}", (uint8_t *)&v7, 0x16u);

  sub_100015EDC();
}

void sub_10040A6F4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Checking ICMedia for missing files that need to be fetched", v1, 2u);
}

void sub_10040A734(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v4 = 138412290;
  v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "No file for %@, marking as needing to be fetched", (uint8_t *)&v4, 0xCu);

}

void sub_10040A7C8(uint64_t a1, NSObject *a2)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = objc_opt_class(a1);
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@ reported success", (uint8_t *)&v3, 0xCu);
  sub_100015F28();
}

void sub_10040A848(uint64_t a1, NSObject *a2)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = objc_opt_class(a1);
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "%@ reported failure and may be retried on the next launch", (uint8_t *)&v3, 0xCu);
  sub_100015F28();
}

void sub_10040A8C8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Finished fixing backup exclusion flag for attachments", a5, a6, a7, a8, 0);
}

void sub_10040A8FC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Fixing backup exclusion flag for attachments", a5, a6, a7, a8, 0);
}

void sub_10040A930(uint64_t *a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *a1;
  v3 = 138412290;
  v4 = v2;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Could not open application because %@", (uint8_t *)&v3, 0xCu);
}

void sub_10040A9A8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Attempted to share an unshareable note.", v1, 2u);
}

void sub_10040A9E8(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Couldn't get image source reference to generate a preview", v1, 2u);
}

void sub_10040AA28(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Checking for missing paper bundles that need to be fetched", v1, 2u);
}

void sub_10040AA68(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  v4 = 138412290;
  v5 = v3;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Paper bundle missing or empty for %@, marking as needing to be fetched", (uint8_t *)&v4, 0xCu);

}

void sub_10040AAFC(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Using CoreData-CoreSpotlight Integration, not running ICReindexEverythingAfterBackupRestoreTask", v1, 2u);
}

void sub_10040AB3C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016094((void *)&_mh_execute_header, a2, a3, "Setting progress tracker making progress %d", a5, a6, a7, a8, 0);
}

void sub_10040ABA4(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100016094((void *)&_mh_execute_header, a2, a3, "Setting progress indicator should animate %d", a5, a6, a7, a8, 0);
}

void sub_10040AC0C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "count");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Processing %lu possible inconsistencies with inline attachments", v3, v4, v5, v6, 0);
  sub_100015F28();
}

void sub_10040AC7C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "count");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Processing %lu possible inconsistencies with block attachments", v3, v4, v5, v6, 0);
  sub_100015F28();
}

void sub_10040ACEC(void *a1, void *a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a3 = 138412546;
  *(_QWORD *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2112;
  *(_QWORD *)(a3 + 14) = a2;
  sub_100015F40((void *)&_mh_execute_header, a4, a3, "Root attachment (%@) found in note (%@) body", (uint8_t *)a3);

}

void sub_10040AD50(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  void *v6;
  uint64_t v7;
  int v8;
  void *v9;
  __int16 v10;
  void *v11;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ic_loggingIdentifier"));
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "shortLoggingDescription"));
  v8 = 138412546;
  v9 = v5;
  v10 = 2112;
  v11 = v6;
  sub_100015F40((void *)&_mh_execute_header, a3, v7, "Resolving inconsistency of (%@) by resurrecting: %@", (uint8_t *)&v8);

}

void sub_10040AE0C(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Canceling search query since input is empty.", v1, 2u);
}

void sub_10040AE4C(uint64_t a1, void *a2, NSObject *a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectID"));
  v6 = 134218242;
  v7 = a1;
  v8 = 2112;
  v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "Setting note collection on note browser %p: %@", (uint8_t *)&v6, 0x16u);

}

void sub_10040AEFC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001600C();
  sub_1000160A4((void *)&_mh_execute_header, v0, v1, "Setting query on note browser %p: %@");
  sub_100015EC8();
}

void sub_10040AF5C()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001600C();
  sub_1000160A4((void *)&_mh_execute_header, v0, v1, "Setting virtual smart folder on note browser %p: %@");
  sub_100015EC8();
}

void sub_10040AFBC()
{
  uint64_t v0;
  os_log_t v1;

  sub_10001600C();
  sub_1000160A4((void *)&_mh_execute_header, v0, v1, "Setting tag selection on note browser %p: %@");
  sub_100015EC8();
}

void sub_10040B01C(uint8_t *a1, void *a2, _QWORD *a3, NSObject *a4)
{
  void *v7;

  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "ic_loggingDescription"));
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_debug_impl((void *)&_mh_execute_header, a4, OS_LOG_TYPE_DEBUG, "Found note %@ without an account and folder, will move to default account and folder.", a1, 0xCu);

}

void sub_10040B090(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "count");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Found %ld notes without folders.", v3, v4, v5, v6, 0);
  sub_100015F28();
}

void sub_10040B100(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Looking to move notes without folders to the default folder.", a5, a6, a7, a8, 0);
}

void sub_10040B134(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "count");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Found %ld notes with placeholder folders.", v3, v4, v5, v6, 0);
  sub_100015F28();
}

void sub_10040B1A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Looking to fetch notes with placeholder folders.", a5, a6, a7, a8, 0);
}

void sub_10040B1D8(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Finished regenerating gallery attachment note titles", a5, a6, a7, a8, 0);
}

void sub_10040B20C(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Regenerating gallery attachment note titles", a5, a6, a7, a8, 0);
}

void sub_10040B240(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "count");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Regenerating %lu gallery attachment note titles", v3, v4, v5, v6, 0);
  sub_100015F28();
}

void sub_10040B2B0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "count");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Checking %lu multi-page gallery attachments for an OCR generated userTitle", v3, v4, v5, v6, 0);
  sub_100015F28();
}

void sub_10040B320(id *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "identifier"));
  sub_100015EEC((void *)&_mh_execute_header, v2, v3, "Clearing OCR generated userTitle for attachment %@", v4, v5, v6, v7, 2u);

  sub_100015F28();
}

void sub_10040B3A0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "count");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Couldn't fix %ld tombstones without an account because we don't have exactly one active CloudKit account.", v3, v4, v5, v6, 0);
  sub_100015F28();
}

void sub_10040B410(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_msgSend(a1, "count");
  sub_100015EEC((void *)&_mh_execute_header, v1, v2, "Found %ld tombstones without accounts.", v3, v4, v5, v6, 0);
  sub_100015F28();
}

void sub_10040B480(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Looking to move tombstones without accounts to the CloudKit account.", v1, 2u);
}

void sub_10040B4C0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  sub_100015F34((void *)&_mh_execute_header, a3, (uint64_t)a3, "Extracting media file: Error loading file representation for content type %@ - error: %@", (uint8_t *)&v4);
  sub_100015EC8();
}

void sub_10040B53C(uint64_t a1, NSObject *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  __int16 v9;
  uint64_t v10;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(UTTypeFileURL, "identifier"));
  v5 = *(_QWORD *)(a1 + 40);
  v7 = 138412546;
  v8 = v4;
  v9 = 2112;
  v10 = v5;
  sub_100015F34((void *)&_mh_execute_header, a2, v6, "Extracting URL: Error loading item for type identifier %@ - error: %@", (uint8_t *)&v7);

}

void sub_10040B5F0(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Provided item is nil.", v1, 2u);
}

void sub_10040B630(id *a1, NSObject *a2)
{
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*a1, "registeredTypeIdentifiers"));
  v5 = 138412290;
  v6 = v3;
  sub_10001603C((void *)&_mh_execute_header, a2, v4, "Error: could not find extension in %@", (uint8_t *)&v5);

}

void sub_10040B6C0(uint64_t *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;

  v3 = *a1;
  v4 = 138412290;
  v5 = v3;
  sub_10001603C((void *)&_mh_execute_header, a2, a3, "Error loading item: %@", (uint8_t *)&v4);
  sub_100015EC8();
}

void sub_10040B72C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;

  v3 = 138412290;
  v4 = a1;
  sub_10001603C((void *)&_mh_execute_header, a2, a3, "Cannot save temporary file to disk: %@", (uint8_t *)&v3);
  sub_100015EC8();
}

void sub_10040B794(void *a1, NSObject *a2)
{
  void *v4;
  int v5;
  void *v6;
  __int16 v7;
  void *v8;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "userInfo"));
  v5 = 138412546;
  v6 = a1;
  v7 = 2112;
  v8 = v4;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error: Failed while saving note: %@, %@", (uint8_t *)&v5, 0x16u);

}

void sub_10040B840(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Calculated estimated size of displayed content: %lu", a5, a6, a7, a8, 0);
}

void sub_10040B8A8(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F5C((void *)&_mh_execute_header, a2, a3, "Asked about accepting new size: %lu", a5, a6, a7, a8, 0);
}

void sub_10040B910(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Unable to begin editing.", v1, 2u);
}

void sub_10040B950(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Progress tracker processing cloud operations did change notification", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_10040B980(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F18((void *)&_mh_execute_header, a1, a3, "Progress tracker processing migration state did change notification", a5, a6, a7, a8, 0);
  sub_100015EA8();
}

void sub_10040B9B0(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error saving legacy note context after import: %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_10040BA1C(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "Starting import operation: %@", (uint8_t *)&v2, 0xCu);
  sub_100015EC8();
}

void sub_10040BA8C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_100015F4C((void *)&_mh_execute_header, a2, a3, "Error saving while importing notes: %@", a5, a6, a7, a8, 2u);
  sub_100015EC8();
}

void sub_10040BAF0(uint64_t *a1, uint64_t a2, NSObject *a3)
{
  uint64_t v4;
  void *v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  void *v9;

  v4 = *a1;
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 40), "identifier"));
  v6 = 138412546;
  v7 = v4;
  v8 = 2112;
  v9 = v5;
  _os_log_debug_impl((void *)&_mh_execute_header, a3, OS_LOG_TYPE_DEBUG, "%@ importing legacy note %@", (uint8_t *)&v6, 0x16u);

}

void sub_10040BBA8(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t v9;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "sortedSections"));
  objc_msgSend(v2, "count");
  sub_100016024();
  sub_100015FB4((void *)&_mh_execute_header, v3, v4, "Section index out of bounds: %@, %ld", v5, v6, v7, v8, v9);

  sub_100015EDC();
}

void sub_10040BC30()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Unexpectedly received empty image data array", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040BC5C(void *a1, NSObject *a2)
{
  void *v3;
  int v4;
  void *v5;

  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "activityType"));
  v4 = 138412290;
  v5 = v3;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Unhandled user activity type: %@", (uint8_t *)&v4, 0xCu);

}

void sub_10040BCF0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Not setting up System Paper UI since the device doesn't support system paper.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040BD1C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "More than one connection source was provided to Notes. This is unexpected. We will be picking one at random.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040BD48(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_fault_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_FAULT, "ICFolderOutlineCollectionViewCell is incompatible with identifier {identifier: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_10040BDBC(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Imported archive into account {account: %@}", (uint8_t *)&v2, 0xCu);
}

void sub_10040BE30(uint64_t a1, uint64_t a2, os_log_t log)
{
  int v3;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;

  v3 = 138412546;
  v4 = a1;
  v5 = 2112;
  v6 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "Cannot import archive into account {error: %@, account: %@}", (uint8_t *)&v3, 0x16u);
}

void sub_10040BEB4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "Cannot import into primary iCloud account because there is no iCloud account enabled", v1, 2u);
}

void sub_10040BEF4(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "shortLoggingDescription"));
  sub_100015ED0();
  sub_100015EEC((void *)&_mh_execute_header, v2, v3, "Undoably deleting note %@", v4, v5, v6, v7, v8);

  sub_100015F28();
}

void sub_10040BF6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Attempting to delete undeletable notes", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040BF98()
{
  os_log_t v0;
  uint8_t v1[24];

  sub_100015ED0();
  _os_log_error_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_ERROR, "attempting to delete an undeletable folder %@", v1, 0xCu);
}

void sub_10040C008(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "identifier"));
  sub_100015ED0();
  sub_100015EEC((void *)&_mh_execute_header, v2, v3, "Not authenticated to copy note %@ across accounts", v4, v5, v6, v7, v8);

  sub_100015F28();
}

void sub_10040C080()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Error while saving after processing notes.", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040C0AC(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  sub_100015ED0();
  sub_100015F94((void *)&_mh_execute_header, v2, v3, "Unable to find destination folder when moving note: %@", v4, v5, v6, v7, v8);

  sub_100015F28();
}

void sub_10040C124()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_100015EB0();
  sub_100016048((void *)&_mh_execute_header, v0, v1, "Unable to find copied note to delete", v2, v3, v4, v5, v6);
  sub_100015EA8();
}

void sub_10040C150()
{
  os_log_t v0;
  uint8_t v1[16];

  sub_100015EB0();
  _os_log_debug_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEBUG, "Tried to set the folder to be a smart folder, which really shouldn't contain notes per se. Reverted to the owning account's default folder.", v1, 2u);
  sub_100015EA8();
}

void sub_10040C188(void *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t v8;

  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectID"));
  sub_100015ED0();
  sub_100015F94((void *)&_mh_execute_header, v2, v3, "Unable to find folder to move note to: %@", v4, v5, v6, v7, v8);

  sub_100015F28();
}

void sub_10040C200(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "Using CoreData-CoreSpotlight Integration, not running ICCheckCoreSpotlightClientStateLaunchTask", v1, 2u);
}

void sub_10040C240(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;

  v2 = 138412290;
  v3 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_ERROR, "Error fetching client state from CoreSpotlight: %@", (uint8_t *)&v2, 0xCu);
}

void sub_10040C2B4(os_log_t log)
{
  uint8_t v1[16];

  *(_WORD *)v1 = 0;
  _os_log_fault_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_FAULT, "self.viewControllerManager.noteContainerViewMode should not be ICNoteContainerViewModeUnspecified.", v1, 2u);
}

void sub_10040C2F4(uint64_t a1, NSObject *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = 138412290;
  v4 = v2;
  _os_log_debug_impl((void *)&_mh_execute_header, a2, OS_LOG_TYPE_DEBUG, "%@ deleted all searchable items from index. updating the indexing version to expected version", (uint8_t *)&v3, 0xCu);
}

void sub_10040C36C(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = 138412546;
  v5 = v3;
  v6 = 2112;
  v7 = a2;
  _os_log_error_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_ERROR, "%@ error deleting all searchable items from index: %@", (uint8_t *)&v4, 0x16u);
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_CGImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGImage");
}

id objc_msgSend_CGRectValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGRectValue");
}

id objc_msgSend_CGSizeValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGSizeValue");
}

id objc_msgSend_ICBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICBackgroundColor");
}

id objc_msgSend_ICDarkenedTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICDarkenedTintColor");
}

id objc_msgSend_ICGroupedBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICGroupedBackgroundColor");
}

id objc_msgSend_ICListStatusIndicatorColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICListStatusIndicatorColor");
}

id objc_msgSend_ICRecoverNoteAlertControllerDidRecoverNoteNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICRecoverNoteAlertControllerDidRecoverNoteNotification");
}

id objc_msgSend_ICRecoverNoteAlertControllerWillRecoverNoteNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICRecoverNoteAlertControllerWillRecoverNoteNotification");
}

id objc_msgSend_ICSearchRankingStrategyDisplayNames(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICSearchRankingStrategyDisplayNames");
}

id objc_msgSend_ICTagCollectionViewDidDeleteTagsNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTagCollectionViewDidDeleteTagsNotification");
}

id objc_msgSend_ICTagCollectionViewDidRenameTagNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTagCollectionViewDidRenameTagNotification");
}

id objc_msgSend_ICTagCollectionViewRenameTagOriginalTagObjectIDKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTagCollectionViewRenameTagOriginalTagObjectIDKey");
}

id objc_msgSend_ICTagCollectionViewWillDeleteTagsNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTagCollectionViewWillDeleteTagsNotification");
}

id objc_msgSend_ICTagCollectionViewWillRenameTagNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTagCollectionViewWillRenameTagNotification");
}

id objc_msgSend_ICTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ICTintColor");
}

id objc_msgSend_URIRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URIRepresentation");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLByAppendingPathComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:");
}

id objc_msgSend_URLByAppendingPathComponent_isDirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathComponent:isDirectory:");
}

id objc_msgSend_URLByAppendingPathExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLByAppendingPathExtension:");
}

id objc_msgSend_URLContexts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLContexts");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_URLsForTestDataDirectories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLsForTestDataDirectories");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUID");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__FBSScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_FBSScene");
}

id objc_msgSend__accessibilityHitTest_withEvent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibilityHitTest:withEvent:");
}

id objc_msgSend__accessibleSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessibleSubviews");
}

id objc_msgSend__appearState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appearState");
}

id objc_msgSend__appropriateToSetupSBSceneWithManagedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appropriateToSetupSBSceneWithManagedObjectContext:");
}

id objc_msgSend__backgroundView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundView");
}

id objc_msgSend__canTileSidebarColumn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canTileSidebarColumn:");
}

id objc_msgSend__dataDetectionResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dataDetectionResults");
}

id objc_msgSend__dci_searchSuggestions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dci_searchSuggestions");
}

id objc_msgSend__dci_setSearchSuggestions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dci_setSearchSuggestions:");
}

id objc_msgSend__didEndInteractiveResize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didEndInteractiveResize");
}

id objc_msgSend__findInteraction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_findInteraction");
}

id objc_msgSend__hidEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hidEvent");
}

id objc_msgSend__icaxKeyboardImpl(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_icaxKeyboardImpl");
}

id objc_msgSend__isSecure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSecure");
}

id objc_msgSend__launchOptionsDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchOptionsDictionary");
}

id objc_msgSend__launchTestName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_launchTestName");
}

id objc_msgSend__listInsetGroupedCellConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_listInsetGroupedCellConfiguration");
}

id objc_msgSend__markRefreshAsPendingForCollectionWithId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markRefreshAsPendingForCollectionWithId:");
}

id objc_msgSend__markRefreshAsPendingForStoresList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_markRefreshAsPendingForStoresList");
}

id objc_msgSend__performBatchApplyUsingReloadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performBatchApplyUsingReloadData:");
}

id objc_msgSend__performScrollTest_iterations_delta_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performScrollTest:iterations:delta:");
}

id objc_msgSend__properties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_properties");
}

id objc_msgSend__realtimeCollaborationSessionStateDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_realtimeCollaborationSessionStateDidChange");
}

id objc_msgSend__refreshIsPendingForCollectionWithId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshIsPendingForCollectionWithId:");
}

id objc_msgSend__refreshIsPendingForStoresList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshIsPendingForStoresList");
}

id objc_msgSend__registerSettingsDiffActionArray_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerSettingsDiffActionArray:forKey:");
}

id objc_msgSend__setEditable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEditable:");
}

id objc_msgSend__setEligibleForPrediction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEligibleForPrediction:");
}

id objc_msgSend__setEnabled_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setEnabled:animated:");
}

id objc_msgSend__setFindInteractionEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFindInteractionEnabled:");
}

id objc_msgSend__setFolderSubitemName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setFolderSubitemName:");
}

id objc_msgSend__setHeaderSecondaryImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHeaderSecondaryImage:");
}

id objc_msgSend__setIgnoreBarButtonItemSiblings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIgnoreBarButtonItemSiblings:");
}

id objc_msgSend__setImagePickerSavingOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setImagePickerSavingOptions:");
}

id objc_msgSend__setInputDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInputDelegate:");
}

id objc_msgSend__setInteractionTintColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setInteractionTintColor:");
}

id objc_msgSend__setOverrideContentInsets_forRectEdges_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setOverrideContentInsets:forRectEdges:");
}

id objc_msgSend__setParticipantDetails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setParticipantDetails:");
}

id objc_msgSend__setPrimaryAuxiliarySwitchState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPrimaryAuxiliarySwitchState:");
}

id objc_msgSend__setPrimaryAuxiliarySwitchTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPrimaryAuxiliarySwitchTitle:");
}

id objc_msgSend__setProperties_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setProperties:");
}

id objc_msgSend__setRootFolderTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setRootFolderTitle:");
}

id objc_msgSend__setSupportsTwoLineLargeTitles_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSupportsTwoLineLargeTitles:");
}

id objc_msgSend__setUseShortcutIntrinsicContentSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUseShortcutIntrinsicContentSize:");
}

id objc_msgSend__setWantsFloatingSidebar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setWantsFloatingSidebar:");
}

id objc_msgSend__simulateExpirationForTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulateExpirationForTaskWithIdentifier:");
}

id objc_msgSend__simulateLaunchForTaskWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulateLaunchForTaskWithIdentifier:");
}

id objc_msgSend__simulateScrollWithTranslation_duration_willBeginDragging_didEndDragging_willBeginDecelerating_didEndDecelerating_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_simulateScrollWithTranslation:duration:willBeginDragging:didEndDragging:willBeginDecelerating:didEndDecelerating:");
}

id objc_msgSend__splitViewControllerContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_splitViewControllerContext");
}

id objc_msgSend__systemInteractionTintColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemInteractionTintColor");
}

id objc_msgSend__unmarkRefreshAsPendingForCollectionWithId_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unmarkRefreshAsPendingForCollectionWithId:");
}

id objc_msgSend__unmarkRefreshAsPendingForStoresList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unmarkRefreshAsPendingForStoresList");
}

id objc_msgSend__unregisterSettingsDiffActionArrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unregisterSettingsDiffActionArrayForKey:");
}

id objc_msgSend__visiblePathForBackgroundConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visiblePathForBackgroundConfiguration");
}

id objc_msgSend__visibleSupplementaryViewsOfKind_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_visibleSupplementaryViewsOfKind:");
}

id objc_msgSend__willBeginInteractiveResize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willBeginInteractiveResize");
}

id objc_msgSend__windowHostingScene(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_windowHostingScene");
}

id objc_msgSend__windows(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_windows");
}

id objc_msgSend_aa_updatePropertiesForAppleAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_updatePropertiesForAppleAccount:completion:");
}

id objc_msgSend_absoluteDimension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteDimension:");
}

id objc_msgSend_absoluteHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteHeight");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_acceptNewSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptNewSize:");
}

id objc_msgSend_acceptanceStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptanceStatus");
}

id objc_msgSend_accessibilityActivationPoint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityActivationPoint");
}

id objc_msgSend_accessibilityCustomActionsDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityCustomActionsDelegate");
}

id objc_msgSend_accessibilityHint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityHint");
}

id objc_msgSend_accessibilityLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityLabel");
}

id objc_msgSend_accessibilityTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityTraits");
}

id objc_msgSend_accessibilityValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityValue");
}

id objc_msgSend_accessories(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessories");
}

id objc_msgSend_accompaniedSidebarSubtitleCellConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accompaniedSidebarSubtitleCellConfiguration");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account");
}

id objc_msgSend_accountChangeDelayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountChangeDelayer");
}

id objc_msgSend_accountData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountData");
}

id objc_msgSend_accountDataCreateIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountDataCreateIfNecessary");
}

id objc_msgSend_accountDataForOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountDataForOperation:");
}

id objc_msgSend_accountForAccountIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountForAccountIdentifier:context:");
}

id objc_msgSend_accountID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountID");
}

id objc_msgSend_accountIDsEnabledForNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountIDsEnabledForNotes");
}

id objc_msgSend_accountId(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountId");
}

id objc_msgSend_accountIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountIdentifier");
}

id objc_msgSend_accountMenuWithAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountMenuWithAccounts:");
}

id objc_msgSend_accountName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountName");
}

id objc_msgSend_accountObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountObjectID");
}

id objc_msgSend_accountOverrideInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountOverrideInfo");
}

id objc_msgSend_accountProxy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountProxy");
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStore");
}

id objc_msgSend_accountToAddNewNoteWithTagSelection_modernContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountToAddNewNoteWithTagSelection:modernContext:");
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountType");
}

id objc_msgSend_accountTypeWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeWithAccountTypeIdentifier:");
}

id objc_msgSend_accountUtilities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountUtilities");
}

id objc_msgSend_accountWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithIdentifier:");
}

id objc_msgSend_accountWithIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithIdentifier:context:");
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accounts");
}

id objc_msgSend_accountsFetchedResultsController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsFetchedResultsController");
}

id objc_msgSend_accountsListNeedsUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsListNeedsUpdate");
}

id objc_msgSend_accountsNeedingServerUpgrade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsNeedingServerUpgrade");
}

id objc_msgSend_accountsWithAccountType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsWithAccountType:");
}

id objc_msgSend_accountsWithAccountType_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsWithAccountType:context:");
}

id objc_msgSend_action(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "action");
}

id objc_msgSend_actionBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionBarButtonItem");
}

id objc_msgSend_actionBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionBlock");
}

id objc_msgSend_actionButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionButton");
}

id objc_msgSend_actionButtonItemsForNavBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionButtonItemsForNavBar");
}

id objc_msgSend_actionButtonItemsForToolbar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionButtonItemsForToolbar");
}

id objc_msgSend_actionForDateHeadersType_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionForDateHeadersType:completion:");
}

id objc_msgSend_actionItemTitleForOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionItemTitleForOrder:");
}

id objc_msgSend_actionItemTitleWithDateHeadersType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionItemTitleWithDateHeadersType:");
}

id objc_msgSend_actionName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionName");
}

id objc_msgSend_actionWithDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithDirection:");
}

id objc_msgSend_actionWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithHandler:");
}

id objc_msgSend_actionWithOrder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithOrder:");
}

id objc_msgSend_actionWithTitle_image_identifier_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:image:identifier:handler:");
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:handler:");
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actions");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_activatedConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activatedConstraints");
}

id objc_msgSend_activationConditions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationConditions");
}

id objc_msgSend_activeEditorController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeEditorController");
}

id objc_msgSend_activeVacuum(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeVacuum");
}

id objc_msgSend_activeVacuumQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeVacuumQueue");
}

id objc_msgSend_activityDidFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityDidFinish:");
}

id objc_msgSend_activityImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityImage");
}

id objc_msgSend_activityIndicatorView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityIndicatorView");
}

id objc_msgSend_activityPresentationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityPresentationController");
}

id objc_msgSend_activityStreamNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityStreamNavigationController");
}

id objc_msgSend_activityStreamSelection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityStreamSelection");
}

id objc_msgSend_activityStreamToolbar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityStreamToolbar");
}

id objc_msgSend_activityStreamViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityStreamViewController");
}

id objc_msgSend_activityStreamViewMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityStreamViewMode");
}

id objc_msgSend_activityTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityTitle");
}

id objc_msgSend_activityType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityType");
}

id objc_msgSend_activityViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityViewController");
}

id objc_msgSend_actualChildIndexForSnapshotIndex_inDestinationObjectID_sectionSnapshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actualChildIndexForSnapshotIndex:inDestinationObjectID:sectionSnapshot:");
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAction:");
}

id objc_msgSend_addAnimations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimations:");
}

id objc_msgSend_addAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttachment:");
}

id objc_msgSend_addAttachmentData_mimeType_fileName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttachmentData:mimeType:fileName:");
}

id objc_msgSend_addAttachmentData_typeIdentifier_filename_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttachmentData:typeIdentifier:filename:");
}

id objc_msgSend_addAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttachments:");
}

id objc_msgSend_addAttachmentsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttachmentsObject:");
}

id objc_msgSend_addAudioItemWithTranscription_summarization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAudioItemWithTranscription:summarization:");
}

id objc_msgSend_addBulletedListItemWithTitle_description_image_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBulletedListItemWithTitle:description:image:");
}

id objc_msgSend_addBulletedListItemWithTitle_description_symbolName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBulletedListItemWithTitle:description:symbolName:");
}

id objc_msgSend_addBulletedListItemWithTitle_description_symbolName_linkButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBulletedListItemWithTitle:description:symbolName:linkButton:");
}

id objc_msgSend_addButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButton:");
}

id objc_msgSend_addButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButtonItem");
}

id objc_msgSend_addButtons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButtons");
}

id objc_msgSend_addCallItemWithTranscription_summarization_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCallItemWithTranscription:summarization:");
}

id objc_msgSend_addCharactersInString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCharactersInString:");
}

id objc_msgSend_addChildItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildItem:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addCollapsibleSectionsItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCollapsibleSectionsItem");
}

id objc_msgSend_addCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCompletion:");
}

id objc_msgSend_addConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConstraints:");
}

id objc_msgSend_addConstraintsForSafeAreaLayoutGuide_toContainer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConstraintsForSafeAreaLayoutGuide:toContainer:");
}

id objc_msgSend_addContextProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addContextProvider:");
}

id objc_msgSend_addDependency_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDependency:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addFolderButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFolderButton");
}

id objc_msgSend_addFolderListItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFolderListItem:");
}

id objc_msgSend_addFolders_toAccount_maxNotesInFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFolders:toAccount:maxNotesInFolder:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addHandwrittenNotesItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addHandwrittenNotesItem");
}

id objc_msgSend_addHashtagToNoteBodyIfMissing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addHashtagToNoteBodyIfMissing:");
}

id objc_msgSend_addHighlightItemWithCollapseText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addHighlightItemWithCollapseText:");
}

id objc_msgSend_addImageViewSubview(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addImageViewSubview");
}

id objc_msgSend_addInteraction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addInteraction:");
}

id objc_msgSend_addItemIdentifierIfAppropriate_isEditingCollectionView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItemIdentifierIfAppropriate:isEditingCollectionView:");
}

id objc_msgSend_addItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addItems");
}

id objc_msgSend_addKVOObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addKVOObservers");
}

id objc_msgSend_addLayoutGuide_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLayoutGuide:");
}

id objc_msgSend_addLegacyTombstoneForFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLegacyTombstoneForFolder:");
}

id objc_msgSend_addLegacyTombstoneForNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLegacyTombstoneForNote:");
}

id objc_msgSend_addListItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addListItems");
}

id objc_msgSend_addMathNotesItemCompact_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addMathNotesItemCompact:");
}

id objc_msgSend_addNewNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNewNote");
}

id objc_msgSend_addNewNoteByCopyingNote_toFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNewNoteByCopyingNote:toFolder:");
}

id objc_msgSend_addNoteBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNoteBarButtonItem");
}

id objc_msgSend_addNoteFromAirDropDocument_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNoteFromAirDropDocument:");
}

id objc_msgSend_addNoteFromPlaintextFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNoteFromPlaintextFile:");
}

id objc_msgSend_addNotificationObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addNotificationObservers");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectID_toExcluded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectID:toExcluded:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObservers");
}

id objc_msgSend_addOperation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOperation:");
}

id objc_msgSend_addOrDeleteLocalAccountIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addOrDeleteLocalAccountIfNecessary");
}

id objc_msgSend_addPermanentObservers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPermanentObservers");
}

id objc_msgSend_addPrintFormatter_startingAtPageAtIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPrintFormatter:startingAtPageAtIndex:");
}

id objc_msgSend_addRandomNoteToFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRandomNoteToFolder:");
}

id objc_msgSend_addRecentItemWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRecentItemWithIdentifier:");
}

id objc_msgSend_addReferralDataWithReferringInboundURL_referringApplication_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addReferralDataWithReferringInboundURL:referringApplication:");
}

id objc_msgSend_addResult_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addResult:");
}

id objc_msgSend_addRetranscriptionTaskToQueue_attachmentIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRetranscriptionTaskToQueue:attachmentIdentifier:");
}

id objc_msgSend_addSelectedHashtagsToNewNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSelectedHashtagsToNewNote:");
}

id objc_msgSend_addSizeConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSizeConstraint");
}

id objc_msgSend_addSomeRandomNotes_toFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSomeRandomNotes:toFolder:");
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSublayer:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addSystemPaperImageData_updateFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSystemPaperImageData:updateFirstResponder:");
}

id objc_msgSend_addSystemPaperLink_updateFirstResponder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSystemPaperLink:updateFirstResponder:");
}

id objc_msgSend_addTableAttachmentWithText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTableAttachmentWithText:");
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forControlEvents:");
}

id objc_msgSend_addTextFieldWithConfigurationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTextFieldWithConfigurationHandler:");
}

id objc_msgSend_addTimer_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTimer:forMode:");
}

id objc_msgSend_addTodoListAtEndOfNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTodoListAtEndOfNote");
}

id objc_msgSend_additionalExcludedTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalExcludedTypes");
}

id objc_msgSend_additionalIndexableText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalIndexableText");
}

id objc_msgSend_additionalStep(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionalStep");
}

id objc_msgSend_adjustCollectionViewHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustCollectionViewHeight");
}

id objc_msgSend_adjustContentInsetOfImageScroller_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustContentInsetOfImageScroller:");
}

id objc_msgSend_adjustedContentInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedContentInset");
}

id objc_msgSend_adjustedDestinationFolderForNoteContainer_sourceFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedDestinationFolderForNoteContainer:sourceFolder:");
}

id objc_msgSend_adjustedNumberOfGalleryColumnsForWidth_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adjustedNumberOfGalleryColumnsForWidth:");
}

id objc_msgSend_adoptContainerFromSelectionStateController_oldModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adoptContainerFromSelectionStateController:oldModel:");
}

id objc_msgSend_adoptCurrentModelWithArchive_systemPaperAccountAlert_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adoptCurrentModelWithArchive:systemPaperAccountAlert:completion:");
}

id objc_msgSend_adoptDeferredAnimated_startEditing_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adoptDeferredAnimated:startEditing:");
}

id objc_msgSend_adoptInstantNoteModel_archive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adoptInstantNoteModel:archive:");
}

id objc_msgSend_adoptModel_withArchive_systemPaperAccountAlert_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "adoptModel:withArchive:systemPaperAccountAlert:completion:");
}

id objc_msgSend_airDropActivityItemSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airDropActivityItemSource");
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithTitle:message:preferredStyle:");
}

id objc_msgSend_alertTextField(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertTextField");
}

id objc_msgSend_allAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allAccounts");
}

id objc_msgSend_allAccountsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allAccountsInContext:");
}

id objc_msgSend_allActiveAccountsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allActiveAccountsInContext:");
}

id objc_msgSend_allActiveCloudKitAccountsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allActiveCloudKitAccountsInContext:");
}

id objc_msgSend_allChildObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allChildObjects");
}

id objc_msgSend_allCloudKitAccountsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allCloudKitAccountsInContext:");
}

id objc_msgSend_allDrawings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allDrawings");
}

id objc_msgSend_allICloudACAccounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allICloudACAccounts");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allNotes");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allSections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSections");
}

id objc_msgSend_allSmartFolderObjectIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSmartFolderObjectIDs");
}

id objc_msgSend_allTouches(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allTouches");
}

id objc_msgSend_allTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allTypes");
}

id objc_msgSend_allValues(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allValues");
}

id objc_msgSend_allVirtualSmartFolderIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allVirtualSmartFolderIdentifiers");
}

id objc_msgSend_allVisibleHashtagsInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allVisibleHashtagsInContext:");
}

id objc_msgSend_allVisibleNoteObjectIDsForAccountWithObjectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allVisibleNoteObjectIDsForAccountWithObjectID:");
}

id objc_msgSend_allVisibleNotesForAccountWithObjectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allVisibleNotesForAccountWithObjectID:");
}

id objc_msgSend_allVisibleNotesMatchingPredicate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allVisibleNotesMatchingPredicate:context:");
}

id objc_msgSend_allVisibleNotesMatchingPredicate_sorted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allVisibleNotesMatchingPredicate:sorted:");
}

id objc_msgSend_allZoneIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allZoneIDs");
}

id objc_msgSend_allocWithZone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allocWithZone:");
}

id objc_msgSend_allowNotificationsViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowNotificationsViewController");
}

id objc_msgSend_allowsAttachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsAttachments");
}

id objc_msgSend_allowsCompactSizeMetrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsCompactSizeMetrics");
}

id objc_msgSend_allowsEditing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsEditing");
}

id objc_msgSend_allowsExpandCollapse(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsExpandCollapse");
}

id objc_msgSend_allowsExporting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsExporting");
}

id objc_msgSend_allowsImporting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsImporting");
}

id objc_msgSend_allowsMultipleSelection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsMultipleSelection");
}

id objc_msgSend_allowsRecentlyDeletedFolderAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsRecentlyDeletedFolderAlert");
}

id objc_msgSend_allowsReordering(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsReordering");
}

id objc_msgSend_alphanumericCharacterSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alphanumericCharacterSet");
}

id objc_msgSend_analyticsController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsController");
}

id objc_msgSend_analyticsTrackingActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsTrackingActive");
}

id objc_msgSend_ancestorFolderObjectIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ancestorFolderObjectIDs");
}

id objc_msgSend_andPredicateWithSubpredicates_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "andPredicateWithSubpredicates:");
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animateDeleteTransitionWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateDeleteTransitionWithCompletion:");
}

id objc_msgSend_animateDismissalTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateDismissalTransition:");
}

id objc_msgSend_animatePresentationOrDismissalTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animatePresentationOrDismissalTransition:");
}

id objc_msgSend_animateThumbnailImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateThumbnailImageView");
}

id objc_msgSend_animateWindowFrameReverse_duration_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWindowFrameReverse:duration:completionBlock:");
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:");
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:completion:");
}

id objc_msgSend_animateWithDuration_delay_options_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:delay:options:animations:completion:");
}

id objc_msgSend_animated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animated");
}

id objc_msgSend_animator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animator");
}

id objc_msgSend_announceMoveToDestination_delay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "announceMoveToDestination:delay:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_appDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appDelegate");
}

id objc_msgSend_appLifeCycleHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appLifeCycleHandler");
}

id objc_msgSend_appSessionDidTerminate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appSessionDidTerminate");
}

id objc_msgSend_appShortcutsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appShortcutsEnabled");
}

id objc_msgSend_appStoreRatingObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appStoreRatingObserver");
}

id objc_msgSend_appURLForFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForFolder:");
}

id objc_msgSend_appURLForHTMLFolder_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForHTMLFolder:");
}

id objc_msgSend_appURLForHTMLNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForHTMLNote:");
}

id objc_msgSend_appURLForNote_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForNote:");
}

id objc_msgSend_appURLForShowSmartFoldersHelp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appURLForShowSmartFoldersHelp");
}

id objc_msgSend_appearanceInfoWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appearanceInfoWithType:");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendItemsWithIdentifiers_intoSectionWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendItemsWithIdentifiers:intoSectionWithIdentifier:");
}

id objc_msgSend_appendSectionsWithIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendSectionsWithIdentifiers:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_application_didFinishLaunchingWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "application:didFinishLaunchingWithOptions:");
}

id objc_msgSend_applicationDataContainerURLForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDataContainerURLForAccountIdentifier:");
}

id objc_msgSend_applicationDidEnterBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDidEnterBackground");
}

id objc_msgSend_applicationDidEnterBackground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDidEnterBackground:");
}

id objc_msgSend_applicationDidFinishLaunching(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDidFinishLaunching");
}

id objc_msgSend_applicationDocumentsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDocumentsURL");
}

id objc_msgSend_applicationDocumentsURLForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationDocumentsURLForAccountIdentifier:");
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationState");
}

id objc_msgSend_applicationWillEnterForeground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWillEnterForeground");
}

id objc_msgSend_applicationWillEnterForeground_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWillEnterForeground:");
}

id objc_msgSend_applicationWillTerminate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWillTerminate");
}

id objc_msgSend_applicationWillTerminate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationWillTerminate:");
}

id objc_msgSend_applyAccessibilityInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyAccessibilityInfo");
}

id objc_msgSend_applyAndUpdateHeaders_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyAndUpdateHeaders:animated:");
}

id objc_msgSend_applyArchiveDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyArchiveDictionary:");
}

id objc_msgSend_applyDateHeadersType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyDateHeadersType:");
}

id objc_msgSend_applyNoteViewModesToStateRestoreArchive_withContainerItemID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyNoteViewModesToStateRestoreArchive:withContainerItemID:");
}

id objc_msgSend_applyScrollStateFromArchive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyScrollStateFromArchive:");
}

id objc_msgSend_applySnapshot_animatingDifferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySnapshot:animatingDifferences:");
}

id objc_msgSend_applySnapshot_toSection_animatingDifferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySnapshot:toSection:animatingDifferences:");
}

id objc_msgSend_applySnapshotUsingReloadData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySnapshotUsingReloadData:");
}

id objc_msgSend_applyStateRestoreArchive_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyStateRestoreArchive:completion:");
}

id objc_msgSend_archiveDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveDictionary");
}

id objc_msgSend_archiveExporter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveExporter");
}

id objc_msgSend_archiveForLaunchingPPT(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveForLaunchingPPT");
}

id objc_msgSend_archiveForURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveForURL:");
}

id objc_msgSend_archiveForUserActivities_isSourceApplicationExternal_lastSavedArchive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveForUserActivities:isSourceApplicationExternal:lastSavedArchive:");
}

id objc_msgSend_archiveIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveIdentifier");
}

id objc_msgSend_archiveImporter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archiveImporter");
}

id objc_msgSend_arguments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arguments");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObject:");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayByExcludingObjectsInArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByExcludingObjectsInArray:");
}

id objc_msgSend_arrayForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayForKey:");
}

id objc_msgSend_arrayWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_ascender(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ascender");
}

id objc_msgSend_aspectRatio(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aspectRatio");
}

id objc_msgSend_associateWindowScene_withURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associateWindowScene:withURL:");
}

id objc_msgSend_associatedCellsForItemIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associatedCellsForItemIdentifiers:");
}

id objc_msgSend_associatedNoteParticipants(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associatedNoteParticipants");
}

id objc_msgSend_associatedObjectIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "associatedObjectIdentifier");
}

id objc_msgSend_attachment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachment");
}

id objc_msgSend_attachmentAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentAtIndexPath:");
}

id objc_msgSend_attachmentBrickView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentBrickView");
}

id objc_msgSend_attachmentContentIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentContentIDs");
}

id objc_msgSend_attachmentDataWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentDataWithError:");
}

id objc_msgSend_attachmentDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentDidChange");
}

id objc_msgSend_attachmentDirectoryURLForAttachmentObjectID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentDirectoryURLForAttachmentObjectID:error:");
}

id objc_msgSend_attachmentForTranscriptionDonationURL_managedObjectContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentForTranscriptionDonationURL:managedObjectContext:");
}

id objc_msgSend_attachmentIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentIdentifier");
}

id objc_msgSend_attachmentIdentifierFromQuickNoteURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentIdentifierFromQuickNoteURL:");
}

id objc_msgSend_attachmentImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentImageView");
}

id objc_msgSend_attachmentInfoAtRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentInfoAtRow:");
}

id objc_msgSend_attachmentInfoCellAtRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentInfoCellAtRow:");
}

id objc_msgSend_attachmentInfoTypeAtRow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentInfoTypeAtRow:");
}

id objc_msgSend_attachmentModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentModel");
}

id objc_msgSend_attachmentPresentationOccurencesForPreviewingWithManagedInterface_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentPresentationOccurencesForPreviewingWithManagedInterface:");
}

id objc_msgSend_attachmentPresentations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentPresentations");
}

id objc_msgSend_attachmentPresentationsForAttachments_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentPresentationsForAttachments:");
}

id objc_msgSend_attachmentPresenter_transitionViewForAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentPresenter:transitionViewForAttachment:");
}

id objc_msgSend_attachmentPreviewImageWithMinSize_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentPreviewImageWithMinSize:scale:");
}

id objc_msgSend_attachmentResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentResults");
}

id objc_msgSend_attachmentSection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentSection");
}

id objc_msgSend_attachmentSectionForLayoutEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentSectionForLayoutEnvironment:");
}

id objc_msgSend_attachmentSectionSortOrder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentSectionSortOrder");
}

id objc_msgSend_attachmentType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentType");
}

id objc_msgSend_attachmentUniqueIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentUniqueIdentifiers");
}

id objc_msgSend_attachmentViewType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentViewType");
}

id objc_msgSend_attachmentWithContentID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentWithContentID:context:");
}

id objc_msgSend_attachmentWithIdentifier_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentWithIdentifier:context:");
}

id objc_msgSend_attachmentWithIdentifier_includeDeleted_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentWithIdentifier:includeDeleted:context:");
}

id objc_msgSend_attachments(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachments");
}

id objc_msgSend_attachmentsMatchingPredicate_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentsMatchingPredicate:context:");
}

id objc_msgSend_attachmentsToPreviewWhenSelectingAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentsToPreviewWhenSelectingAttachment:");
}

id objc_msgSend_attachmentsWithUTType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attachmentsWithUTType:");
}

id objc_msgSend_attributeDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeDictionary");
}

id objc_msgSend_attributeSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeSet");
}

id objc_msgSend_attributedStringFromHTMLString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringFromHTMLString:");
}

id objc_msgSend_attributedStringWithString_font_color_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedStringWithString:font:color:");
}

id objc_msgSend_attributedSubstringFromRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedSubstringFromRange:");
}

id objc_msgSend_attributedSummaryWithBaseAttributes_highlightColor_insideFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedSummaryWithBaseAttributes:highlightColor:insideFrame:");
}

id objc_msgSend_attributedTitleWithBaseAttributes_highlightColor_insideFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedTitleWithBaseAttributes:highlightColor:insideFrame:");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributes");
}

id objc_msgSend_attributionSidebarController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributionSidebarController");
}

id objc_msgSend_attributionSidebarVisibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributionSidebarVisibility");
}

id objc_msgSend_audioDocument(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioDocument");
}

id objc_msgSend_audioModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioModel");
}

id objc_msgSend_audioRecordingSupport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audioRecordingSupport");
}

id objc_msgSend_audiovisualTypes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "audiovisualTypes");
}

id objc_msgSend_authenticateIfNeededWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateIfNeededWithCompletion:");
}

id objc_msgSend_authenticateWithPrompt_displayWindow_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithPrompt:displayWindow:completionHandler:");
}

id objc_msgSend_authorHighlightsUpdater(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorHighlightsUpdater");
}

id objc_msgSend_authorizationStatus(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authorizationStatus");
}

id objc_msgSend_autoCollapsedFolderObjectID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoCollapsedFolderObjectID");
}

id objc_msgSend_autoSortSelectionChangeCountForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoSortSelectionChangeCountForState:");
}

id objc_msgSend_autosaveTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autosaveTimer");
}

id objc_msgSend_auxiliaryResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "auxiliaryResponder");
}

id objc_msgSend_availableConfigurationURLs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableConfigurationURLs");
}

id objc_msgSend_availableMediaTypesForSourceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableMediaTypesForSourceType:");
}

id objc_msgSend_availableWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableWidth");
}

id objc_msgSend_availableWidthForSummaryView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableWidthForSummaryView");
}

id objc_msgSend_backToNotesWithKeyboard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backToNotesWithKeyboard");
}

id objc_msgSend_backgroundBottomMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundBottomMargin");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_backgroundImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundImageView");
}

id objc_msgSend_backgroundNoteContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundNoteContext");
}

id objc_msgSend_backgroundTasks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundTasks");
}

id objc_msgSend_backgroundTimeRemaining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundTimeRemaining");
}

id objc_msgSend_backgroundTopMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundTopMargin");
}

id objc_msgSend_backgroundView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundView");
}

id objc_msgSend_barButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "barButtonItem");
}

id objc_msgSend_base64EncodedDataWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedDataWithOptions:");
}

id objc_msgSend_baseHTMLString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseHTMLString");
}

id objc_msgSend_basicAccountIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "basicAccountIdentifier");
}

id objc_msgSend_batchSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batchSize");
}

id objc_msgSend_becomeCurrent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeCurrent");
}

id objc_msgSend_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeFirstResponder");
}

id objc_msgSend_begin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "begin");
}

id objc_msgSend_beginBackgroundTaskWithName_expirationHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginBackgroundTaskWithName:expirationHandler:");
}

id objc_msgSend_beginSessionWithNoteEditorViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginSessionWithNoteEditorViewController:");
}

id objc_msgSend_beginUndoGrouping(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginUndoGrouping");
}

id objc_msgSend_behavior(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "behavior");
}

id objc_msgSend_bellBackgroundView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bellBackgroundView");
}

id objc_msgSend_bellImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bellImageView");
}

id objc_msgSend_bezierPathWithRoundedRect_cornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bezierPathWithRoundedRect:cornerRadius:");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_boldButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boldButton");
}

id objc_msgSend_boldSystemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boldSystemFontOfSize:");
}

id objc_msgSend_bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_borderlessButtonConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "borderlessButtonConfiguration");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bottomConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomConstraint");
}

id objc_msgSend_bottomGradient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomGradient");
}

id objc_msgSend_bottomLabelConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomLabelConstraint");
}

id objc_msgSend_bottomThumbnailConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomThumbnailConstraints");
}

id objc_msgSend_bottomToolbar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomToolbar");
}

id objc_msgSend_bottomView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomView");
}

id objc_msgSend_boundarySupplementaryItemWithLayoutSize_elementKind_alignment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundarySupplementaryItemWithLayoutSize:elementKind:alignment:");
}

id objc_msgSend_boundingRectWithSize_options_attributes_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boundingRectWithSize:options:attributes:context:");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_bringSubviewToFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bringSubviewToFront:");
}

id objc_msgSend_bringUpKeyboard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bringUpKeyboard");
}

id objc_msgSend_browseAttachmentsCell_didSelectAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browseAttachmentsCell:didSelectAttachment:");
}

id objc_msgSend_browseAttachmentsCell_shouldInspectAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browseAttachmentsCell:shouldInspectAttachment:");
}

id objc_msgSend_browseAttachmentsCell_shouldShareAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browseAttachmentsCell:shouldShareAttachment:");
}

id objc_msgSend_browseAttachmentsCollectionView_cell_shouldShareAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browseAttachmentsCollectionView:cell:shouldShareAttachment:");
}

id objc_msgSend_browseAttachmentsCollectionView_didSelectAttachment_indexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browseAttachmentsCollectionView:didSelectAttachment:indexPath:");
}

id objc_msgSend_browseAttachmentsCollectionView_shouldInspectAttachment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browseAttachmentsCollectionView:shouldInspectAttachment:");
}

id objc_msgSend_browserDidCloseHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "browserDidCloseHandler");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleIdentifierForPages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifierForPages");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_buttonElement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonElement");
}

id objc_msgSend_buttonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonItem");
}

id objc_msgSend_buttonMarginConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonMarginConstraints");
}

id objc_msgSend_buttonTitleTextAttributesTransformerWithTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonTitleTextAttributesTransformerWithTextStyle:");
}

id objc_msgSend_buttonTray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonTray");
}

id objc_msgSend_buttonWithConfiguration_primaryAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonWithConfiguration:primaryAction:");
}

id objc_msgSend_buttonWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonWithType:");
}

id objc_msgSend_bytes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytes");
}

id objc_msgSend_cachedMainKeyForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedMainKeyForObject:");
}

id objc_msgSend_callRecordingEndedWithNoteID_recordingID_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callRecordingEndedWithNoteID:recordingID:context:");
}

id objc_msgSend_callRecordingSupport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callRecordingSupport");
}

id objc_msgSend_canAddNewNoteToSelectedContainers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAddNewNoteToSelectedContainers");
}

id objc_msgSend_canAddNote(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAddNote");
}

id objc_msgSend_canAddSubfolder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAddSubfolder");
}

id objc_msgSend_canAssignTags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canAssignTags");
}

id objc_msgSend_canBeShared(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBeShared");
}

id objc_msgSend_canBeSharedViaICloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBeSharedViaICloud");
}

id objc_msgSend_canBecomeFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBecomeFirstResponder");
}

id objc_msgSend_canBeginEditingForNoteDisplayController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canBeginEditingForNoteDisplayController:");
}

id objc_msgSend_canCancelAlertType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canCancelAlertType:");
}

id objc_msgSend_canClear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canClear:");
}

id objc_msgSend_canCollapseSectionsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canCollapseSectionsInRange:");
}

id objc_msgSend_canCopy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canCopy:");
}

id objc_msgSend_canCurrentUserShare(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canCurrentUserShare");
}

id objc_msgSend_canDeferDismissal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canDeferDismissal");
}

id objc_msgSend_canDeleteNotes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canDeleteNotes");
}

id objc_msgSend_canExpandSectionsInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canExpandSectionsInRange:");
}

id objc_msgSend_canFocusItemAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canFocusItemAtIndexPath:");
}

id objc_msgSend_canLaunchPages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canLaunchPages");
}

